name: "T1558.001: Golden Ticket"
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps analysts investigate whether an adversary has forged Kerberos tickets (i.e., a "Golden Ticket") to gain unauthorized credential access within a network. The investigation focuses on identifying several key indicators of this activity. These indicators include: the execution of known credential dumping or ticket forging tools (e.g., Mimikatz) on Domain Controllers; the use of weak or deprecated RC4-HMAC encryption in Kerberos ticket requests; the presence of Kerberos service ticket (TGS) requests without a corresponding preceding ticket-granting-ticket (TGT) request; TGT requests with abnormally long lifetimes that violate domain policy; a burst of network logons from a single account to an unusually high number of hosts, indicating rapid lateral movement; and the malicious injection of high-privilege group SIDs into the SID-History field of a ticket to escalate privileges.
type: technique
related:
  - "TA0006: Credential Access"
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known malicious credential dumping or ticket forging tools being executed on Domain Controllers?
    context: |
      This question seeks to identify the most direct evidence of a Golden Ticket attack: the execution of the tools required to create one. By monitoring process creation events on critical Domain Controllers and comparing executable hashes against a list of known malicious tools like Mimikatz or Rubeus, we can generate a high-confidence alert. An exact match is a strong indicator of compromise.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: SEARCH process_creation_events ON Domain Controllers WHERE hash IN (known_malicious_hashes_list)."
  - question: Are there process creation events on Domain Controllers with unusually high entropy in their names or arguments, suggesting obfuscation?
    context: |
      Adversaries often obfuscate the names and command-line arguments of their tools to evade simple signature-based detection. This question uses a statistical approach to find such evasion. By establishing a baseline for the normal complexity (entropy) of process names and arguments on Domain Controllers, we can flag outliers. A process in the 99th percentile of entropy could represent a packed or randomized malicious tool.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: SEARCH process_creation_events ON Domain Controllers | CALCULATE entropy(process_name, command_line) | ALERT where entropy > baseline_99th_percentile."
  - question: Can a machine learning model identify process creation events on Domain Controllers that are characteristic of credential dumping activity?
    context: |
      This question leverages machine learning to detect more subtle or novel credential dumping tools. A classification model can be trained on a rich set of features from process events (e.g., parent process, user context, path rarity, argument structure) to learn the difference between benign administrative activity and malicious behavior. Scoring all new process events in real-time provides a sophisticated, behavior-based detection method that goes beyond simple hashes or entropy.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 1"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR new_process_event ON Domain Controllers | EXTRACT features (parent_process, user, path, etc.) | SCORE with classification_model | ALERT if score > malicious_threshold."
  - question: Are any Kerberos tickets being requested using the weak and deprecated RC4-HMAC encryption type?
    context: |
      This question targets a common artifact of Golden Ticket creation tools. Forged tickets often default to using the RC4-HMAC cipher ('0x17'), which is weak and no longer standard in modern Windows environments. Monitoring Kerberos authentication logs (Event IDs 4768 and 4769) on Domain Controllers for this specific encryption type provides a high-fidelity indicator of malicious activity, especially if the request is for a privileged account.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: SEARCH kerberos_auth_events ON Domain Controllers WHERE encryption_type = '0x17' OR encryption_type = 'RC4-HMAC'."
  - question: Are any user accounts suddenly using Kerberos encryption types that deviate from their established baseline behavior?
    context: |
      This question aims to detect anomalous behavior on a per-user basis. While some legacy systems might still use RC4, a specific user, particularly a privileged one, suddenly using it when they have never done so before is highly suspicious. By baselining the typical encryption types used by each account, we can alert on deviations that may signal an account compromise and ticket forgery, even if the encryption type itself isn't universally banned.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each user | BASELINE encryption_types over 30 days | SEARCH new_kerberos_auth_events | ALERT if user_account AND encryption_type NOT IN user_baseline."
  - question: Can an anomaly detection model identify statistically improbable Kerberos ticket requests?
    context: |
      This question uses a machine learning model to find complex anomalies that combine multiple factors. A request might not be suspicious based on any single attribute, but the combination of user, source IP, requested service, and encryption type might be highly unusual. An anomaly detection model can learn the normal relationships between these features and flag requests that are statistical outliers, indicating a potential forged ticket.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR new_kerberos_request | EXTRACT features (user, service, client_ip, encryption_type) | SCORE with anomaly_detection_model | ALERT if score indicates anomaly."
  - question: Are there any Kerberos service ticket (TGS) requests from clients that did not previously obtain a ticket-granting-ticket (TGT)?
    context: |
      This question looks for a logical inconsistency in the Kerberos protocol, a hallmark of a Pass-the-Ticket or forged Golden Ticket attack. A legitimate client must first authenticate to the KDC with a TGT request (AS-REQ) to get a TGT before it can request a service ticket (TGS-REQ). By performing a stateful check, we can alert whenever a TGS request appears without a recent, corresponding TGT request from the same client for the same user, which strongly suggests the TGT was stolen or forged.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: ON TGS_request(user, client_ip) | SEARCH for TGT_request(user, client_ip) within last 10 hours | ALERT if no TGT_request found."
  - question: Are any client IP addresses showing a statistically anomalous ratio of TGS requests to TGT requests?
    context: |
      This question uses a statistical approach to find the same behavior as the symbolic check. A host that is using a stolen or forged ticket will generate many TGS requests for different services but will have very few (or zero) TGT requests. By baselining the normal ratio of TGT to TGS requests for each client, a sudden drop in this ratio can serve as a statistical indicator of Pass-the-Ticket or Golden Ticket activity.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each client_ip | CALCULATE TGT:TGS ratio over 24 hours | ALERT if ratio drops significantly from baseline."
  - question: Can a time-series analysis model detect anomalous sequences of Kerberos events for a user account?
    context: |
      This question applies machine learning to model the temporal patterns of user authentication. A time-series model can learn the normal cadence and sequence of a user's TGT and TGS requests. The model can then flag a sequence as anomalous if it violates these learned patterns, such as a TGS request appearing without a preceding TGT request within the expected timeframe, providing a sophisticated method for detecting forged ticket usage.
    answer_sources:
      - "Windows Event ID 4768"
      - "Windows Event ID 4769"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each user | INPUT sequence of Kerberos events into time-series_model | ALERT if model flags current sequence as a temporal anomaly."
  - question: Are any Kerberos TGTs being requested with a lifetime that exceeds the domain policy or matches known forged values?
    context: |
      This question looks for a clear policy violation that is a strong indicator of a forged Golden Ticket. Adversaries often create tickets with extremely long lifetimes (e.g., 10 years, or 3650 days) to ensure persistent access. By comparing the 'Ticket Lifetime' in every TGT request (Event ID 4768) against the configured domain maximum, we can create a critical alert for any request that exceeds the policy, as this is not possible through legitimate means.
    answer_sources:
      - "Windows Event ID 4768"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: ON TGT_request | EXTRACT requested_lifetime | GET domain_max_lifetime | ALERT if requested_lifetime > domain_max_lifetime."
  - question: Are there any TGT requests with statistically outlier ticket lifetimes?
    context: |
      This question provides a statistical safety net for cases where a forged ticket might use a long lifetime that is not the common 10-year value. By calculating the normal distribution of ticket lifetimes across the domain, we can flag any request that is a significant statistical outlier (e.g., more than 3 standard deviations from the mean). This can help detect unusually long-lived tickets that might otherwise be missed by a simple check against the maximum policy.
    answer_sources:
      - "Windows Event ID 4768"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: SEARCH TGT_requests | CALCULATE mean and std_dev of lifetimes | ALERT if new_request_lifetime > (mean + 3*std_dev)."
  - question: Can a clustering model identify anomalous TGT requests based on lifetime and other features?
    context: |
      This question uses an unsupervised machine learning approach to find anomalous requests without pre-defined rules. A clustering algorithm can group TGT requests based on features like requested lifetime, source IP, and user account. Normal, legitimate requests will form dense clusters. A forged ticket request with an unusually long lifetime will likely not fit into any cluster and will be flagged as a 'noise' point or anomaly, providing a robust detection method.
    answer_sources:
      - "Windows Event ID 4768"
      - "Zeek kerberos.log"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: INPUT TGT_requests with features (lifetime, client_ip, user) into clustering_model | ALERT on requests flagged as noise/anomalies."
  - question: Has any non-service account authenticated to an abnormally high number of distinct hosts within a short time window?
    context: |
      This question aims to detect the primary goal of a Golden Ticket: widespread lateral movement. After forging a ticket, an adversary will often use it to access numerous systems. By setting a static threshold (e.g., successful network logons to more than 20 hosts in one hour), we can create a simple but effective tripwire to alert on this rapid, widespread access pattern, which is highly uncharacteristic of normal user behavior.
    answer_sources:
      - "Windows Event ID 4624"
      - "Zeek conn.log"
      - "All servers and workstations"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each user, per hour | COUNT distinct destination_hosts for network_logons (Logon Type 3) | ALERT if count > 20."
  - question: Is any user account accessing a number of distinct hosts that significantly exceeds its own historical baseline?
    context: |
      This question refines the detection of lateral movement by creating a dynamic, per-user baseline. Different users have different work patterns; an administrator might legitimately access more hosts than a typical user. By establishing a baseline for each user (e.g., the 95th percentile of hosts accessed per hour) and alerting when they exceed it, we can create a more accurate alert that is tailored to individual behavior, reducing false positives while detecting anomalous activity for that specific user.
    answer_sources:
      - "Windows Event ID 4624"
      - "Zeek conn.log"
      - "All servers and workstations"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each user | BASELINE 95th_percentile of distinct_hosts_per_hour | MONITOR new hourly activity | ALERT if distinct_hosts > user_baseline."
  - question: Can a graph analysis model detect anomalous patterns of lateral movement by a user?
    context: |
      This question employs a sophisticated graph-based model to understand the context and pattern of lateral movement. Instead of just counting hosts, this model analyzes the relationships between systems. It can learn a user's typical 'neighborhood' of servers and detect when they suddenly move to a new, disconnected part of the network (e.g., from HR servers to a cluster of Domain Controllers). This approach can detect targeted lateral movement that might not trigger a simple count-based alert.
    answer_sources:
      - "Windows Event ID 4624"
      - "Zeek conn.log"
      - "All servers and workstations"
    range: "last 90 days"
    queries:
      - "Pseudocode: MODEL authentications as a time-series graph | FOR new user authentications | SCORE connection against user's learned graph pattern | ALERT if anomaly is detected (e.g., access to new cluster, high velocity)."
  - question: Are any Kerberos service tickets being requested where SID-History is used to inject a high-privilege group SID?
    context: |
      This question targets a specific, high-confidence technique for privilege escalation using a Golden Ticket. Adversaries can forge a ticket for a low-privilege user but inject the SID of a group like Enterprise Admins or Domain Admins into the SID-History field. This grants the ticket the privileges of that group. Monitoring TGS requests (Event ID 4769) for the presence of these high-privilege SIDs in the 'Transited Services' field provides a direct and reliable indicator of a malicious Golden Ticket.
    answer_sources:
      - "Windows Event ID 4769"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: SEARCH TGS_requests ON Domain Controllers | WHERE 'Transited Services' is not empty | ALERT if 'Transited Services' contains high_privilege_SID (e.g., '-512', '-519')."
  - question: Is any user account leveraging a SID in their SID-History that has not been seen in their baseline?
    context: |
      This question provides a way to detect anomalous SID-History usage even if the SID isn't from a well-known privileged group. SID-History is typically only populated legitimately during a domain migration. By establishing a baseline of known, legitimate SIDs for each user (which for most users will be an empty set), we can alert whenever a TGS request appears with a new, unexpected SID in the history. This detects deviation from an established norm for that specific user.
    answer_sources:
      - "Windows Event ID 4769"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: FOR each user | BASELINE legitimate SIDs in SID-History | ON TGS_request | ALERT if SID in 'Transited Services' is not in user's baseline."
  - question: Can a classification model score TGS requests to identify malicious use of SID-History?
    context: |
      This question uses a supervised machine learning model to score the likelihood that SID-History usage is malicious. The model can be trained on features like the user account, the target service, the rarity of the SID being injected, and whether SID-History is expected for that user. By training the model on both legitimate (e.g., post-migration) and known-malicious examples, it can provide a nuanced score for new events, helping to prioritize the most suspicious instances of SID-History abuse.
    answer_sources:
      - "Windows Event ID 4769"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "Pseudocode: ON TGS_request with SID-History | EXTRACT features (user, service, SID_rarity) | SCORE with classification_model | ALERT if score > malicious_threshold."