name: "T1222.002: Linux and Mac File and Directory Permissions Modification"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps investigate whether an adversary is attempting to evade defenses by modifying file or directory permissions on Linux or macOS systems. This involves looking for suspicious use of commands like 'chmod', 'chown', and 'chattr' to alter permissions, change ownership, or make files immutable. It also focuses on detecting high-volume, scripted permission changes that might indicate automated malicious activity. The goal is to identify unauthorized modifications that could conceal malware, prevent system recovery, or grant persistence."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Have any high-risk chmod or chown commands been executed, especially by web servers or low-privileged users?"
    context: "Adversaries often use `chmod` or `chown` to weaken security settings. This question focuses on detecting specific high-risk patterns, such as granting universal permissions (e.g., 777) or changing ownership of critical system files. It's particularly suspicious if these actions are initiated by processes that shouldn't be modifying permissions, like a web server, or by users with limited privileges, as this could indicate a compromised process or privilege escalation."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Named Areas of Interest: Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_logs WHERE command_line MATCHES 'chmod .* (777|666|u+s|g+s)' OR command_line MATCHES 'chown .* /etc/' AND parent_process IN ('apache2', 'nginx', 'php-fpm') OR user_privilege IS 'low'"
  - question: "Is there an anomalous frequency of chmod or chown executions by any user or host, or a sudden drop in parent process entropy?"
    context: "Beyond looking at single commands, this question aims to detect abnormal behavior over time. A sudden spike in `chmod` or `chown` activity by a user, compared to their own or their peers' baseline, can indicate malicious scripting. A sharp decrease in the variety of parent processes calling these commands suggests a single, repetitive script is at work, which is often a sign of automated adversary tools."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Named Areas of Interest: Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each user, CALCULATE baseline of chmod/chown frequency. ALERT if current_frequency > 99th_percentile(historical_frequency). THEN, for each user, CALCULATE entropy of parent_process names. ALERT if entropy drops significantly."
  - question: "Have any anomalous chmod or chown executions been detected by the Isolation Forest model, and are they correlated with new network connections?"
    context: "This question uses a machine learning approach (Isolation Forest) to find outlier `chmod`/`chown` events that don't fit normal patterns. It considers features like the user, parent process, target path, and time of day. An event flagged as an anomaly is even more suspicious if it is immediately followed by network connections to a new, previously unseen external IP address, as this could indicate data exfiltration or C2 communication following a defense evasion action."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Named Areas of Interest: Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SCORE new chmod/chown events with Isolation Forest model. FOR high-scoring events, CHECK for outbound network connections from the same host to a new IP within 5 minutes. ALERT on match."
  - question: "Has the chattr command been used to make files immutable or append-only outside of approved administrative scripts or directories?"
    context: "Adversaries can use `chattr +i` (immutable) or `chattr +a` (append-only) to protect their malicious files from being removed or to prevent system logs from being altered. This question looks for any use of these commands that isn't part of a known, legitimate administrative task (e.g., run by Ansible/Puppet) or doesn't target an expected directory (e.g., log rotation scripts). Unapproved use is a strong indicator of malicious persistence or anti-forensic activity."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "Named Areas of Interest: System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH process_creation_logs WHERE command_line MATCHES 'chattr .*(+i|+a).*' AND target_path NOT IN (allow_list) AND parent_process NOT IN ('ansible', 'puppet'). ALERT on match."
  - question: "Has chattr been used on a file in a rare or previously unseen directory location?"
    context: "Legitimate use of `chattr` tends to occur in predictable system directories. This question aims to detect when `chattr` is used in an unusual location. By comparing the target file's directory to a historical baseline of all directories where `chattr` has been used before, a low similarity score can highlight an execution in a novel and therefore suspicious path, potentially where an adversary has staged tools or malware."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "Named Areas of Interest: System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each new 'chattr' event, GET target_directory. CALCULATE Jaccard similarity between target_directory and all historical_chattr_directories. ALERT if similarity < 0.1."
  - question: "Have any chattr executions been flagged as anomalous by the one-class SVM model, and were they preceded by a recent file write?"
    context: "This question employs a one-class SVM model to identify `chattr` executions that deviate from established normal behavior, based on features like the user, process, and file characteristics. An anomaly score by itself is suspicious, but its significance is greatly increased if the same process wrote to the target file just before making it immutable. This pattern strongly suggests an adversary dropped a malicious file and is now locking it to prevent removal."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "Named Areas of Interest: System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SCORE new 'chattr' events with one-class SVM model. FOR anomalous events, CHECK for file_write events to the same target_path by the same process_id just before the 'chattr' event. ALERT on match."
  - question: "Has a single process generated a high volume (over 100) of permission or ownership modification syscalls within a 1-minute window?"
    context: "A large number of permission changes (`chmod`, `chown`, etc.) executed by a single process in a short time is highly indicative of a malicious script. Legitimate system operations rarely perform such bulk changes so rapidly. This question aims to catch these 'storm' events by counting relevant syscalls per process over a 1-minute window, especially when the changes are concentrated within a common directory."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Named Areas of Interest: Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "GROUP syscalls by process_id over 1-minute windows. COUNT 'chmod', 'fchmod*', 'chown*' syscalls. ALERT if count > 100 AND target files share a common parent directory."
  - question: "Has there been a statistically significant spike in file modification syscalls on any host, concentrated within a single directory?"
    context: "This question looks for statistical anomalies in the rate of file permission modifications on a host. A sudden burst of activity that is several standard deviations above the normal rolling average is a red flag. The signal is made stronger by using the Gini coefficient to measure if these modifications are focused on a single directory. A low Gini coefficient means high concentration, pointing to a targeted, scripted attack rather than random, system-wide activity."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Named Areas of Interest: Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "CALCULATE rolling average and standard deviation of file modification syscalls per minute. ALERT if current_minute_count > (average + 4 * std_dev). THEN, CALCULATE Gini coefficient for target parent directories. PRIORITIZE alert if Gini is near 0."
  - question: "Does DBSCAN clustering reveal a dense group of file modification events from a non-system process, and does that process show signs of C2 communication?"
    context: "This question uses the DBSCAN clustering algorithm to find dense pockets of activity in time. A tight cluster of file modification events, all linked to the same process, suggests a rapid, automated script. If this process is not a known system utility (like a package manager), it is highly suspicious. The investigation is further prioritized by correlating the process with any network traffic that has a regular, 'heartbeat' pattern, which is a common characteristic of command-and-control (C2) channels."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Named Areas of Interest: Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "RUN DBSCAN on file modification events over 10-minute windows. IDENTIFY dense clusters from non-system processes. FOR process_id in cluster, SEARCH network logs for periodic 'heartbeat' connections from the same host. ALERT on match."