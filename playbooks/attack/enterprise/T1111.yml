name: T1111: Multi-Factor Authentication Interception
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversary attempts to intercept or bypass multi-factor authentication (MFA) to gain credentialed access. It covers multiple detection vectors, including identifying connections to known Adversary-in-the-Middle (AiTM) phishing infrastructure, recognizing client-side artifacts and fingerprints of AiTM toolkits, monitoring for on-host credential theft tools, detecting MFA fatigue or prompt-bombing attacks, identifying high-risk actions following an anomalous login, and flagging impossible travel scenarios indicative of concurrent credential use.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are endpoints connecting to known Adversary-in-the-Middle (AiTM) phishing domains or IPs?
  context: This question aims to detect direct connections to malicious infrastructure identified by high-confidence threat intelligence. A match provides a strong indicator of an ongoing AiTM phishing attempt where an endpoint is being directed to a malicious proxy server designed to steal credentials and session tokens.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network logs (Zeek conn, dns, http) WHERE destination IP, DNS query, or HTTP host header IN known_AiTM_phishing_IOC_feed. GENERATE high-severity alert.
- question: Are endpoints communicating with suspicious domains exhibiting high entropy or unusual character patterns, potentially indicating algorithmically generated AiTM subdomains?
  context: This question helps discover previously unknown or dynamically generated phishing domains that evade threat intelligence feeds. Attackers often use domain generation algorithms (DGAs) for their infrastructure. Looking for statistical anomalies like high entropy in subdomain names can uncover these algorithmically generated domains used in AiTM attacks.
  answer_sources:
  - Zeek dns.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE entropy and character frequency for all subdomains in DNS logs. ALERT where entropy or character distribution > 3 standard deviations from baseline.
- question: Can we identify potential AiTM phishing sites by using a machine learning model to score network connections based on features like SSL certificate details, DNS record age, and IP ASN?
  context: This question applies a predictive approach to identify malicious sites that may lack obvious symbolic or statistical red flags. A machine learning model, trained on known benign and malicious examples, can identify complex patterns across various network data features (SSL certs, DNS age, ASN reputation) to predict the likelihood of a domain being part of an AiTM phishing campaign.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT is_AiTM_phishing using ML model on features from Zeek logs (SSL, DNS, conn). ALERT where prediction_score > 0.90.
- question: Is network traffic to our authentication portals showing client-side artifacts (like specific JA3/JA3S hashes or User-Agent strings) that are known indicators of AiTM phishing toolkits?
  context: This question focuses on identifying the specific tools an adversary is using, such as Evilginx2 or Modlishka. These toolkits often leave unique, hardcoded fingerprints in the TLS handshake (JA3/JA3S) or HTTP headers (User-Agent). Detecting these known-bad fingerprints is a direct way to confirm the use of such tools against your organization.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network traffic logs (Zeek ssl, http) WHERE JA3/JA3S hash OR User-Agent string IN known_AiTM_toolkit_fingerprints. ALERT on match.
- question: Are there rare or anomalous JA3 hashes or User-Agent strings being used in sessions connecting to corporate single sign-on (SSO) pages?
  context: This question helps find attacker tools or custom proxies that are not yet on a known signature list. By baselining normal client fingerprints (JA3, User-Agents) across the enterprise, any significant deviation, such as a very rare fingerprint appearing in a sensitive context like an SSO login, becomes a statistical anomaly worth investigating for AiTM activity.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PROFILE frequency of all JA3 hashes and User-Agents. ALERT on any fingerprint seen on < 0.1% of endpoints AND connecting to corporate SSO pages.
- question: Does the sequence of HTTP headers in authentication sessions deviate from normally observed patterns, suggesting manipulation by a proxy?
  context: This question seeks to detect the subtle manipulations an AiTM proxy might perform on a session's HTTP headers, such as adding, removing, or reordering them. A time-series anomaly detection model can learn the normal sequence and composition of headers for legitimate sessions and flag any that have a high reconstruction error, indicating they do not fit the learned benign pattern.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT anomaly in HTTP header sequence for authentication portal sessions using a trained LSTM model. ALERT on sessions with high reconstruction error.
- question: Are any processes being created on endpoints that match the signatures (name, hash, command line) of known credential dumping or browser data theft tools?
  context: This question focuses on detecting the execution of malicious tools on the endpoint itself after a potential compromise. An attacker may use tools like Mimikatz to harvest credentials or custom scripts to exfiltrate browser session cookies. This query aims to catch that post-exploitation activity by matching process execution events against known indicators.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process creation logs (Event ID 4688) WHERE process_name, hash, or command_line_arguments MATCH known credential dumper or browser theft tool signatures.
- question: Are there processes being launched, especially by browsers or office applications, with unusually high-entropy command-line arguments, suggesting obfuscated commands?
  context: Attackers often use obfuscation (e.g., Base64 or PowerShell encoding) to hide their commands from simple signature-based detection. This question uses the statistical property of entropy to find these obfuscated commands, as they tend to appear more random than normal commands. A high-entropy command spawned from a common application like Outlook or Chrome is highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE entropy of command-line arguments in process creation logs (Event ID 4688). ALERT where entropy is in top 99th percentile AND parent process is a browser or Office application.
- question: Can a machine learning model identify novel or obfuscated credential theft malware by scoring process execution events based on their collective characteristics?
  context: This question aims to detect malicious processes that do not match any known signature or simple statistical anomaly. A classification model can learn the subtle, combined characteristics of malicious activity (e.g., an uncommon parent process, high command-line entropy, running as a privileged user) and flag suspicious process executions even if the tool is novel or heavily obfuscated.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT is_malicious_process using ML model on features from process creation logs (Event ID 4688). ALERT where prediction_score > calibrated_threshold.
- question: Is any user account exhibiting a pattern of multiple failed MFA challenges followed by a success in a short time frame, indicative of an MFA fatigue attack?
  context: This question seeks to detect "MFA fatigue" or "prompt bombing," where an attacker with a valid password repeatedly triggers MFA push notifications, hoping the user will eventually accept one by mistake. A rule looking for a specific threshold of failures followed by a success is a direct way to detect this brute-force social engineering tactic.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TRIGGER alert when a single user has > 5 failed MFA logs within 2 minutes, followed by 1 successful login log from the same source IP range within the next 5 minutes.
- question: Are any users experiencing a statistically significant spike in failed login attempts compared to their own normal baseline?
  context: This question provides a more adaptive method for detecting MFA fatigue. Instead of a fixed global threshold, it compares a user's current rate of failed logins to their own historical behavior. This reduces false positives for users who might legitimately fail logins more often and is more effective at catching low-and-slow attacks that might stay under a fixed threshold.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE failed login counts per user over rolling 5-minute windows. ALERT when a user's failed login count exceeds their personal 99th percentile for that time window.
- question: Can a time-series model detect anomalous sequences of authentication events for a user that are indicative of MFA prompt bombing?
  context: This question uses a more advanced model to understand the sequence and timing of authentication events, not just the count. A dense cluster of failures (e.g., MFA denied) followed immediately by a success is an improbable sequence for a normal user but a very probable one for a successful MFA fatigue attack. This model can detect such unlikely temporal patterns.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT anomalous sequences in user authentication event streams (success/failure) using a time-series model. ALERT on sequences with a low probability score.
- question: Is a successful login from a rare IP address or location quickly followed by sensitive account changes, like registering a new MFA device or creating email forwarding rules?
  context: This question correlates two highly suspicious events: an anomalous login and a high-risk action. An attacker who has just bypassed MFA and compromised an account will often move quickly to establish persistence or exfiltrate data. This query looks for that specific, high-confidence attack chain to detect a successful account takeover.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT successful login (Event ID 4624) from a statistically rare IP. IF followed within 10 minutes by a sensitive action (e.g., Event ID 5136, new MFA device) for the same user, THEN ALERT.
- question: Are users performing statistically rare post-authentication activities (like adding an MFA device for the first time) during a session that originated from a geographically rare location for that user?
  context: This question adds another layer of statistical analysis to account takeover detection. It looks for the combination of a login location that is rare for a specific user and a subsequent action that is also rare for that same user. This helps to pinpoint behavior that is abnormal for an individual, reducing false positives from administrators who may perform these actions routinely from trusted locations.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE user post-authentication activities and login locations. ALERT if a rare activity occurs during a session where the source IP's geolocation is also rare for that specific user.
- question: After a login, is a user's session rapidly accumulating a high anomaly score based on a machine learning model that profiles their typical behavior across multiple data sources?
  context: This question takes a holistic view of a user's session post-login. Instead of looking for one or two specific indicators, it uses a model to score all of the user's activities (file access, network connections, admin actions) against their established historical profile. A session that quickly deviates from the norm and accumulates a high anomaly score is a strong signal of a compromised account or session hijack.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SCORE all user session activities using a behavioral anomaly detection model after a successful login. ALERT if the session's cumulative anomaly score increases rapidly.
- question: Has a single user account logged in successfully from two different geographic locations where the time between logins makes travel between them physically impossible?
  context: This is a classic query for detecting credential or session token reuse. If a user logs in from one continent and then five minutes later from another, it is a clear sign that two different entities are using the same credentials concurrently, one of which is almost certainly malicious. The "impossible travel" scenario is a high-fidelity indicator of a compromised account.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each successful login, compare its timestamp and source IP geolocation with the previous login for the same user. CALCULATE the required travel speed. ALERT if speed > 600 mph.
- question: Is a user logging in from a location that is a significant statistical outlier compared to their cluster of normal, historical login locations?
  context: This question refines the "impossible travel" concept to be more robust against false positives from legitimate but fast travel or VPN use. Instead of a simple speed calculation, it uses a statistical measure (like Mahalanobis distance) to determine if a new login location is "far" from the user's normal center of activity, making it a statistical improbability for that specific user.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PROFILE each user's typical login location cluster from historical logs. For each new login, CALCULATE the Mahalanobis distance from the cluster centroid. ALERT on a high distance score.
- question: Does a new user login fall outside of all identified normal geographic clusters of activity for that user, as determined by a machine learning clustering algorithm?
  context: This question uses a more sophisticated clustering algorithm (like DBSCAN) to automatically identify a user's multiple, distinct "normal" areas of operation (e.g., home, office, a frequent travel destination). Any login that does not fall into one of these learned clusters is flagged as a "noise" point or anomaly, providing a more flexible and accurate way to detect unusual login locations.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER each user's historical login coordinates (lat/long) using DBSCAN. For each new login, ALERT if it is classified as a noise point (i.e., does not belong to any existing cluster).