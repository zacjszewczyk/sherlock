name: T1111: Multi-Factor Authentication Interception
id: a7b1c1d8-e4f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to intercept or bypass multi-factor authentication (MFA) to gain credentialed access. It focuses on detecting various evidence types, including connections to known Adversary-in-the-Middle (AiTM) phishing infrastructure, network traffic artifacts like specific User-Agent strings or TLS hashes characteristic of AiTM toolkits, the execution of credential theft tools on endpoints, MFA fatigue attacks identified by a high rate of failed challenges followed by success, high-risk actions like new MFA device registration following an anomalous login, and impossible travel scenarios where a user logs in from geographically impossible locations in a short time frame.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are any endpoints communicating with domains or IP addresses known to be associated with Adversary-in-the-Middle (AiTM) phishing infrastructure?
  context: This question uses a direct, signature-based approach to detect AiTM attacks. By correlating outbound network traffic (DNS queries, HTTP requests, raw connections) against a high-confidence threat intelligence feed of known malicious domains and IPs, analysts can identify compromised systems with high certainty. A match indicates an active attempt to proxy authentication through an adversary-controlled server.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH network_logs (dns, http, conn)
      WHERE destination_ip IN threat_intel_feed OR destination_domain IN threat_intel_feed
      RETURN source_ip, destination, timestamp
- question: Are there any DNS requests for subdomains with unusually high entropy or abnormal character patterns, suggesting algorithmic generation by phishing kits?
  context: This question helps uncover novel AiTM infrastructure not yet present in threat intelligence feeds. Phishing frameworks often generate unique subdomains for each victim. These algorithmically generated domains can have statistically unusual properties, like high entropy or character frequencies that deviate from normal traffic. Flagging these anomalies provides an early warning of a potential phishing campaign.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CALCULATE entropy, char_frequency for all subdomains in dns_logs
      COMPARE against baseline
      ALERT on subdomains with entropy > 3 standard_deviations_from_mean
- question: Can we identify potential AiTM phishing sites by using a machine learning model to classify domains based on features from network logs?
  context: This question leverages machine learning to detect sophisticated AiTM phishing sites that evade simpler detection methods. A classification model can analyze a combination of features—such as SSL certificate age, issuer details, DNS record history, and IP address ASN—to predict the likelihood that a domain is malicious. This provides a more robust and adaptive detection capability against evolving threats.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek http.log
  - Internet gateway network sensors, DNS resolvers, and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each new domain in network_logs
      EXTRACT features (ssl_details, dns_age, ip_asn)
      PREDICT likelihood_is_phishing using ML_model
      ALERT if score > 0.90
- question: Is any network traffic to our authentication portals exhibiting fingerprints, such as specific TLS JA3/JA3S hashes or User-Agent strings, known to belong to AiTM toolkits?
  context: This question focuses on identifying the specific tools used by an adversary. AiTM toolkits like Evilginx2 and Modlishka have unique network fingerprints (e.g., how they construct TLS handshakes or the User-Agent strings they present). Matching these known-bad signatures in traffic to sensitive authentication endpoints is a high-fidelity indicator of a man-in-the-middle attack.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ssl_logs, http_logs
      WHERE destination is auth_portal AND (ja3_hash IN known_aitm_hashes OR user_agent IN known_aitm_user_agents)
      ALERT on match
- question: Are there any rare or unusual TLS fingerprints (JA3 hashes) or User-Agents being used to access corporate single sign-on pages?
  context: This question seeks to find outliers that might represent unknown or modified AiTM tools. Within an enterprise, client software is typically standardized, leading to a common set of network fingerprints. An employee's device suddenly presenting a very rare JA3 hash or User-Agent string when accessing a sensitive authentication page is a statistical anomaly that warrants investigation for potential proxy activity.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      PROFILE frequency of all ja3_hashes and user_agents
      SEARCH ssl_logs, http_logs WHERE destination is auth_portal AND (ja3_hash is rare OR user_agent is rare)
      ALERT on rare fingerprint
- question: Are there any user sessions to authentication portals that exhibit an anomalous sequence of HTTP headers, as identified by a time-series model?
  context: This question aims to detect the subtle manipulations an AiTM proxy might introduce into a session. By training a machine learning model on the normal sequence and content of HTTP headers for authentication sessions, we can detect deviations. An AiTM proxy might add, remove, or reorder headers, which would cause the model to flag the session as anomalous, indicating potential tampering.
  answer_sources:
  - Zeek http.log
  - Zeek ssl.log
  - Internet gateway network sensors and web proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each auth_session
      EXTRACT sequence of http_headers
      CALCULATE reconstruction_error using LSTM_model
      ALERT if error is high
- question: Are any processes being created on endpoints that match the names, hashes, or command-line arguments of known credential theft tools like Mimikatz?
  context: This question looks for the direct execution of malicious tools used for credential harvesting. After a successful phish, adversaries often run tools to dump credentials, steal browser session tokens, or exfiltrate password databases. Monitoring process creation events for known indicators (e.g., 'mimikatz.exe', suspicious PowerShell commands) is a critical step in detecting post-compromise activity.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH process_creation_logs (EventID 4688)
      WHERE process_name IN known_dumpers OR process_hash IN known_dumpers OR command_line matches suspicious_patterns
      ALERT on match
- question: Are there any processes being launched, especially by browsers or Office applications, with command-line arguments that have unusually high entropy?
  context: This question helps find obfuscated malicious commands that don't match known signatures. Adversaries often encode or obfuscate their payloads to evade detection. This obfuscation frequently results in command-line arguments with high character randomness, or entropy. Flagging processes with high-entropy command lines can uncover hidden malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CALCULATE entropy of command_line for all process_creation_logs
      ALERT on processes with entropy in top_99th_percentile, especially if parent is browser or office_app
- question: Can a machine learning model identify process execution events that are characteristic of malware, even if they don't match a specific signature?
  context: This question uses a behavioral approach to detect novel or polymorphic credential theft malware. A classification model can be trained on features like the parent process, command-line length and entropy, and user context. This allows it to learn the 'shape' of malicious activity and flag new, unknown tools that exhibit similar behavioral characteristics to known malware.
  answer_sources:
  - Windows Event ID 4688
  - User workstations, remote access servers, and virtual desktop infrastructure (VDI)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each process_creation_event
      EXTRACT features (process_name, parent, cmd_length, cmd_entropy, user)
      PREDICT malicious_likelihood using ML_model
      ALERT if score is high
- question: Has any user account experienced a high number of MFA denials in a short time, immediately followed by a successful login from the same source?
  context: This question is designed to specifically detect MFA fatigue or 'prompt-bombing' attacks. In this attack, the adversary, who already has the user's password, repeatedly triggers MFA prompts until the overwhelmed user finally approves one by mistake. A rule that looks for this specific sequence—many failures followed by a success—is a highly effective way to detect this brute-force social engineering technique.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user
      COUNT mfa_failures (EventID 4625 or cloud_failure_log) in 2_min_window
      IF count > 5 AND followed by success (EventID 4624 or cloud_success_log) from same_source in next 5_mins
      ALERT as MFA_fatigue
- question: Are there any users experiencing a statistically abnormal number of failed logins within a 5-minute window compared to their own baseline?
  context: This question uses a user-centric, statistical approach to detect MFA fatigue. Every user has a different 'normal' for login failures. By establishing a baseline of failed login rates for each individual user, we can flag any period where their failure count spikes significantly (e.g., exceeds their 99th percentile). This is more adaptive than a fixed threshold and can detect subtler attacks.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user
      CALCULATE baseline of failed_login_counts in 5_min_windows
      ALERT if current_5_min_window_count > 99th_percentile_of_baseline
- question: Using a time-series model, can we detect anomalous sequences of authentication events for a user that are indicative of MFA prompt bombing?
  context: This question applies machine learning to recognize the pattern of an MFA fatigue attack within a stream of authentication events. A time-series model can learn the normal rhythm of a user's logins. A dense cluster of failures followed by a success is a low-probability sequence under this model, allowing it to be flagged as a potential attack, even if it doesn't cross a simple threshold.
  answer_sources:
  - Windows Event ID 4625
  - Windows Event ID 4624
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, and Cloud Identity Provider administrative portals
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      MODEL stream of auth_events (success/fail) for each user
      FLAG sequences with low probability under the model, such as dense_failures (4625) followed by success (4624)
- question: Following a successful login from a rare IP address, has the user account immediately performed a sensitive action like registering a new MFA device or changing directory service attributes?
  context: This question correlates a risky login with immediate high-risk activity, a strong indicator of account takeover. Adversaries, after gaining access, often move quickly to establish persistence. Actions like adding their own MFA device are common. Linking these actions to an anomalous login (e.g., from an unusual location) creates a high-confidence alert.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      ON successful_login (EventID 4624) from rare_IP
      MONITOR for 10 mins for sensitive_actions (EventID 5136, MFA_registration) by same_user
      ALERT on correlation
- question: For a given user, has a sensitive action (like adding an MFA device) occurred early in a session that originated from a statistically rare geolocation or network (ASN) for that user?
  context: This question combines user behavior profiling with session context. We first determine which locations and networks are 'normal' for a user. We also baseline how frequently they perform sensitive actions. An event becomes highly suspicious if a rare action is performed during a session that originated from a rare location, suggesting the person performing the action is not the legitimate user.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      PROFILE user's typical login locations (ASN, geo) and action frequency
      ON sensitive_action (e.g., new_mfa_device)
      IF session_source_location is statistically rare for user
      ALERT on anomalous session
- question: Does a user's session, after a successful login, exhibit a sequence of activities that rapidly accumulates a high anomaly score against their historical behavior profile?
  context: This question uses a holistic, session-based machine learning model to detect account takeover. Instead of looking at a single action, the model scores all of a user's post-login activities (file access, network connections, admin tasks) in aggregate. A hijacked session will likely deviate significantly from the user's normal patterns, causing the session's overall anomaly score to rise rapidly and trigger an alert.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Windows Event ID 4738 (User Account Management)
  - Windows Event ID 5136 (Directory Service Object Modified)
  - Cloud provider audit logs (e.g., Entra ID Audit, AWS CloudTrail)
  - Domain Controllers, user workstations, and cloud application/IdP audit log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user_session post-login
      SCORE all activities against user's historical behavior_profile using ML model
      ALERT if session_anomaly_score accumulates rapidly
- question: Has a user account logged in successfully from two different geographic locations where the time elapsed between logins makes travel between them physically impossible?
  context: This question seeks to identify classic 'impossible travel' scenarios, which are a strong indicator of credential or session token reuse. By calculating the required travel speed between the geolocations of two consecutive successful logins for the same user, we can flag any instance that would require superhuman speed (e.g., >600 mph).
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each successful_login by user
      GET current_location and previous_location
      CALCULATE travel_speed = distance / time_diff
      IF travel_speed > 600 mph
      ALERT as Impossible_Travel
- question: Did a user's successful login originate from a location that is a significant statistical outlier compared to their cluster of normal, historical login locations?
  context: This question refines 'impossible travel' to be more robust against false positives from legitimate travel or VPN use. Instead of just looking at the last login, it compares a new login's location to the user's entire history of common locations. A login from a location that is a major statistical anomaly (high Mahalanobis distance) from these clusters is highly suspicious.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user, create cluster of normal login locations
      FOR each new login, CALCULATE Mahalanobis_distance from location cluster
      ALERT if distance is high
- question: Using a clustering algorithm, has a new user login occurred from a location that does not fall into any of the user's previously established 'normal' geographic areas of operation?
  context: This question uses machine learning to dynamically define a user's normal areas of operation. A clustering algorithm like DBSCAN can automatically identify a user's typical locations (home, work, travel). A new login that is classified as 'noise' or does not belong to any existing cluster is flagged as an anomaly, providing a more flexible way to detect unusual travel than static rules.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Cloud Identity Provider (e.g., Entra ID, Okta) authentication logs
  - VPN concentrators, Domain Controllers, and cloud Identity Provider log repositories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each user, run DBSCAN on historical login coordinates to identify normal clusters
      FOR each new login, check if it falls within an existing cluster
      IF not (is noise), ALERT as anomalous location