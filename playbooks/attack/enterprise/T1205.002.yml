name: T1205.002: Socket Filters
id: e4a3b2c1-d0f9-4e8a-b7c6-5d4a3b2c1d0e
description: This playbook provides investigative steps to detect adversaries using Socket Filters (T1205.002) for persistence, defense evasion, and command and control. It addresses the use of 'magic packets' to trigger dormant backdoors, identified by anomalous network characteristics like non-standard ports, specific TCP flags, or low payload sizes. The playbook also focuses on detecting the underlying malicious processes that set up these filters by looking for process creation events involving packet capture libraries (e.g., pcap) or raw socket functions from unauthorized executables. It covers correlating these network triggers with subsequent malicious host actions, such as the creation of a reverse shell, within a short time window. For defense evasion, it looks for traffic using non-standard protocols, IP fragmentation, or low TTLs to bypass firewalls, and also for manipulation of the Windows Filtering Platform (WFP) by suspicious processes. Finally, it helps identify command and control establishment by correlating trigger packets with subsequent DGA DNS queries or the launch of reverse shells.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are there any inbound network connections from known C2 IPs to non-standard ports with minimal data transfer, suggesting a 'magic packet' trigger?
  context: This question aims to identify potential 'magic packets' used to activate dormant malware. Adversaries use these specific, low-profile network packets to trigger a response from a compromised host. This symbolic rule looks for a combination of indicators: a source IP on a threat intelligence list, a destination port outside the standard well-known range, and a connection state that implies little to no actual data was exchanged, which is characteristic of a simple trigger mechanism.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network sensors at internet egress/ingress points
  - Virtual network taps in cloud environments (e.g., VPC Traffic Mirroring)
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek conn.log WHERE direction=inbound AND source_ip IN c2_intel_list AND destination_port > 1024 AND connection_state IN ('S0', 'S1', 'OTH')
- question: Have any hosts received inbound connections that are statistical outliers compared to their normal traffic baseline, specifically regarding destination port, TCP flags, or low packet/byte counts?
  context: Statistical analysis helps find the 'unknown unknowns' that symbolic rules might miss. This question seeks to uncover anomalous connections by baselining normal traffic for each host. A connection to an extremely rare port or one with an unusually small size compared to the host's typical traffic patterns could indicate a crafted trigger packet designed to evade signature-based detections.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network sensors at internet egress/ingress points
  - Virtual network taps in cloud environments (e.g., VPC Traffic Mirroring)
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE Zeek conn.log GROUP BY destination_host | DETECT outliers in destination_port_frequency, packet_count, byte_count
- question: Has an anomaly detection model flagged any inbound network connections as highly unusual based on features like port, protocol, duration, and byte counts?
  context: This question leverages machine learning to identify complex anomalies in network traffic that may not be apparent through simple statistical measures. By training a model like an Isolation Forest on known benign traffic, we can identify any new connection that significantly deviates from the established norm. Such anomalies are strong candidates for investigation as potential 'magic packets' or other malicious activity.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network sensors at internet egress/ingress points
  - Virtual network taps in cloud environments (e.g., VPC Traffic Mirroring)
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN anomaly_detection_model ON Zeek conn.log features (port, protocol, duration, byte_counts, flags) | RETURN connections with anomaly_score < threshold
- question: Are there any non-standard or unauthorized processes running with command-line arguments related to packet capture or raw socket filtering?
  context: Adversaries may use packet sniffing libraries or functions to set up socket filters. This question looks for process creation events where the command line includes keywords like 'pcap' or 'SO_ATTACH_FILTER', but the process itself is not a known, legitimate tool like Wireshark or tcpdump. This helps filter out normal administrative or security activity to focus on potentially malicious use of these capabilities.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint security logs from all workstations and servers
  - Centralized Windows Event Log collection system
  - Live memory analysis on suspicious hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE command_line CONTAINS ('pcap', 'setsockopt', 'SO_ATTACH_FILTER') AND process_name NOT IN (allowlist_of_network_tools)
- question: Have any processes been executed with command-line arguments that have an unusually high entropy score, suggesting obfuscation?
  context: High entropy in a command line can be an indicator of obfuscation, encryption, or encoding, which are common techniques used by adversaries to hide their commands. This question establishes a baseline of normal command-line complexity for each process and flags executions where the command line is a statistical outlier, pointing to potentially malicious and hidden instructions.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint security logs from all workstations and servers
  - Centralized Windows Event Log collection system
  - Live memory analysis on suspicious hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE entropy for command_line in process_creation_logs | GROUP BY process_name | ALERT if entropy > 99th_percentile_for_process
- question: Has machine learning identified any rare clusters of process execution behavior that deviate from normal activity?
  context: This question uses clustering algorithms to group similar process execution events together. Normal, frequent activities will form large, dense clusters. Malicious or rare activities, such as a specific process being launched from an unusual parent or with strange arguments, will form small, isolated clusters. Investigating these outlier clusters can reveal novel or targeted attack patterns.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint security logs from all workstations and servers
  - Centralized Windows Event Log collection system
  - Live memory analysis on suspicious hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN clustering_algorithm ON process_creation_features (parent_process, process_path, cmd_length, cmd_entropy) | INVESTIGATE small, distant clusters
- question: Has a host received a suspected 'magic packet' and then, within seconds, launched a command shell or initiated a new outbound connection?
  context: This question seeks to establish a direct temporal link between a trigger packet and a malicious action. By correlating a specific type of inbound network event (the 'magic packet') with subsequent suspicious host activity (like spawning a shell or calling out to the internet) within a very short time frame, we can build high-confidence alerts that strongly indicate a backdoor has been activated.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Centralized SIEM capable of correlating endpoint and network logs
  - Data lake with host and network telemetry
  - Endpoint Detection and Response (EDR) platform logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE 'magic_packet_signature' on host WITH (process_creation for cmd.exe/powershell.exe OR new_outbound_connection) on same host WITHIN 15 seconds
- question: Did any host exhibit a sudden spike in its process creation rate immediately after receiving an anomalous inbound packet?
  context: This question looks for a statistical correlation between network triggers and host responses. A sudden, sharp increase in the number of new processes being created on a host, especially if it happens right after receiving a rare or unusual network packet, is a strong indicator that the packet triggered a script or payload execution.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Centralized SIEM capable of correlating endpoint and network logs
  - Data lake with host and network telemetry
  - Endpoint Detection and Response (EDR) platform logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT spike in process_creation_rate > 3_std_dev | IF spike follows anomalous_inbound_packet THEN ALERT
- question: Has a sequence analysis model detected a low-probability chain of events, such as a rare inbound connection followed by a shell spawn and a new outbound connection?
  context: This question uses sequence analysis models (like HMMs or LSTMs) to understand the normal 'story' of events on a host. The model learns common sequences of operations. An alert is generated when the model observes a sequence of events that is highly improbable based on its training, such as the specific chain of 'trigger packet -> shell -> C2 beacon', which is a classic attack pattern.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Centralized SIEM capable of correlating endpoint and network logs
  - Data lake with host and network telemetry
  - Endpoint Detection and Response (EDR) platform logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN sequence_analysis_model on event_streams | ALERT on low_probability_sequence like '[rare_inbound] -> [spawn_shell] -> [outbound_conn]'
- question: Are we observing any inbound network traffic using non-standard IP protocols or exhibiting signs of IP fragmentation anomalies?
  context: Adversaries may use non-standard protocols or IP fragmentation to bypass stateless firewalls or simple packet inspection devices. This question aims to detect such traffic by looking for IP protocol numbers other than the common TCP, UDP, or ICMP, or by flagging specific fragmentation-related warnings generated by network sensors like Zeek. This traffic is highly suspicious as it has few legitimate uses.
  answer_sources:
  - Zeek conn.log
  - Zeek weird.log
  - Network sensors at the internet border
  - Sensors monitoring traffic between internal network segments
  - Cloud provider network logs (e.g., AWS VPC Flow Logs, Azure Network Watcher)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Zeek conn.log WHERE protocol NOT IN ('tcp', 'udp', 'icpm')) OR (Zeek weird.log WHERE name IN ('ip_fragmentation_anomaly', 'possible_split_routing'))
- question: Are there any inbound connections with an abnormally low Time-To-Live (TTL) value compared to the baseline for their network of origin?
  context: The TTL of an IP packet can sometimes be an indicator of manipulation. Adversaries might craft packets with a low TTL to ensure they expire before reaching deeper inspection points within a network. This question identifies such packets by comparing their TTL to the normal range of values seen from similar sources (e.g., the same Autonomous System), flagging statistical outliers for review.
  answer_sources:
  - Zeek conn.log
  - Zeek weird.log
  - Network sensors at the internet border
  - Sensors monitoring traffic between internal network segments
  - Cloud provider network logs (e.g., AWS VPC Flow Logs, Azure Network Watcher)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE TTL values in inbound traffic GROUP BY source_asn | ALERT if TTL < 5th_percentile_for_asn
- question: Has a machine learning model classified any inbound connections as anomalous based on features like protocol, TTL, and fragmentation flags?
  context: This question applies a one-class classification model (like a One-Class SVM) to define a multi-dimensional boundary of 'normal' network traffic. Any connection that falls outside this boundary is flagged as an anomaly. This is effective for detecting novel or complex evasion techniques that combine multiple subtle deviations from the norm that might not trigger individual symbolic or statistical rules.
  answer_sources:
  - Zeek conn.log
  - Zeek weird.log
  - Network sensors at the internet border
  - Sensors monitoring traffic between internal network segments
  - Cloud provider network logs (e.g., AWS VPC Flow Logs, Azure Network Watcher)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN one_class_svm_model on inbound_traffic_features | RETURN connections classified as anomalous
- question: Has a Windows Filtering Platform (WFP) firewall filter been created by an unsigned or suspiciously located process?
  context: Adversaries can manipulate the Windows Filtering Platform to allow their malicious traffic to bypass the host firewall. This question traces a permitted connection (Event 5156) back to the filter that allowed it (Event 5152), and then to the process that created that filter (Event 4688). An alert is raised if the filter-creating process is unsigned or runs from a temporary/user-writable directory, which is a strong sign of malicious activity.
  answer_sources:
  - Windows Event ID 5156
  - Windows Event ID 5152
  - Windows Event ID 4688
  - Key servers with Windows Firewall enabled
  - User endpoints with local firewalls
  - Centralized Windows Event Log repository
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (Event 5156, Event 5152 on FilterID) with Event 4688 on ProcessID | ALERT if creating_process is unsigned OR path is suspicious
- question: Are there any rare or unprecedented parent-child process relationships associated with the creation of WFP filters?
  context: This question uses frequency analysis to find anomalous WFP filter creation activity. Legitimate filter creation is typically performed by a small set of system processes (e.g., svchost.exe spawned by services.exe). By baselining these normal relationships, we can easily spot and investigate when a rare process (e.g., winword.exe) or an unusual parent-child pair creates a WFP filter, as this is highly irregular.
  answer_sources:
  - Windows Event ID 5156
  - Windows Event ID 5152
  - Windows Event ID 4688
  - Key servers with Windows Firewall enabled
  - User endpoints with local firewalls
  - Centralized Windows Event Log repository
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE parent-child relationships for WFP filter creation events | ALERT if relationship_frequency < 0.1%
- question: Has graph analysis identified any processes creating WFP filters that fall outside the normal communities of behavior?
  context: This question models system activity as a graph, where processes are nodes and actions like 'created a filter' are edges. Community detection algorithms are then used to find clusters of processes that normally interact. A process that creates a filter but does not belong to any of the established, legitimate communities is an outlier and a strong candidate for malicious activity.
  answer_sources:
  - Windows Event ID 5156
  - Windows Event ID 5152
  - Windows Event ID 4688
  - Key servers with Windows Firewall enabled
  - User endpoints with local firewalls
  - Centralized Windows Event Log repository
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL WFP filter events as a graph | RUN community_detection | ALERT on processes creating filters that are not in a known community
- question: Has a host's security logs been cleared or its audit policy disabled shortly after receiving a single, small inbound packet?
  context: This question correlates a potential trigger packet with immediate defense evasion activity. Receiving a small, one-way packet (indicated by Zeek's '^d' history) followed within minutes by a critical event like the security log being cleared (Event 1102) is a red flag. It suggests an adversary sent a command to cover their tracks after gaining or escalating access.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 1102
  - Windows Event ID 4719
  - Centralized SIEM with correlated data from Domain Controllers, endpoints, and network sensors
  - Security log archives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE (Zeek conn.log with history='^d' AND bytes<100) WITH (Event 1102 OR Event 4719) on same host WITHIN 5 minutes
- question: Was there a statistical spike in critical security events (like log clearing) on a host immediately after it received a packet from a new or rare IP address?
  context: This question looks for statistical anomalies in the timing of critical security events. While these events can occur for legitimate reasons, a sudden spike in their frequency that is temporally linked to receiving a packet from a previously unseen source IP is highly suspicious. It suggests the external trigger initiated a defense evasion action.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 1102
  - Windows Event ID 4719
  - Centralized SIEM with correlated data from Domain Controllers, endpoints, and network sensors
  - Security log archives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT spike in critical_event_rate > 3_std_dev | IF spike follows packet_from_new_source_ip THEN ALERT
- question: Has a Bayesian model calculated a high probability that a critical host event (like log clearing) was caused by a preceding rare network event?
  context: This question uses a Bayesian network to model the causal relationships between network and host events. By training on historical data, the model learns the probability of one event occurring given another. If the model calculates a high posterior probability P(LogCleared | RareInboundPacket), it provides a high-confidence alert that the network packet likely triggered the log clearing action.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 1102
  - Windows Event ID 4719
  - Centralized SIEM with correlated data from Domain Controllers, endpoints, and network sensors
  - Security log archives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN Bayesian_network_model on event_sequence | ALERT if P(CriticalEvent | PrecedingNetworkEvent) > threshold
- question: Are we observing single, small inbound packets from known C2 IPs to non-standard, high-numbered ports?
  context: This question targets a classic C2 trigger pattern. It combines multiple high-confidence indicators- a source IP known for C2 activity, a destination port that isn't for a standard service, and a packet size so small it's unlikely to be legitimate data transfer. A match on this rule is a high-priority alert as it strongly suggests a C2 'knock' to activate a backdoor.
  answer_sources:
  - Zeek conn.log
  - Network sensors at internet perimeter
  - Threat Intelligence Platform integrated with SIEM
  - DNS server logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Zeek conn.log WHERE source_ip IN c2_intel_list AND dest_port > 1024 AND packet_count == 1 AND byte_count < 100
- question: Are there any single-packet inbound connections targeting exceptionally rare destination ports, especially from low-reputation IP addresses?
  context: This question uses statistical rarity to uncover potential C2 'knocks' that don't rely on known bad IPs. An adversary may use a unique high-numbered port for their trigger. By identifying connections to ports that are statistical outliers (in the bottom 1% of usage), especially when the source IP has a poor reputation or is from a rarely seen network, we can find these hidden triggers.
  answer_sources:
  - Zeek conn.log
  - Network sensors at internet perimeter
  - Threat Intelligence Platform integrated with SIEM
  - DNS server logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE inbound_single_packet_connections | ALERT if dest_port_frequency < 1st_percentile AND source_ip_reputation is low
- question: Has a supervised machine learning model assigned a high probability score, indicating C2 activity, to any inbound connections?
  context: This question applies a supervised ML model, trained on examples of both known-good and known-bad C2 traffic. The model learns the complex interplay of features (IP reputation, port rarity, packet size, flags) that distinguish a C2 trigger. It can then provide a probabilistic score for new, unseen connections, allowing for high-confidence alerting on those that closely match the C2 profile.
  answer_sources:
  - Zeek conn.log
  - Network sensors at internet perimeter
  - Threat Intelligence Platform integrated with SIEM
  - DNS server logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN supervised_c2_classifier_model on inbound_connections | ALERT if c2_probability_score > 0.95
- question: Did any host make a DNS query for a known DGA-pattern domain shortly after receiving a suspected trigger packet?
  context: This question links a network trigger to the subsequent C2 channel setup. After a backdoor is activated by a trigger packet, it often uses a Domain Generation Algorithm (DGA) to find its C2 server. This rule correlates the initial trigger with a DNS query for a domain that matches known DGA regex patterns or is on a threat intel list, providing a strong signal of C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Network sensors monitoring DNS traffic (port 53)
  - Centralized SIEM correlating DNS logs with endpoint process logs
  - DNS resolver logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE 'trigger_packet' event WITH subsequent 'dns_query' event on same host WITHIN 60s | ALERT if domain matches DGA_pattern OR is on blocklist
- question: Did any host make a DNS query for a domain with statistically high entropy immediately following a potential trigger packet?
  context: DGA domains are algorithmically generated and often appear random, resulting in high Shannon entropy. This question looks for DNS queries where the domain name's entropy is a statistical outlier compared to the baseline of normal domains. When such a query immediately follows a suspected trigger packet, it's a strong indicator that a backdoor has been activated and is trying to resolve its C2 address.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Network sensors monitoring DNS traffic (port 53)
  - Centralized SIEM correlating DNS logs with endpoint process logs
  - DNS resolver logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE entropy for domain_name in dns_logs | IF entropy > 99th_percentile AND follows trigger_packet THEN ALERT
- question: Has a character-based machine learning model identified any queried domain names as highly improbable or 'random-looking'?
  context: This question uses advanced ML models like RNNs or LSTMs, which are excellent at learning sequential patterns, such as the character sequences that make up legitimate domain names. The model can then score new domains based on how well they fit the learned patterns. DGA-generated domains will receive a high 'perplexity' or 'improbability' score, flagging them as highly suspicious.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - Network sensors monitoring DNS traffic (port 53)
  - Centralized SIEM correlating DNS logs with endpoint process logs
  - DNS resolver logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN rnn_domain_model on dns_queries | ALERT if domain perplexity_score is high
- question: Has a reverse shell (e.g., encoded PowerShell) been launched on a host immediately after it received an inbound connection on a non-standard port?
  context: This is a high-confidence correlation rule that links a network trigger directly to the execution of a reverse shell, a common C2 technique. The rule looks for an inbound connection to an unusual port, followed within seconds by the creation of a PowerShell process using command-line arguments typical of obfuscated, fileless reverse shells. A match is a critical alert.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoint EDR/sysmon logs from all hosts
  - Network sensors at key choke points
  - Centralized SIEM for correlation
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE (inbound_conn to non-standard_port) WITH (powershell.exe -enc ...) on same host WITHIN 10s
- question: Has a rare parent-child process relationship (e.g., web server spawning a shell) occurred, especially if the child process has a high-entropy command line and it follows an anomalous inbound connection?
  context: This question looks for statistical anomalies in process lineage. Legitimate applications rarely spawn command shells. An alert is triggered when a statistically rare parent-child relationship is observed (e.g., an IIS worker process spawning cmd.exe). The alert is elevated if this happens right after a suspicious inbound network event, suggesting the parent process was exploited to launch a shell.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoint EDR/sysmon logs from all hosts
  - Network sensors at key choke points
  - Centralized SIEM for correlation
  range: last 90 days
  queries:
  - technology: pseudocode
    query: DETECT rare parent-child_process_relationship | ELEVATE_ALERT if child_cmd_entropy is high AND follows anomalous_inbound_conn
- question: Has graph-based anomaly detection identified a rare sequence of events, such as a process spawning PowerShell which then makes a network connection, immediately following a C2 trigger packet?
  context: This question uses graph-based ML to detect anomalous chains of execution. Normal system behavior forms predictable graphs of process interactions. A rare subgraph, like a web server process spawning PowerShell which in turn establishes a new network connection, is highly anomalous. If this anomalous graph appears right after a suspected C2 trigger packet, it's a very strong indicator of a successful compromise and C2 channel establishment.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Endpoint EDR/sysmon logs from all hosts
  - Network sensors at key choke points
  - Centralized SIEM for correlation
  range: last 90 days
  queries:
  - technology: pseudocode
    query: RUN graph_anomaly_detection on process_execution_chains | ALERT if anomalous_subgraph appears after suspected_c2_trigger