name: T1556.005: Reversible Encryption
id: 541434c3-6b3a-4a64-9642-19e34e567228
description: This playbook focuses on detecting adversaries establishing persistence, evading defenses, or accessing credentials by modifying account properties, Group Policies, or Fine-Grained Password Policies to enable reversible password encryption. Storing passwords with reversible encryption allows for the recovery of the plaintext password, making it a valuable target for attackers. This playbook helps identify the initial configuration change, subsequent anomalous authentications (e.g., from dormant accounts or external IPs), and the use of credential access tools following the modification.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a user account being modified to enable the 'Password stored using reversible encryption' flag?
  context: Adversaries may modify an individual user account's properties to enable reversible encryption. This is a direct method to weaken the security of a specific account's password, making it recoverable in plaintext later. This question looks for the specific change in the 'User Account Control' attribute (flag 0x80) which indicates this technique is being used.
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 4738")
      where (user_account_control_new_value contains "0x80") and (user_account_control_old_value does not contain "0x80")
      and (target_account not in pre-approved_exception_list)
      return timestamp, source_user, target_account
- question: Has a dormant account with reversible encryption enabled suddenly become active?
  context: Adversaries may enable reversible encryption on a rarely used or dormant account to create a persistent backdoor. When they need to regain access, they can authenticate with this account. This question aims to detect such activity by baselining normal account login dormancy and alerting when an account with this weak encryption setting is used after an unusually long period of inactivity.
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      dormancy_threshold = calculate_95th_percentile_logon_dormancy(all_accounts)
      accounts_with_rev_enc = get_accounts_where("reversible_encryption_enabled" == true)
      search (source="Windows Event ID 4624")
      where (account in accounts_with_rev_enc) and (days_since_last_login > dormancy_threshold)
      return timestamp, account, source_ip
- question: Is there a rapid sequence of enabling reversible encryption followed by a successful logon from an anomalous source?
  context: A common attack pattern is to modify an account and immediately use it. This question uses a time-series model to detect the specific sequence of enabling reversible encryption (Event 4738) and a subsequent successful logon (Event 4624) within a very short window (e.g., under 5 minutes). The suspicion is heightened if the logon originates from a source IP address that is considered anomalous (e.g., rare geolocation, new ASN).
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4624
  - Zeek conn.log
  - Domain Controllers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      join (search source="Windows Event ID 4738" where reversible_encryption_enabled) and (search source="Windows Event ID 4624" where logon_successful)
      on user_account
      where (time_diff < 5_minutes) and (is_source_ip_anomalous(logon_event.source_ip))
      return timestamp, user_account, source_ip
- question: Is a Fine-Grained Password Policy (FGPP) being created or modified to allow reversible password encryption?
  context: Instead of modifying individual users, an adversary might change a Fine-Grained Password Policy (FGPP) to enable reversible encryption for a whole group of users. This question monitors for the creation (Event 5137) or modification (Event 5136) of FGPP objects where the 'msDS-PasswordReversibleEncryptionEnabled' attribute is set to TRUE, indicating a broader application of this persistence technique.
  answer_sources:
  - Windows Event ID 5136
  - Windows Event ID 5137
  - Domain Controllers, SYSVOL Share
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 5136" or source="Windows Event ID 5137")
      where (object_class="msDS-PasswordSettings") and (attribute_changed="msDS-PasswordReversibleEncryptionEnabled") and (new_value="TRUE")
      return timestamp, modifying_user, fgpp_object_name
- question: Is an administrator enabling reversible encryption in an FGPP at an unusual time or without a history of such modifications?
  context: Legitimate administrative changes typically follow a pattern. This question aims to detect malicious FGPP modifications by baselining the activity of each administrator. An alert is generated if an admin enables reversible encryption at an unusual time (e.g., outside their normal working hours) or if the admin has no prior history of managing FGPPs, suggesting their account may be compromised.
  answer_sources:
  - Windows Event ID 5136
  - Windows Event ID 5137
  - Domain Controllers, SYSVOL Share
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 5136" where reversible_encryption_enabled_in_fgpp)
      where (is_event_time_anomalous_for_user(modifying_user)) or (is_user_new_to_fgpp_management(modifying_user))
      return timestamp, modifying_user, fgpp_object_name
- question: Does a machine learning model classify a modification enabling reversible encryption in an FGPP as high-risk?
  context: This question leverages a machine learning model to score the risk of every FGPP modification. By considering features like the user making the change, source workstation, and time of day, the model can identify changes that deviate from normal administrative behavior. A high-risk score for a change that enables reversible encryption provides a strong signal of malicious activity.
  answer_sources:
  - Windows Event ID 5136
  - Windows Event ID 5137
  - Domain Controllers, SYSVOL Share
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each event in (search source="Windows Event ID 5136"):
        features = extract_features(event.user, event.host, event.time, event.attributes)
        risk_score = classification_model.predict(features)
        if (risk_score > threshold) and (event enables reversible_encryption):
          alert event
- question: Did an account with reversible encryption enabled have its password changed and then immediately log in from an external IP address?
  context: This is a classic attack pattern for account takeover and persistence. The adversary enables reversible encryption, changes the password to one they know, and then immediately logs in. This question uses a stateful rule to detect this specific sequence, focusing on interactive logons from non-internal (non-RFC1918) IP addresses, which strongly indicates external unauthorized access.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4723
  - Zeek conn.log
  - Domain Controllers, Authentication Servers, Internet Gateway
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      join (search source="Windows Event ID 4723" for accounts with reversible_encryption) and (search source="Windows Event ID 4624" where logon_type in [2,10] and source_ip is not RFC1918)
      on user_account
      where time_diff < 5_minutes
      return timestamp, user_account, source_ip
- question: Has an account with reversible encryption enabled authenticated after an unusually long period of inactivity for that specific user?
  context: Similar to baselining dormancy across the domain, this question focuses on the typical logon cadence for an individual user. An adversary might enable this setting on an active account but wait to use it. An authentication that occurs after a period of inactivity in the 99th percentile for that specific user is highly anomalous and could indicate the activation of a compromised account.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4723
  - Zeek conn.log
  - Domain Controllers, Authentication Servers, Internet Gateway
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each user with reversible_encryption:
        inactivity_threshold = calculate_99th_percentile_time_between_logons(user)
        search (source="Windows Event ID 4624")
        where (user_account == user) and (time_since_last_logon > inactivity_threshold)
        return timestamp, user_account, source_ip
- question: Has the malicious sequence of enabling reversible encryption, resetting the password, and logging on from a new host occurred for a user account?
  context: This question looks for a high-fidelity attack chain. It uses a sequence analysis model to detect three events in order for the same user within a short time frame: 1) Reversible encryption enabled (Event 4738), 2) Password reset (Event 4724), and 3) Successful logon from a new, previously unseen host (Event 4624). Detecting this full sequence provides very high confidence of an account takeover.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4723
  - Zeek conn.log
  - Domain Controllers, Authentication Servers, Internet Gateway
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      find sequence with same user_account within 30 minutes:
        1. event_code = 4738 and reversible_encryption_enabled
        2. event_code = 4724
        3. event_code = 4624 and source_host is new_for_user
      return timestamp, user_account, source_host
- question: Has the 'Default Domain Policy' or 'Default Domain Controllers Policy' been modified to enable reversible password encryption?
  context: A widespread and impactful way for an adversary to enable reversible encryption is to modify a default Group Policy Object (GPO). This question monitors for modifications (Event 5136) to the well-known GUIDs for these critical policies and alerts if the setting 'Store passwords using reversible encryption' is enabled, as this would affect a large number of accounts.
  answer_sources:
  - Windows Event ID 5136
  - Zeek conn.log
  - Domain Controllers, SYSVOL Share, Administrative Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 5136")
      where object_guid in ["{31B2F340-016D-11D2-945F-00C04FB984F9}", "{6AC1786C-016F-11D2-945F-00C04FB984F9}"]
      and policy_change_enables_reversible_encryption
      return timestamp, modifying_user, source_host
- question: Was a Group Policy Object (GPO) modified to enable reversible encryption by a user or from a host with no history of GPO management?
  context: To evade detection, adversaries may use compromised accounts or systems that do not typically perform administrative actions. This question establishes a baseline of which users and hosts normally modify GPOs. An alert is triggered if a GPO modification enabling reversible encryption comes from a user or host seen performing this action for the first time, indicating a potential compromise.
  answer_sources:
  - Windows Event ID 5136
  - Zeek conn.log
  - Domain Controllers, SYSVOL Share, Administrative Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      historical_gpo_editors = get_users_and_hosts_with_history_of("Event ID 5136")
      search (source="Windows Event ID 5136" where reversible_encryption_enabled)
      where (modifying_user not in historical_gpo_editors.users) or (source_host not in historical_gpo_editors.hosts)
      return timestamp, modifying_user, source_host
- question: Did an anomalous remote administration session immediately precede a GPO modification that enabled reversible encryption?
  context: This question correlates network and endpoint data to link a suspicious entry point to a malicious action. It uses a model to score remote administration sessions based on factors like IP reputation. If a session is deemed anomalous and is immediately followed by a GPO change (Event 5136) that enables reversible encryption, it suggests an external actor has gained access and is modifying policy.
  answer_sources:
  - Windows Event ID 5136
  - Zeek conn.log
  - Domain Controllers, SYSVOL Share, Administrative Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      join (search source="Zeek conn.log" where is_remote_admin_session_anomalous) and (search source="Windows Event ID 5136" where reversible_encryption_enabled)
      on source_ip, user
      where time_diff < 5_minutes
      return timestamp, user, source_ip, gpo_object
- question: Is a PowerShell script being executed that explicitly sets the 'AllowReversiblePasswordEncryption' property on a user account?
  context: Adversaries frequently use PowerShell for its power and ability to blend in with legitimate administrative activity. This question uses a specific regex pattern to search PowerShell script block logs (Event 4104) for the cmdlets and parameters used to enable reversible encryption on an AD user object, providing a direct detection of the technique's implementation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers, Administrative Workstations, PowerShell Transcript Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="PowerShell Event ID 4104")
      where script_block matches regex `/(Set-ADUser|Set-ADAccountControl).*-AllowReversiblePasswordEncryption\s+\$true/i`
      return timestamp, user, host, script_block
- question: Does a PowerShell script that enables reversible encryption show signs of obfuscation (high character entropy)?
  context: To evade simple signature-based detections, adversaries often obfuscate their PowerShell scripts. This question first identifies scripts containing the keyword 'AllowReversiblePasswordEncryption' and then calculates the script's character entropy. A high entropy score suggests the script is obfuscated, increasing the likelihood that its intent is malicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers, Administrative Workstations, PowerShell Transcript Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      entropy_threshold = calculate_98th_percentile_entropy(baseline_admin_scripts)
      search (source="PowerShell Event ID 4104")
      where (script_block contains "AllowReversiblePasswordEncryption") and (calculate_entropy(script_block) > entropy_threshold)
      return timestamp, user, host, script_block
- question: Does a machine learning model classify a PowerShell script that enables reversible encryption as malicious?
  context: This question applies a sophisticated machine learning classifier to analyze PowerShell scripts. The model uses features like Abstract Syntax Trees (AST), cmdlet co-occurrence, and obfuscation metrics to determine if a script is malicious. A script that is classified as malicious and also contains the logic to enable reversible encryption is a very high-fidelity indicator of attack.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers, Administrative Workstations, PowerShell Transcript Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each event in (search source="PowerShell Event ID 4104"):
        features = extract_ps_features(event.script_block)
        is_malicious = ml_model.predict(features)
        if (is_malicious) and (event.script_block contains "AllowReversiblePasswordEncryption"):
          alert event
- question: Was reversible encryption enabled for a user account by an administrator who is not on the authorized allow-list for such changes?
  context: In a well-managed environment, only a specific subset of administrators should be making sensitive security changes. This question relies on an explicit allow-list of authorized 'AD Security Admins'. Any modification to enable reversible encryption (Event 4738) by an account not on this list is a policy violation and a strong indicator of a compromised or rogue account.
  answer_sources:
  - Windows Event ID 4738
  - Zeek conn.log
  - Domain Controllers, Administrative Workstation Event Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      authorized_admins = ["admin1", "admin2", "sec_team_group"]
      search (source="Windows Event ID 4738" where reversible_encryption_enabled)
      where (source_user not in authorized_admins)
      return timestamp, source_user, target_user
- question: Did an administrator enable reversible encryption on an account at a time that is statistically anomalous for their typical working hours?
  context: Adversaries using compromised administrative accounts may operate at unusual times to avoid detection. This question builds a statistical baseline of normal activity hours for each administrator. If a sensitive change like enabling reversible encryption occurs far outside an admin's typical hours (e.g., 3 AM), it suggests their credentials may be used by an attacker.
  answer_sources:
  - Windows Event ID 4738
  - Zeek conn.log
  - Domain Controllers, Administrative Workstation Event Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 4738" where reversible_encryption_enabled)
      where is_event_time_anomalous_for_user(source_user, event_time)
      return timestamp, source_user, target_user
- question: Is the act of enabling reversible encryption on a user account an outlier compared to the administrator's established patterns of behavior?
  context: This question uses unsupervised machine learning (clustering) to define 'normal' administrative behavior. It groups actions based on who, what, where, and what was changed. A modification (Event 4738) that enables reversible encryption and does not fit into any established cluster is flagged as an outlier. This can detect novel or unusual attack patterns that deviate from all known good behavior.
  answer_sources:
  - Windows Event ID 4738
  - Zeek conn.log
  - Domain Controllers, Administrative Workstation Event Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each event in (search source="Windows Event ID 4738" where reversible_encryption_enabled):
        features = extract_features(event.user, event.host, event.target_object, event.attributes)
        if clustering_model.predict(features) == "outlier":
          alert event
- question: Was a known credential dumping tool (like Mimikatz) executed on a Domain Controller shortly after reversible encryption was enabled for any account?
  context: Enabling reversible encryption is often a preparatory step for credential dumping. This question looks for the payoff. It monitors for process creation events (Event 4688) or antivirus alerts (e.g., Defender 1116) that match signatures of known credential access tools. An alert for such a tool on a Domain Controller is a critical finding, especially if it follows a recent reversible encryption change.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Windows Defender Event ID 1116
  - Domain Controllers, Administrative Workstations, Tier 0 Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Event ID 4688" or source="Event ID 1116" or source="Event ID 4104")
      where (process_hash in known_mimikatz_hashes) or (command_line contains "lsadump::dcsync")
      return timestamp, host, process_name, command_line
- question: Did an unusual parent process (e.g., a web server worker) spawn a process that subsequently enabled reversible encryption?
  context: Adversaries often execute commands through processes that are not typically associated with administrative actions, such as a web server or the print spooler service, to hide their activity. This question baselines normal parent-child process relationships on Domain Controllers and alerts when an anomalous relationship is observed that leads to credential access activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Windows Defender Event ID 1116
  - Domain Controllers, Administrative Workstations, Tier 0 Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Event ID 4688")
      where is_parent_child_relationship_anomalous(parent_process, child_process)
      and child_process_command_line contains "Set-ADUser -AllowReversiblePasswordEncryption"
      return timestamp, host, parent_process, child_process
- question: Was a user session, for an account that recently had reversible encryption enabled, classified as exhibiting credential dumping behavior (e.g., DCSync)?
  context: This question uses a behavioral model to detect the act of credential dumping itself, rather than just known tools. If an account has reversible encryption enabled, any subsequent session from that account is monitored. If the session activity (e.g., network patterns consistent with a DCSync request) is classified as credential dumping, it provides a strong link between the setup and the malicious action.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Windows Defender Event ID 1116
  - Domain Controllers, Administrative Workstations, Tier 0 Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      users_with_rev_enc = get_users_with_rev_enc_enabled_recently()
      search (network_traffic or process_events)
      where (user in users_with_rev_enc) and (behavioral_model.predict(session_activity) == "credential_dumping")
      return timestamp, user, source_host, destination_host
- question: Was the reversible encryption flag (0x80) newly set on a high-privilege user account?
  context: While enabling reversible encryption on any account is suspicious, doing so on a high-privilege account (like a Domain Admin) is significantly more dangerous. This question specifically monitors for Event 4738 where the 'UF_ENCRYPTED_TEXT_PASSWORD_ALLOWED' flag is newly added, and escalates the alert priority if the target account is a member of a privileged group.
  answer_sources:
  - Windows Event ID 4738
  - Domain Controllers, Active Directory Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (source="Windows Event ID 4738")
      where (user_account_control_new_value contains "0x80") and (user_account_control_old_value does not contain "0x80")
      and (is_member_of_privileged_group(target_user))
      return timestamp, source_user, target_user, group_membership
- question: Has there been a sudden spike in the number of accounts having reversible encryption enabled across the domain?
  context: An adversary with broad access might enable reversible encryption on many accounts at once to maximize their opportunities for credential access. This question tracks the rate of these modifications over time. A sudden spike, detected by comparing the current rate to a moving average, is a statistical anomaly that suggests a large-scale, automated attack rather than a single targeted change.
  answer_sources:
  - Windows Event ID 4738
  - Domain Controllers, Active Directory Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      rate = count (search source="Windows Event ID 4738" where reversible_encryption_enabled) over 1_minute
      moving_avg = calculate_moving_average(rate, 30_days)
      std_dev = calculate_std_dev(rate, 30_days)
      if rate > (moving_avg + 3 * std_dev):
        alert "Spike in reversible encryption modifications"
- question: Was reversible encryption enabled for a user account in a manner inconsistent with the typical modifications seen for that user's peer group?
  context: This question uses peer group analysis to find unusual changes. Users are grouped by role or department. The model learns what types of account modifications are normal for each group (e.g., service accounts may have this flag set legitimately). If a standard user account has reversible encryption enabled, a modification typical only for a different peer group, it is flagged as anomalous.
  answer_sources:
  - Windows Event ID 4738
  - Domain Controllers, Active Directory Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each event in (search source="Windows Event ID 4738" where reversible_encryption_enabled):
        user_peer_group = get_peer_group(event.target_user)
        if modification_is_anomalous_for_peer_group(event, user_peer_group):
          alert event
- question: Did the sequence of enabling reversible encryption, changing the password, and then accessing LSA secrets occur in a short time frame?
  context: This question identifies a very specific and high-confidence attack chain for credential access. It uses a stateful rule to correlate three distinct events in order: 1) enabling reversible encryption (Event 4738), 2) changing the password (Event 4723), and 3) accessing LSA secrets on a Domain Controller (Event 4656/4663). Detecting this full sequence provides strong evidence of an active compromise.
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4723
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Domain Controllers, LSA Security Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      find sequence within 10 minutes:
        1. event_code=4738, user=U, reversible_encryption_enabled
        2. event_code=4723, user=U
        3. event_code in [4656, 4663], user=U
      return timestamp, user, source_host
- question: Was there an LSA secret access attempt from a user or host with little to no history of such access, immediately following the enabling of reversible encryption?
  context: Accessing LSA secrets is not a common user or system activity. This question baselines this behavior and looks for outliers. If an account has reversible encryption enabled, and then that account (or the host it's on) is used to access LSA secrets for the first time or after a very long time, it is a significant statistical anomaly indicating potential credential harvesting.
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4723
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Domain Controllers, LSA Security Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      if (event_code=4738 and reversible_encryption_enabled for user U):
        search (event_code in [4656, 4663] and user=U) in next 30_minutes
        where is_lsa_access_anomalous_for_user(U)
        return timestamp, user, source_host
- question: Can the specific attack chain of enabling reversible encryption, changing a password, and accessing LSA secrets be identified and correlated as a single high-confidence event?
  context: This question proposes using a graph-based correlation engine to model the entire attack. Each entity (user, host) is a node, and each action is an edge. When the specific path of 'Enable Reversible Encryption' -> 'Change Password' -> 'Access LSA Secret' is completed in the graph within a set time window, the engine triggers a single, high-confidence alert that represents the entire attack chain.
  answer_sources:
  - Windows Event ID 4738
  - Windows Event ID 4723
  - Windows Event ID 4656
  - Windows Event ID 4663
  - Domain Controllers, LSA Security Audit Logs
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |-
      create graph_model with nodes (user, host) and edges (actions)
      if path_exists("EnableReversibleEncryption" -> "ChangePassword" -> "AccessLSASecret") for same user within 10_minutes:
        trigger "Credential Access Attack Chain Detected" alert
        return user, hosts_involved, path_details