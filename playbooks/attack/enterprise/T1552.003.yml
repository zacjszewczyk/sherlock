name: T1552.003: Bash History
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversary attempts to harvest credentials from shell history files, such as .bash_history. Adversaries often search these files for sensitive information like passwords, API keys, and connection strings that users may have inadvertently typed on the command line. Detections should look for direct file access combined with credential-related keywords, anomalous processes accessing or tampering with history files, exfiltration of history files over the network, and correlated event sequences that show enumeration, access, and subsequent outbound network activity.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process searching a shell history file for credential-related keywords?
    context: This question aims to identify direct attempts by an adversary to find sensitive information like passwords, API keys, or tokens that may have been inadvertently saved in a user's command history. The search looks for command-line executions that combine file viewing commands (like `cat`, `grep`) with references to history files (like `.bash_history`) and specific keywords related to credentials. A positive finding is a strong indicator of credential harvesting.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) Logs
      - Linux Auditd Logs
      - Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, Critical infrastructure management hosts
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_logs WHERE (command_line CONTAINS '*.history' OR command_line CONTAINS '.*_history') AND (command_line CONTAINS 'cat' OR command_line CONTAINS 'grep' OR command_line CONTAINS 'strings') AND (command_line CONTAINS 'password' OR command_line CONTAINS 'apikey' OR command_line CONTAINS 'token' OR command_line CONTAINS 'secret')
  - question: Has a command involving a shell history file been executed with an unusually high-entropy argument, suggesting the presence of a key or token?
    context: This statistical approach seeks to find credential harvesting that might not use obvious keywords. High-entropy strings (random-looking text) are characteristic of cryptographic keys, tokens, and complex passwords. By baselining the normal entropy of command-line arguments for each user and host, we can flag significant deviations when a history file is accessed, pointing to the potential exposure of a high-value secret.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) Logs
      - Linux Auditd Logs
      - Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, Critical infrastructure management hosts
    range: last 90 days
    queries:
      - pseudocode: FOR each user, host | BASELINE command_line_argument_entropy | SEARCH process_execution_logs WHERE (command_line CONTAINS '*.history') AND calculate_entropy(command_line_argument) > 95th_percentile_baseline
  - question: Does a machine learning model classify a command-line execution involving a history file as suspicious credential access?
    context: This question leverages a trained machine learning model to make a more nuanced determination of malicious activity. By considering multiple features simultaneously—such as the process, parent process, command length, entropy, and keyword counts—the model can identify complex patterns of abuse that may be missed by simpler rules. It aims to provide a higher-fidelity signal for suspicious history file access.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) Logs
      - Linux Auditd Logs
      - Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, Critical infrastructure management hosts
    range: last 90 days
    queries:
      - pseudocode: INPUT process_execution_logs INTO credential_harvesting_model | RETURN events WHERE prediction = 'suspicious history access'
  - question: Has a user or process attempted to clear, disable, or tamper with shell history logging?
    context: This question focuses on identifying anti-forensic or defense evasion techniques. Adversaries often try to cover their tracks by deleting their command history. This query looks for specific, explicit commands used to disable history logging (`unset HISTFILE`), clear the current session's history (`history -c`), or delete the history file itself (`rm ~/.bash_history`), which are highly suspicious actions.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Linux Auditd Logs
      - User home directories on multi-user systems, Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_logs WHERE command_line MATCHES ('unset HISTFILE', 'export HISTSIZE=0', 'history -c', 'ln -s /dev/null', 'rm *history', '> *history')
  - question: Has a statistically rare process pair, such as a web service spawning a shell, been observed accessing a shell history file?
    context: This question aims to detect anomalous access patterns. System services like web servers (`apache2`, `nginx`) should not typically be spawning shells to read user history files. By baselining normal parent-child process relationships, we can identify these unusual and statistically rare events as strong indicators of a compromised service being used for privilege escalation or internal reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Linux Auditd Logs
      - User home directories on multi-user systems, Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled
    range: last 90 days
    queries:
      - pseudocode: BASELINE parent_process, child_process pairs | SEARCH process_creation_logs WHERE (command_line CONTAINS '*history') AND (parent_process, child_process) IS_RARE
  - question: Has a time-series anomaly detection model detected a significant and sudden decrease in the size of a critical user's shell history file?
    context: This question provides a way to detect history tampering without relying on command-line logs. By monitoring the file size of `.bash_history` files over time, a machine learning model can learn the normal growth pattern. A sudden, unexpected drop in file size is a strong anomaly that suggests the file has been truncated, deleted, or otherwise tampered with to remove evidence.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Linux Auditd Logs
      - User home directories on multi-user systems, Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled
    range: last 90 days
    queries:
      - pseudocode: MONITOR file_metadata('.bash_history') | INPUT file_size_timeseries INTO anomaly_detection_model | RETURN alerts WHERE observed_size is a negative_outlier
  - question: Has a shell history file been transferred over the network to an external or untrusted destination?
    context: This question directly targets the exfiltration of credentials. After harvesting sensitive information from a history file, an adversary will often transfer the file off the compromised system. This query looks for network file transfer logs where the filename matches a history file pattern and the destination is outside the known corporate network, which is a high-confidence indicator of data theft.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Network egress points (Internet gateways), Internal network segments connecting development environments to production, VPN termination points
    range: last 90 days
    queries:
      - pseudocode: SEARCH file_transfer_logs WHERE filename MATCHES '(^\\\\..*_history$)' AND destination_ip IS_EXTERNAL
  - question: Was a shell history file transferred to a geographically or logically anomalous network destination (Country or ASN)?
    context: This question adds context to the exfiltration detection by focusing on the destination. Most hosts have a predictable pattern of network communication. By baselining the countries and Autonomous Systems (ASNs) a host typically communicates with, we can flag the transfer of a sensitive history file to a new or rare destination as a potential exfiltration event, even if the IP itself is not on a blocklist.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Network egress points (Internet gateways), Internal network segments connecting development environments to production, VPN termination points
    range: last 90 days
    queries:
      - pseudocode: FOR each host | BASELINE outbound_file_transfer_destinations (Country, ASN) | SEARCH file_transfer_logs WHERE filename MATCHES '*history' AND destination_country_or_ASN NOT IN baseline
  - question: Is there a correlation between the transfer of a history file and a cluster of anomalous network connections indicative of staged exfiltration?
    context: This question uses machine learning to identify subtle exfiltration channels. Adversaries may use low-and-slow techniques or non-standard ports to exfiltrate data. By clustering all network connections based on their characteristics (IPs, ports, size, duration), we can identify anomalous clusters. Correlating these suspicious network patterns with a file transfer event involving a history file strengthens the evidence of malicious exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Network egress points (Internet gateways), Internal network segments connecting development environments to production, VPN termination points
    range: last 90 days
    queries:
      - pseudocode: CLUSTER network_connection_logs using DBSCAN | FIND anomalous_clusters | CORRELATE with file_transfer_logs where filename MATCHES '*history'
  - question: Has a sequence of events occurred on a single host within a short time window - home directory enumeration, followed by history file access, followed by an outbound network connection?
    context: This question aims to detect the entire lifecycle of a credential harvesting action by correlating discrete events into a logical attack chain. An adversary often first enumerates a user's home directory (`ls`), then accesses the file (`cat`), and finally uses the found credentials to connect outwards (`ssh`) or exfiltrate the file. Detecting this specific sequence in a short timeframe is a powerful indicator of an active intrusion.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), Network choke points (for observing outbound connections)
    range: last 90 days
    queries:
      - pseudocode: CORRELATE events on same host within 5 minutes | SEQUENCE 1. process_execution ('ls -la /home/*' OR 'dir %HOMEPATH%') -> 2. process_execution ('cat *history') -> 3. outbound_connection OR remote_logon
  - question: Has a host accumulated a high risk score based on a weighted combination of events like history file access, directory listing, and new outbound connections?
    context: This question uses a risk scoring model to quantify the suspicion level of a host's activity. Instead of a rigid sequence, it assigns points to various suspicious actions occurring within a rolling time window. Actions like accessing a history file are weighted more heavily than a simple directory listing. When a host's total score crosses a statistically defined threshold, it indicates a high probability of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), Network choke points (for observing outbound connections)
    range: last 90 days
    queries:
      - pseudocode: FOR each host over 15 minutes | CALCULATE risk_score (history_file_access=15, dir_listing=5, new_outbound_ssh=10) | ALERT if risk_score > threshold
  - question: Has a sequence-based machine learning model detected an anomalous series of events, such as a history file read followed by a new outbound network connection?
    context: This question applies advanced machine learning to understand the normal "grammar" of user and system actions. A Recurrent Neural Network (RNN) can learn typical sequences of events for a given user or host. When an unusual sequence occurs—one that the model predicts as having a very low probability, like reading the bash history immediately before making a network connection to an unknown IP—it is flagged as a potential threat.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), Network choke points (for observing outbound connections)
    range: last 90 days
    queries:
      - pseudocode: INPUT event_sequence_per_user INTO RNN_model | RETURN alerts WHERE model_predicts_low_probability for observed_event_sequence (e.g., file_read(*history) -> network_outbound(new_ip))