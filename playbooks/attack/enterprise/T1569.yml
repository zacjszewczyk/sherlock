name: T1569: System Services
id: d1e0f3e0-5b1a-4b0e-8c1d-0f7e6a2b3c4d
description: 'This playbook helps to answer the question: Is the adversary leveraging
  system services for execution? It focuses on detecting malicious services by analyzing
  their creation, modification, and execution patterns. This includes identifying
  services created with known malicious binaries, those installed in non-standard
  locations, services that impersonate legitimate ones through typosquatting, services
  exhibiting an anomalous short lifecycle, and legitimate service host processes (like
  svchost.exe) spawning unusual child processes or making rare network connections.
  The goal is to uncover persistence and execution achieved through the abuse of Windows
  System Services.'
type: technique
related:
- TA0002: Execution
contributors: Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
investigative_questions:
- question: Is a newly created or modified service associated with a known malicious
    file hash, and is it subsequently making outbound network connections to known
    command and control infrastructure?
  context: This question aims to detect a common attack pattern where adversaries
    install malware as a service. By correlating service events (creation/modification)
    with threat intelligence on file hashes and then linking that to process and
    network activity, analysts can identify a high-confidence indicator of compromise.
    This directly links a persistence mechanism (the service) to its malicious payload
    and C2 activity.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Critical Application Servers, Endpoint Subnets, Egress Network
    Gateways, Threat Intelligence Platform
  range: last 90 days
  queries:
  - symbolic: |-
      QUERY:
        JOIN (Windows Event ID 7045 OR 4697) with (Threat Intel Hash List) ON (FileHash)
        WHERE match found
        JOIN with (Windows Event ID 4688) ON (Host, ParentProcessID) to get ProcessID
        JOIN with (Zeek conn.log) ON (Host, ProcessID)
        JOIN with (Threat Intel C2 List) ON (DestinationIP or DestinationDomain)
        RETURN Alert
- question: Is a newly created service executable statistically rare within the environment,
    and is it making connections to statistically rare destinations?
  context: This question helps uncover novel or targeted malware that is not yet
    in threat intelligence feeds. Adversaries often use custom tools that will have
    a very small footprint in an organization. By identifying service executables
    that have only appeared on a few machines, and correlating that with network
    connections to destinations that are equally uncommon for the organization, analysts
    can find suspicious activity without prior knowledge of the threat.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Critical Application Servers, Endpoint Subnets, Egress Network
    Gateways, Threat Intelligence Platform
  range: last 90 days
  queries:
  - statistical: |-
      QUERY:
        FOR each new service file hash from (Windows Event ID 7045):
          CALCULATE prevalence (count of unique hosts) over last 30 days.
          IF prevalence < threshold (e.g., 5 hosts):
            GET ProcessID from spawned process (4688).
            GET network connections from process (Zeek conn.log).
            CALCULATE prevalence of destination IP/domain.
            IF destination prevalence is low:
              RETURN Alert
- question: Does a newly created service exhibit features (such as binary path, name
    entropy, or lack of a digital signature) that a machine learning model classifies
    as malicious?
  context: This question leverages machine learning to automate the detection of
    malicious services by learning the characteristics that differentiate them from
    legitimate ones. Features like the entropy of the service name can detect randomization,
    non-standard installation paths (e.g., a user's Temp folder) are highly suspicious,
    and unsigned binaries are a red flag. A model trained on these features can score
    new services in real-time, providing a probabilistic assessment of risk that can
    surface threats that might evade simpler rule-based detections.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Domain Controllers, Critical Application Servers, Endpoint Subnets, Egress Network
    Gateways, Threat Intelligence Platform
  range: last 90 days
  queries:
  - machine_learning: |-
      QUERY:
        FOR each new service event (Windows Event ID 7045):
          EXTRACT features (service name entropy, binary path, is_signed, parent process).
          INPUT features into trained classification model.
          IF model_score > confidence_threshold (e.g., 0.90):
            RETURN Alert
- question: Are service management utilities like sc.exe or PowerShell being used
    to create or modify a service whose executable is located in a suspicious, user-writable
    directory?
  context: Adversaries often drop their payloads into temporary or user-specific
    directories and then use built-in command-line tools to register them as services
    for persistence. This question directly targets that behavior by looking for the
    command-line execution of tools like `sc.exe` and `powershell.exe` that are creating
    services from non-standard locations like `C:\Users`, `C:\Windows\Temp`, or `C:\ProgramData`.
    This is a strong indicator of "living off the land" techniques.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - All Windows Endpoints, Windows Server Infrastructure, Administrator Workstations
  range: last 90 days
  queries:
  - symbolic: |-
      QUERY:
        SEARCH (Windows Event ID 4688)
        WHERE ProcessName IN ('sc.exe', 'powershell.exe')
        AND CommandLine CONTAINS ('create' OR 'config' OR 'New-Service' OR 'Set-Service')
        AND CommandLine MATCHES REGEX for binPath in ('C:\\Users\\*', 'C:\\Windows\\Temp\\*', etc.)
        RETURN Alert
- question: Are service creation commands exhibiting statistically anomalous characteristics,
    such as high entropy suggesting obfuscation, or being initiated by an unusual
    parent process?
  context: This question aims to detect obfuscated commands and unusual process chains.
    Adversaries may use complex, randomized, or encoded PowerShell commands to hide
    their actions, which results in a higher-than-normal command-line entropy. Additionally,
    a legitimate service creation is typically initiated by an administrator or a
    deployment script, not by a user application like a web browser or office document.
    Alerting on statistical deviations in command entropy or parent-process relationships
    can uncover these anomalies.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - All Windows Endpoints, Windows Server Infrastructure, Administrator Workstations
  range: last 90 days
  queries:
  - statistical: |-
      QUERY:
        FOR each service management command (sc.exe, powershell.exe from 4688):
          CALCULATE Shannon entropy of CommandLine.
          IF entropy > (baseline_mean + 3 * baseline_std_dev):
            RETURN Alert
          GET ParentProcessName.
          IF ParentProcessName is statistically rare for this action:
            RETURN Alert
- question: Does a command used to create or modify a service fall outside the clusters
    of normal, legitimate administrative activity when analyzed by a machine learning
    model?
  context: This question uses unsupervised machine learning to find outliers without
    pre-existing labels. By converting command-line properties (like length, arguments,
    keywords) into numerical features, a clustering algorithm like DBSCAN can group
    together similar, legitimate commands. Any command that does not fit into a dense
    cluster is flagged as noise or an anomaly. This is effective for finding unique,
    one-off malicious commands that do not match any known pattern but are clearly
    different from the bulk of normal activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - All Windows Endpoints, Windows Server Infrastructure, Administrator Workstations
  range: last 90 days
  queries:
  - machine_learning: |-
      QUERY:
        FOR each service management command (4688):
          EXTRACT features (command length, arg count, keywords).
          INPUT feature vector into DBSCAN model.
          IF model classifies as 'noise' or 'outlier':
            RETURN Alert
- question: Has a new or modified service been registered that uses the name of a
    legitimate service but points to an incorrect executable path?
  context: This question looks for service impersonation or masquerading. Adversaries
    create malicious services with names that are identical to legitimate Windows
    services to blend in. However, the underlying binary path will point to their
    malicious payload instead of the correct system file. By maintaining and checking
    against a baseline of known-good service names and their corresponding image paths,
    analysts can quickly spot these discrepancies.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Standardized Server Builds (Golden Images), Endpoint Fleet, Configuration Management
    Database (CMDB), Software Asset Management Database
  range: last 90 days
  queries:
  - symbolic: |-
      QUERY:
        MAINTAIN baseline dictionary of {ServiceName: ImagePath}.
        ON event (Windows Event ID 7045 OR 4697):
          IF ServiceName in baseline AND ImagePath != baseline[ServiceName]:
            RETURN Alert
- question: Has a new service been created with a name that is a close misspelling
    (typosquat) of a legitimate, known service?
  context: This question aims to detect typosquatting, a variation of service masquerading.
    Instead of an exact name match, the adversary uses a name that is visually very
    similar to a real service name (e.g., 'WinDefen' instead of 'WinDefend'). These
    are designed to fool a human analyst during a cursory review. By calculating
    the string edit distance (e.g., Levenshtein distance) between a new service name
    and a list of all legitimate names, it's possible to programmatically flag potential
    typosquats.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Standardized Server Builds (Golden Images), Endpoint Fleet, Configuration Management
    Database (CMDB), Software Asset Management Database
  range: last 90 days
  queries:
  - statistical: |-
      QUERY:
        MAINTAIN baseline list of legitimate service names.
        ON new service creation (7045):
          CALCULATE Levenshtein distance between new ServiceName and all names in baseline.
          IF minimum_distance IN (1, 2):
            RETURN Alert
- question: Does a newly created service exhibit a combination of anomalous features,
    such as its name and binary path characteristics, that cause a high reconstruction
    error in an autoencoder model?
  context: This question uses an autoencoder, a type of neural network, to learn
    the deep patterns of what constitutes a "normal" service based on features like
    its name, path, and binary signature. Malicious services, which deviate from these
    learned patterns, will be poorly reconstructed by the model, resulting in a high
    "reconstruction error." This provides a powerful method for detecting novel and
    unusual services that do not conform to established norms within the environment.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Standardized Server Builds (Golden Images), Endpoint Fleet, Configuration Management
    Database (CMDB), Software Asset Management Database
  range: last 90 days
  queries:
  - machine_learning: |-
      QUERY:
        FOR each new service (7045):
          EXTRACT feature vector (name embedding, path properties, is_signed).
          INPUT vector into trained autoencoder.
          CALCULATE reconstruction error.
          IF error > anomaly_threshold:
            RETURN Alert
- question: Has a service been created, started, and then deleted in an unusually
    short period of time?
  context: This question targets the use of services for temporary execution rather
    than long-term persistence. An adversary might install a service to run a payload
    once and then immediately remove it to clean up their tracks. A legitimate service
    is typically long-lived. Correlating service creation, start, and deletion events
    for the same service name on the same host within a short window (e.g., under
    15 minutes) is a strong indicator of this malicious "hit and run" behavior.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7036
  - Windows Event ID 7034
  - Windows Event ID 4688
  - All Windows Hosts, Software Deployment and Patch Management Servers, SIEM/Log
    Management System
  range: last 90 days
  queries:
  - symbolic: |-
      QUERY:
        CORRELATE by Host and ServiceName:
        IF sequence [7045 (Create) -> 7036 (Start) -> 4688 (sc.exe delete)] occurs < 15 minutes:
          RETURN Alert
- question: Is a service exhibiting an anomalously short runtime or crashing with
    unusual frequency?
  context: This question uses statistical analysis to find services that behave abnormally.
    A service that starts and then almost immediately stops or crashes might be a
    poorly written malicious tool, or it could be designed for a quick execution task.
    By establishing a baseline for normal service runtimes and crash frequencies,
    outlier detection methods can automatically flag services that fall outside these
    norms, pointing analysts toward potentially unstable or malicious software.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7036
  - Windows Event ID 7034
  - Windows Event ID 4688
  - All Windows Hosts, Software Deployment and Patch Management Servers, SIEM/Log
    Management System
  range: last 90 days
  queries:
  - statistical: |-
      QUERY:
        TRACK time delta between service start (7036) and stop/crash (7036, 7034).
        IF runtime is an outlier (e.g., using IQR method):
          RETURN Alert
        COUNT crash events (7034) per service per hour.
        IF crash_frequency > 99th percentile:
          RETURN Alert
- question: Is a service exhibiting an anomalous sequence of lifecycle events (e.g.,
    create, start, crash, restart) that deviates from learned normal behavior?
  context: This question models the entire lifecycle of a service as a sequence of
    events. A Long Short-Term Memory (LSTM) autoencoder can be trained on event sequences
    from thousands of legitimate services to learn what normal lifecycle patterns
    look like. A malicious service that is rapidly created and deleted, or one that
    repeatedly crashes and restarts, will generate a sequence that the model cannot
econstruct accurately, flagging it as a high-fidelity anomaly.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7036
  - Windows Event ID 7034
  - Windows Event ID 4688
  - All Windows Hosts, Software Deployment and Patch Management Servers, SIEM/Log
    Management System
  range: last 90 days
  queries:
  - machine_learning: |-
      QUERY:
        MODEL service events as a time series sequence.
        INPUT sequence into trained LSTM autoencoder.
        CALCULATE reconstruction error.
        IF error > anomaly_threshold:
          RETURN Alert
- question: Has a common service host process, like svchost.exe or services.exe,
    spawned a suspicious child process such as a command shell or scripting engine?
  context: This question targets process injection or abuse of service host processes.
    Legitimate service hosts like `svchost.exe` have a predictable set of child processes
    they might launch (which is very few). The sudden appearance of `cmd.exe`, `powershell.exe`,
    or a scripting engine as a child of a service host is a massive red flag, often
    indicating that an adversary has compromised the service to execute arbitrary
    commands. This rule provides a simple but very high-fidelity detection for this
    technique.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Egress Network Gateways, DNS Resolvers, All Windows Hosts
  range: last 90 days
  queries:
  - symbolic: |-
      QUERY:
        SEARCH (Windows Event ID 4688)
        WHERE ParentProcessName IN ('svchost.exe', 'dllhost.exe', 'services.exe')
        AND ProcessName IN ('cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe', 'rundll32.exe')
        RETURN Alert
- question: Has a service host process spawned a child process that is not on its
    historical baseline, or has it initiated a network connection to a statistically
    rare destination?
  context: This question moves beyond a static list of "bad" child processes and
    uses historical data to define what is normal for your specific environment. It
    baselines all parent-child process relationships and network destinations for
    service hosts. An alert is generated when a new, never-before-seen child process
    is spawned or when a network connection is made to a destination that is exceptionally
    rare across the organization. This helps detect novel attacker tools and C2 infrastructure.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Egress Network Gateways, DNS Resolvers, All Windows Hosts
  range: last 90 days
  queries:
  - statistical: |-
      QUERY:
        BUILD baseline of child processes for each service host parent.
        IF new child process appears that is not in baseline:
          RETURN Alert
        BUILD baseline of network destinations for each service host.
        IF new connection is to a low-prevalence destination:
          RETURN Alert
- question: Has a new parent-child process relationship appeared that connects two
    distinct and normally unrelated clusters of activity in the process graph?
  context: This question visualizes all process activity as a large graph and uses
    machine learning to find anomalous connections. Community detection algorithms
    can group processes into clusters that represent normal workflows (e.g., the "Office
    Applications" cluster, the "System Services" cluster). An attack is often represented
    by an edge that bridges two previously disconnected communities, such as an edge
    from `svchost.exe` (System Services) to `powershell.exe` (Admin Tools). This approach
    can detect unusual process lineage at a macro level.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Egress Network Gateways, DNS Resolvers, All Windows Hosts
  range: last 90 days
  queries:
  - machine_learning: |-
      QUERY:
        CONSTRUCT process relationship graph from 4688 events.
        APPLY community detection algorithm (e.g., Louvain) to find clusters.
        IN real-time, if a new process edge connects two distant communities:
          RETURN Alert