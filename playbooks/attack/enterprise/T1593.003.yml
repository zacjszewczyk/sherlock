name: T1593.003: Code Repositories
id: f8e1a0b2-c7d3-4a6e-9f8b-1b9c0d8a5e4f
description: This playbook addresses threats related to adversaries conducting reconnaissance on public code repositories. It provides investigative questions to detect leaked credentials via secret scanning, identify suspicious clone/fork activity from new or anomalous accounts, discover misconfigured repositories (e.g., private repos made public), and correlate leaked credentials with subsequent authentication attempts (e.g., credential stuffing, password spraying) or connections to non-public endpoints discovered in code.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are high-severity secrets (e.g., AWS keys, private keys, API tokens) being committed to public repositories?
    context: This question aims to provide an immediate, high-fidelity alert when a critical credential is exposed in a public code repository. The accidental commitment of secrets like API tokens or private keys can grant an adversary direct access to sensitive systems, making rapid detection and response crucial to prevent a breach.
    answer_sources:
      - GitHub Advanced Security alert logs
      - GitGuardian alert logs
      - Third-party secret scanning service API logs
      - Third-party secret scanning platforms and APIs
    range: last 90 days
    queries:
      - query: SEARCH secret_scanning_alerts WHERE secret_type IN (predefined_list) AND repository_visibility = 'public'. TRIGGER high_severity_incident.
  - question: Are any specific developers repeatedly leaking secrets, potentially indicating a need for training or a compromised account?
    context: This question focuses on identifying patterns of risky behavior. A developer who frequently leaks credentials, even low-severity ones, may require additional security training. Alternatively, a sudden spike in leaks from a single account could signal that the developer's credentials have been compromised and are being used by an adversary.
    answer_sources:
      - GitHub Advanced Security alert logs
      - GitGuardian alert logs
      - Third-party secret scanning service API logs
      - Third-party secret scanning platforms and APIs
    range: last 30 days
    queries:
      - query: AGGREGATE secret_scanning_alerts BY author OVER 30_days. COUNT alerts. ALERT IF count > 95th_percentile_for_all_developers.
  - question: Can machine learning be used to automatically prioritize and escalate the most critical secret leak alerts?
    context: This question seeks to improve the signal-to-noise ratio of secret scanning alerts. By training a model on historical data, the system can learn to distinguish between low-risk, false-positive alerts and high-impact, true-positive leaks. This allows security teams to focus their attention on the most severe threats and automate the escalation process.
    answer_sources:
      - GitHub Advanced Security alert logs
      - GitGuardian alert logs
      - Third-party secret scanning service API logs
      - Third-party secret scanning platforms and APIs
    range: last 90 days
    queries:
      - query: SCORE new_secret_alert USING classification_model(features: repo_sensitivity, file_extension, commit_keywords, secret_entropy). ESCALATE IF score > 0.85.
  - question: Are newly created user accounts (less than 72 hours old) cloning or forking sensitive repositories?
    context: This question addresses the threat of "smash-and-grab" attacks, where an adversary creates a new account to quickly exfiltrate code from high-value repositories before the account can be detected or disabled. Monitoring for this specific behavior provides an early warning of targeted reconnaissance.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider audit logs
    range: last 90 days
    queries:
      - query: SEARCH git_audit_logs FOR action IN ('git.clone', 'repo.fork'). JOIN with user_metadata. ALERT IF (event_timestamp - user.created_at < 72_hours) AND repository.tag = 'sensitive'.
  - question: Is there a statistical anomaly in the daily clone count for critical repositories, especially from new accounts?
    context: This question uses statistical baselining to detect unusual spikes in repository cloning activity. A sudden increase in clones, especially when driven by newly created accounts, can indicate a large-scale code exfiltration attempt or the beginning of a broader reconnaissance campaign against a critical project.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider audit logs
    range: last 30 days
    queries:
      - query: CALCULATE 30_day_moving_average_and_std_dev of daily_clone_events for critical_repositories. ALERT IF daily_count > (mean + 3*std_dev). ESCALATE IF percentage_from_new_accounts > 90th_percentile.
  - question: Can a time-series model detect statistically significant deviations from normal clone and fork activity on critical repositories?
    context: This question applies more advanced anomaly detection to identify subtle or complex patterns of unusual activity that simpler threshold-based alerts might miss. By modeling the expected temporal patterns of repository access, it can flag any significant deviation, providing a sensitive indicator of potential reconnaissance.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider audit logs
    range: last 90 days
    queries:
      - query: MODEL clone_fork_events on critical_repositories using SARIMA. ALERT IF observed_activity falls outside 99%_confidence_interval.
  - question: Are there any repositories with a more permissive public visibility setting (e.g., 'public') than their intended state (e.g., 'private')?
    context: This question focuses on proactively identifying and correcting repository misconfigurations. A private repository accidentally exposed to the public is a significant data leak risk. This check provides a critical safeguard to ensure internal code remains internal.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider APIs and audit logs
    range: last 90 days
    queries:
      - query: QUERY Git_API for all_repository_visibility. COMPARE with master_list_of_intended_visibility. ALERT IF actual_visibility > intended_visibility.
  - question: Is there a sudden drop in the diversity (entropy) of repository access events, suggesting targeted access rather than broad activity?
    context: This question uses information theory to detect a shift in adversary behavior. Normal developer activity is often spread across many repositories. An attacker, however, may focus intensely on a few specific, high-value repositories. A sharp drop in the entropy of accessed repository names can signal this shift from broad exploration to a targeted attack.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider APIs and audit logs
    range: last 30 days
    queries:
      - query: AGGREGATE repo.access events hourly. CALCULATE Shannon_entropy of repository_names. ALERT IF hourly_entropy < 10th_percentile_of_30_day_history.
  - question: Can an unsupervised model identify anomalous user sessions involving repositories that are intended to be private?
    context: This question leverages machine learning to build a holistic view of user behavior and flag entire sessions that deviate from the norm. By considering multiple features like the number of clones, time of day, and account age, an Isolation Forest model can identify complex, multi-event patterns of suspicious activity that might otherwise go unnoticed, especially when private repositories are involved.
    answer_sources:
      - GitHub audit stream
      - GitLab audit events
      - Cloud-based Git provider APIs and audit logs
    range: last 90 days
    queries:
      - query: MODEL git_user_sessions using Isolation_Forest (features: repo_clones, forks, time_of_day, account_age). FLAG sessions with high_anomaly_scores involving private_intended_repositories.
  - question: Is an external IP address attempting to authenticate using credentials recently discovered in a public code repository?
    context: This question directly links the reconnaissance phase (credential leak) to the initial access phase (login attempt). It provides a critical, high-confidence alert that an adversary is actively trying to exploit a known leaked credential, warranting immediate incident response.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Cloud Identity Provider Logs (e.g., Azure AD), Perimeter Firewalls
    range: last 90 days
    queries:
      - query: SEARCH authentication_logs (EventID 4624, 4625) WHERE source_ip is_external AND username IN leaked_credential_watchlist. TRIGGER critical_alert.
  - question: Is a user on the leaked credential watchlist experiencing an anomalously high rate of external authentication failures?
    context: This question aims to detect targeted credential stuffing attempts against a specific account known to be compromised. By establishing a baseline failure rate for each user, the system can alert on statistically significant increases, indicating that an attacker is repeatedly trying to guess the new password or exploit the leaked one against different systems.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Cloud Identity Provider Logs (e.g., Azure AD), Perimeter Firewalls
    range: last 30 days
    queries:
      - query: CALCULATE 30_day_baseline_auth_failure_rate for each user_on_watchlist. ALERT IF hourly_failure_rate > (baseline + 3*std_dev).
  - question: Can a machine learning model score the risk of each external authentication attempt to identify malicious activity?
    context: This question seeks to apply machine learning for more nuanced detection of malicious login attempts. By incorporating various risk factors like whether the user is on a watchlist, the rarity of the source IP's ASN and geolocation, and the time of day, a model can provide a probabilistic risk score, allowing for more intelligent and automated threat detection than simple rule-based alerts.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Cloud Identity Provider Logs (e.g., Azure AD), Perimeter Firewalls
    range: last 90 days
    queries:
      - query: SCORE external_auth_attempt using classification_model(features: is_on_watchlist, source_ASN, geolocation, time_of_day). ALERT IF score > 0.9.
  - question: Is a single external IP address generating a high volume of logon failures across many different user accounts in a short time frame?
    context: This question is designed to detect a classic password spraying attack. In such an attack, an adversary uses a single or small list of common passwords against many different usernames. This rule identifies this one-to-many pattern of failed logins, which is a strong indicator of an automated attack.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Web Application Firewalls (WAFs)
    range: last 90 days
    queries:
      - query: SEARCH authentication_failures (EventID 4625) GROUP BY source_ip over 5_minutes. COUNT distinct user_accounts. ALERT IF distinct_users > 10.
  - question: Is there a source IP where the ratio of unique accounts targeted to total failed logins is close to 1.0, indicating a password spray?
    context: This question provides a more refined method for detecting password spraying. A high ratio of unique accounts to failed attempts is characteristic of spraying (one password per user), whereas a low ratio is more typical of a brute-force attack against a single account (many passwords per user). This metric helps distinguish between attack types.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Web Application Firewalls (WAFs)
    range: last 90 days
    queries:
      - query: GROUP failed_logins by source_ip over 1_hour. CALCULATE ratio = (unique_accounts / total_failures). ALERT IF ratio > 0.9 AND unique_accounts > 10.
  - question: Can a clustering algorithm automatically identify groups of authentication events that represent a password spraying attack?
    context: This question uses unsupervised machine learning to discover password spraying activity without predefined rules. By clustering authentication events based on features like source IP and user-agent, a DBSCAN algorithm can isolate dense clusters that represent a single attacker (same source IP/user-agent) targeting a sparse collection of victims (many different user accounts), effectively identifying the attack pattern.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Domain Controllers, VPN Concentrators, Web Application Firewalls (WAFs)
    range: last 90 days
    queries:
      - query: CLUSTER auth_logs over 15_minutes using DBSCAN(features: source_ip, user_agent, target_account). ALERT on clusters with 1 source_ip and many distinct_accounts.
  - question: Is an external entity attempting to resolve the DNS name of an internal-only service?
    context: This question aims to detect when an adversary, having discovered an internal hostname from a public code repository, attempts to find its IP address. A DNS query for an internal-only hostname originating from the public internet is a high-fidelity indicator that an attacker is trying to map the internal network.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Perimeter Firewalls, DNS Resolvers, Network TAPs providing data to Zeek sensors
    range: last 90 days
    queries:
      - query: SEARCH dns_logs WHERE query IN internal_hostname_watchlist AND source_resolver is_external. TRIGGER high_severity_alert.
  - question: Is there a successful inbound connection from an external IP to an extremely rare destination port?
    context: This question uses statistical analysis to identify network connections to unusual or non-standard ports. Adversaries may use services running on obscure ports discovered in code. A connection to a port that is rarely ever used for inbound traffic is highly suspicious and could indicate an attempt to access a hidden or forgotten service.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Perimeter Firewalls, DNS Resolvers, Network TAPs providing data to Zeek sensors
    range: last 30 days
    queries:
      - query: CALCULATE frequency of all inbound destination_ports over 30_days. ALERT on successful_connection WHERE destination_port is in bottom_1st_percentile.
  - question: Can a machine learning model be trained on normal inbound network traffic to detect anomalous connections?
    context: This question proposes using a one-class classifier to create a model of what constitutes "normal" inbound network connections. Any new connection that deviates significantly from this learned model, based on features like port, protocol, and data volume, is flagged as an outlier. This provides a powerful way to detect novel or unusual connection patterns that might be associated with an adversary exploiting information from a code repository.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Perimeter Firewalls, DNS Resolvers, Network TAPs providing data to Zeek sensors
    range: last 90 days
    queries:
      - query: MODEL normal_inbound_connections using One-Class_SVM(features: dest_port, protocol, duration, bytes). ALERT on any new_connection identified as outlier.