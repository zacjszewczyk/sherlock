name: T1098.006: Additional Container Cluster Roles
id: f5b8a1c2-3d4e-4f5a-8b6c-7d8e9f0a1b2c
description: This playbook focuses on detecting adversaries attempting to achieve persistence or escalate privileges within a containerized environment, specifically by manipulating Kubernetes RBAC roles. It addresses the core questions of whether an adversary is adding roles to container accounts for long-term access or to gain higher permissions. The playbook identifies various indicators of this activity, such as RBAC modifications originating from suspicious IP addresses or using malicious tool signatures, the creation of role bindings with suspicious names or high-privilege roles like 'cluster-admin' assigned to non-administrative accounts, and RBAC changes performed by unauthorized users or at unusual times. It also covers reconnaissance patterns, like enumeration of RBAC resources followed by a modification, and correlations with other suspicious events, such as prior anomalous process execution on a node that subsequently modifies cluster roles. The goal is to detect unauthorized and malicious changes to Kubernetes cluster roles and bindings that could lead to a compromise.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a request to modify Kubernetes RBAC roles originated from a known malicious IP address or been initiated by a known malicious tool?
  context: |
    This question aims to identify overt malicious activity targeting the Kubernetes RBAC API. Adversaries often use compromised infrastructure or publicly available attack tools. By checking the source IP of API requests against threat intelligence feeds (including known malicious IPs and TOR exit nodes) and scanning the User-Agent string for signatures of tools like 'kube-hunter' or 'peirates', we can detect low-hanging fruit and known threats attempting to establish persistence.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Kubernetes API Server
  - Network Egress/Ingress Points
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH Zeek conn.log WHERE destination is k8s_api_server
      JOIN source_ip WITH threat_intel_feed
      IF match, ALERT.
      SEARCH Zeek http.log WHERE uri CONTAINS rbac_api_path
      AND user_agent IN known_malicious_tool_list
      IF match, ALERT.
- question: Is an RBAC modification request originating from a statistically rare geographic location or network (ASN)?
  context: |
    This question helps identify suspicious RBAC modifications by focusing on their origin. Most legitimate API interactions originate from a predictable set of networks (ASNs) and geographic locations. An adversary operating from unusual infrastructure will stand out. By establishing a baseline of normal source locations and ASNs for API traffic, any request to modify RBAC from a source that is statistically rare (e.g., from an ASN that accounts for less than 0.1% of traffic) can be flagged as a potential threat.
  answer_sources:
  - Zeek conn.log
  - Kubernetes API Server
  - Network Egress/Ingress Points
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      BASELINE historical ASN and country for all k8s API traffic.
      FOR each new RBAC modification request:
        CALCULATE rarity of source IP's ASN and country.
        IF rarity < threshold (e.g., 0.1%), ALERT.
- question: Does a request to an RBAC endpoint exhibit characteristics that a machine learning model classifies as malicious?
  context: |
    This question leverages machine learning to detect nuanced or novel threats that may not be caught by simple signature-based rules. A model can be trained on a wide array of features from API requests, such as User-Agent string structure, request method, URI path, and source IP reputation. By learning the patterns of both known-good and known-bad requests from historical data, the model can score new, incoming requests in real-time and alert when a request to an RBAC endpoint is classified as malicious with high confidence, providing a more sophisticated layer of defense.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Kubernetes API Server
  - Network Egress/Ingress Points
  - Threat Intelligence Platform
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN a classifier (e.g., Random Forest) on labeled historical requests (benign/malicious).
      Features: User-Agent, method, URI, IP reputation, etc.
      DEPLOY model to score new requests to RBAC endpoints.
      IF score > confidence_threshold, ALERT.
- question: Has a high-privilege role like 'cluster-admin' been bound to a ServiceAccount in a non-standard namespace, or has a role binding been created with a suspicious name?
  context: |
    This question looks for high-fidelity indicators of compromise. Binding the 'cluster-admin' role to a ServiceAccount is a common privilege escalation technique. While it can be legitimate in the 'kube-system' namespace, its presence elsewhere is highly suspicious. Similarly, adversaries may create bindings with names that reveal their intent, such as 'pwn-backdoor'. This query uses specific, targeted rules to find these clear-cut signs of malicious activity.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH Zeek http.log for POST to RBAC endpoints.
      PARSE JSON payload.
      IF (roleRef.name is 'cluster-admin' AND subject.kind is 'ServiceAccount' AND namespace is NOT 'kube-system'), ALERT.
      IF metadata.name MATCHES '.*-backdoor.*' or '.*-pwn.*', ALERT.
- question: Has a new high-privilege role binding been created that is statistically rare compared to historical binding events?
  context: |
    This question aims to detect unusual high-privilege assignments by baselining normal activity. In a stable environment, the creation of new bindings for powerful roles like 'cluster-admin' should be infrequent and tied to planned operational changes. By tracking the frequency of these events, we can establish a statistical norm. An alert is triggered if a new high-privilege binding occurs, and such an event is statistically rare (e.g., happens less than once a quarter), suggesting an unplanned and potentially malicious change.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      INVENTORY all high-privilege role bindings.
      CALCULATE historical frequency of new high-privilege bindings.
      IF a new binding occurs and the event frequency is > 99th percentile, ALERT.
- question: Does a new role binding request have features that an anomaly detection model flags as an outlier?
  context: |
    This question uses unsupervised machine learning to find novel and suspicious role bindings that don't match any known bad patterns. An anomaly detection model (like an Isolation Forest) is trained on a baseline of legitimate binding creation events, learning what 'normal' looks like based on features like the subject, role, creator, and source IP. When a new binding request is made, the model scores it. If the request is flagged as a significant outlier, it indicates a deviation from normal operations that warrants investigation.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN an anomaly detection model (e.g., Isolation Forest) on legitimate binding events.
      Features: subject, role, user_agent, source_ip.
      SCORE new binding requests in real-time.
      IF anomaly_score is high, ALERT.
- question: Was an RBAC modification performed by a user principal not on the pre-approved list of administrators?
  context: |
    This question provides a clear, high-fidelity method for detecting unauthorized changes. By maintaining a static, curated list of user principals who are explicitly authorized to modify Kubernetes RBAC settings, any modification attempt from a user not on this list is an immediate red flag. This approach is effective for enforcing strict change control and quickly identifying insider threats or compromised non-administrative accounts being used to escalate privileges.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MAINTAIN static list of authorized_rbac_admins.
      SEARCH Zeek http.log for RBAC modifications.
      IF user_principal NOT IN authorized_rbac_admins, ALERT.
- question: Did an authorized administrator perform an RBAC modification at a statistically anomalous time (e.g., outside of normal working hours)?
  context: |
    This question helps detect compromised administrator accounts by analyzing the timing of their actions. Legitimate administrative tasks, including RBAC changes, typically occur during standard business hours or approved change windows. By building a statistical baseline of when each administrator normally performs these actions, we can detect significant deviations. An RBAC change made by a valid administrator at 3 AM on a Sunday, for example, would be flagged as anomalous and could indicate that their account has been compromised.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each admin, BASELINE time-of-day/day-of-week for RBAC changes.
      CALCULATE mean and standard deviation.
      IF new RBAC change occurs > 2 standard deviations from mean time, ALERT.
- question: Has an administrator performed a number of RBAC modifications that significantly exceeds the time-series forecast for their typical activity?
  context: |
    This question uses predictive analysis to spot abnormal behavior from an otherwise authorized user. An administrator's account could be compromised and used to make rapid, widespread changes. By training a time-series model (like ARIMA) on the history of an administrator's RBAC modification events, we can forecast the expected number of changes for any given time interval. If the actual number of modifications suddenly and significantly exceeds the model's prediction, it suggests abnormal, potentially malicious automated activity.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each admin, TRAIN a time-series model (e.g., ARIMA) on history of RBAC changes.
      PREDICT expected number of changes per hour.
      IF actual_changes > predicted_changes + confidence_interval, ALERT.
- question: Did a single source IP perform rapid enumeration of RBAC resources followed closely by a modification to an RBAC binding?
  context: |
    This question identifies a common attack pattern: reconnaissance followed by action. Before attempting to create or modify a role, an adversary will often enumerate existing roles and permissions to understand the environment. This query uses a stateful rule to detect this behavior by flagging a source IP that generates a high volume of read requests (GET) to RBAC endpoints within a short window, and then immediately follows up with a write request (POST/PUT) to create a binding. This sequence is highly indicative of a targeted attack.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      DEFINE stateful rule.
      TRIGGER if source_ip generates >50 GET requests to RBAC endpoints in 5 min.
      IF same source_ip then generates a POST/PUT to rolebindings endpoint in next 5 min, ALERT.
- question: Did a user exhibit a statistically abnormal ratio of read (GET) to write (POST/PUT) operations on RBAC objects?
  context: |
    This question aims to detect the reconnaissance phase of an attack by analyzing a user's behavior. Legitimate administrators typically have a somewhat stable ratio of read-to-write operations on RBAC objects. An attacker, however, will likely perform a large number of read operations (enumeration) before a single write operation (the attack). By establishing a baseline for this read/write ratio for each user, we can trigger an alert when a user's ratio suddenly spikes, indicating they are performing unusual levels of reconnaissance before making a change.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each user, BASELINE the ratio of GET to POST/PUT operations on RBAC objects.
      CALCULATE 99th percentile for this ratio across all users.
      IF a user's ratio exceeds this threshold in a short window, ALERT.
- question: Did a user's sequence of API calls match a pattern identified as anomalous by a sequence analysis model?
  context: |
    This question seeks to identify malicious intent by analyzing the entire workflow of a user's session, not just individual actions. Legitimate administrative tasks often follow predictable sequences of API calls. A sequence analysis model, like a Hidden Markov Model (HMM), can be trained on these legitimate sequences. An attacker's actions—such as rapidly listing many different roles before creating a new binding—may form a sequence that has a very low probability of occurring under the model of normal behavior, thus flagging it as a potential attack.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN a sequence model (e.g., HMM) on API call sequences from legitimate admin sessions.
      SCORE new user sessions based on the probability of their action sequence.
      IF probability is below a threshold, ALERT on anomalous behavior pattern.
- question: Did an RBAC modification originate from a host IP that was recently flagged for suspicious process activity?
  context: |
    This question connects two potentially related events to identify a likely compromise. An adversary might first compromise a pod or node and then use that access to escalate privileges by modifying RBAC roles. This query establishes a direct correlation: if a host triggers an alert for a suspicious process (e.g., a reverse shell), its IP is added to a temporary watchlist. If any Kubernetes RBAC modification is then initiated from that same IP within a short time frame (e.g., 60 minutes), it's treated as a critical incident, linking the initial compromise to the subsequent persistence attempt.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Windows Event ID 4688
  - Cluster Worker Nodes
  - Kubernetes API Server
  - Security Incident and Event Management (SIEM) System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      IF alert for suspicious process on host (e.g., from Event ID 4688), ADD host_ip to watchlist for 60 mins.
      IF RBAC modification API call observed from an IP on the watchlist, TRIGGER CRITICAL ALERT.
- question: Did an RBAC modification originate from a node with a statistically high risk score based on preceding security events?
  context: |
    This question provides a dynamic way to assess the threat level of an action by considering the context of its source. Instead of treating all nodes as equal, this method assigns a risk score to each node IP. The score increases with each security event associated with that node (e.g., anomalous processes, connections to malicious IPs). An RBAC modification, while potentially legitimate on its own, becomes highly suspect if it originates from a node that has accumulated a high risk score, indicating it may already be compromised.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Windows Event ID 4688
  - Cluster Worker Nodes
  - Kubernetes API Server
  - Security Incident and Event Management (SIEM) System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MAINTAIN risk score for each node IP, incrementing on security events.
      IF RBAC modification is initiated from an IP with risk_score > 95th percentile, ALERT.
- question: Does a graph-based analysis reveal a highly anomalous path connecting a suspicious process to an RBAC modification via a common node?
  context: |
    This question uses advanced analytics to visualize and detect multi-stage attack paths that might otherwise appear as disconnected events. By modeling entities (like pods, nodes, users) and their actions (processes, API calls) as a graph, we can identify suspicious chains of activity. A path like 'Anomalous Process' -> 'runs on Node X' -> 'initiates API Call to Modify RBAC' -> 'from Node X IP' would be identified by a graph anomaly detection model as a highly improbable and suspicious subgraph, strongly indicating a compromise and privilege escalation attempt.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Windows Event ID 4688
  - Cluster Worker Nodes
  - Kubernetes API Server
  - Security Incident and Event Management (SIEM) System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MODEL cluster activity as a graph (nodes=entities, edges=actions).
      USE graph anomaly detection to find anomalous subgraphs.
      ALERT on paths connecting suspicious processes to RBAC modifications via a common node.
- question: Was a role binding created or modified to include high-risk permissions like 'impersonate', wildcards, or the ability to modify RBAC objects themselves?
  context: |
    This question targets one of the most direct methods of privilege escalation: granting overly permissive or inherently dangerous rights. Certain permissions, such as the 'impersonate' verb (allowing one user to act as another), wildcard ('*') access to all resources or verbs, or the ability to create/update RBAC roles, are extremely powerful. This query inspects the content of newly bound roles and triggers an immediate alert if any of these high-risk rules are present, as they are common tools for attackers to solidify control and escalate privileges.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      ON RBAC binding change, parse the referenced role definition.
      IF role.rules contains 'verbs: [impersonate]' OR 'verbs: [*]' OR 'resources: [*]', ALERT.
      IF role.rules allows 'create/update' on 'rolebindings', ALERT.
- question: Was a role with a statistically high 'privilege score' assigned to a subject type (e.g., a non-administrative service account) that typically does not receive such high privileges?
  context: |
    This question seeks to quantify and baseline the risk of role assignments. By assigning a numerical 'privilege score' to each role based on the power of its permissions (e.g., 'impersonate' = 10, 'wildcard' = 5), we can move beyond simple high/low-risk labels. We can then establish a baseline for the average privilege score of roles typically assigned to different types of subjects (e.g., users vs. service accounts). An alert is triggered if a new binding assigns a role with a score that is a statistical outlier for that subject type, indicating a potentially inappropriate and malicious privilege escalation.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CALCULATE privilege_score for each role based on its permissions.
      BASELINE average privilege_score for roles assigned to non-admin service accounts.
      IF new binding assigns a role with a score > 3 standard deviations above the mean, ALERT.
- question: Did a machine learning model classify a role as 'high-risk' and was it bound to a subject not previously associated with high-risk roles?
  context: |
    This question combines machine learning-based classification with historical context to spot privilege escalation. First, a classification model is trained to automatically categorize Kubernetes roles as 'high-risk' or 'low-risk' based on their permission definitions. This automates the analysis of complex roles. Then, when a role is bound, the system checks two things: the role's classification and the subject's history. If a role classified as 'high-risk' is assigned to a user or service account that has never held a high-risk role before, the event is flagged as a potential privilege escalation.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN a classifier to label roles as 'high-risk' or 'low-risk'.
      MAINTAIN history of subjects associated with high-risk roles.
      IF a 'high-risk' role is bound to a subject NOT in the history, ALERT.
- question: Was a 'ClusterRoleBinding' created that binds a 'ServiceAccount' to the 'cluster-admin' role?
  context: |
    This question identifies a critical, unambiguous indicator of a potential cluster takeover. The 'cluster-admin' role grants unrestricted, superuser-level access to the entire cluster. Binding this role to a ServiceAccount is a powerful persistence and privilege escalation technique, as the ServiceAccount token can then be used to control the cluster. This action is so rarely legitimate that it warrants a zero-tolerance, high-severity rule. Any observation of a ServiceAccount being bound to 'cluster-admin' should trigger an immediate, critical alert for investigation.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CREATE high-severity rule.
      MONITOR POST requests to '/apis/rbac.authorization.k8s.io/v1/clusterrolebindings'.
      IF request_body contains (subject.kind == 'ServiceAccount' AND roleRef.name == 'cluster-admin'), TRIGGER CRITICAL ALERT.
- question: Has the count of ServiceAccounts bound to 'cluster-admin' increased from its baseline of zero?
  context: |
    This question approaches the detection of a critical misconfiguration from a statistical standpoint. In a securely configured Kubernetes cluster, the number of ServiceAccounts bound to the 'cluster-admin' role should be zero. This query establishes this count as a key performance indicator for cluster security. Any increase from this absolute baseline of zero represents a critical statistical deviation and a major security risk. This method provides a simple, quantitative way to monitor for one of the most dangerous privilege escalation techniques.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      BASELINE count of 'cluster-admin' bindings for 'ServiceAccount' subjects (should be 0).
      MONITOR count over time.
      IF count > 0, TRIGGER CRITICAL ALERT.
- question: Did an anomaly detection model flag the binding of a ServiceAccount to 'cluster-admin' as a major outlier?
  context: |
    This question explains how an unsupervised machine learning model would react to a critical security event, even if not explicitly programmed for it. While a simple symbolic rule is the most effective way to detect a ServiceAccount being bound to 'cluster-admin', it's also a useful test case for an anomaly detection model. Because this event should never occur in a legitimate operational baseline, a model trained on normal binding events would immediately identify this action as a massive outlier with an extremely high anomaly score, confirming its malicious or misconfigured nature.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN anomaly detection model on legitimate binding events.
      THEORETICALLY, a ServiceAccount-to-cluster-admin binding will receive a very high anomaly score.
      This serves as a secondary, confirmatory detection method.
- question: Did a user successfully modify an RBAC binding despite not having the required permissions for that action according to known user-to-role mappings?
  context: |
    This question is designed to detect the exploitation of a privilege escalation vulnerability in the Kubernetes API server itself. In a normal scenario, the API server would reject an RBAC modification from a user who lacks the necessary permissions. If we observe a successful API response (HTTP 200/201) for an action that our own IAM permission cache shows should have been denied, it points to a serious discrepancy. This indicates that an attacker may have found and exploited a flaw in the API's authorization checks.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MAINTAIN a cache of user-to-permission mappings.
      ON successful RBAC modification (HTTP 200/201):
        QUERY cache for user's permissions.
        IF user lacks 'create' or 'update' on the RBAC resource, TRIGGER ALERT.
- question: Did a user grant a role with a 'privilege delta' that is a statistical outlier compared to their historical behavior?
  context: |
    This question detects unusual behavior from authorized users by looking at the magnitude of the privileges they grant. A helpdesk user might routinely grant low-privilege roles, while a senior admin might occasionally grant high-privilege ones. We can profile this by calculating the 'privilege delta' (the change in power) for each modification a user makes. If a user who normally only makes minor permission changes suddenly grants a very powerful role, this action will create a statistical anomaly in their behavior, flagging a potential account compromise or insider threat.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      FOR each user, profile the 'privilege delta' of RBAC changes they make.
      CALCULATE the 95th percentile for each user's privilege delta.
      IF a new action's delta exceeds this personal threshold, ALERT.
- question: Did a user's RBAC modification action significantly deviate from the learned behavior of their peer group?
  context: |
    This question uses peer group analysis to spot anomalous behavior that might be normal for a different type of user. For example, it might be normal for a cluster administrator to bind a high-privilege role, but it would be highly abnormal for a developer to do so. This model groups users by their roles or departments and learns the typical RBAC modification behavior for each group. An alert is triggered if a user's action (like granting a powerful role) is normal for the organization as a whole but significantly deviates from the established norms of their specific peer group.
  answer_sources:
  - Zeek http.log
  - Kubernetes API Server
  - Identity and Access Management System
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      GROUP users into peer groups based on role/department.
      LEARN the normal RBAC modification behavior for each peer group.
      IF a user's action deviates significantly from their peer group's baseline, ALERT.
- question: Was a known container exploit process executed on a node, followed shortly by an RBAC modification API call from that same node?
  context: |
    This question creates a high-confidence alert by correlating a known exploit with a subsequent privilege escalation attempt. The query first monitors all cluster nodes for the execution of processes whose names or command-line arguments match a list of known Kubernetes exploits. If a match is found, it then correlates the compromised node's IP address with Kubernetes API logs. If that same IP is used to make an RBAC modification within the next 15 minutes, a critical alert is triggered, linking the initial exploit to the follow-on action.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Cluster Worker Nodes
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MONITOR Windows Event ID 4688 on nodes for known exploit process signatures.
      ON match, correlate node IP with Zeek logs.
      IF node IP makes an RBAC modification call within 15 minutes, TRIGGER CRITICAL ALERT.
- question: Was a process with statistically high-entropy command-line arguments executed on a node, followed by a Kubernetes API call from that node?
  context: |
    This question uses a statistical heuristic to find obfuscated or malicious scripts that may not match known signatures. Attackers often use base64 encoding or other forms of obfuscation for their payloads, resulting in command-line arguments with high character randomness (entropy). This query calculates the Shannon entropy of command-line arguments for all processes on cluster nodes. If a process has an unusually high entropy score, it's treated as suspicious, and the system then checks if that host makes any subsequent Kubernetes API calls, correlating the potential exploit with cluster-level actions.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Cluster Worker Nodes
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CALCULATE Shannon entropy of 'CommandLine' from Windows Event ID 4688.
      IF entropy is in 99th percentile, flag as suspicious event.
      CORRELATE with subsequent K8s API calls from the same host IP and ALERT.
- question: Did a machine learning classifier identify a process as malicious, and did that host subsequently make any Kubernetes API interactions?
  context: |
    This question uses a machine learning model as the initial trigger for a more focused investigation. A classifier is trained on process execution data (e.g., from Windows Event ID 4688) to identify malicious processes based on a wide range of features. When the model flags a process on a cluster node as malicious, it acts as a tripwire. This triggers a downstream rule that places the host's IP under heightened scrutiny, generating a critical alert for any Kubernetes API interactions originating from that IP for a set duration, effectively catching the next step in a potential attack chain.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Cluster Worker Nodes
  - Kubernetes API Server
  range: Last 90 days
  queries:
  - technology: Pseudocode
    query: |
      TRAIN a classifier on process data to identify malicious execution.
      WHEN classifier flags a process as malicious:
        TRIGGER a rule to monitor the source host's IP.
        ALERT on any K8s API interaction from that IP for the next hour.