name: T1018: Remote System Discovery
id: 5a7e9b0f-8c1d-4f6a-9e3b-2a1c0d8e4f5b
description: |
  This playbook helps determine if an adversary has begun active internal reconnaissance by enumerating remote systems on the network. It provides investigative steps to detect discovery through various means, including the use of non-native tools like Nmap, the suspicious execution of native utilities such as 'ping' and 'net.exe', scripted enumeration via PowerShell or WMI, broad network scanning activity identified by a high volume of connection attempts, and post-remote logon 'fan-out' connection patterns to multiple internal systems.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any known non-native discovery tools (e.g., Nmap) been executed on the network?
  context: |
    Adversaries often use well-known, non-native tools for reconnaissance because they are powerful and readily available. This question seeks to find direct evidence of these tools by checking process execution logs for specific process names (e.g., 'nmap.exe'), file hashes against threat intelligence feeds, and correlating those events with network traffic that exhibits unique signatures, such as the User-Agent strings used by these tools. A positive match is a high-confidence indicator of unauthorized discovery activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
  range: Last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events (e.g., WinEventID 4688) WHERE process_name IN (watchlist_of_discovery_tools) OR file_hash IN (threat_intel_hashes).
      CORRELATE with network_traffic_logs (e.g., Zeek http.log) WHERE user_agent MATCHES (tool_signatures).
- question: Has any statistically rare or unusual executable, potentially an unknown discovery tool, been executed?
  context: |
    Adversaries may use custom or less common tools to evade detection based on known names or hashes. This question uses statistical analysis to find outlier executables. By calculating the execution prevalence of every process across the enterprise, any process that runs very rarely (e.g., below the 1st percentile) is flagged as suspicious. This approach can uncover novel or renamed tools that would otherwise be missed.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
  range: Last 90 days
  queries:
  - pseudocode: |
      CALCULATE prevalence of all process_names over a 30-day window.
      ALERT on new process_creation_events WHERE process_prevalence < 1st_percentile.
      ENRICH alerts with parent_process, user, and command_line for context.
- question: Has any process been executed that a machine learning model classifies as a discovery tool?
  context: |
    This question leverages a more advanced, behavior-based detection method. A machine learning model, trained on features from process execution events (like parent process, command-line length/entropy, and binary signing status), can identify malicious discovery activity even if the tool is custom-built or heavily obfuscated. Flagging processes that the model classifies as a 'Discovery Tool' with high confidence provides a robust way to detect sophisticated threats.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
  range: Last 90 days
  queries:
  - pseudocode: |
      INPUT process_event_features (parent_process, cmd_line_entropy, user_context, etc.) into a pre-trained classification_model.
      ALERT if model_classification == 'Discovery Tool' AND confidence_score > 0.9.
- question: Has the 'net.exe' command been used in a non-interactive manner to enumerate domain systems?
  context: |
    Adversaries frequently abuse legitimate native Windows utilities ('living off the land') to perform reconnaissance. The 'net.exe' command is a common choice for enumerating domain computers and groups. This question specifically looks for its execution from a non-interactive parent process (e.g., wmiprvse.exe, svchost.exe), which is highly indicative of automated, malicious enumeration by a script or service, rather than legitimate, interactive use by an administrator in a command prompt.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
  range: Last 90 days
  queries:
  - pseudocode: |
      SEARCH process_creation_events (e.g., WinEventID 4688) WHERE process_name == 'net.exe'
      AND command_line CONTAINS ('view', '/domain', 'group "Domain Computers"')
      AND parent_process NOT IN ('explorer.exe', 'cmd.exe').
- question: Has there been an anomalous spike in the execution frequency of native discovery utilities like 'ping.exe', 'net.exe', or 'arp.exe' on any single host?
  context: |
    This question aims to detect the scripted or automated use of native tools by looking for statistical anomalies in their execution frequency. A single host suddenly running 'ping.exe' or 'net.exe' hundreds of times in an hour is highly abnormal. By establishing a historical baseline of normal execution counts for each host, we can alert when activity exceeds a significant threshold (e.g., three standard deviations above average), suggesting an adversary is using a script to rapidly map out the network.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
  range: Last 90 days
  queries:
  - pseudocode: |
      FOR each host, CALCULATE a 30-day baseline of hourly_execution_count for 'ping.exe', 'net.exe', and 'arp.exe'.
      ALERT if current_hourly_count > (baseline_average + 3 * standard_deviation) for that host.
- question: Are there any hosts exhibiting unique or outlier patterns in their use of native discovery utilities compared to their peers?
  context: |
    This question uses unsupervised machine learning (clustering) to find hosts that 'behave differently' from the norm regarding their command-line usage. By creating feature vectors (e.g., command frequency, argument patterns) and grouping similar hosts, any host that doesn't fit into a large, common cluster is flagged as an anomaly. This is effective for finding a single compromised machine that is being used for reconnaissance in a way that is subtly different from all other hosts.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
  range: Last 90 days
  queries:
  - pseudocode: |
      CREATE feature_vectors from native_utility_command_lines (frequency, arguments, time-of-day).
      APPLY a clustering_algorithm (e.g., DBSCAN) to all hosts.
      INVESTIGATE hosts that are classified as noise or fall into very small, distinct clusters.
- question: Have PowerShell discovery cmdlets been used to target a large number of systems simultaneously?
  context: |
    Adversaries leverage PowerShell for its power and ability to blend in with administrative activity. This question looks for specific evidence of scripted, large-scale discovery by inspecting PowerShell script block logs (Event ID 4104). It specifically searches for discovery-related cmdlets (e.g., 'Test-Connection', 'Get-CimInstance') where the target argument is not a single, typed-in computer name, but rather a variable or a long list of hosts, which strongly indicates scripted enumeration.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management.
  range: Last 90 days
  queries:
  - pseudocode: |
      SEARCH powershell_script_block_logs (Event ID 4104) WHERE script_text CONTAINS ('Test-Connection', 'Get-CimInstance', 'Resolve-DnsName')
      AND target_computer_argument CONTAINS (a_variable OR list_of_hosts > 10).
- question: Have PowerShell or WMIC commands been executed with unusually complex or high-entropy command-line arguments?
  context: |
    Obfuscation is a key adversary technique to hide malicious commands. High entropy (a measure of randomness) in command-line arguments can indicate obfuscated code, such as a base64-encoded payload or a programmatically generated, randomized list of targets. This question uses entropy analysis to flag potentially malicious and obfuscated 'powershell.exe' or 'wmic.exe' commands that might otherwise appear benign, helping to uncover hidden reconnaissance activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management.
  range: Last 90 days
  queries:
  - pseudocode: |
      FOR 'powershell.exe' and 'wmic.exe' process_events, CALCULATE the Shannon entropy of the command-line arguments.
      ESTABLISH a baseline of normal entropy scores.
      ALERT when a command-line's entropy score is an outlier (e.g., > 95th percentile).
- question: Has any non-administrative host shown a sudden spike in outbound PowerShell Remoting or WMI network traffic?
  context: |
    Large-scale discovery using PowerShell Remoting or WMI generates a significant amount of network traffic on specific ports (5985/5986 for WinRM, 135/RPC for WMI). This question uses a time-series model to baseline normal traffic patterns for these protocols on a per-host basis. A sudden, sharp deviation from this baseline, especially from a host that is not a designated administrative server, is a strong indicator of malicious reconnaissance activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management.
  range: Last 90 days
  queries:
  - pseudocode: |
      MONITOR the time-series volume of outbound traffic on ports 5985, 5986, and 135 from each host.
      APPLY an anomaly detection model (e.g., ARIMA).
      ALERT on statistically significant spikes, especially from non-administrative servers.
- question: Has any internal host generated a large number of failed connection attempts to many different systems, indicative of a horizontal scan?
  context: |
    Network scanning tools often generate many failed connections as they search for live hosts on a network. This question seeks to detect this behavior by looking for a single source IP that produces a high volume of TCP reset ('REJ') or rejected ('RSTO') connections across many unique destination IPs in a short time frame. This is a classic sign of a horizontal (or address) scan and is a high-fidelity indicator of network reconnaissance.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek dns.log
  - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
  range: Last 90 days
  queries:
  - pseudocode: |
      SEARCH network_connection_logs (e.g., Zeek conn.log) and GROUP BY source_ip in 1-minute_windows.
      ALERT if count(distinct destination_ip) > 50 AND connection_state IN ('REJ', 'RSTO').
      Also check for 'Scan::Address_Scan' notices.
- question: Has any host exhibited network behavior resulting in a high 'scan score', indicating a potential combination of horizontal and vertical scanning?
  context: |
    This question uses a scoring heuristic to identify scanning behavior that might be more subtle than a simple high-volume scan. The score considers the ratio of unique destinations and ports to total connections, effectively flagging hosts that are 'exploring' the network broadly (many IPs, a horizontal scan) or deeply (many ports on one IP, a vertical scan) in a way that deviates from normal, targeted traffic patterns. Alerting on a score above the 99th percentile can catch more nuanced scanning techniques.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek dns.log
  - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
  range: Last 90 days
  queries:
  - pseudocode: |
      FOR each internal_source_ip in 5-minute_windows:
      CALCULATE scan_score = (count(distinct destination_ips) * count(distinct destination_ports)) / (count(total_connections) + 1).
      ALERT if scan_score > 99th_percentile of the enterprise-wide baseline.
- question: Has any host's network traffic pattern been classified as anomalous by a machine learning model trained on normal behavior?
  context: |
    This question employs an anomaly detection model (e.g., One-Class SVM) to learn what 'normal' network traffic looks like for a host, using features like connection counts, destination IP/port entropy, and protocol mix. Any new traffic that significantly deviates from this learned norm is flagged as an outlier. This provides a powerful method to detect novel or disguised scanning techniques that don't match predefined rules or signatures.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek dns.log
  - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
  range: Last 90 days
  queries:
  - pseudocode: |
      TRAIN a one-class SVM model on feature vectors from normal 5-minute host traffic windows.
      INPUT new traffic windows into the trained model.
      ALERT if the model classifies the traffic as an outlier.
- question: Following a remote logon, did the source machine immediately initiate connections to an unusually large number of other internal systems on common administrative ports?
  context: |
    After gaining initial access via a remote logon (e.g., RDP, VPN), adversaries often immediately perform reconnaissance of the internal network. This question looks for this specific 'land and expand' behavior by correlating a remote logon event (Windows Event ID 4624, Logon Type 3 or 10) with a subsequent 'fan-out' of network connections from the source machine to many other systems on administrative ports (SMB, RDP, RPC). This is not typical for a normal user session.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
  range: Last 90 days
  queries:
  - pseudocode: |
      ON successful_remote_logon (WinEventID 4624, Logon Type 3 or 10):
      MONITOR source_ip from logon event for 10 minutes in network_logs.
      ALERT if source_ip initiates connections to > 20 unique internal IPs on ports 135, 139, 445, or 3389.
- question: Has a user, after a remote logon, connected to significantly more systems than they typically do in their past sessions?
  context: |
    This question refines the 'fan-out' detection by personalizing it to each user. It establishes a baseline of normal post-login behavior (i.e., how many unique systems they typically connect to) for every user account. An alert is triggered only when a user's activity dramatically deviates from their own historical pattern (e.g., exceeds four standard deviations from their average). This is highly effective at detecting compromised user accounts being used for uncharacteristic reconnaissance.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
  range: Last 90 days
  queries:
  - pseudocode: |
      FOR each user, build a historical profile of their 'post-login fan-out' (unique systems connected to within 15 mins of logon).
      ON a new remote logon, calculate the fan-out for the new session.
      ALERT if the session's fan-out count > (user's historical average + 4 * standard_deviation).
- question: Did a remote logon event trigger an anomalous change in the network communication graph, such as a rapid creation of many new connections from the source host?
  context: |
    This question applies graph theory to network analysis. The network is modeled as a graph where hosts are nodes and connections are edges. A remote logon that is followed by the source host's node suddenly creating a large number of new edges (connections) to other nodes is a structurally anomalous event. This method can detect automated discovery activity by focusing on the abnormal change in the relationship structure of the network graph itself.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
  range: Last 90 days
  queries:
  - pseudocode: |
      MODEL host-to-host communications as a directed graph.
      ON a new remote logon, monitor the source host's node in the graph.
      USE a graph anomaly detection algorithm to ALERT on rapid, high-degree outbound edge creation from that node.