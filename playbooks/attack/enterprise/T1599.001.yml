name: T1599.001: Network Address Translation Traversal
id: 5a9b8c7d-3e4f-4a1b-9c8d-6e5f4a3b2c1d
description: This playbook helps investigate whether an adversary is using Network Address Translation (NAT) traversal to evade defenses and access restricted network segments. It focuses on identifying several key indicators of this activity, such as connections to known malicious STUN/TURN services, unauthorized use of STUN or SSDP protocols from internal assets, temporal correlations between NAT traversal protocol usage and subsequent long-duration connections, discrepancies between endpoint and network egress logs, and evidence of UDP hole punching techniques.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are internal hosts connecting to external IP addresses known to be malicious NAT traversal services?
    context: This question aims to detect direct communication with adversary-controlled or compromised infrastructure used for NAT traversal. Matching connection logs against a threat intelligence feed is a high-fidelity method to identify hosts that may be using these services to bypass firewall rules or establish covert communication channels. Prioritizing standard STUN/TURN ports (3478, 5349) helps focus on the most likely indicators.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Routers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (Zeek conn.log OR WinEventID 5156) WHERE destination_ip IN threat_intel_feed(category='NAT-Traversal' OR 'Malicious Infrastructure')
  - question: Is any host exhibiting an unusually high ratio of connections to malicious NAT-related IPs compared to its peers?
    context: This question moves beyond simple matches to identify anomalous behavior. An adversary's tool might frequently communicate with its command and control (C2) via NAT traversal. By baselining normal activity within peer groups, this analysis can flag a host whose behavior deviates significantly, even if the absolute number of connections is low. This is effective for detecting 'low and slow' activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Routers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE 24h_rolling_ratio = (connections_to_malicious_NAT_IPs / total_external_connections) per host. GROUP hosts by peer_group. ALERT if host_ratio > 95th_percentile(peer_group_ratio).
  - question: Can we predictively identify connections that are likely facilitating malicious NAT traversal using machine learning?
    context: This question seeks to proactively identify malicious NAT traversal by using a machine learning model. A classification model, like a Random Forest, can learn complex patterns from multiple data features (port, protocol, duration, volume) that are indicative of malicious activity. By scoring new connections in real-time, this approach can detect novel or previously unseen traversal techniques that might evade simpler rule-based detections.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network Egress Points (e.g., Firewalls, Routers)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_random_forest(features=[dst_port, protocol, volume, duration], labels=threat_intel_labels). PREDICT likelihood(new_connection) is malicious_nat_traversal.
  - question: Is the STUN protocol being used by assets that are not authorized for it?
    context: The STUN protocol has a unique "magic cookie" identifier (0x2112A442). Detecting this in traffic from assets that have no legitimate reason to use it (like database servers or domain controllers) is a strong indicator of unauthorized software or malicious activity. This question helps enforce network policy and identifies policy violations that could be part of an attack.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Internal Network Segments (e.g., Server VLANs, User Subnets)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH udp_payloads for '0x2112A442'. ALERT if source_ip IN unauthorized_asset_list.
  - question: Is there a sudden, anomalous spike in STUN protocol activity from any single host?
    context: This question focuses on identifying changes in the rate of STUN activity. Legitimate applications may use STUN consistently, but a malicious tool initiating a connection might generate a sudden burst. Using a statistical measure like a Z-score helps to dynamically identify significant deviations from a host's own normal behavior, reducing false positives from hosts that are legitimately chatty.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Internal Network Segments (e.g., Server VLANs, User Subnets)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE 1h_moving_avg and stdev of STUN_count per host. ALERT if current_STUN_count > (moving_avg + 3 * stdev).
  - question: Can we use anomaly detection to identify STUN sessions that deviate from established legitimate patterns?
    context: This question aims to detect malicious STUN usage by modeling what is 'normal' and flagging outliers. An Isolation Forest model can identify anomalies in high-dimensional data. By analyzing features like source port, transaction ID randomness, and request timing, the model can spot malicious STUN activity that might look normal on the surface but differs subtly from legitimate traffic patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Internal Network Segments (e.g., Server VLANs, User Subnets)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_isolation_forest(features=[src_port, tx_id_entropy, freq], baseline_data=legit_stun_traffic). IDENTIFY outliers in new STUN sessions.
  - question: Are unauthorized hosts using SSDP/UPnP to create external port mappings, and are those mappings being used?
    context: This question seeks to confirm a successful, unauthorized port mapping. The detection is two-fold: first, it identifies a policy violation (an unauthorized host using UPnP), and second, it looks for evidence that the created opening was actually used by an external entity. This correlation provides strong evidence of a successful firewall bypass.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek ssdp.log
      - Network Gateway Devices and Internal Host Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRIGGER on SSDP message from host NOT IN upnp_allowlist. CORRELATE with subsequent inbound connection to that host from external_ip.
  - question: Are any hosts, authorized or not, exhibiting anomalous UPnP port mapping behavior?
    context: This question addresses two scenarios: clear policy violations and anomalous usage by authorized systems. Alerting on any UPnP request from an unauthorized host is a straightforward policy check. For authorized hosts, comparing their daily activity to their own 30-day history can detect a compromised machine that suddenly begins creating an unusually high number of port mappings.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek ssdp.log
      - Network Gateway Devices and Internal Host Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ALERT if UPnP_request_host NOT IN upnp_allowlist. OR, for allowed hosts, ALERT if daily_request_count > 99th_percentile(host_30day_history).
  - question: Is there an anomalous volume of UPnP/SSDP traffic in critical network subnets that suggests coordinated malicious activity?
    context: This question looks for macro-level anomalies. A time-series model like ARIMA can predict the expected volume of UPnP/SSDP traffic for a subnet. A significant deviation from this prediction could indicate a widespread event, such as a worm or malware outbreak where many hosts simultaneously attempt to open ports via UPnP.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek ssdp.log
      - Network Gateway Devices and Internal Host Subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_arima(historical_upnp_traffic_volume). ALERT if observed_volume deviates from model_prediction_interval.
  - question: Are internal hosts using STUN/TURN to enable long-duration connections to unknown external destinations?
    context: This question tries to link the act of NAT traversal (using STUN/TURN) with its likely purpose (a persistent C2 or data exfiltration channel). A STUN/TURN exchange is often brief, but the resulting P2P connection can be long-lived. By correlating the setup with a subsequent long-duration connection to a new, non-whitelisted IP, we can identify high-confidence malicious channels.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRIGGER on STUN/TURN usage by host. IF same host starts long_duration_connection (>1hr) to new_external_ip (NOT CDN/STUN_server), then ALERT.
  - question: Following a STUN transaction, is a host initiating a connection that is anomalously long and involves an unusually large amount of data?
    context: This question uses statistical analysis to find suspicious connections that immediately follow a NAT traversal attempt. By calculating Z-scores for both duration and data volume against the host's own history, this method can flag connections that are statistical outliers. Requiring both metrics to be high increases the confidence that the connection is not benign.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each connection within 5 mins of STUN transaction by same host, CALCULATE z_score(duration) and z_score(bytes). ALERT if both z_scores > 2.5.
  - question: Can we identify anomalous post-STUN connections by clustering them and identifying outliers?
    context: This question uses an unsupervised machine learning approach to find the "odd ones out." DBSCAN is a density-based clustering algorithm excellent at identifying noise points. Legitimate post-STUN connections will form dense clusters, while malicious, one-off C2 connections will likely be flagged as noise, providing a powerful way to detect atypical P2P channels.
    answer_sources:
      - Zeek conn.log
      - Zeek stun.log
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: RUN DBSCAN on post-STUN connections with features [duration, bytes, ip_rep]. ALERT on connections classified as noise/outliers.
  - question: Are there external connections initiated from endpoints that are not visible in the network egress logs?
    context: This question aims to find discrepancies that indicate a bypass of standard network egress points. If an endpoint log shows an outbound connection but the perimeter sensor doesn't see it, it could mean the traffic is being routed through an alternate, unmonitored path, indicating a compromised router or a sophisticated tunnel.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Endpoints
      - Internal Network Segments
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN endpoint_logs (WinEventID 5156) with perimeter_logs (Zeek conn.log) on [src_ip, dst_ip, dst_port, protocol] over 1-min window. ALERT where endpoint_log exists and perimeter_log does not.
  - question: Is there a statistically significant drop in the correlation rate between endpoint and perimeter logs for critical subnets?
    context: This question operationalizes the previous one by creating a monitoring metric. A sudden drop in the percentage of matched connections for a critical subnet is a strong anomaly indicator. This could signal that an adversary has established a persistent bypass mechanism affecting multiple connections.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Endpoints
      - Internal Network Segments
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE hourly match_percentage = (matched_connections / total_endpoint_connections) for critical_subnets. ALERT if match_percentage < 1st_percentile(historical_daily_values).
  - question: Are network connections deviating from the established, normal egress paths for their subnets?
    context: This question uses graph analytics to model and enforce network topology. By learning the "normal" routes traffic takes to exit the network, a model can identify connections that take an unexpected path. This is a powerful method for detecting compromised routing devices or policy violations where traffic is being intentionally misdirected.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Endpoints
      - Internal Network Segments
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD network_graph and identify standard_egress_paths. MODEL = train_path_recognition(standard_paths). ALERT on connections that deviate from modeled paths.
  - question: Is any internal host rapidly connecting to a large number of distinct, high-numbered UDP ports on external IPs?
    context: This question seeks to identify UDP hole punching. To establish a P2P connection, a client behind a NAT might send UDP packets to a wide range of ports on the target. A simple threshold rule (e.g., >50 unique ports in 60 seconds) is an effective way to detect this brute-force behavior.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal Host Subnets and Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT distinct destination_ports > 1024 for each source_ip over 60s window. ALERT if count > 50.
  - question: Is the pattern of outbound UDP destination ports from a host becoming significantly more random than its normal behavior?
    context: This question provides a sophisticated, statistical alternative to a simple threshold. Shannon entropy measures randomness. Normal UDP traffic has low entropy. A UDP hole punching attempt, which uses many different ports, will have very high entropy. Comparing entropy to a host's own baseline makes this detection adaptive.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal Host Subnets and Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE shannon_entropy of destination_ports in 5-min window per host. ALERT if entropy > 98th_percentile(host_baseline_entropy).
  - question: Can we use machine learning to classify outbound UDP traffic patterns as normal or anomalous (indicative of hole punching)?
    context: This question leverages a One-Class SVM model to learn the multi-faceted boundary of "normal" UDP behavior. The model is trained only on normal traffic and can then identify any activity that falls outside that learned boundary. By combining multiple features, it can create a more robust detection than any single-feature method.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Internal Host Subnets and Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL = train_one_class_svm(normal_udp_traffic_features). CLASSIFY 1-min windows of host activity as 'normal' or 'anomalous'. ALERT on 'anomalous'.