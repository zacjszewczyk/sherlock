name: T1481.001: Dead Drop Resolver
id: 1e9f1a2b-3c4d-4e5f-6a7b-8c9d0e1f2a3b
description: This playbook helps investigate if an adversary has established external command and control (C2) channels on mobile devices using the 'Dead Drop Resolver' technique. It focuses on identifying patterns where a mobile device first contacts a legitimate public web service (the 'dead drop') to retrieve C2 information, and then initiates a second connection to the actual C2 server. Indicators include: connections to public services followed by connections to anomalous destinations (e.g., on threat feeds, low popularity domains); extraction of IP addresses or FQDNs from web content followed by connections to them; and the use of rare TLS fingerprints (JA3 hashes) in conjunction with connections to servers using self-signed or newly issued certificates.
type: technique
related:
  - TA0037: Command And Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a mobile device connecting to a known dead drop service and then immediately connecting to a destination listed on a threat intelligence feed?
    context: This question aims to detect a classic dead drop resolver pattern. An adversary might use a public service like Pastebin or a social media site to post the IP address of their actual C2 server. The compromised device would first query the public service to retrieve this IP and then immediately connect to it. By correlating the second connection's destination with known malicious infrastructure from threat intelligence feeds, we can identify this C2 activity with high confidence.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Corporate Wi-Fi egress points, VPN concentrators handling mobile device traffic, MDM-managed device network segments, and network segments dedicated to guest or BYOD mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FILTER conn.log for source_ip in mobile_ip_ranges AND destination in dead_drop_watchlist;
          FOR each source_ip:
            SEARCH conn.log for a second connection from same source_ip within 60 seconds to a different destination;
            JOIN second_destination with threat_intelligence_feed;
            IF match FOUND, ALERT;
  - question: Is a mobile device making a two-step connection where the second destination is an unpopular domain and involves unusually high data transfer?
    context: This question looks for anomalies in two-step connection patterns. C2 servers often use newly registered or obscure domains that are not frequently visited by others in the organization. A low popularity score for the second destination is therefore suspicious. Additionally, C2 communication, especially during exfiltration or when downloading further malware stages, can involve larger data transfers than typical web browsing. Combining these two factors—low domain popularity and high outbound byte count—helps to surface suspicious dead drop activity that might otherwise be missed.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Corporate Wi-Fi egress points, VPN concentrators handling mobile device traffic, MDM-managed device network segments, and network segments dedicated to guest or BYOD mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          IDENTIFY two-step connection patterns from mobile IPs within 60s;
          FOR each pattern:
            CALCULATE popularity of second_destination_domain over last 30 days;
            CALCULATE outbound_byte_count_percentile for the second connection;
            IF domain_popularity is in bottom 5% AND byte_count is in top 95%, ALERT;
  - question: Can a machine learning model identify a connection pair as a high-probability dead drop event based on its network characteristics?
    context: This question leverages machine learning to automate the detection of complex dead drop patterns. By training a model (e.g., Random Forest) on features like the time between connections, data volume, domain popularity, ASN reputation, and TLS details (SNI), we can create a sophisticated detector. This approach can identify subtle C2 patterns that are difficult to define with simple rules, providing a high-fidelity alerting mechanism that scores the likelihood of an event being malicious, thereby prioritizing analyst attention.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Corporate Wi-Fi egress points, VPN concentrators handling mobile device traffic, MDM-managed device network segments, and network segments dedicated to guest or BYOD mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each two-step connection pair from mobile IPs:
            CONSTRUCT feature_vector (time_delta, bytes_transferred, domain_popularity, dest_asn, tls_sni);
            APPLY pre-trained Random Forest model to feature_vector;
            IF prediction_probability > 0.85, ALERT;
  - question: Has a mobile device received an IP or domain from a web service and then immediately connected to that same IP or domain, which is also found on a threat intelligence feed?
    context: This question targets a more direct form of dead drop resolution where the C2 location is embedded directly in the content (e.g., in a text file or an unencrypted HTTP response) hosted on a legitimate service. The analysis involves inspecting the content of files and web traffic for IP addresses or FQDNs. If a device is observed connecting to one of these extracted indicators, and that indicator is known to be malicious, it provides strong evidence of a C2 channel being established.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Network egress points with L7 visibility, DNS resolvers, web proxies serving mobile device traffic, and Mobile Device Management (MDM) platforms.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          PARSE files.log and http.log for IPv4/FQDN patterns in response bodies from mobile devices;
          CORRELATE extracted_indicators with threat_intelligence_feed;
          FOR each malicious_indicator:
            SEARCH conn.log for outbound connection from same source_ip to the malicious_indicator within 2 minutes;
            IF match FOUND, ALERT;
  - question: Is a mobile device connecting to an FQDN that was extracted from web content and exhibits characteristics of a Domain Generation Algorithm (DGA), such as high entropy and low popularity?
    context: This question aims to identify algorithmically generated C2 domains. Adversaries use DGAs to create a large number of potential C2 domains, making them difficult to block. These domains often appear random and have high character entropy. They are also, by nature, accessed very infrequently across an organization. By checking for both high Shannon entropy (a measure of randomness) and extremely low access frequency (low popularity), we can effectively detect and flag likely DGA-based C2 domains retrieved via a dead drop.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Network egress points with L7 visibility, DNS resolvers, web proxies serving mobile device traffic, and Mobile Device Management (MDM) platforms.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          IDENTIFY FQDNs extracted from web content that are subsequently contacted;
          FOR each FQDN:
            CALCULATE Shannon_entropy of the hostname;
            CALCULATE enterprise-wide access frequency (popularity) over last 30 days;
            IF entropy > 3.5 AND popularity is in bottom 1%, ALERT;
  - question: Is there an anomalous spike in traffic from mobile devices to known dead-drop resolver domains, suggesting a coordinated campaign?
    context: This question shifts from individual device behavior to a broader, fleet-wide perspective. A sudden, statistically significant increase in requests from many mobile devices to a service like GitHub or Pastebin could indicate a widespread malware campaign where all infected devices are trying to resolve their C2 server at the same time. Using time-series analysis (like a SARIMA model) allows us to establish a normal baseline of traffic, accounting for regular daily and weekly patterns, and automatically flag deviations that exceed a defined threshold, which may signal a coordinated C2 event.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Network egress points with L7 visibility, DNS resolvers, web proxies serving mobile device traffic, and Mobile Device Management (MDM) platforms.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          AGGREGATE hourly request counts from mobile_ip_range to dead_drop_domains;
          APPLY SARIMA model to forecast expected traffic volume and confidence interval;
          IF observed_volume > upper_confidence_interval for a sustained period, ALERT;
  - question: Is a mobile device connecting to a known dead-drop resolver and then immediately making a subsequent connection to a server using a self-signed TLS certificate?
    context: This question links suspicious TLS behavior with the dead drop pattern. Adversaries often use self-signed certificates for their C2 servers because they are free and easy to generate. While some legitimate services use them, a connection to a server with a self-signed certificate immediately following a connection to a potential dead-drop resolver is highly suspicious. This correlation helps filter out benign uses of self-signed certificates and focuses on those likely associated with C2 activity.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network egress points with deep packet inspection capabilities, TLS-terminating proxies, and VPN concentrators.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FILTER ssl.log for connections from mobile IPs with server_cert_status = 'self-signed';
          FOR each source_ip:
            SEARCH for a prior connection from same source_ip to a dead_drop_resolver_domain within 60 seconds;
            IF match FOUND, ALERT;
  - question: Is a mobile device using a rare TLS client fingerprint (JA3 hash) to connect to a server with a very recently issued TLS certificate?
    context: This question hunts for unique or unusual client-server TLS handshakes. Adversary malware may use custom libraries or non-standard TLS implementations, resulting in a rare JA3 hash fingerprint. Furthermore, to evade detection, they often rotate their C2 infrastructure, including their TLS certificates. A connection from a client with a rare JA3 hash to a server with a certificate that was issued less than a week ago is a strong indicator of newly established and potentially malicious C2 infrastructure.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network egress points with deep packet inspection capabilities, TLS-terminating proxies, and VPN concentrators.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MAINTAIN 30-day baseline of JA3 hash popularity from mobile devices;
          FOR each new connection in ssl.log:
            CALCULATE JA3_hash_rarity;
            CALCULATE server_certificate_age;
            IF JA3_rarity is in bottom 1% AND certificate_age < 7 days, ALERT;
  - question: Can TLS session metadata from mobile devices be clustered to identify outlier sessions that may represent C2 activity?
    context: This question applies unsupervised machine learning to find 'needles in a haystack'. Legitimate applications and operating systems tend to create large, dense clusters of similar TLS sessions. Malicious software, with its unique TLS implementation, is likely to appear as a statistical outlier or part of a very small, sparse cluster. By using a clustering algorithm like DBSCAN on features such as JA3/JA3S hashes, cipher suites, and certificate details, we can automatically group normal traffic and flag the anomalous sessions that warrant further investigation for C2 activity.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network egress points with deep packet inspection capabilities, TLS-terminating proxies, and VPN concentrators.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each TLS session from mobile devices:
            CREATE feature_vector (JA3, JA3S, cipher_suite, TLS_version, cert_validity);
          APPLY DBSCAN clustering algorithm to all feature_vectors;
          FLAG any sessions marked as outliers or belonging to small, sparse clusters;