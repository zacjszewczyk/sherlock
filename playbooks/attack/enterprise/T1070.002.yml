name: T1070.002: Clear Linux or Mac System Logs
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook addresses the adversary technique of clearing system logs on Linux or macOS systems to evade defenses. It helps answer the primary investigative requirement 'Is the adversary attempting to evade defenses by clearing logs on Linux or macOS systems?'. The playbook provides investigative questions and queries to detect various methods of log clearing, including: the execution of known malicious log-clearing tools identified by their file hash; the use of specific command-line arguments and shell operators to truncate, delete, or overwrite log files; commands designed to disable or clear the shell's command history; direct file modification or deletion of critical log files by unexpected processes; and commands or system calls that stop or disable critical logging services like auditd or rsyslogd.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are processes executing on Linux or macOS systems that match the file hash of known malicious log-clearing tools?
    context: This question aims to identify the execution of known malicious tools by comparing the file hash of every executed process against a threat intelligence list. A match is a high-confidence indicator that an adversary is using a known tool to cover their tracks by clearing system logs.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve syscall
      - All Linux and macOS endpoints, particularly servers with critical roles (e.g., web, database, authentication) and developer workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_events | JOIN threat_intelligence_hashes ON file_hash | ALERT on match
  - question: Are any rarely seen processes executing across the enterprise that are not part of the approved software inventory?
    context: This question uses prevalence analysis to find outliers. Malicious or unauthorized tools are often not widely deployed. By identifying processes that run on a very small number of systems and are not on an approved software list, analysts can uncover potentially malicious activity that might otherwise be missed.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve syscall
      - All Linux and macOS endpoints, particularly servers with critical roles (e.g., web, database, authentication) and developer workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_events | GROUP BY file_hash, COUNT(DISTINCT host) AS host_count | FILTER host_count < 5 AND file_hash NOT IN approved_software_list
  - question: Has a machine learning model classified any executed processes as malicious based on features like hash prevalence, file path entropy, and parent process?
    context: This question leverages a supervised machine learning model to detect suspicious processes. The model analyzes multiple features (e.g., how common the file is, the randomness of its path, the legitimacy of its parent process) to make a sophisticated decision, allowing it to catch novel threats that signature-based methods would miss.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve syscall
      - All Linux and macOS endpoints, particularly servers with critical roles (e.g., web, database, authentication) and developer workstations.
    range: last 90 days
    queries:
      - pseudocode: INPUT process_event_features (hash_prevalence, path_entropy, etc.) INTO ml_model | ALERT IF classification == 'malicious' AND confidence_score > 0.9
  - question: Are any executed commands using command-line arguments or shell operators indicative of log file truncation, deletion, or overwriting?
    context: This question looks for direct evidence of log tampering by searching for specific command-line patterns. Adversaries often use commands like 'cat /dev/null > /var/log/auth.log' or 'rm /var/log/*' to destroy evidence. Searching for these patterns with regular expressions is a direct and effective detection method.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, DMZ servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_events | FILTER command_line MATCHES REGEX '(>|>>) /var/log/.*|cat /dev/null >|shred .*log|rm /var/log/|truncate -s 0' | ALERT
  - question: Has any user executed a command with an unusually high command-line entropy or an abnormal frequency of rare commands like 'truncate' or 'shred'?
    context: This question applies user behavior analytics to detect anomalies. It establishes a baseline of normal command-line activity for each user. An alert is triggered if a user executes a command that is significantly more complex (higher entropy) than their usual commands or uses rare, destructive commands more frequently than normal, suggesting a deviation from their typical behavior.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, DMZ servers
    range: last 90 days
    queries:
      - pseudocode: FOR each_user, CALCULATE baseline_entropy AND baseline_rare_command_frequency | ALERT IF command_entropy > 95th_percentile OR rare_command_count > 3_std_dev_from_mean
  - question: Has a time-series anomaly detection model detected a sudden spike in log-clearing commands on any host?
    context: This question uses a time-series model to differentiate malicious log clearing from routine administrative tasks. While some log clearing is normal (e.g., log rotation), adversarial activity often occurs in a sudden, intense burst. This model learns the normal rhythm of a host's activity and alerts on sharp deviations that indicate an anomalous event.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, DMZ servers
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE log_clearing_command_counts by host, by hour | INPUT into time_series_model | ALERT IF observed_count DEVIATES SIGNIFICANTLY from forecast
  - question: Are there any process command-line arguments that indicate an attempt to tamper with, disable, or clear shell command history?
    context: This question focuses on detecting attempts to erase the adversary's command-line history, a common anti-forensic technique. By searching for specific commands like 'unset HISTFILE', 'history -c', or 'rm .*_history', analysts can find direct evidence of an adversary trying to cover their tracks on an interactive shell.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Interactive shell access points, Privileged user workstations and servers, Jump boxes
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_execution_events | FILTER command_line MATCHES REGEX 'unset HISTFILE|export HISTFILE=/dev/null|history -c|rm .*_history' | ALERT
  - question: Has any user executed a history-tampering command for the first time, or has any user executed an unusually high number of such commands?
    context: This question applies user behavior analytics to history tampering. Legitimate users rarely, if ever, need to clear their shell history. Therefore, the first time a user performs this action, or if there's a sudden increase in this behavior, it is highly suspicious and could indicate a compromised account.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Interactive shell access points, Privileged user workstations and servers, Jump boxes
    range: last 90 days
    queries:
      - pseudocode: FOR each_user, TRACK first_seen_history_tamper_commands | ALERT on first_seen OR IF daily_count > 99th_percentile_of_all_users
  - question: Has a machine learning model detected an anomalous sequence of shell commands, particularly one where a history-clearing command follows other suspicious activity?
    context: This question analyzes the sequence of commands to understand their context. A history-clearing command is much more suspicious if it follows reconnaissance commands (e.g., 'whoami', 'netstat') within the same session. A sequence-aware model can learn normal command patterns and flag sessions that deviate, indicating a structured, malicious workflow.
    answer_sources:
      - Auditd execve syscall
      - Sysmon for Linux Event ID 1
      - Interactive shell access points, Privileged user workstations and servers, Jump boxes
    range: last 90 days
    queries:
      - pseudocode: INPUT user_session_command_sequences INTO sequence_autoencoder_model | ALERT IF reconstruction_error is high, ESPECIALLY for sequences ending in history_clearing_command
  - question: Have any critical log files been deleted or truncated by an unauthorized process, especially one with an active external network connection?
    context: This question uses correlation to increase detection fidelity. An event like a log file deletion is enriched with context: was it performed by an unknown process not on an allowlist (e.g., not 'logrotate')? Was that process communicating with a suspicious external IP address? Combining these data points creates a much stronger signal of malicious activity.
    answer_sources:
      - Auditd unlink/truncate/rename syscall
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 23
      - Zeek conn.log
      - Log directories on critical servers (/var/log, /var/run/), User home directories (for .*_history files), Network gateway for traffic correlation
    range: last 90 days
    queries:
      - pseudocode: SEARCH file_delete_events WHERE target_path MATCHES '/var/log/*' AND process_name NOT IN allowlist | CORRELATE with network_logs WHERE process has external_connection | ALERT
  - question: Has any host experienced a statistically unusual number of file deletion or modification events in its log directories?
    context: This question applies volumetric anomaly detection to host behavior. By establishing a baseline for the normal rate of file events in log directories, it can automatically detect a sudden, abnormal spike in activity. Such a spike could indicate a script or attacker rapidly deleting or altering log files to cover their tracks.
    answer_sources:
      - Auditd unlink/truncate/rename syscall
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 23
      - Zeek conn.log
      - Log directories on critical servers (/var/log, /var/run/), User home directories (for .*_history files), Network gateway for traffic correlation
    range: last 90 days
    queries:
      - pseudocode: FOR each_host, CALCULATE baseline_hourly_file_event_count in '/var/log/' | ALERT IF current_hour_count > 3_std_dev_above_average
  - question: Has a multivariate anomaly detection model identified an abnormal relationship between file modification, deletion, and creation events in log directories?
    context: This question uses an advanced model to understand the complex relationships between different event types. Normal log rotation has a predictable pattern (e.g., a new file is created, an old one is compressed, an even older one is deleted). The model learns this pattern and alerts when the relationship breaks, such as when many files are deleted with no corresponding creations, indicating tampering rather than routine maintenance.
    answer_sources:
      - Auditd unlink/truncate/rename syscall
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 23
      - Zeek conn.log
      - Log directories on critical servers (/var/log, /var/run/), User home directories (for .*_history files), Network gateway for traffic correlation
    range: last 90 days
    queries:
      - pseudocode: INPUT time_series of file_mod_count, file_del_count, file_create_count INTO multivariate_model | ALERT IF observed_relationship_between_metrics DEVIATES from forecast
  - question: Have any commands been executed to stop or disable critical logging services (like auditd or rsyslogd), and was this activity outside of a scheduled maintenance window?
    context: This question targets one of the most direct methods of evasion: stopping the logging service itself. It detects commands like 'systemctl stop auditd' and then correlates them with a change management system. An alert that is not associated with a pre-approved change ticket is a high-severity indicator of malicious activity.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve/kill syscall
      - systemd journal logs
      - All Linux and macOS endpoints and servers, Change management database/ticketing system
    range: last 90 days
    queries:
      - pseudocode: SEARCH for commands like 'systemctl stop auditd' | CHECK change_management_db for approved_change at event_time | ALERT IF no_approved_change
  - question: Is any host exhibiting an abnormally high frequency of logging service stop or restart events compared to its peers?
    context: This question uses peer group analysis to find outlier hosts. While occasional service restarts can be normal, a host that is constantly stopping and restarting its logging daemons is anomalous compared to the rest of the fleet. This outlier behavior could indicate instability caused by malware or repeated manual tampering.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve/kill syscall
      - systemd journal logs
      - All Linux and macOS endpoints and servers, Change management database/ticketing system
    range: last 90 days
    queries:
      - pseudocode: CALCULATE daily_count of logging_service_stop_events per host | ALERT IF host_count is in top 1% across enterprise
  - question: Has any logging agent failed to send its heartbeat signal at the expected time, as predicted by a machine learning model?
    context: This question provides a proactive method for detecting disabled logging services. Instead of waiting to see a 'stop' command, this method monitors for the absence of a 'running' signal (a heartbeat). An LSTM model predicts when the next heartbeat should arrive, and an alert is triggered if it's missed, providing a rapid indication that the service is down.
    answer_sources:
      - Sysmon for Linux Event ID 1
      - Auditd execve/kill syscall
      - systemd journal logs
      - All Linux and macOS endpoints and servers, Change management database/ticketing system
    range: last 90 days
    queries:
      - pseudocode: INPUT agent_heartbeat_timestamps INTO LSTM_predictor_model | FORECAST next_heartbeat_time | ALERT IF heartbeat is not received within predicted_time + tolerance_window