name: T1558.002: Silver Ticket
id: 5a8e3d6f-1c9b-4b2a-8f0e-7d4c1b9a6f3d
description: This playbook focuses on detecting the forgery and use of Kerberos service
  tickets, known as Silver Tickets, to gain unauthorized access to specific network
  resources. Investigations should focus on identifying anomalies in Kerberos authentication
  logs, such as the use of weak encryption types (RC4) for services configured to
  use strong encryption (AES), or successful logons to services that lack a corresponding
  ticket-granting service (TGS) request on the domain controller. Additional detection
  vectors include monitoring for the execution of specific credential access tools
  (e.g., Mimikatz, Rubeus) via command-line analysis, looking for unauthorized processes
  accessing the memory of LSASS to steal service account hashes, and profiling user
  and service account logon behavior to identify anomalous access patterns.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is there evidence of a Kerberos logon using RC4 encryption (0x17) to a
    service account that is configured to only support AES encryption?
  context: This question looks for a direct contradiction in Kerberos ticket encryption
    types. A forged Silver Ticket might be created using a weaker, more easily crackable
    encryption algorithm like RC4-HMAC. If a service account in Active Directory
    is explicitly configured to only accept stronger AES encryption, a successful
    logon using RC4 is a strong indicator of a forged ticket, as the Key Distribution
    Center (KDC) would not have issued such a ticket legitimately.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - Active Directory
  - Domain Controllers, Critical Application and File Servers (e.g., SharePoint,
    MSSQL, CIFS shares), LDAP services
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each successful Kerberos logon event (Event ID 4624):
        IF ticket_encryption_type is '0x17' (RC4_HMAC):
          GET target_service_account from event
          QUERY Active Directory for msDS-SupportedEncryptionTypes of target_service_account
          IF msDS-SupportedEncryptionTypes does not include RC4 support:
            ALERT
- question: Has there been an anomalous increase in the percentage of RC4-HMAC encrypted
    logons for any specific Service Principal Name (SPN)?
  context: This question aims to detect statistical anomalies in encryption usage.
    Even if RC4 is technically permitted, a sudden, significant shift from predominantly
    AES to RC4 for a specific service can indicate an attacker forging tickets. Adversaries
    may default to RC4 for compatibility or ease of generation. This method detects
    subtle changes that might not violate a strict policy but deviate from established
    behavioral norms.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - Active Directory
  - Domain Controllers, Critical Application and File Servers (e.g., SharePoint,
    MSSQL, CIFS shares), LDAP services
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each SPN:
        CALCULATE daily percentage of RC4 logons over the last 30 days to establish a baseline distribution.
        CALCULATE current daily percentage of RC4 logons.
        IF current percentage > 99th percentile of baseline:
          ALERT
- question: Can machine learning classify a Kerberos logon as malicious, with the
    RC4 encryption type being a primary contributing factor?
  context: This question leverages a machine learning model to identify complex patterns
    indicative of a Silver Ticket attack that simple rules might miss. By training
    on features like account type, source IP, time of day, and encryption type, the
    model can learn the subtle characteristics of malicious logons. An alert is triggered
    when a logon is classified as malicious and feature importance analysis confirms
    that the use of RC4 ('0x17') was a key reason for the classification.
  answer_sources:
  - Windows Event ID 4624
  - Zeek kerberos.log
  - Active Directory
  - Domain Controllers, Critical Application and File Servers (e.g., SharePoint,
    MSSQL, CIFS shares), LDAP services
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each Kerberos logon event:
        EXTRACT features (account_type, service, source_ip, hour, encryption_type)
        INPUT features into trained classification model
        IF model_prediction is 'malicious' AND feature_importance for 'encryption_type=0x17' is high:
          ALERT
- question: Are there any processes being created with command-line arguments matching
    known patterns for Silver Ticket generation tools like Mimikatz or Rubeus?
  context: This question seeks to directly identify the execution of tools used to
    create or inject Silver Tickets. Adversary toolkits like Mimikatz and Rubeus
    use specific command-line syntax and keywords (e.g., '/service:', '/rc4:', '/ptt',
    'Rubeus.exe silver'). Searching for these patterns in process creation logs provides
    high-fidelity evidence of an attacker actively attempting to forge or use a Silver
    Ticket.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Endpoints and Servers, especially Domain Controllers, Privileged Access Workstations,
    and Critical Service Servers
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      SEARCH process creation events (Event ID 4688, Sysmon ID 1)
      WHERE command_line matches regex for ('Rubeus.exe silver', 'asktgs', '/ticket:', '/ptt', '/service:.* /hash:')
      ALERT
- question: Have any common processes (e.g., powershell.exe, cmd.exe) been executed
    with unusually high-entropy command-line arguments, potentially indicating obfuscation?
  context: Adversaries often encode or obfuscate their commands to evade simple signature-based
    detection. High Shannon entropy in a command line suggests a high degree of randomness,
    which is characteristic of encoded payloads (like Base64) or encrypted scripts.
    By establishing a baseline of normal command-line entropy for each host, this
    question helps identify outliers that may represent obfuscated Silver Ticket
    attacks launched via standard system utilities.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Endpoints and Servers, especially Domain Controllers, Privileged Access Workstations,
    and Critical Service Servers
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each process creation event:
        CALCULATE Shannon entropy of command_line
        GET historical entropy baseline for host and process_name (e.g., 30-day rolling average and standard deviation)
        IF current_entropy > (average + 3 * std_dev):
          ALERT
- question: Can a natural language processing (NLP) model classify a command-line
    string as malicious based on its structure and sequence, even if it doesn't contain
    known keywords?
  context: This question applies advanced machine learning to command-line analysis.
    Unlike regex or entropy, an NLP model can understand the sequence and structure
    of commands, allowing it to detect novel or heavily obfuscated malicious commands
    that mimic benign syntax but are functionally malicious. This is particularly
    useful for identifying new variations of attack tools or custom scripts used
    for Silver Ticket generation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Endpoints and Servers, especially Domain Controllers, Privileged Access Workstations,
    and Critical Service Servers
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each new command_line string:
        INPUT string into trained NLP classification model
        IF model returns a high probability score for 'malicious' class:
          ALERT
- question: Has an unauthorized or non-standard process requested read access to the
    memory of the LSASS process?
  context: To forge a Silver Ticket, an adversary needs the NTLM hash of the target
    service account. A common way to obtain this is by dumping credentials from the
    memory of the Local Security Authority Subsystem Service (lsass.exe). This question
    identifies this precursor activity by alerting on any process accessing LSASS
    memory that is not on a pre-approved list of legitimate system or security tools
    (e.g., antivirus, EDR).
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4656
  - Domain Controllers, Critical Application and File Servers where target service
    accounts run
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      SEARCH process access events (Sysmon ID 10)
      WHERE TargetProcess is 'lsass.exe'
        AND GrantedAccess includes 'PROCESS_VM_READ' (e.g., 0x1010, 0x1410)
        AND SourceImage is NOT in allow_list (e.g., 'MsMpEng.exe')
      ALERT
- question: Has a process accessed LSASS memory for the first time ever on a specific
    host, or with a frequency that is anomalously low compared to its history?
  context: This question uses historical data to build a profile of normal LSASS
    access on a per-host basis. An adversary might use a legitimate-looking but rarely
    used utility, or a newly dropped tool, to access LSASS. By alerting on 'first-seen'
    access events or access from processes that rarely interact with LSASS, this
    method can catch suspicious activity that might otherwise be missed by a static
    allow-list.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4656
  - Domain Controllers, Critical Application and File Servers where target service
    accounts run
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each lsass.exe access event:
        GET SourceImage and host
        QUERY historical database for previous access by this SourceImage on this host.
        IF no previous access exists OR access frequency is in the bottom 5th percentile:
          ALERT
- question: Does a new LSASS memory access event deviate significantly from the profile
    of normal, legitimate access events as determined by an unsupervised machine
    learning model?
  context: This question employs an unsupervised model (like an Isolation Forest)
    to learn what constitutes normal LSASS access behavior based on a combination
    of features, including the source process, parent process, user context, and
    type of access requested. The model can then identify novel and unusual access
    patterns as outliers, providing a more robust detection capability than static
    rules or simple frequency analysis.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4656
  - Domain Controllers, Critical Application and File Servers where target service
    accounts run
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each lsass.exe access event:
        EXTRACT features (SourceImage, SourceUser, ParentProcessImage, GrantedAccess)
        INPUT features into trained anomaly detection model
        IF model returns a high anomaly score:
          ALERT
- question: Has a successful Kerberos logon occurred on a member server without a
    corresponding service ticket request (TGS-REQ) being logged on a Domain Controller?
  context: A legitimate Kerberos authentication involves a client requesting a service
    ticket (TGS-REQ, Event ID 4769) from a Domain Controller, then presenting that
    ticket to a service, resulting in a logon (Event ID 4624). A Silver Ticket is
    forged offline and injected into memory, allowing the client to bypass the Domain
    Controller. This question looks for the logical inconsistency of a successful
    logon without the preceding ticket request, which is a strong indicator of a forged
    ticket.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers (KDCs), Member Servers hosting critical services (e.g., SharePoint,
    MSSQL)
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each successful Kerberos logon (Event ID 4624) on a member server:
        EXTRACT AccountName, ServiceName, and timestamp.
        SEARCH for a corresponding service ticket request (Event ID 4769) on all Domain Controllers
          WHERE AccountName and ServiceName match
          AND timestamp is within the last 10 hours.
        IF no matching 4769 event is found:
          ALERT
- question: Has there been an anomalous spike in the number of 'unmatched logons'
    (logons without a TGS-REQ) for a particular server or service?
  context: While a single unmatched logon is highly suspicious, monitoring the volume
    of such events can reveal the scale of an attack or identify systemic issues.
    This question establishes a baseline for this metric (which should ideally be
    zero) and alerts when the count exceeds a predefined threshold. This helps prioritize
    investigations and can distinguish between a single anomalous event and a widespread
    attack campaign.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers (KDCs), Member Servers hosting critical services (e.g., SharePoint,
    MSSQL)
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      CALCULATE hourly count of 'unmatched logons' per server and per service.
      COMPARE count to a static threshold (e.g., > 5) or a dynamic threshold (e.g., > 4 standard deviations above 30-day moving average).
      IF threshold is exceeded:
        ALERT
- question: Does the observed count of 'unmatched logons' fall outside the confidence
    interval predicted by a time-series forecasting model?
  context: This question applies advanced time-series analysis to detect subtle anomalies
    in the rate of unmatched logons. In complex environments, there might be rare,
    legitimate edge cases causing this behavior. A forecasting model (like SARIMA
    or Prophet) can learn any existing patterns, including seasonality, and predict
    the expected range of future counts. An alert is generated only when the observed
    count is a statistically significant deviation from this forecast, reducing false
    positives.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4769
  - Zeek kerberos.log
  - Domain Controllers (KDCs), Member Servers hosting critical services (e.g., SharePoint,
    MSSQL)
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      INPUT time series of 'unmatched logon' counts into a trained forecasting model (e.g., SARIMA).
      GET the model's predicted count and confidence interval for the current time period.
      IF observed_count is outside the confidence_interval:
        ALERT
- question: Has a logon to a high-value service account violated a pre-defined static
    access policy regarding source location, time, or services accessed?
  context: For critical services, access patterns are often highly predictable. This
    question involves creating a strict, rule-based policy (an allow-list) that defines
    legitimate access behavior (e.g., only from specific subnets, only during business
    hours). Any logon that violates this static policy is a high-confidence indicator
    of unauthorized access, potentially via a Silver Ticket, and should be investigated
    immediately.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Gateways, All Servers, Privileged User Workstations
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each logon to a high-value service account:
        CHECK if source_ip is in allowed_subnets.
        CHECK if logon_hour is within allowed_hours.
        CHECK if accessed_service is in allowed_services.
        IF any check fails:
          ALERT
- question: Has a logon occurred with a combination of rare characteristics (e.g.,
    unusual source country, time-of-day, service accessed) that results in a high
    cumulative risk score?
  context: This question moves beyond static rules to dynamic, multi-faceted behavioral
    profiling. It establishes a baseline of normal activity for each user/service
    across various dimensions (geography, time, etc.). A single rare attribute might
    not be suspicious, but a combination of several (e.g., a user who always logs
    in from the US during business hours suddenly logs in from a different country
    at 3 AM) generates a high risk score, indicating a significant deviation from
    normal behavior that could signal a compromised or forged credential.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Gateways, All Servers, Privileged User Workstations
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each logon event:
        CALCULATE rarity score for each feature (source_country, logon_hour, etc.) based on historical data.
        SUM scores to get a cumulative risk_score.
        IF risk_score > 98th percentile of historical scores:
          ALERT
- question: Does a new logon event fall into a sparse region of the feature space
    or get classified as a noise point by a clustering algorithm, indicating it does
    not belong to any established pattern of normal activity?
  context: This question uses unsupervised clustering (like DBSCAN) to automatically
    discover patterns of normal logon behavior without pre-defined rules. The algorithm
    groups similar logons into dense clusters. Any new logon that does not fit into
    an existing cluster is considered an anomaly or "noise." This is a powerful method
    for detecting novel attack patterns that don't match any previously seen behavior.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - VPN Gateways, All Servers, Privileged User Workstations
  range: last 90 days
  queries:
  - search technology: pseudocode
    query: |
      FOR each new logon event:
        EXTRACT features (geolocated_ip, user, service, timestamp)
        INPUT features into trained clustering model (e.g., DBSCAN)
        IF model classifies the logon as a 'noise point' or outside of dense clusters:
          ALERT