name: T1546.003: Windows Management Instrumentation Event Subscription
id: 5a9b7a4f-8a9d-4e9c-9c3f-2b1d7e8b4a21
description: This playbook helps identify adversaries maintaining persistence or elevating privileges using Windows Management Instrumentation (WMI) Event Subscriptions. It focuses on detecting the creation of malicious permanent event subscriptions, command-line or script-based creation of WMI components, payloads dropped in suspicious directories, network connections initiated by the WMI Provider Host, and the use of the MOF compiler in anomalous contexts.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there new WMI permanent event subscriptions (Event ID 5861) with properties matching known Indicators of Compromise (IOCs)?
  context: Adversaries establish persistence by creating WMI event subscriptions that execute malicious code. This question aims to identify these subscriptions by matching their properties (like consumer name, filter query, or associated file hashes) against curated threat intelligence feeds. A match is a strong indicator of a known threat.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event ID 5861 | EXTRACT Consumer, Filter, Binding, Hashes | LOOKUP ioc_list ON Consumer, Filter, Binding, Hashes | WHERE match_found
- question: Are there new WMI consumers (Event ID 5861) with unusually high entropy in their command line or script content, suggesting obfuscation?
  context: To evade signature-based detection, attackers often obfuscate the scripts or commands executed by WMI consumers. High Shannon entropy is a mathematical indicator of randomness and can effectively detect obfuscated content. This question helps find suspicious consumers that may not match any known IOCs but exhibit characteristics of evasion.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event ID 5861 | CALCULATE entropy on consumer_command_line | WHERE entropy > baseline_95th_percentile
- question: Can machine learning models classify new WMI subscription events (Event ID 5861) as malicious based on their features?
  context: This question explores a proactive, machine learning-based approach to detection. By training a model on features like string length, keyword presence ('powershell', 'download'), and entropy, it's possible to identify novel or complex malicious WMI subscriptions that evade simpler rule-based logic.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Windows Event ID 5861 | EXTRACT features (string_length, keywords, entropy) | APPLY classification_model | WHERE prediction == 'malicious'
- question: Is there evidence of command-line (Event ID 4688) or PowerShell (Event ID 4104) activity creating WMI persistence mechanisms?
  context: Adversaries often create WMI subscriptions directly via the command line or PowerShell scripts. This question focuses on detecting the specific commands, tool names (wmic.exe), and PowerShell cmdlets (New-WmiEventFilter, Set-WmiInstance) used to build these persistence components.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Event ID 4688 OR 4104) | REGEX command_line_or_script_block FOR 'New-WmiEventFilter' OR 'wmic.exe.*eventfilter' OR 'Set-WmiInstance.*root\\subscription' | WHERE match_found
- question: Are WMI-modifying processes (e.g., powershell.exe, wmic.exe) being spawned by unusual parent processes?
  context: Legitimate WMI modifications are typically initiated by system management tools or administrator scripts. When a common user application like Microsoft Word (winword.exe) or Outlook (outlook.exe) spawns a process that creates a WMI subscription, it is highly anomalous and may indicate a user has opened a malicious document or email.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation WHERE child_process IN ('powershell.exe', 'wmic.exe', 'cscript.exe') AND command_line contains 'WMI_keywords' | STATS count by parent_process | WHERE parent_process IN rare_parents_list
- question: Can anomalous PowerShell scripts (Event ID 4104) containing WMI functions be identified using NLP and machine learning?
  context: This question proposes using advanced analytics to understand the intent of a PowerShell script. By analyzing the combination of WMI-related functions with other suspicious activities like network connections or file downloads within the same script, an NLP model can identify complex malicious toolsets that might otherwise appear benign.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4104 | TOKENIZE script_block | APPLY NLP_classification_model | WHERE prediction == 'malicious_wmi_activity'
- question: Are new WMI consumers (Event ID 5861) configured to execute payloads from suspicious or non-standard directories?
  context: Adversaries often place their malicious executables or scripts in world-writable or temporary directories to ensure they can be written and executed. This question aims to detect WMI consumers that point to these commonly abused locations, such as %TEMP% or C:\Users\Public, which is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 5861 | EXTRACT consumer_destination_path | WHERE consumer_destination_path MATCHES ('%APPDATA%', '%TEMP%', 'C:\\Users\\Public\\')
- question: Are new WMI consumers pointing to executables in statistically rare directory paths?
  context: Legitimate applications and system processes tend to reside in common, predictable locations (e.g., C:\Program Files, C:\Windows\System32). This question uses frequency analysis to establish a baseline of normal WMI consumer paths across the enterprise. A consumer pointing to a path that is rarely or never used for this purpose is a statistical anomaly worth investigating.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 5861 | STATS frequency of consumer_destination_path | WHERE frequency < 1st_percentile
- question: Can clustering algorithms identify anomalous WMI consumer creation events that do not fit into known-good patterns of behavior?
  context: This question focuses on unsupervised machine learning to define "normal" WMI creation activity. By clustering events based on features like the executable path, file name, and parent process, the system can learn what legitimate activity looks like. Any new event that does not fit into an existing cluster (an outlier) is flagged as anomalous and potentially malicious.
  answer_sources:
  - Windows Event ID 5861
  - All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 5861 | EXTRACT features (path, filename, parent_process) | APPLY clustering_model | WHERE result == 'outlier'
- question: Is the WMI Provider Host (WmiPrvSe.exe) spawning processes that connect to malicious IP addresses or non-standard ports?
  context: A WMI event subscription can trigger a payload that initiates a network connection for C2 communication or data exfiltration. This question correlates process data with network data to detect when a process launched by WMI connects to a known-bad destination (from threat intelligence) or uses an unusual port, which is a strong sign of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (SEARCH Event ID 4688 WHERE ParentImage == 'WmiPrvSe.exe') with (SEARCH Zeek conn.log) on host, timestamp | LOOKUP ioc_list on destination_ip | WHERE (ioc_match_found) OR (destination_port NOT IN (80, 443, 53))
- question: Are processes spawned by WmiPrvSe.exe exhibiting anomalous network behavior, such as high port entropy or communication with rare Autonomous System Numbers (ASNs)?
  context: Beyond looking at specific IPs, this question analyzes the broader network behavior of WMI-spawned processes. Adversarial techniques like port scanning or using infrastructure in unusual geographic/network locations can be detected by looking for high entropy in destination ports or connections to ASNs that are rare for the organization.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation where parent=='WmiPrvSe.exe' | JOIN with network_logs | GROUPBY process | CALCULATE port_entropy, ASN_frequency | WHERE port_entropy > threshold OR ASN_frequency < threshold
- question: Is there evidence of C2-like beaconing behavior from processes spawned by WmiPrvSe.exe?
  context: Command-and-control (C2) implants often communicate with their server on a regular, periodic schedule (beaconing). This question applies time-series analysis to the network traffic of WMI-spawned processes to detect these repeating patterns (e.g., connections every 5 minutes with similar data sizes), which are characteristic of C2 activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_logs WHERE source_process IN (processes spawned by WmiPrvSe.exe) | APPLY time_series_model on connection_interval, data_size | WHERE pattern == 'beaconing'
- question: Is the MOF compiler (mofcomp.exe) being used to compile a MOF file that matches a known IOC?
  context: Adversaries can use Managed Object Format (MOF) files to register malicious WMI classes and subscriptions for privilege escalation. This question aims to detect the compilation of these malicious files by matching the file's path, name, or hash against threat intelligence feeds.
  answer_sources:
  - Windows Event ID 4688
  - All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' | EXTRACT mof_file_path | HASH mof_file | LOOKUP ioc_list ON mof_file_hash, mof_file_path | WHERE match_found
- question: Is the MOF compiler (mofcomp.exe) being executed by a statistically rare or suspicious parent process?
  context: Legitimate mofcomp.exe executions are typically spawned by system management services like SCCM's ccmexec.exe. An execution spawned by an interactive shell (powershell.exe, cmd.exe) or a user-facing application (explorer.exe) is highly unusual and suggests manual, potentially malicious, activity.
  answer_sources:
  - Windows Event ID 4688
  - All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' | STATS count by ParentProcessName | WHERE ParentProcessName IN ('powershell.exe', 'cmd.exe', 'explorer.exe') OR ParentProcessName IS rare
- question: Can machine learning models predict whether a mofcomp.exe execution is malicious based on its context?
  context: This question proposes a predictive model to distinguish between benign and malicious mofcomp.exe usage. By training a model with features like the parent process, user context, and MOF file location, the system can learn to identify suspicious executions that don't fit the pattern of legitimate software installations or system updates.
  answer_sources:
  - Windows Event ID 4688
  - All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' | EXTRACT features (parent_process, user, file_path) | APPLY classification_model | WHERE prediction == 'malicious'
- question: Is the MOF compiler (mofcomp.exe) being run by a non-administrative user or compiling a file from a user-writable directory?
  context: mofcomp.exe is a powerful administrative tool. Its execution by a standard user, or its use to compile a file from a temporary or user-specific directory (like Downloads), is a major red flag for privilege escalation attempts. This question looks for these anomalous execution contexts.
  answer_sources:
  - Windows Event ID 4688
  - Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' AND (UserName IS NOT admin OR FilePath IN user_writable_dirs)
- question: Are there mofcomp.exe executions that are statistical outliers compared to the normal baseline for a specific host?
  context: Different hosts may have different "normal" patterns for mofcomp.exe usage. This question suggests building a host-specific baseline of activity and using anomaly detection models (like one-class SVM) to find executions that deviate from that specific host's learned normal behavior, indicating a potential compromise.
  answer_sources:
  - Windows Event ID 4688
  - Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' | APPLY host_specific_anomaly_model on (username, parent_process, file_dir) | WHERE result == 'outlier'
- question: Can clustering algorithms identify mofcomp.exe executions that fall outside of common, enterprise-wide activity clusters?
  context: Similar to the host-specific approach, this question applies clustering to all mofcomp.exe executions across the enterprise. Legitimate activities (e.g., patching, software installs) will form dense clusters. Any execution that is isolated and does not belong to a known-good cluster is flagged as a potential threat.
  answer_sources:
  - Windows Event ID 4688
  - Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ProcessName == 'mofcomp.exe' | EXTRACT features (user, parent_process, file_path) | APPLY enterprise_clustering_model | WHERE result == 'outlier'
- question: Is the WMI Provider Host (WmiPrvSe.exe), running as SYSTEM, spawning unauthorized child processes?
  context: When a WMI subscription triggers an action as SYSTEM, it does so by having WmiPrvSe.exe spawn a child process. Legitimate WMI activity typically spawns a very limited set of known processes. This question uses an allowlist to detect when an adversary has used a WMI subscription to escalate privileges and run an arbitrary process (like cmd.exe or powershell.exe) as SYSTEM.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ParentProcessName == 'WmiPrvSe.exe' AND UserName == 'SYSTEM' | WHERE ChildProcessName NOT IN allowlist
- question: Is WmiPrvSe.exe running as SYSTEM spawning a child process that is historically rare or has never been seen on that host before?
  context: This question uses historical frequency analysis to detect anomalous child processes. Instead of a static allowlist, it establishes a dynamic baseline of normal behavior for each host. A process spawned by WMI as SYSTEM that is new or exceptionally rare for that specific machine is a strong indicator of a new malicious action.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event ID 4688 WHERE ParentProcessName == 'WmiPrvSe.exe' AND UserName == 'SYSTEM' | STATS frequency of ChildProcessName by host | WHERE frequency < 1st_percentile OR is_new
- question: Is an anomalous SYSTEM process being spawned by WMI shortly after a non-administrative user logs on?
  context: This question attempts to link a privilege escalation event to a specific user action. An adversary might gain initial access as a standard user and then trigger a pre-planted WMI subscription to escalate to SYSTEM. Detecting a sequence where a non-admin logon is immediately followed by an anomalous WMI-spawned SYSTEM process can help pinpoint the compromised account and timeline.
  answer_sources:
  - Windows Event ID 4688
  - All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEQUENCE (Event ID 4624 WHERE user IS NOT admin) followed by (Event ID 4688 WHERE Parent == 'WmiPrvSe.exe' AND user == 'SYSTEM' AND child_process IS anomalous) within 5 minutes
- question: Are WMI permanent event subscriptions being created (Event ID 5861) and then quickly deleted (Event ID 5860)?
  context: To minimize their forensic footprint, adversaries may create a WMI subscription to execute a payload and then immediately delete it. This "transient" usage is highly suspicious. This question uses stateful detection to look for this rapid create-and-delete pattern for the same subscription objects.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Event ID 5861 OR 5860) | GROUPBY subscription_name, host | IF (first_event==5861 AND last_event==5860 AND time_diff < 15_minutes) THEN ALERT
- question: Are there WMI subscriptions with a statistically short lifetime compared to the environmental baseline?
  context: Legitimate WMI subscriptions created for system management are typically long-lived. This question establishes a baseline for normal subscription lifetimes and flags any subscription that is created and deleted in a time frame that is a statistical outlier (e.g., in the bottom 5th percentile), which points to suspicious transient activity.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (Event ID 5861 OR 5860) | CALCULATE lifetime for each subscription | WHERE lifetime < 5th_percentile_of_all_lifetimes
- question: Is there a sudden, correlated spike in both WMI subscription creation and deletion events on a host?
  context: An automated attack script using WMI for execution might create and delete many subscriptions in a short period. This question uses time-series analysis to monitor the rate of these events. A sudden, sharp increase in both creation and deletion rates on a single host, deviating from its normal baseline, would indicate such an automated attack.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - All Windows endpoints and servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: AGGREGATE count of Event ID 5861 and 5860 per minute per host | APPLY time_series_anomaly_model | WHERE anomalous_spike_in_both_counts