name: T1546.003: Windows Management Instrumentation Event Subscription
id: 1a8c2b7d-4e9f-4a1b-8d6c-3e5f7a9b0c1d
description: This playbook focuses on detecting adversaries using Windows Management Instrumentation (WMI) Event Subscriptions for persistence and privilege escalation (T1546.003). It addresses two primary goals: determining if an adversary is maintaining persistence and if they are attempting to elevate privileges. The playbook provides questions to investigate various indicators, including the creation of permanent WMI subscriptions (Event ID 5861) that match known IOCs, contain suspicious keywords, or point to payloads in unusual directories. It also covers the direct command-line or script-based creation of WMI components (Event IDs 4688, 4104), suspicious network connections initiated by the WMI Provider Host (WmiPrvSe.exe), and the use of the MOF compiler (mofcomp.exe) in anomalous contexts. Further investigation points include analyzing processes spawned by WmiPrvSe.exe with SYSTEM integrity and detecting the rapid creation and deletion of subscriptions, which can indicate transient payload execution.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are new WMI event subscriptions (Event ID 5861) associated with known Indicators of Compromise (IOCs)?
  context: This question aims to identify malicious WMI persistence by matching properties of newly created permanent event subscriptions against known-bad indicators. When a WMI subscription is created, Event ID 5861 is logged. By extracting the 'Consumer', 'Filter', and 'Binding' properties from this event and comparing them (or any associated file hashes) to threat intelligence, we can detect adversaries using pre-identified malicious infrastructure or tools for persistence.
  answer_sources:
  - Windows Event ID 5861
  - Threat Intelligence Feeds
  - Named Areas of Interest: All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=5861 | EXTRACT Consumer, Filter, Binding | LOOKUP threat_intel IOC=Consumer, Filter, Binding | WHERE is_malicious=true
- question: Do new WMI consumers exhibit high entropy, suggesting obfuscation?
  context: Adversaries often obfuscate commands or scripts used in WMI consumers to evade simple signature-based detection. This question focuses on identifying these obfuscated payloads by measuring the Shannon entropy of the consumer's command line or script content. A high entropy score, when compared to a baseline of normal activity, is a strong indicator of obfuscation and potential malicious intent.
  answer_sources:
  - Windows Event ID 5861
  - Named Areas of Interest: All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=5861 | EXTRACT consumer_command | CALCULATE shannon_entropy(consumer_command) as entropy | WHERE entropy > baseline_95th_percentile
- question: Can machine learning models classify new WMI event subscriptions as malicious based on their properties?
  context: This question applies machine learning to proactively identify malicious WMI subscriptions that may not match known IOCs. By training a classification model on features like string length, character distribution, keyword presence (e.g., 'powershell', 'download'), and entropy of the filter query and consumer destination, the model can learn to distinguish between benign and malicious subscription patterns and flag suspicious new events in real-time.
  answer_sources:
  - Windows Event ID 5861
  - Named Areas of Interest: All Windows endpoints and servers, especially Domain Controllers, Tier 0/1 administrative servers, and workstations of privileged users.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=5861 | EXTRACT features (string_length, keywords, entropy) | PREDICT is_malicious with classification_model | WHERE prediction=malicious
- question: Are WMI event subscriptions being created directly from the command line or PowerShell scripts?
  context: While WMI subscriptions can be created via various means, adversaries often create them using command-line tools like 'wmic.exe' or PowerShell cmdlets like 'Register-WmiEvent'. This question helps detect this activity by searching for specific command-line arguments and PowerShell script block contents (from Event IDs 4688 and 4104) that are indicative of WMI persistence creation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Named Areas of Interest: Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (EventID=4688 OR EventID=4104) | REGEX command_line OR script_block for "wmic.*eventfilter|New-WmiEventFilter|Set-WmiInstance.*root\\\\subscription"
- question: Are WMI subscriptions being created by unusual parent processes?
  context: Legitimate WMI modifications are typically performed by system management tools or installers. Adversaries, however, might create WMI subscriptions from unexpected parent processes like Microsoft Office applications or web browsers following a successful exploit. This question identifies anomalous behavior by analyzing the parent-child process relationship and flagging WMI creation activity that originates from a statistically rare parent process.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Named Areas of Interest: Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (EventID=4688 OR EventID=4104) AND (ProcessName="powershell.exe" OR ProcessName="wmic.exe") | STATS frequency of ParentProcessName | WHERE frequency is in lowest 5%
- question: Do PowerShell scripts show a combination of WMI manipulation and other suspicious activities?
  context: Malicious scripts rarely perform a single action. This question uses Natural Language Processing (NLP) to analyze PowerShell script blocks (Event ID 4104) to find scripts that not only contain WMI-related functions but also exhibit other suspicious behaviors like command obfuscation, network connections, or file downloads. This combination is a strong indicator of a malicious toolset being used.
  answer_sources:
  - Windows Event ID 4104
  - Named Areas of Interest: Endpoint workstations, Development servers, and Management servers where PowerShell scripting is common.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4104 | TOKENIZE script_block | CLASSIFY script using NLP_model for combined WMI_and_suspicious_activity | WHERE classification=malicious
- question: Is a new WMI consumer referencing a payload in a suspicious directory?
  context: Adversaries often place their malicious payloads in user-writable or temporary directories that are less likely to be monitored. This question aims to detect this behavior by checking the destination path of any new WMI consumer (from Event ID 5861) against a denylist of commonly abused directories like '%APPDATA%', '%TEMP%', or 'C:\\Users\\Public'.
  answer_sources:
  - Windows Event ID 5861
  - Named Areas of Interest: All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=5861 | EXTRACT consumer_path | WHERE consumer_path matches ('%APPDATA%', '%TEMP%', 'C:\\Users\\Public\\', etc.)
- question: Is a WMI consumer pointing to a payload in a statistically rare directory?
  context: Beyond a static denylist, this question identifies anomalous WMI consumer paths by baselining all consumer executable paths across the enterprise. By calculating the frequency of each directory used, the system can alert on any new consumer that points to a file in a directory that is very rarely used for this purpose, suggesting it may have been created by an adversary to hide a payload.
  answer_sources:
  - Windows Event ID 5861
  - Named Areas of Interest: All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=5861 | EXTRACT directory(consumer_path) | STATS frequency of directory across all hosts | WHERE frequency is in lowest 1%
- question: Does a new WMI consumer event fall outside of normal behavior clusters?
  context: This question uses unsupervised machine learning to identify anomalous WMI activity. By clustering all WMI consumer creation events based on features like the executable path, file name, and parent process, we can establish profiles of normal, legitimate activity. Any new event that does not fit into these known-good clusters is flagged as an outlier, warranting investigation.
  answer_sources:
  - Windows Event ID 5861
  - Named Areas of Interest: All Windows endpoints and servers, with a focus on multi-user systems like Remote Desktop Session Hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: STREAM EventID=5861 | EXTRACT features (path, filename, parent_process) | CLUSTER events with DBSCAN | ALERT on events classified as noise/outliers
- question: Is a process spawned by the WMI Provider Host (WmiPrvSe.exe) connecting to a malicious IP or non-standard port?
  context: A WMI event subscription can trigger a consumer that executes a payload. This payload, running under a process spawned by WmiPrvSe.exe, may initiate a network connection for command and control. This question detects this by correlating WMI-spawned processes with network logs and alerting if the connection goes to a known-bad IP address or uses an unusual port.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Threat Intelligence Feeds
  - Named Areas of Interest: Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" | JOIN host, timestamp with Zeek_conn_logs | LOOKUP threat_intel IP=destination_ip | WHERE is_malicious=true OR destination_port NOT IN (80, 443, 53)
- question: Is a process spawned by WmiPrvSe.exe exhibiting anomalous network behavior?
  context: Beyond connecting to known-bad destinations, malicious C2 traffic can sometimes be identified by its characteristics. This question profiles the network behavior of processes spawned by WmiPrvSe.exe, looking for statistical anomalies like high port entropy (port scanning or hopping) or communication with a rare Autonomous System Number (ASN), which could indicate connections to unusual or dedicated malicious infrastructure.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Named Areas of Interest: Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" | JOIN with Zeek_conn_logs | ANALYZE destination_ports, destination_ASNs for statistical rarity | ALERT on anomalies
- question: Is a process spawned by WmiPrvSe.exe exhibiting C2-like beaconing behavior?
  context: Command and control (C2) implants often communicate with their server using regular, periodic connections (beacons). This question applies time-series analysis to the network traffic from WMI-spawned processes to detect such patterns. By modeling the normal inter-arrival time, connection duration, and data volume, the system can detect and alert on the regimented, machine-like patterns characteristic of C2 beaconing.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Named Areas of Interest: Network egress points (firewalls, proxies), DNS resolvers, and all Windows hosts.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" | JOIN with Zeek_conn_logs | ANALYZE time-series data (bytes_out, duration, inter-arrival_time) with LSTM model | ALERT on detected beaconing patterns
- question: Is the MOF compiler (mofcomp.exe) being used to compile a known malicious MOF file?
  context: Adversaries can use Managed Object Format (MOF) files to create WMI subscriptions for privilege escalation. This question seeks to identify this activity by monitoring for executions of 'mofcomp.exe' and inspecting the specified MOF file. The file's path, name, or hash is compared against a threat intelligence database of known malicious tools to detect attacks.
  answer_sources:
  - Windows Event ID 4688
  - Threat Intelligence Feeds
  - Named Areas of Interest: All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | EXTRACT mof_file_path | CALCULATE hash(mof_file) | LOOKUP threat_intel IOC=hash, mof_file_path | WHERE is_malicious=true
- question: Is mofcomp.exe being spawned by a rare or unexpected parent process?
  context: Legitimate executions of 'mofcomp.exe' are typically initiated by system management services like SCCM ('ccmexec.exe') or Windows Update ('TrustedInstaller.exe'). An execution spawned by a user-interactive process like 'powershell.exe', 'cmd.exe', or 'explorer.exe' is highly anomalous. This question establishes a baseline of normal parent processes for 'mofcomp.exe' and alerts on executions from statistically rare parents.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | STATS frequency of ParentProcessName | WHERE ParentProcessName is in lowest 5% of frequency
- question: Can machine learning models predict if a mofcomp.exe execution is malicious based on its context?
  context: To improve detection fidelity, this question proposes a supervised machine learning model to classify 'mofcomp.exe' executions. By training on features like the parent process, user context, and MOF file path and properties, the model can learn the difference between benign administrative activity and malicious use, allowing for more accurate alerting on suspicious compilations.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: All Windows servers and workstations, particularly those not managed by standard software deployment systems like SCCM.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | EXTRACT features (parent_process, user, file_path, file_size) | PREDICT is_malicious with classification_model | WHERE prediction=malicious
- question: Is mofcomp.exe being executed in an anomalous user or file context?
  context: The MOF compiler is an administrative tool that should typically run as SYSTEM and operate on files in system directories. This question detects potential privilege escalation attempts by alerting when 'mofcomp.exe' is run by a non-administrative user or when it compiles a MOF file located in a user-writable directory like '%APPDATA%' or '%TEMP%', which is a common location for attacker-dropped files.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | WHERE (UserName is not SYSTEM AND UserName is not ADMIN) OR (command_line contains "%APPDATA%" or "%TEMP%")
- question: Is a specific host's mofcomp.exe execution a statistical outlier compared to its own baseline?
  context: Normal administrative activity can vary from host to host. This question uses a host-centric anomaly detection model (like a one-class SVM or isolation forest) to identify suspicious 'mofcomp.exe' executions. By building a baseline of normal execution characteristics (user, parent, file path) for each individual host, the system can flag any execution that deviates significantly from that host's established pattern of administrative behavior.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | GROUP BY host | MODEL normal_behavior with isolation_forest | ALERT on outlier_events
- question: Does a mofcomp.exe execution fall outside of normal enterprise-wide activity clusters?
  context: This question applies unsupervised machine learning across the entire enterprise to find anomalous 'mofcomp.exe' activity. Legitimate system management tasks will create dense clusters of similar events. By using a clustering algorithm, we can identify any execution that does not belong to these known-good clusters, flagging it as an outlier that likely represents non-standard and potentially malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: Multi-user workstations, Remote Desktop Session Hosts, and servers with improperly configured permissions.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ProcessName="mofcomp.exe" | EXTRACT features (user, parent_process, file_path) | CLUSTER events with DBSCAN | ALERT on events classified as noise/outliers
- question: Is WmiPrvSe.exe running as SYSTEM spawning unauthorized child processes?
  context: A common privilege escalation technique involves tricking a high-privilege service into running arbitrary code. In this case, an adversary might use a WMI subscription to have WmiPrvSe.exe, running as NT AUTHORITY\\SYSTEM, spawn a shell ('cmd.exe', 'powershell.exe') or other tools. This question detects this by maintaining an allowlist of legitimate child processes for WmiPrvSe.exe and alerting on anything not on that list.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" AND UserName="NT AUTHORITY\\SYSTEM" | WHERE ProcessName NOT IN (allowlist_of_processes)
- question: Is WmiPrvSe.exe running as SYSTEM spawning a statistically rare child process?
  context: Maintaining a manual allowlist can be difficult. This question provides an alternative by creating a dynamic baseline of child processes for WmiPrvSe.exe on each host or across the enterprise. It then alerts when a new process is spawned that has either never been seen before in that context or is extremely infrequent, indicating a deviation from normal system behavior that could be a sign of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Named Areas of Interest: All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" AND UserName="NT AUTHORITY\\SYSTEM" | STATS frequency of ProcessName per host | WHERE frequency is in lowest 1% or is new
- question: Is there a suspicious sequence of a non-administrative logon followed by a WMI-spawned SYSTEM process?
  context: This question attempts to link a potential privilege escalation action to the user who may have initiated it. By analyzing event sequences, we can identify patterns where a non-administrative user logs on (Event ID 4624) and, shortly after, an anomalous process is spawned by WMI with SYSTEM privileges (Event ID 4688). This temporal correlation suggests the user's session may have been used to trigger the escalation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Named Areas of Interest: All Windows endpoints and servers, especially critical servers like Domain Controllers and Certificate Authorities.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEQUENCE [SEARCH EventID=4624 AND User is NOT admin] FOLLOWED BY [SEARCH EventID=4688 AND ParentImage="WmiPrvSe.exe" AND UserName="SYSTEM"] within 5 minutes on same host
- question: Are WMI event subscriptions being rapidly created and deleted?
  context: To evade detection and minimize their footprint, adversaries may create a WMI subscription to execute a payload and then immediately delete it. This "transient" subscription activity is highly suspicious. This question identifies this behavior by looking for a WMI creation event (5861) followed closely by a deletion event (5860) for the same subscription objects on the same host.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - Named Areas of Interest: All Windows endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEQUENCE [SEARCH EventID=5861 | EXTRACT subscription_name] FOLLOWED BY [SEARCH EventID=5860 AND subscription_name=same] within 15 minutes on same host
- question: Is the lifetime of a WMI subscription a statistical outlier?
  context: While some legitimate subscriptions are short-lived, most are designed for long-term persistence. This question identifies potentially malicious transient subscriptions by calculating the lifetime of every WMI subscription (time between creation and deletion). Any subscription with a lifetime that is a statistical outlier, particularly an extremely short one, is flagged for review.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - Named Areas of Interest: All Windows endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: JOIN EventID=5861 and EventID=5860 on subscription_name, host | CALCULATE lifetime = deletion_time - creation_time | WHERE lifetime is statistical_outlier (e.g., < 5th percentile)
- question: Is there a sudden, correlated spike in both WMI subscription creation and deletion events on a host?
  context: An automated attack script using WMI for execution would likely generate a burst of subscription creation and deletion activity. This question uses time-series anomaly detection to monitor the rate of these events on each host. A sudden spike in both Event ID 5861 and 5860 that deviates from the host's normal baseline is a strong indicator of such an automated attack.
  answer_sources:
  - Windows Event ID 5861
  - Windows Event ID 5860
  - Named Areas of Interest: All Windows endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: COUNT EventID=5861 and EventID=5860 per host per minute | ANALYZE time-series for anomalous correlated spikes | ALERT on detected anomalies