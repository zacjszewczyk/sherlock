name: T1036.004: Masquerade Task or Service
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Investigates if an adversary is attempting to evade defenses by masquerading tasks or services. This involves checking for new tasks or services with malicious file hashes, names that are visually similar to legitimate ones, executables in unusual directories, suspicious child processes spawned by core service management processes, and anomalous network connections originating from processes related to tasks or services.
type: technique
related:
- TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can we symbolically detect if a new task or service is created with a known malicious file hash?
  context: This question aims to identify high-confidence threats by matching the file hash of a new task or service executable against a blocklist of known malicious indicators. A new task is identified by Windows Event ID 4698 and a new service by Event ID 7045. The executable's hash is obtained by correlating with process creation events (Event ID 4688). An exact match provides a strong signal of compromise.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - Windows Event ID 4688
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task (Event 4698) or service (Event 7045)
      GET executable_path
      FIND corresponding process creation (Event 4688) for executable_path
      GET file_hash
      IF file_hash IN malicious_hash_blocklist
        ALERT 'High-confidence malicious task/service detected'
- question: How can we statistically identify if a new task or service executable is suspicious based on its prevalence and threat intelligence reputation?
  context: This question focuses on finding potentially malicious executables that may not be on a static blocklist. It involves checking the hash of every new task or service executable against threat intelligence feeds for its reputation score. By establishing a baseline of hash prevalence across the enterprise, we can flag executables that are both rare (e.g., seen on only one endpoint) and have a suspicious or malicious reputation, indicating a targeted or emerging threat.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - Windows Event ID 4688
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each new task/service executable hash
        GET reputation from threat_intelligence_feeds
        CALCULATE prevalence across all endpoints
        IF prevalence is in lowest percentile AND reputation is 'suspicious' or 'malicious'
          ALERT 'Statistically anomalous and suspicious task/service detected'
- question: Can a machine learning model be used to predict if a new task or service is malicious based on its file characteristics and reputation?
  context: This question explores a predictive approach to detection. A supervised classification model (like XGBoost) can be trained to identify malicious tasks or services. The model would use a combination of features engineered from the executable file itself (entropy, signed status, PE header info), its rarity within the enterprise, and its reputation scores from threat intelligence. The model's output probability score helps prioritize alerts for analysts.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - Windows Event ID 4688
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task/service creation
        EXTRACT features (file entropy, signed status, PE info, prevalence, TI score)
        INPUT features into trained classification_model
        GET malicious_probability_score
        IF score > threshold
          ALERT 'ML model predicted malicious task/service'
- question: How can we symbolically detect new tasks or services with names that mimic legitimate ones or appear obfuscated?
  context: This question aims to catch adversaries using typo-squatting or gibberish names to blend in. By maintaining an allowlist of known legitimate task and service names, we can monitor for any new creations (Event IDs 4698, 7045) that are not on this list. Further filtering with regex for common obfuscation patterns (e.g., 'Microsft', mixed case gibberish) helps pinpoint suspicious masquerading attempts.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task (Event 4698) or service (Event 7045) creation
        GET task_or_service_name
        IF name NOT IN legitimate_name_allowlist AND name MATCHES obfuscation_regex
          ALERT 'Suspicious task/service name detected'
- question: How can we statistically identify new task or service names that are suspiciously similar to legitimate ones or appear to be randomly generated?
  context: This question uses statistical measures to find anomalous names. For new names not on the allowlist, we calculate the Levenshtein distance to all known legitimate names; a small distance (1 or 2) suggests typo-squatting. Separately, we calculate the Shannon entropy of the new name; a very high entropy score suggests a randomly generated name, which is a common tactic for malware.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each new task/service name NOT IN allowlist
        CALCULATE min_levenshtein_distance to all names in allowlist
        CALCULATE shannon_entropy of the name
        IF min_levenshtein_distance <= 2 OR shannon_entropy is in top 99th percentile
          ALERT 'Statistically anomalous task/service name detected'
- question: Can an anomaly detection model identify malicious task or service names based on their linguistic features?
  context: This question applies machine learning to identify names that don't look "normal." An anomaly detection model (like Isolation Forest) is trained on features from legitimate names, such as length, character patterns (n-grams), and digit-to-letter ratio. When a new task or service is created, its name is fed to the model, which flags it as an outlier if its features don't conform to the learned patterns of legitimacy.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task/service creation
        EXTRACT features from name (length, n-grams, char ratios)
        INPUT features into trained anomaly_detection_model
        IF model identifies name as an outlier
          ALERT 'ML model detected anomalous task/service name'
- question: How can we use rules to detect if a new task or service is created with an executable path in an unusual or user-writable directory?
  context: This question focuses on identifying malware that places its executable in non-standard locations to evade detection and gain persistence. By monitoring new task (Event ID 4698) and service (Event ID 7045) creation events, we can create a rule to alert whenever the executable path points to a suspicious directory like a user's profile, temp folders, or other world-writable locations, while allowing for specific, known-good exceptions.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task (Event 4698) or service (Event 7045) creation
        GET executable_path
        IF executable_path IN suspicious_directories_list AND executable_path NOT IN exception_list
          ALERT 'Task/service executable in unusual location'
- question: How can we statistically identify new task or service executables located in abnormally rare directories?
  context: This question aims to find outliers by baselining normal behavior. We build a frequency table of all parent directories used for task and service executables across the enterprise over a rolling time window (e.g., 30 days). A new task or service whose executable resides in a directory that is statistically rare (e.g., in the bottom 5th percentile of prevalence) is flagged for investigation as it deviates from the established norm.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      BUILD frequency table of executable parent directories over 30 days
      ON new task/service creation
        GET executable_parent_directory
        IF prevalence of parent_directory is in bottom 5th percentile
          ALERT 'Task/service executable in statistically rare directory'
- question: Can a machine learning model be trained to predict the legitimacy of a task or service based on its executable file path?
  context: This question proposes a predictive model for path analysis. A classification model, such as a Decision Tree, can be trained to distinguish between legitimate and suspicious file paths. Features for the model could include path depth, the presence of specific keywords like 'Temp', the statistical rarity of each directory in the path, and whether the path contains a username. The model's prediction score can then be used to flag potentially malicious paths for review.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 7045
  - User Workstations, Application Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON new task/service creation
        GET executable_path
        EXTRACT features from path (depth, keywords, segment rarity)
        INPUT features into trained path_classification_model
        IF model predicts path is suspicious
          ALERT 'ML model predicted suspicious executable path'
- question: How can we create a rule to detect when a core service management process spawns a suspicious child process, like a command-line interpreter?
  context: This question targets a common adversary technique where legitimate service hosts are used to launch malicious commands. We monitor process creation events (Event ID 4688) where the parent process is a known service manager ('services.exe', 'svchost.exe', etc.). A rule can then trigger an alert if the child process is a command-line or scripting tool ('cmd.exe', 'powershell.exe') and the command line contains suspicious arguments indicative of remote code execution or fileless malware.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      ON process creation (Event 4688)
        IF parent_process IN ('services.exe', 'svchost.exe', 'taskhostw.exe', 'taskeng.exe')
          AND child_process IN ('cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe')
          AND command_line CONTAINS suspicious_args ('IEX', '-enc', 'DownloadString')
            ALERT 'Suspicious child process spawned by service host'
- question: How can we statistically detect anomalous parent-child process relationships or command-line arguments involving core service processes?
  context: This question focuses on identifying deviations from a baseline of normal process behavior. For key service parent processes, we maintain a 90-day baseline of all their child processes. A new parent-child relationship that has never been seen before is flagged. Additionally, for known relationships, we can analyze the command-line arguments, flagging instances where the Shannon entropy is unusually high (e.g., top 98th percentile), suggesting obfuscated or randomized commands.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      MAINTAIN 90-day baseline of parent-child process pairs for service hosts
      ON process creation (Event 4688) with service host parent
        IF parent-child pair is new
          ALERT 'First-seen child process for service host'
        ELSE
          CALCULATE command_line_entropy
          IF entropy > 98th percentile for this pair
            ALERT 'Anomalous command-line entropy for service host child process'
- question: Can a clustering algorithm identify anomalous process creation events related to service management processes?
  context: This question uses unsupervised machine learning to find outliers in process activity. A clustering algorithm like DBSCAN can group process creation events based on features like parent name, child name, and command-line characteristics. Normal, repetitive system activity will form dense clusters. Events that are marked as noise or outliers by the algorithm do not fit these normal patterns and represent anomalous activity that warrants investigation.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      APPLY clustering algorithm (DBSCAN) to process creation events
        FEATURES: parent_process, child_process, command_line_length, command_line_char_dist
      FOR each event marked as 'noise' or 'outlier'
        ALERT 'Anomalous process creation event identified by clustering'
- question: How can we create a rule to detect when a process spawned by a task or service connects to a known malicious or suspicious network destination?
  context: This question focuses on identifying command-and-control (C2) or data exfiltration channels. By correlating process creation events (Event ID 4688) with network logs (e.g., Zeek), we can trace a process's ancestry. If a process originating from a service host ('services.exe', 'taskhostw.exe') makes a network connection, we can check the destination IP against a C2 threat feed or the requested domain against a list of newly registered domains. A match triggers a high-fidelity alert.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - All Windows Endpoints and Servers, Network Egress Points, DNS Servers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each network connection
        CORRELATE to source process and trace its ancestry
        IF process ancestry includes 'services.exe' or 'taskhostw.exe'
          GET destination_ip and destination_domain
          IF destination_ip IN c2_ip_list OR destination_domain IN newly_registered_domain_list
            ALERT 'Service-spawned process connected to suspicious destination'
- question: How can we statistically identify anomalous network behavior from processes spawned by scheduled tasks or services?
  context: This question aims to find deviations from established network patterns for legitimate services. For each service process, we build a historical baseline of its typical network behavior, including common destination ports, protocols, JA3/JA3S hashes, and data volumes. We can then flag any new connection from a service-spawned process that deviates significantly, such as using a rare port, exhibiting a rare JA3/JA3S fingerprint, or transferring an unusually large amount of data.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - All Windows Endpoints and Servers, Network Egress Points, DNS Servers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each service, BUILD baseline of network behavior (ports, protocols, JA3, data volume)
      ON network connection from service-spawned process
        IF destination_port NOT IN baseline OR JA3_hash is rare OR data_volume > 3 * std_dev
          ALERT 'Statistically anomalous network behavior from service-spawned process'
- question: Can a time-series anomaly detection model identify unusual network traffic patterns from service-related processes?
  context: This question proposes using machine learning to monitor the "heartbeat" of a service's network activity. We aggregate a service's outbound data volume into time-based buckets (e.g., every 10 minutes) to create a time series. A model like an LSTM Autoencoder can be trained on this series to learn the normal rhythm of communication. The model will then alert on significant, unexplained spikes or dips in traffic, which could indicate malicious activity like C2 communication or data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - All Windows Endpoints and Servers, Network Egress Points, DNS Servers
  range: last 90 days
  queries:
  - query_language: pseudocode
    query: |
      FOR each service, create time-series of outbound data volume
        INPUT time-series into trained LSTM_autoencoder_model
        IF model detects anomaly (unexplained spike or dip)
          ALERT 'Time-series anomaly detected in service network traffic'