name: T1036.004: Masquerade Task or Service
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigators determine if an adversary is attempting to evade defenses by masquerading scheduled tasks or services. It addresses scenarios where new tasks/services are created with malicious executables, names that are visually similar to legitimate ones, or paths in unusual directories. It also covers cases where core service processes spawn suspicious child processes or when processes originating from tasks/services initiate anomalous network connections to destinations flagged by threat intelligence or exhibiting unusual patterns.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly created scheduled task or service associated with an executable file hash that matches a known malicious indicator?
    context: This question aims to identify the most direct evidence of a masquerading attempt, the use of a known malicious file to create a persistent task or service. Adversaries often reuse malware components. By checking the file hash of the executable associated with a new task or service against a blocklist of high-confidence malicious hashes, an analyst can quickly confirm a compromise. A match provides a strong signal that the task/service was created for malicious purposes.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Windows Event ID 4688
      - Threat Intelligence Hash Blocklist
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task (EID 4698) or Service (EID 7045) event
            EXTRACT executable_path
            FIND corresponding Process Creation (EID 4688) for executable_path
            EXTRACT file_hash
            IF file_hash IN known_malicious_hashes_blocklist
              ALERT "Malicious task/service detected by hash"
  - question: Does the executable for a new task or service have a low prevalence in the environment and a poor reputation according to threat intelligence?
    context: This question helps uncover malware that may not be on a specific blocklist but is still considered suspicious by the broader security community. Low prevalence (e.g., seen on only one machine) combined with a 'suspicious' or 'malicious' reputation from multiple threat intelligence sources indicates that the file is not a standard corporate application and is likely a threat. This statistical approach widens the net beyond known bad files to catch emerging malware.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Windows Event ID 4688
      - Threat Intelligence Reputation Feeds
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task/Service executable hash
            CALCULATE enterprise_prevalence(hash)
            QUERY threat_intel_reputation(hash)
            IF enterprise_prevalence is low AND threat_intel_reputation is 'suspicious' or 'malicious'
              ALERT "Suspicious low-prevalence task/service detected"
  - question: Can a machine learning model, based on file properties and reputation, classify a new task or service as malicious?
    context: This question leverages machine learning to automate the detection of malicious tasks and services by learning from a combination of features. By training a model on attributes like file entropy, signing status, PE header details, enterprise-wide prevalence, and threat intelligence scores, the system can identify complex patterns that are indicative of malware and that might evade simpler symbolic or statistical checks.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Windows Event ID 4688
      - Threat Intelligence Reputation Feeds
      - File PE Header Information
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task/Service event
            EXTRACT features (file entropy, signed status, PE info, prevalence, reputation)
            INPUT features into trained_classification_model
            GET prediction_score
            IF prediction_score > high_confidence_threshold
              ALERT "ML model predicts malicious task/service"
  - question: Is a new task or service using a name that is not on the corporate allowlist and matches patterns of obfuscation or typo-squatting?
    context: This question focuses on identifying malicious tasks or services by their names. Adversaries may use names that are slight misspellings of legitimate services (typo-squatting) or random-looking gibberish to blend in or avoid detection. By comparing new names against a pre-approved allowlist and using regular expressions to find common obfuscation techniques, analysts can spot these suspicious naming conventions.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Internal Allowlist of Task/Service Names
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task (EID 4698) or Service (EID 7045) name
            IF name NOT IN allowlist AND name MATCHES regex_for_obfuscation
              ALERT "Suspicious task/service name detected"
  - question: Does a new task or service name have a close edit distance to a legitimate name or exhibit unusually high character entropy?
    context: This question uses statistical properties of the task or service name to find anomalies. Calculating the Levenshtein distance helps quantify typo-squatting attempts by measuring the 'closeness' of a suspicious name to a legitimate one. Separately, calculating character entropy can identify randomly generated names, which are a common tactic for malware to avoid static signature-based detection. Flagging names that are either too similar to legitimate ones or too random can uncover masquerading attempts.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Internal Allowlist of Task/Service Names
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task/Service name not on allowlist
            CALCULATE levenshtein_distance to all names on allowlist
            CALCULATE shannon_entropy for the name
            IF min(levenshtein_distance) <= 2 OR shannon_entropy > 99th_percentile
              ALERT "Anomalous task/service name detected"
  - question: Can an anomaly detection model identify a new task or service name as an outlier compared to the baseline of legitimate names?
    context: This question applies machine learning to automate the detection of anomalous names. By training an unsupervised model (like an Isolation Forest) on features of legitimate names (e.g., length, character patterns, digit-to-letter ratio), the system can learn what 'normal' looks like. It can then flag any new name that deviates significantly from this learned norm, identifying potential masquerading attempts without relying on predefined rules or signatures.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task/Service name
            EXTRACT features (length, n-grams, character ratios)
            INPUT features into trained_anomaly_detection_model
            IF model_classifies_as_outlier
              ALERT "ML model detected anomalous task/service name"
  - question: Is a new task or service configured to run an executable from a non-standard, user-writable, or temporary directory?
    context: This question investigates the file path of the task or service executable. Legitimate system services typically run from protected system directories. Adversaries often place their malicious executables in less-monitored, user-writable locations like user profiles, temp folders, or ProgramData. A simple rule that alerts when a new service's executable path points to one of these unusual locations is an effective way to detect suspicious persistence mechanisms.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task (EID 4698) or Service (EID 7045) event
            EXTRACT executable_path
            IF executable_path points to non-standard directory (e.g., C:\Users\*)
              ALERT "Task/service running from unusual directory"
  - question: Is the executable for a new task or service located in a directory path that is statistically rare across the enterprise?
    context: This question uses the statistical prevalence of executable paths to identify outliers. While some legitimate applications may install to user profiles, they typically do so consistently. By building a baseline of common installation directories for tasks and services, an analyst can flag any new service whose executable resides in a parent directory that is very uncommon across the entire enterprise. This 'rare path' is a strong indicator of a non-standard, and potentially malicious, installation.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD frequency table of all task/service executable parent directories
          FOR each new Task/Service executable path
            EXTRACT parent_directory
            IF prevalence(parent_directory) < 5th_percentile
              ALERT "Task/service running from statistically rare directory"
  - question: Can a machine learning model classify the executable file path of a new task or service as suspicious based on its characteristics?
    context: This question uses a supervised machine learning model to predict if a file path is legitimate or suspicious. By engineering features from the path itself—such as its depth, the presence of certain keywords ('Temp', 'Downloads'), and the statistical rarity of its components—a model can learn the subtle differences between legitimate and malicious locations. This provides a more nuanced and automated method for flagging suspicious paths than static rules alone.
    answer_sources:
      - Windows Event ID 4698
      - Windows Event ID 7045
      - Applicable to User Workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new Task/Service executable path
            EXTRACT features (path depth, keywords, segment rarity)
            INPUT features into trained_path_classification_model
            GET prediction_score
            IF prediction_score > high_confidence_threshold
              ALERT "ML model predicts suspicious task/service path"
  - question: Did a core service management process (e.g., svchost.exe) spawn a command-line interpreter with suspicious arguments?
    context: This question looks for suspicious child processes of core Windows service hosts. Processes like svchost.exe and services.exe should not typically launch command shells (cmd.exe, powershell.exe), especially with arguments used for fileless malware execution (e.g., 'IEX', '-enc'). Monitoring for this specific parent-child relationship with suspicious command-line arguments is a high-fidelity indicator of an adversary leveraging a service for arbitrary code execution.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each Process Creation (EID 4688) event
            IF parent_process is in ('services.exe', 'svchost.exe')
            AND child_process is in ('cmd.exe', 'powershell.exe')
            AND command_line contains suspicious_args ('IEX', '-enc')
              ALERT "Service host spawned shell with suspicious arguments"
  - question: Did a core service management process spawn a child process that has never been seen before, or did it spawn a known child process with unusually high-entropy command-line arguments?
    context: This question establishes a behavioral baseline for service host processes and looks for deviations. The first part identifies 'first-time' parent-child process relationships, which could indicate a new malicious tool being launched by a compromised service. The second part analyzes the command-line arguments for known, legitimate child processes. A sudden spike in command-line entropy can reveal obfuscated or randomized commands being passed to a legitimate tool, a common evasion technique.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE parent-child process relationships for ('svchost.exe', 'taskhostw.exe')
          FOR each new Process Creation (EID 4688) event from these parents
            IF parent-child_pair is new OR command_line_entropy > 98th_percentile
              ALERT "Anomalous child process or command line from service host"
  - question: Can a clustering algorithm identify the spawning of a child process by a core service management process as an anomalous outlier event?
    context: This question applies unsupervised machine learning to find anomalous process creation events. By clustering all process events based on features like parent/child names and command-line characteristics, the system can group together normal, repetitive system activity. Events that do not fit into any cluster (i.e., are marked as noise or outliers by an algorithm like DBSCAN) are, by definition, anomalous and warrant investigation as potential malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Applicable to All Windows Endpoints and Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTER all process creation events using DBSCAN
          FEATURES = parent name, child name, cmdline length, cmdline char distribution
          FOR each event marked as outlier/noise
            ALERT "ML clustering identified anomalous process creation from service host"
  - question: Did a process originating from a task or service connect to a known malicious C2 server or a newly registered domain?
    context: This question traces the process lineage of network connections to identify malicious command-and-control (C2) activity. By correlating network logs with process creation events, an analyst can determine if a connection originated from a process spawned by a task or service. Checking the destination IP against a C2 blocklist or the domain against a list of newly registered domains (a common tactic for C2 infrastructure) provides a strong, rule-based signal of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Applicable to All Windows Endpoints and Servers, Network Egress Points, DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network connection
            TRACE process ancestry from source process
            IF ancestry leads to 'services.exe' or 'taskhostw.exe'
            AND (destination_ip IN c2_blocklist OR destination_domain is newly_registered)
              ALERT "Service-spawned process connected to suspicious destination"
  - question: Did a process originating from a service exhibit anomalous network behavior, such as connecting to an unusual port, using a rare TLS fingerprint (JA3/S), or transferring an abnormal amount of data?
    context: This question establishes a network behavior baseline for legitimate services and identifies statistical deviations. Legitimate services tend to have predictable network patterns (e.g., a specific web service always communicates over port 443). An alert can be triggered if a service-spawned process connects to a port it has never used before, uses a rare or unique TLS fingerprint (JA3/JA3S), or exfiltrates an unusually large amount of data. These anomalies can indicate that a legitimate service process has been hijacked for malicious purposes.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek ssl.log
      - Applicable to All Windows Endpoints and Servers, Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each service process name, build baseline of network behavior (ports, JA3, data volume)
          FOR each new connection from a service-spawned process
            IF destination_port NOT IN baseline OR JA3_hash is rare OR data_volume > 3_std_dev
              ALERT "Anomalous network behavior from service-spawned process"
  - question: Can a time-series anomaly detection model detect an abnormal spike or change in the network traffic volume for a specific service process?
    context: This question uses machine learning to monitor the 'heartbeat' of a service's network activity over time. By aggregating data volume into time buckets and feeding this into a time-series model (like an LSTM Autoencoder), the system learns the normal rhythm of communication for that service. The model can then automatically detect significant, unexplained spikes or dips in traffic, which could represent data exfiltration, C2 beaconing, or a denial-of-service attack.
    answer_sources:
      - Zeek conn.log
      - Applicable to Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each service process
            AGGREGATE outbound data volume into 10-minute buckets
            INPUT time-series data into trained LSTM Autoencoder model
            IF model reports anomaly (high reconstruction error)
              ALERT "ML model detected anomalous network traffic pattern for service"