name: "T1053.005: Scheduled Task/Job: Scheduled Task"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: |
  This playbook addresses the malicious use of Windows Scheduled Tasks (T1053.005) for execution, persistence, and privilege escalation. It provides investigative guidance for detecting adversaries who may be executing code through short-lived tasks with obfuscated payloads, maintaining persistence by creating tasks that run at startup/logon from non-standard locations, hiding tasks from standard enumeration tools by manipulating registry security descriptors, or escalating privileges by creating tasks that run with SYSTEM-level permissions from a non-administrative context.
type: "technique"
related:
  - "TA0002: Execution"
  - "TA0003: Persistence"
  - "TA0004: Privilege Escalation"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a scheduled task been created and quickly deleted to execute a suspicious command?"
    context: |
      This question aims to identify "hit-and-run" execution where an adversary creates a scheduled task to run a payload and then immediately deletes the task to cover their tracks. Correlating creation (Event ID 4698) and deletion (Event ID 4699) events for the same task name in a short timeframe (e.g., under 15 minutes) is a strong indicator of this behavior. Further inspection of the command line executed by the task is crucial to identify malicious tools like 'powershell -e', 'certutil', 'rundll32', or network download strings.
    answer_sources:
      - "Windows Event ID 4698"
      - "Windows Event ID 4699"
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows PowerShell Event ID 4104"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "All Windows workstations and servers, particularly internet-facing systems and general user endpoints."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for (Event ID 4698) and (Event ID 4699) with the same TaskName and Host within a 15-minute window.
          JOIN results with process creation events (Sysmon Event ID 1) where the parent process is 'svchost.exe'.
          FILTER for command lines containing suspicious patterns like 'powershell -e', 'certutil', 'rundll32', or network download strings.
  - question: "Is a scheduled task executing a command line with unusually high entropy or a high percentage of non-alphanumeric characters, suggesting obfuscation?"
    context: |
      Adversaries often obfuscate commands to evade simple signature-based detections. This question uses a statistical approach to find outliers. By establishing a baseline of normal command line entropy and character distribution for each host, we can detect deviations that suggest obfuscation. An alert for a command line exceeding the 98th percentile of its host's baseline is a strong signal for investigation.
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "All Windows workstations and servers, particularly internet-facing systems and general user endpoints."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each Host, create a baseline of command line entropy and non-alphanumeric character frequency from processes created by the Task Scheduler.
          ALERT when a new command's metrics exceed the 98th percentile of the established baseline for that host.
  - question: "Can a machine learning model identify malicious processes spawned by the Task Scheduler based on their features?"
    context: |
      This question explores using a supervised machine learning model, like a Random Forest, to proactively score the likelihood of a process being malicious. By training the model on features such as command line length, entropy, argument count, presence of IP addresses, and process rarity, it can learn the characteristics of both benign and malicious scheduled task executions. Alerts are generated for new processes that the model classifies with a high probability of being malicious.
    answer_sources:
      - "Sysmon Event ID 1"
      - "All Windows workstations and servers, particularly internet-facing systems and general user endpoints."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          APPLY trained classification model to new processes spawned by the Task Scheduler.
          ALERT on any process that receives a high probability score for being malicious.
  - question: "Has a scheduled task been created or updated to run an executable from a non-standard, world-writable directory or to trigger at system startup or user logon?"
    context: |
      This question targets common persistence techniques. Adversaries place executables in world-writable locations like 'C:\Windows\Temp\' or '%APPDATA%' to ensure their payload can be written and executed. They also configure tasks to run at system startup or logon to ensure their code runs automatically and regains execution after a reboot. Alerting on tasks using these locations or triggers, especially if the executable is not on an allowlist, helps detect this persistence mechanism.
    answer_sources:
      - "Windows Event ID 4698"
      - "Windows Event ID 4702"
      - "Windows Event ID 4700"
      - "Sysmon Event ID 1"
      - "Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for (Event ID 4698 OR 4702) where (ExecutablePath is in a non-standard directory like 'C:\Windows\Temp\', 'C:\Users\Public\', or '%APPDATA%') OR (Trigger is 'At system startup' or 'At log on' AND ExecutablePath is not in an established allowlist).
  - question: "Is a newly created scheduled task using an executable path that is statistically rare across the enterprise?"
    context: |
      This question leverages the statistical rarity of file paths to identify suspicious scheduled tasks. Most legitimate tasks use common, well-known executable paths. An adversary's payload is likely to reside in a unique or rarely used path. By baselining all task executable paths across the environment, we can flag any new task whose path is an outlier (e.g., in the 1st percentile of rarity), indicating a high probability of being unauthorized or malicious.
    answer_sources:
      - "Windows Event ID 4698"
      - "Sysmon Event ID 1"
      - "Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          BASELINE all executable paths used in scheduled tasks across the enterprise.
          For new task creations (Event ID 4698), calculate the rarity of its executable path.
          ALERT if the path's rarity is in the 1st percentile (i.e., one of the rarest).
  - question: "Has an unusual spike in the number of scheduled task creations occurred on a host, potentially indicating automated malicious activity?"
    context: |
      This question uses time-series analysis to detect anomalous rates of task creation. While some task creation is normal (e.g., during patching), a sudden, large burst of new tasks outside of these known windows can indicate a script or tool rapidly creating tasks for persistence or execution. A time-series model can learn the normal rhythm of task creation on a per-host basis and alert when a deviation exceeds a defined threshold (e.g., 3 standard deviations).
    answer_sources:
      - "Windows Event ID 4698"
      - "Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL the hourly count of new task creations (Event ID 4698) on a per-host basis using a time-series anomaly detection model.
          ALERT for any spike in activity that deviates more than 3 standard deviations from the forecasted baseline.
  - question: "Has an adversary attempted to hide a scheduled task by deleting its Security Descriptor from the registry?"
    context: |
      This is a very specific and high-fidelity question targeting a known stealth technique. Deleting the 'SD' (Security Descriptor) registry value for a task under 'HKLM\...\TaskCache\Tree\' makes the task invisible to standard tools like 'schtasks.exe' and the Task Scheduler GUI, but the task remains operational. Monitoring for the deletion of a registry value named 'SD' in this specific path (using Sysmon Event ID 13) provides a direct and reliable indicator of this hiding technique.
    answer_sources:
      - "Sysmon Event ID 13"
      - "Sysmon Event ID 12"
      - "Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\"
      - "All Windows endpoints and servers, as this is a specific stealth technique."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for registry value deletion events (Sysmon Event ID 13) where the 'TargetObject' path ends with '\SD' and is under 'HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\'.
  - question: "Are there any 'hidden' scheduled tasks on the system that exist in the registry but are not reported by standard enumeration tools?"
    context: |
      This question provides a method for proactively hunting for hidden tasks. By programmatically comparing the list of tasks found directly in the registry ('HKLM\...\TaskCache\Tree\') with the list produced by the official 'schtasks.exe' utility, any discrepancies can be identified. A task present in the registry but not in the 'schtasks' output is considered hidden. Tracking the count of such hidden tasks per host over time can reveal adversary presence, as any non-zero count is a significant anomaly requiring investigation.
    answer_sources:
      - "Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\"
      - "schtasks.exe output"
      - "All Windows endpoints and servers, as this is a specific stealth technique."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          PERIODICALLY run a script on endpoints to enumerate all tasks from the registry path 'HKLM\...\TaskCache\Tree\'.
          COMPARE this list against the parsed output of 'schtasks /query /xml'.
          ALERT if any task is present in the registry list but absent from the 'schtasks' output.
  - question: "Can clustering analysis group together seemingly disparate hidden scheduled tasks to reveal a coordinated campaign?"
    context: |
      When an adversary deploys multiple hidden tasks, they may share common characteristics even if they have different names or actions. This question proposes using a clustering algorithm like DBSCAN to group tasks based on features like creation time, author, whether the 'SD' value is missing, and other metadata. This can help an analyst connect the dots and identify a wider campaign by grouping tasks that are part of the same toolset or deployed by the same actor.
    answer_sources:
      - "Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\"
      - "All Windows endpoints and servers, as this is a specific stealth technique."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CLUSTER all scheduled tasks enumerated from the registry across the fleet.
          USE features such as 'IsHidden' status, creation timestamp, author, and whether the 'SD' value is missing.
          INVESTIGATE clusters that contain hidden tasks to identify potential campaigns.
  - question: "Has a non-administrative user created or modified a scheduled task to run with SYSTEM or other high-privilege credentials?"
    context: |
      This question targets a classic privilege escalation vector. An adversary with a foothold as a standard user may exploit a misconfiguration or vulnerability to create a scheduled task that executes code in a high-privilege context (e.g., 'NT AUTHORITY\SYSTEM'). This is a direct and high-fidelity indicator of privilege escalation. Alerting when the user creating the task is a non-admin but the task's 'run as' user is a privileged account is a critical detection.
    answer_sources:
      - "Windows Event ID 4698"
      - "Windows Event ID 4702"
      - "Windows Event ID 4672"
      - "User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for task creation/update events (Event ID 4698 or 4702) where the 'SubjectUserName' is a non-administrative user.
          FILTER for events where the user context for the task action is a high-privilege account like 'SYSTEM', 'Local Service', 'Network Service', or an administrator.
  - question: "Has a user created a scheduled task using a 'Run As' security context that is statistically rare or unprecedented for their account?"
    context: |
      This question uses user behavior analytics to spot anomalies. Most users, if they create tasks at all, will do so within their own context or a predictable set of contexts. By profiling the 'Run As' users for each account over time, we can detect when an account suddenly creates a task with a new or rarely used high-privilege context. For example, a standard user who has never created a task as 'SYSTEM' before suddenly doing so is a major red flag.
    answer_sources:
      - "Windows Event ID 4698"
      - "Windows Event ID 4702"
      - "User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MAINTAIN a profile for each user account of the security contexts ('Run As' users) they use for scheduled tasks.
          ALERT if a user creates a task using a security context that is new or statistically rare for their account profile (e.g., a standard user creating a task as 'SYSTEM').
  - question: "Can a graph-based model detect privilege escalation attempts by identifying the creation of improbable relationships between users and task security contexts?"
    context: |
      This question applies graph analysis to model the relationships between users and the privilege levels they assign to tasks. In this model, users and security contexts (e.g., 'SYSTEM', 'User-level') are nodes, and an edge is created when a user creates a task with a specific context. The model can learn which connections are normal. A privilege escalation attempt would manifest as a new, highly improbable edge, such as one connecting a 'Standard User' node to the 'SYSTEM' node, which the model would flag as a significant anomaly.
    answer_sources:
      - "Windows Event ID 4698"
      - "Windows Event ID 4702"
      - "User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CONSTRUCT a graph where nodes represent users and task security contexts.
          CREATE a directed edge from a user to a context when a task is created.
          USE anomaly detection to identify the creation of rare or improbable edges, such as a 'Standard User' node connecting to a 'SYSTEM' node.