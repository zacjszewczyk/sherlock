name: T1053.005: Scheduled Task
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook provides investigative steps to determine if an adversary has used scheduled tasks for execution, persistence, or privilege escalation. It covers detecting short-lived tasks used for code execution, identifying persistence mechanisms in non-standard locations or with startup triggers, finding tasks hidden from standard enumeration tools, and spotting tasks created by low-privilege users that run with elevated rights.
type: technique
related:
- TA0002: Execution
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: How can we detect if a scheduled task is created and then quickly deleted to execute a malicious payload?
  context: Adversaries may create a scheduled task for one-time execution and then immediately delete it to clean up their tracks, a technique known as "scheduled task trashing." This is highly suspicious behavior. This question focuses on correlating task creation (Event ID 4698) and deletion (Event ID 4699) events for the same task on the same host within a short timeframe, and then inspecting the executed command for known malicious patterns or indicators of compromise.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4699
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - All Windows workstations and servers, particularly internet-facing systems and general user endpoints.
  range: last 90 days
  queries:
  - symbolic: SEARCH task_events (event_id=4698) | JOIN by task_name, host with task_events (event_id=4699) WHERE time_difference < 15 minutes | LOOKUP process_events (event_id=1) spawned by 'svchost.exe' | FILTER command_line CONTAINS ('powershell -e', 'certutil', 'rundll32')
- question: Can we identify potentially obfuscated commands executed by scheduled tasks using statistical analysis?
  context: Adversaries often use obfuscation to hide the true nature of their commands. High character entropy or an unusual frequency of non-alphanumeric characters in a command line are strong indicators of obfuscation. This question aims to establish a baseline for normal command line characteristics for each host and then alert on any significant deviations that might suggest malicious activity.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4699
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - All Windows workstations and servers, particularly internet-facing systems and general user endpoints.
  range: last 90 days
  queries:
  - statistical: SEARCH process_events where parent_process is 'Task Scheduler' | CALCULATE entropy and non_alphanumeric_char_percent for command_line | ESTABLISH baseline per host | ALERT where entropy > 98th_percentile OR non_alphanumeric_char_percent > 98th_percentile for that host
- question: How can we use machine learning to score and identify malicious processes originating from the Task Scheduler?
  context: A supervised machine learning model can learn the complex patterns that distinguish malicious from benign processes. By training a model on features such as command line length, argument count, entropy, process rarity, and parent process details, we can create a robust detection mechanism that can identify novel threats executed via scheduled tasks, alerting on processes with a high probability score of being malicious.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4699
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - All Windows workstations and servers, particularly internet-facing systems and general user endpoints.
  range: last 90 days
  queries:
  - machine_learning: TRAIN classification_model on process_events from 'Task Scheduler' with features (cmd_length, arg_count, entropy, etc.) | SCORE new process_events with model | ALERT where score > high_threshold
- question: How can we detect scheduled tasks configured for persistence that run executables from non-standard, world-writable directories?
  context: To maintain a foothold, adversaries create scheduled tasks that run at system startup or user logon. They often place their executables in world-writable locations like %PUBLIC%, %TEMP%, or %APPDATA% to ensure they can be placed there by a lower-privileged process. This question focuses on identifying task creation or update events with these high-risk characteristics.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4700
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful.
  range: last 90 days
  queries:
  - symbolic: SEARCH task_events (event_id=4698 OR event_id=4702) | FILTER (executable_path CONTAINS ('\\Temp\\', '\\Public\\', '\\AppData\\') OR trigger IN ('At system startup', 'At log on')) AND executable_path NOT IN established_allowlist
- question: Can we use statistical rarity to identify suspicious scheduled tasks based on their executable path?
  context: Most legitimate scheduled tasks use common, well-known executable paths. An adversary's persistence mechanism is likely to use a unique or very rare path. By baselining all task paths across the enterprise, we can flag new tasks that use an exceptionally rare path (e.g., in the 1st percentile of rarity) for manual investigation.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4700
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful.
  range: last 90 days
  queries:
  - statistical: BUILD baseline of all scheduled_task_executable_paths | FOR each new task_creation_event | CALCULATE rarity of executable_path against baseline | ALERT where rarity < 1st_percentile
- question: Can we apply time-series anomaly detection to find unusual spikes in scheduled task creation activity?
  context: Adversaries deploying persistence across multiple systems might create a burst of new scheduled tasks. A time-series model can learn the normal rhythm of task creation (e.g., related to patching cycles) on a per-host basis and alert on statistically significant deviations from this pattern, which could indicate a coordinated malicious campaign.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4700
  - Sysmon Event ID 1
  - Domain Controllers, critical application servers, and administrative workstations where persistence is most impactful.
  range: last 90 days
  queries:
  - machine_learning: MODEL hourly_count of task_creation_events per host using a time-series algorithm | FORECAST expected counts | ALERT where actual_count > (forecast + 3 * standard_deviation) outside maintenance windows
- question: How can we detect if an adversary is hiding a scheduled task by deleting its Security Descriptor (SD)?
  context: Adversaries can hide a scheduled task from standard tools like schtasks.exe by deleting its 'SD' registry value. This is a specific and high-fidelity stealth technique. This question focuses on creating a rule to detect any registry value deletion where the target object is named 'SD' and is located under the TaskCache registry path.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 12
  - 'Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\'
  - All Windows endpoints and servers, as this is a specific stealth technique.
  range: last 90 days
  queries:
  - symbolic: SEARCH registry_events (event_id=13) WHERE target_object ENDS_WITH '\SD' AND target_object CONTAINS '\Schedule\TaskCache\Tree\'
- question: Can we statistically identify hidden scheduled tasks by comparing registry entries to enumeration tool output?
  context: A hidden task will exist in the registry but will be absent from the output of 'schtasks /query'. By programmatically comparing these two sources on an endpoint, we can generate a list of hidden tasks. Tracking the count of these hidden tasks over time provides a statistical measure of this stealth activity on a host; any non-zero count is a significant anomaly.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 12
  - 'Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\'
  - All Windows endpoints and servers, as this is a specific stealth technique.
  range: last 90 days
  queries:
  - statistical: SCRIPT on endpoint: list_A = tasks from registry; list_B = tasks from 'schtasks /query'; DIFF list_A and list_B | SEND count of differences to SIEM | ALERT if count > 0
- question: How can we use clustering to group potentially related hidden scheduled tasks across an environment?
  context: If an attacker uses a hidden task campaign, the tasks may share similar properties (e.g., creation timestamp, author) even if on different machines. A clustering algorithm can group these disparate but related tasks by analyzing features like 'IsHidden', creation time, and author, helping an analyst understand the full scope of a campaign.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 12
  - 'Windows Registry HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tree\'
  - All Windows endpoints and servers, as this is a specific stealth technique.
  range: last 90 days
  queries:
  - machine_learning: GATHER task properties from registry across fleet | ADD 'IsHidden' feature based on diff method | RUN clustering algorithm (DBSCAN) on features | ANALYZE clusters of hidden tasks for common TTPs
- question: How can we detect when a non-administrative user creates a scheduled task configured to run with SYSTEM or other high-privilege credentials?
  context: A classic privilege escalation technique involves a standard user creating a task that, due to misconfigurations, executes with elevated rights (e.g., as NT AUTHORITY\SYSTEM). This question focuses on creating a high-fidelity alert for the specific mismatch between a non-administrative task creator and a high-privilege task execution context.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4672
  - User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate.
  range: last 90 days
  queries:
  - symbolic: SEARCH task_events (event_id=4698 OR 4702) WHERE creator_account_privilege is 'Standard' AND task_run_as_user is IN ('SYSTEM', 'Local Service', 'Network Service', 'Administrator')
- question: Can we statistically profile the 'Run As' users for scheduled tasks created by each user to spot anomalies?
  context: Users typically create tasks that run as themselves. A standard user suddenly creating a task to run as a privileged account is a significant deviation from normal behavior. By baselining the typical 'Run As' contexts for each user, we can statistically identify when a user creates a task with a security context that is rare or has never been seen for their account before.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4672
  - User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate.
  range: last 90 days
  queries:
  - statistical: BUILD baseline of (creator_user, run_as_user) pairs | FOR each new task_event | CALCULATE frequency of the pair in the baseline | ALERT if frequency is rare or this is the first time the pair has been seen
- question: Can a graph-based model identify improbable connections between users and the privilege levels of the tasks they create?
  context: Modeling relationships between users and privilege contexts as a graph allows us to identify anomalous links. An edge in the graph from a 'Standard User' node to a 'SYSTEM Privilege' node represents an improbable event that a graph anomaly detection model can flag as a likely privilege escalation attempt. This approach is powerful for visualizing and detecting such behavior at scale.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4672
  - User workstations and multi-user servers like Remote Desktop Session Hosts, where multiple users with varying privilege levels operate.
  range: last 90 days
  queries:
  - machine_learning: CREATE graph with nodes for users and privilege_contexts | ADD edge from user to context upon task creation | RUN graph anomaly detection | ALERT on creation of rare edges (e.g., 'Standard User' -> 'SYSTEM Privilege')