name: T1495: Firmware Corruption
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has impacted system or device availability by corrupting firmware, a technique categorized as T1495 by MITRE ATT&CK. It focuses on detecting indicators such as the use of known firmware modification tools (e.g., Lojax), anomalous execution of legitimate update utilities, specific event sequences that form a firmware attack chain (reconnaissance, tool acquisition, execution, and system crash), unusual network traffic to device management interfaces, and a widespread, statistically significant increase in unexpected system reboots across the enterprise. By analyzing these indicators, analysts can identify and respond to attacks targeting the foundational firmware of systems and network devices.
type: technique
related:
- TA0040: Impact
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known firmware modification tool been observed on the network or executed on a host?
  context: This question aims to detect the presence of specific, known malicious tools used for firmware corruption. Adversaries often use publicly known or repurposed malware like Lojax or components of TrickBoot. Matching file or process hashes against a curated threat intelligence feed provides a high-fidelity signal that an adversary is attempting to deploy firmware-level malware.
  answer_sources:
  - Zeek files.log
  - Windows Event ID 4688
  - Enterprise Endpoints, Domain Controllers, Core Network Switches, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events OR file_transfer_events
      WHERE file_hash IN (threat_intelligence_feed_of_firmware_tools)
      RETURN host, timestamp, process_name, file_hash
- question: Have any executable files with unusually randomized filenames been transferred over the network?
  context: This question seeks to identify evasive malware by analyzing filename characteristics. Adversaries may use randomized or high-entropy filenames to bypass simple, name-based detection rules. By calculating the Shannon entropy of filenames and flagging statistical outliers compared to a baseline, analysts can uncover potentially malicious tools that might otherwise be missed.
  answer_sources:
  - Zeek files.log
  - Enterprise Endpoints, Domain Controllers, Core Network Switches, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_transfer_events
      WHERE file_type == 'executable'
      CALCULATE shannon_entropy(filename)
      ALERT if entropy > baseline_95th_percentile
      RETURN source_ip, destination_ip, filename, entropy_score
- question: Can machine learning models identify previously unseen executables that are likely to be malicious firmware utilities?
  context: This question leverages machine learning to proactively identify new or unknown threats. A supervised model, trained on a variety of features from both network and host data, can learn the complex patterns associated with malicious firmware tools. This allows for the detection of novel threats that do not match known signatures, based on their behavioral and contextual attributes.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - Enterprise Endpoints, Domain Controllers, Core Network Switches, Internet Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new executable_event (process_creation OR file_transfer)
        EXTRACT features (file_size, mime_type, ip_rep, parent_process, etc.)
        SCORE features with trained_model
        ALERT if score > malicious_threshold
      RETURN event_details, model_score
- question: Is a legitimate firmware update utility being executed from an unusual location or without a valid digital signature?
  context: This question helps to identify the malicious use of legitimate tools (Living off the Land). Adversaries may drop a legitimate utility in a temporary or non-standard directory to execute it. Verifying that these powerful tools are run from their expected, authorized installation paths and have valid digital signatures from the vendor helps distinguish legitimate administrative activity from malicious behavior.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Endpoints, Mission Critical Servers (e.g., Database, Application), Virtualization Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_name IN (list_of_firmware_utilities)
      AND (process_path NOT IN ('C:\Program Files\*', 'C:\Windows\System32\*'))
      OR (process_signature_is_invalid OR signature_vendor != expected_vendor)
      RETURN host, process_name, process_path, signature_status
- question: Has a firmware update utility been executed with anomalous or unexpected command-line arguments?
  context: This question focuses on the *how* a tool is used, not just *that* it was used. Adversaries may use legitimate tools but with malicious parameters (e.g., pointing to a malicious firmware image). By baselining normal command-line usage for each utility and using string distance metrics like Levenshtein distance to detect significant deviations, analysts can spot malicious misuse of approved tools.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Endpoints, Mission Critical Servers (e.g., Database, Application), Virtualization Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_name IN (list_of_firmware_utilities)
      CALCULATE levenshtein_distance(command_line, baseline_arguments)
      ALERT if distance > threshold (e.g., 3_std_dev)
      RETURN host, process_name, command_line, distance_score
- question: Are there isolated or unusual execution patterns for firmware utilities that differ from common administrative activity?
  context: This question uses unsupervised machine learning to find outliers. Most legitimate administrative activity occurs in predictable patterns. Density-based clustering can group these normal activities together. Any execution that doesn't fit into a dense cluster (i.e., is a 'noise point') is by definition anomalous and warrants investigation as a potential one-off malicious event.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Endpoints, Mission Critical Servers (e.g., Database, Application), Virtualization Hosts
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GATHER process_execution_events for firmware_utilities
      EXTRACT features (command_line, parent_process, user, time_of_day)
      APPLY DBSCAN clustering model
      ALERT on events classified as 'noise' or in very small clusters
      RETURN anomalous_event_details
- question: Has a host exhibited a sequence of activities indicative of a firmware attack, from reconnaissance to impact?
  context: This question seeks to identify a full attack chain by correlating disparate events over time. A single event might be missed, but a sequence of hardware reconnaissance, tool download from a suspicious source, privileged execution of a new file, and a subsequent system crash is highly indicative of a firmware attack. A stateful rule connects these dots to provide a high-confidence alert.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Windows Event ID 41
  - Enterprise Endpoints, Virtualization Hosts, Core Network Infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events on a single host within a 60-minute window:
      SEQUENCE [
        1. process_creation of 'wmic' with 'baseboard' args
        2. network_connection to low_reputation_ip with file_download
        3. privileged process_creation of new/unsigned_executable
        4. system_shutdown_event (1074, 6006, 41)
      ]
      ALERT if sequence is matched
      RETURN host, timestamps_of_each_event
- question: Does the timing between the stages of a potential firmware attack suggest automated execution?
  context: Human-driven attacks have different timing characteristics than automated scripts. Very short, consistent time delays between reconnaissance, download, and execution can indicate that an attack is being carried out by a script or automated tool, which may imply a more advanced or widespread threat. Flagging these automated sequences allows for faster, prioritized response.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Windows Event ID 41
  - Enterprise Endpoints, Virtualization Hosts, Core Network Infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each matched attack_chain_sequence
        CALCULATE time_delta between each step
        ANALYZE distribution of time_deltas
        ALERT if time_delta is an outlier (e.g., < 5th percentile)
      RETURN host, sequence_events, time_deltas
- question: Can a sequence-aware machine learning model detect anomalous chains of events that resemble a firmware attack?
  context: This question proposes a more advanced, probabilistic approach to detecting attack chains. Instead of a rigid rule, a model like an RNN or HMM can learn the "grammar" of normal system behavior. When it encounters a sequence of events that is syntactically possible but semantically highly improbable, it can flag it as a deviation, even if the sequence doesn't perfectly match a predefined rule.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Windows Event ID 41
  - Enterprise Endpoints, Virtualization Hosts, Core Network Infrastructure
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each real-time stream of host_events
        FEED event_sequence to trained_RNN/HMM_model
        CALCULATE sequence_probability_score
        ALERT if score is below a low_probability_threshold
      RETURN anomalous_sequence, probability_score
- question: Is there unauthorized network traffic to critical network device management interfaces?
  context: This question addresses the fundamental principle of least privilege for network access. Management interfaces of routers, switches, and firewalls are high-value targets. By defining a strict allow-list of approved source IPs and protocols, any deviation from this policy becomes a high-fidelity alert, potentially indicating an attempt to access or compromise the device.
  answer_sources:
  - Zeek conn.log
  - Network Management Interfaces (Switches, Routers, Firewalls), Out-of-Band Management Network
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_connections
      WHERE destination_ip IN (list_of_management_interfaces)
      AND (source_ip NOT IN (authorized_admin_subnets)
           OR protocol NOT IN ('ssh', 'https'))
      ALERT and return connection_details
- question: Has there been an anomalously large data transfer to a network device's management interface?
  context: This question seeks to detect the transfer of a malicious payload, such as a compromised firmware image. Legitimate management sessions typically involve small amounts of data. A sudden, unusually large inbound data transfer to a management port is a strong indicator that an adversary is attempting to upload a file, which could be a precursor to firmware corruption.
  answer_sources:
  - Zeek conn.log
  - Network Management Interfaces (Switches, Routers, Firewalls), Out-of-Band Management Network
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_connections over 1-hour windows
      WHERE destination_ip IN (list_of_management_interfaces)
      SUM inbound_bytes
      ALERT if sum > historical_98th_percentile_baseline
      RETURN destination_ip, total_bytes, source_ip
- question: Does the traffic pattern to a network device's management interface deviate significantly from its predicted normal behavior?
  context: This question uses time-series forecasting to establish a dynamic, intelligent baseline of normal activity. Models like ARIMA can account for seasonality and trends. An alert is triggered when current traffic volume or connection counts fall outside the model's predicted range, indicating a statistical anomaly that is more robust than a simple static threshold.
  answer_sources:
  - Zeek conn.log
  - Network Management Interfaces (Switches, Routers, Firewalls), Out-of-Band Management Network
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each management_interface
        FEED real-time traffic_volume and connection_count to ARIMA_model
        GET forecast and confidence_interval
        ALERT if current_value is outside confidence_interval
      RETURN interface, observed_value, forecast_value
- question: Has a widespread and sudden increase in unexpected system shutdowns occurred, not related to authorized changes?
  context: This question aims to detect the large-scale impact of a potential attack. A single system crashing is common, but many systems crashing simultaneously is a major red flag. By automatically checking against a change management system, it filters out noise from planned maintenance, making the resulting alerts highly actionable.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6005
  - Windows Event ID 6006
  - Windows Event ID 41
  - All Enterprise Endpoints and Servers, Change Management Database/System
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH shutdown_events (1074, 6006, 41) in a 30-minute window
      COUNT distinct hosts
      IF count > 20 AND event_timestamp NOT IN change_management_window
        ALERT
      RETURN count, list_of_hosts
- question: Is the current rate of unexpected system shutdowns statistically anomalous compared to the recent past?
  context: This question uses statistical methods to create a dynamic threshold for detecting a burst of failures. A moving average and standard deviation automatically adjust to the environment's normal "crash rate," allowing the system to flag any statistically significant spike (e.g., a 3-sigma event) as an anomaly, regardless of the absolute number.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6005
  - Windows Event ID 6006
  - Windows Event ID 41
  - All Enterprise Endpoints and Servers, Change Management Database/System
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE shutdown_events into 15-minute buckets
      CALCULATE 24-hour moving_average and standard_deviation
      FOR current 15-minute bucket
        IF current_count > (moving_average + 3 * standard_deviation)
          ALERT
      RETURN current_count, moving_average
- question: Are unexpected system shutdowns clustered together in both time and network location?
  context: This question seeks to find patterns in how systems are failing. Random hardware failures are typically distributed randomly. A coordinated attack or worm-like propagation would likely cause failures that are tightly clustered in both time and network proximity. Using a spatio-temporal clustering algorithm can automatically identify these suspicious clusters.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6005
  - Windows Event ID 6006
  - Windows Event ID 41
  - All Enterprise Endpoints and Servers, Change Management Database/System
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      GATHER all shutdown_events with timestamp and host_subnet
      APPLY ST-DBSCAN clustering model
      ALERT on identified clusters (events close in time and network space)
      RETURN cluster_details (hosts, times, subnet)