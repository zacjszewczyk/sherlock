name: T1027.011: Fileless Storage
id: d29a5c8e-7e6b-4f0c-b9a8-3f1d2e4c5b6a
description: This playbook helps determine if an adversary is evading defenses by using fileless storage techniques. This involves investigating whether malicious content, such as malware payloads or persistence scripts, is being stored in non-file system locations like the Windows Registry, WMI objects, or Event Logs. It also covers techniques on Linux, such as using shared memory (`/dev/shm`) for payloads and then initiating suspicious network traffic. The playbook focuses on identifying anomalously large or high-entropy data writes, unusual process behavior (e.g., non-admin processes writing to the registry), the creation of persistent WMI event consumers, direct modification of registry hive files, and the correlation of suspicious file downloads with subsequent anomalous network activity.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are PowerShell script blocks or registry value modifications matching known malicious signatures associated with fileless malware?
    context: This question aims to detect known threats by applying signature-based detection (YARA) to data stored in fileless locations. Adversaries often store obfuscated payloads or scripts in registry values or execute them via PowerShell. Scanning the content of PowerShell's `ScriptBlockText` (from Event ID 4103) and new registry values (from Event ID 4657) against a library of YARA rules can directly identify known malware families or attack patterns.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104 from Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH logs WHERE event_id IN (4103, 4657) | APPLY yara_rules_for_fileless_malware TO fields (ScriptBlockText, NewValue) | RETURN matches
  - question: Is there evidence of high-entropy, Base64-encoded strings being stored in PowerShell script blocks or registry values, suggesting obfuscated payloads?
    context: Adversaries frequently use encoding, like Base64, to hide malicious payloads. While legitimate data can be encoded, malicious payloads often have higher entropy (randomness) than structured configuration data. By decoding Base64 strings found in PowerShell logs (Event IDs 4103/4104) and registry writes (Event ID 4657) and calculating their Shannon entropy, we can statistically identify outliers that are likely to be obfuscated code rather than benign data.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104 from Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH logs WHERE event_id IN (4103, 4104, 4657) | EXTRACT base64_strings | DECODE base64_strings | CALCULATE shannon_entropy | ALERT if entropy > threshold
  - question: Can machine learning models classify PowerShell script blocks as malicious based on their characteristics?
    context: This question leverages machine learning to move beyond simple signatures and statistics. By training a model (e.g., logistic regression) on features like script length, entropy, character ratios, and the presence of suspicious keywords ('IEX', 'Invoke-Expression'), the model can learn to distinguish between benign and malicious scripts. This allows for the detection of novel or heavily obfuscated malware that might evade other methods.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104 from Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM logs WHERE event_id = 4103 | EXTRACT features (length, entropy, keywords) FROM ScriptBlockText | SCORE with logistic_regression_model | ALERT if score > malicious_threshold
  - question: Is a Linux host exhibiting network traffic to destinations or with characteristics matching threat intelligence for malware known to use fileless techniques?
    context: This question focuses on identifying network-level indicators of compromise on Linux systems. Malware that uses fileless storage like shared memory (`/dev/shm`) still needs to communicate with a Command and Control (C2) server. By correlating destination IPs, domains, and TLS fingerprints (JA3/JA4) from network logs (Zeek) against known threat intelligence, we can detect infections from specific malware families like Muhstik or Kinsing.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek ssl.log, Zeek dns.log from Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH network_logs | JOIN with threat_intel_feeds ON (destination_ip, domain, ja3_hash) | RETURN matches
  - question: Are any Linux hosts exhibiting automated, low-jitter network beaconing indicative of C2 communication?
    context: Automated malware often communicates with its C2 server at regular intervals (beaconing). While sophisticated malware may add jitter (random delays) to evade detection, many do not. By analyzing the time between connections to the same destination IP, a very low variance or standard deviation can indicate automated, machine-like behavior, which is a strong signal of a potential compromise.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek ssl.log, Zeek dns.log from Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH conn.log | GROUP BY source_ip, dest_ip | CALCULATE time_delta_stdev | ALERT if stdev < low_jitter_threshold AND connection_count > 10
  - question: Have any critical Linux servers experienced a sudden, anomalous increase in outbound data volume?
    context: A fileless payload, after execution, might proceed to stage or exfiltrate data from the compromised host. This activity would likely result in a significant increase in outbound network traffic compared to the server's normal baseline. Using a time-series forecasting model (like ARIMA or Prophet) to predict expected traffic volume allows us to detect and alert on significant deviations that could represent data exfiltration.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek ssl.log, Zeek dns.log from Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each server | FORECAST daily_outbound_bytes using time_series_model | ALERT if actual_bytes > upper_confidence_bound
  - question: Are command-line tools being used to write unusually large values to the Windows Registry?
    context: Adversaries use native command-line tools like `reg.exe` and PowerShell (`Set-ItemProperty`) to store malicious payloads in the registry. These payloads are often larger than typical configuration values. This question seeks to identify these actions by setting a symbolic rule that flags registry 'add' commands where the value being written exceeds a certain size threshold (e.g., 1024 characters), indicating a likely attempt to store a script or binary blob.
    answer_sources: Windows Event ID 4688, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104, Windows Event ID 4657 from User Workstations, Domain Controllers, Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE process_name = 'reg.exe' AND command_line CONTAINS 'add' AND length(value_string) > 1024 | RETURN events
  - question: Are there any registry write operations with an anomalously large value size for their specific key path?
    context: While a general size threshold is useful, a more precise method is to baseline what is 'normal' for each specific registry key. Some keys legitimately store large values, while for others, even a small value is unusual. By calculating a statistical baseline (e.g., 99th percentile) for the value length of every unique registry key path, we can detect anomalous writes with much higher fidelity.
    answer_sources: Windows Event ID 4688, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104, Windows Event ID 4657 from User Workstations, Domain Controllers, Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH registry_logs (event_id=4657) | FOR each registry_key_path | CALCULATE length_percentile(NewValue, 99) | ALERT if new_write_length > percentile_value
  - question: Are there anomalous command-line executions that indicate obfuscated script execution or direct writes to fileless storage?
    context: Adversaries often construct complex and unusual command lines to execute fileless payloads, attempting to bypass simpler detection rules. A One-Class SVM model can be trained on the structure and tokens of 'normal' command lines for script hosts like `powershell.exe` and `cmd.exe`. The model can then identify new commands that are structurally different from anything seen before, flagging them as potential threats.
    answer_sources: Windows Event ID 4688, Windows PowerShell Event ID 4103, Windows PowerShell Event ID 4104, Windows Event ID 4657 from User Workstations, Domain Controllers, Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM process_creation_logs (event_id=4688) | TOKENIZE command_line | SCORE with one_class_svm_model | ALERT on anomalous scores
  - question: Are script files being transferred over the network that contain commands to write to or execute from Linux shared memory?
    context: This question seeks to detect the delivery of Linux fileless malware. Adversaries may drop a script (shell, Python, etc.) onto a target system that then writes the main payload into a shared memory directory like `/dev/shm` to avoid disk-based detection. By inspecting the content of files transferred over the network (via Zeek), we can search for specific strings and commands related to this activity.
    answer_sources: Zeek http.log, Zeek files.log from Network Egress/Ingress Points, Web Proxies, Linux Server Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_logs WHERE mime_type IN ('text/x-shellscript', 'text/x-python') | SCAN file_content for regex ('/dev/shm/', '/run/shm/') | RETURN matches
  - question: Are Linux servers downloading script files from rare or unusual domains?
    context: Most servers download files and updates from a predictable set of source domains. A script downloaded from a domain never before seen in the environment, or seen very infrequently, is suspicious. This statistical approach helps identify potentially malicious file drops by focusing on the rarity of the source, which can indicate a newly provisioned or attacker-controlled domain.
    answer_sources: Zeek http.log, Zeek files.log from Network Egress/Ingress Points, Web Proxies, Linux Server Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH http_logs with file_downloads | CALCULATE historical_domain_frequency | ALERT if script is downloaded from domain in bottom 5% of frequency
  - question: Can machine learning models identify malicious shell scripts being transferred over the network?
    context: This question applies machine learning to classify the content of script files themselves. By training a Naive Bayes classifier on a labeled dataset of benign and malicious scripts, the model learns which words, commands, or tokens are more indicative of malicious intent. This allows for the proactive detection of malicious scripts as they are transferred over the network, even if they are from a known-good domain or don't contain obvious keywords.
    answer_sources: Zeek http.log, Zeek files.log from Network Egress/Ingress Points, Web Proxies, Linux Server Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM file_logs WHERE mime_type = 'text/x-shellscript' | VECTORIZE script_content | SCORE with naive_bayes_classifier | ALERT if score > malicious_threshold
  - question: Is a non-administrative process writing to the Windows Registry or WMI?
    context: Registry and WMI modifications are typically performed by system processes or administrative tools. When a common user application like a web browser or document reader (`winword.exe`) performs a write to the registry or WMI, it is highly anomalous and may indicate a compromise, such as a malicious macro or exploit executing code. This question uses a simple allowlist of expected processes to find such outliers.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows Event ID 4688 from Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH logs WHERE event_id IN (4657, 5861) | ALERT if process_name NOT IN (admin_process_allowlist)
  - question: Is any process writing an unusually large value to the registry?
    context: To detect attempts to store payloads, this question identifies registry writes where the size of the data is a statistical outlier. By establishing a baseline of normal write sizes for each process using the Interquartile Range (IQR) method, we can flag any write that is significantly larger than what the process typically performs. This is more robust than a fixed threshold and can uncover abuse of legitimate processes.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows Event ID 4688 from Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH registry_logs (event_id=4657) | GROUP BY process_name | CALCULATE IQR and Q3 of NewValue length | ALERT if new_write_length > (Q3 + 1.5 * IQR)
  - question: Is there evidence of anomalous WMI repository modifications?
    context: Adversaries abuse WMI for persistence and lateral movement. Since WMI activity can be noisy, this question uses K-Means clustering to define 'normal' WMI behavior. By clustering historical WMI write events based on features like the process name and namespace, the model can identify new events that do not fit into any existing normal cluster, flagging them as potential outliers indicative of malicious activity.
    answer_sources: Windows Event ID 4657, Windows Event ID 5861, Windows Event ID 4688 from Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM wmi_write_logs (event_id=5861) | EXTRACT features (ProcessName, Namespace) | SCORE distance to k-means_centroids | ALERT on large distance or small cluster
  - question: Has a permanent WMI event consumer been created?
    context: The creation of a permanent WMI event consumer is a powerful persistence technique used by adversaries to execute code in response to system events. This action is very rare during normal operations. Therefore, any instance of Event ID 5861, which signals the creation of a permanent consumer, should be treated as a high-priority alert and investigated immediately to identify the responsible process.
    answer_sources: Windows Event ID 5859, Windows Event ID 5860, Windows Event ID 5861, Windows Event ID 4688, Zeek conn.log from WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH logs WHERE event_id = 5861 | CORRELATE with event_id=4688 on process_id | ALERT with parent process information
  - question: Has the WMI provider service (`wmiprvse.exe`) spawned a rare or suspicious child process?
    context: The WMI provider service (`wmiprvse.exe`) may spawn other processes as part of its legitimate function. However, adversaries can abuse this to execute malicious commands. Spawning processes like `powershell.exe` or `cmd.exe` is a common attacker technique. By baselining the frequency of all child processes of `wmiprvse.exe`, we can alert when a rare or unexpected process is launched, indicating potential abuse of WMI for code execution.
    answer_sources: Windows Event ID 5859, Windows Event ID 5860, Windows Event ID 5861, Windows Event ID 4688, Zeek conn.log from WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE parent_process = 'wmiprvse.exe' | CALCULATE historical_child_process_frequency | ALERT if child_process in bottom 5% of frequency
  - question: Is there evidence of anomalous process or network activity originating from WMI?
    context: To detect complex WMI-based attacks, this question proposes modeling the relationships between WMI processes, their children, and their network communications as a graph. A Graph Neural Network (GNN) can be trained to learn the normal patterns within these graphs. The model can then identify and score new WMI-related activity, flagging subgraphs that are structurally anomalous and may represent a sophisticated attack chain.
    answer_sources: Windows Event ID 5859, Windows Event ID 5860, Windows Event ID 5861, Windows Event ID 4688, Zeek conn.log from WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CONSTRUCT graph from process (4688) and network (conn.log) data related to wmiprvse.exe | SCORE subgraph with GNN_anomaly_model | ALERT on high anomaly score
  - question: Is an unauthorized process attempting to write directly to Windows Registry hive files or the WMI repository?
    context: This question aims to detect a highly privileged and destructive technique: direct modification of the underlying files for the registry or WMI. By enabling detailed file access auditing (SACLs) on these protected directories, we can generate alerts (Event ID 4663) for any write access from a process not on a very strict allowlist of system-level processes. This is a strong indicator of a significant compromise.
    answer_sources: Windows Event ID 4663, Windows Event ID 4688 from File Systems of Domain Controllers and Critical Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_audit_logs (event_id=4663) WHERE object_path IN ('...\\Config\\', '...\\Wbem\\Repository\\') AND access_mask CONTAINS 'write' AND process_name NOT IN (hive_access_allowlist)
  - question: Is there an anomalous number of access attempts to sensitive registry or WMI file directories?
    context: In addition to watching for unauthorized processes, a sudden spike in access attempts by any process, even an allowed one, can be suspicious. This question uses statistical analysis to baseline the normal daily access count for each process to these sensitive directories. An alert is triggered if a process's access count exceeds its historical average by a significant margin (e.g., 3 standard deviations), which could indicate misuse or a malfunction.
    answer_sources: Windows Event ID 4663, Windows Event ID 4688 from File Systems of Domain Controllers and Critical Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH file_audit_logs (event_id=4663) | GROUP BY process_name, day | CALCULATE mean and stdev of daily_access_count | ALERT if today_count > (mean + 3 * stdev)
  - question: Can machine learning predict malicious access attempts to registry or WMI file directories?
    context: This question proposes using a supervised machine learning model, like a random forest, to classify file access events as benign or malicious. By training on a labeled dataset, the model can learn the complex combinations of features (process name, access type, user context) that indicate a malicious attempt. This provides a more nuanced detection capability than simple rules or statistical thresholds.
    answer_sources: Windows Event ID 4663, Windows Event ID 4688 from File Systems of Domain Controllers and Critical Windows Servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: STREAM file_audit_logs (event_id=4663) | EXTRACT features (ProcessName, AccessMask, ObjectName) | SCORE with random_forest_model | ALERT if classified as malicious
  - question: Has a Linux host initiated suspicious outbound connections shortly after downloading a script related to shared memory usage?
    context: This question links the delivery of a potential fileless payload with its subsequent network activity. It creates a stateful rule that looks for a two-part event: first, a file download containing keywords for shared memory (`/dev/shm`), and second, an immediate outbound connection from that same host to a rare or non-standard destination. This time-bound correlation is a strong indicator that a downloaded payload has been activated.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek files.log, Zeek dns.log from Network Egress/Ingress Points, Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRIGGER on file_download with '/dev/shm' content | WITHIN 5 minutes, LOOK FOR outbound_connection from same_host to a rare_IP | ALERT on match
  - question: Did a Linux host's data upload volume spike after downloading a script related to shared memory usage?
    context: This is another method to correlate payload delivery with malicious activity. After detecting a file download containing shared memory indicators, this rule specifically monitors for a sign of data staging or exfiltration. It establishes a baseline for the host's normal daily upload volume and alerts if the upload volume in the hour following the suspicious download dramatically exceeds the 99th percentile of that baseline.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek files.log, Zeek dns.log from Network Egress/Ingress Points, Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRIGGER on file_download with '/dev/shm' content | MONITOR outbound_bytes for 1 hour | ALERT if total_bytes > 99th_percentile_of_daily_baseline
  - question: Does a composite anomaly score from multiple ML models indicate a fileless payload has been dropped and activated on a Linux host?
    context: This question describes an advanced detection strategy that combines the outputs of multiple, specialized machine learning models to increase confidence and reduce false positives. An alert is only generated when a host gets a high anomaly score for both a suspicious file download (from a file content classifier) and subsequent anomalous network beaconing (from a time-series model) within a short time window. This fusion of evidence provides a very strong signal of a successful compromise.
    answer_sources: Zeek conn.log, Zeek http.log, Zeek files.log, Zeek dns.log from Network Egress/Ingress Points, Linux Server Network Segments.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: GENERATE file_anomaly_score and network_anomaly_score from ML models | ALERT if file_score > threshold AND network_score > threshold for same_host within 10 minutes