name: T1552.001: Credentials In Files
id: c8f9b9e0-64d7-4f2e-8a0a-9d8f9b9e0c8f
description: |
  This playbook is designed to help answer the primary investigative requirement: "Has the adversary accessed credentials stored in files on the enterprise network?". It provides a structured approach to detect various methods adversaries use to find and steal credentials from files. The playbook's investigative questions focus on identifying the execution of known credential harvesting tools by file hash, analyzing command-line arguments for file-searching utilities and keywords, detecting statistical anomalies like obfuscated commands or unusual access volumes to sensitive files, identifying suspicious process lineages originating from network services, and flagging user file access behavior that deviates from established individual or peer-group baselines.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: "Has a known credential harvesting tool (e.g., LaZagne, Mimikatz) been executed on the network, identified by its file hash?"
    context: |
      This question aims to detect the most direct evidence of credential theft attempts using well-known, off-the-shelf tools. Adversaries often use these tools because they are effective and readily available. Matching the hash of a newly created process against a curated list of malicious tool hashes provides a high-confidence indicator of compromise. This is a fundamental, signature-based detection method.
    answer_sources: Windows Event ID 4688 from Enterprise Workstations, Enterprise Servers, Developer Endpoints.
    range: last 90 days
    queries:
      - symbolic: "SEARCH process_creation_events (EID 4688) | JOIN process_hash with threat_intel_feed_of_malicious_hashes | WHERE match_found"
  - question: "Has a common process (e.g., powershell.exe) been executed with an unusually complex or obfuscated command line, potentially indicating credential harvesting activity?"
    context: |
      Adversaries often obfuscate their commands to evade simple keyword-based detections. High Shannon entropy in a command line can indicate the use of encoding (like Base64) or packing, which are common techniques for hiding malicious payloads. By baselining the normal command-line complexity for standard utilities and alerting on significant deviations, we can uncover attempts to run disguised credential harvesting scripts.
    answer_sources: Windows Event ID 4688 from Enterprise Workstations, Enterprise Servers, Developer Endpoints.
    range: last 90 days
    queries:
      - statistical: "SEARCH process_creation_events (EID 4688) | CALCULATE shannon_entropy of command_line | BASELINE entropy per process_name over 30 days | ALERT if current_entropy > 99th_percentile_of_baseline"
  - question: "Can we use machine learning to predictively identify new or unknown credential harvesting tools based on their execution behavior?"
    context: |
      Signature-based and simple statistical methods may fail to detect novel or customized credential harvesting tools. This question explores using a machine learning model trained on a rich set of features from process creation events (e.g., parent process, command-line properties, token elevation). The model learns the complex patterns of malicious behavior and can assign a risk score to new, unseen processes, enabling the detection of zero-day threats.
    answer_sources: Windows Event ID 4688 from Enterprise Workstations, Enterprise Servers, Developer Endpoints.
    range: last 90 days
    queries:
      - machine_learning: "INPUT process_creation_events (EID 4688) into trained_classifier_model | EXTRACT features (process_name, parent_process, cmd_length, etc.) | ALERT if model_output_score > risk_threshold"
  - question: "Is an adversary using built-in command-line utilities (e.g., findstr, grep, type) to search for files containing credential-related keywords like 'password' or 'secret'?"
    context: |
      This is a classic 'living off the land' technique where adversaries use legitimate system tools to find sensitive information, minimizing their footprint. This question focuses on detecting the explicit act of searching for credentials by monitoring command lines for the combination of search utilities and credential-related keywords. It also includes monitoring for direct access to known credential-storage files like `web.config` or GPP `groups.xml`.
    answer_sources: Windows Event ID 4688, Windows Event ID 4663 from Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers.
    range: last 90 days
    queries:
      - symbolic: "SEARCH process_creation_events (EID 4688) | WHERE command_line contains (findstr, grep, type) AND (password, secret, private_key)"
  - question: "Has any user or service account started searching for credential-related files at a rate that is anomalous compared to their historical behavior?"
    context: |
      While a single search might be legitimate, a sudden spike in this activity for a particular user is highly suspicious. This question aims to establish a baseline of 'normal' credential-searching command frequency for each user and host. Alerting on deviations from this baseline helps distinguish between routine administrative tasks and a potential adversary actively hunting for credentials. Activity from service accounts is especially noteworthy as they should have predictable, automated behavior.
    answer_sources: Windows Event ID 4688 from Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers.
    range: last 90 days
    queries:
      - statistical: "SEARCH process_creation_events (EID 4688) with credential_keywords | COUNT events per user, per host, per day | BASELINE count over 30 days | ALERT if daily_count > (moving_average + 3 * std_dev)"
  - question: "Can we use Natural Language Processing (NLP) to understand the semantic intent of command lines and identify credential-seeking behavior even if it uses non-standard keywords or syntax?"
    context: |
      Adversaries can evade keyword-based rules by using synonyms, misspellings, or complex command structures. This question proposes using a sophisticated NLP model, like BERT, that has been trained to understand the *meaning* behind a command, not just its literal text. This allows for the detection of a wider and more subtle range of malicious commands aimed at finding credentials.
    answer_sources: Windows Event ID 4688 from Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers.
    range: last 90 days
    queries:
      - machine_learning: "INPUT command_line_text from process_creation_events (EID 4688) into fine_tuned_NLP_model | ALERT if model_classifies_intent as 'credential_seeking'"
  - question: "Has a single process rapidly accessed an unusually high number of files with sensitive extensions (e.g., .config, .key, .pem) across many different directories?"
    context: |
      A common pattern for automated credential scraping scripts is to perform a rapid, wide-ranging search for files that are likely to contain secrets. This question looks for this specific 'smash and grab' behavior by setting explicit thresholds. A single process reading, for example, more than 20 sensitive files across more than 3 directories in under a minute is highly indicative of malicious activity and not typical user or system behavior.
    answer_sources: Windows Event ID 4663 from File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories.
    range: last 90 days
    queries:
      - symbolic: "SEARCH file_access_events (EID 4663) with sensitive_extensions | GROUP by ProcessID, time_window (1 min) | COUNT unique file_paths and unique directory_paths | ALERT if unique_files > 20 AND unique_directories > 3"
  - question: "Is any user or process accessing a number of sensitive files that is statistically anomalous compared to the rest of the organization?"
    context: |
      Instead of fixed thresholds, this approach identifies outliers relative to the entire environment's behavior. By establishing a baseline for the number of sensitive files accessed within a time window across all users and processes, we can flag any activity that falls into the extreme upper percentile (e.g., the top 5%). This method is adaptive and can help find suspicious activity without pre-defining what 'too many' is.
    answer_sources: Windows Event ID 4663 from File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories.
    range: last 90 days
    queries:
      - statistical: "SEARCH file_access_events (EID 4663) with sensitive_extensions | AGGREGATE by user, process over 5-min windows | COUNT unique files | BASELINE this count | ALERT if count > 95th_percentile_of_baseline"
  - question: "Can we use clustering algorithms to automatically identify anomalous file access patterns that represent credential hunting?"
    context: |
      Normal user and system file access behavior tends to form predictable patterns or 'clusters'. Malicious activity, such as a script scanning disparate parts of the file system for credentials, will not fit into any normal cluster. This question proposes using a density-based clustering algorithm like DBSCAN to model these normal patterns and flag any activity classified as 'noise' or an anomaly, allowing for detection without prior knowledge of the attack pattern.
    answer_sources: Windows Event ID 4663 from File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories.
    range: last 90 days
    queries:
      - machine_learning: "INPUT file_access_events (EID 4663) as data points with features (user, process, file_extension, directory) | APPLY DBSCAN clustering algorithm | ALERT on data points classified as 'noise'"
  - question: "Has a network-facing service like a web server (w3wp.exe) or SSH daemon (sshd.exe) spawned a command shell that was then used to search for credentials?"
    context: |
      Network services should typically not spawn interactive shells like `cmd.exe` or `powershell.exe`. Such an event is a strong indicator that an attacker has exploited a vulnerability in the service and is attempting to escalate their access. This question focuses on detecting this highly suspicious process chain, correlating the spawning of a shell by a service with subsequent commands that search for credentials.
    answer_sources: Windows Event ID 4688, Windows Event ID 4663, Zeek conn.log from Application Servers, Web Servers, Remote Access Gateways, Domain Controllers.
    range: last 90 days
    queries:
      - symbolic: "SEARCH process_creation_events (EID 4688) | IDENTIFY parent-child pairs | ALERT if parent is (w3wp.exe, httpd.exe, sshd.exe) AND child is (cmd.exe, powershell.exe)"
  - question: "Are we observing rare or never-before-seen process execution chains originating from an anomalous network connection?"
    context: |
      Adversaries often create unusual process parent-child relationships. This question aims to identify these rare chains by building a graph of all historical process relationships and flagging new ones that are statistically improbable. The suspicion level is increased by correlating this rare event with network data, such as a connection from an unusual country or a non-standard port, which could indicate the entry point for the attack.
    answer_sources: Windows Event ID 4688, Windows Event ID 4663, Zeek conn.log from Application Servers, Web Servers, Remote Access Gateways, Domain Controllers.
    range: last 90 days
    queries:
      - statistical: "BUILD graph of historical parent-child process pairs (EID 4688) | CALCULATE rarity of new pairs | CORRELATE with network connection logs (Zeek) | ALERT if process_pair_is_rare AND network_connection_is_anomalous"
  - question: "Can a sequence-aware machine learning model detect the entire attack chain, from initial network connection to file access, as an anomaly?"
    context: |
      Sophisticated attacks consist of a sequence of actions that may appear benign in isolation but are malicious when viewed together. This question proposes using a model like an LSTM-autoencoder, which is specifically designed to learn normal sequences of events. When an attacker's activity creates a sequence that deviates from these learned normal patterns, the model flags it as an anomaly, allowing for the detection of the entire attack chain.
    answer_sources: Windows Event ID 4688, Windows Event ID 4663, Zeek conn.log from Application Servers, Web Servers, Remote Access Gateways, Domain Controllers.
    range: last 90 days
    queries:
      - machine_learning: "TRAIN LSTM-autoencoder on normal event sequences (network -> process -> file_access) | FEED real-time event sequences into model | ALERT if reconstruction_error > threshold"
  - question: "Has a user accessed files or directories that are explicitly forbidden for their role or user group?"
    context: |
      This question implements a form of rule-based access control monitoring. By creating a clear map of which user groups are allowed to access which sensitive file paths, we can generate high-fidelity alerts on any violations. This is a straightforward and effective way to enforce policy and detect when a compromised account is accessing data it shouldn't, such as a marketing user trying to read a developer's private SSH key.
    answer_sources: Windows Event ID 4663, Windows Event ID 4624, Active Directory security logs from User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem).
    range: last 90 days
    queries:
      - symbolic: "MAINTAIN access_control_map (user_group -> allowed_paths) | SEARCH file_access_events (EID 4663) | JOIN user with user_group | ALERT if accessed_path violates access_control_map"
  - question: "Is a user's file access behavior during their current session a significant departure from their own historical activity?"
    context: |
      Users tend to have consistent patterns of behavior. This question aims to create a historical profile of 'normal' file access for each user. When a user logs in, we can then compare their activity in that session to their long-term profile. A significant deviation, measured by a metric like the Jaccard similarity score, suggests that the user's account may be compromised and used for abnormal purposes like credential hunting.
    answer_sources: Windows Event ID 4663, Windows Event ID 4624, Active Directory security logs from User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem).
    range: last 90 days
    queries:
      - statistical: "CREATE historical_profile of file access per user (EID 4663) | FOR each new logon session (EID 4624) | CALCULATE Jaccard similarity between session_files and historical_profile | ALERT if similarity_score < 0.2"
  - question: "Is a user's file access behavior anomalous when compared to the automatically defined behavior of their peer group?"
    context: |
      This question proposes using machine learning to automatically cluster users into 'peer groups' based on their attributes and actual behavior. Once these groups are established, we can monitor each user's activity in real-time and flag them if they deviate significantly from the norm of their peers. This is a powerful way to spot a compromised account, such as an accountant who suddenly starts accessing developer tools.
    answer_sources: Windows Event ID 4663, Windows Event ID 4624, Active Directory security logs from User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem).
    range: last 90 days
    queries:
      - machine_learning: "CLUSTER users into peer_groups using K-Means on AD attributes and historical file access | CALCULATE cluster centroids | FOR each user's real-time activity | CALCULATE distance from their group's centroid | ALERT if distance is outlier"