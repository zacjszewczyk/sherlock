name: T1552.001: Credentials In Files
id: 0c8d19e4-7d5a-4b9e-9b0d-3f1a2b7c6d5e
description: This playbook helps determine if an adversary has accessed credentials stored in files on the enterprise network. It provides investigative questions to detect this activity through various means, including identifying the execution of known credential harvesting tools by hash, analyzing command lines for file-searching utilities combined with credential-related keywords, detecting anomalous high-volume access to sensitive file types, tracing suspicious process lineages originating from network services, and identifying user account behavior that deviates significantly from individual or peer group baselines for file access.
type: technique
related:
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known credential harvesting tool, identified by its file hash, been executed?
  context: Adversaries frequently use off-the-shelf tools like LaZagne, Mimikatz, or modules from PowerSploit to automate credential extraction. This question aims to detect the execution of these tools by matching the process file hash against a curated list of known malicious hashes. A match is a high-confidence indicator of credential access activity.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Workstations, Enterprise Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events (e.g., EventID 4688) | join process_hash with known_credential_harvester_hashes_list | filter for matches
- question: Has a common process, such as PowerShell or cmd.exe, been executed with an unusually complex or obfuscated command line?
  context: To evade simple keyword-based detections, attackers often obfuscate or pack the commands they use for credential harvesting. This results in command lines with high entropy (randomness). This question establishes a baseline of normal command-line entropy for common processes and flags executions that are statistical outliers, which may indicate malicious, obfuscated activity.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Workstations, Enterprise Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events (e.g., EventID 4688) | for_each process_name, calculate_historical_command_line_entropy_baseline (99th percentile) | compare new_event_entropy to baseline | alert if new_entropy > baseline
- question: Can process creation events be classified as potential credential harvesting based on a machine learning model?
  context: This question leverages a machine learning model (like a Random Forest) to provide a more nuanced risk assessment of process creation events. By training on features like parent process, command-line characteristics, and token elevation, the model can identify subtle patterns indicative of credential harvesting that might be missed by symbolic or simple statistical methods.
  answer_sources:
  - Windows Event ID 4688
  - Enterprise Workstations, Enterprise Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: pipe process_creation_events (e.g., EventID 4688) to ML_model | features: [process_name, parent_process, cmd_line_length, cmd_line_entropy, token_type] | alert if model_risk_score > threshold
- question: Has a process been executed using file-searching utilities combined with keywords related to credentials?
  context: Adversaries actively search file systems for configuration files, scripts, or text files containing credentials. This question looks for the explicit use of search commands (like `findstr`, `grep`, `Get-Content`) paired with keywords like 'password', 'secret', or 'private_key'. It also checks for direct access to known sensitive files like `web.config` or GPP `groups.xml`.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events (e.g., EventID 4688) | filter command_line contains [findstr, grep, type, Get-Content] AND [password, secret, private_key, id_rsa, cpassword] | OR search file_access_events (e.g., EventID 4663) for target_file in [web.config, credentials.xml, groups.xml]
- question: Has any user or service account executed an anomalously high number of commands searching for credentials?
  context: While a single credential-searching command might be legitimate admin activity, a sudden spike is suspicious. This question establishes a baseline for how often each user runs such commands and alerts when their activity significantly deviates from their own historical norm. It pays special attention to service accounts, for which this behavior is almost always anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events with credential_keywords | for_each user, calculate_daily_baseline_count (30-day moving average and stddev) | alert if today_count > (average + 3 * stddev)
- question: Can command-line arguments be classified as credential-seeking based on their semantic meaning, even if they use novel syntax?
  context: Attackers can evade simple keyword matching by using different phrasing or obfuscation. This question uses a Natural Language Processing (NLP) model to understand the intent behind a command line, rather than just matching keywords. This allows for the detection of novel or cleverly disguised credential-searching commands.
  answer_sources:
  - Windows Event ID 4688
  - Web Servers, Database Servers, File Shares, Developer Workstations, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: pipe process_creation_events' command_line to NLP_model | model classifies command_intent | alert if intent == 'credential_search' and score > threshold
- question: Has a single process or user accessed an unusually high number of distinct, sensitive files across multiple directories in a short time?
  context: A key indicator of credential hunting is a "smash and grab" operation where an attacker's script rapidly opens many different configuration or key files. This question uses a stateful rule to detect this specific pattern: a single process reading many unique sensitive files (e.g., .config, .pem, .key) from multiple locations within a very short timeframe (e.g., one minute).
  answer_sources:
  - Windows Event ID 4663
  - File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search file_read_events (e.g., EventID 4663) | filter file_extension in [sensitive_extensions_list] | group by process_id, time_window (1 minute) | alert if unique_file_count > 20 AND unique_directory_count > 3
- question: Is there a statistical anomaly in the number of sensitive files being accessed by any user or process?
  context: This question provides a broader statistical view of the behavior described in the previous question. It establishes a network-wide baseline for the normal rate of sensitive file access within a 5-minute window. It then alerts on any user or process that significantly exceeds this 95th percentile baseline, indicating a potential burst of suspicious file access activity.
  answer_sources:
  - Windows Event ID 4663
  - File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search file_read_events (e.g., EventID 4663) | aggregate by user, process over 5-min windows, counting unique sensitive files | calculate 95th_percentile_baseline for this count | alert if any window_count > baseline
- question: Can anomalous file access patterns be identified using density-based clustering?
  context: Normal file access by users and applications tends to form predictable, dense clusters of activity. This question applies a clustering algorithm like DBSCAN to file access events. The algorithm identifies these normal clusters, and any activity that falls outside of them is flagged as "noise" or an anomaly, which could represent an adversary's credential hunting.
  answer_sources:
  - Windows Event ID 4663
  - File Shares, Code Repositories (on-prem), Web Server Directories, Domain Controllers (SYSVOL), User Profile Directories
  range: last 90 days
  queries:
  - technology: pseudocode
    query: pipe file_access_events (e.g., EventID 4663) to DBSCAN_model | features: [user, process_name, file_extension, directory] | alert on events classified as noise/outliers
- question: Has a network service process (like a web server) spawned a shell that then executed credential-searching commands?
  context: It is highly unusual for a network service process (e.g., w3wp.exe for IIS, sshd.exe for SSH) to spawn an interactive shell like cmd.exe or powershell.exe. This behavior is a classic sign of post-exploitation, where an attacker uses a vulnerability in the service to get a shell on the system. This question specifically looks for this suspicious process lineage followed by commands searching for credentials.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Zeek conn.log
  - Application Servers, Web Servers, Remote Access Gateways, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search process_creation_events (e.g., EventID 4688) | identify parent_process in [w3wp.exe, httpd.exe, sshd.exe] AND child_process in [cmd.exe, powershell.exe, bash.exe] | check if child_process command_line contains credential_keywords
- question: Has a rare or improbable process execution chain, originating from an anomalous network connection, been observed?
  context: This question builds a graph of all normal parent-child process relationships to identify statistically rare chains (e.g., svchost.exe spawning powershell.exe). It then correlates this rare process activity with network connection data. An alert is triggered if a rare process chain is initiated by a network connection that is also anomalous (e.g., coming from a rare country or using a non-standard port), increasing the confidence of the finding.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Application Servers, Web Servers, Remote Access Gateways, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: build graph of historical parent->child process pairs from EventID 4688 | identify rare pairs in new events | correlate with network_connection_logs (e.g., Zeek) by process_id and timestamp | alert if rare_process_chain follows anomalous_network_connection
- question: Can a sequence of network, process, and file events be identified as anomalous using a sequence-based machine learning model?
  context: This question models the entire attack chain as a sequence of events: a network connection leads to a process being created, which spawns a child process, which then accesses files. A sequence model like an LSTM autoencoder is trained on millions of benign sequences. When a new sequence of events occurs, the model tries to reconstruct it. A high reconstruction error means the sequence is unlike anything seen before and is therefore anomalous and potentially malicious.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Zeek conn.log
  - Application Servers, Web Servers, Remote Access Gateways, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: create event_sequences: [network_conn -> parent_process -> child_process -> file_access] | feed sequences into trained LSTM_autoencoder_model | alert if reconstruction_error > threshold
- question: Has a user accessed credential-related files that violate a pre-defined access control policy for their user group?
  context: This is a straightforward policy enforcement question. It relies on a pre-built map of which user groups (e.g., 'Developers', 'Marketing') are allowed to access which types of sensitive files or directories. It generates an alert when a file access event is observed that violates this explicit policy, such as an HR user accessing a developer's private key file.
  answer_sources:
  - Windows Event ID 4663
  - Active Directory security logs
  - User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search file_access_events (e.g., EventID 4663) | get user_group from Active_Directory | join with access_control_policy_map | alert if access violates policy
- question: Has a user, during a single logon session, accessed a set of files that is significantly different from their own historical file access patterns?
  context: Users typically have consistent patterns of file access related to their job function. This question establishes a historical baseline profile of the types of files and directories each user normally accesses. For each new logon session, it compares the files accessed during that session to the user's historical profile. A low similarity score indicates a significant deviation in behavior, which could mean the user's account has been compromised and is being used to explore the network.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4624
  - User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: for_each user, create historical_profile of accessed_file_types and directories | for_each new logon_session, collect accessed_files | calculate Jaccard_similarity(session_files, historical_profile) | alert if similarity_score < 0.2
- question: Is a user's file access behavior a statistical outlier compared to the normal behavior of their automatically-defined peer group?
  context: This question refines user behavior analytics by first automatically grouping users into peer groups based on their roles and historical activity. Instead of just comparing a user to their own past, it compares them to the collective behavior of their peers. This is powerful for detecting compromised accounts, as an attacker's actions will likely differ significantly from the established norm for that peer group.
  answer_sources:
  - Windows Event ID 4663
  - Active Directory security logs
  - User Workstations, File Shares, Domain Controllers, Code Repositories (on-prem)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: use K-Means to cluster users into peer_groups based on AD attributes and historical file_access | for_each peer_group, calculate behavioral_centroid | compare real-time user_file_access to their group's centroid | alert if Mahalanobis_distance > threshold