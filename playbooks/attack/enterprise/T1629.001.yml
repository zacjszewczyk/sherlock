name: 'T1629.001: Prevent Application Removal'
id: 'a7e6c3f0-4d5b-4c2a-8d1e-9f0a1b3c4d5e'
description: "This playbook focuses on detecting adversarial attempts to prevent the removal of malicious applications on managed mobile devices. It identifies techniques such as abusing 'Device Administrator' or 'Accessibility Service' permissions for non-standard applications, using package names with high entropy or typosquatting to evade detection, programmatically interrupting the uninstallation process, and initiating suspicious network activity like C2 beaconing or connecting to newly registered domains immediately following a high-risk permission grant."
type: 'technique'
related:
- 'TA0030: Defense Evasion'
contributors: 'Zachary Szewczyk, Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
- question: "Has a mobile application not on the corporate allow-list been granted 'Device Administrator' or 'Accessibility Service' permissions?"
  context: "Adversaries often abuse high-privilege permissions like 'Device Administrator' or 'Accessibility Service' to make their malicious applications difficult to remove. This question aims to identify unauthorized applications that have been granted these permissions, which is a strong indicator of a potential compromise. Answering this helps security teams quickly spot and investigate potentially malicious software that is attempting to establish persistence and evade removal."
  answer_sources:
  - 'MDM/EMM application inventory logs'
  - 'MDM/EMM permission audit logs'
  - 'MDM/EMM Management Server'
  - 'Managed Mobile Device Fleet'
  - 'Centralized Log Aggregator (SIEM)'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      SEARCH MDM/EMM permission logs for 'Device Administrator' OR 'Accessibility Service' grant events.
      FOR each event, EXTRACT application_package_name.
      IF application_package_name NOT IN corporate_allow_list,
        ALERT high_severity.
- question: "Has an application with high-risk permissions been identified with a package name that is either unusually random (high entropy) or a close imitation of a legitimate application (typosquatting)?"
  context: "Malicious actors often use two main strategies for naming their apps to avoid detection. They either use randomly generated package names, which result in high Shannon entropy, or they use names that are very similar to legitimate, trusted applications (e.g., 'com.microsft.office' instead of 'com.microsoft.office'), a technique known as typosquatting. This question helps detect these naming anomalies for applications that have already been granted dangerous permissions, indicating a likely attempt to deceive users and security tools."
  answer_sources:
  - 'MDM/EMM application inventory logs'
  - 'MDM/EMM permission audit logs'
  - 'MDM/EMM Management Server'
  - 'Managed Mobile Device Fleet'
  - 'Centralized Log Aggregator (SIEM)'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      FOR each app with high-risk permissions:
        CALCULATE shannon_entropy(package_name).
        IF shannon_entropy > allow_list_95th_percentile_entropy, ALERT.
        FOR each high_value_app_name:
          CALCULATE levenshtein_distance(package_name, high_value_app_name).
          IF distance <= 2, ALERT.
- question: "Does a machine learning model classify a newly permissioned application as malicious based on its metadata?"
  context: "This question leverages a machine learning model to provide a probabilistic assessment of an application's maliciousness. By analyzing multiple features at once (package name entropy, permissions, etc.), the model can identify complex patterns that are indicative of malware but might be missed by simple rule-based checks. This provides a more sophisticated, automated layer of detection that can trigger immediate response actions, like device quarantine, when a high probability of maliciousness is detected."
  answer_sources:
  - 'MDM/EMM application inventory logs'
  - 'MDM/EMM permission audit logs'
  - 'MDM/EMM Management Server'
  - 'Managed Mobile Device Fleet'
  - 'Centralized Log Aggregator (SIEM)'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      ON new high-risk permission grant:
        EXTRACT app metadata (entropy, permissions, Levenshtein scores, etc.).
        INPUT metadata into pre-trained classification model.
        GET malicious_probability_score.
        IF malicious_probability_score > 0.90,
          ALERT critical_severity.
          TRIGGER device_quarantine_API.
- question: "Has a non-system application programmatically triggered a 'back' or 'home' action immediately after a user attempted to navigate to the application uninstall screen?"
  context: "A common technique used by mobile malware to prevent its own removal is to intercept the user's attempt to uninstall it. When the user navigates to the app settings or uninstall screen, the malicious app uses accessibility services to programmatically press the 'back' or 'home' button, returning the user to the previous screen or home screen. This question seeks to identify this specific sequence of events, which is a very strong indicator of an active defense evasion mechanism."
  answer_sources:
  - 'Mobile Threat Defense (MTD) API call logs'
  - 'Endpoint Detection and Response (EDR) for Mobile logs'
  - 'Managed Mobile Device Fleet'
  - 'Mobile Threat Defense (MTD) Console'
  - 'SIEM'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      CORRELATE events on same device_id:
        EVENT_A: navigation to 'app_uninstall_screen'
        followed within 2 seconds by
        EVENT_B: API call 'performGlobalAction' (BACK or HOME) from non-system_app.
        IF found, ALERT critical_severity.
- question: "Is any application making an anomalously high number of 'performGlobalAction' API calls compared to its own historical baseline?"
  context: "While the 'performGlobalAction' API call can be used for legitimate purposes, a sudden and significant spike in its usage by a single application is suspicious. This question aims to detect such anomalies by comparing an app's current activity against its own normal behavior. A deviation of more than three standard deviations from the mean suggests the app may be using this function for an unintended purpose, such as repeatedly preventing uninstallation, warranting further investigation."
  answer_sources:
  - 'Mobile Threat Defense (MTD) API call logs'
  - 'Endpoint Detection and Response (EDR) for Mobile logs'
  - 'Managed Mobile Device Fleet'
  - 'Mobile Threat Defense (MTD) Console'
  - 'SIEM'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      FOR each app on each device:
        CALCULATE 14-day rolling baseline of hourly 'performGlobalAction' call frequency.
        IF current_hour_frequency > (baseline_mean + 3 * baseline_std_dev),
          ALERT medium_severity.
- question: "Has a machine learning model detected an anomalous sequence of user interface interactions involving an attempt to uninstall an app followed by an unexpected 'back' or 'home' event?"
  context: "This question applies machine learning to understand the normal flow of user actions on a device. By training a model on vast amounts of benign UI interaction sequences, it can effectively identify and flag sequences that are highly improbable. This is particularly useful for detecting novel malware techniques that might use subtle variations of the uninstall-blocking behavior, which could be missed by static correlation rules."
  answer_sources:
  - 'Mobile Threat Defense (MTD) API call logs'
  - 'Endpoint Detection and Response (EDR) for Mobile logs'
  - 'Managed Mobile Device Fleet'
  - 'Mobile Threat Defense (MTD) Console'
  - 'SIEM'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      STREAM real-time UI events from each device into sequence-to-sequence anomaly detection model.
        MODEL identifies event sequences with high anomaly scores.
        IF anomalous sequence contains ('app_settings' OR 'uninstall') followed by ('GLOBAL_ACTION_BACK' OR 'GLOBAL_ACTION_HOME'),
          ALERT.
- question: "Following a high-risk permission grant, did the associated mobile device connect to a known malicious domain or a newly registered domain?"
  context: "After a malicious application gains elevated privileges, its next step is often to communicate with a command-and-control (C2) server. Adversaries frequently use newly registered domains (NRDs) for their C2 infrastructure to evade reputation-based blocklists. This question correlates a high-risk on-device event (permission grant) with suspicious network behavior (connecting to a known-bad or newly registered domain) to identify likely C2 communication and confirm a compromise."
  answer_sources:
  - 'Zeek conn.log'
  - 'Zeek dns.log'
  - 'Zeek ssl.log'
  - 'MDM/EMM permission audit logs'
  - 'Network Gateway Firewalls'
  - 'Internal DNS Servers'
  - 'Network Security Monitoring (NSM) Sensor Grid at egress points'
  - 'MDM/EMM Management Server'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      ON MDM alert for 'high-risk permission grant':
        GET device_ip.
        QUERY network logs for connections from device_ip in the next 60 minutes.
        FOR each destination_domain:
          CHECK against threat intelligence feeds.
          CHECK domain registration date via WHOIS.
          IF domain is known-bad OR registered_date < 30 days ago,
            ALERT high_severity.
- question: "Is a device that recently received high-risk permissions exhibiting network beaconing behavior or using rare TLS fingerprints (JA3/JA3S)?"
  context: "Malware often uses 'beaconing' to maintain a persistent connection to its C2 server, characterized by regular, periodic connections with a consistent data size. This question aims to detect this pattern. Additionally, analyzing JA3/JA3S TLS fingerprints can identify malicious clients, as malware often uses specific libraries that result in unique fingerprints not commonly seen in the organization."
  answer_sources:
  - 'Zeek conn.log'
  - 'Zeek dns.log'
  - 'Zeek ssl.log'
  - 'MDM/EMM permission audit logs'
  - 'Network Gateway Firewalls'
  - 'Internal DNS Servers'
  - 'Network Security Monitoring (NSM) Sensor Grid at egress points'
  - 'MDM/EMM Management Server'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      FOR traffic from device post-high-risk-permission:
        ANALYZE connections to single destination IP.
        CALCULATE std_dev(time_between_connections) and std_dev(connection_size).
        IF both values are near zero, ALERT for beaconing.
        ANALYZE JA3/JA3S hashes from TLS connections.
        IF hash_prevalence < 1% across organization, ALERT.
- question: "Has a machine learning model detected a significant anomaly in a device's network traffic profile immediately following a high-risk permission grant?"
  context: "This question uses an unsupervised machine learning model (an LSTM autoencoder) to learn the normal 'rhythm' of a device's network activity. After a high-risk permission grant, any subsequent network behavior that drastically deviates from this learned normal profile will cause a high reconstruction error in the model. This is a powerful way to detect C2 communication or data exfiltration that doesn't fit a predefined rule but is clearly abnormal for that specific device."
  answer_sources:
  - 'Zeek conn.log'
  - 'Zeek dns.log'
  - 'Zeek ssl.log'
  - 'MDM/EMM permission audit logs'
  - 'Network Gateway Firewalls'
  - 'Internal DNS Servers'
  - 'Network Security Monitoring (NSM) Sensor Grid at egress points'
  - 'MDM/EMM Management Server'
  range: 'Last 90 days'
  queries:
  - tech: 'pseudocode'
    query: |
      STREAM device network telemetry into LSTM autoencoder model.
      ON high-risk permission grant event for a device:
        MONITOR model's reconstruction error for that device's traffic.
        IF reconstruction_error > 99th_percentile_of_historical_errors,
          ALERT high_severity.