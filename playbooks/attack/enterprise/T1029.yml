name: T1029: Scheduled Transfer
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is exfiltrating data using scheduled transfers. This technique is identified by looking for network traffic with highly regular, repeating time intervals, often to suspicious destinations. It also involves detecting the creation of scheduled tasks on endpoints with commands related to data staging and transfer, or identifying processes that access many files before initiating periodic network connections. Anomalous data volumes, especially over covert channels like DNS or during non-business hours, are also key indicators.
type: technique
related:
- TA0010: Exfiltration
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there recurring network connections from internal hosts to known malicious destinations, indicating a scheduled transfer?
  context: This question aims to identify classic command-and-control (C2) beaconing. Adversaries often configure malware to 'call home' on a fixed schedule. By correlating network logs with threat intelligence and looking for repeating time intervals between connections, analysts can uncover these automated communication channels used for data exfiltration or receiving further commands.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      logs = join(dns_logs, conn_logs)
      malicious_conns = filter logs where conn_dest_ip in threat_intel_feed OR conn_dest_domain in threat_intel_feed
      grouped_conns = group malicious_conns by source_ip, dest_ip
      for each group:
        calculate time_deltas between connections
        if time_deltas are regular:
          alert("Potential scheduled beaconing to known malicious destination")
- question: Can we detect highly regular, beacon-like network traffic by analyzing the standard deviation of time between connections for any given source-destination pair, especially outside business hours?
  context: This question uses a statistical approach to find automated traffic without relying on threat intelligence. Machine-generated traffic often has very low "jitter," meaning the time between connections is almost exactly the same every time. A standard deviation close to zero is a strong mathematical indicator of this machine-like regularity, which is highly uncharacteristic of human behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      connections = conn_logs from last 24 hours
      grouped_conns = group connections by source_ip, dest_ip
      for each group:
        time_deltas = calculate time differences between consecutive connections
        stdev_delta = calculate standard_deviation(time_deltas)
        if stdev_delta is near zero AND connection_time is outside business hours:
          alert("Potential beaconing detected due to low time delta variance")
- question: Can time series clustering algorithms identify previously unknown periodic network traffic patterns that may represent scheduled data exfiltration?
  context: This question applies machine learning to discover novel threats. While symbolic and statistical methods look for known patterns, clustering can group network traffic based on its temporal "shape." This allows analysts to find new or unknown C2 channels that exhibit regular beaconing behavior but do not communicate with destinations on any existing threat intelligence feed.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network Egress Points (e.g., Firewalls, Proxies)
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      for each host:
        connection_timeseries = get connection timestamps from conn_logs
        clusters = apply K-Shape clustering to connection_timeseries
        for each cluster:
          if intra-cluster variance is low AND destination_reputation is low:
            alert("Potential scheduled exfiltration identified by ML clustering")
- question: Has a new or modified scheduled task been created containing commands or tools commonly used for data staging, compression, or exfiltration?
  context: Adversaries frequently use built-in system utilities like the Windows Task Scheduler to persist their presence and automate malicious actions. This question focuses on detecting the setup of this mechanism by looking for the direct evidence: a scheduled task that calls tools like `rclone`, `curl`, `tar`, or suspicious PowerShell cmdlets used to package and send data.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers (for GPO-based tasks)
  - Critical Application Servers
  - User Workstations
  - File Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      suspicious_keywords = ["rclone", "curl", "wget", "bitsadmin", "tar", "zip", "7z", "Invoke-WebRequest"]
      task_events = monitor for Event ID 4698, 4702
      for each event:
        if task_command contains any suspicious_keywords:
          alert("Suspicious scheduled task created with exfiltration-related tools")
- question: Are there newly created scheduled tasks with high-entropy command-line arguments, suggesting the use of obfuscation or encoding?
  context: To evade simple keyword-based detection, adversaries often encode or obfuscate the commands they schedule. High Shannon entropy is a mathematical measure of randomness that can effectively identify such obfuscated strings (e.g., PowerShell Base64-encoded commands). This question helps find malicious tasks that would otherwise appear benign.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers (for GPO-based tasks)
  - Critical Application Servers
  - User Workstations
  - File Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      task_events = monitor for Event ID 4698
      for each event:
        entropy = calculate_shannon_entropy(event.command_line_arguments)
        if entropy > 6.0:
          alert("High entropy scheduled task command detected, potential obfuscation")
- question: Can a machine learning model be used to assign a 'suspicion score' to newly created scheduled tasks based on their command-line features?
  context: This question proposes a more sophisticated, holistic approach to detecting malicious scheduled tasks. Instead of relying on a single indicator like a keyword or entropy, a machine learning model can be trained to analyze dozens of features simultaneously (command length, character types, argument structure, etc.) to produce a more reliable 'suspicion score', catching threats that evade simpler rule-based systems.
  answer_sources:
  - Windows Event ID 4698
  - Windows Event ID 4702
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4104
  - Domain Controllers (for GPO-based tasks)
  - Critical Application Servers
  - User Workstations
  - File Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      task_events = monitor for Event ID 4698
      model = load_pretrained_random_forest_classifier()
      for each event:
        features = extract_features(event.command_line)
        suspicion_score = model.predict(features)
        if suspicion_score > threshold:
          alert("ML model flagged new scheduled task as suspicious")
- question: Are sensitive internal assets making recurring outbound connections during non-business hours to destinations not on an approved allowlist?
  context: This question helps focus investigative efforts by applying business and organizational context. Connections from high-value assets (like financial servers or domain controllers) are inherently riskier. When these connections occur at odd hours (like 3 AM) to destinations that are not part of a known, approved service, it creates a high-confidence alert worthy of immediate investigation.
  answer_sources:
  - Zeek conn.log
  - Asset Inventory Database
  - Network Egress Points
  - VPN Concentrators
  - High-Value Asset Subnets
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      sensitive_hosts = get hosts from asset_inventory
      connections = filter conn_logs where source_ip in sensitive_hosts AND time is non-business hours
      for each connection:
        if destination_ip not in allowlist:
          alert("Sensitive asset connecting to non-allowlisted destination off-hours")
- question: Are there internal hosts exhibiting periodic outbound connections where the amount of data transferred is a statistical outlier compared to that host's normal behavior for that destination?
  context: This question combines two powerful indicators: periodicity and volume. A recurring connection might be a benign software update check. However, if that recurring connection suddenly starts transferring an unusually large amount of data (e.g., 500 MB instead of 5 KB), it strongly suggests that the channel's purpose has changed to data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Asset Inventory Database
  - Network Egress Points
  - VPN Concentrators
  - High-Value Asset Subnets
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      for each host/destination pair:
        baseline = calculate baseline of data_transfer_size (orig_bytes)
        find periodic connections using time delta analysis
        for each periodic connection:
          if connection_size > 95th percentile of baseline:
            alert("Periodic connection with anomalous data volume detected")
- question: Can a time series forecasting model predict future connection times, thereby confirming the automated, scheduled nature of a suspicious network activity?
  context: This is a sophisticated confirmation technique. If an analyst suspects a connection is part of a scheduled task, they can use a forecasting model (like ARIMA) to predict the exact time of the next connection. If the connection occurs precisely when the model predicted, it provides extremely strong evidence that the traffic is automated and not user-driven, justifying a more in-depth investigation.
  answer_sources:
  - Zeek conn.log
  - Asset Inventory Database
  - Network Egress Points
  - VPN Concentrators
  - High-Value Asset Subnets
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      for each suspicious source/destination pair:
        model = train forecasting model (e.g., Prophet) on historical connection timestamps
        next_predicted_time = model.predict_next()
        monitor for actual connection at next_predicted_time
        if connection occurs as predicted:
          alert("High-confidence scheduled activity confirmed by forecasting model")
- question: Are there periodic data transfers occurring over covert or suspicious channels, such as DNS, or encrypted with self-signed certificates or associated with known malicious TLS fingerprints?
  context: Adversaries often abuse legitimate protocols to hide their exfiltration traffic. This question seeks to uncover this by looking for anomalies in those protocols. This includes large data transfers over DNS (which is meant for small lookups), encrypted traffic using self-signed certificates (a common shortcut for malware), or TLS sessions whose fingerprints (JA3/JA3S) match known malicious tools.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      monitor ssl.log for validation_status = "self-signed certificate"
      monitor dns.log for high volume of TXT/AAAA queries
      correlate findings with conn.log to check for large, periodic transfers
      if periodicity found:
        alert("Potential exfiltration over covert/suspicious channel")
- question: Do any hosts exhibit a recurring, daily or weekly spike in data transferred over unusual exfiltration protocols like DNS or ICMP?
  context: This question looks at activity from a higher level, aggregating data over a 24-hour period. While a single DNS query is small, thousands of them used for data tunneling can add up. By profiling the total daily data volume per protocol for each host, we can spot a host that, for example, sends 100MB of DNS traffic every Tuesday at 2 AM, which is a clear, recurring anomaly.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      for each host:
        profile daily data volume per protocol (DNS, ICMP)
        threshold = 99th percentile of daily volume
        flag days where volume > threshold
        if flagged days occur at a regular interval (e.g., weekly):
          alert("Recurring daily/weekly spike in covert channel data volume")
- question: Can an anomaly detection model identify network connections that are abnormal based on a combination of features like port, protocol, data volume, and time of day, which may then be analyzed for periodicity?
  context: This machine learning approach helps find "unknown unknowns." An Isolation Forest model can learn the characteristics of normal network traffic in a given environment across many dimensions at once. It can then flag connections that are statistical outliers without being told what to look for. These highly anomalous connections become high-quality candidates for a follow-up periodicity analysis.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Network Egress Points
  - DNS Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      model = train Isolation Forest on connection features (port, proto, bytes, hour, etc.)
      score all new connections with the model
      flag connections with high anomaly scores
      analyze flagged connections for recurring time intervals
      if periodicity is found:
        alert("ML model detected recurring anomalous connection")
- question: Has an unsigned process, running from a non-standard location, accessed numerous sensitive files and then initiated an external network connection within a short time frame?
  context: This question reconstructs a common attack chain on an endpoint. It links the initial execution of a suspicious program (unsigned and in a temp folder), to the data collection phase (accessing many .docx files), to the final exfiltration step (making a network connection). Correlating these disparate events into a single narrative provides strong evidence of malicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Zeek conn.log
  - File Servers
  - User Workstations with access to sensitive data
  - Code Repositories
  - Endpoint devices of privileged users
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      process_events = monitor Sysmon EID 1 where Signed=false and path is non-standard
      for each process_event:
        within 5 minutes, look for high volume of File Access (EID 4663) from same ProcessGuid
        within 5 minutes, look for Network Connection (EID 3) from same ProcessGuid
        if all three occur:
          alert("Suspicious process chain detected: Unsigned Process -> File Access -> Network Conn")
- question: Can we detect abnormal 'file access bursts' from unsigned or non-standard processes, and do these bursts correlate with the start of periodic network beaconing from the same host?
  context: This question focuses on statistically quantifying the data staging phase of an attack. By baselining normal file access behavior for a host, we can detect a process that is suddenly accessing hundreds of files in a minute—a "file access burst." If this anomalous burst is immediately followed by the start of a new, periodic network beacon, it strongly suggests the staged data is being exfiltrated.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Zeek conn.log
  - File Servers
  - User Workstations with access to sensitive data
  - Code Repositories
  - Endpoint devices of privileged users
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      for each process:
        count unique file accesses per minute
        if access count is > 3 standard deviations above host mean AND process is unsigned:
          alert("File access burst from non-standard process detected")
          correlate with subsequent periodic network connections from the same host
- question: Can a sequence analysis model be trained to recognize the specific event sequence of [Unsigned Process -> High-Volume File Access -> Periodic Network Connection] as a high-confidence indicator of malicious activity?
  context: This is an advanced technique where the order of events is as important as the events themselves. A Hidden Markov Model (HMM) or other sequence analysis model can be trained to recognize this specific attack pattern. It can differentiate between random, unrelated events and a logical, ordered sequence that matches the adversary's playbook, resulting in very high-fidelity alerts.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4663
  - Zeek conn.log
  - File Servers
  - User Workstations with access to sensitive data
  - Code Repositories
  - Endpoint devices of privileged users
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      model = load trained sequence analysis model (HMM)
      feed real-time event stream (Sysmon, Zeek) to model
      if model identifies a match for the malicious sequence [Unsigned Proc -> File Grab -> Beacon]:
        alert("High-confidence malicious sequence detected by ML model")