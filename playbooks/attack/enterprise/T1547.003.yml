name: T1547.003: Time Providers
id: 5b1d9c7a-9f0e-4b2a-8c3d-6e4f7a1b0c9d
description: This playbook focuses on detecting adversaries who abuse the Windows Time service for persistence and privilege escalation. Adversaries may register a malicious DLL as a Time Provider, which causes the W32Time service, running as NT AUTHORITY\SYSTEM, to load and execute their code. This playbook helps investigate this technique by looking for the registration of known malicious or anomalous DLLs, suspicious usage of the `w32tm.exe` utility, anomalous network traffic from the W32Time service that could indicate C2 activity, and registry modifications made from user-writable locations or by unauthorized user accounts.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known malicious DLL being registered as a Windows Time Provider?
  context: Adversaries can achieve persistence by registering a malicious DLL to be loaded by the W32Time service, which runs with SYSTEM privileges. This question aims to detect this activity by cross-referencing the hash of any newly registered Time Provider DLL against a threat intelligence feed of known malicious file hashes. A match is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (registry_events) where (target_object contains 'W32Time\TimeProviders' and value_name is 'DllName') ->
      extract (file_path) ->
      join with (file_creation_events) on (file_path) ->
      extract (file_hash) ->
      lookup (file_hash) in (threat_intelligence_feed) ->
      alert on match
- question: Is an unusually rare or suspiciously located DLL registered as a Windows Time Provider across the environment?
  context: Legitimate Time Provider DLLs are standard system files present on most systems in predictable locations. An adversary's custom DLL will likely be statistically rare across the environment. This question uses baselining and anomaly detection to identify Time Provider DLLs that have very low prevalence or are located in unusual paths (e.g., temp directories), which may indicate a malicious implant that isn't yet known to threat intelligence.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (all_endpoints) for (registry_key 'W32Time\TimeProviders\*\DllName') ->
      aggregate (dll_paths) ->
      calculate (prevalence and path_entropy) for each path ->
      alert on (prevalence < 0.5% or high entropy)
- question: Does a new Time Provider registration exhibit characteristics of known malicious registrations based on a machine learning model?
  context: This question moves beyond simple hash or path checks to a more sophisticated behavioral detection. By training a machine learning model on features from both the DLL file (e.g., PE header, imports, signature) and the registry event itself (e.g., parent process, user context), this approach can score new registrations for their likelihood of being malicious, catching novel threats that evade simpler rules.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      on (new_registry_event for 'W32Time\TimeProviders\*\DllName') ->
      extract (file_features, event_features) ->
      feed (features) into (trained_classification_model) ->
      alert if (malicious_probability > threshold)
- question: Has the 'w32tm.exe' command been used to register or configure a time provider, followed immediately by a W32Time service restart?
  context: To activate a newly registered malicious Time Provider, an adversary must use the `w32tm.exe` utility to register it and then restart the W32Time service. This specific sequence of events—a `w32tm.exe` execution with `/register` or `/config` followed by a service restart event for `W32Time`—is a high-fidelity indicator of this technique being performed.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (process_creation) where (process is 'w32tm.exe' and command_line contains '/register' or '/config') ->
      correlate on (hostname) with (service_events) within (5 minutes) where (service is 'w32time' and state is 'running') ->
      alert on match
- question: Is 'w32tm.exe' being executed by an unusual parent process?
  context: Legitimate use of `w32tm.exe` for configuration is typically performed by an administrator from an interactive command prompt (`cmd.exe`) or by the system (`services.exe`). If `w32tm.exe` is spawned by an unexpected parent process like `winword.exe` or `powershell.exe` (especially with an encoded command), it strongly suggests it is being run by an adversary's script or payload rather than for legitimate administrative purposes.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (process_creation) where (process is 'w32tm.exe') ->
      aggregate (parent_process) over (30 days) ->
      calculate (frequency) ->
      alert if (current_parent_process_frequency is in bottom 5%)
- question: Does the sequence of events leading to a W32Time service modification deviate from established normal administrative behavior?
  context: This question uses advanced modeling to understand the entire chain of events, not just a single action. A machine learning model can be trained to recognize normal administrative sequences. An anomalous sequence, such as a PowerShell script downloading a file, which then spawns `w32tm.exe`, followed by a service restart, would be flagged by the model as a low-probability event indicative of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers, Member Servers, Critical Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      stream (system_events) into (sequence_model) ->
      alert if (model flags event_sequence containing 'w32tm.exe' and 'w32time' service change as low_probability)
- question: Is the W32Time service (hosted in svchost.exe) communicating over a non-standard protocol or port, or to an unauthorized NTP server?
  context: The legitimate Windows Time service communicates exclusively over UDP port 123 with designated Network Time Protocol (NTP) servers. A malicious DLL loaded into the `W32Time` service's `svchost.exe` process might use that process for command and control (C2). This would manifest as network traffic on non-standard ports (e.g., TCP/443) or to destination IPs not on the organization's approved NTP server list.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points, Internet Gateway, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (network_events) where (process is 'svchost.exe' and associated_service is 'W32Time') ->
      alert if (protocol is not 'udp' or destination_port is not 123 or destination_ip not in ntp_allowlist)
- question: Is the W32Time service exhibiting anomalous network traffic patterns, such as unusually large data transfers or connections to rare destinations?
  context: Even if an adversary attempts to hide C2 traffic by using UDP port 123, the behavior of the traffic may still be anomalous. This question looks for statistical deviations from a baseline of normal NTP traffic. Unusually large data transfers, long connection durations, or connections to geographically rare locations can indicate that the W32Time service process has been compromised and is being used for C2.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points, Internet Gateway, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      for each (host) -> baseline (network_traffic_features for W32Time service) over (30 days) ->
      on (new_connection) ->
      alert if (bytes_transferred > 3_std_deviations_from_mean)
- question: Does a network connection from the W32Time service appear anomalous when analyzed by an autoencoder model trained on legitimate traffic?
  context: This question applies a machine learning approach to network traffic analysis. An autoencoder is trained on the feature vectors (e.g., duration, bytes, port) of legitimate W32Time network connections. When new, potentially malicious traffic is fed into the model, it will fail to reconstruct it accurately, resulting in a high "reconstruction error." This error is a strong signal of an anomaly, such as C2 traffic.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points, Internet Gateway, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      stream (W32Time_network_connections) into (trained_autoencoder) ->
      calculate (reconstruction_error) ->
      alert if (error > threshold)
- question: Has a Time Provider DLL been registered from a non-standard or user-writable directory?
  context: Legitimate Time Provider DLLs are located in protected system directories like `%SystemRoot%\System32`. Adversaries often drop malicious payloads in world-writable directories such as `C:\Users\`, `C:\ProgramData\`, or `C:\Windows\Temp\` for ease of access before escalating privileges. Registering a DLL from one of these locations is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations, Terminal Servers, Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (registry_events) where (target_object contains 'W32Time\TimeProviders' and value_name is 'DllName') ->
      alert if (file_path matches regex '^C:\\(Users|ProgramData|PerfLogs|Windows\\Temp)\\.*')
- question: Is a Time Provider DLL located in a directory that is statistically rare for this purpose across the enterprise?
  context: This question operationalizes the hunt for non-standard DLL paths by baselining all Time Provider DLL locations across the enterprise. Any path that is not the standard `%SystemRoot%\System32` is inherently suspicious. By scoring these paths based on their rarity, analysts can prioritize investigation, distinguishing a potential single compromise from a misconfigured but widespread third-party tool.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations, Terminal Servers, Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (all_endpoints) for (registry_key 'W32Time\TimeProviders\*\DllName') ->
      aggregate (parent_directories) ->
      calculate (frequency) ->
      alert if (path is not '%SystemRoot%\System32' and frequency is low)
- question: Does the file path of a newly registered Time Provider DLL deviate from the profile of legitimate paths as determined by a machine learning model?
  context: This question uses a one-class SVM model, a type of anomaly detection, trained exclusively on the file paths of legitimate Time Provider DLLs. The model learns the boundary of "normal." When a new DLL is registered, its path is fed to the model. If the path falls outside the learned boundary, it is flagged as an outlier, providing a robust method for detecting DLLs in suspicious locations.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations, Terminal Servers, Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      on (new_registry_event for 'W32Time\TimeProviders\*\DllName') ->
      feed (file_path) into (one_class_svm_model) ->
      alert if (model classifies as outlier)
- question: Was a Time Provider registry key modified by a user account that is not an authorized administrator or the SYSTEM account?
  context: Modifications to the critical Time Provider registry keys should only be performed by the operating system (NT AUTHORITY\SYSTEM) or by explicitly authorized administrative accounts during system maintenance. A modification made by any other account, such as a standard user or an unexpected service account, is a major red flag for a successful privilege escalation attempt or a serious misconfiguration.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (registry_events) where (target_object contains 'W32Time\TimeProviders') ->
      alert if (user not in [SYSTEM, Domain Admins, Enterprise Admins, ...])
- question: Is the combination of user and process modifying a Time Provider registry key statistically anomalous?
  context: This question enhances user-based detection by adding process context. The set of (user, process) pairs that legitimately modify these keys is extremely small and static (e.g., (`SYSTEM`, `services.exe`)). Any new or rare pair, such as (`some_user`, `powershell.exe`), is a strong statistical anomaly that warrants immediate investigation for malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      search (registry_events) where (target_object contains 'W32Time\TimeProviders') ->
      build (frequency map of (user, process) tuples) over (90 days) ->
      alert on (new or rare tuple)
- question: Does a Time Provider registry modification event appear anomalous based on a machine learning model that considers user, process, and time?
  context: This question uses an Isolation Forest model to detect anomalies based on multiple features of the modification event. The model is trained on legitimate events, learning the normal patterns of which users and processes make changes, and at what times. It can then effectively spot outliers, such as a change made by an administrator's account via an unusual process or outside of normal business hours.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      on (new_registry_event for 'W32Time\TimeProviders') ->
      extract (user, process, time_features) ->
      feed to (isolation_forest_model) ->
      alert if (anomaly_score is high)
- question: Has a DLL file been created by a low or medium integrity process and then quickly registered as a Time Provider by a high integrity process?
  context: This sequence is a classic pattern for privilege escalation. An attacker gains initial access in a sandboxed, low-privilege context (e.g., a web browser), writes their malicious DLL to disk, and then exploits a separate vulnerability to get a high-privilege process to register that DLL. The DLL then executes with SYSTEM privileges. Detecting this specific chain of events is key to stopping this escalation path.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled, Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      on (file_creation) where (creator_process_integrity in ['Low', 'Medium']) ->
      store (filename) ->
      correlate on (hostname) with (registry_set_event) within (10 minutes) where (target_object contains 'W32Time\TimeProviders' and details matches stored filename) ->
      alert
- question: Was a Time Provider DLL registered very shortly after the DLL file itself was created?
  context: Legitimate system DLLs are created during OS or application installation, often days, months, or years before they are referenced in the registry. In contrast, an adversary's payload is typically dropped to disk and then immediately registered for execution. A very short time delta (e.g., under 5 minutes) between file creation and registry modification is a strong statistical indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled, Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      on (registry_set_event for 'W32Time\TimeProviders\*\DllName') ->
      get (file_path) ->
      lookup (file_creation_timestamp) for (file_path) ->
      calculate (delta = registry_timestamp - file_creation_timestamp) ->
      alert if (delta < 5 minutes)
- question: Does the chain of events involving a Time Provider modification match a known malicious graph pattern for privilege escalation?
  context: This question uses an advanced graph-based approach to detection. System activity is modeled as a graph of connected nodes (processes, files, registry keys). The specific attack pattern—a medium-integrity process creating a file that is then used by a high-integrity process to modify a Time Provider registry key—can be defined as a malicious subgraph. Searching the event graph for this pattern can detect the full exploit chain with high fidelity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled, Terminal Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |-
      build (event_graph) from (process, file, registry events) ->
      search (graph) for (subgraph matching pattern: 'MediumIntegrityProcess -creates-> File <-reads- HighIntegrityProcess -writes-> RegistryKey') ->
      alert on match