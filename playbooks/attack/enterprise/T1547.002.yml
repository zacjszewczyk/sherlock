name: T1547.002: Authentication Package
id: f4a5b6c7-d8e9-4f0a-b1c2-d3e4f5a6b7c8
description: This playbook helps identify adversary activity related to the modification of LSA Authentication Packages (T1547.002) for persistence and privilege escalation. Adversaries can add malicious packages to the list of DLLs loaded by the Local Security Authority (LSA) at boot time. This allows their code to run in the high-privilege context of lsass.exe, enabling credential theft, persistence, and other malicious actions. This playbook focuses on detecting modifications to the relevant registry key, analyzing the DLLs loaded by lsass.exe, and monitoring for subsequent anomalous process and network behavior that may indicate a successful compromise.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Ask Sage, Inc.
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known malicious DLL been added to the LSA Authentication Packages registry key?
  context: Adversaries establish persistence by adding a malicious DLL to the 'Authentication Packages' registry key. This question aims to detect this specific action by checking any newly added DLL name and its file hash against a threat intelligence database. A match is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events (Sysmon EID 13 or WEF EID 4657)
      WHERE registry_key = "HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages"
      EXTRACT new_dll_name from event_details
      GET file_hash for new_dll_name
      LOOKUP new_dll_name, file_hash in threat_intelligence_platform
      RETURN events where lookup_match = true
- question: Has an anomalous process modified the LSA Authentication Packages registry key?
  context: Modifications to this sensitive registry key are rare and typically performed by trusted system processes. This question seeks to identify unusual modifications by baselining the frequency of all processes that change this key. A modification by a process that rarely or never does so (e.g., below the 5th percentile) is highly suspicious and warrants investigation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events (Sysmon EID 13)
      WHERE registry_key = "HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages"
      CORRELATE ProcessGuid with process_creation_events (Sysmon EID 1) to get ProcessName
      CALCULATE 30-day frequency distribution of all modifying ProcessName values
      ALERT where ProcessName frequency < 5th_percentile
- question: Can machine learning identify malicious modifications to the LSA Authentication Packages key?
  context: This question proposes a proactive, machine learning-based approach to detect malicious modifications. By training a model on features like the parent process, command-line entropy, and user context, it's possible to score each modification event in real-time. This can help identify novel or obfuscated attacks that might evade simpler rule-based detections.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each registry_event (Sysmon EID 13) on LSA key:
        EXTRACT features (parent process, cmdline entropy, user context, DLL path characteristics)
        INPUT features into pre-trained classification model
        ALERT if model_prediction_score > malicious_threshold
- question: Has the lsass.exe process loaded an unauthorized or suspicious DLL?
  context: When an authentication package is added, lsass.exe will load the corresponding DLL. This question focuses on detecting this by monitoring all DLLs loaded by lsass.exe. An alert should be triggered if a loaded DLL is not on a pre-defined allowlist of legitimate packages, is not located in C:\Windows\System32, or is unsigned.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Security Event ID 4697
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH module_load_events (Sysmon EID 7)
      WHERE process_name = "lsass.exe"
      AND (loaded_module_path NOT IN ("C:\Windows\System32\*") OR loaded_module_name NOT IN (allowlist) OR signature_status = "Unsigned")
      RETURN matching events
- question: Has the lsass.exe process loaded a statistically rare or unsigned DLL?
  context: Beyond a static allowlist, this question uses statistical analysis to find anomalies. It identifies DLLs loaded by lsass.exe that are rare across the environment (e.g., seen on <1% of assets). A rare DLL, especially if it is also unsigned, is a very strong indicator of a malicious authentication package being loaded.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Security Event ID 4697
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH module_load_events (Sysmon EID 7)
      WHERE process_name = "lsass.exe"
      CALCULATE 30-day prevalence of each loaded_module_name across all hosts
      ALERT if prevalence < 1% OR signature_status = "Unsigned"
- question: Does the sequence of DLLs loaded by lsass.exe at boot time show any temporal anomalies?
  context: The lsass.exe process loads a predictable sequence of DLLs during system startup. This question aims to detect a malicious DLL being injected into this sequence. A machine learning model can learn the normal timing, order, and names of DLLs loaded at boot and flag any deviation as a temporal anomaly, indicating a potential compromise.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Security Event ID 4697
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        CAPTURE sequence of module_load_events (Sysmon EID 7) for "lsass.exe" after boot
        INPUT sequence into pre-trained sequence anomaly detection model (e.g., LSTM)
        ALERT if model detects deviation from learned normal boot sequence
- question: Has the lsass.exe process spawned a child process or connected to a known C2 server?
  context: Legitimate behavior for lsass.exe does not include spawning child processes or making external network connections. This question seeks to detect these highly anomalous activities. A child process originating from lsass.exe is a critical indicator of compromise, as is a network connection from the host to a known command-and-control server.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices, Network Egress Points, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (Sysmon EID 1 or WEF EID 4688)
      WHERE parent_process_name = "lsass.exe"
      UNION WITH
      SEARCH network_connection_events (Sysmon EID 3 or Zeek conn.log)
      WHERE destination_ip IN (threat_intel_c2_feed)
      ALERT on any results
- question: Following a system boot, has the lsass.exe process exhibited anomalous behavior like spawning a child or connecting to a rare IP?
  context: This question focuses on the period immediately after a system boot, when a malicious authentication package would be loaded. Spawning a child process is a zero-frequency event and a critical alert. Additionally, connecting to a destination IP that is new to the entire enterprise is a strong statistical anomaly indicating potential C2 communication.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices, Network Egress Points, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for boot_event (WEF EID 6005)
      WITHIN 30 minutes after boot_event:
        SEARCH for process_creation where parent_process_name = "lsass.exe" -> ALERT
        SEARCH for network_connection (Zeek conn.log) where destination_ip_prevalence_30_days = 0 -> ALERT
- question: Does post-boot network traffic exhibit characteristics of C2 beaconing?
  context: After a malicious authentication package is loaded, it may initiate command-and-control (C2) beaconing. This question uses a time-series model to detect such behavior. By analyzing features like bytes sent, connection counts, and destination IP entropy in the period after a system boot, the model can identify subtle, periodic "heartbeat" patterns that differ from normal network activity.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Windows Event ID 6005
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint devices, Network Egress Points, Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host, after a boot_event:
        AGGREGATE network_logs (Zeek conn.log) into 1-minute time windows
        EXTRACT features (bytes_sent, conn_count, protocol_mix, dest_ip_entropy) for each window
        INPUT feature vectors into multivariate time-series anomaly detection model
        ALERT if model flags a sequence as anomalous (e.g., indicative of beaconing)
- question: Did a known malicious tool or a non-SYSTEM user process modify the LSA Authentication Packages key?
  context: Modification of the LSA key is a privileged operation typically reserved for the SYSTEM account. This question aims to detect privilege escalation attempts by identifying when a non-SYSTEM user makes this change, or when the modifying process is a known malicious tool like Mimikatz.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_events (Sysmon EID 13) on LSA key
      CORRELATE ProcessGuid with process_creation_events (Sysmon EID 1)
      EXTRACT process_name, file_hash, command_line, user_context
      LOOKUP process_name, file_hash in threat_intel_db for privesc_tools
      ALERT if lookup_match = true OR user_context != "SYSTEM"
- question: Did an anomalous process chain lead to the modification of the LSA Authentication Packages key?
  context: Legitimate modifications to the LSA key are typically initiated by a predictable chain of system processes (e.g., services.exe -> svchost.exe). This question seeks to identify manual or scripted modifications by an adversary by looking for rare or unexpected process chains, such as one starting from explorer.exe or cmd.exe.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each registry_event (Sysmon EID 13) on LSA key:
        TRACE full parent-child process chain
        BASELINE frequency of all observed process chains that modify this key
        ALERT if current process chain is statistically rare or not on allowlist
- question: Can machine learning determine if a process modifying the LSA key is attempting privilege escalation?
  context: This question applies a supervised machine learning model to proactively identify privilege escalation attempts. By training on features like user context, parent process, and command-line characteristics from known good and bad events, the model can score new LSA key modifications, providing a probabilistic assessment of malicious intent.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 13
  - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each registry_event (Sysmon EID 13) on LSA key:
        EXTRACT features (user_context, parent_process, cmdline_entropy, integrity_level)
        INPUT features into pre-trained XGBoost classification model
        ALERT if model_prediction_score > privesc_threshold
- question: Was a DLL from a user-writable or temporary directory added to the LSA Authentication Packages key?
  context: Legitimate authentication packages are system files located in protected directories like C:\Windows\System32. Adversaries often drop their malicious DLLs in temporary or user-writable locations. This question specifically looks for write attempts to the LSA key where the specified DLL path points to a non-standard, suspicious directory.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_write_events (Sysmon EID 13 or WEF EID 4657)
      WHERE registry_key = "HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages"
      PARSE new_dll_path from event_details
      ALERT if new_dll_path MATCHES REGEX for user-writable/temp dirs (e.g., "C:\Users\*", "C:\ProgramData\*", "C:\Windows\Temp\*")
- question: Does the file path of a newly added authentication package DLL have anomalous string entropy?
  context: To evade signature-based detection, adversaries may use randomly generated filenames or directory names for their malicious DLLs. This question aims to detect this by calculating the string entropy of the path and filename. A value that is a statistical outlier compared to the entropy of legitimate system DLL paths suggests randomization and potential malice.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_dll_path written to LSA key:
        CALCULATE path_entropy and filename_entropy
        COMPARE against baseline entropy distribution of legitimate system DLLs
        ALERT if path_entropy > 98th_percentile OR filename_entropy > 98th_percentile
- question: Is the structure of a newly added authentication package DLL path inconsistent with legitimate system paths?
  context: This question uses an unsupervised machine learning model to learn the "normal" structure of legitimate system DLL file paths. When a new DLL path is added to the LSA key, it is fed to the model. If the model has a high reconstruction error, it means the path is structurally different from what it has learned, making it a high-confidence anomaly.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers, Critical Application Servers, Standard User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new_dll_path written to LSA key:
        INPUT path_string into pre-trained character-level autoencoder model
        CALCULATE reconstruction_error
        ALERT if reconstruction_error > anomaly_threshold
- question: Following an LSA key modification, did the host initiate C2 communication or access sensitive RPC interfaces?
  context: After successfully establishing persistence, an adversary's implant will often "call home" to a C2 server or begin lateral movement. This question establishes a 60-minute watchlist on any host where the LSA key is modified, looking for outbound connections to known C2 IPs or attempts to access sensitive RPC interfaces used for credential dumping or remote execution.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dce_rpc.log
  - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON LSA_key_modification_event (Sysmon EID 13):
        WATCH source_host for 60 minutes
        DURING watch_window:
          SEARCH network_logs (Zeek conn.log) from source_host where destination_ip IN c2_feed -> ALERT
          SEARCH rpc_logs (Zeek dce_rpc.log) from source_host where rpc_interface IN ('lsass', 'samr', 'drsuapi') -> ALERT
- question: Following an LSA key modification, did the host exhibit a spike in SMB connections indicative of lateral movement?
  context: Once an adversary has escalated privileges on a host, a common next step is to scan the network for other systems to compromise. This question aims to detect this scanning behavior by monitoring for a sudden, anomalous increase in the number of unique internal hosts contacted over SMB (port 445) within an hour of an LSA key modification.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dce_rpc.log
  - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON LSA_key_modification_event (Sysmon EID 13):
        MONITOR source_host network traffic (Zeek conn.log) for 1 hour
        COUNT unique internal destination_ips on destination_port 445
        COMPARE count against hourly baseline for that host
        ALERT if count > 99th_percentile of baseline
- question: Following an LSA key modification, did the host create anomalous network connections based on a graph model?
  context: This question uses a graph-based model of the network to detect unusual communication patterns. After an LSA key is modified, any new network connections (edges) from that host (node) are scored for their anomalousness. A connection to a host or service that the source host does not normally interact with would be flagged, potentially indicating lateral movement or C2 activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dce_rpc.log
  - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON LSA_key_modification_event (Sysmon EID 13):
        MONITOR new network connections (edges) from source_host (node)
        FOR each new_edge:
          SCORE anomalousness based on rarity of edge, destination node role, etc. using graph model
          ALERT if anomaly_score > threshold