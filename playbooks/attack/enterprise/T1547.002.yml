name: T1547.002: Authentication Package
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook investigates whether an adversary is maintaining persistence or escalating privileges by modifying LSA (Local Security Authority) Authentication Packages. Adversaries may add a malicious DLL to the `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages` registry key, causing the LSA Subsystem Service (LSASS) to load it at boot. This allows the malicious code to run in a privileged context, enabling it to steal credentials, bypass security controls, or maintain a persistent foothold. The playbook focuses on detecting anomalous modifications to this registry key, the loading of unusual or unsigned DLLs by lsass.exe, and subsequent suspicious process or network activity, such as lsass.exe spawning child processes or making external network connections.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Ask Sage, Inc.
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly registered authentication package DLL known to be malicious?
    context: This action aims to identify persistence attempts where an adversary registers a malicious DLL as an authentication package. By monitoring modifications to the `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages` registry key and checking the new DLL against threat intelligence, analysts can detect known malicious tools or implants configured to load with LSA. A match indicates a high-confidence compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_modification_events WHERE registry_key = "HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Authentication Packages"
          EXTRACT new_dll_name, new_dll_hash
          LOOKUP dll_name, dll_hash in threat_intelligence_database
          IF match FOUND, ALERT high_severity
  - question: Is the process modifying the LSA Authentication Packages key statistically rare or anomalous?
    context: Legitimate modifications to the LSA Authentication Packages key are rare and typically performed by a small set of trusted system processes. This question helps identify unusual behavior by baselining the processes that modify this critical key. A modification by a process that has never or rarely performed this action before is a strong indicator of a potential persistence attempt.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events WHERE registry_key = "HKLM\...\Lsa\Authentication Packages"
          CORRELATE process_guid with process_creation_events to GET process_name
          CALCULATE frequency of process_name over last 30 days
          IF frequency < 5th percentile, ALERT anomaly
  - question: Does a modification to the LSA Authentication Packages key have features consistent with malicious activity?
    context: This question uses a machine learning model to provide a more nuanced detection than simple rule-based or statistical methods. By training a model on features like parent process, command-line entropy, and user context, it can learn the subtle characteristics of malicious modifications and score new events in real-time, helping to identify novel or evasive threats that might otherwise be missed.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_modification_event to LSA key:
          EXTRACT features (parent_process, cmd_entropy, user_context, dll_path_features)
          INPUT features into classification_model
          IF model_score > threshold, CLASSIFY as malicious and ALERT
  - question: Is lsass.exe loading a DLL that is not a known, legitimate authentication package?
    context: The lsass.exe process is responsible for enforcing security policy and loads registered authentication packages. Adversaries may cause it to load a malicious DLL to steal credentials or maintain persistence. This question focuses on detecting such behavior by comparing loaded DLLs against a curated allowlist of legitimate packages and paths. Any deviation, such as an unsigned module, is highly suspicious.
    answer_sources:
      - Sysmon Event ID 7
      - Windows Security Event ID 4697
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH module_load_events WHERE process_name = "lsass.exe"
          EXTRACT loaded_dll_path, loaded_dll_signature
          IF loaded_dll_path NOT IN allowlist OR loaded_dll_signature = "Unsigned", ALERT
  - question: Is lsass.exe loading a DLL that is statistically rare across the enterprise?
    context: This question provides a data-driven approach to identifying anomalous DLLs loaded by lsass.exe without relying on a manually maintained allowlist. By calculating the prevalence of each loaded DLL across all endpoints, analysts can quickly spot outliers. A DLL that is loaded on only a few systems, especially if it is also unsigned, is a high-confidence indicator of a targeted attack or compromise.
    answer_sources:
      - Sysmon Event ID 7
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH module_load_events WHERE process_name = "lsass.exe"
          CALCULATE prevalence of each loaded_dll across all endpoints over 30 days
          IF prevalence < 1% OR signature = "Unsigned", ALERT anomaly
  - question: Is lsass.exe loading DLLs in an anomalous sequence or at an unusual time during system boot?
    context: Legitimate processes, including lsass.exe, often load their required modules in a predictable sequence and timing during system startup. This question uses a sequence-based model to learn this normal pattern. Any deviation, such as a new DLL being injected into the sequence or a change in loading order, can indicate that a malicious authentication package has been added and is being loaded out of turn.
    answer_sources:
      - Sysmon Event ID 7
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
          MODEL normal sequence and timing of lsass.exe DLL loads post-boot
          MONITOR new boot sequences
          IF deviation from learned model (new DLL, different order), FLAG as temporal anomaly
  - question: Has lsass.exe spawned a child process or connected to a known malicious IP?
    context: The lsass.exe process should never spawn child processes and its network communications are typically predictable. This question establishes a high-confidence rule to detect this extremely anomalous behavior. A child process from lsass.exe is a strong indicator of compromise, likely from code injection. Similarly, a connection to a known command-and-control (C2) server signals an active threat.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Zeek conn.log
      - Endpoint devices, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events WHERE parent_process_name = "lsass.exe" -> ALERT
          SEARCH network_connection_events WHERE source_process = "lsass.exe" AND destination_ip IN c2_threat_feed -> ALERT
  - question: Has lsass.exe spawned a child process or made a network connection to a statistically rare destination?
    context: This question identifies highly anomalous activity without relying on pre-existing threat intelligence. Spawning a child process is a zero-frequency event for lsass.exe and should always be alerted on. For network activity, baselining allows the detection of connections to new or rare destinations shortly after a system boot, which could indicate a malicious authentication package establishing a C2 channel.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Windows Event ID 6005
      - Zeek conn.log
      - Endpoint devices, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events WHERE parent_process_name = "lsass.exe" -> ALERT
          AFTER boot_event, MONITOR network connections for 30 minutes
          IF destination_ip has 0% prevalence in last 30 days, ALERT anomaly
  - question: Is the host exhibiting anomalous network beaconing patterns after a system boot?
    context: Malicious authentication packages may initiate command-and-control (C2) beaconing shortly after being loaded at boot. This question uses a time-series model to detect such patterns. By analyzing features like connection volume, data size, and protocol mix in the minutes following a boot, the model can distinguish normal startup traffic from the subtle, periodic "heartbeat" signals characteristic of C2 communication.
    answer_sources:
      - Windows Event ID 6005
      - Zeek conn.log
      - Endpoint devices, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AFTER boot_event:
          EXTRACT network features (bytes_sent, conn_count, protocol_mix) in 1-min windows
          INPUT feature windows into multivariate time-series model
          IF model detects anomaly (e.g., periodic heartbeat), ALERT
  - question: Is the LSA Authentication Packages key being modified by a known malicious tool?
    context: This question aims to detect privilege escalation attempts where an adversary uses a known malicious tool, such as Mimikatz, to modify the LSA configuration. By correlating the registry write event with the source process and comparing its attributes (name, hash, command line) against threat intelligence, analysts can identify the direct use of hacking tools for privilege escalation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events WHERE registry_key = "HKLM\...\Lsa\Authentication Packages"
          GET source_process_name, source_process_hash, source_process_commandline
          LOOKUP process_artifacts in threat_intel_database (e.g., Mimikatz)
          IF match FOUND, ALERT critical
  - question: Is the LSA Authentication Packages key being modified by a process with an anomalous parent-child chain?
    context: Legitimate modifications to this sensitive registry key are typically performed by trusted system processes within a predictable process hierarchy (e.g., initiated by TrustedInstaller). This question baselines these legitimate process chains. A modification originating from an unusual chain, such as one starting from explorer.exe or cmd.exe, strongly suggests manual or scripted tampering as part of a privilege escalation attempt.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR LSA key modifications, TRACE full parent-child process chain
          BASELINE frequency of benign chains (e.g., services.exe -> svchost.exe -> ...)
          IF observed chain is statistically rare (e.g., explorer.exe -> cmd.exe -> reg.exe), ALERT
  - question: Does the process modifying the LSA Authentication Packages key have characteristics of a privilege escalation attempt?
    context: This question uses a machine learning model to proactively score the risk of a registry modification. By analyzing a combination of features—such as whether the process is running as SYSTEM, its parent process, and its command-line structure—the model can identify sophisticated privilege escalation attempts that might evade simpler detection rules.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Domain Controllers, Privileged Access Workstations, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON LSA key modification:
          EXTRACT features (user_context, parent_process, cmd_entropy, process_integrity)
          INPUT features into classification_model
          IF model predicts high likelihood of privilege escalation, ALERT
  - question: Is a DLL being registered as an authentication package from a non-standard or user-writable directory?
    context: Legitimate authentication packages are almost always located in `C:\Windows\System32\`. An adversary might place a malicious DLL in a less-monitored, user-writable directory like `C:\Users\` or `C:\ProgramData\` to achieve privilege escalation upon the next reboot. This question uses a simple but effective rule to detect this behavior by flagging any registered DLL path that is not in the standard system directory.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_write_events to LSA key
          PARSE new DLL path from registry value
          IF path matches user_writable_directory_pattern (e.g., "C:\Users\*"), ALERT
  - question: Does the file path for a new authentication package DLL appear to be randomized?
    context: Adversaries often use randomly generated filenames and directory paths to evade signature-based detection. This question aims to detect such evasion by analyzing the string entropy of the path for any newly registered authentication package DLL. A path with unusually high entropy compared to a baseline of legitimate system DLLs is a strong indicator of a malicious, algorithmically generated name.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR new DLL paths written to LSA key:
          CALCULATE string entropy of the full path and filename
          BASELINE entropy scores from legitimate system DLLs
          IF new path entropy > 98th percentile of baseline, ALERT anomaly
  - question: Is the file path for a new authentication package DLL structurally different from legitimate system paths?
    context: This question uses an unsupervised machine learning model to learn the "normal" structure of legitimate DLL paths. The model can detect anomalies that go beyond simple entropy, such as unusual character combinations or directory structures. When a new DLL path is written to the LSA key, it is fed to the model. A high reconstruction error means the path is structurally anomalous and likely malicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Domain Controllers, Critical Application Servers, Standard User Endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN autoencoder model on legitimate system DLL paths
          FOR new DLL paths written to LSA key:
          FEED path to model and calculate reconstruction_error
          IF reconstruction_error is high, FLAG as structural anomaly and ALERT
  - question: Following an LSA key modification, is the host connecting to C2 infrastructure or targeting sensitive services?
    context: After successfully escalating privileges by modifying an authentication package, an adversary's next step is often to establish C2 communication or move laterally. This question puts the host on a watchlist for one hour after a key modification, monitoring for connections to known C2 IPs or attempts to access high-value RPC interfaces like LSASS or SAMR, which are common post-exploitation targets.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON LSA key modification, WATCH host for 60 minutes
          DURING watch, IF host connects to IP in C2_feed, ALERT
          DURING watch, IF host targets sensitive RPC (lsass, samr), ALERT
  - question: Following an LSA key modification, is the host exhibiting network scanning behavior indicative of lateral movement?
    context: A common post-privilege-escalation activity is scanning the internal network to find the next target. This question establishes a behavioral baseline for normal network activity. After an LSA key modification, it monitors the host for a sudden spike in connections to unique internal hosts over common lateral movement ports like SMB (445). Such a spike is a strong statistical indicator of reconnaissance or lateral movement.
    answer_sources:
      - Sysmon Event ID 13
      - Zeek conn.log
      - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AFTER LSA key modification, MONITOR host's SMB (port 445) connections
          BASELINE normal count of unique internal hosts contacted per hour
          IF connection count from watched host exceeds 99th percentile of baseline, ALERT
  - question: Following an LSA key modification, is the host establishing network connections that are anomalous for its role?
    context: This question uses a sophisticated graph-based model to understand the normal communication patterns and "role" of each host in the network. After an LSA key is modified on a host, any new network connections it makes are evaluated by the model. If the host starts communicating in a way that is inconsistent with its learned role (e.g., a web server trying to connect to multiple workstations), it is flagged as a behavioral anomaly.
    answer_sources:
      - Sysmon Event ID 13
      - Zeek conn.log
      - Network Egress Points, Internal Network Segments (East-West traffic), Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL network as a graph (hosts=nodes, connections=edges)
          LEARN normal communication patterns and host roles
          AFTER LSA key modification, SCORE anomalousness of new connections from host
          IF new connection is inconsistent with host's role, ALERT