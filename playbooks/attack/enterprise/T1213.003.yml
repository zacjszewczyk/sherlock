name: T1213.003: Code Repositories
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is collecting proprietary source code or unsecured credentials from internal or private code repositories. It focuses on detecting suspicious activities such as outbound network connections to known malicious repository URLs, execution of git commands indicative of mass data collection (e.g., `clone --mirror`), unusually large data transfers to code repositories, anomalous user access patterns (e.g., privileged accounts accessing repos, or users accessing an abnormally high number of repos), and the execution of git on non-developer workstations.
type: technique
related:
- TA0009: Collection
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are internal hosts connecting to known malicious code repository URLs, domains, or IP addresses?
  context: This question aims to identify direct connections to adversary-controlled infrastructure flagged by threat intelligence. A match provides a high-confidence indicator of compromise, suggesting an attempt to exfiltrate data to or pull malicious code from a known bad location.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: SEARCH network_logs WHERE (destination_ip IN threat_intel_feed OR destination_domain IN threat_intel_feed OR url IN threat_intel_feed) AND threat_intel_category = 'malicious_code_repository'
- question: Are internal hosts resolving domains for code repositories that are statistically rare based on their Top-Level Domain (TLD) or registrar?
  context: Adversaries may use newly registered domains or uncommon TLDs for their malicious repositories to evade simple blocklists. This question helps uncover such activity by baselining normal TLD and registrar usage and flagging outliers, which could indicate connections to suspicious, non-standard code repositories.
  answer_sources:
  - Zeek dns.log
  - Network Egress Points
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: CALCULATE 30-day baseline of TLD and registrar frequencies from DNS logs. SEARCH new DNS queries. ALERT if TLD_frequency < 5th_percentile OR registrar_frequency < 5th_percentile.
- question: Are there any outbound web requests to URLs that a machine learning model identifies as likely malicious repositories?
  context: This question uses a machine learning model to proactively identify potentially malicious repository URLs that are not yet on threat intelligence feeds. The model analyzes lexical features of the URL to score its likelihood of being malicious, enabling the detection of novel threats.
  answer_sources:
  - Zeek http.log
  - Network Egress Points
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: FOR EACH URL in http_logs, APPLY ML_classifier. ALERT if score > 0.9.
- question: Has `git.exe` been executed with command-line arguments that suggest mass data collection, such as `clone --mirror` or `pull --all`?
  context: This question searches for specific git commands that are highly indicative of an adversary attempting to download entire repositories. While these commands can have legitimate uses, their presence warrants investigation to rule out data theft.
  answer_sources:
  - Windows Event ID 4688
  - Developer Workstations
  - CI/CD Build Servers
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_logs WHERE process_name = 'git.exe' AND command_line CONTAINS ('clone --mirror' OR 'fetch --all' OR 'pull --all' OR 'bundle create')
- question: Is any user executing high-risk git commands at a rate that is statistically significant compared to their own historical baseline?
  context: This question helps to identify anomalous behavior by a specific user. An attacker who has compromised a developer's account may use it to exfiltrate data, resulting in a spike in high-risk git commands compared to the user's normal activity. A high z-score flags this deviation.
  answer_sources:
  - Windows Event ID 4688
  - Developer Workstations
  - CI/CD Build Servers
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: FOR EACH user, CALCULATE 30-day baseline of high-risk git command counts. CALCULATE z-score for daily counts. ALERT if z-score > 3.
- question: Have any users executed a sequence of commands that is statistically improbable, such as cloning a repository and immediately compressing and exfiltrating it?
  context: This question looks beyond individual commands to analyze the entire sequence of actions. Adversaries often follow a predictable pattern discover, collect, compress, and exfiltrate. A sequence analysis model can learn normal command progressions and flag rare, suspicious sequences that match this attack pattern.
  answer_sources:
  - Windows Event ID 4688
  - Developer Workstations
  - CI/CD Build Servers
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: FOR EACH user, TRAIN sequence_model on historical command lines. CALCULATE probability of new command sequences. ALERT if probability < threshold for suspicious sequences (e.g., git clone -> 7z a -> curl -T).
- question: Has any single network connection to a known code repository transferred an unusually large amount of data, exceeding a static threshold like 1 GB?
  context: This question aims to catch blatant data exfiltration attempts involving the download of an entire, large code repository. A static, high-volume threshold provides a simple but effective tripwire for detecting significant data transfers that warrant immediate investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network Egress Points
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: SEARCH network_connection_logs WHERE destination_ip IN code_repo_ip_ranges. ALERT if (bytes_sent + bytes_received) > 1_GB.
- question: Did any host transfer an amount of data to a code repository that exceeds its own historical 95th percentile for data transfer volume?
  context: This question refines data volume detection by creating a dynamic baseline for each individual host. This approach is more sensitive than a single static threshold, as it can detect anomalous transfers that might be large for a specific host but not large enough to trigger a global alert, thereby flagging subtle deviations from normal behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network Egress Points
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: FOR EACH source_ip, CALCULATE 30-day baseline of 95th_percentile_data_transfer_to_repos. ALERT if new_connection_volume > host_baseline_95th_percentile.
- question: Has the total daily data volume transferred to code repositories from any single host significantly exceeded the amount predicted by a forecasting model?
  context: This question uses time-series forecasting to predict expected data transfer volumes and flag significant deviations. This method can account for trends and seasonality in a host's activity, making it effective at spotting anomalous spikes in data transfer that might signal a repository compromise and exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Network Egress Points
  - Internal Code Repository Servers
  range: last 90 days
  queries:
  - pseudocode: FOR EACH host, CREATE daily time series of data transfer volume. APPLY forecasting_model (e.g., ARIMA) to predict next day's volume with 99% confidence_interval. ALERT if actual_volume > predicted_upper_bound.
- question: Has a privileged or service account accessed a code repository, or has any user accessed a sensitive repository for which they are not authorized?
  context: This question enforces access control policies at the detection layer. It helps identify policy violations, such as a service account being used interactively to access source code, or unauthorized access to critical repositories, both of which are strong indicators of a potential compromise or insider threat.
  answer_sources:
  - Code Repository Audit Logs
  - Zeek http.log
  - Windows Event ID 4624
  - Authentication Servers
  - Internal Code Repository Servers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: CORRELATE authentication_logs and repository_access_logs. ALERT if (user IN privileged_account_list AND accesses_any_repo) OR (user accesses repo IN sensitive_repo_list AND user NOT IN repo_ACL).
- question: Is any user accessing a number of unique code repositories that is anomalously high compared to their own historical activity?
  context: This question aims to detect reconnaissance or bulk collection activity within code repositories. An attacker, after compromising an account, may browse or 'shop' for valuable data across many different repositories. This behavior would create a spike in the number of unique repositories accessed compared to the user's normal, more focused activity.
  answer_sources:
  - Code Repository Audit Logs
  - Zeek http.log
  - Windows Event ID 4624
  - Authentication Servers
  - Internal Code Repository Servers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: FOR EACH user, CALCULATE 30-day baseline of 99th_percentile_daily_unique_repo_accesses. ALERT if daily_unique_repo_access_count > user_baseline_99th_percentile.
- question: Does any user's repository access behavior (e.g., number of repos, data volume, time of day) deviate significantly from their established peer group?
  context: This question identifies anomalous user behavior by comparing an individual's activity to that of their peers. For example, a developer on the UI team suddenly accessing backend infrastructure repositories would be an outlier. This helps detect when an account is being used in a manner inconsistent with its owner's typical role and responsibilities.
  answer_sources:
  - Code Repository Audit Logs
  - Zeek http.log
  - Windows Event ID 4624
  - Authentication Servers
  - Internal Code Repository Servers
  - Web Proxies
  range: last 90 days
  queries:
  - pseudocode: CLUSTER users into peer groups based on repo access features. ALERT if a user is an outlier to all clusters OR if a user's activity profile shifts to a new peer group.
- question: Has `git.exe` been executed on a host that is not designated as a developer workstation or CI/CD server according to the asset inventory?
  context: This question checks for the execution of development tools on inappropriate systems. The presence of `git.exe` on a Domain Controller, HR, or Finance workstation is highly suspicious and a strong indicator that an adversary is staging data or installing tools on a compromised, non-standard host.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Finance Department Workstations
  - HR Department Workstations
  - Executive Laptops
  range: last 90 days
  queries:
  - pseudocode: SEARCH process_creation_logs for process_name = 'git.exe'. GET hostname. CHECK asset_inventory for host_role. ALERT if host_role NOT IN ['Developer Workstation', 'CI/CD Server'].
- question: Has `git.exe` been executed on a host where it has historically run very rarely or never before?
  context: This question uses historical process execution data to find anomalies without relying on a formal asset inventory. It identifies hosts where `git.exe` execution is a rare event, which is a strong signal of abnormal activity and potential compromise, as attackers may introduce tools to systems where they don't belong.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Finance Department Workstations
  - HR Department Workstations
  - Executive Laptops
  range: last 90 days
  queries:
  - pseudocode: CALCULATE historical frequency of 'git.exe' execution for all hosts. ALERT if 'git.exe' runs on a host where its frequency is in the bottom 1st percentile.
- question: Has `git.exe` been executed on a host that a machine learning model confidently classifies as a 'non-developer' machine?
  context: This question automates the process of identifying non-developer machines by using a machine learning model that learns from host characteristics (installed programs, services, etc.). It provides a scalable way to enforce the policy of 'no git on non-dev machines' without manually maintaining an asset inventory.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Finance Department Workstations
  - HR Department Workstations
  - Executive Laptops
  range: last 90 days
  queries:
  - pseudocode: FOR EACH host, APPLY ML_classifier to determine role ('developer'/'non-developer'). ON 'git.exe' execution event, CHECK host's classified role. ALERT if role = 'non-developer' with confidence > 95%.