name: T1651: Cloud Administration Command
id: 6a2c0b71-3e4d-4f1a-8b9c-5d6e7f8a9b0c
description: This playbook helps investigate whether an adversary is abusing cloud administration services to execute commands on virtual machines. The investigation focuses on identifying commands with malicious arguments or anomalous characteristics, unusual child processes spawned by VM agents, suspicious network connections originating from these processes, and anomalous API call patterns such as unusual source IPs or user behavior.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are command-line arguments from cloud administration service executions matching known malicious indicators?
    context: Adversaries may use legitimate cloud administration tools (like AWS Systems Manager Run Command, Azure Run Command, or GCP OS Patch Management) to execute malicious code. This question focuses on correlating the cloud API call that initiated the command with the actual process creation event on the virtual machine. By inspecting the command-line arguments of the created process and comparing them against threat intelligence feeds (e.g., malicious domains, IPs, file hashes, known malicious command strings), an analyst can identify direct evidence of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud virtual machine instances, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Correlate cloud API logs with host process logs
          JOIN cloud_api_logs ON cloud_api_logs.requestID = host_process_logs.correlationID
          WHERE cloud_api_logs.eventName IN ('SendCommand', 'RunCommand', 'os-patch-runs/execute')
          AND host_process_logs.EventID = 4688
          
          // Scan command-line arguments against threat intelligence
          FOR each correlated_event:
            MATCH event.command_line AGAINST threat_intel_feed
            IF match_found:
              GENERATE_ALERT(event, "Malicious indicator found in command line")
  - question: Do commands executed via cloud administration services exhibit unusually high entropy, suggesting obfuscation?
    context: To evade simple signature-based detection, adversaries often encode or obfuscate their commands. This results in command-line strings with high character randomness, or entropy. This question involves calculating the Shannon entropy for command-line arguments executed via cloud administration services. By establishing a baseline entropy score for legitimate commands in the environment, analysts can flag commands with abnormally high entropy scores (e.g., in the 95th percentile) as suspicious and worthy of further investigation.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud virtual machine instances, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Calculate entropy for commands
          FOR each process_event from cloud_admin_service:
            entropy_score = CALCULATE_SHANNON_ENTROPY(process_event.command_line)
            
            // Compare with baseline
            IF entropy_score > BASELINE_95TH_PERCENTILE:
              GENERATE_ALERT(process_event, "High entropy command line detected")
  - question: Can a machine learning model identify malicious command executions by analyzing features from both cloud API and host event logs?
    context: Sophisticated attacks may not be detectable by simple rules or entropy alone. This question proposes a more advanced approach using a machine learning classification model (e.g., Random Forest). The model would be trained on a labeled dataset of benign and malicious commands, using features from both the cloud API log (like source IP reputation, user/role history) and the host event log (command length, special character count). Once trained, the model can predict whether new, correlated API and host events are malicious.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud virtual machine instances, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Extract features and apply ML model
          FOR each correlated_api_and_host_event:
            features = EXTRACT_FEATURES(event) // IP reputation, user history, command length, etc.
            prediction = ML_MODEL.predict(features)
            
            IF prediction == 'malicious':
              GENERATE_ALERT(event, "ML model classified command as malicious")
  - question: Is a cloud VM agent spawning interactive tools or other commonly abused utilities that are inconsistent with automated tasks?
    context: Cloud VM agents (e.g., ssmagent.exe, waagent.exe) are designed for automated, non-interactive tasks. An adversary gaining control might use them to spawn interactive shells (cmd.exe, powershell.exe) or reconnaissance/credential theft tools (whoami.exe, mimikatz.exe). This question focuses on creating a deny-list of such tools and alerting whenever a VM agent process spawns a process on that list, as this is a strong indicator of hands-on-keyboard activity by an attacker.
    answer_sources:
      - Windows Event ID 4688
      - Cloud virtual machine instances
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Check for suspicious child processes
          SEARCH process_creation_logs (EventID=4688)
          WHERE parent_process IN ('ssmagent.exe', 'waagent.exe', 'google_guest_agent.exe')
          AND child_process IN ('cmd.exe', 'powershell.exe', 'mimikatz.exe', 'whoami.exe', 'net.exe')
          
          FOR each match:
            GENERATE_HIGH_SEVERITY_ALERT(match, "VM agent spawned interactive/malicious tool")
  - question: Is a cloud VM agent spawning statistically rare or previously unseen child processes?
    context: Beyond a static deny-list, behavioral analysis can uncover novel threats. This question involves baselining normal activity by building a historical profile of all child processes spawned by VM agents on each host and across the environment. Using frequency analysis, any process that has never been seen before on a host or is extremely rare (e.g., in the bottom 5th percentile of execution frequency) can be flagged as anomalous. This helps detect attacker tools that are not on a pre-defined deny-list.
    answer_sources:
      - Windows Event ID 4688
      - Cloud virtual machine instances
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Perform frequency analysis on child processes
          SEARCH process_creation_logs (EventID=4688)
          WHERE parent_process IN ('ssmagent.exe', 'waagent.exe', 'google_guest_agent.exe')
          
          FOR each event:
            IF process_frequency(event.child_process) < THRESHOLD_5_PERCENT:
              GENERATE_ALERT(event, "Rare child process spawned by VM agent")
  - question: Can clustering algorithms identify anomalous process executions that deviate from established patterns of normal administrative activity?
    context: This question proposes using unsupervised machine learning to find anomalous process executions without pre-labeled data. By extracting features from process events (e.g., process name, parent process, user context, command-line structure), a clustering algorithm like DBSCAN can group them into clusters representing normal activity. Any new process execution that does not fit into an established cluster is considered an outlier and flagged for investigation, providing a flexible way to detect novel attack techniques.
    answer_sources:
      - Windows Event ID 4688
      - Cloud virtual machine instances
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Apply clustering algorithm
          features = EXTRACT_FEATURES_FROM_PROCESS_LOGS() // process name, parent, user, cmd args
          clusters = CLUSTERING_MODEL.fit(features)
          
          FOR each new_process_event:
            IF CLUSTERING_MODEL.predict(new_process_event) == 'outlier':
              GENERATE_ALERT(new_process_event, "Anomalous process execution detected by clustering model")
  - question: Is a process spawned by a cloud VM agent making network connections to known malicious destinations?
    context: A common objective for an attacker after executing code is to establish a command and control (C2) channel. This question focuses on detecting this by correlating on-host process creation events with network connection logs (from endpoints or network infrastructure). If a process that was spawned by a cloud VM agent initiates an outbound connection to an IP or domain on a threat intelligence feed of known C2 servers, it is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS VPC Flow Logs
      - Azure Network Watcher Flow Logs
      - Google Cloud VPC Flow Logs
      - Virtual network gateways and firewalls, Cloud-native network flow logs (VPC), Endpoint network sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Correlate process and network logs
          JOIN process_logs ON process_logs.processID = network_logs.processID
          WHERE process_logs.parent_process IN ('ssmagent.exe', 'waagent.exe', 'google_guest_agent.exe')
          
          // Check destination against threat intel
          FOR each correlated_event:
            MATCH event.destination_ip AGAINST threat_intel_feed
            IF match_found:
              GENERATE_ALERT(event, "VM agent child process connected to malicious destination")
  - question: Does a process spawned by a cloud VM agent exhibit network behavior indicative of C2 beaconing or data exfiltration?
    context: Adversaries often use subtle network patterns to maintain persistence and exfiltrate data. This question looks for two such patterns. First, C2 beaconing, which can be identified by analyzing the time intervals between outbound connections to the same destination; a low standard deviation suggests rhythmic, automated communication. Second, data exfiltration, which can be detected by flagging connections with unusually large outbound data volumes compared to a historical baseline for that process and host.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS VPC Flow Logs
      - Azure Network Watcher Flow Logs
      - Google Cloud VPC Flow Logs
      - Virtual network gateways and firewalls, Cloud-native network flow logs (VPC), Endpoint network sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Analyze network connections for beaconing and exfiltration
          FOR each process_spawned_by_vm_agent:
            connections = GET_NETWORK_CONNECTIONS(process)
            
            // Check for beaconing
            time_delta_std_dev = CALCULATE_STD_DEV(connections.timestamps)
            IF time_delta_std_dev < BEACONING_THRESHOLD:
              GENERATE_ALERT(process, "Beaconing behavior detected")
            
            // Check for large data transfer
            IF connections.bytes_out > EXFILTRATION_98TH_PERCENTILE:
              GENERATE_ALERT(process, "Anomalous data exfiltration volume detected")
  - question: Can time-series analysis of network traffic from VM agent child processes detect significant deviations from normal behavior?
    context: To detect more subtle network anomalies, this question proposes using a time-series forecasting model (like ARIMA or Prophet). By training the model on historical network logs (e.g., VPC Flow Logs), it can learn the normal patterns of connection volume and frequency for processes spawned by VM agents. The model can then forecast expected behavior, and if the observed, real-time activity deviates significantly from this forecast, an alert is triggered. This can detect events like large-scale data exfiltration that represent a clear change in behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - AWS VPC Flow Logs
      - Azure Network Watcher Flow Logs
      - Google Cloud VPC Flow Logs
      - Virtual network gateways and firewalls, Cloud-native network flow logs (VPC), Endpoint network sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Apply time-series model to network data
          time_series_data = AGGREGATE_NETWORK_LOGS_BY_TIME()
          forecast = TIME_SERIES_MODEL.predict(time_series_data)
          
          // Compare actual vs. forecast
          deviation = CALCULATE_DEVIATION(time_series_data.actual, forecast)
          IF deviation > ANOMALY_THRESHOLD:
            GENERATE_ALERT(time_series_data, "Significant deviation from forecasted network behavior")
  - question: Is a cloud administration command being initiated from a suspicious or unauthorized source IP address?
    context: The context of the API call itself is a critical piece of evidence. An adversary may be using valid credentials, but their location may betray them. This question focuses on analyzing the source IP address of the cloud API call that initiates the command. The IP should be checked against allow-lists of known corporate IP ranges and deny-lists of known malicious IPs, such as TOR exit nodes. An execution command originating from an unexpected or forbidden IP space is a strong signal of a potential compromise.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Identity and Access Management (IAM) service logs, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Check source IP of API calls
          SEARCH cloud_api_logs
          WHERE eventName IN ('SendCommand', 'RunCommand', 'os-patch-runs/execute')
          
          FOR each event:
            IF event.sourceIPAddress IS IN tor_exit_nodes_list:
              GENERATE_ALERT(event, "Command initiated from TOR exit node")
            IF event.sourceIPAddress IS NOT IN corporate_ip_range:
              GENERATE_ALERT(event, "Command initiated from outside corporate network")
  - question: Is a cloud administration command being executed by an identity (user/role) in a manner that is anomalous for that identity's history?
    context: This question applies User and Entity Behavior Analytics (UEBA) principles to cloud API logs. For each IAM user or role, a baseline of normal behavior is established, including the types of commands they run, the instances they target, and the times/locations from which they operate. An alert is generated if a significant deviation occurs, such as a user executing a command on a sensitive server for the first time, or an API call originating from a geographic location or ISP that is highly unusual for that identity.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Identity and Access Management (IAM) service logs, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline user/role behavior and detect anomalies
          FOR each api_command_event:
            user_profile = GET_USER_PROFILE(event.user)
            
            is_new_target = IS_TARGET_NEW_FOR_USER(event.target, user_profile)
            is_new_location = IS_LOCATION_RARE_FOR_USER(event.source_ip, user_profile)
            
            IF is_new_target OR is_new_location:
              GENERATE_ALERT(event, "Anomalous API call behavior for user")
  - question: Can a multi-dimensional anomaly detection model identify suspicious cloud administration API calls based on a combination of factors?
    context: Simple behavioral checks might miss complex attack patterns. This question suggests using a more advanced anomaly detection algorithm, like Isolation Forest, which can analyze multiple features of an API call simultaneously. By creating a data point for each call with features like source IP geolocation, time of day, IAM principal, and target instance, the model can learn the multi-dimensional shape of normal activity. It can then score new API calls, flagging those that are significant outliers across the combined features, even if no single feature is anomalous on its own.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Windows Event ID 4688
      - Identity and Access Management (IAM) service logs, Cloud provider management plane (API logs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Apply multi-dimensional anomaly detection
          FOR each api_command_event:
            features = EXTRACT_FEATURES(event) // IP geo, time, user, target, etc.
            anomaly_score = ISOLATION_FOREST_MODEL.score(features)
            
            IF anomaly_score > OUTLIER_THRESHOLD:
              GENERATE_ALERT(event, "Multi-dimensional anomaly detected in API call")