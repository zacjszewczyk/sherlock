name: T1205.001: Port Knocking
id: 1e9f1b2c-3d4e-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook addresses the adversary technique of Port Knocking (T1205.001) used for persistence, defense evasion, and command and control. It provides investigative steps to determine if an adversary is using sequences of connection attempts to closed ports to open a backdoor, trigger a service, or establish a C2 channel. The playbook covers detecting the initial knocking sequence from malicious IPs, identifying the installation of port knocking daemons on endpoints, and correlating network knocks with subsequent firewall changes or new listening ports. It also includes methods for identifying evasion tactics, such as the use of anonymization services (e.g., TOR, VPNs), and detecting successful connections to previously closed ports following a knock. Finally, it details how to uncover C2 activity, including 'reverse knocks' for callbacks, periodic beaconing triggered by knocks, and long-lived interactive sessions established after a successful knock.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense Evasion
  - TA0011: Command And Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any source IPs from a threat intelligence feed attempted a port knocking sequence against our assets?
    context: This question seeks to identify basic port knocking attempts from known malicious actors. By filtering for a specific pattern of failed connections (3-10 attempts to distinct ports in under 30 seconds) and correlating the source IP with threat intelligence, we can detect high-confidence threats with minimal false positives.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway Firewall
      - DMZ Network Segments
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FILTER Zeek conn.log WHERE conn_state IN ('REJ', 'RSTO', 'S0'). GROUP BY source_ip, destination_ip OVER 30s_window. COUNT distinct destination_port AS knock_count. WHERE knock_count BETWEEN 3 AND 10. JOIN source_ip WITH threat_intel_feed. ALERT on match.
  - question: Which external IPs are exhibiting the most frequent port knocking behavior, and is the port sequence random or targeted?
    context: This question uses statistical analysis to find potential port knocking activity without relying on a threat feed. By scoring IPs based on the frequency of knocking patterns and analyzing the randomness (Shannon entropy) of the destination ports, we can distinguish targeted, malicious knocking from random network scanning.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway Firewall
      - DMZ Network Segments
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE 'knock_score' for all external IPs based on frequency of 3-10 failed connections in <30s. IDENTIFY IPs in top 99th percentile. CALCULATE Shannon entropy of destination port sequence for those IPs. INVESTIGATE IPs with high score and high entropy (>2.0).
  - question: Can a machine learning model detect connection sequences that are characteristic of port knocking?
    context: This question proposes using a Recurrent Neural Network (RNN) or LSTM model to identify complex, time-dependent port knocking patterns that simpler rules might miss. By training a model on known malicious and benign traffic, it can classify new connection sequences in real-time, providing a sophisticated layer of detection.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway Firewall
      - DMZ Network Segments
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN RNN model on labeled sequences of (timestamp_delta, dest_port, tcp_flag). DEPLOY model to classify new external IP connection sequences. ALERT if sequence is classified 'malicious port knock' with confidence > 0.9.
  - question: Has a known port knocking daemon process been executed on any monitored endpoints?
    context: This question focuses on detecting the presence of port knocking software directly on an endpoint. By monitoring for the creation of processes associated with known port knocking tools (e.g., 'knockd.exe'), we can identify a compromised host where an adversary has established this persistence mechanism.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical Server Subnets
      - Domain Controllers
      - User Workstation VLANs
      - Endpoint Detection and Response (EDR) platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR process creation events (Sysmon EID 1, Win EID 4688). COMPARE NewProcessName, ProcessImage, CommandLine against a watchlist of known port knocking tool names and hashes. ALERT on match.
  - question: Have any processes been created with statistically rare command-line arguments containing keywords related to port knocking?
    context: Adversaries may rename tools to evade simple name-based detection. This question hunts for this by baselining all process command-line arguments and flagging those that are both statistically rare and contain suspicious keywords (e.g., 'knock', 'fwknop'), indicating a likely disguised port knocking tool.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical Server Subnets
      - Domain Controllers
      - User Workstation VLANs
      - Endpoint Detection and Response (EDR) platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE frequency of all process command-line arguments. SCORE rarity for new process creation events. FLAG events in 99.9th percentile for rarity AND where command line contains ('knock', 'port', 'firewall-cmd').
  - question: Has a machine learning model identified any anomalous process command lines that appear related to network configuration?
    context: This advanced question uses a one-class SVM model to learn what 'normal' command-line activity looks like in the environment. It can then flag any new process command line that deviates significantly from this baseline and also contains features related to network configuration (IPs, ports), which could be a novel or unknown port knocking daemon.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical Server Subnets
      - Domain Controllers
      - User Workstation VLANs
      - Endpoint Detection and Response (EDR) platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN one-class SVM on baseline of legitimate command-line arguments. SCORE new process creation events. FLAG command lines classified as anomalies AND containing network configuration features (IPs, ports).
  - question: Has a firewall rule change or a new listening port been observed on a host immediately after a suspected port knocking sequence targeting it?
    context: This is a critical correlation question to confirm a successful port knock. It connects the network-level event (the knock) with the host-level outcome (the door opening). An alert generated by this rule is a high-confidence indicator that the port knocking attempt was successful.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5154
      - Windows Event ID 4946
      - Windows Event ID 4950
      - Sysmon Event ID 3
      - Firewall Management Interfaces
      - Critical Application Servers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRIGGER on 'suspected port knock' event. SEARCH for subsequent firewall change (EID 4946, 4950, 5154) or new network listener (Sysmon EID 3) on the same host within 5 seconds. ALERT on match.
  - question: Following a suspected port knock, did the target host experience a statistically anomalous number of firewall or network listening changes?
    context: This question adds a layer of statistical validation to the correlation between a knock and a subsequent host change. By baselining the normal rate of firewall changes, we can determine if a change that occurs after a knock is truly unusual for that host, thereby reducing false positives from normal administrative activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5154
      - Windows Event ID 4946
      - Windows Event ID 4950
      - Sysmon Event ID 3
      - Firewall Management Interfaces
      - Critical Application Servers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE hourly rate of firewall/listener changes per host. ON suspected port knock, check for a subsequent change event on the target host. ELEVATE alert if the event occurs at a time with a rate >3 standard deviations from the mean.
  - question: Can we visualize a causal link between a port knock attempt, a firewall change, and a new process listening on a port?
    context: This question proposes using a graph database to model relationships between entities and events. This allows for the discovery of complex attack paths, where a port knock from an external IP leads to a firewall change and a new listening port on the target, visually confirming the entire attack sequence.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5154
      - Windows Event ID 4946
      - Windows Event ID 4950
      - Sysmon Event ID 3
      - Firewall Management Interfaces
      - Critical Application Servers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL events as a graph of nodes (IPs, hosts) and edges (knock_attempt, firewall_change). ON new 'knock_attempt' edge, search for path to destination host including 'firewall_change' or 'listen_start' edge within a short time window. ALERT on path discovery.
  - question: Are any observed port knocking sequences originating from known anonymization services like TOR, public proxies, or VPNs?
    context: Adversaries use anonymization services to hide their true origin. This question prioritizes port knocking attempts that come from such services. By joining network knock events with a threat intelligence feed of anonymizer IPs, we can elevate the risk score of these attempts.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway
      - Egress Network Filters
      - Proxy Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: IDENTIFY port knocking sequences. INGEST CTI feed of anonymizer IPs. JOIN source IP of knocking sequence with anonymizer IP list. ALERT on any match.
  - question: Are port knocking attempts originating from rare or unusual geographic locations or network providers (ASNs)?
    context: This question hunts for suspicious origins without relying on specific threat feeds. By baselining all inbound traffic, we can identify port knocking attempts that originate from an ASN or country that rarely communicates with the organization, indicating a potential targeted attack rather than random internet noise.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway
      - Egress Network Filters
      - Proxy Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ENRICH inbound IPs with GeoIP and ASN data. IDENTIFY port knocking sequences. CALCULATE rarity score for the source ASN/country pair based on 30-day baseline. FLAG sequences from pairs in the 99th percentile of rarity.
  - question: Can a machine learning model predict if the source IP of a port knock is an anonymization service?
    context: This question aims to build a predictive model to classify source IPs, which can be more robust than static IP lists. Using features like ASN info, reverse DNS, and historical behavior, a model can identify likely anonymizers, even if they aren't on a known threat feed, and prioritize associated port knocking events.
    answer_sources:
      - Zeek conn.log
      - Threat Intelligence Feed
      - Internet Gateway
      - Egress Network Filters
      - Proxy Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN Random Forest model to classify IPs as anonymizers using features (CTI presence, ASN, rDNS). APPLY model to source IPs of suspected port knocking sequences. PRIORITIZE investigation of those classified as high-risk anonymizers.
  - question: Has a successful connection occurred on a historically unused port immediately after a series of failed connection attempts from the same source?
    context: This question seeks to find the "smoking gun" of a successful port knock: a port that was previously closed suddenly accepts a connection right after a knocking sequence. By maintaining a baseline of active ports, this detection method can pinpoint when a knock has successfully opened a new point of entry.
    answer_sources:
      - Zeek conn.log
      - DMZ Servers
      - Externally-facing Application Gateways
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN baseline of (host, port) pairs with successful connections in last 30 days. ON new successful connection, check if (host, port) is new. IF new, check for 3+ failed connections from same source IP in preceding 30s. ALERT if both are true.
  - question: Is there a statistically significant correlation between a cluster of failed connections and a subsequent successful connection to a new port?
    context: This question applies a statistical approach to validating a successful port knock. It calculates the conditional probability of a new port opening, given that it was preceded by a knocking pattern. If this probability is a statistical outlier, it provides strong evidence that the knock caused the port to open.
    answer_sources:
      - Zeek conn.log
      - DMZ Servers
      - Externally-facing Application Gateways
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PROFILE baseline of listening ports per host. ON successful connection to a new port, calculate conditional probability given preceding failed connection cluster from same source. FLAG if probability is a statistical outlier (>3 std dev).
  - question: Has an anomaly detection model flagged a successful connection that is temporally linked to a series of failed connections?
    context: This question uses an unsupervised machine learning model (Isolation Forest) to find unusual connections without pre-existing rules. A successful connection that the model flags as an anomaly and that closely follows a sequence of failed attempts from the same source is a strong candidate for a successful port knock.
    answer_sources:
      - Zeek conn.log
      - DMZ Servers
      - Externally-facing Application Gateways
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN Isolation Forest on normal connection 5-tuples. ON successful connection ('SF') flagged as anomaly, check if it was preceded by >=3 failed connections ('REJ', 'S0') from same source IP within 30s. CLASSIFY as successful port knock.
  - question: Has an internal host performed an outbound 'reverse knock' followed by a successful inbound connection from the targeted external IP?
    context: This question looks for a C2 technique where an infected internal host 'knocks' on an external C2 server to signal it to connect back. Correlating this outbound knock pattern with a subsequent inbound connection from the C2 server, especially if it's on a known C2 threat feed, is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Egress points of the network
      - DNS Resolvers
      - Core Network Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: DETECT internal host making >3 outbound failed connections to a single external IP in <10s. LOOK for subsequent successful inbound connection from that external IP to the internal host within 30s. CROSS-REFERENCE external IP with C2 threat feed and ALERT on match.
  - question: Are internal hosts performing outbound knocks to statistically rare or unusual destination IPs?
    context: This question helps find potential C2 servers that are not yet on threat intelligence feeds. By calculating a rarity score for the destination IP of an outbound knock (based on its ASN, country, and overall frequency), we can identify highly suspicious C2 destinations that are not part of normal business traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Egress points of the network
      - DNS Resolvers
      - Core Network Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: IDENTIFY internal hosts making outbound knocks. CALCULATE rarity score for destination IPs based on frequency, ASN, country over 30 days. FLAG knocks to destination IPs with rarity score in 99.9th percentile.
  - question: Can a machine learning classifier identify the destination of a reverse knock as a C2 server?
    context: This question suggests building a classifier to proactively identify C2 infrastructure. When a reverse knock is detected, the destination IP and any associated domain can be fed to the model. A high-confidence classification as 'C2' provides strong evidence of a C2 callback mechanism triggered by port knocking.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Egress points of the network
      - DNS Resolvers
      - Core Network Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN C2 classifier with features from DNS (TTL, entropy) and connection logs. ON reverse knock detection, feed destination IP/domain into classifier. ALERT if classified as C2 with high confidence.
  - question: Is there a periodic pattern of an inbound port knock followed by an outbound beacon from the target host to the source?
    context: This question aims to detect automated C2 communications. It defines a 'knock-beacon' event and searches for repetitions with a highly regular time interval (low jitter). Discovering three or more such periodic events between the same two hosts is a strong indicator of a C2 channel activated by port knocking.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - Internal Network Segments
      - Firewall Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: DEFINE 'knock-beacon' event (inbound knock -> outbound connection within 60s). SEARCH for repeating 'knock-beacon' events between same IP pair with consistent time delta (e.g., ~3600s). ALERT on 3+ periodic events.
  - question: Are there any highly periodic (low jitter) outbound connections that are consistently preceded by an inbound port knock?
    context: This question focuses on the regularity of C2 beacons. It first identifies all highly periodic connections by calculating the jitter (standard deviation of time between connections). It then filters this set to find connections that are also preceded by a port knock from the destination, confirming the trigger mechanism.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - Internal Network Segments
      - Firewall Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For all outbound connections, GROUP by src/dst IP pair and calculate time-between-connections jitter. ISOLATE pairs where jitter is in lowest 1st percentile AND the connection is preceded by an inbound knock from the destination IP.
  - question: Can time-series analysis reveal periodic outbound connections that are triggered by inbound port knocks?
    context: This question applies advanced time-series analysis (like FFT or Autocorrelation) to detect hidden periodic signals in a host's outbound traffic that might be missed by simple jitter calculations. If a strong periodic signal is found, the method then verifies that each event in the series is preceded by a knock, confirming the C2 pattern.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - Internal Network Segments
      - Firewall Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY FFT to timestamps of a host's outbound traffic to detect periodic signals. IF signal is detected, VERIFY each connection in the series is preceded by an inbound port knock from the destination IP. ALERT on match.
  - question: Is there evidence of a long-lived, low-bandwidth interactive C2 session on a non-standard port following a successful port knock?
    context: This question hunts for the actual interactive C2 shell that an adversary might use after a port is opened. It looks for a connection that lasts a long time (>5 mins) but transfers very little data (<10KB), which is characteristic of a human operator typing commands, not a bulk data transfer.
    answer_sources:
      - Zeek conn.log
      - Critical Server Subnets
      - Developer Workstations
      - Network Security Monitoring Sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON successful port knock, check resulting connection. ALERT if duration > 5 mins AND total_bytes < 10KB AND Zeek history shows bidirectional data ('d' and 'D').
  - question: Are there any post-knock connections with an anomalously high ratio of duration-to-bytes-transferred?
    context: This question uses a statistical ratio to identify interactive C2 sessions. A high ratio of connection duration to data volume indicates a session that was kept open for a long time with little activity. By flagging connections in the top percentile for this ratio, we can find sessions that behave like interactive C2.
    answer_sources:
      - Zeek conn.log
      - Critical Server Subnets
      - Developer Workstations
      - Network Security Monitoring Sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For all connections following a port knock, CALCULATE ratio of (duration / total_bytes). BASELINE this ratio across all network traffic. FLAG post-knock connections where this ratio is in the 98th percentile or higher.
  - question: Can a machine learning model classify a connection following a port knock as an interactive C2 session?
    context: This question proposes building a classifier to automatically distinguish C2 traffic from other traffic types. By training a model on features like connection duration, byte counts, and packet timing, it can be applied to any connection that follows a port knock, providing a high-confidence alert if it is classified as 'interactive C2'.
    answer_sources:
      - Zeek conn.log
      - Critical Server Subnets
      - Developer Workstations
      - Network Security Monitoring Sensors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN Gradient Boosting model to classify connections as 'interactive C2'. USE features like duration, byte counts, history. APPLY model to connections established after a port knock. ALERT if classified as 'interactive C2' with high confidence.