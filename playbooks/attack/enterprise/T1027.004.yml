name: T1027.004: Compile After Delivery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >
  Identifies if an adversary is compiling code on a host to evade defenses. This technique involves writing source code files (.cs, .c, .cpp, etc.) to disk, often in temporary or non-standard locations, and then using on-host compilers (csc.exe, gcc.exe, etc.) to create an executable. This is often done to bypass security controls that focus on known malicious binaries, as the malicious payload is only created after initial access. The resulting executable may then be executed and used to establish command and control (C2) communications. This playbook looks for the key stages of this activity: the creation of source code files, the execution of compilers with suspicious parameters, the rapid sequence of file-write to compile to execute, and the subsequent network activity of the newly created binary.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are source code files being created in unusual locations, and do their hashes match known malicious code?
    context: >
      This question aims to detect the initial stage of on-host compilation, where an adversary drops source code onto the system. By monitoring for the creation of files with common source code extensions in user-writable directories (like temp folders or download directories) that are not typical for development, we can spot suspicious activity. Hashing these files and comparing them against threat intelligence feeds for known malicious source code provides a high-fidelity method for confirming a threat. A similar check on newly created executables in the same locations can catch the compiled output.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User profile temporary directories (%APPDATA%, %TEMP%, Downloads), shared network drives, and web server directories, excluding designated software development project folders.
    range: last 90 days
    queries:
      - symbolic: |
          SEARCH for file creation events (Sysmon 11)
          WHERE file extension in (.cs, .c, .cpp, .go)
          AND file path in (user temp/download directories)
          HASH the created file
          COMPARE hash against malicious source code threat feed
          ALERT on match

          SEARCH for new .exe file creation events (Sysmon 11)
          HASH the created file
          COMPARE hash against malicious executable threat feed
          ALERT on match
  - question: Is there a statistically significant spike in the creation of source code files on non-developer hosts?
    context: >
      This question uses a statistical approach to identify anomalies. Most users in an organization are not developers and should not be creating source code files. By establishing a baseline of normal file creation activity for different roles (e.g., developer vs. non-developer), we can detect deviations. An alert triggered when a non-developer host suddenly starts creating source code files at a rate that is statistically significant (e.g., more than three standard deviations above its average) can indicate that a compromised machine is being prepared for on-host compilation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User profile temporary directories (%APPDATA%, %TEMP%, Downloads), shared network drives, and web server directories, excluding designated software development project folders.
    range: last 90 days
    queries:
      - statistical: |
          FOR each host profile (e.g., non-developer)
          CALCULATE 30-day moving average and standard deviation of source code file creations
          SEARCH for daily count of new source code files
          ALERT if count > (average + 3 * std_dev) for a given host profile
  - question: Can a machine learning model classify a newly created executable as malicious based on its context and features?
    context: >
      This question applies machine learning for a more sophisticated detection. A classification model can be trained to recognize the subtle characteristics of maliciously compiled executables. Features for the model could include the entropy of the file path (random-looking paths are suspicious), the presence of corresponding source code files in the same directory, the name of the process that created the executable, the user account under which it was created, and whether the file is digitally signed. An alert from a high-confidence prediction (>0.90) suggests a strong likelihood of a malicious binary created on-host.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User profile temporary directories (%APPDATA%, %TEMP%, Downloads), shared network drives, and web server directories, excluding designated software development project folders.
    range: last 90 days
    queries:
      - machine_learning: |
          ON new executable creation
          EXTRACT features (file path entropy, parent process, user context, digital signature status, presence of source code)
          INPUT features into trained classification model (Random Forest, Gradient Boosting)
          ALERT if model prediction score > 0.90
  - question: Is a compiler process being executed by a suspicious parent process or with command-line arguments pointing to non-standard directories?
    context: >
      This question focuses on the compilation step itself. Adversaries often use legitimate but out-of-place processes to spawn a compiler. For example, a compiler being launched by Microsoft Word or Outlook is highly irregular and suspicious. Similarly, command-line arguments that specify source or output files in temporary directories (e.g., %TEMP%) rather than dedicated project folders are a strong indicator of malicious activity. This symbolic rule helps catch the misuse of legitimate system tools for malicious ends.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Domain Controllers, Application Servers, User endpoints (especially non-developer workstations), and software development environments.
    range: last 90 days
    queries:
      - symbolic: |
          SEARCH for process creation events (Sysmon 1)
          WHERE process name in (csc.exe, gcc.exe, MSBuild.exe, ilasm.exe)
          ALERT if parent process name in (winword.exe, excel.exe, outlook.exe, powershell.exe)
          OR if command line contains paths like '%TEMP%\\' or '%PUBLIC%\\'
  - question: Is there a statistically anomalous compiler execution for a user, based on parent process history or command-line argument complexity?
    context: >
      This question seeks to find unusual compiler usage patterns for a specific user. By baselining what is normal for each user (e.g., a developer typically runs csc.exe from devenv.exe), we can spot outliers. An alert could trigger if a compiler is launched by a parent process never before seen for that user. Additionally, analyzing the complexity (Shannon entropy) of the command-line arguments can reveal attempts at obfuscation; a sudden spike in entropy compared to the user's baseline is a red flag.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Domain Controllers, Application Servers, User endpoints (especially non-developer workstations), and software development environments.
    range: last 90 days
    queries:
      - statistical: |
          FOR each user
          BASELINE normal compiler parent processes and command-line entropy
          ON compiler execution event
          ALERT if parent process is not in user's baseline
          OR if command-line entropy is in top 5% of user's historical values
  - question: Does an anomaly detection model identify a specific compiler execution as a significant outlier compared to normal developer activity?
    context: >
      This question leverages an unsupervised machine learning model to find abnormal compiler executions without pre-defined rules. The model (e.g., Isolation Forest) is trained on a large dataset of legitimate compiler process events from known developer workstations. It learns what "normal" looks like based on features like the parent process, user account, host, and the specific command-line arguments used. When a new compiler execution occurs, the model can score it for anomalousness. An event flagged as a significant outlier is a strong candidate for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Domain Controllers, Application Servers, User endpoints (especially non-developer workstations), and software development environments.
    range: last 90 days
    queries:
      - machine_learning: |
          TRAIN anomaly detection model (Isolation Forest) on compiler execution events from developer hosts
          ON new compiler execution event
          EXTRACT features (parent process, user, host, tokenized command line)
          INPUT features into model
          ALERT if model flags the event as a significant outlier
  - question: Has a rapid sequence of source code creation, compilation, and execution of the resulting binary occurred on a single host?
    context: >
      This question looks for the entire attack chain occurring in a compressed timeframe. Adversarial actions are often automated and execute quickly. A stateful detection rule can correlate three distinct events on a single host within a short window (e.g., 5 minutes): 1) the creation of a source code file, 2) the execution of a compiler referencing that file, and 3) the execution of the newly created binary. Observing this full sequence is a very high-confidence indicator of malicious on-host compilation.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User workstations, Web application servers, CI/CD pipeline servers, and ephemeral or containerized environments.
    range: last 90 days
    queries:
      - symbolic: |
          CORRELATE events on a single host within a 5-minute window
          LOOK FOR sequence:
          1. FileCreate (Sysmon 11) for source code file
          2. ProcessCreate (Sysmon 1) of compiler referencing the source file
          3. ProcessCreate (Sysmon 1) of the compiler's output executable
          ALERT if full sequence is observed
  - question: Is the time between source code creation and compilation on a non-developer host statistically unusual, suggesting automated activity?
    context: >
      This question focuses on the timing between events to differentiate human activity from automated scripts. A developer might spend minutes or hours editing a source file before compiling it. An adversary's script, however, will likely write the file and immediately compile it. By baselining the typical time delta between a file write and a compile for different user groups, we can spot anomalies. A very short delta (e.g., under 10 seconds, in the bottom 5th percentile) on a non-developer's machine strongly suggests automated, non-interactive, and likely malicious behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User workstations, Web application servers, CI/CD pipeline servers, and ephemeral or containerized environments.
    range: last 90 days
    queries:
      - statistical: |
          FOR each host
          CALCULATE time delta between source file write (Sysmon 11) and compiler execution (Sysmon 1)
          ESTABLISH baseline deltas for developer vs. non-developer hosts
          ALERT if delta on a non-developer host is below the 5th percentile (e.g., < 10 seconds)
  - question: Does a sequence analysis model detect a chain of events (file write, compile, execute) that matches a known malicious pattern?
    context: >
      This question applies advanced machine learning to recognize malicious sequences of actions. Models like Recurrent Neural Networks (RNNs) or Hidden Markov Models (HMMs) can be trained on vast streams of host event data (process creations, file writes, network connections, etc.). They learn the normal transition probabilities between different system events. When a sequence occurs that has a very low probability under the "normal" model but a high probability of matching a pre-defined malicious chain (write -> compile -> execute), the system can generate a high-fidelity alert.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 11 (FileCreate)
      - User workstations, Web application servers, CI/CD pipeline servers, and ephemeral or containerized environments.
    range: last 90 days
    queries:
      - machine_learning: |
          TRAIN sequence analysis model (RNN, HMM) on streams of host events
          MODEL learns normal transition probabilities between events
          ALERT when an observed event sequence has a high probability of matching a malicious 'write-compile-execute' chain
  - question: Is a newly compiled binary making a network connection to a destination IP or domain known to be malicious?
    context: >
      This question focuses on the post-compilation objective, which is often command and control (C2) communication. After identifying a newly compiled binary (through the methods in the previous questions), we must monitor its behavior. By correlating the process identifier (ProcessGUID in Sysmon) of the new binary's execution with subsequent network connection events, we can track its communications. If the binary connects to a destination IP on a threat intelligence blocklist or a domain flagged by a DGA (Domain Generation Algorithm) detector, it's a strong sign that the payload is malicious and is "calling home."
    answer_sources:
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 3 (NetworkConnect)
      - Sysmon Event ID 11 (FileCreate)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewalls/Gateways), DNS servers, Endpoint network stacks (via Sysmon), and cloud service provider flow logs.
    range: last 90 days
    queries:
      - symbolic: |
          IDENTIFY ProcessGUID of newly compiled binary execution (Sysmon 1)
          SEARCH for network connection event (Sysmon 3) from same ProcessGUID within 60 seconds
          ENRICH destination IP/domain using Zeek logs
          ALERT if destination IP is on a blocklist
          OR if domain is flagged by DGA detection
  - question: Is a newly compiled binary making a network connection that is statistically rare based on destination, port, or TLS fingerprint?
    context: >
      This question aims to detect suspicious network activity without relying solely on known-bad indicators. After a newly compiled binary is executed, its network connections are analyzed for rarity. A connection to an IP address or country that the organization has never communicated with before is suspicious. Similarly, using a non-standard port for a common protocol, or a rare JA3/JA3S TLS fingerprint (which profiles the client/server TLS negotiation), can indicate an attempt to use a custom or unusual C2 channel. An alert on such statistical outliers can uncover novel threats.
    answer_sources:
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 3 (NetworkConnect)
      - Sysmon Event ID 11 (FileCreate)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewalls/Gateways), DNS servers, Endpoint network stacks (via Sysmon), and cloud service provider flow logs.
    range: last 90 days
    queries:
      - statistical: |
          ON network connection from newly compiled binary
          CALCULATE prevalence of destination IP, port, and JA3/JA3S hash across the enterprise (last 30 days)
          ALERT if JA3/JA3S hash prevalence < 1%
          OR if destination country is new to the organization (last 90 days)
  - question: Does a host's outbound network traffic significantly deviate from its forecasted baseline immediately after a newly compiled binary is executed?
    context: >
      This question uses time-series analysis to detect a change in a host's network behavior. A model (like ARIMA) can be used to forecast the expected outbound data volume and number of unique destinations for a host based on its historical patterns. When an event occurs that we've identified as "newly compiled binary executed," we begin monitoring the host's network traffic for the next hour. If the actual traffic volume or pattern of connections significantly deviates from what the model forecasted, it indicates a state change on the host, likely caused by the new malicious process initiating C2 or data exfiltration.
    answer_sources:
      - Sysmon Event ID 1 (ProcessCreate)
      - Sysmon Event ID 3 (NetworkConnect)
      - Sysmon Event ID 11 (FileCreate)
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewalls/Gateways), DNS servers, Endpoint network stacks (via Sysmon), and cloud service provider flow logs.
    range: last 90 days
    queries:
      - machine_learning: |
          FORECAST host's expected outbound data volume and unique IPs using time-series model (ARIMA)
          ON 'newly compiled binary executed' event
          MONITOR host's network behavior for 1 hour
          ALERT if actual traffic significantly deviates from forecast