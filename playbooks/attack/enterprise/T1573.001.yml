name: T1573.001: Symmetric Cryptography
id: 123e4567-e89b-12d3-a456-426614174000
description: This playbook focuses on detecting adversary command and control (C2) communication that uses symmetric cryptography for concealment. Detection strategies include identifying network connections to known malicious infrastructure, spotting processes from non-standard locations making outbound connections, finding outbound traffic on standard ports that fails to conform to the expected protocol and has high entropy, recognizing periodic 'heartbeat' beaconing patterns, and flagging processes that are not on an established allowlist and exhibit multiple suspicious network behaviors simultaneously.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are internal hosts connecting to external IP addresses or domains known to be malicious C2 infrastructure that uses symmetric encryption?
    context: This question aims to identify direct communication with known adversary infrastructure. By joining network connection logs (destination IPs and DNS queries) with a threat intelligence feed of known C2 servers, we can detect unambiguous signs of compromise. An alert for a match provides a high-fidelity starting point for an investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: JOIN (Zeek conn.log dest_ip, Zeek dns.log query) WITH (Threat Intel C2 Feed). ALERT on match.
  - question: Are any known malicious C2 domains being queried by an unusually small number of internal hosts?
    context: This question focuses on identifying rare communication patterns to known-bad domains. Adversary C2 traffic is often limited to a few compromised hosts, unlike legitimate services accessed by many. By calculating the number of unique hosts querying each domain from a CTI feed and flagging those with very few queriers (e.g., below the 5th percentile), we can prioritize alerts for stealthier, more targeted C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: GROUP BY domain in dns.log. COUNT unique src_ip. For domains IN (Threat Intel Feed), IDENTIFY domains where unique src_ip count < 5th percentile.
  - question: Can we predict if connections to previously unseen IP addresses are likely malicious C2 communications based on their network characteristics?
    context: This question seeks to proactively identify new or unknown C2 infrastructure. By training a supervised classification model on labeled historical data (features from connection logs like port, protocol, and data volume, with CTI data as labels), we can apply the model to new connections. This allows us to score the likelihood that a connection to a novel IP address is malicious C2, enabling detection even without prior threat intelligence.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - pseudocode: PREDICT probability of malicious_c2 using RandomForest(features: dest_port, protocol, bytes_sent, bytes_received) on new connections. ALERT if probability > 0.85.
  - question: Is a process with a known malicious hash, or one running from a non-standard directory, making outbound network connections?
    context: This question helps detect malware execution followed by C2 communication. Malware often runs from temporary or user-writable locations instead of standard system directories. By monitoring for new processes, checking their hash against a known-bad list, and examining their execution path for suspicious locations (like Temp folders), we can identify malicious activity. Correlating this with subsequent network connections within a short time window strengthens the signal that C2 has been established.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: ALERT if (process.hash IN (malicious_hashes) OR process.path MATCHES (non_standard_regex)) AND (host initiates outbound connection within 5 minutes).
  - question: Is a process executing from a statistically rare file path and subsequently making an outbound network connection?
    context: This question aims to find anomalous process executions that lead to network activity. Most legitimate software runs from predictable locations. By baselining common execution paths and parent-child process relationships, we can calculate the rarity of any new process execution. A process running from an extremely uncommon path (e.g., below the 1st percentile of rarity) that then connects to the network is a strong indicator of potentially malicious behavior trying to hide in an unusual location.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: BASELINE process execution paths. CALCULATE rarity score for new processes. ALERT if (process.path_rarity < 1st percentile) AND (process initiates outbound connection).
  - question: Can we detect malicious processes that initiate network traffic by analyzing the anomalous characteristics of their command-line arguments?
    context: This question uses anomaly detection to identify malware based on its command-line behavior. Malicious scripts or tools often use long, obfuscated, or high-entropy command-line arguments to hide their functionality. By training an anomaly detection model on features like command-line length and character entropy, we can assign an anomaly score to each process. A high score, especially for a process that also initiates network traffic, suggests a high probability of malicious execution and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: CALCULATE anomaly_score using IsolationForest(features: cmd_line_length, cmd_line_entropy) for new processes. ALERT if (anomaly_score is high) AND (process initiates outbound connection).
  - question: Is there network traffic occurring on a standard SSL/TLS port (like 443) that is not actually using the SSL/TLS protocol?
    context: This question aims to uncover C2 traffic masquerading on standard encrypted ports. Adversaries often use ports like 443 to bypass firewall rules, but their custom encryption protocols won't perform a valid TLS handshake. By checking for connections on port 443 where a corresponding TLS session is not established, we can identify this protocol mismatch, which is a strong indicator of non-standard, potentially malicious traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - Network Egress Points
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: FIND connections in conn.log where (dest_port == 443 OR service == 'ssl') AND connection_uid NOT IN ssl.log.
  - question: Is there outbound network traffic with unusually high payload entropy for its destination port?
    context: This question seeks to identify encrypted or compressed data where it's not expected. Encrypted data has high entropy (randomness). By establishing a baseline of normal payload entropy for each network port, we can detect significant deviations. A connection with entropy above the 95th percentile for its port, especially when combined with a protocol mismatch, strongly suggests the transmission of custom encrypted data, a hallmark of C2 communication.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - Network Egress Points
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: BASELINE payload entropy per port from files.log. ALERT on connections where entropy > 95th percentile for that port.
  - question: Can we use time-series forecasting to predict and detect anomalous payload entropy levels on high-traffic ports?
    context: This question applies a more sophisticated statistical method to detect high entropy. For high-volume ports like 80 and 443, entropy levels can fluctuate. A time-series model (like ARIMA) can learn these normal patterns and predict the expected entropy for any given time. An alert is generated when the observed entropy significantly deviates from the forecast (e.g., by more than 3 standard deviations), indicating a statistically significant anomaly that could be encrypted C2 traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - Network Egress Points
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: FORECAST expected entropy for ports 80, 443 using ARIMA model. ALERT if observed_entropy is > 3 standard deviations from forecast.
  - question: Is any internal host making periodic, regularly timed 'heartbeat' connections to a single external destination?
    context: This question is designed to detect C2 beaconing. Malware implants regularly check in with their C2 server for new commands. This behavior manifests as a series of connections at consistent intervals (e.g., every 5 minutes) with similar data sizes. By analyzing connection timestamps and sizes for a given source-destination pair, we can identify this repetitive pattern, which is a classic indicator of an active C2 channel.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: GROUP BY src_ip, dest_ip. ANALYZE timestamps and data sizes. ALERT if connection interval and size are consistent (+/- 10%) over > 5 connections.
  - question: Are there any network connections where the ratio of data sent versus data received is highly anomalous for that destination port?
    context: This question looks for unusual data transfer patterns. Different protocols and applications have typical ratios of sent vs. received data. For example, a web browsing session usually involves a small request and a large response. C2 communication might show a different pattern, like a small beacon and a small response, or a large data exfiltration upload. By baselining the normal ratio for each port, we can flag connections that deviate significantly (e.g., by more than 3 standard deviations), pointing to potentially malicious activity.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: BASELINE ratio of (orig_bytes / resp_bytes) per port. ALERT if a connection's ratio is > 3 standard deviations from the mean for that port.
  - question: Can we use time-series analysis to automatically detect repeating, periodic C2 beaconing signals in network traffic?
    context: This question applies advanced signal processing to find beaconing. Autocorrelation is a mathematical function that can measure how strongly a time-series signal repeats itself. By applying this function to the timestamps of connections between a source and destination, a high score indicates a strong periodic pattern, even if the interval isn't perfectly fixed. This method can reliably detect C2 beaconing, especially when the destination IP has a low reputation or is uncategorized.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: GROUP BY src_ip, dest_ip. APPLY autocorrelation to connection timestamps. ALERT on pairs with high autocorrelation scores.
  - question: Is a process that is not on our software allowlist initiating network traffic that also shows signs of protocol mismatch?
    context: This question combines two high-fidelity indicators to reduce false positives. An unknown or unapproved application making network connections is suspicious. This suspicion is greatly amplified if that network traffic is also attempting to masquerade on a standard port without using the correct protocol (e.g., non-TLS on port 443). Correlating these two events—an unapproved process and protocol-masquerading traffic—provides a very strong signal of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - User Workstations
      - Critical Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: TRIGGER ALERT when (process.hash NOT IN allowlist) AND (connection triggers protocol_mismatch_rule).
  - question: Can we identify high-risk, network-connected processes by combining multiple suspicious statistical attributes into a single risk score?
    context: This question seeks to identify threats by looking at the totality of evidence rather than a single indicator. A single anomaly might be a false positive, but multiple simultaneous anomalies are much more likely to be malicious. By creating a composite risk score that adds points for various suspicious behaviors (e.g., rare execution path, high network entropy, beaconing, anomalous data ratio), we can create a more robust detection. A process accumulating a score above a set threshold is flagged as a high-priority threat.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - User Workstations
      - Critical Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: CALCULATE risk_score for each process by summing points for anomalies (path rarity, entropy, beaconing, etc.). ALERT if risk_score > threshold.
  - question: Can we use unsupervised machine learning to find processes that are behavioral outliers based on a combination of process and network features?
    context: This question aims to discover novel or unknown threats by identifying behaviors that are fundamentally different from normal activity. By using a clustering algorithm (like DBSCAN) on a dataset combining both process features (e.g., path rarity) and network features (e.g., entropy, beaconing patterns), we can group all activity into clusters. Normal, common activities will form large, dense clusters. Malicious activities, being rare and different, will form small, isolated clusters or be flagged as outliers. These outliers represent multi-faceted behavioral anomalies that require investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek files.log
      - User Workstations
      - Critical Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: APPLY DBSCAN clustering on combined process and network features. INVESTIGATE processes identified as noise/outliers (i.e., not part of a major cluster).