name: T1010: Application Window Discovery
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to discover open application windows on enterprise systems. This can be identified by observing processes whose hashes match known malicious tools, the use of specific command-line strings (e.g., 'tasklist /v', 'Get-Process'), the execution of discovery utilities from unusual parent processes (e.g., 'outlook.exe'), the sequential execution of discovery followed by collection or exfiltration activities, or the use of obfuscated PowerShell scripts employing .NET or Win32 API calls for window enumeration.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process executing whose file hash matches a known malicious tool used for application window discovery?
    context: This question aims to identify the execution of known malicious tools, such as DarkWatchman or Cobalt Strike, by comparing process file hashes (SHA256) from process creation logs (Windows Event ID 4688) and file transfer logs (Zeek files.log) against a continuously updated threat intelligence feed. A match indicates a high-confidence compromise and should be treated as a high-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs AND file_transfer_logs WHERE file_hash IN known_malicious_hash_list
  - question: Is a statistically rare process being spawned by an anomalous parent process like an Office application or PowerShell?
    context: This question focuses on identifying potentially malicious software that isn't yet on a threat intelligence feed. It works by first establishing a baseline of normal process execution across the enterprise. Any process hash seen on a very small percentage of hosts (e.g., less than 0.1%) is flagged as rare. If such a rare process is created by a parent process not typically associated with software installation or execution (like Microsoft Word or PowerShell), it is a strong indicator of suspicious activity and warrants a medium-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 90 days
    queries:
      - pseudocode: 1. CALCULATE prevalence of all process_hashes over 30 days. 2. IDENTIFY hashes with prevalence < 0.1%. 3. SEARCH for executions of these rare hashes where parent_process is 'winword.exe', 'powershell.exe', etc.
  - question: Has a machine learning model classified a new process execution as malicious based on its characteristics?
    context: This question leverages a machine learning approach to detect novel threats. A pre-trained binary classification model (e.g., Random Forest) analyzes new process executions in real-time. The model considers various features like the parent process, command-line arguments, the prevalence of the file hash, and the process name. If the model assigns a high confidence score (e.g., > 0.9) that the process is malicious, it signals a high-probability threat that requires immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 90 days
    queries:
      - pseudocode: APPLY ML_model to process_creation_events. ALERT where prediction_score > 0.9.
  - question: Are specific command strings for enumerating application windows (e.g., 'tasklist /v') being executed, especially by a suspicious parent process?
    context: This question looks for the direct use of commands known to be used for application window discovery. By searching command-line arguments (from Event ID 4688) and PowerShell script block content (from Event ID 4104) for patterns like `tasklist /v` or `Get-Process`, analysts can find explicit discovery attempts. The severity is increased if the command is initiated by an unusual parent, such as a Microsoft Office application, a web server process, or an unsigned script host, as this is a common pattern for fileless malware.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 90 days
    queries:
      - pseudocode: SEARCH command_line_logs OR powershell_logs FOR regex('tasklist /v', 'Get-Process .?MainWindowTitle') WHERE parent_process IN ('winword.exe', 'excel.exe', 'httpd.exe', etc.).
  - question: Is a user executing discovery commands like 'tasklist.exe' at a rate that is statistically anomalous compared to their own historical behavior on a specific host?
    context: This question aims to detect abnormal user behavior by focusing on the frequency of actions. For each user on each host, a baseline is created for the normal hourly execution rate of discovery commands. An alert is generated when a user's activity significantly deviates from this personal baseline (e.g., exceeds three standard deviations above the average). This can help detect an adversary who has compromised a user's account and is performing reconnaissance, distinguishing it from a system administrator's routine activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 90 days
    queries:
      - pseudocode: 1. BASELINE hourly execution count of 'tasklist.exe' per user-host pair over 30 days. 2. CALCULATE mean and stddev. 3. ALERT where current_hour_count > (mean + 3*stddev).
  - question: Has a PowerShell script been automatically categorized by a topic model as performing discovery, especially if it's a rare activity for the user or session type?
    context: This question uses an unsupervised machine learning technique, LDA, to automatically group PowerShell scripts into functional topics without predefined rules. The model analyzes the content of all PowerShell script blocks (Event ID 4104) to identify clusters of related activity, such as 'discovery'. An alert is triggered for scripts that fall into this 'discovery' topic, particularly if the action is unusual for the context (e.g., executed by a non-administrative user or in a non-interactive session), indicating potential reconnaissance.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 90 days
    queries:
      - pseudocode: 1. TRAIN LDA model on powershell_script_block_logs. 2. CLASSIFY new scripts into topics. 3. ALERT if topic is 'discovery' AND (user is non-admin OR session is non-interactive).
  - question: Has a known discovery utility like 'tasklist.exe' been executed by a parent process that is not on the pre-approved allowlist of legitimate parents?
    context: This question uses a deterministic, rule-based approach to find suspicious process relationships. A curated allowlist defines normal parent-child process chains (e.g., a user opening Command Prompt from Explorer, then running tasklist). Any execution of a discovery utility where the parent process is not on this list (e.g., 'outlook.exe' launching 'tasklist.exe') is a strong deviation from expected behavior and triggers a high-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs for child_process IN ('tasklist.exe', etc.) WHERE parent_process NOT IN (legitimate_parent_allowlist).
  - question: Has a parent-child process relationship occurred that is statistically very rare across the entire enterprise?
    context: This question identifies anomalous process relationships by looking at their enterprise-wide frequency. By analyzing all parent-child process pairs over a 30-day period, a probability distribution is created. Any newly observed pair that is extremely infrequent (e.g., in the bottom 1% of all observed pairs) is flagged as a potential anomaly. This data-driven approach can uncover novel or unusual attacker techniques without relying on predefined rules.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 90 days
    queries:
      - pseudocode: 1. CALCULATE frequency of all parent-child pairs over 30 days. 2. IDENTIFY pairs in the bottom 1st percentile. 3. ALERT on new occurrences of these rare pairs.
  - question: Has a graph-based anomaly detection model identified a new process execution as being structurally inconsistent with normal system behavior?
    context: This question applies advanced graph analytics to detect threats. Normal parent-child process relationships are modeled as a graph. When a new process is created, it's represented as a new edge in this graph (e.g., an edge from 'winword.exe' to 'tasklist.exe'). A machine learning model trained on this graph structure can identify new edges that are structurally anomalous or 'surprising' compared to the learned baseline of normal behavior. A high anomaly score for a new edge indicates a suspicious event that should be investigated.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 90 days
    queries:
      - pseudocode: 1. TRAIN graph model on historical parent-child process data. 2. SCORE new process executions (edges) for anomaly. 3. ALERT on high anomaly scores.
  - question: Did an application window discovery event occur within a short time frame (e.g., 10 minutes) of other suspicious activities like data collection, credential dumping, or exfiltration on the same host?
    context: This question focuses on the sequence of attacker actions, as a single event might be benign, but a specific sequence is often malicious. A stateful correlation rule looks for a T1010 discovery indicator (like a 'tasklist.exe' execution) followed closely by indicators of other attack stages, such as data compression ('7z.exe'), credential access (LSASS memory access), or establishing a new connection to a low-reputation IP address. Such a sequence strongly suggests a multi-stage attack in progress and warrants a high-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - pseudocode: SEARCH for T1010_indicator ON host. IF found, SEARCH for T1560_indicator OR T1003_indicator OR T1071_indicator ON same host WITHIN 10 minutes. ALERT on match.
  - question: Did a sequence of ATT&CK techniques, such as Discovery followed by Collection, occur with a time gap that is statistically unusual, suggesting automated behavior?
    context: This question analyzes the timing between different attacker techniques to identify automation. By modeling the typical time delays between pairs of observed ATT&CK techniques (e.g., T1010 -> T1560), it's possible to identify sequences that happen unusually quickly. A time delta that falls in the fastest percentile (e.g., 5th percentile) suggests the actions were performed by a script or automated tool rather than a human, increasing the likelihood of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - pseudocode: 1. MODEL time deltas between sequential ATT&CK techniques. 2. IDENTIFY outliers (e.g., 5th percentile). 3. ALERT when a T1010 -> T1560 sequence occurs with an outlier time delta.
  - question: Has a sequence-aware machine learning model (like an HMM or RNN) predicted a high probability of an attack progressing from a 'Discovery' state to a 'Collection' or 'Exfiltration' state?
    context: This question uses a sophisticated, stateful machine learning model to understand attack chains. The model (HMM or RNN) is trained on vast amounts of event data, tagged with ATT&CK techniques, to learn the probable sequences of an attack. It analyzes events in real-time and calculates the probability of transitioning from one state to another (e.g., from 'Discovery' to 'Collection'). A high-probability transition identified by the model indicates a likely attack progression and should be treated as a critical alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - pseudocode: 1. STREAM ATT&CK-tagged events into trained HMM/RNN model. 2. ALERT when model predicts high-probability state transition from 'Discovery' to 'Collection'/'Exfiltration' on the same host.
  - question: Is a PowerShell script using API calls for window enumeration (e.g., 'EnumWindows', 'GetWindowText') while also showing signs of obfuscation?
    context: This question targets advanced, fileless attack techniques that avoid standard command-line tools. It involves scanning PowerShell script block logs (Event ID 4104) for direct calls to Win32 APIs or .NET methods used for window discovery. The presence of these API calls combined with common obfuscation techniques (like Base64 encoding or string concatenation) is a strong indicator of malicious intent, as adversaries use this to bypass simple signature-based detection.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH powershell_logs for regex('EnumWindows' OR 'GetWindowText') AND regex('FromBase64String' OR '-join').
  - question: Does a PowerShell script exhibit high entropy and a high ratio of non-alphanumeric characters, suggesting it is heavily obfuscated?
    context: This question uses statistical properties of the script text itself to detect obfuscation. Malicious scripts are often obfuscated to hide their true purpose, which typically increases their character-level entropy (randomness) and the proportion of special characters. By establishing a baseline for these metrics across all normal scripts, any new script that is a significant outlier (e.g., in the 98th percentile for both metrics) can be flagged as highly suspicious and likely obfuscated, even if its specific function is unknown.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - pseudocode: 1. CALCULATE entropy and non-alphanumeric ratio for all scripts to create a baseline. 2. For new scripts, ALERT if both metrics are > 98th percentile of baseline.
  - question: Has a deep learning model, trained on script text, classified a PowerShell script block as malicious with high confidence?
    context: This question leverages cutting-edge deep learning to analyze the raw text of PowerShell scripts. Unlike regex or statistical methods, a deep learning model (like a CNN or transformer) can learn the complex, subtle patterns and structures inherent in malicious code, including novel obfuscation techniques. When such a model classifies a script as malicious with very high confidence (e.g., > 0.95), it provides a powerful, high-fidelity signal of a critical threat.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - pseudocode: APPLY deep_learning_model to powershell_script_text. ALERT where prediction is 'malicious' AND confidence_score > 0.95.