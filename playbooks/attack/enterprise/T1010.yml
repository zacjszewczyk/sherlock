name: T1010: Application Window Discovery
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is attempting to discover open application windows on enterprise systems. This involves looking for processes whose hashes match known malicious tools, command-line arguments or PowerShell scripts containing specific enumeration strings (like 'tasklist /v' or 'Get-Process'), the execution of discovery utilities from unusual parent processes (like 'outlook.exe'), the sequential execution of window discovery with other malicious activities like data compression or credential access, and the use of obfuscated PowerShell scripts employing .NET or Win32 API calls to bypass standard tools.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any processes been executed or files transferred that match the hashes of known malicious tools used for application window discovery?
    context: This question aims to identify the use of known malicious tools like DarkWatchman or Cobalt Strike by comparing file and process hashes against a threat intelligence watchlist. A match is a high-confidence indicator of compromise and requires immediate attention.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs OR file_transfer_logs | JOIN with threat_intel_hash_watchlist ON file_hash | WHERE match_found
  - question: Has a statistically rare process, potentially spawned by an unusual parent process, been observed in the environment?
    context: This question focuses on identifying unknown or custom malware not present in threat intelligence feeds. By baselining process hash prevalence over 30 days, we can flag rare processes for further scrutiny, especially when they are launched by common but potentially abused parent processes like Microsoft Office applications or PowerShell.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs over 30d | CALCULATE prevalence(process_hash) | FILTER prevalence < 0.1% AND parent_process IN (anomalous_list)
  - question: Has a machine learning model identified any new process executions as highly likely to be malicious based on their characteristics?
    context: This question leverages a machine learning model to proactively detect suspicious process executions in real-time. The model analyzes multiple features (parent process, command line, hash rarity, etc.) to provide a confidence score, allowing analysts to focus on high-probability threats that might evade signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Enterprise endpoints (workstations, servers) with process creation logging; network egress points monitoring file transfers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM process_creation_events | APPLY ml_model(features) | FILTER prediction_score > 0.9
  - question: Have any command-line arguments or PowerShell scripts been executed containing commands for application window discovery from a suspicious parent process?
    context: This question searches for explicit commands used for window discovery, such as 'tasklist /v' or 'Get-Process'. An alert's severity is escalated if these commands are initiated by a process that typically should not be performing discovery, like an Office application or a web server, which strongly indicates malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH command_line_logs OR powershell_logs FOR regex_patterns('tasklist /v', 'Get-Process') | WHERE parent_process IN ('winword.exe', 'httpd.exe', etc.)
  - question: Has any user executed window discovery commands at a rate that is anomalously high compared to their own baseline?
    context: This question aims to detect atypical user behavior. By establishing a historical baseline of discovery command usage for each user on each host, we can spot deviations that might signal a compromised account or insider threat performing reconnaissance. An execution count three standard deviations above the mean is a strong statistical indicator of an anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: FOR each user,host | CALCULATE baseline(mean, stdev) of discovery_command_count per hour over 30d | ALERT IF current_hour_count > (mean + 3*stdev)
  - question: Have any PowerShell scripts been categorized by a topic model as performing discovery, especially if they are rare or executed in a suspicious context?
    context: This question uses Latent Dirichlet Allocation (LDA) topic modeling to categorize PowerShell scripts by their function. This allows for the detection of scripts whose primary purpose is 'discovery' without relying on simple keyword matching. An alert is triggered if a script falls into a rare discovery topic, particularly if run by a non-admin or in a non-interactive session.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with command-line and PowerShell script block logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each powershell_script | APPLY lda_model | IF topic == 'Discovery' AND is_rare_topic | ALERT
  - question: Has a known discovery utility been executed by a parent process that is not on a pre-defined allowlist?
    context: This question uses a strict, high-fidelity detection method. By maintaining an allowlist of legitimate parent-child process relationships for tools like 'tasklist.exe', any deviation from this list (e.g., 'outlook.exe' launching 'tasklist.exe') is a strong indicator of malicious activity and should be treated as a high-severity alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs FOR child_process IN discovery_utilities | IF parent_process NOT IN allowlist | ALERT
  - question: Has a rare parent-child process relationship been observed in the environment?
    context: This question seeks to identify anomalous process chains by analyzing their statistical rarity. By calculating the frequency of all parent-child pairs across the enterprise, pairs that fall into the bottom percentile (e.g., 1st percentile) are flagged. This can uncover novel attacker techniques that don't involve known malicious parent processes.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 30 days
    queries:
      - technology: pseudocode
        query: CALCULATE frequency of all parent_child_pairs over 30d | IF observed_pair_frequency < 1st_percentile | ALERT
  - question: Has a graph-based anomaly detection model identified a new parent-child process execution as structurally inconsistent with normal behavior?
    context: This question leverages a graph-based model of normal process behavior. Each process execution is an edge between two nodes (parent and child). The model learns the normal structure of this graph and flags new edges that are structurally unlikely, such as a word processor spawning a system utility, indicating a potential process injection or similar attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All endpoints and servers, particularly Domain Controllers and application servers, with parent-child process logging enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM process_creation_events | APPLY graph_anomaly_model | IF anomaly_score > threshold | ALERT
  - question: Has an application window discovery event been followed closely by collection, credential dumping, or exfiltration activity on the same host?
    context: This question correlates different stages of an attack. A window discovery action (T1010) is often a precursor to other malicious actions. This rule creates a high-severity alert if T1010 is followed within a short time window (e.g., 10 minutes) by indicators of collection, credential access, or exfiltration, suggesting a progressing intrusion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRIGGER on T1010_indicator | LOOK for T1560, T1003, or T1071 on same_host within 10_minutes | IF found | ALERT
  - question: Has a sequence of ATT&CK techniques, starting with discovery, occurred with a time delay that is a statistical outlier?
    context: This question aims to identify automated or scripted attack sequences. By modeling the typical time between different observed ATT&CK techniques, we can flag sequences (like Discovery followed by Collection) that happen unusually quickly. A time delta in the fastest 5th percentile suggests automation, which is characteristic of advanced threats.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL time_delta distribution for technique_pairs | IF observed_sequence('T1010' -> 'T1560') has time_delta in 5th_percentile | ALERT
  - question: Has a machine learning model, trained on attack sequences, predicted a high probability of transitioning from a Discovery state to a Collection or Exfiltration state?
    context: This question uses a predictive model like a Hidden Markov Model (HMM) or Recurrent Neural Network (RNN) to understand the adversary's next move. The model is trained on known attack paths and can generate a critical alert when it observes an event sequence that indicates a high probability of escalating from reconnaissance to data theft.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Windows Security Event ID 4663
      - Critical servers and user endpoints with comprehensive host logging; network gateways and VPN concentrators with traffic logging.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM security_events to RNN_model | IF model_predicts_high_probability_transition('Discovery' -> 'Exfiltration') | ALERT
  - question: Have any PowerShell scripts used Win32 API calls or .NET methods, possibly combined with obfuscation, to enumerate application windows?
    context: This question targets advanced PowerShell-based attacks that avoid standard command-line tools. It searches for script blocks that directly call low-level APIs for window enumeration (e.g., 'EnumWindows') and also looks for common obfuscation techniques (e.g., Base64 encoding), as these are often used together to evade detection.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH powershell_logs FOR regex('EnumWindows', 'GetWindowText') AND regex('FromBase64String', '-join') | ALERT
  - question: Have any PowerShell scripts exhibited unusually high entropy or a high ratio of non-alphanumeric characters?
    context: This question uses content-agnostic metrics to find obfuscated scripts. Malicious, obfuscated scripts often have higher character-level entropy and a greater proportion of symbols compared to benign administrative scripts. By flagging scripts where both metrics are statistical outliers (e.g., above the 98th percentile), we can find likely malicious code without relying on specific signatures.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each powershell_script | CALCULATE entropy, non_alpha_ratio | IF entropy > 98th_percentile AND non_alpha_ratio > 98th_percentile | ALERT
  - question: Has a deep learning model classified a PowerShell script as malicious with a high degree of confidence?
    context: This question applies advanced deep learning models (like CNNs or transformers) to classify PowerShell scripts. These models are trained on vast datasets of malicious and benign code and can identify complex, non-obvious patterns of maliciousness directly from the script text, providing a high-fidelity alerting mechanism for novel threats.
    answer_sources:
      - Windows Event ID 4104
      - All endpoints and servers with PowerShell v5+ and module/script block logging enabled, especially those used by administrators and developers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM powershell_scripts | APPLY deep_learning_classifier | IF classification == 'malicious' AND confidence > 0.95 | ALERT