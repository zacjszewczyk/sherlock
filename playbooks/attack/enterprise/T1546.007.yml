name: T1546.007: Netsh Helper DLL
id: b1a2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook is designed to detect adversarial use of Netsh Helper DLLs for persistence and privilege escalation (MITRE ATT&CK T1546.007). It focuses on identifying the registration of malicious DLLs through registry monitoring, analysis of `netsh.exe` command-line execution, and inspection of DLL properties such as file path, digital signature, and enterprise-wide prevalence. The investigative questions aim to uncover suspicious sequences of activity, such as a DLL being dropped and immediately registered, or `netsh.exe` spawning anomalous child processes, to address the dual threats of persistent access and elevation to higher integrity levels.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a new Netsh helper DLL been registered that is a known indicator of compromise?
    context: This question uses a symbolic approach to detect known threats. By monitoring for registry modifications specific to Netsh helpers and cross-referencing the associated DLL file against threat intelligence, analysts can quickly identify the use of known malicious tools or malware that leverage this persistence mechanism. A match provides a high-confidence signal of a compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13 (Registry Value Set)
      - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13, Win 4657)
          WHERE registry_key CONTAINS "HKLM\\SOFTWARE\\Microsoft\\Netsh"
          EXTRACT dll_path from event
          ENRICH file_hash, file_name from dll_path
          LOOKUP file_hash, file_name against threat_intelligence
          IF match, ALERT
  - question: Is a newly registered Netsh helper DLL using a filename with unusually high randomness (entropy) compared to legitimate helper DLLs?
    context: This question uses a statistical approach to identify potentially malicious DLLs. Adversaries often use randomly generated filenames for their malware to evade simple signature-based detections. By establishing a baseline for the filename entropy of legitimate Netsh helper DLLs in the environment, we can flag new registrations with unusually high-entropy names as outliers worthy of investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13 (Registry Value Set)
      - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13, Win 4657)
          WHERE registry_key CONTAINS "HKLM\\SOFTWARE\\Microsoft\\Netsh"
          EXTRACT file_name from event
          CALCULATE shannon_entropy(file_name)
          COMPARE entropy to baseline_95th_percentile
          IF entropy > baseline, ALERT
  - question: Based on a machine learning model, does a newly registered Netsh helper DLL exhibit a combination of features (entropy, path, signature, prevalence) that indicate it is likely malicious?
    context: This question leverages a machine learning model to provide a sophisticated risk assessment. A single suspicious attribute might be benign, but a combination of factors—high filename entropy, an unusual file path, a lack of a digital signature, and low prevalence—is a strong indicator of maliciousness. A classification model can learn these complex patterns to generate a risk score, allowing analysts to focus on the highest-risk events.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13 (Registry Value Set)
      - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new_netsh_helper_registration:
            GATHER features (filename_entropy, file_path_category, is_signed, hash_prevalence)
            INPUT features into classification_model
            GET risk_score
            IF risk_score > threshold, ALERT
  - question: Has `netsh.exe` been used to register a helper DLL from a suspicious parent process?
    context: This question focuses on the execution context of `netsh.exe`. While administrators or installers might legitimately register a helper DLL, execution by an unexpected parent process (e.g., a Microsoft Office application or a web browser) is highly suspicious. This rule helps differentiate legitimate administrative activity from adversarial execution.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1, Win 4688)
          WHERE process_name = "netsh.exe" AND command_line CONTAINS "add helper"
          IF parent_process NOT IN (cmd.exe, powershell.exe, mmc.exe, known_installers)
          THEN ALERT
  - question: Is a specific user account and parent process combination being used to register a Netsh helper DLL for the first time or with unusual infrequency?
    context: This question uses statistical analysis to baseline normal behavior. Adversaries often use compromised accounts to perform actions that are out-of-character for that user. By tracking the frequency of parent process-user account pairs that register Netsh helpers, we can identify statistical outliers that represent a deviation from normal administrative patterns.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each "netsh.exe add helper" event:
            EXTRACT parent_process, user_account
            LOOKUP frequency of (parent_process, user_account) pair in historical data
            IF frequency is below 5th percentile or zero
            THEN ALERT
  - question: Does the execution of `netsh.exe add helper` fall into a cluster of behavior that is anomalous compared to normal administrative activity?
    context: This question uses machine learning to identify anomalous execution patterns without pre-defined rules. By clustering `netsh.exe add helper` events based on features like user privileges, parent process, and time of day, the algorithm can learn what constitutes "normal" clusters of activity. Any event that does not fit into these clusters is flagged as a potential threat, capable of detecting novel attack patterns.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON "netsh.exe add helper" event:
            EXTRACT features (user_group, parent_process, time_of_day)
            INPUT features into DBSCAN clustering model
            IF event is classified as noise/outlier
            THEN ALERT
  - question: Has a new Netsh helper DLL been registered that is both unsigned and located in a user-writable directory?
    context: This question combines two highly suspicious attributes to create a high-fidelity alert. Legitimate system components are typically stored in protected system directories (like System32) and are digitally signed by a trusted vendor. A DLL that is both located in a common user folder (like AppData or Temp) and lacks a digital signature is very likely to be malicious.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - File integrity monitoring or EDR data for digital signatures
      - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13) for new Netsh helper
          EXTRACT dll_path
          ENRICH is_signed, is_in_user_dir from dll_path
          IF is_signed = false AND is_in_user_dir = true
          THEN ALERT
  - question: Is a newly registered Netsh helper DLL extremely rare across the enterprise?
    context: This question leverages the "power of the crowd" by assuming that legitimate software is widespread, while malware is often unique to a few compromised hosts. By maintaining an inventory of all Netsh helper DLLs and their prevalence (host count), we can flag any new DLL that is present on a very small number of endpoints (e.g., less than 1%) as a suspicious outlier requiring investigation. This is also known as stack counting.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - File integrity monitoring or EDR data for digital signatures
      - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON new Netsh helper registration:
            EXTRACT dll_hash
            QUERY enterprise inventory for prevalence of dll_hash
            IF prevalence < 5th percentile of all DLLs
            THEN ALERT
  - question: Has there been an anomalous spike in the number of new, unique Netsh helper DLLs being registered across the enterprise?
    context: This question uses time-series analysis to detect widespread campaigns. A sudden, sharp increase in the daily count of unique helper DLLs appearing in the environment can indicate that an adversary is deploying a new tool or polymorphic malware across multiple systems simultaneously. This provides a macro-level view of a potential coordinated attack.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - File integrity monitoring or EDR data for digital signatures
      - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE daily count of new, unique Netsh helper DLL hashes
          INPUT daily counts into time-series anomaly detection model (ARIMA)
          IF current count is a statistical anomaly (spike)
          THEN ALERT
  - question: Did a Netsh helper DLL registration event shortly precede the execution of `netsh.exe` which then spawned a suspicious child process?
    context: This question establishes a stateful correlation to detect a common attack chain. An adversary will often register a malicious DLL and then immediately trigger its execution by running `netsh.exe`. The malicious DLL's code then executes, often spawning a command shell or other tool for further actions. Detecting this specific sequence of events within a short time window provides strong evidence of malicious activity.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE events on same host within 10 minutes:
          SEQUENCE [A: Sysmon 13 to Netsh registry key],
                   [B: Sysmon 1 for "netsh.exe" process],
                   [C: Sysmon 1 for child process of B where child is (powershell.exe, cmd.exe, rundll32.exe)]
          IF sequence matches, ALERT
  - question: Following a Netsh helper registration, did `netsh.exe` make a network connection to a rare or suspicious destination?
    context: This question looks for post-exploitation network behavior. After a malicious helper DLL is loaded by `netsh.exe`, it may initiate a command-and-control (C2) beacon. By analyzing network connections from `netsh.exe` immediately following a registration event, we can identify suspicious activity. A connection to a low-reputation IP, a non-standard port, or a rarely seen domain is a strong indicator of a C2 channel.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON Netsh helper registration:
            MONITOR network connections (Sysmon 3, Zeek) from netsh.exe on same host
            FOR each connection:
              CALCULATE risk_score based on IP_rarity, port_risk, domain_rarity
              IF risk_score > threshold, ALERT
  - question: Does a sequence of host and network events, starting with a Netsh DLL registration, match a probabilistic model of a known malicious attack chain?
    context: This question uses a sophisticated sequence analysis model, like a Hidden Markov Model (HMM), to detect complex attack patterns. The model is trained to understand the probability of transitioning between different states (e.g., 'Benign Activity' -> 'Netsh DLL Registration' -> 'Anomalous Child Process'). When a real-time sequence of events is highly improbable under the benign model, it is flagged as a potential attack, allowing for the detection of nuanced and multi-stage threats.
    answer_sources:
      - Sysmon Event ID 13 (Registry Value Set)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 3 (Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FEED real-time event sequences (registry, process, network) into a trained HMM
          MODEL calculates probability of sequence given benign states
          IF probability is below a critical threshold
          THEN ALERT as a likely malicious sequence
  - question: Was a Netsh helper DLL first created by a medium-integrity process and then registered by a high-integrity `netsh.exe` process?
    context: This question specifically targets a privilege escalation technique. An attacker operating in a medium-integrity context (like a standard user) will drop a malicious DLL into a user-writable location. They then trick a high-integrity process into running `netsh.exe add helper` to register that DLL. The DLL then executes with the elevated privileges of the `netsh.exe` process. Detecting this specific sequence is a key indicator of privilege escalation.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 13 (Registry Value Set)
      - User profile directories (`C:\\Users\\*`), temporary folders, and process/registry logs on standard workstations and multi-user servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE events on same host within 5 minutes:
          SEQUENCE [A: Sysmon 11 for DLL creation by Medium integrity process in user path],
                   [B: Sysmon 1 for "netsh.exe add helper" with High/System integrity referencing same DLL]
          IF sequence matches, ALERT
  - question: Was a Netsh helper DLL registered within an unusually short time after the DLL file was created?
    context: This statistical approach helps identify "just-in-time" file drops characteristic of an attack. Legitimate DLLs are usually present on the system long before they are registered. An adversary, however, will often drop the malicious DLL and immediately register it. A very short time delta between file creation and registration is therefore highly anomalous and suggests the file was placed specifically for the purpose of this technique.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 13 (Registry Value Set)
      - User profile directories (`C:\\Users\\*`), temporary folders, and process/registry logs on standard workstations and multi-user servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON "netsh.exe add helper" event:
            EXTRACT dll_path
            GET creation_timestamp of dll_path
            CALCULATE time_delta = event_timestamp - creation_timestamp
            IF time_delta is in bottom 1st percentile of all deltas
            THEN ALERT
  - question: Based on a machine learning model, does a Netsh helper registration exhibit features consistent with a privilege escalation attempt?
    context: This question uses a classifier to automate the detection of a complex privilege escalation pattern. The model is trained to recognize the combination of features that signal this specific attack: a DLL located in a user-writable path, a lack of a digital signature, a short time between file creation and registration, and a medium-integrity process creating the file. This automates the correlation of multiple weak signals into a single high-confidence alert.
    answer_sources:
      - Sysmon Event ID 11 (File Create)
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 13 (Registry Value Set)
      - User profile directories (`C:\\Users\\*`), temporary folders, and process/registry logs on standard workstations and multi-user servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON Netsh helper registration:
            GATHER features (is_in_user_path, is_unsigned, time_delta_file_creation, creator_process_integrity)
            INPUT features into privilege_escalation_classifier
            IF prediction is "escalation"
            THEN ALERT
  - question: Did a high-integrity `netsh.exe` process spawn a suspicious child process like `cmd.exe` or `powershell.exe`?
    context: This question looks for the direct outcome of a successful privilege escalation. When a malicious helper DLL is loaded by a high-integrity `netsh.exe` process, it often spawns a command shell (`cmd.exe`, `powershell.exe`) or another utility to execute commands. This new process inherits the high integrity level of its parent, `netsh.exe`. Detecting `netsh.exe` spawning these types of child processes is a strong indication of a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1)
          WHERE parent_process_name = "netsh.exe"
          AND parent_integrity_level IN ("High", "System")
          AND child_process_name IN (powershell.exe, cmd.exe, whoami.exe, reg.exe)
          THEN ALERT
  - question: Has a high-integrity `netsh.exe` process spawned a child process that is rare or has never been seen before in the environment?
    context: This question uses statistical baselining to detect anomalous child processes. By profiling the normal child processes of `netsh.exe` across the enterprise, we can identify any execution that spawns a rare or first-seen child. This is effective for detecting the use of custom or uncommon tools by an attacker immediately after a successful privilege escalation via a Netsh helper DLL.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1)
          WHERE parent_process_name = "netsh.exe" AND parent_integrity_level IN ("High", "System")
          EXTRACT child_process_name, child_command_line
          LOOKUP prevalence of (child_process, command_line) tuple
          IF prevalence is in bottom 1st percentile or zero
          THEN ALERT
  - question: Is the command line of a process spawned by `netsh.exe` indicative of malicious activity, according to an NLP model?
    context: This question applies Natural Language Processing (NLP) to analyze the intent behind commands. While `netsh.exe` might legitimately spawn other processes, the command-line arguments can reveal malicious intent. An NLP model can be trained to distinguish between benign administrative commands and those associated with creating users, disabling security tools, or downloading more malware, providing a nuanced detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON child process from high-integrity "netsh.exe":
            EXTRACT command_line text
            VECTORIZE text using TF-IDF
            INPUT vector into Naive Bayes classifier
            IF prediction is "suspicious" or "malicious"
            THEN ALERT
  - question: Are there any Netsh helper DLLs or their associated registry keys with weak permissions that allow modification by non-administrators?
    context: This question focuses on proactive vulnerability discovery. If a Netsh helper DLL file or its registry key can be modified by a standard user, an attacker can hijack it to escalate privileges. This query periodically audits the Access Control Lists (ACLs) of these critical objects to find and flag misconfigurations before they can be exploited.
    answer_sources:
      - Configuration management database (CMDB)
      - EDR asset/vulnerability data
      - Output from custom audit scripts (e.g., PowerShell's `Get-Acl`)
      - Host-based configuration and permission audit data from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SCHEDULED_AUDIT:
            ENUMERATE all Netsh helper DLL paths and registry keys
            FOR each object:
              GET ACL
              IF ACL allows write access for ('Everyone', 'Users', 'Authenticated Users')
              THEN GENERATE finding
  - question: Are there any hosts with Netsh helper DLLs that have statistically outlier permission configurations, indicating high insecurity?
    context: This question uses a statistical method to prioritize vulnerability management. Instead of a simple binary check, it assigns a numerical "insecurity score" to the permissions of each Netsh helper. By creating a distribution of these scores, we can identify the hosts with the most dangerously misconfigured DLLs (e.g., those in the 99th percentile of insecurity) and prioritize them for remediation.
    answer_sources:
      - Configuration management database (CMDB)
      - EDR asset/vulnerability data
      - Output from custom audit scripts (e.g., PowerShell's `Get-Acl`)
      - Host-based configuration and permission audit data from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SCHEDULED_AUDIT:
            FOR each Netsh helper DLL:
              CALCULATE insecurity_score from its ACL
            IDENTIFY hosts with DLLs whose score > 99th percentile of all scores
            FLAG hosts for investigation
  - question: Based on host-level features, which machines are most likely to have insecure Netsh helper DLL configurations?
    context: This question uses a predictive model for proactive risk management. The model learns the characteristics of hosts that tend to have security misconfigurations (e.g., older OS, high number of local admins). This allows security teams to predict which machines are most likely to be vulnerable to this technique and proactively audit them, rather than scanning the entire enterprise.
    answer_sources:
      - Configuration management database (CMDB)
      - EDR asset/vulnerability data
      - Output from custom audit scripts (e.g., PowerShell's `Get-Acl`)
      - Host-based configuration and permission audit data from all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN classifier on host features (OS_version, user_roles, etc.) to predict "insecure_netsh_config"
          APPLY model to all hosts in inventory
          GENERATE list of hosts with high prediction probability
          PRIORITIZE these hosts for manual audit