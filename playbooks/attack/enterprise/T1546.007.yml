name: T1546.007: Netsh Helper DLL
id: 4e1a7b8c-9d0f-4e3a-8b1c-2f3a4b5c6d7e
description: This playbook is designed to detect adversaries establishing persistence or escalating privileges using Netsh Helper DLLs (T1546.007). The investigation focuses on identifying the registration of new or anomalous helper DLLs, often indicated by modifications to the `HKLM\SOFTWARE\Microsoft\Netsh` registry key, the execution of `netsh.exe` with `add helper` arguments, or the presence of helper DLLs in unusual locations (like user temp folders), that are unsigned, or have low prevalence across the enterprise. It also covers privilege escalation scenarios, such as when a high-integrity `netsh.exe` process executes a DLL recently dropped by a medium-integrity process, or when it spawns suspicious child processes like `powershell.exe` to inherit elevated privileges. Further indicators include sequential activity, such as a registry modification followed by `netsh.exe` execution and subsequent suspicious network connections, and misconfigurations like weak ACLs on the helper DLL file or its registry key that would permit unauthorized modification.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a new Netsh helper DLL been registered that is a known indicator of compromise?
  context: This question aims to detect the most straightforward persistence mechanism where an adversary registers a DLL whose hash or filename is already identified as malicious by threat intelligence. The action involves monitoring for registry writes to `HKLM\SOFTWARE\Microsoft\Netsh`, extracting the DLL path, and automatically checking its hash and filename against IOC databases. A match is a high-confidence indicator of a compromise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13 (Registry Value Set)
  - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search (Sysmon Event ID 13 OR Windows Event ID 4657) where (TargetObject contains "HKLM\\SOFTWARE\\Microsoft\\Netsh") | extract DLL_path | get_file_hash(DLL_path) | lookup_threat_intel(file_hash, file_name)
- question: Has a new Netsh helper DLL been registered with a filename exhibiting unusually high entropy?
  context: Adversaries often use randomly generated filenames for their malware to evade simple signature-based detections. This question uses a statistical approach to identify such files. By calculating the Shannon entropy of the filename for a newly registered helper DLL and comparing it to a baseline of known-good DLLs, we can flag outliers that are likely to be malicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13 (Registry Value Set)
  - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search (Sysmon Event ID 13 OR Windows Event ID 4657) where (TargetObject contains "HKLM\\SOFTWARE\\Microsoft\\Netsh") | extract filename | calculate_shannon_entropy(filename) | compare_to_baseline_entropy_distribution
- question: Does a newly registered Netsh helper DLL have characteristics that a machine learning model predicts as malicious?
  context: This question leverages a machine learning model to provide a more nuanced risk assessment than a single indicator. The model considers multiple features—such as filename entropy, file path (system vs. user directory), digital signature status, and enterprise-wide prevalence—to generate a risk score. This helps identify suspicious DLLs that might not match known IOCs but exhibit a combination of risky attributes.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13 (Registry Value Set)
  - Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: on_new_dll_registration | featurize(filename_entropy, file_path, digital_signature, hash_prevalence) | predict_risk_score
- question: Was `netsh.exe` used to add a helper DLL, and was it initiated by an unusual parent process?
  context: This question focuses on the execution of the command used to register a helper DLL. While administrators may use this command, it is unusual for it to be spawned by processes other than standard shells (`cmd.exe`, `powershell.exe`) or administrative tools. An alert on `netsh.exe add helper` with an uncommon parent process can indicate that an adversary's process is attempting to establish persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search (Sysmon Event ID 1 OR Windows Event ID 4688) where (ProcessName is "netsh.exe" AND CommandLine contains "add helper") AND ParentProcess not in (cmd.exe, powershell.exe, mmc.exe, known_installers)
- question: Was `netsh.exe add helper` executed by a user account and parent process combination that is a statistical outlier?
  context: Legitimate use of `netsh.exe add helper` typically comes from a small set of administrative users and processes. This question aims to identify anomalous executions by baselining normal activity. An execution by a user or from a parent process that has rarely or never performed this action before is a strong indicator of suspicious behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search (Sysmon Event ID 1 OR Windows Event ID 4688) where (ProcessName is "netsh.exe" AND CommandLine contains "add helper") | group_by(parent_process, user) | identify_rare_combinations
- question: Does a `netsh.exe add helper` execution event cluster with known benign administrative behavior, or is it an outlier?
  context: This question uses unsupervised machine learning to differentiate normal administrative activity from potential threats. By clustering `netsh.exe add helper` events based on features like user privileges, parent process, and time of day, we can define patterns of normalcy. Events that do not fit into any established cluster are flagged as outliers, representing significant deviations that warrant investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: on_netsh_add_helper_event | featurize(user_group, parent_process, time_of_day) | dbscan_clustering | identify_outliers
- question: Was a new Netsh helper DLL registered that is both digitally unsigned and located in a user-writable directory?
  context: Legitimate system DLLs are typically stored in protected system directories (like System32) and are digitally signed by a trusted publisher. This question identifies a high-risk combination of attributes: a DLL located in a common user-writable path (e.g., AppData, Temp) and lacking a digital signature. This pattern is highly indicative of a malicious payload dropped by an adversary.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - File integrity monitoring or EDR data for digital signatures
  - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
  range: last 90 days
  queries:
  - technology: SIEM
    query: on_registry_set(HKLM\\...\\Netsh) | get_dll_path | check_if_path_is_user_writable(dll_path) AND check_if_file_is_unsigned(dll_path) | alert_if_both_true
- question: Has a Netsh helper DLL been registered that has an exceptionally low prevalence across the enterprise?
  context: This question is based on the "stack counting" principle: legitimate software components are typically common across many systems, whereas malware is often unique or rare. By maintaining an inventory of all Netsh helper DLLs by their hash, we can identify newly registered DLLs that are present on only a few machines. Such low-prevalence files are highly suspicious and warrant investigation.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - File integrity monitoring or EDR data for digital signatures
  - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
  range: last 90 days
  queries:
  - technology: SIEM
    query: on_registry_set(HKLM\\...\\Netsh) | get_dll_hash | count_hosts_with_hash(dll_hash) | alert_if_count < threshold
- question: Has there been an anomalous spike in the registration of new, unique Netsh helper DLLs across the enterprise?
  context: A widespread malware campaign might involve deploying a new Netsh helper DLL across many hosts simultaneously. This question uses time series anomaly detection to monitor the daily rate of new, unique (by hash) helper DLL registrations. A sudden, statistically significant increase in this rate, especially if the DLLs are low-prevalence, could signal a coordinated attack.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - File integrity monitoring or EDR data for digital signatures
  - Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: aggregate_daily_new_unique_dll_hashes | apply_time_series_anomaly_detection_model | alert_on_spike
- question: Following a Netsh helper DLL registration, did `netsh.exe` execute and spawn a suspicious child process like `powershell.exe` or `cmd.exe`?
  context: This question identifies a specific sequence of events that strongly indicates malicious activity. An adversary registers a malicious DLL, then triggers its execution via `netsh.exe`, which in turn spawns a command shell or other utility to carry out further actions. Correlating these events (registry write -> `netsh.exe` execution -> suspicious child process) within a short time window provides a high-confidence alert for post-persistence execution.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
  range: last 90 days
  queries:
  - technology: SIEM
    query: correlate events on same host within 10 minutes: (1) Sysmon ID 13 with TargetObject contains "Netsh", then (2) Sysmon ID 1 with ProcessName "netsh.exe", then (3) Sysmon ID 1 with ParentProcess "netsh.exe" and ProcessName in (powershell.exe, cmd.exe, etc.)
- question: After a Netsh helper DLL was registered, did `netsh.exe` make a network connection to a statistically rare destination?
  context: A malicious Netsh helper DLL may be used to establish a command and control (C2) channel. This question looks for network connections made by `netsh.exe` shortly after a helper DLL registration. By analyzing the destination IP and domain, we can assign a risk score based on factors like IP prevalence, port usage, and DNS query frequency. A high-risk connection to a rare destination is a strong indicator of C2 activity.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
  range: last 90 days
  queries:
  - technology: SIEM
    query: on_registry_set(HKLM\\...\\Netsh) | monitor subsequent network connections from netsh.exe | score_destination_rarity(dest_ip, dest_port, domain) | alert_if_score > threshold
- question: Does the sequence of events following a Netsh helper DLL registration have a high probability of being malicious according to a sequence analysis model?
  context: This question uses a sophisticated machine learning model (like a Hidden Markov Model) to analyze the entire chain of events following a DLL registration. The model is trained on benign sequences of system activity and can calculate the probability of a new sequence occurring. A sequence involving DLL registration, process execution, and network connections that is highly improbable under the benign model is flagged as potentially malicious.
  answer_sources:
  - Sysmon Event ID 13 (Registry Value Set)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 3 (Network Connection)
  - Zeek conn.log
  - Zeek dns.log
  - Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: capture_event_sequence_post_registration | apply_HMM_model | calculate_sequence_probability | alert_if_probability < threshold
- question: Was a DLL created by a medium-integrity process in a user-writable directory and then quickly registered as a Netsh helper by a high-integrity process?
  context: This question targets a classic privilege escalation pattern. An adversary gains initial access as a standard user (medium integrity) and drops a malicious DLL. They then exploit a separate vulnerability or misconfiguration to get a high-integrity process (like `netsh.exe`) to load and execute their DLL. Detecting this specific sequence—medium-integrity file create followed by high-integrity registration of the same file—is a strong indicator of privilege escalation.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 13 (Registry Value Set)
  - User profile directories (C:\Users\*), temporary folders, and process/registry logs on standard workstations and multi-user servers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: correlate events on same host within 5 minutes: (1) Sysmon ID 11 for DLL in user path with IntegrityLevel:Medium, then (2) Sysmon ID 1 for "netsh.exe add helper" with IntegrityLevel:High/System referencing same DLL.
- question: Was a Netsh helper DLL registered with an anomalously short time delay between its creation and registration?
  context: Legitimate DLLs are typically present on a system long before they are used. In a privilege escalation attack, the malicious DLL is often created "just-in-time" for the exploit. This question identifies this behavior by calculating the time delta between a helper DLL's file creation and its registration. A very short delta (e.g., a few seconds or minutes) is a statistical anomaly and suggests the DLL was planted specifically for the attack.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 13 (Registry Value Set)
  - User profile directories (C:\Users\*), temporary folders, and process/registry logs on standard workstations and multi-user servers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: on "netsh.exe add helper" event | get_dll_path | find_creation_time(dll_path) | calculate_delta(registration_time, creation_time) | alert_if_delta < threshold
- question: Does a machine learning model classify a Netsh helper DLL registration event as a likely privilege escalation attempt based on its attributes?
  context: This question uses a supervised machine learning model to holistically assess the risk of a registration event. The model combines multiple weak indicators—such as the DLL being in a user path, being unsigned, the short time delta between creation and registration, and the integrity level of the creating process—into a single, actionable prediction. This approach is effective at identifying complex attacks that might evade simpler rules.
  answer_sources:
  - Sysmon Event ID 11 (File Create)
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 13 (Registry Value Set)
  - User profile directories (C:\Users\*), temporary folders, and process/registry logs on standard workstations and multi-user servers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: on_netsh_registration | featurize(is_user_path, is_unsigned, time_delta, creator_integrity_level) | predict_privesc_likelihood
- question: Did a high or system integrity `netsh.exe` process spawn a suspicious child process like `powershell.exe` or `cmd.exe`?
  context: The primary function of `netsh.exe` is network configuration, not launching shells or other utilities. When a high-integrity `netsh.exe` process (which may have been started to load a malicious helper DLL) spawns a child process like PowerShell, it is a strong indication that an adversary is using the helper DLL to execute commands with elevated privileges. The child process inherits the high integrity level, completing the privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search Sysmon ID 1 where (ParentImage is "netsh.exe" AND ParentIntegrityLevel in (High, System)) AND Image in (powershell.exe, cmd.exe, whoami.exe, etc.)
- question: Did `netsh.exe` spawn a child process that is statistically rare or has never been seen before?
  context: This question aims to detect anomalous behavior by baselining the normal child processes of `netsh.exe`. Across an enterprise, `netsh.exe` will typically have a very limited and predictable set of child processes (if any). By using frequency analysis (stack counting), we can easily spot when it spawns a process that is rare for a specific host or for the entire organization, which is a strong signal of malicious execution.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: SIEM
    query: search Sysmon ID 1 where ParentImage is "netsh.exe" | aggregate_by(Image, CommandLine) | identify_rare_or_new_child_processes
- question: Does the command line of a process spawned by `netsh.exe` appear malicious according to an NLP-based classification model?
  context: Adversaries often execute complex, obfuscated, or suspicious commands via shells spawned from their initial payload. This question uses Natural Language Processing (NLP) to analyze the command-line arguments of child processes. A model trained to recognize patterns associated with malicious activities (like reconnaissance, defense evasion, or downloading tools) can flag suspicious command lines that might be missed by simple keyword matching.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1 (Process Creation)
  - Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: on_netsh_child_process | get_command_line | featurize_with_tfidf | classify_as_benign_or_malicious
- question: Are there any registered Netsh helper DLLs or their corresponding registry keys with weak permissions that allow modification by non-administrators?
  context: This question proactively searches for a misconfiguration that an adversary could exploit for privilege escalation. If a non-administrative user can modify a Netsh helper DLL file or its registry entry, they could replace the legitimate DLL with a malicious one. A high-integrity process would then execute the malicious code. This audit identifies such vulnerabilities before they can be exploited.
  answer_sources:
  - Configuration management database (CMDB)
  - EDR asset/vulnerability data
  - Output from custom audit scripts (e.g., PowerShell's Get-Acl)
  - Host-based configuration and permission audit data from all endpoints and servers.
  range: last 90 days
  queries:
  - technology: Audit Script
    query: get_netsh_helpers | foreach_dll { get_acl(dll_path); get_acl(registry_key) } | check_if_acl_allows_write_by("Everyone", "Users", "Authenticated Users")
- question: Are there any hosts with Netsh helper DLLs whose file or registry permissions are statistical outliers in terms of insecurity?
  context: This question provides a way to prioritize vulnerability remediation by identifying the "worst" offenders. By assigning a numerical score to weak permissions (e.g., giving a higher score to 'FullControl' for 'Everyone' than 'Write' for 'Users'), we can score every Netsh helper configuration. Hosts with configurations that are statistical outliers (e.g., in the 99th percentile of insecurity) represent the highest risk and should be investigated first.
  answer_sources:
  - Configuration management database (CMDB)
  - EDR asset/vulnerability data
  - Output from custom audit scripts (e.g., PowerShell's Get-Acl)
  - Host-based configuration and permission audit data from all endpoints and servers.
  range: last 90 days
  queries:
  - technology: Audit Script
    query: scan_all_netsh_helpers | score_acl_insecurity | identify_outliers_with_high_scores
- question: Can we predict which hosts are most likely to have insecure Netsh helper DLL configurations based on their overall characteristics?
  context: Instead of scanning every host, this question uses a predictive model to identify assets that are most likely to be vulnerable. The model can be trained on host-level features (like its role, OS version, or number of users) to predict the likelihood of misconfigurations. This allows security teams to focus their limited audit and remediation resources on the highest-risk assets.
  answer_sources:
  - Configuration management database (CMDB)
  - EDR asset/vulnerability data
  - Output from custom audit scripts (e.g., PowerShell's Get-Acl)
  - Host-based configuration and permission audit data from all endpoints and servers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: featurize_host(os_version, role, user_count) | predict_likelihood_of_insecure_config | prioritize_hosts_for_audit