name: "T1675: ESXi Administration Command"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps investigate whether an adversary has executed commands on guest virtual machines (VMs) using ESXi administration services. This is typically observed through the vmtoolsd.exe process on a guest VM. Indicators of this activity include vmtoolsd.exe spawning processes that match known-bad indicators, spawning command-line interpreters or scripting engines (like cmd.exe or powershell.exe), or spawning child processes that are not on an established baseline of normal activity. Further evidence can be found by correlating network connections from an ESXi host to a guest VM on TCP port 902 with subsequent anomalous process creation on that guest. Widespread activity, where a single source IP initiates these guest operations across a large number of VMs in a short period, is a strong indicator of lateral movement or mass deployment of malware."
type: "technique"
related: 
  - "TA0002: Execution"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a process spawned by vmtoolsd.exe shown activity matching known threat intelligence indicators?"
    context: |
      This question aims to identify direct matches to known malicious activity. When an adversary uses the ESXi `GuestProcessManager.StartProgramInGuest` API, it results in `vmtoolsd.exe` spawning a child process on the guest VM. By correlating the child process's hash, command-line arguments, and subsequent network activity (destination IPs, DNS queries) with threat intelligence feeds, we can detect known malicious tools or infrastructure being used. This is a high-confidence method for identifying compromised systems.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
      - "Network Egress Points"
      - "Threat Intelligence Platforms"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each event WHERE event_type is "process_creation" AND parent_process is "vmtoolsd.exe":
            LET child_process = event.process
            LET child_hash = event.hash
            LET cmd_line = event.command_line
            LET network_events = SEARCH network_logs WHERE source_ip is event.host AND process_id is event.process_id
            IF child_hash OR cmd_line OR network_events.destination_ip OR network_events.dns_query IN threat_intel_feed:
              ALERT(event)
  - question: "Has vmtoolsd.exe spawned a process with a statistically rare or unusual command line?"
    context: |
      Adversaries often use custom scripts or obscure commands that deviate from normal administrative activity. This question focuses on finding these anomalies without relying on pre-existing indicators. By calculating the historical frequency (TF-IDF) of words and paths in command lines for processes spawned by `vmtoolsd.exe`, we can flag commands containing rare tokens. This can uncover novel or obfuscated attack techniques that threat intelligence might not yet cover.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
      - "Network Egress Points"
      - "Threat Intelligence Platforms"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET baseline = CALCULATE_TF-IDF for all command_line_tokens from "vmtoolsd.exe" child processes over last 90 days
          FOR each new event WHERE parent_process is "vmtoolsd.exe":
            LET tokens = PARSE(event.command_line)
            FOR each token in tokens:
              IF baseline.score(token) < 1st_percentile:
                ALERT(event, "Rare command-line token found")
  - question: "Does the command line of a process spawned by vmtoolsd.exe have features consistent with malicious commands?"
    context: |
      This question applies machine learning to proactively score the risk of a command line, even in the absence of exact matches or extreme statistical rarity. By training a model on features like string length, character entropy, and the presence of keywords (e.g., 'esxcli', 'rundll32.exe'), the system can learn the general characteristics of malicious commands. This allows for the detection of suspicious commands that might look subtly different from known-bad examples but share underlying malicious traits.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
      - "Network Egress Points"
      - "Threat Intelligence Platforms"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET ml_model = LOAD_TRAINED_CLASSIFIER("command_line_model")
          FOR each new event WHERE parent_process is "vmtoolsd.exe":
            LET features = EXTRACT_FEATURES(event.command_line) // length, entropy, keywords
            LET score = ml_model.PREDICT(features)
            IF score > high_threshold:
              ALERT(event, "High maliciousness score from ML model")
  - question: "Did vmtoolsd.exe spawn a command-line interpreter or scripting engine?"
    context: |
      This is a very high-confidence indicator of malicious activity. Legitimate VMware Tools operations do not involve `vmtoolsd.exe` directly launching shells like `cmd.exe`, `powershell.exe`, or `bash`. An adversary using this technique to gain execution on a guest VM will almost certainly use a shell to run subsequent commands. Detecting this specific parent-child relationship is a critical and immediate sign of compromise.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET shell_list = ["cmd.exe", "powershell.exe", "pwsh.exe", "wscript.exe", "cscript.exe", "sh", "bash", "zsh", "rundll32.exe"]
          FOR each event WHERE event_type is "process_creation" AND parent_process is "vmtoolsd.exe":
            IF event.process_name IN shell_list:
              ALERT(event, "High-priority: Shell spawned from vmtoolsd.exe")
  - question: "Have any hosts exhibited vmtoolsd.exe spawning shell processes, and has the variety of child processes increased?"
    context: |
      This question establishes a baseline expectation that `vmtoolsd.exe` should never spawn shell processes. Any deviation from this zero-count baseline is an immediate red flag. Additionally, by monitoring the entropy of parent-child process pairs, we can detect when `vmtoolsd.exe` starts spawning an uncharacteristically diverse set of child processes, which could indicate an adversary experimenting or deploying multiple tools.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 30 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each host:
            LET shell_spawn_count = COUNT events WHERE parent_process is "vmtoolsd.exe" AND child_process is a shell OVER 30 days
            IF shell_spawn_count > 0:
              ALERT(host, "Shell process spawned by vmtoolsd.exe detected")
  - question: "Has a sequence of process executions occurred that is anomalous because it includes vmtoolsd.exe spawning a shell?"
    context: |
      This question uses a more advanced, context-aware detection method. Instead of just looking at a single parent-child pair, a sequence analysis model (like an LSTM) learns the normal flow of process creations on a system. The sequence `... -> vmtoolsd.exe -> powershell.exe -> ...` would be a significant deviation from any learned legitimate sequence. This method is powerful because it can identify the malicious step within a broader chain of activity, providing richer context for an investigation.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET sequence_model = LOAD_TRAINED_LSTM_MODEL("process_sequence_model")
          FOR each new process_creation_event:
            LET current_sequence = GET_PROCESS_CHAIN(event)
            LET anomaly_score = sequence_model.SCORE(current_sequence)
            IF anomaly_score is high AND "vmtoolsd.exe -> shell" in current_sequence:
              ALERT(event, "Anomalous process sequence involving vmtoolsd.exe")
  - question: "Did vmtoolsd.exe spawn a child process that is not on the pre-approved allowlist?"
    context: |
      This question implements a strict, allowlist-based security posture. The set of legitimate child processes for `vmtoolsd.exe` is typically very small or even empty. By defining this "known-good" set, any process creation that falls outside of it is immediately treated as suspicious. This is an effective method for environments where VMware Tools behavior is highly predictable and standardized.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET allowlist = ["VMwareUser.exe"]
          FOR each event WHERE event_type is "process_creation" AND parent_process is "vmtoolsd.exe":
            IF event.process_name NOT IN allowlist:
              ALERT(event, "Non-allowlisted process spawned by vmtoolsd.exe")
  - question: "Has vmtoolsd.exe spawned a child process that is rarely seen across the environment?"
    context: |
      This question helps to automatically identify unusual child processes without maintaining a manual allowlist. By calculating the prevalence of each child process across all guest VMs, we can flag those that appear on only a small number of hosts. A process spawned by `vmtoolsd.exe` on only one or two machines is a strong candidate for investigation, as it could be a malicious tool deployed to a specific target.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 30 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET process_counts = COUNT(DISTINCT host) by child_process_name WHERE parent_process is "vmtoolsd.exe" OVER 30 days
          LET total_hosts = COUNT(DISTINCT host)
          FOR each process, count in process_counts:
            LET prevalence = count / total_hosts
            IF prevalence < 0.01:
              ALERT(process, "Statistically rare child process for vmtoolsd.exe")
  - question: "Has vmtoolsd.exe spawned a child process that an unsupervised machine learning model flags as an anomaly?"
    context: |
      This question leverages unsupervised learning to build a profile of "normal" `vmtoolsd.exe` child process activity and then identify deviations. Algorithms like Isolation Forest or one-class SVM can be trained on features of legitimate events (process name, command-line properties, user context). They can then flag new events that don't fit this profile, providing a way to detect novel or unknown malicious techniques without prior labeling or explicit rules.
    answer_sources:
      - "Windows Event ID 4688"
      - "Guest Virtual Machines (especially Domain Controllers, Database Servers)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET anomaly_model = LOAD_TRAINED_ISOLATION_FOREST("vmtoolsd_children_model")
          FOR each new event WHERE parent_process is "vmtoolsd.exe":
            LET features = EXTRACT_FEATURES(event)
            IF anomaly_model.PREDICT(features) is "outlier":
              ALERT(event, "Anomalous child process detected by unsupervised model")
  - question: "Was a network connection from an ESXi host to a guest VM on port 902 quickly followed by suspicious process activity on that guest?"
    context: |
      This question links the network activity that initiates the guest operation with the resulting process execution on the VM. A connection from an ESXi host to a guest on TCP port 902 is expected for VMware Tools operations. However, if this connection is immediately followed (e.g., within 2 minutes) by `vmtoolsd.exe` spawning a shell or running reconnaissance commands (`whoami`, `net user`), it strongly indicates that the guest operation was malicious. This correlation provides a clear cause-and-effect chain of evidence.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Zeek dns.log"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
      - "Virtual Machine Network Segments"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each network_event WHERE dest_port is 902 AND source_ip is in ESXI_HOST_LIST:
            LET suspicious_processes = SEARCH process_logs WHERE host is network_event.dest_ip
              AND parent_process is "vmtoolsd.exe"
              AND (process_name is shell OR command_line contains recon_commands)
              AND timestamp is within 2 minutes of network_event.timestamp
            IF suspicious_processes exist:
              ALERT(network_event, suspicious_processes)
  - question: "Has there been an anomalous spike in network traffic on TCP port 902 from an ESXi host to a guest VM?"
    context: |
      This question focuses on identifying anomalies in the volume of communication for guest operations. A sudden, significant increase in the amount of data or the number of connections on port 902 from an ESXi host to a guest VM can indicate unusual activity, such as an adversary transferring a large tool or issuing many rapid commands. Correlating this network spike with a subsequent increase in processes spawned by `vmtoolsd.exe` on the same guest VM strengthens the evidence of malicious use.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Zeek dns.log"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
      - "Virtual Machine Network Segments"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each guest_vm:
            LET baseline = CALCULATE_MOVING_AVG(traffic_volume on port 902 from ESXi hosts) over 90 days
            LET current_volume = GET_CURRENT_VOLUME()
            IF current_volume > baseline + 3 * STD_DEV(baseline):
              ALERT(guest_vm, "Anomalous spike in port 902 traffic")
  - question: "Can we identify a graph pattern representing an ESXi host connecting to a guest VM and causing an anomalous process to be spawned?"
    context: |
      This question models the attack as a chain of relationships in a graph, providing a powerful and intuitive way to visualize and detect the full attack path. By representing hosts, processes, and their connections as a graph, we can specifically search for the pattern of an ESXi host connecting to a guest on port 902, which then leads to `vmtoolsd.exe` spawning a suspicious child process. This approach is excellent for discovering complex, multi-stage activities that might be missed by simple event correlation.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Zeek dns.log"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
      - "Virtual Machine Network Segments"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          CONSTRUCT graph from network_logs and process_logs
          SEARCH for pattern:
            (node_A:ESXi_Host) -[rel_1:CONNECTS_ON_902]-> (node_B:Guest_VM)
            (node_C:Process {name:"vmtoolsd.exe", host:node_B}) -[rel_2:SPAWNS]-> (node_D:Anomalous_Process)
            WHERE rel_1.timestamp is close to rel_2.timestamp
            RETURN pattern
  - question: "Has a single source IP address initiated guest operations via vmtoolsd.exe on an abnormally large number of guest VMs in a short time?"
    context: |
      This question aims to detect large-scale, automated attacks like ransomware deployment or widespread lateral movement. A legitimate administrator might perform an operation on a few VMs at once, but an attacker's script could target tens or hundreds of machines in minutes. By setting a threshold (e.g., more than 10 distinct VMs targeted by one source IP in 5 minutes), we can effectively detect this "fan-out" behavior, which is a strong indicator of a coordinated attack.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Guest Virtual Machines (fleet-wide)"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each 5_minute_window:
            AGGREGATE events by source_ip where parent_process is "vmtoolsd.exe"
            FOR each source_ip:
              LET distinct_targets = COUNT(DISTINCT target_vm)
              IF distinct_targets > 10:
                ALERT(source_ip, "High fan-out detected")
  - question: "Has the diversity (entropy) of guest VMs targeted by a single source IP for guest operations suddenly increased?"
    context: |
      This question provides a more dynamic way to detect fan-out activity than a static threshold. Shannon entropy measures the randomness or unpredictability of a set of targets. A low entropy means a source IP is repeatedly targeting the same few VMs, which might be normal. A sudden, high entropy means the source is now targeting a wide and diverse set of new VMs, which is highly anomalous and suggests scanning or mass deployment.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Guest Virtual Machines (fleet-wide)"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          FOR each source_ip in 10_minute_windows:
            LET target_set = GET_DISTINCT_TARGET_VMS(source_ip)
            LET current_entropy = CALCULATE_SHANNON_ENTROPY(target_set)
            LET baseline_entropy = GET_HISTORICAL_ENTROPY(source_ip)
            IF current_entropy is significantly higher than baseline_entropy:
              ALERT(source_ip, "Sudden increase in target entropy")
  - question: "Can we identify a dense cluster of guest operation events originating from a single source IP targeting many different VMs in a short time?"
    context: |
      This question uses clustering to find groups of related malicious activity. A density-based algorithm like DBSCAN can automatically group events that are close to each other in time and originate from the same source but target different destinations. A large, dense cluster found by the algorithm would represent a burst of activity, like a ransomware script rapidly encrypting files across many VMs, making it a powerful tool for discovering coordinated attacks.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Guest Virtual Machines (fleet-wide)"
      - "ESXi Host Management Interfaces"
      - "vCenter Server"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: |
          LET events = GET all vmtoolsd.exe spawn events with source_ip, target_vm, timestamp
          LET clusters = DBSCAN(events, features=[source_ip, timestamp, target_vm])
          FOR each cluster in clusters:
            IF cluster is dense AND has single source_ip AND multiple target_vms:
              ALERT(cluster, "Anomalous dense cluster of guest operations found")