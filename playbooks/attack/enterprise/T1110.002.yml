name: T1110.002: Password Cracking
id: d6e8f7a0-b1c2-4d3e-8f9a-0b1c2d3e4f5a
description: This playbook helps determine if an adversary has obtained valid credentials through password cracking. It provides investigative questions to detect various stages of this technique, including the use of known cracking utilities like Hashcat or John the Ripper, the precursor activity of dumping credentials using tools like Mimikatz, unauthorized access to credential stores like LSASS or the NTDS.dit file, and indicators of compromised credentials such as anomalous successful logins from new locations. It also includes methods to correlate a sequence of events, from credential store access to data exfiltration and subsequent malicious login, to build a high-confidence case of password cracking.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known password cracking tool been executed or transferred on the network?
    context: This question aims to detect the presence of password cracking utilities like Hashcat or John the Ripper. Detecting the execution (via process creation logs) or transfer (via network file logs) of these tools is a strong indicator of a password cracking attempt. This symbolic approach relies on matching file names or hashes against a curated watchlist of malicious tools.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Endpoint workstations
      - Development servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation OR file_transfer WHERE file_name IN (watchlist) OR file_hash IN (watchlist)
  - question: Are there process execution events with unusually high-entropy command-line arguments that might indicate password cracking?
    context: This question seeks to identify password cracking activity by analyzing the complexity of command-line arguments. Password cracking tools are often fed long, encoded, or randomized strings of password hashes. By calculating the Shannon entropy of command-line arguments for process creation events and comparing it to a baseline, we can flag statistically significant deviations that suggest a tool is processing a hash list rather than normal parameters.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint workstations
      - Development servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation | CALCULATE shannon_entropy(command_line) | WHERE shannon_entropy > baseline_threshold
  - question: Can we identify process execution events that are highly likely to be password cracking attempts using a machine learning model?
    context: This question leverages a machine learning classifier to distinguish between legitimate administrative tool usage and malicious password cracking attempts. By training a model on features like the parent process, user context, command-line entropy, and argument patterns, we can score new process events. This provides a more nuanced detection method that can identify novel or obfuscated tools that might be missed by symbolic or simple statistical methods.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint workstations
      - Development servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation | SCORE with ML_model(features) | WHERE score > malicious_threshold
  - question: Has a known credential dumping command-line pattern been observed in process logs?
    context: This question focuses on detecting the precursor activity to offline password cracking, which is the acquisition of credential hashes. By using regular expressions to search process command-line logs for patterns specific to tools like Mimikatz (`sekurlsa::logonpasswords`), native Windows utilities (`ntdsutil.exe ac i ntds`), or volume shadow copies (`vssadmin create shadow`), we can identify attempts to dump credentials from memory or disk.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation WHERE command_line MATCHES REGEX (`sekurlsa::logonpasswords`|`lsadump::sam`|`ntdsutil.exe ac i ntds`|`vssadmin create shadow`)
  - question: Has there been a statistical anomaly in the usage of ntdsutil.exe, particularly the 'ifm' subcommand?
    context: This question provides a statistical method to detect abuse of the `ntdsutil.exe` utility. The 'Install From Media' (`ifm`) subcommand can be used to create a copy of the NTDS.dit database, which contains all Active Directory domain hashes. This command is rarely used in normal operations. Alerting on any use of this subcommand, especially on non-Domain Controller systems, can be a high-fidelity indicator of credential theft.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation WHERE process_name = "ntdsutil.exe" AND command_line CONTAINS "ifm" | COUNT by host | WHERE count > 0
  - question: Has a time-series anomaly been detected in the execution frequency of ntdsutil.exe or vssadmin.exe?
    context: This question uses machine learning to identify unusual spikes in the execution of utilities commonly abused to acquire credential hashes. A time-series anomaly detection model can learn the normal baseline frequency of `ntdsutil.exe` and `vssadmin.exe` usage per host. A sudden, anomalous spike, particularly outside of standard maintenance or backup windows, strongly suggests an adversary is attempting to create a copy of the credential store for offline cracking.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Member Servers
      - Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation WHERE process_name IN ("ntdsutil.exe", "vssadmin.exe") | TIMESERIES_ANOMALY_DETECTION on count by host | WHERE anomaly_detected
  - question: Has a non-allowlisted process attempted to access LSASS memory, the SAM file, or the NTDS.dit file?
    context: This question aims to detect direct attempts to steal credentials from their storage locations. A symbolic rule can be created to alert any time a process that is not on a pre-approved allowlist (e.g., legitimate security software) tries to read the memory of the LSASS process, the SAM file, or the NTDS.dit database. This is a very high-fidelity indicator of credential dumping activity.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Sysmon Event ID 10
      - Domain Controllers
      - Authentication Servers
      - Endpoint workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH (process_access WHERE target_process = "lsass.exe") OR (file_access WHERE target_file IN ("SAM", "ntds.dit")) WHERE source_process NOT IN (allowlist)
  - question: Has a statistically rare process been observed accessing the LSASS process memory?
    context: This question seeks to identify credential dumping by focusing on the rarity of the process accessing LSASS. By profiling normal system behavior, we can build a frequency table of which processes typically access LSASS memory. Any access from a source process that is statistically rare (e.g., seen on less than 1% of endpoints) should be considered suspicious and flagged for investigation, as it may indicate a novel or custom dumping tool.
    answer_sources:
      - Sysmon Event ID 10
      - Domain Controllers
      - Authentication Servers
      - Endpoint workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_access WHERE target_process = "lsass.exe" | LOOKUP process_rarity(source_process) | WHERE rarity < threshold
  - question: Can a machine learning model classify LSASS access events as benign or malicious?
    context: This question applies a supervised machine learning model to add context and reduce false positives when analyzing LSASS process access events. By training a model with features like the source process, parent process, user, and requested access rights, it can learn to distinguish legitimate administrative actions from malicious credential dumping attempts, even from uncommon tools that might otherwise be missed.
    answer_sources:
      - Sysmon Event ID 10
      - Domain Controllers
      - Authentication Servers
      - Endpoint workstations
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_access WHERE target_process = "lsass.exe" | SCORE with LSASS_access_model(features) | WHERE score > malicious_threshold
  - question: Has a privileged account successfully logged in from a known malicious IP address?
    context: This question seeks to identify the successful use of cracked credentials by cross-referencing login events with threat intelligence. A successful interactive or remote login by a privileged user is already a noteworthy event; if that login originates from an IP address found on a watchlist of known malicious infrastructure (e.g., C2 servers, TOR exit nodes), it is a high-confidence indicator of a compromised account.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - VPN Gateways
      - External-facing services (OWA, RDP gateways)
      - Authentication servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH successful_login WHERE account_is_privileged AND source_ip IN (threat_intel_watchlist)
  - question: Has a user account logged in from a novel location without any prior failed login attempts from that source?
    context: This question uses a statistical approach to detect the use of cracked credentials. Adversaries who already possess a valid password will not generate failed login attempts. This rule flags successful logins that exhibit multiple risky properties, such as originating from a new country or ISP for that user, but critically, are not preceded by a cluster of failed logins from that same source. This combination points towards a cracked password rather than a brute-force attempt.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - VPN Gateways
      - External-facing services (OWA, RDP gateways)
      - Authentication servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each successful_login | IF source_ip is_novel AND count(failed_logins from source_ip in last 24h) == 0 | THEN ALERT
  - question: Have there been any user logins that are statistical outliers based on location, time, and day?
    context: This question uses unsupervised machine learning to detect 'impossible travel' or other highly anomalous login behavior. By clustering a user's historical login data based on features like geolocation, time of day, and day of week, we can establish a pattern of normal activity. Any new login that does not fit into an established cluster is considered an outlier or noise, representing a significant deviation that could indicate a compromised credential.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - VPN Gateways
      - External-facing services (OWA, RDP gateways)
      - Authentication servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH successful_logins | CLUSTER by user using (source_geo, time_of_day, day_of_week) | WHERE cluster_label = "outlier"
  - question: Has a sequence of suspicious credential backup, large data egress, and anomalous external login been observed?
    context: This question uses a multi-stage correlation rule to connect the entire password cracking attack chain, from credential acquisition to use. It looks for a specific sequence of events in order: 1) a suspicious command to back up a credential store (e.g., `ntdsutil ifm`), 2) a large, anomalous data transfer from the same host shortly after, and 3) a successful login from a new external IP using a domain account within the next few days. Alerting on this full sequence provides an extremely high-confidence indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4663
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Domain Controllers
      - File Servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE (ntdsutil_backup_event) -> (large_egress_event within 1h) -> (anomalous_external_login_event within 72h)
  - question: Following a credential store backup event, was there a statistically anomalous volume of outbound data from the same host?
    context: This question provides a statistical method to link credential acquisition with data exfiltration. After a trigger event, such as the use of `ntdsutil ifm`, this query specifically checks if the volume of outbound network traffic from that same host in the following hour is a statistical outlier compared to its normal baseline. Correlating this data egress anomaly with the initial backup event strengthens the evidence that the credential store was not just copied, but also stolen.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Domain Controllers
      - File Servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ON ntdsutil_backup_event(host) | CHECK outbound_traffic_volume(host) for next 1h | IF volume > 99th_percentile_baseline | THEN ALERT
  - question: Has a machine learning model detected a low-probability, high-risk sequence of events indicative of credential theft and use?
    context: This question leverages a sequence analysis model, like a Hidden Markov Model, to identify the full password cracking attack chain as a single, high-risk event. The model is trained on normal sequences of administrative activity. An anomalous sequence, such as suspicious backup followed by anomalous data egress and then an anomalous remote login, would be identified by the model as a very low-probability sequence, allowing it to generate a single, high-confidence alert for the entire attack pattern.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4663
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Domain Controllers
      - File Servers
      - Network egress points
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FEED event_stream into Sequence_Analysis_Model | IF model_detects_sequence(`Suspicious Backup` -> `Anomalous Egress` -> `Anomalous Login`) | THEN ALERT