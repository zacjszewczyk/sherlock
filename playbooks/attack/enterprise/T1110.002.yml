name: 'T1110.002: Password Cracking'
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary has obtained valid credentials through password cracking. It focuses on detecting the use of password cracking utilities, precursor activities like credential dumping (e.g., using Mimikatz or ntdsutil), unauthorized access to sensitive credential stores like LSASS memory or the NTDS.dit file, anomalous successful logins that suggest a compromised credential is being used, and correlated event sequences that link credential acquisition to data exfiltration and subsequent misuse.
type: technique
related:
  - 'TA0006: Credential Access'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Have any known password cracking tools been executed or transferred within the environment?
    context: This question aims to identify the direct use of password cracking utilities like Hashcat or John the Ripper. Detecting the execution or transfer of these tools provides strong evidence of a password cracking attempt. A SIEM rule matching file hashes or names against a known-tool watchlist is a direct, high-fidelity method for detection.
    answer_sources:
      - 'Zeek files.log'
      - 'Windows Event ID 4688'
      - 'NAI: Endpoint workstations, Development servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs OR file_transfer_logs WHERE (file_hash IN (password_cracking_tool_hashes) OR file_name IN (password_cracking_tool_names))
  - question: Are there any process executions with unusually high-entropy command-line arguments that might indicate the use of password cracking tools with encoded hash lists?
    context: Password cracking tools are often fed long, encoded, or encrypted strings of password hashes. These strings have high character randomness (entropy) compared to normal command-line arguments. By calculating the Shannon entropy of arguments for all process executions and flagging statistical outliers (e.g., those in the 95th percentile), we can uncover potential password cracking activity even if the tool itself is not on a known watchlist.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'NAI: Endpoint workstations, Development servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs | CALCULATE shannon_entropy(command_line) | FILTER shannon_entropy > (95th_percentile_for_process)
  - question: Can machine learning models identify process executions that are highly likely to be password cracking attempts based on a combination of features?
    context: This question leverages a machine learning classifier to provide a more nuanced detection method than simple rules or statistical thresholds. By training a model on features like the parent process, user context, command-line entropy, and specific argument patterns, the system can learn to distinguish complex malicious behavior from benign administrative actions, thereby improving detection accuracy and reducing false positives.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'NAI: Endpoint workstations, Development servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE process_creation_events WITH classification_model | FILTER score > suspicious_threshold
  - question: Are there any command-line executions matching known patterns for credential dumping?
    context: This question seeks to detect the precursor activity to offline password cracking by identifying the use of commands associated with tools like Mimikatz or native Windows utilities (ntdsutil, vssadmin) to dump credentials. Detecting these patterns provides an early warning that credential data has been compromised and may be targeted for cracking.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, Member Servers, Privileged Access Workstations (PAWs)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE command_line MATCHES_REGEX ('sekurlsa::logonpasswords|lsadump::sam|ntdsutil.exe ac i ntds|vssadmin create shadow')
  - question: Has the 'ntdsutil.exe' utility been used with the 'Install From Media' (ifm) subcommand in a statistically unusual manner?
    context: The 'ntdsutil ifm' command is a legitimate method for creating a copy of the Active Directory database (NTDS.dit), but it is also a common technique for adversaries to acquire password hashes for offline cracking. Since this command is rarely used in normal day-to-day operations, any execution, especially on non-Domain Controller systems, is highly suspicious and warrants investigation.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, Member Servers, Privileged Access Workstations (PAWs)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name == 'ntdsutil.exe' AND command_line CONTAINS 'ifm' | COUNT by host | FILTER count > 0
  - question: Has a machine learning model detected anomalous spikes in the execution frequency of 'ntdsutil.exe' or 'vssadmin.exe'?
    context: Adversaries often use 'ntdsutil.exe' and 'vssadmin.exe' to create shadow copies and extract the NTDS.dit file. While these tools have legitimate uses, a sudden, anomalous burst of activity involving them can indicate a credential acquisition attempt. A time-series anomaly detection model can identify such spikes relative to a learned baseline of normal activity for each host.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, Member Servers, Privileged Access Workstations (PAWs)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ANALYZE time_series of process_creation_events for 'ntdsutil.exe', 'vssadmin.exe' by host | DETECT outliers
  - question: Has any non-whitelisted process attempted to access LSASS process memory, the SAM file, or the NTDS.dit database?
    context: Direct access to critical credential stores like the LSASS process memory, the SAM file, or the NTDS.dit database by any process not on an explicit allowlist (e.g., system processes, approved security tools) is a very strong indicator of a credential theft attempt. This question aims to find such unauthorized access events, which are high-fidelity alerts.
    answer_sources:
      - 'Windows Event ID 4656'
      - 'Windows Event ID 4663'
      - 'Sysmon Event ID 10'
      - 'NAI: Domain Controllers, Authentication Servers, Endpoint workstations'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_access_logs WHERE (target_process == 'lsass.exe' OR target_file IN ('SAM', 'ntds.dit')) AND source_process NOT IN (allowlist)
  - question: Have there been statistically rare process access events targeting LSASS?
    context: Even legitimate tools can access LSASS, creating noise. This question helps filter that noise by identifying process interactions with LSASS that are statistically rare across the environment. By building a frequency profile of which processes access LSASS and from what call stack, we can flag access events from sources that are uncommon and therefore more likely to be malicious.
    answer_sources:
      - 'Sysmon Event ID 10'
      - 'NAI: Domain Controllers, Authentication Servers, Endpoint workstations'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH sysmon_event_10_logs WHERE TargetImage == 'lsass.exe' | CALCULATE frequency of (SourceImage, CallTrace) tuple | FILTER frequency < rarity_threshold
  - question: Can a machine learning model classify LSASS access events as benign or malicious based on their features?
    context: This question proposes using a supervised machine learning model to provide a confident score on the maliciousness of an LSASS access event. By training on a rich set of features (source process, parent process, user, access rights requested, call stack rarity), the model can learn the subtle differences between benign and malicious access, reducing false positives from legitimate but uncommon administrative tools.
    answer_sources:
      - 'Sysmon Event ID 10'
      - 'NAI: Domain Controllers, Authentication Servers, Endpoint workstations'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE sysmon_event_10_logs with lsass_access_model | FILTER score > malicious_threshold
  - question: Has a privileged account successfully logged in from an IP address on a known threat intelligence watchlist?
    context: This is a straightforward and high-confidence check for credential misuse. A successful login by a privileged user from an IP address known to be associated with malicious activity (e.g., a C2 server, Tor exit node) is a critical alert that indicates a likely account compromise and active adversary presence.
    answer_sources:
      - 'Windows Event ID 4624'
      - 'NAI: VPN Gateways, External-facing services (OWA, RDP gateways), Authentication servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH successful_logon_logs WHERE logon_type IN (2, 3, 10) AND account_is_privileged == true AND source_ip IN (threat_intel_watchlist)
  - question: Have any successful logins occurred that are statistically anomalous, such as from a new location without any preceding failed login attempts?
    context: An adversary who has successfully cracked or stolen a password will not generate failed login attempts. This question aims to find these highly suspicious successful logins. A login from a novel source (new country, ISP, etc.) that was not preceded by any failed login attempts from that same source is a strong indicator that the credential was compromised beforehand and is now being used.
    answer_sources:
      - 'Windows Event ID 4624'
      - 'Windows Event ID 4625'
      - 'Zeek conn.log'
      - 'NAI: VPN Gateways, External-facing services (OWA, RDP gateways), Authentication servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each successful_login (4624) | CALCULATE risk_score based on (new_location, new_ISP) | IF no_prior_failed_logins (4625) from source_ip within 24h, MULTIPLY risk_score | FILTER risk_score > threshold
  - question: Can a clustering algorithm identify user logins that are outliers compared to the user's or their peer group's normal behavior?
    context: This question uses unsupervised machine learning to find "impossible travel" scenarios and other anomalous logins without pre-defined rules. By clustering user logins based on features like geolocation, time of day, and day of week, the algorithm can identify logins that fall outside of established patterns of normal behavior for a user and their peers, flagging them as potential credential abuse.
    answer_sources:
      - 'Windows Event ID 4624'
      - 'Zeek conn.log'
      - 'NAI: VPN Gateways, External-facing services (OWA, RDP gateways), Authentication servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CLUSTER user_logon_data on features (geolocation, time_of_day) | IDENTIFY outliers/noise points
  - question: Has a correlated sequence of events been observed, starting with a suspicious credential backup, followed by a large data transfer, and culminating in an anomalous external login?
    context: This question aims to detect the full attack chain by linking several distinct events into a single, high-confidence narrative. A multi-stage correlation rule that triggers on credential acquisition (e.g., ntdsutil), followed by data exfiltration, and finally the use of a domain credential from an external source, provides a powerful alert that a significant compromise has occurred.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4624'
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, File Servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE (ntdsutil/vssadmin command) THEN (large outbound transfer from same host within 1h) THEN (anomalous external login within 72h)
  - question: Following a credential backup event, was there a statistically significant spike in outbound data transfer from the same host?
    context: This question focuses on statistically correlating two key parts of the attack chain: credential theft and exfiltration. Instead of relying on a fixed data transfer threshold, this method looks for an outbound data volume that is a statistical outlier for that specific host's typical behavior, but only within a short window after a suspicious credential backup event has occurred.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, File Servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON trigger_event ('ntdsutil ifm') | MONITOR outbound_traffic from host for 1h | IF traffic_volume > 99th_percentile_for_host, ALERT
  - question: Has a sequence analysis model identified a low-probability, high-risk sequence of events corresponding to credential theft, exfiltration, and use?
    context: This question employs a sophisticated machine learning model, such as a Hidden Markov Model, that has been trained to understand normal sequences of administrative activity. The model can then identify an entire chain of events—like suspicious backup, anomalous egress, and remote login—as a single malicious sequence because the sequence itself is highly improbable, providing a high-confidence alert even if individual events are subtle.
    answer_sources:
      - 'Zeek conn.log'
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4624'
      - 'Windows Event ID 4688'
      - 'NAI: Domain Controllers, File Servers, Network egress points'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ANALYZE event_stream with sequence_model (HMM) | IDENTIFY low_probability_sequences matching attack_pattern