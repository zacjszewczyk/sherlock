name: T1543.003: Windows Service
id: a3b1c2d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is establishing persistence or escalating privileges by creating or modifying Windows services. Adversaries may create new services that execute malicious binaries, often placing them in atypical directories or giving them unusual names to evade detection. They may also hijack existing, legitimate services by modifying their configuration (e.g., the ImagePath registry key) or replacing the service binary on disk to point to their own payload. This can involve abusing insecure service permissions, where a lower-privileged user can alter a service running with SYSTEM privileges. Investigations should focus on identifying newly created services that match known threat intelligence, appear as statistical outliers, or use Living-Off-the-Land Binaries (LOLBAS) with suspicious command-line arguments. Additionally, it is critical to monitor for modifications to high-privilege services, especially by non-administrative users or outside of standard change management windows, and to look for anomalous process or network activity originating from legitimate service processes.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a newly created Windows service associated with a known-malicious name or file hash from threat intelligence?
  context: Adversaries may reuse toolsets or service names across campaigns. Correlating the service name and the file hash of its executable against known indicators of compromise (IOCs) from threat intelligence is a high-fidelity method for detecting known malicious persistence attempts. A match indicates that a known threat is active on the endpoint.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (source="WinEventLog:System" AND EventCode=7045) OR (source="WinEventLog:Security" AND EventCode=4697) | extract service_name, image_path | enrich file_hash from image_path | lookup threat_intel where (threat_intel.hash=file_hash OR threat_intel.name=service_name)
- question: Is a newly created Windows service exceptionally rare in the environment based on its name or file path?
  context: Legitimate software is typically installed across multiple systems, creating a common baseline. Malware or custom adversary tools will often appear on only one or a few machines, making them statistical outliers. Identifying services with names or installation paths that are unique or present on a very small percentage of endpoints can uncover targeted or novel persistence mechanisms.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (source="WinEventLog:System" AND EventCode=7045) OR (source="WinEventLog:Security" AND EventCode=4697) | stats count by service_name, image_path, host | eventstats total_host_count | where count < (total_host_count * 0.01) | report rare service_name, image_path
- question: Does a newly created service exhibit characteristics commonly associated with malware, based on a machine learning model?
  context: Malicious services often have distinct features compared to benign ones, such as high entropy in their names (randomly generated), installation in unusual directories, lack of a valid digital signature, or suspicious imported functions. A machine learning model can be trained to recognize these patterns at scale and score new services for their likelihood of being malicious, helping to flag suspicious activity that doesn't match known IOCs.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  - Threat Intelligence Platforms
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from service_creation_events | extract features (name_entropy, path_depth, binary_entropy, has_signature, etc.) | invoke ML_model to score service | alert where score > confidence_threshold
- question: Is a new service configured to execute a known Living-Off-the-Land Binary (LOLBAS) with high-risk command-line arguments?
  context: Adversaries use LOLBAS (e.g., powershell.exe, rundll32.exe) to execute malicious code because the binaries are legitimate and trusted. By creating a service that calls a LOLBAS with suspicious arguments (e.g., for encoded commands, remote downloads, or script execution), they can achieve persistence while blending in with normal administrative activity. This question aims to detect this specific pattern of abuse.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events | parse image_path to get executable and arguments | where executable in LOLBAS_list AND arguments contains ('-enc', 'IEX', 'DownloadString', 'http:', '\\\\') | alert
- question: Does the command line of a new LOLBAS-based service exhibit unusually high complexity or length compared to its normal usage?
  context: While LOLBAS are used legitimately, malicious commands are often long, complex, or obfuscated to hide their true purpose. By establishing a baseline for the typical command-line length and entropy (randomness) for each LOLBAS, we can detect outliers. A command that is significantly longer or more complex than normal for that specific binary is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events | where executable in LOLBAS_list | calculate length(arguments), entropy(arguments) | lookup baseline for executable | alert if length > baseline.p95_length OR entropy > baseline.p95_entropy
- question: Does a machine learning model classify the command-line arguments of a new LOLBAS-based service as malicious?
  context: Malicious command lines often contain specific keywords, flags, and structures that differentiate them from benign usage. A machine learning model trained on a large dataset of known good and bad command lines can learn to identify these subtle patterns automatically. This provides a scalable way to detect novel or obfuscated malicious commands that might evade simple keyword-based rules.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers
  - Critical Application Servers
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from service_creation_events | where executable in LOLBAS_list | vectorize arguments (TF-IDF) | invoke ML_model to classify arguments | alert where classification is 'malicious'
- question: Is a new Windows service configured to run an executable from a non-standard or user-writable directory?
  context: Legitimate Windows services are almost always installed in protected system directories like 'C:\Windows\System32' or 'C:\Program Files'. Adversaries often place their malicious service binaries in user-writable locations like 'C:\Users', 'C:\Windows\Temp', or 'C:\ProgramData' to bypass permissions restrictions. Alerting on services created in these denylisted locations is a highly effective way to detect malicious persistence.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Endpoint Workstations
  - Multi-user Terminal Servers
  - File Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events | extract directory from image_path | where directory in ('C:\\Users\\', 'C:\\Windows\\Temp\\', 'C:\\ProgramData\\') | alert
- question: Is the executable for a new service located in a directory that is exceptionally rare for hosting service binaries across the enterprise?
  context: This is a statistical approach to finding suspicious service locations. By analyzing all service installations across the environment, we can identify common, legitimate installation directories. A service binary placed in a directory that is statistically rare (e.g., used by less than 1% of all services) is a strong anomaly. This can uncover malware attempting to hide in obscure locations not covered by a static denylist.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Endpoint Workstations
  - Multi-user Terminal Servers
  - File Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events | extract directory from image_path | stats count by directory | eventstats total_count | where count < (total_count * 0.01) | alert on rare directory
- question: Does the file path for a new service's executable have a structure that is anomalous compared to known-good service paths?
  context: Legitimate service paths follow predictable patterns (e.g., 'C:\Program Files\Vendor\Product\service.exe'). Malicious paths may be structurally different, such as being excessively deep, containing random characters, or residing in unusual subdirectories. An anomaly detection model like Isolation Forest can learn the "normal" structure of paths and flag new paths that deviate significantly, indicating a potential attempt to hide a malicious binary.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Endpoint Workstations
  - Multi-user Terminal Servers
  - File Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from service_creation_events | extract image_path | invoke anomaly_detection_model on image_path | alert where anomaly_score is high
- question: Was a new auto-start service created on a host without a corresponding authorized change ticket or software deployment activity?
  context: In a managed environment, the creation of new auto-start services should align with approved activities like software installations, updates, or system configuration changes, which are typically tracked in a change management system. A new service appearing outside of these authorized windows is a significant anomaly and could indicate an adversary establishing persistence undetected.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Change Management System Logs
  - Change Management Systems (e.g., ServiceNow, Jira)
  - Software Deployment Servers (e.g., SCCM)
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events where start_type='Auto' | for each event, search change_management_logs for approved_change on event.host near event.time | alert if no approved_change found
- question: Did a host experience a statistically unusual spike in the creation of new auto-start services at a particular time?
  context: Legitimate service installations often occur during predictable patching windows or business hours. Adversaries may install their tools at odd hours to avoid detection. By creating a baseline of when new services are normally created on a host, we can identify a sudden burst of activity at an unusual time (e.g., 3 AM on a weekend) as a statistical anomaly that warrants investigation.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Change Management System Logs
  - Change Management Systems (e.g., ServiceNow, Jira)
  - Software Deployment Servers (e.g., SCCM)
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_creation_events where start_type='Auto' | bucket by hour, host | stats count | lookup baseline for hour, host | alert where count > (baseline.mean + 3 * baseline.stddev)
- question: Does a time-series model show an unexpected increase in the rate of new service installations?
  context: This approach models the rhythm of service installations over time for a host or the entire enterprise. A time-series model can forecast the expected number of new services for any given period. If the actual number of new services significantly exceeds the model's prediction, it indicates a deviation from the established pattern of activity, which could be caused by a widespread malware campaign or a targeted attack.
  answer_sources:
  - Windows Event ID 4697
  - Windows Event ID 7045
  - Change Management System Logs
  - Change Management Systems (e.g., ServiceNow, Jira)
  - Software Deployment Servers (e.g., SCCM)
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from service_creation_events | aggregate count over time_window | invoke time_series_model to get prediction | calculate residual (actual - predicted) | alert if residual > threshold
- question: Was the executable or registry path of a critical, high-privilege service modified to point to an unsigned or unauthorized binary?
  context: Adversaries can hijack powerful, trusted services (those running as SYSTEM) by modifying their configuration to execute a malicious payload instead. This is a potent privilege escalation and persistence technique. This question focuses on detecting the core of the hijack: a change to a critical service's binary path or the binary file itself, especially when the new binary lacks a valid digital signature from a trusted publisher.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Domain Controllers
  - Tier 0 Servers
  - Privileged Access Workstations (PAWs)
  - Registry Hives on Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (registry_mod_events OR file_write_events) where target in critical_service_list | get new_binary_path | enrich signature_info from new_binary_path | alert if signature.status is not 'Valid' or signature.publisher not in allowlist
- question: Was a critical service's configuration or binary modified by an unexpected process?
  context: Modifications to critical services are typically performed by a small, predictable set of legitimate processes, such as 'TrustedInstaller.exe' during Windows updates or a specific software deployment agent. If a service is modified by a common user-facing process like 'explorer.exe' or a command-line tool like 'cmd.exe', it is a statistical anomaly and highly suspicious, suggesting a user-driven or script-driven hijack attempt.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Domain Controllers
  - Tier 0 Servers
  - Privileged Access Workstations (PAWs)
  - Registry Hives on Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (registry_mod_events OR file_write_events) where target in critical_service_list | extract modifying_process | where modifying_process not in (trusted_installer, msiexec, patch_agent) | alert
- question: Does a machine learning model classify a modification to a service as malicious rather than legitimate patching?
  context: Differentiating between a legitimate software update and a malicious service hijack can be challenging. A machine learning model can analyze multiple features simultaneously—such as the process making the change, the user account, the time of day, and properties of the new binary—to make a more nuanced decision. This helps to reduce false positives from normal patching while effectively identifying sophisticated hijacking attempts.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Domain Controllers
  - Tier 0 Servers
  - Privileged Access Workstations (PAWs)
  - Registry Hives on Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from service_modification_events | extract features (process, user, time, binary_properties) | invoke ML_model to classify modification | alert where classification is 'malicious'
- question: Was a service running as SYSTEM modified by a user account that is not a member of a standard administrative group?
  context: This question targets a specific privilege escalation vector: abuse of insecure service permissions. If the Access Control List (ACL) on a service is misconfigured, a non-administrative user may be granted permission to modify it. An adversary can exploit this to change the service's binary to their own malware, which will then execute with SYSTEM privileges upon the next service start. Detecting a non-admin modifying a SYSTEM service is a critical finding.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Logs
  - Application Servers
  - Legacy Systems
  - Endpoint Workstations
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search registry_mod_events where target is service_key and service_user is 'LocalSystem' | enrich user_groups from ActiveDirectory | where user_groups not contains ('Domain Admins', 'Administrators') | alert
- question: Did a user modify a service that they have never modified before?
  context: Within an organization, specific teams or users are typically responsible for managing certain services. By baselining which user groups normally modify each service, we can detect anomalous behavior. A modification made by a user from a group that has never historically touched that service's configuration is a high-confidence indicator of either misconfiguration, credential abuse, or a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Logs
  - Application Servers
  - Legacy Systems
  - Endpoint Workstations
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search service_modification_events | extract user_group, service_name | lookup historical_modifiers for service_name | alert if user_group not in historical_modifiers
- question: Did a user perform a service modification that is inconsistent with the typical behavior of their peer group?
  context: Users can be clustered into peer groups based on their common job functions and activities. If a user, for example an accountant, suddenly performs a sensitive action like modifying a system service—an action that is highly unusual for their peer group—it represents a significant deviation from their normal role. This could indicate a compromised account being used for privilege escalation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Active Directory Logs
  - Application Servers
  - Legacy Systems
  - Endpoint Workstations
  - Active Directory Domain Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream from user_activity_logs | cluster users into peer_groups | for each service_modification event, get user | check if 'service_modification' is a common activity for user.peer_group | alert if activity is rare for group
- question: Did a high-privilege service process spawn a suspicious child process or connect to a known-malicious destination?
  context: High-privilege service hosts like 'services.exe' or 'svchost.exe' should have very predictable behavior. If one of these processes suddenly spawns an interactive shell (cmd.exe, powershell.exe) or a reconnaissance tool (whoami.exe), it is a strong indicator of compromise. Similarly, a network connection from such a process to a destination on a threat intelligence list is a critical alert, suggesting command and control or data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internal Network Segments
  - DNS Servers
  - Internet Gateways
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (process_creation OR network_connection) where parent_process in ('services.exe', 'svchost.exe') | where child_process in suspicious_list OR destination in threat_intel_list | alert
- question: Did a service process spawn a child process or initiate a network connection that is rare for that service or the environment?
  context: Beyond known-bad indicators, this question uses statistical rarity to find novel threats. By baselining the normal child processes and network destinations for each service, we can flag any new or infrequent activity. For example, if svchost.exe suddenly spawns a new, unknown executable or connects to a country it has never connected to before, it represents a deviation from normal behavior that requires investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internal Network Segments
  - DNS Servers
  - Internet Gateways
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search (process_creation OR network_connection) where parent_process is service | lookup baseline for parent_process | alert if child_process not in baseline.child_processes OR destination_asn not in baseline.asns
- question: Does a graph analysis reveal anomalous process or network relationships originating from a service?
  context: Malicious activity can be viewed as a sequence of relationships: a service spawns a shell, which connects to a C2 server. A graph database excels at modeling these relationships. Graph anomaly detection algorithms can identify entire subgraphs of activity that are structurally rare or contain unusual components, providing a powerful way to visualize and detect complex attack chains that might be missed by analyzing individual events.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internal Network Segments
  - DNS Servers
  - Internet Gateways
  - Endpoint Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: build graph from process and network events | run graph_anomaly_detection algorithm | alert on subgraphs with high anomaly scores
- question: Was a service that is normally disabled or manual suddenly changed to auto-start and then started?
  context: Adversaries may enable and start a dormant, legitimate service to execute a malicious DLL via hijacking or to abuse its functionality. This specific sequence of events—a service's StartType being changed from Disabled (4) or Manual (3) to Auto (2), immediately followed by the service entering a 'Running' state—is highly unusual for normal operations and is a strong indicator of a service being repurposed for malicious ends.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Application Servers
  - Databases
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: search events on host within 5m | sequence [registry_mod where service.start changes to 'Auto'] -> [service_control_manager_event where service.state is 'Running'] | alert on sequence
- question: Has a historically improbable sequence of service-related events occurred?
  context: Legitimate service operations follow predictable patterns. A sequence like 'StartType changed to Auto' -> 'Service Started' -> 'cmd.exe spawned' may be extremely rare or have a near-zero probability for a specific legitimate service. By calculating the probability of event sequences, we can assign a high risk score to those that are statistically unlikely, uncovering adversary behavior that deviates from the norm.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Application Servers
  - Databases
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: analyze event sequences for each service | calculate transition probabilities between states (e.g., P(Started | Modified)) | alert when a low-probability sequence is observed
- question: Did a service undergo a series of state transitions that a Hidden Markov Model identifies as a low-probability sequence?
  context: A Hidden Markov Model (HMM) is well-suited for modeling systems with underlying states (like a service being 'Disabled', 'Running', etc.) based on observable events (logs). By training an HMM on the legitimate lifecycle of services, it learns the normal transition pathways. An adversary forcing an unusual sequence, like re-enabling a disabled service and immediately spawning a shell, will be flagged by the model as a highly improbable (and therefore suspicious) sequence of events.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Zeek conn.log
  - Critical Application Servers
  - Databases
  - Endpoint Workstations
  - SIEM Correlation Engine
  range: last 90 days
  queries:
  - technology: pseudocode
    query: stream service-related events to HMM | model calculates probability of observed event sequence given learned states | alert if probability is below anomaly_threshold