name: T1071.004: DNS
id: f7b1b3a0-7e8c-4a1d-8f2c-9a0b1c2d3e4f
description: |
  This playbook helps determine if an adversary is using the Domain Name System (DNS) protocol for Command and Control (C2) communications. DNS is an attractive C2 channel because it is a fundamental internet protocol and is almost always allowed through firewalls. The investigation focuses on identifying several key indicators: DNS queries to domains or IPs known to be malicious from threat intelligence; unusual query patterns such as a high ratio of TXT or NULL requests; queries with abnormally long or high-entropy subdomains suggesting data encoding; sustained high volumes of queries from a single host indicative of beaconing; anomalous ratios of query size to response size suggesting data uploads; and DNS queries originating from suspicious processes on endpoints, like command shells or scripts.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are any internal hosts communicating with DNS domains or IP addresses that are on a known C2 threat intelligence feed?
    context: This question aims to identify the most straightforward indicator of C2 activity: communication with known malicious infrastructure. By comparing real-time DNS logs against a high-confidence list of C2 servers, an analyst can quickly detect confirmed compromises. A match is a high-fidelity signal that a host may be controlled by an adversary.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
      - DNS Forwarders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN dns_logs ON (dns_logs.query OR dns_logs.answer)
          WITH threat_intel_c2_feed ON (threat_intel.indicator)
          WHERE event_time > NOW() - 90d
          RETURN alert
  - question: Are any hosts querying for domains that are exceptionally rare within the enterprise, especially those with uncommon Top-Level Domains (TLDs)?
    context: Adversaries often use newly registered or algorithmically generated domains for C2 that legitimate users do not visit. This question helps identify these outliers by calculating domain prevalence. A domain queried by a very small number of hosts (e.g., fewer than 5) that also has an unusual TLD is highly suspicious and warrants investigation.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
      - DNS Forwarders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each domain in dns_logs over last 24h:
            count unique source_ips
          IF count < 5 AND domain.tld is not in top_95_percent_tlds:
            FLAG domain
  - question: Can we identify domains that are likely malicious for C2 purposes using a machine learning model?
    context: This question moves beyond simple heuristics to a more sophisticated, feature-based detection method. By training a classification model on features like domain age, registrar, IP geolocation, ASN reputation, and the lexical structure of the domain name itself, we can score the likelihood of any resolved domain being malicious, enabling the detection of novel C2 infrastructure not yet on threat feeds.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
      - DNS Forwarders
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each resolution in dns_logs:
            enrich with features (domain_age, geo_ip, asn_rep, lexical_analysis)
            score = classification_model.predict(features)
            IF score > 'likely_c2_threshold':
              ALERT on resolution
  - question: Are there any DNS queries that match the known patterns of specific DNS C2 tools?
    context: Many publicly available or commercial C2 frameworks (e.g., Iodine, dnscat2, Cobalt Strike) use distinct DNS query structures for their operations. This question involves using a library of regular expressions to scan DNS query logs for these specific signatures, providing a high-confidence method for identifying the use of a known C2 tool.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each query in dns_logs:
            IF query.name matches any regex in c2_tool_signature_library:
              ALERT on query
  - question: Is any host making an unusually high proportion of non-standard DNS query types (like TXT, NULL, or MX) to a single domain?
    context: Normal DNS traffic is dominated by A and AAAA (IP address) lookups. C2 frameworks often abuse other query types, such as TXT, to exfiltrate larger chunks of data. This question establishes a baseline for the typical distribution of query types across the network and flags hosts that deviate significantly, suggesting their DNS traffic is being used for something other than standard resolution.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip:
            calculate frequency_distribution of query_types
            IF distribution_of_txt_null_mx > 98th_percentile_baseline:
              FLAG host
  - question: Are there anomalous sequences of DNS queries from a host that differ from normal resolution patterns?
    context: Legitimate DNS resolution often follows predictable sequences (e.g., a user queries a domain, gets a CNAME, and then queries the CNAME). C2 tools may generate highly unusual sequences, such as dozens of TXT queries in a row or rapid-fire CNAME lookups to various subdomains of the same parent. This question uses sequence analysis to learn what's normal and flag these abnormal patterns.
    answer_sources:
      - Zeek dns.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            model = train_hmm_on_normal_dns_sequences(host.history)
            current_sequence = get_recent_dns_queries(host)
            IF model.is_anomalous(current_sequence):
              ALERT on host
  - question: Are there any DNS queries that violate RFC standards for length?
    context: DNS has defined limits on the length of a query (253 characters) and its labels (63 characters). While some legitimate software might occasionally misbehave, queries that push or exceed these limits are a strong indicator of abuse, often related to DNS tunneling where data is encoded in long subdomains. This is a simple, high-fidelity check for a specific type of C2.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each query in dns_logs:
            IF query.total_length > 253 OR query.max_label_length > 63:
              ALERT on query
  - question: Do any DNS queries contain subdomains with statistically significant high length or high Shannon entropy?
    context: To exfiltrate data via DNS, adversaries often encode it and place it in subdomains. This encoding results in subdomain labels that are much longer and more random (higher entropy) than human-readable ones. This question establishes a baseline for normal query length and entropy and uses statistical methods (Z-score) to find significant outliers that indicate encoded data.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          calculate mean and std_dev for query_label_length and query_label_entropy
          FOR each query in dns_logs:
            z_score_length = (query.label_length - mean_length) / std_dev_length
            z_score_entropy = (query.label_entropy - mean_entropy) / std_dev_entropy
            IF z_score_length > 3 OR z_score_entropy > 3:
              ALERT on query
  - question: Can we detect novel data-encoding C2 techniques using an anomaly detection model?
    context: While looking for high entropy or length is effective, adversaries may develop more sophisticated encoding schemes. This question proposes using an unsupervised machine learning model (like an Isolation Forest) that can learn the multi-dimensional profile of a "normal" query based on features like length, entropy, and subdomain count. It can then identify novel C2 queries that deviate from this profile, even if they don't trigger simpler rules.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          features = extract_features(query_length, entropy, subdomain_count) from dns_logs
          model = train_isolation_forest(features)
          FOR each new_query:
            IF model.predict(new_query) == 'anomaly':
              ALERT on new_query
  - question: Is any single host generating an extremely high volume of DNS queries to the same domain in a short time?
    context: This question seeks to identify C2 beaconing activity through a simple, brute-force method. A hard threshold (e.g., >500 queries in 10 minutes) is a noisy but effective way to catch unsophisticated or misconfigured malware that beacons excessively to its C2 server. While it may generate false positives, a triggered alert warrants a quick investigation.
    answer_sources:
      - Zeek dns.log
      - Client Network Subnets
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE dns_logs by source_ip, domain over 10_min_windows
          FOR each aggregation:
            IF count > 500:
              ALERT on source_ip, domain
  - question: Is any host's query rate to a specific domain significantly higher than its own baseline or the network-wide baseline?
    context: A more nuanced approach than a hard threshold, this question involves baselining "normal" query volume for each host-domain pair. This allows for the detection of a host that, for example, normally queries a domain 5 times an hour but suddenly starts querying it 100 times an hour. This deviation from its own history is a strong indicator of a state change, such as a malware infection beginning to beacon.
    answer_sources:
      - Zeek dns.log
      - Client Network Subnets
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip, domain pair:
            establish baseline query_rate
            monitor current query_rate
            IF current_rate > 99th_percentile_of_baseline:
              ALERT on source_ip, domain
  - question: Is there an unexpected, statistically significant spike in a host's DNS query volume to a particular domain?
    context: This is the most advanced method for detecting anomalous beaconing. By applying a time-series forecasting model (like ARIMA) to the query counts for a host-domain pair, we can predict the expected query volume for the next time interval. If the actual observed volume significantly exceeds the prediction and its confidence interval, it represents a statistically meaningful anomaly that is very likely to be malicious C2 beaconing.
    answer_sources:
      - Zeek dns.log
      - Client Network Subnets
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each high_volume_client_domain_pair:
            model = train_arima_on_query_counts(pair.history)
            forecast, confidence_interval = model.predict_next_interval()
            IF pair.current_count > forecast + confidence_interval:
              ALERT on pair
  - question: Are there any DNS transactions where the query is long but the response is empty, despite no error being reported?
    context: This pattern is highly indicative of data being uploaded or exfiltrated via DNS. The adversary encodes data into a long DNS query, and the C2 server receives it. The server doesn't need to send a real IP address back, so it might send an empty response with a 'NOERROR' code. This behavior is highly unnatural for legitimate DNS and provides a strong signal of C2 data upload.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FROM dns_logs
          WHERE query_length > 100
            AND response_code == 'NOERROR'
            AND answers_field_is_empty
          RETURN alert
  - question: Are there any DNS transactions where the ratio of sent data to received data is anomalously high?
    context: In a normal DNS lookup, the query (sent data) is small, and the response (received data) is larger. When data is exfiltrated via DNS queries, this ratio flips. By joining DNS logs with connection logs to get byte counts, we can calculate this ratio. A ratio greater than 1.0 is highly suspicious and warrants an alert, as it suggests the client is sending more data than it's receiving, a hallmark of data upload.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN dns_logs with conn_logs on transaction_uid
          calculate ratio = sent_bytes / received_bytes
          establish network_baseline_for_ratio (e.g., 98th percentile)
          IF ratio > baseline_threshold AND ratio > 1.0:
            ALERT on transaction
  - question: Can we automatically identify clusters of DNS 'upload' traffic that are structurally different from normal 'lookup' traffic?
    context: This question uses unsupervised clustering to find groups of anomalous DNS transactions without pre-defined rules. By using features like the sent/received byte ratio, query length, and query type, a clustering algorithm can automatically separate the small, dense group of malicious 'upload' transactions from the large, sprawling cluster of legitimate 'lookup' traffic. This can help discover novel C2 techniques.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          features = extract_features(byte_ratio, query_length, query_type) from transactions
          clusters = dbscan_cluster(features)
          FOR each transaction in anomalous_cluster:
            ALERT on transaction
  - question: Is a DNS query originating from a process not typically associated with network activity, such as a command shell or a script interpreter?
    context: Most DNS lookups on a workstation are initiated by web browsers, email clients, or system processes. A DNS query coming directly from a command shell (cmd.exe), PowerShell, or a script running from a temporary directory is highly abnormal and a strong indicator of hands-on-keyboard activity or a fileless malware payload establishing a C2 channel. This is a high-fidelity endpoint-based detection.
    answer_sources:
      - Windows Sysmon Event ID 22
      - Windows Sysmon Event ID 1
      - Endpoint Devices (Workstations and Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FROM sysmon_dns_events (EID 22)
          WHERE process_image in ('cmd.exe', 'powershell.exe', 'cscript.exe')
            OR process_path contains ('%APPDATA%', '%TEMP%', '%PUBLIC%')
          RETURN alert
  - question: Is a very common system process, like svchost.exe, making a DNS query for a domain that is extremely rare?
    context: Adversaries often inject malicious code into legitimate, trusted system processes (a technique called process hollowing) to evade detection. While the process name appears normal, its behavior does not. This question aims to detect this by flagging when a common process, which normally communicates with a predictable set of common domains, suddenly queries a very rare or unique domain, indicating its behavior has been subverted.
    answer_sources:
      - Windows Sysmon Event ID 22
      - Windows Sysmon Event ID 1
      - Endpoint Devices (Workstations and Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          calculate IDF_score for all domains in sysmon_dns_events
          FOR each dns_event:
            IF process_image is 'svchost.exe' AND domain_IDF_score > high_threshold:
              ALERT on event
  - question: Can we use machine learning to distinguish between legitimate and malicious process-to-network behavior chains?
    context: This question combines process creation data with DNS query data to build a more complete picture of activity on an endpoint. By training a model on features from both process start events (parent process, command line) and subsequent DNS queries (query entropy), it's possible to learn the entire chain of behavior. This allows the model to flag suspicious sequences, like Microsoft Word spawning PowerShell which then makes high-entropy DNS requests, as malicious.
    answer_sources:
      - Windows Sysmon Event ID 22
      - Windows Sysmon Event ID 1
      - Endpoint Devices (Workstations and Servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          correlate process_events (EID 1) with dns_events (EID 22)
          extract_features (parent_process, cmd_line, query_entropy)
          model = train_decision_tree(features)
          FOR each new chain:
            IF model.predict(chain) == 'malicious':
              ALERT on chain