name: "T1195.002: Compromise Software Supply Chain"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook helps investigate if an adversary has gained initial access by compromising a software supply chain. This involves an adversary manipulating software to introduce malicious code, which is then distributed to downstream users. Indicators of this activity include the download of files matching known malicious signatures or originating from suspicious sources; the presence of new executables that are unsigned, have invalid signatures, or are signed by rare or disreputable publishers; legitimate software updates exhibiting statistically significant deviations in file size or other characteristics compared to historical versions; known software updaters connecting to unusual or non-standard network destinations; suspicious follow-on actions (like establishing persistence) immediately after a software update; and unauthorized modifications to executable files within trusted installation directories.
type: "technique"
related:
  - "TA0001: Initial Access"
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: none
investigative_questions:
  - question: "Are new executables being downloaded or executed that match known malicious signatures or originate from known malicious infrastructure?"
    context: |
      This question addresses the most direct detection method: matching artifacts against threat intelligence. It involves implementing a real-time check for every new executable file observed on the network or created on a host. The file's SHA256 hash is calculated and compared against a feed of known malicious hashes. Concurrently, the source IP address and domain are checked against a feed of known malicious command-and-control (C2) servers or distribution points. A match provides a high-confidence indicator of compromise.
    answer_sources:
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network Egress Points"
      - "Web Proxies"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each new executable (from network or process logs):
            CALCULATE SHA256 hash
            QUERY hash against threat intelligence feed
            QUERY source IP/domain against threat intelligence feed
            IF match exists, ALERT
  - question: "Are executables being downloaded from statistically rare or never-before-seen IP addresses or domains?"
    context: |
      This question focuses on identifying anomalous sources of executable files. Adversaries often use new or temporary infrastructure to distribute compromised software. By establishing a 90-day baseline of all sources that serve executable files to the enterprise, analysts can identify downloads from sources that are statistically rare or have never been seen before. A source falling into a high rarity percentile (e.g., 99th) for serving executables is highly suspicious and should be investigated, even without a direct threat intelligence match.
    answer_sources:
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network Egress Points"
      - "Web Proxies"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each executable download:
            GET source IP and domain
            QUERY historical baseline for frequency of this source serving executables
            IF frequency is in the 99th percentile for rarity, INCREASE risk score and ALERT
  - question: "Can we predict if a file download is malicious using a machine learning model based on network metadata?"
    context: |
      This question proposes a proactive, predictive approach using supervised machine learning. A model (e.g., Random Forest) can be trained on features extracted from network logs (like user-agent, MIME type, connection duration, JA3 hash, domain age) to distinguish between malicious and benign downloads. This allows for the detection of suspicious downloads that may not match any existing IOCs but exhibit characteristics consistent with malicious activity. Downloads with a high probability score from the model should be flagged for immediate review.
    answer_sources:
      - "Zeek files.log"
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Zeek dns.log"
      - "Network Egress Points"
      - "Web Proxies"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each file download:
            EXTRACT features (user-agent, MIME type, conn duration, JA3, domain age)
            INPUT features into trained classification model
            IF model's predicted probability > 0.85, ALERT
  - question: "Are new executables being introduced that are unsigned, have an invalid/expired signature, or are signed by a blocklisted publisher?"
    context: |
      This question focuses on validating the authenticity and integrity of new software through its digital signature. Legitimate software is almost always signed by the developer. This action involves automatically checking the signature of every new executable. An alert should be generated if a file is unsigned, has a signature that is expired or invalid, or is signed by a publisher known to be malicious or suspicious. This is a fundamental check for unauthorized software.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Application Log (CodeIntegrity Events)"
      - "Endpoints"
      - "Software Distribution Servers"
      - "Code Signing Certificate Authorities"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON new executable creation or download:
            VERIFY digital signature status
            IF file is unsigned, signature is invalid/expired, OR publisher is on blocklist, ALERT
  - question: "Are new executables signed by publishers that are statistically rare, new to the environment, or have suspicious-looking names?"
    context: |
      This question addresses the scenario where malware is signed with a valid, but suspicious, certificate. By maintaining a rolling baseline of all software publishers seen in the environment, analysts can detect executables signed by a publisher that is new or statistically very rare (e.g., in the bottom 5th percentile of frequency). Additionally, calculating the Shannon entropy of the publisher's name can help identify randomly generated names ($$ > 4.0 $$) often used by malicious actors.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Application Log (CodeIntegrity Events)"
      - "Endpoints"
      - "Software Distribution Servers"
      - "Code Signing Certificate Authorities"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON new signed executable:
            GET publisher subject name
            QUERY baseline for publisher frequency; IF new or in bottom 5th percentile, ALERT
            CALCULATE Shannon entropy of subject name; IF $$ > 4.0 $$, ALERT
  - question: "Does the digital certificate of a new executable show anomalous characteristics when compared to all other certificates seen in the enterprise?"
    context: |
      This question uses unsupervised machine learning to find outlier certificates. An anomaly detection model, such as an Isolation Forest, can be trained on the features of all historically observed digital certificates (e.g., issuer, validity period, key usage). The model learns what a "normal" certificate looks like in the context of the enterprise and can then identify new certificates that deviate significantly from this norm, which may indicate a forged or maliciously crafted certificate even if it is technically valid.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Application Log (CodeIntegrity Events)"
      - "Endpoints"
      - "Software Distribution Servers"
      - "Code Signing Certificate Authorities"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON new executable:
            EXTRACT certificate features (issuer, subject, validity, etc.)
            INPUT features into trained anomaly detection model
            IF certificate is flagged as an anomaly, ALERT
  - question: "Has a critical, known software component been modified to have a different file hash than its expected 'golden image' version?"
    context: |
      This question involves a high-fidelity integrity check on a curated list of critical system or application files (e.g., `lsass.exe`). A "golden image" manifest of known-good file hashes for each version of these components is maintained. A monitoring rule alerts on any file write event that results in a hash mismatch for one of these critical files, providing a strong signal of unauthorized tampering.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Endpoints"
      - "File Servers"
      - "Software Deployment Systems"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON file write to a monitored critical file:
            CALCULATE the new file hash
            COMPARE hash against the 'golden image' manifest for that file
            IF hashes do not match, ALERT
  - question: "Does a new version of a software package show statistically significant changes in file size, section entropy, or imported functions (IMPHASH) compared to previous versions?"
    context: |
      This question aims to detect trojanized updates by looking for statistical anomalies in file characteristics. For a given software package, a historical baseline of its file size, executable section entropy, and imported function set (IMPHASH) is established. When a new version is detected, its properties are compared to the baseline. A high Z-score ($$ > 3 $$) for size or entropy, or a low Jaccard similarity ($$ < 0.8 $$) for its imported functions, indicates a significant and potentially malicious deviation from the norm.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Endpoints"
      - "File Servers"
      - "Software Deployment Systems"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON detection of a new software version:
            CALCULATE Z-score for file size and average section entropy against baseline
            CALCULATE Jaccard similarity of new IMPHASH vs. baseline IMPHASH set
            IF Z-score $$ > 3 $$ OR Jaccard similarity $$ < 0.8 $$, ALERT
  - question: "Is the file size of a new software update a significant outlier when compared to a time-series forecast based on its update history?"
    context: |
      This question applies time-series forecasting to detect anomalous changes in file size for applications that receive regular updates. A model (e.g., ARIMA) is trained on the history of an application's update sizes to forecast the expected size of the next update. If the actual file size of a new update falls significantly outside the forecast's confidence interval, it is flagged as an anomaly, which could indicate unexpected code injection.
    answer_sources:
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Endpoints"
      - "File Servers"
      - "Software Deployment Systems"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON new software update:
            GET file size
            COMPARE size to forecasted value from time-series model
            IF size is an outlier outside the confidence interval, ALERT
  - question: "Is a known software updater process connecting to a destination domain or IP that is not on its approved allowlist?"
    context: |
      This question focuses on detecting compromised updaters by monitoring their network connections. A static allowlist of known-good update domains and IP ranges is maintained for common, high-risk software (e.g., operating systems, browsers). An alert is triggered whenever a known updater process (e.g., `TrustedInstaller.exe`) initiates a network connection to any destination not on this pre-approved list. This is a simple and effective way to spot connections to unauthorized C2 infrastructure.
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network Egress Points"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON network connection from a known updater process:
            GET destination IP/domain
            IF destination is NOT in the approved allowlist for that process, ALERT
  - question: "Is a known software updater process connecting to a domain that is statistically rare for that specific process?"
    context: |
      This question provides a behavioral alternative to static allowlists by profiling the normal network activity of each updater process. A historical baseline is built of all domains queried by a specific updater over 90 days. If that process then queries a domain that is in the bottom 1st percentile for frequency (i.e., extremely rare for that process to contact), it is flagged as a suspicious anomaly that could indicate a compromise.
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network Egress Points"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON DNS query from a known updater process:
            GET domain name
            QUERY historical baseline for this process's query frequency for that domain
            IF frequency is in the bottom 1st percentile, ALERT
  - question: "Does a network connection from a software updater exhibit characteristics that mark it as an outlier compared to the process's normal network behavior clusters?"
    context: |
      This question uses unsupervised machine learning to define and detect anomalous network behavior. A clustering algorithm like DBSCAN is applied to network connection features (destination IP, port, protocol, JA3 hash, etc.) for each updater process. This groups normal update behaviors into stable clusters. Any new connection that does not fit into an existing cluster is classified as an outlier or "noise," indicating a deviation from normal behavior that could represent a connection to a non-standard C2 server.
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Windows Event ID 4688"
      - "Network Egress Points"
      - "DNS Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each new network connection from an updater process:
            EXTRACT connection features (dest IP, port, protocol, etc.)
            APPLY trained clustering model (DBSCAN)
            IF connection is classified as noise/outlier, ALERT
  - question: "Shortly after a software update, did the new process or its child perform a high-risk action like creating a scheduled task, modifying a run key, or running an encoded script?"
    context: |
      This question focuses on detecting malicious post-exploitation behavior immediately following an update. A correlation rule is created to look for a sequence where a known installer or updater process spawns a child that, within minutes, performs a high-risk action. Such actions, including creating persistence via scheduled tasks or run keys, or launching scripting engines with encoded commands, are not typical of legitimate installers and strongly indicate a trojanized update.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4698"
      - "Windows Event ID 4657"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Endpoints"
      - "Domain Controllers"
      - "Active Directory"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          IF (process is spawned by a known installer) AND (within 5 minutes, that process or its child creates a scheduled task OR modifies a registry run key OR spawns a script with an encoded command), THEN ALERT.
  - question: "Did an updater process spawn a child process that is statistically unlikely based on historical parent-child relationships?"
    context: |
      This question uses behavioral analysis of process lineage to spot anomalies. By continuously profiling parent-child process relationships, a probabilistic model can be built. This model calculates the conditional probability $$ P(\text{child} | \text{parent}) $$ for all observed relationships. If an updater process, which typically has a predictable set of child processes, spawns a child with a very low conditional probability (e.g., $$ < 0.01 $$), such as `cmd.exe`, it is a statistical anomaly warranting investigation.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4698"
      - "Windows Event ID 4657"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Endpoints"
      - "Domain Controllers"
      - "Active Directory"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON process creation:
            GET parent and child process names
            CALCULATE conditional probability $$ P(\text{child} | \text{parent}) $$ based on historical data
            IF probability is $$ < 0.01 $$, ALERT
  - question: "Does the sequence of host events following a software update deviate significantly from the normal sequence of events for a legitimate update?"
    context: |
      This question describes an advanced anomaly detection technique using a sequence-based model like an LSTM Autoencoder. The model is trained on sequences of host events (process creations, registry modifications, network connections) that normally follow a legitimate software update. During inference, if the sequence of events following a new update has a high reconstruction error, it indicates a significant deviation from normal post-install behavior and points to a potential compromise.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4698"
      - "Windows Event ID 4657"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Endpoints"
      - "Domain Controllers"
      - "Active Directory"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          CAPTURE sequence of host events for 10 minutes following a software update
          INPUT event sequence into trained LSTM Autoencoder
          IF reconstruction error > threshold, ALERT
  - question: "Was a file in a protected application directory (.exe or .dll) modified by a process that is not an approved, trusted installer?"
    context: |
      This question involves file integrity monitoring (FIM) focused on critical application directories. By enabling file system auditing (SACL) to log write access (Event ID 4663) and maintaining an allowlist of trusted installer processes (e.g., `msiexec.exe`, `TrustedInstaller.exe`), any write operation to a DLL or EXE by an unauthorized process can be immediately flagged as a potential tampering event.
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Critical System Directories (e.g., System32, Program Files)"
      - "Application Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON file write event (4663) to a protected directory:
            GET the process name that performed the write
            IF the process is NOT on the trusted installer allowlist, ALERT
  - question: "Was a file in a protected application directory modified by a process that is statistically rare to perform such an action?"
    context: |
      This question provides a behavioral approach to the FIM problem. Instead of a static allowlist, it establishes a statistical baseline of all processes that normally write to protected application directories. If a process that is statistically rare in this context (e.g., `notepad.exe` or a web server process) writes to a protected executable or library, it is flagged as a suspicious anomaly, even if the process itself is legitimate.
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Critical System Directories (e.g., System32, Program Files)"
      - "Application Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          ON file write event (4663) to a protected directory:
            GET the process name
            QUERY baseline for the frequency of this process writing to this location
            IF frequency is in the bottom 5th percentile, ALERT
  - question: "Does a graph-based model of process-file interactions show an anomalous 'writes to' relationship, such as a web server process modifying a core OS DLL?"
    context: |
      This question describes an advanced technique using graph-based anomaly detection. The system's process-file interactions are modeled as a graph where nodes are processes and files, and edges represent actions like 'writes to'. The model is trained on normal interaction patterns. A supply chain compromise may introduce a new, structurally anomalous edge in the graph, such as a browser process writing to a system DLL. The model would flag this anomalous relationship as a sign of potential tampering.
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "Critical System Directories (e.g., System32, Program Files)"
      - "Application Servers"
      - "Endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          MODEL process-file write interactions as a directed graph
          ON new file write event, add a new edge to the graph
          APPLY structural anomaly detection algorithm to the graph
          IF the new edge is flagged as a structural anomaly, ALERT