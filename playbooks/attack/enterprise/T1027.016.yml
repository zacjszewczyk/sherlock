name: T1027.016: Junk Code Insertion
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is using junk code insertion to evade defenses. Junk code insertion involves adding non-functional, random, or confusing code to a malicious binary to change its signature and structure. This technique aims to fool static analysis tools, antivirus engines, and signature-based detection rules by altering the file's hash and appearance. This playbook provides questions to help detect this activity by identifying files that match known malicious hashes tagged with this technique, spotting the use of known packers and obfuscators, analyzing process creation events for anomalous parent-child relationships or command-line arguments, detecting system process masquerading from unusual file paths, and identifying network beaconing patterns from newly observed executables.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a file hash observed in the environment matched against a threat intelligence feed for junk code insertion malware?
    context: This question aims to identify known malicious files associated with junk code insertion. A match against a curated threat intelligence source provides a high-confidence signal that a malicious file, specifically one known to use this evasion technique, is present in the environment. This is a direct detection method based on prior intelligence.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH file creation events AND threat intelligence hashes WHERE file.hash IN watchlist_T1027.016
  - question: Is a newly observed, low-prevalence, unsigned executable file present in the environment?
    context: This question helps uncover previously unknown or polymorphic malware. Adversaries using junk code insertion create new file variants that will naturally have a very low prevalence. Legitimate software is typically signed by a trusted publisher. The combination of low prevalence and a missing signature is a strong heuristic for suspicious or malicious executables that warrant further analysis.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH new executable files | CALCULATE prevalence by file.hash | WHERE prevalence < 5 AND is_signed == false
  - question: Has a machine learning model identified a new executable as malicious based on prevalence, external metadata, and file path entropy?
    context: This question leverages a machine learning model to score the risk of new executables. By combining features like internal prevalence, data from external services like VirusTotal (scan results, tags), and file path characteristics, the model can identify malicious files that may not be caught by signatures alone. A high score indicates the file shares characteristics with known malware.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: PREDICT is_malicious(file.hash, file.path, external_intel) | WHERE prediction_score > 0.90
  - question: Is a process being created with a name or command-line argument matching known software packers or obfuscators?
    context: This question checks for the direct use of tools designed for obfuscation. While developers may use packers for legitimate reasons, adversaries frequently use them to hide malicious code. Detecting the execution of packers like UPX or Themida provides a strong signal that an executable is being intentionally obfuscated, which is a common precursor to or part of a junk code insertion strategy.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process creation events WHERE process.name MATCHES /(upx|themida|mpress)/ OR process.command_line MATCHES /(upx|themida|mpress)/
  - question: Does a process exhibit unusually high command-line entropy, suggesting obfuscation?
    context: This question aims to detect obfuscation by analyzing the randomness of command-line arguments. Adversaries often encode or obfuscate commands to hide their intent, resulting in a string with high entropy (randomness). Comparing the entropy of a command line to a baseline of normal activity can reveal suspicious processes that are likely trying to evade command-line logging and analysis.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process creation events | CALCULATE entropy(process.command_line) | WHERE entropy > 99th_percentile_baseline
  - question: Has a machine learning clustering model identified an anomalous command-line structure?
    context: This question uses unsupervised machine learning to find unusual command-line patterns without pre-existing rules. By grouping all command lines into clusters of similar structures, any command that does not fit into a large, well-established cluster (i.e., it's an outlier or in a small, new cluster) can be flagged as anomalous and potentially malicious. This helps find novel threats.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CLUSTER process creation events by command_line_features | IDENTIFY outliers and small clusters
  - question: Has a legitimate system process, spawned by an unusual parent, made an outbound connection to a known malicious destination?
    context: This question helps detect process injection or other abuse of trusted system processes. Adversaries often inject code into legitimate processes like 'svchost.exe' to inherit their privileges and evade defenses. If such a process is spawned by an unexpected parent (e.g., 'winword.exe' instead of 'services.exe') and then communicates with a known C2 server, it is a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: JOIN process_events, network_events | WHERE process.name IN ('svchost.exe', 'rundll32.exe') AND parent.name NOT IN ('services.exe') AND destination.ip IN C2_watchlist
  - question: Has a process been spawned from a statistically rare or high-risk file path for its parent-child pairing?
    context: This question identifies process creation events that deviate from established baselines. Legitimate software typically has predictable execution patterns (e.g., 'winword.exe' spawning processes from a specific path). When a parent process spawns a child from a statistically rare location, such as a user's Downloads folder, it suggests that a non-standard or malicious binary is being executed.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process creation events | GROUP by parent.path, child.path | WHERE path_frequency < 1st_percentile OR parent.path IN ('%downloads%', '%programdata%')
  - question: Has a machine learning model detected an anomalous sequence of system events?
    context: This question seeks to identify malicious behavior by analyzing the chain of events on a host. Normal user and system activities create predictable sequences (e.g., process A starts, writes file B, opens network port C). An LSTM autoencoder or similar model can learn these patterns and flag any sequence with a high reconstruction error, indicating it deviates significantly from learned benign behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MODEL LSTM_Autoencoder on event_sequences | ALERT on high_reconstruction_error
  - question: Is a critical system process running from a non-standard, un-allowlisted file path?
    context: This question is designed to detect a common evasion technique called masquerading, where malware is named after a legitimate system file (e.g., 'svchost.exe'). However, it is executed from a different directory. By maintaining a strict allowlist of correct paths for critical system binaries, any execution of these process names from an incorrect path can be immediately flagged as high-risk and likely malicious.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process creation events WHERE process.name IN system_process_list AND process.path NOT IN system_path_allowlist
  - question: Is a process running with a name that is a misspelling of a critical system binary or from a statistically rare file path?
    context: This question hunts for two variations of masquerading. The first is 'typosquatting', where malware uses a name that is a slight misspelling of a system binary (e.g., 'svch0st.exe'). The second identifies when any process, even if named correctly, is run from a location that is highly unusual for that specific process name, based on historical data. Both are strong indicators of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process creation events | WHERE levenshtein_distance(process.name, system_binaries) < 2 OR path_frequency_for_process < 1st_percentile
  - question: Has a machine learning model classified a process execution as masquerading based on its features?
    context: This question uses a supervised model to make a sophisticated judgment about whether a process is masquerading. By training a model on features like the file path, parent process, user context (SYSTEM vs. standard user), and name, it can learn the complex patterns that distinguish legitimate system processes from malicious impersonators, providing a more nuanced detection than simple rule-based methods.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: PREDICT is_masquerading(process.path, parent.name, user.context) | WHERE prediction_score > 0.95
  - question: Is a newly observed executable making DNS requests to known C2 or DGA domains?
    context: This question focuses on the network behavior of new, unknown files. Malware often needs to contact a command-and-control (C2) server. This can be done by querying for a hardcoded domain or using a domain generation algorithm (DGA) to find its C2. Correlating a new executable with DNS queries to domains on threat intelligence lists is a strong indicator that the file is malicious.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: JOIN process_events, dns_events | WHERE file.is_new == true AND dns.query IN (C2_domain_list OR DGA_domain_list)
  - question: Are there network connections exhibiting highly regular, low-jitter timing patterns indicative of C2 beaconing?
    context: This question aims to identify C2 communications by their characteristic pattern. Malware often 'beacons' out to its C2 server at a fixed interval (e.g., every 60 seconds). This automated traffic results in connections with a very low standard deviation in the time between them. Detecting this 'heartbeat' pattern, especially when linked to a specific process, is a classic method for finding active malware.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_connections | CALCULATE stdev(time_delta) by src_ip, dest_ip | WHERE stdev < 2_seconds AND connection_count > 5
  - question: Has a time-series model detected anomalous, periodic spikes in a host's outbound network traffic?
    context: This question uses time-series forecasting to establish a baseline of normal network traffic for each host and then find deviations. C2 beaconing often manifests as small, regular spikes in outbound data that stand out from normal, bursty user activity. When the actual traffic significantly and periodically exceeds the model's prediction, it can reveal this subtle, automated C2 communication channel.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MODEL Prophet on outbound_bytes per host | CALCULATE residual = actual - predicted | ALERT on large, periodic spikes in residual error