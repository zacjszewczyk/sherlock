name: T1027.016: Junk Code Insertion
id: 0a7f1b2c-3d4e-4f5a-6b7c-8d9e0f1a2b3c
description: >
  This playbook helps investigate whether an adversary is using junk code insertion to obfuscate malware and evade defenses. This involves looking for evidence such as file hashes matching known threats tagged with junk code, the use of known software packers, legitimate system processes being spawned by unusual parents and making suspicious network connections, process names masquerading as system binaries in non-standard locations, and newly observed executables exhibiting C2-like beaconing behavior.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any newly observed file hashes matching a known-malicious signature associated with junk code insertion?
    context: >
      This question aims to identify malware that has already been flagged by threat intelligence for using junk code insertion. A match provides a high-confidence indicator of compromise, leveraging community knowledge to detect known threats without complex analysis.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events (EVID 4688, files.log)
          WHERE file_hash IN threat_intel_watchlist_T1027.016
          RETURN host, file_path, file_hash, user
  - question: Are there any rare, unsigned executables appearing in the environment that warrant further analysis?
    context: >
      This question helps uncover previously unknown or polymorphic malware. Adversaries using junk code often create unique file hashes for each victim. Low prevalence is a strong statistical indicator of such targeted or novel threats that would be missed by signature-based detections.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE prevalence of all file_hashes over last 90 days
          SEARCH file_creation_events in last 24 hours
          WHERE file_hash_prevalence < 5 AND is_signed = false
          RETURN host, file_path, file_hash, prevalence_count
  - question: Can a machine learning model identify new executables that are likely malicious based on features like low prevalence, external threat data, and file path characteristics?
    context: >
      This question leverages machine learning to automate the detection of suspicious files by combining multiple weak signals into a strong predictor. It's designed to find sophisticated threats that use junk code to evade simpler detection methods by looking at a holistic set of attributes, including its reputation and placement on the system.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1116
      - Network Egress Points
      - User Workstations
      - Email Gateways
      - File Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_file_hash:
            features = [prevalence, virustotal_hits, path_entropy]
            score = ml_model.predict(features)
          IF score > 0.90:
            ALERT host, file_path, file_hash, score
  - question: Are any processes being created using command-line arguments or process names associated with known software packers or obfuscators?
    context: >
      This question is designed to detect the explicit use of known packing or obfuscation tools (e.g., UPX, Themida) within the environment. Identifying the execution of these tools can indicate that an adversary is preparing or deploying obfuscated payloads. It's a direct method for spotting attempts to evade signature-based defenses.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (EVID 4688)
          WHERE process_name OR command_line MATCHES REGEX /(upx|themida|mpress|vmprotect)/i
          RETURN host, process_name, command_line, parent_process
  - question: Are any processes being launched with unusually high-entropy command-line arguments, suggesting obfuscation?
    context: >
      This question aims to identify obfuscated commands or scripts passed as arguments, a common technique for hiding malicious activity. High Shannon entropy in a command line suggests randomness or compression, which is uncharacteristic of normal, human-readable commands but typical of encoded payloads. This is a powerful behavior-based heuristic for detecting fileless malware or obfuscated execution.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation_event (EVID 4688):
            entropy = calculate_shannon_entropy(event.command_line)
          IF entropy > 99th_percentile_of_baseline:
            ALERT host, process_name, command_line, entropy
  - question: Can clustering algorithms identify anomalous or outlier command-line structures that deviate from established normal behavior?
    context: >
      This question seeks to find novel or unknown obfuscation techniques by grouping all observed command-line arguments based on their structure. Over time, large, stable clusters represent normal activity. Small, new, or isolated outlier clusters are highly suspicious and likely represent adversary activity, allowing for detection without prior knowledge of the specific tools or methods used.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Developer Endpoints
      - Staging Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (length, char_frequency, n-grams) from all command_lines
          APPLY DBSCAN or OPTICS clustering algorithm to features
          INVESTIGATE small clusters and outliers
  - question: Is a legitimate system process like 'svchost.exe' being launched by an unauthorized parent process and then making an external network connection to a known C2 address?
    context: >
      This question targets a classic defense evasion technique where malware injects into or spawns a trusted system process to inherit its privileges and bypass firewall rules. By correlating process lineage with network connections to threat-intelligence-flagged destinations, this query provides a high-confidence alert for process masquerading and C2 communication.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN process_events (EVID 4688) with network_logs (EVID 5156, conn.log)
          WHERE child_process IN ('svchost.exe', 'rundll32.exe')
            AND parent_process NOT IN ('services.exe')
            AND destination_ip IN c2_threat_intel_list
            AND time_delta < 60s
          ALERT host, parent_process, child_process, destination_ip
  - question: Are there any parent-child process relationships where the parent process is executing from a statistically rare file path, especially from a high-risk directory?
    context: >
      This question is designed to catch malware that drops and runs from unusual locations (e.g., a user's Downloads folder) and then spawns legitimate system processes to carry out malicious actions. By baselining normal execution paths for parent-child pairs, any deviation, particularly from a high-risk directory, becomes a strong signal of anomalous and potentially malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PROFILE frequency of parent_process_paths for each parent-child pair
          SEARCH process_events (EVID 4688)
          WHERE parent_process_path_frequency < 1st_percentile
            OR parent_process_path IN ('C:\Users\*\Downloads\', 'C:\ProgramData\')
          ALERT host, parent_process, parent_path, child_process
  - question: Can a sequence-based anomaly detection model identify chains of events (e.g., process create -> network connect) that deviate from learned normal host behavior?
    context: >
      This question moves beyond single-event analysis to detect malicious *behaviors* represented by a sequence of actions. An LSTM Autoencoder can learn the normal "grammar" of system events on a host. When a malicious process executes a novel sequence (e.g., an Office app spawning a PowerShell that makes a strange network connection), the model fails to reconstruct it accurately, generating a high-error alert that points to a sophisticated, multi-stage attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - User Workstations
      - Internal Web Servers
      - Application Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            sequence = create_event_chain(ProcessCreate, NetConnect, FileWrite, ...)
            reconstruction_error = lstm_autoencoder.evaluate(sequence)
          IF reconstruction_error > threshold:
            ALERT host, sequence, error_score
  - question: Is a process with a name matching a critical system binary (e.g., 'svchost.exe') running from a file path that is not its legitimate, allowlisted location?
    context: >
      This question provides a high-confidence method for detecting process masquerading. Adversaries rename malware to mimic trusted system files to blend in. However, they typically cannot place these files in protected directories like C:\Windows\System32. This query checks for this exact discrepancy, creating a simple but powerful rule to catch this common evasion technique.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allowlist: {'svchost.exe': 'C:\Windows\System32\svchost.exe', ...}
          SEARCH process_creation_events (EVID 4688)
          WHERE process_name IN allowlist.keys() AND full_path != allowlist[process_name]
          ALERT host, process_name, full_path
  - question: Are there any executed process names that are very similar (typosquatting) to critical system binaries, or are legitimate process names running from statistically rare paths?
    context: >
      This question targets two forms of masquerading. First, it uses Levenshtein distance to find typosquatted names (e.g., 'svch0st.exe', 'lsas.exe') that visual inspection might miss. Second, it identifies legitimate process names executing from statistically anomalous paths. This dual approach helps uncover both crude and more subtle attempts by adversaries to hide their processes.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_event (EVID 4688):
            dist = levenshtein_distance(process_name, critical_system_binaries)
            path_freq = get_path_frequency(process_name, full_path)
          IF (dist <= 2) OR (path_freq < 1st_percentile):
            ALERT host, process_name, full_path
  - question: Can a machine learning classifier distinguish between legitimate and masqueraded process executions based on features like file path, parent process, and user context?
    context: >
      This question proposes using a machine learning model to automate the complex task of identifying masqueraded processes. By training on a rich set of features—including the execution path, the parent process, and the user account—the model can learn the subtle contextual patterns that separate legitimate system activity from malicious imitations, providing a scalable and adaptive detection capability.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations
      - Public-facing Servers
      - Shared Network Drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_creation (EVID 4688):
            features = [file_path, parent_name, user_context, is_in_system32]
            score = classification_model.predict(features)
          IF score > threshold:
            ALERT host, process_name, full_path, score
  - question: Are any newly observed executables making DNS requests for domains known to be associated with C2 or DGA infrastructure?
    context: >
      This question focuses on the initial communication of a potentially malicious file. When a new, never-before-seen executable immediately reaches out to a domain on a threat intelligence feed for C2 servers or domain generation algorithms (DGAs), it is a very strong indicator of compromise. This query correlates file execution with network logs to catch this critical post-infection behavior.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN process_events (EVID 4688) with dns_logs (Zeek dns.log)
          WHERE file_hash is newly_observed
            AND dns_query IN (c2_domain_feed, dga_domain_feed)
          ALERT host, process_name, file_hash, dns_query
  - question: Are any network sessions exhibiting highly regular, periodic connections (low time jitter) characteristic of automated C2 beaconing?
    context: >
      This question aims to detect the "heartbeat" of malware communicating with its command-and-control server. Regardless of the destination, automated C2 traffic often occurs at fixed intervals, resulting in a very low standard deviation in the time between connections. This statistical, behavior-based approach can uncover C2 channels even when the destination is not on a threat list.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP connections by source_ip, destination_ip
          CALCULATE std_dev of time_delta between connections in each group
          WHERE connection_count > 5
          IF std_dev < 2_seconds:
            ALERT source_ip, destination_ip, std_dev
  - question: Can a time-series forecasting model detect anomalous periodic spikes in a host's outbound network traffic that might indicate C2 beaconing?
    context: >
      This question applies time-series analysis to find hidden C2 beaconing. A model learns the normal rhythm of a host's daily network traffic. When malware starts beaconing, it introduces a new, regular pattern of data exfiltration that deviates from the forecast. Large, periodic spikes in the difference between actual and predicted traffic can reveal this otherwise-hidden malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points
      - DNS Servers
      - All Endpoints and Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            model = train_timeseries_forecast(outbound_bytes_per_minute)
            predicted_traffic = model.forecast()
            residual_error = actual_traffic - predicted_traffic
          IF residual_error shows periodic spikes:
            ALERT host, error_pattern