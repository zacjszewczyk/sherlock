name: T1070.003: Clear Command History
id: c6a8b7e2-5d4f-4a0e-9c1d-8f9a6b3c2d1e
description: >
  This playbook helps answer the question: Is the adversary attempting to evade defenses by clearing command history? Adversaries may clear command history to conceal their activities on a compromised system. This can be done by executing commands that explicitly delete history files (e.g., 'history -c'), modifying shell environment variables to prevent history from being logged (e.g., 'HISTSIZE=0'), directly deleting or modifying history files (e.g., '.bash_history') with non-standard processes, or performing these actions immediately following a remote login to cover their tracks. This playbook provides questions to investigate these various methods of defense evasion.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events or script blocks containing explicit commands known to clear command history?
    context: >
      Adversaries often use well-known, literal commands to clear their tracks from shell history. This question focuses on creating high-fidelity alerts by searching for the exact command strings used for this purpose, such as 'history -c' on Linux or 'Clear-History' in PowerShell. Detecting these literal strings is a straightforward way to identify explicit attempts at defense evasion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Syslog from network devices
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, ESXi Hosts, Network Switches and Routers
    range: last 90 days
    queries:
      - "search process_creation_logs or script_block_logs where command_line contains ('history -c', 'Clear-History', 'rm ~/.bash_history', 'del ConsoleHost_history.txt', 'cat /dev/null > ~/.bash_history', 'clear logging')"
  - question: Is there a statistically significant increase in the frequency of explicit history-clearing commands for any user or host?
    context: >
      While a single history-clearing command might be benign, a sudden spike in frequency for a specific user or on a specific host is anomalous and could indicate malicious activity, such as a script repeatedly clearing tracks. This question uses statistical analysis (mean, standard deviation) to detect such deviations from normal behavior, moving beyond simple single-event detection to find patterns of abuse.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Syslog from network devices
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, ESXi Hosts, Network Switches and Routers
    range: last 90 days
    queries:
      - "search command_logs | group by host, user, day | count history_clearing_commands | compare daily_count to 30-day_rolling_average and standard_deviation | alert if daily_count > (average + 3 * std_dev)"
  - question: Can a machine learning model identify novel or obfuscated command-line executions that are likely attempts to clear history?
    context: >
      Attackers often obfuscate commands to evade simple string-based detections. This question proposes using a supervised machine learning model (e.g., Random Forest) trained on features of known malicious and benign commands (like n-grams, parent process, user) to identify suspicious, previously unseen patterns that have a high probability of being an attempt to clear history.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Syslog from network devices
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, ESXi Hosts, Network Switches and Routers
    range: last 90 days
    queries:
      - "pipe command_line_data into pre-trained_classification_model | filter for events where model_prediction is 'history-clearing' with high_confidence"
  - question: Are shell environment variables being modified to disable command history logging?
    context: >
      A more subtle evasion technique than explicitly clearing an existing history file is to prevent history from being logged in the first place. This can be achieved by modifying shell configuration variables. This question looks for commands that set variables like 'HISTSIZE=0', 'HISTFILE=/dev/null', or 'Set-PSReadlineOption -HistorySaveStyle SaveNothing' to disable history functionality.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Linux auditd logs
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "search process_creation_logs or script_block_logs with regex on command_line for patterns like /HISTSIZE=0/i, /HISTFILE=\\/dev\\/null/i, /HistorySaveStyle.*SaveNothing/i"
  - question: Are there any command-line executions with unusually high entropy that might indicate obfuscated attempts to disable history?
    context: >
      Obfuscated commands often have higher character randomness (entropy) than normal, human-readable commands. This question uses entropy analysis as a statistical method to flag potentially malicious, obfuscated commands that might be missed by signature-based rules. It is particularly effective when high entropy commands also contain keywords like 'history' or 'HIST'.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Linux auditd logs
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "for each command_line | calculate shannon_entropy | compare entropy to per-user and per-parent-process baseline | alert if entropy > (baseline + 3 * std_dev)"
  - question: Is there an anomalous frequency of commands that modify shell environment variables related to history?
    context: >
      Even legitimate commands that modify shell variables should occur with a predictable frequency. A sudden increase in these modifications could signal an automated attempt by an adversary to disable history logging across multiple systems. This question proposes using a time-series model (e.g., ARIMA) to learn the normal frequency and alert when a statistically significant deviation occurs.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Linux auditd logs
      - Domain Controllers, Critical Application Servers, Developer Workstations, Administrator Bastion Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "monitor frequency of commands modifying 'HISTSIZE', 'PSReadlineOptions', etc. | apply time-series_anomaly_detection_model | alert if observed_frequency significantly deviates from forecast"
  - question: Are known shell history files being modified or deleted by unexpected processes?
    context: >
      While interactive shells normally write to their own history files, it is highly suspicious for other processes to do so. For example, a web server or a Microsoft Office application should never delete or modify a user's '.bash_history' or 'ConsoleHost_history.txt' file. This question focuses on detecting anomalous file access to history files by whitelisting expected processes (e.g., 'bash', 'powershell.exe') and alerting on all others.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Sysmon Event ID 26
      - Linux auditd logs
      - User home directories on file servers, Local user profiles on endpoints and servers, Administrator Bastion Hosts, ESXi Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "search file_audit_logs where target_file is a known_history_file and (event_type is 'delete' or 'write') and process_name is not in ('powershell.exe', 'bash', 'zsh', ...)"
  - question: Are history files being accessed by processes with a rare or anomalous parent-child process relationship?
    context: >
      Malware often spawns processes in unusual ways (e.g., 'services.exe' spawning 'powershell.exe' to run a script). This question proposes building a model of normal process lineages across the enterprise and alerting when a process that modifies a history file is spawned from a statistically rare or unexpected parent process, indicating a potentially malicious origin.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Sysmon Event ID 26
      - Linux auditd logs
      - User home directories on file servers, Local user profiles on endpoints and servers, Administrator Bastion Hosts, ESXi Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "for each history_file_modification_event | lookup the (parent_process, child_process) tuple in the process_lineage_graph | alert if the probability of this tuple is below a rarity_threshold (e.g., <0.01%)"
  - question: Can a machine learning model detect anomalous file modification or deletion events related to history files?
    context: >
      It is difficult to write rules for all possible ways an attacker might maliciously modify a history file. This question suggests using an anomaly detection model (e.g., One-Class SVM) that learns what 'normal' interactions with history files look like, based on features like process name, user, and time of day. The model can then flag any activity that deviates from this learned norm as a potential threat.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - Sysmon Event ID 26
      - Linux auditd logs
      - User home directories on file servers, Local user profiles on endpoints and servers, Administrator Bastion Hosts, ESXi Hosts, Linux/Unix Servers
    range: last 90 days
    queries:
      - "pipe file_modification_events for history_files into pre-trained_One-Class_SVM_model | filter for events classified as 'anomaly'"
  - question: Is command history being cleared shortly after a remote logon to a host?
    context: >
      A common attacker pattern is to log in remotely, perform malicious actions, and immediately clear their tracks to hinder investigation. This question aims to detect this specific, high-confidence sequence of events by creating a stateful correlation rule that looks for a history-clearing event occurring within a short time window (e.g., 5 minutes) after a successful remote logon (RDP, SSH) by the same user on the same host.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Internet-facing servers, VPN gateways, Domain Controllers, Administrator Bastion Hosts, Network perimeter firewalls
    range: last 90 days
    queries:
      - "correlate remote_logon_events with history_clearing_events | alert if (logon is followed by history_clear) on same (host, user) within 5 minutes"
  - question: Is command history being cleared following an anomalous remote logon?
    context: >
      This question enhances the previous one by adding a risk score to the logon event itself. A logon from a new geographical location, an unusual time of day, or a suspicious IP is inherently more risky. Correlating a high-risk logon event with a subsequent history-clearing action creates a very high-fidelity alert that is strongly indicative of malicious activity.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Internet-facing servers, VPN gateways, Domain Controllers, Administrator Bastion Hosts, Network perimeter firewalls
    range: last 90 days
    queries:
      - "for each remote_logon | score logon_risk based on (source_geo, time_of_day, source_ip_reputation) | correlate high_risk_logons with subsequent history_clearing_events within 10 minutes"
  - question: Are there any low-probability sequences of user actions that include history clearing, indicating a likely malicious session?
    context: >
      User sessions typically follow predictable patterns of events. This question proposes using a sequence analysis model (e.g., a Hidden Markov Model) to learn these benign patterns. The model can then identify and alert on a sequence of events that has a very low probability of occurring, such as [Anomalous Remote Login -> History File Deletion -> Network Connection to Rare ASN], which strongly suggests a malicious kill chain in progress.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Zeek conn.log
      - Linux auditd logs
      - Internet-facing servers, VPN gateways, Domain Controllers, Administrator Bastion Hosts, Network perimeter firewalls
    range: last 90 days
    queries:
      - "stream user_session_events into a trained_sequence_analysis_model (HMM) | alert when the model observes a low-probability_sequence containing a history_clearing_event"