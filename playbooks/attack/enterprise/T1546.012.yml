name: T1546.012: Image File Execution Options Injection
id: 9f0b8a1c-7d6e-4f5a-8b1c-9d0e1a2b3c4d
description: >-
  This playbook helps investigate whether an adversary is using Image File Execution Options (IFEO) injection for persistence or privilege escalation. Adversaries can manipulate the 'Debugger' value in the registry under 'HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options' for a specific executable. When that executable is launched, the specified debugger is executed instead. This playbook provides questions to detect this activity by monitoring for modifications to IFEO registry keys, specifically looking for debuggers pointing to malicious executables, scripts, or command shells. It also covers the use of the GFlags tool, monitoring for SilentProcessExit modifications, and identifying anomalous process chains where legitimate applications spawn unexpected children. The playbook addresses both persistence (hijacking common applications) and privilege escalation (hijacking high-integrity system processes or accessibility tools like sethc.exe and utilman.exe).
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a known malicious executable being set as an IFEO debugger for persistence?
    context: This question aims to identify a common persistence technique where an adversary modifies the Image File Execution Options (IFEO) registry key for a legitimate program to point to a malicious 'debugger'. When the legitimate program is launched, the malicious executable runs instead. By monitoring registry modifications (Sysmon Event ID 13, Windows Event ID 4657) to IFEO 'Debugger' values and comparing the hash of the new executable path against a threat intelligence feed, we can detect this high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13 OR WinEvent 4657)
          WHERE object_path MATCHES "Image File Execution Options\\*\\Debugger"
          FOR EACH event:
            executable_path = event.new_value
            file_hash = HASH(executable_path)
            IF file_hash IN known_malicious_hashes:
              ALERT HighSeverity "Known malicious IFEO debugger set"
  - question: Is an executable with statistically unusual path properties being set as an IFEO debugger?
    context: Adversaries often place their malicious payloads in unusual locations (like %APPDATA% or %TEMP%) or use randomly generated filenames to evade detection. This question uses statistical analysis to flag IFEO 'Debugger' modifications that deviate from the norm. By baselining normal debugger paths and analyzing properties like filename entropy and directory location frequency, we can identify suspicious modifications that might not be caught by signature-based methods.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13 OR WinEvent 4657)
          WHERE object_path MATCHES "Image File Execution Options\\*\\Debugger"
          FOR EACH event:
            executable_path = event.new_value
            filename = EXTRACT_FILENAME(executable_path)
            directory = EXTRACT_DIRECTORY(executable_path)
            entropy = CALCULATE_ENTROPY(filename)
            IF entropy > BASELINE_95TH_PERCENTILE_ENTROPY OR
               directory IN RARE_DEBUGGER_LOCATIONS_BASELINE:
              ALERT MediumSeverity "Anomalous IFEO debugger path properties detected"
  - question: Can a machine learning model identify a malicious IFEO registry modification for persistence?
    context: This question leverages a machine learning classifier (e.g., Random Forest) to provide a more nuanced detection than simple rules. By training a model on features like the modifying process, parent process, target executable, and properties of the debugger executable (path, signature), the system can score each IFEO modification for its likelihood of being malicious. This approach helps identify novel or sophisticated attacks that might evade symbolic and statistical checks.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_event (Sysmon 13 OR WinEvent 4657) WHERE object_path MATCHES "Image File Execution Options\\*\\Debugger":
            EXTRACT features (modifying_process, parent_process, target_exe, debugger_path_properties, debugger_signature_status)
            score = ML_MODEL.predict_proba(features)
            IF score > HIGH_CONFIDENCE_THRESHOLD:
              ALERT HighSeverity "ML model detected malicious IFEO persistence attempt"
  - question: Has a common application been hijacked via IFEO to point to an executable in a user-writable directory?
    context: This is a high-confidence symbolic check for a common persistence pattern. Adversaries often target ubiquitous applications like notepad.exe or mspaint.exe. They replace the legitimate execution path with their own malware, frequently placed in user-writable directories like C:\Users or C:\ProgramData. This question creates a specific rule to look for this exact combination of a targeted common application and a suspicious debugger path.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["notepad.exe", "mspaint.exe", "calc.exe"]
          suspicious_paths = ["C:\\Users\\*", "C:\\ProgramData\\*", "*\\Temp\\*"]
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES ("*\\Image File Execution Options\\" + watchlist + "\\Debugger")
          AND new_value MATCHES suspicious_paths
          ALERT HighSeverity "Common application IFEO hijacked to suspicious path"
  - question: Is a new IFEO debugger path statistically dissimilar from previously established legitimate paths for an application?
    context: This question uses string similarity to detect anomalous debugger paths. For any given application, there may be legitimate, known debugger paths. By establishing a baseline of these known-good paths, we can measure the dissimilarity (e.g., Levenshtein distance) of any newly set debugger path. A path that is significantly different from the established norm is highly suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES "*\\Image File Execution Options\\*\\Debugger"
          FOR EACH event:
            application = EXTRACT_APP_FROM_PATH(event.target_object)
            new_path = event.new_value
            known_paths = GET_BASELINE_PATHS(application)
            distance = CALCULATE_LEVENSHTEIN_DISTANCE(new_path, known_paths)
            IF distance > HISTORICAL_99TH_PERCENTILE_DISTANCE:
              ALERT MediumSeverity "Anomalous IFEO debugger path similarity score"
  - question: Is there an anomalous process chain originating shortly after an IFEO registry modification?
    context: A malicious IFEO injection will cause an anomalous process to be created when the target application is next run. This question uses an anomaly detection model (e.g., Isolation Forest) to look for unusual process creation events that occur within minutes of an IFEO registry change. By analyzing features like parent/child process names, command lines, and user context, the model can flag suspicious activity resulting from the IFEO trigger.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_event (Sysmon 13) WHERE target_object MATCHES "*\\Image File Execution Options\\*\\Debugger":
            timestamp = event.time
            SEARCH process_creation_events (Sysmon 1)
            WHERE event_time BETWEEN timestamp AND timestamp + 5_minutes
            FOR EACH process_event:
              features = EXTRACT_PROCESS_FEATURES(process_event)
              IF ML_ANOMALY_MODEL.predict(features) == "anomaly":
                ALERT HighSeverity "Anomalous process created after IFEO modification"
  - question: Has the GFlags tool been used to enable a process debugger in a suspicious context?
    context: The GFlags tool (gflags.exe) is a legitimate Windows utility that can be used to set IFEO debuggers via the command line. Adversaries can abuse this tool to set up persistence. This question looks for specific command-line patterns ('/i' and '/p /enable') indicative of this abuse. The context of the execution, such as being run by a non-admin user or spawned from an office application, is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1 OR WinEvent 4688)
          WHERE process_name == "gflags.exe"
          AND command_line CONTAINS "/i" AND command_line CONTAINS "/p /enable"
          AND parent_process NOT IN ["explorer.exe", "cmd.exe", "powershell.exe", "devenv.exe"]
          ALERT CriticalSeverity "Suspicious gflags.exe execution detected"
  - question: Is gflags.exe being executed by a rare user or parent process, or with unusual arguments?
    context: Beyond specific command-line patterns, any unusual execution of gflags.exe can be suspicious. This question uses statistical baselining to identify anomalies. By tracking the historical frequency of gflags.exe executions by user, parent process, and command-line arguments, we can flag any execution that is statistically rare (e.g., a user who has never run it before) or uses a combination of arguments not seen recently.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1 OR WinEvent 4688)
          WHERE process_name == "gflags.exe"
          FOR EACH event:
            IF event.user IN RARE_GFLAGS_USERS_BASELINE OR
               event.parent_process IN RARE_GFLAGS_PARENTS_BASELINE OR
               event.command_line NOT IN RECENT_GFLAGS_COMMANDS_BASELINE:
              ALERT MediumSeverity "Statistically rare gflags.exe execution detected"
  - question: Does a machine learning model classify a gflags.exe execution as malicious?
    context: This question applies a machine learning classifier to add intelligence to gflags.exe monitoring. By training a model on features like the parent process, user context (SYSTEM, admin, standard user), the target image file, and specific arguments, we can generate a risk score for each execution. This helps to distinguish legitimate developer or administrative use from malicious abuse with higher accuracy.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON process_creation_event (Sysmon 1) WHERE process_name == "gflags.exe":
            features = EXTRACT_GFLAGS_FEATURES(event.parent_process, event.user, event.command_line)
            risk_score = ML_MODEL.predict(features)
            IF risk_score > HIGH_RISK_THRESHOLD:
              ALERT HighSeverity "ML model detected malicious gflags.exe usage"
  - question: Is a common application spawning a command shell or an executable from a suspicious location?
    context: This question seeks to detect the result of a successful IFEO injection. When an application like notepad.exe is hijacked, its execution will lead to the 'debugger' process being spawned. If this debugger is a command shell or an executable in a non-standard path, it's a strong indicator of compromise. Correlating this process event with subsequent suspicious network activity further increases confidence.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          parent_watchlist = ["notepad.exe", "mspaint.exe", "calc.exe"]
          child_watchlist = ["cmd.exe", "powershell.exe", "wscript.exe", "cscript.exe"]
          SEARCH process_creation_events (Sysmon 1)
          WHERE parent_process IN parent_watchlist
          AND (child_process IN child_watchlist OR child_path NOT IN STANDARD_PATHS)
          CORRELATE with network_logs (Zeek) from child_pid to suspicious_ips
          ALERT HighSeverity "Anomalous child process spawned by common application"
  - question: Has a statistically rare parent-child process relationship been observed?
    context: Every environment has predictable process behaviors. A text editor should not spawn a command shell. This question establishes a baseline of normal parent-child process relationships and calculates the probability of their occurrence. When a new process pair is observed that is either brand new or has a very low historical probability, it is flagged as a statistical anomaly that could indicate an IFEO hijack or other malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1)
          FOR EACH event:
            parent = event.parent_process
            child = event.child_process
            probability = GET_HISTORICAL_PROBABILITY(child | parent)
            IF probability < 0.00001:
              ALERT MediumSeverity "Statistically rare parent-child process relationship detected"
  - question: Does a graph-based anomaly detection model identify a suspicious process lineage?
    context: Process relationships can be complex. This question models process activity as a graph, where processes are nodes and parent-child relationships are edges. A Graph Neural Network (GNN) can learn the normal structures of these process graphs. It can then identify anomalous subgraphs, such as mspaint.exe spawning powershell.exe which then spawns rundll32.exe, which is a strong indicator of a multi-stage attack initiated by an IFEO trigger.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          STREAM process_creation_events (Sysmon 1) into graph_database
          RUN graph_anomaly_detection_model on recent subgraphs
          IF model identifies anomalous_subgraph:
            ALERT HighSeverity "Anomalous process execution graph detected"
  - question: Has a potentially malicious monitoring application been set using SilentProcessExit?
    context: Adversaries can use the 'SilentProcessExit' registry key to execute a monitoring process whenever a target process exits. This provides another mechanism for persistence. This question looks for the creation of a 'MonitorProcess' value, extracts the specified executable, and checks its hash against threat intelligence or flags it if it's a script interpreter, indicating a likely malicious action.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES "*\\SilentProcessExit\\*\\MonitorProcess"
          FOR EACH event:
            monitor_exe_path = event.new_value
            monitor_exe_hash = HASH(monitor_exe_path)
            IF monitor_exe_hash IN known_malicious_hashes OR
               monitor_exe_path CONTAINS "powershell.exe":
              ALERT HighSeverity "Malicious SilentProcessExit monitor detected"
  - question: Is Silent Process Exit monitoring being configured for a statistically unusual executable?
    context: Legitimate use of SilentProcessExit monitoring is typically for system services or critical applications. It is highly unusual for it to be configured for a common user application like a web browser. This question baselines which executables are normally monitored. Any new configuration that targets an application not on the baseline, or uses a monitoring executable that is rare in the environment, is flagged as a statistical anomaly.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES "*\\SilentProcessExit\\*\\MonitorProcess"
          FOR EACH event:
            target_exe = EXTRACT_TARGET_EXE(event.target_object)
            monitor_exe = event.new_value
            IF target_exe NOT IN KNOWN_MONITORED_APPS_BASELINE OR
               PREVALENCE(monitor_exe) < 5_hosts:
              ALERT MediumSeverity "Anomalous SilentProcessExit configuration detected"
  - question: Does a machine learning model classify a SilentProcessExit configuration as malicious?
    context: This question uses a classifier to distinguish between legitimate and malicious Silent Process Exit configurations. By analyzing features like the process that modified the registry, the target executable being monitored (e.g., 'svchost.exe' vs 'chrome.exe'), and properties of the monitoring executable itself (path, signature), the model can provide a risk score to identify suspicious persistence attempts with greater accuracy.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_event (Sysmon 13) WHERE target_object MATCHES "*\\SilentProcessExit\\*\\MonitorProcess":
            features = EXTRACT_SPE_FEATURES(event.process, event.target_object, event.new_value)
            score = ML_MODEL.predict(features)
            IF score > HIGH_RISK_THRESHOLD:
              ALERT HighSeverity "ML model detected malicious SilentProcessExit configuration"
  - question: Has the IFEO debugger for a high-integrity system process been set to a known privilege escalation tool?
    context: This question targets a specific privilege escalation technique. Adversaries can hijack a process that normally runs with high privileges (e.g., lsass.exe, services.exe) by setting its IFEO debugger. When the system attempts to start that process, the adversary's tool runs with the same high privileges. This query looks for modifications to the IFEO keys of critical system processes and checks if the new debugger is a known privilege escalation tool like Mimikatz.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["services.exe", "lsass.exe", "winlogon.exe", "consent.exe"]
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES ("*\\Image File Execution Options\\" + watchlist + "\\Debugger")
          FOR EACH event:
            debugger_hash = HASH(event.new_value)
            IF debugger_hash IN privesc_tool_hashes:
              ALERT CriticalSeverity "Privilege escalation tool set as IFEO debugger"
  - question: Is the debugger for a high-integrity process an executable with a rare or untrusted digital signature?
    context: Legitimate debuggers for system processes should be properly signed by trusted publishers. This question uses the digital signature status as an indicator of trust. When an IFEO debugger is set for a high-integrity process, this query checks the new executable. If it is unsigned, or if the signature is from a publisher that is very rare in the environment, it is flagged as highly suspicious and a potential privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["services.exe", "lsass.exe", "winlogon.exe"]
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES ("*\\Image File Execution Options\\" + watchlist + "\\Debugger")
          FOR EACH event:
            signature = GET_SIGNATURE(event.new_value)
            IF signature.status != "Valid" OR
               PREVALENCE(signature.thumbprint) < 0.001:
              ALERT HighSeverity "High-integrity process debugger has untrusted signature"
  - question: Does a machine learning model predict a privilege escalation attempt based on an IFEO modification?
    context: This question uses a machine learning model specifically trained to detect privilege escalation via IFEO. The model considers a combination of factors: the sensitivity of the target process (e.g., does it run as SYSTEM?), the user context of the process making the change, and properties of the new debugger executable. A high probability score from the model indicates a likely privilege escalation attempt requiring immediate investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_event (Sysmon 13) WHERE target_object MATCHES "*\\Image File Execution Options\\*\\Debugger":
            features = EXTRACT_PRIVESC_FEATURES(event.target_object, event.process, event.new_value)
            score = ML_PRIVESC_MODEL.predict(features)
            IF score > HIGH_CONFIDENCE_THRESHOLD:
              ALERT CriticalSeverity "ML model predicts IFEO privilege escalation attempt"
  - question: Has the IFEO debugger for an accessibility application been changed to a command shell?
    context: This is a classic privilege escalation and persistence technique known as a "sticky keys" backdoor. Adversaries modify the IFEO debugger for an accessibility application (like sethc.exe or utilman.exe) to point to cmd.exe. Because these applications can be launched from the logon screen before a user logs in, they run as SYSTEM. This modification allows an attacker to get a SYSTEM-level command prompt from the logon screen. This is a definitive, high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["sethc.exe", "utilman.exe", "osk.exe", "Magnify.exe", "Narrator.exe"]
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES ("*\\Image File Execution Options\\" + watchlist + "\\Debugger")
          AND new_value CONTAINS ("cmd.exe" OR "powershell.exe")
          ALERT CriticalSeverity "Accessibility feature backdoor detected (IFEO)"
  - question: Has a statistically rare modification been made to an accessibility application's IFEO key?
    context: Legitimate modifications to the IFEO keys for accessibility features are extremely rare, typically only occurring during system updates by trusted installers. Any modification is therefore a severe anomaly. This question formalizes that by tracking the historical frequency of these specific modifications. A non-zero count, especially when performed by a process other than a known system installer, provides a strong statistical basis for a high-confidence alert.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["sethc.exe", "utilman.exe", "osk.exe", "Magnify.exe", "Narrator.exe"]
          SEARCH registry_events (Sysmon 13)
          WHERE target_object MATCHES ("*\\Image File Execution Options\\" + watchlist + "\\Debugger")
          ALERT CriticalSeverity "Extremely rare modification to accessibility IFEO key"
  - question: Can a machine learning model distinguish an unauthorized modification to an accessibility IFEO key from a legitimate one?
    context: While rare, legitimate processes can modify accessibility IFEO keys. To reduce potential false positives from system updates, this question employs a supervised machine learning model. By training the model to recognize the characteristics of legitimate installers (e.g., process name like 'TrustedInstaller.exe', parent process, command line), it can more accurately identify unauthorized modifications made by malicious processes.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON registry_event (Sysmon 13) WHERE target_object MATCHES "*\\Image File Execution Options\\<accessibility_app>\\Debugger":
            features = EXTRACT_MODIFYING_PROCESS_FEATURES(event)
            prediction = ML_MODEL.predict(features)
            IF prediction == "unauthorized":
              ALERT CriticalSeverity "ML model detected unauthorized change to accessibility IFEO"
  - question: Has an accessibility application running as SYSTEM spawned a command shell?
    context: This question looks for the direct result of an accessibility feature backdoor being exploited. When an attacker triggers the hijacked accessibility feature (e.g., by pressing sticky keys at the logon screen), the accessibility application process (e.g., sethc.exe) will be created with SYSTEM privileges and will, in turn, spawn its 'debugger'—a command shell. Detecting this parent-child relationship is a direct and critical indicator of an active compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          parent_watchlist = ["utilman.exe", "sethc.exe", "osk.exe", "Magnify.exe", "Narrator.exe"]
          child_watchlist = ["cmd.exe", "powershell.exe"]
          SEARCH process_creation_events (Sysmon 1)
          WHERE parent_process IN parent_watchlist
          AND child_process IN child_watchlist
          AND parent_user == "NT AUTHORITY\\SYSTEM"
          ALERT CriticalSeverity "Accessibility feature backdoor actively used for privilege escalation"
  - question: Did an accessibility application spawn any child process at all?
    context: Normally, Windows accessibility applications do not spawn child processes. Their function is self-contained. Therefore, the observation of any child process being spawned by utilman.exe, sethc.exe, etc., is a severe statistical anomaly with a near-zero legitimate probability. This question creates a simple but effective rule to detect this behavior, which can then be correlated with logon events to confirm activity at the logon screen.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          parent_watchlist = ["utilman.exe", "sethc.exe", "osk.exe", "Magnify.exe", "Narrator.exe"]
          SEARCH process_creation_events (Sysmon 1)
          WHERE parent_process IN parent_watchlist
          CORRELATE with logon_events (WinEvent 4624) on same host near the same time
          ALERT CriticalSeverity "Accessibility application spawned an unexpected child process"
  - question: Is there anomalous network activity immediately following the suspected use of an accessibility backdoor?
    context: After gaining a SYSTEM shell via an accessibility backdoor, an adversary's next step is often to establish command and control (C2). This question uses a time-series anomaly detection model to look for sudden changes in network behavior on a host right after a suspected backdoor event. Spikes in metrics like bytes sent, number of unique destination IPs, or unusual DNS query patterns can indicate post-exploitation C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON accessibility_backdoor_alert for host:
            t = alert.timestamp
            SEARCH network_logs (Zeek) from host WHERE time BETWEEN t and t + 10_minutes
            EXTRACT features (bytes_out, unique_dst_ips, dns_entropy)
            IF ML_TIMESERIES_MODEL.predict(features) == "anomaly":
              ALERT HighSeverity "Anomalous network traffic follows accessibility backdoor usage"
  - question: Is the IFEO debugger for a high-integrity process unsigned or located in a user-writable directory?
    context: This question combines multiple suspicious attributes for a high-confidence alert. Legitimate debuggers for system processes should be digitally signed and located in protected system directories. An adversary's payload, however, is often unsigned and dropped into a user-writable location like C:\Users or C:\ProgramData. This query checks for IFEO modifications to high-integrity processes where the new debugger executable exhibits both of these suspicious characteristics.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13) for high-integrity process IFEO modification
          JOIN with image_load_events (Sysmon 7) on executable_path
          WHERE (image_load.signed == false OR image_load.signature_status != "Valid")
          AND executable_path MATCHES ["C:\\Users\\*", "C:\\ProgramData\\*", "C:\\Windows\\Temp"]
          ALERT CriticalSeverity "Unsigned debugger in user-writable dir set for high-integrity process"
  - question: Is a high-integrity process's debugger located in a statistically rare directory?
    context: Even if a malicious debugger is not in a common user-writable directory, its location may still be anomalous. This question establishes a statistical baseline of all directory paths used for IFEO debuggers across the enterprise. When a debugger is set for a high-integrity process, its path is compared to this baseline. If the path is statistically rare (e.g., seen on less than 1% of systems), it is flagged as an outlier worthy of investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry_events (Sysmon 13) for high-integrity process IFEO modification
          FOR EACH event:
            debugger_path = EXTRACT_DIRECTORY(event.new_value)
            frequency = GET_BASELINE_FREQUENCY(debugger_path)
            IF frequency < 0.01:
              ALERT MediumSeverity "High-integrity process debugger in statistically rare location"
  - question: Are there any outlier endpoints based on their overall IFEO configurations?
    context: Instead of looking at a single event, this question analyzes the entire IFEO configuration of an endpoint to find outliers. It uses a clustering algorithm (e.g., DBSCAN) to group hosts with similar configurations. A host's configuration is represented by a feature vector including which executables have debuggers, the paths of those debuggers, and their signature statuses. Hosts that do not fit into any cluster are flagged as outliers, indicating they have a unique and potentially malicious IFEO configuration.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH host in enterprise:
            feature_vector = CREATE_IFEO_CONFIG_VECTOR(host)
          outliers = DBSCAN_CLUSTER(all_feature_vectors)
          FOR EACH host in outliers:
            ALERT MediumSeverity "Host identified as an outlier based on IFEO configuration"