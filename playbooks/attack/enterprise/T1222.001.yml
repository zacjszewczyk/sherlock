name: T1222.001: Windows File and Directory Permissions Modification
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is modifying file or directory permissions to evade defenses or enable persistence. This is often done using command-line tools like icacls.exe, cacls.exe, takeown.exe, attrib.exe, or PowerShell's Set-Acl. Detections focus on identifying the use of known-malicious versions of these tools, analyzing command lines for suspicious arguments such as granting broad permissions (e.g., FullControl) to permissive groups (e.g., Everyone), monitoring for permission changes on critical persistence-related binaries (e.g., sethc.exe), detecting bulk permission modifications indicative of 'permission bombing', and correlating permission changes with subsequent process execution and outbound network connections.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known-malicious version of a permission modification tool (icacls.exe, cacls.exe, takeown.exe, attrib.exe) being executed?
  context: This question aims to detect the simplest case of this technique, where an adversary uses a known-malicious or trojanized version of a standard Windows utility. By hashing the executable image of these common permission modification tools and comparing the hash against a threat intelligence feed, we can identify compromised tool execution, which is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4688 from all Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.
  range: last 90 days
  queries:
  - "FOR each process creation event (Event ID 4688) WHERE process name is one of ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe'), CALCULATE process image hash, QUERY threat intelligence feed API with hash, IF match found THEN ALERT."
- question: Is a permission modification tool being executed with an unusually complex or obfuscated command line?
  context: Adversaries often use complex or obfuscated command lines to hide their actions. Calculating the Shannon entropy of the command line can quantify this complexity. A command line with an entropy score significantly higher than the established baseline for legitimate administrative use suggests potential obfuscation or a non-standard, possibly malicious, command structure.
  answer_sources:
  - Windows Event ID 4688 from all Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.
  range: last 90 days
  queries:
  - "FOR each process creation event (Event ID 4688) WHERE process name is one of ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe'), CALCULATE command line Shannon entropy, COMPARE entropy to established baseline, IF entropy > 95th percentile THEN ALERT."
- question: Does the execution of a permission modification tool exhibit characteristics of known malicious behavior based on a machine learning model?
  context: This question leverages machine learning to perform a more nuanced detection. A supervised model can learn the subtle patterns that differentiate malicious and benign executions by analyzing a combination of features like the parent process, user context, command-line properties, and threat intelligence data. This provides a more robust detection capability than single-factor rules.
  answer_sources:
  - Windows Event ID 4688 from all Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.
  range: last 90 days
  queries:
  - "FOR each process creation event (Event ID 4688) WHERE process name is one of ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe'), EXTRACT features (parent process, user, command-line length/entropy, TI hash result), SCORE with classification model, IF score indicates 'malicious' THEN ALERT."
- question: Is a permission modification tool being used to grant broad access (e.g., FullControl) to permissive groups (e.g., Everyone) on critical system files?
  context: This is a classic adversary tactic to weaken system security. By explicitly looking for commands that grant powerful permissions like 'FullControl' or 'Modify' to broad user groups like 'Everyone' on sensitive directories (e.g., C:\Windows\System32), we can directly detect attempts to create security backdoors or enable further unauthorized actions.
  answer_sources:
  - Windows Event ID 4688 from critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - "FOR each process creation event (Event ID 4688) WHERE process name is one of ('icacls.exe', 'cacls.exe', 'Set-Acl'), PARSE command line with regex for permissive grants (e.g., 'grant', 'Everyone', ':F') on critical directories, IF match found THEN ALERT."
- question: Is a user modifying permissions on critical directories at a rate that is anomalous for their role?
  context: Legitimate administrators may modify permissions, but their activity typically follows a pattern. This question aims to identify users who are changing permissions on critical directories far more frequently than their peers or their own historical behavior would suggest. A sudden spike in this activity can indicate a compromised account or insider threat.
  answer_sources:
  - Windows Event ID 4688 from critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - "FOR each user, COUNT permission modification events (Event ID 4688) on critical directories per hour, COMPARE count to established role-based baseline, IF count > 99th percentile THEN ALERT."
- question: Does the command line used for a permission modification appear suspicious when analyzed by a natural language processing (NLP) model?
  context: Command-line strings have a syntax and structure that can be understood by advanced NLP models. This question involves using a model like BERT, trained on legitimate and malicious command examples, to 'read' a command line and classify it as suspicious. This can catch novel or complex variations that regex or simple heuristics might miss.
  answer_sources:
  - Windows Event ID 4688 from critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.
  range: last 90 days
  queries:
  - "FOR each permission modification event (Event ID 4688), EXTRACT command line string, SCORE string with fine-tuned NLP model, IF score indicates 'suspicious' THEN ALERT."
- question: Has the Discretionary Access Control List (DACL) been modified on a critical persistence-related file like sethc.exe or Utilman.exe?
  context: Adversaries often modify permissions on accessibility binaries (e.g., sethc.exe for Sticky Keys) to create a powerful persistence mechanism. Since legitimate changes to these files are extremely rare, any modification to their permissions (audited via Event ID 4670) is highly suspicious and warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4670 from file system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).
  range: last 90 days
  queries:
  - "ENABLE SACL auditing for 'Write DAC' on watchlist files, CREATE rule to monitor for Windows Event ID 4670, IF `ObjectName` in event matches a file on the watchlist THEN trigger high-priority ALERT."
- question: Has there been any permission modification activity at all on critical persistence files within the last 30 days?
  context: This question applies a zero-tolerance approach to changes on highly sensitive files. Given that permissions on files like sethc.exe should almost never change on a production system, a simple threshold model where any single modification event (a count greater than zero) triggers an alert is an effective and low-noise detection strategy.
  answer_sources:
  - Windows Event ID 4670 from file system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).
  range: last 90 days
  queries:
  - "MONITOR Windows Event ID 4670 for watchlist files, IF count of events > 0 over a 30-day window THEN trigger high-severity ALERT."
- question: Does a permission modification on a critical file deviate from normal system activity patterns according to an unsupervised machine learning model?
  context: This question uses an unsupervised model like Isolation Forest to find 'unknown unknowns'. By training a model on normal system behavior (user, process, time of day), it can identify any permission change on a critical file as a rare and isolated event—an anomaly—without needing prior examples of malicious behavior.
  answer_sources:
  - Windows Event ID 4670 from file system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).
  range: last 90 days
  queries:
  - "FOR each Event ID 4670 on a watchlist file, EXTRACT features (user, process, object, time), SCORE event with unsupervised anomaly detection model (e.g., Isolation Forest), IF anomaly score is high THEN ALERT."
- question: Is a single user or process rapidly modifying permissions on a large number of files (e.g., >50 in 10 minutes)?
  context: This behavior, sometimes called 'permission bombing', can be indicative of ransomware preparing to encrypt files or an adversary taking broad ownership of a file system. A simple threshold rule that counts permission modification events (Event ID 4670) from a single source over a short time window is a direct way to detect such bulk operations.
  answer_sources:
  - Windows Event ID 4670 from file servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.
  range: last 90 days
  queries:
  - "COUNT Windows Event ID 4670 events, GROUP BY user and computer over a 10-minute sliding window, IF count > 50 THEN trigger medium-severity ALERT."
- question: Is a user's rate of file permission modifications a statistical outlier compared to their own normal behavior?
  context: Instead of a fixed threshold, this question tailors detection to individual users. By calculating a Z-score, we can determine if a user's current activity is statistically improbable compared to their own established baseline. This helps reduce false positives from administrators who legitimately perform bulk operations while still catching unusual activity.
  answer_sources:
  - Windows Event ID 4670 from file servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.
  range: last 90 days
  queries:
  - "FOR each user, CALCULATE hourly count of Event ID 4670, COMPARE to user's historical average and standard deviation, IF Z-score > 3 THEN ALERT."
- question: Does a cluster of permission modification events indicate an anomalous bulk operation?
  context: This question uses a density-based clustering algorithm (e.g., DBSCAN) to find bulk activity. A DBSCAN algorithm can automatically identify dense groups of events in the data (based on time, user, and process) without needing a predefined threshold. A dense cluster represents a rapid burst of activity from a single source and can be flagged as anomalous.
  answer_sources:
  - Windows Event ID 4670 from file servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.
  range: last 90 days
  queries:
  - "APPLY DBSCAN clustering to Event ID 4670 data using features (timestamp, user, process), IF a dense cluster is identified THEN flag as anomalous bulk modification and ALERT."
- question: Is there a sequence of a permission change, followed by a process execution from that location, followed by an external network connection?
  context: This question looks for a specific, high-confidence attack chain. An adversary modifies permissions on a directory, places and executes a payload from that directory, and then the payload establishes a command and control connection. Correlating these three distinct events (Event ID 4670, Event ID 4688, and a Zeek conn.log) in a tight time window provides strong evidence of post-compromise activity.
  answer_sources:
  - Windows Event ID 4670, Windows Event ID 4688, and Zeek conn.log from Internet-facing systems, DMZ servers, and developer workstations with direct internet access.
  range: last 90 days
  queries:
  - "CREATE stateful rule: IF (Event 4670 on dir D) FOLLOWED BY (Event 4688 from dir D) FOLLOWED BY (Zeek log for outbound connection from host) WITHIN 15 minutes, THEN trigger high-severity ALERT."
- question: For a correlated attack chain alert, is the outbound network connection using an unusually rare port?
  context: This question adds context to an existing alert to increase its priority. After detecting the attack sequence, analyzing the destination port provides more information. If the connection uses a port that is rarely seen across the enterprise (e.g., not 80/443), it is more likely to be a custom C2 channel, increasing the severity and urgency of the alert.
  answer_sources:
  - Windows Event ID 4670, Windows Event ID 4688, and Zeek conn.log from Internet-facing systems, DMZ servers, and developer workstations with direct internet access.
  range: last 90 days
  queries:
  - "ON alert from stateful correlation rule, EXTRACT destination port from Zeek log, COMPARE port against enterprise-wide port frequency baseline, IF port is in bottom 5th percentile of usage, INCREASE alert risk score."
- question: Does the sequence of events (permission change, process execution, network connection) deviate from normal user session patterns according to a sequence-based ML model?
  context: This question uses a sophisticated deep learning model (LSTM) to understand the 'grammar' of normal user activity. The model is trained on countless benign event sequences. When presented with the specific sequence of a permission change, process execution, and network connection, a high reconstruction error signifies that this pattern is highly abnormal and does not fit any learned benign behavior.
  answer_sources:
  - Windows Event ID 4670, Windows Event ID 4688, and Zeek conn.log from Internet-facing systems, DMZ servers, and developer workstations with direct internet access.
  range: last 90 days
  queries:
  - "FOR a sequence of user events [Event A, Event B, ...], FEED sequence into trained LSTM autoencoder, IF reconstruction error for the sequence `[4670, 4688, conn]` is high, THEN trigger high-confidence ALERT."