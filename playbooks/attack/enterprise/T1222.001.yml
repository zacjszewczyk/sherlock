name: 'T1222.001: Windows File and Directory Permissions Modification'
id: '2d8b4a7e-1f8c-4e5a-9d6f-7c1b8a0d3e9f'
description: "This playbook helps investigate whether an adversary is modifying file or directory permissions to evade defenses or enable persistence. It covers several indicators of this technique, including: the execution of permission modification commands (e.g., icacls.exe) where the binary hash is known-malicious; the use of these commands to grant broad permissions (e.g., Full Control) to permissive groups (e.g., Everyone) on critical system directories; the direct modification of Discretionary Access Control Lists (DACLs) on known persistence targets like accessibility binaries (e.g., sethc.exe); a large burst of permission modification events in a short time, indicating 'permission bombing'; and a correlated sequence of a permission change, followed by a process execution from that location, and a subsequent outbound network connection."
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'Are known malicious versions of permission modification tools (icacls.exe, cacls.exe, takeown.exe, attrib.exe) being executed?'
    context: 'Adversaries may replace legitimate system utilities with malicious versions or use trojanized tools that masquerade as legitimate ones. This question aims to detect the execution of these specific permission-modifying tools by checking their file hashes against a threat intelligence feed. A match is a high-confidence indicator of compromise.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe')
          FOR_EACH event:
            image_hash = HASH(event.process_path)
            is_malicious = QUERY_THREAT_INTEL_API(image_hash)
            IF is_malicious == TRUE:
              ALERT "Known malicious permission modification tool executed"
  - question: 'Are permission modification tools being executed with unusually complex or obfuscated command lines?'
    context: 'High Shannon entropy in command-line arguments can indicate obfuscation, a common technique used by adversaries to hide their commands from simple signature-based detection. This question looks for executions of permission modification tools where the command-line arguments are statistically unusual compared to a learned baseline of normal administrative activity, suggesting malicious intent.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe')
          FOR_EACH event:
            entropy = CALCULATE_ENTROPY(event.command_line)
            baseline_entropy = GET_BASELINE_ENTROPY(event.user_role)
            IF entropy > 95th_percentile(baseline_entropy):
              ALERT "Anomalous command-line entropy for permission modification tool"
  - question: 'Can we use machine learning to classify executions of permission modification tools as benign or malicious based on multiple contextual features?'
    context: 'This question proposes a more advanced, holistic detection method. Instead of relying on a single indicator, a supervised machine learning model can analyze a combination of features (e.g., parent process, user context, command-line length, command-line entropy) to make a more nuanced decision, potentially reducing false positives and detecting novel threats that evade simpler rules.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, with a focus on Domain Controllers, authentication servers, critical application servers, and file servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'takeown.exe', 'attrib.exe')
          FOR_EACH event:
            features = EXTRACT_FEATURES(event)
            prediction = ML_MODEL.predict(features)
            IF prediction == 'malicious':
              ALERT "ML model classified permission modification as malicious"
  - question: 'Are overly permissive access rights being granted to broad user groups on critical system files or directories?'
    context: 'Adversaries often grant "Full Control" or "Modify" permissions to groups like "Everyone" or "Authenticated Users" on critical system directories (e.g., C:\Windows\System32) to facilitate persistence or further privilege escalation. This question specifically hunts for command-line evidence of this activity using regular expressions to find these dangerous permission grants.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'powershell.exe')
          AND command_line MATCHES REGEX `/(grant|g).*(Everyone|Authenticated Users|Users).*:([Ff]|[Mm])/`
          AND target_path IN (critical_directory_list)
          ALERT "Overly permissive rights granted on critical directory"
  - question: 'Is any user modifying permissions on critical directories at a rate that is anomalous for their role?'
    context: 'While some permission changes are normal, a sudden spike in this activity for a specific user, especially when compared to their peers or their own historical behavior, can be suspicious. This question aims to detect such statistical outliers, which might indicate automated scripting by an adversary or a compromised account.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          BASELINE modification counts per user role per hour on critical directories.
          FOR_EACH user:
            current_hour_count = COUNT modifications on critical dirs in last hour
            role_baseline = GET_BASELINE(user.role)
            IF current_hour_count > 99th_percentile(role_baseline):
              ALERT "Anomalous frequency of permission modifications for user role"
  - question: 'Can we use a natural language processing (NLP) model to identify suspicious command-line structures used in permission modifications?'
    context: 'This question leverages advanced AI to understand the "language" of command-line arguments. By fine-tuning a model like BERT on known good and bad examples, it can learn to identify subtle, complex, or novel malicious patterns that regular expressions or simple entropy checks might miss, providing a more robust detection capability.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Critical system directories such as C:\Windows\System32, C:\Windows\SysWOW64, C:\ProgramData, and user profile directories on all Windows endpoints and servers.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH process_creation_events (e.g., EventID 4688)
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'powershell.exe')
          FOR_EACH event:
            command_string = event.command_line
            suspicious_score = NLP_MODEL.score(command_string)
            IF suspicious_score > threshold:
              ALERT "NLP model detected suspicious command-line for permission modification"
  - question: 'Have the permissions been modified on critical accessibility feature binaries or logon scripts?'
    context: 'Adversaries frequently abuse accessibility features (like Sticky Keys via sethc.exe) for persistence by replacing them with a command prompt. To do this, they must first modify the file''s permissions. This question focuses on detecting permission changes (Event ID 4670) on these specific, high-value targets, as any such modification is extremely suspicious and requires immediate investigation.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          ENABLE SACL auditing for 'Write DAC' on watchlist files.
          SEARCH security_events (e.g., EventID 4670)
          WHERE ObjectName IN (critical_file_watchlist: ['sethc.exe', 'Utilman.exe', ...])
          ALERT "Permissions modified on critical persistence-related file"
  - question: 'Has there been *any* recent permission modification on files that are almost never legitimately changed?'
    context: 'This is a simple but effective thresholding strategy. For files like sethc.exe or Utilman.exe, legitimate permission changes are so rare that any single occurrence within a month is a strong indicator of compromise. This approach is easy to implement and has a very low false positive rate, making it a high-confidence alert.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).'
    range: 'last 30 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH security_events (e.g., EventID 4670) over last 30 days
          WHERE ObjectName IN (critical_file_watchlist)
          count = COUNT(events)
          IF count > 0:
            ALERT "Rare permission modification detected on critical file"
  - question: 'Can an unsupervised machine learning model identify anomalous permission changes on critical files without prior labeling?'
    context: 'This question proposes using an anomaly detection model like Isolation Forest to find unusual permission modifications. The model learns what "normal" looks like from a baseline of activity and then flags events that deviate significantly based on features like the user, process, and time of day. This is useful for detecting novel attack patterns on critical files, even if they do not match pre-defined rules.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File system locations on Windows hosts containing accessibility feature binaries (e.g., C:\Windows\System32\) and logon/startup script directories (e.g., C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp).'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH security_events (e.g., EventID 4670)
          WHERE ObjectName IN (critical_file_watchlist)
          FOR_EACH event:
            features = EXTRACT_FEATURES(event)
            anomaly_score = ANOMALY_MODEL.predict(features)
            IF anomaly_score is high:
              ALERT "Unsupervised model detected anomalous permission change on critical file"
  - question: 'Is there a sudden, high-volume burst of file permission modifications from a single user or process?'
    context: 'Adversaries sometimes perform "permission bombing" where they rapidly change permissions on a large number of files to disrupt access or hide their tracks. This question aims to detect such brute-force activity by looking for a high count (e.g., >50) of permission change events (Event ID 4670) in a short time window (10 minutes).'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.'
    range: 'last 10 minutes'
    queries:
      - technology: 'Pseudocode'
        query: |
          SEARCH security_events (e.g., EventID 4670)
          GROUP BY SubjectUserName, ComputerName
          COUNT events over a 10-minute sliding window
          IF count > 50:
            ALERT "Potential permission bombing detected"
  - question: 'Is a user''s rate of file permission modifications statistically anomalous compared to their own normal behavior?'
    context: 'This question refines the previous one by using a dynamic, user-specific baseline instead of a fixed global threshold. By calculating a Z-score, it identifies activity that is unusual *for that specific user*, making it more effective at spotting compromised accounts that are being used atypically, while reducing false positives from administrators who normally perform many changes.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          FOR_EACH user:
            ESTABLISH baseline (avg, stdev) of EventID 4670 counts per hour.
            current_hour_count = COUNT events in last hour for user.
            z_score = (current_hour_count - avg) / stdev
            IF z_score > 3:
              ALERT "Statistically significant spike in permission modifications for user"
  - question: 'Can we use clustering algorithms to automatically identify groups of bulk file permission modifications?'
    context: 'This question proposes using a density-based clustering algorithm like DBSCAN to automatically find "hotspots" of activity. Unlike simple thresholding, this method can identify bursts of activity without a predefined count, flagging any unusually dense group of permission changes by the same user/process in a short time as a potential bulk operation.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'File servers, document management systems, and developer workstations where bulk file operations may occur, providing a baseline for normal activity.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          GATHER EventID 4670 data (timestamp, user, process).
          RUN DBSCAN clustering algorithm on the data.
          FOR_EACH cluster identified:
            IF cluster is dense (many points in short time with same user/process):
              ALERT "Anomalous cluster of permission modification events detected"
  - question: 'Is there a sequence of events where a directory''s permissions are changed, a new process is run from it, and that process makes an external network connection?'
    context: 'This question hunts for a classic attack chain: modify permissions to a directory, drop and execute a payload from that directory, and have the payload connect back to a command-and-control server. Correlating these three distinct events (permission change, process execution, network connection) in a short time window provides a very high-fidelity indicator of compromise.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Internet-facing systems, DMZ servers, and developer workstations with direct internet access, which are common staging points for post-compromise activity.'
    range: 'within 15 minutes'
    queries:
      - technology: 'Pseudocode'
        query: |
          CORRELATE events within 15 minutes on the same host:
          IF (EventID 4670 for directory D)
          FOLLOWED BY (EventID 4688 for process P in directory D)
          FOLLOWED BY (Network connection from process P to public IP)
          THEN ALERT "Suspicious sequence: Perm-Change -> Proc-Exec -> Net-Conn"
  - question: 'When a suspicious process makes an outbound connection, is it using an uncommon destination port?'
    context: 'This question serves as an enrichment step for other detections. Adversaries often use non-standard ports for C2 communication to evade simple firewall rules. By checking if the destination port is rare for the organization (e.g., in the bottom 5th percentile of usage), we can increase our confidence that the activity is malicious and prioritize the alert accordingly.'
    answer_sources:
      - 'Zeek conn.log'
      - 'Internet-facing systems, DMZ servers, and developer workstations with direct internet access, which are common staging points for post-compromise activity.'
    range: 'last 30 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          FOR_EACH alert from a correlated rule:
            port = alert.destination_port
            port_frequency_baseline = GET_ALL_OUTBOUND_PORT_COUNTS()
            IF port is in bottom 5% of frequency_baseline:
              INCREASE_RISK_SCORE(alert, 50%)
              ALERT "Suspicious sequence involves rare destination port"
  - question: 'Does the sequence of a permission change, process execution, and network connection deviate from normal, learned patterns of user behavior?'
    context: 'This question proposes a sophisticated, sequence-aware machine learning approach. An LSTM autoencoder can learn the normal "rhythm" and order of events in a user session. When it encounters a sequence like [file modification -> process execution -> network connection], which is rare in normal behavior, it will fail to "reconstruct" it accurately, resulting in a high anomaly score and a strong signal of malicious activity.'
    answer_sources:
      - 'Windows Event ID 4670'
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Internet-facing systems, DMZ servers, and developer workstations with direct internet access, which are common staging points for post-compromise activity.'
    range: 'last 90 days'
    queries:
      - technology: 'Pseudocode'
        query: |
          observed_sequence = [Event4670, Event4688, NetConnEvent]
          reconstruction_error = LSTM_AUTOENCODER.predict(observed_sequence)
          IF reconstruction_error > threshold:
            ALERT "Sequence-based anomaly detection model flagged malicious activity chain"