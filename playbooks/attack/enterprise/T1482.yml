name: T1482: Domain Trust Discovery
id: 5e9b8f0a-7d1c-4b6e-8f9a-2c1d0b3e4a5f
description: This playbook focuses on detecting adversary attempts to discover domain trust relationships within an Active Directory environment. An adversary will try to identify trusts to map out potential pathways for lateral movement to other domains. The detection strategy involves identifying the use of specialized reconnaissance tools (e.g., BloodHound), the execution of native Windows utilities (e.g., nltest.exe, PowerShell) with specific discovery commands, command execution from anomalous parent processes (e.g., WINWORD.EXE), direct LDAP queries for 'trustedDomain' objects from unauthorized systems, and the sequential execution of multiple discovery commands on a single host.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any process creation events where the executable's file hash matches a known malicious domain reconnaissance tool?
  context: This question aims to detect the presence of well-known adversary tools like BloodHound/SharpHound by comparing the file hashes of all newly created processes against a threat intelligence feed of known malicious hashes. A match provides a high-confidence indicator of compromise, suggesting an adversary is using specialized tools for domain discovery.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  - Threat Intelligence Feed
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (e.g., EventID 4688)
      WHERE file_hash IN known_malicious_tool_hashes
      RETURN hostname, process_name, file_hash, timestamp
- question: Are there any process creation events for executables that are extremely rare in the environment?
  context: This question focuses on identifying outlier behavior. Adversaries often introduce tools that are not standard across the enterprise. By calculating the prevalence of every executed file hash, we can flag those that appear on a very small number of endpoints. This statistical approach can uncover new or custom reconnaissance tools that are not yet in threat intelligence feeds.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FROM process_creation_events (last 30 days):
      CALCULATE endpoint_count per file_hash
      IDENTIFY file_hashes where endpoint_count < 1st_percentile
      SEARCH for executions of these rare hashes
      RETURN hostname, process_name, file_hash
- question: Can machine learning models classify any process executions as suspicious based on their characteristics and rarity?
  context: This question leverages a machine learning model to proactively identify suspicious process executions that might be missed by signature-based or simple statistical methods. The model analyzes multiple features (process name, parent, command-line details, hash prevalence) to score each execution. A high suspicion score, especially for a rare process, strongly indicates a potential malicious tool used for domain discovery.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new process_creation_event:
      EXTRACT features (process_name, parent_process, cmd_length, cmd_entropy, hash_prevalence)
      INPUT features into classification_model
      IF model_output == "suspicious":
        TRIGGER alert with event details
- question: Are native Windows utilities being executed with command-line arguments specific to domain trust discovery?
  context: This question seeks to identify adversaries 'living off the land' by using legitimate system tools for malicious purposes. The focus is on creating specific rules to detect the exact command-line syntax used for domain trust enumeration, such as `nltest.exe /domain_trusts` or PowerShell's `Get-ADTrust`. A match is a strong indicator of active reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events with command-line logging
      WHERE process_name IN ["nltest.exe", "powershell.exe", "dsquery.exe"]
      AND command_line MATCHES REGEX for "/domain_trusts", "Get-ADTrust", "(objectClass=trustedDomain)"
      RETURN hostname, username, process_name, command_line
- question: Are users or hosts executing domain trust discovery commands anomalously compared to their historical baseline?
  context: This question aims to find unusual behavior by baselining normal activity for each user and host. While an administrator might run discovery commands, it's highly unusual for a standard user or a web server to do so. This method flags executions that deviate significantly from an established pattern, helping to identify compromised accounts or systems being used for reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user/host:
      CALCULATE baseline frequency of discovery_commands
      MONITOR new executions of discovery_commands
      IF execution_frequency > (baseline + 2 * std_dev) OR baseline == 0:
        TRIGGER alert with user, host, command
- question: Are there clusters of rare or unique command-line arguments that indicate obfuscated or novel domain trust discovery techniques?
  context: This question uses unsupervised machine learning to find new or hidden attack patterns. Adversaries may try to obfuscate their commands to evade simple signature-based rules. By clustering all command-line arguments based on their structure and keywords, this method can automatically group and surface rare clusters that contain discovery-related syntax, revealing previously unknown adversary tradecraft.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers
  - Member Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT all command-line strings into a clustering algorithm (e.g., DBSCAN)
      IDENTIFY clusters with low member count (rare patterns)
      MANUALLY review rare clusters for discovery-related keywords/syntax
      IF suspicious cluster is found:
        INVESTIGATE member commands
- question: Are domain trust discovery commands being launched by suspicious parent processes like office applications or web servers?
  context: This question looks for a common adversary tactic where a compromised application (e.g., Microsoft Word via a malicious macro) is used to spawn reconnaissance commands. Legitimate discovery commands are almost never initiated by applications like Outlook, Word, or web server processes. Detecting such an unlikely parent-child process relationship is a high-fidelity indicator of a breach.
  answer_sources:
  - Windows Event ID 4688
  - Web Servers
  - Application Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE child_process_name IN ["nltest.exe", "powershell.exe"]
      AND parent_process_name IN ["WINWORD.EXE", "OUTLOOK.EXE", "w3wp.exe", "tomcat.exe"]
      RETURN hostname, parent_process_name, child_process_name, command_line
- question: Have any statistically rare parent-child process relationships involving domain discovery tools been observed?
  context: This question aims to statistically identify anomalous process chains. By analyzing all parent-child process relationships across the enterprise, we can calculate the probability of any given relationship occurring. A discovery tool being spawned by a parent process that has rarely or never done so before is highly suspicious and warrants investigation. This can catch novel attack vectors not covered by predefined lists.
  answer_sources:
  - Windows Event ID 4688
  - Web Servers
  - Application Servers
  - User Workstations
  range: last 30 days
  queries:
  - technology: pseudocode
    query: |
      FROM process_creation_events (last 30 days):
      CALCULATE frequency of each unique (parent_process, child_process) pair
      IDENTIFY pairs with a probability < 0.1%
      IF child_process is a discovery tool:
        TRIGGER alert with event details
- question: Can graph-based anomaly detection identify unusual process execution chains that terminate in a domain discovery command?
  context: This question applies advanced analytics to model entire process execution chains as graphs. This allows for the detection of complex, multi-step attack patterns that might appear benign in isolation. A graph-based model can learn what normal process lineages look like and then identify never-before-seen or highly improbable chains, especially those ending with a discovery command, indicating sophisticated adversary activity.
  answer_sources:
  - Windows Event ID 4688
  - Web Servers
  - Application Servers
  - User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CONSTRUCT process lineage graphs from process_creation_events
      APPLY graph anomaly detection algorithm to identify rare subgraphs/paths
      IF anomalous path terminates in a discovery command:
        TRIGGER alert with the full process chain
- question: Are any systems, other than authorized servers, querying Active Directory for 'trustedDomain' objects via LDAP?
  context: This question focuses on network traffic to find direct LDAP queries for domain trust information. Typically, only Domain Controllers or specific administrative systems should perform these queries. An LDAP query for 'trustedDomain' objects originating from any other source, such as a standard user workstation, is a strong signal that an adversary is mapping out the domain trust structure.
  answer_sources:
  - Zeek ldap.log
  - Zeek conn.log
  - Network taps monitoring traffic to and from Domain Controllers
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH zeek_ldap_logs
      WHERE search_filter CONTAINS "(objectClass=trustedDomain)"
      AND source_ip NOT IN approved_dc_list
      RETURN source_ip, destination_ip, timestamp
- question: Has any non-DC host exhibited a sudden spike in the diversity of its LDAP queries, which is characteristic of reconnaissance?
  context: This question uses information theory to detect reconnaissance activity on the network. A reconnaissance script will often issue a wide variety of different LDAP queries in a short period. By measuring the entropy (a measure of diversity or randomness) of LDAP search filters from each source IP, we can spot a sudden, uncharacteristic increase. For a non-DC host, this is a strong indicator of an adversary exploring Active Directory.
  answer_sources:
  - Zeek ldap.log
  - Zeek conn.log
  - Network taps monitoring traffic to and from Domain Controllers
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_ip (non-DC) over 1-hour windows:
      CALCULATE Shannon entropy of ldap_search_filters
      IF entropy > 95th_percentile of historical baseline for that IP:
        TRIGGER alert with source_ip and entropy_score
- question: Are there any anomalous bursts in the volume of LDAP queries from a single host, as detected by a time-series model?
  context: This question uses machine learning to baseline the normal rhythm of LDAP traffic for each host. A time-series model (like an LSTM autoencoder) can learn this normal pattern. When a host suddenly generates a large burst of LDAP queries that deviates from its learned behavior, the model will flag it as an anomaly. This is effective for catching automated reconnaissance scripts that generate high volumes of traffic.
  answer_sources:
  - Zeek ldap.log
  - Zeek conn.log
  - Network taps monitoring traffic to and from Domain Controllers
  - Core network switch SPAN ports
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT time-series of LDAP query volume per host into anomaly detection model (e.g., LSTM)
      IF model flags a time window as anomalous for a given host:
        TRIGGER alert with host_ip and traffic details
- question: Has any single host executed a known sequence of 'living-off-the-land' discovery commands in a short time frame?
  context: This question aims to detect a common attack pattern where an adversary chains together several native discovery commands to build situational awareness. A typical sequence might involve finding the current user (`whoami`), discovering domain trusts (`nltest`), and then enumerating network shares (`net view`). Detecting this specific sequence of events from one host within a short window (e.g., an hour) provides strong evidence of hands-on-keyboard reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Enterprise-wide endpoint log collection points
  - Network sensor data aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE process_events by hostname over a 60-minute window
      SEARCH for the sequence:
        (process is "whoami" or "hostname")
        FOLLOWED BY (process is "nltest" with "/domain_trusts")
        FOLLOWED BY (process is "net" with "view" OR process is "ping")
      IF sequence matches:
        TRIGGER alert for that host
- question: Has any host accumulated a high risk score due to executing multiple discovery-related commands over time?
  context: This question uses a risk scoring model to identify suspicious hosts. Instead of looking for a rigid sequence, this method assigns points for various suspicious activities, with the points decaying over time. A host that performs several different discovery actions will accumulate a high score, even if they don't follow a predefined pattern. When a host's score crosses a statistical threshold, it is flagged for investigation, indicating a sustained reconnaissance effort.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Enterprise-wide endpoint log collection points
  - Network sensor data aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
      MAINTAIN a risk_score with time_decay
      ON discovery_command_execution:
        ADD points to host's risk_score
      IF risk_score > threshold (e.g., 99th percentile of all host scores):
        TRIGGER alert for that host
- question: Can a Hidden Markov Model detect a sequence of system activities that is highly improbable for benign behavior and likely indicates an attack progression?
  context: This question applies a sophisticated probabilistic model (HMM) to understand the 'grammar' of system events. The model learns the normal transition probabilities between different states of activity (e.g., from 'Local Discovery' to 'Domain Discovery'). When it observes a sequence of transitions that is very unlikely under the benign model, it flags the behavior. This can detect novel attack chains that combine different TTPs, including Domain Trust Discovery, in an unusual order.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Enterprise-wide endpoint log collection points
  - Network sensor data aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLASSIFY incoming events into states (e.g., 'Initial Access', 'Local Discovery', 'Domain Discovery')
      INPUT sequence of states for a host into a trained HMM
      IF HMM calculates a low probability for the observed sequence:
        TRIGGER alert, indicating anomalous state transition