name: T1056: Input Capture
id: d8b5f3d4-4a6c-4b8d-9b1e-2f3a4c5d6e7f
description: This playbook helps investigate whether an adversary has captured user input to obtain credentials or for general information collection. It focuses on identifying evidence of keyloggers and other input capture tools by analyzing process executions, network traffic, registry and file modifications, and script execution logs. Key indicators include the use of known keylogger tools, creation of suspicious artifacts (e.g., high-entropy registry keys), anomalous loading of UI-related libraries by non-GUI processes, PowerShell scripts referencing input capture APIs, staging of captured data in temporary files, and network patterns like beaconing or DNS tunneling used for data exfiltration.
type: technique
related:
- TA0006: Credential Access
- TA0009: Collection
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any process executions or network connections that match known keylogger indicators from threat intelligence feeds?
  context: This question seeks to identify keylogger activity by cross-referencing process and network events with a curated list of known malicious indicators. A match on a process hash, destination IP, or domain associated with keyloggers provides a high-confidence signal that an adversary is attempting to capture user input.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Critical Servers (e.g., Domain Controllers, Financial Systems)
  - Remote Access Gateways
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events OR network_connection_events
      WHERE (process_hash IN threat_intel_keylogger_hashes)
      OR (destination_ip IN threat_intel_keylogger_ips)
      OR (destination_domain IN threat_intel_keylogger_domains)
      RETURN host, process_name, process_hash, destination_ip, destination_domain
- question: Have any rare processes initiated network connections to newly created or low-reputation domains?
  context: This question aims to uncover unknown or novel keyloggers by focusing on statistical rarity. Legitimate software is typically widespread, whereas malware may only appear on a few hosts. A process with very low prevalence that communicates with a suspicious domain (newly registered or poorly reputed) is highly indicative of malicious activity.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Critical Servers (e.g., Domain Controllers, Financial Systems)
  - Remote Access Gateways
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH network_connection_events
      WHERE process_prevalence < 0.1% AND (domain_age < 30_days OR domain_reputation < 5th_percentile)
      RETURN host, process_name, process_hash, destination_domain, domain_age, domain_reputation
- question: Has a machine learning model identified any process or network events as likely keylogger activity?
  context: This question leverages a supervised machine learning model to score events based on a wide range of features (e.g., parent process, command line, network destination). This approach can detect sophisticated keyloggers that might evade simpler symbolic or statistical methods by learning the complex patterns of malicious behavior from historical data.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Critical Servers (e.g., Domain Controllers, Financial Systems)
  - Remote Access Gateways
  - DNS Resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT process_and_network_events TO keylogger_classification_model
      WHERE model_score > dynamic_threshold
      RETURN host, process_name, destination_ip, model_score, contributing_features
- question: Have any unsigned processes created registry keys or named pipes that match patterns of known keyloggers?
  context: This question looks for common persistence and communication methods used by keyloggers. Adversaries often create specific registry keys or named pipes to store configuration, stage data, or communicate between components. Searching for these artifact patterns, especially when created by an unsigned process, can directly uncover the presence of a keylogger.
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Virtual Desktop Infrastructure (VDI) instances
  - Registry Hives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_or_pipe_creation_events
      WHERE is_process_signed = false AND (artifact_name MATCHES keylogger_regex_patterns)
      RETURN host, process_name, artifact_name, event_type
- question: Have any registry keys or named pipes been created with unusually high-entropy names, suggesting obfuscation?
  context: This question aims to detect malicious persistence or inter-process communication mechanisms by identifying artifact names that are statistically abnormal. Adversaries often use randomly generated strings for artifact names to evade signature-based detection. High Shannon entropy is a mathematical indicator of such randomness, and flagging outliers can reveal these hidden components.
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Virtual Desktop Infrastructure (VDI) instances
  - Registry Hives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH registry_or_pipe_creation_events
      CALCULATE entropy of artifact_name
      COMPARE entropy to pre-calculated_baseline_98th_percentile
      WHERE entropy > baseline_threshold
      RETURN host, process_name, artifact_name, entropy_score
- question: Has a machine learning model identified any anomalous clusters of artifact creation events?
  context: This question uses unsupervised machine learning to find outliers in system activity. By clustering all artifact creation events based on features like the creating process, path, and name entropy, the model can group normal, benign activity into large clusters. Small, isolated clusters or individual outliers often represent suspicious or malicious behavior that warrants investigation.
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Virtual Desktop Infrastructure (VDI) instances
  - Registry Hives
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT artifact_creation_events TO clustering_model
      IDENTIFY outlier_clusters
      RETURN events_in_outlier_clusters
- question: Has a non-interactive or command-line process loaded user-interface-related DLLs?
  context: This question identifies a highly suspicious behavior indicative of process injection or hooking to capture input. System services or processes spawned from a command line should not typically load libraries like 'user32.dll', which are related to the graphical user interface. Such an action suggests an attempt to access user input functions from a background process.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database)
  - Domain Controllers
  - User Workstations
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dll_load_events
      WHERE (parent_process IN ('services.exe', 'powershell.exe'))
      AND (loaded_dll IN ('user32.dll', 'gdi32.dll'))
      AND (process_name NOT IN allowlist)
      RETURN host, process_name, parent_process, loaded_dll
- question: Has any process loaded a DLL that is statistically rare for that process across the enterprise?
  context: This question establishes a baseline of normal DLL loading behavior for every process and then looks for deviations. If a common process like 'svchost.exe' suddenly loads a UI-related DLL that it has almost never loaded before across thousands of systems, it is a strong statistical indicator of a code injection or hooking attack used for input capture.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database)
  - Domain Controllers
  - User Workstations
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dll_load_events
      CALCULATE frequency of each process-DLL pair across all hosts
      WHERE frequency < 0.5% AND is_dll_ui_related = true
      RETURN host, process_name, loaded_dll, frequency
- question: Has a time-series model detected an anomalous sequence of DLLs being loaded by a critical system process?
  context: This question uses machine learning to learn the precise, time-ordered signature of DLLs loaded by critical processes like 'lsass.exe' during normal startup. An anomaly detection model can then identify any deviation from this sequence, such as an extra DLL being loaded at the wrong time, which could represent a sophisticated injection attack aimed at capturing credentials or other sensitive input.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database)
  - Domain Controllers
  - User Workstations
  - Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT sequence_of_dll_loads for critical_processes TO lstm_autoencoder_model
      WHERE reconstruction_error > threshold
      RETURN host, process_name, anomalous_dll_sequence, error_score
- question: Do any PowerShell script logs contain commands or APIs related to input capture?
  context: This question performs a direct search for keywords related to input capture within PowerShell script logs. PowerShell is a powerful tool for adversaries, and they may use it to call Windows APIs or .NET methods to hook keyboard input, access the clipboard, or take screenshots. Finding these specific terms is a strong indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations
  - Administrative Workstations
  - Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH powershell_script_block_logs OR process_command_lines
      WHERE script_content MATCHES ('Set-WindowsHookEx', 'GetAsyncKeyState', 'Get-Clipboard', etc.)
      OR command_line CONTAINS '-enc'
      RETURN host, user, script_content
- question: Are there any PowerShell scripts with abnormally high entropy or character distributions indicative of obfuscation?
  context: Adversaries often obfuscate PowerShell scripts to hide malicious commands from simple keyword searches. This question uses statistical analysis to find these hidden scripts. High entropy (randomness) or a character frequency that matches Base64 or hex encoding suggests the script's true purpose is being concealed, which is common for malware.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations
  - Administrative Workstations
  - Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH powershell_script_block_logs
      CALCULATE entropy and character_frequency for each script_block
      WHERE entropy > 3_std_dev_from_mean OR character_frequency MATCHES base64_pattern
      RETURN host, user, script_content, entropy_score
- question: Has a Natural Language Processing (NLP) model classified any PowerShell scripts as malicious?
  context: This question uses an advanced machine learning model to understand the semantic meaning and intent of a PowerShell script, rather than just matching keywords. This allows it to detect novel or heavily obfuscated scripts that perform input capture, as the model can infer malicious intent from the code's structure and function, even if the specific commands are disguised.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations
  - Administrative Workstations
  - Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT powershell_script_block_logs TO fine_tuned_BERT_model
      WHERE classification = 'malicious' AND confidence_score > 0.9
      RETURN host, user, script_content, confidence_score
- question: Have there been any outbound HTTP POST requests to suspicious domains containing parameters suggestive of credential theft?
  context: This question looks for the exfiltration of captured data over HTTP. Keyloggers often send stolen data (like usernames and passwords) in POST requests. This query searches for requests that not only contain suspicious parameter names (e.g., 'user', 'pass') but are also sent to untrustworthy destinations like newly registered or low-reputation domains.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway)
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH http_logs
      WHERE http_method = 'POST'
      AND (uri or request_body CONTAINS ('user=', 'pass=', 'keydata='))
      AND (destination_domain_age < 30_days OR destination_domain_reputation = 'low')
      RETURN source_ip, destination_ip, destination_domain, uri
- question: Have any hosts sent an anomalous number of small, periodic HTTP POST requests to a single destination?
  context: This question aims to identify keylogger exfiltration by focusing on the statistical properties of the network traffic. Keyloggers often exfiltrate captured keystrokes in small, regular batches. This behavior results in POST requests of a consistent, small size sent at fixed intervals, which is statistically different from normal web browsing and can be flagged as an anomaly.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway)
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE http_logs by source_ip, destination_ip
      CALCULATE moving_average and std_dev of POST_request_size
      WHERE current_POST_size is > 3_std_dev_from_mean AND current_POST_size < 512_bytes
      RETURN source_ip, destination_ip, request_size_anomaly
- question: Has a time-series model detected network beaconing behavior from any host?
  context: This question uses machine learning to detect the 'heartbeat' communication characteristic of malware command-and-control (C2). Keyloggers regularly check in with their C2 server. A time-series model can analyze connection metadata (timing, data volume) to spot this abnormal regularity, even if the traffic is encrypted, providing a powerful way to find C2 channels.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway)
  - DNS Resolvers
  - Web Proxies
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT connection_logs_per_host TO time_series_anomaly_model
      MODEL inter_arrival_time, data_volume_sent
      WHERE anomaly_score > threshold
      RETURN source_ip, destination_ip, beaconing_score, connection_interval
- question: Has a non-standard process created a log or data file in a temporary or user directory?
  context: This question looks for the staging of captured data. Keyloggers often write captured keystrokes to a local file before exfiltrating them. This query identifies suspicious file creation events where an unrecognized or unsigned process creates a file with a common log extension (.log, .txt, .dat) in a directory often used for staging, like AppData or Temp.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Shared File Systems
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_creation_events
      WHERE file_path MATCHES '(AppData|Temp|Users\\Public)' AND file_extension IN ('.log', '.txt', '.dat')
      AND process_name NOT IN allowlist
      RETURN host, process_name, file_path
- question: Are there any files with extremely low prevalence created in common staging directories?
  context: This question uses enterprise-wide statistical analysis to find unique files that could be malware artifacts. Legitimate applications create files with names that are common across many systems. A file name that appears on only one or two hosts, especially in a temporary directory, is highly unusual and could be a randomly named log file created by a keylogger.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Shared File Systems
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_creation_events in staging_directories
      CALCULATE prevalence of each file_name across all hosts
      WHERE prevalence = 1
      RETURN host, process_name, file_name
- question: Has a machine learning model identified any suspicious file creation events?
  context: This question leverages a classification model to analyze multiple features of a file creation event simultaneously (e.g., creating process, path, file attributes, time of day). The model learns to distinguish between benign and malicious file creations, allowing it to flag events like a web browser creating a hidden data file in a user's Temp folder, which is a highly suspicious combination of factors.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations
  - Terminal Servers
  - Shared File Systems
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT file_creation_events TO file_creation_classification_model
      WHERE model_prediction = 'suspicious'
      RETURN host, process_name, file_path, contributing_features
- question: Has a process written to a local file and then immediately initiated an outbound network connection?
  context: This question looks for the 'stage-and-exfiltrate' behavior pattern. A keylogger will capture input, write it to a file, and then send that file to an external server. By correlating file write events with subsequent network connection events from the same process within a short time window, this query can detect this chain of activity.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations
  - Data Staging Servers
  - Network Egress Points
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CORRELATE events by ProcessGUID
      TRIGGER if (file_creation_event in staging_dir) is followed by (network_connection_event to external_ip) within 60_seconds
      RETURN host, process_name, file_path, destination_ip
- question: Are there any processes that exhibit a high probability of making a network connection immediately after writing to a file?
  context: This question statistically models process behavior to find tools designed specifically for data exfiltration. While many normal processes write files and make network connections, a process where a file write is almost always followed by a network connection (P(Network | Write) > 90%) is behaving like a dedicated exfiltration tool, not a standard application.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations
  - Data Staging Servers
  - Network Egress Points
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_name, analyze event sequences
      CALCULATE conditional_probability P(Network Connection | File Write)
      WHERE probability > 0.9 AND process_name NOT IN allowlist
      RETURN process_name, calculated_probability
- question: Has a sequence analysis model detected a rare 'keylog -> stage -> exfiltrate' pattern of events?
  context: This question uses advanced machine learning to detect the entire adversary attack chain as a single anomalous sequence. By learning what normal sequences of system events look like, a model can recognize a rare but malicious pattern, such as a process hooking the keyboard, writing to a temp file, and then another process reading that file and sending it outbound, even if the individual events seem benign in isolation.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations
  - Data Staging Servers
  - Network Egress Points
  - Endpoint File Systems
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT sequences_of_system_events TO RNN_sequence_model
      WHERE model_detects_rare_high_risk_sequence ('keylog -> stage -> exfiltrate')
      RETURN host, user, involved_processes, event_sequence
- question: Has any process performed an unusually high number of small write operations to a single file?
  context: This question aims to detect a keylogger writing captured keystrokes to a log file in real-time. This activity manifests as a large number of very small, rapid write or append operations. By monitoring file system audit logs and alerting when a process exceeds a threshold of writes per minute to one file, this query can distinguish keylogging from normal file access patterns.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations
  - Critical Application Servers
  - Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_write_events (EventID 4663 with 'WriteData' or 'AppendData')
      AGGREGATE by ProcessID, FileName over 1_minute_windows
      WHERE event_count > 30 AND process_name NOT IN allowlist
      RETURN host, process_name, file_name, write_count_per_minute
- question: Is any process writing to a file with an abnormally low and consistent time between write events?
  context: This question uses statistical analysis of event timing to identify automated file writing. Human activity or normal logging results in variable time gaps between file writes. A keylogger, however, will often write data at a fixed, automated interval. A very low mean and near-zero variance in the time between writes is a strong indicator of this machine-like behavior.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations
  - Critical Application Servers
  - Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process-file pair, AGGREGATE file_write_events over 5_minute_windows
      CALCULATE mean and variance of inter-arrival_time between writes
      WHERE mean_inter_arrival_time < 2_seconds AND variance is low
      RETURN host, process_name, file_name, timing_statistics
- question: Has a time-series model detected a file-write pattern characteristic of keylogging?
  context: This question applies machine learning to detect the specific signature of a keylogger appending to a log file. An autoencoder model is trained on normal file write patterns (e.g., large single writes, infrequent updates). It will then produce a high reconstruction error when it sees the pattern of frequent, small, incremental writes typical of a keylogger, thus flagging it as an anomaly.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations
  - Critical Application Servers
  - Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT time_series_of_bytes_written_to_file TO autoencoder_model
      WHERE reconstruction_error > threshold
      RETURN host, process_name, file_name, error_score
- question: Are there any DNS queries that appear to be tunneling data?
  context: This question looks for a covert exfiltration technique where data is encoded into long subdomains of a DNS query. Instead of a normal network connection, the keylogger sends captured data to its C2 server through the DNS protocol. This query detects this by looking for unusually long DNS queries and subdomains that contain character sets indicative of encoding (like Base64).
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - Internal DNS Servers
  - Firewall Log Aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dns_logs
      WHERE query_length > 100 AND subdomain MATCHES base64_or_hex_regex
      RETURN source_ip, queried_domain, full_query
- question: Has any host exhibited network beaconing behavior to a suspicious destination?
  context: This question uses statistical analysis of network logs to find the 'heartbeat' of malware C2 communications. By calculating the time between connections and the amount of data sent from a host to a destination, this query can identify the fixed intervals and consistent payload sizes that characterize automated beaconing, separating it from legitimate, more variable network traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - Internal DNS Servers
  - Firewall Log Aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each source_host, ANALYZE outbound_connections over 24_hours
      CALCULATE std_dev of time_delta between connections AND std_dev of bytes_sent
      WHERE both_std_devs are near zero AND destination NOT IN allowlist
      RETURN source_ip, destination_ip, beaconing_statistics
- question: Has a machine learning model clustered any network traffic into a suspicious C2-like group?
  context: This question uses unsupervised machine learning to group all network connections based on a rich set of features (timing, volume, destination prevalence, encryption details, etc.). This allows the model to automatically identify and group suspicious C2 traffic, like keylogger beaconing, into distinct clusters separate from the large clusters of benign traffic, making it easier for analysts to investigate.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points
  - Internal DNS Servers
  - Firewall Log Aggregators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT enriched_network_connection_data TO clustering_model (DBSCAN)
      IDENTIFY and ISOLATE suspicious_clusters
      RETURN connections in suspicious_clusters with cluster_id