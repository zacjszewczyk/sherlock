name: T1056: Input Capture
id: 5a8a1b9e-6b0f-4e9d-8c1a-9f0e2d3b4c5d
description: This playbook helps investigate whether an adversary has captured user input (e.g., keystrokes, clipboard data) to steal credentials or collect sensitive information. This is often achieved through keyloggers deployed via malicious processes, PowerShell scripts, or process injection. Indicators include the execution of known keylogger hashes, communication with suspicious C2 infrastructure, creation of anomalous registry keys or named pipes for persistence, loading of UI-related DLLs into non-GUI processes, use of PowerShell input capture APIs, staging of captured data in local files, and exfiltration of small, periodic data chunks over the network.
type: technique
related:
- TA0006: Credential Access
- TA0009: Collection
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Are there any process creation or network connection events that match known keylogger indicators from threat intelligence feeds?
  context: This question aims to detect known keyloggers by checking if any executed process hash or network connection (IP/domain) matches a list of known malicious indicators. A match provides a high-confidence signal that a keylogger is active.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations, Critical Servers (e.g., Domain Controllers, Financial Systems), Remote Access Gateways, DNS Resolvers
  range: last 90 days
  queries:
  - symbolic: SEARCH process_creation_logs OR network_connection_logs | JOIN threat_intelligence_feed ON (process_hash OR destination_ip OR destination_domain) | ALERT if match_found
- question: Are there any statistically rare processes establishing network connections to newly created or low-reputation domains?
  context: This question tries to find unknown or custom keyloggers by looking for anomalous behavior. A process running on very few machines that communicates with a suspicious, newly registered domain is a strong indicator of a targeted attack or malware that isn't yet widely known.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations, Critical Servers (e.g., Domain Controllers, Financial Systems), Remote Access Gateways, DNS Resolvers
  range: last 90 days
  queries:
  - statistical: SEARCH process_creation_logs | CALCULATE prevalence(process_hash) | FILTER prevalence < 0.1% AND NOT on_allowlist | JOIN network_logs ON process | FILTER destination_domain_age < 30_days OR destination_reputation < 5th_percentile | ALERT on results
- question: Can a machine learning model identify process and network event pairs that are highly likely to be keylogger activity?
  context: This question leverages a machine learning model trained on features from both process and network events. The model can identify complex, non-obvious patterns indicative of keylogging that would be missed by simple rules or statistical checks, providing a more robust detection method.
  answer_sources:
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations, Critical Servers (e.g., Domain Controllers, Financial Systems), Remote Access Gateways, DNS Resolvers
  range: last 90 days
  queries:
  - machine_learning: INPUT process_and_network_events | APPLY classification_model(features) | ALERT on score > threshold
- question: Has an unsigned or anomalous process created a registry key or named pipe that matches patterns associated with known keyloggers?
  context: This question looks for persistence or inter-process communication mechanisms commonly used by keyloggers. Searching for specific artifact names (e.g., containing 'key', 'hook', 'log') created by unsigned processes helps detect malware trying to embed itself in the system.
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) instances, Registry Hives
  range: last 90 days
  queries:
  - symbolic: SEARCH registry_or_pipe_creation_logs | FILTER event_matches_regex_pattern('keylogger_artifacts') AND creating_process_is_unsigned | ALERT on results
- question: Are there any newly created registry keys or named pipes with unusually high-entropy names, suggesting randomization to evade detection?
  context: This question aims to detect malware that uses randomly generated names for its artifacts to avoid signature-based detection. High string entropy is a strong indicator of such randomization, especially when the process creating the artifact is also suspicious (e.g., running from a temp directory).
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) instances, Registry Hives
  range: last 90 days
  queries:
  - statistical: SEARCH registry_or_pipe_creation_logs | CALCULATE shannon_entropy(artifact_name) | FILTER entropy > baseline_98th_percentile AND creating_process_is_suspicious | ALERT on results
- question: Can unsupervised machine learning models identify anomalous clusters or outliers in registry or named pipe creation events?
  context: This question uses clustering to group all artifact creation events based on their properties. Normal system and application activity will form large, dense clusters. Small, isolated clusters or individual outliers represent anomalous events that deviate from the norm and are highly suspicious, potentially indicating keylogger activity.
  answer_sources:
  - Windows Event ID 12 (Sysmon)
  - Windows Event ID 13 (Sysmon)
  - Windows Event ID 14 (Sysmon)
  - Windows Event ID 17 (Sysmon)
  - Windows Event ID 18 (Sysmon)
  - User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) instances, Registry Hives
  range: last 90 days
  queries:
  - machine_learning: INPUT artifact_creation_events | APPLY clustering_model(features) | INVESTIGATE small_clusters_and_outliers
- question: Have any non-interactive or command-line processes (e.g., spawned by services.exe, powershell.exe) loaded user-interface-related DLLs like user32.dll?
  context: This question focuses on a significant anomaly. Backend services or command-line tools typically do not need to interact with the graphical user interface. Loading UI-related DLLs suggests an attempt to hook into user input functions, a common technique for keyloggers.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database), Domain Controllers, User Workstations, Administrator Workstations
  range: last 90 days
  queries:
  - symbolic: SEARCH dll_load_events | FILTER (dll_name == 'user32.dll' OR dll_name == 'gdi32.dll') AND (parent_process == 'services.exe' OR parent_process == 'powershell.exe') AND process_name NOT in allowlist | ALERT on results
- question: Have any processes loaded DLLs that are statistically rare for that specific process across the enterprise?
  context: This question identifies process injection or other tampering by baselining normal behavior. If a common process like `svchost.exe` suddenly loads a DLL it has never or rarely loaded before, especially a UI-related one, it could indicate that a keylogger has been injected into it.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database), Domain Controllers, User Workstations, Administrator Workstations
  range: last 90 days
  queries:
  - statistical: SEARCH dll_load_events | BASELINE normal_dlls_per_process | CALCULATE frequency(process, dll) | FILTER frequency < 0.5% AND is_ui_dll AND is_non_gui_process | ALERT on results
- question: Has a time-series ML model detected an abnormal sequence or timing of DLL loads for any critical system processes?
  context: This question uses a sophisticated model to learn the precise "signature" of how a critical process like `lsass.exe` starts up, including which DLLs it loads and in what order. A deviation, such as an extra UI-related DLL being loaded at an unusual time, can indicate a highly stealthy injection attack.
  answer_sources:
  - Windows Event ID 7 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Backend Servers (Web, Database), Domain Controllers, User Workstations, Administrator Workstations
  range: last 90 days
  queries:
  - machine_learning: INPUT dll_load_sequences_for_critical_processes | APPLY time_series_anomaly_model | ALERT on high_reconstruction_error
- question: Do any PowerShell script block logs or command lines contain keywords related to input capture APIs or clipboard access?
  context: This is a direct hunt for keylogging activity within PowerShell, a common tool for attackers. Searching for specific function names (`SetWindowsHookEx`, `GetAsyncKeyState`) or .NET methods for clipboard access can uncover scripts designed to steal user input or credentials.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations, Administrative Workstations, Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - symbolic: SEARCH powershell_logs OR command_lines | FILTER content_matches_keywords('Set-WindowsHookEx', 'GetAsyncKeyState', etc.) OR command_line_contains_obfuscation('-enc') | ALERT on results
- question: Are there any PowerShell script blocks with abnormally high entropy or character distributions indicative of obfuscation?
  context: Attackers often obfuscate PowerShell scripts to hide malicious commands from simple keyword searches. High entropy (randomness) or a character frequency matching Base64 encoding are strong statistical indicators that a script is obfuscated and warrants deeper inspection for hidden input capture logic.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations, Administrative Workstations, Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - statistical: SEARCH powershell_logs | CALCULATE entropy(script_block) | FILTER entropy > (mean + 3*stdev) | ALERT on results
- question: Can an NLP model classify any executed PowerShell scripts as malicious based on their semantic content, even if obfuscated?
  context: This advanced approach uses a model that understands the "meaning" of PowerShell code, similar to how it understands human language. This allows it to detect malicious intent (like input capture) even when attackers use novel obfuscation techniques or avoid specific keywords, making it more resilient than other methods.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 4104 (PowerShell Script Block Logging)
  - User Workstations, Administrative Workstations, Servers with PowerShell Remoting enabled
  range: last 90 days
  queries:
  - machine_learning: INPUT powershell_script_blocks | APPLY NLP_classification_model | ALERT on classification == 'malicious' AND confidence > threshold
- question: Are there any outbound HTTP POST requests to suspicious domains containing parameters suggestive of credential theft (e.g., 'user', 'pass', 'keydata')?
  context: This question targets the exfiltration phase of a keylogger attack. Data is often sent via HTTP POST requests. Looking for common credential-related parameter names in requests going to newly registered or low-reputation domains is a classic and effective way to detect data theft.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway), DNS Resolvers, Web Proxies
  range: last 90 days
  queries:
  - symbolic: SEARCH http_logs | FILTER request_method == 'POST' AND destination_is_suspicious AND body_contains_keywords('user', 'pass', 'keydata') | ALERT on results
- question: Are there any hosts making small, periodic outbound POST requests that are statistical outliers in terms of size and destination?
  context: Keyloggers often exfiltrate captured keystrokes in small, regular batches. This behavior stands out statistically. A host sending many small POST requests (e.g., under 512 bytes) to a domain that few other hosts talk to is highly suspicious of automated data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway), DNS Resolvers, Web Proxies
  range: last 90 days
  queries:
  - statistical: SEARCH http_logs | FILTER request_method == 'POST' | BASELINE post_size_per_host_destination | FILTER size is outlier (> 3*stdev) AND destination_is_rare | ALERT on results
- question: Has a machine learning model detected beaconing behavior (periodic, 'heartbeat' connections) characteristic of keylogger command-and-control?
  context: This question aims to detect the C2 communication channel of a keylogger. Even if the traffic is encrypted, the pattern of communication—connections at a fixed interval with a consistent data size—is a strong indicator of malware beaconing. A time-series model can effectively identify this abnormal rhythm.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Network Egress Points (Internet Gateway), DNS Resolvers, Web Proxies
  range: last 90 days
  queries:
  - machine_learning: INPUT connection_logs_per_host | APPLY time_series_anomaly_model(inter_arrival_time, data_volume) | ALERT on detected_periodicity
- question: Has an unapproved process created a log, text, or data file in a common temporary or user directory?
  context: This question looks for the initial staging of captured data. Attackers often write keystrokes or other captured information to a temporary file before exfiltrating it. Monitoring for unexpected file creations (e.g., a `.log` file created by a process not on an allowlist) in common staging areas like `%TEMP%` or `%APPDATA%` can catch this activity.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations, Terminal Servers, Shared File Systems, Endpoint File Systems
  range: last 90 days
  queries:
  - symbolic: SEARCH file_creation_events | FILTER file_path_matches_staging_pattern AND file_extension in ('.log', '.txt', '.dat') AND creating_process NOT in allowlist | ALERT on results
- question: Are there any files with statistically unique names being created in common staging directories, especially by a rare process?
  context: This question aims to find attacker activity by identifying outliers. Legitimate applications tend to create files with consistent naming patterns across many machines. A file with a name seen on only one or two hosts is highly unusual and could be a temporary log file created by a keylogger.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations, Terminal Servers, Shared File Systems, Endpoint File Systems
  range: last 90 days
  queries:
  - statistical: SEARCH file_creation_events | FILTER in_staging_directory | CALCULATE prevalence(filename) | FILTER prevalence == 1_host AND creating_process_is_rare | ALERT on results
- question: Can a machine learning model predict if a file creation event is suspicious based on a combination of its features?
  context: This question leverages a model to analyze the full context of a file creation event. A single feature might not be suspicious, but a combination—like a browser process creating a hidden file in a temp directory outside of normal business hours—can be a strong indicator of malicious activity that a model is well-suited to detect.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - User Workstations, Terminal Servers, Shared File Systems, Endpoint File Systems
  range: last 90 days
  queries:
  - machine_learning: INPUT file_creation_events | APPLY classification_model(features) | ALERT on prediction == 'suspicious'
- question: Has a single process created a file in a staging directory and then immediately initiated an outbound network connection?
  context: This question looks for the classic "stage and exfiltrate" pattern. By correlating events from the same process, we can detect when a program writes data to a local file and then quickly sends data over the network. This temporal link is strong evidence of data exfiltration.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations, Data Staging Servers, Network Egress Points, Endpoint File Systems
  range: last 90 days
  queries:
  - symbolic: SEARCH file_creation OR network_connection by ProcessGUID | SEQUENCE (file_creation in staging_dir) THEN (network_connection to external_ip) WITHIN 60s | ALERT on sequence_match
- question: Are there any processes that exhibit a statistically high probability of making a network connection immediately after writing to a file?
  context: This question identifies tools that are purpose-built for exfiltration. While many applications write to files and make network connections, a process where a file write is almost *always* followed by a network connection is highly suspicious. This statistical approach can uncover tools designed specifically for this "write-then-send" behavior.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations, Data Staging Servers, Network Egress Points, Endpoint File Systems
  range: last 90 days
  queries:
  - statistical: SEARCH file_write AND network_connection events | CALCULATE P(network_connection | file_write) per process | FILTER probability > 90% AND process NOT in allowlist | ALERT on results
- question: Has a sequence analysis model detected a rare, high-risk sequence of events corresponding to a 'keylog -> stage -> exfiltrate' pattern?
  context: This question uses a sophisticated model to understand the entire "grammar" of normal system activity. The model can then spot an entire attack chain (e.g., a suspicious DLL load, followed by a file write to a temp directory, followed by a network beacon) as a single, anomalous sequence, even if the individual events are performed by different processes.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Event ID 1 (Sysmon)
  - Windows Event ID 3 (Sysmon)
  - Zeek conn.log
  - User Workstations, Data Staging Servers, Network Egress Points, Endpoint File Systems
  range: last 90 days
  queries:
  - machine_learning: INPUT sequences_of_system_events | APPLY RNN_model | ALERT on high_anomaly_score for 'keylog-stage-exfil' pattern
- question: Is any process performing an unusually high number of write or append operations to a single file in a short time frame?
  context: This question aims to detect the process of a keylogger actively writing captured keystrokes to a log file. Unlike normal application logging which can be bursty, a keylogger often appends each keystroke or small groups of them, resulting in a rapid, high-frequency stream of small write operations to one file.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations, Critical Application Servers, Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - symbolic: SEARCH file_write_events (EID 4663) | AGGREGATE count by ProcessID, FileName over 1_minute | FILTER count > 30 AND ProcessID NOT in allowlist | ALERT on results
- question: Is any non-logging process writing to a file with a very low and consistent time interval between each write operation?
  context: This question uses statistics to differentiate keylogging from legitimate file activity. Automated keystroke logging produces a stream of write events with a very regular, machine-like rhythm (low mean and low variance in timing between writes). This statistical signature is very different from human or normal application file I/O.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations, Critical Application Servers, Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - statistical: SEARCH file_write_events | CALCULATE mean_and_variance(inter_arrival_time) per process-file pair | FILTER mean < 2s AND variance is low AND process NOT in allowlist | ALERT on results
- question: Has a time-series model detected a file-write pattern consisting of frequent, small, incremental writes, characteristic of keylogging?
  context: This question uses a model trained on what normal file writes look like (e.g., large writes, infrequent saves). The model will then flag activity that doesn't fit this pattern. The signature of a keylogger—a steady stream of small data appends—will generate a high anomaly score, as it's a pattern the model has not seen in benign data.
  answer_sources:
  - Windows Event ID 11 (Sysmon)
  - Windows Security Event ID 4663
  - User Workstations, Critical Application Servers, Local File Systems with Auditing Enabled
  range: last 90 days
  queries:
  - machine_learning: INPUT time_series_of_file_write_volume | APPLY autoencoder_model | ALERT on high_reconstruction_error
- question: Are there any abnormally long DNS queries containing encoded data in the subdomain, suggesting DNS tunneling?
  context: This question looks for an advanced exfiltration technique where an attacker hides data in DNS queries. By encoding captured data (like keystrokes) into long subdomains (e.g., `[encoded_data].c2.com`), they can smuggle it out past firewalls that might block other traffic but almost always permit DNS.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points, Internal DNS Servers, Firewall Log Aggregators
  range: last 90 days
  queries:
  - symbolic: SEARCH dns_logs | FILTER query_length > 100 AND subdomain_matches_encoding_regex | ALERT on results
- question: Are any hosts making outbound connections with a statistically fixed time interval and consistent data size, indicative of C2 beaconing?
  context: This is a powerful statistical method for finding malware C2 channels. Automated malware beacons check in with their server on a strict schedule (e.g., every 60 seconds). This results in a time delta between connections with a standard deviation near zero, a clear machine-generated pattern that stands out from human-generated traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points, Internal DNS Servers, Firewall Log Aggregators
  range: last 90 days
  queries:
  - statistical: SEARCH network_connections | CALCULATE stdev(time_delta_between_connections) AND stdev(bytes_sent) per host-destination pair | FILTER stdev_time < 1s AND stdev_bytes is low | ALERT on results
- question: Can a clustering algorithm group and identify suspicious C2 traffic based on a combination of network features?
  context: This question uses an unsupervised model to find "communities" of similar network traffic. Benign traffic (like web browsing or NTP) will form large, well-defined clusters. Malicious C2 traffic, with its unique combination of features (port, destination prevalence, beaconing statistics, JA3 hash, etc.), will form its own small, distinct clusters, making it easy for an analyst to spot and investigate.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Network Egress Points, Internal DNS Servers, Firewall Log Aggregators
  range: last 90 days
  queries:
  - machine_learning: INPUT enriched_network_connections | APPLY clustering_model(features) | INVESTIGATE small_or_outlier_clusters