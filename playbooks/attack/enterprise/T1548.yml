name: T1548: Abuse Elevation Control Mechanism
id: 5b6c8f4d-1a2b-4e8c-9d0f-3a4b5c6d7e8f
description: This playbook helps investigate if an adversary has abused built-in elevation
  control mechanisms to escalate privileges or evade defenses. This involves looking
  for evidence of known malicious tools (e.g., UACMe, Juicy Potato) being executed,
  suspicious process creation chains indicative of UAC bypasses (e.g., fodhelper.exe
  spawning cmd.exe), processes running as NT AUTHORITY\SYSTEM with an unusual parent,
  unauthorized modifications to service ImagePaths in the registry, the disabling
  of UAC policies via registry changes, privileged processes injecting into less-privileged
  ones, and critical system processes loading unsigned or unusually located DLLs.
  The playbook also correlates these host-based events with outbound network connections
  to detect post-exploitation C2 activity.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a process been created whose executable hash matches a known malicious
    privilege escalation tool?
  context: This question aims to detect the use of specific, publicly known tools
    for privilege escalation. By comparing file hashes of newly created processes
    against a curated threat intelligence feed of hashes for tools like UACMe, Watson,
    or Juicy Potato, analysts can achieve high-fidelity alerts for known malicious
    activity.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Privileged Access Workstations (PAWs), Critical
    Application Servers, Developer Workstations
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 1 WHERE process_hash IN (threat_intel_hash_list)
      | RETURN timestamp, hostname, process_name, parent_process, user, command_line
- question: Has a rare, unsigned process been executed across the environment?
  context: This question seeks to identify potentially malicious executables that
    are not part of a known threat feed. Adversaries often use custom or packed tools
    that are not signed by a trusted authority and have a very low prevalence in the
    environment. Alerting on executables seen on a small number of hosts (<5 or <0.1%)
    that are also unsigned is an effective heuristic for finding novel malware.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Privileged Access Workstations (PAWs), Critical
    Application Servers, Developer Workstations
  range: last 30 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 1 | GROUP BY process_hash, is_signed | COUNT
      unique hosts as host_count | WHERE host_count < 5 AND is_signed == false
- question: Does a process creation event exhibit characteristics of a privilege
    escalation attempt based on a machine learning model?
  context: This question uses a machine learning model to score the risk of a process
    creation event. By training a model (e.g., Random Forest) on features like command
    line entropy, parent process legitimacy, file path depth, signature status, and
    prevalence, the system can learn to distinguish benign activity from suspicious
    patterns indicative of privilege escalation, allowing for the detection of previously
    unseen techniques.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Privileged Access Workstations (PAWs), Critical
    Application Servers, Developer Workstations
  range: last 90 days
  queries:
  - pseudocode: INPUT Sysmon EventID 1 features (cmd_entropy, parent_process, path_depth,
      is_signed, prevalence) | PREDICT risk_score with RandomForestModel | WHERE
      risk_score > high_risk_threshold
- question: Has a non-system process spawned a known auto-elevating Windows binary
    which then spawned a command shell?
  context: This question targets a common UAC bypass pattern. An adversary uses a
    standard process (like explorer.exe) to launch a specific, trusted Windows executable
    (like fodhelper.exe) that auto-elevates without a UAC prompt. This elevated process
    is then used to spawn a high-integrity command shell (cmd.exe or powershell.exe).
    Detecting this specific three-process chain within a short time window is a strong
    indicator of a UAC bypass.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - pseudocode: CORRELATE (Process A creates Process B WHERE B in auto_elevate_list)
      AND (Process B creates Process C WHERE C in command_shell_list) WITHIN 5 seconds
- question: Has an unusually rare three-process chain ending in a command interpreter
    been observed?
  context: This question aims to find novel UAC bypass techniques by looking for
    statistical anomalies in process lineage. By baselining all grandparent-parent-child
    process chains across the enterprise, the system can identify new or extremely
    rare chains, especially those that result in the creation of a command interpreter,
    which may represent an unknown bypass method.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 1 | CONSTRUCT 3-process_chains | CALCULATE
      frequency | WHERE chain_ends_with_shell AND frequency < 1st_percentile
- question: Are there anomalous process creation subgraphs, such as short chains
    ending in a command shell?
  context: This question applies graph theory to detect malicious activity. Process
    creations are modeled as a large graph of parent-child relationships. Normal
    activity forms large, predictable structures. Anomaly detection algorithms can
    then identify unusual subgraphs, such as a short, isolated chain of three processes
    ending in a command shell, which stands out from the complex graph of benign
    behavior.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: last 90 days
  queries:
  - pseudocode: INPUT process_creation_events | BUILD graph | RUN graph_anomaly_detection
      | IDENTIFY anomalous_subgraphs (e.g., short chains ending in shell)
- question: Has a process with SYSTEM privileges been created by an unexpected parent
    process?
  context: This question is based on the principle that only a small, predictable
    set of system processes (e.g., services.exe, svchost.exe) should be creating
    child processes that run with NT AUTHORITY\SYSTEM privileges. Any process running
    as SYSTEM that was spawned by a parent not on this established allowlist is highly
    suspicious and could indicate a successful privilege escalation.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 1 WHERE user == 'NT AUTHORITY\SYSTEM' AND parent_image
      NOT IN (allowlist_of_system_parents)
- question: Has a SYSTEM-level process been spawned by a parent process with an abnormally
    high file path entropy?
  context: This question looks for obfuscation in parent process paths. Legitimate
    parent processes for SYSTEM-level children reside in standard, low-entropy paths
    (e.g., C:\Windows\System32\). An adversary might place their malicious parent
    executable in a randomized or deeply nested path, which would have a higher Shannon
    entropy. Detecting an unusually high entropy for a parent path is an indicator
    of suspicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 1 WHERE user == 'SYSTEM' | CALCULATE entropy(parent_image_path)
      | WHERE path_entropy > (baseline_mean + 3 * std_dev)
- question: Has a SYSTEM-level process creation event been identified as an outlier
    by a machine learning model trained on legitimate events?
  context: This question uses anomaly detection to find malicious SYSTEM-level process
    creations. A One-Class SVM model is trained exclusively on features from legitimate
    events (e.g., parent image path, command line). The model learns the profile
    of "normal" behavior. Any new event that does not conform to this learned profile
    is flagged as an outlier, indicating a potential threat.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Data from Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: last 90 days
  queries:
  - pseudocode: INPUT SYSTEM_process_creation_events | PREDICT is_outlier with OneClassSVM_model
      | WHERE is_outlier == true
- question: Has a service's ImagePath registry key been modified by a non-privileged
    user shortly before the service was started?
  context: This question targets the "Service Executable Hijacking" technique. An
    attacker with permissions to modify a service's configuration in the registry,
    but not to run code as SYSTEM, can change the 'ImagePath' to point to a malicious
    executable. When the service is next started, the malicious code executes with
    the service's (often SYSTEM) privileges. Correlating the registry modification
    with the service start by a non-admin user is key.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Data from All Windows Servers, Systems hosting custom or third-party services
  range: last 90 days
  queries:
  - pseudocode: CORRELATE (Registry modify on 'HKLM\...\ImagePath' by non_admin_user)
      AND (Service Start/Install event for same service) WITHIN 10 minutes
- question: Has a non-administrative user modified an abnormally high number of service
    ImagePath registry keys?
  context: This question seeks to identify abuse of permissions by establishing a
    behavioral baseline. While a non-admin user might legitimately modify a service
    ImagePath on rare occasions, a single user modifying many different service paths,
    or modifying them far more frequently than their peers, is anomalous. This behavior
    can be detected by flagging users whose activity exceeds a high statistical threshold
    (e.g., the 99.9th percentile).
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Data from All Windows Servers, Systems hosting custom or third-party services
  range: last 30 days
  queries:
  - pseudocode: SEARCH Registry modify on 'ImagePath' | GROUP BY user | COUNT modifications
      | WHERE user_is_non_admin AND modification_count > 99.9th_percentile
- question: Has there been an anomalous spike in the overall number of service ImagePath
    modifications across the enterprise?
  context: This question provides a macro view to detect widespread, automated attacks.
    Instead of focusing on a single user, it monitors the aggregate rate of service
    ImagePath modifications across all systems. A time-series model (like ARIMA)
    can forecast the expected number of changes. A sudden, sharp increase that significantly
    exceeds this forecast can indicate a worm-like attack or a coordinated campaign
    in progress.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - Data from All Windows Servers, Systems hosting custom or third-party services
  range: last 90 days
  queries:
  - pseudocode: SEARCH Registry modify on 'ImagePath' | AGGREGATE count per hour
      | APPLY ARIMA model | WHERE actual_count > forecasted_upper_bound
- question: Has a critical UAC-related registry key been modified to disable or weaken
    its protections?
  context: This question looks for direct attempts to disable User Account Control
    (UAC) for defense evasion. An adversary may modify specific registry keys, such
    as setting 'EnableLUA' to '0' to disable UAC entirely, or 'ConsentPromptBehaviorAdmin'
    to '0' to allow elevation without prompting. Monitoring these specific registry
    keys for these specific values provides a high-fidelity alert for UAC tampering.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Data from All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 13 WHERE (target_object == '...\EnableLUA'
      AND value == 0) OR (target_object == '...\ConsentPromptBehaviorAdmin' AND value
      == 0)
- question: Has there been an unusual increase in the number of UAC-related registry
    modifications across the environment?
  context: This question aims to detect large-scale campaigns to disable UAC. While
    a single modification might be missed, a coordinated attack might involve disabling
    UAC on many machines at once. By tracking the daily count of all UAC-related
    registry changes and alerting when this count significantly exceeds the historical
    average, security teams can spot these broader campaigns.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Data from All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: last 90 days
  queries:
  - pseudocode: SEARCH UAC_registry_modifications | AGGREGATE count per day | WHERE
      daily_count > (90_day_rolling_avg + 3 * std_dev)
- question: Has a UAC policy change been flagged as malicious by a machine learning
    model?
  context: This question helps differentiate between legitimate and malicious UAC
    policy changes. Legitimate changes are often performed by specific processes
    (like a GPO update client) at predictable times. Malicious changes might be made
    by a script (powershell.exe) under a standard user's context. A decision tree
    model can be trained on features like the process image, user account, and time
    of day to automate this distinction.
  answer_sources:
  - Sysmon Event ID 13
  - Windows Event ID 4657
  - Data from All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: last 90 days
  queries:
  - pseudocode: INPUT UAC_registry_modification_events | PREDICT is_malicious with
      DecisionTreeModel | WHERE is_malicious == true
- question: Has a high-integrity process injected code into a lower-integrity process?
  context: This question looks for a defense evasion technique where an attacker
    uses a compromised high-privilege process to inject malicious code into a less-privileged
    process (e.g., a browser). This can be done to inherit the permissions or network
    access of the target process while hiding the malicious code within a seemingly
    benign one. It requires careful tuning to exclude legitimate tools like debuggers.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - Data from User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 8 WHERE source_integrity IN ('High', 'System')
      AND target_integrity IN ('Medium', 'Low') AND source_process NOT IN (allowlist)
- question: Has a rare or never-before-seen process injection pair been observed?
  context: This question is designed to find novel malicious process injections by
    baselining normal activity. Over time, a system can learn which source processes
    normally inject into which target processes. Any new pair (e.g., 'lsass.exe'
    injecting into 'chrome.exe') that has never been seen before, or is statistically
    very rare, is highly suspicious and warrants investigation.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - Data from User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: last 30 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 8 | GROUP BY source_process, target_process
      | CALCULATE frequency | WHERE frequency < 1st_percentile OR pair_is_new
- question: Have any process injection events been identified as anomalous outliers
    by a clustering algorithm?
  context: This question uses unsupervised machine learning to find suspicious process
    injections. A clustering algorithm like DBSCAN can group similar injection events
    based on features like source/target names and integrity levels. Legitimate,
    common injections (e.g., browser helper objects) will form large, dense clusters.
    Malicious or rare injections will not fit into these clusters and will be identified
    as "noise" or outliers.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - Data from User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: last 90 days
  queries:
  - pseudocode: INPUT Sysmon EventID 8 data | APPLY DBSCAN clustering | IDENTIFY
      noise_points as anomalies
- question: Has a critical system process loaded an unsigned DLL or a DLL from a
    user-writable directory?
  context: This question targets DLL hijacking. An attacker places a malicious DLL
    with the same name as a legitimate one in a location that is searched before
    the real DLL's location (e.g., a user's Temp folder). When a privileged process
    (like svchost.exe) tries to load the legitimate DLL, it loads the malicious one
    instead. A critical system process loading an unsigned DLL or one from a user
    directory is a strong sign of this attack.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - Data from All Windows Systems, especially Servers running critical applications
    and Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 7 WHERE process IN (critical_system_processes)
      AND (is_dll_signed == false OR dll_path IN (user_writable_dirs))
- question: Has a critical system process loaded an unusual set of DLLs or a DLL
    from a high-entropy path?
  context: This question uses baselining to detect DLL hijacking. For each critical
    system process, a profile of normally loaded DLLs and their paths is created.
    An attack is suspected if a process loads a set of DLLs that is significantly
    different from its baseline (high Jaccard distance) or if it loads a DLL from
    a path with high entropy, suggesting a randomized or non-standard location.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - Data from All Windows Systems, especially Servers running critical applications
    and Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: SEARCH Sysmon EventID 7 | COMPARE loaded_dlls to baseline_set | WHERE
      Jaccard_distance > threshold OR path_entropy > threshold
- question: Has a DLL load event been flagged as anomalous by an autoencoder model?
  context: This question uses a neural network to detect anomalous DLL loading activity.
    An autoencoder is trained on feature vectors from legitimate Sysmon Event ID 7
    events. It learns to compress and reconstruct "normal" events with low error.
    When a malicious DLL load event (which has different features) is fed into the
    model, the model will struggle to reconstruct it, resulting in a high reconstruction
    error and flagging the event as an anomaly.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - Data from All Windows Systems, especially Servers running critical applications
    and Domain Controllers
  range: last 90 days
  queries:
  - pseudocode: INPUT Sysmon EventID 7 data | APPLY Autoencoder model | WHERE reconstruction_error
      > threshold
- question: Following a suspected privilege escalation, did the resulting process
    make an outbound network connection?
  context: This question connects host-based indications of compromise with network
    activity to increase confidence. A privilege escalation event (like a UAC bypass)
    followed shortly by the newly created privileged process making an outbound network
    connection to an external IP is a very strong signal of a successful compromise
    followed by a command-and-control (C2) callback.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Data from Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: last 90 days
  queries:
  - pseudocode: CORRELATE (privilege_escalation_pattern) AND (outbound_network_connection
      from resulting_process to non_RFC1918_IP) WITHIN 60 seconds
- question: Has a shell process, potentially created via privilege escalation, made
    a network connection to a rare destination?
  context: This question focuses on the network traffic from interactive shells,
    which are often used for C2. By baselining the destination countries, ASNs, and
    ports that shells normally connect to (which should be very few), any connection
    to a statistically rare destination (e.g., an ASN with no business purpose) can
    be flagged as highly suspicious, especially if the shell was spawned from a potential
    escalation event.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Data from Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: last 90 days
  queries:
  - pseudocode: SEARCH network_connections from shell_processes | WHERE destination_rarity
      (country, ASN, port) < 1st_percentile
- question: Has a sequence of user actions, starting with privilege escalation and
    leading to a network connection, been flagged as malicious by a sequence model?
  context: This question treats an attack as a sequence of events rather than isolated
    alerts. A model like an LSTM can be trained on sequences of events from benign
    user sessions. It learns normal transitions (e.g., open Outlook, write email).
    A malicious sequence, such as a rare process chain (escalation) followed by
    a rare network connection (C2), will deviate from the learned benign sequences
    and be flagged as a high-confidence malicious session.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Data from Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: last 90 days
  queries:
  - pseudocode: INPUT user_session_event_sequences | APPLY LSTM model | WHERE sequence_is_flagged_malicious