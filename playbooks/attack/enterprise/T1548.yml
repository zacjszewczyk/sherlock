name: T1548: Abuse Elevation Control Mechanism
id: 5a8a1b2c-3d4e-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook investigates whether an adversary has successfully escalated privileges or evaded defenses by abusing built-in elevation control mechanisms. This involves detecting the execution of known privilege escalation tools, identifying unusual process creation chains (such as UAC bypasses), spotting processes running as SYSTEM with illegitimate parents, and finding modifications to service configurations or UAC settings in the registry. It also looks for signs of defense evasion like privileged process injection, DLL hijacking by system processes, and post-escalation network connections for command and control.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any processes being created that match the file hashes of known privilege escalation tools?
  context: Adversaries often use publicly available tools like UACMe, Watson, or Juicy Potato to escalate privileges. This question aims to detect the execution of these tools by matching process file hashes against a curated threat intelligence feed. A match is a high-confidence indicator of a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, Developer Workstations
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=1 | JOIN file_hash WITH threat_intel_list ON hash
      WHERE category='privilege_escalation_tool' | ALERT on match
- question: Have any rare, unsigned executables been executed recently?
  context: Malicious tools, especially custom ones, are often not signed by a trusted publisher and will have a low prevalence across the enterprise. This question seeks to identify these outliers by flagging processes that are both unsigned and have been seen on a very small number of hosts, which could indicate a targeted attack tool.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, Developer Workstations
  range: the last 30 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=1 | CALCULATE prevalence(file_hash) over 30d | WHERE
      prevalence < 5 AND is_signed=false | ALERT on result
- question: Are there any newly executed processes with a high risk score for privilege escalation based on their characteristics?
  context: This question uses a machine learning model to proactively identify potential privilege escalation attempts that may not match known signatures. By analyzing features like command line entropy, parent process, and file path, the model can score new processes for their likelihood of being malicious, catching novel or obfuscated tools.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, Developer Workstations
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each new Sysmon EventID=1 | EXTRACT features (cmd_entropy, parent,
      path_depth, is_signed, prevalence) | INPUT to Random Forest model | ALERT if
      risk_score > threshold
- question: Has a non-system process spawned a known auto-elevating Windows binary, which then spawned a command shell?
  context: This question targets a common UAC bypass pattern where an attacker leverages a legitimate, auto-elevating Windows executable (like fodhelper.exe) to launch a command shell with high privileges. Detecting this specific three-process chain in a short time window is a strong indicator of an active UAC bypass attempt.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE Sysmon EventID=1 events | TRIGGER when (ProcessA creates ProcessB)
      AND (ProcessB creates ProcessC) within 5s | WHERE ProcessB is in auto-elevate_list
      AND ProcessC is in command_shell_list
- question: Have any statistically rare three-process chains, ending in a command interpreter, been observed?
  context: Beyond specific known UAC bypass chains, adversaries might find novel ways to create privileged shells. This question seeks to find these unknown techniques by baselining all three-process creation chains and alerting on new or extremely rare sequences that result in the execution of cmd.exe or powershell.exe.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FROM Sysmon EventID=1 | BUILD baseline of all (grandparent, parent, child)
      chains and their frequencies | ALERT if a new chain's frequency is < 1st percentile
      AND child is a command_shell
- question: Are there unusual process creation subgraphs that deviate from normal activity, particularly those ending in a command shell?
  context: This question models process relationships as a graph to identify anomalous structures. A typical UAC bypass forms a small, distinct chain that stands out from the complex, interconnected graphs of normal system activity. Using graph anomaly detection can surface these suspicious structures without prior knowledge of the specific executables involved.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - All Windows Endpoints, User Workstations, Remote Desktop Session Hosts
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL Sysmon EventID=1 as a graph | APPLY graph anomaly detection algorithm
      | ALERT on unusual subgraphs, especially short chains ending in a command_shell
- question: Have any processes been created with SYSTEM privileges by a parent process not on the established allowlist?
  context: Processes running as NT AUTHORITY\SYSTEM have the highest level of privilege on a local machine. Their creation is typically handled by a small, predictable set of legitimate parent processes (e.g., services.exe, svchost.exe). This question aims to detect when a non-standard parent process creates a SYSTEM-level child, which is a strong indicator of privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=1 WHERE user='NT AUTHORITY\\SYSTEM' AND parent_process
      NOT IN (system_parent_allowlist) | ALERT on match
- question: Are there SYSTEM-level processes being spawned by parent processes with unusually high file path entropy?
  context: Legitimate parent processes for SYSTEM children typically reside in standard, low-entropy paths like C:\Windows\System32\. An attacker might place their tool in a randomized or deeply nested directory, resulting in a high-entropy file path. This question identifies such anomalies as potential indicators of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=1 WHERE user='NT AUTHORITY\\SYSTEM' | CALCULATE shannon_entropy(parent_path)
      | ALERT if entropy > (baseline_mean + 3*stddev)
- question: Have any SYSTEM-level process creation events been identified as outliers by our machine learning model?
  context: This question uses a One-Class SVM model, trained only on legitimate SYSTEM-level process creation events, to identify anomalies. Any new event that does not fit the learned profile of "normal" is flagged as an outlier. This can detect novel privilege escalation techniques that might not be caught by static rules or entropy checks.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each new Sysmon EventID=1 with user='SYSTEM' | EXTRACT features (parent_path,
      cmd_line) | INPUT to One-Class SVM model | ALERT if identified as outlier
- question: Has a service's executable path been modified in the registry by a non-privileged user shortly before that service was started or installed?
  context: An adversary with permissions to modify service registry keys can change the `ImagePath` to point to a malicious executable. When the service is next started (often automatically at boot or by a legitimate process), the malicious code will execute with the service's privileges (often SYSTEM). This question correlates the suspicious registry modification with the service start event.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - All Windows Servers, Systems hosting custom or third-party services
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE (Sysmon EventID=13 on service ImagePath) with (WinEvent ID=7045
      or 4697) within 10m | WHERE user in EventID=13 is NOT in privileged_group
      | ALERT on match
- question: Is any non-administrative user modifying service ImagePaths at a rate that is statistically anomalous for their account or role?
  context: While a single service ImagePath modification might be malicious, an attacker may attempt to modify multiple services. This question establishes a baseline of normal modification activity for each user and flags any non-administrative account that suddenly starts modifying service paths at an abnormally high rate, indicating potential malicious behavior.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - All Windows Servers, Systems hosting custom or third-party services
  range: the last 30 days
  queries:
  - technology: Pseudocode
    query: BASELINE count of ImagePath modifications per user over 30d | ALERT if
      non-admin user's count > 99.9th percentile
- question: Has there been an anomalous enterprise-wide spike in the number of service ImagePath modifications?
  context: A widespread, automated attack might involve modifying service ImagePaths on many machines simultaneously. This question uses time-series analysis to monitor the aggregate rate of these modifications across the entire environment. A sudden spike that deviates significantly from the normal pattern could indicate a large-scale campaign.
  answer_sources:
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Windows Event ID 7045
  - Windows Event ID 4697
  - All Windows Servers, Systems hosting custom or third-party services
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: MONITOR aggregate count of ImagePath modifications per hour | APPLY ARIMA
      model | ALERT if current count significantly exceeds forecasted value
- question: Has the registry been modified to disable or weaken User Account Control (UAC) settings?
  context: Adversaries may disable UAC to operate with fewer restrictions and avoid prompting the user for consent when performing privileged actions. This question creates a high-severity alert for direct modifications to critical UAC registry keys, such as `EnableLUA` or `ConsentPromptBehaviorAdmin`, that effectively turn UAC off.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=13 | WHERE (target_object='...\\EnableLUA' AND details='0')
      OR (target_object='...\\ConsentPromptBehaviorAdmin' AND details='0') | ALERT
      on match
- question: Is the daily count of UAC-related registry modifications across the environment statistically anomalous compared to the baseline?
  context: While a single UAC modification is suspicious, a coordinated campaign might involve disabling UAC on many endpoints at once. This question tracks the fleet-wide daily count of these modifications and alerts if the number suddenly spikes beyond a statistical threshold, which could indicate a widespread attack.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: TRACK daily count of UAC registry modifications | CALCULATE 90-day rolling
      average and stddev | ALERT if daily_count > (average + 3*stddev)
- question: Have any UAC registry changes been flagged as potentially malicious by our decision tree classifier?
  context: Not all UAC changes are malicious; some can be made by legitimate administrative tools or GPO updates. This question uses a machine learning model to differentiate between benign and malicious changes by considering context like the process making the change, the user account, and the time of day, reducing false positives.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows 10/11 Workstations, Windows Servers with a GUI installed
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each UAC registry modification | EXTRACT features (process, user, time_of_day)
      | INPUT to Decision Tree model | ALERT if classified as malicious
- question: Is there evidence of a high-integrity process injecting a thread into a lower-integrity process?
  context: This question looks for an unusual form of process injection. While injection is often used to escalate privileges (low-to-high), injection from a high-integrity to a low-integrity process can be used for defense evasion, allowing malicious code to execute in the context of a seemingly harmless application. This requires careful tuning to exclude legitimate tools like debuggers.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=8 | WHERE source_integrity IN ('High', 'System')
      AND target_integrity IN ('Medium', 'Low') AND source_process NOT IN (allowlist)
      | ALERT on match
- question: Have any new or rare source-target process pairs been observed for remote thread creation?
  context: Legitimate remote thread creation typically occurs between a predictable set of source and target processes. This question baselines all observed (Source, Target) pairs and alerts on any new pair not seen before, or any pair that is extremely rare. This can uncover novel injection techniques or the use of uncommon processes for evasion.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: the last 30 days
  queries:
  - technology: Pseudocode
    query: BASELINE all (source_process, target_process) pairs from Sysmon EventID=8
      over 30d | ALERT on any new pair OR any pair with frequency < 1st percentile
- question: Have any anomalous process injections been identified as outliers by our clustering algorithm?
  context: This question uses unsupervised machine learning (DBSCAN) to group process injection events. Normal, frequent injections (e.g., from browsers or security products) will form large, dense clusters. Malicious or anomalous injections will appear as small, sparse clusters or individual noise points, allowing for their detection without pre-defined rules.
  answer_sources:
  - Sysmon Event ID 8
  - Sysmon Event ID 10
  - User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: APPLY DBSCAN clustering to Sysmon EventID=8 data | USE features (source_process,
      target_process, integrity_levels) | ALERT on events classified as noise or
      in small clusters
- question: Are critical system processes loading unsigned DLLs or DLLs from user-writable locations?
  context: This question targets DLL hijacking attempts against privileged processes. An attacker may place a malicious DLL in a location where a system process (like svchost.exe) will load it, causing their code to be executed with SYSTEM privileges. This is highly suspicious if the DLL is unsigned or located in a non-standard, user-writable directory like C:\Users.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - All Windows Systems, especially Servers running critical applications and Domain Controllers
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: SEARCH Sysmon EventID=7 WHERE process IN (critical_system_processes) AND
      (is_signed=false OR loaded_dll_path LIKE 'C:\\Users\\%') | ALERT on match
- question: Do the DLLs loaded by a critical system process significantly deviate from its established baseline, or are they being loaded from high-entropy paths?
  context: Every system process has a predictable set of DLLs it normally loads from standard locations. This question identifies anomalies by comparing the set of DLLs loaded in a given session to this baseline. A significant deviation (high Jaccard distance) or loading a DLL from a strange, high-entropy path suggests a potential hijacking attempt.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - All Windows Systems, especially Servers running critical applications and Domain Controllers
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each system process | COMPARE current loaded DLL set to baseline set
      | ALERT if Jaccard_distance > threshold OR path_entropy > threshold
- question: Have any DLL load events for system processes been flagged as anomalous by our autoencoder model due to high reconstruction error?
  context: This question uses an autoencoder, a type of neural network trained only on legitimate DLL load events for system processes. When a new, potentially malicious event is fed to the model, it will be unable to reconstruct it accurately, resulting in a high reconstruction error. This error signals that the event is an anomaly and likely a DLL hijacking attempt.
  answer_sources:
  - Sysmon Event ID 7
  - Zeek files.log
  - All Windows Systems, especially Servers running critical applications and Domain Controllers
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: FOR each new Sysmon EventID=7 | EXTRACT features (process, path_entropy,
      is_signed) | INPUT to Autoencoder model | ALERT if reconstruction_error > threshold
- question: Following a suspected privilege escalation, did the resulting high-integrity process initiate an outbound network connection to an external IP?
  context: A common adversary pattern is to escalate privileges and then immediately establish a command and control (C2) channel. This question correlates a known privilege escalation pattern with a subsequent outbound network connection from the newly created privileged process, providing a more complete picture of the attack chain.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: CORRELATE (privilege_escalation_alert) with (Sysmon EventID=3 from same
      process) within 60s | WHERE destination_ip is external | ENRICH with Zeek logs
      | ALERT
- question: Did a shell process, spawned after a potential escalation, connect to a network destination that is rare in terms of country, ASN, or port?
  context: Command and control servers are often located in unusual geographic locations or ASNs relative to an organization's normal traffic patterns. This question focuses on network connections from shells created after a potential escalation, flagging them as highly suspicious if they connect to a destination that is statistically rare for the enterprise.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: AFTER escalation_alert | SEARCH for network connections from resulting
      shell | CALCULATE rarity of (dest_country, dest_asn, dest_port) | ALERT if
      rarity < 1st percentile
- question: Has a user session been flagged as malicious by our sequence model due to a pattern of privilege escalation followed by anomalous network activity?
  context: This question models user activity as a sequence of events (process creation, network connection, etc.). An LSTM model, trained on benign sequences, can identify a malicious session by recognizing an abnormal sequence, such as a rare process chain (escalation) followed by a rare network connection (C2), providing a high-confidence alert.
  answer_sources:
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints
  range: the last 90 days
  queries:
  - technology: Pseudocode
    query: MODEL user sessions as event sequences | INPUT to LSTM model | ALERT if
      session is flagged as anomalous, especially with escalation -> C2 pattern