name: T1546.010: AppInit DLLs
id: 5a81e9b2-7d3c-4f9e-a0b4-1c6e8d2f7a0b
description: This playbook provides an analytic guide for detecting adversaries using AppInit DLLs for persistence and privilege escalation (MITRE ATT&CK T1546.010). Adversaries modify the `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs` registry key to force legitimate processes, particularly those that load user32.dll, to load an arbitrary, malicious DLL. This provides the adversary with code execution within the context of multiple processes. This playbook addresses two primary investigative goals: determining if an adversary is maintaining persistence and if they are using this mechanism to elevate privileges. The investigative questions focus on identifying modifications to the AppInit_DLLs key that point to known malicious files, files in unusual locations (like user profiles or temp directories), or files with untrusted digital signatures. It also covers detecting behavioral anomalies following a modification, such as unexpected process creations or network connections from common GUI processes. Additionally, the playbook looks for attempts to weaken security controls, like disabling the `RequireSignedAppInit_DLLs` setting, and for evidence of privilege escalation, such as a medium-integrity process triggering the creation of a high-integrity process.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a modified AppInit_DLLs registry value pointing to a DLL that matches a known malicious hash in our threat intelligence feeds?
  context: Adversaries can achieve persistence by adding a malicious DLL to the AppInit_DLLs registry key. This question aims to detect this by checking if the hash of the newly registered DLL is a known indicator of compromise from threat intelligence sources. A match provides a high-confidence signal of malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry hives on all Windows workstations and servers; Threat Intelligence Platform
    data
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents WHERE (RegistryKey CONTAINS 'AppInit_DLLs') | EXTRACT DLLPath | HASH File at DLLPath | LOOKUP Hash in ThreatIntel | ALERT on match
- question: Has a new DLL been added to the AppInit_DLLs value that is either unsigned or signed by a rare or untrusted publisher?
  context: Legitimate software is typically signed by reputable vendors. Adversaries often use unsigned DLLs or self-signed certificates. By baselining common signers for DLLs in the AppInit_DLLs key, this question identifies anomalies where a DLL is unsigned or signed by a very rare publisher, which is highly suspicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry hives on all Windows workstations and servers; Threat Intelligence Platform
    data
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents WHERE (RegistryKey CONTAINS 'AppInit_DLLs') | EXTRACT DLLPath | GET FileSignature(DLLPath) | IF Unsigned OR (SignerPrevalence < 5th_percentile) THEN ALERT
- question: Does a machine learning model classify a newly added AppInit DLL as malicious based on its file and path characteristics?
  context: This question applies a machine learning approach to detect malicious AppInit DLLs that may not be caught by simple signature or reputation checks. The model considers multiple features like file path entropy, directory rarity, signing status, and CTI hits to calculate a probability score. A high score suggests the DLL is likely malicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry hives on all Windows workstations and servers; Threat Intelligence Platform
    data
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | EXTRACT Features(FilePath, FileHash, Signature) | INPUT Features to ML_Model | IF (ModelScore > 0.8) THEN ALERT
- question: Has the AppInit_DLLs registry value been modified to point to a file in a non-standard or suspicious directory?
  context: Legitimate applications typically install DLLs in standard locations like Program Files. Adversaries often place their malicious DLLs in user-writable or temporary locations. This question seeks to identify modifications to AppInit_DLLs that specify a path in a suspicious directory such as C:\Users\, C:\Windows\Temp\, or a UNC path, which is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows endpoints, specifically user profile directories, temporary file system
    locations, and public-writable folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents WHERE (RegistryKey CONTAINS 'AppInit_DLLs' AND NewValue MATCHES ('C:\\Users\\*', 'C:\\Windows\\Temp\\*', '\\AppData\\*', 'C:\\ProgramData\\*', '\\\\*\\*')) | ALERT
- question: Is a DLL added to the AppInit_DLLs value located at a path depth that is a statistical outlier compared to legitimate DLLs?
  context: Legitimate AppInit DLLs usually reside at a predictable directory depth (e.g., C:\Program Files\Vendor\Product\file.dll). Adversaries might drop files in unusually shallow or deep locations. This question establishes a baseline for normal path depths and alerts on new entries that are statistical outliers, indicating a potential attempt to hide a malicious file.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows endpoints, specifically user profile directories, temporary file system
    locations, and public-writable folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | CALCULATE PathDepth(NewValue) | COMPARE PathDepth to baseline | IF PathDepth > (mean + 2 * std_dev) THEN ALERT
- question: Does a clustering algorithm identify a new AppInit_DLLs file path as anomalous compared to common legitimate paths?
  context: This question uses unsupervised machine learning to find unusual file paths without pre-defined rules. By clustering paths based on features like depth, entropy, and keywords, paths that do not fit into large, common clusters (i.e., are classified as noise or outliers) can be flagged for investigation as they do not conform to established patterns.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - All Windows endpoints, specifically user profile directories, temporary file system
    locations, and public-writable folders
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | EXTRACT PathFeatures(NewValue) | INPUT Features to DBSCAN_Model | IF (Cluster == 'noise' OR ClusterSize < threshold) THEN ALERT
- question: Following an AppInit_DLLs modification, did a common GUI process spawn a suspicious child process or make a low-reputation network connection?
  context: After a malicious AppInit DLL is loaded into a process like explorer.exe, it may execute commands. This question looks for this follow-on activity by correlating an AppInit_DLLs registry modification with subsequent suspicious behavior from a GUI process, such as spawning a shell or connecting to a known malicious IP address.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints, Network Gateway, DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents(EventA) WHERE (RegistryKey CONTAINS 'AppInit_DLLs') | JOIN (ProcessCreationEvents(EventB) OR NetworkConnectionEvents(EventC)) WHERE (EventA.Host == EventB.Host AND EventA.Timestamp < EventB.Timestamp < EventA.Timestamp + 5min) AND (EventB.ParentImage IN ('explorer.exe', 'outlook.exe') AND EventB.Image IN ('cmd.exe', 'powershell.exe')) OR (EventC.Reputation == 'low') | ALERT
- question: Did a host's DNS query patterns change significantly after an AppInit_DLLs modification?
  context: A malicious DLL may initiate command and control (C2) communications, resulting in DNS queries for new, malicious domains. This question analyzes DNS logs to detect a significant shift in a host's query behavior after an AppInit_DLLs modification, which could indicate the activation of a C2 channel.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints, Network Gateway, DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | GET DNS_Queries(Host=EventA.Host, Time > EventA.Timestamp) AS PostSet | GET DNS_Queries(Host=EventA.Host, Time < EventA.Timestamp) AS PreSet | CALCULATE JaccardSimilarity(PostSet, PreSet) | IF Similarity < 0.1 THEN ALERT
- question: Did a host exhibit anomalous behavior according to a time-series model after an AppInit_DLLs modification?
  context: This question uses a machine learning model to detect subtle deviations from a host's normal behavior. After an AppInit_DLLs modification, telemetry like process creation rates and network traffic is fed to the model. A high reconstruction error signals that the host's current behavior is anomalous and does not match its learned benign patterns, possibly due to a malicious DLL.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - All Windows endpoints, Network Gateway, DNS servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | GET HostTelemetry(Host=EventA.Host, Time > EventA.Timestamp) | INPUT Telemetry to LSTM_Autoencoder | IF ReconstructionError > threshold THEN ALERT
- question: Has the 'RequireSignedAppInit_DLLs' security setting been disabled?
  context: On modern Windows systems, AppInit DLLs must be digitally signed by default. Adversaries may disable this control by setting the 'RequireSignedAppInit_DLLs' registry value to 0, allowing them to load unsigned malicious DLLs. This action is inherently suspicious and a direct attempt to weaken system security, warranting a critical alert.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints and servers, particularly those running Windows
    8 or newer with Secure Boot enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents WHERE (RegistryKey CONTAINS 'RequireSignedAppInit_DLLs' AND NewValue == '0x00000000') | ALERT severity=critical
- question: Has the 'RequireSignedAppInit_DLLs' registry value been modified on any host where it should be static?
  context: The 'RequireSignedAppInit_DLLs' setting is typically managed by group policy and should not change. Any modification outside of an authorized change process is a high-confidence anomaly. This question tracks modifications to this key, alerting on any change to detect unauthorized security degradation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints and servers, particularly those running Windows
    8 or newer with Secure Boot enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH RegistryModificationEvents WHERE (RegistryKey CONTAINS 'RequireSignedAppInit_DLLs') | COUNT by Host | IF count > 0 AND NOT correlated with ChangeRequest THEN ALERT
- question: Has the 'RequireSignedAppInit_DLLs' setting been disabled shortly before the 'AppInit_DLLs' value was modified?
  context: A sophisticated adversary might first disable the signing requirement and then register their malicious DLL. This specific sequence of events is a strong indicator of a deliberate attack. This question uses sequence mining to detect this high-risk pattern, increasing detection confidence.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Registry hives on all Windows endpoints and servers, particularly those running Windows
    8 or newer with Secure Boot enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FIND sequence of [RegistryModificationEvent(Key='RequireSignedAppInit_DLLs', Value='0') AS EventA] followed by [RegistryModificationEvent(Key='AppInit_DLLs') AS EventB] on same Host within 1 hour | ALERT
- question: Does a new AppInit DLL match the hash or name of a known privilege escalation tool?
  context: Adversaries may use AppInit DLLs to load components of known hacking tools like Mimikatz or UAC bypass utilities to elevate their privileges. This question checks the hash and filename of any newly registered DLL against a threat intelligence database specifically tagged with privilege escalation toolmarks, enabling rapid identification of a critical threat.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks
    for privilege escalation malware
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | EXTRACT DLLPath, DLLName | HASH File at DLLPath | LOOKUP Hash, DLLName in ThreatIntel WHERE (tag == 'privilege-escalation') | ALERT on match
- question: Has a DLL been added to an AppInit_DLLs key that has never been seen in that context across the enterprise before?
  context: In a mature environment, the set of legitimate AppInit DLLs is relatively stable. The first time a specific DLL is ever observed being added to this registry key anywhere in the enterprise is a strong statistical anomaly. This question flags these "first seen" events for investigation as they may represent a new or custom malicious tool.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks
    for privilege escalation malware
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | EXTRACT DLLPath | CHECK if DLLPath has been seen in AppInit_DLLs before in enterprise baseline | IF first_occurrence THEN ALERT
- question: Does a machine learning model classify a new AppInit DLL as a privilege escalation tool based on its PE characteristics?
  context: This question uses a classifier trained to recognize the characteristics of privilege escalation tools. By analyzing features like the PE import hash (imphash) and the presence of specific sensitive API calls, the model can predict if a newly registered DLL is designed for privilege escalation, even if its hash is unknown.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks
    for privilege escalation malware
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') | EXTRACT PE_Features(DLLPath) | INPUT Features to PrivEsc_ML_Model | IF (ModelScore > threshold) THEN ALERT
- question: Following an AppInit_DLLs modification by a standard user process, was a new process created with elevated privileges?
  context: A key goal of privilege escalation is to move from a standard user context (Medium Integrity) to an administrative one (High or System Integrity). This question looks for a direct chain of evidence: a medium integrity process modifies the AppInit_DLLs key, and soon after, a new high integrity process appears on the system, suggesting a successful escalation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers, especially multi-user systems like terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FIND sequence of [RegistryModificationEvent(Key='AppInit_DLLs', Integrity='Medium') AS EventA] followed by [ProcessCreationEvent(Integrity IN ('High', 'System')) AS EventB] on same Host within 5 minutes | ALERT
- question: Did the rate of elevated process creation for a user spike after they modified the AppInit_DLLs key?
  context: This question baselines the normal rate at which each user's processes create higher-integrity child processes. A significant deviation from this personal baseline after an AppInit_DLLs modification attributed to that user can indicate that the user's account is being used to perform privilege escalation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers, especially multi-user systems like terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | MONITOR ProcessCreations where ParentUser=EventA.User | CALCULATE rate of (ChildIntegrity > ParentIntegrity) | IF rate > (user_baseline + 3 * std_dev) THEN ALERT
- question: Can a graph-based model detect a process chain representing privilege escalation via AppInit_DLLs modification?
  context: This question models system activity as a graph to identify complex attack paths. A sequence where a medium-integrity process modifies the AppInit_DLLs key and then starts a high-integrity process forms a specific path in the graph. Anomaly detection algorithms can score the risk of such paths to identify likely privilege escalation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers, especially multi-user systems like terminal servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CONSTRUCT process_graph from telemetry | SEARCH for path: (ProcessA, Integrity:Medium) -> Modifies(AppInit_DLLs) -> Starts -> (ProcessB, Integrity:High) | SCORE path risk | IF risk > threshold THEN ALERT
- question: After an AppInit_DLLs modification, did a privileged SYSTEM process perform suspicious actions like accessing LSASS or making external network connections?
  context: Once a malicious DLL is loaded into a SYSTEM process, it can perform highly sensitive actions. This question establishes focused monitoring after an AppInit_DLLs modification to detect if any SYSTEM process subsequently attempts to dump credentials from LSASS, spawn a shell, or initiate C2 communications, all of which are strong indicators of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Zeek conn.log
  - Domain Controllers, Core Windows Servers, Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | MONITOR host EventA.Host for [ProcessAccess(Target='lsass.exe', Access IN ('0x1010', '0x1410')) OR ProcessCreation(Image IN ('cmd.exe')) OR NetworkConnection(Destination NOT IN allowlist)] where InitiatorIntegrity='System' | ALERT
- question: Following an AppInit_DLLs modification, did a privileged process deviate from its established behavioral baseline?
  context: Critical system processes have predictable behavior. This question involves creating a baseline of normal activity (e.g., typical child processes, network destinations) for processes like lsass.exe. After an AppInit DLL is added, any significant deviation from this baseline by a newly started privileged process is flagged as suspicious.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Zeek conn.log
  - Domain Controllers, Core Windows Servers, Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | MONITOR privileged processes on EventA.Host | COMPARE process behavior to historical baseline | IF deviation_score > threshold THEN ALERT
- question: Does an autoencoder model detect anomalous behavior from a privileged process after an AppInit_DLLs modification?
  context: This question uses an autoencoder, a type of neural network, trained on benign telemetry from privileged processes. After an AppInit_DLLs modification, telemetry from new privileged processes is fed to the model. If the model cannot accurately reconstruct the input (high reconstruction error), it means the behavior is novel and anomalous, suggesting malicious code injection.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Sysmon Event ID 10
  - Zeek conn.log
  - Domain Controllers, Core Windows Servers, Network Gateway
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | GET Telemetry from privileged processes on EventA.Host | INPUT Telemetry to Autoencoder | IF ReconstructionError > threshold THEN ALERT
- question: Was a process created with a higher integrity level than its parent, and was this linked to a recent AppInit_DLLs modification?
  context: A direct jump in integrity level (e.g., a Medium integrity parent spawning a High integrity child) is a classic indicator of privilege escalation, often related to UAC bypass. This question detects this specific event and increases its severity if it occurs on a host where AppInit_DLLs was recently modified.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH ProcessCreationEvents WHERE (IntegrityLevel > ParentIntegrityLevel) | CORRELATE with RegistryModificationEvents(Key='AppInit_DLLs') on same Host within 1 hour | IF correlated, increase severity and ALERT
- question: Following an AppInit_DLLs modification, did a common process spawn a child with a statistically rare integrity level?
  context: This question establishes a baseline for the typical integrity levels of child processes for common parents like 'explorer.exe'. After an AppInit_DLLs modification, if explorer.exe spawns a child with an integrity level that is statistically very rare for it (e.g., 'System'), it is flagged as a potential UAC bypass or privilege escalation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON RegistryModificationEvent('AppInit_DLLs') AS EventA | MONITOR ProcessCreationEvents on EventA.Host | FOR each event, check if ChildIntegrityLevel is rare (< 0.01 percentile) for ParentImage based on enterprise baseline | IF rare THEN ALERT
- question: Does a machine learning model predict a high probability of an integrity level jump following an AppInit_DLLs modification?
  context: This question uses a predictive model to assess the risk of an integrity level jump before or as it happens. The model considers context like the parent process, user, and whether AppInit_DLLs was recently modified. If the model predicts a high probability of escalation and an integrity jump then occurs, it's classified as a high-risk event.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - All Windows endpoints and servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON ProcessCreationEvent | EXTRACT Features(ParentImage, ChildImage, User, recent_appinit_mod) | INPUT Features to IntegrityJump_ML_Model | IF (ModelScore > high_probability_threshold AND IntegrityLevel > ParentIntegrityLevel) THEN ALERT