name: T1556.002: Password Filter DLL
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook provides an investigative guide for detecting the use of a malicious Password Filter DLL (T1556.002), a technique used by adversaries for persistence, defense evasion, and credential access. The investigation focuses on identifying key indicators such as the modification of the LSA 'Notification Packages' registry key, the registration of unusual DLLs (e.g., unsigned, rare, located in non-standard paths, or with typosquatted names), and anomalous behavior from the `lsass.exe` process on Domain Controllers. Anomalous `lsass.exe` behavior includes loading unapproved DLLs, initiating outbound network connections, writing credentials to files, or spawning child processes. The playbook also covers detecting defense evasion tactics like timestomping to alter file timestamps.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0006: Credential Access
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has the 'Notification Packages' registry key been modified, and does the associated DLL match any known threat intelligence?
  context: Detects the primary method of registering a malicious password filter. By monitoring the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages' key for changes and automatically cross-referencing the new DLL's name and hash against threat intelligence feeds, analysts can quickly identify known malicious implants.
  answer_sources: Windows Event ID 4657, Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create). Data should be sourced from registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 13 WHERE (TargetObject CONTAINS 'Notification Packages') | EXTRACT new_dll_name | JOIN Sysmon Event ID 11 on ProcessGuid | EXTRACT file_hash | LOOKUP threat_intelligence on file_hash, new_dll_name
- question: Has a new, historically unseen DLL been registered in 'Notification Packages'?
  context: Identifies novel or rare DLLs being registered as password filters. Adversaries often use custom tools that have not been seen before. By maintaining a historical baseline of all DLLs ever registered in this key, any DLL with a prevalence of one (i.e., a first-time registration) can be flagged as a high-risk anomaly requiring immediate review.
  answer_sources: Windows Event ID 4657, Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create). Data should be sourced from registry and file systems on all Domain Controllers and a historical enterprise-wide software inventory.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 13 WHERE (TargetObject CONTAINS 'Notification Packages') | EXTRACT new_dll_name | LOOKUP historical_dll_inventory on new_dll_name | WHERE count = 0
- question: Does a machine learning model classify the 'Notification Packages' registry modification event as malicious?
  context: Uses a machine learning model to score the risk of a registry modification. By training a model on features like the modifying process, parent process, user context, and time of day, this approach can identify subtle, suspicious patterns that might not trigger a simple rule, providing a more nuanced detection capability.
  answer_sources: Windows Event ID 4657, Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create), Process creation logs (Sysmon Event ID 1). Data should be sourced from registry and file systems on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT Sysmon Event ID 13 for 'Notification Packages' | EXTRACT features (process, parent_process, user, time, dll_rarity) | APPLY classification_model | ALERT on 'malicious' classification
- question: Has a DLL added to 'Notification Packages' been found to be unsigned or located outside of the standard System32 directory?
  context: Targets common red flags associated with malicious DLLs. Legitimate password filters are typically signed by Microsoft and reside in '%SystemRoot%\System32\'. This composite rule automatically flags DLLs that violate these expectations, indicating a high probability of malicious activity.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 7 (Image Loaded), Sysmon Event ID 11 (File Create). Data should be sourced from process, registry, and file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 13 WHERE (TargetObject CONTAINS 'Notification Packages') | JOIN Sysmon Event ID 7/11 on DLL name | WHERE (is_signed = false OR path != '%SystemRoot%\System32\')
- question: Does a newly registered password filter DLL have an extremely low installation prevalence across the enterprise?
  context: Focuses on identifying rare files that could be custom adversary tools. By querying a central software inventory for the hash of a new DLL, a low installation count (e.g., installed on fewer than 5 hosts) serves as a strong indicator of a non-standard or malicious file that requires investigation.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), enterprise-wide software and asset inventory database. Data should be sourced from registry audit logs on all Domain Controllers and a central inventory system.
  range: last 90 days
  queries:
  - technology: Script
    query: ON ALERT for 'Notification Packages' mod | EXTRACT file_hash | QUERY software_inventory for file_hash | CALCULATE prevalence | ALERT if prevalence < threshold
- question: Does an unsupervised machine learning model identify a newly registered password filter DLL as an anomaly?
  context: Leverages anomaly detection to find outlier DLLs without prior knowledge of 'badness'. By feeding features like signing status, prevalence, path, and file entropy into a model like Isolation Forest, the system can automatically score and surface suspicious DLLs that deviate significantly from the established norm of legitimate password filters.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 7 (Image Loaded), Sysmon Event ID 11 (File Create), enterprise-wide software inventory. Data should be sourced from process, registry, and file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT new DLL registration event | EXTRACT features (is_signed, prevalence, path_is_standard, entropy) | APPLY anomaly_detection_model | ALERT on high anomaly_score
- question: Has the lsass.exe process on a Domain Controller loaded a DLL that is not on its pre-approved allow-list?
  context: Enforces a strict security policy for a critical system process. The lsass.exe process should only load a predictable set of system DLLs. Any deviation from a maintained allow-list for a specific server role and build is a high-confidence indicator of compromise, such as code injection or a malicious password filter being loaded.
  answer_sources: Sysmon Event ID 7 (Image Loaded). Data should be sourced from process execution logs (specifically module loads for lsass.exe) on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 7 WHERE (Image = 'lsass.exe') | EXTRACT LoadedImageName | ALERT if LoadedImageName NOT IN lsass_dll_allowlist
- question: Has the set of DLLs loaded by lsass.exe on a Domain Controller significantly changed compared to its historical baseline?
  context: Detects drift or sudden changes in the behavior of the lsass.exe process. By establishing a baseline of loaded modules over a rolling window and comparing it to the current set using the Jaccard similarity index, this method can spot significant shifts that indicate a new, potentially malicious DLL has been loaded.
  answer_sources: Sysmon Event ID 7 (Image Loaded). Data should be sourced from process execution logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Script
    query: CALCULATE daily_jaccard_similarity(current_lsass_dlls, baseline_lsass_dlls) | ALERT if similarity < 0.95
- question: Has there been a sudden spike in the number of new, unique DLLs being loaded by lsass.exe?
  context: Identifies abnormal loading activity over time. A sudden burst of new DLLs being loaded into lsass.exe is highly unusual. Applying time-series anomaly detection to the count of new DLLs per hour can effectively detect this burst activity, which could be indicative of a compromise in progress.
  answer_sources: Sysmon Event ID 7 (Image Loaded). Data should be sourced from process execution logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: AGGREGATE count of unique new DLLs loaded by lsass.exe per hour | APPLY time_series_anomaly_detection | ALERT on spike
- question: Does the name of a newly registered password filter DLL match a known malicious typosquatted filename?
  context: Checks for a common adversary technique of masquerading malware as legitimate files. By comparing the name of any new DLL registered in 'Notification Packages' against a curated blocklist of known typosquatted names (e.g., 'rassapi32.dll' instead of 'rasapi32.dll'), this provides a high-confidence alert for known threats.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create). Data should be sourced from registry and file systems on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 13 WHERE (TargetObject CONTAINS 'Notification Packages') | EXTRACT new_dll_name | ALERT if new_dll_name IN typosquat_blocklist
- question: Is the name of a newly registered password filter DLL suspiciously similar to a legitimate system DLL name?
  context: Proactively hunts for unknown typosquatted DLLs by measuring string similarity. By calculating the Levenshtein distance between a new DLL's name and all legitimate DLLs in System32, a very low distance (e.g., 1 or 2) indicates a likely attempt at typosquatting and should be flagged for investigation, especially if the file is unsigned.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create). Data should be sourced from registry and file systems on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Script
    query: ON new 'Notification Packages' DLL | CALCULATE levenshtein_distance(new_dll_name, all_system32_dll_names) | ALERT if min_distance <= 2
- question: Does a character-level machine learning model classify a new DLL name as suspiciously similar to a legitimate one?
  context: Uses a machine learning approach to detect sophisticated typosquatting. A model trained on character-level n-grams can learn the patterns of legitimate versus malicious filenames. This allows it to classify new, unseen DLL names as 'suspiciously-similar', providing a more robust detection method than simple string matching.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 11 (File Create). Data should be sourced from registry and file systems on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT new_dll_name | APPLY character_ngram_model | ALERT on 'suspiciously-similar' classification
- question: Has the file creation timestamp of a DLL in a System32 directory on a Domain Controller been modified?
  context: Detects 'timestomping,' a classic defense evasion technique where an adversary modifies a file's timestamp to make it blend in with older, legitimate files. A 'FileCreateTimeChanged' event (Sysmon Event ID 2) for a DLL in a critical system directory is a high-fidelity indicator of this activity.
  answer_sources: Sysmon Event ID 2 (FileCreateTimeChanged). Data should be sourced from file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 2 WHERE (TargetFilename ENDS WITH '.dll' AND TargetFilename CONTAINS 'System32')
- question: Does a new password filter DLL exhibit unusually high file entropy, suggesting it may be packed or encrypted?
  context: Identifies malware that has been packed or encrypted to evade signature-based detection. By calculating the Shannon entropy of a newly created DLL and comparing it to the statistical norm for other DLLs in the same directory, a significantly higher value can reveal the presence of packed code.
  answer_sources: Sysmon Event ID 11 (File Create). Data should be sourced from file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Script
    query: ON new password filter DLL creation (Sysmon Event ID 11) | CALCULATE file_entropy | CALCULATE baseline_entropy_mean_stddev for directory | ALERT if file_entropy > (mean + 2*stddev)
- question: Does a clustering model identify a DLL in System32 as an outlier based on its metadata?
  context: Finds anomalous files by grouping similar, legitimate files together. Using a clustering algorithm like DBSCAN on file metadata (e.g., entropy, size, creation time delta), the system can automatically isolate outlier DLLs that do not fit the profile of normal system files, indicating potential timestomping or packing.
  answer_sources: Sysmon Event ID 11 (File Create), Sysmon Event ID 2 (FileCreateTimeChanged). Data should be sourced from file system metadata and audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT all System32 DLL metadata (entropy, size, creation_time_delta) | APPLY DBSCAN clustering | ALERT on files classified as noise/outliers
- question: Was the 'Notification Packages' registry key modified by a suspicious process like a script engine or office application?
  context: Targets modifications made by illegitimate processes. System settings are typically changed by specific system utilities. An alert that triggers when this key is modified by a process like 'powershell.exe', 'cmd.exe', or 'WINWORD.EXE' is a strong indicator of a malicious script or document executing on the system.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 1 (Process Create). Data should be sourced from process and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 13 WHERE (TargetObject CONTAINS 'Notification Packages' AND Image IN ['powershell.exe', 'cmd.exe', 'wscript.exe', 'mshta.exe', 'WINWORD.EXE'])
- question: Was the 'Notification Packages' key modified by a process that has never or rarely modified it before?
  context: Identifies anomalous behavior by focusing on rarity. The set of processes that legitimately modify this key is very small and stable. By baselining this activity, any modification by a process not seen in the baseline (i.e., a statistical frequency of zero) is a significant anomaly that warrants investigation.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 1 (Process Create). Data should be sourced from process and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Script
    query: ON 'Notification Packages' modification | EXTRACT modifying_process | LOOKUP process_baseline_frequency | ALERT if frequency = 0
- question: Does a machine learning model classify the registry modification event as malicious based on the modifying process context?
  context: Provides a risk score for the registry modification event. A model trained on features like process name, parent process, and user context can learn to distinguish between benign administrative changes and malicious updates, such as an update initiated by a PowerShell script run by a standard user.
  answer_sources: Sysmon Event ID 13 (Registry Value Set), Sysmon Event ID 1 (Process Create). Data should be sourced from process and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT registry modification event | EXTRACT features (process, parent_process, command_line, user) | APPLY classification_model | ALERT on 'malicious' classification
- question: Has the lsass.exe process on a Domain Controller initiated an outbound network connection to an external IP address?
  context: This is a critical, high-fidelity indicator of credential theft. The lsass.exe process should never initiate outbound network connections. Any such event is a sign of compromise, likely a malicious password filter or injected code exfiltrating credentials. This behavior requires an immediate incident response.
  answer_sources: Sysmon Event ID 3 (Network connection), Zeek conn.log, Zeek dns.log. Data should be sourced from endpoint network logs and network gateway/DNS logs from all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 3 WHERE (Image = 'lsass.exe' AND Initiated = true AND DestinationIp IS NOT private)
- question: If lsass.exe made an outbound connection, was the destination IP address, ASN, or domain historically rare or never-before-seen?
  context: Adds contextual severity to an already critical alert. By enriching an lsass.exe outbound connection event with historical network data, connecting to a novel or rare destination (e.g., a new C2 server) significantly increases the alert's severity and confirms the malicious nature of the activity.
  answer_sources: Sysmon Event ID 3 (Network connection), Zeek conn.log, Zeek dns.log. Data should be sourced from endpoint network logs and historical network traffic logs.
  range: last 90 days
  queries:
  - technology: Script
    query: ON lsass.exe outbound alert | EXTRACT DestinationIp, DestinationHostname | LOOKUP historical_network_logs for IP, ASN, domain | CALCULATE frequency | ESCALATE if frequency is in lowest percentile
- question: Does a graph-based model detect an anomalous network connection originating from the lsass.exe process?
  context: Identifies structural anomalies in process and network behavior. In a graph model of system activity, a newly formed link between the lsass.exe node and an external IP address node is a significant structural anomaly. This approach can detect the creation of this malicious communication channel as it happens.
  answer_sources: Sysmon Event ID 3 (Network connection), Sysmon Event ID 1 (Process Create). Data should be sourced from endpoint process and network logs.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: MODEL process/network relationships as a graph | DETECT new edge from 'lsass.exe' node to 'external_ip' node | FLAG as high-scoring structural anomaly
- question: Has the lsass.exe process created a file in a non-standard location (e.g., Temp) or with a suspicious extension (e.g., .txt, .log)?
  context: Detects credential dumping to a file. The lsass.exe process should not be writing to arbitrary files. A file creation event by lsass.exe in a temporary directory or with a data-like extension is a strong indicator that an adversary is dumping credentials from memory to a file for later exfiltration.
  answer_sources: Sysmon Event ID 11 (File Create). Data should be sourced from file system audit logs on Domain Controllers, particularly monitoring temporary directories.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 11 WHERE (Image = 'lsass.exe' AND (TargetFilename CONTAINS 'Temp' OR TargetFilename ENDS WITH ['.log', '.txt', '.dat']))
- question: Has lsass.exe written a file to a directory it does not normally write to?
  context: Identifies anomalous file write locations by baselining normal behavior. The set of directories lsass.exe writes to is extremely small and predictable. By profiling these locations, any write to a directory that is not on the established baseline can be flagged as anomalous and likely malicious credential dumping.
  answer_sources: Sysmon Event ID 11 (File Create). Data should be sourced from file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Script
    query: ON lsass.exe file write | EXTRACT parent_directory | LOOKUP directory_baseline_frequency | ALERT if frequency is not in top 99.9th percentile
- question: Does a machine learning classifier predict that a file write event by lsass.exe is malicious?
  context: Uses machine learning to distinguish between legitimate system activity and credential dumping. By training a model on features of the write event (e.g., target path, extension, path string entropy), the system can learn to identify and alert on file writes that are characteristic of credential dumping behavior.
  answer_sources: Sysmon Event ID 11 (File Create). Data should be sourced from file system audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: INPUT lsass.exe file write event | EXTRACT features (path, extension, path_entropy) | APPLY classification_model | ALERT on 'malicious' classification
- question: Has the lsass.exe process on a Domain Controller spawned a child process?
  context: This is a critical, zero-tolerance indicator of compromise. The lsass.exe process should never spawn child processes under any normal operating conditions. Any such event is an absolute sign of malicious code execution within lsass.exe and requires immediate incident response.
  answer_sources: Windows Event ID 4688 (Process Creation), Sysmon Event ID 1 (Process Create). Data should be sourced from process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: SEARCH Sysmon Event ID 1 WHERE (ParentImage = 'lsass.exe')
- question: Has a statistical anomaly occurred where lsass.exe is registered as a parent process?
  context: Highlights the absolute rarity of this event. The baseline frequency of lsass.exe acting as a parent process is zero. Therefore, any single occurrence represents a complete deviation from the norm and is, by definition, a maximum-severity statistical anomaly that confirms malicious activity.
  answer_sources: Windows Event ID 4688 (Process Creation), Sysmon Event ID 1 (Process Create). Data should be sourced from process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Analytics
    query: COUNT process creation events where ParentImage = 'lsass.exe' | ALERT if count > 0, as this is a 100% deviation from a baseline of 0.
- question: Does a process lineage graph model show a child process originating from the lsass.exe node?
  context: Identifies a structurally impossible event in a process graph. In a correctly modeled process lineage graph, there should be no legitimate edges originating from the lsass.exe node. The creation of such an edge is a topological anomaly of the highest possible risk, confirming code execution within lsass.exe.
  answer_sources: Windows Event ID 4688 (Process Creation), Sysmon Event ID 1 (Process Create). Data should be sourced from process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: MODEL process lineage as a graph | DETECT new edge originating from 'lsass.exe' node | FLAG as maximum-risk topological anomaly