name: T1556.002: Password Filter DLL
id: a8c6b3e4-1f7d-4a1b-9e0c-2d5f8a9b7c6d
description: This playbook helps identify adversaries who are maintaining persistence, evading defenses, and accessing credentials by registering a malicious password filter DLL. This technique involves placing a custom DLL on a Domain Controller that is loaded by the Local Security Authority (LSA) process (lsass.exe). This DLL can then capture plaintext passwords whenever a user changes their password. The playbook focuses on detecting the initial registration of the malicious DLL via registry modifications, identifying suspicious characteristics of the DLL itself (e.g., unsigned, rare, typosquatted name, packed), and monitoring for anomalous behavior from the lsass.exe process, such as outbound network connections, unusual file writes, or child process creation, which could indicate credential harvesting and exfiltration.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0006: Credential Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Can we detect modifications to the 'Notification Packages' registry key and automatically enrich the findings with threat intelligence?
  context: Adversaries establish persistence by adding their malicious DLL to the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages' registry key. This question aims to create a high-fidelity alert for this specific modification and immediately determine if the associated DLL is a known threat by querying intelligence feeds, thus accelerating triage and response.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 13 WHERE RegistryKey CONTAINS "Control\Lsa\Notification Packages")
      JOIN (Sysmon Event ID 11 ON ProcessGUID)
      LOOKUP threat_intelligence ON FileHash
      ALERT IF threat_intelligence_match
- question: Are there any newly registered password filter DLLs that are statistical anomalies compared to a historical enterprise-wide baseline?
  context: Legitimate password filter DLLs are rare and consistently deployed. A malicious DLL will likely be unique to a compromised environment. This question focuses on establishing a baseline of all known, legitimate DLLs ever registered for this purpose and flagging any new DLL that has never been seen before (prevalence of 1) as a high-risk anomaly requiring immediate investigation.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: SIEM / Data Analytics
    query: |-
      SEARCH (Sysmon Event ID 13 WHERE RegistryKey CONTAINS "Control\Lsa\Notification Packages")
      EXTRACT NewDLLName
      LOOKUP historical_dll_baseline ON NewDLLName
      ALERT IF NOT found
- question: Can we use a machine learning model to classify modifications to the 'Notification Packages' key as benign or malicious?
  context: This question explores a more advanced detection method using a supervised classification model. By analyzing features of the registry modification event—such as the process making the change, its parent, user context, and time of day—the model can learn to distinguish legitimate administrative activity from malicious persistence attempts, providing a probabilistic risk score for each event.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      PREDICT malice_probability FROM registry_modification_events
      USING FEATURES (process_name, parent_process, user, time_of_day, dll_rarity)
      ALERT IF malice_probability > threshold
- question: Can we detect when a newly registered password filter DLL is unsigned or located in a non-standard directory?
  context: Legitimate system DLLs are typically signed by Microsoft and reside in '%SystemRoot%\System32\'. Adversaries often use unsigned DLLs or place them in less scrutinized directories. This question aims to create a composite rule that alerts when a DLL is added to 'Notification Packages' and exhibits these suspicious properties, which are strong indicators of malicious activity.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - Process, registry, and file system audit logs on all Domain Controllers; enterprise-wide software and asset inventory database.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 13 WHERE RegistryKey CONTAINS "Notification Packages")
      JOIN (Sysmon Event ID 7 OR Sysmon Event ID 11 ON ProcessGUID)
      ALERT IF (IsSigned = false OR Path NOT LIKE "%System32%")
- question: Can we identify newly registered password filter DLLs that are exceptionally rare across the entire enterprise?
  context: Malware is often unique to a small number of hosts. By querying a central software inventory, we can determine the prevalence of a newly registered DLL. This question focuses on escalating any DLL for investigation if its installation count is below a defined threshold, effectively treating rarity as a proxy for suspicion.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - Process, registry, and file system audit logs on all Domain Controllers; enterprise-wide software and asset inventory database.
  range: last 90 days
  queries:
  - technology: Asset Inventory / SIEM
    query: |-
      ON ALERT (Registry "Notification Packages" modified)
      EXTRACT FileHash
      QUERY software_inventory FOR COUNT(hosts) WHERE FileHash = extracted_hash
      ALERT IF COUNT < 5
- question: Can we apply an unsupervised anomaly detection model to identify outlier password filter DLLs based on their properties?
  context: This question proposes using an anomaly detection model (e.g., Isolation Forest) to find malicious DLLs without prior labeling. By feeding the model features like signature status, prevalence, file path, publisher rarity, and file entropy, it can assign an anomaly score to each new DLL, automatically flagging those that deviate significantly from the norm.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 7
  - Sysmon Event ID 11
  - Process, registry, and file system audit logs on all Domain Controllers; enterprise-wide software and asset inventory database.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      CALCULATE anomaly_score FOR new_dll
      USING FEATURES (is_signed, prevalence, path_is_standard, publisher_rarity, file_entropy)
      ALERT IF anomaly_score > threshold
- question: Can we detect if a DLL not on a pre-approved allow-list is loaded by the lsass.exe process?
  context: The lsass.exe process on a Domain Controller should load a predictable and stable set of modules. This question aims to establish a strict allow-list of authorized DLLs for each server build and role. Any module load by lsass.exe involving a DLL not on this list is a high-confidence indicator of compromise, such as a malicious password filter being loaded.
  answer_sources:
  - Sysmon Event ID 7
  - Process execution logs, specifically module load events for the lsass.exe process, on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 7 WHERE ImageLoaded CONTAINS "lsass.exe")
      EXTRACT ModuleName
      LOOKUP lsass_module_allow_list ON ModuleName
      ALERT IF NOT found
- question: Are there significant changes in the set of DLLs loaded by lsass.exe compared to a historical baseline?
  context: The introduction of a malicious password filter will alter the set of modules loaded by lsass.exe. This question involves baselining the normal set of loaded DLLs over a rolling window and then using a similarity index (like Jaccard) to compare the current set to the baseline. A low similarity score indicates a significant change that warrants investigation.
  answer_sources:
  - Sysmon Event ID 7
  - Process execution logs, specifically module load events for the lsass.exe process, on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Data Analytics
    query: |-
      BASELINE modules_loaded_by_lsass FOR last 30 days
      CALCULATE jaccard_similarity(current_modules, baseline_modules)
      ALERT IF similarity_score < 0.95
- question: Is there a sudden spike in the number of new, unique DLLs being loaded by lsass.exe?
  context: A compromise may involve the lsass.exe process loading multiple new DLLs. This question applies time-series analysis to the count of newly seen DLLs loaded by lsass.exe per hour. An anomaly detection algorithm can identify sudden spikes in this metric, which would be abnormal and indicative of malicious activity.
  answer_sources:
  - Sysmon Event ID 7
  - Process execution logs, specifically module load events for the lsass.exe process, on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Time-Series Analysis
    query: |-
      MONITOR count(unique_new_dlls_loaded_by_lsass) per hour
      APPLY anomaly_detection_algorithm
      ALERT on significant spike
- question: Can we detect if a newly registered password filter DLL has a name that is a known malicious typosquat of a legitimate DLL?
  context: Adversaries may name their malicious DLL very similarly to a legitimate system file (e.g., 'rassapi32.dll' vs 'rasapi32.dll') to evade detection. This question focuses on checking the name of any newly registered DLL against a curated blocklist of known malicious typosquatted names for an immediate, high-confidence alert.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 13 WHERE RegistryKey CONTAINS "Notification Packages")
      EXTRACT NewDLLName
      LOOKUP typosquat_blocklist ON NewDLLName
      ALERT IF found
- question: Can we programmatically identify potential DLL typosquatting attempts by measuring string similarity?
  context: To detect novel typosquatting attempts not on a blocklist, this question proposes calculating the Levenshtein distance (a measure of string similarity) between any new DLL name and all legitimate DLLs in System32. A very small distance (e.g., 1 or 2) suggests a likely typosquat attempt and should trigger an investigation, especially if the file is also unsigned.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: Scripting / Data Analytics
    query: |-
      FOR each new_dll_name in "Notification Packages":
        CALCULATE min_levenshtein_distance(new_dll_name, legitimate_system32_dll_list)
        ALERT IF min_distance <= 2
- question: Can a machine learning model be used to classify newly registered DLL names as legitimate or suspiciously similar to known system files?
  context: This question explores an advanced, automated approach to detecting typosquatting. A character-level n-gram model can be trained to recognize the patterns of legitimate filenames versus malicious ones. This allows the system to automatically flag any new DLL name that appears syntactically similar to known malicious patterns, even if it's a novel variant.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Registry and file systems on all Domain Controllers, specifically the 'HKLM\SYSTEM\CurrentControlSet\Control\Lsa' key and the '%SystemRoot%\System32\' directory.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      PREDICT classification FROM new_dll_name
      USING n_gram_model
      ALERT IF classification = 'suspiciously-similar'
- question: Can we detect if a DLL file in System32 on a Domain Controller has had its creation timestamp modified?
  context: Adversaries use "timestomping" to modify a file's timestamp to match older, legitimate files, making it blend in and evade timeline analysis. This question aims to create a high-severity alert for any file creation time change event specifically for DLLs in the System32 directory on a Domain Controller, as this is a strong indicator of defense evasion.
  answer_sources:
  - Sysmon Event ID 2
  - Sysmon Event ID 11
  - File system metadata and audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 2 WHERE TargetFilename ENDS WITH ".dll" AND TargetFilename CONTAINS "System32")
      FILTER on Domain Controllers
      ALERT on any match
- question: Can we detect if a new password filter DLL is likely packed or encrypted by analyzing its file entropy?
  context: To hide their code, adversaries often pack or encrypt their malware, which results in high file entropy (randomness). This question involves calculating the Shannon entropy of any new DLL registered as a password filter. An entropy value significantly higher than the average for other DLLs in the same directory indicates likely packing and should be flagged for analysis.
  answer_sources:
  - Sysmon Event ID 2
  - Sysmon Event ID 11
  - File system metadata and audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Scripting / EDR
    query: |-
      ON (Sysmon Event ID 11 for new password filter DLL):
        CALCULATE file_entropy
        COMPARE to baseline_entropy_of_system32_dlls
        ALERT IF file_entropy > (baseline_mean + 2 * baseline_std_dev)
- question: Can we use clustering algorithms to automatically identify outlier DLLs based on their file metadata?
  context: This question proposes an unsupervised machine learning approach to find anomalous DLLs. By clustering all DLLs in System32 based on features like file size, entropy, and the age of the file relative to its neighbors, timestomped or packed malware will fail to group with legitimate files and will be isolated as outliers, automatically bringing them to an analyst's attention.
  answer_sources:
  - Sysmon Event ID 2
  - Sysmon Event ID 11
  - File system metadata and audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      CLUSTER all_system32_dlls
      USING FEATURES (file_entropy, file_size, relative_creation_time)
      IDENTIFY outliers
      ALERT on any new password filter DLL classified as an outlier
- question: Can we detect if the 'Notification Packages' registry key is modified by an unusual or unauthorized process?
  context: Modifications to this sensitive registry key should only be performed by a small number of trusted system processes. This question aims to create an alert if the modification is made by a process on a blocklist, such as a scripting engine (powershell.exe) or an Office application, which would be highly irregular and suspicious.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Process execution and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 13 WHERE RegistryKey CONTAINS "Notification Packages")
      ALERT IF Image IN ["powershell.exe", "cmd.exe", "wscript.exe", "mshta.exe"]
- question: Are there statistically rare processes modifying the 'Notification Packages' registry key?
  context: Building on the previous question, this approach focuses on data-driven anomaly detection rather than a static blocklist. By creating a frequency distribution of all processes that have ever modified this key, we can alert on any modification made by a process that has never been seen performing this action before (i.e., a frequency of zero in the baseline).
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Process execution and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Data Analytics
    query: |-
      BASELINE frequency of process names modifying "Notification Packages" key for last 90 days
      ON new modification:
        GET modifying process name
        ALERT IF process name frequency in baseline is 0
- question: Can we use a machine learning model to classify the legitimacy of a process modifying the 'Notification Packages' key?
  context: This question proposes using a classification model to provide a risk score for each modification event. By training on features like the process name, its parent, command line arguments, and user context, the model can learn to differentiate between benign system changes and malicious activity, such as an unauthorized script run by a standard user.
  answer_sources:
  - Sysmon Event ID 13
  - Sysmon Event ID 1
  - Process execution and registry audit logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      PREDICT legitimacy_score FROM registry_modification_event
      USING FEATURES (process_name, parent_process, command_line, user_context)
      ALERT IF legitimacy_score is low
- question: Can we detect any outbound network connection initiated by the lsass.exe process on a Domain Controller?
  context: The lsass.exe process should never initiate outbound network connections to external addresses. Such an event is a very high-confidence indicator of compromise, likely representing credential exfiltration by a malicious password filter DLL. This question aims to create a zero-tolerance, critical-severity alert for this specific behavior.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network gateway traffic logs (Zeek), DNS server logs (Zeek), and endpoint network connection logs (Sysmon) from all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 3 WHERE Image = "C:\Windows\System32\lsass.exe" AND Initiated = "true")
      FILTER DestinationIP is not private
      ALERT on any match
- question: Can we enrich alerts for outbound lsass.exe connections with historical network rarity context?
  context: While any outbound lsass.exe connection is suspicious, a connection to a brand new, never-before-seen IP or ASN is even more so. This question focuses on automatically enriching such alerts by calculating the historical frequency of the destination from network logs. A destination in the lowest percentile of rarity significantly increases the alert's severity and urgency.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network gateway traffic logs (Zeek), DNS server logs (Zeek), and endpoint network connection logs (Sysmon) from all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM / Data Analytics
    query: |-
      ON ALERT (lsass.exe outbound connection):
        EXTRACT DestinationIP, DestinationASN
        CALCULATE historical_rarity(DestinationIP, DestinationASN) from Zeek logs
        UPDATE alert severity based on rarity score
- question: Can we use graph-based analysis to detect anomalous network communications from lsass.exe?
  context: This question proposes modeling host and network process relationships as a graph. In a normal state, there would be no edge connecting the lsass.exe node on a Domain Controller to an external IP address node. The creation of such an edge would be a structural anomaly in the graph, providing a powerful, context-aware method for detecting credential exfiltration.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Network gateway traffic logs (Zeek), DNS server logs (Zeek), and endpoint network connection logs (Sysmon) from all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Graph Analytics
    query: |-
      MONITOR process_network_graph for new edges
      ALERT IF new edge created WHERE source_node = "lsass.exe" AND dest_node_type = "External IP"
- question: Can we detect if lsass.exe writes a file to a non-standard location or with a suspicious extension?
  context: A malicious password filter might cause lsass.exe to dump captured credentials to a file on disk. This behavior is highly abnormal, as lsass.exe should not be writing to temporary directories or creating text/log files. This question aims to create a rule that alerts on file creation events from lsass.exe that match these suspicious patterns.
  answer_sources:
  - Sysmon Event ID 11
  - File system audit logs on Domain Controllers, particularly monitoring '%SystemRoot%\Temp\', 'C:\ProgramData\', and user profile directories.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 11 WHERE Image = "C:\Windows\System32\lsass.exe")
      FILTER (TargetFilename CONTAINS "\Temp\" OR TargetFilename CONTAINS "\ProgramData\") OR (TargetFilename ENDS WITH ".log", ".txt", ".dat", ".tmp")
      ALERT on any match
- question: Can we detect anomalous file write activity from lsass.exe by baselining its normal behavior?
  context: The legitimate file write locations for lsass.exe are extremely limited and predictable. This question focuses on profiling these normal paths and using frequency analysis to detect any deviation. A file write by lsass.exe to a parent directory that is not in the top 99.9th percentile of common system locations for this process would be flagged as a high-risk anomaly.
  answer_sources:
  - Sysmon Event ID 11
  - File system audit logs on Domain Controllers, particularly monitoring '%SystemRoot%\Temp\', 'C:\ProgramData\', and user profile directories.
  range: last 90 days
  queries:
  - technology: Data Analytics
    query: |-
      BASELINE frequency of parent directories for lsass.exe file writes
      ON new file write:
        GET parent_directory
        ALERT IF parent_directory not in top 99.9th percentile of baseline
- question: Can a machine learning classifier distinguish between legitimate and malicious file writes by lsass.exe?
  context: To add more intelligence to file write detection, this question proposes training a classifier. The model would use features like the process name, target file path, file extension, and path string entropy to learn the difference between normal system operations and suspicious credential dumping activity, providing a more robust detection capability.
  answer_sources:
  - Sysmon Event ID 11
  - File system audit logs on Domain Controllers, particularly monitoring '%SystemRoot%\Temp\', 'C:\ProgramData\', and user profile directories.
  range: last 90 days
  queries:
  - technology: Machine Learning
    query: |-
      PREDICT is_malicious FROM lsass_file_write_event
      USING FEATURES (target_path, file_extension, path_entropy)
      ALERT IF is_malicious = true
- question: Can we detect if the lsass.exe process spawns a child process?
  context: Under normal circumstances, the lsass.exe process should never spawn a child process. This behavior is an absolute, zero-tolerance indicator of compromise, often seen when an injected malicious component (like a password filter DLL) executes a command or another tool. This question aims to create a critical-severity alert for any such occurrence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: SIEM
    query: |-
      SEARCH (Sysmon Event ID 1 OR Windows Event ID 4688)
      WHERE ParentImage = "C:\Windows\System32\lsass.exe"
      ALERT on any match
- question: How can we confirm that any instance of lsass.exe as a parent process is a high-confidence anomaly?
  context: This question serves to codify the security principle that lsass.exe spawning child processes is forbidden behavior. The baseline frequency for this event is zero. Therefore, any single occurrence represents a complete deviation from the norm and is a definitive statistical anomaly that requires immediate incident response. This provides absolute confidence in the alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Data Analytics
    query: |-
      CALCULATE count(events) WHERE ParentImage = "lsass.exe"
      // Expected result is always 0. Any other result is a 100% anomaly.
      ALERT IF count > 0
- question: Can we use process lineage graphing to detect lsass.exe spawning a child process?
  context: In a process lineage graph, which maps parent-child process relationships, there should be no edges originating from the lsass.exe node. This question applies a graph-based model to detect this specific topological anomaly. The creation of a child process from lsass.exe would be flagged by the model as a structural violation with the highest possible risk score.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Process creation logs on all Domain Controllers.
  range: last 90 days
  queries:
  - technology: Graph Analytics
    query: |-
      MONITOR process_lineage_graph for new edges
      ALERT IF new edge created WHERE source_node = "lsass.exe"