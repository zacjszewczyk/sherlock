name: T1647: Plist File Modification
id: 2a3b4c5d-6e7f-4a8b-9c0d-1e2f3a4b5c6d
description: This playbook focuses on detecting adversaries modifying property list (.plist) files on macOS for defense evasion and persistence. It addresses techniques such as hiding applications from the user interface by setting the LSUIElement key, embedding known-bad indicators (IOCs) like malicious paths or domains in plist files, and establishing persistence through LaunchAgents or LaunchDaemons. The playbook's investigative questions cover a range of methods from simple rule-based checks to advanced machine learning models. These questions aim to identify plists that point to executables in non-standard locations, contain obfuscated or high-entropy script arguments, are modified by unusual processes, or result in suspicious network activity like C2 beaconing or connections to rare domains.
type: technique
related:
  - tactic_id: TA0005
    tactic_name: Defense Evasion
  - tactic_id: TA0003
    tactic_name: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an application's Info.plist being modified to set the LSUIElement key to '1' or 'true' to hide it from the user interface?
    context: This modification hides an application from the macOS Dock and menu bar, a common technique for stealthy malware. It is critical to correlate this file modification with the parent process making the change. Modifications by legitimate software installers are expected, but a change made by a browser, office application, or unknown process is highly suspicious.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
    range: last 90 days
    queries:
      - query: |-
          SEARCH file modification events
          WHERE file_name IS 'Info.plist'
          AND file_content CONTAINS 'LSUIElement' AND ('1' OR 'true')
          CORRELATE with parent process information
          ALERT if parent_process is not in (installers, developer_tools)
  - question: Is the LSUIElement key being enabled for an application that does not normally use it?
    context: Many legitimate background agents and helper tools use the LSUIElement key to run without a user interface. By establishing and maintaining a baseline of these known-good applications, analysts can focus on deviations. This approach effectively reduces false positives and highlights novel attempts by adversaries to hide their applications.
    answer_sources:
      - macOS EDR File Modification Events
      - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
    range: last 90 days
    queries:
      - query: |-
          SEARCH file modification events
          WHERE file_name IS 'Info.plist'
          AND file_content CONTAINS 'LSUIElement' AND ('1' OR 'true')
          EXTRACT application_bundle_identifier
          ALERT if application_bundle_identifier NOT IN baseline_lsui_apps_set
  - question: Does the process modifying an Info.plist to hide an application exhibit characteristics of a legitimate installer or an anomalous process?
    context: This advanced, model-based approach moves beyond static allowlists. A machine learning model can be trained to recognize the nuanced features of legitimate installer processes (e.g., process name, parent process, command-line arguments, user context). The model can then flag any modification that deviates from this learned behavior, potentially catching more sophisticated or novel attacks.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
    range: last 90 days
    queries:
      - query: |-
          ON file modification of 'Info.plist'
          EXTRACT features of modifying process (name, parent, cmdline, user)
          APPLY pre-trained classifier model to process features
          ALERT if classification is 'suspicious'
  - question: Are newly created or modified plist files in key persistence and configuration directories being populated with known Indicators of Compromise (IOCs)?
    context: Adversaries often use plist files to store configuration for malware, including C2 domains, malicious file paths, or specific command arguments. Scanning these files upon modification against a threat intelligence feed is a direct way to detect known threats. Key directories to monitor include `~/Library/LaunchAgents`, `/Library/LaunchAgents`, and `/Library/LaunchDaemons`.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
    range: last 90 days
    queries:
      - query: |-
          SEARCH file creation/modification events
          WHERE file_path IN (launch_agent_dirs, launch_daemon_dirs) AND file_extension IS 'plist'
          SCAN file content
          ALERT if content MATCHES known_iocs (domains, IPs, paths)
  - question: Do the arguments (`ProgramArguments`) in a recently modified plist contain statistically rare command structures compared to a baseline of legitimate plists?
    context: This statistical method helps find unknown-bad activity. Legitimate software tends to use predictable and common command arguments. Malware, especially when using obfuscation or custom tools, will often use unique or rare argument combinations. By analyzing the rarity of argument n-grams (sequences of arguments), analysts can flag suspicious plist entries without relying on known IOCs.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification
          EXTRACT 'ProgramArguments' as n_grams
          COMPARE n_gram frequency against enterprise-wide baseline
          ALERT if frequency is below a rarity threshold (e.g., 1st percentile)
  - question: Based on a machine learning model, do the contents of a modified plist (e.g., Label, ProgramArguments) resemble malicious or benign text?
    context: This advanced technique uses natural language processing models (like a fine-tuned BERT) trained on large datasets of malicious and benign plist files. The model can learn subtle textual patterns indicative of malice, allowing it to detect novel threats that might not be caught by IOC scanning or statistical rarity checks.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification
          EXTRACT string values (Label, ProgramArguments, etc.)
          APPLY pre-trained text classification model
          ALERT if malicious_confidence_score > 0.85
  - question: Is a modified plist configured to execute a program from an unusual or non-standard location like /tmp, /Users/Shared, or a user's Downloads folder?
    context: Legitimate persistent applications are typically installed in standard locations like `/Applications`. Adversaries often drop their executables in temporary, shared, or hidden directories to evade detection. Monitoring plists that point to these non-standard execution paths is a highly effective heuristic for spotting malware.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification
          EXTRACT executable_path from 'Program' or 'ProgramArguments'
          ALERT if executable_path is in watchlist_of_non_standard_dirs
  - question: Is a modified plist configured to execute a program from a parent directory that is statistically rare across the entire enterprise?
    context: This method expands on the watchlist approach by using data from the entire environment. Instead of a static list, it dynamically identifies anomalous directories. An executable path might not be on a generic watchlist but could be extremely rare for your specific organization. Flagging these low-frequency directories helps uncover tailored or novel attacker techniques.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification
          EXTRACT parent_directory from executable_path
          LOOKUP frequency of parent_directory in enterprise baseline
          ALERT if frequency is in bottom 5th percentile
  - question: Does the executable path specified in a modified plist have features (e.g., is hidden, in /tmp) that a machine learning model classifies as suspicious?
    context: This model-based approach formalizes the heuristics used in manual analysis. By training a classifier on features like directory depth, whether the path is hidden, or its location (user vs. system space), it can automatically score the suspicion level of any new executable path found in a plist, providing a more robust and scalable detection method.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification
          FEATURIZE executable_path (e.g., depth, is_hidden, is_in_tmp)
          APPLY pre-trained decision tree or random forest model
          ALERT if classification is 'suspicious'
  - question: Is a modified plist using a script interpreter (bash, python, etc.) with suspicious flags or arguments that suggest in-memory execution, obfuscation, or downloaders?
    context: Adversaries frequently use legitimate script interpreters to run malicious code passed directly on the command line via flags like `-c` or `-e` to avoid dropping a script file. They also often use `base64` to obfuscate the payload or `curl`/`wget` to download the next stage. Alerting on these patterns in `ProgramArguments` is a strong indicator of malicious activity.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
    range: last 90 days
    queries:
      - query: |-
          SEARCH plist modifications
          WHERE 'ProgramArguments' contains (python, bash, osascript, etc.)
          AND 'ProgramArguments' contains ('-c', '-e', 'base64', 'curl', 'wget')
          ALERT on match
  - question: Do the script arguments in a modified plist exhibit unusually high Shannon entropy, suggesting obfuscation or encryption?
    context: High Shannon entropy is a mathematical indicator of randomness, characteristic of encrypted or compressed data. Adversaries often encrypt or heavily obfuscate their script payloads to evade signature-based detection. Calculating the entropy of script arguments and comparing it to a baseline of normal administrative scripts can effectively flag these hidden payloads.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification with script interpreter
          EXTRACT script_content from 'ProgramArguments'
          CALCULATE Shannon entropy of script_content
          ALERT if entropy > 95th percentile of baseline
  - question: Do the script arguments in a modified plist fall into an anomalous cluster when grouped with all other scripts in the environment?
    context: This unsupervised machine learning technique groups similar items. Legitimate, common scripts will form large, dense clusters based on their features (length, entropy, etc.). Malicious or rare scripts will not fit into these clusters and will be identified as outliers or small, separate clusters, making them prime candidates for investigation.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification with script interpreter
          FEATURIZE script arguments (length, entropy, char_freq)
          APPLY DBSCAN clustering algorithm
          ALERT on points classified as noise or in small, sparse clusters
  - question: Is a process launched by a recently modified plist making network connections to known-malicious IPs or domains?
    context: This is a high-fidelity detection that connects persistence or evasion with C2 communication. By linking a process launched by `launchd` (PID 1) to a recent plist modification (e.g., in the last hour) and then checking its network destinations against a threat intelligence feed, analysts can quickly confirm a malicious C2 channel.
    answer_sources:
      - macOS EDR Process Creation Events
      - macOS EDR File Modification Events
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, and all managed macOS endpoints.
    range: last 90 days
    queries:
      - query: |-
          SEARCH process events WHERE parent_pid IS 1
          CORRELATE with plist modifications in the last hour
          FOR each correlated process, get network connection events
          CHECK destination_ip/domain against threat intel feed
          ALERT on match
  - question: Is a process launched by a recently modified plist connecting to a domain that is statistically rare for the enterprise?
    context: Many C2 domains are newly registered or used by only a few victims, making them statistically rare in a large enterprise's DNS traffic. By identifying processes spawned from new plists that connect to these unpopular domains, analysts can uncover potential C2 channels without relying on a pre-existing threat intelligence feed.
    answer_sources:
      - macOS EDR Process Creation Events
      - macOS EDR File Modification Events
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, and all managed macOS endpoints.
    range: last 90 days
    queries:
      - query: |-
          SEARCH process events from `launchd` tied to recent plist modification
          EXTRACT destination domains from associated network logs
          CALCULATE domain popularity (PSL+1) from enterprise-wide DNS logs
          ALERT if domain is in bottom 1% of popularity
  - question: Is there a statistically significant and anomalous spike in the number of new processes being launched by `launchd`?
    context: A widespread malware campaign might cause many endpoints to install a malicious plist at once, leading to a sudden, enterprise-wide spike in processes spawned by `launchd`. A time-series model can learn the normal rhythm of these events and automatically flag anomalous bursts that could indicate a mass persistence event.
    answer_sources:
      - macOS EDR Process Creation Events
      - macOS EDR File Modification Events
      - All managed macOS endpoints.
    range: last 90 days
    queries:
      - query: |-
          AGGREGATE count of `launchd`-spawned processes over time (e.g., per hour)
          APPLY time-series forecasting model (e.g., ARIMA)
          ALERT if observed count exceeds the forecasted upper confidence interval
  - question: Is a plist in a persistence directory being modified by an unauthorized or unexpected process, such as a browser or document reader?
    context: Persistence plists should only be created or modified by a small, predictable set of processes, like system installers and software updaters. When a user-space application like Chrome, Word, or Preview writes to a LaunchAgent or LaunchDaemon directory, it is a very strong signal of compromise, often indicating that a malicious document or download is attempting to install persistence.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
    range: last 90 days
    queries:
      - query: |-
          SEARCH file write events
          WHERE file_path IN (launch_agent_dirs, launch_daemon_dirs)
          ALERT if writing_process_name NOT IN (installer, softwareupdated, admin_tools_allowlist)
  - question: Is a persistence plist being modified by a process that has rarely or never been seen performing this action before?
    context: This is a statistical alternative to a static allowlist. By tracking how often each process modifies persistence plists, the system can learn what is normal. A process that has never performed this action in the last 90 days suddenly doing so is anomalous and suspicious, even if that process itself is legitimate. This can catch legitimate but compromised processes being used to install persistence.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification in persistence directory
          LOOKUP historical frequency of the modifying process name
          ALERT if process has not been seen modifying persistence plists in the last 90 days
  - question: Does a new plist modification event, based on its features, fall outside the boundary of what a machine learning model considers 'normal'?
    context: A One-Class SVM is an anomaly detection algorithm that learns a boundary around 'normal' data. In this case, it is trained only on legitimate plist modification events (process name, user, etc.). Any new event that falls outside this learned boundary is flagged as an anomaly. This is powerful for detecting novel attack techniques that don't resemble any previously seen behavior.
    answer_sources:
      - macOS EDR File Modification Events
      - macOS EDR Process Creation Events
      - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
    range: last 90 days
    queries:
      - query: |-
          ON plist modification in persistence directory
          FEATURIZE event (process_name, cmdline, user_context)
          APPLY pre-trained One-Class SVM model
          ALERT if event is classified as an outlier
  - question: Is a process launched by a recently modified plist exhibiting beaconing behavior (i.e., making network connections with a regular, repeating interval)?
    context: Command and control malware often 'beacons' or 'checks in' with its C2 server on a fixed schedule (e.g., every 5 minutes). Detecting this periodicity in network traffic is a classic C2 detection method. Correlating this beaconing behavior back to a process spawned from a recently modified plist provides strong evidence of a malicious persistence mechanism.
    answer_sources:
      - macOS EDR Process Creation Events
      - macOS EDR File Modification Events
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, and all managed macOS endpoints.
    range: last 90 days
    queries:
      - query: |-
          FOR each process spawned from a recently modified plist
          ANALYZE timestamps of its outbound network connections to a single destination
          CALCULATE a statistical measure of periodicity (e.g., standard deviation of time deltas)
          ALERT if periodicity is highly regular
  - question: Is a process launched by a recently modified plist sending or receiving an anomalous amount of data, potentially indicating C2 activity or exfiltration?
    context: After establishing a C2 channel, an adversary might send commands (small data volume) or exfiltrate data (large data volume). A time-series model can learn the normal 'heartbeat' of data flow for a given connection. A sudden, unexpected spike in data volume can indicate that the C2 channel has become active, for example, transitioning from simple check-ins to a large data-theft operation.
    answer_sources:
      - macOS EDR Process Creation Events
      - macOS EDR File Modification Events
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS servers, and all managed macOS endpoints.
    range: last 90 days
    queries:
      - query: |-
          FOR each network flow from a `launchd`-spawned process
          AGGREGATE data volume per hour
          APPLY time-series forecast model
          ALERT if observed volume significantly deviates from forecast