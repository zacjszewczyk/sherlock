name: T1647: Plist File Modification
id: 6c8b9b8a-3e1f-4f7f-8d9b-9e4a0b2c1d3e
description: This playbook helps investigate whether an adversary is evading defenses or establishing persistence by modifying property list (plist) files. Adversaries may alter an application's Info.plist to hide its execution by setting the LSUIElement key, preventing it from appearing in the Dock. They may also create or modify plists in persistence locations like LaunchAgents or LaunchDaemons, configuring them to run malicious code. Detection strategies involve identifying modifications that add suspicious keys, point to executables in non-standard locations, contain known IOCs, use obfuscated scripts, or lead to anomalous network behavior from processes spawned by launchd.
type: technique
related:
- TA0005: Defense Evasion
- TA0003: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an Info.plist file been modified to add or change the LSUIElement key to '1' or 'true'?
  context: This question seeks to identify a specific defense evasion technique where an adversary hides an application from the user interface (Dock, menu bar). A rule-based alert can detect this modification, and correlating it with the modifying process helps distinguish between legitimate software installation and malicious activity.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_modification_events
      WHERE file_path ENDS_WITH 'Info.plist' AND file_content CONTAINS 'LSUIElement' AND ('1' OR 'true')
      CORRELATE with parent_process
      ALERT if parent_process is not a known software installer or developer tool
- question: Has the LSUIElement key been enabled for an application not on the established baseline of legitimate background agents?
  context: This question focuses on anomaly detection. By maintaining a baseline of applications that are known to legitimately run as background agents, analysts can quickly identify when an application is newly configured to do so, which may indicate a compromise.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_modification_events
      WHERE file_path ENDS_WITH 'Info.plist' AND file_content CONTAINS 'LSUIElement' AND ('1' OR 'true')
      EXTRACT application_bundle_id from file_path
      ALERT if application_bundle_id is not in baseline_of_LSUIElement_apps
- question: Did a machine learning model flag the process that modified an Info.plist file as suspicious?
  context: This question leverages machine learning to identify malicious modifications. A model trained on the features of legitimate installer and updater processes (e.g., process name, parent process, user context) can flag modifications made by processes that deviate from this normal behavior, providing a more dynamic detection capability.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each file_modification to 'Info.plist':
        EXTRACT features from modifying_process (name, parent, cmdline, user)
        SCORE features with pre-trained_classifier
        ALERT if score > suspicious_threshold
- question: Have any recently modified plist files in persistence locations been found to contain known-bad IOCs?
  context: This question aims to detect persistence by scanning the content of modified plist files in critical directories for indicators of compromise (IOCs) from threat intelligence feeds. A match for a known-bad domain, IP address, or file path is a high-fidelity indicator of malicious activity.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_modification_events
      WHERE file_path IN ('~/Library/LaunchAgents/*.plist', '/Library/LaunchAgents/*.plist', '/Library/LaunchDaemons/*.plist')
      SCAN file_content for known_iocs (domains, IPs, paths)
      ALERT on match
- question: Do the arguments in a recently modified plist file contain statistically rare n-grams compared to a baseline of legitimate plists?
  context: This question uses statistical analysis to find anomalous plist configurations. By tokenizing the `ProgramArguments` in a plist and comparing the frequency of these tokens (n-grams) against a historical baseline, it is possible to identify unusual or unique argument patterns that may indicate malicious commands.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each modified plist in persistence locations:
        TOKENIZE 'ProgramArguments' into n-grams
        CALCULATE rarity of n-grams against enterprise baseline
        ALERT if rarity < threshold (e.g., 1st percentile)
- question: Has a text classification model flagged the content of a modified plist as likely malicious?
  context: This question applies natural language processing to detect malicious intent within plist files. A pre-trained model can analyze string values (like `ProgramArguments`) and classify them based on patterns learned from known malicious and benign samples, providing a sophisticated method for identifying novel threats.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each modified plist:
        EXTRACT string values (e.g., 'ProgramArguments', 'Label')
        CLASSIFY content with pre-trained_text_model
        ALERT if malicious_confidence > threshold (e.g., 0.85)
- question: Does a modified plist file specify an executable located in a non-standard or suspicious directory?
  context: This question looks for executables being run from unusual locations. Adversaries often place their payloads in temporary, shared, or hidden directories. An alert on a plist's `Program` or `ProgramArguments` key pointing to such a directory is a strong indicator of malicious persistence.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      WATCHLIST_DIRS = ['/tmp/', '/Users/Shared/', '~/Downloads/', '~/.*']
      SEARCH file_modification_events for plists
      EXTRACT executable_path from 'Program' or 'ProgramArguments'
      ALERT if executable_path is in WATCHLIST_DIRS
- question: Is a modified plist configured to run an executable from a directory that is statistically rare across the enterprise?
  context: This question uses environmental baselining to spot anomalies. By building a profile of common executable locations specified in plists across all endpoints, it becomes possible to flag a new plist that points to an executable in a parent directory that is rarely, if ever, used, suggesting it may be part of an attack.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified plist:
        EXTRACT parent_directory of executable_path
        CALCULATE frequency of parent_directory against enterprise-wide baseline
        ALERT if frequency is in bottom 5th percentile
- question: Has a machine learning model classified an executable path from a modified plist as suspicious?
  context: This question employs a classifier to automatically vet executable paths found in plists. By training a model on features of the path (e.g., directory depth, whether it's hidden, location in user space), the system can learn to distinguish between benign and suspicious locations and alert on the latter.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified plist:
        EXTRACT features from executable_path (depth, is_hidden, is_in_tmp)
        CLASSIFY path with pre-trained_decision_tree
        ALERT if classification is 'suspicious'
- question: Does a modified plist use a script interpreter with suspicious flags or arguments indicative of obfuscation?
  context: This question targets the use of one-liners and in-memory execution via scripting interpreters. Adversaries often use interpreters like bash or python with flags such as '-c' or '-e' to run obfuscated code (e.g., base64 encoded) directly from the plist's arguments, bypassing file-based detection.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_modification_events for plists
      WHERE 'ProgramArguments' contains a script interpreter AND (flags like '-c', '-e' OR patterns like 'base64')
      ALERT on match
- question: Does the script content within a modified plist's arguments exhibit abnormally high Shannon entropy?
  context: This question aims to detect obfuscated or encrypted script content. Legitimate scripts typically have a predictable level of entropy, while compressed or encrypted payloads are much more random. A high entropy score for script arguments in a plist is a strong signal of obfuscation.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each modified plist executing a script:
        CALCULATE Shannon entropy of script arguments
        COMPARE entropy to baseline of legitimate scripts
        ALERT if entropy > 95th percentile of baseline
- question: Do the script arguments in a modified plist fall into an anomalous cluster when analyzed with other scripts?
  context: This question uses unsupervised machine learning to find outliers. By converting script arguments into feature vectors and applying a clustering algorithm like DBSCAN, benign scripts will form a large, dense cluster. Malicious, obfuscated, or otherwise anomalous scripts will appear as small, separate clusters or noise points, making them easy to identify for investigation.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR all plist script arguments:
        CREATE feature vectors (length, entropy, char_frequency)
        APPLY DBSCAN clustering algorithm
        INVESTIGATE small or sparse clusters as anomalies
- question: Has a process launched by launchd from a recently modified plist connected to a known C2 server?
  context: This question links persistence to network C2 activity. By correlating process events from `launchd` (the parent of all plist-launched services) with network logs, we can check if a process spawned from a newly modified plist is communicating with a destination on a threat intelligence feed.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_events WHERE parent_pid is 1 AND process corresponds to a plist modified < 1 hour ago
      CORRELATE with network_connection_logs
      CHECK destination_ip against threat_intel_feed
      ALERT on match
- question: Has a process launched by launchd from a recently modified plist connected to a statistically rare domain?
  context: This question helps find C2 activity by identifying connections to unpopular domains. Adversaries often use newly registered or obscure domains for C2. By tracking domain popularity across the enterprise, a connection from a `launchd`-spawned process to a domain in the bottom percentile of usage is highly suspicious.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_events WHERE parent_pid is 1 AND process corresponds to a plist modified recently
      CORRELATE with dns_query_logs
      CALCULATE rarity of queried_domain (PSL+1)
      ALERT if domain rarity is in bottom 1%
- question: Has the volume of new processes launched by launchd exceeded a forecasted baseline?
  context: This question uses time-series analysis to detect a sudden increase in persistence activity. A significant spike in the number of processes spawned by `launchd` above a statistically forecasted level could indicate an adversary deploying persistence across multiple files at once.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process_volume from launchd over time
      FORECAST expected volume with confidence interval
      ALERT if observed_volume > upper_confidence_bound
- question: Do any newly created or modified persistence plists contain known-bad IOCs from threat intelligence?
  context: This question provides a high-fidelity check for known threats. By scanning the contents of .plist files in persistence directories (`LaunchAgents`, `LaunchDaemons`) for known malicious indicators (domains, IPs, file paths), analysts can quickly identify infections from known malware families or campaigns.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and other auto-run locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_events for new/modified plists in persistence directories
      SCAN file_content for IOCs from threat_intel_feed
      ALERT on match
- question: Do the program arguments in a new persistence plist contain statistically rare n-grams?
  context: This question seeks to identify novel or unusual persistence commands. By comparing the n-grams of `ProgramArguments` from a new plist against a historical baseline of legitimate persistence plists, analysts can flag configurations with rare components that may be part of a malicious command.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and other auto-run locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified persistence plist:
        TOKENIZE 'ProgramArguments' into n-grams
        CALCULATE rarity of n-grams against historical baseline
        ALERT if rarity is below a defined threshold
- question: Has a text classification model scored a new or modified persistence plist as likely malicious?
  context: This question uses machine learning to proactively identify malicious persistence attempts. A model trained on the text content of known-good and known-bad plists can score new entries for their likelihood of being malicious, catching novel threats that may not have known IOCs.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and other auto-run locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified persistence plist:
        SCORE string content with pre-trained_text_model
        ALERT if malicious_score > threshold
- question: Does a modified persistence plist point to an executable in a non-standard directory like /tmp/ or /Users/Shared/?
  context: This question checks for a common adversary tactic of placing malicious binaries in unexpected locations. Legitimate persistent services rarely run from temporary or user-writable shared directories. A rule that alerts on plists pointing to executables in these locations is an effective way to detect this behavior.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      WATCHLIST_DIRS = ['/tmp/', '/Users/Shared/', '~/Downloads/']
      SEARCH modified persistence plists
      EXTRACT executable_path from 'ProgramArguments'
      ALERT if executable_path is in WATCHLIST_DIRS
- question: Does a persistence plist specify an executable from a parent directory that is statistically rare across the enterprise?
  context: This question uses enterprise-wide environmental baselining to find anomalous persistence. By determining which directories commonly house executables for persistent services, analysts can flag any new plist that uses a parent directory in the bottom percentile of frequency, indicating a potentially unauthorized or malicious installation.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified persistence plist:
        EXTRACT parent_directory of executable
        CALCULATE frequency of parent_directory against enterprise baseline
        ALERT if frequency is in bottom 5th percentile
- question: Has a machine learning model classified an executable path from a persistence plist as suspicious?
  context: This question automates the vetting of executable paths in persistence plists. A decision tree or similar model can be trained on path features (e.g., is it hidden, depth, location) to learn what benign paths look like, allowing it to automatically flag new, suspicious paths for investigation.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new/modified persistence plist:
        EXTRACT features from executable_path
        CLASSIFY path with pre-trained_model
        ALERT if classification is 'suspicious'
- question: Does a persistence plist use a script interpreter with suspicious flags or arguments containing patterns like 'base64', 'curl', or 'wget'?
  context: This question targets fileless persistence techniques. Adversaries often use `ProgramArguments` in plists to directly execute scripts via interpreters like `bash` or `python`. Looking for suspicious flags (`-c`, `-e`) or commands associated with downloading and executing payloads (`curl`, `wget`, `base64`) can reveal this activity.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH modified persistence plists
      WHERE 'ProgramArguments' contains a script interpreter AND (flags like '-c', '-e' OR commands like 'curl', 'wget', 'base64')
      ALERT on match
- question: Does a script argument in a persistence plist have an unusually high Shannon entropy score?
  context: This question helps detect obfuscated or encrypted scripts used for persistence. By calculating the entropy of script content passed as an argument and comparing it to a baseline of legitimate administrative scripts, analysts can flag those with abnormally high entropy, which often indicates an attempt to hide malicious code.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each persistence plist executing a script:
        CALCULATE Shannon entropy of script arguments
        COMPARE entropy to baseline of admin scripts
        ALERT if entropy > 95th percentile of baseline
- question: Do the script arguments in a persistence plist fall into an anomalous cluster separate from benign administrative scripts?
  context: This question uses unsupervised machine learning to find outliers among persistence scripts. By clustering feature vectors of script arguments, benign and common admin scripts will form a large group. Malicious scripts, due to their unique or obfuscated nature, will form small, distinct clusters that can be flagged for investigation.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR all persistence plist script arguments:
        CREATE feature vectors (length, entropy, etc.)
        APPLY DBSCAN clustering
        INVESTIGATE small, sparse, or outlier clusters
- question: Has a persistence plist been modified by a process not on the allowlist of legitimate installers or admin tools?
  context: This question aims to find unauthorized modifications to persistence. By maintaining an allowlist of processes that are expected to modify plists in `LaunchAgents` or `LaunchDaemons` (e.g., `installer`), any modification by a process not on that list (especially a user application like a browser or document reader) is highly suspicious.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ALLOWLIST = ['installer', 'softwareupdated', ...]
      SEARCH file_write_events in persistence directories
      IF modifying_process is not in ALLOWLIST:
        ALERT with high severity
- question: Has a persistence plist been modified by a process that has rarely or never done so before?
  context: This question uses historical frequency analysis to detect anomalous behavior. By tracking how often each process name modifies persistence plists, it's possible to establish a baseline. A modification by a process that is new or has not been seen performing this action in a long time is an anomaly worth investigating.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each persistence plist modification:
        GET modifying_process_name
        CHECK historical frequency of this process modifying plists
        ALERT if process is rare or has not been seen in last 90 days
- question: Has a one-class SVM model identified a persistence plist modification event as an outlier?
  context: This question uses machine learning to find anomalous modification events. A one-class SVM can be trained on the features of legitimate modification events (e.g., process name, user context). The trained model can then identify any new event that does not conform to the learned normal behavior, flagging it as a potential threat.
  answer_sources:
  - macOS EDR File Modification Events
  - macOS EDR Process Creation Events
  - All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN one-class SVM on features of legitimate plist modification events
      FOR each new plist modification event:
        SCORE event with trained model
        ALERT if event is classified as an outlier
- question: Has a process launched by launchd from a recently modified persistence plist connected to a known C2 server?
  context: This question directly links a new persistence mechanism to known command-and-control infrastructure. By correlating a `launchd`-spawned process with its originating plist and subsequent network connections, a connection to an IP or domain on a threat intelligence feed provides a high-confidence alert.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_events where parent is 'launchd' and process maps to plist modified < 1 hour ago
      CORRELATE with network logs
      CHECK destination against C2 threat intel feed
      ALERT on match
- question: Is a process launched from a new persistence plist exhibiting beaconing behavior to a rare or low-reputation domain?
  context: This question seeks to identify C2 communications through their characteristic regularity. By analyzing the network connections of a process spawned from a new persistence plist, analysts can look for connections to the same destination at regular intervals (beaconing), which is a strong indicator of a C2 channel, especially if the destination is rare or has a poor reputation.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR processes from new persistence plists:
        ANALYZE network connection logs for connections to the same destination
        CALCULATE time intervals between connections
        ALERT if intervals are regular (beaconing) AND destination is rare/low-reputation
- question: Has the data volume from a launchd-spawned process significantly deviated from its forecasted baseline?
  context: This question uses time-series analysis on network traffic volume to detect anomalies like data exfiltration. After establishing a baseline traffic pattern for a persistent process, a sudden, significant increase in outbound data volume can indicate that the process is being used to exfiltrate data from the compromised system.
  answer_sources:
  - macOS EDR Process Creation Events
  - macOS EDR File Modification Events
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS servers, and all managed macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each destination IP associated with a launchd-spawned process:
        MODEL hourly data volume with time-series analysis
        FORECAST expected volume with confidence intervals
        ALERT if observed volume > upper confidence bound