name: T1552: Unsecured Credentials
id: d8c9a0b1-e2f3-4d56-a7b8-c9d0e1f2a3b4
description: This playbook helps investigate whether an adversary is searching for or accessing unsecured credentials on the network. It covers scenarios such as processes searching for credential-related keywords and then exfiltrating data to known malicious or rare destinations, the use of common search utilities to find sensitive terms in files or the registry, rapid access to a large number of configuration or key files, and unusual process chains where applications like web servers or document editors spawn shells to execute search commands.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process with credential-searching patterns in its command line made a subsequent network connection to a destination on a threat intelligence list?
    context: This question aims to detect a common attack pattern where an adversary first searches for credentials on a compromised host and then immediately attempts to exfiltrate them or communicate with a command-and-control server. Correlating process execution with subsequent network traffic to known malicious infrastructure within a short time window (e.g., 10 minutes) provides a high-fidelity signal of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - User Workstations
      - Application Servers
      - Network Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - "search process_creation_logs where command_line contains ('password', 'secret', 'api_key') | join by hostname with network_logs where time_difference < 10 minutes | where destination_ip in threat_intel_feed"
  - question: Following credential-searching activity on a host, were there any statistically rare outbound network connections made from that same host?
    context: After finding credentials, an adversary may exfiltrate data to a destination not on a standard threat intelligence list. This question helps identify such exfiltration by baselining normal network behavior for a host and flagging connections to destinations (based on ASN, country, port) that are statistically rare for that specific host, suggesting an anomalous and potentially malicious connection.
    answer_sources:
      - Zeek conn.log
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - "search process_creation_logs where command_line contains credential_patterns | for each result, search network_logs from same host in next 24 hours | calculate rarity of destination_asn, destination_country, destination_port based on 30-day baseline | alert if rarity_score > 99th_percentile"
  - question: Did a host exhibit an anomalous spike in outbound data volume immediately following credential-searching activity?
    context: Credential harvesting is often followed by the exfiltration of a large volume of data. This question uses time-series analysis to detect anomalous spikes in outbound traffic volume from a host shortly after it has been observed running credential-searching commands. A significant deviation from the host's normal traffic patterns can indicate a data exfiltration event.
    answer_sources:
      - Zeek conn.log
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - "search process_creation_logs where command_line contains credential_patterns | for each result, analyze time_series of outbound_bytes from same host | alert if outbound_bytes > anomaly_detection_model_prediction"
  - question: Has a common search utility (e.g., findstr, grep, reg query) been executed with command-line arguments containing keywords or paths related to credentials?
    context: Adversaries often use built-in system utilities to live off the land and search for sensitive information. This question directly targets this behavior by looking for the execution of tools like findstr, grep, or reg query with arguments that explicitly search for terms like 'password', 'api_key', or paths to known credential stores (e.g., PuTTY session registry keys).
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "search process_creation_logs where process_name in ('findstr.exe', 'grep.exe', 'Select-String', 'reg.exe') and command_line contains ('password', 'secret', 'api_key', 'id_rsa', 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions')"
  - question: Have any search utilities been executed with an unusually high command-line entropy, suggesting obfuscation?
    context: To evade simple keyword-based detections, attackers may obfuscate their search queries. High Shannon entropy in a command line can indicate the presence of encoded or randomized strings, which is atypical for normal, interactive use of search utilities. This question helps detect potentially obfuscated or complex, scripted search patterns that deviate from a baseline of normal command-line complexity.
    answer_sources:
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "search process_creation_logs | for each event, calculate shannon_entropy of command_line | compare to baseline_entropy for that process_name | alert if entropy > 98th_percentile"
  - question: Has a machine learning model classified any process command lines as having a high probability of being malicious credential-searching activity?
    context: This question leverages a more advanced, model-based approach to detection. By training a classification model on various features of a command line (length, character types, n-grams, keywords), it can learn to distinguish between benign and malicious search commands with greater nuance than simple regex rules, potentially identifying novel or complex attack patterns.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "stream process_creation_logs to ML_model | extract_features(command_line, parent_process) | score event | alert if score > 0.9"
  - question: Has a single process accessed an abnormally high number of sensitive file types (e.g., .config, .xml, .key) in a short period of time?
    context: Automated credential harvesting scripts often rapidly iterate through the filesystem, opening many files in search of sensitive data. This question establishes a 'tripwire' to detect such behavior by counting the number of unique, high-value file types accessed by a single process within a minute. Exceeding a set threshold (e.g., 50 files) is a strong indicator of a credential harvesting script in action.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories (e.g., C:\Users\*)
      - Source Code Repositories
      - Application configuration directories (e.g., C:\ProgramData\, /etc/)
    range: last 90 days
    queries:
      - "search file_access_logs where file_extension in ('.config', '.xml', '.yml', '.ini', '.pem', '.key', '.bak') | group by process_id over 60_second_window | alert if distinct_file_count > 50"
  - question: Has any process exhibited a statistically significant deviation from its normal file access behavior?
    context: While a fixed threshold is useful, some processes may legitimately access many files. This question provides a more tailored detection by first establishing a baseline of normal file access activity for each process on each host. An alert is then triggered only when a process's activity significantly deviates from its own established norm (e.g., Z-score > 3), reducing false positives and highlighting truly anomalous behavior.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories (e.g., C:\Users\*)
      - Source Code Repositories
      - Application configuration directories (e.g., C:\ProgramData\, /etc/)
    range: last 90 days
    queries:
      - "search file_access_logs | calculate rolling_average and std_dev of unique_file_access_count per_minute for each host, process_name | alert if current_count > (mean + 3*std_dev)"
  - question: Have there been any file access events that are considered anomalous outliers by an unsupervised clustering model?
    context: This question uses unsupervised machine learning to find novel or unusual file access patterns without pre-defined rules. By clustering 'normal' events together based on features like process name, file path, and extension, the model can identify outliers that don't fit any established pattern. These outliers could represent a new or stealthy technique for searching for credentials.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories (e.g., C:\Users\*)
      - Source Code Repositories
      - Application configuration directories (e.g., C:\ProgramData\, /etc/)
    range: last 90 days
    queries:
      - "stream file_access_logs into clustering_model (DBSCAN) | featurize(process_name, file_path, file_extension) | alert on events classified as noise/outliers"
  - question: Following a burst of file access activity on a host, was a file with a credential-related name transferred from that same host over the network?
    context: This question directly links the two phases of a smash-and-grab attack; credential harvesting and exfiltration. It correlates a high-volume file access event (the harvesting) with a subsequent network file transfer of a file whose name suggests it contains credentials (e.g., creds.zip, passwords.txt). This chained detection provides strong evidence of a successful credential theft and exfiltration event.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Zeek conn.log
      - Zeek files.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "search for high_volume_file_access_alerts | for each alert, search network_file_transfer_logs from same host within 15 minutes | alert if filename matches regex '(creds|pass|secret).*(zip|txt|7z)'"
  - question: After a host exhibited high-volume file access, did it make a network connection to a statistically rare destination ASN or country?
    context: An attacker might exfiltrate data to a newly registered domain or a server in a country the organization rarely communicates with. By baselining normal destinations, this query can flag anomalous connections that occur after file harvesting as potential exfiltration channels.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "search for high_volume_file_access_alerts | for each alert, analyze subsequent network_logs from same host | calculate rarity of destination_asn and destination_country based on historical data | alert if rarity > 99th_percentile"
  - question: Following credential searching activity, did an anomaly detection model flag any subsequent outbound network connections as non-standard?
    context: This question employs an anomaly detection model focused on the characteristics of the network connection itself (e.g., duration, bytes transferred, protocol), rather than just the destination. This can detect exfiltration tactics that try to blend in by using common ports (like 443) but exhibit unusual behavior, such as a long-lived connection with a high, steady data transfer rate, which is characteristic of bulk data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "search for credential_search_alerts | for each alert, stream subsequent network_logs from same host to anomaly_model (Isolation Forest) | featurize(duration, bytes_out, protocol, port) | alert on connections flagged as anomalous"
  - question: Has a common document, web, or mail application spawned a shell which then executed a search utility?
    context: Legitimate applications like Microsoft Word, IIS web servers, or Outlook should not typically spawn a command shell to run search tools. This process execution chain is highly suspicious and often indicates that an adversary has exploited a vulnerability or a malicious macro in the parent application to gain code execution and is now searching for credentials on the system.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "search process_creation_logs | reconstruct process_tree using parent_process_id | alert if ancestor_process in ('winword.exe', 'w3wp.exe', 'outlook.exe') and descendant_process is a shell and child_of_shell is a search_utility"
  - question: Have any statistically rare or never-before-seen parent-child process relationships involving a shell been observed?
    context: This question aims to detect novel execution patterns by baselining all parent-child process relationships across the enterprise. A process pair that is extremely rare or has never been seen before (e.g., Acrobat.exe spawning powershell.exe) is a strong anomaly signal. This data-driven approach can uncover unexpected or new attack vectors without needing to pre-define every possible suspicious parent process.
    answer_sources:
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "search process_creation_logs | build frequency_table of parent_child_pairs over 30 days | alert on new pairs where child_process is a shell and frequency < 10 (or is new)"
  - question: Has a graph-based anomaly detection model identified any highly anomalous process execution trees?
    context: Process execution is inherently a graph or tree structure. This question describes an advanced technique that uses a Graph Neural Network (GNN) to learn the complex structural patterns of normal process execution trees. By comparing new process trees to this learned baseline, the model can identify subtle but significant structural anomalies that might be missed by simple parent-child pair analysis, providing a powerful way to detect sophisticated execution chains.
    answer_sources:
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "stream process_creation_logs to graph_model (GNN) | construct process_tree | calculate anomaly_score based on deviation from learned patterns | alert if score is high"