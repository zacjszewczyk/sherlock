name: T1552: Unsecured Credentials
id: 5a8e21c2-7a6e-4b9f-8d2a-9c7f3b1e4d0f
description: This playbook focuses on detecting adversaries searching for or accessing unsecured credentials on a network. It identifies this activity through several indicators, including the use of credential-searching processes followed by network connections to known malicious IPs, the execution of common search utilities (e.g., findstr, grep) with sensitive keywords, a single process accessing a high volume of configuration or key files in a short time, data transfers to rare destinations following high-volume file access, and unusual process execution chains where a document handler or web service spawns a shell to run a search utility. The primary goal is to answer the question: Is the adversary searching for or accessing unsecured credentials on the network?
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a host making network connections to known malicious destinations shortly after running a process with command-line arguments indicative of credential searching?
    context: This question aims to link the act of searching for credentials (e.g., using keywords like 'password' or 'api_key' in a command) directly to potential exfiltration or C2 communication. An adversary, after finding credentials, might immediately try to use them or send them to an external server. Correlating these two events within a short time window (10 minutes) on the same host provides a high-fidelity signal of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - User Workstations
      - Application Servers
      - Network Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - "Pseudocode: JOIN process_logs ON hostname WITH network_logs ON hostname WHERE time_diff(network_log.timestamp, process_log.timestamp) BETWEEN 0 AND 10_minutes AND process_log.command_line MATCHES ('password', 'secret', 'api_key') AND network_log.destination_ip IN threat_intelligence_feed"
  - question: Following a credential-searching event on a host, is it making outbound connections to statistically rare destinations?
    context: Adversaries may use non-standard or newly established domains for data exfiltration to evade threat intelligence feeds. This question identifies suspicious activity by focusing on behavioral anomalies. By calculating a rarity score for destination ASN, country, and port combinations, analysts can uncover connections that deviate from the host's normal communication patterns, suggesting a potential exfiltration channel that is not yet blacklisted.
    answer_sources:
      - Zeek conn.log
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - "Pseudocode: FOR each host with credential_search_event: GET subsequent_outbound_connections. FOR each connection: CALCULATE rarity_score(destination_asn, destination_country, destination_port) based on 30-day host history. ALERT if rarity_score > 99th_percentile."
  - question: After a credential-search event is detected, does the host exhibit an anomalous spike in outbound data volume?
    context: Exfiltrating found credentials or other sensitive data often results in a noticeable increase in outbound network traffic. This question uses a time-series model (like ARIMA or LSTM) to predict the expected data volume for a host. A significant deviation from this prediction after a credential search suggests that a large amount of data is being transferred, which could be an exfiltration event. This method is effective at catching bulk data transfers.
    answer_sources:
      - Zeek conn.log
      - User Workstations
      - Application Servers
      - Network Egress Points
    range: last 90 days
    queries:
      - "Pseudocode: ON credential_search_event for a host: FEED subsequent outbound traffic volume (sum of orig_bytes per minute) into pre-trained time-series model. ALERT if observed_volume > model_prediction_confidence_interval."
  - question: Is a user or process using a common search utility (like findstr, grep, or reg query) with keywords or paths related to sensitive credentials?
    context: Adversaries frequently use built-in system utilities to search for credentials stored in files, scripts, or the registry. This question directly targets this behavior by looking for the execution of search tools combined with specific keywords ('password', 'api_key') or paths to known credential stores (e.g., PuTTY session registry keys, SSH key files). Detecting this activity provides a strong indication of an active credential harvesting attempt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "Pseudocode: SEARCH process_creation_logs WHERE process_name IN ('findstr.exe', 'grep.exe', 'Select-String', 'reg.exe') AND command_line MATCHES ('password', 'secret', 'api_key', 'id_rsa', 'HKCU\\Software\\SimonTatham\\PuTTY\\Sessions')."
  - question: Are search utilities or scripting engines being executed with unusually complex or high-entropy command lines?
    context: To evade simple keyword-based detection, adversaries may obfuscate their search commands (e.g., using Base64 encoding or complex regular expressions). This obfuscation often increases the character randomness, or Shannon entropy, of the command line. This question seeks to identify such evasion attempts by flagging command lines with entropy values that are statistically anomalous compared to the historical baseline for that specific process, pointing to non-standard or malicious usage.
    answer_sources:
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "Pseudocode: FOR each process_creation_event: CALCULATE shannon_entropy(command_line). GET historical_entropy_baseline for process_name. ALERT if current_entropy > 98th_percentile of baseline."
  - question: Can we use a machine learning model to classify process command lines as malicious credential-searching activity in real-time?
    context: This question proposes a more advanced, proactive approach to detection. By training a classification model on a rich set of features (length, character distribution, keywords, parent process, etc.) from known benign and malicious command lines, we can create a system that scores new, unseen commands. This allows for the detection of novel or sophisticated credential-searching techniques that might bypass static rules or entropy analysis, providing a more resilient defense.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Developer Workstations
      - File Servers
      - CI/CD Pipeline Servers
      - System Administrator Workstations
    range: last 90 days
    queries:
      - "Pseudocode: FOR each new process_creation_event: EXTRACT features (length, char_freq, ngrams, keywords, parent_process). SCORE event with pre-trained classification_model. ALERT if score > 0.9."
  - question: Is a single process rapidly accessing an unusually high number of distinct files with extensions commonly used for configuration or credentials?
    context: Automated credential harvesting scripts often work by rapidly scanning the filesystem for files that might contain secrets. This question aims to detect this "smash and grab" behavior by setting a tripwire. An alert is triggered if a single process accesses more than 50 unique files with extensions like .config, .yml, .key, etc., within a one-minute window. This is a strong indicator of a script, not a user, searching for sensitive information.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories
      - Source Code Repositories
      - Application configuration directories
    range: last 90 days
    queries:
      - "Pseudocode: WITHIN a 60-second window, COUNT unique files accessed by a single ProcessID. ALERT if count > 50 AND file_extension IN ('.config', '.xml', '.yml', '.ini', '.pem', '.key', '.bak')."
  - question: Is a process on a given host accessing a number of unique files that is statistically anomalous compared to its own historical behavior?
    context: While a fixed threshold (like 50 files) is useful, a more tailored approach can reduce false positives. This question uses statistical analysis (Z-score) to identify deviations from a process's normal behavior. By establishing a baseline of file access patterns for each process on each host, we can flag any sudden, significant increase in activity (e.g., more than 3 standard deviations above the mean) as suspicious, even if it doesn't cross a high absolute threshold.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories
      - Source Code Repositories
      - Application configuration directories
    range: last 90 days
    queries:
      - "Pseudocode: FOR each process, per minute: COUNT unique file accesses. CALCULATE rolling average and standard deviation over 30 days. ALERT if current_count > (average + 3 * std_dev)."
  - question: Can we use unsupervised machine learning to identify anomalous file access patterns that don't match any known 'normal' behavior?
    context: This question leverages unsupervised learning (like DBSCAN) to discover novel or unusual file access behaviors without pre-defined rules. By clustering events based on features like process name, parent process, and file path, the algorithm learns what "normal" activity looks like (dense clusters). Any event that doesn't fit into these clusters is labeled as noise or an anomaly. This is powerful for detecting attacker techniques that are fundamentally different from everyday system and user activity.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Shared Network Drives
      - User Profile Directories
      - Source Code Repositories
      - Application configuration directories
    range: last 90 days
    queries:
      - "Pseudocode: IN a 5-minute window, VECTORIZE file access events (process_name, parent_process, file_path_depth, extension). APPLY DBSCAN clustering. ALERT on events labeled as noise/outliers."
  - question: Following a burst of file access activity on a host, is a file with a credential-related name being transferred off that host?
    context: This question directly links the two stages of a common attack chain; harvesting and exfiltration. An adversary first gathers credentials into a single file (often a .zip or .txt) and then transfers it. This rule correlates a high-volume file access event with a subsequent file transfer (from Zeek logs) where the filename contains keywords like 'creds', 'pass', or 'backup'. This two-part detection provides strong evidence of a successful credential theft.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Zeek conn.log
      - Zeek files.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "Pseudocode: ON high_volume_file_access_alert for a host: MONITOR Zeek file logs from same host for next 15 minutes. ALERT if filename MATCHES ('creds', 'pass', 'backup') AND extension IN ('zip', 'txt', '7z')."
  - question: After a host exhibits high-volume file access, does it initiate a network connection to a destination that is rare for that specific host?
    context: This focuses on behavioral anomaly detection but applies it specifically in the context of a potential preceding credential harvest. After a host is flagged for suspicious file access, its outbound connections are scrutinized. A connection to an ASN/country pair that the host has rarely or never communicated with before is highly suspicious and could represent an exfiltration channel set up by the attacker.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "Pseudocode: ON high_volume_file_access_alert for a host: ANALYZE subsequent outbound connections. CALCULATE rarity_score for destination ASN/country based on host history. ALERT if score > 99th_percentile."
  - question: Can we use an anomaly detection model to identify suspicious network connections following a credential-searching event?
    context: This question proposes using a machine learning model (One-Class SVM or Isolation Forest) trained exclusively on 'normal' network connection data for each host. After a credential search is detected, subsequent connections are scored by this model. Any connection that the model flags as an anomaly (i.e., it doesn't look like the normal traffic it was trained on) is a strong candidate for investigation. This can catch subtle exfiltration methods that might not involve large data volumes or rare destinations but differ in other characteristics like duration or protocol usage.
    answer_sources:
      - Zeek conn.log
      - Network Egress Points
      - DMZ Servers
      - Hosts with high-volume file access
      - Cloud Storage Gateways
    range: last 90 days
    queries:
      - "Pseudocode: ON credential_search_event for a host: SCORE subsequent outbound connections using pre-trained one-class model (features: duration, bytes, proto, port). ALERT on connections flagged as anomalies."
  - question: Is a common document or web application process spawning a shell, which in turn is running a search utility?
    context: This question targets a classic attack vector where an adversary gains initial execution through a vulnerability or macro in a document (Word, PDF) or web application (IIS, Apache). They then spawn a command shell (cmd.exe, powershell.exe) to run further commands. Detecting a process chain where a benign parent (like winword.exe or w3wp.exe) leads to a shell which then executes a search tool (findstr, reg.exe) is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "Pseudocode: SEARCH process logs for chains where ancestor_process IN ('winword.exe', 'w3wp.exe') -> child_process IN ('cmd.exe', 'powershell.exe') -> grandchild_process IN ('findstr.exe', 'reg.exe')."
  - question: Are we observing statistically rare or never-before-seen parent-child process relationships, especially those involving a shell or scripting engine?
    context: Most system and user activities generate predictable parent-child process relationships (e.g., explorer.exe launching chrome.exe). Adversaries often create novel or rare combinations. This question aims to detect these by baselining all parent-child pairs across the enterprise. Any new pair, or a pair that is extremely infrequent (e.g., seen less than 10 times), especially when the child is a powerful tool like PowerShell, is flagged as suspicious and worthy of investigation.
    answer_sources:
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "Pseudocode: LOOKUP each new parent-child process pair in a 30-day frequency table. ALERT if pair is new OR frequency < 10 AND child_process is a shell/scripting_engine."
  - question: Can we use a graph neural network to identify entire process execution trees that are structurally anomalous compared to normal behavior?
    context: This question proposes a holistic, state-of-the-art approach. Instead of looking at individual parent-child pairs, it models the entire process execution tree as a graph. A Graph Neural Network (GNN) is trained to understand the structure of 'normal' process trees. When a new process tree is generated, the model can determine if its overall structure deviates significantly from the learned norm. This can detect sophisticated attacks involving complex, multi-stage execution chains that might appear benign if each step is viewed in isolation.
    answer_sources:
      - Sysmon Event ID 1
      - Web Servers (IIS, Apache)
      - User Workstations with Microsoft Office
      - Mail Servers
      - SharePoint Servers
    range: last 90 days
    queries:
      - "Pseudocode: MODEL new process execution trees as graphs. EMBED graph into vector space using pre-trained GNN. CALCULATE anomaly score based on deviation from benign distribution. ALERT on high-scoring trees."