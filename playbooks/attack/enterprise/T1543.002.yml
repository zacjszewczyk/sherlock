name: T1543.002: Systemd Service
id: 5a8a1b2c-3d4e-4f5a-8b6c-9d0e1f2a3b4c
description: This playbook helps identify adversary activity related to maintaining persistence and escalating privileges using Systemd services on Linux systems. Adversaries may create or modify Systemd service files to execute malicious code when the system boots or when specific events occur. This can involve creating new `.service` files with malicious `ExecStart` commands, modifying existing services to run as root or point to attacker-controlled executables, or leveraging systemd generators and user-level timers. The playbook provides questions to detect these activities through methods like monitoring file creation in systemd directories, analyzing `ExecStart` commands for obfuscation or known IOCs, tracking anomalous network connections from services, and identifying service manipulations that fall outside of legitimate administrative workflows.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a new Systemd service been created with a command matching known Indicators of Compromise (IOCs)?
    context: Adversaries often create new `.service` files in systemd unit directories to establish persistence. This question helps detect this by monitoring for new service files and comparing the executable hash, path, or arguments in the `ExecStart` directive against a threat intelligence feed of known malicious indicators. A match provides a high-confidence signal of a compromise.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "SEARCH file_creation_events WHERE file_path IN ('/etc/systemd/system/', '/usr/lib/systemd/system/', '~/.config/systemd/user/') AND file_name ENDS_WITH '.service' | PARSE file_content to get ExecStart_command | HASH executable_from_command | LOOKUP hash, command_path, command_arguments against threat_intel_feed | ALERT on match"
  - question: Has a new Systemd service been created with an unusually complex or obfuscated command?
    context: To evade simple signature-based detection, adversaries may obfuscate or encode the commands in the `ExecStart` directive. This question aims to detect such techniques by calculating the Shannon entropy of the command string. A command with an entropy score significantly higher than the established baseline for the environment suggests it may be packed, encoded, or otherwise obfuscated.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "SEARCH new_service_files | PARSE ExecStart_command | CALCULATE shannon_entropy(ExecStart_command) | COMPARE entropy_score to pre-calculated_baseline_95th_percentile | ALERT if score > baseline"
  - question: Does a newly created Systemd service command appear malicious based on a machine learning model?
    context: This question uses a machine learning approach to move beyond simple signatures. By training a classification model on features like command length, character types, and specific keywords, it can learn to distinguish between benign and malicious service commands. This allows for the detection of novel or previously unseen malicious commands that might not match known IOCs.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "ON new_service_file_creation | EXTRACT features (length, char_ratios, keywords) from ExecStart_command | INPUT features into trained_classification_model | ALERT if model_output_score > suspicion_threshold"
  - question: Is a Systemd service file configured to execute a command containing obfuscation or in-memory execution techniques?
    context: Adversaries often use scripting interpreters like bash or python within an `ExecStart` directive to execute payloads. This question focuses on detecting common malicious patterns within these scripts, such as decoding base64 strings (`base64 -d | bash`) or fetching and executing remote code (`curl -s | bash`), which are strong indicators of fileless malware execution.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "SEARCH file_events ON '.service' files | PARSE ExecStart_command | REGEX_MATCH command for patterns like ('bash', 'python') AND ('base64', 'eval', '/dev/tcp/') | ALERT on match"
  - question: Does a Systemd service's command string have an abnormally high ratio of special characters?
    context: Obfuscated shell commands and payloads often rely heavily on non-alphanumeric characters (e.g., `|`, `&`, `$`, `{`, `}`). This question aims to detect this by calculating the ratio of special characters in the `ExecStart` command. A ratio significantly higher than the baseline established from known-good service files can indicate a complex, obfuscated, and likely malicious command.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "ON new_or_modified_service_file | PARSE ExecStart_command | CALCULATE non_alphanumeric_ratio(command) | COMPARE ratio to pre-calculated_baseline_98th_percentile | ALERT if ratio > baseline"
  - question: Does a Systemd service command have a structure that is anomalous compared to legitimate services?
    context: Legitimate service commands installed by package managers typically follow predictable structures. This question uses a sequence-based machine learning model (like an LSTM autoencoder) to learn these normal structures. When a new service command is introduced, the model attempts to reconstruct it. A high reconstruction error indicates the command's structure is novel and does not conform to the learned patterns, making it suspicious.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
    range: last 90 days
    queries:
      - "ON new_service_file_creation | TOKENIZE ExecStart_command into command_sequence | INPUT sequence into trained_LSTM_autoencoder | CALCULATE reconstruction_error | ALERT if error > anomaly_threshold"
  - question: Is a process started by systemd (PPID 1) making a network connection to a known malicious IP or domain?
    context: Malicious services often need to communicate with a Command and Control (C2) server. This question helps detect this by identifying processes spawned by systemd (PPID 1), correlating them with outbound network connections, and checking the destination IP/domain against a C2 threat intelligence feed. A match is a strong indicator of a compromised service communicating with an adversary.
    answer_sources:
      - auditd logs
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, Linux servers
    range: last 90 days
    queries:
      - "SEARCH auditd_logs for processes with PPID=1 | CORRELATE process_info with zeek_conn_logs by host_ip and timestamp | LOOKUP destination_ip and destination_domain in C2_threat_intel_feed | ALERT on match"
  - question: Is a process started by systemd (PPID 1) exhibiting network beaconing or connecting to a DGA domain?
    context: Adversary C2 communication is often automated, resulting in highly periodic network connections (beaconing) or connections to algorithmically generated domains (DGA). This question looks for these patterns by analyzing the time intervals between connections from a systemd-spawned process and calculating the entropy of queried domain names. Low time variance suggests beaconing, and high domain entropy suggests DGA.
    answer_sources:
      - auditd logs
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, Linux servers
    range: last 90 days
    queries:
      - "SEARCH zeek_conn_logs where source_process_ppid=1 | FOR each source-dest_pair, CALCULATE stdev of time_deltas_between_connections | ALERT if stdev < threshold | FOR associated DNS_queries, CALCULATE shannon_entropy of domain_name | ALERT if entropy > threshold"
  - question: Is a process started by systemd (PPID 1) exhibiting anomalous network connection behavior?
    context: Beyond specific patterns like beaconing, malicious services may exhibit network behavior that is generally anomalous compared to legitimate services. This question uses unsupervised machine learning (like Isolation Forest or DBSCAN) to model the normal network behavior of systemd-spawned processes based on features like connection duration, data volume, and protocol. Connections that are flagged as outliers by the model are considered suspicious.
    answer_sources:
      - auditd logs
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points, DNS resolvers, Linux servers
    range: last 90 days
    queries:
      - "FROM zeek_conn_logs where source_process_ppid=1, EXTRACT feature_vector (duration, bytes, proto, etc.) | INPUT feature_vector into trained_anomaly_detection_model (IsolationForest) | ALERT on connections flagged as outliers"
  - question: Has a Systemd service been enabled or started that was not installed by a trusted software source?
    context: Legitimate services are typically installed via package managers (yum, apt) or configuration management tools (Ansible, Puppet). Adversaries may place and enable a service file manually. This question detects such activity by checking if a service file that is being enabled or started can be attributed to a legitimate installation source by cross-referencing package manager and configuration management logs.
    answer_sources:
      - auditd logs
      - Package manager logs (e.g., dpkg.log, yum.log)
      - Configuration management logs
      - Linux servers and workstations, Configuration Management servers
    range: last 90 days
    queries:
      - "SEARCH auditd_logs for 'systemctl enable' or 'systemctl start' | EXTRACT target_service_file | CHECK if service_file exists in package_manager_logs OR config_management_logs | ALERT if not found"
  - question: Was a `systemctl enable` or `start` command executed by an unusual parent process?
    context: Typically, `systemctl` commands are run interactively by an administrator from a shell (`bash`) or programmatically by tools like `sshd` or `ansible`. If the parent process is something unexpected, like a web server (`httpd`) or a binary in `/tmp`, it could indicate that a compromised application is attempting to establish persistence. This question identifies these statistically rare and suspicious parent-child relationships.
    answer_sources:
      - auditd logs
      - Package manager logs (e.g., dpkg.log, yum.log)
      - Configuration management logs
      - Linux servers and workstations, Configuration Management servers
    range: last 90 days
    queries:
      - "SEARCH auditd_logs for 'systemctl enable' or 'systemctl start' | EXTRACT parent_process_name | LOOKUP parent_process_name in baseline_frequency_distribution | ALERT if frequency is in bottom 5th percentile"
  - question: Was a `systemctl` command executed at an anomalous time of day or day of the week?
    context: Administrative activities, including enabling services, often follow predictable schedules (e.g., during business hours or scheduled maintenance windows). This question uses a time-series model to learn these patterns. A `systemctl enable` or `start` command executed at a time that the model flags as highly improbable (e.g., 3 AM on a holiday) is anomalous and could indicate malicious activity outside of normal operations.
    answer_sources:
      - auditd logs
      - Package manager logs (e.g., dpkg.log, yum.log)
      - Configuration management logs
      - Linux servers and workstations, Configuration Management servers
    range: last 90 days
    queries:
      - "ON 'systemctl enable/start' event | EXTRACT event_timestamp | INPUT timestamp into trained_time_series_forecasting_model | CALCULATE probability_of_event_at_timestamp | ALERT if probability < low_threshold"
  - question: Has a malicious systemd generator been executed or a known systemd vulnerability been exploited?
    context: Adversaries can use systemd generators—small executables that run early in the boot process to create service units dynamically—for privilege escalation. This question looks for the execution of a generator and checks its hash against known malicious ones. It also scans system logs for specific error messages or patterns associated with known systemd privilege escalation vulnerabilities (CVEs).
    answer_sources:
      - auditd logs
      - Systemd journal logs
      - Critical Linux servers, Authentication servers
    range: last 90 days
    queries:
      - "SEARCH auditd_logs for execve in systemd_generator_dirs | HASH executed_file | LOOKUP hash in threat_intel_feed | ALERT on match | AND | SEARCH journal_logs for text_signatures of known_systemd_CVEs | ALERT on match"
  - question: Has a new, unknown executable been placed in a systemd generator directory?
    context: Systemd generator directories should contain a stable, known set of executables. The appearance of a new, un-baselined executable in one of these directories is a highly suspicious event. This question involves creating a baseline of all known-good generator file hashes in the environment and alerting whenever a new file is created in a generator directory that does not match this baseline.
    answer_sources:
      - auditd logs
      - Systemd journal logs
      - Critical Linux servers, Authentication servers
    range: last 90 days
    queries:
      - "ON file_creation in systemd_generator_dirs | HASH created_file | LOOKUP hash in baseline_of_known_good_generators | ALERT if hash is not found"
  - question: Is a systemd generator exhibiting an anomalous sequence of system calls?
    context: Legitimate systemd generators perform a predictable set of actions, which translates to a predictable sequence of system calls. This question uses a machine learning model to learn the normal syscall sequences of known-good generators. By monitoring the syscalls of generators at boot time, the model can detect anomalous behavior (a high reconstruction error) that could indicate a hijacked or malicious generator.
    answer_sources:
      - auditd logs
      - Systemd journal logs
      - Critical Linux servers, Authentication servers
    range: last 90 days
    queries:
      - "ON generator_execution | CAPTURE sequence_of_syscalls | INPUT sequence into trained_syscall_autoencoder_model | CALCULATE reconstruction_error | ALERT if error > anomaly_threshold"
  - question: Has a Systemd service file been modified to run as root or execute a command from a world-writable directory?
    context: A common privilege escalation technique is to modify a legitimate, non-privileged service file to run commands as root. This question uses File Integrity Monitoring (FIM) to detect modifications to `.service` files and specifically alerts if the change involves setting `User=root` or changing the `ExecStart` path to a high-risk, world-writable location like `/tmp` or `/dev/shm`.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
    range: last 90 days
    queries:
      - "ON FIM_alert for '.service' file modification | DIFF file_content against known_good_version | ALERT if diff shows 'User=root' OR ExecStart path is in ('/tmp', '/var/tmp', '/dev/shm')"
  - question: Has the command in a Systemd service file been significantly altered?
    context: While minor changes to service file arguments can be legitimate, a complete change of the command in the `ExecStart` directive is highly suspicious and may indicate a hijack. This question calculates the Levenshtein distance (a measure of string difference) between the old and new command strings upon a modification. A large distance suggests a substantial, non-trivial change that warrants investigation.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
    range: last 90 days
    queries:
      - "ON FIM_alert for '.service' file modification | GET old_ExecStart and new_ExecStart | CALCULATE levenshtein_distance(old, new) | ALERT if distance > tuned_threshold"
  - question: Has a Systemd service file been modified in an anomalous context?
    context: Legitimate modifications to service files are usually performed by specific users or processes during patching or deployments. This question uses an anomaly detection model to identify modifications that deviate from this norm. By analyzing features like the user who made the change and their parent process, the model can flag modifications that don't fit the pattern of legitimate administrative behavior.
    answer_sources:
      - auditd logs
      - File Integrity Monitoring (FIM) logs
      - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
    range: last 90 days
    queries:
      - "ON FIM_alert for '.service' file modification | EXTRACT features (modifying_user, parent_process, changed_directives) | INPUT features into trained_anomaly_detection_model | ALERT if flagged as anomalous"
  - question: Has a non-root user created a service file that was then moved into a systemd directory by a privileged process?
    context: This question detects a classic privilege escalation pattern where an attacker, operating as a low-privileged user, creates a malicious `.service` file in a temporary directory. They then exploit a vulnerability or misconfiguration to get a privileged process to move that file into a system-level systemd directory, where it will be executed with high privileges. Correlating these create-and-move events within a short time window is key to detection.
    answer_sources:
      - auditd logs
      - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
    range: last 90 days
    queries:
      - "SEARCH for file_creation of '.service' file by user_uid > 1000 in non-systemd_dir | CORRELATE with subsequent file_move of same file into '/etc/systemd/system/' | ALERT if correlation found within short_time_window"
  - question: Has a `.service` file been created by an unauthorized user account?
    context: In most environments, only a small, specific set of user accounts (e.g., root, ansible_user) are authorized to create or modify systemd service files. This question involves creating a baseline of these authorized accounts. An alert is then generated any time a `.service` file is created anywhere on the filesystem by a user not on this pre-approved list, as this is a statistically rare and unauthorized action.
    answer_sources:
      - auditd logs
      - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
    range: last 90 days
    queries:
      - "ON file_creation of '.service' file | EXTRACT creating_user | LOOKUP user in baseline_of_authorized_users | ALERT if user is not found"
  - question: Has a sequence of file system events matching a malicious service file placement occurred?
    context: This question advances detection from single events to suspicious sequences of events. By training a machine learning model on labeled sequences of both benign (e.g., package installs) and malicious (e.g., staging and moving) service file placements, the system can learn to score the risk of new event sequences in real-time. This provides a more robust and context-aware method of detecting complex attack chains.
    answer_sources:
      - auditd logs
      - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
    range: last 90 days
    queries:
      - "MONITOR sequences of file events (e.g., create -> move) | EXTRACT features (user, paths, time_delta) for sequence | INPUT features into trained_sequence_classification_model | ALERT if model classifies sequence as malicious"
  - question: Has a user-level timer and service been created to exploit a sudo rule or SUID binary?
    context: Adversaries can achieve persistence or privilege escalation without root access by creating a user-level timer (`.timer`) and service (`.service`) pair in `~/.config/systemd/user/`. This question detects this by monitoring for the creation of these file pairs and inspecting the `ExecStart` command in the service file for attempts to leverage `sudo` privileges or execute a SUID binary to run commands as root.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
    range: last 90 days
    queries:
      - "SEARCH for creation of '.timer' and '.service' file pair in '~/.config/systemd/user/' | PARSE ExecStart_command from service_file | ALERT if command uses 'sudo' or executes a known SUID_binary for privilege_escalation"
  - question: Has a new user-level `.timer` file been created?
    context: For most users in a typical environment, the use of personal, user-level systemd timers is rare or non-existent. Therefore, the creation of a new `.timer` file in a user's home directory (`~/.config/systemd/user/`) is a statistically anomalous event. This question flags any such creation, as it is a common first step for an attacker setting up user-level persistence or a privilege escalation mechanism.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
    range: last 90 days
    queries:
      - "SEARCH for file_creation WHERE file_path CONTAINS '~/.config/systemd/user/' AND file_name ENDS_WITH '.timer' | COMPARE against baseline of known user timers | ALERT on any new or un-baselined timer"
  - question: Has an anomalous, isolated systemd unit dependency been created at the user level?
    context: This question models the systemd unit landscape as a graph of dependencies. Legitimate services are usually part of a larger dependency chain. A newly created user-level `.timer` and `.service` pair, created by an adversary, will often appear as a small, disconnected component in this graph. Using graph algorithms to detect the creation of such isolated subgraphs is a novel way to spot this suspicious activity.
    answer_sources:
      - auditd logs
      - Endpoint File Content
      - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
    range: last 90 days
    queries:
      - "BUILD graph of systemd units and dependencies | MONITOR for addition of new nodes/edges | USE graph analysis to detect creation of new, small, disconnected components, especially those involving user-level units | ALERT on detection"