name: T1543.002: Systemd Service
id: f9c8b7a6-1e2d-4f3c-8b9a-0d1e2f3c4d5e
description: This playbook helps investigate whether an adversary is using Systemd services to achieve persistence or escalate privileges on a Linux host. Adversaries may create or modify Systemd service unit files to execute malicious payloads at system startup, on a timer, or when specific events occur. This can involve creating new `.service` files in system directories, modifying existing ones to run as root or execute code from world-writable locations, or using user-level services to exploit local misconfigurations. Key investigative activities include monitoring for the creation of new service files, analyzing their `ExecStart` commands for known IOCs or signs of obfuscation, examining network connections originating from processes managed by systemd (PPID 1), and scrutinizing `systemctl` command executions to ensure they align with legitimate administrative activity.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a new Systemd service been created that matches known Indicators of Compromise (IOCs)?
  context: This question aims to detect the creation of malicious Systemd services by comparing their properties (file hash, path, arguments) against known threat intelligence. This is a high-fidelity method for identifying known malware or adversary tools being registered for persistence. The focus is on new files with a `.service` extension created in standard systemd directories like `/etc/systemd/system/`.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Search file creation logs for new `.service` files in systemd directories. For each, extract the `ExecStart` command, get the executable's hash, and check the hash, path, and arguments against a threat intelligence database.
- question: Does a newly created Systemd service contain an `ExecStart` command with unusually high entropy, suggesting obfuscation?
  context: Adversaries often obfuscate or encode commands to evade simple signature-based detection. High Shannon entropy can be an indicator of this activity. This question involves baselining the entropy of legitimate service commands in the environment and then flagging new services with command strings that are statistical outliers, which could reveal novel or obfuscated malware.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Scan new `.service` files. Calculate Shannon entropy of the `ExecStart` command string. Compare entropy score to a pre-calculated baseline of normal services. Alert if the score is an outlier (e.g., >95th percentile).
- question: Does a new Systemd service's `ExecStart` command have characteristics that a machine learning model classifies as malicious?
  context: This question uses a machine learning approach to move beyond simple IOCs or entropy. By training a model on features like command length, character types, keywords (like `curl`, `/tmp`), and path depth, the system can learn to distinguish between benign and malicious service commands, potentially identifying previously unseen threats.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: On creation of a new `.service` file, extract features from the `ExecStart` command. Input features into a trained classification model. Alert if the model classifies the command as malicious.
- question: Does a new or modified Systemd service's `ExecStart` command use a scripting interpreter with signs of obfuscation or network-based execution?
  context: This question looks for common patterns used by adversaries to execute malicious scripts via Systemd. It specifically searches for the invocation of interpreters like `bash` or `python` followed by commands associated with decoding (`base64`), in-memory execution (`eval`), or direct network downloads (`curl -s`, `/dev/tcp`), which are highly suspicious in a service definition.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For new or modified `.service` files, use regex to scan the `ExecStart` line for patterns like `bash | base64 -d` or `python -c 'eval(...)'` or `curl ... | bash`. Alert on any match.
- question: Does a new service's `ExecStart` command have an abnormally high ratio of non-alphanumeric characters?
  context: Obfuscated scripts often rely heavily on special characters (e.g., `|`, `&`, `;`, `$`, `{`, `}`). This question establishes a baseline for the normal density of these characters in legitimate service commands and flags new commands that are statistical outliers. This can catch obfuscation techniques that don't use specific keywords but have an unusual structure.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For new service files invoking an interpreter, calculate ratio of non-alphanumeric characters in the `ExecStart` command. Compare ratio to a baseline of benign services. Alert if the ratio exceeds a high percentile (e.g., 98th).
- question: Does a new service's `ExecStart` command have a structure that is anomalous compared to legitimate, packaged services?
  context: This question uses a sequence-based machine learning model (like an LSTM autoencoder) to learn the "grammar" of normal service commands. Commands that are structured differently from those installed by trusted package managers will have a high reconstruction error when processed by the model, flagging them as suspicious even if they don't contain obvious IOCs.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Tokenize the `ExecStart` command of new services. Feed the token sequence into a trained LSTM autoencoder. Alert if the reconstruction error is above a learned threshold.
- question: Is a process started by systemd (PPID 1) making network connections to a known malicious IP or domain?
  context: Systemd (PID 1) is the parent of all services it manages. This question aims to identify C2 communications by correlating processes with a Parent Process ID (PPID) of 1 with outbound network logs. Any connection from a systemd-managed service to a destination on a threat intelligence feed is a strong indicator of compromise.
  answer_sources:
  - auditd logs
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, Linux servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Join auditd logs (where PPID=1) with network connection logs on host and timestamp. For each connection, check the destination IP and domain against a C2 threat intelligence feed. Alert on a match.
- question: Is a process started by systemd (PPID 1) exhibiting network beaconing or connecting to a domain generated by a DGA?
  context: This question looks for behavioral indicators of C2 activity. It identifies robotic, periodic connections (beaconing) by analyzing the time between connections to the same destination. It also looks for connections to domains with high character entropy, a common characteristic of Domain Generation Algorithms (DGAs) used by malware to find C2 servers.
  answer_sources:
  - auditd logs
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, Linux servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Isolate network traffic from processes with PPID 1. Calculate the standard deviation of time deltas between connections to flag beaconing. Calculate the Shannon entropy of queried domain names to flag DGA.
- question: Is a process started by systemd (PPID 1) making network connections that are anomalous compared to normal service behavior?
  context: This question uses unsupervised machine learning to model the normal network behavior of system services. By clustering connection features like duration, bytes transferred, protocol, and port, the model can identify outliers that don't fit the established patterns. This can detect novel C2 channels or data exfiltration that don't rely on known IOCs.
  answer_sources:
  - auditd logs
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points, DNS resolvers, Linux servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Extract feature vectors from network connections originating from PPID 1 processes. Use an anomaly detection model (e.g., Isolation Forest) to identify and alert on connections flagged as outliers.
- question: Was a Systemd service enabled or started that was not installed by a trusted package manager or configuration management tool?
  context: Legitimate Systemd services are typically installed via standard package managers (apt, yum) or deployed by configuration management systems (Ansible, Puppet). This question identifies services that have been manually added to a system, which is a common TTP for adversaries. It involves correlating `systemctl enable/start` commands with installation logs to find "unmanaged" services.
  answer_sources:
  - auditd logs
  - Package manager logs (e.g., dpkg.log, yum.log)
  - Configuration management logs
  - Linux servers and workstations, Configuration Management servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For each `systemctl enable` or `start` command from auditd, verify that the target service file is listed in package manager or configuration management logs. Alert if no corresponding installation record is found.
- question: Was a `systemctl enable` or `start` command executed by an unusual parent process?
  context: Typically, `systemctl` is run interactively from a shell (`bash`), by an SSH session (`sshd`), or by a configuration management tool. An adversary might enable a service from a compromised process, like a web server (`httpd`). This question profiles the normal parent processes of `systemctl` and alerts when it is executed by a statistically rare parent, indicating a potential process compromise.
  answer_sources:
  - auditd logs
  - Package manager logs (e.g., dpkg.log, yum.log)
  - Configuration management logs
  - Linux servers and workstations, Configuration Management servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: From auditd logs, build a frequency distribution of parent process names for `systemctl`. Alert when a `systemctl enable/start` command is executed by a parent process in the long tail of the distribution (e.g., bottom 5%).
- question: Was a Systemd service enabled or started at an anomalous time of day or week?
  context: Legitimate administrative actions, like enabling services, often follow predictable patterns (e.g., during business hours or scheduled maintenance windows). This question uses time-series analysis to model these patterns and identifies `systemctl` executions that occur at unusual times, such as late at night or on a weekend, which could indicate adversary activity.
  answer_sources:
  - auditd logs
  - Package manager logs (e.g., dpkg.log, yum.log)
  - Configuration management logs
  - Linux servers and workstations, Configuration Management servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Model the timestamps of `systemctl enable/start` commands using a time-series forecasting model. Alert when a new execution occurs at a time with a very low probability according to the model.
- question: Has a malicious executable been run from a systemd generator directory, or do logs show signs of a known systemd vulnerability?
  context: Systemd generators are executables that dynamically create unit files at boot time. Adversaries can place malicious generators to achieve privileged execution. This question checks for executions from generator directories against threat intelligence and also scans system logs for signatures of known systemd privilege escalation vulnerabilities (CVEs).
  answer_sources:
  - auditd logs
  - Systemd journal logs
  - Critical Linux servers, Authentication servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Monitor `execve` from systemd generator directories; check file hash against IOC feeds. Separately, scan journal logs for strings matching known systemd exploit CVEs. Alert on any match.
- question: Has a new, unknown executable been created in a systemd generator directory?
  context: The set of legitimate systemd generators on a system is typically small and stable. This question involves creating a baseline of all known-good generator executables in the environment. An alert is triggered whenever a new executable appears in a generator directory that is not on this baseline, indicating a potentially unauthorized and malicious addition.
  answer_sources:
  - auditd logs
  - Systemd journal logs
  - Critical Linux servers, Authentication servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Maintain a baseline of file hashes for all executables in systemd generator directories. Monitor for file creation events in these directories and alert if a new file's hash is not in the baseline.
- question: Is an executable in a systemd generator directory exhibiting an anomalous sequence of system calls?
  context: This question uses behavioral analysis to detect malicious generators. By modeling the normal sequence of system calls made by legitimate generators during boot, an anomaly detection model can identify a malicious generator that performs unexpected actions, such as network activity or unusual file access, even if its hash is unknown.
  answer_sources:
  - auditd logs
  - Systemd journal logs
  - Critical Linux servers, Authentication servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: During boot, capture the syscall sequence for each process executed from a generator directory. Feed the sequence into a trained LSTM autoencoder and alert if the reconstruction error is high.
- question: Has an existing Systemd service file been modified to run as root or execute a command from a world-writable directory?
  context: A common privilege escalation technique is to hijack an existing, legitimate service. This question uses File Integrity Monitoring (FIM) to detect modifications to `.service` files and specifically looks for changes that escalate privileges, such as changing the `User=` directive to `root` or pointing the `ExecStart` command to an insecure location like `/tmp` or `/dev/shm`.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: On FIM alert for a `.service` file, diff the new content with a baseline. Alert if `User=` is changed to `root` or if `ExecStart` path is changed to `/tmp`, `/var/tmp`, or `/dev/shm`.
- question: Has a Systemd service's `ExecStart` command been substantially altered?
  context: While minor changes to service commands can be legitimate (e.g., adding an argument), a complete rewrite is highly suspicious. This question calculates the Levenshtein distance (a measure of string difference) between the old and new `ExecStart` command upon modification. A large distance suggests the command was hijacked rather than tweaked.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: On FIM alert for a `.service` file modification, calculate the Levenshtein distance between the old and new `ExecStart` strings. Alert if the distance exceeds a tuned threshold.
- question: Was a Systemd service file modified in a way that is anomalous compared to normal administrative behavior?
  context: This question uses machine learning to identify suspicious modifications. It builds a model of normal changes based on features like who made the change (user), what process made the change (e.g., `ansible-playbook`), and which directives were altered. Modifications that deviate from this learned pattern are flagged as anomalous.
  answer_sources:
  - auditd logs
  - File Integrity Monitoring (FIM) logs
  - Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: For each `.service` file modification, extract features (user, parent process, changed directives). Use an anomaly detection model (e.g., Isolation Forest) to score the event and alert on outliers.
- question: Was a `.service` file created by a non-root user in a temporary directory and then moved to a systemd directory?
  context: This question detects a classic privilege escalation staging pattern. An adversary with low-level privileges creates a malicious service file in a directory they can write to (like `/tmp`), and then a separate, exploited privileged process is used to move that file into a system-level systemd directory where it will be executed as root. Correlating these two events in a short time window is a strong indicator of this attack.
  answer_sources:
  - auditd logs
  - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Correlate auditd events. Alert if a `.service` file is created by UID > 1000 in `/tmp` and then moved via `renameat` into `/etc/systemd/system/` within a short time window.
- question: Was a `.service` file created by a user who is not authorized to manage services?
  context: The creation and modification of system service files should be restricted to a small set of administrative and service accounts. This question involves creating a baseline of authorized users (e.g., `root`, `ansible`) and alerting any time a `.service` file is created by a user not on this list, indicating a potential compromise or misconfiguration.
  answer_sources:
  - auditd logs
  - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Maintain a baseline set of UIDs authorized to create/modify `.service` files. Monitor all `.service` file creation events and alert if the creating user's UID is not in the baseline.
- question: Did a sequence of file system events related to a `.service` file match a malicious staging pattern?
  context: This question advances the detection of service file staging by using a machine learning model. The model is trained to recognize the entire sequence of events—from creation to the final move—as either benign (like a package installation) or malicious. It uses features like the user, initial path, final path, and time delta to make a more context-aware decision.
  answer_sources:
  - auditd logs
  - Staging directories (`/tmp`, `/dev/shm`), User home directories, Systemd system directories (`/etc/systemd/system/`)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Capture sequences of file events involving `.service` files. Extract features from the sequence (creating user, paths, time delta) and use a trained classification model to score the sequence for maliciousness.
- question: Has a user-level timer and service been created to exploit a sudo rule or SUID binary for privilege escalation?
  context: Adversaries can place `.timer` and `.service` files in a user's home directory (`~/.config/systemd/user/`) to schedule tasks. This question specifically looks for cases where the scheduled task (`ExecStart`) attempts to escalate privileges by running a command via `sudo` that the user is allowed to run as root, or by executing a known SUID binary with arguments that lead to a root shell.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Monitor creation of `.timer`/`.service` pairs in user home directories. Scan the `ExecStart` command for `sudo` usage or execution of known-vulnerable SUID binaries. Alert on matches.
- question: Has a new timer been created in a user's systemd directory?
  context: Unlike system-level services, it is rare for typical users or applications to create user-level systemd timers for legitimate purposes. The appearance of a new `.timer` file in a user's directory (`~/.config/systemd/user/`) is a statistically rare and therefore suspicious event that warrants investigation, as it is a common method for user-level persistence or privilege escalation setup.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Establish a baseline of existing user-level `.timer` files. Alert on the creation of any new file matching `~/.config/systemd/user/*.timer`, as this is a highly anomalous event.
- question: Has a new, isolated user-level timer and service pair been added to the systemd unit graph?
  context: This question uses a more abstract, graph-based approach. It models all systemd units and their dependencies as a graph. Legitimate units are usually interconnected. A malicious user-level timer/service pair created for persistence or privilege escalation will often appear as a new, small, disconnected component in this graph, making it a highly anomalous structural change to detect.
  answer_sources:
  - auditd logs
  - Endpoint File Content
  - User-level systemd directories on all Linux hosts (~/.config/systemd/user/)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: Build and maintain a graph of systemd unit dependencies. On unit file creation, update the graph and use graph algorithms to detect the creation of new, small, disconnected subgraphs, particularly in user-space.