name: 'T1552.005: Cloud Instance Metadata API'
id: 'd8d73b5f-2a3b-4c9f-8e1d-9c0a6b7e8f5a'
description: This playbook is designed to help investigators determine if an adversary has accessed cloud instance metadata to steal credentials or other sensitive data. This can manifest in several ways, such as a potential Server-Side Request Forgery (SSRF) attack where an external connection to a web application is immediately followed by a connection from that server to the metadata API endpoint (169.254.169.254). It can also be detected by observing direct command-line invocations of network utilities like curl or wget to query the metadata API. Unauthorized access can be identified when connections to the metadata endpoint originate from processes or user accounts not on a predefined allowlist. Furthermore, adversary reconnaissance may be indicated by anomalous HTTP request patterns to the metadata API, such as a high rate of errors, high URI entropy, or a rapid enumeration of different URI paths. Finally, a strong indicator of credential theft and use is when an instance accesses the IAM credential endpoint and shortly thereafter makes a new outbound connection to a sensitive cloud provider API.
type: technique
related:
  - 'TA0006: Credential Access'
contributors:
  - Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Has a public-facing web server, after receiving a connection from a known malicious IP, immediately made a connection to the cloud instance metadata API?
    context: This question aims to detect potential Server-Side Request Forgery (SSRF) attacks. An adversary might exploit a vulnerability in a web application to force the server to make a request on their behalf. A common target for SSRF is the internal metadata API (169.254.169.254) to steal credentials. Correlating an inbound connection from a malicious source with a subsequent outbound connection to the metadata API within a very short timeframe (e.g., 5 seconds) is a strong indicator of this technique.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Public-facing web application servers
      - Cloud network flow logs (e.g., VPC Flow Logs)
      - Network traffic logs from virtual network taps
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: JOIN (http_logs WHERE src_ip IN threat_intel_feed) WITH (conn_logs WHERE dest_ip = '169.254.169.254') ON (http_logs.dest_ip = conn_logs.src_ip) WHERE (conn_logs.timestamp - http_logs.timestamp <= 5_seconds)
  - question: Has a public-facing web server shown a statistically significant spike in connections to the cloud instance metadata API, especially following traffic from a low-reputation IP?
    context: This question uses statistical analysis to identify anomalous behavior that might indicate an SSRF attack. Instead of relying on known malicious IPs, it establishes a normal baseline for how often a server communicates with the metadata API. A sudden, sharp increase in this traffic, particularly when correlated with inbound requests from suspicious or low-reputation sources, can signal that an attacker is exploiting a vulnerability to repeatedly query the metadata service.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Public-facing web application servers
      - Cloud network flow logs (e.g., VPC Flow Logs)
      - Network traffic logs from virtual network taps
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each web_server, CALCULATE baseline_rate of connections to '169.254.169.254'. ALERT if current_rate > (baseline_mean + 3 * baseline_std_dev) AND recent_inbound_traffic_from_low_reputation_ip.
  - question: Can machine learning models predict or detect anomalous access to the metadata API based on features of inbound HTTP requests or the volume of requests over time?
    context: This question explores advanced, model-driven detection of SSRF attacks targeting the metadata API. A classification model can be trained to recognize malicious inbound HTTP requests (e.g., by analyzing unusual User-Agents, parameters, or headers) that are likely precursors to an SSRF. Separately, a time-series anomaly detection model can monitor the volume of requests to the metadata API, flagging any sudden, uncharacteristic spikes that deviate from learned normal patterns, which could indicate an automated exploit.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Public-facing web application servers
      - Cloud network flow logs (e.g., VPC Flow Logs)
      - Network traffic logs from virtual network taps
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: APPLY trained_classifier to inbound_http_request_features. ALERT on 'malicious' prediction. MONITOR request_volume_to_metadata_api with time_series_model. ALERT on detected_anomaly.
  - question: Has a process been created on a cloud instance that explicitly uses a network utility to query the instance metadata API via the command line?
    context: This question looks for direct, command-line evidence of an adversary or script attempting to access the metadata API. Attackers often use common utilities like curl, wget, or PowerShell's Invoke-WebRequest to make HTTP requests. Searching process creation logs (like Windows Event ID 4688) for command lines containing both a network utility and the metadata API IP address (169.254.169.254) is a high-fidelity way to detect this activity.
    answer_sources:
      - Windows Event ID 4688
      - Cloud compute instances (VMs, containers)
      - CI/CD pipeline runners
      - Endpoint Detection and Response (EDR) logs on cloud instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process_creation_logs WHERE command_line MATCHES REGEX '(?i)(curl|wget|powershell|pwsh|python|Invoke-WebRequest|iwr).*(169\\.254\\.169\\.254)'
  - question: Has a historically rare process on a specific host been executed to connect to the cloud instance metadata API?
    context: This question aims to find unusual or novel processes accessing the metadata API. While some legitimate applications might query the API, an attacker might use a custom tool or a built-in utility that is not typically used for network activity on that host. By baselining common processes and flagging executions involving '169.254.169.254' by statistically rare processes (e.g., those in the bottom 5th percentile of historical frequency), we can identify suspicious activity that deviates from the norm for that specific system.
    answer_sources:
      - Windows Event ID 4688
      - Cloud compute instances (VMs, containers)
      - CI/CD pipeline runners
      - Endpoint Detection and Response (EDR) logs on cloud instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each host, CALCULATE frequency of all process_names. FOR process_creation_events involving '169.254.169.254', ALERT if process_name_frequency is in bottom 5th percentile.
  - question: Can a machine learning model classify process creation events involving network connections as benign or suspicious metadata access based on command-line features?
    context: This question leverages machine learning to distinguish between legitimate and malicious command-line access to the metadata API. By extracting features from the command line itself—such as the number of arguments, presence of IP addresses, specific keywords (e.g., 'credentials'), and entropy (randomness)—a model can be trained to score the likelihood that a given command is malicious. This moves beyond simple string matching to a more nuanced, context-aware detection.
    answer_sources:
      - Windows Event ID 4688
      - Cloud compute instances (VMs, containers)
      - CI/CD pipeline runners
      - Endpoint Detection and Response (EDR) logs on cloud instances
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: EXTRACT features from process_command_line. APPLY trained_classifier to features. ALERT if classification is 'suspicious metadata access'.
  - question: Has a network connection to the metadata API been initiated by a process or user account that is not on a pre-defined allowlist for that instance's role?
    context: This question focuses on policy enforcement to detect unauthorized access. In a well-managed cloud environment, only specific applications and service accounts should need to access the metadata API. By creating and maintaining allowlists of authorized processes and users for each instance role, any connection to '169.254.169.254' from an entity not on the list can be treated as a high-confidence security alert, indicating either misconfiguration or malicious activity.
    answer_sources:
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Zeek conn.log
      - Sysmon Event ID 3
      - Cloud compute instances (VMs, containers)
      - Authentication and identity management servers
      - Host-based firewall logs
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR network_connection_event to '169.254.169.254', GET source_process_name and source_user. GET instance_role. ALERT if source_process_name OR source_user NOT IN allowlist_for_instance_role.
  - question: Has the set of unique processes connecting to the metadata API on a given instance significantly deviated from its historical baseline?
    context: This question uses a statistical approach to detect changes in behavior without requiring a manually maintained allowlist. It works by first learning the "normal" set of processes that access the metadata API on an instance over a baseline period. It then periodically compares the current set of active processes to this baseline. A low similarity score (e.g., using the Jaccard index) indicates that new, previously unseen processes are now accessing the API, which is a strong anomaly signal.
    answer_sources:
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Zeek conn.log
      - Sysmon Event ID 3
      - Cloud compute instances (VMs, containers)
      - Authentication and identity management servers
      - Host-based firewall logs
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each instance, CREATE baseline_set of processes connecting to '169.254.169.254'. PERIODICALLY GET current_set of connecting processes. CALCULATE jaccard_similarity(baseline_set, current_set). ALERT if similarity_score < threshold.
  - question: Can unsupervised machine learning identify outlier processes or users accessing the metadata API by clustering normal behavior?
    context: This question applies unsupervised learning to automatically discover what "normal" access to the metadata API looks like and flag anything that doesn't fit. By clustering connection events based on features like process name, parent process, user context, and command line, the model can identify large, dense clusters representing common, legitimate activity. Any connection that falls into a very small cluster or is classified as noise (an outlier) by the algorithm is flagged as anomalous and worthy of investigation.
    answer_sources:
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Zeek conn.log
      - Sysmon Event ID 3
      - Cloud compute instances (VMs, containers)
      - Authentication and identity management servers
      - Host-based firewall logs
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: EXTRACT features from processes connecting to '169.254.169.254'. APPLY clustering_algorithm (e.g., DBSCAN) to features. LABEL large clusters as 'normal'. ALERT on processes in small clusters or classified as noise.
  - question: Is an instance making non-standard or repeated failing requests to the metadata API, suggesting reconnaissance or brute-force enumeration?
    context: This question seeks to identify adversary reconnaissance against the metadata API. Legitimate requests are almost always HTTP GET requests. An alert on any other method (like POST or PUT) is highly suspicious. Additionally, attackers often probe for available data by trying different URI paths. A pattern of multiple '404 Not Found' errors followed by requests to slightly different paths is a classic sign of enumeration or brute-forcing and should be investigated.
    answer_sources:
      - Zeek http.log
      - Cloud instance virtual network interfaces (VNICs)
      - Network traffic inspection points (e.g., Zeek sensors)
      - Cloud provider-native traffic mirroring services
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH http_logs WHERE dest_ip = '169.254.169.254'. ALERT if http_method != 'GET'. DETECT sequences of (http_status=404 followed by new_uri_request) from same source.
  - question: Has an instance exhibited a statistical anomaly in its requests to the metadata API, such as accessing an unusually high number of unique URI paths or using URIs with high entropy?
    context: This question uses statistical metrics to detect reconnaissance activity that might be missed by simple rules. By establishing a baseline for each instance, we can detect when it starts behaving abnormally. A sudden spike in the number of unique URI paths accessed per hour (exceeding the 99th percentile) suggests enumeration. Similarly, a significant increase in the Shannon entropy of the requested URIs can indicate an attacker is using randomized or obfuscated paths to probe the API.
    answer_sources:
      - Zeek http.log
      - Cloud instance virtual network interfaces (VNICs)
      - Network traffic inspection points (e.g., Zeek sensors)
      - Cloud provider-native traffic mirroring services
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each source_ip, CALCULATE baseline of unique_uri_count_per_hour and uri_shannon_entropy. ALERT if current_unique_uri_count > 99th_percentile OR current_entropy > (baseline_mean + 2 * baseline_std_dev).
  - question: Does the observed volume of requests or data transfer from an instance to the metadata API significantly exceed the volume predicted by a time-series forecasting model?
    context: This question aims to detect data exfiltration or large-scale reconnaissance by modeling expected traffic volumes. A time-series model (like Prophet or LSTM) can learn the normal, cyclical patterns of an instance's communication with the metadata API. If the actual volume of requests or, more importantly, the size of the data transferred back from the API, suddenly and significantly exceeds the model's prediction and its confidence interval, it could indicate that a script is exfiltrating a large amount of sensitive data (like credentials for many roles).
    answer_sources:
      - Zeek http.log
      - Cloud instance virtual network interfaces (VNICs)
      - Network traffic inspection points (e.g., Zeek sensors)
      - Cloud provider-native traffic mirroring services
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each instance, USE time_series_model to predict request_volume and data_transfer_size to '169.254.169.254'. ALERT if actual_volume > predicted_volume_upper_confidence_bound.
  - question: After accessing the IAM security credential endpoint in the metadata API, did the same instance then initiate a new connection to a sensitive cloud provider API endpoint within five minutes?
    context: This question directly ties the theft of credentials to their potential use. Accessing the '/iam/security-credentials/' path is a clear sign of intent to retrieve credentials. If this action is immediately followed by the same instance making a new connection to a major cloud management endpoint (like s3.amazonaws.com or management.azure.com), it strongly suggests the adversary has successfully obtained credentials and is now using them to interact with other cloud services. This two-stage detection provides high-confidence evidence of a successful attack.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Cloud compute instances (VMs, containers)
      - Egress network gateways
      - DNS resolvers
      - VPC network access control lists (NACLs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FIND http_requests to '169.254.169.254' with uri containing '/iam/security-credentials/'. FOR each event, SEARCH conn_logs and dns_logs for outbound connections from same source_ip to cloud_api_endpoints within 5 minutes.
  - question: Following a metadata credential access event, did the instance connect to a cloud API endpoint that is statistically rare for its specific role?
    context: This question enhances the previous one by adding role-based context. Not all connections to cloud APIs are malicious. This approach establishes a baseline of which cloud APIs are normally contacted by instances of a certain role (e.g., a web server role typically only accesses S3). If, after fetching credentials, an instance from that web server role suddenly connects to a rare destination for its role (e.g., the IAM API to create new users), it should be assigned a high risk score, as this is a significant deviation from its expected behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Cloud compute instances (VMs, containers)
      - Egress network gateways
      - DNS resolvers
      - VPC network access control lists (NACLs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each instance_role, CREATE baseline of normal_api_destinations. AFTER metadata_credential_access event, MONITOR subsequent outbound connections. ALERT if destination_api NOT IN baseline for that instance_role.
  - question: Did an instance exhibit a sequence of network connections, starting with metadata credential access, that is flagged as anomalous by a state transition model?
    context: This question uses a more sophisticated modeling technique to understand sequences of behavior. A Markov chain or similar model can be trained on benign network traffic to learn the probable sequences of connections (e.g., a web server connects to a database, then to a caching service). The model learns what state transitions are normal. An observed transition from the state 'Accessed Metadata Credentials' to a rare or forbidden state, such as 'Accessed IAM User Creation API', would be identified by the model as a highly improbable and therefore highly suspicious sequence of events.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Cloud compute instances (VMs, containers)
      - Egress network gateways
      - DNS resolvers
      - VPC network access control lists (NACLs)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN state_transition_model on normal network connection sequences. FEED live connection data into model. ALERT if model flags transition from 'Accessing Metadata Credentials' to a low-probability next state as an anomaly.