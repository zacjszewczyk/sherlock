name: 'T1564.005: Hidden File System'
id: 'd8c4b1a0-6b7c-4d5e-9f3a-2e1c9b8d7a6f'
description: "This playbook helps answer the question: Is the adversary employing defense evasion techniques involving hidden file systems? It provides investigative steps to detect this behavior by looking for file transfers of known hidden file system utilities (like VeraCrypt or TrueCrypt), process creation events for disk management tools (like diskpart.exe or fsutil.exe) using suspicious arguments, the creation of unusual or unsigned kernel drivers, unauthorized processes accessing raw disk objects, modifications to critical registry keys related to file systems or boot processes, and discrepancies between a disk's total size and the sum of its partitions, which could indicate a hidden, unallocated space."
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: "Is a known hidden file system creation utility being transferred over the network, identified by its hash, name, or metadata?"
    context: "This question aims to detect the acquisition of tools used for creating hidden file systems. The approach involves creating and maintaining a watchlist of file hashes, names, and embedded metadata for known utilities. By querying network file transfer logs (e.g., Zeek files.log), an alert can be generated when a downloaded file matches an entry on the watchlist. Correlating these alerts with connection logs helps identify the source and destination of the transfer."
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Internet gateways and network egress points'
    range: 'last 90 days'
    queries:
      - 'SEARCH network_file_logs WHERE file_hash IN (watchlist) OR file_name IN (watchlist_names) | CORRELATE with connection_logs to find source and destination'
  - question: "Is an executable file with an unusually high-entropy filename being transferred over the network, suggesting obfuscation?"
    context: "This question seeks to identify obfuscated or randomized filenames, which can be a sign of malicious tools. The approach is to calculate the Shannon entropy for all executable filenames observed in network traffic. By establishing a rolling 30-day baseline of filename entropy, an alert can be generated for any executable filename whose entropy exceeds a high percentile (e.g., 95th) of the baseline and is not on an allow-list."
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Internet gateways and network egress points'
    range: 'last 90 days'
    queries:
      - 'CALCULATE entropy for filenames in network_file_logs | ALERT where entropy > 95th_percentile_baseline AND filename NOT IN allowlist'
  - question: "Does a machine learning model classify a network file transfer as high-risk or malicious based on its characteristics?"
    context: "This question leverages machine learning to identify potentially malicious file transfers that may not be caught by signature-based methods. A classification model is trained on labeled network log data using features like IP reputation, ASN rarity, port, file MIME type, size, and filename entropy. The deployed model scores new file transfers in near real-time, alerting on any transfer classified as high-risk."
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek http.log'
      - 'Internet gateways and network egress points'
    range: 'last 90 days'
    queries:
      - 'SCORE new_file_transfers with ML_model(features: ip_rep, asn, port, mime_type, size, etc.) | ALERT where score is high_risk'
  - question: "Are disk management utilities (`mountvol.exe`, `diskpart.exe`, `fsutil.exe`) being executed with command-line arguments indicative of hidden volume creation or manipulation?"
    context: "This question focuses on detecting the direct use of native OS tools to manipulate volumes and create hidden file systems. The approach is to create a detection rule that triggers on process creation events (Windows Event ID 4688) for specific utilities with suspicious arguments, such as `mountvol.exe /d` (delete mount point) or `fsutil.exe file createnew`. The rule should be tuned to exclude known administrative scripts."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Domain Controllers, File Servers, Critical application servers, and Administrator workstations'
    range: 'last 90 days'
    queries:
      - 'SEARCH process_creation_logs WHERE (process_name = ''mountvol.exe'' AND command_line CONTAINS ''/d'') OR (process_name = ''diskpart.exe'' AND script CONTAINS ''create partition'') OR (process_name = ''fsutil.exe'' AND command_line CONTAINS ''createnew'') AND parent_process NOT IN allowlist'
  - question: "Are disk management utilities being executed by rare parent processes or with uncommon command-line arguments compared to an enterprise-wide baseline?"
    context: "This question uses statistical analysis to find anomalous executions of legitimate disk utilities. The method involves profiling the parent processes and command-line arguments for tools like `diskpart.exe` from process creation logs. By calculating the frequency of each parent-process/command-line pair across the enterprise, an alert can be triggered when a rare combination is observed, especially if the parent is not a standard administrative tool."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Domain Controllers, File Servers, Critical application servers, and Administrator workstations'
    range: 'last 90 days'
    queries:
      - 'PROFILE parent_process and command_line for disk_utilities | CALCULATE frequency | ALERT where frequency < threshold AND parent_process NOT IN (standard_admin_tools)'
  - question: "Does a sequence of commands within a shell session indicate anomalous disk reconnaissance followed by modification?"
    context: "This question aims to identify malicious intent by analyzing the sequence of commands. A sequence analysis model (e.g., LSTM) is trained on normal sequences of administrative commands within parent processes like `cmd.exe`. The model can then flag any session containing an anomalous sequence, particularly those involving disk reconnaissance (`wmic partition get`) immediately followed by partition modification (`diskpart`)."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Domain Controllers, File Servers, Critical application servers, and Administrator workstations'
    range: 'last 90 days'
    queries:
      - 'MODEL command_sequences in shell_sessions | ALERT where sequence is anomalous (e.g., recon followed by modification)'
  - question: "Has a new kernel driver service been created that is unsigned, located outside the standard drivers directory, or has been explicitly blocked by Code Integrity?"
    context: "This question looks for the installation of potentially malicious kernel drivers, which can be used to hide file systems. The approach is to alert on new service creation events (Windows Event ID 7045) where the service is a kernel driver (`ServiceType` 0x1) and its `ImagePath` is outside the normal `\\System32\\drivers\\` directory. This is supplemented by high-severity alerts on any Code Integrity Event ID 3033, which indicates a blocked unsigned driver."
    answer_sources:
      - 'Windows Event ID 7045'
      - 'Microsoft-Windows-CodeIntegrity/Operational Event ID 3033'
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, particularly Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'SEARCH service_creation_logs WHERE service_type = ''kernel_driver'' AND image_path NOT LIKE ''%\\System32\\drivers\\%'' | ENRICH with signature_check; ALERT on code_integrity_block_events (EventID 3033)'
  - question: "Has a new kernel driver been installed that is rare across the enterprise or has a high-entropy service name?"
    context: "This question uses statistical methods to find unusual driver installations. By aggregating all kernel driver service creation events over a period, we can calculate the prevalence of each driver's `ImagePath` (how many hosts it's on). An alert is generated for any new driver with very low prevalence (e.g., <1%) that isn't part of a known deployment. High-entropy service names are also flagged as suspicious."
    answer_sources:
      - 'Windows Event ID 7045'
      - 'Microsoft-Windows-CodeIntegrity/Operational Event ID 3033'
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, particularly Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'AGGREGATE driver_installations | CALCULATE prevalence of ImagePath and entropy of ServiceName | ALERT where prevalence < 1% OR entropy > 98th_percentile'
  - question: "Does a machine learning model classify a new driver installation as anomalous based on its features?"
    context: "This question applies machine learning to detect suspicious driver installations. An anomaly detection model (e.g., Isolation Forest) is trained on features from legitimate driver installation events. Features can include file path depth, entropy of the service and file names, and whether the path contains 'System32'. The model then scores new installations, flagging any that are identified as anomalous."
    answer_sources:
      - 'Windows Event ID 7045'
      - 'Microsoft-Windows-CodeIntegrity/Operational Event ID 3033'
      - 'Windows Event ID 4688'
      - 'All Windows endpoints and servers, particularly Domain Controllers'
    range: 'last 90 days'
    queries:
      - 'SCORE new_driver_installations with anomaly_detection_model(features: path_depth, path_entropy, name_entropy) | ALERT if anomalous'
  - question: "Has an unauthorized process attempted to read or write directly to a raw physical disk or volume?"
    context: "This question aims to detect processes bypassing the file system to interact directly with the disk, a technique used to access hidden partitions. This requires configuring System Access Control Lists (SACLs) on raw disk objects (`\\.\\PhysicalDrive*`) to log access attempts (Windows Event ID 4656/4663). A rule then alerts when a process not on an allow-list of approved disk utilities requests `ReadData` or `WriteData` access."
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4656'
      - 'Windows Event ID 4688'
      - 'SACL-monitored raw disk objects (\\.\\PhysicalDrive*) on all Windows endpoints and servers, especially database servers, file servers, and domain controllers.'
    range: 'last 90 days'
    queries:
      - 'SEARCH disk_access_logs WHERE object_name LIKE ''\\.\\PhysicalDrive*'' AND access_type IN (''ReadData'', ''WriteData'') AND process_name NOT IN allowlist'
  - question: "Is a statistically rare process accessing raw disk objects?"
    context: "This question identifies unusual raw disk access by baselining normal activity. Based on access events (Windows Event ID 4656/4663), a profile of all processes that access raw disk objects is established across the enterprise. The prevalence of each process is calculated, and an alert is triggered if a process with very low prevalence (e.g., seen on <2% of systems) performs this action, especially if its parent process is also rare."
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4656'
      - 'Windows Event ID 4688'
      - 'SACL-monitored raw disk objects (\\.\\PhysicalDrive*) on all Windows endpoints and servers, especially database servers, file servers, and domain controllers.'
    range: 'last 90 days'
    queries:
      - 'BASELINE raw_disk_access_by_process | CALCULATE prevalence | ALERT when accessing_process_prevalence < threshold'
  - question: "Does a raw disk access event belong to an anomalous cluster of activity?"
    context: "This question uses machine learning to distinguish normal from abnormal raw disk access. A clustering algorithm (e.g., DBSCAN) groups events based on features like process name, parent process, and access mask. Large, dense clusters typically represent legitimate activity (like backups). Small, sparse clusters or singleton events that do not fit into any known group are flagged as anomalies for investigation."
    answer_sources:
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4656'
      - 'Windows Event ID 4688'
      - 'SACL-monitored raw disk objects (\\.\\PhysicalDrive*) on all Windows endpoints and servers, especially database servers, file servers, and domain controllers.'
    range: 'last 90 days'
    queries:
      - 'CLUSTER disk_access_events using features(process, parent_process, access_mask) | ALERT on small or sparse clusters'
  - question: "Have critical registry keys related to file systems or boot processes been modified by an unauthorized process?"
    context: "This question targets attempts to manipulate system behavior at a low level by modifying the registry. High-priority alerts are created for any modification event (Windows Event ID 4657) to critical keys like `HKLM\\SYSTEM\\CurrentControlSet\\Services\\Ntfs` or `HKLM\\...\\BootExecute`. An alert is triggered if the process responsible for the change is not an approved system process like `TrustedInstaller.exe`."
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4663'
      - 'Boot sectors of physical disks and Windows Registry hives on all Windows assets'
    range: 'last 90 days'
    queries:
      - 'SEARCH registry_modification_logs WHERE key_path IN (critical_boot_keys) AND process_name NOT IN allowlist'
  - question: "Has a host experienced a statistically unusual number of modifications to registry keys related to system services?"
    context: "This question seeks to identify a burst of suspicious registry activity. The approach is to track the frequency of modification events (Windows Event ID 4657) to the `HKLM\\SYSTEM\\CurrentControlSet\\Services` key and its subkeys. By establishing a baseline for the daily count of these modifications per host, an alert can be generated when a host's activity exceeds a statistical threshold (e.g., 3 standard deviations above its mean), especially outside of normal patch windows."
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4663'
      - 'Boot sectors of physical disks and Windows Registry hives on all Windows assets'
    range: 'last 90 days'
    queries:
      - 'TRACK daily_count of modifications to ''HKLM\\SYSTEM\\CurrentControlSet\\Services'' per host | ALERT if count > (mean + 3*stdev) or count > 99th_percentile'
  - question: "Does a time-series model detect an anomalous spike in registry modifications related to boot or service configuration?"
    context: "This question uses forecasting models to find abnormal spikes in registry modifications. A time-series model (e.g., SARIMA) is trained on the aggregate count of modification events for critical system keys. The model learns normal patterns, including weekly and monthly seasonality (like Patch Tuesday). It then alerts on any spike in activity that it flags as a significant, unexpected anomaly."
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4663'
      - 'Boot sectors of physical disks and Windows Registry hives on all Windows assets'
    range: 'last 90 days'
    queries:
      - 'MODEL time_series of aggregate registry_mod_events | ALERT on spikes flagged as anomalous by the model'
  - question: "Is there a significant discrepancy between a disk's total size and the sum of its allocated partitions, suggesting hidden unallocated space?"
    context: "This question seeks to find hidden file systems by identifying unaccounted-for disk space. A recurring script is scheduled on endpoints to compare the total disk size (from `wmic diskdrive get size`) with the sum of all partition sizes (`wmic partition get size`). A rule then parses these logs and calculates the unallocated space, alerting if this value is greater than a nominal threshold (e.g., 1GB)."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Custom Script Output'
      - 'Physical disks on all Windows endpoints and servers'
    range: 'last 90 days'
    queries:
      - 'RUN script to compare total_disk_size and sum_of_partition_sizes | CALCULATE unallocated_space | ALERT if unallocated_space > threshold'
  - question: "Has a host's unallocated disk space suddenly increased, as identified by a change point detection algorithm?"
    context: "This question focuses on detecting the moment a hidden partition might be created. The periodically calculated 'UnallocatedSpace' value for each host is ingested into a time-series database. A change point detection algorithm is then applied to this data series to automatically alert when a statistically significant, positive change in the unallocated space is detected."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Custom Script Output'
      - 'Physical disks on all Windows endpoints and servers'
    range: 'last 90 days'
    queries:
      - 'STORE unallocated_space over time | APPLY change_point_detection algorithm | ALERT on significant positive change'
  - question: "Has a host's disk layout profile anomalously changed, causing it to shift from its normal cluster of similar machines?"
    context: "This question uses machine learning to spot anomalous changes in a computer's disk configuration. Hosts are grouped into clusters (e.g., 'Standard Laptop', 'Dev VM') based on their disk layout profiles (total size, number of partitions, etc.). If a host's profile changes and it unexpectedly migrates to a different cluster, it is flagged for investigation as a potential unauthorized disk modification."
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Custom Script Output'
      - 'Physical disks on all Windows endpoints and servers'
    range: 'last 90 days'
    queries:
      - 'CLUSTER hosts by disk_layout_profile | MONITOR for cluster migration | ALERT if host moves to an unexpected cluster'