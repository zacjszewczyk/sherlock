name: T1593.002: Search Engines
id: f5d8a8a2-2b8d-4c3e-8b1a-9e6f0c7d4a3b
description: This playbook helps investigate whether an adversary is using public search engines for reconnaissance against the organization. It focuses on detecting publicly exposed sensitive data, identifying unusual download activity on internal systems that may follow reconnaissance, spotting inbound web traffic that indicates dorking or enumeration, and monitoring for internal access to known leaked data.
type: technique
related:
  - TA0043: Reconnaissance
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are automated queries (dorks) against public search engines revealing sensitive organizational data?
    context: This question aims to proactively discover if sensitive information, such as passwords, configuration files, API keys, or internal hostnames, has been inadvertently exposed on public websites and indexed by search engines. Executing targeted search queries, or 'dorks', helps identify these data leaks before an adversary can exploit them.
    answer_sources:
      - External Search Engine API Query Results
      - Public-facing websites and web applications
      - Public code repositories (e.g., GitHub, GitLab)
      - Public cloud storage (e.g., S3 buckets, Azure blobs)
      - Public paste sites (e.g., Pastebin)
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH public_search_engine_api FOR keywords IN (password, secret, api_key) OR filetypes IN (pem, sql, config) OR hostnames IN (internal_host_list) AND site CONTAINS organization_domains
  - question: Are any publicly discovered organizational documents exhibiting a statistically high risk score for sensitive content?
    context: This question moves beyond simple keyword matching to quantify the risk of a discovered document. By calculating a risk score based on the weighted frequency of sensitive terms and comparing it to a statistical baseline of normal documents, analysts can prioritize investigation on the documents that represent the most significant potential data exposure.
    answer_sources:
      - External Search Engine API Query Results
      - Public-facing websites and web applications
      - Public code repositories (e.g., GitHub, GitLab)
      - Public cloud storage (e.g., S3 buckets, Azure blobs)
      - Public paste sites (e.g., Pastebin)
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: CALCULATE risk_score for each document from search_results. ALERT if risk_score > baseline_95th_percentile
  - question: Has a machine learning model classified any discovered public documents as sensitive?
    context: This question leverages a text classification model to provide a more nuanced, context-aware method for identifying sensitive data leaks. By training a model on known sensitive and benign documents, it can automatically categorize newly discovered content, allowing analysts to focus on high-confidence alerts and reduce false positives from simple keyword searches.
    answer_sources:
      - External Search Engine API Query Results
      - Public-facing websites and web applications
      - Public code repositories (e.g., GitHub, GitLab)
      - Public cloud storage (e.g., S3 buckets, Azure blobs)
      - Public paste sites (e.g., Pastebin)
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: CLASSIFY document_text using ML_model. ALERT if classification == 'sensitive' AND confidence_score > 0.90
  - question: Are command-line download utilities being used on internal systems to fetch content from known malicious domains?
    context: This question helps detect a potential post-reconnaissance action where an adversary, having identified a target, uses a compromised host to download tools or scripts. It monitors for the execution of common download utilities (e.g., curl, wget) and correlates the destination URL against threat intelligence feeds to identify malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, database servers, application servers, non-developer user workstations, and DMZ-hosted servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_events for process IN (curl.exe, wget.exe, bitsadmin.exe, certutil.exe) WHERE command_line contains URL. CORRELATE URL_destination_IP with threat_intel_feed. ALERT on match
  - question: Is there statistically rare or anomalous usage of command-line download utilities on servers or by non-privileged users?
    context: This question focuses on behavioral anomaly detection. The act of using a command-line download utility can be suspicious in itself, especially on a server or by a non-developer. By establishing a baseline of normal activity and flagging statistically rare executions, analysts can identify unusual behavior that may indicate a compromised host, even if the destination is not on a threat list.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, database servers, application servers, non-developer user workstations, and DMZ-hosted servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: BASELINE download_utility_usage per host/user. ALERT if current_execution_frequency is in bottom 5th percentile (rare)
  - question: Has a machine learning model predicted a high probability of a file download being malicious?
    context: This question applies predictive analytics to assess the risk of a download event. A logistic regression model can analyze multiple features simultaneously—such as host role, user privileges, domain age of the URL, and time of day—to calculate a probability score. This provides a more robust detection method for malicious downloads that might evade simpler rules.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek files.log
      - Zeek conn.log
      - Domain Controllers, database servers, application servers, non-developer user workstations, and DMZ-hosted servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: PREDICT malicious_probability for download_event using ML_model. ALERT if probability > 0.85
  - question: Are there inbound web requests with 'Referer' headers containing search engine dorking operators?
    context: This question aims to detect active reconnaissance against the organization's public web servers. Adversaries use advanced search operators ('dorks') to find specific file types or vulnerable pages. By inspecting the 'Referer' header in web traffic logs, analysts can identify requests originating from these dorking queries, revealing that an adversary is actively probing for weaknesses.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network ingress points (firewalls, load balancers), public-facing web server farms, and reverse proxy servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH http_logs for referer_header matching dorking_patterns (e.g., 'filetype:', 'inurl:admin'). ALERT on match from external IP
  - question: Is any external IP address exhibiting anomalous browsing behavior, such as high URI entropy and a high error rate, indicative of automated scanning?
    context: This question helps differentiate automated scanning from normal user traffic. A scanning tool often requests many random or non-existent pages, leading to high URI entropy (randomness) and a high rate of 4xx errors. By baselining these metrics and alerting on significant deviations, analysts can detect targeted enumeration and scanning activity.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network ingress points (firewalls, load balancers), public-facing web server farms, and reverse proxy servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: CALCULATE URI_entropy and error_ratio per source_IP in 5min window. ALERT if entropy > baseline_98th_percentile AND error_ratio > baseline_98th_percentile
  - question: Has the volume of traffic from a search engine referrer significantly deviated from its forecasted model?
    context: This question uses time-series analysis to detect large-scale, automated reconnaissance campaigns. While some traffic from search engines is normal, a massive, sudden spike from a single IP claiming to be a search referrer is highly suspicious. By forecasting the expected traffic volume and alerting when the actual volume drastically exceeds the prediction, analysts can identify these campaigns.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network ingress points (firewalls, load balancers), public-facing web server farms, and reverse proxy servers
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: FORECAST expected_traffic_volume from search_engine_referrers using ARIMA model. ALERT if actual_volume > 99%_confidence_interval_of_forecast
  - question: Are internal hosts attempting to access known URLs hosting leaked organizational data?
    context: This question is critical for monitoring the internal impact of a known data leak. Once sensitive data is found to be exposed externally, it is vital to know if internal users or compromised systems are accessing it. This query checks outbound traffic against a watchlist of known leak URLs, providing a high-fidelity alert for such activity.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Network egress points, forward proxy server logs, DNS resolver logs, and user workstations subnets
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH outbound_http_logs for destination_url IN leaked_data_watchlist. ALERT on exact match
  - question: Are internal hosts accessing URLs that are highly similar to known leaked data URLs?
    context: This question enhances detection by looking for near-matches to known leak URLs. An adversary might slightly alter a URL or post data in a nearby directory. By calculating the similarity (e.g., Jaccard similarity) between requested URLs and the watchlist, analysts can catch attempts to access related resources that an exact-match rule would miss.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Network egress points, forward proxy server logs, DNS resolver logs, and user workstations subnets
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: CALCULATE Jaccard_similarity between requested_URL and watchlist_URLs. ALERT if similarity > 0.85
  - question: Has an anomaly detection model identified outbound web access to a potentially sensitive or leaked data URL as being abnormal for a user?
    context: This question uses unsupervised machine learning to find suspicious outbound traffic even without a pre-existing watchlist. By modeling a user's normal browsing behavior (e.g., typical domains, data volumes, site categories), an anomaly detection model like Isolation Forest can flag outlier requests. This can help detect access to a newly exposed data leak based on the unusual characteristics of the access itself.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Zeek conn.log
      - Network egress points, forward proxy server logs, DNS resolver logs, and user workstations subnets
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: MODEL user_browsing_behavior using Isolation_Forest. ALERT if a request is flagged as a significant anomaly