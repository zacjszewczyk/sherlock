name: T1553.001: Gatekeeper Bypass
id: f1b9a2c8-3d7e-4f6a-8b1c-9e0a2d5f4c3b
description: This playbook helps identify attempts by adversaries to bypass the macOS Gatekeeper security feature. Gatekeeper is designed to ensure that only trusted software runs on a user's Mac. Adversaries may bypass it by removing the `com.apple.quarantine` extended attribute from a downloaded file, executing applications with invalid or ad-hoc code signatures, or directly modifying system files that control Gatekeeper's behavior. Investigations focus on correlating network download events with suspicious endpoint activities like the use of the `xattr` command, anomalous process executions, and modifications to quarantine-related preference files.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are macOS hosts downloading files that match known malware signatures or connecting to known malicious infrastructure?
  context: This question seeks to identify the initial delivery of malware that may later attempt to bypass Gatekeeper. By matching file hashes and network indicators (IPs, domains) against threat intelligence, we can detect the arrival of known malicious payloads or C2 connections associated with actors who use this technique.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network egress points, DNS resolvers, and web proxies.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH (Zeek:files.log | HASH file | JOIN ThreatIntel:hashes) OR (Zeek:conn.log OR Zeek:dns.log | JOIN ThreatIntel:C2_indicators) | WHERE host is 'macOS' | ALERT
- question: Are any macOS hosts connecting to an unusually high number of new domains?
  context: This question uses statistical analysis to find anomalous network behavior that could indicate a C2 channel. A compromised macOS host, after bypassing Gatekeeper, might connect to domains not previously seen in the environment. Baselining normal activity and alerting on deviations can uncover these novel connections, especially when combined with other indicators like rare JA3/JA3S hashes.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network egress points, DNS resolvers, and web proxies.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: FOR each macOS_host | COUNT daily new_domains (not seen in 30 days) | IF count > 95th_percentile_baseline | ALERT
- question: Can network traffic from macOS hosts be classified as malicious C2 communication using a machine learning model?
  context: This question applies a classification model to proactively identify malicious C2 traffic, even from unknown threats. By training a model on features like connection duration, data volume, and DNS query characteristics, we can score all new connections from macOS hosts and flag those that strongly resemble known C2 patterns, which often follow a successful Gatekeeper bypass.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feed
  - Network egress points, DNS resolvers, and web proxies.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: FROM Zeek logs | EXTRACT features (duration, bytes, dns_entropy, etc.) | INPUT to RandomForestModel | WHERE prediction is 'malicious' AND confidence > 0.9 | ALERT
- question: Is the `xattr` command being used to remove the quarantine attribute from recently downloaded files?
  context: This is a direct detection for a common Gatekeeper bypass. The `com.apple.quarantine` attribute is set by macOS on files downloaded from the internet. Adversaries use `/usr/bin/xattr` with the `-d` or `-c` flag to remove this attribute, thereby preventing Gatekeeper from inspecting the file upon execution. Monitoring for this specific command-line usage, especially on files in `Downloads` or temporary directories, is a high-fidelity indicator of this technique.
  answer_sources:
  - EDR process execution logs
  - macOS Endpoint Security Framework events
  - Sysmon for macOS Event ID 1
  - bash_history
  - zsh_history
  - All managed macOS endpoints, particularly developer and executive workstations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH process_events | WHERE process_name is 'xattr' AND command_line contains ('-d com.apple.quarantine' OR '-c') AND target_file_path contains ('/Users/*/Downloads/' OR '/private/var/tmp/') | ALERT
- question: Is the `xattr` command being executed by an unusual parent process?
  context: Legitimate use of `xattr` is rare and typically initiated by a user in a terminal. An adversary might automate the bypass by having a malicious script or application (e.g., a weaponized document macro) execute `xattr`. This question aims to find such anomalies by baselining normal parent-child process relationships and alerting when `xattr` is spawned by an unlikely parent, such as an office application or a browser.
  answer_sources:
  - EDR process execution logs
  - macOS Endpoint Security Framework events
  - Sysmon for macOS Event ID 1
  - bash_history
  - zsh_history
  - All managed macOS endpoints, particularly developer and executive workstations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH process_events WHERE process_name is 'xattr' | CALCULATE probability P(xattr | parent_process) | IF P < 0.01 | ALERT
- question: Does endpoint event sequencing show a pattern of file download, quarantine removal, and execution?
  context: This question uses a state-based model (HMM) to detect the logical chain of a Gatekeeper bypass attack. Benign user activity follows certain patterns. A sequence of events like a browser writing a file, followed immediately by `xattr` removing its quarantine attribute, followed by the file's execution and subsequent network activity, is a highly suspicious, low-probability sequence that strongly indicates malicious intent.
  answer_sources:
  - EDR process execution logs
  - macOS Endpoint Security Framework events
  - Sysmon for macOS Event ID 1
  - bash_history
  - zsh_history
  - All managed macOS endpoints, particularly developer and executive workstations.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: MODEL event_sequences with HMM | IDENTIFY low_probability_transitions | IF sequence is (BrowserWrite -> xattr -> FileExec -> NetConn) | ALERT
- question: Can we detect a correlated sequence of file download, quarantine removal, execution, and subsequent network connection within a short timeframe?
  context: This question aims to build a high-confidence alert by correlating evidence from both network and endpoint data sources. Tying a specific file download seen on the network to the subsequent removal of its quarantine attribute and its execution on the endpoint, all within a few minutes, provides a complete narrative of the attack chain and reduces the likelihood of false positives.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - EDR process execution logs
  - Network egress points and all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: CORRELATE (Zeek:files.log.hash, EDR:xattr.target_file.hash, EDR:process_exec.hash) ON host_ip within 5 minutes | ALERT
- question: Following a potential Gatekeeper bypass, is the subsequent network connection to a high-entropy or newly seen domain/ASN?
  context: After a successful bypass and execution, malware often establishes C2 communication. Adversaries frequently use domain generation algorithms (DGAs) or newly registered domains to evade blocklists. This question prioritizes alerts from the correlated symbolic rule by analyzing the follow-on network traffic. Connections to domains with high character entropy or to autonomous systems (ASNs) never before seen in the environment are strong indicators of malicious C2.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - EDR process execution logs
  - Network egress points and all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: ON correlated_bypass_alert | ANALYZE subsequent Zeek:dns.log, Zeek:conn.log | IF domain_entropy > 4.0 OR destination_asn is new_in_30_days | INCREASE alert_priority
- question: Does the network traffic from a newly executed process (post-bypass) exhibit periodic, heartbeat-like C2 beaconing?
  context: This question applies signal processing techniques to identify the characteristic 'heartbeat' of C2 beaconing. Malware often communicates with its C2 server at regular intervals. By analyzing the time series of connections from a process that was executed after a bypass, a Fast Fourier Transform (FFT) can reveal this periodicity as a strong peak in the frequency domain, providing compelling evidence of an active C2 channel.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek dns.log
  - EDR process execution logs
  - Network egress points and all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: ON correlated_bypass_alert | CAPTURE subsequent connection timestamps and bytes | APPLY FFT to time_series | IF strong_periodic_signal_detected | ALERT
- question: Are quarantined files with invalid, revoked, or ad-hoc signatures being executed?
  context: This question identifies another bypass method where Gatekeeper's code-signing checks are subverted. While Gatekeeper is supposed to block unsigned or improperly signed code, adversaries may find ways to execute it anyway. This rule explicitly looks for the execution of a file that still has the quarantine attribute but fails code signature validation, which should not happen under normal circumstances.
  answer_sources:
  - EDR process execution logs with code signature details
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)
  - All managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH process_events | WHERE file.has_quarantine_attr is true AND code_signing_status in ('unsigned', 'invalid', 'revoked', 'ad-hoc') | ALERT
- question: Are quarantined files signed by rare or new developer certificates being executed?
  context: Adversaries may use stolen, temporary, or newly created developer certificates to sign their malware, hoping to appear legitimate. This question aims to detect such abuse by baselining all developer certificates seen in the environment. An application signed by a certificate that is new or has a very small footprint (i.e., seen on less than 1% of hosts) is highly suspicious and warrants investigation.
  answer_sources:
  - EDR process execution logs with code signature details
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)
  - All managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH process_events WHERE file.has_quarantine_attr | CALCULATE prevalence of signing_certificate_id | IF prevalence < 1% of endpoints | ALERT
- question: Do newly executed quarantined applications exhibit outlier characteristics in their code-signing information?
  context: This question uses an anomaly detection model to find malicious applications masquerading as legitimate, signed software. By training a model on the features of known-good applications (e.g., certificate authority, developer, age), it can identify and flag new applications whose code-signing attributes are statistical outliers, suggesting they may be forged, stolen, or otherwise illegitimate.
  answer_sources:
  - EDR process execution logs with code signature details
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)
  - All managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: FOR each new_quarantined_app_execution | EXTRACT code_signing_features | SCORE with one-class_SVM_model | IF score is 'outlier' | ALERT
- question: Is the Gatekeeper quarantine database or an application's Info.plist being modified to disable quarantine checks?
  context: This question targets attempts to disable Gatekeeper's functionality at a more fundamental level. Adversaries might modify the central database (`QuarantineEventsV2`) where quarantine information is stored, or alter an application's own configuration file (`Info.plist`) to include a key that tells the system not to apply quarantine checks to it. Monitoring these specific files for unauthorized changes is key to detecting this bypass variant.
  answer_sources:
  - File Integrity Monitoring (FIM) logs
  - EDR file modification events
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)
  - User `Library` directories and Application bundle directories on all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH file_modification_events | WHERE (file_path ends with 'QuarantineEventsV2' AND process_name is not 'launchservicesd') OR (file_path ends with 'Info.plist' AND file_diff contains 'LSFileQuarantineEnabled') | ALERT
- question: Are Info.plist files being modified by statistically rare processes?
  context: While some legitimate processes like installers and updaters modify `Info.plist` files, such modifications by other, unexpected processes can be a sign of tampering. This question establishes a baseline of normal processes that interact with these files and alerts on modifications made by any process that is statistically rare across the environment, potentially indicating a malicious script or tool trying to disable Gatekeeper for a specific app.
  answer_sources:
  - File Integrity Monitoring (FIM) logs
  - EDR file modification events
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)
  - User `Library` directories and Application bundle directories on all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: SEARCH file_mod_events WHERE file_path ends with 'Info.plist' | CALCULATE rarity_score of process_name | IF rarity_score is in 99th_percentile | ALERT
- question: Can we detect anomalous modifications to Info.plist files using an outlier detection model?
  context: This question applies unsupervised machine learning to detect suspicious modifications to `Info.plist` files. An Isolation Forest model can learn the patterns of normal modifications (e.g., which processes are involved, time of day, parent processes) from historical data. It can then identify and alert on new modification events that deviate significantly from this learned baseline, flagging them as potential anomalies for investigation.
  answer_sources:
  - File Integrity Monitoring (FIM) logs
  - EDR file modification events
  - macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)
  - User `Library` directories and Application bundle directories on all managed macOS endpoints.
  range: last 90 days
  queries:
  - tech: pseudocode
    query: FROM file_mod_events on 'Info.plist' | EXTRACT features (process, parent, time) | SCORE with IsolationForestModel | IF score is 'anomaly' | ALERT