name: 'T1553.001: Gatekeeper Bypass'
id: 'f3a9e8b1-4d7c-4a1e-8b9a-2c0f1d3e4b5a'
description: 'Investigates whether an adversary is bypassing macOS Gatekeeper to execute untrusted code. This involves monitoring for network transfers of known malware, suspicious command-line usage of `xattr` to remove quarantine attributes, correlated sequences of file download and execution, execution of quarantined files with invalid code signatures, and direct modification of Gatekeeper''s configuration files like `com.apple.LaunchServices.QuarantineEventsV2` or an application''s `Info.plist`.'
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: 'none'
questions:
  - question: 'Are there network indicators suggesting a Gatekeeper bypass, such as downloads of known malware or connections to malicious C2 domains from macOS hosts?'
    context: 'This question seeks to identify initial network-based evidence of a Gatekeeper bypass attempt. By monitoring network traffic for files matching known malware signatures and connections to command-and-control infrastructure, analysts can detect threats before or during the execution phase on the endpoint. Correlating this with macOS user-agent strings helps focus on relevant systems.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Threat Intelligence Feed'
      - 'Network egress points, DNS resolvers, and web proxies.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Symbolic: Continuously process Zeek files.log, hash all observed files, and join the results against a threat intelligence feed of known-malware hashes. Correlate with Zeek http.log to check for macOS user-agent strings. Simultaneously, join the destination IP from Zeek conn.log and the queried domain from Zeek dns.log against a C2 threat intelligence feed and alert on any match originating from a known macOS host IP range.'
  - question: 'Are any macOS hosts connecting to an unusually high number of new domains, potentially indicating C2 activity associated with a Gatekeeper bypass?'
    context: 'This question uses a statistical approach to find anomalous network behavior. Adversaries often use newly registered or previously unseen domains for C2. By baselining normal activity and looking for outliers in the number of new domains contacted by macOS hosts, analysts can uncover covert communication channels. The rarity of the TLS fingerprint (JA3/JA3S) can further prioritize suspicious connections.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Threat Intelligence Feed'
      - 'Network egress points, DNS resolvers, and web proxies.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Statistical: For all macOS hosts, establish a baseline for connections to newly seen domains (domains not present in the last 30 days of logs). Calculate the 95th percentile for the daily count of new domains contacted per host. Alert when a host exceeds this threshold, and increase the alert''s priority if the JA3/JA3S hash of the connection is also rare (seen in <1% of connections enterprise-wide).'
  - question: 'Can we use a machine learning model to score and identify malicious C2 connections from macOS hosts that might be related to a Gatekeeper bypass?'
    context: 'This question leverages machine learning to proactively identify malicious traffic that may not be caught by signature-based or simple statistical methods. By training a model on various network connection features (duration, data volume, protocol, DNS characteristics), it can learn the subtle patterns of C2 communication and assign a risk score, enabling analysts to focus on the highest-risk connections from macOS endpoints.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Threat Intelligence Feed'
      - 'Network egress points, DNS resolvers, and web proxies.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Machine Learning: Train a Random Forest classification model to distinguish benign from malicious C2 traffic. Use features from Zeek logs including connection duration, originated bytes, responded bytes, protocol, DNS query length and entropy, and the presence of a JA3/JA3S hash. Score all new connections from macOS hosts to generate a risk rating and alert on connections classified as malicious with high confidence.'
  - question: 'Has the `xattr` command been used to remove the `com.apple.quarantine` attribute from a recently downloaded file?'
    context: 'This question targets a direct and common method for bypassing Gatekeeper. The `com.apple.quarantine` extended attribute is what flags a file as having been downloaded from the internet, triggering Gatekeeper''s checks. An adversary or malicious script will use `xattr` to remove this attribute to allow untrusted code to execute without user warning. Monitoring for this specific command, especially on files in `Downloads` or temporary directories, is a high-fidelity indicator of this technique.'
    answer_sources:
      - 'EDR process execution logs'
      - 'macOS Endpoint Security Framework events'
      - 'Sysmon for macOS Event ID 1'
      - 'bash_history'
      - 'zsh_history'
      - 'All managed macOS endpoints, particularly developer and executive workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Symbolic: Create a detection rule to trigger on process executions where the command line contains `/usr/bin/xattr` and (`-d com.apple.quarantine` or `-c`). Increase the alert priority if the parent process is a shell (`bash`, `zsh`, `sh`) or terminal emulator (`Terminal.app`, `iTerm.app`) and the target file path is within `/Users/*/Downloads/` or `/private/var/tmp/`.'
  - question: 'Is the `xattr` command being executed by a statistically unusual parent process?'
    context: 'This question aims to find abuse of `xattr` by looking for anomalous process relationships. Legitimate use of `xattr` is typically initiated by a user in a terminal or by specific system processes. If an application like a word processor or a document viewer spawns `xattr`, it is highly suspicious and could indicate a vulnerability being exploited to execute a payload that then attempts to bypass Gatekeeper for a second-stage file.'
    answer_sources:
      - 'EDR process execution logs'
      - 'macOS Endpoint Security Framework events'
      - 'Sysmon for macOS Event ID 1'
      - 'bash_history'
      - 'zsh_history'
      - 'All managed macOS endpoints, particularly developer and executive workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Statistical: Baseline parent-child process relationships across the macOS fleet. Calculate the conditional probability P(`xattr` execution | Parent Process Name). Alert when `xattr` is executed by a statistically unlikely parent process (e.g., `Microsoft Word.app`, `Preview.app`) that falls below a low probability threshold (e.g., P < 0.01).'
  - question: 'Does a sequence of endpoint events, such as a file download followed by `xattr` execution and then a network connection, indicate a Gatekeeper bypass?'
    context: 'This question uses sequence analysis to detect the entire attack chain associated with a Gatekeeper bypass. Individual events might not be malicious, but the specific sequence of downloading a file, removing its quarantine flag, executing it, and then seeing it connect to the network is a strong pattern of malicious behavior. An HMM or similar model can learn normal sequences and flag these low-probability attack chains.'
    answer_sources:
      - 'EDR process execution logs'
      - 'macOS Endpoint Security Framework events'
      - 'Sysmon for macOS Event ID 1'
      - 'bash_history'
      - 'zsh_history'
      - 'All managed macOS endpoints, particularly developer and executive workstations.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Machine Learning: Implement a Hidden Markov Model (HMM) to analyze sequences of endpoint events. Train the model on benign activity to learn normal state transitions. Alert when the model detects a low-probability sequence of states, such as (State: Browser File Write) -> (State: `xattr` execution) -> (State: File Execution) -> (State: External Network Connection).'
  - question: 'Can we correlate network file download events with on-host `xattr` removal and subsequent process execution within a short time window?'
    context: 'This question seeks to create a high-fidelity alert by combining network and endpoint data. By linking a specific file download observed on the network to the same file having its quarantine attribute removed and then being executed on the endpoint, analysts can build a complete picture of the attack. A short time window (e.g., 5 minutes) ensures the events are almost certainly related.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'EDR process execution logs'
      - 'Network egress points and all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Symbolic: Create a SIEM correlation rule that triggers when a file hash from a Zeek files.log event is subsequently seen in an EDR process execution log with `xattr -d com.apple.quarantine` and then as the executed process image. All events must originate from the same host IP and occur within a 5-minute window.'
  - question: 'For correlated bypass events, does the subsequent network connection go to a high-entropy or rare domain/ASN?'
    context: 'This question helps prioritize alerts generated from correlated events. Once a likely bypass is detected, analyzing the follow-on network connection provides crucial context. Connections to domains with high entropy (random-looking names) or to Autonomous Systems (ASNs) never before seen in the environment are strong indicators of C2 traffic, suggesting the executed payload is malicious and warrants immediate investigation.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'EDR process execution logs'
      - 'Network egress points and all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Statistical: For alerts generated by the symbolic rule, analyze the follow-on network connection. Calculate the entropy of the requested domain in Zeek dns.log and the destination ASN from Zeek conn.log. Prioritize investigations where domain entropy exceeds 4.0 or the destination ASN has not been seen in the environment in the last 30 days.'
  - question: 'Does the network traffic from a process executed after a Gatekeeper bypass exhibit periodic, ''heartbeat'' beaconing behavior?'
    context: 'This question applies signal processing techniques to identify C2 communications. Malicious implants often ''beacon'' back to their C2 server at regular intervals. By analyzing the time series of network connections from a suspicious process, techniques like FFT can detect this periodicity, which is a classic sign of automated C2 activity. This provides strong evidence that the executed process is malicious.'
    answer_sources:
      - 'Zeek files.log'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'EDR process execution logs'
      - 'Network egress points and all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Machine Learning: For correlated event chains, apply a Fast Fourier Transform (FFT) to the time series of subsequent connection events (timestamps and byte counts from Zeek conn.log) from the newly executed process. A strong peak in the frequency domain indicates periodic, ''heartbeat'' C2 beaconing. Alert on any detected periodic signal with a high signal-to-noise ratio.'
  - question: 'Is a quarantined file being executed despite having an invalid, revoked, or ad-hoc code signature?'
    context: 'This question identifies a scenario where Gatekeeper should have blocked an execution but didn''t, pointing to a potential bypass or misconfiguration. A file with the quarantine attribute should undergo a signature check. Execution of such a file when its signature is invalid, revoked by Apple, or is a simple ad-hoc signature (often used by developers but suspicious for distributed software) is a significant red flag.'
    answer_sources:
      - 'EDR process execution logs with code signature details'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)'
      - 'All managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Symbolic: Create a detection rule that triggers on any process execution event where the source file has the `com.apple.quarantine` extended attribute present and the associated code signing status is ''unsigned'', ''invalid'', ''revoked'', or ''ad-hoc signed''.'
  - question: 'Is a quarantined file being executed that is signed by a statistically rare developer certificate or team ID?'
    context: 'This question uses rarity analysis to find suspicious code signing certificates. While a valid signature might pass a basic Gatekeeper check, one from a developer or team ID never seen before, or seen on very few hosts, is highly suspect. This is a common tactic for malware authors who burn through cheap or stolen developer certificates. It also helps identify users who are executing an unusual amount of ad-hoc signed code, which could be a sign of risky behavior or a targeted attack.'
    answer_sources:
      - 'EDR process execution logs with code signature details'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)'
      - 'All managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Statistical: Maintain a baseline of all developer certificate subjects and team IDs seen in the environment. Calculate the prevalence of each (e.g., number of hosts it''s seen on). Alert when a quarantined file is executed that is signed by a certificate seen on fewer than 1% of endpoints or is new to the environment. Also, monitor the ratio of ad-hoc signed to properly signed quarantined executions per user; alert on users in the 95th percentile.'
  - question: 'Can a machine learning model identify outlier applications with suspicious code signing characteristics among executed quarantined files?'
    context: 'This question aims to automate the detection of suspicious code signing properties using anomaly detection. By training a model on the characteristics of known-good, properly signed applications (e.g., certificate authority, developer, age), it can learn what ''normal'' looks like. When a new quarantined application is executed, the model can score it and flag outliers that deviate significantly from this norm, even if the signature is technically valid.'
    answer_sources:
      - 'EDR process execution logs with code signature details'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_EXEC)'
      - 'All managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Machine Learning: Train a one-class SVM on features of known-good, properly signed applications, including certificate authority, developer name, certificate age, code-signing flags (`cs_flags`), and Team ID. Use this model to score all newly executed quarantined applications and identify outliers with suspicious signing characteristics.'
  - question: 'Has Gatekeeper''s quarantine database or an application''s Info.plist been modified to disable quarantine checks?'
    context: 'This question targets direct manipulation of Gatekeeper''s configuration. An adversary might modify the central `QuarantineEventsV2` database to remove an entry for a malicious file, or alter an application''s `Info.plist` to tell the system not to apply quarantine checks to it. Monitoring these specific files for unauthorized modifications is a critical, high-fidelity way to detect this bypass technique.'
    answer_sources:
      - 'File Integrity Monitoring (FIM) logs'
      - 'EDR file modification events'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)'
      - 'User `Library` directories and Application bundle directories on all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Symbolic: Deploy a File Integrity Monitoring (FIM) rule to alert on any write or delete operation to `*/com.apple.LaunchServices.QuarantineEventsV2` where the process name is not `launchservicesd`. Create a second rule to alert on any modification to an `Info.plist` file where a diff analysis shows the addition of `<key>LSFileQuarantineEnabled</key><false/>`.'
  - question: 'Has an `Info.plist` file been modified by a statistically rare process?'
    context: 'This question helps find suspicious modifications to `Info.plist` files by focusing on the actor. Legitimate modifications are typically performed by a small, predictable set of processes like installers or system tools. A modification by a process not on this allowlist, especially a process rarely seen in the environment, is a strong indicator of malicious activity attempting to configure a bypass.'
    answer_sources:
      - 'File Integrity Monitoring (FIM) logs'
      - 'EDR file modification events'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)'
      - 'User `Library` directories and Application bundle directories on all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Statistical: Establish a baseline of processes that legitimately modify `Info.plist` files (e.g., `installer`, `system_profiler`, specific software updaters). For any modification by a process not on this allowlist, calculate a rarity score based on the inverse frequency of the process name across all macOS endpoints. Alert on modifications by processes in the 99th percentile of rarity.'
  - question: 'Can an anomaly detection model identify suspicious modifications to `Info.plist` files?'
    context: 'This question uses machine learning to find anomalous file modification events that may not be caught by simple rules. By considering a combination of features like the process name, its parent, the time of day, and file path, an Isolation Forest or similar model can learn the profile of normal `Info.plist` modifications and flag unusual events that represent a significant deviation from this baseline.'
    answer_sources:
      - 'File Integrity Monitoring (FIM) logs'
      - 'EDR file modification events'
      - 'macOS Endpoint Security Framework events (ES_EVENT_TYPE_NOTIFY_WRITE)'
      - 'User `Library` directories and Application bundle directories on all managed macOS endpoints.'
    range: 'last 90 days'
    queries:
      - 'pseudocode': 'Machine Learning: Apply an Isolation Forest anomaly detection model to features of file modification events on `Info.plist` files. Features should include the acting process name, parent process name, time of day, and file path. Train the model on historical data to identify and alert on modifications that are statistical outliers.'