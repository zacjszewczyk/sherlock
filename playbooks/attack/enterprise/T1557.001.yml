name: T1557.001: LLMNR-NBT-NS Poisoning and SMB Relay
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversarial attempts to gain credential access using LLMNR/NBT-NS poisoning and SMB relay attacks. It focuses on detecting the initial poisoning activity through suspicious process execution and anomalous network traffic, as well as the subsequent credential relay attempts indicated by patterns of failed logons. Furthermore, it addresses post-compromise collection activities, such as an adversary using successfully relayed credentials to establish persistence, perform anomalous logons, and access or exfiltrate data from network shares.
type: technique
related:
- TA0006: Credential Access
- TA0009: Collection
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any process creation events with command-line arguments matching known LLMNR/NBT-NS poisoning tools like Responder or Inveigh?
  context: This question aims to directly identify the execution of common poisoning and relay tools by looking for their characteristic command-line signatures. Adversaries often use tools like Responder.py, Inveigh, or ntlmrelayx.py to intercept network name resolution requests and relay credentials. Finding these specific command-line patterns is a high-fidelity indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE command_line CONTAINS_REGEX /(Responder\.py|Invoke-Inveigh|ntlmrelayx\.py)/ OR command_line CONTAINS_REGEX /(-I\s+\w+|-w|--lm|--disable-ess)/
- question: Have any processes, particularly interpreters like powershell.exe, been executed with unusually long or complex command-line arguments?
  context: Adversaries may obfuscate their commands to evade simple keyword-based detection. This question uses statistical analysis (command-line length and Shannon entropy) to find outliers. A command that is significantly longer or has higher entropy than the historical baseline for that process (e.g., powershell.exe) could indicate obfuscated scripts or commands, such as those used to launch poisoning tools in a less obvious manner.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH parent_process CALCULATE baseline_length_entropy | SEARCH process_creation_logs WHERE command_line_length > 95th_percentile_baseline OR command_line_entropy > 95th_percentile_baseline
- question: Can machine learning models identify process creation events likely associated with LLMNR/NBT-NS poisoning based on command-line features?
  context: This question leverages a machine learning approach for more sophisticated detection. By training a model on features like argument length, entropy, special character counts, and keyword presence, it's possible to assign a 'maliciousness' score to each command. This helps identify novel or heavily obfuscated variations of poisoning tools that might be missed by signature or statistical methods.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT process_creation_events INTO ML_model | OUTPUT events WHERE maliciousness_score > confidence_threshold
- question: Is there any LLMNR (UDP/5355) or NBT-NS (UDP/137) traffic originating from an unauthorized host?
  context: In a well-managed network, LLMNR and NBT-NS are often disabled. If they are used, the legitimate responders are known. This question aims to detect rogue responders by checking traffic on these ports against a watchlist of authorized sources. Any traffic from an unauthorized source, or any traffic at all in a disabled environment, is a strong indicator of a poisoning attempt.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_traffic WHERE (dest_port=5355 OR dest_port=137) AND protocol=UDP AND source_ip NOT IN authorized_responder_list | CORRELATE with Zeek_notice='LLMNR_NBT-NS_Spoofing'
- question: Has any single host sent LLMNR/NBT-NS responses to an unusually large number of unique destinations in a short time frame?
  context: LLMNR/NBT-NS poisoning tools work by responding to many different broadcast name resolution requests from various hosts on the local network. This question identifies this 'one-to-many' response pattern by looking for a source IP that communicates with an anomalously high number of unique destination IPs on ports 5355 or 137 within a small time window (e.g., 5 minutes).
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM network_traffic WHERE (dest_port=5355 OR dest_port=137) | GROUPBY source_ip over 5_minutes | CALCULATE unique_dest_ip_count | ALERT WHERE unique_dest_ip_count > 99th_percentile_baseline
- question: Has any host exhibited a sudden and uncharacteristic spike in its volume of LLMNR/NBT-NS response traffic?
  context: This question uses time-series analysis to detect behavioral changes. A legitimate host, if it uses these protocols at all, will have a relatively stable pattern of traffic. A host that suddenly starts acting as a poisoner will show a dramatic, anomalous increase in response traffic. This method can catch attacks even if the absolute volume isn't high, as long as it deviates from the host's normal behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Zeek weird.log
  - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR EACH host MODEL time_series of LLMNR_NBT-NS_traffic | ALERT where observed_traffic > forecasted_traffic_confidence_interval
- question: Has a single source IP, previously flagged for suspicious LLMNR/NBT-NS activity, generated a high volume of failed network logons (NTLM) against multiple users and hosts?
  context: This question connects the poisoning activity to the credential relay attempt. After a poisoner intercepts a credential hash, a relay tool will try to use it to authenticate to various machines. This often results in a spray of failed logons (Event ID 4625, Logon Type 3) from the attacker's machine targeting many different accounts and systems. Correlating this with prior LLMNR/NBT-NS alerts provides strong evidence of an attack.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH failed_logons (EventID=4625, LogonType=3, StatusCode=0xC000006A) | GROUPBY source_ip over 10_minutes | ALERT WHERE source_ip IN suspicious_LLMNR_hosts AND unique_user_count > 5 AND unique_dest_host_count > 5
- question: Is there any source IP exhibiting an extremely high failure rate for network logon attempts?
  context: A credential relay or spray attack is inherently noisy and generates many more failures than successes. This question identifies potential attackers by calculating the ratio of failed to total logon attempts from each source IP. A source with a failure rate over 90% with a significant number of attempts is highly suspicious and indicative of an automated attack.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FROM authentication_logs over 5_minutes | GROUPBY source_ip | CALCULATE failure_ratio = failed_logons / total_logons | ALERT WHERE failure_ratio > 0.90 AND total_logons > 20
- question: Can clustering algorithms identify dense groups of failed authentications that point to a credential relay attack?
  context: This question uses unsupervised machine learning to find attack patterns. A relay attack creates a dense cluster of events where a single source IP targets many unique destination/user combinations. A clustering algorithm like DBSCAN can automatically identify these anomalous, high-density clusters of failed logons that are characteristic of such attacks.
  answer_sources:
  - Windows Event ID 4625
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT authentication_events (source_ip, dest_host, user, time) INTO DBSCAN_algorithm | ALERT on dense_clusters WHERE source_ip_is_constant AND user_host_pairs_are_diverse
- question: Has a process executed whose file hash matches a known signature for tools like Responder or Inveigh?
  context: This is a high-fidelity, signature-based detection method. By matching the file hashes of executed processes against a curated list of known malicious tool hashes, we can identify the presence of these tools on an endpoint with high confidence, even if the filename has been changed.
  answer_sources:
  - Sysmon Event ID 1
  - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE process_hash IN known_malicious_hash_list
- question: Has a rare or unique executable, associated with a suspicious parent process or network activity, been observed in the environment?
  context: Adversary tools are often not part of standard software deployments and will therefore be rare in an environment. This question hunts for these 'low prevalence' executables. An executable seen on only one or a few hosts, especially if launched by an interpreter like PowerShell or associated with suspicious network connections, is a strong candidate for being a malicious tool.
  answer_sources:
  - Sysmon Event ID 1
  - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE prevalence for each process_hash | ALERT WHERE prevalence < 3 AND (parent_process IN ('powershell.exe', 'python.exe') OR has_network_connection on ports (137, 5355, 445))
- question: Can static analysis of newly observed executables proactively identify unknown or packed variants of credential relaying tools?
  context: Adversaries may modify or pack their tools to evade hash-based detection. This question proposes a proactive approach where every new executable file is analyzed. A machine learning model trained on PE file features (like imports, sections, and string characteristics) can classify files as malicious, catching novel variants of tools like Responder or Inveigh before they are widely known.
  answer_sources:
  - Sysmon Event ID 1
  - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each new_executable_hash EXTRACT PE_features | INPUT features INTO ML_classifier | ALERT if prediction is 'malicious'
- question: Has a new Windows service been created with a suspicious name, description, or binary path indicative of a poisoning tool?
  context: To maintain persistence, an adversary might install their poisoning tool as a service. This question looks for tell-tale signs in service creation events (Event ID 7045). Keywords like 'responder' or 'relay' in the service name, or a service binary located in a non-standard directory like a user's Temp folder, are strong indicators of malicious activity.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH service_creation_logs (EventID=7045) WHERE service_name MATCHES_REGEX /(responder|inveigh|spoofer|relay)/ OR service_path IN ('C:\Users\*', 'C:\Temp\*', 'C:\Perflogs\*')
- question: Has a new service been installed with anomalous attributes compared to the environment's baseline?
  context: Legitimate software installations typically follow predictable patterns. This question aims to find outliers by comparing new service installations to a historical baseline. A service is considered anomalous if its attributes—such as the path of its binary, the process that installed it, or the account it runs under—are rare or have never been seen before. This behavioral approach can detect malicious persistence that avoids obvious keywords.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each new_service_creation_event CALCULATE anomaly_score based on rarity_of (binary_path, installer_process, service_account) | ALERT if score > threshold
- question: Can a machine learning model classify newly created services as malicious based on their configuration properties?
  context: This question applies machine learning to automate the detection of malicious services. A model can be trained to recognize patterns of malicious persistence, using features like whether the service binary is signed, the entropy of its name, and its location. This allows for the flagging of suspicious services even if they don't match simple rule-based logic.
  answer_sources:
  - Windows Event ID 7045
  - Sysmon Event ID 13
  - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each new_service_creation_event EXTRACT features (is_signed, name_entropy, path_location, run_account) | INPUT features INTO ML_classifier | ALERT if prediction is 'malicious'
- question: Has a successful network logon occurred from a source IP address recently associated with poisoning or relay activity?
  context: This question directly links the initial attack phase (poisoning) with a successful outcome (credential use). A successful network logon (Event ID 4624, Logon Type 3) from an IP that was just flagged for suspicious LLMNR/NBT-NS traffic or a high rate of logon failures is a critical alert, indicating the adversary has successfully captured and used a credential.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH successful_logons (EventID=4624, LogonType=3) WHERE source_ip IN suspicious_relay_hosts_list (from last 30 minutes) AND source_ip NOT IN known_management_servers
- question: Has a user successfully logged on from a new or infrequent source workstation?
  context: Users typically log on from a limited set of machines (e.g., their primary workstation, a jump server). This question establishes a baseline of normal user logon behavior and flags deviations. A successful logon from a workstation a user has never used before (or hasn't used in a long time) is anomalous and could indicate a compromised credential being used from an attacker-controlled machine on the network.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each successful_logon (user, source_host) CHECK if (user, source_host) pair is new or not seen in > 30 days | ALERT on new_or_rare_pairs
- question: Does a user's successful logon event deviate significantly from their normal behavioral cluster?
  context: This question models a user's 'normal' activity profile using machine learning. By clustering logons based on multiple features (source, destination, protocol, time of day), we can define what is typical for a user or role. A successful logon that falls far outside a user's established cluster is a strong anomaly, suggesting their credentials may be used in a way that is inconsistent with their normal duties.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Zeek ntlm.log
  - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user CREATE logon_behavior_cluster | FOR each new_successful_logon CALCULATE distance_from_cluster_centroid | ALERT if distance > threshold
- question: Following a suspicious logon, did the session involve accessing an unusually high number of directories or files with sensitive names on a network share?
  context: After gaining access, adversaries often perform reconnaissance or collect data. This question looks for this post-compromise activity by monitoring SMB sessions originating from a suspicious source. Rapidly traversing many directories or accessing files named 'password.txt' or 'config.xml' immediately after an anomalous logon is a strong indicator of malicious data collection.
  answer_sources:
  - Zeek smb_files.log
  - Zeek files.log
  - Windows Event ID 5145
  - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MONITOR SMB_sessions from suspicious_source_ip | ALERT if unique_directory_count > 100 in 5_minutes OR accessed_filename MATCHES_REGEX /(password|config|secret|backup|lsass\.dmp)/
- question: Did an SMB session, following a suspicious logon, involve a volume of file access or data transfer that is anomalous for that specific user?
  context: This question personalizes detection by comparing a user's activity to their own historical baseline. A user who normally accesses a few files per day suddenly transferring gigabytes of data is a major red flag. By alerting when a user's SMB activity (file count, data volume) significantly exceeds their own 99th percentile, we can detect data collection that might look normal for a different user role.
  answer_sources:
  - Zeek smb_files.log
  - Zeek files.log
  - Windows Event ID 5145
  - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user CALCULATE baseline_SMB_activity (avg_files, avg_bytes) | AFTER suspicious_logon, MONITOR SMB_session | ALERT if files_accessed > 99th_percentile_baseline OR bytes_transferred > 99th_percentile_baseline
- question: Did a user's file access rate on a network share exhibit a sudden, sharp spike inconsistent with their historical pattern?
  context: Human users access files at a relatively sporadic pace. Automated tools used for data collection access files very rapidly and systematically. This question uses time-series analysis to detect this machine-like speed. A sudden burst in the rate of file access events for a user session that deviates from their normal, learned rhythm is a strong indicator of automated data exfiltration or enumeration.
  answer_sources:
  - Zeek smb_files.log
  - Zeek files.log
  - Windows Event ID 5145
  - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user_SMB_session MODEL time_series of file_access_rate | ALERT where observed_rate > forecasted_rate_confidence_interval