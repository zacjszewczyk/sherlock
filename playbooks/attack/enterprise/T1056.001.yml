name: T1056.001: Keylogging
id: 5e88e1e0-a75d-4a1d-85f2-9d3e6a0d268b
description: |
  This playbook is designed to detect adversarial activity related to keylogging, covering both the initial installation of keylogging software and the subsequent collection and staging of captured data for exfiltration. It focuses on identifying known keylogger artifacts like files and registry keys, the loading of suspicious or unsigned kernel drivers, and anomalous process behaviors such as loading keyboard-related libraries without a graphical interface. Additionally, it looks for preparatory actions like the deletion of browser cookies by non-browser processes. The playbook also addresses the collection phase by searching for high-entropy or randomly named staging files and pipes, and it identifies exfiltration through patterns like low-reputation destinations, rare TLS fingerprints (JA3), and periodic, low-volume network beaconing.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any files or registry keys been created or modified that match known keylogger indicators of compromise (IOCs)?
    context: |
      This question aims to identify keylogging activity by matching file hashes or registry paths against a threat intelligence feed of known malicious artifacts. A match provides a high-confidence signal that a known keylogger is present on the system.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
      - Terminal Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH file creation (Sysmon 11) and registry modification (Sysmon 13) events WHERE file_hash OR registry_path IN known_keylogger_ioc_list
  - question: Has there been an anomalous number of modifications to registry keys commonly abused for keylogging?
    context: |
      Keyloggers often modify specific registry keys for persistence. By baselining normal modification activity for these sensitive keys (e.g., AppInit_DLLs), we can detect unusual spikes that may indicate a keylogger installation, even without a specific IOC match. A deviation of more than 3 standard deviations is statistically significant.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
      - Terminal Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH registry modification events (Sysmon 13) for sensitive_keys | BASELINE modification count per host over 90 days | ALERT if daily_count > (mean + 3 * stdev)
  - question: Has a machine learning model identified any registry modifications as highly likely to be malicious keylogger activity?
    context: |
      This question uses a supervised machine learning model (GBM) to score registry modifications based on their characteristics. The model is trained on known malicious and benign examples, allowing it to detect novel or obfuscated keylogger persistence attempts. A score > 0.9 indicates high similarity to known malicious techniques and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - User Workstations
      - Critical Application Servers
      - Domain Controllers
      - Terminal Servers
    range: Last 90 days
    queries:
      - pseudocode: PROCESS registry modification events (Sysmon 13) with GBM_model | ALERT if model_score > 0.9
  - question: Has an unsigned kernel driver been loaded that is not on an approved allowlist?
    context: |
      Keyloggers can operate at the kernel level for greater stealth. Loading an unsigned driver is a common method for this. While some legitimate software uses unsigned drivers, they are rare and can be allowlisted. An alert for an unknown, unsigned driver is a strong indicator of potentially malicious activity.
    answer_sources:
      - Sysmon Event ID 6
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
      - Privileged Access Workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH driver load events (Sysmon 6) WHERE signed == false AND driver_hash NOT IN allowlist
  - question: Has a driver been loaded from an unusually rare or uncommon signer?
    context: |
      Adversaries may sign their malicious drivers with self-signed or newly created certificates. These signers will be rare compared to legitimate, widely-used signers. Identifying drivers signed by statistically infrequent signers (e.g., in the bottom 5th percentile of prevalence) can help uncover novel malware, including keyloggers.
    answer_sources:
      - Sysmon Event ID 6
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
      - Privileged Access Workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: ANALYZE driver load events (Sysmon 6) to find prevalence of each signer | ALERT if driver is loaded from a signer in the bottom 5th percentile of prevalence
  - question: Has there been an anomalous spike in new service installations across the environment?
    context: |
      Keyloggers are often installed as services to ensure persistence. While service installations are normal during software deployments, a sudden, widespread spike outside of known maintenance windows can indicate a coordinated malware campaign. A time-series model can learn the normal rhythm of service installations and flag significant deviations.
    answer_sources:
      - Sysmon Event ID 6
      - Windows Event ID 7045
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Terminal Servers
      - Privileged Access Workstations
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: MODEL hourly count of new service installations (Win EID 7045) using time-series anomaly detection | ALERT on statistically significant spikes uncorrelated with patching cycles
  - question: Is a process loading keyboard-input libraries from an unusual location or with an atypical parent process?
    context: |
      The `user32.dll` library is used to handle user input, including keystrokes. Legitimate interactive applications typically run from standard locations like `C:\\Program Files` and are spawned by expected parents like `explorer.exe`. A process loading this DLL from a user-writable path or an unexpected parent is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sysmon Event ID 11
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Point-of-Sale Terminals
    range: Last 90 days
    queries:
      - pseudocode: SEARCH module load events (Sysmon 7) for user32.dll WHERE process_path NOT IN standard_locations AND parent_process NOT IN standard_parents
  - question: Has a new, unsigned executable with high entropy been created on a system?
    context: |
      High Shannon entropy ($$ > 7.2 $$) in a file often indicates that it is packed or encrypted to evade signature-based antivirus. A newly created, unsigned, and high-entropy executable is a strong indicator of a potentially malicious payload, such as a keylogger dropper.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sysmon Event ID 11
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Point-of-Sale Terminals
    range: Last 90 days
    queries:
      - pseudocode: ON new file creation (Sysmon 11) for .exe files, CALCULATE shannon_entropy | ALERT if entropy > 7.2 AND is_signed == false AND file NOT IN allowlist
  - question: Does a process that loaded keyboard-input libraries exhibit anomalous characteristics compared to a baseline of normal interactive applications?
    context: |
      This question uses an unsupervised machine learning model (One-Class SVM) to define a profile of "normal" for processes that legitimately handle user input. Any process that loads `user32.dll` but falls outside this profile is flagged as an anomaly, which is effective for detecting novel keyloggers that behave differently from legitimate software.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sysmon Event ID 11
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Point-of-Sale Terminals
    range: Last 90 days
    queries:
      - pseudocode: MODEL legitimate processes loading user32.dll with One-Class SVM | APPLY model to new processes loading user32.dll | ALERT on outliers
  - question: Has a non-browser process been observed deleting browser cookie files?
    context: |
      Adversaries may delete browser cookies to force a user to re-authenticate to websites, allowing a keylogger to capture freshly entered credentials. Legitimate cookie deletion is typically handled by the browser itself. Deletion by an unexpected process is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - User Workstations
      - Web Application Servers
      - Authentication Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH file delete events (Sysmon 23) WHERE filename CONTAINS 'Cookies' AND process_name NOT IN browser_allowlist
  - question: Is a file being written to frequently with very small amounts of data, consistent with capturing keystrokes?
    context: |
      A keylogger typically writes captured keystrokes to a log file in small batches, resulting in frequent, small write operations. Monitoring for a high rate of writes (e.g., >10/min) with small average sizes (e.g., <1KB) can distinguish a keylogger's log from a normal file save operation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - User Workstations
      - Web Application Servers
      - Authentication Servers
    range: Last 90 days
    queries:
      - pseudocode: MONITOR file write events | For each file, COUNT writes per minute and AVG write size | ALERT if write_count_per_minute > 10 AND avg_write_size < 1KB
  - question: Has a process performed the specific sequence of deleting cookies, creating a log file, and making a network connection?
    context: |
      This question looks for a high-confidence attack chain: (1) deleting cookies to force re-authentication, (2) creating a file to log new credentials, and (3) connecting to the network to exfiltrate them. A sequence model can connect these disparate events from the same process within a short time window into a single, high-fidelity alert.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 23
      - User Workstations
      - Web Application Servers
      - Authentication Servers
    range: Last 90 days
    queries:
      - pseudocode: MODEL event sequences with HMM | ALERT on sequence: [cookie_delete (Sysmon 23), file_create (Sysmon 11), network_connection (Sysmon 3)] by same process within 5 minutes
  - question: Has a file, registry object, or named pipe been created that matches a known keylogger staging artifact?
    context: |
      Keyloggers often use predictable or known names for the files, registry keys, or named pipes where they temporarily store captured data. This question seeks to identify this staging activity by matching the names of these objects against a blocklist derived from threat intelligence.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Sysmon Event ID 17
      - Sysmon Event ID 18
      - All Enterprise Endpoints (Workstations and Servers)
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH file/registry/pipe creation events (Sysmon 11, 13, 17) WHERE object_name IN known_staging_artifact_list
  - question: Has a non-system process created a named pipe with a high-entropy (random-looking) name?
    context: |
      To avoid detection, malware may algorithmically generate random names for its components, such as named pipes used for inter-process communication. A high-entropy name ($$ > 3.5 $$) is a strong indicator of this behavior, especially when created by a process not associated with the operating system.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Sysmon Event ID 17
      - Sysmon Event ID 18
      - All Enterprise Endpoints (Workstations and Servers)
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: ON named pipe creation (Sysmon 17), CALCULATE name_entropy | ALERT if entropy > 3.5 AND creating_process IS NOT system_process
  - question: Has a machine learning model identified any file paths, registry paths, or named pipes as having suspicious or malicious-looking names?
    context: |
      This question leverages a machine learning model trained to recognize the linguistic patterns of malicious object names (e.g., random characters, typosquatting). This lexical analysis can flag suspicious staging artifacts even if they are from a new malware family and not yet in any IOC database.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Sysmon Event ID 17
      - Sysmon Event ID 18
      - All Enterprise Endpoints (Workstations and Servers)
      - Domain Controllers
    range: Last 90 days
    queries:
      - pseudocode: PROCESS new file/registry/pipe names with lexical analysis ML model | ALERT if name is classified as malicious
  - question: Has a process that previously triggered a host-based alert been seen making a network connection to a known-bad or newly observed domain?
    context: |
      A single suspicious event may be low-confidence. However, if that same process later connects to a C2 server from a threat feed or a newly observed domain, the combination becomes a high-confidence indicator. Correlating events by process GUID is key to linking these activities.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - All Endpoints
    range: Last 90 days
    queries:
      - pseudocode: JOIN host_alerts with network_connections (Sysmon 3) on process_guid | ALERT if destination_ip IN c2_blocklist OR destination_domain is newly_observed
  - question: Has a TLS connection been made using a JA3 fingerprint that is rare across the enterprise?
    context: |
      A JA3 fingerprint represents how a client initiates a TLS session. Common applications have common JA3s, while malware often has a unique or rare JA3 hash. Identifying connections with JA3 hashes seen on very few machines (e.g., < 5) is a powerful way to hunt for malicious clients like keyloggers.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - All Endpoints
    range: Last 90 days
    queries:
      - pseudocode: ANALYZE ja3 hashes from ssl.log over 30 days | COUNT hosts per ja3 | ALERT on connections where ja3_host_count < 5
  - question: Has a machine learning model classified any TLS connections as likely C2 traffic based on their metadata?
    context: |
      This question uses a classifier to analyze the combined characteristics of a TLS connection (JA3, JA3S, destination, etc.) to score its likelihood of being C2 traffic. This is more robust than any single indicator and can detect exfiltration even when keyloggers use novel infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Servers
      - All Endpoints
    range: Last 90 days
    queries:
      - pseudocode: PROCESS TLS metadata with random_forest_c2_classifier | ALERT if score indicates high likelihood of C2 traffic
  - question: Is a non-browser process making small outbound connections to a newly observed domain?
    context: |
      This is a classic indicator of "low and slow" exfiltration. Keyloggers often send captured data in small chunks (< 2KB) to avoid detection. When a non-standard process makes such a connection to a brand new, untrusted domain, it strongly suggests malicious activity.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - User Workstations
      - DNS Servers
    range: Last 90 days
    queries:
      - pseudocode: SEARCH network connections (Sysmon 3) WHERE process NOT IN allowlist AND destination_category == 'Newly Observed' AND sent_bytes < 2048
  - question: Is any host exhibiting highly regular, periodic network connections with small data payloads (beaconing)?
    context: |
      Malware C2 communication often involves a "heartbeat" beacon to a control server at very regular intervals. A low standard deviation in the time between connections ($$ < 5 $$ seconds), combined with small payload sizes ($$ < 2KB $$), is a very effective method for detecting these automated C2 channels.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - User Workstations
      - DNS Servers
    range: Last 24 hours
    queries:
      - pseudocode: ANALYZE conn.log per src_dst_pair over 24h | CALCULATE stdev of time_deltas and 95th_percentile of sent_bytes | ALERT if time_delta_stdev < 5s AND sent_bytes_p95 < 2048
  - question: Has a frequency analysis model (FFT) detected a periodic network signal (beaconing) from any host?
    context: |
      This question applies a Fast Fourier Transform (FFT) to detect beaconing. By transforming connection times into the frequency domain, a strong, sharp peak reveals a regular beaconing interval, providing a robust method for detecting automated C2 communications that might be missed by simple statistical methods.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Network Egress Points (Firewalls, Proxies)
      - User Workstations
      - DNS Servers
    range: Last 24 hours
    queries:
      - pseudocode: APPLY FFT to time series of connection counts per source_ip | ALERT on strong frequency peaks not matching known beaconing applications
  - question: Has a process been observed writing to a file and then immediately sending a network transmission of a similar size?
    context: |
      This question directly links the staging of data to a file with its subsequent exfiltration. By correlating file writes with network connections from the same process and matching the data volumes (e.g., within 10%), we can create a high-confidence alert for data exfiltration, especially for files in temporary directories.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 2
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek files.log
      - User Workstations
      - Staging Servers
      - Network Egress Points
    range: Last 90 days
    queries:
      - pseudocode: CORRELATE file writes (Sysmon 11) and network connections (Sysmon 3) by process_guid | ALERT if |sent_bytes - file_size| / file_size < 0.1 AND file_path is in temp_dir
  - question: Has a file modification been immediately followed by a network connection of a nearly identical size from the same process?
    context: |
      This is a more precise version of the previous question, focusing on the timing. A very short delay (< 60 seconds) between the final write to a staging file and the network exfiltration provides strong evidence that the two events are causally linked. Matching the file size to the bytes sent with high precision further increases confidence.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 2
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek files.log
      - User Workstations
      - Staging Servers
      - Network Egress Points
    range: Last 90 days
    queries:
      - pseudocode: CORRELATE file modification time (Sysmon 2) and network connection time (Sysmon 3) by process | ALERT if (conn_time - file_mod_time) < 60s AND |sent_bytes - file_size| < 100
  - question: Has a process followed the behavioral pattern of staging data to a file and then making a network connection?
    context: |
      This question uses a state machine to formally model the attack pattern of staging and exfiltration. The model tracks a process, moving it into a "suspicious" state when it exhibits staging behavior (frequent, small writes). If it then makes an external network connection, the model transitions to an "alert" state, providing a structured way to detect this TTP.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 2
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek files.log
      - User Workstations
      - Staging Servers
      - Network Egress Points
    range: Last 90 days
    queries:
      - pseudocode: USE state machine to track process behavior | STATE_1: Frequent small writes to hidden file | STATE_2: External network connection | ALERT on transition from STATE_1 to STATE_2 by same process