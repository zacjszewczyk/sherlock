name: T1569.001: Launchctl
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is using the `launchctl` utility on macOS to execute commands or programs for persistence or execution. This involves detecting the creation or modification of malicious Property List (.plist) files in standard `LaunchAgents` or `LaunchDaemons` directories, identifying when `launchctl` is used to load a .plist from an uncommon or temporary directory, observing `launchctl` being spawned by an unusual parent process (like a browser or document editor), and spotting sequences where a .plist file is rapidly created, loaded, and then deleted to evade detection.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a newly created or modified .plist file in a standard launch directory associated with known malicious indicators?
  context: Adversaries frequently use .plist files within `/Library/LaunchAgents`, `/Library/LaunchDaemons`, and `~/Library/LaunchAgents` to establish persistence. This question aims to directly detect known threats by correlating file creation or modification events for these .plists with threat intelligence. Checking the file's hash against known malicious signatures or parsing its `ProgramArguments` for known malicious IPs, domains, or URLs is a high-confidence method for identifying compromised systems.
  answer_sources:
  - EDR File Creation Events
  - EDR File Modification Events
  - Zeek dns.log
  - Zeek http.log
  - macOS endpoints (laptops, desktops, servers), DNS servers, Network egress points
  range: last 90 days
  queries:
  - "Pseudocode: ON file_event FOR .plist IN launch_dirs, PARSE ProgramArguments, QUERY IOC_DB for IPs/domains, ALERT on match."
- question: Does a domain found in a new .plist file's ProgramArguments appear to be unusually rare compared to historical DNS activity?
  context: Malware often uses newly registered or rarely accessed domains for command and control (C2) to avoid blocklists. This question focuses on using statistical analysis to uncover these suspicious domains even without prior threat intelligence. By building a baseline of normal DNS activity, a domain that falls into a low frequency percentile (e.g., bottom 5%) is highly suspect and warrants investigation as it is not commonly accessed by anyone in the organization.
  answer_sources:
  - EDR File Creation Events
  - EDR File Modification Events
  - Zeek dns.log
  - macOS endpoints (laptops, desktops, servers), DNS servers
  range: last 90 days
  queries:
  - "Pseudocode: ON new_plist_file, EXTRACT domain from ProgramArguments, QUERY DNS_logs for domain_frequency_percentile, IF percentile < 5, ALERT."
- question: Does a newly created .plist file exhibit characteristics that a machine learning model identifies as malicious?
  context: Signature-based detections can be evaded by polymorphic malware. This question leverages a machine learning approach to identify malicious .plist files based on their intrinsic properties. A model can be trained on features like the presence of the `RunAtLoad` key, the length of arguments, and the character randomness (entropy) of labels to produce a maliciousness score. This allows for the detection of novel threats that do not match any known signatures.
  answer_sources:
  - EDR File Creation Events
  - EDR File Modification Events
  - macOS endpoints (laptops, desktops, servers)
  range: last 90 days
  queries:
  - "Pseudocode: ON new_plist_file, EXTRACT features (RunAtLoad, arg_length, label_entropy), APPLY ML_model, IF score > 0.85, ALERT."
- question: When `launchctl load` is executed, does the referenced .plist file match YARA rules designed to detect suspicious structures or known malware?
  context: YARA rules provide a powerful and flexible way to identify malicious files based on textual or binary patterns. This question seeks to apply such rules to .plist files at the moment they are loaded by `launchctl`. This is a critical point for detection, and rules can be crafted to find suspicious combinations, such as a program path pointing to `/tmp` combined with the `RunAtLoad` key, or to find unique strings from known malware families.
  answer_sources:
  - EDR Process Creation Events
  - EDR File Access Events
  - Process execution and file system data from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: ON process_create('launchctl load'), GET referenced_plist_file, SCAN file_content with YARA_rules, ALERT on match."
- question: Does the `Label` or `Program` string in a loaded .plist file have unusually high entropy, suggesting obfuscation?
  context: To evade simple, signature-based detections that look for specific names (e.g., 'com.malware.agent'), adversaries may randomize or obfuscate the strings used in their .plist files. High Shannon entropy is a mathematical indicator of randomness. This question aims to detect this obfuscation by calculating the entropy of key strings and comparing it to a baseline established from legitimate .plist files across the enterprise. A value significantly above the average suggests an attempt to hide.
  answer_sources:
  - EDR Process Creation Events
  - EDR File Access Events
  - Process execution and file system data from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: ON process_create('launchctl load'), GET plist_content, CALCULATE entropy for Label/Program, IF entropy > (mean + 2*std_dev), ALERT."
- question: Does a loaded .plist file belong to an outlier cluster when grouped with other .plist files based on its structural features?
  context: This question uses unsupervised machine learning to find the "odd one out." By converting the XML structure of .plist files into numerical features (e.g., number of keys, argument count, path depth), clustering algorithms like K-Means can group similar files. Malware or improperly configured software might use a unique combination of keys and values, causing them to form small, isolated clusters away from the large groups of legitimate software. These outlier clusters are prime candidates for investigation.
  answer_sources:
  - EDR Process Creation Events
  - EDR File Access Events
  - Process execution and file system data from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: PERIODICALLY: VECTORIZE all plist_files, APPLY K-Means clustering, IDENTIFY outlier_clusters, REVIEW files in outliers."
- question: Is `launchctl` being used to load a .plist file from a non-standard, world-writable, or temporary directory?
  context: Legitimate persistence mechanisms are typically installed into protected system directories. This question focuses on a highly suspicious adversary tactic: placing a .plist file in a location like `/tmp`, `/var/tmp`, `/Users/Shared`, or `~/Downloads`. These locations are globally writable and do not require elevated privileges, making them an easy target for malware to drop and execute its persistence payload. An alert for this behavior should be considered high priority.
  answer_sources:
  - EDR Process Creation Events
  - Process execution logs from macOS endpoints, focusing on command-line arguments that reference world-writable and temporary directories.
  range: last 90 days
  queries:
  - "Pseudocode: ON process_create('launchctl load'), IF plist_path IN ('/tmp/', '/var/tmp/', '/Users/Shared/'), CREATE high_priority_alert."
- question: Is `launchctl` loading a .plist file from a directory that is statistically rare for this activity across the enterprise?
  context: While a fixed list of "bad" directories is useful, adversaries can simply choose another uncommon location. This question aims to statistically identify any outlier directory. By aggregating all directory paths used in `launchctl load` commands over time, we can establish a frequency baseline. An execution from a path that falls in a low percentile (e.g., bottom 10%) is anomalous and could indicate an adversary attempting to hide their persistence mechanism in an unusual location.
  answer_sources:
  - EDR Process Creation Events
  - Process execution logs from macOS endpoints, focusing on command-line arguments that reference world-writable and temporary directories.
  range: last 90 days
  queries:
  - "Pseudocode: ON process_create('launchctl load'), GET directory_path, QUERY historical_data for path_frequency_percentile, IF percentile < 10, CREATE medium_priority_alert."
- question: Is there an anomalous spike in the number of `launchctl load` executions from non-standard directories?
  context: A single suspicious `launchctl` execution is a concern, but a sudden increase in such activity across the environment could signal a widespread campaign. This question uses time-series anomaly detection to monitor the volume of `launchctl` executions originating from non-standard directories (i.e., anywhere other than `/Library/*` or `~/Library/*`). A significant spike above the forecasted daily count can provide an early warning of a coordinated attack or malware outbreak.
  answer_sources:
  - EDR Process Creation Events
  - Process execution logs from macOS endpoints, focusing on command-line arguments that reference world-writable and temporary directories.
  range: last 90 days
  queries:
  - "Pseudocode: DAILY: COUNT launchctl_loads from non-standard_dirs, APPLY ARIMA model, IF observed_count > forecasted_count + threshold, ALERT."
- question: Was `launchctl` launched by an unusual parent process like a web browser, document editor, or a script spawned by one of them?
  context: The ancestry of a process provides crucial context. `launchctl` should normally be run by system daemons, software installers, or a user directly in a terminal. If its parent is a web browser (Chrome, Safari), office application (Word, Preview), or a script interpreter spawned from one, it strongly indicates a user was tricked into executing a malicious payload, for example, by opening a malicious attachment or clicking a link that downloaded and ran a script.
  answer_sources:
  - EDR Process Creation Events
  - Process lineage data (parent-child relationships) from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: ON process_create('launchctl'), GET parent_process, IF parent_process IN ('Chrome', 'Word', etc.) OR parent's parent IN ('Chrome', 'Word', etc.), ALERT."
- question: Was `launchctl` launched by a parent process not on the established allow-list of common, legitimate parent processes?
  context: Rather than maintaining a list of "bad" parents, this question proposes the opposite: defining "good" and alerting on anything else. By analyzing historical data, we can build an allow-list of parent processes that are responsible for the vast majority (e.g., 99%) of legitimate `launchctl` executions. Any `launchctl` process spawned by a parent not on this list is, by definition, an anomaly and warrants investigation. This method is effective at catching novel execution chains.
  answer_sources:
  - EDR Process Creation Events
  - Process lineage data (parent-child relationships) from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: BASELINE: create allow_list of top 99% of launchctl parents. ON process_create('launchctl'), GET parent_process, IF parent_process NOT IN allow_list, ALERT."
- question: Does the process execution chain leading to `launchctl` represent a structurally anomalous graph compared to baseline execution graphs?
  context: This question applies advanced graph-based anomaly detection to process trees. An execution chain like `Safari -> bash -> launchctl` has a different structure and is semantically different from a normal chain like `Terminal -> zsh -> launchctl`. By modeling these execution chains as graphs, algorithms can learn the normal structures and then flag new chains that are structurally anomalous, providing a powerful way to detect sophisticated and unusual adversary behavior.
  answer_sources:
  - EDR Process Creation Events
  - Process lineage data (parent-child relationships) from all macOS endpoints.
  range: last 90 days
  queries:
  - "Pseudocode: MODEL process chains as graphs, APPLY graph anomaly detection, ALERT on anomalous sub-graphs involving launchctl."
- question: Has a `.plist` file been created, loaded, its program executed, and then the file deleted, all within a short time frame?
  context: This is a classic "cleanup" technique used by adversaries to hide their tracks. They write a persistence file, use `launchctl` to load it, verify their payload is running, and then delete the on-disk evidence (.plist file). This question aims to detect this specific sequence of events happening on the same host within a short window (e.g., 5 minutes). A stateful correlation rule that triggers on this sequence is a high-fidelity indicator of compromise.
  answer_sources:
  - EDR File Creation Events
  - EDR File Deletion Events
  - EDR Process Creation Events
  - EDR Network Connection Events
  - Zeek conn.log
  - Correlated event logs from macOS endpoints (file system, process, network) and network egress points.
  range: last 90 days
  queries:
  - "Pseudocode: CORRELATE within 5 mins on same host: (1) file_create(*.plist), (2) process_create('launchctl load *.plist'), (3) process_create(program_from_plist), (4) file_delete(*.plist). IF sequence matches, CREATE high_fidelity_alert."
- question: Was a `.plist` file that was loaded by `launchctl` deleted unusually quickly after its creation?
  context: This question provides a statistical method for detecting the "cleanup" behavior described previously. By measuring the lifetime of every .plist file (time between creation and deletion), we can build a distribution of normal lifetimes. An adversary who creates, loads, and deletes a file quickly will create a file with a very short lifetime. Alerting on loaded .plist files whose lifetimes fall in the 1st percentile (e.g., less than 5 minutes) can effectively catch this evasive tactic.
  answer_sources:
  - EDR File Creation Events
  - EDR File Deletion Events
  - EDR Process Creation Events
  - Correlated event logs from macOS endpoints (file system, process, network) and network egress points.
  range: last 90 days
  queries:
  - "Pseudocode: FOR each plist_file, measure lifetime (delete_time - create_time). IF file was loaded via launchctl AND lifetime is in 1st percentile, ALERT."
- question: Does a sequence of events involving file creation, process execution, and file deletion match a pattern that a Recurrent Neural Network (RNN) model identifies as anomalous?
  context: This question uses a sophisticated machine learning approach to detect malicious sequences of behavior. Recurrent Neural Networks (RNNs) are ideal for analyzing sequential data like system events. The model can be trained on millions of legitimate event sequences (e.g., from software installations). It can then identify an adversary's sequence—such as creating a file, executing a process from it, and deleting the file—as a low-probability, anomalous pattern that deviates significantly from normal learned behavior.
  answer_sources:
  - EDR File Creation Events
  - EDR File Deletion Events
  - EDR Process Creation Events
  - EDR Network Connection Events
  - Zeek conn.log
  - Correlated event logs from macOS endpoints (file system, process, network) and network egress points.
  range: last 90 days
  queries:
  - "Pseudocode: FEED event sequences (file_create, process_exec, etc.) to RNN model. IF model classifies a sequence as anomalous or low-probability, ALERT."