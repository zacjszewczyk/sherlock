name: T1569.001: Launchctl
id: 9c6a8f1e-3b7d-4c9a-8e1f-0b2a3c4d5e6f
description: This playbook investigates whether an adversary is using the macOS `launchctl` utility to execute commands or programs for persistence or execution. Detections focus on the creation or modification of malicious property list (.plist) files in standard `LaunchAgents` or `LaunchDaemons` directories, the execution of `launchctl` with suspicious arguments or from unusual file paths, `launchctl` being spawned by an abnormal parent process, and the rapid creation, loading, and subsequent deletion of `.plist` files to cover tracks.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly created or modified `.plist` file in a standard launch directory associated with known malicious indicators?
    context: This question aims to detect persistence mechanisms established through launch agents or daemons that point to known malicious files, domains, or IP addresses. Analysts should care because this is a common technique for malware to maintain a foothold on macOS systems. Correlating file events with threat intelligence provides a high-confidence way to identify compromised systems.
    answer_sources:
      - EDR File Creation Events
      - EDR File Modification Events
      - Zeek dns.log
      - Zeek http.log
      - macOS endpoints (laptops, desktops, servers)
      - DNS servers
      - Network egress points
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR file_events WHERE file_path IN ('/Library/LaunchAgents', '/Library/LaunchDaemons', '~/Library/LaunchAgents') AND file_extension = '.plist' | PARSE file_content for 'ProgramArguments' | LOOKUP IPs/domains in threat_intel_db | ALERT on match
  - question: Is a domain found in the 'ProgramArguments' of a new `.plist` file statistically rare compared to the organization's baseline DNS activity?
    context: Adversaries often use newly registered or rarely seen domains for command and control. This question helps identify suspicious `.plist` files by flagging domains that deviate from normal network behavior. A domain with very low frequency is more likely to be malicious than a common one.
    answer_sources:
      - Zeek dns.log
      - EDR File Creation Events
      - macOS endpoints (laptops, desktops, servers)
      - DNS servers
      - Network egress points
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR file_create_events WHERE file_extension = '.plist' | PARSE file_content for 'ProgramArguments' domain | JOIN domain with 30_day_DNS_baseline | CALCULATE frequency_percentile | ALERT if percentile < 5
  - question: Does a machine learning model classify a newly created `.plist` file as malicious based on its structural features?
    context: This question leverages machine learning to detect malicious `.plist` files that may not contain known bad indicators. The model analyzes structural properties like the presence of `RunAtLoad`, argument length, and label entropy, which can be indicative of malicious intent. This provides a proactive detection method for novel threats.
    answer_sources:
      - EDR File Creation Events
      - macOS endpoints (laptops, desktops, servers)
    range: The last 90 days
    queries:
      - pseudocode: ON new_plist_file_creation | EXTRACT features (RunAtLoad, ProgramArguments_length, label_entropy) | INPUT features into logistic_regression_model | ALERT if probability_score > 0.85
  - question: Does the content of a `.plist` file being loaded by `launchctl` match any YARA rules designed to detect suspicious structures or known malware?
    context: YARA rules can codify patterns seen in malicious `.plist` files, such as programs running from temporary directories or strings from known malware families. This question helps identify the loading of a malicious persistence mechanism at the time of execution, even if the file itself was missed upon creation.
    answer_sources:
      - EDR Process Creation Events
      - EDR File Access Events
      - Process execution and file system data from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR process_events WHERE process_name = 'launchctl' AND process_args CONTAINS 'load' | GET referenced_plist_path | SCAN plist_file_content with YARA_rules | ALERT on match
  - question: Does the 'Label' or 'Program' string in a loaded `.plist` file have an unusually high entropy, suggesting obfuscation?
    context: Adversaries may use randomized or obfuscated strings for labels and program names to evade simple signature-based detections. High Shannon entropy can be a mathematical indicator of such randomness. Comparing the entropy against a baseline of legitimate files helps to surface these outliers for investigation.
    answer_sources:
      - EDR Process Creation Events
      - EDR File Access Events
      - Process execution and file system data from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR process_events WHERE process_name = 'launchctl' AND process_args CONTAINS 'load' | PARSE plist_content for 'Label' and 'Program' strings | CALCULATE shannon_entropy | COMPARE to baseline | ALERT if entropy > (mean + 2*stdev)
  - question: Does a `.plist` file belong to an anomalous cluster based on its structural features when compared to all other `.plist` files in the environment?
    context: This unsupervised learning approach helps identify novel or unusual `.plist` configurations without prior knowledge of what is "bad." By grouping files based on their structural similarities, small or outlier clusters can be isolated for manual review, potentially revealing attacker techniques that don't fit known patterns.
    answer_sources:
      - EDR File Access Events
      - Process execution and file system data from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: PERIODICALLY GATHER all plist_files | VECTORIZE features (keys_used, arg_count, path_depth) | APPLY K-Means clustering | IDENTIFY outlier_clusters | SCHEDULE review for files in outlier_clusters
  - question: Is `launchctl` being used to load a `.plist` file from a world-writable or non-standard directory like `/tmp` or `/Users/Shared`?
    context: Legitimate software installers typically place `.plist` files in standard system directories (`/Library/Launch*`, `~/Library/LaunchAgents`). Loading a `.plist` from a temporary or shared directory is highly suspicious and often indicates an adversary attempting to establish persistence from a location they can write to without elevated privileges.
    answer_sources:
      - EDR Process Creation Events
      - Process execution logs from macOS endpoints, focusing on command-line arguments that reference world-writable and temporary directories.
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR process_events WHERE process_name = 'launchctl' AND process_args CONTAINS 'load' AND (process_args CONTAINS '/tmp/' OR process_args CONTAINS '/var/tmp/' OR process_args CONTAINS '/Users/Shared/') | ALERT as high_priority
  - question: Is `launchctl` loading a `.plist` file from a directory that is statistically rare in the environment?
    context: This question aims to identify persistence attempts from unusual locations by baselining normal `launchctl` behavior. By tracking the frequency of all parent directories used in `launchctl load` commands, any execution from a rare or never-before-seen path can be flagged as anomalous, even if the path itself is not on a predefined blocklist.
    answer_sources:
      - EDR Process Creation Events
      - Process execution logs from macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: ON 'launchctl load' event | EXTRACT parent_directory from plist_path | LOOKUP directory in 30_day_directory_baseline | CALCULATE frequency_percentile | ALERT if percentile < 10
  - question: Has there been an anomalous spike in the number of `launchctl` executions loading `.plist` files from non-standard directories?
    context: A sudden increase in the volume of `launchctl` loads from non-standard paths (e.g., not `/Library/*` or `~/Library/*`) could indicate a widespread campaign or a tool being deployed across multiple systems. This time-series analysis helps detect such coordinated activity by comparing the daily count against a forecasted baseline.
    answer_sources:
      - EDR Process Creation Events
      - Process execution logs from macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: CALCULATE daily_count of 'launchctl load' from non-standard_dirs | INPUT count into ARIMA_model | FORECAST expected_count | ALERT if observed_count > forecasted_count_threshold
  - question: Was `launchctl` spawned by an unusual parent process, such as a web browser, document reader, or a script interpreter initiated by one of those applications?
    context: The `launchctl` process is typically executed by a user in a terminal, by a legitimate software installer, or by the system itself. A parent process like a browser or a Microsoft Word suggests a user may have been tricked into running a malicious file that is now attempting to establish persistence.
    answer_sources:
      - EDR Process Creation Events
      - Process lineage data (parent-child relationships) from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: SEARCH EDR process_events WHERE child_process = 'launchctl' AND parent_process IN ('Google Chrome', 'Safari', 'Microsoft Word', 'Preview', etc.) | ALERT on match
  - question: Was `launchctl` executed by a parent process not on the established allow-list of common, legitimate parents?
    context: This question operationalizes the concept of "unusual parent" by creating a data-driven allow-list from historical data. By baselining all normal parent processes for `launchctl`, any deviation from this norm can be automatically flagged. This is an effective way to hunt for abnormal process chains.
    answer_sources:
      - EDR Process Creation Events
      - Process lineage data (parent-child relationships) from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: GENERATE allow_list of parent_processes for 'launchctl' that constitute 99% of historical executions | ON 'launchctl' execution | CHECK if parent_process in allow_list | ALERT if not
  - question: Does the process execution chain leading to `launchctl` represent a structurally anomalous graph compared to baseline execution patterns?
    context: This question applies advanced graph analytics to detect sophisticated attack chains. Instead of just looking at the immediate parent, it analyzes the entire sequence of processes. A chain like `Safari -> bash -> launchctl` is structurally different from a typical `Terminal -> zsh -> launchctl` chain and can be flagged by a graph anomaly detection algorithm, revealing indirect execution flows.
    answer_sources:
      - EDR Process Creation Events
      - Process lineage data (parent-child relationships) from all macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: MODEL process_chains as graphs | APPLY graph_anomaly_detection_algorithm | ALERT on anomalous sub-graphs ending in 'launchctl'
  - question: Has a `.plist` file been created, loaded by `launchctl`, its program executed, and then the `.plist` file deleted, all within a short time window?
    context: This sequence of events is a classic indicator of an adversary trying to "clean up" after establishing persistence. They create the persistence mechanism, ensure it runs, and then delete the configuration file to evade detection. Correlating these events in a tight time window provides a high-fidelity alert for this "load-and-delete" technique.
    answer_sources:
      - EDR File Creation Events
      - EDR File Deletion Events
      - EDR Process Creation Events
      - EDR Network Connection Events
      - Zeek conn.log
      - Correlated event logs from macOS endpoints (file system, process, network) and network egress points.
    range: The last 90 days
    queries:
      - pseudocode: CORRELATE on hostname over 5 minutes (1) file_create *.plist, (2) process_create 'launchctl load *.plist', (3) process_create from plist ProgramArguments, (4) file_delete *.plist | ALERT on sequence completion
  - question: Was a `.plist` file that was loaded by `launchctl` deleted unusually quickly after its creation?
    context: This question focuses on identifying transient `.plist` files used for persistence. By measuring the lifetime of every `.plist` file (from creation to deletion) across the enterprise, a statistical baseline can be established. Files with an exceptionally short lifetime, especially those loaded by `launchctl`, are highly suspect and likely part of a cleanup attempt.
    answer_sources:
      - EDR File Creation Events
      - EDR File Deletion Events
      - EDR Process Creation Events
      - Correlated event logs from macOS endpoints.
    range: The last 90 days
    queries:
      - pseudocode: FOR each plist_file_create | IF file_delete occurs, calculate lifetime | IF 'launchctl load' for that file occurred, compare lifetime to enterprise distribution | ALERT if lifetime in 1st percentile
  - question: Does a machine learning model (RNN) classify the sequence of events surrounding a `.plist` file's creation and execution as anomalous?
    context: This question uses a sophisticated deep learning model to understand the "grammar" of normal system activity. An RNN can learn legitimate sequences of events (e.g., software installation). When it encounters a sequence that doesn't fit a learned legitimate pattern, it can flag it as anomalous, providing a powerful way to detect novel or complex attack techniques.
    answer_sources:
      - EDR File Creation Events
      - EDR File Deletion Events
      - EDR Process Creation Events
      - EDR Network Connection Events
      - Zeek conn.log
      - Correlated event logs from macOS endpoints and network egress points.
    range: The last 90 days
    queries:
      - pseudocode: STREAM sequences of endpoint events (file_create, process_exec, net_conn, file_delete) into trained RNN | ALERT if model classifies sequence as anomalous or low_probability