name: "T1059: Command and Scripting Interpreter"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook focuses on detecting adversaries using built-in command and scripting interpreters (e.g., PowerShell, cmd.exe) for execution. It provides investigative questions to identify malicious activity by analyzing command-line arguments for known IOCs, high entropy, or suspicious keywords; looking for unusual parent-child process relationships (e.g., Word spawning PowerShell); detecting scripts being written to temporary directories and then immediately executed; and monitoring for network connections initiated by these interpreters to suspicious external destinations."
type: "technique"
related:
  - "TA0002: Execution"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are script interpreters executing commands that contain known malicious indicators like IP addresses, domains, or file hashes from threat intelligence feeds?"
    context: "This question seeks to identify direct evidence of compromise by matching command-line artifacts against a curated list of known bad indicators. A match provides a high-confidence signal that an adversary is using known malicious infrastructure or tools within the environment."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH process_creation_events AND powershell_script_logs | EXTRACT IPs, domains, hashes from command_line | LOOKUP against threat_intelligence_feeds | WHERE match_found"
  - question: "Are script interpreters executing commands containing statistically rare domains or IP addresses within the enterprise?"
    context: "This question helps uncover new or targeted malicious infrastructure not yet present in threat intelligence feeds. Adversaries often use unique domains for each campaign. By identifying domains and IPs that are rarely seen across the organization, we can flag potential C2 channels that would otherwise be missed. This is a form of anomaly detection based on prevalence."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH command_line_logs | EXTRACT domain, IP | CALCULATE frequency of each domain/IP over 30 days | ALERT if frequency < 5th_percentile"
  - question: "Can we use a machine learning model to classify command-line executions as malicious based on features like length, entropy, and keyword presence?"
    context: "This question proposes a more advanced, programmatic approach to detection. By training a model on features of known benign and malicious commands (e.g., character distribution, length, presence of suspicious terms like 'IEX' or '-enc'), we can create a system that scores and flags new commands in real-time, adapting to novel adversary techniques that may not match simple signatures."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Network Egress Points"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "PIPELINE new_command_line -> FEATURE_ENGINEERING(length, entropy, keywords) -> CLASSIFIER_MODEL -> RETURN probability_score | ALERT if score > threshold"
  - question: "Are there any command-line arguments containing patterns known to be malicious, such as PowerShell download cradles or Base64 encoding flags?"
    context: "This question focuses on detecting specific malicious tradecraft using pattern matching. Adversaries frequently use recognizable templates for downloading and executing payloads (e.g., IEX(New-Object Net.WebClient).DownloadString) or for obfuscating commands (e.g., -encodedCommand). Using regular expressions to scan for these patterns is a highly effective way to find 'living-off-the-land' attacks."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "User Workstations"
      - "Web Servers"
      - "Mail Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH command_line_logs | APPLY regex_library_for_malicious_patterns | ALERT on match"
  - question: "Are there command-line executions with unusually high character entropy or length compared to their historical baseline?"
    context: "This question aims to detect obfuscated commands. Adversaries often encode or encrypt payloads within a command line to evade simple keyword-based detection. This process significantly increases the character randomness (entropy) and length of the command string. By baselining normal activity for a given process on a host and flagging significant deviations, we can identify these obfuscated payloads."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "User Workstations"
      - "Web Servers"
      - "Mail Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOREACH command_line_event | CALCULATE entropy, length | COMPARE to historical_baseline for host/process | ALERT if entropy OR length > 98th_percentile"
  - question: "Are there command lines with anomalous character sequences that deviate from models of normal command syntax?"
    context: "This question leverages n-gram analysis, a machine learning technique, to detect unknown or novel obfuscation methods. By building a model of what 'normal' command-line character sequences look like, we can measure how surprising or 'perplexing' a new command is. Highly perplexing commands likely contain syntax or character patterns never seen in benign operations, indicating potential malice."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "Windows Event ID 4104"
      - "User Workstations"
      - "Web Servers"
      - "Mail Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOREACH new_command_line | CALCULATE perplexity_score using n-gram_model | ALERT if score > anomaly_threshold"
  - question: "Has a command interpreter (like cmd.exe or powershell.exe) been launched by a process that typically should not, such as an Office application or web browser?"
    context: "This question aims to detect a common attack vector where malware delivered via a phishing document or a browser exploit spawns a command shell to execute subsequent commands. Legitimate parent-child relationships are usually predictable (e.g., explorer.exe -> cmd.exe). A process like WINWORD.EXE spawning powershell.exe is highly suspicious and is a strong indicator of initial compromise."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Remote Desktop Servers"
      - "Mail Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH process_creation_events | IF parent_process IN [winword.exe, excel.exe, chrome.exe] AND child_process IN [cmd.exe, powershell.exe] | ALERT"
  - question: "Have we observed any new or statistically rare parent-child process relationships involving a script interpreter?"
    context: "This question provides a dynamic way to detect suspicious process chains beyond a static blacklist. By tracking every parent-child process pair observed in the environment, we can flag the first-ever occurrence of a new relationship (e.g., a custom application spawning cmd.exe for the first time). This helps detect novel attacker techniques and compromised legitimate software."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Remote Desktop Servers"
      - "Mail Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH process_creation_events | CREATE tuple (parent, child) | IF tuple is first_seen_globally OR frequency < 1st_percentile | ALERT"
  - question: "Can graph-based analysis identify anomalous process execution chains that deviate from the normal activity baseline?"
    context: "This question proposes modeling the entirety of process activity as a large-scale graph to find complex, multi-step attacks. Instead of looking at single parent-child pairs, this method analyzes entire execution chains. An anomalous subgraph, such as one starting from an Office app, going through a script interpreter, and then making a network connection, would stand out against the baseline of normal process flow graphs."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Remote Desktop Servers"
      - "Mail Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "MODEL process_events as a graph | IDENTIFY subgraphs that deviate from baseline_graph_structure | ALERT on anomalous subgraphs"
  - question: "Has a script file been written to a world-writable directory (like %TEMP%) and then immediately executed by an interpreter?"
    context: "This question targets a classic malware staging technique known as 'write-then-execute.' Adversaries often drop a script (e.g., a .ps1 or .bat file) into a temporary or public directory and then immediately invoke an interpreter to run it. Correlating a file creation event with a subsequent process execution event for the same file path within a very short time window is a high-fidelity indicator of this behavior."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "File Servers"
      - "Web Application Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "CORRELATE file_creation_events (Sysmon 11) with process_creation_events (Sysmon 1) | WHERE file_path matches AND time_delta < 10s AND directory is world-writable | ALERT"
  - question: "Are scripts being executed from directory paths that are statistically rare across the enterprise?"
    context: "This question helps to identify scripts running from unusual or suspicious locations that may not be on a static list of temporary directories. By analyzing the execution paths of all scripts (e.g., .ps1, .bat) and calculating the frequency of each parent directory, we can flag executions from directories that are rarely, if ever, used for legitimate scripting activity, indicating a potential adversary staging location."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "File Servers"
      - "Web Application Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH script_execution_events | EXTRACT directory_path | CALCULATE frequency of each path | ALERT if frequency < 5th_percentile"
  - question: "Has there been an anomalous spike in the rate of script file creation in critical system directories?"
    context: "This question aims to detect malware dropper activity or the replacement of legitimate system utilities with malicious scripts (a 'living-off-the-land' binary technique). By monitoring the rate of file creation for script files in sensitive directories like C:\\Windows\\System32 and applying time-series anomaly detection, we can identify sudden bursts of activity that are inconsistent with normal system patching or administrative tasks."
    answer_sources:
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 1"
      - "User Workstations"
      - "File Servers"
      - "Web Application Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "MONITOR rate of script_file_creation in critical_directories | APPLY time-series_anomaly_detection_model | ALERT on significant spikes"
  - question: "Is a script interpreter process making a network connection to a destination IP or domain known to be malicious?"
    context: "This question seeks to directly identify command-and-control (C2) or data exfiltration activity by correlating network connections made by interpreters (like powershell.exe) with threat intelligence. When a process that can execute arbitrary code makes a connection to a known-bad destination, it is a very strong signal of malicious activity."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "DMZ Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH network_connection_events (Sysmon 3) WHERE process is script_interpreter | EXTRACT destination_ip | LOOKUP against threat_intelligence_feeds | ALERT on match"
  - question: "Are script interpreters making network connections using rare TLS fingerprints (JA3/JA3S) or uncommon destination ports?"
    context: "This question helps detect malicious C2 channels by looking for anomalies in the connection metadata. Adversaries may use custom cryptographic libraries or non-standard ports to evade detection. A JA3/JA3S hash represents the client's TLS configuration, and a rare hash indicates a non-standard client. Combining this with uncommon port usage for a given process (e.g., powershell.exe connecting over port 53) can uncover covert C2 channels."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "DMZ Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "SEARCH network_connections by script_interpreters | EXTRACT ja3_hash, destination_port | CALCULATE frequency of ja3/port per process | ALERT if frequency < 1st_percentile"
  - question: "Can we identify anomalous network connection behaviors, such as C2 beaconing or data exfiltration, by clustering connection metrics?"
    context: "This question applies machine learning to network traffic metadata to find patterns of malicious behavior. C2 beaconing often appears as regular, small connections over a long period. Data exfiltration might be a single, large outbound transfer. By clustering connections based on features like data volume, duration, and frequency, we can automatically group them into 'normal' and 'abnormal' clusters, flagging the abnormal ones for investigation."
    answer_sources:
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Network Egress Points"
      - "DNS Servers"
      - "User Workstations"
      - "DMZ Servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOR each process-destination pair, gather connection_metrics (bytes, duration, frequency) | APPLY clustering_algorithm (DBSCAN) | ALERT on outlier clusters or noise points"