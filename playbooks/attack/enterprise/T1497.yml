name: T1497: Virtualization-Sandbox Evasion
id: 4e52512a-8f85-4b95-a88a-3e5f1f9b3d0c
description: This playbook helps investigate whether an adversary is attempting to evade defenses or discover the presence of a virtualization or sandbox environment. It focuses on identifying malware or tools that check for signs of analysis by looking for specific file hashes, querying for VM artifacts (files, registry keys, WMI objects), or exhibiting tell-tale behaviors like immediate termination after a check, prolonged sleep before activity, or performing "humanity checks" (e.g., mouse movement, recent documents). It also covers discovery techniques such as using specific command-line strings, piping enumeration commands to search for security tools, and making minimal network connections to test for internet access.
type: technique
related:
- TA0005: Defense Evasion
- TA0007: Discovery
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any running processes whose file hash matches a known virtualization or sandbox evasion tool?
  context: This question aims to detect the execution of well-known evasion tools like Pafish or Al-Khaser, or malware families known to employ evasion techniques. Matching a process's file hash against a curated threat intelligence feed provides a high-fidelity indicator of a deliberate attempt to identify and bypass analysis environments.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events | WHERE file_hash IN known_evasion_tool_hashes
- question: Is a known evasion tool hash appearing on an unusually large number of hosts in a short period?
  context: This question moves beyond single detections to identify widespread campaigns. A sudden spike in the prevalence of a specific evasion tool hash across the enterprise suggests a coordinated or automated attack, rather than an isolated incident, and requires a more urgent and broader response.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_events_with_hashes | WHERE hash IN known_evasion_tool_hashes | STATS distinct_count(hostname) by hash, time_window(1h) | WHERE distinct_count > threshold
- question: Can machine learning models, using process metadata and hash matches as features, classify a process as malicious and evasive?
  context: This question explores using machine learning to enhance detection. By using a hash match as a strong feature alongside other metadata (parent process, user, command line), a model can learn to identify evasive behavior with greater accuracy and potentially uncover variants or new tools that share characteristics with known threats.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE process_creation_events | EXTRACT features(parent_process, user, cmd_line, file_hash) | APPLY ML_evasion_classifier | WHERE prediction = 'malicious-evasive'
- question: Is a single process rapidly querying multiple files, registry keys, or WMI objects associated with virtualization or sandbox environments?
  context: Malware often checks for several indicators of a sandbox in quick succession. This question aims to detect this pattern of behavior, which is a strong signal of evasion. Correlating multiple distinct checks (e.g., for a VBox driver file and a VMware registry key) by the same process within a few seconds is more reliable than alerting on a single check.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events from all managed endpoints, with particular focus on developer workstations and designated analysis sandboxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (file_access OR registry_access OR wmi_query) | WHERE target_object IN (vm_artifact_list) | STATS distinct_count(target_object) by process_guid, time_window(10s) | WHERE distinct_count > 3
- question: Has any process accumulated a high 'Sandbox-Awareness Score' by querying for various weighted artifacts?
  context: This question refines the previous one by introducing a scoring system. Not all sandbox checks are equal; querying for a specific debugger key might be more indicative of evasion than checking for a common VM tool driver. By assigning weights and flagging processes that exceed a statistical threshold, this approach can reduce false positives from legitimate software and highlight the most suspicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events from all managed endpoints, with particular focus on developer workstations and designated analysis sandboxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH system_events | LOOKUP vm_artifact_weights on target_object | STATS sum(weight) as awareness_score by process_guid | WHERE awareness_score > threshold
- question: Does the sequence of system calls made by a process match the known, ordered logic of an evasion framework?
  context: This question focuses on the specific *order* of operations. Advanced evasion frameworks like Pafish perform checks in a predictable sequence. A sequence analysis model (like an LSTM) can learn these patterns and distinguish them from the more random system interactions of benign applications, allowing for the detection of sophisticated evasion techniques.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Sysmon Event ID 19
  - Sysmon Event ID 20
  - Sysmon Event ID 21
  - Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events from all managed endpoints, with particular focus on developer workstations and designated analysis sandboxes.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STREAM system_events | GROUP by process_guid | APPLY sequence_analysis_model | WHERE sequence matches known_evasion_pattern
- question: Did a process terminate immediately after checking for sandbox artifacts without performing any other significant activity?
  context: This question targets a classic evasion behavior where malware exits to avoid analysis if a sandbox is detected. By creating a stateful rule that links a sandbox check event with a near-immediate process termination—and confirms the absence of network, file, or child process activity in between—we can confidently identify this behavior.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 5
  - Sysmon Event ID 11
  - Zeek conn.log
  - SIEM or data lake platform capable of correlating process lifecycle events (start/stop), file system modifications, and network connection logs from endpoints and network sensors for a single process execution.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FIND process that performed sandbox_check | IF process terminates within 5s AND has no child_process, file_creation, or network_connection THEN ALERT
- question: After performing a sandbox check, did a process exhibit an anomalously short lifespan and low resource consumption compared to its historical baseline?
  context: This question uses historical baselining to spot anomalies. Legitimate applications have typical lifespans and I/O patterns. If an instance of a known application performs a sandbox check and then terminates far more quickly and with less activity than usual, it suggests its execution path was altered, possibly due to a successful evasion check.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 5
  - Sysmon Event ID 11
  - Zeek conn.log
  - SIEM or data lake platform capable of correlating process lifecycle events (start/stop), file system modifications, and network connection logs from endpoints and network sensors for a single process execution.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_termination_events | WHERE process performed_sandbox_check | COMPARE lifespan, io_bytes to historical_baseline for process_name | WHERE lifespan < 5th_percentile AND io_bytes < 10th_percentile
- question: Can a machine learning model classify a completed process session as an 'evasive termination' based on its lifecycle features?
  context: This question leverages supervised machine learning to formalize the detection of evasive termination. By training a model on features like lifespan, resource usage, and whether a sandbox check occurred, we can create a robust classifier that automatically scores and identifies processes that terminate prematurely due to evasion.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Sysmon Event ID 5
  - Sysmon Event ID 11
  - Zeek conn.log
  - SIEM or data lake platform capable of correlating process lifecycle events (start/stop), file system modifications, and network connection logs from endpoints and network sensors for a single process execution.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE completed_process_sessions | EXTRACT features(lifespan, cpu, network_io, sandbox_check_flag) | APPLY ML_evasive_termination_classifier | WHERE prediction = 'evasive-termination'
- question: Did a non-allowlisted process remain dormant for an unusually long time (e.g., >15 minutes) before making its first outbound network connection?
  context: This question aims to detect "time-based" evasion, where malware sleeps for a prolonged period to wait out automated sandbox analysis, which typically has a limited execution time. A long delay between process start and initial network activity is highly abnormal for most applications and is a strong indicator of this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Correlated endpoint and network log sources within a SIEM or data lake, specifically linking process creation and DNS/network connection events over extended time windows (e.g., > 1 hour).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE process_start_time and first_network_connection_time by process_guid | WHERE (network_time - start_time) > 15m AND process_name NOT IN allowlist
- question: Is the time delay between process start and first network connection a statistical outlier compared to the historical baseline for that specific executable?
  context: This question refines time-based detection by creating per-application baselines. While a 15-minute delay is generally suspicious, it might be normal for a specific backup agent. By comparing an execution's delay to its own history, this method can precisely identify anomalous sleep behavior that deviates from the norm for that particular software.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Correlated endpoint and network log sources within a SIEM or data lake, specifically linking process creation and DNS/network connection events over extended time windows (e.g., > 1 hour).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CALCULATE time_to_first_connection for each process | COMPARE value to historical_baseline for process_name | WHERE value > 99th_percentile
- question: Does a process's resource utilization pattern over its lifetime fit into a 'delayed-action' cluster characterized by an initial burst, a long lull, and then a second burst of activity?
  context: This question uses unsupervised machine learning to discover delayed execution patterns without fixed thresholds. By clustering processes based on their entire activity timeline (CPU, disk, network), the model can automatically identify groups of processes that exhibit this "sleep-then-act" behavior, potentially uncovering novel or varied time-based evasion tactics.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Zeek conn.log
  - Correlated endpoint and network log sources within a SIEM or data lake, specifically linking process creation and DNS/network connection events over extended time windows (e.g., > 1 hour).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE process_resource_timeseries_data | APPLY clustering_model | WHERE cluster_label = 'delayed-action_profile'
- question: Are any command lines or PowerShell scripts executing with strings or patterns unique to known sandbox evasion and discovery tools?
  context: This question seeks to find direct evidence of evasion tools through their unique command-line artifacts. Tools like 'pafish' or scripts like 'Find-AVSignature.ps1' often contain specific strings that can be detected with high confidence using regular expressions, providing a clear and actionable alert.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows PowerShell Event ID 4104
  - Centralized log platforms that capture and store full process command-line arguments (from Sysmon Event ID 1) and decoded PowerShell script block logs (from Event ID 4104) from all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (process_creation OR powershell_script_block) | WHERE content MATCHES REGEX ('pafish|al-khaser|Get-Sandbox-Status')
- question: Is a process executing with command-line arguments or script tokens that are statistically rare across the enterprise and also associated with public evasion tools?
  context: This question helps find new or unknown evasion tools by looking for unusual commands. Instead of relying on known strings, it identifies commands composed of tokens that are rarely seen in the environment. If these rare tokens are also present in public malware/tool repositories, it strongly suggests malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows PowerShell Event ID 4104
  - Centralized log platforms that capture and store full process command-line arguments (from Sysmon Event ID 1) and decoded PowerShell script block logs (from Event ID 4104) from all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH command_lines_and_scripts | CALCULATE rarity_score for each token | WHERE total_command_rarity_score > threshold
- question: Can a text classification model identify novel evasion tools by analyzing the semantic and syntactic features of their command lines or script content?
  context: This question applies advanced natural language processing to detect threats. By training on a large dataset of benign and malicious scripts, a model can learn the subtle characteristics of evasion-focused code. This allows it to identify new tools that "look like" known threats, even if they don't use the exact same strings.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows PowerShell Event ID 4104
  - Centralized log platforms that capture and store full process command-line arguments (from Sysmon Event ID 1) and decoded PowerShell script block logs (from Event ID 4104) from all enterprise endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE command_lines_and_scripts | APPLY text_classification_model | WHERE prediction = 'evasive-script'
- question: Is a process, especially a shell, executing an enumeration command (like 'tasklist') and piping the output to a filter (like 'findstr') to search for security tool keywords?
  context: This question targets a common adversary discovery technique. Attackers often run commands like `tasklist | findstr sysmon` to check for the presence of security tools without writing a custom program. Detecting this specific command structure is a high-fidelity indicator of manual or scripted discovery.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint log aggregators collecting full process command-line arguments, with a focus on parent-child process relationships originating from interactive shells (cmd.exe, powershell.exe) or office applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation | WHERE command_line MATCHES REGEX ('(tasklist|sc query).+\\|.+(findstr|grep).+(wireshark|sysmon|procmon)')
- question: Is a user or system account executing chained enumeration-and-filter commands at a rate that is anomalous compared to their own baseline?
  context: This question uses behavioral analytics to find suspicious activity. While a developer might occasionally use piped commands, a sudden increase in this behavior for a specific user or a service account that never does this is highly anomalous and could indicate a compromised account being used for discovery.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint log aggregators collecting full process command-line arguments, with a focus on parent-child process relationships originating from interactive shells (cmd.exe, powershell.exe) or office applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH piped_commands | COUNT by user, day | COMPARE daily_count to user_30day_baseline | WHERE daily_count > 3_std_dev
- question: Has an unusual parent-child process chain been observed, such as an office application spawning a shell to perform piped enumeration?
  context: This question focuses on the origin of the discovery command. A user running `tasklist` from `cmd.exe` is normal. However, `winword.exe` spawning `cmd.exe` to run `tasklist | findstr sysmon` is extremely suspicious. Graph-based analysis can automatically learn normal process chains and flag these abnormal sequences as high-risk.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint log aggregators collecting full process command-line arguments, with a focus on parent-child process relationships originating from interactive shells (cmd.exe, powershell.exe) or office applications.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation | ANALYZE process_ancestry | WHERE parent_process IN ('winword.exe', 'excel.exe') AND child_process IN ('cmd.exe', 'powershell.exe') AND grandchild_command contains_piped_enumeration
- question: Is a newly created process rapidly performing a diverse set of checks for human interaction or common sandbox characteristics?
  context: This question looks for malware trying to determine if it's running in an automated environment or on a real user's machine. A process that quickly checks for things like screen resolution, recent user documents, and system uptime is likely performing "humanity checks" to evade sandboxes that lack these features.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Endpoint log aggregators collecting a high volume of diverse event types, including API calls for user input, registry queries, and file system access, primarily from user workstations and VDI environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH system_events | WHERE event_type IN (humanity_checks_list) | STATS distinct_count(event_type) by process_guid, time_window(10s) | WHERE distinct_count >= 3
- question: Does a new process exhibit unusually high entropy in the types of system events it generates shortly after launch?
  context: This question provides a mathematical way to measure the diversity of a process's initial actions. A process performing many different types of checks (registry, file, WMI, etc.) in a short time will have high event entropy. This is a strong statistical indicator of a discovery phase, as it deviates from the more focused startup behavior of benign applications.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Endpoint log aggregators collecting a high volume of diverse event types, including API calls for user input, registry queries, and file system access, primarily from user workstations and VDI environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH system_events in first 30s of process_lifetime | CALCULATE shannon_entropy(event_type) by process_guid | WHERE entropy_score > 99th_percentile
- question: Does the initial sequence of system events from a new process have a high reconstruction error when processed by an autoencoder trained on benign startups?
  context: This question uses an advanced unsupervised learning technique to find abnormal startup behaviors. An autoencoder learns the "essence" of normal application startups. When it encounters a process performing a wide array of unusual humanity checks, it will fail to reconstruct the event sequence accurately, resulting in a high error score that flags the process as anomalous.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 12
  - Sysmon Event ID 13
  - Endpoint log aggregators collecting a high volume of diverse event types, including API calls for user input, registry queries, and file system access, primarily from user workstations and VDI environments.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE system_event_sequences from new processes | APPLY autoencoder_model | WHERE reconstruction_error > threshold
- question: Did a process make a single, minimal network connection to a high-reputation service (like Google DNS) and then cease all network activity?
  context: This question targets a common technique where malware checks for internet connectivity before proceeding. A tiny connection (e.g., just a DNS query or a TCP handshake with no data) to a well-known service, followed by silence, is not typical application behavior and strongly suggests a "canary" check to see if the sandbox environment has network access.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 22
  - Network sensor logs (e.g., Zeek) from internet egress points and core DNS servers, correlated within a SIEM with endpoint-based network connection events (Sysmon Event ID 3/22) to attribute network traffic to a specific source process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections | WHERE dest_ip IN (public_dns_list) AND total_bytes < 256 | GROUP by process_guid | WHERE connection_count = 1
- question: Are there processes whose only network activity consists of one or more 'micro-connections' that are statistical outliers in terms of data volume?
  context: This question uses statistical analysis of network traffic to find connectivity checks. By identifying all network sessions with an anomalously low byte count (e.g., in the 1st percentile) and correlating them to the source process, we can find programs whose entire network behavior is limited to these tiny "canary" checks, which is highly indicative of evasion.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 22
  - Network sensor logs (e.g., Zeek) from internet egress points and core DNS servers, correlated within a SIEM with endpoint-based network connection events (Sysmon Event ID 3/22) to attribute network traffic to a specific source process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH network_connections | WHERE total_bytes < 1st_percentile_of_all_connections | CORRELATE to source_process | IF process has no other network activity THEN ALERT
- question: Can an unsupervised anomaly detection model, trained on normal network flow characteristics, identify these 'canary' checks as outliers?
  context: This question applies unsupervised machine learning to network data to find evasion. A model like an Isolation Forest can learn what constitutes a "normal" network connection in the environment. The extremely short duration and low byte count of a canary check will make it a clear outlier that the model can easily flag as anomalous, without needing pre-defined rules.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Sysmon Event ID 3
  - Sysmon Event ID 22
  - Network sensor logs (e.g., Zeek) from internet egress points and core DNS servers, correlated within a SIEM with endpoint-based network connection events (Sysmon Event ID 3/22) to attribute network traffic to a specific source process.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PIPE network_flow_data | EXTRACT features(duration, total_bytes, dest_port) | APPLY isolation_forest_model | WHERE prediction = 'anomaly'