name: 'T1628.001: Suppress Application Icon'
id: '9a8b1c4d-2e3f-4a5b-8c7d-6e5f4a3b2c1d'
description: |
  This playbook helps determine if an adversary is hiding malicious applications by suppressing their icons on managed mobile devices. This can be detected by identifying applications installed via MDM that have no corresponding launch activity in EDR logs, observing a launcher process directly opening an application's details page in system settings, or through static analysis of APK files that reveals the use of APIs to programmatically disable an application's main launcher component.
type: technique
related:
  - 'TA0030: Defense Evasion'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: none
questions:
  - question: Is there an application installed on a device that has never been launched, potentially indicating it is a hidden helper or malicious payload?
    context: |
      This question aims to identify 'headless' applications. Malicious apps may be installed without a user-launchable icon to act as a background service or payload dropper. By joining MDM inventory logs with mobile EDR launch logs, we can find packages that exist on the device but have no record of being opened by the user via the standard launcher interface. This check helps surface potentially unwanted or malicious software that is trying to remain hidden.
    answer_sources: |
      MDM application inventory logs, Mobile EDR launcher intent logs, Threat intelligence package name blocklists, Zeek conn.log, Zeek dns.log. The analysis requires access to Corporate-owned and bring-your-own-device (BYOD) mobile endpoints, MDM and Mobile Threat Defense (MTD) management servers, Security Information and Event Management (SIEM) platform, Network egress gateways, and Internal DNS resolvers.
    range: last 30 days
    queries:
      - platform: SIEM
        query: |
          LEFT JOIN mdm_inventory_logs ON (device_id, package_name)
          WITH edr_launch_logs ON (device_id, package_name)
          WHERE edr_launch_logs.package_name IS NULL
          AND mdm_inventory_logs.time > NOW() - 30d
          AND mdm_inventory_logs.package_name NOT IN (allowlist)
          THEN
            QUERY threat_intel_feed WITH package_name, package_hash
            ALERT
  - question: Has a newly identified non-launcher application been installed on an anomalously large number of devices across the organization?
    context: |
      This question focuses on the installation prevalence of headless applications. While some legitimate helper apps are non-launchable, a malicious one might propagate rapidly. By establishing a baseline for normal installation counts of benign helper apps, we can detect outliers. A new non-launcher app spreading to a number of devices far exceeding the 99th percentile of this baseline is highly suspicious and could indicate a coordinated campaign.
    answer_sources: |
      MDM application inventory logs, Mobile EDR launcher intent logs, Threat intelligence package name blocklists, Zeek conn.log, Zeek dns.log. The analysis requires access to Corporate-owned and bring-your-own-device (BYOD) mobile endpoints, MDM and Mobile Threat Defense (MTD) management servers, Security Information and Event Management (SIEM) platform, Network egress gateways, and Internal DNS resolvers.
    range: last 90 days
    queries:
      - platform: Data Analytics
        query: |
          // Step 1: Establish baseline
          CALCULATE installation_prevalence_percentiles for known_benign_helper_apps over last 90 days.
          STORE 99th_percentile_threshold.

          // Step 2: Detect anomalies
          FOR each new_non_launcher_app:
            CALCULATE fleet_wide_installation_count.
            IF installation_count > 99th_percentile_threshold:
              ALERT high_severity
  - question: Can we assign a risk score to a non-launcher application based on its installation method, requested permissions, and associated network behavior?
    context: |
      This question seeks to automatically classify the risk of a headless application using a machine learning model. A logistic regression model can be trained on various features to predict the probability of an app being malicious ($$ P(malicious) > 0.8 $$). Features include whether the app was sideloaded, the number of dangerous permissions it requests, and network indicators like the entropy of destination IPs ($$ H(X) = -\sum p(x) \log_2 p(x) $$) or queried domains, which can reveal command-and-control (C2) activity. This provides a scalable way to prioritize investigations.
    answer_sources: |
      MDM application inventory logs, Mobile EDR launcher intent logs, Threat intelligence package name blocklists, Zeek conn.log, Zeek dns.log. The analysis requires access to Corporate-owned and bring-your-own-device (BYOD) mobile endpoints, MDM and Mobile Threat Defense (MTD) management servers, Security Information and Event Management (SIEM) platform, Network egress gateways, and Internal DNS resolvers.
    range: last 90 days
    queries:
      - platform: Machine Learning
        query: |
          // Feature Engineering
          EXTRACT features from MDM logs (sideloaded_flag, permission_count, app_age).
          EXTRACT features from Zeek logs (destination_ip_entropy, dns_query_entropy, low_reputation_domain_ratio).

          // Prediction
          PREDICT P(malicious) using trained logistic regression model.
          IF P(malicious) > 0.8:
            FLAG for analyst review.
  - question: Is a user being redirected from the device's home screen directly to an application's details page in the system settings?
    context: |
      This question looks for evidence of a synthesized icon. An adversary can create a shortcut that looks like a normal app icon but actually launches the system settings and navigates directly to a specific app's details page. A correlation rule can detect this by seeing a known launcher process spawn the system settings process (`com.android.settings`) with command-line arguments that contain 'ApplicationDetailsPages' and a target 'package:'. This behavior is a strong indicator that the user is interacting with a deceptive shortcut designed to make them launch a hidden app.
    answer_sources: |
      Mobile EDR process creation event logs, Android Logcat logs, ITSM ticket data. This requires access to Managed mobile endpoints running Android 10 or newer, EDR and SIEM log aggregation platforms, and the IT Service Management system.
    range: last 90 days
    queries:
      - platform: SIEM
        query: |
          ON process_creation_event:
          IF parent_process_name IN (launcher_allowlist)
          AND process_name == 'com.android.settings'
          AND process_cmdline CONTAINS 'com.android.settings.ApplicationDetailsPages'
          AND process_cmdline CONTAINS 'package:':
            EXTRACT package_name from process_cmdline
            ALERT for investigation
  - question: Has there been a statistically significant increase in the number of launcher-to-settings redirections for a specific application?
    context: |
      This question aims to detect anomalous spikes in the use of synthesized icons for a particular app. By tracking the daily count of these redirection events per application, we can establish a normal baseline using a 30-day moving average ($$ MA_{30} $$) and standard deviation ($$ \sigma_{30} $$). An alert is triggered if the daily count for an app exceeds three standard deviations above its moving average ($$ DailyCount > MA_{30} + 3\sigma_{30} $$), which suggests a potential campaign or widespread use of a deceptive technique that warrants investigation.
    answer_sources: |
      Mobile EDR process creation event logs, Android Logcat logs, ITSM ticket data. This requires access to Managed mobile endpoints running Android 10 or newer, EDR and SIEM log aggregation platforms, and the IT Service Management system.
    range: last 30 days
    queries:
      - platform: Data Analytics
        query: |
          FOR each identified_package:
            CALCULATE daily_count of 'launcher-to-settings' events.
            CALCULATE 30_day_moving_average (MA_30) and standard_deviation (sigma_30).
            IF daily_count > (MA_30 + 3 * sigma_30):
              ALERT on statistical anomaly
  - question: Can we detect the use of a synthesized icon by identifying anomalous user navigation sequences?
    context: |
      This question uses sequence analysis to model user behavior and find deviations that indicate a synthesized icon was used. A Hidden Markov Model (HMM) can be trained on normal UI event sequences (e.g., HomeScreen -> AppDrawer -> App). The model would learn that a direct transition from the 'HomeScreen' state to an 'AppDetailsPage' state is a very low-probability event. When the model detects this anomalous sequence in a user's session logs, it can generate a high-fidelity alert, as this navigation path is not typical and strongly implies a deceptive shortcut was used.
    answer_sources: |
      Mobile EDR process creation event logs, Android Logcat logs, ITSM ticket data. This requires access to Managed mobile endpoints running Android 10 or newer, EDR and SIEM log aggregation platforms, and the IT Service Management system.
    range: last 90 days
    queries:
      - platform: Machine Learning
        query: |
          // Model Training
          TRAIN Hidden Markov Model (HMM) on baseline UI event sequences.
          IDENTIFY 'HomeScreen' -> 'AppDetailsPage' as anomalous transition.

          // Detection
          FOR each user_session_event_sequence:
            SCORE sequence using trained HMM.
            IF anomalous_transition_is_detected:
              ALERT on anomalous navigation path
  - question: Does a submitted APK file contain code to programmatically disable its own launcher icon?
    context: |
      This question seeks to proactively identify malicious applications during the vetting process before they are deployed. A YARA rule can scan the APK's bytecode for the specific `setComponentEnabledSetting` API call and the `COMPONENT_ENABLED_STATE_DISABLED` flag. A post-processing script then verifies if the targeted component is indeed the main launcher defined in the `AndroidManifest.xml`. A positive match provides definitive evidence of icon-hiding behavior, allowing the application to be automatically blocked from the organizational app store.
    answer_sources: |
      Static analysis reports from application vetting sandbox, Mobile application reputation service logs, APK files. This requires access to Organizational application stores (e.g., managed Google Play), Application vetting sandboxes, Developer CI/CD pipelines, and Threat intelligence platforms.
    range: last 90 days
    queries:
      - platform: Application Vetting Pipeline
        query: |
          // YARA Scan
          SCAN APK with YARA rule for `setComponentEnabledSetting` and `COMPONENT_ENABLED_STATE_DISABLED`.

          // Post-processing
          IF YARA match:
            PARSE AndroidManifest.xml.
            CONFIRM disabled component has LAUNCHER intent.
            IF confirmed:
              BLOCK application distribution
              ALERT
  - question: Among applications that use icon-hiding APIs, which ones are most anomalous based on their overall API usage and code complexity?
    context: |
      This question helps prioritize manual review for apps flagged by the YARA rule. Even if an app uses the icon-hiding API, it might be for a legitimate purpose. To find the most suspicious cases, we can compare the app's full set of API calls to a baseline of benign apps using Jaccard distance ($$ d_J(A, B) = 1 - \frac{|A \cap B|}{|A \cup B|} $$). A high distance indicates unusual API usage. Additionally, high Shannon entropy of the `classes.dex` file can indicate code obfuscation. Flagging apps that have the icon-hiding API *and* are in the top 5th percentile for both Jaccard distance and entropy helps focus analyst attention on the most likely threats.
    answer_sources: |
      Static analysis reports from application vetting sandbox, Mobile application reputation service logs, APK files. This requires access to Organizational application stores (e.g., managed Google Play), Application vetting sandboxes, Developer CI/CD pipelines, and Threat intelligence platforms.
    range: last 90 days
    queries:
      - platform: Data Analytics
        query: |
          FOR each new_apk:
            IF apk contains icon-hiding_api:
              CALCULATE Jaccard distance of API set vs. benign baseline.
              CALCULATE Shannon entropy of classes.dex.
              IF Jaccard_distance > 95th_percentile AND entropy > 95th_percentile:
                FLAG for manual review
  - question: Can we automate the rejection or quarantining of new APKs based on a predicted malice score from a machine learning model?
    context: |
      This question focuses on creating a fully automated, scalable vetting system using a gradient boosting classifier (like XGBoost). The model is trained on a rich feature set from static analysis reports, including suspicious API calls, dangerous permissions, obfuscation signatures, and the reputation of embedded network indicators. It then assigns a malice score to each new APK. Applications with a very high score (e.g., $$ > 0.9 $$) can be automatically rejected, while those in a medium-risk band (e.g., $$ 0.7 - 0.9 $$) can be sent to analysts for review, optimizing the security workflow.
    answer_sources: |
      Static analysis reports from application vetting sandbox, Mobile application reputation service logs, APK files. This requires access to Organizational application stores (e.g., managed Google Play), Application vetting sandboxes, Developer CI/CD pipelines, and Threat intelligence platforms.
    range: last 90 days
    queries:
      - platform: Machine Learning
        query: |
          // Feature Engineering
          EXTRACT features from static analysis (APIs, permissions, packers, URL/IP reputation).

          // Prediction
          PREDICT malice_score using trained gradient boosting model.
          IF malice_score > 0.9:
            REJECT application
          ELSE IF malice_score > 0.7:
            QUARANTINE for manual review