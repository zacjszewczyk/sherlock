name: "T1629.003: Disable or Modify Tools"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook helps determine if an adversary is attempting to evade mobile security controls by disabling or modifying security tools. It focuses on detecting several key indicators of this activity. These include changes in device administrator privileges, such as revoking access for security apps or granting it to unapproved ones; explicit reports from Mobile Threat Defense (MTD) solutions that their agent has been disabled, tampered with, or stopped; a suspicious absence of expected telemetry or heartbeat signals from an MTD agent that cannot be explained by network outages; and compliance reports indicating that a device's SELinux enforcement state has been weakened to 'permissive' or 'disabled', which violates typical security policies.
type: "technique"
related:
  - "TA0030: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any immediate indications of unauthorized changes to device administrator privileges, such as revoking security tool access or granting it to unapproved apps?"
    context: |
      This question addresses the most direct evidence of tampering with security controls at the privilege level. An adversary may attempt to remove a security application's device administrator rights to render it ineffective or grant those same rights to a malicious application to gain deeper system control. This is a high-fidelity indicator of a targeted attack, and a real-time alert is critical for a rapid response.
    answer_sources:
      - "MDM/UEM audit logs"
      - "Application Inventory List"
      - "Centralized log aggregator (SIEM)"
      - "MDM/UEM administrative servers"
      - "Fleet of managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH MDM/UEM logs WHERE (event_code = 'device_admin_revoked' AND target_app IN [list_of_required_security_tools]) OR (event_code = 'device_admin_granted' AND target_app NOT IN [list_of_approved_admin_apps])"
  - question: "Is there a statistically unusual pattern of an application gaining device administrator privileges on a specific device over time?"
    context: |
      This question aims to detect more subtle or low-and-slow attacks that a simple, static rule might miss. By establishing a baseline of normal behavior for each device, we can identify when a device starts exhibiting an abnormal frequency of privilege escalation events. A sudden spike above the 99th percentile of its own history suggests a departure from normal use and could indicate that the device is compromised or being prepared for an attack.
    answer_sources:
      - "MDM/UEM audit logs"
      - "Application Inventory List"
      - "Centralized log aggregator (SIEM)"
      - "MDM/UEM administrative servers"
      - "Fleet of managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each_device, CALCULATE 30-day baseline of 'device_admin_granted' counts for unapproved apps. ALERT if daily_count > 99th_percentile(baseline)."
  - question: "Can we predictively identify and automatically respond to malicious device administrator changes using machine learning?"
    context: |
      This question moves from reactive detection to proactive, automated defense. By training a machine learning model on various contextual features (e.g., app permissions, installation source, time of day), it's possible to score the likelihood that a privilege change is malicious. This allows for an automated, high-confidence response, such as quarantining the device via an MDM API call, thereby neutralizing a threat before a human analyst can even begin an investigation.
    answer_sources:
      - "MDM/UEM audit logs"
      - "Application Inventory List"
      - "Centralized log aggregator (SIEM)"
      - "MDM/UEM administrative servers"
      - "Fleet of managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "TRAIN classification model on features (app_name, permissions, source, time). PREDICT if admin_change_event is malicious. IF score > 0.9, TRIGGER automated device quarantine."
  - question: "Has the Mobile Threat Defense (MTD) agent on any device been explicitly reported as disabled, tampered with, or stopped?"
    context: |
      This question focuses on a critical alert directly from the MTD platform itself. An adversary's primary goal when evading defenses is to disable the tools that would detect them. An event explicitly stating the MTD agent has been stopped or tampered with is a clear, unambiguous signal that the device's security posture has been compromised and requires immediate investigation.
    answer_sources:
      - "MTD agent status logs"
      - "MTD alert logs"
      - "MTD management console"
      - "Centralized log aggregator (SIEM)"
      - "Managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH MTD logs WHERE agent_status IN ('disabled', 'tampered', 'stopped'). ALERT with device ID and user details."
  - question: "Is there a statistical anomaly in the number of MTD agent tampering or disabling events for a specific device model or OS version?"
    context: |
      This question helps to identify widespread issues beyond a single device. A spike in tampering events concentrated on a particular device model or OS version could indicate a newly discovered vulnerability or a targeted campaign exploiting a weakness in that specific platform. Detecting this trend allows security teams to take broader action, such as issuing patches or warnings for all similar devices.
    answer_sources:
      - "MTD agent status logs"
      - "MTD alert logs"
      - "MTD management console"
      - "Centralized log aggregator (SIEM)"
      - "Managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each_device_group (by model/OS), CALCULATE 14-day moving average of tamper_events. ALERT if daily_count > (moving_average + 3 * std_dev)."
  - question: "Can we use machine learning to distinguish between benign MTD agent stops and malicious tampering, and automate a response?"
    context: |
      This question addresses the challenge of alert fatigue. MTD agents can stop for benign reasons, such as OS updates or user-initiated reboots. A supervised machine learning model can be trained to differentiate these normal events from malicious tampering by analyzing surrounding context, like the time since the last successful check-in or the presence of a concurrent root detection alert. This focuses analyst attention on high-fidelity threats and enables confident, automated isolation of compromised devices.
    answer_sources:
      - "MTD agent status logs"
      - "MTD alert logs"
      - "MTD management console"
      - "Centralized log aggregator (SIEM)"
      - "Managed mobile endpoints"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "TRAIN classifier on features (agent_status, time_since_checkin, root_alert, new_app_install). PREDICT if event is 'malicious tampering'. IF true, ISOLATE device."
  - question: "Has any device stopped sending its required MTD agent heartbeat signal within an expected static time window?"
    context: |
      This question provides a fundamental check for agent health. If an MTD agent is disabled or removed, it will stop sending its periodic heartbeat signal. By monitoring for the absence of this signal beyond a static threshold (e.g., 60 minutes), security teams can get a medium-severity notification that a device has gone offline unexpectedly, prompting a manual check of its status. It's a simple but effective safety net.
    answer_sources:
      - "MTD agent heartbeat logs"
      - "Zeek conn.log"
      - "MTD management console"
      - "Network sensors at internet gateways"
      - "Centralized log aggregator (SIEM)"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "CREATE stateful rule to track last_heartbeat_timestamp for each device. ALERT if (current_time - last_heartbeat_timestamp) > 60 minutes."
  - question: "Has any device failed to check-in within its own statistically normal heartbeat interval, and can this be correlated with a lack of network traffic?"
    context: |
      This question refines the basic heartbeat check by creating a dynamic, per-device baseline. Not all devices check in at the same rate. By calculating the mean and standard deviation of check-in intervals for each device, we can create a much more accurate threshold for alerting. An alert is triggered only when a device deviates significantly from its own established pattern. Corroborating this with network logs to confirm the device isn't communicating with MTD servers adds a powerful layer of confirmation that the agent is truly offline and not just experiencing network latency.
    answer_sources:
      - "MTD agent heartbeat logs"
      - "Zeek conn.log"
      - "MTD management console"
      - "Network sensors at internet gateways"
      - "Centralized log aggregator (SIEM)"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each_device, CALCULATE baseline heartbeat interval (mean, std_dev). ALERT if time_since_last_heartbeat > (mean + 4 * std_dev). THEN, QUERY network logs to confirm no traffic from device_ip to MTD_server_ip."
  - question: "Can we use time-series forecasting to predict when a device's MTD agent should check in and alert on significant deviations?"
    context: |
      This question represents the most advanced method of heartbeat analysis. Instead of relying on static or simple statistical baselines, a time-series model (like Prophet or LSTM) can learn complex patterns in a device's check-in behavior, including time-of-day or day-of-week variations. The model then predicts a window for the next expected check-in. An alert is generated only if the device fails to check in within this predicted window, representing a statistically significant anomaly that is highly indicative of a problem.
    answer_sources:
      - "MTD agent heartbeat logs"
      - "Zeek conn.log"
      - "MTD management console"
      - "Network sensors at internet gateways"
      - "Centralized log aggregator (SIEM)"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each_device, TRAIN time-series model on heartbeat history. PREDICT next_checkin_interval. ALERT if actual_checkin falls outside prediction_interval."
  - question: "Are any Android devices reporting a non-compliant SELinux state, and can we automate an immediate response?"
    context: |
      This question targets a critical security control specific to Android. SELinux (Security-Enhanced Linux) enforces mandatory access controls, and it should always be in an 'enforcing' state on a managed device. An adversary may disable it or set it to 'permissive' to bypass system protections. This is a severe security degradation, and the detection of this state should trigger an immediate, automated response, such as moving the device to a restricted network to contain the potential threat.
    answer_sources:
      - "MDM/UEM compliance reports"
      - "MTD security posture scan logs"
      - "MDM/UEM and MTD administrative consoles"
      - "Centralized log aggregator (SIEM)"
      - "Fleet of managed Android devices"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH compliance logs WHERE device_os = 'Android' AND selinux_status IN ('permissive', 'disabled'). TRIGGER alert and MOVE device to restricted_network_group."
  - question: "Is there an abnormal level of change across multiple key security settings on any single Android device?"
    context: |
      This question seeks to identify an adversary who is making multiple configuration changes simultaneously to disable defenses. While a single change might not be suspicious, a flurry of changes to key settings (like SELinux status, root status, developer mode) is highly abnormal. By calculating the Shannon entropy of a string representing these settings, we can measure the 'randomness' or 'chaos' of the device's configuration. A sudden spike in entropy compared to the device's baseline indicates a suspicious level of activity that warrants investigation.
    answer_sources:
      - "MDM/UEM compliance reports"
      - "MTD security posture scan logs"
      - "MDM/UEM and MTD administrative consoles"
      - "Centralized log aggregator (SIEM)"
      - "Fleet of managed Android devices"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each_device, CALCULATE daily entropy of security_settings_string. ALERT if daily_entropy > 98th_percentile(baseline_entropy)."
  - question: "Can we use an unsupervised machine learning model to identify Android devices that are outliers from the fleet's secure baseline based on their security posture?"
    context: |
      This question aims to find the 'unknown unknowns' by using anomaly detection. Instead of looking for a specific bad configuration, an unsupervised model like an Isolation Forest can learn what a 'normal' secure device looks like based on the entire fleet. It then assigns an anomaly score to each device. Devices with high scores are statistical outliers; they are different from their peers in ways that may not be captured by predefined rules. These outliers should be flagged for manual review, as they may represent novel attacks or previously unknown misconfigurations.
    answer_sources:
      - "MDM/UEM compliance reports"
      - "MTD security posture scan logs"
      - "MDM/UEM and MTD administrative consoles"
      - "Centralized log aggregator (SIEM)"
      - "Fleet of managed Android devices"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "TRAIN Isolation Forest model on feature set from all Android devices. CALCULATE anomaly score for each device. FLAG devices with scores in top 2% for review."