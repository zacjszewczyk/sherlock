name: T1644: Out of Band Data
id: a8d6e3f4-5b6c-4d7e-8f9a-0b1c2d3e4f5a
description: This playbook helps detect if an adversary is using out-of-band channels for command and control on mobile devices. It focuses on identifying malicious Android applications gaining 'Notification Access' and exhibiting suspicious network behavior like communicating with high-entropy domains or exfiltrating large data volumes; analyzing inbound SMS/MMS messages for links to malicious or newly registered domains and for obfuscated, high-entropy content; and monitoring for unauthorized Bluetooth or NFC connections in sensitive geofenced locations, especially when followed by anomalously large data transfers.
type: technique
related:
- TA0037: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a non-whitelisted application been granted 'Notification Access' and subsequently communicated with a known malicious domain?
  context: This question aims to detect a common attack vector where a malicious Android app gains access to notifications to intercept data or commands. By correlating the 'Notification Access' permission grant for an unapproved app with subsequent connections to domains flagged by threat intelligence, we can identify potential C2 activity or data exfiltration.
  answer_sources:
  - MDM application inventory logs
  - Android OS security logs
  - Zeek conn.log
  - Zeek dns.log
  - Threat Intelligence Feeds
  - Corporate-managed and BYOD Android devices
  - Mobile Device Management (MDM) servers
  - Network egress points
  - DNS resolvers
  - VPN concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Find devices where a non-whitelisted app was granted 'Notification Access'
      non_whitelisted_grants = SEARCH mdm_logs WHERE event='Notification Access Granted' AND app_name NOT IN (whitelist)
      // For each grant, check for malicious connections within 24 hours
      FOR grant IN non_whitelisted_grants:
        device_ip = grant.device_ip
        timestamp = grant.timestamp
        connections = SEARCH zeek_conn_logs WHERE source_ip=device_ip AND time > timestamp AND time < timestamp + 24h
        FOR conn in connections:
          IF conn.destination_domain IN (threat_intel_feed):
            ALERT(grant, conn)
- question: Following a 'Notification Access' grant to a non-whitelisted app, did the device exhibit anomalous network behavior, such as querying high-entropy domains or exfiltrating an unusual volume of data?
  context: This question looks for secondary indicators of compromise after a potentially malicious permission grant. High-entropy domain names are often used by Domain Generation Algorithms (DGAs) for C2, while a sudden spike in outbound data can signify data exfiltration. Detecting these anomalies provides strong evidence of malicious activity.
  answer_sources:
  - MDM application inventory logs
  - Android OS security logs
  - Zeek conn.log
  - Zeek dns.log
  - Corporate-managed and BYOD Android devices
  - Mobile Device Management (MDM) servers
  - Network egress points
  - DNS resolvers
  - VPN concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Find devices with non-whitelisted 'Notification Access' grants
      target_events = SEARCH mdm_logs WHERE event='Notification Access Granted' AND app_name NOT IN (whitelist)
      // For each device, analyze subsequent DNS and connection logs
      FOR event IN target_events:
        // Check for high-entropy DNS queries
        dns_queries = SEARCH zeek_dns_logs WHERE source_ip=event.ip AND time > event.grant_time
        FOR query IN dns_queries:
          IF entropy(query.domain) > 98th_percentile_entropy:
            ALERT("High-entropy domain query", event, query)
        // Check for anomalous data volume
        connections = SEARCH zeek_conn_logs WHERE source_ip=event.ip AND time > event.grant_time
        IF sum(connections.outbound_bytes) > 95th_percentile_baseline(event.ip):
          ALERT("Anomalous outbound data volume", event)
- question: After a non-whitelisted app received 'Notification Access', did the device's rate of new outbound network connections significantly deviate from its established baseline?
  context: This question uses behavioral analytics to detect subtle C2 patterns. A malicious app might periodically "beacon" out to a C2 server. While individual connections may seem benign, a change in the frequency or pattern of these connections can be a strong indicator of compromise. A time-series model can detect these deviations from normal behavior.
  answer_sources:
  - MDM application inventory logs
  - Android OS security logs
  - Zeek conn.log
  - Zeek dns.log
  - Corporate-managed and BYOD Android devices
  - Mobile Device Management (MDM) servers
  - Network egress points
  - DNS resolvers
  - VPN concentrators
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Identify grant events
      grant_events = SEARCH mdm_logs WHERE event='Notification Access Granted' AND app_name NOT IN (whitelist)
      // For each event, check connection frequency against forecast
      FOR event IN grant_events:
        device_ip = event.device_ip
        // Get the pre-trained model for the device
        model = get_timeseries_model(device_ip)
        // Get hourly connection counts post-event
        hourly_counts = AGGREGATE zeek_conn_logs WHERE source_ip=device_ip AND time > event.timestamp GROUP BY hour
        // Compare actuals to forecast
        FOR hour, count IN hourly_counts:
          forecast = model.predict(hour)
          IF count > forecast.upper_confidence_bound:
            ALERT("Connection frequency anomaly", event, hour, count)
- question: Has a managed device received an SMS/MMS message containing a URL that points to a known malicious or newly registered domain?
  context: This question addresses the common smishing (SMS phishing) attack vector. Adversaries send messages with malicious links to trick users into installing malware or divulging credentials. By checking URLs against threat intelligence and lists of newly registered domains (which are often used for malicious campaigns), we can proactively identify and respond to these threats.
  answer_sources:
  - MDM security event logs
  - Carrier SMS/MMS detail records
  - Threat Intelligence Feeds
  - Zeek dns.log
  - Zeek http.log
  - Telecommunication provider gateways for corporate mobile accounts
  - Corporate mobile devices
  - SIEM/Log aggregator
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Process new SMS/MMS logs
      FOR message IN new_sms_mms_logs:
        urls = extract_urls(message.body)
        FOR url IN urls:
          domain = get_domain(url)
          // Check against threat intel and newly registered domains
          IF domain IN (malicious_domain_feed) OR is_newly_registered(domain, 30_days):
            ALERT("Suspicious URL in SMS/MMS", message, url)
- question: Has a device received an SMS/MMS message with unusually high-entropy text, suggesting obfuscation or machine-generation?
  context: This question aims to detect malicious messages that may not contain obvious indicators like URLs. Adversaries might use obfuscated text to deliver commands or evade simple keyword-based filters. A significantly high entropy score compared to the organizational baseline can indicate that the message is not typical human-generated text and warrants investigation.
  answer_sources:
  - MDM security event logs
  - Carrier SMS/MMS detail records
  - Threat Intelligence Feeds
  - Zeek dns.log
  - Zeek http.log
  - Telecommunication provider gateways for corporate mobile accounts
  - Corporate mobile devices
  - SIEM/Log aggregator
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Get organizational baseline for SMS entropy
      baseline_mean, baseline_stddev = calculate_entropy_baseline(all_sms_logs, last_30_days)
      // Analyze new messages
      FOR message IN new_sms_mms_logs:
        message_entropy = entropy(message.body)
        threshold = baseline_mean + (3 * baseline_stddev)
        IF message_entropy > threshold:
          ALERT("High-entropy SMS/MMS message detected", message)
- question: Has a machine learning model classified any inbound SMS/MMS messages as malicious with a high degree of confidence?
  context: This question leverages advanced machine learning to identify smishing attempts that might be missed by simpler rule-based methods. A trained text classification model can analyze a wide range of features (word choice, grammar, structure, presence of special characters, etc.) to determine the likelihood that a message is malicious, providing a more sophisticated and adaptable detection capability.
  answer_sources:
  - MDM security event logs
  - Carrier SMS/MMS detail records
  - Threat Intelligence Feeds
  - Zeek dns.log
  - Zeek http.log
  - Telecommunication provider gateways for corporate mobile accounts
  - Corporate mobile devices
  - SIEM/Log aggregator
  - Threat Intelligence Platform
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Load the pre-trained smishing detection model
      model = load_smishing_classifier()
      // Score new incoming messages
      FOR message IN new_sms_mms_logs:
        features = extract_features(message.body)
        prediction_score = model.predict_proba(features)
        IF prediction_score.malicious > 0.95:
          ALERT("ML model detected high-confidence smishing attempt", message, prediction_score)
- question: Has a managed device paired with an unauthorized Bluetooth/NFC peripheral while physically located in a sensitive, geofenced area?
  context: This question addresses the physical threat of data exfiltration or device compromise via short-range wireless protocols like Bluetooth or NFC. By correlating an unauthorized pairing event with the device's presence in a high-value location (e.g., an R&D lab, executive suite), we can quickly identify a high-risk security event that requires immediate attention.
  answer_sources:
  - MDM security logs
  - Mobile OS Bluetooth/NFC logs
  - Physically controlled spaces (e.g., executive suites, R&D labs)
  - Corporate-managed mobile devices with Bluetooth/NFC enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Get geofence definitions and peripheral whitelist
      geofences = get_sensitive_locations()
      peripheral_whitelist = get_approved_mac_addresses()
      // Monitor MDM logs for pairing events
      FOR event IN mdm_pairing_logs:
        is_in_geofence = check_location(event.gps, geofences)
        is_unauthorized = event.paired_mac NOT IN peripheral_whitelist
        IF is_in_geofence AND is_unauthorized:
          ALERT("Unauthorized peripheral pairing in sensitive area", event)
- question: Following a pairing with an unauthorized peripheral, did the device transfer an anomalously large amount of data via Bluetooth/NFC?
  context: This question seeks to identify data exfiltration occurring over Bluetooth or NFC. While a pairing itself might be suspicious, a subsequent large data transfer provides concrete evidence of unusual activity. By comparing the transfer size to the user's historical baseline, we can distinguish between normal use (e.g., pairing headphones) and a potential exfiltration event.
  answer_sources:
  - MDM security logs
  - Mobile OS Bluetooth/NFC logs
  - Physically controlled spaces (e.g., executive suites, R&D labs)
  - Corporate-managed mobile devices with Bluetooth/NFC enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Monitor for pairing events with non-whitelisted devices
      FOR pairing_event IN mdm_pairing_logs WHERE paired_mac NOT IN (whitelist):
        user = pairing_event.user
        // Get user's baseline data transfer volume
        baseline_99th_percentile = get_user_bt_nfc_baseline(user, last_30_days)
        // Check subsequent data transfers
        data_transfer_event = FIND mdm_transfer_log WHERE device=pairing_event.device AND time > pairing_event.time
        IF data_transfer_event.size > baseline_99th_percentile:
          ALERT("Anomalous data transfer via Bluetooth/NFC", pairing_event, data_transfer_event)
- question: Can anomalous patterns of Bluetooth/NFC pairing behavior, such as a user rapidly connecting to multiple unknown devices, be identified through cluster analysis?
  context: This question uses unsupervised machine learning to uncover complex or novel attack patterns that are not easily defined by simple rules. An attacker might try to connect to multiple devices in a short period to find a vulnerable target. A clustering algorithm can identify such behavior as an outlier compared to normal activity (e.g., a user pairing with their one car and one set of headphones), flagging it for investigation.
  answer_sources:
  - MDM security logs
  - Mobile OS Bluetooth/NFC logs
  - Physically controlled spaces (e.g., executive suites, R&D labs)
  - Corporate-managed mobile devices with Bluetooth/NFC enabled
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Aggregate all pairing logs
      all_pairings = GET all_mdm_pairing_logs()
      // Define features for clustering (e.g., pairings per hour, unique MACs per user, location)
      feature_vectors = create_feature_vectors(all_pairings)
      // Run clustering algorithm (e.g., DBSCAN)
      clusters, outliers = dbscan(feature_vectors)
      // Alert on any identified outliers
      FOR outlier IN outliers:
        ALERT("Anomalous pairing behavior cluster detected", outlier)