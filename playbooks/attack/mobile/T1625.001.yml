name: T1625.001: System Runtime API Hijacking
id: a4e9b8d0-1c3a-4f5e-8a7b-9c0d1e2f3a4b
description: |
  This playbook addresses the question: Is an adversary maintaining persistence on mobile devices by hijacking system runtime APIs? It focuses on detecting evidence of this technique through two primary lenses. The first involves monitoring for direct signs of tampering on Android devices, such as Mobile Device Management (MDM) or Mobile Threat Defense (MTD) platforms reporting compliance failures due to OS integrity or file hash mismatches. This indicates that a critical system file, like '/system/lib/libart.so', has been modified, deviating from the organization's 'golden image'. The second involves analyzing network traffic from mobile devices for concurrent anomalies that signal malicious activity. These anomalies include connections to low-reputation destinations, highly periodic beaconing, high entropy in DNS queries (suggesting DGA), and the use of rare JA3 hashes, which collectively point to a compromised device.
type: technique
related:
  - TA0028: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a device failed a compliance check due to an OS integrity or file hash mismatch, and does the mismatched file hash correspond to known malware?
    context: This question aims to detect direct evidence of file tampering on a mobile device, a key indicator of runtime API hijacking. By immediately checking the hash of the modified file against threat intelligence, we can quickly determine if the change is due to a known malicious implant, enabling rapid response like device isolation. Correlating with asset data provides crucial context about the user and the device's role in the organization.
    answer_sources:
      - MDM event logs
      - MTD alert logs
      - Device Asset Inventory
      - Threat Intelligence Platform
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: SEARCH SIEM for logs where (compliance_status = 'failed' AND (failure_reason = 'os_integrity_mismatch' OR failure_reason = 'file_hash_mismatch')). ON_ALERT: EXTRACT file_hash, device_id. QUERY threat_intel_platform with file_hash. QUERY asset_inventory with device_id. IF threat_intel_match: ESCALATE.
  - question: Is there a statistically significant increase in file integrity failures for a specific device model or OS version, suggesting a widespread or targeted campaign?
    context: This question moves from single-device detection to identifying broader trends. A sudden spike in integrity failures concentrated on a particular device model or OS version could indicate a newly exploited vulnerability, a flawed OS update, or a targeted attack against a specific subset of the device fleet. Using a statistical baseline (Z-score) helps to distinguish a true anomaly from normal operational noise.
    answer_sources:
      - MDM event logs
      - MTD alert logs
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: AGGREGATE hourly count of file integrity failures. GROUP BY device_model, os_version. CALCULATE 30-day rolling mean and std_dev for each group. IF current_hour_count > (mean + 3 * std_dev): ALERT.
  - question: Has the overall number of file integrity failures across the entire mobile fleet anomalously exceeded the statistically predicted volume?
    context: This question provides a macro-level view of device health. Unlike the previous question which looks at specific cohorts, this one uses time-series forecasting to understand the normal rhythm of integrity failures for the entire fleet. An alert here indicates a fleet-wide event that is not explained by normal daily or weekly patterns, potentially pointing to a large-scale, non-targeted attack. Requiring the anomaly to persist for two hours helps reduce false positives.
    answer_sources:
      - MDM event logs
      - MTD alert logs
      - Centralized log aggregator (SIEM)
    range: last 90 days
    queries:
      - pseudocode: TRAIN time-series model on historical hourly count of all file integrity failures. PREDICT expected count for next hour with 99% confidence interval. IF actual_count > upper_confidence_bound for 2 consecutive hours: ALERT.
  - question: Is a mobile device communicating with known malicious IP addresses or domains?
    context: This question seeks to identify compromised devices by observing their network communications. Direct communication with an IP or domain on a high-confidence threat intelligence list is a strong indicator of compromise, likely for command and control (C2). The query focuses on network traffic originating from the mobile device IP space and automates the crucial step of correlating the network IP with a specific device and user for immediate investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - DHCP logs
      - VPN logs
    range: last 90 days
    queries:
      - pseudocode: SEARCH network logs where (source_ip in mobile_ip_range AND (destination_ip in threat_intel_ips OR dns_query in threat_intel_domains)). ON_ALERT: EXTRACT source_ip. QUERY DHCP/VPN logs with source_ip to find device_id and user. ESCALATE.
  - question: Is a mobile device exhibiting both highly randomized DNS queries and highly periodic network beaconing, indicative of algorithmic C2 communication?
    context: This question looks for a combination of behavioral indicators associated with advanced malware. High DNS entropy can indicate Domain Generation Algorithms (DGAs), used to find C2 servers. Simultaneously, a very low standard deviation in connection timing to a single destination suggests automated, machine-like beaconing. The combination of these two anomalies in a short time window for a single device is a strong signal of a sophisticated implant.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
    range: last 90 days
    queries:
      - pseudocode: FOR_EACH mobile_source_ip in 15min_window: CALCULATE shannon_entropy of DNS queries. CALCULATE std_dev of connection intervals per destination_ip. IF dns_entropy > 98th_percentile AND connection_std_dev < 2nd_percentile: ALERT.
  - question: Is a mobile device generating an anomalously high number of unusual network connections, as identified by a machine learning model?
    context: This question uses unsupervised machine learning to find 'unknown unknowns' in network traffic. By modeling normal connection behavior based on features like protocol, port, duration, data volume, and the TLS fingerprint (JA3), the model can flag connections that are statistical outliers. A sudden burst of these anomalous connections from a single device suggests a deviation from its normal behavior, which could be caused by a malicious process.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
    range: last 90 days
    queries:
      - pseudocode: TRAIN Isolation Forest model on baseline of connection feature vectors (protocol, port, duration, bytes, ja3_hash). SCORE each new connection in real-time. FOR_EACH device in 5min_window: COUNT anomalous connections. IF anomaly_count > 99th_percentile_of_baseline_rate: ALERT.