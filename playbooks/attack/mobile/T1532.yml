name: "T1532: Archive Collected Data"
id: "a7d8c6b5-e4f3-4a21-8b9c-0d1e2f3a4b5c"
description: "This playbook investigates whether an adversary is collecting and archiving sensitive data on corporate mobile devices prior to exfiltration. Detection focuses on identifying the creation of archive files (.zip, .rar, etc.) by unauthorized applications, especially when these files are unusually large, located in obfuscated directories, or followed by significant network egress. The playbook also addresses anomalous resource consumption (CPU, memory, disk I/O) by processes running in the background while the device screen is off, which can indicate data processing and staging. Finally, it monitors for suspicious sequences of API calls, such as an application accessing sensitive data (contacts, photos), then calling compression or cryptography libraries, and immediately initiating a network connection."
type: "technique"
related: "TA0035: Collection"
contributors: 
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a non-allowlisted application with sensitive permissions creating an archive file?"
    context: "This question aims to identify the initial act of data staging. Adversaries often use custom or uncommon tools to package data. By checking if the application creating an archive file (like .zip, .rar) is on a denylist or, more importantly, not on an allowlist of legitimate backup/file management tools, and simultaneously has permissions to access sensitive data (contacts, photos, etc.), we can flag potentially malicious activity at its source. A positive match is a strong indicator of unauthorized data collection."
    answer_sources: 
      - "MTD file_creation.log"
      - "MDM application_inventory.log"
      - "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories."
    range: "last 90 days"
    queries:
      - "pseudocode: FROM mtd_file_creation WHERE file_extension IN ('.zip', '.rar', '.7z', '.tar.gz') | JOIN mdm_app_inventory ON process_name | WHERE (app_is_on_denylist OR (app_not_on_allowlist AND app_has_sensitive_permissions))"
  - question: "Does a newly created archive file exhibit suspicious characteristics like abnormal size, location, or is it followed by large network transfers?"
    context: "This question builds on the initial detection of an archive file by seeking contextual evidence of malicious intent. An unusually large file (compared to the device's baseline) suggests a significant amount of data has been collected. A high-entropy directory path can indicate an attempt to obfuscate the staging location. A large outbound network connection shortly after creation is a classic sign of data exfiltration. Any of these factors significantly increases the likelihood that the archiving activity is malicious."
    answer_sources:
      - "MTD file_creation.log"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "File systems on managed mobile endpoints and network egress points instrumented with Zeek for traffic correlation."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_archive_file: | CALCULATE file_size_percentile(device, 30d) | CALCULATE path_entropy(file_path) | SEARCH zeek_conn_logs WHERE source_ip=device_ip AND timestamp within 5min of file_creation AND bytes_out > 1MB | ALERT if file_size_percentile > 95 OR path_entropy > 3.0 OR zeek_conn_found"
  - question: "Can a machine learning model identify file creation events indicative of malicious data staging?"
    context: "This question explores an advanced, automated approach to detection. By training a classification model with features like file size percentile, directory path entropy, application permissions, and subsequent network activity, we can create a system that scores each file creation event for its likelihood of being malicious. This moves beyond simple rule-based alerts to a probabilistic model that can identify more nuanced patterns of adversarial behavior."
    answer_sources:
      - "MTD file_creation.log"
      - "MDM application_inventory.log"
      - "Zeek conn.log"
      - "File systems on managed mobile endpoints and network egress points instrumented with Zeek for traffic correlation."
    range: "last 90 days"
    queries:
      - "pseudocode: PREDICT malicious_staging_probability with classification_model | INPUTS: file_size_percentile, path_entropy, app_permissions, is_on_allowlist, time_of_day, network_bytes_out_5min | TRIGGER incident if probability > 0.90"
  - question: "Is a process running with high resource usage while the screen is off, and is this process on a denylist or not on an allowlist of known background services?"
    context: "This question aims to detect data collection and compression activities that occur when the user is not actively using the device. Adversaries perform these intensive tasks in the background to avoid detection. By monitoring for processes that consume high CPU or other resources while the screen is off and cross-referencing them against threat intelligence denylists and allowlists of legitimate background services, we can identify suspicious processes that might be preparing data for exfiltration."
    answer_sources:
      - "MTD process_performance.log"
      - "MDM device_health.log"
      - "MDM application_inventory.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: FROM mtd_performance_logs WHERE screen_state='off' | CHECK process_name against denylist and allowlist | ALERT if on_denylist OR (not_on_allowlist AND cpu_usage > 70% for 60s)"
  - question: "Is an application exhibiting anomalous CPU, memory, and disk I/O usage during 'screen off' periods compared to its own historical baseline?"
    context: "This question moves from static thresholds to dynamic, behavioral baselining. If an app's CPU, memory, and disk I/O simultaneously and significantly deviate from their established 'screen off' norms, it suggests a change in function, such as a dormant malicious component activating to collect and write data to a file. This is a powerful method for detecting previously unknown malware."
    answer_sources:
      - "MTD process_performance.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each app with screen_state='off': | CALCULATE 60s_moving_avg(cpu, memory, disk_io) | COMPARE to 30d_baseline(cpu, memory, disk_io) | ALERT if all three metrics > (mean + 3*stdev) of baseline"
  - question: "Can a multivariate time-series model detect anomalous system resource patterns on a device, irrespective of individual application baselines?"
    context: "This question proposes a holistic, device-level anomaly detection approach. By training a model (like an LSTM Autoencoder) on the combined performance metrics of a device, it learns the device's normal 'rhythm' of operation. An alert is triggered when the current state indicates a significant deviation from learned normalcy. This can catch sophisticated adversaries who may distribute their activity across multiple processes to stay below individual process-based thresholds."
    answer_sources:
      - "MTD process_performance.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: PREDICT reconstruction_error with multivariate_anomaly_model | INPUTS: cpu_usage, memory_usage, disk_write_bytes, network_sent_bytes, screen_state | ALERT if reconstruction_error > dynamic_threshold"
  - question: "Did a non-backup or non-cloud-storage application execute a sequence of API calls for reading sensitive data, followed by compression, and then network activity?"
    context: "This question targets the specific, logical chain of actions an adversary would take to stage and exfiltrate data. By monitoring for a predefined, ordered sequence of API calls—accessing contacts, zipping a file, opening a network socket—within a short time frame, we can create a highly specific and high-fidelity detection rule. Checking the application's category against an allowlist helps eliminate false positives from legitimate applications."
    answer_sources:
      - "MTD api_call.log"
      - "Application Sandboxing Logs"
      - "MDM application_inventory.log"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: FROM mtd_api_logs | DETECT sequence [read_contacts, zip_file, socket_connect] within 60s by same_process | JOIN mdm_app_inventory ON process | ALERT if app_category NOT IN ('File Manager', 'Cloud Storage', 'Backup')"
  - question: "Is an application executing rare or unusually random sequences of API calls compared to its own baseline?"
    context: "This question uses behavioral analysis of API call patterns to find anomalies. By baselining the frequency of API call sequences (n-grams) for each app, we can detect when an app executes a sequence that is statistically rare for it. Additionally, a sudden spike in API call entropy (randomness) can suggest obfuscated or exploratory activity, which deviates from normal, programmatic function calls."
    answer_sources:
      - "MTD api_call.log"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each app: | CALCULATE frequency of new_api_sequence in 30d_baseline | CALCULATE entropy of api_calls in 5min_window | ALERT if sequence_frequency < 1st_percentile OR api_entropy > (mean + 3*stdev) of baseline"
  - question: "Can a sequence-based machine learning model classify real-time API call sequences as malicious?"
    context: "This question proposes using a deep learning model (like an LSTM or GRU) trained on the temporal nature of API call sequences. Such a model can learn the complex patterns that differentiate benign behavior from malicious activity. By feeding real-time API sequences into the model, it can provide a high-confidence score of maliciousness, enabling automated incident creation for the most critical threats."
    answer_sources:
      - "MTD api_call.log"
      - "Application Sandboxing Logs"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: PREDICT malicious_api_sequence_probability with sequence_classification_model | INPUTS: sequence_of_api_calls, app_state, time_deltas | TRIGGER incident if probability > 0.95"