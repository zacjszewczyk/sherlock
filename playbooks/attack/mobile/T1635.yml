name: "T1635: Steal Application Access Token"
id: "5a9e3b7c-4f8d-4a1e-8b6c-9e2d0f3a1b4c"
description: "This playbook helps investigate whether an adversary is stealing application access tokens from mobile devices to gain unauthorized credential access. It focuses on detecting three primary pieces of evidence: (1) The use of malicious redirect URIs in OAuth 2.0 authorization flows, where an attacker intercepts an authorization code by specifying a callback target they control. (2) The temporal correlation of a mobile device visiting a known malicious domain and immediately afterward initiating a new OAuth flow, suggesting a compromise leading to token theft. (3) The presence of malicious applications on managed mobile devices that hijack legitimate application URI schemes or use typosquatted names to trick users and intercept credentials or tokens."
type: "technique"
related:
  - "TA0031: Credential Access"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are we observing OAuth authorization flows with redirect URIs pointing to unapproved or non-allowlisted domains?"
    context: "This question aims to detect the 'Authorization Code Interception via Malicious Redirect URI' attack pattern. An adversary might trick a user into an OAuth flow where the authorization code is sent to a malicious server they control instead of the legitimate application. By creating a SIEM rule to check the `redirect_uri` against a corporate allowlist, we can identify potential token theft attempts in real-time."
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices"
      - "Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "QUERY Zeek http.log WHERE (uri CONTAINS 'redirect_uri' AND uri CONTAINS 'client_id') | EXTRACT redirect_uri | URL_DECODE redirect_uri | IF domain(redirect_uri) NOT IN allowlist THEN ALERT medium_severity"
  - question: "Can we identify potentially malicious redirect URIs by analyzing the randomness of their domain names?"
    context: "This question builds on the previous one by adding a layer of heuristic analysis. Attackers often use Domain Generation Algorithms (DGA) to create disposable callback domains. These domains frequently have high entropy (i.e., they appear random). By calculating the Shannon entropy of a suspicious `redirect_uri` domain and comparing it to a baseline of legitimate domains, we can flag those that are statistically likely to be algorithmically generated and thus malicious, prioritizing them for investigation."
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices"
      - "Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOR each alerted_domain | CALCULATE shannon_entropy(fqdn) | IF entropy > P95(baseline_entropy_scores) THEN ALERT high_priority"
  - question: "Can we use a machine learning model to predict if an OAuth flow is malicious based on its HTTP request characteristics?"
    context: "This question seeks to automate the detection of sophisticated attacks by using a logistic regression classifier. This moves beyond simple allowlists or entropy scores. By feeding a model various features—such as domain entropy, domain age, TLD reputation, URI path depth, and the client's TLS fingerprint (JA3/JA3S)—we can achieve a more nuanced and accurate prediction of malicious activity. A high probability score from the model would trigger an immediate, critical-level alert, enabling rapid response like device isolation via MDM."
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Passive DNS"
      - "TLD reputation data"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices"
      - "Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "EXTRACT features (entropy, domain_age, tld_rep, state_param, uri_depth, ja3) from http_request | INPUT features into logistic_regression_model | IF probability(malicious) > 0.90 THEN ESCALATE alert to critical"
  - question: "Are mobile devices initiating OAuth flows shortly after communicating with known malicious domains?"
    context: "This question aims to identify a common attack chain where a user is first compromised by visiting a malicious site (e.g., via phishing) which then immediately triggers an illegitimate OAuth flow to steal a token. By creating a correlation rule in the SIEM that looks for communication with a threat-intel-flagged domain followed closely by an OAuth request from the same device, we can detect this specific sequence of events and generate a high-severity alert."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway"
      - "SIEM platform with integrated threat intelligence feeds"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "CORRELATE events FROM same source_ip WITHIN 60s WHERE (event_A: destination IN threat_intel_feed) AND (event_B: uri CONTAINS 'response_type' AND 'client_id') | IF correlation_successful THEN ALERT high_severity"
  - question: "Following a potential compromise, is a user accessing an OAuth provider that is unusual for them or for the organization?"
    context: "This question adds context to the previous alert by analyzing the rarity of the OAuth provider being accessed. An attacker might use a less common or entirely new service to exfiltrate a token, which would be an anomaly compared to a user's normal behavior. By baselining OAuth provider usage for each user and the organization as a whole, we can significantly increase the risk score of an alert if the provider is statistically rare, indicating a higher likelihood of malicious activity."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway"
      - "SIEM platform with integrated threat intelligence feeds"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOR each alerted_oauth_domain | CHECK if domain in user_90day_baseline | CHECK if domain_prevalence < 1% org_wide_baseline | IF both_conditions_true THEN INCREASE risk_score"
  - question: "Can we detect anomalous user browsing sequences, such as a visit to a malicious site followed by an OAuth request, using a time-series model?"
    context: "This question leverages advanced anomaly detection to identify suspicious behavioral patterns. Normal user browsing can be modeled as a sequence of transitions between website categories. A pre-trained LSTM autoencoder can learn these normal patterns. When an unusual sequence, like a direct transition from a 'malicious' category domain to an 'oauth_provider', is observed, the model will have a high reconstruction error. This statistical anomaly provides strong evidence of a deviation from benign behavior and can be used to escalate an alert for critical review."
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway"
      - "SIEM platform with integrated threat intelligence feeds"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "MODEL user_browsing as sequence_of_domain_categories | FOR new_sequence ['malicious' -> 'oauth_provider'] | CALCULATE reconstruction_error with LSTM_autoencoder | IF error > dynamic_threshold THEN ESCALATE to critical"
  - question: "Are there any unauthorized mobile applications on managed devices that have registered a URI scheme conflicting with a legitimate one?"
    context: "This question addresses the 'Custom URI Scheme Hijacking' technique. A malicious app can register a URI scheme (e.g., `fbauth2://`) that is normally used by a legitimate app. When the user tries to authenticate, the OS may launch the malicious app instead, which can then steal the credentials or token. By periodically parsing app manifests from our UEM/MDM and comparing registered schemes, bundle IDs, and signing certificates against an allowlist of legitimate apps, we can detect and alert on these high-confidence indicators of compromise."
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Application security testing (AST) reports for in-house developed apps"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "INGEST app_inventory from UEM/MDM | PARSE manifest for uri_schemes | FOR each app | IF registered_scheme IN protected_schemes AND (bundle_id NOT_MATCH or certificate_hash NOT_MATCH) THEN ALERT high_severity"
  - question: "Can we identify potentially malicious applications by looking for typosquatted display names?"
    context: "This question focuses on detecting deceptive applications that trick users by using a name very similar to a well-known, legitimate application (e.g., 'Faceboook' instead of 'Facebook'). By calculating the Levenshtein distance (a measure of string similarity) between the names of newly installed apps and a corporate allowlist, we can flag potential typosquats for manual review. This is particularly important if the suspicious app also registers custom URI schemes, as it combines social engineering with a technical exploit method."
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "FOR each new_app | CALCULATE levenshtein_distance(new_app_name, allowlist_app_names) | IF distance < 3 AND app_registers_uri_schemes THEN FLAG for manual_review"
  - question: "Can we use a machine learning classifier to predict if a mobile application is malicious based on its metadata from MDM/UEM?"
    context: "This question proposes a comprehensive, automated approach to vetting mobile applications. A Random Forest classifier can be trained on a rich set of features available from MDM/UEM platforms, such as whether the app was sideloaded, the permissions it requests, its developer's reputation, its similarity to known apps (Levenshtein score), and the security state of the device (e.g., jailbroken). An application classified as having a high probability of being malicious can automatically trigger a response, such as quarantining the device, to prevent or contain a compromise."
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: "EXTRACT features (source, permissions, dev_rep, levenshtein_score, is_rooted) from MDM | INPUT features to random_forest_model | IF probability(malicious) > 0.85 THEN QUARANTINE device AND create_ticket"