name: T1624: Event Triggered Execution
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is maintaining persistence on mobile devices through event-triggered execution. This involves looking for two main types of indicators. First, it examines installed applications whose manifests (AndroidManifest.xml) register for high-risk system events like 'BOOT_COMPLETED' or request sensitive permissions that are anomalous for their stated purpose. Second, it looks for mobile devices exhibiting a measurable burst of anomalous network activity (e.g., increased connections, high data volume, high-entropy DNS queries) within a 5-minute window immediately following a system event like a device boot or network change, as logged by an MDM platform.
type: technique
related: TA0028: Persistence
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any installed mobile applications that register for high-risk system events (like boot completion or SMS receipt) signed with certificates or have package names matching known threat intelligence indicators?
    context: This question aims to find persistence mechanisms that use common system events to launch malicious code. By cross-referencing applications that use these triggers against a list of known malicious indicators (signing certificates, package names), we can quickly identify known threats that have been installed on managed devices. An alert here indicates a high-confidence compromise.
    answer_sources:
      - MDM Application Inventory Logs
      - Android Application Manifests (AndroidManifest.xml)
      - Application Vetting System Reports
      - Managed mobile device fleet
      - Mobile Device Management (MDM) server
      - Application vetting/sandbox environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          apps_with_high_risk_receivers = SEARCH MDM logs FOR apps with 'BOOT_COMPLETED' OR 'SMS_RECEIVED' receivers
          FOR each app IN apps_with_high_risk_receivers:
            cert = app.signing_certificate
            package = app.package_name
            IF cert IN threat_intel_certs OR package IN threat_intel_packages:
              CREATE_ALERT(app, device)
  - question: Do any mobile applications exhibit an unusually rare combination of requested permissions and registered event receivers compared to other applications in the same app store category?
    context: This question helps uncover unknown or novel malware by identifying statistical outliers. Legitimate applications within a specific category (e.g., Games) tend to use similar sets of permissions and event triggers. Malware often requires an unusual combination to achieve its goals. By scoring the rarity of these combinations, we can flag applications that behave anomalously, even if they are not yet on any threat intelligence list, pointing analysts toward potentially suspicious software.
    answer_sources:
      - MDM Application Inventory Logs
      - Android Application Manifests (AndroidManifest.xml)
      - Application Vetting System Reports
      - Managed mobile device fleet
      - Mobile Device Management (MDM) server
      - Application vetting/sandbox environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each category IN app_store_categories:
            calculate_prevalence(permission, receiver) for all apps in category
          FOR each app IN all_managed_apps:
            rarity_score = 0
            FOR each (permission, receiver) pair in app.manifest:
              rarity_score += 1 / prevalence(permission, receiver) in app.category
            app.rarity_score = rarity_score
          threshold = calculate_98th_percentile_score for app.category
          IF app.rarity_score > threshold:
            FLAG_FOR_REVIEW(app, device)
  - question: Can we use a machine learning model to predict if a mobile application is malicious based on the permissions it requests and the system events it registers for?
    context: This question applies machine learning to automate the detection of malicious applications. By training a model on the characteristics (permissions and event receivers) of known good and bad apps, we can create a predictive system to score new applications. This moves beyond simple signature or rarity analysis to a more sophisticated, pattern-based detection. Providing SHAP values with alerts is crucial for explainability, as it tells the analyst exactly which features led the model to its conclusion, speeding up the investigation.
    answer_sources:
      - MDM Application Inventory Logs
      - Android Application Manifests (AndroidManifest.xml)
      - Application Vetting System Reports
      - Managed mobile device fleet
      - Mobile Device Management (MDM) server
      - Application vetting/sandbox environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Training (offline)
          features = create_one_hot_vectors(permissions, receivers) for all labeled apps
          model = train_classifier(features, labels)
          // Inference (live)
          FOR each new_or_updated_app:
            app_features = create_one_hot_vectors(app.permissions, app.receivers)
            malice_score = model.predict_proba(app_features)
            IF malice_score > 0.90:
              shap_values = calculate_shap(model, app_features)
              CREATE_ALERT(app, device, malice_score, shap_values)
  - question: Following a system event like a device boot, does the device make any network connections to destinations (IPs, domains) or use TLS/SSL certificates/hashes that are listed in threat intelligence feeds as known command and control (C2) infrastructure?
    context: This question tries to catch malware "calling home" immediately after an event that triggers its execution, such as the device starting up. By correlating MDM system events with network traffic logs in a tight time window (5 minutes), we can look for the specific network beacons characteristic of a C2 check-in. A match against threat intelligence provides a strong signal that the device is compromised and communicating with an adversary.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek http.log
      - MDM Event Logs
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - Internal and external DNS resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each mdm_event (e.g., 'device_boot') on device_ip at event_time:
            network_traffic = SEARCH network logs WHERE ip = device_ip AND timestamp BETWEEN event_time AND event_time + 5 minutes
            FOR each connection in network_traffic:
              IF connection.dest_ip IN c2_ips OR connection.domain IN c2_domains OR connection.ssl_cert IN c2_certs OR connection.ja3_hash IN c2_ja3_hashes:
                CREATE_ALERT(device_ip, mdm_event, connection_details)
  - question: Does a device exhibit anomalous network activity (e.g., unusually high connection counts, data volume, or high-entropy DNS queries) in the five minutes following a system event, when compared to its own 30-day baseline?
    context: This question focuses on detecting deviations from a device's normal behavior. Instead of relying on known-bad indicators, it establishes a profile of what is "normal" for each device's network activity after specific events. A significant spike in activity (a high Z-score) or the appearance of randomized-looking DNS queries (high entropy, suggesting Domain Generation Algorithms or DGA) can indicate a malicious process has been triggered and is now attempting C2 communication or data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek http.log
      - MDM Event Logs
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - Internal and external DNS resolvers
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline (offline)
          FOR each device:
            FOR each event_type:
              calculate_baseline_metrics(mean, std_dev) for post-event network activity over last 30 days
          // Real-time
          FOR each new_mdm_event on device at event_time:
            current_metrics = calculate_metrics for network activity in next 5 minutes
            z_score = (current_metrics - baseline_mean) / baseline_std_dev
            dns_entropy = calculate_shannon_entropy for DNS queries in window
            IF z_score > 3.5 OR dns_entropy deviates from norm:
              CREATE_ALERT(device, event_type, anomalous_metrics)
  - question: Can a machine learning model (LSTM autoencoder) detect anomalous sequences of network activity in the five minutes after a device boots up, based on what it has learned from the device's past 30 days of behavior?
    context: This question leverages a more advanced anomaly detection technique using an LSTM autoencoder, which is well-suited for time-series data. The model learns the normal sequence and pattern of network traffic after a device boots. When a new boot event occurs, it tries to reconstruct the observed network activity sequence. A high "reconstruction error" means the current activity does not fit the learned normal pattern, which could be caused by malware executing at startup. This method can detect subtle deviations that simple statistical baselines might miss.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek http.log
      - MDM Event Logs
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - Internal and external DNS resolvers
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          // Training (offline)
          FOR each device:
            boot_sequences = get network activity vectors for 5 mins post-boot over last 30 days
            model = train_lstm_autoencoder(boot_sequences)
          // Real-time
          WHEN new_boot_event occurs on device:
            current_sequence = get network activity vector for next 5 minutes
            reconstruction_error = model.evaluate(current_sequence)
            IF reconstruction_error > dynamic_threshold:
              CREATE_ALERT(device, "Anomalous post-boot network sequence", reconstruction_error)