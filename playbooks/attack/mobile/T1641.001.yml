name: T1641.001: Transmitted Data Manipulation
id: 61f5f3e4-5b3a-4e6d-8c9a-0b1c2d3e4f5a
description: >
  Investigates whether an adversary is manipulating transmitted data on mobile devices to cause an impact. This can manifest as interception and modification of sensitive data (like cryptocurrency addresses or IBANs) within HTTP POST requests sent to malicious or anomalous domains, suspicious network connections to known C2 servers or destinations with unusual TLS fingerprints, or the use of mobile applications with unjustified clipboard listening capabilities combined with network access permissions.
type: technique
related:
  - TA0034: Impact
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect if a mobile device is sending sensitive data in an HTTP POST to a known malicious or suspicious domain?
    context: >
      This question aims to identify classic "clipper" malware behavior where sensitive data, like financial account numbers or crypto wallets, is replaced in transit. The process involves identifying mobile device traffic, scanning HTTP POST bodies for these sensitive data patterns, and then checking the destination domain against threat intelligence feeds for indicators of maliciousness, such as being on a blocklist, having a low reputation, or being recently created.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate and guest Wi-Fi network access points
      - VPN concentrators
      - Perimeter firewalls
      - Web proxies
      - Cloud Access Security Broker (CASB)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Identify mobile device IPs
          mobile_ips = correlate(dhcp_logs, vpn_logs)

          // Filter for HTTP POSTs from mobile devices
          http_posts = search http.log where src_ip in mobile_ips and method == "POST"

          // Scan for sensitive data and enrich
          for post in http_posts:
            if regex_match(post.body, sensitive_patterns):
              domain_intel = lookup(post.host, threat_intelligence)
              if domain_intel.is_malicious or domain_intel.reputation < 40 or domain_intel.age < 60_days:
                alert("High-Severity: Sensitive data sent to suspicious domain")
  - question: Is a mobile device sending sensitive data to a new or statistically rare destination domain compared to its baseline behavior?
    context: >
      This question focuses on detecting anomalous data exfiltration by baselining normal behavior. Instead of relying solely on known-bad indicators, this approach identifies when a device sends sensitive information to a destination it rarely or has never communicated with before. It also checks for unusual data entropy in the request body, which can indicate obfuscation or encryption not typical for that device's traffic.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate and guest Wi-Fi network access points
      - VPN concentrators
      - Perimeter firewalls
      - Web proxies
      - Cloud Access Security Broker (CASB)
    range: last 30 days
    queries:
      - search: Pseudocode
        query: |
          // For each mobile device
          for device in mobile_devices:
            // Establish baseline of POST destinations with sensitive data
            baseline_domains = baseline(http.log where device=device and contains_sensitive_data, field=host, time=30_days)

            // Check new POSTs against baseline
            new_posts = search http.log where device=device and contains_sensitive_data
            for post in new_posts:
              if post.host in baseline_domains.rare(percentile=5):
                alert("Medium-Severity: Sensitive data sent to rare domain")
              // Additionally, check entropy
              if entropy(post.body) deviates from baseline_entropy(device, post.host):
                alert("Medium-Severity: Anomalous POST body entropy")
  - question: Can a machine learning model identify and assign a risk score to HTTP POST transactions from mobile devices that are indicative of data manipulation?
    context: >
      This question explores the use of supervised machine learning to proactively identify malicious HTTP POSTs. By training a model on a rich feature set—including network metadata, geolocation, request content characteristics, and time-based features—it's possible to create a scoring system that can flag suspicious transactions in real-time, even if they don't match known bad signatures. A high score suggests a transaction is likely malicious and warrants immediate investigation.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate and guest Wi-Fi network access points
      - VPN concentrators
      - Perimeter firewalls
      - Web proxies
      - Cloud Access Security Broker (CASB)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Train model on labeled data
          model = train_classifier(features, labels)

          // Score new transactions in real-time
          for new_post in http_post_stream:
            features = extract_features(new_post) // (geolocation, user-agent, domain_rep, entropy, etc.)
            risk_score = model.predict_proba(features)
            if risk_score > 0.85:
              alert("High-Severity: High-risk HTTP POST transaction detected")
  - question: Is a mobile device making a network connection to a known malicious C2 domain or using a TLS fingerprint (JA3/JA3S) associated with malware?
    context: >
      This question aims to detect direct communication with adversary infrastructure. It involves identifying network connections from mobile devices and enriching connection metadata—such as destination IPs, domain names, and TLS/SSL client fingerprints (JA3/JA3S)—with threat intelligence. An alert is triggered if a connection matches a known malicious indicator, providing a high-confidence signal of a potential compromise.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate DNS resolvers
      - Internet gateway
      - Wi-Fi network sensors
      - Cloud Access Security Broker (CASB)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Identify mobile device connections
          mobile_conns = correlate(dhcp_logs, vpn_logs, conn.log)

          // Enrich and check against threat intelligence
          for conn in mobile_conns:
            domain_intel = lookup(conn.dns_query, threat_intelligence)
            ja3_intel = lookup(conn.ja3_hash, threat_intelligence)
            if domain_intel.is_malicious_c2 or ja3_intel.is_malware_family:
              alert("High-Severity: Connection to known malicious infrastructure")
  - question: Is a mobile device exhibiting anomalous network behavior, such as contacting an unusually high number of new domains or using a new TLS fingerprint (JA3/JA3S)?
    context: >
      This question focuses on identifying deviations from a device's normal network activity profile. By establishing a 30-day rolling baseline of contacted domains and typical TLS fingerprints (JA3/JA3S), this method can detect suspicious patterns like domain generation algorithms (DGAs) or the use of new malicious tools. An alert is triggered if the rate of 'first-time-seen' domains spikes or if an unfamiliar JA3/JA3S hash appears, indicating a potential change in the device's software or behavior.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate DNS resolvers
      - Internet gateway
      - Wi-Fi network sensors
      - Cloud Access Security Broker (CASB)
    range: last 30 days
    queries:
      - search: Pseudocode
        query: |
          // For each mobile device
          for device in mobile_devices:
            // Baseline domains and JA3/JA3S hashes
            domain_baseline = baseline(conn.log where device=device, field=domain, time=30_days)
            ja3_baseline = baseline(ssl.log where device=device, field=ja3_hash, time=30_days)

            // Check for anomalies
            rate_new_domains = calculate_rate(new_domains, per_hour)
            if rate_new_domains > percentile(device.history, 98):
              alert("Medium-Severity: Anomalous rate of new domain contacts")
            if new_conn.ja3_hash not in ja3_baseline:
              alert("Medium-Severity: First-time-seen JA3/JA3S hash for device")
  - question: Can an unsupervised anomaly detection model identify network connections from a mobile device that deviate significantly from its established normal behavior?
    context: >
      This question proposes using an unsupervised machine learning model (like Isolation Forest) to build a comprehensive profile of a device's normal network behavior. The model is trained on a wide range of features from network logs, including connection duration, data volume, and DNS/TLS metadata. It can then score new connections in real-time, flagging those that are statistically improbable and thus potentially malicious, without prior knowledge of specific threats.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Threat Intelligence Platform Data
      - DHCP Server Logs
      - VPN Server Logs
      - Corporate DNS resolvers
      - Internet gateway
      - Wi-Fi network sensors
      - Cloud Access Security Broker (CASB)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // For each device, train an anomaly detection model
          model = train_unsupervised(features from conn.log, dns.log, ssl.log)

          // Score new connections
          for new_conn in connection_stream:
            features = extract_features(new_conn) // (domain_entropy, duration, bytes, ja3, etc.)
            anomaly_score = model.predict(features)
            if anomaly_score is high:
              alert("Medium-Severity: Anomalous network connection detected by ML model")
  - question: Are there any installed applications on managed mobile devices that have both clipboard access and internet permissions without being on an allowlist?
    context: >
      This question addresses a direct and high-risk threat vector on managed devices. It involves using an MDM/EDR solution to inventory applications and their manifest files to find apps that can both read the clipboard and communicate over the network. This combination of permissions is the hallmark of "clipper" malware. Any non-system, non-allowlisted application with these capabilities should be treated as highly suspicious and investigated immediately.
    answer_sources:
      - MDM/EDR application_manifest.xml
      - MDM/EDR api_monitoring.log
      - MDM/EDR application_inventory.csv
      - Public App Store Scraped Data
      - Managed mobile devices (corporate-owned or BYOD enrolled in MDM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Get inventory of apps from MDM/EDR
          apps = get_installed_apps()

          // Check manifests and permissions
          for app in apps:
            has_clipboard = parse_manifest(app, "OnPrimaryClipChangedListener")
            has_internet = check_permissions(app, "android.permission.INTERNET")
            if has_clipboard and has_internet and not is_allowlisted(app):
              alert("High-Severity: App with clipboard and internet access detected")
  - question: Are any applications on managed devices using clipboard listener APIs in a way that is statistically uncommon for their application category?
    context: >
      This question provides a method for finding suspicious applications by comparing their behavior to peers. It involves building a baseline of which application categories (e.g., 'Productivity', 'Games', 'Social') typically use clipboard listener APIs. An application on a managed device that uses this API but belongs to a category where such usage is rare (e.g., a simple game or utility) is flagged as anomalous and potentially malicious.
    answer_sources:
      - MDM/EDR application_manifest.xml
      - MDM/EDR api_monitoring.log
      - MDM/EDR application_inventory.csv
      - Public App Store Scraped Data
      - Managed mobile devices (corporate-owned or BYOD enrolled in MDM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Build baseline of API usage from app store data
          api_baseline = build_baseline_by_category("ClipboardListener")

          // Check installed apps against baseline
          for app in installed_apps:
            if app.uses("ClipboardListener") and api_baseline.is_rare_for_category(app.category, percentile=10):
              alert("Medium-Severity: App uses clipboard listener which is rare for its category")
  - question: Can a machine learning model score applications based on their permissions and metadata to identify Potentially Unwanted Applications (PUAs) that misuse clipboard access?
    context: >
      This question describes an advanced, proactive approach to identifying risky applications. A supervised machine learning model is trained on a wide array of features, including permissions, API calls, app store ratings, and developer reputation. The model generates a risk score for each application, allowing security teams to identify and review Potentially Unwanted Applications (PUAs). This is particularly useful for finding apps where the clipboard listener feature is a key contributor to its high-risk score.
    answer_sources:
      - MDM/EDR application_manifest.xml
      - MDM/EDR api_monitoring.log
      - MDM/EDR application_inventory.csv
      - Public App Store Scraped Data
      - Managed mobile devices (corporate-owned or BYOD enrolled in MDM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Train model on labeled app data (benign vs PUA)
          model = train_classifier(app_features, labels)

          // Score installed apps
          for app in installed_apps:
            features = extract_features(app) // (permissions, API calls, ratings, etc.)
            pua_score = model.predict_proba(features)
            if pua_score is high and model.feature_importance("ClipboardListener") is high:
              alert("Medium-Severity: High-risk PUA score with clipboard access as a factor")