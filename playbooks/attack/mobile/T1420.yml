name: T1420: File and Directory Discovery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is attempting to discover sensitive information on corporate mobile devices. This involves analyzing indicators such as applications exhibiting a high volume of file access inconsistent with their baseline, users granting high-risk storage permissions to untrusted or suspicious applications, and anomalous outbound network traffic following a file discovery-related alert. The goal is to detect and respond to attempts to find valuable data like credentials, backups, or financial information before it can be exfiltrated.
type: technique
related:
- TA0032: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an application not on the corporate allow-list reading an unusually high number of sensitive file types in a short period?
  context: This question aims to detect a common data discovery technique where an adversary uses a malicious or compromised application to rapidly search for files containing credentials, keys, or database backups. Identifying this behavior quickly is crucial to prevent data theft. The enrichment from MDM/UEM provides immediate context about the device and owner, accelerating the incident response process.
  answer_sources:
  - MTD/EDR file access logs (fields: process_name, file_path, timestamp, operation_type)
  - Android logcat (filtered for 'FileAccess' or 'Vold' tags)
  - Zeek files.log (fields: tx_hosts, rx_hosts, conn_uids, source, filename)
  - MDM/MTD/UEM management consoles aggregating endpoint telemetry from corporate-owned or managed Android devices.
  - Centralized SIEM platform for log correlation and analysis.
  range: last 90 days
  queries:
  - technology: Pseudocode - SIEM
    query: |
      SEARCH file_access_logs
      FILTER process_name NOT IN (corporate_allow_list)
      FILTER file_extension IN (.kdbx, .pem, .bak, .sql, .db, .mdf)
      AGGREGATE count(distinct file_path) AS file_count BY process_name, device_id, user within 5 minutes
      FILTER file_count > 10
      ENRICH with device_owner, compliance_status from MDM
- question: Is a managed application exhibiting anomalous file or directory access behavior compared to its historical baseline?
  context: This question focuses on detecting subtle deviations from normal behavior in trusted applications. A legitimate app might be compromised or its functionality abused. By baselining normal activity (both volume and randomness of paths), we can identify when an application starts accessing an unusually high number of files or traversing directories in a non-standard, potentially exploratory manner, which could signal malicious activity.
  answer_sources:
  - MTD/EDR file access logs (fields: process_name, file_path, timestamp, operation_type)
  - Android logcat (filtered for 'FileAccess' or 'Vold' tags)
  - Zeek files.log (fields: tx_hosts, rx_hosts, conn_uids, source, filename)
  - MDM/MTD/UEM management consoles aggregating endpoint telemetry from corporate-owned or managed Android devices.
  - Centralized SIEM platform for log correlation and analysis.
  range: last 90 days
  queries:
  - technology: Pseudocode - Baselining Script
    query: |
      // For volume anomaly
      CALCULATE 99th_percentile_hourly_access per app over last 30 days
      MONITOR current_hourly_access per app
      ALERT if current_hourly_access > 99th_percentile_hourly_access
      // For path entropy anomaly
      CALCULATE 95th_percentile_directory_entropy per app over last 30 days
      MONITOR current_5min_directory_entropy per app
      ALERT if current_5min_directory_entropy > 95th_percentile_directory_entropy
- question: Can we use a machine learning model to detect complex patterns of anomalous file access that might indicate malicious discovery?
  context: This question proposes a more advanced, multi-variate approach to anomaly detection. Simple thresholding might miss sophisticated attackers. By using an Isolation Forest model, we can analyze multiple features of file system interaction simultaneously (reads, writes, directory listings, path depth, etc.) to identify subtle, complex patterns of behavior that deviate from the established norm for benign applications, providing a more robust detection capability.
  answer_sources:
  - MTD/EDR file access logs (fields: process_name, file_path, timestamp, operation_type)
  - Android logcat (filtered for 'FileAccess' or 'Vold' tags)
  - Zeek files.log (fields: tx_hosts, rx_hosts, conn_uids, source, filename)
  - MDM/MTD/UEM management consoles aggregating endpoint telemetry from corporate-owned or managed Android devices.
  - Centralized SIEM platform for log correlation and analysis.
  range: last 90 days
  queries:
  - technology: Pseudocode - ML Model
    query: |
      // Feature Engineering per process per 5min
      features = [
        count_reads, count_writes, count_dir_listings,
        ratio_dir_listings_to_reads, avg_path_depth,
        entropy_of_file_extensions
      ]
      // Model Inference
      model = trained_isolation_forest
      anomaly_score = model.predict(features)
      // Alerting
      ALERT if anomaly_score < threshold
- question: Has a user granted powerful storage permissions to a sideloaded or unapproved application?
  context: The `android.permission.MANAGE_EXTERNAL_STORAGE` permission grants broad access to a device's file system. When granted to an unvetted or sideloaded application, it poses a significant security risk. This question aims to immediately flag these high-risk events, as they could be a precursor to data theft by a malicious application masquerading as a legitimate one.
  answer_sources:
  - MDM application inventory logs (fields: device_id, package_name, permissions_granted, source)
  - MTD security policy violation events (fields: device_id, policy_name, event_timestamp)
  - Google Play Store API for application metadata
  - MDM logs detailing application source
  - Corporate MDM/UEM platform, MTD management console, and the internal repository defining the corporate application allow-list.
  - Centralized SIEM for correlation and alerting.
  - Threat intelligence platform for enriching application package names with reputation data.
  range: last 90 days
  queries:
  - technology: Pseudocode - SIEM
    query: |
      SEARCH mdm_permission_logs
      FILTER permission_name = 'android.permission.MANAGE_EXTERNAL_STORAGE' AND permission_state = 'GRANTED'
      FILTER app_package_name NOT IN (approved_applications_list) OR app_source = 'Sideloaded'
      TRIGGER high_priority_alert
- question: Is there a statistical anomaly in the rate at which users are granting storage permissions to a specific application, compared to its peers?
  context: This question seeks to identify widespread, potentially coordinated malicious activity. A sudden spike in permission grants for a single app, far exceeding the norm for its category, could indicate a trojanized update being pushed to users or a targeted social engineering campaign. This provides a macro-level view beyond individual device events.
  answer_sources:
  - MDM application inventory logs (fields: device_id, package_name, permissions_granted, source)
  - MTD security policy violation events (fields: device_id, policy_name, event_timestamp)
  - Google Play Store API for application metadata
  - MDM logs detailing application source
  - Corporate MDM/UEM platform, MTD management console, and the internal repository defining the corporate application allow-list.
  - Centralized SIEM for correlation and alerting.
  - Threat intelligence platform for enriching application package names with reputation data.
  range: last 90 days
  queries:
  - technology: Pseudocode - Scheduled Query
    query: |
      // Daily job
      CALCULATE 30_day_avg_grant_rate_per_category
      CALCULATE 30_day_std_dev_per_category
      CALCULATE current_day_grant_rate_per_app
      ALERT if current_day_grant_rate_per_app > (30_day_avg_grant_rate_per_category + 3 * 30_day_std_dev_per_category)
- question: Can we predictively identify high-risk applications being granted storage permissions and automate a response?
  context: This question moves from reactive alerting to proactive, automated risk mitigation. By using a machine learning model to score an application's risk based on multiple factors (source, developer reputation, permission scope), we can make a more nuanced decision than a simple allow/block list. Triggering an automated quarantine for high-risk events reduces the window of opportunity for an attacker and lessens the burden on SOC analysts.
  answer_sources:
  - MDM application inventory logs (fields: device_id, package_name, permissions_granted, source)
  - MTD security policy violation events (fields: device_id, policy_name, event_timestamp)
  - Google Play Store API for application metadata
  - MDM logs detailing application source
  - Corporate MDM/UEM platform, MTD management console, and the internal repository defining the corporate application allow-list.
  - Centralized SIEM for correlation and alerting.
  - Threat intelligence platform for enriching application package names with reputation data.
  range: last 90 days
  queries:
  - technology: Pseudocode - ML Model & Automation
    query: |
      // On permission grant event
      features = [app_source, dev_reputation, permission_count, has_manage_storage_perm]
      model = trained_logistic_regression
      risk_score = model.predict_proba(features)
      IF risk_score > 0.8:
        CALL mdm_api.quarantine_device(device_id)
        TRIGGER alert
- question: Following a mobile file discovery alert, is the affected device communicating with known malicious infrastructure?
  context: This question aims to connect the dots between internal discovery activity and external data exfiltration. A file discovery alert on its own is suspicious, but when followed by communication to a known command-and-control (C2) or exfiltration server, it becomes a critical incident. This correlation provides strong evidence of a successful compromise and active data theft.
  answer_sources:
  - Zeek conn.log (fields: id.orig_h, id.resp_h, orig_bytes, resp_bytes, duration)
  - Zeek dns.log (fields: id.orig_h, query, answers)
  - VPN access logs
  - MTD/EDR network flow logs (fields: source_ip, dest_ip, bytes_out, process_name)
  - Network traffic sensors (e.g., Zeek) monitoring traffic from the corporate Wi-Fi SSID, VPN concentrator egress points, and CASB proxies.
  - DNS resolver logs.
  - All logs should be aggregated in a central SIEM for correlation.
  range: last 90 days
  queries:
  - technology: Pseudocode - SIEM Correlation Rule
    query: |
      // Rule state triggered by alert with tag=mobile_discovery for device_ip
      MONITOR network_logs for 60 minutes where source_ip = device_ip
      IF destination_ip OR dns_query IN (threat_intel_feed)
        TRIGGER critical_alert with details from both events
- question: Following a mobile file discovery alert, is the device sending an anomalous amount of data to a new, never-before-seen destination?
  context: This question focuses on detecting exfiltration without relying solely on known-bad indicators. Attackers often use new or dynamic domains. By baselining a user's normal network activity, we can flag two key suspicious behaviors: communication with a destination they've never contacted before, and a sudden spike in the volume of outbound data. The combination of these two anomalies is a strong signal of data exfiltration.
  answer_sources:
  - Zeek conn.log (fields: id.orig_h, id.resp_h, orig_bytes, resp_bytes, duration)
  - Zeek dns.log (fields: id.orig_h, query, answers)
  - VPN access logs
  - MTD/EDR network flow logs (fields: source_ip, dest_ip, bytes_out, process_name)
  - Network traffic sensors (e.g., Zeek) monitoring traffic from the corporate Wi-Fi SSID, VPN concentrator egress points, and CASB proxies.
  - DNS resolver logs.
  - All logs should be aggregated in a central SIEM for correlation.
  range: last 90 days
  queries:
  - technology: Pseudocode - Automated Query/Script
    query: |
      // Triggered by alert with tag=mobile_discovery for device_ip
      user_baseline_fqdns = GET_HISTORICAL_FQDNS(user, last 30 days)
      user_98th_percentile_volume = GET_HOURLY_VOLUME_BASELINE(user, last 30 days)
      // Monitor for next 60 minutes
      connections = GET_CONNECTIONS(device_ip, next 60 mins)
      current_volume = SUM(connections.outbound_bytes)
      current_fqdns = GET_FQDNS(connections)
      IF any(fqdn NOT IN user_baseline_fqdns) OR (current_volume > user_98th_percentile_volume)
        TRIGGER alert
- question: Following a mobile file discovery alert, does the device's outbound data volume significantly exceed what a time-series model would predict as normal for that user at that time?
  context: This question applies advanced statistical analysis to network traffic. Simple baselines might not account for seasonality (e.g., higher traffic during business hours). A time-series forecasting model can learn a user's normal traffic patterns, including daily and weekly trends. When a precursor alert occurs, we can compare actual traffic against the model's forecast. If the actual volume significantly exceeds the predicted upper bound, it provides high-confidence, statistically-backed evidence of anomalous behavior consistent with data exfiltration.
  answer_sources:
  - Zeek conn.log (fields: id.orig_h, id.resp_h, orig_bytes, resp_bytes, duration)
  - Zeek dns.log (fields: id.orig_h, query, answers)
  - VPN access logs
  - MTD/EDR network flow logs (fields: source_ip, dest_ip, bytes_out, process_name)
  - Network traffic sensors (e.g., Zeek) monitoring traffic from the corporate Wi-Fi SSID, VPN concentrator egress points, and CASB proxies.
  - DNS resolver logs.
  - All logs should be aggregated in a central SIEM for correlation.
  range: last 90 days
  queries:
  - technology: Pseudocode - ML Model/Time-Series
    query: |
      // Pre-computation: Continuously train Prophet model per user on hourly outbound data
      // On alert with tag=mobile_discovery for user
      forecast = model.predict(next_hour)
      upper_bound = forecast.yhat_upper
      // Monitor for next 60 minutes
      actual_volume = GET_HOURLY_VOLUME(user, current_hour)
      IF actual_volume > upper_bound
        TRIGGER high_severity_alert