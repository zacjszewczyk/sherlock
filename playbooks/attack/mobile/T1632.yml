name: T1632: Subvert Trust Controls
id: 2d1c6a2e-4b8f-4a3d-9f1e-8c7b6a5d4e3f
description: This playbook helps investigate if an adversary is attempting to subvert trust controls on mobile devices to execute untrusted code or intercept communications. This is achieved by looking for evidence of malicious Certificate Authorities (CAs) identified by non-allowlisted hashes, self-signed status, or statistical rarity; unauthorized application sideloading on Android devices detected by monitoring the 'Install unknown apps' permission; and the installation of malicious iOS configuration profiles identified by being unsigned, non-allowlisted, or downloaded from suspicious domains.
type: technique
related: TA0030: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any certificates been installed on managed mobile devices that are either not on the approved CA allowlist or are self-signed?
  context: This question aims to detect the direct installation of untrusted root certificates. Adversaries may install a malicious root CA to issue fraudulent certificates for phishing domains or to intercept TLS traffic (man-in-the-middle attack). Identifying certificates that are not explicitly approved by the organization or are self-signed is a critical first step in uncovering such an attack.
  answer_sources:
  - MDM logs
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  - Corporate-managed mobile devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS Resolvers
  - SIEM
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      FOR each certificate in MDM logs:
        IF certificate_hash NOT IN (allowlist) OR certificate.is_self_signed == TRUE:
          ALERT(device, user, certificate_details)
- question: Has a mobile device established a TLS session using a certificate from a statistically rare issuer?
  context: This question uses statistical analysis to find anomalies. Mainstream, legitimate services use CAs that are widely observed across an enterprise. An adversary might use a custom or less-common CA. By identifying certificate issuers that are statistical outliers (e.g., in the bottom 1st percentile of observed frequency), we can uncover potentially malicious CAs that might otherwise go unnoticed.
  answer_sources:
  - MDM logs
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  - Corporate-managed mobile devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS Resolvers
  - SIEM
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Over a 30-day window
      issuers_frequency = AGGREGATE issuer_counts from Zeek x509.log where source_ip in mobile_ranges
      threshold = CALCULATE_PERCENTILE(issuers_frequency, 1)

      // Real-time check
      FOR each new TLS session from mobile_ip in Zeek ssl.log:
        IF session.issuer_frequency < threshold:
          ALERT(device, user, session_details)
- question: Does a machine learning model classify any new TLS sessions from mobile devices as malicious based on their certificate features?
  context: This question leverages machine learning to proactively identify malicious TLS activity that may not be caught by simple rule-based detections. By training a model on features like certificate validity, key length, and issuer rarity, we can score new sessions for their likelihood of being malicious. This is effective at detecting sophisticated adversaries who use techniques designed to evade static allowlists.
  answer_sources:
  - MDM logs
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  - Corporate-managed mobile devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS Resolvers
  - SIEM
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Real-time scoring
      FOR each new TLS session from mobile_ip in Zeek logs:
        features = EXTRACT_FEATURES(session_certificate)
        score = ML_MODEL.predict(features)
        IF score > 0.90:
          ALERT(device, user, session_details, score)
- question: Has the 'Install unknown apps' permission been enabled on a managed Android device for a non-approved application without a corresponding change ticket?
  context: This question targets a primary method of sideloading malicious applications on Android. The 'Install unknown apps' permission bypasses Play Store security checks. An adversary enabling this permission for an unauthorized app is a strong indicator of compromise. Correlating this with the absence of an approved change request helps distinguish malicious activity from legitimate administrative tasks.
  answer_sources:
  - MDM logs
  - Mobile endpoint security agent logs
  - Change management system logs
  - Corporate-managed Android devices
  - Mobile Device Management (MDM) server
  - SIEM
  - Change Management Database (CMDB)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      FOR each MDM log event where 'install_unknown_apps' is enabled:
        IF event.app_name NOT IN (app_allowlist):
          has_ticket = QUERY_CMDB(device, user, last_24_hours)
          IF has_ticket == FALSE:
            ALERT(device, user, app_name)
- question: Is there a statistically significant increase in the number of devices that have 'Install unknown apps' enabled for a specific application?
  context: This question seeks to identify widespread campaigns or policy misconfigurations. A sudden spike in the number of devices allowing a particular app to sideload other apps, exceeding historical norms (e.g., three standard deviations above the mean), could indicate a coordinated attack or a worm-like propagation of a malicious app.
  answer_sources:
  - MDM logs
  - Mobile endpoint security agent logs
  - Change management system logs
  - Corporate-managed Android devices
  - Mobile Device Management (MDM) server
  - SIEM
  - Change Management Database (CMDB)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Daily calculation
      FOR each application:
        daily_count = COUNT devices where 'install_unknown_apps' enabled for app
        baseline = GET_HISTORICAL_BASELINE(app, 90_days)
        IF daily_count > (baseline.mean + 3 * baseline.std_dev):
          ALERT(app_name, daily_count)
- question: Has an anomaly detection model identified a device as an outlier due to the 'Install unknown apps' permission being enabled, in conjunction with other risky settings?
  context: This question uses an unsupervised machine learning model (Isolation Forest) to find devices with an unusual combination of settings. A device with sideloading enabled, developer mode, and ADB debugging is a high-risk outlier. This model helps find these risky configurations without pre-defined rules, highlighting devices an adversary may have compromised.
  answer_sources:
  - MDM logs
  - Mobile endpoint security agent logs
  - Change management system logs
  - Corporate-managed Android devices
  - Mobile Device Management (MDM) server
  - SIEM
  - Change Management Database (CMDB)
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      FOR each device in MDM data:
        anomaly_score = ANOMALY_MODEL.predict(device_config_features)
        IF device is flagged as outlier AND 'install_unknown_apps' is a key contributor:
          ALERT(device, user, anomaly_score)
- question: Are there any iOS configuration profiles installed on managed devices that are unsigned or not on the organizational allowlist?
  context: This question addresses a key threat vector on iOS. Malicious configuration profiles (.mobileconfig) can be used to install root certificates, configure proxies to intercept traffic, or change security settings. This query ensures that all installed profiles are known, signed, and approved, preventing unauthorized changes to a device's core configuration.
  answer_sources:
  - MDM logs
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Zeek conn.log
  - Corporate-managed iOS devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      FOR each iOS profile in MDM logs:
        IF profile.identifier NOT IN (profile_allowlist) OR profile.is_signed == FALSE:
          ALERT(device, user, profile_details)
- question: Have any iOS configuration profiles been downloaded from a newly observed domain or a domain with a high-entropy name?
  context: This question focuses on the delivery mechanism of malicious profiles. Adversaries often use newly created domains or algorithmically generated domain names. By monitoring network logs for '.mobileconfig' downloads and analyzing the source domain, we can flag suspicious activity. A high entropy score (>3.5) or a newly seen domain is inherently untrusted.
  answer_sources:
  - MDM logs
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Zeek conn.log
  - Corporate-managed iOS devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      FOR each download of file with '.mobileconfig' extension in network logs:
        entropy = CALCULATE_ENTROPY(source_domain)
        is_new = IS_DOMAIN_NEW(source_domain, 30_days)
        IF entropy > 3.5 OR is_new == TRUE:
          ALERT(source_domain, file_details)
- question: Has a time-series anomaly detection model detected a spike in the number of '.mobileconfig' file downloads across the network?
  context: This question aims to detect large-scale distribution campaigns of malicious iOS configuration profiles. A sudden, anomalous increase in the volume of downloads could signal a coordinated attack. A time-series model can learn normal network patterns and alert when a significant deviation occurs, pointing to activity that warrants investigation.
  answer_sources:
  - MDM logs
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Zeek conn.log
  - Corporate-managed iOS devices
  - Mobile Device Management (MDM) server
  - Network egress points/Internet Gateway
  - DNS servers
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |-
      // Hourly check
      hourly_count = COUNT '.mobileconfig' downloads from Zeek files.log
      prediction_interval = TIMESERIES_MODEL.predict_interval()
      IF hourly_count > prediction_interval.upper_bound:
        ALERT("Anomalous spike in .mobileconfig downloads", hourly_count)