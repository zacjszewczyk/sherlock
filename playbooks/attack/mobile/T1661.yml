name: T1661: Application Versioning
id: a1f9e8a0-7b3c-4d5e-9f6a-8b1c2d3e4f5a
description: |
  This playbook helps identify if an adversary has gained initial access or is evading defenses by pushing a malicious update to a previously benign mobile application. It focuses on detecting anomalies that occur after an application update event, such as suspicious network connections to new or threat-listed destinations, significant or risky changes in application permissions, the use of new or untrusted code-signing certificates, and network traffic patterns indicative of command-and-control (C2) behavior like beaconing or the use of Domain Generation Algorithms (DGA).
type: technique
related:
- TA0027: Initial Access
- TA0030: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an updated application initiated network connections to known malicious domains/IPs or newly registered domains within 24 hours of the update?
  context: |
    This question aims to detect adversaries who compromise a legitimate application's update channel to push a malicious version. The new version may immediately connect to attacker-controlled infrastructure for command and control or data exfiltration. Checking against threat intelligence feeds and looking for newly registered domains are effective heuristics for identifying such infrastructure.
  answer_sources:
  - MDM Application Update Log
  - Zeek conn.log
  - Zeek dns.log
  - External WHOIS Data Feed
  - External Threat Intelligence Feed
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      JOIN with network logs on device_id where time_diff < 24h
      LOOKUP destination_ip in threat_intel_feed
      LOOKUP destination_fqdn in whois_feed
      WHERE threat_intel_match=true OR domain_creation_date < 90_days_ago
- question: Following an update, is the application making TLS connections with new or rare client fingerprints (JA3/JA3S), or is it querying for high-entropy domain names?
  context: |
    Adversaries often use custom malware or tools that result in unique TLS client fingerprints (JA3/JA3S). A change from the application's established baseline can indicate the introduction of malicious code. Similarly, high-entropy domain names are a common indicator of Domain Generation Algorithms (DGAs) used by malware for C2 communication.
  answer_sources:
  - Zeek ssl.log
  - Zeek dns.log
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek ssl.log for app traffic post-update
      LOOKUP ja3, ja3s in historical baseline for app
      WHERE hash_is_new AND hash_is_rare_globally
      ---
      SEARCH Zeek dns.log for app traffic post-update
      CALCULATE entropy(query)
      WHERE entropy > 99th_percentile_baseline
- question: Does the application's outbound data volume exhibit a significant anomalous spike within 24 hours of an update?
  context: |
    A malicious update might initiate large data transfers for exfiltration. By modeling the application's normal data transfer patterns over time using a time-series forecast, we can detect significant deviations that exceed expected behavior, which could indicate unauthorized data movement.
  answer_sources:
  - Zeek conn.log
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), and the SIEM platform where Zeek logs are aggregated.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FETCH historical outbound data volume for app (15m intervals)
      TRAIN time-series model (e.g., ARIMA)
      PREDICT expected volume post-update
      SEARCH current volume post-update
      WHERE current_volume > prediction_upper_bound (95%)
- question: After an update, has the application been granted any permissions from a predefined list of high-risk permissions?
  context: |
    Adversaries often add dangerous permissions to a compromised application to enable malicious activities, such as gaining device administrator rights or accessing sensitive user data. Checking for the addition of specific, known-dangerous permissions is a direct way to detect a potentially compromised update.
  answer_sources:
  - MDM Application Inventory Log (pre/post update)
  - Curated High-Risk Permission List
  - NAI: MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      EXTRACT pre_permissions and post_permissions
      CALCULATE new_permissions = post_permissions - pre_permissions
      LOOKUP new_permissions in high_risk_permission_list
      WHERE match=true
- question: Did the application's permission set change significantly (low Jaccard similarity) after an update, or did it acquire a permission that is statistically rare for its app store category?
  context: |
    A significant change in an application's required permissions, measured by Jaccard similarity, can indicate a fundamental shift in its functionality, which may be malicious. Furthermore, an app requesting a permission that is uncommon for its peers (e.g., a calculator app asking for contact list access) is highly suspicious and warrants investigation.
  answer_sources:
  - MDM Application Inventory Log (pre/post update)
  - Pre-computed App Store Category Permission Baselines
  - NAI: MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      CALCULATE jaccard_similarity(pre_permissions, post_permissions)
      WHERE similarity < 0.8
      ---
      For each new permission in the update,
      LOOKUP its prevalence in the app_category_baseline
      WHERE prevalence < 2%
- question: Does a machine learning model, trained on known benign and malicious examples, classify the application's new permission set as malicious?
  context: |
    This question leverages machine learning to identify complex patterns in permission requests that are indicative of malware. By training a model on a large dataset, it can learn to flag suspicious combinations of permissions that might not be caught by simple heuristics, especially if the previous version was considered benign.
  answer_sources:
  - MDM Application Inventory Log (post update)
  - NAI: MDM/UEM platform and the SIEM platform where application inventory logs are stored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      VECTORIZE post_update_permissions
      PREDICT class using pre-trained model (e.g., Random Forest)
      WHERE prediction='malicious' AND previous_version_prediction='benign'
- question: Was the application update signed with a new, previously unseen developer certificate, or a certificate known to be malicious?
  context: |
    Legitimate applications are consistently signed by the same developer certificate. A change in the signing certificate is a major red flag, suggesting the update may have been signed by an adversary. Checking the new certificate against threat intelligence can confirm if it's associated with known malicious campaigns.
  answer_sources:
  - MDM Application Inventory Log (with certificate details)
  - Historical Application Certificate Thumbprint Database
  - External Threat Intelligence Feed
  - NAI: MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      EXTRACT certificate_thumbprint
      LOOKUP thumbprint in historical_app_certs_allowlist
      WHERE match=false
      ---
      LOOKUP new_thumbprint in threat_intel_feed
      WHERE match=true
- question: Does the new signing certificate for an updated application have a high risk score based on its age, issuer rarity, and subject name dissimilarity?
  context: |
    This question uses a scoring system to quantify the risk of a new certificate. Adversaries often use newly created certificates. A rare issuer or a subject name that is slightly different from the legitimate one (typosquatting) are also suspicious indicators. A high cumulative score suggests the certificate is likely illegitimate.
  answer_sources:
  - MDM Application Inventory Log (with certificate details)
  - Historical Application Certificate Thumbprint Database
  - NAI: MDM/UEM platform and the SIEM.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH MDM logs for app updates
      EXTRACT new_cert_details
      CALCULATE risk_score: +50 if age < 90d, +30 if issuer_prevalence < 5%, +20 if levenshtein_dist(subject, prev_subject) > 5
      WHERE risk_score > 75
- question: Does the new signing certificate create a link in a graph database between a trusted application and a known malicious cluster of developers or certificates?
  context: |
    This question applies graph analysis to uncover "guilt by association." By mapping relationships between apps, developers, and certificates, we can identify when a new certificate, used to sign a trusted app, is also linked to a known group of malicious actors or applications, revealing a potential supply chain compromise.
  answer_sources:
  - MDM Application Inventory Log (with certificate details)
  - Historical Application Certificate Thumbprint Database
  - NAI: MDM/UEM platform and a graph database within the SIEM.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      ON app update, ADD new_certificate_node to graph
      ADD edges to app_node and developer_node
      RUN community_detection_algorithm
      IF new_certificate_node connects trusted_app_community to malicious_community
- question: After an update, is the application using non-standard protocols on common ports (e.g., HTTP on 443) or communicating with domains matching known C2 patterns?
  context: |
    Adversaries often attempt to blend their C2 traffic with normal encrypted traffic by using port 443. However, they may use a non-TLS protocol over this port, which is highly anomalous. Additionally, their C2 domain names often follow predictable patterns that can be detected with regular expressions.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), and the SIEM platform.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek conn.log for app traffic
      WHERE dest_port=443 AND protocol != 'ssl'
      ---
      SEARCH Zeek ssl.log, dns.log for app traffic
      WHERE server_name MATCHES regex(c2_patterns)
- question: Is the application's post-update network traffic exhibiting periodic beaconing behavior or querying high-entropy domains indicative of a Domain Generation Algorithm (DGA)?
  context: |
    Malware often "beacons" out to its C2 server at regular intervals. This results in connections with a very low variance in their inter-arrival times. DGAs are used to create a large number of potential C2 domains, making them hard to block; these algorithmically generated domains typically have high character entropy.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), and the SIEM platform.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH Zeek conn.log for app traffic
      GROUP BY dest_ip, dest_port
      CALCULATE stdev(time_diff)
      WHERE stdev < 5th_percentile_baseline
      ---
      SEARCH Zeek dns.log for app traffic
      CALCULATE entropy(query)
      WHERE entropy > 98th_percentile_baseline
- question: Does an autoencoder model, trained on the application's normal network behavior, identify post-update network sessions as anomalous based on high reconstruction error?
  context: |
    This question uses an unsupervised machine learning approach to detect novel C2 traffic. An autoencoder learns to reconstruct "normal" network sessions. When a malicious update introduces new network patterns, the model will fail to reconstruct them accurately, resulting in a high reconstruction error that flags the session as an anomaly.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM/EDR Network Flow Log
  - NAI: Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FETCH historical network session features for app
      TRAIN autoencoder model
      FOR new sessions post-update, CALCULATE reconstruction_error
      WHERE error > 99th_percentile_training_error