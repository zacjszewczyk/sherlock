name: T1626.001: Device Administrator Permissions
id: a4b8c1d9-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary has illegitimately gained Device Administrator permissions on a corporate mobile device. It focuses on detecting unauthorized requests for these permissions during application vetting, correlating the granting of these permissions with suspicious network activity post-deployment, and identifying automated, non-human interactions designed to programmatically bypass user consent for privilege escalation.
type: technique
related:
  - TA0029: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an application requesting Device Administrator permissions without being on the organizational allow-list?
    context: This question aims to identify potentially malicious applications during the vetting process before they are deployed. By checking if an app requests the powerful 'android.permission.BIND_DEVICE_ADMIN' permission and cross-referencing its package name and signing certificate against a curated allow-list, we can proactively block unauthorized applications from gaining elevated privileges on corporate devices. A mismatch indicates a significant security risk that requires immediate attention.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox
      - Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms
      - Security data lake or SIEM
    range: Current Vetting Process
    queries:
      - technology: pseudocode
        query: |
          SEARCH AppVettingLogs
          WHERE AndroidManifest.xml CONTAINS "android.permission.BIND_DEVICE_ADMIN"
          AND (
            package_name NOT IN DeviceAdminAllowlist.package_names
            OR signing_certificate_hash NOT IN DeviceAdminAllowlist.hashes
          )
  - question: Does an application requesting Device Administrator permissions exhibit characteristics of a potentially malicious app, such as a randomized package name or an unusual set of requested permissions?
    context: This question uses statistical analysis to uncover suspicious applications that might evade simple allow-list checks. Malicious actors often use randomized package names (high entropy) and request unusual combinations of permissions. By flagging applications with both high package name entropy and a low similarity score for its permission set compared to legitimate admin apps, analysts can prioritize the most anomalous and potentially dangerous candidates for deeper inspection.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox
      - Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms
      - Security data lake or SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR app in NewApps WITH BIND_DEVICE_ADMIN:
            entropy = CALCULATE_SHANNON_ENTROPY(app.package_name)
            jaccard_similarity = CALCULATE_JACCARD(app.permissions, LegitimateAdminApp.permissions)
            IF entropy > 95th_percentile_baseline AND jaccard_similarity < 0.5:
              FLAG app for review
  - question: Can a machine learning model identify applications requesting Device Administrator permissions as likely malicious based on their static features?
    context: This question involves operationalizing a machine learning model to automate the detection of malicious APKs. By training a model on features like high-risk permissions, package name entropy, and code obfuscation indicators, the system can assign a 'maliciousness' score to every new application. This provides a scalable, data-driven way to flag high-risk apps that request device admin rights, allowing security teams to focus manual analysis on the most probable threats.
    answer_sources:
      - Static APK Analysis Result (AndroidManifest.xml)
      - MAM Application Inventory Record
      - Device Admin Application Allow-list
      - Corporate application repository and vetting sandbox
      - Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms
      - Security data lake or SIEM
    range: Current Vetting Process
    queries:
      - technology: pseudocode
        query: |
          FOR new_app_apk in VettingPipeline:
            features = EXTRACT_STATIC_FEATURES(new_app_apk)
            risk_score = ML_MODEL.predict(features)
            IF risk_score > threshold:
              ALERT "High-risk APK detected requesting admin rights"
  - question: Has an unapproved application been granted Device Administrator permissions, and did the device communicate with a known malicious or a never-before-seen destination around the same time?
    context: This question seeks to identify an active compromise by correlating a high-risk on-device event (unauthorized admin grant) with suspicious network activity. When this event is temporally linked to communication with a destination on a threat intelligence feed or one that is new to the organization, it strongly suggests command-and-control (C2) activity is underway and provides high-confidence evidence of a successful attack.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android)
      - Network egress points
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MDM_Logs FOR Event="DeviceAdminEnabled"
          WHERE app_package_name NOT IN DeviceAdminAllowlist
          JOIN Network_Logs WHERE device_ip = MDM_Logs.device_ip AND time within +/- 5 mins
          WHERE Network_Logs.destination_ip IN ThreatIntelFeed
          OR PREVALENCE(Network_Logs.destination_domain) == 1
          ALERT "Critical: Unauthorized Admin Grant with Suspicious C2"
  - question: Has a user granted Device Administrator permissions to a rare application at an unusual time compared to their normal behavior?
    context: This question focuses on detecting subtle anomalies that might indicate a compromised account or social engineering. By baselining each user's typical activity, we can spot when a sensitive action occurs at an abnormal time (e.g., 3 AM). When this temporal anomaly is combined with the fact that the application itself is rarely granted admin rights across the organization, it creates a strong signal that the activity is illegitimate and warrants investigation.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android)
      - Network egress points
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON Event="DeviceAdminEnabled":
            time_z_score = CALCULATE_Z_SCORE(event.time, user.baseline_activity)
            app_prevalence = CALCULATE_PREVALENCE(event.app_package_name)
            IF time_z_score > 3.5 AND app_prevalence < 0.01:
              ALERT "Medium: Anomalous Admin Grant by Time and App Rarity"
  - question: Does the sequence of events leading up to a 'Device Administrator Enabled' event deviate from the normal patterns of device activity?
    context: This question leverages a machine learning model to understand the 'story' of how a device behaves. When an unusual sequence occurs—for instance, an app install immediately followed by a device admin grant with no user interaction—the model will fail to 'reconstruct' it accurately, resulting in a high error score. This high error score serves as a powerful, context-aware alert that a non-standard and potentially malicious series of actions has taken place.
    answer_sources:
      - MDM/MTD Audit Log (Event: DeviceAdminEnabled)
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feed
      - Device Admin Application Allow-list
      - Managed mobile endpoint devices (Android)
      - Network egress points
      - SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR device in AllDevices:
            event_sequence = GET_RECENT_EVENTS(device, window=10_events)
            reconstruction_error = LSTM_AUTOENCODER.predict(event_sequence)
            IF "DeviceAdminEnabled" in event_sequence AND reconstruction_error > threshold:
              ALERT "Anomalous Event Sequence leading to Admin Grant"
  - question: Was a Device Administrator grant preceded by a rapid sequence of events indicative of an automated script bypassing the user confirmation prompt?
    context: This question aims to detect when malware uses an accessibility service or screen overlay to programmatically click the "Activate" button. By using a Complex Event Processing (CEP) engine to look for the exact sequence of the admin prompt appearing, followed by a burst of touch events, and culminating in the admin rights being granted—all within a 2-second window—we can generate a very high-fidelity alert for automated privilege escalation.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value mobile devices with enhanced MTD monitoring
      - Security data lake or SIEM with stream processing
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WITHIN 2 seconds ON a_single_device:
            SEQUENCE(
              Event="WindowFocus" AND WindowText CONTAINS "Activate device admin",
              Event="TouchEvent" AND COUNT > 10,
              Event="DeviceAdminEnabled"
            )
          ALERT "Critical: Automated Device Admin Grant Detected"
  - question: Did an abnormal, machine-like series of touch events occur immediately before a non-allow-listed application was granted Device Administrator rights?
    context: This question uses behavioral biometrics to distinguish human interaction from automated scripts. This query identifies time windows where touch frequency is abnormally high and touch location variance is abnormally low, a strong indicator of automation. Correlating this statistical anomaly with a subsequent admin grant for an unapproved app provides strong evidence of a tap-jacking or accessibility abuse attack.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value mobile devices with enhanced MTD monitoring
      - Security data lake or SIEM with stream processing
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR 1_second_window in StreamingTouchLogs:
            touch_freq = COUNT(events)
            coord_std_dev = STDEV(events.xy_coords)
            IF touch_freq > user.99th_percentile AND coord_std_dev < user.1st_percentile:
              IF "DeviceAdminEnabled" for non-allow-listed app occurs within next 5 seconds:
                ALERT "High: Statistical Anomaly in Touch Pattern Before Admin Grant"
  - question: Can a machine learning model classify the sequence of user interface events leading to a Device Administrator grant as 'human' or 'automated'?
    context: This involves training a deep learning sequence model on low-level UI data to learn the subtle patterns of human vs. machine interaction. When the model classifies a sequence ending in a sensitive action like device admin activation as 'automated', it provides the highest possible confidence for triggering an immediate, automated response, such as quarantining the device to prevent further harm.
    answer_sources:
      - Android logcat (tag:InputReader)
      - MTD Agent Behavioral Log (Event:TouchEvent)
      - MDM/MTD Audit Log (Event:DeviceAdminEnabled)
      - High-value mobile devices with enhanced MTD monitoring
      - Security data lake or SIEM with stream processing
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON Event="DeviceAdminEnabled":
            ui_event_sequence = GET_PRECEDING_UI_EVENTS(event, window=5_seconds)
            classification = SEQUENCE_MODEL.predict(ui_event_sequence)
            IF classification == "automated":
              QUARANTINE device
              ALERT "Critical: ML-Confirmed Automated Admin Grant; Device Quarantined"