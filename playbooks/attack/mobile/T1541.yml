name: T1541: Foreground Persistence
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversaries using Android's foreground services to establish persistence or evade background process restrictions on mobile devices. It focuses on detecting applications that misuse the FOREGROUND_SERVICE permission, exhibit unusually long service runtimes, or establish long-duration, low-data "low and slow" command and control (C2) channels. The playbook also includes methods to detect automated C2 beaconing through low-entropy connection timing and identify anomalous data exfiltration where an application sends significantly more data than its historical baseline.
type: technique
related:
  - TA0028: Persistence
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any newly installed applications requested the `FOREGROUND_SERVICE` permission without being on the approved allowlist?
    context: This question aims to identify potentially malicious applications that are abusing the `FOREGROUND_SERVICE` permission to establish persistence. Legitimate apps use this for user-initiated tasks, but malware can use it to run continuously in the background, evading system restrictions. Checking new installations against an allowlist is a first-line defense to catch unauthorized software.
    answer_sources:
      - MDM Application Manifest Scan
      - Android Logcat
      - Mobile Device Management (MDM) servers
      - Corporate application store and vetting pipeline
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: MDM
          for each new_app in last 90 days:
            if 'android.permission.FOREGROUND_SERVICE' in new_app.manifest:
              if new_app.package_name not in allowlist:
                ALERT (High) on new_app
  - question: Are any applications running foreground services for durations that are statistical outliers compared to their peers?
    context: This question helps detect anomalous behavior even in seemingly legitimate applications. Malware designed for persistence may keep a foreground service running far longer than is typical for its function (e.g., a simple utility app running a service for hours). By establishing a baseline runtime for each application category, we can spot these outliers which may indicate a compromised or malicious app.
    answer_sources:
      - Android Logcat
      - Log aggregation platform ingesting Android Logcat data
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Logcat
          // Calculate baseline over 30 days
          baseline = calculate_runtime_percentile(category, 99)
          for each service_event in last 30 days:
            if service_event.runtime > baseline[service_event.app_category]:
              ALERT (Medium) on service_event.app
  - question: Have any new applications requesting the `FOREGROUND_SERVICE` permission been classified as potentially malicious by our machine learning model?
    context: This question leverages machine learning to proactively identify high-risk applications based on a variety of features beyond just a single permission. By analyzing metadata like the number of permissions, app source, user ratings, and age, the model can predict the likelihood of an app being malicious. A high score suggests a strong probability of malicious intent, warranting immediate automated quarantine to prevent potential damage.
    answer_sources:
      - MDM Application Manifest Scan
      - Mobile Device Management (MDM) servers
      - Corporate application store and vetting pipeline
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: MDM, App Store data
          for each new_app with 'FOREGROUND_SERVICE' permission:
            score = ml_model.predict(new_app.features)
            if score > 0.9:
              ACTION (Quarantine) on new_app.device
              ALERT (Critical) on new_app
  - question: Are any mobile devices maintaining long-duration connections to known command and control (C2) servers?
    context: This question looks for a classic indicator of compromise: a connection to a known malicious IP address. Adversaries often use long-lived connections for C2 channels. By correlating network traffic with MDM data (to identify the device) and threat intelligence (to identify the malicious destination), we can quickly pinpoint infected devices.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM device inventory
      - Network sensors monitoring corporate Wi-Fi and VPN egress points
      - Core DNS resolvers
      - MDM servers for IP-to-device mapping
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log, MDM inventory, Threat Intel feed
          join conn_log with mdm_inventory on ip
          for each connection from mobile_device:
            if connection.duration > 14400:
              if connection.destination_ip in c2_feed:
                ALERT (High) on mobile_device, connection
  - question: Are any mobile devices exhibiting "low and slow" network traffic patterns that are anomalous for that specific device?
    context: This question aims to detect C2 channels that don't use known malicious IPs. "Low and slow" traffic involves very long connection times with minimal data transfer, which is characteristic of a C2 beacon waiting for commands. By baselining normal behavior for each device, we can identify connections that are statistically unusual (very long duration, very low data) and may represent a hidden C2 channel.
    answer_sources:
      - Zeek conn.log
      - MDM device inventory
      - Network sensors monitoring corporate Wi-Fi and VPN egress points
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log
          // Calculate baseline over 30 days per device
          baseline = calculate_connection_stats_percentiles(device)
          for each new_connection from device:
            if new_connection.duration > baseline.duration_p95 and new_connection.total_bytes < baseline.bytes_p05:
              ALERT (Medium) on device, new_connection
  - question: Is there a statistically significant increase in the frequency of long-duration, low-data connections for any given device?
    context: This question uses time-series analysis to find changes in the pattern of C2-like behavior. A single "low and slow" connection might be a false positive, but a sudden and sustained increase in the number of such connections is a strong indicator of malicious activity. Anomaly detection algorithms can automatically flag these deviations from a device's normal connection history.
    answer_sources:
      - Zeek conn.log
      - MDM device inventory
      - Network sensors monitoring corporate Wi-Fi and VPN egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log
          for each device:
            // Create hourly time series of long-duration (>1hr), low-byte (<1KB) connections
            timeseries = create_hourly_count_series(device)
            anomalies = timeseries_anomaly_detection(timeseries)
            if anomalies found:
              ALERT on device, anomalies
  - question: Are mobile devices making HTTP requests with suspicious User-Agents to newly registered domains?
    context: This question targets common malware tradecraft. Malicious software often uses generic or known-bad User-Agent strings in its C2 communications. Furthermore, adversaries frequently use newly registered domains (NRDs) for their infrastructure to evade reputation-based blocking. Combining these two indicators—a suspicious User-Agent and an NRD—creates a high-fidelity signal for potential C2 traffic.
    answer_sources:
      - Zeek http.log
      - Zeek dns.log
      - Network sensors at traffic egress points
      - Core DNS resolvers
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek http.log, Zeek dns.log
          for each http_request from mobile_ip:
            if http_request.user_agent in suspicious_ua_list:
              domain_age = get_domain_age(http_request.host)
              if domain_age < 30 days:
                ALERT (High) on http_request
  - question: Are any devices exhibiting highly periodic, non-random network beaconing to a specific destination?
    context: This question seeks to differentiate automated malware C2 beaconing from normal, human-driven network activity. Human interactions are typically random, resulting in high-entropy time intervals between connections. Automated beacons, however, often check in at fixed intervals, leading to very predictable, low-entropy timing. An entropy score below 1.5 is a strong mathematical indicator of machine-generated traffic.
    answer_sources:
      - Zeek conn.log
      - Network sensors at traffic egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log
          group connections by source_ip, dest_ip in 1hr windows
          for each group with > 10 connections:
            time_deltas = calculate_interarrival_times(group)
            entropy = calculate_shannon_entropy(time_deltas)
            if entropy < 1.5:
              ALERT on group
  - question: Are there any network connections from mobile devices that are outliers when compared to the device's typical traffic patterns?
    context: This question uses an unsupervised machine learning approach (clustering) to find anomalous connections without relying on pre-defined rules or signatures. The DBSCAN algorithm groups "normal" connections together based on multiple features (duration, bytes, timing, etc.). Any connection that doesn't fit into a normal cluster is flagged as an outlier and is a candidate for investigation.
    answer_sources:
      - Zeek conn.log
      - Network sensors at traffic egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log
          for each device:
            // Featurize connections (duration, bytes, inter-arrival stddev, etc.)
            connection_features = featurize_connections(device)
            // DBSCAN model identifies noise points (outliers)
            outliers = dbscan_model.predict(connection_features)
            for each outlier in outliers:
              ALERT on outlier
  - question: Is an application using a foreground service communicating with known malicious or high-risk destinations?
    context: This question provides high-fidelity alerting by correlating application context with network data and threat intelligence. Knowing that a specific app (especially one using a persistent foreground service) is talking to a known exfiltration endpoint or an anonymous file-sharing site is a very strong indicator of active data theft.
    answer_sources:
      - MDM Application Runtime Logs
      - Zeek conn.log
      - MDM management servers
      - Network sensors monitoring corporate Wi-Fi and VPN connections
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: MDM logs, Zeek conn.log, Threat Intel feed
          join mdm_app_data with conn_log on ip
          for each connection from app_with_foreground_service:
            if connection.destination_ip in exfil_or_anon_file_share_feed:
              ALERT (High) on app, connection
  - question: Has any specific application suddenly started uploading significantly more data than it normally does?
    context: This question aims to detect data exfiltration by identifying anomalous upload volumes on a per-application, per-device basis. An application that normally uploads a few kilobytes a day and suddenly uploads several megabytes is highly suspicious. Using a 3-sigma rule (3 standard deviations) on a historical baseline helps to flag statistically significant increases in outbound data.
    answer_sources:
      - Zeek conn.log
      - MDM Application Runtime Logs
      - MDM management servers
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log
          // Calculate baseline over 30 days per app per device
          baseline = calculate_daily_upload_stats(app, device)
          current_daily_upload = get_daily_upload(app, device)
          if current_daily_upload > (baseline.mean + 3 * baseline.stddev):
            ALERT (Medium) on app, device
  - question: Is a device's total daily data upload volume significantly higher than what a predictive machine learning model expects?
    context: This question uses a regression model to predict a device's expected data usage, considering factors like user role and day of the week. The model's "residual" is the difference between the predicted and actual data volume. A large, sustained positive residual means the device is uploading much more data than predicted, which is a strong signal for a potential data exfiltration event.
    answer_sources:
      - Zeek conn.log
      - MDM Application Runtime Logs
      - MDM management servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          source: Zeek conn.log, MDM data
          // Model uses features like user_role, device_type, day_of_week
          predicted_volume = regression_model.predict(device_features)
          actual_volume = get_actual_daily_volume(device)
          residual = actual_volume - predicted_volume
          if residual is large and sustained:
            ALERT (High) on device