name: T1645: Compromise Client Software Binary
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps determine if an adversary has achieved persistence by modifying a client software binary on a mobile device. It focuses on detecting evidence of compromise through failed remote integrity checks, anomalous network behaviors indicative of C2 communication or data exfiltration, and statistically significant increases in application crash rates that suggest binary instability from unauthorized modification.
type: technique
related: TA0028: Persistence
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a managed mobile device failed a remote integrity check?
    context: This question seeks to identify devices that no longer meet the security baseline established by the manufacturer or enterprise, as reported by an attestation service like Google Play Integrity or Samsung Knox. A failed check is a strong indicator that the device's bootloader, system partition, or client software has been modified, potentially by an adversary to establish persistence.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - network egress points
    range: last 90 days
    queries:
      - technology: SIEM
        query: SEARCH attestation_logs WHERE (google_play_integrity.verdict NOT IN ('MEETS_DEVICE_INTEGRITY', 'MEETS_STRONG_INTEGRITY')) OR (samsung_knox.result = 'FAILED')
  - question: Is there a statistically significant increase in the attestation failure rate for any segment of the mobile device fleet?
    context: This question aims to detect widespread or targeted compromise campaigns that might not be obvious when looking at individual device failures. By calculating the failure rate segmented by device model, OS version, or region and comparing it to a historical baseline, we can identify anomalies that suggest a specific vulnerability is being exploited across a subset of devices.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - network egress points
    range: last 90 days
    queries:
      - technology: SIEM / Data Analytics Platform
        query: CALCULATE failure_rate = (failed_checks / total_checks) GROUP BY device_model, os_version, region | COMPARE failure_rate to 30-day historical 99th percentile baseline
  - question: Following an attestation failure, did the compromised device communicate with any high-risk network destinations?
    context: Once a device is confirmed to be compromised via a failed integrity check, the next step is to assess the impact and identify potential command-and-control (C2) communication. This question uses a machine learning model to score network destinations based on characteristics like domain entropy and SSL certificate rarity, allowing analysts to rapidly prioritize and investigate the most suspicious connections made by the compromised device.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - network egress points
    range: last 72 hours
    queries:
      - technology: SOAR / SIEM
        query: ON attestation_failure_alert | GET network_logs for failed_device from last 72 hours | SCORE destination_ip/fqdn using ML_model | ALERT if score > 0.9
  - question: Has a mobile device connected to a known command-and-control (C2) server?
    context: This question focuses on detecting direct communication with malicious infrastructure. By comparing network connection logs against a curated threat intelligence feed of known C2 servers, we can identify compromised devices with high confidence. A match indicates an active or recent compromise where the malware is communicating with its operator.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - technology: SIEM
        query: SEARCH network_logs (conn.log, ssl.log) | JOIN destination_ip/server_name with threat_intel_feed_c2 | ALERT on match
  - question: Is any mobile device exhibiting network behavior indicative of DGA or data exfiltration?
    context: This question looks for secondary indicators of compromise in network traffic. High-entropy domain names often signal the use of Domain Generation Algorithms (DGA) for C2 communication, while a high ratio of outbound to inbound data can indicate data exfiltration. Detecting these patterns can help uncover novel or unknown threats not yet present in threat intelligence feeds.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - technology: SIEM / Network Security Analytics
        query: 1. CALCULATE entropy on dns.log query field | ALERT if entropy > baseline_98th_percentile. 2. SEARCH conn.log WHERE (orig_bytes / resp_bytes > 10) AND (duration > 60s) | ALERT
  - question: Has any mobile device's network activity deviated significantly from its established baseline?
    context: This question uses machine learning to establish a 'normal' profile of network behavior for each device and then flags significant deviations. This approach can detect subtle changes that might be missed by rule-based methods, such as a change in the volume of data transferred, the types of servers contacted, or connection patterns, all of which could indicate a compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - technology: Data Analytics / ML Platform
        query: FOR each_device | TRAIN isolation_forest_model on 30-day baseline (outbound_volume, unique_ips, port_distribution, etc.) | SCORE daily_activity against model | ALERT if score is anomalous
  - question: Has a critical, high-privilege system application crashed on any managed device?
    context: This question is based on the premise that core system applications (like device settings) are highly stable and should not crash under normal circumstances. A crash in one of these applications is a rare and high-fidelity signal that the application's binary may have been tampered with, causing instability.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - technology: MDM / APM
        query: SEARCH crash_logs WHERE application_name IN (critical_system_apps_list) | ALERT on any result
  - question: Is any single device experiencing an anomalously high crash rate for a managed corporate application?
    context: This question aims to identify outliers at the individual device level. If a single device shows a dramatically higher crash rate for an application compared to the rest of the fleet, it could indicate that the application binary on that specific device has been modified or corrupted, possibly by an adversary.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - technology: SIEM / Data Analytics Platform
        query: CALCULATE daily crash_rate per device, per app | COMPARE device_crash_rate to fleet_30-day_baseline_99.5th_percentile | ALERT if exceeds
  - question: Is the overall crash count for a critical application across the entire fleet significantly higher than expected?
    context: This question looks for fleet-wide trends that could indicate a widespread problem. By using a time series model to predict the expected number of crashes, we can detect a sudden, statistically significant increase across all devices. This could be a sign that a compromised version of a corporate application was distributed through an official update channel, affecting many users simultaneously.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - technology: Data Analytics / ML Platform
        query: FORECAST expected_daily_crashes using ARIMA model on historical fleet-wide data | COMPARE actual_crashes to forecasted_upper_confidence_bound | ALERT if exceeds