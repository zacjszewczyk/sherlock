name: T1521.001: Symmetric Cryptography
id: f9e0c1b8-6a3d-4f2e-9d7c-8b1a0e3c5d7a
description: |
  This playbook addresses the information requirement: Is an adversary using symmetric cryptography for command and control (C2) communications originating from managed mobile devices? It focuses on identifying C2 beacons through periodic, high-entropy network traffic to non-standard ports, and detecting C2 tunneling by finding connections on standard service ports (e.g., 443, 53) that do not conform to the expected application-layer protocol.
type: technique
related:
  - TA0037: Command And Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are mobile devices connecting to known command and control servers based on threat intelligence feeds?
    context: |
      This is a fundamental check to quickly identify known threats. By continuously comparing outbound network connections from mobile devices against a curated list of malicious IP addresses and domains, an organization can detect and respond to confirmed C2 activity with high confidence. This query acts as a first line of defense.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek software.log
      - Zeek http.log
      - Mobile Device Management (MDM) network flow logs
      - Mobile EDR network connection logs
      - Managed mobile devices
      - Corporate Wi-Fi network sensors
      - VPN concentrators
      - Internet Gateway / Egress Firewall
      - Cloud Access Security Broker (CASB)
      - Mobile Device Management (MDM) Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network_connection IN (mobile_device_network_logs):
            IF network_connection.destination_ip OR network_connection.destination_domain IN threat_intelligence_feed:
              GENERATE critical_alert
  - question: Are there mobile devices exhibiting periodic, high-entropy network traffic to non-standard ports, indicative of C2 beacons?
    context: |
      Adversaries often use custom C2 protocols that beacon back to their servers at regular intervals (low temporal deviation). The traffic is typically encrypted (high entropy) and sent to high-numbered, non-standard ports ($$ > 1024 $$) to evade simple port-based filtering. This question seeks to identify this pattern by applying a risk score to connections that exhibit these characteristics, allowing for the detection of previously unknown C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek software.log
      - Zeek http.log
      - Mobile Device Management (MDM) network flow logs
      - Mobile EDR network connection logs
      - Managed mobile devices
      - Corporate Wi-Fi network sensors
      - VPN concentrators
      - Internet Gateway / Egress Firewall
      - Cloud Access Security Broker (CASB)
      - Mobile Device Management (MDM) Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each mobile_device:
            FOR each 1_hour_window:
              GROUP connections by destination_ip, destination_port
              FOR each group:
                inter_arrival_stddev = CALCULATE_STDDEV(connection_timestamps)
                payload_entropy = CALCULATE_ENTROPY(connection_payloads)
                risk_score = 0
                IF inter_arrival_stddev < 5s THEN risk_score += 3
                IF payload_entropy > 7.5 THEN risk_score += 3
                IF destination_port > 1024 AND destination_port NOT IN common_ports_allowlist THEN risk_score += 2
                IF risk_score > 4 THEN GENERATE alert
  - question: Can a machine learning model detect anomalous high-entropy traffic patterns that suggest C2 activity from mobile devices?
    context: |
      This question proposes a sophisticated, two-stage machine learning approach for C2 detection. The first stage uses a time-series model to learn the normal rhythm of a device's high-entropy data transfers, flagging significant deviations. The second stage, a more resource-intensive classifier, is then triggered to analyze the anomalous traffic in detail, using a rich feature set to distinguish between benign anomalies and true C2. This layered approach balances performance with detection accuracy.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek software.log
      - Zeek http.log
      - Mobile Device Management (MDM) network flow logs
      - Mobile EDR network connection logs
      - Managed mobile devices
      - Corporate Wi-Fi network sensors
      - VPN concentrators
      - Internet Gateway / Egress Firewall
      - Cloud Access Security Broker (CASB)
      - Mobile Device Management (MDM) Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Stage 1: Time-series Anomaly Detection
          FOR each device:
            MONITOR timeseries_of_high_entropy_traffic_volume
            IF anomaly_detected_by_ARIMA_or_LSTM:
              TRIGGER Stage 2

          // Stage 2: Classification
          EXTRACT features (inter-arrival_stats, entropy, duration, bytes, port, ASN, JA3) for anomalous flow
          PREDICT C2_probability with RandomForest_classifier
          IF C2_probability > high_confidence_threshold:
            GENERATE high_priority_incident
  - question: Are mobile devices making connections on standard service ports (e.g., 443, 53) that do not conform to the expected application protocol, suggesting C2 tunneling?
    context: |
      This is a powerful technique for detecting C2 tunneling. Adversaries may route their malicious traffic over common ports like 443 (HTTPS) or 53 (DNS) to blend in. However, their custom protocol will not perform the standard application-layer handshake (e.g., a TLS handshake on port 443). By joining connection logs with protocol-specific logs and looking for connections that exist in one but not the other, we can uncover this masquerading.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network egress points
      - Internal DNS resolvers
      - Cloud Access Security Broker (CASB) logs
      - Core network switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For HTTPS/TLS
          QUERY 'Zeek conn.log' WHERE dest_port = 443
          LEFT_JOIN 'Zeek ssl.log' ON connection_uid
          ALERT WHERE 'ssl.log'.uid IS NULL

          // For DNS
          QUERY 'Zeek conn.log' WHERE dest_port = 53 AND proto = 'udp'
          LEFT_JOIN 'Zeek dns.log' ON connection_uid
          ALERT WHERE 'dns.log'.uid IS NULL
  - question: Do any mobile devices show a statistically significant increase in their rate of protocol mismatches over time?
    context: |
      Instead of alerting on every single protocol mismatch, this question aims to find compromised devices by tracking their behavior over time. By calculating a daily 'Protocol Mismatch Ratio' for each device, we can establish a baseline of normal behavior. A sudden, statistically significant deviation from this baseline (measured using Median Absolute Deviation, which is robust to outliers) can indicate that the device has started using C2 tunneling.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network egress points
      - Internal DNS resolvers
      - Cloud Access Security Broker (CASB) logs
      - Core network switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each device:
            CALCULATE daily_mismatch_ratio = (mismatched_connections_on_port_X / total_connections_on_port_X)
            CALCULATE 30_day_rolling_median and 30_day_MAD of daily_mismatch_ratio
            IF current_daily_ratio > (30_day_median + 3 * 30_day_MAD):
              GENERATE alert
  - question: Can an unsupervised machine learning model identify anomalous network connections that deviate from known-good, protocol-adherent traffic patterns?
    context: |
      This question explores the use of unsupervised ML to find the "unknown unknowns." By training a model like an Isolation Forest on a large dataset of normal, benign network traffic, the model learns what "good" looks like. It can then assign an anomaly score to new connections. Connections that receive a high score are, by definition, unusual and may represent novel C2 techniques or other malicious activity that would not be caught by signature-based rules.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Network egress points
      - Internal DNS resolvers
      - Cloud Access Security Broker (CASB) logs
      - Core network switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN IsolationForest_model on dataset of known_good_connections
          FOR each new_connection:
            EXTRACT features (duration, bytes, proto, service, conn_state, etc.)
            CALCULATE anomaly_score = IsolationForest_model.predict(features)
            IF anomaly_score > threshold:
              FLAG for analyst_review