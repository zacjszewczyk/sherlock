name: T1623.001: Unix Shell
id: f5d3c8a0-6a7b-4e9c-8f2d-1a0b3c4d5e6f
description: This playbook focuses on detecting unauthorized Unix shell execution on mobile devices, a common technique for adversaries to run commands and scripts. It provides investigative questions and queries to identify shell processes spawned by unapproved applications, detect high-risk command patterns (e.g., obfuscated commands, use of curl piped to sh) correlated with suspicious network activity, spot privilege escalation attempts via superuser ('su') executions on non-rooted devices, and identify shell invocations via specific Java methods (e.g., `java.lang.Runtime.exec()`) by non-system applications. The goal is to uncover malicious execution that could lead to further compromise.
type: technique
related:
  - TA0041: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a shell process being spawned by an application that is not on the authorized allowlist?
    context: Adversaries may use legitimate-seeming applications to execute malicious code. By maintaining an allowlist of applications authorized to spawn shell processes (like 'sh' or 'bash'), security teams can quickly identify unauthorized and potentially malicious activity. An alert for a shell process created by a parent application not on this list is a strong indicator of compromise.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ApplicationInventory.csv
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MTD process logs for child_process in ('sh', 'bash', 'zsh')
          EXTRACT parent_app_bundle_id
          IF parent_app_bundle_id NOT IN (UEM_app_allowlist)
          THEN ALERT (high-severity)
  - question: Is any application executing shell commands at an anomalously high rate for a specific user?
    context: While some applications may legitimately use shell commands, a sudden, sharp increase in the frequency of these executions for a particular user can indicate that the application has been compromised or is being misused. This question uses behavioral analytics to establish a baseline of normal activity and flags significant deviations, which could signal an attack.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ApplicationInventory.csv
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each (user, application) pair
            CALCULATE 30-day baseline of shell execution counts (mean, std_dev)
          MONITOR daily shell execution counts
          IF daily_count > (mean + 3 * std_dev)
          THEN ALERT (medium-severity)
  - question: Can we use a machine learning model to predict if a shell execution event is malicious based on its features?
    context: Simple rules may miss sophisticated attacks. A supervised machine learning model (e.g., Random Forest) can be trained on historical data to learn the complex patterns of malicious shell executions. By analyzing features like the parent process, application signature, and user role, the model can score new events in real-time, providing a more nuanced and accurate method for detecting threats.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ApplicationInventory.csv
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new shell execution event
            EXTRACT features (parent_process, app_signature, app_source, user_role, etc.)
            APPLY pre-trained classification model to features
            GET probability_of_malice
            IF probability_of_malice > 0.9
            THEN ALERT (high-severity)
  - question: Is a shell command with high-risk patterns being executed concurrently with network connections to known malicious destinations?
    context: This question correlates on-device activity with network telemetry to provide high-fidelity alerts. Detecting a high-risk command pattern, such as 'curl ... | sh' or 'base64 -d', is suspicious on its own. Confirming that the device also connected to an IP or domain on a threat intelligence feed at the same time provides strong, contextual evidence of a successful compromise.
    answer_sources:
      - MTD ProcessEvents.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MTD process logs for command_line matching regex ('curl .*\\|.*sh', 'nc -e', 'base64 -d')
          IF match, EXTRACT device_ip, timestamp
          SEARCH Zeek logs for connections from device_ip near timestamp
          EXTRACT destination_ip/domain
          IF destination_ip/domain IN (threat_intelligence_feed)
          THEN ALERT (high-severity)
  - question: Is a shell command exhibiting unusually high complexity or obfuscation, as measured by Shannon entropy?
    context: Attackers often obfuscate commands to evade signature-based detection. Shannon entropy measures the randomness or complexity of a string. A command with unusually high entropy may be packed, encoded, or otherwise obfuscated. By baselining normal command complexity and alerting on outliers, analysts can uncover attempts to hide malicious code.
    answer_sources:
      - MTD ProcessEvents.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE 30-day baseline of Shannon entropy for all shell command strings (99th_percentile_threshold)
          FOR each new shell command string
            CALCULATE entropy_score
            IF entropy_score > 99th_percentile_threshold
            THEN ALERT (medium-severity)
  - question: Can a deep learning model classify the syntax of shell commands to identify malicious activity?
    context: Deep learning models like LSTMs or Transformers excel at understanding sequential data, such as language or command syntax. By training a model on a large dataset of labeled shell commands, it can learn the grammatical structure of both benign and malicious commands, enabling it to classify new, unseen commands with high accuracy, surpassing traditional regex or keyword-based methods.
    answer_sources:
      - MTD ProcessEvents.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new shell command string
            APPLY pre-trained sequence model (LSTM/Transformer)
            GET classification (benign/malicious)
            IF classification is 'malicious' with high confidence
            THEN ALERT
  - question: Has a superuser ('su') command been executed on a device that is reported as compliant and non-rooted?
    context: This is a powerful check for contradictions in device state. A device's UEM/MDM profile may report it as 'compliant' and 'non-rooted', but the execution of the 'su' command indicates an attempt to gain or use root privileges. This discrepancy is a critical, high-fidelity indicator of a successful privilege escalation exploit or a misconfigured device that requires immediate quarantine and investigation.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MTD process logs for process_name = 'su'
          IF match, EXTRACT device_id
          QUERY UEM/MDM API for device_id status
          IF status is 'compliant' AND 'non-rooted'
          THEN ALERT (critical-severity) and TRIGGER SOAR playbook for quarantine
  - question: Is there a statistically significant spike in the number of devices across the fleet executing the 'su' command?
    context: Monitoring individual events is crucial, but analyzing fleet-wide trends can reveal large-scale attacks. A sudden, anomalous increase in the number of unique devices executing 'su' across the entire mobile fleet could indicate that a widespread vulnerability is being exploited. This question helps detect coordinated campaigns that might be missed by only looking at single devices.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE 7-day rolling average and std_dev of unique devices executing 'su' per hour
          MONITOR current hourly count
          IF current_hourly_count > (rolling_average + 3 * std_dev)
          THEN ALERT (high-severity, fleet-wide)
  - question: Following a confirmed malicious 'su' execution, are there other devices exhibiting similar post-compromise behavior?
    context: This is a proactive threat hunting technique. After an incident is confirmed on one device, its post-compromise behavior (e.g., child processes, network connections) can be used as a fingerprint. By using a clustering algorithm like DBSCAN, analysts can search for other devices across the fleet that exhibit a similar pattern of telemetry, allowing for proactive incident scoping and containment of a wider breach.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Zeek conn.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GATHER post-event telemetry (processes, network connections) for confirmed compromised device
          CREATE feature set from telemetry
          APPLY unsupervised clustering algorithm (e.g., DBSCAN) to find similar feature sets across all devices
          IDENTIFY cluster of devices with similar behavior for further investigation
  - question: Is a non-system application invoking shell execution via common Java methods like `Runtime.exec()` or `ProcessBuilder`?
    context: These specific Java methods are standard ways for an application to run external processes and commands. While legitimate uses exist, their invocation by a non-system application, especially one from an untrusted source or with suspicious command arguments, is a significant red flag. This action focuses on monitoring these specific, high-risk API calls to catch malicious execution attempts at their source.
    answer_sources:
      - MDM/MTD API Call Log
      - Zeek conn.log
      - Zeek http.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Network egress gateways
      - VPN concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH API Call Logs for method_name IN ('java.lang.Runtime.exec', 'java.lang.ProcessBuilder')
          IF source_app NOT IN (system_apps) AND (source_app NOT IN (allowlist) OR command_arguments MATCH (watchlist))
          THEN ALERT (high-severity)
  - question: Is an application's shell command execution statistically anomalous in terms of frequency, complexity, or novelty?
    context: This question uses a multi-faceted behavioral analysis to detect suspicious activity. It moves beyond simple counts to create a more robust profile of "normal" for each application. An alert is triggered if an execution is anomalous in its frequency (too many executions), complexity (high entropy suggesting obfuscation), or novelty (the command is very different from anything seen before), providing a more resilient detection method.
    answer_sources:
      - MDM/MTD API Call Log
      - Zeek conn.log
      - Zeek http.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Network egress gateways
      - VPN concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each app, BASELINE command frequency, entropy, and known command set (for Jaccard similarity)
          FOR each new execution
            IF count > 99th_percentile OR entropy > (mean + 3*std_dev) OR jaccard_similarity < 0.2
            THEN ALERT (medium-severity)
  - question: Following a shell execution alert, does the device exhibit anomalous network behavior indicative of compromise?
    context: A shell execution may be the initial step of an attack. This question aims to confirm malicious intent by correlating the execution event with subsequent network activity. By applying a time-series anomaly detection model to network flows immediately following a shell alert, analysts can detect patterns like C2 beaconing or data exfiltration that confirm the device is compromised, allowing for a more confident and rapid response.
    answer_sources:
      - MDM/MTD API Call Log
      - Zeek conn.log
      - Zeek http.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Network egress gateways
      - VPN concentrators
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON shell execution alert, CAPTURE device network flows for next 5 minutes
          EXTRACT features (bytes_out, bytes_in, connection_count, etc.)
          APPLY pre-trained LSTM Autoencoder model to feature window
          IF reconstruction_error > 98th_percentile
          THEN ESCALATE ALERT (critical-severity) and enrich with IP reputation data
  - question: Is a known-bad or untrusted application spawning a shell process like 'sh' or 'bash'?
    context: Using a deny-list of applications forbidden from spawning shells (e.g., games, social media apps) provides a high-confidence method for detecting policy violations and malicious activity. An alert from this rule means an application is performing an action it should never do, warranting immediate investigation and automatic enrichment with device and threat intelligence data to speed up response.
    answer_sources:
      - MDM/MTD Process Event Log
      - Zeek dns.log
      - Zeek conn.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Corporate DNS resolvers
      - Network egress gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Process Event Logs for child_process in ('sh', 'bash')
          EXTRACT parent_process_package_name
          IF parent_process_package_name IN (app_deny_list)
          THEN ALERT (critical-severity) and enrich with device/threat intel
  - question: Is a statistically rare parent-child process relationship occurring on a device?
    context: This question is based on the principle that "rare is suspicious." Most legitimate software behavior is common across a fleet of devices. A parent process spawning a child process in a combination that is observed on very few devices (e.g., less than 1%) is a statistical anomaly. This could indicate a targeted attack, a new malware variant, or an attacker living off the land in an unusual way.
    answer_sources:
      - MDM/MTD Process Event Log
      - Zeek dns.log
      - Zeek conn.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Corporate DNS resolvers
      - Network egress gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE all (parent_process, child_process) pairs across the fleet to determine prevalence
          FOR each new process event
            CALCULATE prevalence of its (parent, child) pair
            IF prevalence < 1%
            THEN ALERT (medium-severity)
  - question: Can a machine learning model classify a parent-child process creation event as malicious based on its collective features?
    context: This approach uses a supervised machine learning model (e.g., Gradient Boosting) to provide a holistic assessment of a process creation event. Instead of relying on a single indicator, the model considers multiple features at once—such as the parent app, child process, command-line entropy, and statistical rarity—to generate a single, actionable probability score of maliciousness. This automates complex analysis and improves detection accuracy.
    answer_sources:
      - MDM/MTD Process Event Log
      - Zeek dns.log
      - Zeek conn.log
      - Managed mobile device fleet
      - Centralized log aggregator/SIEM
      - Corporate DNS resolvers
      - Network egress gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process creation event
            EXTRACT features (parent_app, child_process, cmd_entropy, prevalence_score, etc.)
            APPLY pre-trained classification model
            GET probability_score
            IF probability_score > 0.9
            THEN ALERT (high-severity)