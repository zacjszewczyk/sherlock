name: T1398: Boot or Logon Initialization Scripts
id: a7e8e5e8-4c1b-4b1e-9e7f-6c1d0a9b8e7d
description: >-
  Investigates whether an adversary has established persistence on corporate mobile devices by modifying boot or logon initialization scripts. This is detected by monitoring for device integrity failures such as failed Google SafetyNet attestations or 'Red'/'Yellow' Android Verified Boot states, analyzing file systems from forensic images for hash mismatches or unauthorized files in boot directories, and using statistical methods to find anomalous failure rates or suspicious file characteristics like high entropy.
type: technique
related:
  - TA0028: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any mobile devices failing Google SafetyNet attestation, and are they being automatically isolated?
    context: >-
      This question aims to detect real-time device tampering or compromise, as indicated by failures in Google's SafetyNet `ctsProfileMatch` or `basicIntegrity` checks. A failure suggests the device's integrity is compromised, possibly due to rooting, an unofficial ROM, or modification of boot scripts, which could be a persistence mechanism. The automated response is crucial for immediate containment.
    answer_sources:
      - MDM attestation event logs
      - Google SafetyNet API result logs
      - Samsung Knox attestation logs
      - Zeek conn.log
      - Zeek dns.log
      - Centralized logging platform (e.g., SIEM)
      - Mobile Device Management (MDM) console
      - network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SIEM search for MDM logs where SafetyNet `ctsProfileMatch` is `false` OR `basicIntegrity` is `false`.
  - question: Has there been an anomalous spike in the number of SafetyNet attestation failures across the device fleet?
    context: >-
      This question helps to identify widespread or coordinated attacks that might be missed by single-device alerts. By baselining the normal rate of attestation failures and alerting on significant deviations (e.g., exceeding the 99th percentile), we can detect large-scale campaigns or systemic issues that cause many devices to fail integrity checks simultaneously.
    answer_sources:
      - MDM attestation event logs
      - Google SafetyNet API result logs
      - Samsung Knox attestation logs
      - Zeek conn.log
      - Zeek dns.log
      - Centralized logging platform (e.g., SIEM)
      - Mobile Device Management (MDM) console
      - network egress points instrumented with Zeek sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SIEM search to count hourly SafetyNet failures. Compare hourly counts to a 30-day rolling 99th percentile baseline. Alert if current hour count > baseline.
  - question: Does a device failing attestation also exhibit suspicious network behavior?
    context: >-
      This question seeks to correlate a device integrity failure with potentially malicious network activity, increasing the confidence of a true positive compromise. Analyzing network telemetry (DNS queries, connection logs) for anomalies can reveal C2 communication, data exfiltration, or scanning activity, providing crucial context to an attestation failure and justifying an escalation in incident priority.
    answer_sources:
      - MDM attestation event logs
      - Google SafetyNet API result logs
      - Samsung Knox attestation logs
      - Zeek conn.log
      - Zeek dns.log
      - Centralized logging platform (e.g., SIEM)
      - Mobile Device Management (MDM) console
      - network egress points instrumented with Zeek sensors.
    range: last 24 hours
    queries:
      - technology: pseudocode
        query: For a given device IP, query Zeek logs for the last 24 hours. Extract network features (DNS entropy, connection ratios, etc.). Score features with a logistic regression model. Escalate if score > 0.85.
  - question: Are there any devices reporting a 'Red' Android Verified Boot status, and are they being isolated and wiped?
    context: >-
      This question focuses on detecting the most severe level of boot integrity compromise. A 'Red' status indicates the device has loaded a different OS or that the system partition is corrupt, a strong indicator that boot scripts or the underlying system has been maliciously modified. Immediate, automated isolation and wipe actions are necessary to prevent further harm.
    answer_sources:
      - MDM device health telemetry logs
      - MDM policy compliance status logs
      - Mobile Device Management (MDM) servers
      - Security Information and Event Management (SIEM) platform.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SIEM search for MDM logs where `verified_boot_state` is 'Red'.
  - question: Is there a rising trend in the number of devices reporting a 'Yellow' Android Verified Boot status?
    context: >-
      This question aims to detect slow-moving campaigns or emerging systemic issues. A 'Yellow' status indicates a user-trusted root of trust, often from unlocking the bootloader, which can be a precursor to installing modified boot scripts. A statistically significant increase in these events over time, identified via trend analysis, could signal a coordinated effort by an adversary or a widespread vulnerability.
    answer_sources:
      - MDM device health telemetry logs
      - MDM policy compliance status logs
      - Mobile Device Management (MDM) servers
      - Security Information and Event Management (SIEM) platform.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SIEM search to generate a daily count of devices with 'Yellow' boot state. Apply STL decomposition to the 90-day time series. Alert if the trend component shows a significant positive slope over 7 days.
  - question: Are any devices exhibiting an anomalous combination of health and configuration settings?
    context: >-
      This question uses unsupervised machine learning to find outliers that might not trigger specific, rule-based alerts. An adversary might try to blend in by avoiding obvious indicators. An Isolation Forest model can identify unusual combinations of factors (e.g., a 'Yellow' boot state, outdated OS, and developer mode enabled) that, when taken together, represent a high-risk profile warranting investigation.
    answer_sources:
      - MDM device health telemetry logs
      - MDM policy compliance status logs
      - Mobile Device Management (MDM) servers
      - Security Information and Event Management (SIEM) platform.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: From MDM telemetry, extract features for all devices (boot state, update age, etc.). Score each device using a pre-trained Isolation Forest model. Flag devices in the top 1% of anomaly scores for investigation.
  - question: Does a forensic image of a device contain modified or known-malicious boot files?
    context: >-
      This is a fundamental forensic question to confirm file system tampering. By comparing the hashes of critical boot files (e.g., in `/system/etc/init/`) against a trusted baseline and threat intelligence feeds, an analyst can definitively determine if an adversary has modified or planted files to establish persistence. A mismatch is a high-confidence indicator of compromise.
    answer_sources:
      - Mobile device file system image
      - File system metadata from image
      - Internal known-good file hash database
      - Threat intelligence hash feeds
      - Digital Forensics and Incident Response (DFIR) workstation
      - Secure evidence storage.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For a given file system image, compute SHA-256 hashes of files in boot directories. Compare hashes against a known-good baseline and threat intelligence feeds. Alert on mismatches or malicious hits.
  - question: Are there any boot files on a device's forensic image with unusually high entropy, suggesting obfuscation or encryption?
    context: >-
      This question helps identify suspicious files that might not be caught by hash-based analysis (e.g., a newly created malicious script). High entropy is a common characteristic of packed or encrypted code, which adversaries use to evade detection. Flagging files with anomalous entropy scores helps analysts prioritize which unknown or modified files to examine first.
    answer_sources:
      - Mobile device file system image
      - File system metadata from image
      - Internal known-good file hash database
      - Threat intelligence hash feeds
      - Digital Forensics and Incident Response (DFIR) workstation
      - Secure evidence storage.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For executables/scripts in boot directories, calculate Shannon entropy. Compare to a baseline entropy distribution for that file type. Flag files with entropy > 3 standard deviations from the mean.
  - question: Can any modified or unknown boot scripts on a device's forensic image be classified as malicious based on their characteristics?
    context: >-
      This question applies machine learning to static script analysis to automatically assess the threat level of a suspicious file. Instead of relying solely on manual reverse engineering, a classifier can quickly score a script's maliciousness based on features like the presence of dangerous commands, encoded data, or improper permissions. This helps prioritize the most dangerous-looking files for deeper human analysis.
    answer_sources:
      - Mobile device file system image
      - File system metadata from image
      - Internal known-good file hash database
      - Threat intelligence hash feeds
      - Digital Forensics and Incident Response (DFIR) workstation
      - Secure evidence storage.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For a given script, extract features (command n-grams, encoded strings, permissions). Score the script using a pre-trained Random Forest model. Prioritize for reverse engineering if malicious score > 0.90.