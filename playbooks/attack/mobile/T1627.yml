name: "T1627: Execution Guardrails"
id: a1b9e8f0-c7d6-4e5a-9f8b-3d2c1b0a9e8f
description: This playbook helps investigators determine if an adversary is using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices. This involves looking for static indicators within mobile applications, such as rare combinations of permissions or conditional logic that checks for specific environmental factors (e.g., device locale, network operator, Wi-Fi SSID). It also covers dynamic indicators, where an application shows minimal activity in a sandbox until a specific trigger (like a particular GPS location or SIM card country code) is applied, after which it exhibits malicious behavior like sudden network spikes or calls to sensitive APIs.
type: technique
related:
  - "TA0030: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a new or updated mobile application requesting a high-risk combination of permissions or does its code contain references to target-specific identifiers?
    context: Adversaries often bundle permissions that, when combined, allow for potent malicious activity (e.g., reading SMS messages and location data). This question aims to identify applications using these known high-risk permission sets. Furthermore, malware designed for specific targets may have hardcoded identifiers like corporate Wi-Fi SSIDs or internal domain names. Finding these strings in the application's code is a strong indicator of targeted intent. An alert on a match helps analysts prioritize potentially malicious applications for deeper inspection.
    answer_sources:
      - Mobile Application Manifest Files (e.g., AndroidManifest.xml)
      - Static analysis reports from decompiled application source code (e.g., APK, IPA)
      - Corporate-managed mobile devices, Mobile Device Management (MDM) platform, internal application vetting/sandbox environments, and public/private mobile application marketplaces.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new/updated application:
            permissions = EXTRACT_PERMISSIONS(application.manifest)
            IF permissions IN high_risk_watchlist:
              ALERT("High-risk permission combo found")
            strings = EXTRACT_STRINGS(application.code)
            IF strings CONTAINS target_specific_identifiers:
              ALERT("Target-specific identifier found")
  - question: Does a mobile application have a statistically unusual set of permissions compared to other apps in its category?
    context: This question focuses on identifying outliers. Malicious applications often request a set of permissions that deviates significantly from legitimate apps in the same category. A low Jaccard similarity score indicates the app's permissions are very different from the norm. A high Shannon entropy score suggests the app uses a rare and diverse set of permissions. Both are statistical indicators that the application may be using an unusual permission set to enable its malicious functionality while evading simple signature-based detection.
    answer_sources:
      - Mobile Application Manifest Files (e.g., AndroidManifest.xml)
      - Mobile Threat Defense (MTD) permission analysis logs
      - Corporate-managed mobile devices, Mobile Device Management (MDM) platform, internal application vetting/sandbox environments, and public/private mobile application marketplaces.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each application:
            category_median_permissions = GET_MEDIAN_PERMS(application.category)
            jaccard_score = CALC_JACCARD(application.permissions, category_median_permissions)
            IF jaccard_score < 10th_percentile:
              FLAG_FOR_REVIEW(application, "Low Jaccard Score")
            entropy_score = CALC_ENTROPY(application.permissions)
            IF entropy_score > 95th_percentile:
              FLAG_FOR_REVIEW(application, "High Entropy Score")
  - question: Does a machine learning model classify a new mobile application as highly likely to be malicious based on its static features?
    context: This question leverages machine learning to automate the detection of potentially malicious applications. By creating a feature vector from static properties like permissions, exported components, and specific API calls associated with guardrailing, a trained classifier can predict the likelihood of an app being malicious. A high probability score ($$ p(malicious) > 0.90 $$) serves as a strong signal to quarantine the application and escalate it for more intensive dynamic analysis, preventing it from running in a production environment.
    answer_sources:
      - Static analysis reports from decompiled application source code (e.g., APK, IPA)
      - Corporate-managed mobile devices, Mobile Device Management (MDM) platform, internal application vetting/sandbox environments, and public/private mobile application marketplaces.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new application:
            feature_vector = GENERATE_FEATURES(application)
            prediction = ML_MODEL.predict(feature_vector)
            IF prediction.probability > 0.90:
              QUARANTINE_AND_ALERT(application)
  - question: Does an application initiate suspicious network connections to known-bad domains or low-reputation IPs immediately after a specific environmental trigger is applied in a sandbox?
    context: This question aims to unmask dormant malicious behavior. Adversaries use execution guardrails to ensure their malware remains inactive until it confirms it's on a target device. By simulating a target environment (e.g., setting a specific GPS location or Wi-Fi name) in a sandbox, we can trigger this behavior. A sudden DNS query to a domain on a threat intelligence list or a connection to a low-reputation IP right after a trigger is a strong indicator that the application was waiting for these specific conditions to begin its C2 communications or other malicious network activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Dynamic analysis sandbox logs (API call traces, system call logs, file system access)
      - Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          IN sandbox:
            FOR each trigger in environmental_triggers:
              APPLY_TRIGGER(trigger)
              SLEEP(60)
              network_events = GET_NETWORK_LOGS(last_60_seconds)
              FOR event in network_events:
                IF event.domain in threat_intel_feed OR event.ip_rep < low_score:
                  ALERT("Suspicious network activity post-trigger")
  - question: Following an environmental trigger in a sandbox, does an application's network traffic exhibit a statistically significant anomaly in volume or entropy?
    context: This question uses statistical methods to detect a change in an application's behavior. A dormant malicious app will have very low and predictable network traffic. After a guardrail condition is met, it may initiate data exfiltration or C2 communication, causing a dramatic and anomalous spike in outbound traffic (e.g., exceeding three standard deviations from the baseline mean, $$ \mu + 3\sigma $$). An increase in the entropy of destination ports or DNS queries also suggests a shift from quiet, predictable behavior to more chaotic and suspicious activity, such as scanning or contacting multiple C2 servers.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          IN sandbox:
            baseline_traffic = MONITOR_NETWORK(5_minutes)
            mean, std_dev = CALC_STATS(baseline_traffic)
            threshold = mean + 3 * std_dev
            APPLY_TRIGGER(trigger)
            post_trigger_traffic = MONITOR_NETWORK()
            IF post_trigger_traffic.bytes_out > threshold:
              ALERT("Anomalous traffic volume detected")
            IF CALC_ENTROPY(post_trigger_traffic) >> CALC_ENTROPY(baseline_traffic):
              ALERT("Anomalous traffic entropy detected")
  - question: After an environmental trigger, does an LSTM autoencoder model detect a significant anomaly in the application's network behavior compared to its learned baseline?
    context: This question applies an advanced machine learning technique to detect behavioral changes. An LSTM autoencoder is trained on the application's normal network traffic patterns (e.g., bytes/sec, packets/sec). The model learns to reconstruct this normal behavior with low error. When the application's behavior changes dramatically after a trigger (e.g., it starts exfiltrating data), its network traffic will no longer match the learned pattern. The model will fail to reconstruct this new, anomalous traffic accurately, resulting in a high reconstruction error. A spike in this error above a high percentile threshold is a strong indicator of a malicious state change.
    answer_sources:
      - Zeek conn.log
      - Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.
    range: Last 90 days
    queries:
      - technology: Pseudocode
        query: |
          IN sandbox:
            baseline_traffic = MONITOR_NETWORK()
            lstm_autoencoder = TRAIN_MODEL(baseline_traffic)
            APPLY_TRIGGER(trigger)
            post_trigger_traffic = MONITOR_NETWORK()
            reconstruction_error = lstm_autoencoder.evaluate(post_trigger_traffic)
            IF reconstruction_error > 99th_percentile_error:
              ALERT("LSTM model detected network anomaly")