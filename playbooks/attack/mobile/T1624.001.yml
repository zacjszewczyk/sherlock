name: T1624.001: Broadcast Receivers
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify if an adversary is maintaining persistence on mobile devices by abusing Android's broadcast receiver mechanism. It focuses on detecting malicious receivers through both static and dynamic analysis. Static analysis involves inspecting the AndroidManifest.xml file for high-risk broadcast intent declarations (e.g., BOOT_COMPLETED), statistically rare receivers, and "toxic combinations" of receivers and permissions that enable malicious capabilities (e.g., receiving SMS and accessing the internet). Dynamic analysis involves monitoring runtime API calls for suspicious `registerReceiver()` activity, such as an application registering for sensitive system events that are inconsistent with its function, or exhibiting behavioral changes by registering new, previously unobserved intents.
type: technique
related:
  - TA0028: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any installed applications registering high-risk broadcast receivers that are not on an approved allowlist?
    context: This question aims to identify potentially malicious applications that use broadcast receivers to gain persistence or react to sensitive system events, like `android.intent.action.BOOT_COMPLETED`. By comparing found receivers against a watchlist of high-risk ones and excluding known-good apps from an allowlist, analysts can quickly pinpoint suspicious software that warrants further investigation.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - Corporate Unified Endpoint Management (UEM) platform
      - Static Application Security Testing (SAST) pipeline
      - Internal corporate application repository
      - Third-party application vetting sandboxes
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH application_manifests
          WHERE broadcast_receiver IN (high_risk_watchlist)
          AND application_name NOT IN (approved_allowlist)
          RETURN application_name, receiver, package_name
  - question: Are any applications using statistically rare broadcast receivers compared to the entire mobile application inventory?
    context: Adversaries may use uncommon or custom broadcast receivers to avoid signature-based detection. This question uses statistical analysis to uncover outliers. An application using a receiver that is very rare (e.g., below the 5th percentile in frequency) across the organization's entire application ecosystem is considered anomalous and requires manual review to determine its purpose and legitimacy.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - Corporate Unified Endpoint Management (UEM) platform
      - Static Application Security Testing (SAST) pipeline
      - Internal corporate application repository
      - Third-party application vetting sandboxes
    range: last 90 days
    queries:
      - pseudocode: |
          // First, calculate frequency of all receivers
          ALL_RECEIVERS = SEARCH application_manifests | EXTRACT receiver
          RECEIVER_COUNTS = COUNT ALL_RECEIVERS by receiver
          
          // Then, find apps with rare receivers
          SEARCH application_manifests
          WHERE frequency(receiver, RECEIVER_COUNTS) < 5th_percentile
          RETURN application_name, receiver, package_name
  - question: Can a machine learning model identify new or updated applications as potentially malicious based on their declared broadcast receivers and permissions?
    context: This question leverages machine learning to automate the detection of malicious patterns that might be too complex for simple rule-based searches. By training a classification model (e.g., a random forest) on the features of known benign and malicious APKs, it can predict the likelihood that a new or updated application is malicious based on its manifest features. A high probability score (e.g., > 0.8) serves as a strong signal for automated escalation to a dynamic analysis sandbox.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - Corporate Unified Endpoint Management (UEM) platform
      - Static Application Security Testing (SAST) pipeline
      - Internal corporate application repository
      - Third-party application vetting sandboxes
    range: last 90 days
    queries:
      - pseudocode: |
          INPUT new_or_updated_application_manifest
          EXTRACT features (receivers_vector, permissions_vector)
          PREDICT malice_probability with pre-trained_classification_model
          IF malice_probability > 0.8
          ALERT for_dynamic_sandbox_analysis
  - question: Are any applications dynamically registering receivers for high-risk events that are inconsistent with their stated purpose or category?
    context: This question focuses on an application's runtime behavior. An application might dynamically register a receiver for a sensitive event (e.g., `android.intent.action.NEW_OUTGOING_CALL`) that does not align with its documented function (e.g., a simple game or utility app). This mismatch between behavior and application category is a strong indicator of malicious or unwanted activity that should be investigated.
    answer_sources:
      - Mobile EDR API call logs
      - Dynamic Analysis Sandbox API Traces (JSON)
      - Android Debug Bridge (adb) logcat output
      - Endpoint fleet of corporate-managed mobile devices
      - Mobile EDR/Threat Defense management console
      - Automated dynamic application security testing (DAST) pipeline
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH api_call_logs
          WHERE function_name == "registerReceiver()"
          AND intent_filter IN (high_risk_action_list)
          AND application_category NOT IN ("Communications", "System Tools")
          ALERT with device_id, application_name, intent_filter
  - question: Have any applications started registering new, previously unseen broadcast receiver intents?
    context: This question aims to detect behavioral changes in applications over time. A legitimate application typically has a stable set of runtime behaviors. If an application suddenly registers a new type of receiver intent that it has never used before on that device or for that user, it could indicate that the app was compromised, updated with malicious code, or is exhibiting a new, un-vetted functionality. This first-seen anomalous behavior warrants an alert.
    answer_sources:
      - Mobile EDR API call logs
      - Dynamic Analysis Sandbox API Traces (JSON)
      - Android Debug Bridge (adb) logcat output
      - Endpoint fleet of corporate-managed mobile devices
      - Mobile EDR/Threat Defense management console
      - Automated dynamic application security testing (DAST) pipeline
    range: last 90 days
    queries:
      - pseudocode: |
          // Establish baseline over a 30-day rolling window
          BASELINE = SEARCH api_call_logs from 90_days_ago to 60_days_ago
          | WHERE function_name == "registerReceiver()"
          | CREATE set_of_intents per application_name
          
          // Check for new intents in the recent period
          SEARCH api_call_logs in last 24_hours
          | WHERE function_name == "registerReceiver()"
          | IF intent_filter NOT IN BASELINE[application_name]
          | ALERT for anomalous_behavior
  - question: Can an LSTM autoencoder model detect anomalous sequences of `registerReceiver()` calls on a device?
    context: This question applies advanced machine learning to detect subtle, anomalous patterns in the timing and sequence of `registerReceiver()` API calls. A Long Short-Term Memory (LSTM) autoencoder can be trained on sequences of calls from a known-benign operational period to learn what is normal. In production, new sequences that the model cannot reconstruct accurately (i.e., have a high reconstruction error) can signal sophisticated malicious activity that might be missed by other methods.
    answer_sources:
      - Mobile EDR API call logs
      - Dynamic Analysis Sandbox API Traces (JSON)
      - Android Debug Bridge (adb) logcat output
      - Endpoint fleet of corporate-managed mobile devices
      - Mobile EDR/Threat Defense management console
      - Automated dynamic application security testing (DAST) pipeline
    range: last 90 days
    queries:
      - pseudocode: |
          INPUT time_ordered_sequence_of_registerReceiver_calls
          FEED sequence into pre-trained_LSTM_autoencoder
          CALCULATE reconstruction_error
          IF reconstruction_error > 99th_percentile_threshold
          ALERT for anomalous_call_sequence
  - question: Do any application manifests contain a known 'toxic combination' of a specific broadcast receiver and a set of permissions that enable a high-impact malicious capability?
    context: This question targets known high-risk patterns where the combination of components is more dangerous than any single component. For example, the ability to receive SMS messages (`android.provider.Telephony.SMS_RECEIVED`) is not inherently malicious, but when combined with permissions to read contacts and access the internet, it creates a potent capability for data exfiltration. This query looks for these predefined, high-impact combinations.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - UEM/MDM application inventory database
      - Static Application Security Testing (SAST) platform
      - Mobile Threat Defense (MTD) management console
    range: last 90 days
    queries:
      - pseudocode: |
          DEFINE toxic_combinations_list
          SEARCH application_manifests
          FOR each combination in toxic_combinations_list
          IF manifest.receivers CONTAINS combination.receiver
          AND manifest.permissions CONTAINS ALL combination.permissions
          GENERATE critical_alert for application_name
  - question: Which applications have the highest risk scores based on the statistical rarity of their declared receiver-permission pairs?
    context: This question provides a method for risk-scoring applications based on the principle that malicious apps often combine permissions and receivers in unusual ways. By calculating a rarity score for every observed (receiver, permission) pair across the environment and then summing these scores for each application, analysts can create a ranked list. Applications in the top percentile of these risk scores exhibit the most statistically anomalous combinations and should be prioritized for manual analysis.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - UEM/MDM application inventory database
      - Static Application Security Testing (SAST) platform
      - Mobile Threat Defense (MTD) management console
    range: last 90 days
    queries:
      - pseudocode: |
          // Calculate rarity of all pairs
          ALL_PAIRS = SEARCH all_manifests | EXTRACT (receiver, permission) pairs
          PAIR_SCORES = CALCULATE -log(P(pair)) for each unique pair in ALL_PAIRS
          
          // Score each app
          FOR each application
          app_score = SUM(PAIR_SCORES) for all pairs in application.manifest
          
          // Find top-scoring apps
          FLAG applications with app_score > 95th_percentile
  - question: Can unsupervised clustering (DBSCAN) identify groups of anomalous applications based on their combined receiver and permission profiles?
    context: This question uses unsupervised machine learning to find 'islands' of strange applications without relying on predefined signatures or labels. By representing each app as a binary vector of its permissions and receivers, a clustering algorithm like DBSCAN can group similar apps. Small, dense, isolated clusters often represent niche, custom, or malicious applications that do not share characteristics with the large clusters of mainstream, legitimate software. These outlier clusters should be prioritized for investigation.
    answer_sources:
      - Parsed AndroidManifest.xml from APKs
      - UEM application inventory metadata
      - UEM/MDM application inventory database
      - Static Application Security Testing (SAST) platform
      - Mobile Threat Defense (MTD) management console
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each application
          CREATE binary_feature_vector from its receivers and permissions
          
          APPLY DBSCAN clustering algorithm to all feature_vectors
          IDENTIFY small, dense clusters (outliers)
          FLAG all applications in outlier_clusters for manual_review