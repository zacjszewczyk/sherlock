name: T1633.001: System Checks
id: 0f8c7e6a-5b12-4d3c-9a0e-7f8b9c1d2e3f
description: This playbook helps analysts investigate if adversaries are performing system checks on mobile devices to evade sandbox or analysis environments. It covers techniques like querying for known emulator artifacts (e.g., 'goldfish', 'qemu'), checking for the presence of hardware sensors without subsequent use, and altering network behavior after inspecting network interface details to confirm the device is not a virtualized analysis environment.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a mobile application process directly querying for system properties or reading files known to be associated with emulator or sandbox environments?
    context: This question aims to detect the most direct form of environment checking, where malware explicitly looks for artifacts like system properties containing 'goldfish' or 'qemu', or file paths like '/system/bin/qemu-props'. A positive match is a strong indicator of evasion, as legitimate applications rarely perform such specific checks.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Mobile EDR File Integrity Monitoring Logs
      - Mobile Application Vetting (MAV) Sandbox Reports
      - Android Logcat
      - Application sandboxing environment
      - Corporate-managed mobile devices (Android & iOS)
      - Mobile Device Management (MDM) platform
      - Mobile Application Vetting (MAV) platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MobileEDR_logs
          WHERE (api_call IN ('android.os.SystemProperties.get', 'getprop') AND api_argument CONTAINS ('goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86', 'sdk_google', 'ttVM', 'Genymotion'))
          OR (event_type = 'file_read' AND file_path = '/system/bin/qemu-props')
          OR (event_type = 'file_read' AND file_path = '/proc/cpuinfo' AND file_content CONTAINS 'QEMU Virtual CPU')

  - question: Is a mobile application querying an anomalously high number of system properties compared to its peers?
    context: Instead of looking for specific known-bad properties, this question seeks to identify suspicious behavior through volume. Evasive malware might probe a wide range of system properties to build a comprehensive device fingerprint. By comparing an app's query count against a baseline for its category, analysts can spot outliers that warrant further investigation, even if no single query is definitively malicious.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Mobile EDR File Integrity Monitoring Logs
      - Mobile Application Vetting (MAV) Sandbox Reports
      - Android Logcat
      - Application sandboxing environment
      - Corporate-managed mobile devices (Android & iOS)
      - Mobile Device Management (MDM) platform
      - Mobile Application Vetting (MAV) platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_app:
            query_count = COUNT_UNIQUE(system_property_queries in first 300s)
            baseline_98th = GET_BASELINE(app_category, percentile=98)
            IF query_count > baseline_98th:
              ALERT "Anomalous system property query volume"

  - question: Does a machine learning model, trained on multiple behavioral features, classify a new application's startup activity as evasive?
    context: This question uses a more sophisticated, multi-faceted approach. By combining various features—such as specific property checks, query volume, query timing, and query entropy—a machine learning model can detect complex patterns of evasion that simpler rules might miss. A high 'evasion_probability' score from the model provides a robust, data-driven signal for an analyst to investigate a potentially malicious application.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Mobile EDR File Integrity Monitoring Logs
      - Mobile Application Vetting (MAV) Sandbox Reports
      - Android Logcat
      - Application sandboxing environment
      - Corporate-managed mobile devices (Android & iOS)
      - Mobile Device Management (MDM) platform
      - Mobile Application Vetting (MAV) platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_app:
            features = EXTRACT_FEATURES(
              known_property_flags,
              distinct_property_count,
              query_prefix_entropy,
              time_to_first_query,
              queries_per_second
            )
            evasion_score = PREDICT(xgboost_model, features)
            IF evasion_score > threshold:
              ALERT "High ML-based evasion probability"

  - question: Is a mobile application querying the list of available hardware sensors without subsequently registering to receive data from any of them?
    context: This question targets a common sandbox evasion technique where malware checks for the presence of physical sensors (like accelerometers or gyroscopes) to verify it's on a real device. Emulators often lack a full suite of sensors. The key indicator of malicious intent is querying for the sensor list but then failing to use any sensors, as a legitimate app would register a listener to get sensor data.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - MAV Sandbox API Call Trace Logs
      - Corporate-managed mobile devices
      - Bring-Your-Own-Device (BYOD) fleet with security agents
      - Application sandboxing environment
      - MDM/UEM platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MobileEDR_logs
          TRIGGER ON (api_call = 'getSensorList' OR api_call CONTAINS 'is...Available')
          CORRELATE by process_id over 90s
          ALERT IF NO (api_call = 'registerListener' OR api_call STARTSWITH 'start...Updates')
          EXCEPT allowlisted_apps

  - question: Does a mobile application exhibit a statistically anomalous ratio of sensor list queries to actual sensor data usage?
    context: This provides a quantitative method to identify the behavior from the previous question. By calculating a "Dangling Sensor Query Ratio," analysts can move beyond a simple binary check and identify applications that are outliers compared to their peers. A high ratio suggests the app is disproportionately checking for sensors compared to its use of them, which is a strong statistical signal of evasive behavior.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - MAV Sandbox API Call Trace Logs
      - Corporate-managed mobile devices
      - Bring-Your-Own-Device (BYOD) fleet with security agents
      - Application sandboxing environment
      - MDM/UEM platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each app in first 5 mins:
            query_count = COUNT(sensor_list_queries)
            registration_count = COUNT(sensor_listener_registrations)
            ratio = query_count / (registration_count + 1)
            baseline_mean, baseline_stddev = GET_BASELINE(app_category)
            IF ratio > (baseline_mean + 3 * baseline_stddev):
              ALERT "Anomalous dangling sensor query ratio"

  - question: Does an application's sensor interaction pattern fall into an anomalous cluster or get classified as noise by an unsupervised learning model?
    context: This question applies unsupervised machine learning to discover novel or unusual patterns of sensor interaction without relying on predefined rules. By clustering applications based on features like the number of sensor types queried, listener registrations, and permission requests, analysts can automatically group "normal" applications together. Any app that falls into a small, distinct cluster or is labeled as an outlier (noise) by the algorithm is highly suspicious and merits investigation for evasive sensor checking.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - MAV Sandbox API Call Trace Logs
      - Corporate-managed mobile devices
      - Bring-Your-Own-Device (BYOD) fleet with security agents
      - Application sandboxing environment
      - MDM/UEM platform logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR all apps:
            features = EXTRACT_FEATURES(
              distinct_sensor_types_queried,
              listener_registration_count,
              location_permission_mismatch_flag,
              dangling_sensor_query_ratio
            )
          clusters = DBSCAN(features)
          ALERT ON apps in small_clusters OR labeled_as_noise

  - question: After querying network interface details, did the application's network traffic pivot to encrypted DNS (DoH/DoT) using a TLS fingerprint (JA3) associated with known malware?
    context: This question seeks to identify a sophisticated evasion tactic: changing communication channels after a system check. The trigger is an app checking its network environment (e.g., MAC address), then immediately switching to a covert channel like DNS-over-HTTPS. The correlation with a known malicious JA3 hash provides a very high-fidelity alert, strongly suggesting the application has confirmed it is not in a sandbox and is now activating its C2 communication.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway)
      - DNS resolvers
      - Core network switches generating NetFlow/IPFIX
      - Corporate-managed mobile devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH MobileEDR_logs for network_interface_query
          CORRELATE by device_ip over 5 mins with Zeek_logs
          ALERT IF (
            COUNT(Zeek_dns_logs) = 0 AND
            COUNT(Zeek_ssl_logs to DoH_resolver_SNI) > 0 AND
            ssl_log_ja3 IN malware_ja3_threat_feed
          )

  - question: Following a system check, did the diversity (entropy) of a device's network connections or DNS queries drop dramatically?
    context: This question looks for a behavioral change in network traffic that indicates a shift from normal, diverse activity to highly focused, channelized communication. A significant drop in the entropy of destination IPs or DNS names suggests the application has stopped its exploratory/benign traffic and is now communicating exclusively with its C2 server. This change, especially after a system check, is a strong indicator of malicious activity.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway)
      - DNS resolvers
      - Core network switches generating NetFlow/IPFIX
      - Corporate-managed mobile devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each device_ip:
            current_entropy = CALCULATE_ENTROPY(dest_ips, dns_queries) in last 5 mins
            rolling_avg_entropy = GET_ROLLING_AVERAGE(entropy) over last 1 hour
            IF current_entropy < (0.2 * rolling_avg_entropy):
              ALERT "Sudden drop in network traffic entropy"

  - question: Does a time-series anomaly detection model flag a device's network behavior as a significant deviation from its established baseline, especially after a system check event?
    context: This question employs an advanced machine learning model (LSTM autoencoder) to learn the normal "rhythm" of a device's network traffic. The model is trained on multiple metrics like byte counts, connection diversity, and protocol ratios. When the device's current traffic pattern no longer matches what the model expects (resulting in a high reconstruction error), it signals a major behavioral shift. Correlating this anomaly with a preceding on-device system check provides a powerful method for detecting post-evasion C2 activity.
    answer_sources:
      - Mobile EDR API Monitoring Logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway)
      - DNS resolvers
      - Core network switches generating NetFlow/IPFIX
      - Corporate-managed mobile devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each device_ip:
            timeseries_features = AGGREGATE_PER_MINUTE(
              total_bytes, unique_dest_ips, unique_uids, ja3_entropy, udp_tcp_ratio
            )
            reconstruction_error = PREDICT(lstm_autoencoder, timeseries_features)
            IF reconstruction_error > threshold:
              ALERT "Time-series anomaly in network behavior"