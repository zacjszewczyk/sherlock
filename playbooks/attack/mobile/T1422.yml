name: "T1422: System Network Configuration Discovery"
id: "8e7c6f5a-4b3c-4d2e-9a1b-0f8e7d6c5b4a"
description: "This playbook helps determine if an adversary is discovering the network configuration of corporate mobile devices. It focuses on detecting malicious reconnaissance activity on Android devices by monitoring for suspicious permission grants, anomalous API call frequencies, and unusual network behavior following new application installations. Indicators include non-standard applications gaining 'READ_PRIVILEGED_PHONE_STATE' permissions, high-frequency bursts of calls to the 'java.net.NetworkInterface' API, and post-installation connections to rare or high-entropy domains, which could signify data exfiltration or command-and-control communication."
type: "technique"
related: "TA0032: Discovery"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a non-authorized application been granted the 'READ_PRIVILEGED_PHONE_STATE' permission?"
    context: "The 'READ_PRIVILEGED_PHONE_STATE' permission provides access to sensitive device identifiers and network state information. An unauthorized application requesting and receiving this permission is a strong indicator of malicious intent, likely to gather device and network information for reconnaissance before further action. This question aims to detect this initial breach of policy by comparing any application granted this permission against a pre-defined allow list."
    answer_sources:
      - "Mobile Threat Defense (MTD) Application Scan Logs"
      - "Mobile Device Management (MDM) Policy Compliance Logs"
      - "Zeek conn.log"
      - "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points and VPN concentrators"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH MDM/MTD logs for event='READ_PRIVILEGED_PHONE_STATE' grant | FILTER package_name NOT IN allow_list | ALERT"
  - question: "Following a suspicious permission grant, did the device make network connections to rare or previously unseen destinations?"
    context: "After gaining the capability to discover network information, an adversary's next logical step is to exfiltrate that data or establish a command-and-control (C2) channel. This question investigates the network traffic from a device immediately after a suspicious permission grant. Connections to destinations that are statistically rare or new across the entire mobile fleet are highly suspect and may represent exfiltration or C2 activity."
    answer_sources:
      - "Mobile Threat Defense (MTD) Application Scan Logs"
      - "Mobile Device Management (MDM) Policy Compliance Logs"
      - "Zeek conn.log"
      - "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points and VPN concentrators"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH alerts for non-allowed permission grants | FOREACH alert | SEARCH Zeek conn.log where src_ip=alert.device_ip and time within +/- 15 mins of alert.time | CALCULATE prevalence of dest_ip across all mobile devices in last 30 days | FILTER prevalence < 1% | ALERT"
  - question: "Does an application requesting 'READ_PRIVILEGED_PHONE_STATE' have a high-risk profile based on its metadata and characteristics?"
    context: "This question moves beyond simple allow/deny lists to a proactive, risk-based assessment of applications. By training a machine learning model on application metadata (e.g., developer reputation, install source, requested permissions), we can score the risk of any new application requesting sensitive permissions. This helps identify potentially unwanted or novel malicious applications that are not yet on any threat intelligence feed, enabling earlier detection."
    answer_sources:
      - "Mobile Threat Defense (MTD) Application Scan Logs"
      - "Mobile Device Management (MDM) Policy Compliance Logs"
      - "Zeek conn.log"
      - "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points and VPN concentrators"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "ON new 'READ_PRIVILEGED_PHONE_STATE' request | EXTRACT app features (category, developer, ratings, etc.) | INPUT features into classification model | IF model_risk_score > 0.85 | ESCALATE for analysis"
  - question: "Is a known malicious application making calls to the 'java.net.NetworkInterface' API?"
    context: "The 'java.net.NetworkInterface' API is a primary method for applications on Android to enumerate network interfaces and discover their configurations (IP addresses, MAC addresses, etc.). When an application known to be malicious (based on threat intelligence feeds) is observed making these calls, it is a high-confidence indicator of active network reconnaissance on the compromised device."
    answer_sources:
      - "Mobile EDR/MTD API Call Monitoring Logs"
      - "Zeek conn.log"
      - "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH MTD API logs for api_call='java.net.NetworkInterface' | JOIN app_package_name with threat_intel_feed | IF match_found | ALERT"
  - question: "Has any application exhibited an anomalous spike in 'java.net.NetworkInterface' API calls compared to its own historical behavior?"
    context: "This question seeks to identify behavioral anomalies that could indicate a compromised or malicious application, even if it is not on a known-bad list. While some legitimate applications may use the 'java.net.NetworkInterface' API, a sudden, high-frequency burst of calls is abnormal. By baselining the typical call frequency for each application, we can detect significant deviations that suggest a hidden malicious function has been activated for network discovery."
    answer_sources:
      - "Mobile EDR/MTD API Call Monitoring Logs"
      - "Zeek conn.log"
      - "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH MTD API logs for api_call='java.net.NetworkInterface' | AGGREGATE count by app, device, 1_minute_interval | COMPARE count to 30-day rolling baseline (mean, stddev) for that app | IF count > (mean + 3*stddev) | ALERT"
  - question: "For critical applications or users, has the pattern of 'java.net.NetworkInterface' API calls deviated significantly from its normal, learned temporal behavior?"
    context: "This question applies advanced anomaly detection for high-value assets. A time-series model, such as an LSTM autoencoder, can learn the complex, time-dependent patterns of normal API call behavior, including regular fluctuations. A high reconstruction error from the model indicates that the current activity does not fit the learned normal pattern. This method can detect sophisticated or subtle anomalies that simpler statistical thresholds might miss, providing a higher-fidelity signal for critical assets."
    answer_sources:
      - "Mobile EDR/MTD API Call Monitoring Logs"
      - "Zeek conn.log"
      - "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "STREAM 'java.net.NetworkInterface' API call frequency data into LSTM autoencoder model | CALCULATE reconstruction_error | IF reconstruction_error > dynamic_threshold | ALERT"
  - question: "Shortly after a new application was installed, did the device connect to a destination listed on a threat intelligence feed?"
    context: "Malicious applications frequently 'phone home' to a command-and-control (C2) server immediately after installation to receive instructions or exfiltrate initial data. This question establishes a direct, time-based correlation between a new application installation and a network connection to a known-malicious destination. A match provides a high-confidence indicator of a device compromise."
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "MDM/MTD Application Install Logs"
      - "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH MDM/MTD install logs for new app installs | FOREACH install | SEARCH network logs where src_ip=install.device_ip and time within 5 mins of install.time | JOIN dest_ip/domain with threat_intel_feed | IF match_found | ALERT"
  - question: "Following a new app install, did the device connect to a destination with a high-entropy domain name and a low-prevalence IP address?"
    context: "This question hunts for signs of algorithmically generated C2 infrastructure. High-entropy (random-looking) domain names are a hallmark of Domain Generation Algorithms (DGAs), used by malware to evade blacklists. Low-prevalence IP addresses are destinations rarely, if ever, visited by other devices in the organization. The combination of both indicators in a connection made shortly after a new app installation is highly suspicious and points to novel C2 communication."
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "MDM/MTD Application Install Logs"
      - "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "SEARCH MDM/MTD install logs | FOREACH install | SEARCH DNS/network logs within 5 mins | CALCULATE entropy of domain_name and prevalence of dest_ip | IF domain_entropy > 3.5 AND ip_prevalence < 1% | ALERT"
  - question: "Are there any network connections from mobile devices that are statistical outliers compared to the fleet's normal network behavior patterns?"
    context: "This question uses unsupervised machine learning to find anomalous network activity without relying on pre-defined signatures or rules. By clustering the vast majority of 'normal' network connections based on features like port, protocol, and data volume, any connection that does not fit into a cluster is flagged as an outlier. These outliers represent anomalous network patterns that could indicate novel C2 channels or data exfiltration techniques that other methods would miss."
    answer_sources:
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "MDM/MTD Application Install Logs"
      - "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers"
    range: "last 90 days"
    queries:
      - search: "pseudocode"
        query: "PROCESS network logs for mobile fleet | CREATE feature vectors (port, proto, duration, bytes) | APPLY DBSCAN clustering algorithm | IDENTIFY outlier connections (classified as noise) | ALERT on outliers"