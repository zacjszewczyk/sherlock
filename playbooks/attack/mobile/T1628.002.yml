name: 'T1628.002: User Evasion'
id: '1e9d1a3b-4c6e-4b8a-9f0e-2d3c1a5b7d9c'
description: |
  This playbook helps answer the question: Is an adversary attempting to evade user detection on corporate-managed mobile devices? It focuses on identifying malware that alters its behavior based on physical device sensors to remain hidden. Key indicators include applications that are not on a pre-defined allowlist accessing motion or proximity sensors and then changing their network activity. For example, an application might stop C2-like network beaconing when the device's accelerometer or gyroscope detects movement, suggesting it is hiding from an active user. Another key indicator is an application that dramatically increases its network data transfer volume only when the proximity sensor is covered (e.g., the phone is in a pocket or face down), suggesting it is waiting for an opportune moment to exfiltrate data. The playbook provides methods to detect these patterns through stateful correlation, statistical analysis, and machine learning.
type: 'technique'
related:
  - 'TA0030: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: 'none'
questions:
  - question: "Is a mobile application ceasing C2-like beaconing immediately after device motion is detected?"
    context: |
      This question aims to detect malware that hides its command-and-control (C2) communication when it senses the user might be actively using the device. The logic is that an application's network activity should not suddenly stop just because the device is moved. A stateful correlation rule identifies this pattern: 1) periodic, low-volume network traffic (beaconing) while the device is at rest, followed by 2) motion sensor access, and then 3) a significant drop in that network traffic. This is a strong indicator of user evasion.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          CREATE stateful rule.
          TRIGGER on MTD event for accelerometer/gyroscope access from non-allowlisted app.
          IF triggered, QUERY Zeek conn.log for device IP in previous 10 minutes.
          IF periodic, low-volume connections are found, QUERY Zeek conn.log for next 5+ minutes.
          IF traffic has ceased, GENERATE high-severity alert.
  - question: "Is there a strong negative correlation between a mobile application's network activity and the device's motion state?"
    context: |
      This question seeks to identify evasive behavior over a longer period. By continuously calculating the Pearson correlation coefficient between device motion (from MTD logs) and an application's network connection count (from Zeek logs), we can statistically prove that the application intentionally reduces its network footprint when the user is active. A strong negative correlation (e.g., $$ r < -0.8 $$) is a significant anomaly, suggesting the app is designed to operate stealthily. The suspicion is increased if the network traffic during 'at rest' periods has characteristics of C2 traffic, like low destination entropy.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          FOR each non-allowlisted app:
          CALCULATE rolling 24-hour Pearson correlation ('r') between MTD motion series (1=motion, 0=rest) and Zeek connection count series.
          IF $$ r < -0.8 $$, GENERATE medium-severity alert.
          ELEVATE risk if destination IP entropy is low during rest periods.
  - question: "Can a machine learning model predict a device's motion state solely based on an application's network traffic patterns?"
    context: |
      This question uses a machine learning approach to find a subtle but powerful anomaly. An application's network traffic (like connection rate or data volume) should not be a reliable predictor of whether the device is moving or at rest. If a model (like a Random Forest classifier) can achieve high accuracy in predicting motion using only network features, it implies the application is deliberately altering its network behavior based on the device's physical state. This provides strong evidence of sophisticated user evasion logic embedded within the application.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          FOR each non-allowlisted app:
          TRAIN a classifier (e.g., Random Forest) to predict motion state ('at rest' vs 'in motion') using network features from Zeek logs.
          IF model accuracy > 85%, FLAG application as highly suspicious.
  - question: "Is a non-standard mobile application initiating high-volume data transfers only when the proximity sensor is covered?"
    context: |
      This question investigates malware that waits for the device to be inactive (e.g., in a pocket, face down) to exfiltrate data. The trigger is an application, not on an allowlist for proximity sensor access (like the Phone app), accessing the sensor. If the sensor state becomes 'covered' and the application's data output suddenly spikes far beyond its normal background usage, it's a red flag. The case is strengthened if this anomalous traffic stops abruptly as soon as the sensor becomes 'uncovered', indicating a direct link between the evasive condition and the malicious activity.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          CREATE rule.
          TRIGGER when non-allowlisted app accesses proximity sensor with state 'covered'.
          IF triggered AND outbound data volume > (5 * 30-day baseline), GENERATE medium-severity alert.
          ESCALATE to high if traffic stops within 10 seconds of state changing to 'uncovered'.
  - question: "Does an application's network data transfer rate show a statistically significant increase specifically when the proximity sensor is covered?"
    context: |
      This question uses statistical analysis (Z-score) to detect abnormal network behavior linked to the proximity sensor. By establishing a baseline of normal network activity when the device is in use (sensor 'uncovered'), we can identify significant deviations from this norm. If an application's data transfer rate consistently shows a high Z-score (e.g., $$ Z > 3 $$) only during periods when the sensor is 'covered', it provides a quantifiable measure of suspicion that the app is using this state as a trigger for covert data transmission.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          FOR each app:
          ESTABLISH baseline network rate during 'uncovered' states.
          CONTINUOUSLY monitor 'covered' states.
          FOR each 5-min interval in 'covered' state, CALCULATE Z-score of data rate.
          IF $$ Z > 3 $$ for >2 consecutive intervals, GENERATE alert.
  - question: "Is there a logical contradiction where a machine learning model predicts the proximity sensor is 'covered' based on network traffic, while sensor logs report it is 'uncovered'?"
    context: |
      This advanced question seeks to find a logical inconsistency created by evasive malware. A logistic regression model is trained to associate specific network patterns (like high data throughput) with the 'covered' proximity sensor state. During monitoring, if the model predicts a 'covered' state with high confidence because it sees a surge in network traffic, but the actual sensor data from MTD logs says the state is 'uncovered', it signals a major anomaly. The application is behaving as if the screen is obscured, but it isn't, which is highly indicative of malicious or evasive behavior that is malfunctioning or being tested.
    answer_sources: |
      Mobile Threat Defense (MTD) sensor access logs, Mobile Device Management (MDM) application inventory logs, Zeek conn.log, Zeek dns.log. Data is sourced from corporate-managed mobile devices with MTD/MDM agents, network taps at corporate Wi-Fi/VPN points with Zeek sensors, MDM servers, and DNS servers, all aggregated in a central SIEM or data lake.
    range: 'last 90 days'
    queries:
      - tech: 'pseudocode'
        query: |
          TRAIN logistic regression model to predict proximity state ('covered'/'uncovered') from network features.
          DEPLOY model.
          IF model predicts 'covered' with probability > 0.9 AND MTD log shows actual state is 'uncovered', GENERATE high-confidence alert.