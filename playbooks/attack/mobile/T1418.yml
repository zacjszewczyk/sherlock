name: T1418: Software Discovery
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary is attempting to discover installed applications on managed mobile devices. This is often done by leveraging tools like the Android Debug Bridge (adb) to query package lists, exfiltrating data in small chunks to avoid detection, or by installing malicious applications that request permissions to query other installed packages. Indicators include specific adb command-line usage, anomalous network connections from mobile devices, and applications requesting invasive permissions like 'android.permission.QUERY_ALL_PACKAGES' or using private iOS APIs like 'LSApplicationWorkspace'.
type: technique
related:
- TA0032: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any unauthorized hosts executed the 'adb shell pm list packages' command to enumerate installed mobile applications?
  context: This question seeks to identify the specific command used to list all applications on a connected Android device via the Android Debug Bridge (adb). While developers may use this, its execution from a host not on an approved list of developer workstations is highly suspicious. It suggests a compromised host is being used to perform reconnaissance on mobile devices.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH process_creation_events
      WHERE process_name ENDS WITH 'adb.exe'
      AND command_line CONTAINS 'shell' AND command_line CONTAINS 'pm list packages'
      CORRELATE source_host with authorized_developer_asset_list
      RETURN hosts NOT IN authorized_developer_asset_list
- question: Are any users executing 'adb.exe' commands with anomalous frequency or complexity?
  context: This question aims to detect deviations from a user's normal behavior. An adversary might repeatedly run discovery commands, causing a frequency spike, or use obfuscated commands to evade simple signatures. By baselining individual user activity and analyzing command-line entropy, we can identify outliers that suggest malicious activity, even from authorized users.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities.
  range: last 30 days
  queries:
  - search_technology: pseudocode
    query: |
      // Frequency Anomaly
      BASELINE adb_execution_frequency per user over 30 days
      SEARCH process_creation_events for 'adb.exe' AND 'pm list packages'
      ALERT IF daily_count > (baseline_avg + 3 * baseline_std_dev)

      // Entropy Anomaly
      BASELINE command_line_entropy for 'adb.exe' per user
      SEARCH process_creation_events for 'adb.exe'
      CALCULATE shannon_entropy of command_line
      ALERT IF entropy > 98th_percentile_for_user
- question: Does 'adb.exe' process execution show characteristics of malicious activity based on a machine learning model?
  context: This question uses a supervised machine learning model to proactively identify malicious 'adb.exe' usage that might not be caught by simple rules. By training a model on features like command-line properties, parent process, and time of day, we can assign a risk score to each execution and flag suspicious events that fit a learned pattern of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR EACH 'adb.exe' process_creation_event
      EXTRACT features (command_length, command_entropy, keywords, parent_process, time_of_day)
      INPUT features into trained classification model
      ALERT IF malicious_probability_score > 0.90
- question: Are mobile devices sending application list data via HTTP POST requests or long DNS queries to suspicious domains?
  context: This question looks for signs of data exfiltration containing discovered software lists. Adversaries may encode the list and send it via an HTTP POST request or as a long DNS query. Alerting on moderately sized POST requests or unusually long DNS queries to untrusted, new, or low-reputation domains can help catch this exfiltration technique.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      // HTTP Exfiltration
      SEARCH http_logs from mobile_device_ip_range
      WHERE http_method = 'POST' AND request_body_len BETWEEN 1024 AND 51200
      AND (destination_host IN threat_intel_feed OR destination_domain_age < 30_days)
      ALERT

      // DNS Exfiltration
      SEARCH dns_logs from mobile_device_ip_range
      WHERE query_length > 100 AND destination_domain_reputation = 'low'
      ALERT
- question' Are mobile devices exhibiting anomalous outbound data transfers?
  context: This question focuses on identifying network connections that deviate from a device's normal behavior. A sudden spike in outbound data ('orig_bytes') that is significantly larger than the established baseline for a device, especially over a short duration and to an uncommon destination, can indicate the exfiltration of collected data like an application list.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers.
  range: last 30 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR EACH mobile_device_ip
      CALCULATE 30-day baseline of 'orig_bytes'
      SEARCH conn_logs
      WHERE source_ip is mobile_device_ip
      ALERT IF orig_bytes > 99th_percentile_for_device
      AND duration < 10_seconds
      AND destination_ip_prevalence < 5_other_hosts
- question: Are mobile devices making network connections that are anomalous in structure or directed to algorithmically generated domains (DGAs)?
  context: This advanced question uses a two-stage approach to find sophisticated threats. First, it uses unsupervised clustering to find network sessions that are structurally unusual (e.g., odd data ratios, duration). Second, for those anomalous sessions, it checks if the destination domain is likely a DGA, a common technique for malware command and control. This helps find threats that might otherwise blend in.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      // Stage 1: Anomaly Detection
      CLUSTER mobile device conn_logs using features (orig_bytes, resp_bytes, duration, proto)
      IDENTIFY outlier sessions (noise points or small clusters)

      // Stage 2: DGA Detection
      FOR EACH outlier_session
      EXTRACT destination_domain
      INPUT domain into DGA_detection_model
      ALERT IF dga_score > 0.85
- question: Has a newly installed or updated mobile application been flagged for requesting permissions to query all installed packages?
  context: This question focuses on a high-fidelity indicator of software discovery. An application requesting 'android.permission.QUERY_ALL_PACKAGES' on Android or using the private 'LSApplicationWorkspace' API on iOS has the explicit ability to see other installed apps. This is rarely required for legitimate functionality, and any app with this capability that is not on a pre-approved allowlist should be treated as suspicious.
  answer_sources:
  - MDM/MTD Application Inventory Logs
  - MDM/MTD Security Alert Logs
  - Corporate MDM/MTD platform and Application Vetting Systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH mdm_logs for app_install or app_update events
      WHERE (permission_requested = 'android.permission.QUERY_ALL_PACKAGES' OR api_usage_detected = 'LSApplicationWorkspace')
      AND app_name NOT IN allowlist
      TRIGGER high_severity_alert
- question: Has a newly installed mobile application been assigned an unusually high permission risk score?
  context: This question seeks to identify risky applications by quantifying the danger of their requested permissions. Common permissions are low risk, while rare ones are high risk. By calculating a risk score for each app based on the rarity of its permissions, we can flag new applications that fall into the top percentile of risk, indicating they are requesting an unusual and potentially dangerous set of permissions compared to the rest of the fleet.
  answer_sources:
  - MDM/MTD Application Inventory Logs
  - MDM/MTD Security Alert Logs
  - Corporate MDM/MTD platform and Application Vetting Systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      CALCULATE prevalence_score for each permission in the environment
      CALCULATE risk_weight for each permission (inversely proportional to prevalence)
      FOR EACH new_app_install
      CALCULATE total_app_risk_score by summing its permission_risk_weights
      ALERT IF total_app_risk_score > 99th_percentile_of_all_apps
- question: Does a newly installed mobile application have a high probability of being malicious based on a machine learning model?
  context: This question leverages a predictive model to automate the detection of malicious applications. The model is trained on known good and bad apps, using features like requested permissions, install source, and developer reputation. This allows for the automatic quarantining of newly installed apps that the model predicts are highly likely to be malicious, preventing them from executing.
  answer_sources:
  - MDM/MTD Application Inventory Logs
  - MDM/MTD Security Alert Logs
  - Corporate MDM/MTD platform and Application Vetting Systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR EACH new_app_install
      EXTRACT features (permissions_vector, install_source, developer_reputation, app_age, query_all_packages_flag)
      INPUT features into trained classification model
      IF predicted_malicious_probability > 0.95
      THEN QUARANTINE application AND ALERT security_team