name: T1617: Hooking
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is using hooking frameworks (e.g., Xposed, Magisk, Cydia Substrate) to evade defenses on corporate mobile devices. Such frameworks can intercept and modify application behavior, bypass security controls, and steal sensitive data. Evidence of hooking can be found through direct indicators like the presence of known framework files or package names, or through behavioral anomalies like repeated device integrity check failures or suspicious network traffic patterns to repositories hosting these tools.
type: technique
related:
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there known indicators of mobile hooking or rooting frameworks present on any corporate mobile devices?
    context: This question seeks to identify direct, high-confidence evidence of compromise. By maintaining and searching for a watchlist of known hooking/rooting framework artifacts (specific file paths, package names) and associated network destinations (domains for downloading tools/modules), an analyst can quickly detect the presence of these tools on managed mobile devices. A positive match is a strong signal that a device's security has been intentionally undermined.
    answer_sources:
      - MDM Application Inventory Logs
      - Zeek http.log
      - Zeek dns.log
      - Relevant Assets: Corporate-managed mobile devices (iOS, Android), DNS resolvers, web proxies, and the Mobile Device Management (MDM) log aggregation platform.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Search MDM logs for known hooking/rooting application artifacts
          SEARCH MDM_Application_Inventory_Logs
          WHERE package_name IN (watchlist) OR file_path IN (watchlist)
          GROUP BY device_id, package_name, file_path
      - technology: pseudocode
        query: |
          // Search network logs for connections to known hooking/rooting repositories
          SEARCH Zeek_dns_logs OR Zeek_http_logs
          WHERE query IN (domain_watchlist) OR host_header IN (domain_watchlist)
          GROUP BY source_ip, query, host_header
  - question: Are any mobile devices failing device integrity checks at a statistically unusual rate?
    context: This question focuses on identifying behavioral anomalies that suggest security tampering. Mobile platforms have built-in attestation services (e.g., SafetyNet, Knox Attestation) that check for signs of rooting or system modification. While occasional failures can occur, a device that repeatedly fails these checks at a rate significantly higher than its peers is highly suspect. This method can detect novel or unknown hooking frameworks that are not on a static watchlist by focusing on their effect on the device's integrity.
    answer_sources:
      - MDM Device Integrity Scan Logs
      - Relevant Assets: Corporate-managed mobile devices (iOS, Android) and the Mobile Device Management (MDM) log aggregation platform.
    range: Last 24 hours for failure counts; Last 30 days for baseline calculation
    queries:
      - technology: pseudocode
        query: |
          // Establish a baseline of normal failure rates
          SEARCH MDM_Device_Integrity_Scan_Logs (last 30 days)
          WHERE check_result = 'failed'
          COUNT by device_id, day
          CALCULATE 95th_percentile, 99th_percentile of daily_counts as fleet_baseline
      - technology: pseudocode
        query: |
          // Check for devices exceeding the baseline
          SEARCH MDM_Device_Integrity_Scan_Logs (last 24 hours)
          WHERE check_result = 'failed'
          COUNT by device_id
          ALERT if count > fleet_baseline.95th_percentile
  - question: Do any mobile devices exhibit a combination of anomalous behaviors across multiple data sources that suggest potential compromise?
    context: This question uses a more sophisticated, multi-faceted approach to detect tampering. It aims to identify devices that may not have a single high-confidence indicator but show a pattern of suspicious, low-confidence behaviors when viewed holistically. By combining features like developer mode being enabled, installation of non-market apps, integrity check failures, and unusual network patterns (e.g., high DNS query entropy), an anomaly detection model can flag devices that deviate from normal behavior, indicating a potential compromise that might otherwise be missed.
    answer_sources:
      - MDM Application Inventory Logs
      - MDM Device Integrity Scan Logs
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Relevant Assets: Corporate-managed mobile devices (iOS, Android), DNS resolvers, web proxies, and the Mobile Device Management (MDM) log aggregation platform.
    range: Last 24 hours for daily scoring; Last 30 days for model training/retraining
    queries:
      - technology: pseudocode
        query: |
          // Extract features for each device over the last 24 hours
          FOR each device_id:
            feature1 = GET developer_mode_status FROM MDM_logs
            feature2 = COUNT non_market_apps FROM MDM_logs
            feature3 = COUNT integrity_check_failures FROM MDM_logs
            feature4 = CALCULATE shannon_entropy of DNS_queries FROM Zeek_logs
            feature5 = CALCULATE outbound_inbound_ratio FROM Zeek_logs
      - technology: pseudocode
        query: |
          // Score devices using a pre-trained model and flag outliers
          APPLY anomaly_detection_model (e.g., Isolation Forest) to feature_set
          IDENTIFY devices with anomaly_score in top 1%
          FLAG for investigation