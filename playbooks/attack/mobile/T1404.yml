name: T1404: Exploitation for Privilege Escalation
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps determine if an adversary has successfully elevated privileges on a mobile device by exploiting a software vulnerability. It focuses on detecting indicators such as a device's integrity status changing (jailbroken/rooted), the installation of known malicious applications, anomalous system-level events like unexpected process spawning or API calls, and unauthorized changes to security configurations like enabling developer mode or installing untrusted root certificates.
type: technique
related:
  - TA0029: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a device's integrity status recently changed, indicating a potential jailbreak or rooting event?
    context: This question aims to detect the most direct evidence of privilege escalation on a mobile device. A change in the `isJailbroken`, `isRooted`, or `complianceStatus` fields within MDM/UEM logs is a high-fidelity indicator that the device's security controls have been bypassed, often as a result of a successful exploit. Alerting on this change in real-time is crucial for rapid incident response [1].
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers
      - cloud management console
      - managed mobile devices (corporate and BYOD)
      - enterprise network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: SEARCH MDM/UEM logs WHERE (isJailbroken=true OR isRooted=true OR (complianceStatus='non-compliant' AND reason='integrity failure')).
  - question: Did the compromised device exhibit unusual network activity, such as connections to rare ports or new ASNs, prior to the integrity failure?
    context: This question seeks to identify precursor activities that might be related to the exploit delivery or post-exploitation C2 setup. By baselining a device's normal network behavior, we can spot anomalous connections that, while not malicious on their own, become highly suspicious when they precede a known compromise. This helps in understanding the attack chain [1].
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers
      - cloud management console
      - managed mobile devices (corporate and BYOD)
      - enterprise network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: FOR each alerted_device, SEARCH network_logs (24h before alert). CALCULATE destination_port_rarity and ASN_rarity against 30-day baseline. FLAG connections with low port frequency and new ASN.
  - question: Can machine learning models identify specific network connections preceding the compromise as likely exploit delivery or C2 channels?
    context: This question uses advanced anomaly detection to pinpoint the exact network sessions responsible for the compromise. By feeding features from suspicious connections into an Isolation Forest model, we can assign an anomaly score to each session. High-scoring sessions occurring shortly before the root/jailbreak detection are strong candidates for the initial attack vector, providing critical forensic data [1].
    answer_sources:
      - MDM/UEM compliance logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/UEM management servers
      - cloud management console
      - managed mobile devices (corporate and BYOD)
      - enterprise network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: FOR each flagged_connection, EXTRACT features (duration, bytes, protocol, JA3/JA3S). APPLY Isolation Forest model. FLAG connections with high anomaly scores within 60 minutes of compromise.
  - question: Has a known malicious application been installed on a mobile device?
    context: This question focuses on detecting privilege escalation attempts that use malicious applications. By comparing application hashes, package names, and signing certificates from MDM/MTP logs against a threat intelligence feed, we can identify the installation of known malicious tools or exploits. This is a direct, indicator-based detection method.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents
      - MDM/UEM management console
      - integrated threat intelligence platforms
      - network egress points
      - corporate Wi-Fi infrastructure
    range: last 90 days
    queries:
      - pseudocode: SEARCH app_install_logs. CROSS-REFERENCE app_hash, package_name, certificate against threat_intel_db. ALERT on match.
  - question: Did the device exhibit anomalous DNS activity, such as high-entropy domain queries or an unusual number of NXDOMAIN responses, before the malicious app was installed?
    context: This question looks for network indicators of compromise that often precede or accompany malicious application activity. High-entropy FQDNs can indicate the use of Domain Generation Algorithms (DGAs) for C2 communication, while a spike in NXDOMAIN responses can be a sign of beaconing activity. Identifying these patterns helps confirm the malicious nature of the application and understand its communication methods.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents
      - MDM/UEM management console
      - integrated threat intelligence platforms
      - network egress points
      - corporate Wi-Fi infrastructure
    range: last 90 days
    queries:
      - pseudocode: FOR each alerted_device, ANALYZE DNS_logs (24h before install). CALCULATE FQDN entropy and NXDOMAIN ratio. FLAG high entropy or high NXDOMAIN ratio compared to baseline.
  - question: Can machine learning identify the specific network session responsible for delivering the malicious application?
    context: This question aims to pinpoint the exploit delivery vector by classifying network download sessions. Using a Random Forest model trained on features like User-Agent strings, JA3/JA3S hashes, and URL characteristics, we can distinguish between benign and malicious downloads. A session classified as 'malicious' that precedes the app installation is a strong candidate for the initial point of compromise.
    answer_sources:
      - MDM/UEM application inventory logs
      - Mobile Threat Protection (MTP) agent logs
      - Zeek http.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile devices with MTP agents
      - MDM/UEM management console
      - integrated threat intelligence platforms
      - network egress points
      - corporate Wi-Fi infrastructure
    range: last 90 days
    queries:
      - pseudocode: FOR each download_session, EXTRACT features (User-Agent, JA3/JA3S, URL chars, etc.). APPLY Random Forest model. FLAG sessions classified as malicious.
  - question: Has a non-system application been observed spawning a shell process or modifying a critical system file?
    context: This question targets blatant signs of post-exploitation activity. A user-installed application should never spawn a shell (`su`, `sh`) or write to protected system areas. Observing such behavior via Mobile Threat Protection (MTP) logs is a very strong indicator that an application has successfully escalated its privileges and is attempting to establish persistence or perform malicious actions.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed
      - Enterprise network gateways
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: SEARCH MTP_logs WHERE (app_type='non-system' AND (spawned_process IN ('su', 'sh') OR modified_file IN ('critical_system_files'))). ALERT.
  - question: Is an application making an unusually high number of API calls or using APIs it has never used before?
    context: This question uses behavioral baselining to detect subtle signs of exploitation. An exploit chain often involves an application making a rapid sequence of API calls or using undocumented/private APIs to trigger a vulnerability. By monitoring for significant deviations from an application's established API usage baseline, we can detect this anomalous activity even without a known signature.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed
      - Enterprise network gateways
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: FOR each app_process, MONITOR API_call_rate and API_call_set. ALERT if rate > 99th percentile of baseline OR if new, unseen API calls are used.
  - question: Can an LSTM autoencoder model detect anomalous sequences of API calls that may indicate a multi-stage exploit?
    context: This question applies deep learning to identify complex exploit chains that manifest as an unusual sequence of API calls. An LSTM autoencoder is trained on normal behavior and will have a high reconstruction error when presented with a novel, malicious sequence. This allows for the detection of sophisticated, multi-stage attacks that might be missed by simple rate-based or set-based anomaly detection.
    answer_sources:
      - Mobile Threat Protection (MTP) process event logs
      - Mobile Threat Protection (MTP) API call logs
      - Zeek conn.log
      - Zeek dns.log
      - Managed mobile devices (corporate and BYOD) with MTP agents installed
      - Enterprise network gateways
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: FOR each API_call_sequence, INPUT sequence into LSTM autoencoder. ALERT if reconstruction_error > threshold. CORRELATE with network beaconing.
  - question: Has a mobile device's security configuration been changed to a less secure, policy-violating state?
    context: This question aims to detect when an adversary, after gaining some level of access, weakens a device's security posture to facilitate further actions. Enabling 'Developer Mode' or allowing app installation from 'Unknown Sources' are common steps for side-loading malicious tools. Alerting on these policy violations via MDM/UEM logs can provide an early warning of an ongoing compromise.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console
      - managed mobile devices
      - enterprise certificate authorities
      - network gateways
    range: last 90 days
    queries:
      - pseudocode: SEARCH MDM/UEM_logs WHERE (developerMode_enabled=true OR unknownSources_allowed=true). ALERT.
  - question: Has a new, untrusted root certificate been installed on the device?
    context: This question addresses the threat of man-in-the-middle attacks facilitated by privilege escalation. An attacker with root access can install their own root certificate to intercept and decrypt TLS/SSL traffic. By baselining the trusted certificates on a device and monitoring for changes using network traffic analysis (Zeek x509.log), we can detect this malicious modification to the device's trust store.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console
      - managed mobile devices
      - enterprise certificate authorities
      - network gateways
    range: last 90 days
    queries:
      - pseudocode: FOR each device, GET current_certs from Zeek x509.log. COMPARE against baseline_certs using Jaccard index. ALERT if similarity_score < threshold.
  - question: Does the device's current configuration profile deviate from the norm of compliant devices, as identified by a One-Class SVM model?
    context: This question uses machine learning to create a holistic model of a 'compliant' device configuration. A One-Class SVM can learn the boundary of normal configurations and flag any device that falls outside this boundary as an outlier. This can catch subtle or novel configuration changes made by an exploit that might not trigger a specific, hard-coded rule, providing a more robust detection method.
    answer_sources:
      - MDM/UEM configuration logs
      - MDM/UEM compliance logs
      - Zeek ssl.log
      - Zeek x509.log
      - MDM/UEM management console
      - managed mobile devices
      - enterprise certificate authorities
      - network gateways
    range: last 90 days
    queries:
      - pseudocode: FOR each device_config_snapshot, EXTRACT features (dev_mode, unknown_sources, etc.). INPUT into One-Class SVM model. ALERT if classified as outlier.