name: "T1633: Virtualization-Sandbox Evasion"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps investigate if malware on a corporate mobile device is attempting to detect if it is running in a sandbox or emulator. Evasive actions may include an application querying for system properties unique to emulators (like 'ro.hardware: goldfish'), checking for human interaction by accessing sensors (like accelerometer, gyroscope) followed by network dormancy, or making DNS queries to public time and geolocation services to verify the device's environment."
type: "technique"
related:
  - "TA0030: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a newly installed, non-allowlisted application querying for multiple known emulator artifacts within 60 seconds of its first execution?"
    context: |
      This question seeks to identify applications that immediately check for signs of a virtualized or emulated environment upon launch. Malware often performs these checks to alter its behavior or terminate execution if it detects a sandbox, thereby evading analysis. The query joins MDM process logs with Android Logcat data to specifically target applications from untrusted publishers that exhibit this suspicious reconnaissance behavior.
    answer_sources: |
      Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          JOIN MDM_process_logs ON process_start_time
          WITH Android_logcat_data
          WHERE application_publisher NOT IN allowlist
          AND logcat_message CONTAINS emulator_artifact_watchlist
          AND COUNT(DISTINCT artifact) >= 2
          WITHIN 60 seconds of process_start_time
  - question: "Is any third-party application querying for an anomalously high number of unique emulator-related system properties or exhibiting low-entropy queries shortly after execution?"
    context: |
      This question aims to detect sandbox evasion attempts by establishing a behavioral baseline across the mobile fleet. An application querying significantly more emulator properties than its peers might be performing a more thorough evasion check. Similarly, very low entropy in the queried property names (e.g., repeatedly checking the same one or two properties) can also indicate a simplistic, automated evasion script. This approach uses statistical methods (99th percentile, Shannon entropy) to find outliers without relying solely on a fixed list of known bad applications.
    answer_sources: |
      Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Rule 1: High Count
          FOR each third-party_application:
            CALCULATE fleet_wide_99th_percentile_of_unique_emulator_property_queries
            WITHIN 5 minutes of execution
            ALERT if application_query_count > fleet_wide_99th_percentile

          // Rule 2: Low Entropy
          FOR each process:
            CALCULATE shannon_entropy_of_queried_property_names
            ALERT if entropy < 1.5
  - question: "Can a machine learning model identify applications exhibiting evasive behavior based on system property queries and other features, and can this be correlated with suspicious network activity?"
    context: |
      This question leverages a Random Forest classification model to make a predictive judgment about an application's intent. By training the model on a variety of features—such as the count and entropy of property queries, time-to-first-query, publisher reputation, and requested permissions—it can learn complex patterns indicative of evasion that are difficult to capture with simple rules. Correlating a high-confidence 'evasive' prediction with subsequent suspicious network connections (e.g., to known C2 servers) provides a powerful, automated method for escalating high-priority threats.
    answer_sources: |
      Android Logcat, MDM Application Inventory Logs, MDM Process Activity Logs, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Model Prediction
          INPUT features (query_count, entropy, time_delta, publisher_rep, permissions)
          INTO Random_Forest_Model
          GET prediction_score

          // Correlation
          IF prediction_score > high_confidence_threshold:
            SEARCH Zeek_conn_logs for subsequent connections from device_ip
            to malicious_ip_list or on unusual_ports
            IF match found:
              ESCALATE incident_priority
  - question: "Has a newly installed application requested multiple 'human interaction' permissions and then exhibited network dormancy, suggesting it is checking for a live user before proceeding?"
    context: |
      This question looks for a common sandbox evasion tactic where malware checks for signs of a real user (e.g., access to contacts, body sensors) and, upon finding none, remains dormant to avoid detection in an automated analysis environment. The combination of rapid permission requests for human-centric data followed by a lack of significant network activity is a strong indicator of this behavior. The query correlates MDM permission logs with Zeek network logs to detect this specific sequence of events.
    answer_sources: |
      MDM Permission Grant Logs, Android Logcat, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Event 1: Permission Grants
          SEARCH MDM_permission_logs
          FOR application granted >= 3 permissions from 'human_interaction_watchlist'
          WITHIN 60 seconds of first_launch

          // Event 2: Network Dormancy
          IF Event 1 is true:
            SEARCH Zeek_conn_logs for device_ip in subsequent 5 minutes
            WHERE outbound_connections == 0
            OR (outbound_connections == 1 AND total_bytes_sent < 1024)

          // Correlation
          IF both events are true for the same application:
            ALERT
  - question: "Is a new application making an anomalous sequence of API calls or observing static sensor data, suggesting it is running in an emulator?"
    context: |
      This question aims to detect emulated environments by analyzing an application's early-stage behavior. Emulators often provide static or predictable sensor data (e.g., an accelerometer that doesn't move), and applications running within them may have different API call patterns than on a real device. By comparing a new app's initial API call sequence to a baseline of trusted apps (using Levenshtein distance) and monitoring sensor data entropy, we can identify statistical anomalies indicative of a non-human environment.
    answer_sources: |
      MDM Permission Grant Logs, Android Logcat, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Rule 1: API Sequence Anomaly
          FOR each new_application:
            GET initial_API_call_sequence from Logcat
            GET baseline_sequence for application_category
            CALCULATE Levenshtein_distance(new_sequence, baseline_sequence)
            ALERT if distance_score > 98th_percentile_for_category

          // Rule 2: Static Sensor Data
          MONITOR sensor_data_streams from Logcat
          CALCULATE entropy over 30-second window
          ALERT if entropy is near 0
  - question: "Can an LSTM Autoencoder model detect anomalous, non-human sensor activity from a newly installed application?"
    context: |
      This question applies a deep learning model (LSTM Autoencoder) to detect time-series anomalies in sensor data. The model is trained on normal patterns of human interaction (e.g., movement from accelerometer/gyroscope). When a new application is running, its associated sensor data is fed into the model. If the model cannot accurately reconstruct the input data (resulting in a high reconstruction error), it signifies that the data pattern is anomalous and likely not from a human user, strongly suggesting the application is running in an emulator providing static or unrealistic sensor inputs.
    answer_sources: |
      MDM Permission Grant Logs, Android Logcat, Zeek conn.log. This data can be found on Managed Mobile Device Endpoints, the Mobile Device Management (MDM) Platform, a Centralized Log Aggregator/SIEM, and Network Security Monitoring (NSM) sensors at internet gateways.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Model Inference
          FOR each new_application:
            FEED real-time_sensor_data_stream into pre-trained_LSTM_Autoencoder
            CALCULATE reconstruction_error_score

          // Anomaly Detection
          IF reconstruction_error_score > statistical_threshold:
            ALERT for anomalous sensor activity, indicating probable emulator
  - question: "Is a newly installed application making DNS queries for multiple public NTP or IP geolocation services within its first five minutes of execution?"
    context: |
      This question targets malware's attempt to verify its external environment. Sandboxes may manipulate system time or report a generic location. To counter this, malware may query external, trusted time (NTP) and location (geolocation) services. Detecting a new application that quickly queries several of these services is a strong indicator of an evasion attempt, as this behavior is abnormal for most legitimate applications.
    answer_sources: |
      Zeek dns.log, Zeek conn.log, MDM Application Installation Logs. This data can be found on Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, a Centralized Log Aggregator/SIEM, and the Mobile Device Management (MDM) Platform.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          JOIN MDM_installation_logs ON device_ip, timestamp
          WITH Zeek_dns_logs
          WHERE query IN public_time_geo_watchlist
          AND COUNT(DISTINCT query) >= 3
          WITHIN 5 minutes of installation_time
          ALERT
  - question: "Is a mobile device suddenly making an anomalously high number or frequency of DNS queries to time and geolocation services compared to its own historical baseline?"
    context: |
      This question focuses on detecting changes in individual device behavior over time. Instead of using a static threshold, it establishes a 30-day rolling baseline for each device's queries to time/geo services. An alert is triggered if a device suddenly deviates significantly from its own normal pattern (e.g., exceeding three standard deviations or a 99th percentile frequency). This personalized, adaptive approach helps reduce false positives that might occur from fleet-wide rules and can pinpoint a compromised device even if its traffic volume isn't high in absolute terms.
    answer_sources: |
      Zeek dns.log, Zeek conn.log, MDM Application Installation Logs. This data can be found on Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, a Centralized Log Aggregator/SIEM, and the Mobile Device Management (MDM) Platform.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Baseline Calculation (30-day rolling)
          FOR each device:
            CALCULATE baseline_mean_and_std_dev of distinct time_geo_queries
            CALCULATE baseline_99th_percentile_frequency for each time_geo_domain

          // Anomaly Detection (10-minute sliding window)
          FOR each device:
            IF current_distinct_query_count > (baseline_mean + 3 * baseline_std_dev):
              ALERT
            IF current_query_frequency_to_domain > baseline_99th_percentile:
              ALERT
  - question: "Can network traffic outliers, identified by a DBSCAN clustering algorithm, reveal sandbox evasion reconnaissance?"
    context: |
      This question uses an unsupervised machine learning approach (DBSCAN) to find anomalous patterns in network traffic without pre-defined rules. By clustering traffic based on features like FQDN entropy, DNS-to-connection ratios, and JA3 hashes, normal traffic will form dense clusters. Evasion attempts, characterized by a high number of DNS queries to time/geo services followed by minimal data transfer, will not fit these clusters and will be labeled as 'noise' or outliers by the algorithm. Investigating these outliers provides a novel way to discover previously unknown or subtle evasion techniques.
    answer_sources: |
      Zeek dns.log, Zeek conn.log, MDM Application Installation Logs. This data can be found on Corporate DNS Resolvers, Network Security Monitoring (NSM) sensors at internet gateways, a Centralized Log Aggregator/SIEM, and the Mobile Device Management (MDM) Platform.
    range: "Last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          // Feature Engineering (5-minute windows)
          FOR each device:
            EXTRACT features (FQDN_count, FQDN_entropy, DNS_to_conn_ratio, ports, JA3_hash)
            from Zeek_dns and Zeek_conn logs

          // Clustering
          APPLY DBSCAN algorithm to feature set
          IDENTIFY points classified as 'noise' (outliers)

          // Investigation
          INVESTIGATE outlier points that show high DNS queries to time/geo services
          and low subsequent data transfer.