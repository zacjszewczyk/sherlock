name: T1474: Supply Chain Compromise
id: 0c5a2985-7802-4b21-9d6e-399a2c35a676
description: This playbook focuses on detecting supply chain compromises targeting corporate mobile applications and their development/build environments. It provides investigative questions and queries to identify anomalous network behavior following mobile application updates, such as connections to suspicious domains, unusual TLS certificate usage, and deviations from baselined traffic patterns. It also covers the detection of compromised build systems by monitoring for anomalous process creation, obfuscated command-line execution, and unexpected network connections originating from trusted build tools. The overall goal is to answer the primary investigative requirement: "Has a corporate mobile application been compromised through its supply chain?"
type: technique
related:
- TA0027: Initial Access
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: After a mobile application update, did any affected devices connect to domains or IP addresses known to be associated with malicious command and control (C2) infrastructure?
  context: This question aims to quickly identify high-confidence indicators of compromise by correlating an application update event with subsequent network connections to known malicious endpoints. A match against a threat intelligence feed provides a strong signal that the updated application may have been trojanized as part of a supply chain attack.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM Logs
  - Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers.
  range: 24 hours post-update
  queries:
  - pseudocode: |
      FIND devices with MDM update for <app>
      JOIN network logs (DNS, connection) for those devices in the next 24 hours
      CHECK destination IPs/domains against mobile C2 threat intel feed
      ALERT on match
- question: Following an update, did the mobile application exhibit anomalous network behavior such as connecting to new domains, using untrusted TLS certificates, employing rare JA3/JA3S hashes, or querying domains indicative of DGA activity?
  context: This question helps detect more subtle signs of compromise by comparing post-update network activity against a historical baseline of normal behavior. Deviations like contacting new domains, using suspicious certificates, or communicating with rare server fingerprints can indicate a malicious implant attempting to establish a C2 channel. Analyzing domain names for algorithmic patterns can also uncover DGA-based C2 mechanisms.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM Logs
  - Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each <app> update:
      COMPARE post-update DNS queries against 90-day domain baseline
      COMPARE post-update TLS certs against trusted issuer list
      COMPARE post-update JA3/JA3S hashes against organizational rarity baseline (<1%)
      ANALYZE new domains for DGA patterns
      ALERT on any deviation
- question: Did a machine learning model trained on normal network behavior detect significant anomalies in an application's connections following an update?
  context: This question leverages machine learning to identify complex deviations that rule-based systems might miss. An autoencoder model learns the normal patterns of an application's network traffic. A high reconstruction error on post-update traffic signifies that the new behavior is fundamentally different from the learned baseline, suggesting a potential compromise and hidden C2 activity.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM Logs
  - Network egress points, corporate Wi--Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each <app> update:
      EXTRACT feature vectors from post-update network connections
      PROCESS features through pre-trained autoencoder model
      ALERT if reconstruction error exceeds established threshold
- question: During a build cycle, did a standard build tool (e.g., xcodebuild, gradle) spawn a networking utility that connected to a known malicious or unapproved external IP address?
  context: This question focuses on detecting a compromised build environment. Attackers may inject malicious code that causes a legitimate build process to spawn a separate process for C2 communication. By monitoring for build tools creating network-capable child processes and checking their destinations against threat intelligence and allowlists, we can catch this specific TTP.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet.
  range: last 90 days
  queries:
  - pseudocode: |
      FIND process creation events where parent is build tool AND child is networking utility
      CORRELATE child PID with network connection events
      CHECK destination IP against C2 threat intel and corporate allowlist
      ALERT on match or non-allowlisted connection
- question: Did any build server exhibit anomalous process activity, such as a rare parent-child process relationship or the execution of obfuscated/unusually long command-line arguments?
  context: This question seeks to identify malicious activity on build servers by looking for statistical outliers in process behavior. Attackers often use legitimate tools in unusual ways to evade detection. Baselining normal process relationships and command-line characteristics allows for the detection of rare or new process chains and heavily obfuscated commands (indicated by high entropy), which are strong indicators of a compromise.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet.
  range: last 90 days
  queries:
  - pseudocode: |
      COMPARE parent-child process pairs on build servers against 30-day baseline
      ALERT on new or rare pairs (<0.5% frequency)
      FOR PowerShell/CMD processes, calculate entropy and length of command line/script block
      ALERT if entropy > 4.5 or length > 3 standard deviations from baseline
- question: Did a machine learning model classify any process chain originating from a build tool as malicious with high confidence?
  context: This question employs a supervised machine learning model to proactively identify malicious process activity. By training a classifier on features that distinguish between benign and malicious process chains, the system can automatically flag suspicious behavior with a high degree of confidence, enabling rapid, automated responses like host quarantine to contain a potential breach in the build environment.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Windows Event ID 4104
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet.
  range: last 90 days
  queries:
  - pseudocode: |
      EXTRACT feature vectors from process chains on build servers
      PROCESS features through pre-trained gradient boosting classifier
      ALERT and QUARANTINE if classification is 'malicious' with confidence > 0.9
- question: Following an application update, did any devices on a designated watchlist connect to known malicious domains or IPs, when checked against mobile-specific threat intelligence?
  context: This question focuses investigative resources by creating a specific watchlist of devices that received a particular update. By checking their subsequent network traffic against threat intelligence and filtering out known-good connections, analysts can efficiently hunt for high-confidence indicators of compromise related to that specific update.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - MDM Logs
  - MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic.
  range: last 90 days
  queries:
  - pseudocode: |
      CREATE watchlist of devices from MDM logs for <app> update
      QUERY network logs for watchlist devices post-update
      FILTER out connections to known-good allowlist
      CHECK remaining destinations against mobile threat intel feed
      ALERT on match
- question: Did the aggregate network profile of an application significantly deviate from its historical baseline after an update, specifically in terms of data volume, unique destinations, connection duration, or port usage?
  context: This question aims to detect anomalies in the overall traffic pattern of an application, which could indicate C2 beaconing or data exfiltration. By applying statistical tests (percentile thresholds, K-S test, Chi-squared test) to compare post-update aggregate metrics against a pre-update baseline, we can identify subtle but significant shifts in behavior that might not be apparent when looking at individual connections.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - MDM Logs
  - MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each <app> update:
      COMPARE hourly data volume and unique IP count against 99th percentile baseline for >2 hours
      RUN K-S test on pre/post-update connection duration distributions (p < 0.01)
      RUN Chi-squared test on pre/post-update destination port distributions
      ALERT on significant deviation
- question: Did a time-series forecasting model predict a significant and sustained anomaly in an application's aggregate network metrics (e.g., data volume, query rate) after an update?
  context: This question uses predictive modeling to detect 'low-and-slow' malicious activity that might be missed by simple thresholding. A time-series model learns the normal rhythm and seasonality of an application's traffic. When post-update traffic consistently deviates from the model's forecast (i.e., falls outside the confidence interval), it strongly suggests a new, underlying process is at work, such as periodic C2 beaconing or gradual data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - MDM Logs
  - MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi--Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each <app> update:
      FEED observed hourly metrics (data volume, DNS rate) into pre-trained time-series model
      ALERT if actual values fall outside the 99% confidence interval for >=3 consecutive hours