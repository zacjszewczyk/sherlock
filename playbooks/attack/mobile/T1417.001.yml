name: T1417.001: Keylogging
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook is designed to detect adversary activity related to keylogging on mobile devices. It addresses the threat of credential and sensitive information theft by identifying several key indicators: the installation of unauthorized or suspicious third-party keyboards (Input Method Editors); the abuse of powerful Android permissions like 'BIND_ACCESSIBILITY_SERVICE' by non-standard applications; and anomalous network traffic patterns, such as highly regular, small C2 beacons or large, unusual data exfiltration events. The investigative questions focus on combining device-level inventory and permission data with network-level behavioral analysis to uncover keylogging malware. [1]
type: technique
related:
- TA0031: Credential Access
- TA0035: Collection
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an unauthorized or mismatched Input Method Editor (IME) installed on a corporate mobile device?
  context: This action aims to identify potential keyloggers masquerading as keyboard applications. By comparing installed IMEs against a corporate allowlist (based on package name, developer signature, and binary hash), we can quickly flag suspicious applications that are not approved for use, which is a primary vector for keystroke capture.
  answer_sources:
  - UEM/MDM Application Inventory Report
  - Mobile EDR Process Execution Logs
  - Corporate Application Allowlist Database
  - Threat Intelligence Hash/Signature Feeds
  - UEM/MDM platform's central database
  - corporate application store
  - threat intelligence vendor portals
  range: last 90 days
  queries:
  - pseudocode: SEARCH UEM/MDM inventory logs. FOR each device, GET installed packages. JOIN with corporate keyboard allowlist. WHERE package is IME AND (package_name NOT IN allowlist OR signature NOT IN allowlist OR hash NOT IN allowlist), ALERT.
- question: Has a statistically rare keyboard application been installed, or is there a sudden spike in installations of a rare keyboard?
  context: This question focuses on identifying outliers. Common, legitimate keyboards have high installation rates. A very rare keyboard ('long tail' analysis) is inherently suspicious. Furthermore, a sudden, coordinated installation burst of a rare keyboard across multiple devices can indicate a targeted campaign, which this question aims to detect using statistical deviation analysis.
  answer_sources:
  - UEM/MDM Application Inventory Report
  - UEM/MDM platform's central database
  range: last 90 days
  queries:
  - pseudocode: SEARCH UEM/MDM inventory logs. CALCULATE prevalence of all IMEs. WHERE prevalence < 1%, FLAG as 'Rare'. FOR each 'Rare' keyboard, CALCULATE 30-day moving average and stddev of daily installs. WHERE daily_installs > (mean + 3*stddev), ALERT.
- question: Does a newly detected or rare keyboard application exhibit features consistent with known malware?
  context: This question applies machine learning to proactively assess risk. Instead of relying solely on allowlists or simple statistics, it uses a model trained on various application metadata (permissions, developer reputation, etc.) to score a keyboard's potential for maliciousness. A high probability score provides a strong, automated signal to trigger an incident response process.
  answer_sources:
  - UEM/MDM Application Inventory Report
  - Mobile EDR Process Execution Logs
  - Corporate Application Allowlist Database
  - Threat Intelligence Hash/Signature Feeds
  - UEM/MDM platform's central database
  - corporate application store
  range: last 90 days
  queries:
  - pseudocode: FOR each new or 'Rare' keyboard, EXTRACT features (permissions, developer_age, etc.). INPUT features into Random Forest model. WHERE model_prediction_for_malicious > 0.90, CREATE incident AND TRIGGER endpoint scan.
- question: Has an unauthorized application been granted the powerful 'BIND_ACCESSIBILITY_SERVICE' permission on an Android device?
  context: The 'android.permission.BIND_ACCESSIBILITY_SERVICE' permission is extremely powerful and can be abused by malware to read screen content and capture user input, effectively functioning as a keylogger. This question seeks to detect the misuse of this permission by alerting whenever any application not explicitly pre-approved for such access (like trusted screen readers or password managers) is granted it. [1]
  answer_sources:
  - UEM/MDM Device Permissions Report
  - Mobile EDR API Call Monitoring Logs
  - Android dumpsys accessibility output
  - UEM/MDM platform's device configuration and compliance database
  - EDR agent logs on managed Android devices
  range: last 90 days
  queries:
  - pseudocode: SEARCH UEM/MDM permission logs. WHERE permission_granted == 'android.permission.BIND_ACCESSIBILITY_SERVICE' AND package_name NOT IN accessibility_allowlist, CREATE critical alert.
- question: Does an application with accessibility services enabled have an unusually large or atypical set of permissions for its category?
  context: This question uses statistical analysis to find suspicious permission patterns. Malicious apps often request a wide range of unnecessary permissions to support various activities. By measuring the permission set's entropy (complexity) and its deviation (Jaccard distance) from typical apps in its category, we can identify outliers that warrant investigation.
  answer_sources:
  - UEM/MDM Device Permissions Report
  - UEM/MDM platform's device configuration and compliance database
  range: last 90 days
  queries:
  - pseudocode: FOR apps with 'BIND_ACCESSIBILITY_SERVICE', CALCULATE permission_entropy and jaccard_distance_from_category_median. WHERE entropy > 99th_percentile OR jaccard_distance > 0.8, ALERT.
- question: Is an application with accessibility services making anomalous sequences of API calls indicative of keylogging and data exfiltration?
  context: This question moves beyond static properties to analyze runtime behavior. A keylogger would exhibit a pattern such as capturing text input ('onAccessibilityEvent') and immediately trying to write it to a file or send it over the network ('FileOutputStream.write', 'Socket.connect'). An anomaly detection model like Isolation Forest can flag these malicious sequences in real-time.
  answer_sources:
  - Mobile EDR API Call Monitoring Logs
  - EDR agent logs on managed Android devices
  range: last 90 days
  queries:
  - pseudocode: MONITOR API call streams from apps with accessibility services. INPUT call sequence into Isolation Forest model. WHERE anomaly_score > top_1_percent, CREATE critical alert.
- question: Is a mobile device communicating with a known malicious Command and Control (C2) server?
  context: Keyloggers must exfiltrate captured data to an adversary-controlled server. By correlating network connection logs (DNS requests and TCP/UDP connections) with up-to-date threat intelligence feeds, we can directly identify communication with known bad infrastructure, providing a high-confidence indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Mobile EDR Network Connection Logs
  - Threat Intelligence IP/Domain Feeds
  - WHOIS Registration Data
  - Network sensor logs from corporate Wi-Fi controllers, VPN concentrators, and internet gateway traffic mirrors.
  range: last 90 days
  queries:
  - pseudocode: SEARCH Zeek dns.log and conn.log for mobile IP space. JOIN on IP/domain. WHERE destination IN malicious_threat_feed, CREATE high-severity alert.
- question: Is a mobile device exhibiting a network traffic pattern of small, highly regular outbound connections, indicative of automated C2 beaconing?
  context: This question aims to detect the 'heartbeat' of malware. Automated C2 beaconing is often characterized by its regularity (low jitter) and small payload size. By analyzing the timing and size of network connections, we can identify this machine-like pattern, which is distinct from typical user-driven traffic. Enriching this with domain age data helps filter out legitimate, newly stood-up services.
  answer_sources:
  - Zeek conn.log
  - WHOIS Registration Data
  - Network sensor logs from corporate Wi-Fi controllers, VPN concentrators, and internet gateway traffic mirrors.
  range: last 90 days
  queries:
  - pseudocode: AGGREGATE Zeek conn.log by src/dst IP. CALCULATE stddev of inter-connection time and 95th_percentile of outbound_bytes. WHERE time_stddev < 2s AND bytes_percentile < 1024, ALERT. ESCALATE if WHOIS shows domain age < 30 days.
- question: Has a mobile device's network activity deviated significantly from its own established historical baseline?
  context: This question uses machine learning to create a personalized behavioral baseline for each device. An LSTM Autoencoder can learn the normal rhythm of a device's network traffic. When a keylogger is activated and begins exfiltrating data, it creates a new traffic pattern that the model will fail to reconstruct accurately, resulting in a high reconstruction error and triggering an anomaly alert.
  answer_sources:
  - Zeek conn.log
  - Mobile EDR Network Connection Logs
  - Network sensor logs from corporate Wi-Fi controllers, VPN concentrators, and internet gateway traffic mirrors.
  range: last 90 days
  queries:
  - pseudocode: FOR each device, TRAIN LSTM Autoencoder on 30+ days of network activity features. IN real-time, FEED current activity to model. WHERE reconstruction_error > 99th_percentile_of_historical_errors, CREATE high-severity alert.
- question: Following the installation of a non-allowlisted keyboard, is the device exhibiting rhythmic network beaconing or using Domain Generation Algorithms (DGA) for C2 communication?
  context: This question looks for the behavioral footprint of malware C2 activity after a suspicious installation. It combines two detection methods: identifying the highly regular, 'heartbeat' traffic of beaconing, and detecting the use of DGAs. DGAs create random-looking subdomains to evade blocklists, which can be spotted by measuring high string entropy.
  answer_sources:
  - MDM Application Inventory Logs
  - Zeek conn.log
  - Zeek dns.log
  - MDM/EMM servers
  - Network egress points (e.g., corporate WiFi gateways, VPN concentrators)
  range: last 90 days
  queries:
  - pseudocode: FOR devices with non-allowlisted keyboards, ANALYZE Zeek conn.log. WHERE new pattern shows median_bytes between 500B-5KB AND time_stddev < 30s, ALERT. ADDITIONALLY, ANALYZE Zeek dns.log. WHERE subdomain_entropy > 3.5, ALERT for DGA.
- question: Following the installation of a non-allowlisted keyboard, has the device initiated an unusually large data transfer to a new destination?
  context: This question aims to detect bulk data exfiltration. After capturing a significant amount of data, a keylogger might attempt to send it all in one or a few large chunks. This action detects such an anomaly by flagging any outbound connection that is significantly larger than the device's normal traffic, especially if it's to a destination the device has never contacted before.
  answer_sources:
  - MDM Application Inventory Logs
  - Zeek conn.log
  - MDM/EMM servers
  - Network egress points (e.g., corporate WiFi gateways, VPN concentrators)
  range: last 90 days
  queries:
  - pseudocode: FOR devices with non-allowlisted keyboards, ANALYZE Zeek conn.log. WHERE outbound_bytes > 99th_percentile_of_30day_history AND destination_is_new, ALERT.
- question: Are there any small groups of devices exhibiting similar, anomalous network behavior, such as large transfers to rare domains?
  context: This question uses peer group analysis to find coordinated malicious activity. Clustering algorithms like DBSCAN can automatically group devices based on network features. Small clusters showing high data volume to uncommon destinations can uncover a malware campaign affecting multiple users, even if the behavior isn't known to be malicious beforehand.
  answer_sources:
  - Zeek conn.log
  - MDM Application Inventory Logs
  - MDM/EMM servers
  - Network egress points (e.g., corporate WiFi gateways, VPN concentrators)
  range: last 90 days
  queries:
  - pseudocode: APPLY DBSCAN clustering to all mobile devices using network features (bytes, duration, port, destination_prevalence). INVESTIGATE small clusters with high avg_bytes and low destination_prevalence. CORRELATE with MDM logs.