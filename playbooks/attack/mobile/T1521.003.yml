name: T1521.003: SSL Pinning
id: a7b8c9d0-e1f2-4a3b-8c7d-6e5f4d3c2b1a
description: >-
  Investigates whether an adversary is using SSL Pinning to conceal Command and Control (C2) communications on mobile devices. SSL Pinning restricts an application's trusted certificates to a specific, "pinned" set, preventing inspection by standard TLS-inspecting proxies. This playbook identifies potential pinning by detecting an increase in TLS handshake failures when traffic is proxied, observing the use of self-signed or statistically rare certificates, and performing static analysis on application packages to find code or configurations related to pinning implementations.
type: technique
related:
  - TA0037: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are there any failed TLS connections from mobile devices to known malicious C2 domains, after excluding connections to pre-approved services?
    context: >-
      This question aims to find direct evidence of malicious activity. By correlating failed TLS handshakes (a primary symptom of SSL pinning when a man-in-the-middle proxy is used) with threat intelligence, we can quickly identify high-confidence indicators of compromise. Excluding connections to known-good applications that legitimately use pinning helps to reduce false positives and focus investigative effort.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network traffic egress points for mobile device VLANs
      - DHCP server logs to map IP addresses to mobile device hostnames
      - Mobile Device Management (MDM) logs for device and application context
      - Threat intelligence feeds of known malicious C2 domains
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          SEARCH (Zeek ssl.log, conn.log) WHERE source_ip IN mobile_device_ranges AND validation_status != 'ok' AND server_name NOT IN approved_application_list AND server_name IN malicious_c2_domains

  - question: Have any mobile applications shown a statistically significant spike in TLS validation failures compared to their historical baseline?
    context: >-
      This question uses statistical analysis to detect anomalous behavior that might indicate the introduction of SSL pinning in an application. A sudden increase in connection failures for a specific application, exceeding its normal operating variance (e.g., three standard deviations above the mean), suggests a change in its network behavior, possibly due to a malicious update or compromise that introduced pinning to hide its traffic.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network traffic egress points for mobile device VLANs
      - DHCP server logs
      - Mobile Device Management (MDM) logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR each server_name from mobile_device_ranges: CALCULATE hourly_failure_count. ALERT IF current_hourly_failure_count > (30_day_mean + 3 * 30_day_std_dev)

  - question: Can a time-series model detect anomalous spikes in TLS validation failures for any mobile application, accounting for daily and weekly patterns?
    context: >-
      This question advances the statistical approach by using a more sophisticated time-series model (e.g., ARIMA, Prophet). This method can account for normal seasonality (e.g., lower traffic on weekends, different patterns on weekdays) to more accurately identify true anomalies in TLS failure rates. This reduces false positives that might arise from predictable, benign fluctuations in network activity.
    answer_sources:
      - Zeek ssl.log
      - Zeek conn.log
      - Network traffic egress points for mobile device VLANs
      - DHCP server logs
      - Mobile Device Management (MDM) logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR each server_name from mobile_device_ranges: TRAIN time_series_model on 30+ days of hourly_failure_counts. FORECAST expected_failures. ALERT IF actual_failures > forecast_confidence_interval.

  - question: Are any mobile devices successfully connecting to servers using self-signed certificates that are linked to known malicious indicators?
    context: >-
      This question targets a classic sign of a non-standard trust relationship: a self-signed certificate. In a mobile environment, a successful connection using a self-signed certificate that also matches a known malicious hash or domain from a threat intelligence feed is a very strong indicator of a C2 channel bypassing standard trust stores.
    answer_sources:
      - Zeek x509.log
      - Zeek ssl.log
      - Zeek conn.log
      - Zeek sensors at internet egress points
      - Certificate Transparency (CT) logs
      - Mobile Device Management (MDM) platforms
      - Threat intelligence platform with malicious certificate hashes and C2 domains
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          SEARCH (Zeek logs) WHERE source_ip IN mobile_device_ranges AND is_self_signed = true AND (cert_hash IN malicious_hashes OR server_name IN malicious_domains)

  - question: Are mobile devices connecting to servers with high-entropy domain names using certificates from statistically rare Certificate Authorities?
    context: >-
      This question hunts for two combined indicators of suspicion. A rare Certificate Authority (CA) suggests a non-standard trust chain not commonly seen on the network, and a high-entropy domain name is characteristic of Domain Generation Algorithms (DGAs) used by malware. The combination of these two factors points to a likely C2 communication channel attempting to hide.
    answer_sources:
      - Zeek x509.log
      - Zeek ssl.log
      - Zeek conn.log
      - Zeek sensors at internet egress points
      - Certificate Transparency (CT) logs
      - Mobile Device Management (MDM) platforms
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          IDENTIFY rare_issuers from 90_day_history (e.g., <0.05% prevalence). SEARCH (Zeek logs) WHERE source_ip IN mobile_device_ranges AND issuer IN rare_issuers AND shannon_entropy(server_name) > 3.5

  - question: Can a machine learning model, trained on various TLS session features, identify and score potentially malicious connections from mobile devices?
    context: >-
      This question proposes a proactive, machine learning-based approach to detection. By training a classification model on a rich set of features (e.g., certificate details, JA3/S hashes, connection stats, issuer rarity), the system can learn the subtle characteristics of malicious TLS traffic and assign a risk score to new sessions, enabling detection of novel threats that may not match simple rules.
    answer_sources:
      - Zeek x509.log
      - Zeek ssl.log
      - Zeek conn.log
      - Zeek sensors at internet egress points
      - Labeled datasets for model training
      - Mobile Device Management (MDM) platforms
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR each new TLS_session from mobile_device_ranges: EXTRACT features (is_self_signed, issuer_rarity, JA3, etc.). SCORE session with trained_ML_model. ALERT if score > threshold (e.g., 0.9).

  - question: Do any newly submitted or updated mobile applications contain known code libraries, API calls, or configuration strings for implementing SSL pinning?
    context: >-
      This question focuses on proactive detection by inspecting the application code itself before it can cause network events. By automatically scanning for common pinning libraries (like OkHttp's CertificatePinner or TrustKit) or configuration files, an organization can identify applications that use pinning and assess whether that usage is legitimate or suspicious, especially if the app is not on an approved list.
    answer_sources:
      - Mobile Application Package (APK, IPA)
      - Static Analysis Tool Output (e.g., MobSF JSON report)
      - Application Manifest Files (e.g., AndroidManifest.xml)
      - Mobile Device Management (MDM) or Mobile Application Management (MAM) platform
      - Internal corporate app store
      - Analyst sandbox environment with static analysis tools
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          SCAN application_package. SEARCH code and config for strings IN ('okhttp3.CertificatePinner', 'TrustKit', 'AFNetworking', '<pin-set>'). ALERT IF found AND app NOT IN approved_pinning_list.

  - question: Are there any managed mobile applications that are statistical outliers in their use of network security configurations, such as being the only app in their category to implement pinning?
    context: >-
      This question seeks to find suspicious applications by identifying anomalous configurations. If an application (e.g., a simple calculator app) implements advanced security features like certificate pinning when no other similar apps do, it warrants investigation. It is an outlier whose behavior deviates from its peers, which could indicate a developer with malicious intent trying to hide C2 traffic within a seemingly benign application.
    answer_sources:
      - Mobile Application Package (APK, IPA)
      - Static Analysis Tool Output
      - Application Manifest Files (e.g., AndroidManifest.xml, network_security_config.xml)
      - Mobile Device Management (MDM) or Mobile Application Management (MAM) platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR all managed_apps: PARSE manifest_and_config. GROUP apps by category. IDENTIFY apps with pinning enabled. ALERT IF app is an outlier in its category (e.g., only productivity app with pinning).

  - question: Can a machine learning model, trained on static analysis features, assign a risk score to mobile applications based on their likelihood of containing malicious pinning implementations?
    context: >-
      This question applies machine learning to static analysis reports. By training a model on features like requested permissions, imported libraries, code obfuscation levels, and network security rules, it can learn to distinguish between benign apps, malicious apps, and legitimate apps that use pinning. This provides a scalable way to risk-score every application and prioritize analyst review for those with the highest risk.
    answer_sources:
      - Mobile Application Package (APK, IPA)
      - Static Analysis Tool Output (e.g., MobSF JSON report)
      - Application Manifest Files
      - Labeled datasets of benign and malicious applications
      - Analyst sandbox environment
    range: last 90 days
    queries:
      - technology: pseudocode
        query: >-
          FOR each app_package: EXTRACT static_features (permissions, libraries, code_entropy). SCORE app with trained_ML_model. ALERT IF risk_score is high.