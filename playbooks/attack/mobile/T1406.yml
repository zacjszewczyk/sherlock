name: T1406: Obfuscated Files or Information
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps to answer the question: Is an adversary using obfuscated files or information to evade defenses on mobile devices? It focuses on detecting various obfuscation techniques, such as using high-entropy files or mismatched file signatures to hide malicious payloads, splitting files into smaller fragments to evade size-based detection, using on-host encoding utilities to stage obfuscated data, and downloading executable code from unauthorized sources. By monitoring network traffic and host-level process events, analysts can identify these evasion tactics, which are common precursors to payload execution on mobile endpoints.
type: technique
related:
- TA0030: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are files being transferred to mobile devices with mismatched MIME types and file extensions, suggesting an attempt to disguise executables?
  context: |
    This question aims to detect when an adversary renames a mobile executable (like an APK or IPA) with a benign extension (like .png or .docx) to bypass simple file-type filters. By comparing the actual MIME type identified by network monitoring tools against the file's name, we can uncover this common evasion technique. A successful detection indicates a likely attempt to smuggle malicious code onto a mobile device.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek http.log
  - Corporate Wi-Fi access points
  - Mobile Device Management (MDM) servers
  - network gateways
  - VPN concentrators
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Zeek files.log
      WHERE destination_ip IN mobile_ip_range
      AND (mime_type IS 'application/vnd.android.package-archive' OR mime_type IS 'application/x-itunes-ipa')
      AND filename_extension NOT IN ('.apk', '.ipa')
      | ALERT
- question: Are files with unusually high Shannon entropy being transferred to mobile devices, indicating potential encryption or packing?
  context: |
    High Shannon entropy indicates that data is close to random, a characteristic of encrypted or compressed content. Adversaries pack or encrypt payloads to hide their malicious signatures from security scanners. This question helps identify such files by flagging those with entropy scores that are statistical outliers for their file type or exceed a known threshold for encrypted content ($$ E > 7.5 $$), revealing potentially obfuscated malware.
  answer_sources:
  - Zeek files.log
  - Zeek conn.log
  - Zeek http.log
  - Corporate Wi-Fi access points
  - Mobile Device Management (MDM) servers
  - network gateways
  - VPN concentrators
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each file in Zeek files.log
      | CALCULATE shannon_entropy
      | IF shannon_entropy > 7.5 OR shannon_entropy > 95th_percentile_for_mimetype
      | ALERT
- question: Can a machine learning model identify files that are suspiciously obfuscated based on multiple network and file attributes?
  context: |
    This question proposes a more advanced, holistic approach to detection. Instead of relying on a single indicator, a machine learning model (like a random forest classifier) can be trained to recognize complex patterns of obfuscation. By analyzing features like file entropy, size, MIME type, source reputation, and user-agent together, the model can provide a confidence score for whether a file is maliciously obfuscated, helping to reduce false positives and detect more subtle techniques.
  answer_sources:
  - Zeek files.log
  - Zeek http.log
  - Corporate Wi-Fi access points
  - Mobile Device Management (MDM) servers
  - network gateways
  - VPN concentrators
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT features (entropy, size, mime_type, extension, user_agent, ip_rep) into Random Forest Model
      | IF classification is 'suspiciously obfuscated' with high confidence
      | ALERT
- question: Is a mobile device receiving multiple small, sequentially-named file fragments from a single source in a short time, suggesting a split archive download?
  context: |
    Adversaries may split a large malicious payload into smaller chunks to evade network inspection tools that have file size limits or to make the traffic pattern less conspicuous. This question looks for the classic signature of this technique: multiple files with names like `archive.z01`, `payload.001`, or `data.part1` being sent from one source to one destination in a tight time window.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points
  - corporate Wi-Fi segments
  - DNS resolvers servicing mobile device clients
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Zeek files.log
      | GROUP BY source_ip, destination_ip within 5 minutes
      | COUNT files matching regex '.*\\.(part[0-9]+|z[0-9]+|r[0-9]+|[0-9]{3})$'
      | IF count > 3
      | ALERT
- question: Are any mobile devices exhibiting an anomalously high 'file velocity' (number of files per minute) from a single source, especially if the source is a newly registered domain?
  context: |
    This is a behavioral approach to detecting file splitting. Instead of looking for specific filenames, it identifies an unusual rate of file downloads from a single source to a single target. By baselining normal behavior, we can flag a sudden, high-volume burst of small files. Correlating this with the age of the source domain adds powerful context, as newly created domains are often used for malicious campaigns.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points
  - corporate Wi-Fi segments
  - DNS resolvers servicing mobile device clients
  range: last 90 days
  queries:
  - pseudocode: |
      CALCULATE file_velocity (files/min) per source_ip/destination_ip
      | IF file_velocity > 3_std_dev_of_baseline
      | CHECK domain age of source_ip
      | ALERT if new domain
- question: Can unsupervised machine learning (clustering) identify anomalous connection patterns indicative of split payload delivery?
  context: |
    This question uses density-based clustering (DBSCAN) to find groups of network connections that do not fit normal patterns. Split payload delivery often creates dense micro-clusters of connections (many small, quick transfers between the same two IPs) that DBSCAN can identify as outliers. This method can uncover this activity without prior knowledge of filenames or transfer rates, making it effective against novel variations of the technique.
  answer_sources:
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points
  - corporate Wi-Fi segments
  - DNS resolvers servicing mobile device clients
  range: last 90 days
  queries:
  - pseudocode: |
      RUN DBSCAN on connection data (src_ip, dst_ip, port, bytes, time_delta)
      | INVESTIGATE outlier clusters or dense micro-clusters
      | CORRELATE IPs with threat intelligence
- question: Is a known encoding or packing utility being used on a developer host, followed immediately by a network connection from that host to a mobile device or file-sharing service?
  context: |
    This question aims to connect suspicious host activity with subsequent network activity to build a complete attack story. It detects the use of tools like `certutil` or `ProGuard` to obfuscate a file on a developer machine, and then correlates that event with the file being transferred off the machine within a short time window. This chained detection is highly effective for identifying the staging and delivery of a malicious payload.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Zeek conn.log
  - Zeek dns.log
  - Developer workstations
  - CI/CD build servers
  - code repositories
  - artifact management systems
  range: last 90 days
  queries:
  - pseudocode: |
      DETECT process creation (Event ID 4688) with command line containing 'certutil -encode', 'ProGuard', etc.
      | WITHIN 10 minutes, CHECK for network connection in Zeek conn.log from same host to mobile_ip_range or file_sharing_domain
      | ALERT
- question: Are there instances of command-line arguments with unusually high entropy on developer hosts, suggesting embedded scripts or encoded data?
  context: |
    Adversaries often pass encoded scripts or data directly on the command line to avoid writing malicious files to disk ("living off the land"). These encoded strings have high entropy. This question focuses on baselining the normal command-line entropy for legitimate processes and alerting when a command line is a statistical outlier, which could reveal this type of obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Zeek conn.log
  - Zeek dns.log
  - Developer workstations
  - CI/CD build servers
  - code repositories
  - artifact management systems
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each process event (Event ID 4688)
      | CALCULATE entropy of command line
      | IF entropy > 98th_percentile_for_process_name
      | ALERT
- question: Are there anomalous parent-child process sequences on developer hosts that deviate from normal build and development workflows?
  context: |
    Legitimate software development involves predictable sequences of processes (e.g., a build tool spawning a compiler). An adversary's actions will likely break these patterns. This question proposes using an LSTM model, which excels at learning sequences, to model normal process chains. The model can then flag anomalous sequences, such as a compiler unexpectedly launching an encoding tool (`javac.exe` -> `certutil.exe`), which strongly indicates malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Zeek conn.log
  - Zeek dns.log
  - Developer workstations
  - CI/CD build servers
  - code repositories
  - artifact management systems
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT parent-child process sequences into LSTM model
      | IF model flags sequence as anomalous (e.g., 'javac.exe -> certutil.exe')
      | CORRELATE with subsequent network activity
      | ALERT
- question: Are mobile devices downloading executable files (e.g., .ipa, .dex, .so) from domains that are not approved app stores or known software repositories?
  context: |
    Mobile operating systems are designed to be walled gardens, with app installations primarily happening through official stores. This question targets a key bypass technique: side-loading or dynamic code loading from an unauthorized source. By maintaining an allowlist of legitimate domains (`*.apple.com`, `*.google.com`, etc.), we can quickly identify and alert on any executable download from a potentially malicious third-party server.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Corporate Wi-Fi access points
  - DNS resolvers
  - network egress points
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH Zeek files.log for downloads with extensions (.dex, .so, .jar, .ipa)
      | CHECK corresponding http.log host
      | IF host NOT IN allowlist
      | ALERT
- question: Are any mobile applications, identified by their User-Agent, downloading file types that are statistically rare or anomalous for that specific application?
  context: |
    Even legitimate applications can be exploited to download malicious content. This question focuses on building a behavioral profile for each app based on its User-Agent string. For example, a weather app normally downloads images and JSON data. If it suddenly downloads a Java Archive (`.jar`) or an executable stream (`application/octet-stream`), this is a strong deviation from its normal behavior. Flagging such statistical rarities can uncover compromised or malicious apps.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Corporate Wi-Fi access points
  - DNS resolvers
  - network egress points
  range: last 90 days
  queries:
  - pseudocode: |
      PROFILE file types per User-Agent over 30 days
      | FOR new downloads, CHECK if file type is rare for that User-Agent (e.g., outside top 99%)
      | ALERT on rare executable types
- question: Can an anomaly detection model (isolation forest) identify unauthorized or suspicious file downloads to mobile devices by scoring the normality of the entire transaction?
  context: |
    This question proposes using an isolation forest, an efficient model for anomaly detection, to find suspicious downloads. The model learns what normal download transactions look like across many features (User-Agent, MIME type, file size, source IP reputation, domain age, etc.). It can then flag transactions that are "easy to isolate" from the norm, effectively pointing analysts to the needle-in-a-haystack downloads that are most likely to be malicious.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Corporate Wi-Fi access points
  - DNS resolvers
  - network egress points
  range: last 90 days
  queries:
  - pseudocode: |
      INPUT features (user_agent, mime_type, size, ip_rep, domain_age) into Isolation Forest model
      | IF download is flagged as an outlier
      | ALERT