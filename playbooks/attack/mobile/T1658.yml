name: T1658: Exploitation for Client Execution
id: 5e6f8b9a-1c2d-4e3f-8a7b-6c5d4e3f2a1b
description: This playbook helps determine if an adversary is exploiting client application vulnerabilities to achieve code execution on managed mobile devices. It focuses on detecting evidence such as mobile applications spawning shell processes or making suspicious network connections to C2 domains, newly registered domains, or raw IPs. It also looks for indicators like a significant increase in application or OS crashes, especially when correlated with the installation of non-sanctioned apps. Finally, it helps identify anomalous peer-to-peer (P2P) traffic, which could be indicative of a zero-click exploit attempt.
type: technique
related: TA0041: Execution
contributors: Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are mobile devices making DNS requests for known malicious or newly registered domains?
  context: This question aims to detect the initial network activity following a successful client-side exploit. When an exploit leads to code execution, the payload often reaches out to a command-and-control (C2) server. By monitoring DNS requests from mobile devices for domains listed on threat intelligence feeds or those that have been registered very recently (e.g., within the last 30 days), security analysts can identify potential C2 communications. Correlating a suspicious DNS query with a subsequent, successful network connection to the resolved IP address provides higher confidence that an actual compromise has occurred.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Corporate Wi-Fi network gateways
  - Cloud-based mobile security gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek dns.log WHERE source_ip IN mobile_device_subnets
      JOIN domain_threat_feed ON query = domain
      OR JOIN newly_registered_domains ON query = domain
      IF match, CORRELATE source_ip, timestamp with Zeek conn.log to verify connection
      ALERT on confirmed connection
- question: Are mobile applications spawning rare or anomalous child processes, or are devices making high-entropy DNS queries?
  context: This question targets two common post-exploitation behaviors on mobile devices. First, an exploited application (like a browser or email client) may spawn an unexpected child process, such as a shell ('/bin/sh') or a command-line tool, to execute further commands. By establishing a baseline of normal parent-child process relationships, analysts can alert on new or statistically rare pairings. Second, malware often uses domain generation algorithms (DGAs) to create a large number of potential C2 domains. These algorithmically generated domains frequently have high character randomness, or entropy. Calculating the entropy of DNS queries and alerting on unusually high scores can effectively uncover DGA-based C2 activity.
  answer_sources:
  - Mobile EDR/MDM process logs
  - Zeek dns.log
  - Mobile Device Management (MDM) servers
  - Endpoint mobile devices
  - Corporate Wi-Fi network gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For process relationships
      BASELINE parent_child_process_pairs from MDM/EDR logs over 30 days
      CALCULATE frequency of each pair
      ALERT on any new pair OR pair with frequency in bottom 1st percentile

      // For DNS entropy
      FOR EACH DNS query in Zeek dns.log
      CALCULATE Shannon entropy of query_name
      ALERT if entropy > 3.5 AND query_name NOT IN allow_list
- question: Can a machine learning model identify malicious network connections from mobile devices based on network log features?
  context: This question proposes a more sophisticated, behavioral approach to detecting malicious network traffic that might evade traditional signature-based methods. By training a machine learning classifier (e.g., Random Forest) on a variety of features extracted from network logs—such as the length and entropy of a DNS query, the top-level domain (TLD), destination port, connection duration, and bytes transferred—it's possible to build a model that scores the likelihood of a connection being malicious. This allows for the detection of novel C2 channels or data exfiltration patterns by identifying connections that, while not matching a specific known-bad indicator, exhibit a collection of suspicious characteristics.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Corporate Wi-Fi network gateways
  - Cloud-based mobile security gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN a Random Forest model on labeled network data
      FEATURES = [dns_query_length, dns_query_entropy, tld, dest_port, duration, bytes_total]
      FOR each new mobile device connection
      SCORE connection using trained model
      ALERT if classification == 'malicious' AND confidence_score > 0.90
- question: Are non-sanctioned applications or configuration profiles being installed on mobile devices, and do these events correlate with subsequent application crashes?
  context: This question focuses on identifying a key entry vector for mobile exploits: the installation of unauthorized software. Adversaries may trick users into installing malicious apps (sideloading) or configuration profiles that compromise device security. A successful exploit often causes instability in the targeted application or the operating system itself, leading to crashes. By monitoring for the installation of any app or profile not on an approved allow-list and then immediately checking for crash logs from that same device within a short time window (e.g., 60 minutes), analysts can quickly connect a policy violation to direct evidence of a potential compromise.
  answer_sources:
  - Mobile OS crash logs
  - Mobile Device Management (MDM) application inventory logs
  - Mobile Device Management (MDM) configuration profile logs
  - Mobile Device Management (MDM) servers
  - Endpoint mobile devices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR MDM logs for app_install OR profile_install events
      IF app_bundle_id NOT IN sanctioned_app_list OR profile_id NOT IN sanctioned_profile_list
      GENERATE high_priority_alert
      ENRICH alert with all crash logs from device in the last 60 minutes
- question: Are individual mobile devices experiencing a statistically significant increase in their crash rate compared to their peers, and does this spike correlate with anomalous network egress?
  context: This question seeks to identify a compromised device by detecting abnormal behavior. An exploit attempt can make a device unstable, causing more crashes than usual. To find this, we can compare a device's hourly crash rate against the normal baseline (mean and standard deviation) of its peer group (e.g., same model and OS). An alert is triggered if a device's crash rate is a statistical outlier (e.g., more than 3 standard deviations above the mean). To add confidence and urgency, this alert can be escalated if the crash spike is temporally correlated with anomalous network behavior, such as a sudden increase in outbound data transfer, which could signify data exfiltration by the malware.
  answer_sources:
  - Mobile OS crash logs
  - Mobile Device Management (MDM) application inventory logs
  - Zeek conn.log
  - Mobile Device Management (MDM) servers
  - Endpoint mobile devices
  - Corporate Wi-Fi network gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each device cohort (model, os_version)
      CALCULATE 30-day rolling mean and std_dev of hourly crash rate
      ALERT if device_hourly_crashes > (cohort_mean + 3 * cohort_std_dev)
      IF alert, CHECK device outbound_byte_ratio in Zeek conn.log within last 15 mins
      ESCALATE alert if ratio > 98th percentile of device's 30-day history
- question: Can time-series and clustering models detect widespread exploit campaigns or identify outlier applications indicative of sideloading?
  context: This question proposes using advanced analytics to detect large-scale attacks and high-risk applications. First, a time-series anomaly detection model (like ARIMA) can monitor the fleet-wide rate of critical crashes (e.g., WebKit crashes). A sudden, synchronized spike across many devices would strongly indicate a widespread "zero-day" exploit campaign. Second, an unsupervised clustering algorithm (like DBSCAN) can analyze application metadata from the MDM (e.g., permissions requested, signing certificate). This model can identify "outlier" applications that do not group with common, legitimate apps, pointing to potentially trojanized or sideloaded software that needs investigation.
  answer_sources:
  - Mobile OS crash logs
  - Mobile Device Management (MDM) application inventory logs
  - Mobile Device Management (MDM) servers
  - Endpoint mobile devices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // For campaign detection
      DEPLOY time-series model (ARIMA/LSTM) on fleet-wide rate of 'WebKit Process Crash'
      ALERT on anomalous spike across multiple devices

      // For outlier app detection
      DEPLOY clustering model (DBSCAN) on MDM app inventory
      FEATURES = [permissions, certificate_authority, app_name_similarity]
      ALERT on apps classified as outliers
- question: Is unauthorized peer-to-peer traffic (e.g., Apple Wireless Direct Link) occurring on the corporate wireless network?
  context: This question targets sophisticated, proximity-based attacks, such as "zero-click" exploits, that leverage device-to-device communication protocols like Apple Wireless Direct Link (AWDL). On a managed corporate wireless network, this type of P2P traffic is highly anomalous and often against security policy. Detecting IPv6 link-local addresses (fe80::/10), characteristic of AWDL, in network logs should trigger a high-severity alert. This provides an opportunity to detect an exploit attempt at its earliest stage, before code execution or C2 communication may have even occurred.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Mobile OS crash logs
  - Mobile EDR/MDM process logs
  - Corporate Wi-Fi network gateways
  - Endpoint mobile devices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek conn.log WHERE destination_ip IN fe80::/10 AND network_segment == 'corporate_wifi'
      OR SEARCH Zeek notice.log WHERE notice_type == 'AWDL_Known_Service'
      TRIGGER high-severity alert
      CORRELATE device with MDM logs to check for legitimate user-initiated P2P activity
- question: Are mobile devices exhibiting anomalous levels of peer-to-peer traffic, especially when temporally correlated with system crashes?
  context: This question provides a way to detect malicious P2P activity even in environments where some P2P communication might be normal. Instead of blocking all P2P traffic, this approach establishes a historical baseline for each individual device's P2P connection count and data volume. An alert is generated when a device's P2P traffic dramatically exceeds its own normal behavior (e.g., goes above the 99th percentile). The risk score of this alert is significantly increased if the P2P traffic anomaly occurs within a few minutes of a system crash on the same device, as this temporal correlation strongly suggests a P2P-based exploit was the cause of the instability.
  answer_sources:
  - Zeek conn.log
  - Mobile OS crash logs
  - Corporate Wi-Fi network gateways
  - Endpoint mobile devices
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each device, BASELINE hourly P2P connection count and data volume over 30 days
      ALERT if device_hourly_p2p_traffic > 99th percentile of its history
      IF alert, CHECK for crash logs in MDM for same device within last 5 minutes
      INCREASE risk score if crash is found
- question: Can an unsupervised anomaly detection model identify suspicious device-to-device communications on the internal wireless network?
  context: This question aims to find novel or unknown P2P-based threats using machine learning. By applying an unsupervised anomaly detection model, such as an Isolation Forest, to intra-WLAN connection data, we can teach the system what "normal" device-to-device communication looks like. The model learns from features like the protocol, port, connection duration, and amount of data transferred. Any future connection that deviates significantly from this learned norm will be flagged as an anomaly. This is particularly useful for detecting zero-click exploits that use non-standard ports or unusual communication patterns that would not be caught by signature-based rules.
  answer_sources:
  - Zeek conn.log
  - Corporate Wi-Fi network gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      TRAIN an Isolation Forest model on intra-WLAN connection data from Zeek conn.log
      FEATURES = [protocol, dest_port, duration, byte_volume, periodicity]
      FOR each new device-to-device connection
      SCORE connection using trained model
      ALERT on connections with a high anomaly score