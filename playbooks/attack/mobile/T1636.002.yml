name: 'T1636.002: Call Log'
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is collecting call log data from managed mobile devices. The investigation focuses on identifying applications with permissions to read call logs that are not on the corporate allowlist, monitoring for runtime API calls to the call log content provider from unapproved processes, and correlating anomalous network traffic with the recent installation of applications that have call log access permissions.
type: technique
related:
  - 'TA0035: Collection'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any applications on managed mobile devices that request 'READ_CALL_LOG' permission but are not on the corporate application allowlist?
    context: This question aims to identify potentially malicious or unauthorized applications that have the capability to access sensitive call log data. By comparing apps with this permission against a known-good allowlist, we can quickly flag suspicious installations that bypass corporate policy and may be used for data collection.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          apps_with_permission = SEARCH UEM logs WHERE permission == 'android.permission.READ_CALL_LOG'
          allowlist = GET corporate_allowlist
          FOR app in apps_with_permission:
            IF app.package_name NOT IN allowlist.package_names OR app.certificate NOT IN allowlist.certificates:
              ALERT high_severity "Unauthorized app with call log permission"
  - question: Is the 'android.permission.READ_CALL_LOG' permission statistically rare in our environment, and if so, which applications are requesting it?
    context: This question uses statistical analysis to find outliers. Permissions that are rarely requested across the device fleet are more likely to be associated with specialized, and potentially malicious, functionality. Identifying an app with a rare, high-risk permission like `READ_CALL_LOG` provides a strong signal for further investigation, even if the app is not explicitly blocklisted.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          permission_counts = COUNT permissions in UEM logs
          rare_permissions = CALCULATE 99th_percentile_rarity(permission_counts)
          IF 'android.permission.READ_CALL_LOG' IN rare_permissions:
            apps_with_rare_permission = SEARCH UEM logs WHERE permission == 'android.permission.READ_CALL_LOG'
            FOR app in apps_with_rare_permission:
              ALERT medium_severity "App with statistically rare call log permission"
  - question: Has a machine learning model identified any applications with 'READ_CALL_LOG' permission as malicious or potentially unwanted with high confidence?
    context: This question leverages a machine learning model to perform a deeper, more nuanced analysis of an application's characteristics beyond just its requested permissions. If an app requests call log access and an ML model, trained to recognize malicious behavior, flags it with high confidence (>0.85), it signifies a critical threat that warrants immediate automated blocking and incident response.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          apps_with_permission = SEARCH UEM logs WHERE permission == 'android.permission.READ_CALL_LOG'
          FOR app in apps_with_permission:
            ml_result = ANALYZE app with ML_model
            IF (ml_result.classification == 'malicious' OR ml_result.classification == 'PUA') AND ml_result.confidence > 0.85:
              BLOCK app
              ALERT critical_incident "ML detected malicious app with call log permission"
  - question: Has an unapproved process been observed accessing the Android call log content provider at runtime?
    context: This question focuses on detecting the actual act of accessing call log data at runtime, rather than just the static permission. By monitoring for API calls to the 'content://call_log/calls' URI and checking the responsible process's hash against an allowlist, we can identify unauthorized applications that are actively attempting to collect call data. This provides high-fidelity evidence of malicious activity.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          access_events = SEARCH EDR logs WHERE api_call_uri == 'content://call_log/calls'
          allowlist_hashes = GET process_hash_allowlist
          FOR event in access_events:
            IF event.process_sha256 NOT IN allowlist_hashes:
              ALERT high_severity "Unapproved process accessed call log"
  - question: Is any application accessing the call log with a frequency that is anomalously high compared to its own historical baseline?
    context: This question seeks to detect unusual behavior from otherwise legitimate or unknown applications. An application might have a valid reason to access the call log, but a sudden, dramatic spike in access frequency can indicate that the app has been compromised or is performing an illicit data collection task. Detecting a deviation of more than three standard deviations from the norm is a common statistical method for identifying such anomalies.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each (app, device):
            baseline = CALCULATE 14-day_rolling_baseline(app, device, 'content://call_log/calls')
            current_hour_count = COUNT accesses in last hour
            IF current_hour_count > (baseline.mean + 3 * baseline.std_dev):
              ALERT medium_severity "Anomalous call log access frequency"
  - question: Has an anomalous sequence of API calls, involving call log access followed by suspicious actions like network activity or encryption, been detected?
    context: This question looks for a chain of suspicious behaviors, which is a stronger indicator of malicious intent than a single action. A sequence analysis model (like an LSTM) learns the normal "grammar" of an application's API calls. When it detects an unusual sequence, such as reading the call log and then immediately trying to send data over the network, it provides a high-confidence signal of an active attack, warranting a critical alert.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          api_sequences = STREAM real-time API calls
          FOR sequence in api_sequences:
            is_anomalous = ANALYZE sequence with LSTM_model
            IF is_anomalous AND 'content://call_log/calls' in sequence AND (network_call in sequence OR crypto_call in sequence) within 60s:
              ALERT critical_alert "Anomalous API sequence involving call log"
  - question: Has a device connected to a known command-and-control (C2) server shortly after installing an application with call log access permissions?
    context: This question correlates multiple, distinct data sources to uncover a clear attack pattern. The installation of an app with risky permissions, followed by network communication to a known malicious destination, is a classic indicator of compromise. This multi-conditional correlation provides extremely high-fidelity alerts, pointing directly to a compromised device.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          c2_list = GET threat_intel_feed
          app_installs = SEARCH UEM logs WHERE permission == 'READ_CALL_LOG'
          FOR install in app_installs:
            connections = SEARCH network logs WHERE source_ip == install.device_ip AND time < install.time + 24h
            FOR conn in connections:
              IF conn.dest_ip IN c2_list OR conn.dest_domain IN c2_list:
                ALERT critical_alert "Device connected to C2 after installing app with call log permission"
  - question: Is a device exhibiting an unusual spike in outbound network traffic shortly after an application with call log permissions was installed?
    context: This question aims to detect data exfiltration. A significant, anomalous increase in outbound traffic (exceeding the 98th percentile baseline) is suspicious on its own. When this occurs within 24 hours of installing an app that can read sensitive data like call logs, it strongly suggests the app is exfiltrating that data. Enriching the alert with DNS query entropy helps to further qualify the threat, as high entropy can indicate the use of Domain Generation Algorithms (DGA).
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          app_installs = SEARCH UEM logs WHERE permission == 'READ_CALL_LOG' and time > now() - 24h
          FOR device in managed_devices:
            baseline = CALCULATE 30-day_98th_percentile_traffic(device)
            current_traffic = CALCULATE traffic in last hour
            IF current_traffic > baseline AND device in app_installs.devices:
              dns_entropy = CALCULATE shannon_entropy(device.dns_queries in last hour)
              ALERT high_severity "Anomalous traffic after app install. DNS Entropy: " + dns_entropy
  - question: Have advanced machine learning models detected both anomalous outbound traffic volume and outlier network flow characteristics on a device shortly after an app with call log permissions was installed?
    context: This question uses a sophisticated, two-pronged ML approach for high-confidence threat detection. A time-series model detects when traffic volume is abnormal, while a clustering algorithm detects what about the network connection itself is abnormal (e.g., unusual port, JA3/JA3S hash). When both models flag an anomaly correlated with the recent installation of an app that can read call logs, it provides a very strong signal of data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: Last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          app_installs = SEARCH UEM logs WHERE permission == 'READ_CALL_LOG' and time > now() - 24h
          FOR device in managed_devices:
            traffic_anomaly = PREDICT traffic_anomaly with ARIMA_model
            flow_anomaly = DETECT outlier_flow with DBSCAN_model
            IF traffic_anomaly AND flow_anomaly AND device in app_installs.devices:
              ALERT critical_alert "ML detected traffic and flow anomaly after app install"