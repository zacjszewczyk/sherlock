name: "T1628: Hide Artifacts"
id: "9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d"
description: "Investigates whether an adversary is hiding artifacts on managed mobile devices to evade detection. This includes looking for application packages installed on a device that have no launcher icon and are not on the corporate whitelist, as well as identifying running processes that do not correspond to any formally installed application package in the device's inventory."
type: "technique"
related: "TA0030: Defense Evasion"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any installed applications without a launcher icon that are not on the corporate whitelist and match known threats?"
    context: "This question aims to identify potentially malicious applications that are hiding from the user by not having a visible icon in the application launcher. The query first finds all such 'iconless' apps and filters out legitimate, known applications using a corporate whitelist. The remaining suspicious apps are then checked against a threat intelligence platform to see if they are known malware or part of a threat campaign. A match indicates a high-probability threat on the device."
    answer_sources: "MDM/UEM Application Inventory Log, Corporate Application Whitelist Database, Threat Intelligence Platform (TIP) Data, MDM/UEM management console and underlying database, The population of managed corporate-owned and BYOD mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "SELECT package_name, hash FROM mdm_logs WHERE has_launcher_icon IS false AND package_name NOT IN (SELECT package_name FROM whitelist); FOREACH result, QUERY tip_data WHERE hash = result.hash;"
  - question: "Can we identify suspicious iconless applications or devices by analyzing their rarity, density, or permission complexity?"
    context: "This question uses statistical methods to surface anomalies that might indicate malicious activity, even without a direct threat intelligence match. It operates on three principles: 1) Malicious apps are often not widely distributed, so rare apps are suspicious. 2) A device with an unusually high number of hidden apps may be compromised. 3) Malicious apps may request an abnormally large or diverse set of permissions, which can be measured by Shannon entropy. By flagging outliers in these three areas, analysts can prioritize devices and applications for deeper investigation."
    answer_sources: "MDM/UEM Application Inventory Log, Corporate Application Whitelist Database, Threat Intelligence Platform (TIP) Data, MDM/UEM management console and underlying database, The population of managed corporate-owned and BYOD mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "1. CALCULATE prevalence of all iconless, non-whitelisted apps; FLAG apps with prevalence < 5th percentile. 2. COUNT iconless, non-whitelisted apps per device; FLAG devices with count > 98th percentile. 3. CALCULATE permission entropy for iconless apps; FLAG apps with entropy > (mean_entropy_whitelisted + 2 * std_dev)."
  - question: "Can a machine learning model predict whether a non-whitelisted, iconless application is malicious?"
    context: "This question involves building a predictive model to automate the detection of malicious hidden applications. By training a classifier (like Random Forest) on features such as installation rarity, app store source, and permission patterns, the model learns to distinguish between benign and malicious characteristics. Once deployed, it can score new applications in near-real-time, automatically flagging those with a high probability of being malicious ($$ > 0.85 $$) for quarantine and analyst review, thereby scaling the detection process."
    answer_sources: "MDM/UEM Application Inventory Log, Corporate Application Whitelist Database, Threat Intelligence Platform (TIP) Data, MDM/UEM management console and underlying database, The population of managed corporate-owned and BYOD mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "TRAIN classifier_model ON labeled_data(features: prevalence, source, permissions_count, permissions_entropy, high_risk_permissions); FOR new_app, PREDICT score = classifier_model(new_app.features); IF score > 0.85, TRIGGER alert;"
  - question: "Are there any running processes on devices that do not belong to a known, installed application and match a known threat?"
    context: "This question seeks to identify 'rogue' processes that may be running from sources other than a properly installed application, a technique used by adversaries to evade detection (e.g., fileless malware). The query compares the list of running processes from a Mobile Threat Protection (MTP) agent against the official application inventory from MDM. Any process that cannot be mapped to an installed app is considered suspicious and is checked against threat intelligence feeds for known indicators of compromise."
    answer_sources: "Mobile Threat Protection (MTP) Process Execution Log, MDM/UEM Application Inventory Log, Threat Intelligence Platform (TIP) Data, Mobile Threat Protection (MTP) platform console, MDM/UEM management console, Endpoint file systems and process tables on managed mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each device: GET running_processes from MTP; GET installed_apps from MDM; FIND unmapped_processes = running_processes - installed_apps; FOREACH process in unmapped_processes, QUERY tip_data WHERE hash = process.hash;"
  - question: "Do any devices have a set of unmapped (rogue) processes that significantly deviates from a known-good baseline?"
    context: "This question uses a baselining approach to detect anomalies. It acknowledges that some unmapped processes might be legitimate (e.g., system processes not tracked by MDM). A 'golden' baseline of these normal, unmapped processes is created from trusted devices. The set of unmapped processes on every other device is then compared to this baseline using Jaccard similarity. A low score ($$ < 0.5 $$) means the device has a very different set of unmapped processes, indicating a significant deviation that could be caused by malware or an unauthorized tool."
    answer_sources: "Mobile Threat Protection (MTP) Process Execution Log, MDM/UEM Application Inventory Log, Threat Intelligence Platform (TIP) Data, Mobile Threat Protection (MTP) platform console, MDM/UEM management console, Endpoint file systems and process tables on managed mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "CREATE baseline_set of unmapped processes from golden_devices; FOR each device: GET device_set of unmapped processes; CALCULATE jaccard_similarity(baseline_set, device_set); IF similarity < 0.5, FLAG device;"
  - question: "Can a time-series model detect an abnormal increase in the number of unmapped processes on a device over time?"
    context: "This question applies machine learning to monitor the behavior of unmapped processes over time. Instead of just looking at a snapshot, it analyzes the trend of how many unmapped processes are running. A model like an LSTM Autoencoder is trained to recognize the normal rhythm of these processes appearing and disappearing. If a device suddenly shows a sustained, high count of unmapped processes that doesn't fit the learned pattern, the model flags it as an anomaly. This is effective for detecting threats that establish persistence by running continuously in the background."
    answer_sources: "Mobile Threat Protection (MTP) Process Execution Log, MDM/UEM Application Inventory Log, Threat Intelligence Platform (TIP) Data, Mobile Threat Protection (MTP) platform console, MDM/UEM management console, Endpoint file systems and process tables on managed mobile devices."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each device, CREATE time_series of hourly_unmapped_process_count; TRAIN lstm_autoencoder_model ON historical_fleet_data; FOR each device, CALCULATE reconstruction_error = model(device_time_series); IF error > dynamic_threshold, TRIGGER alert;"