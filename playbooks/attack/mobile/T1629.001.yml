name: T1629.001: Prevent Application Removal
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is preventing the removal of malicious applications on managed mobile devices. This involves checking for applications with high-risk permissions ('Device Administrator', 'Accessibility Service') that are not on an allow-list or have suspicious package names (high entropy, low Levenshtein distance to known apps). It also looks for programmatic attempts to block uninstallation, such as an app forcing a 'back' or 'home' action immediately after a user tries to uninstall it. Finally, it correlates high-risk permission grants with suspicious network activity, like connecting to newly registered domains or exhibiting beaconing behavior.
type: technique
related:
- TA0030: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an application been granted 'Device Administrator' or 'Accessibility Service' permissions that is not on our corporate allow-list?
  context: This question aims to identify potentially malicious applications that have been granted high-risk permissions. 'Device Administrator' and 'Accessibility Service' permissions can be abused to prevent uninstallation or perform other malicious actions. By cross-referencing granted permissions with a list of approved corporate applications, we can quickly flag unauthorized and potentially dangerous software on managed devices.
  answer_sources:
  - MDM/EMM application inventory logs
  - MDM/EMM permission audit logs
  - MDM/EMM Management Server
  - Managed Mobile Device Fleet
  - Centralized Log Aggregator (SIEM)
  range: Last 90 days
  queries:
  - pseudocode: SEARCH MDM/EMM logs FOR permission_grant = ('Device Administrator' OR 'Accessibility Service') | WHERE package_name NOT IN allow_list | ALERT high_severity
- question: Does an application with high-risk permissions have a suspicious package name, either through high entropy or by mimicking a legitimate application name?
  context: Adversaries often create package names that are either randomly generated (high Shannon entropy) or designed to look like legitimate applications (low Levenshtein distance to known app names). This question helps detect these evasion techniques for applications that have already been granted dangerous permissions, serving as a secondary check for potential malware.
  answer_sources:
  - MDM/EMM application inventory logs
  - MDM/EMM permission audit logs
  - MDM/EMM Management Server
  - Managed Mobile Device Fleet
  - Centralized Log Aggregator (SIEM)
  range: Last 90 days
  queries:
  - pseudocode: SEARCH MDM/EMM logs FOR permission_grant = ('Device Administrator' OR 'Accessibility Service') | CALCULATE shannon_entropy(package_name) AND levenshtein_distance(package_name, high_value_app_list) | WHERE shannon_entropy > baseline_95th_percentile OR levenshtein_distance <= 2 | ALERT
- question: Based on its metadata, does a newly permissioned application exhibit characteristics of malware according to our machine learning model?
  context: This question leverages a pre-trained classification model to provide a probabilistic assessment of an application's maliciousness. By feeding metadata like package name entropy, permissions, and app store source into the model, we can automate the detection of complex threats that might evade simpler rule-based checks. A high probability score would trigger an automated response, like quarantining the device.
  answer_sources:
  - MDM/EMM application inventory logs
  - MDM/EMM permission audit logs
  - MDM/EMM Management Server
  - Managed Mobile Device Fleet
  - Centralized Log Aggregator (SIEM)
  range: Last 90 days
  queries:
  - pseudocode: INPUT app_metadata(package_name, permissions, etc.) INTO classification_model | IF model_output_probability > 0.90 | ALERT critical_severity AND TRIGGER quarantine_api_call
- question: Has a non-system application programmatically forced a user back to the home screen or previous screen immediately after they attempted to access the uninstall menu?
  context: This question targets a specific behavior where malware with Accessibility Service permissions intercepts a user's attempt to remove it. By detecting the performGlobalAction API call for 'BACK' or 'HOME' immediately following navigation to the uninstall screen, we can identify applications actively preventing their own removal.
  answer_sources:
  - Mobile Threat Defense (MTD) API call logs
  - Endpoint Detection and Response (EDR) for Mobile logs
  - Managed Mobile Device Fleet
  - Mobile Threat Defense (MTD) Console
  - SIEM
  range: Last 90 days
  queries:
  - pseudocode: CORRELATE on device_id within 2s: (event = 'navigate_to_uninstall_screen') FOLLOWED BY (event = 'performGlobalAction' AND action IN ('GLOBAL_ACTION_BACK', 'GLOBAL_ACTION_HOME') AND application_is_not_system) | ALERT critical_severity
- question: Is any application making an anomalously high number of `performGlobalAction` API calls compared to its own baseline?
  context: While a single `performGlobalAction` call might be legitimate, a sudden spike in frequency for a specific application can indicate malicious activity, such as repeatedly blocking a user's actions. This question uses statistical analysis (3 standard deviations above a 14-day rolling baseline) to detect anomalous behavior that might otherwise be missed.
  answer_sources:
  - Mobile Threat Defense (MTD) API call logs
  - Endpoint Detection and Response (EDR) for Mobile logs
  - Managed Mobile Device Fleet
  - Mobile Threat Defense (MTD) Console
  - SIEM
  range: Last 90 days
  queries:
  - pseudocode: FOR each application, CALCULATE 14-day_baseline(hourly_frequency(performGlobalAction)) | IF current_hourly_frequency > (baseline + 3 * stdev(baseline)) | ALERT medium_severity
- question: Has a machine learning model detected an anomalous sequence of user interface interactions, specifically an uninstall attempt followed by a 'back' or 'home' action?
  context: This question uses a sophisticated sequence-to-sequence model to understand normal user behavior patterns. The model can detect subtle, context-specific anomalies that correlation rules might miss. An alert is triggered when the model identifies a high-anomaly sequence, such as an attempt to access app settings or uninstall an app being immediately and illegitimately interrupted.
  answer_sources:
  - Mobile Threat Defense (MTD) API call logs
  - Endpoint Detection and Response (EDR) for Mobile logs
  - Managed Mobile Device Fleet
  - Mobile Threat Defense (MTD) Console
  - SIEM
  range: Last 90 days
  queries:
  - pseudocode: INPUT real-time_ui_event_stream INTO sequence_model | IF model_detects_anomaly_score > threshold FOR sequence('uninstall_event' -> 'anomalous_global_action_event') | ALERT
- question: Did a device connect to a newly registered domain or a known-bad destination within 60 minutes of an application receiving high-risk permissions?
  context: This question correlates a high-risk event on the device (permission grant) with suspicious network activity. Malicious applications often communicate with command-and-control (C2) servers hosted on newly registered domains or IPs listed in threat intelligence feeds. This correlation provides strong evidence that the newly permissioned app is malicious.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM/EMM permission audit logs
  - Network Gateway Firewalls
  - Internal DNS Servers
  - Network Security Monitoring (NSM) Sensor Grid at egress points
  - MDM/EMM Management Server
  range: Last 90 days
  queries:
  - pseudocode: TRIGGER on MDM_alert(high_risk_permission_grant) | FOR device_ip in next 60m, SEARCH Zeek logs | ENRICH destination_ip/domain with threat_intel AND whois | IF destination in threat_feed OR domain_age < 30_days | ALERT high_severity
- question: Is a device, which recently granted high-risk permissions to an app, exhibiting network beaconing or using rare TLS/SSL fingerprints?
  context: This question hunts for C2 communication patterns. Beaconing is characterized by periodic connections of a fixed size, which can be detected by analyzing the standard deviation of time deltas and connection sizes. Additionally, malware often uses unique or rare TLS/SSL libraries, resulting in JA3/JA3S hashes that are uncommon within the organization, providing another indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM/EMM permission audit logs
  - Network Gateway Firewalls
  - Internal DNS Servers
  - Network Security Monitoring (NSM) Sensor Grid at egress points
  - MDM/EMM Management Server
  range: Last 90 days
  queries:
  - pseudocode: FOR device_traffic after high-risk_grant, ANALYZE Zeek conn.log | CALCULATE stdev(time_delta_between_connections) AND stdev(total_bytes) to same destination | IF stdev_time ~ 0 AND stdev_bytes ~ 0 | ALERT beaconing | ANALYZE JA3/JA3S hashes from Zeek ssl.log | IF hash_prevalence < 1% | ALERT rare_fingerprint
- question: Following a high-risk permission grant, has the device's network traffic pattern significantly deviated from its normal, machine-learned baseline?
  context: This question uses an LSTM autoencoder model to establish a baseline of normal network behavior for each individual device. A significant deviation from this profile, measured by a high reconstruction error after a high-risk permission grant, indicates a strong likelihood of compromise. This anomaly detection method can catch novel threats that don't match predefined rules or signatures.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - MDM/EMM permission audit logs
  - Network Gateway Firewalls
  - Internal DNS Servers
  - Network Security Monitoring (NSM) Sensor Grid at egress points
  - MDM/EMM Management Server
  range: Last 90 days
  queries:
  - pseudocode: INPUT device_network_telemetry INTO LSTM_autoencoder_model | AFTER high-risk_permission_grant, IF model_reconstruction_error > 99th_percentile_of_historical_error | ALERT high_severity_anomaly