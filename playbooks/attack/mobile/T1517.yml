name: 'T1517: Access Notifications'
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversarial attempts to intercept sensitive information, such as one-time passwords (OTPs) or multi-factor authentication (MFA) codes, from mobile device notifications. It provides investigative steps to identify unapproved applications gaining notification access, analyze anomalous network behavior indicative of command-and-control (C2) communication or data exfiltration, and detect the programmatic dismissal of sensitive notifications. The playbook also addresses the detection of data exfiltration by correlating user-reported issues (e.g., help desk tickets for missing MFA codes) with suspicious on-device activities and monitoring for unusual spikes in background data transfers from applications with notification permissions.
type: technique
related:
  - 'TA0031: Credential Access'
  - 'TA0035: Collection'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an unapproved or tampered application gaining access to notifications?
    context: This question aims to identify potentially malicious applications that have been granted the highly sensitive `BIND_NOTIFICATION_LISTENER_SERVICE` permission. By comparing the application's package name and signing certificate against a corporate allowlist, we can detect unauthorized software or legitimate apps that have been modified (tampered), which could be a sign of a supply chain attack or a Trojanized app designed to steal notification data like MFA codes.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform
      - Mobile Threat Defense (MTD) cloud console
      - Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist
    range: last 90 days
    queries:
      - pseudocode: SEARCH MDM logs for 'BIND_NOTIFICATION_LISTENER_SERVICE' permission grants. JOIN results with corporate allowlist on app_package_name and signing_cert_hash. ALERT on no match.
  - question: Is a rare or unusual application with notification access installed on managed devices?
    context: This question uses statistical analysis to surface high-risk applications that might otherwise go unnoticed. An application with sensitive permissions that is installed on very few devices (a statistical outlier, e.g., $$ P_{install} < 0.05 $$) is inherently more suspicious than a widely deployed, well-known app. Further analyzing its permission set against typical apps in its category (using Jaccard distance) helps quantify how unusual its behavior is, providing a data-driven approach to risk assessment.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform
      - Mobile Threat Defense (MTD) cloud console
      - Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist
    range: last 90 days
    queries:
      - pseudocode: FOR each unlisted app with notification access, COUNT installations across all devices. IF install_count < 1% of total devices, FLAG as outlier. CALCULATE Jaccard distance of permissions vs. category average. HIGHLIGHT high distance scores.
  - question: Does a machine learning model classify an application with notification access as potentially malicious?
    context: This question leverages machine learning to automate the risk assessment of applications. By training a model on features like permissions, developer reputation, and code obfuscation, we can predict the likelihood that an app is malicious. This provides a scalable, automated way to flag high-risk applications (e.g., predicted probability > 0.85) for review or quarantine, reducing analyst workload and response time.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform
      - Mobile Threat Defense (MTD) cloud console
      - Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist
    range: last 90 days
    queries:
      - pseudocode: FOR each app with notification access, EXTRACT metadata features. INPUT features into trained classification model. IF malicious_probability > 0.85, ADD to watchlist or QUARANTINE via MDM.
  - question: Is an application with notification access communicating with known malicious infrastructure?
    context: This question seeks to find direct evidence of malicious activity by correlating application permissions with network traffic. An app that can read notifications and is also communicating with an IP address or domain on a threat intelligence feed, or using a TLS fingerprint (JA3/JA3S) associated with malware, is a very strong indicator of compromise and data exfiltration.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed
      - SIEM platform containing correlated MDM and network logs
    range: last 90 days
    queries:
      - pseudocode: SEARCH for apps with notification access from MDM logs. JOIN with network logs on device_ip. CHECK destination_ip and SNI against threat intel feeds. CHECK JA3/JA3S hash against malware fingerprint list. ALERT on any match.
  - question: Is an application with notification access exhibiting network behavior indicative of C2 communication, such as DGA or beaconing?
    context: This question looks for subtle, algorithm-driven command-and-control (C2) patterns that may not be caught by simple signature-based detection. High Shannon entropy in DNS queries ($$ H(X) = - \sum p(x) \log_2 p(x) $$) can indicate Domain Generation Algorithms (DGA) used by malware to find C2 servers, while highly periodic, small network connections (beaconing) identified via Fast Fourier Transform (FFT) can reveal a 'heartbeat' to an attacker's infrastructure.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed
      - SIEM platform containing correlated MDM and network logs
    range: last 90 days
    queries:
      - pseudocode: FOR each app with notification access, ANALYZE DNS logs. CALCULATE Shannon entropy of domain names. ALERT on spikes. ANALYZE connection timestamps with FFT. ALERT on periodic beaconing patterns.
  - question: Is an application with notification access generating network traffic that is anomalous compared to its normal behavior?
    context: This question uses a sophisticated machine learning model (an LSTM autoencoder) to learn the 'normal' network behavior of an application and then flag deviations. A high reconstruction error means the model was unable to predict the observed traffic based on its training, indicating a significant anomaly. This is particularly useful for detecting novel or evasive C2 techniques, especially when the app is supposed to be in the background.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed
      - SIEM platform containing correlated MDM and network logs
    range: last 90 days
    queries:
      - pseudocode: FEED network flow features (bytes, duration, protocol) into LSTM autoencoder. IF reconstruction_error is high for a flow from a notification-accessing app, especially in background state, ALERT as anomalous C2.
  - question: Is a sensitive notification (e.g., from an authenticator app) being dismissed almost instantly by another application?
    context: This question aims to detect the core malicious action of an adversary stealing a one-time password. A legitimate user interaction involves seeing a notification and then acting on it. A programmatic dismissal by a different application within seconds of the notification's arrival is highly indicative of an automated process designed to intercept the code before the user can see it.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console
      - SIEM platform for log correlation
    range: last 90 days
    queries:
      - pseudocode: CORRELATE notification_posted logs with notification_dismissed logs on notification_id. IF source_app is authenticator AND dismissing_app is different AND time_delta < 2s, ALERT.
  - question: Is an application dismissing notifications significantly faster than its own typical behavior?
    context: This question uses statistical baselining to detect anomalous behavior on a per-application basis. Even if an app legitimately dismisses notifications, an unusually fast dismissal (a statistical outlier, e.g., $$ T_{dismiss} < P_{5} $$) could signify that a specific, targeted notification (like an MFA code) was programmatically intercepted, rather than being part of a normal user interaction.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console
      - SIEM platform for log correlation
    range: last 90 days
    queries:
      - pseudocode: FOR each app with notification access, CALCULATE baseline of notification dismissal times. IF a dismissal time < 5th percentile of baseline, especially for an authenticator app notification, FLAG as outlier.
  - question: Does the sequence of user and application events surrounding a notification dismissal deviate from normal, learned patterns?
    context: This question models the entire user interaction workflow as a sequence of events. A normal sequence might be [Notification Arrives -> User Dismisses -> User Opens App]. By training a model on these normal sequences, we can detect anomalous patterns like [Notification Arrives -> App B Dismisses -> No User Action], which strongly implies automated, non-interactive data harvesting.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console
      - SIEM platform for log correlation
    range: last 90 days
    queries:
      - pseudocode: TRAIN RNN model on sequences of [notification_posted, notification_dismissed, app_launched]. FEED live event sequences to model. IF anomalous sequence like [Posted -> Dismissed by Other App -> No Launch] is detected, ALERT.
  - question: Is there a temporal correlation between a user reporting a missing MFA/OTP notification and a recent, suspicious application event on their device?
    context: This question leverages human-generated signals (a user filing a help desk ticket) as a trigger for a targeted technical investigation. A user reporting a missing MFA code is a strong indicator of a potential problem. Correlating this report with a recent app installation or a sensitive permission grant on that user's device within a tight time window can quickly pinpoint the likely cause of the credential theft attempt.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow)
      - Centralized SIEM platform
      - MDM/UEM management console
      - User's managed mobile device
    range: last 90 days
    queries:
      - pseudocode: PARSE help desk tickets for 'MFA', 'OTP', etc. ON match, GET user and timestamp. QUERY MDM logs for that user's device for new app installs or 'BIND_NOTIFICATION_LISTENER_SERVICE' grants within +/- 15 mins of ticket time. ALERT on correlation.
  - question: Did an application on the user's device exhibit a significant spike in background data usage around the time they reported a missing notification?
    context: Following a user report of a missing MFA code, this question looks for evidence of data exfiltration. A sudden, statistically significant increase (e.g., Z-score > 3) in an app's background data transfer, especially for an app with notification access, strongly suggests that it intercepted the sensitive data and immediately sent it to an external server.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow)
      - Centralized SIEM platform
      - MDM/UEM management console
      - User's managed mobile device
    range: last 90 days
    queries:
      - pseudocode: ON user report of missing MFA, GET device logs. FOR each app, CALCULATE Z-score of background data usage around incident time compared to 30-day baseline. IF Z-score > 3 for an app with notification access, FLAG for forensic review.
  - question: Can an NLP model automatically identify and prioritize help desk tickets that are likely related to notification-based credential theft?
    context: This question focuses on improving the efficiency and speed of response by automating the initial triage of help desk tickets. An NLP model can parse the unstructured text in a ticket to accurately classify its intent, automatically flagging tickets related to this specific threat (e.g., classification probability > 0.90), assigning a critical priority, and triggering subsequent automated investigation steps.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow)
      - Centralized SIEM platform
      - MDM/UEM management console
      - User's managed mobile device
    range: last 90 days
    queries:
      - pseudocode: FEED help desk ticket text into NLP model. IF model classifies ticket as 'credential theft via notification' with probability > 0.90, ESCALATE priority and TRIGGER automated device investigation playbooks.
  - question: Is an application with notification access communicating over an unexpected network port or showing signs of an unstable connection?
    context: This question uses rule-based logic to detect suspicious network behavior. Applications typically communicate over expected, standard ports. An app with sensitive permissions sending data over a non-standard port is a red flag. Additionally, connection-level issues like retransmissions (seen in Zeek's `history` field) combined with large data transfers can indicate an attacker struggling to exfiltrate data over an unreliable C2 channel.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies
      - SIEM platform for log correlation and analysis
    range: last 90 days
    queries:
      - pseudocode: FOR apps with notification access, MONITOR outbound connections. IF destination_port is not in app's port allowlist, ALERT. IF Zeek 'history' field contains 'R' flag AND outbound_bytes is large, ELEVATE alert.
  - question: Is an application with notification access exfiltrating an anomalously large amount of data, especially while in the background?
    context: This question focuses on detecting data exfiltration by baselining an application's network traffic volume. A sudden, massive spike in outbound data (e.g., exceeding the 99th percentile of its own history, or the ratio of $$ orig\_bytes / resp\_bytes $$ exceeding a baseline) is a primary indicator of exfiltration. The suspicion is amplified if this occurs while the app is in a background state, as there is no user interaction to explain the large transfer.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies
      - SIEM platform for log correlation and analysis
    range: last 90 days
    queries:
      - pseudocode: MAINTAIN 30-day baseline of hourly outbound data volume for each app with notification access. IF hourly volume > 99th percentile of baseline, ALERT. IF app state was 'background' during transfer, ESCALATE.
  - question: Does a machine learning model identify a network connection from an app with notification access as a multivariate anomaly?
    context: This question uses an unsupervised ML model (Isolation Forest) to find 'unusual' network flows that might not be caught by single-metric thresholds. The model considers multiple features at once (data volume, duration, port, protocol, etc.) to identify connections that are anomalous in their combination of attributes. This can detect sophisticated exfiltration attempts that try to blend in by keeping individual metrics below simple alert thresholds.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies
      - SIEM platform for log correlation and analysis
    range: last 90 days
    queries:
      - pseudocode: TRAIN Isolation Forest model on network flow features for apps with notification access. SCORE new flows in real-time. IF a flow is scored as a high-level anomaly, FLAG for investigation.