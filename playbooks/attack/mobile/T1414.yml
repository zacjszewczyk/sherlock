name: T1414: Clipboard Data
id: 1f7e8b9a-4c6d-4e5f-8a9b-0c1d2e3f4a5b
description: |
  This playbook is designed to detect adversarial activity related to the collection of sensitive information, including credentials, from the clipboards of mobile devices. It provides investigative steps to identify malicious applications on both Android and iOS platforms by analyzing their behavior through static and dynamic means. Detections focus on identifying apps that illegitimately listen for clipboard changes, access clipboard data at anomalous frequencies or in suspicious contexts (e.g., immediately after a password manager is used), and exfiltrate this data over the network. The playbook combines rule-based alerts, statistical outlier detection, and machine learning models to uncover these activities.
type: technique
related:
  - TA0035: Collection
  - TA0031: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an Android application illegitimately listening for clipboard changes without being a registered Input Method Editor (IME)?
    context: |
      This question aims to identify spyware on Android devices. An application that registers a listener for all clipboard changes (`addPrimaryClipChangedListener`) but does not declare itself as an Input Method Editor (IME) in its manifest has no legitimate reason for this behavior. It is a strong indication that the application is designed to indiscriminately collect any data copied by the user, such as passwords, personal information, or financial details.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each submitted APK:
            PARSE AndroidManifest.xml
            IF service with intent-filter 'android.view.inputmethod.InputMethod' does NOT exist:
              SCAN disassembled code for 'addPrimaryClipChangedListener'
              IF found, GENERATE high-severity alert
  - question: Does an Android application call the clipboard listener API at an anomalously high frequency compared to benign applications?
    context: |
      This question uses a statistical approach to find outlier behavior. By establishing a baseline of normal API call frequencies from a large set of known-good applications, we can spot new applications that deviate significantly. An app that calls the clipboard listener API far more often than other UI-related APIs, relative to the established norm, may have an excessive and suspicious focus on monitoring clipboard activity, warranting a manual review.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Phase 1: Baseline Creation
          FOR each benign APK in corpus:
            CALCULATE ratio = count('addPrimaryClipChangedListener') / count(all UI APIs)
          DETERMINE 99th percentile threshold from all ratios.

          // Phase 2: Vetting
          FOR each new APK:
            CALCULATE new_ratio
            IF new_ratio > 99th_percentile_threshold, FLAG for review.
  - question: Can a machine learning model, based on static features, identify Android applications that are likely malicious due to their potential for clipboard data theft?
    context: |
      This question proposes a more sophisticated, holistic detection method. Rather than relying on a single rule, a supervised machine learning model can weigh multiple static features simultaneouslyâ€”such as the presence of clipboard listeners, the number of sensitive permissions requested, code obfuscation indicators, and the use of dynamic code loading. This allows the model to assign a comprehensive risk score, enabling the detection of more complex malware that might otherwise evade simpler, single-indicator checks.
    answer_sources:
      - APK static analysis reports
      - AndroidManifest.xml
      - Disassembled DEX files
      - Managed Android devices
      - Corporate application vetting pipeline
      - Mobile Device Management (MDM) server
      - Source code repositories
      - Mobile Application Management (MAM) sandbox
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each new APK:
            EXTRACT feature_vector (presence of 'addPrimaryClipChangedListener', permission counts, string entropy, etc.)
            INPUT feature_vector into pre-trained classification model
            GET risk_score
            IF risk_score > threshold, FLAG for review.
  - question: Is an iOS application accessing the clipboard at a high frequency, suggesting automated, non-user-driven polling?
    context: |
      This question focuses on identifying malicious behavior in iOS apps through dynamic analysis. Normal user behavior involves pasting content intermittently. An application that accesses the clipboard property (`UIPasteboard`) multiple times per second is not reflecting user action. This high-frequency polling is a strong indicator of an automated process designed to scrape clipboard content as soon as it appears.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          USE Frida to hook 'UIPasteboard.general.string' property access.
          FOR each access event:
            LOG process_id and timestamp.
          TRIGGER alert IF count(access events) for a process_id > 2 within a 1-second window.
  - question: Does an iOS application exhibit statistically anomalous clipboard access patterns, such as immediate access upon foregrounding or highly regular polling?
    context: |
      This question seeks to identify suspicious clipboard monitoring by analyzing real-world usage patterns. Two key indicators are investigated: 1) Apps that consistently access the clipboard milliseconds after entering the foreground are likely scraping content automatically, not waiting for user interaction. 2) Apps that access the clipboard at highly regular, predictable intervals (low entropy) are likely running an automated polling loop. Both behaviors deviate from normal, user-driven pasting activity.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each app:
            CALCULATE median time delta between 'applicationWillEnterForeground' and 'UIPasteboard' access.
            CALCULATE Shannon entropy of time intervals between 'UIPasteboard' access events.
          FLAG app IF median_time_delta is in lowest 5th percentile OR entropy is low.
  - question: Does the sequence of API calls from an iOS application, including clipboard access, deviate from normal behavior patterns identified by a machine learning model?
    context: |
      This question uses an unsupervised anomaly detection model (like an LSTM autoencoder) to understand the "normal grammar" of application behavior. The model is trained on sequences of API calls from benign apps. When a new app's API call sequence is analyzed, any significant deviation from the learned patterns (a high reconstruction error) is flagged. This can detect a malicious app that accesses the clipboard in an unusual context, such as right before making a network connection without any user-facing UI interaction.
    answer_sources:
      - Instrumented API call logs (e.g., Frida trace)
      - MTD/MDM behavioral event logs (e.g., api_call, app_state_change)
      - Managed iOS devices
      - Corporate application vetting pipeline
      - Dynamic Application Security Testing (DAST) environment
      - Sandboxed analysis environment
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each new app:
            CAPTURE sequence of API calls during dynamic analysis.
            FEED sequence into trained LSTM autoencoder model.
            CALCULATE reconstruction_error.
            IF reconstruction_error > threshold, FLAG as anomalous.
  - question: Is an unauthorized application accessing the clipboard immediately after a password manager was used on the same device?
    context: |
      This question addresses a critical credential theft scenario. A user copies a password from their password manager, and a malicious application immediately reads the clipboard to steal it. This is a race condition the attacker wants to win. By creating a correlation rule that looks for a clipboard access event from an unauthorized app within a few seconds of a password manager being backgrounded, we can generate a high-fidelity alert for this specific attack.
    answer_sources:
      - MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          CREATE SIEM rule:
          WHEN 'app_backgrounded' event with app_name in [PasswordManagers]
          WITHIN 5 seconds on same device_id,
          LOOK FOR 'clipboard_accessed' event where app_name NOT in [Allowlist]
          IF match, TRIGGER alert.
  - question: Which applications consistently access the clipboard shortly after a password manager is backgrounded, across the entire device fleet?
    context: |
      This is a hunting query designed to find systematic abuse. Instead of a single real-time alert, this analysis looks for trends over time and across all managed devices. An application that, across many different users, consistently accesses the clipboard within seconds of a password manager being used is a very strong candidate for a malicious tool specifically designed to steal credentials. This bulk analysis can uncover threats that might be missed on a case-by-case basis.
    answer_sources:
      - MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each 'clipboard_accessed' event:
            FIND most recent 'app_backgrounded' event from password manager on same device.
            CALCULATE time_delta.
            STORE (accessing_app_name, time_delta).
          AGGREGATE by accessing_app_name and calculate median_time_delta.
          REPORT apps where median_time_delta is in lowest 10th percentile.
  - question: Can a machine learning model be used to classify sequences of application events as malicious attempts to steal credentials from the clipboard?
    context: |
      This question proposes using a sequence classification model (like an RNN) to provide a more nuanced detection of credential theft. The model can be trained on labeled data to distinguish between a malicious sequence (e.g., password manager -> unknown app -> clipboard access) and a benign one (e.g., password manager -> known browser -> clipboard access). This provides higher fidelity than a simple time-based rule by incorporating the identity and category of the applications involved.
    answer_sources:
      - MTD/MDM behavioral event logs (eg., app_backgrounded, clipboard_accessed, device_id, app_name)
      - Managed mobile devices with corporate-approved password managers installed
      - MDM/MTD log aggregation platform (e.g., SIEM)
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          STREAM sequences of MTD events in near real-time.
          FOR each sequence (e.g., [app1_focus, app1_bkgnd, app2_focus, app2_clip_access]):
            INPUT sequence into pre-trained RNN classification model.
            IF model output is 'malicious', TRIGGER alert.
  - question: Is an application exfiltrating data to a known malicious C2 server shortly after accessing the clipboard?
    context: |
      This question directly links on-device action (clipboard access) with network evidence of exfiltration. The hypothesis is that the attacker's application will scrape the clipboard and then immediately "phone home" to send the stolen data. By correlating a clipboard access event with a subsequent network connection to an IP or domain on a threat intelligence feed, we can create a very high-confidence alert for data theft in progress.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          CREATE SIEM rule:
          WHEN MTD 'clipboard_accessed' event
          WITHIN 2 minutes on same source_ip,
          LOOK FOR Zeek 'conn.log' or 'dns.log' event where destination_ip or domain is in [ThreatIntelFeed]
          IF match, TRIGGER alert.
  - question: Following a clipboard access event, is an application communicating with a suspicious domain (e.g., high entropy, newly registered, or using a self-signed certificate)?
    context: |
      This question is for hunting exfiltration to unknown or new malicious infrastructure. Attackers often use domains that are algorithmically generated (high entropy), newly registered (NRDs), or secured with self-signed TLS certificates. While these network indicators are suspicious on their own, they become much more compelling when they occur within minutes of the same application accessing the clipboard. This correlation provides strong circumstantial evidence of data exfiltration.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each network connection within 2 mins of a clipboard access by the same app:
            CALCULATE domain entropy.
            CHECK domain registration date.
            CHECK TLS certificate validation status.
          ALERT if entropy > 3.5 OR domain is NRD OR cert is self-signed.
  - question: Can anomalous network traffic patterns, indicative of data exfiltration, be identified following clipboard access events using unsupervised machine learning?
    context: |
      This is an advanced hunting technique using unsupervised learning (e.g., DBSCAN) to find novel exfiltration methods. We extract features from network flows (port, protocol, bytes sent, JA3 hash, etc.) that occur after a clipboard access. The clustering algorithm then groups these flows. Small, dense clusters represent groups of similar, unusual network activity that deviate from the norm. These anomalous clusters, when linked to prior clipboard access, are strong candidates for investigation as potential exfiltration channels.
    answer_sources:
      - MTD/MDM behavioral event logs
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Managed mobile device endpoints
      - Corporate VPN concentrators
      - DNS resolvers
      - Network egress points
      - Threat Intelligence Platform
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each network flow within 5 mins of clipboard access:
            EXTRACT feature_vector (port, protocol, bytes, JA3, domain_entropy, etc.).
          APPLY DBSCAN clustering to all feature vectors.
          INVESTIGATE small, dense clusters flagged as anomalies.