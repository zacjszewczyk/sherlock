name: T1474.001: Compromise Software Dependencies and Development Tools
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: Investigates whether an adversary has compromised mobile applications by injecting malicious code into their software dependencies or development tools. This is achieved by looking for two main types of evidence\: 1) Anomalous network behavior from mobile applications on managed devices, such as communication with known malicious infrastructure, high data egress, domain generation algorithm (DGA) patterns, or use of rare SSL/TLS attributes. 2) Suspicious actions on developer workstations or CI/CD servers, such as development tools spawning scripting interpreters with malicious arguments, connecting to newly registered domains, unexpected modification of dependency files, or spawning unsigned child processes.
type: technique
related:
  - TA0027: Initial Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any mobile devices communicating with known malicious infrastructure based on threat intelligence feeds?
    context: This question aims to detect direct communication with known command and control (C2) servers or malicious domains. By correlating network logs with up-to-date threat intelligence, we can identify compromised devices that are part of a botnet or are being actively controlled by an adversary. This also includes checking HTTP User-Agent strings against known malicious signatures to catch compromised libraries.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek http.log
      - Mobile Device Management (MDM) logs
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: SIEM
        query: SEARCH Zeek logs (conn, dns, ssl, http) WHERE destination_ip OR destination_domain OR ssl_serial OR ja3_hash IN threat_intel_feed OR http_user_agent IN malicious_user_agent_list
  - question: Is any mobile application exhibiting anomalous network behavior indicative of a potential compromise, based on deviations from its established baseline?
    context: This question focuses on identifying subtle signs of compromise by looking for behavioral anomalies rather than known bad indicators. It establishes a 'normal' profile for each application's network activity (data egress, domain entropy, SSL hash prevalence) and flags significant deviations. This can help detect zero-day threats or custom malware not yet present in threat intelligence feeds.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile Device Management (MDM) logs
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: SIEM/Data Analytics Platform
        query: FOR each_app | CALCULATE baseline (30d) for data_egress, domain_entropy, ja3_prevalence | COMPARE current_activity to baseline | IF data_egress > 95th_percentile OR domain_entropy > 3_std_dev OR ja3_prevalence < 1st_percentile | THEN increment risk_score | ALERT if risk_score > threshold
  - question: Can we identify statistically significant outlier network sessions from mobile devices that may represent previously unseen malicious C2 channels?
    context: This question leverages machine learning to find the 'unknown unknowns'. By training an unsupervised model on various features of network connections, we can identify sessions that are statistically different from the vast majority of normal traffic. This is a powerful technique for discovering novel attack methods or C2 channels that use sophisticated evasion techniques.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Mobile Device Management (MDM) logs
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: Machine Learning Model (Isolation Forest/Autoencoder)
        query: INPUT feature_vector (conn_state, protocol, duration, bytes, etc.) from Zeek logs | MODEL.predict(feature_vector) | OUTPUT anomaly_score | ALERT on high anomaly_score
  - question: Is a development tool on a workstation or build server spawning a scripting interpreter with suspicious arguments or creating an unsigned child process?
    context: This question aims to detect a common attack pattern where legitimate development tools are abused to execute malicious code. Adversaries may inject code into a build process that then launches PowerShell or other interpreters to download further payloads or perform reconnaissance. Monitoring for these specific parent-child process relationships, especially with encoded commands or the creation of unsigned processes, is a high-fidelity indicator of a supply chain attack.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Sysmon Event ID 1
      - Windows Sysmon Event ID 3
      - Windows Sysmon Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: SIEM/EDR
        query: SEARCH Sysmon EventID=1 WHERE parent_process IN (dev_tools_list) AND child_process IN (scripting_interpreters) AND command_line CONTAINS ('-enc', 'IEX', 'DownloadString') OR child_process_is_unsigned
  - question: Is a development process on a developer host exhibiting anomalous process creation or network connection behavior compared to its historical baseline?
    context: This question seeks to identify deviations from normal developer activity. By baselining typical parent-child process relationships, command-line structures, and network destinations, we can spot anomalies. For example, a build tool that suddenly spawns a rare child process, uses an unusually long command line, or connects to a newly registered domain is highly suspicious and could indicate a compromised dependency or tool.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Sysmon Event ID 1
      - Windows Sysmon Event ID 3
      - Windows Sysmon Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: SIEM/UBA
        query: FOR each_dev_host | PROFILE baseline (30d) of parent-child processes, cmd_line_entropy, domain_age | COMPARE current_activity to baseline | ALERT if new_parent_child_pair OR cmd_line_entropy > 3_std_dev OR connection_to_domain_age < 30_days
  - question: Can we classify process activity sessions on developer machines as benign or suspicious using a trained machine learning model?
    context: This question proposes a more advanced, supervised approach to detection. By using labeled historical data (known good and known bad process activity), we can train a model to recognize the complex patterns of a supply chain attack. This model can analyze features of a short-term session (e.g., process tree, network connections, file modifications) to provide a high-confidence alert that a specific sequence of events is likely malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Sysmon Event ID 1
      - Windows Sysmon Event ID 3
      - Windows Sysmon Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: Machine Learning Model (Gradient Boosting)
        query: INPUT feature_vector (process_count, network_count, file_mod_count, etc.) for a 5-min session | MODEL.classify(feature_vector) | OUTPUT classification ('benign' or 'suspicious') | ALERT on 'suspicious'