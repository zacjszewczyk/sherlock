name: T1428: Exploitation of Remote Services
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >-
  This playbook helps investigate whether an adversary is using a compromised mobile device to move laterally within an internal network by exploiting remote services. This is indicated by several potential activities. First, a mobile device may perform network scanning, followed by a successful remote logon to a discovered host. Second, a critical network-facing service may crash or terminate unexpectedly immediately following an inbound connection from a mobile device, suggesting a successful or failed exploit attempt. Third, a network-facing service process may spawn a suspicious child process (like cmd.exe or powershell.exe) shortly after a connection from a mobile device, indicating successful remote code execution.
type: technique
related:
  - TA0033: Lateral Movement
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a mobile device performed a network scan and then successfully logged into a discovered host via a remote service within a 60-minute window?
    context: >-
      This question aims to identify a common attack pattern where an adversary, having compromised a mobile device, first scans the internal network to find open ports and active hosts. Following this reconnaissance, the adversary uses the gathered information to exploit a remote service and log in, achieving lateral movement. Correlating a scan event with a subsequent successful remote logon from the same mobile IP is a strong indicator of malicious activity, as it links the reconnaissance and exploitation phases.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Windows Event ID 4624
      - VPN Access Logs
      - DHCP Server Logs
      - VPN Concentrators
      - Internal Wi-Fi Access Points and their associated RADIUS servers
      - Core network switches
      - Domain Controllers
      - High-value internal servers (e.g., file servers, database servers)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Identify mobile device IP ranges
          mobile_ips = GET IPs from (VPN logs OR WiFi DHCP/RADIUS logs)

          // Step 2: Find scan events from mobile IPs
          scan_events = SEARCH Zeek notice.log WHERE notice_type IN (Scan::Port_Scan, Scan::Address_Scan) AND source_ip IN mobile_ips

          // Step 3: For each scan event, look for a subsequent logon
          FOR each event in scan_events:
            logon_event = SEARCH Windows Event ID 4624 WHERE LogonType IN (3, 10)
              AND SourceNetworkAddress == event.source_ip
              AND TargetHost IN event.scanned_destinations
              AND time IS_WITHIN 60_minutes_after event.time
            IF logon_event EXISTS:
              ALERT "Correlated Scan and Remote Logon from Mobile Device"
  - question: Is a mobile device connecting to an anomalously high number of unique hosts or ports, suggesting network or port scanning activity?
    context: >-
      This question focuses on detecting scanning behavior through statistical analysis of network traffic. Adversaries often perform broad scans to discover potential targets. By establishing a baseline of normal connection patterns for each mobile device, we can identify significant deviations. A device suddenly connecting to a number of hosts or ports that exceeds the 98th percentile of its typical behavior is a strong anomaly. Further enriching this with metrics like Shannon entropy helps distinguish a legitimate, high-traffic activity from the high-entropy, low-data-transfer pattern of a scan.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Windows Event ID 4624
      - VPN Access Logs
      - DHCP Server Logs
      - VPN Concentrators
      - Internal Wi-Fi Access Points and their associated RADIUS servers
      - Core network switches
      - Domain Controllers
      - High-value internal servers (e.g., file servers, database servers)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Identify mobile device IP ranges
          mobile_ips = GET IPs from (VPN logs OR WiFi DHCP/RADIUS logs)

          // Step 2: For each mobile IP, calculate connection stats in 5-min windows
          FOR each ip in mobile_ips:
            unique_dst_ips = COUNT UNIQUE destination_ip FROM Zeek conn.log WHERE source_ip == ip in last 5_mins
            unique_dst_ports = COUNT UNIQUE destination_port FROM Zeek conn.log WHERE source_ip == ip in last 5_mins

          // Step 3: Compare to baseline and alert
          IF unique_dst_ips > BASELINE_98_PERCENTILE(ip, 'dst_ips') OR unique_dst_ports > BASELINE_98_PERCENTILE(ip, 'dst_ports'):
            port_entropy = CALCULATE SHANNON_ENTROPY of destination_ports
            avg_bytes = AVERAGE of originated_bytes
            IF port_entropy IS HIGH AND avg_bytes IS LOW:
              ALERT "Anomalous Scan-like Activity Detected from Mobile Device"
  - question: Does a mobile device's network activity profile, analyzed by an unsupervised machine learning model, indicate an anomaly consistent with scanning or pre-exploitation behavior?
    context: >-
      This question leverages machine learning to create a sophisticated, multidimensional baseline of a mobile device's normal network behavior. An Isolation Forest model can learn this complex profile from features like connection counts, port entropy, connection states, and data volume. When a device's activity deviates significantly from this learned norm (indicated by a high anomaly score), it suggests a potential compromise or malicious use, such as scanning for vulnerabilities, which may precede a remote logon attempt.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Windows Event ID 4624
      - VPN Access Logs
      - DHCP Server Logs
      - VPN Concentrators
      - Internal Wi-Fi Access Points and their associated RADIUS servers
      - Core network switches
      - Domain Controllers
      - High-value internal servers (e.g., file servers, database servers)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: For each mobile device, engineer features from Zeek conn.log over 5-minute windows
          features = {
            unique_dst_ips: COUNT(...),
            unique_dst_ports: COUNT(...),
            port_entropy: SHANNON_ENTROPY(...),
            connection_state_ratio: RATIO(...),
            total_orig_bytes: SUM(...),
            high_value_conn: FLAG(...)
          }

          // Step 2: Train or apply a pre-trained Isolation Forest model
          model = ISOLATION_FOREST.fit(historical_features)
          anomaly_score = model.predict(current_features)

          // Step 3: Alert on high anomaly scores
          IF anomaly_score > THRESHOLD:
            ALERT "Anomalous Network Profile Detected for Mobile Device"
  - question: Did a critical network-facing service crash immediately after receiving a connection from a mobile device?
    context: >-
      This question looks for a direct temporal link between a connection from a mobile device and a service failure. A service crash (like an Application Error or unexpected termination) occurring within seconds of an inbound connection is a strong indicator of a failed or successful exploit attempt. This correlation helps pinpoint the exact time and source of a potential attack against a vulnerable remote service.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 7034
      - Windows Event ID 7031
      - Zeek conn.log
      - Zeek http.log
      - VPN Access Logs
      - DHCP Server Logs
      - Application servers
      - Database servers
      - DMZ-hosted services
      - Workstations hosting remote services (RDP, SMB, HTTP)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Define critical services and mobile IP ranges
          critical_services = ["svchost.exe", "w3wp.exe", "lsass.exe", "smbd", "sqlservr.exe"]
          mobile_ips = GET IPs from (VPN logs OR WiFi DHCP/RADIUS logs)

          // Step 2: Trigger on a critical service crash
          ON EVENT (Windows Event ID 1000 OR 7034 OR 7031) WHERE service_name IN critical_services:
            crash_event = CURRENT_EVENT

            // Step 3: Query for a preceding connection from a mobile device
            preceding_conn = SEARCH Zeek conn.log WHERE
              destination_ip == crash_event.host
              AND source_ip IN mobile_ips
              AND time IS_WITHIN 60_seconds_before crash_event.time
            IF preceding_conn EXISTS:
              ALERT "Critical Service Crash Correlated with Mobile Device Connection"
  - question: Is there a statistically significant increase in the crash rate of a critical remote service that correlates with connection attempts from mobile devices?
    context: >-
      Instead of a single crash, this question seeks to identify a pattern of repeated crashes, which could indicate a brute-force or fuzzing attack from a compromised mobile device. By modeling the normal crash frequency using a Poisson distribution, we can statistically identify when a spike in crashes is an outlier (a very rare event). Correlating this anomalous crash rate with network logs can link the instability to a potential attacker.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 7034
      - Windows Event ID 7031
      - Zeek conn.log
      - Zeek http.log
      - VPN Access Logs
      - DHCP Server Logs
      - Application servers
      - Database servers
      - DMZ-hosted services
      - Workstations hosting remote services (RDP, SMB, HTTP)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: For each critical service, establish a baseline crash rate (lambda)
          lambda = CALCULATE average crash rate over 30 days from Windows Event Logs

          // Step 2: Monitor crash counts in a sliding hourly window
          current_crash_count = COUNT crashes in last 1_hour

          // Step 3: Use Poisson distribution to check for outliers
          p_value = POISSON_CDF(current_crash_count, lambda)
          IF p_value > 0.99: // Corresponds to p-value < 0.01 for upper tail
            // Step 4: Correlate with network traffic
            connection_spike = CHECK for spike in connections from mobile IPs to affected service
            IF connection_spike EXISTS:
              ALERT "Statistically Significant Service Crash Anomaly Correlated with Mobile Connections"
  - question: Can the network connection immediately preceding a service crash be classified as a likely exploit attempt using a supervised machine learning model?
    context: >-
      This question applies supervised machine learning to distinguish between benign service crashes and those caused by malicious exploit payloads. By training a model on features extracted from network traffic (like payload entropy, URI characteristics, and known exploit patterns), the system can automatically classify the nature of the connection that led to a crash. A classification of 'exploit-induced' from a mobile-sourced connection provides high-confidence evidence of an attack in progress.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 7034
      - Windows Event ID 7031
      - Zeek conn.log
      - Zeek http.log
      - VPN Access Logs
      - DHCP Server Logs
      - Application servers
      - Database servers
      - DMZ-hosted services
      - Workstations hosting remote services (RDP, SMB, HTTP)
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Train a classifier (e.g., Random Forest) on labeled historical crash data
          // Features: src_ip_rep, protocol, total_bytes, payload_entropy, uri_length, uri_entropy, user_agent, etc.
          // Labels: 'benign', 'exploit-induced'
          model = TRAIN_CLASSIFIER(labeled_data)

          // Step 2: On a new crash event, extract features from the preceding connection
          ON EVENT (service crash):
            connection = GET preceding connection from Zeek logs
            features = EXTRACT_FEATURES(connection)

            // Step 3: Classify the connection
            prediction = model.predict(features)
            IF prediction == 'exploit-induced' AND connection.source_ip IN mobile_ips:
              ALERT "Exploit-Induced Service Crash Detected from Mobile Device"
  - question: Did a network-facing service spawn a suspicious child process, such as a command shell, immediately following a connection from a mobile device?
    context: >-
      This is a classic indicator of successful remote code execution. After an exploit succeeds, the service process is often used to spawn a command interpreter (like cmd.exe or powershell.exe) or another tool to give the attacker a foothold. This question aims to detect this specific post-exploitation behavior by correlating the suspicious process creation event with an inbound connection from a mobile device within a very short time window (5 seconds).
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - VPN Access Logs
      - DHCP Server Logs
      - Web servers
      - Application servers
      - Domain controllers
      - Other systems running remotely accessible services
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Define watchlists for parent and child processes
          parent_watchlist = ["w3wp.exe", "sqlservr.exe", "nginx.exe"]
          child_watchlist = ["cmd.exe", "powershell.exe", "whoami.exe", "net.exe", "certutil.exe"]
          mobile_ips = GET IPs from (VPN logs OR WiFi DHCP/RADIUS logs)

          // Step 2: Trigger on suspicious process creation
          ON EVENT (Windows Event ID 4688) WHERE ParentProcessName IN parent_watchlist AND NewProcessName IN child_watchlist:
            proc_event = CURRENT_EVENT

            // Step 3: Correlate with preceding network connection
            preceding_conn = SEARCH Zeek conn.log WHERE
              destination_ip == proc_event.host
              AND source_ip IN mobile_ips
              AND time IS_WITHIN 5_seconds_before proc_event.time
            IF preceding_conn EXISTS:
              ALERT "Suspicious Child Process Spawned After Mobile Device Connection"
  - question: Has a network service spawned a child process that is rare or has never been seen before in our environment?
    context: >-
      This question focuses on detecting novelty as an indicator of compromise. Attackers often create parent-child process relationships that are not typical for a normal operating environment (e.g., IIS spawning `whoami.exe`). By baselining all normal parent-child relationships, we can alert on any new or statistically infrequent pairings. Further analysis of the command line's statistical properties (entropy, length) can help risk-score the event and identify obfuscated or unusual commands.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - VPN Access Logs
      - DHCP Server Logs
      - Web servers
      - Application servers
      - Domain controllers
      - Other systems running remotely accessible services
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Build baseline of parent-child process pair frequencies from 30+ days of logs
          baseline_freq = CALCULATE frequency of all (ParentProcess, NewProcess) pairs

          // Step 2: On new process creation event involving a network service parent
          ON EVENT (Windows Event ID 4688) WHERE ParentProcessName IS a network service:
            current_pair = (ParentProcessName, NewProcessName)
            
            // Step 3: Check if the pair is rare or new
            IF frequency(current_pair) < 0.01 OR current_pair NOT IN baseline_freq:
              // Step 4: Analyze command line for anomalies
              cmd_entropy = CALCULATE_ENTROPY(CommandLine)
              cmd_length = LENGTH(CommandLine)
              IF cmd_entropy > 3_STD_DEV OR cmd_length > 3_STD_DEV:
                ALERT "Rare Parent-Child Process with Anomalous Command Line Detected"
  - question: Does the command line of a process spawned by a network service, following a mobile connection, classify as malicious according to an NLP model?
    context: >-
      This question uses advanced Natural Language Processing (NLP) to analyze and understand the intent of command-line arguments. Attackers frequently use obfuscation and complex commands that can be difficult to catch with simple regex or keyword matching. A fine-tuned transformer model can analyze the structure and content of the command line to classify it as 'malicious' with high accuracy, providing a powerful detection mechanism for remote code execution attempts originating from mobile devices.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - VPN Access Logs
      - DHCP Server Logs
      - Web servers
      - Application servers
      - Domain controllers
      - Other systems running remotely accessible services
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          // Step 1: Load a pre-trained/fine-tuned NLP model for command line classification
          model = LOAD_NLP_MODEL('distilbert-finetuned-cmdline')

          // Step 2: On a suspicious process creation event (network service parent)
          ON EVENT (Windows Event ID 4688) WHERE ParentProcessName IS a network service:
            // Correlate with mobile connection
            IF preceding connection from mobile_ip exists:
              command = GET CommandLine from event

              // Step 3: Classify the command line
              prediction = model.predict(command)
              IF prediction.label == 'malicious' AND prediction.score > 0.90:
                ALERT "Malicious Command Line Classified by NLP Model"