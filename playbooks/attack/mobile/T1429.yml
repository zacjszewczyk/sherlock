name: "T1429: Audio Capture"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps determine if an adversary is capturing audio from mobile devices to collect sensitive information. It focuses on identifying applications that access the microphone under suspicious circumstances, such as when in a background state and immediately making network connections to anomalous destinations. It also includes checks for static indicators of compromise, such as an application package having the rare 'CAPTURE_AUDIO_OUTPUT' permission without being signed by a trusted vendor, or an application requesting standard microphone access while also being flagged as high-risk by a multi-feature scoring model."
type: "technique"
related:
  - "TA0035: Collection"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a mobile application activating the microphone while in the background and immediately communicating with a known malicious destination?"
    context: "This question aims to detect a classic spyware pattern: surreptitious audio recording followed by exfiltration to an adversary-controlled server. By correlating microphone activation events from MDM/MTD with network logs and threat intelligence within a tight 60-second window, analysts can identify high-confidence malicious activity that warrants immediate investigation."
    answer_sources:
      - "MDM/MTD API Event Logs (Microphone Access, App State)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Feeds (C2 domains/IPs)"
      - "Managed mobile device fleet (both corporate-owned and BYOD)"
      - "Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers"
      - "Network egress points capturing traffic from mobile device subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH (MDM logs for 'mic_activation' AND 'app_background')
          JOIN by device_id with (Network logs)
          WHERE time_diff(network_event, mdm_event) < 60s
          AND network_log.destination IN (Threat_Intel_Feed)
          GROUP by device_id, app_name
  - question: "Is an application exhibiting anomalous background behavior by using the microphone for an unusual duration, sending an unusually large amount of data, or connecting to a new geographic location?"
    context: "This question focuses on detecting deviations from normal behavior. Even if an application's network destination isn't on a known threat list, a sudden change in its behavior can indicate a compromise or a newly activated malicious feature. By establishing a 30-day baseline for each app, analysts can use statistical methods to flag outliers that represent potential threats."
    answer_sources:
      - "MDM/MTD API Event Logs (Microphone Access, App State)"
      - "Zeek conn.log"
      - "Managed mobile device fleet (both corporate-owned and BYOD)"
      - "Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers"
      - "Network egress points capturing traffic from mobile device subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          // Baseline Generation (run periodically)
          CALCULATE 95th_percentile(mic_duration) per app_name over 30 days
          CALCULATE 95th_percentile(bytes_sent) per app_name over 30 days
          LIST unique(destination_country) per app_name over 30 days

          // Alerting Query
          SEARCH (MDM logs for 'mic_activation' AND 'app_background')
          JOIN by device_id with (Network logs)
          WHERE mic_duration > baseline_mic_duration_95p
          AND (bytes_sent > baseline_bytes_sent_95p OR destination_country NOT IN baseline_countries)
  - question: "Are there sequences of device events (like microphone use, app state changes, and network connections) that are statistically rare and deviate from learned normal behavior patterns?"
    context: "This question leverages machine learning (e.g., an LSTM autoencoder) to identify complex, multi-event patterns that simple correlation rules might miss. The model learns 'normal' sequences of activity, and a high 'reconstruction error' for a new sequence indicates it is anomalous and potentially malicious, allowing for the detection of novel attack techniques."
    answer_sources:
      - "MDM/MTD API Event Logs (Microphone Access, App State)"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Managed mobile device fleet (both corporate-owned and BYOD)"
      - "Mobile Device Management (MDM) and Mobile Threat Defense (MTD) servers"
      - "Network egress points capturing traffic from mobile device subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          // Model Training
          INPUT: Time-series of events (mic_on, app_background, net_connect, etc.)
          MODEL: Train LSTM Autoencoder on historical data
          OUTPUT: Trained model

          // Real-time Inference
          INPUT: Live event stream
          PROCESS: Feed stream into trained model, calculate reconstruction_error
          ALERT if reconstruction_error > (mean_error + 3 * stddev_error)
  - question: "Is there an Android application in the environment with the rare and dangerous 'CAPTURE_AUDIO_OUTPUT' permission that is not signed by a trusted system vendor?"
    context: "This question targets a very specific and high-risk Android permission that allows capturing audio from other apps. This permission is typically reserved for the device manufacturer (OEM). Finding a non-OEM app with this permission is a major red flag for powerful surveillance capabilities and requires immediate investigation."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates)"
      - "MDM Application Inventory Logs (Package Name, Version, Device ID)"
      - "Mobile Application Management (MAM) repositories"
      - "Mobile application vetting and sandboxing platforms"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH App Manifests
          WHERE app.platform == 'Android'
          AND 'android.permission.CAPTURE_AUDIO_OUTPUT' IN app.permissions
          AND app.signer.CN NOT IN (Allowlist_of_OEMs)
          ALERT on each finding
  - question: "Which applications requesting microphone access pose the highest risk to the organization based on a multi-factor risk score?"
    context: "This question provides a way to prioritize analysis efforts by scoring applications based on risk factors. Factors include the app's category (a game needing mic access is suspicious), developer reputation, number of permissions, and market presence. This proactive measure helps analysts focus on the small subset of applications that warrant a closer look before they can cause an incident."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates, API calls)"
      - "MDM Application Inventory Logs (Package Name, Version, Device ID)"
      - "Mobile Application Management (MAM) repositories"
      - "Mobile application vetting and sandboxing platforms"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each app with mic_permission:
            score = (weight1 * app_category_risk) +
                    (weight2 * developer_reputation_risk) +
                    (weight3 * permission_entropy) +
                    (weight4 * market_presence_risk)
            STORE app.risk_score = score
          ALERT on apps where app.risk_score > 95th_percentile(all_app_scores)
  - question: "Can we automatically classify newly submitted applications as malicious or benign based on features extracted from static analysis?"
    context: "This question aims to automate threat detection by using a supervised classification model. By training a model on labeled good and bad apps, the system learns the statistical patterns of malicious code (e.g., specific combinations of permissions, suspicious API calls, obfuscation). This allows for automatic blocking and alerting on new threats that match these learned patterns, reducing analyst workload."
    answer_sources:
      - "Mobile Application Vetting Static Analysis Reports (Parsed Manifests, Permissions, Signer Certificates, API calls)"
      - "Mobile Application Management (MAM) repositories"
      - "Mobile application vetting and sandboxing platforms"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          // Model Training
          FEATURES = extract_features(permissions, api_calls, obfuscation, etc.) from labeled_dataset
          MODEL = train_classifier(features, labels)

          // Inference Pipeline
          FOR each new_app:
            features = extract_features(new_app)
            prediction, confidence = MODEL.predict(features)
            IF prediction == 'malicious' AND confidence > 0.9:
              BLOCK and ALERT