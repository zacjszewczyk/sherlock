name: "T1533: Data from Local System"
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps investigate whether an adversary is collecting sensitive data from local system storage on mobile devices. It focuses on detecting anomalous file read behavior, such as unusually high read rates or access to numerous unique file paths in sensitive directories. It also looks for unauthorized API calls to credential stores like the Android Keystore or iOS Keychain. Further indicators include the creation of large archive files (.zip, .tar, etc.) in temporary directories, especially when followed by network connections to external addresses. Finally, it helps identify applications with statistically rare and high-risk combinations of permissions that are not justified by their function.
type: technique
related:
  - "TA0035: Collection"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: none
questions:
  - question: "Is a non-allowlisted process reading files from sensitive mobile directories?"
    context: |
      This question aims to identify unauthorized processes accessing sensitive user data locations like DCIM, Contacts, or Documents. Legitimate applications have predictable access patterns, so a process not on an established allowlist accessing these areas is a strong indicator of potential data theft or reconnaissance. This helps filter out noise and focus on explicitly unapproved activity.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/, /storage/emulated/0/Documents/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/, /var/mobile/Library/Mobile Documents/)
    range: last 90 days
    queries:
      - pseudocode: "SEARCH file access logs WHERE process_name NOT IN (allowlist) AND directory IN (sensitive_directories) | RETURN device, process_name, file_path, timestamp"
  - question: "Has any application process exhibited an unusually high rate of file read operations compared to its own historical baseline?"
    context: |
      This question seeks to detect anomalous behavior even from otherwise legitimate applications. A sudden spike in file read activity (e.g., exceeding the 95th or 99th percentile of its normal behavior) can indicate that an application has been compromised or is being used to exfiltrate data. This statistical approach helps find subtle threats that might be missed by simple allowlist-based rules.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/, /storage/emulated/0/Documents/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/, /var/mobile/Library/Mobile Documents/)
    range: last 90 days
    queries:
      - pseudocode: "FOR each process: CALCULATE 30-day baseline of file_reads_per_minute. | SEARCH file access logs | GROUPBY process, time(1m) | COUNT file_reads | WHERE file_reads > 95th_percentile_of_baseline | RETURN device, process, file_read_count, baseline_value"
  - question: "Does an application's current file access pattern deviate significantly from its learned normal behavior profile?"
    context: |
      This question uses advanced machine learning to identify sophisticated data collection attempts. By modeling normal file access patterns (including frequency, path entropy, time of day), it can detect deviations that are too complex for simple statistical thresholds. A high reconstruction error from the model suggests the current activity is unlike anything seen before and is highly suspicious.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/, /storage/emulated/0/Documents/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/, /var/mobile/Library/Mobile Documents/)
    range: last 90 days
    queries:
      - pseudocode: "INPUT file access events (frequency, path_entropy, time_of_day) INTO anomaly detection model. | WHERE reconstruction_error > threshold | RETURN device, process, activity_details, error_score"
  - question: "Is a non-allowlisted process or a process with an invalid signer hash attempting to access the Android Keystore or iOS Keychain?"
    context: |
      This question targets direct attempts to steal credentials stored securely on the device. Access to the Keystore/Keychain is highly restricted. Any process not on a strictly controlled allowlist (verified by both name and signer hash) attempting access is a critical security event, likely indicating a credential theft tool or a compromised application.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints, specifically the Android Keystore and iOS Keychain services.
    range: last 90 days
    queries:
      - pseudocode: "SEARCH API call logs WHERE target_api IN ('AndroidKeystore', 'iOSKeychain') AND (process_name NOT IN (allowlist) OR signer_hash NOT IN (allowlist_hashes)) | RETURN device, process_name, signer_hash, timestamp"
  - question: "Is an authorized application accessing the credential store at a frequency that is statistically unusual compared to its baseline?"
    context: |
      This question helps detect misuse of legitimate access. A compromised but authorized application might be used to enumerate or steal credentials. A sudden, significant spike in API calls to the credential store (e.g., more than 3 standard deviations from the norm) by an application is a strong indicator of such abuse, even if the process itself is on the allowlist.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints, specifically the Android Keystore and iOS Keychain services.
    range: last 90 days
    queries:
      - pseudocode: "FOR each authorized_process: CALCULATE hourly baseline of credential_api_calls. | SEARCH API call logs | GROUPBY process, time(1h) | COUNT api_calls | WHERE api_calls > (mean + 3*std_dev) | RETURN device, process, call_count, baseline_mean"
  - question: "Does a recent credential store access event register as an outlier when compared to a machine learning model of legitimate access patterns?"
    context: |
      This question uses a machine learning approach to find novel or complex attacks that defy simple rules. By training a model on legitimate access patterns (process, parent, API function, time of day), it can identify any new access attempt that does not conform to the established norm. These outliers represent highly suspicious events that require immediate investigation.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints, specifically the Android Keystore and iOS Keychain services.
    range: last 90 days
    queries:
      - pseudocode: "INPUT API access events (process, parent_process, api_function, time_of_day) INTO one-class SVM model. | WHERE prediction == 'outlier' | RETURN device, process, event_details, outlier_score"
  - question: "Has a large archive file been created by a non-standard process and subsequently transferred to an external network location?"
    context: |
      This question looks for a classic data staging and exfiltration pattern. Adversaries often collect data into a single archive file for easier transfer. Detecting the creation of a large archive (>10MB) by an unapproved process, followed closely by a large network transfer from the same device, is a high-fidelity indicator of data theft.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/; iOS: /var/mobile/Library/Mobile Documents/) and corporate network egress points monitored by network sensors.
    range: last 90 days
    queries:
      - pseudocode: "SEARCH file creation logs WHERE file_extension IN ('.zip', '.tar', '.gz', '.7z') AND file_size > 10MB AND process_name NOT IN (allowlist). | CORRELATE with network logs on device_ip within 5 minutes | WHERE outbound_traffic > 10MB AND destination_ip is external | RETURN device, process, filename, destination_ip"
  - question: "Does an archive file created on a device have a randomly generated or obfuscated filename?"
    context: |
      This question seeks to identify adversary attempts to hide their staging files. Adversaries often use random characters for filenames (e.g., 'asdf876h.zip') to avoid detection based on keywords. A high Shannon entropy score for a filename indicates a high degree of randomness, which is unusual for user-created files and can be a strong signal of malicious activity, warranting a higher risk score for the event.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/; iOS: /var/mobile/Library/Mobile Documents/) and corporate network egress points monitored by network sensors.
    range: last 90 days
    queries:
      - pseudocode: "ON archive_creation_event: CALCULATE shannon_entropy(filename). | IF entropy > 3.5, INCREASE risk_score. | RETURN device, filename, entropy_score"
  - question: "Is a newly created archive file classified as likely malicious by a machine learning model?"
    context: |
      This question leverages a predictive model to assess the risk of a file creation event. By training a Random Forest classifier on features like process name, signer, file size, path, and filename entropy, the system can score new archive creation events in real-time. A high malicious probability score (>0.8) provides a strong, data-driven signal that the event warrants priority investigation.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/; iOS: /var/mobile/Library/Mobile Documents/) and corporate network egress points monitored by network sensors.
    range: last 90 days
    queries:
      - pseudocode: "INPUT file creation event features (process, signer, size, path, entropy, time) INTO Random Forest model. | WHERE malicious_probability > 0.8 | RETURN device, process, filename, probability_score"
  - question: "Is any installed application using a pre-defined 'toxic' combination of permissions?"
    context: |
      This question aims to proactively identify high-risk applications based on their requested permissions. Certain combinations (e.g., reading contacts, accessing the internet, and installing new packages) are rarely legitimate and are highly indicative of spyware or other malware. Regularly scanning for apps with these 'toxic combos' allows for early detection of potential threats.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases stored on managed mobile devices and aggregated by the MDM/UEM platform.
    range: last 90 days
    queries:
      - pseudocode: "SEARCH daily app inventory logs | FOR each app, CHECK granted_permissions | WHERE permissions contains (toxic_combo_1) OR permissions contains (toxic_combo_2) | RETURN device, app_name, granted_permissions"
  - question: "Which applications have the rarest, and therefore most suspicious, combination of permissions for their given app store category?"
    context: |
      This question seeks to find outliers by comparing an app's permissions to its peers. An app in the 'Games' category that requests to read SMS messages is highly unusual, whereas a messaging app doing so is normal. By scoring apps based on the rarity of their permissions within their category, we can surface those with statistically anomalous and potentially malicious permission sets for review.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases stored on managed mobile devices and aggregated by the MDM/UEM platform.
    range: last 90 days
    queries:
      - pseudocode: "CALCULATE inverse_prevalence_score for all permissions within each app_category. | FOR each app, SUM scores of its permissions. | RANK apps by total_score within their category. | RETURN top 5% of apps per category."
  - question: "Are there any applications whose permission profile is so unique that it doesn't cluster with any other group of similar applications?"
    context: |
      This question uses unsupervised machine learning to find truly unique applications. Clustering algorithms like DBSCAN group apps with similar permission sets together. Applications that are left over as 'noise' or outliers do not fit any common profile. These outliers represent novel or highly unusual permission combinations that could signify a new or targeted threat and should be investigated.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases stored on managed mobile devices and aggregated by the MDM/UEM platform.
    range: last 90 days
    queries:
      - pseudocode: "INPUT permission vectors for all apps INTO DBSCAN clustering model. | IDENTIFY apps classified as 'noise' or 'outliers'. | RETURN outlier_apps, permissions"