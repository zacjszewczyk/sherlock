name: T1513: Screen Capture
id: c5a1b3d4-e6f7-4a9b-8c1d-2e3f4a5b6c7d
description: |
  This playbook helps answer the question: Is an adversary capturing sensitive information from user screens on corporate mobile devices? It focuses on detecting screen capture techniques on mobile endpoints by identifying several key indicators. These include non-allowlisted applications gaining screen recording permissions and subsequently exfiltrating data; applications illegitimately gaining powerful Accessibility Service privileges followed by anomalous outbound network traffic; and the direct execution of screen capture utilities like 'screencap' or 'screenrecord', or unauthorized remote access via the Android Debug Bridge (adb) on TCP port 5555. The playbook provides investigative questions to guide an analyst in correlating on-device events with network-level data anomalies to confirm and respond to potential threats.
type: technique
related:
  - TA0035: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has a non-allowlisted application been granted screen capture permissions while also possessing internet access permissions?
    context: |
      This question is crucial for identifying potentially malicious applications at the initial stage of compromise. An application that can both capture the screen and connect to the internet represents a direct data exfiltration risk. Correlating these two permissions in a non-approved app is a high-fidelity indicator of a potential threat, prompting further investigation into its network activity.
    answer_sources:
      - MDM/EMM application inventory logs
      - MDM/EMM permission grant logs
      - Corporate MDM/EMM servers
      - Managed mobile device endpoints
    range: last 90 days
    queries:
      - technology: SIEM
        query: |
          // Pseudocode for SIEM Correlation Rule
          ALERT on MDM_permission_grant_log
          WHERE permission = "screen_capture"
          AND app_name NOT IN corporate_app_allowlist
          AND app_manifest_from_MDM_inventory contains "android.permission.INTERNET"
  - question: Following a suspicious permission grant, did the device exhibit anomalous network behavior, such as unusually high outbound data volume or DNS requests indicative of C2 communication?
    context: |
      This question aims to find evidence of data exfiltration or command-and-control (C2) activity immediately following a suspicious permission grant. A significant spike in outbound data or high-entropy DNS queries, calculated using the Shannon entropy formula $$ H(X) = -\sum_{i=1}^{n} P(x_i) \log_2 P(x_i) $$, can confirm that the suspicious application is actively communicating with an external entity, potentially exfiltrating captured screen data. A high entropy score often points to the use of Domain Generation Algorithms (DGAs).
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network data collection points (e.g., Zeek sensors)
      - Internal DNS servers
    range: last 90 days
    queries:
      - technology: Data Analytics Platform
        query: |
          // Pseudocode for Network Anomaly Detection
          FOR each device from prior alert:
            // Volumetric analysis
            BASELINE_DATA = query Zeek_conn_log for device over last 30 days, aggregate orig_bytes daily
            PERCENTILE_98 = calculate 98th percentile of BASELINE_DATA
            ALERT_DATA = query Zeek_conn_log for device in 24h post-alert
            IF SUM(ALERT_DATA.orig_bytes) > PERCENTILE_98 THEN ALERT
          
            // DNS Entropy Analysis
            BASELINE_ENTROPY = calculate daily Shannon entropy of DNS subdomains for device over 30 days
            ALERT_ENTROPY = calculate Shannon entropy of DNS subdomains in 24h post-alert
            IF ALERT_ENTROPY > (MEAN(BASELINE_ENTROPY) + 3 * STDEV(BASELINE_ENTROPY)) THEN ALERT
  - question: Can machine learning models identify anomalous network flows from the suspicious application that might be missed by simple volumetric analysis?
    context: |
      This question leverages machine learning to perform a more nuanced analysis of network traffic. An Isolation Forest model can detect subtle anomalies across multiple features (duration, bytes, protocol, periodicity, port) that might not trigger simple threshold-based alerts. Identifying an outlier flow with a high anomaly score, especially within an hour of the permission grant, provides strong, targeted evidence for a forensic investigation.
    answer_sources:
      - Zeek conn.log
      - Network data collection points (e.g., Zeek sensors)
    range: last 90 days
    queries:
      - technology: Machine Learning Model
        query: |
          // Pseudocode for ML-based Flow Detection
          MODEL = load pre-trained IsolationForest model
          FEATURES = extract 'duration', 'orig_bytes', 'resp_bytes', 'proto', 'periodicity', 'dst_port' from Zeek_conn_log for alerted app
          PREDICTIONS = MODEL.predict(FEATURES)
          FOR each flow where PREDICTION is 'outlier':
            IF flow_timestamp is within 1 hour of permission_grant_alert THEN ESCALATE for forensic investigation
  - question: Has an application not on the approved allowlist been granted Accessibility Service privileges?
    context: |
      Accessibility Services are highly privileged and can be abused by malware to read screen content, log keystrokes, and perform actions on behalf of the user. This question focuses on detecting the unauthorized granting of these powerful permissions, which is a common tactic for mobile malware to bypass standard restrictions and capture sensitive information without needing explicit screen recording permissions.
    answer_sources:
      - MDM/EMM application inventory logs
      - MDM/EMM security policy compliance logs
      - Android logcat
      - Corporate MDM/EMM servers
    range: last 90 days
    queries:
      - technology: MDM/SIEM
        query: |
          // Pseudocode for MDM/SIEM Policy Alert
          ALERT on MDM_compliance_log
          WHERE event_type = "privilege_grant"
          AND privilege = "AccessibilityService"
          AND app_package_name NOT IN accessibility_service_allowlist
  - question: Following an unauthorized Accessibility Service grant, did the device exhibit network behavior consistent with data exfiltration, such as a significant increase in outbound data volume or a high data exfiltration ratio?
    context: |
      This question seeks to correlate the suspicious permission grant with network evidence of data exfiltration. A large spike in outbound traffic (exceeding 3 standard deviations from the baseline) or a high data exfiltration ratio, calculated as $$ R = \frac{\text{orig\_bytes}}{\text{resp\_bytes}} $$, strongly suggests that the application is sending out significantly more data than it receivesâ€”a classic sign of data theft. A ratio greater than 10 is considered highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Network data collection points
    range: last 90 days
    queries:
      - technology: Data Analytics Platform
        query: |
          // Pseudocode for Network Exfiltration Detection
          FOR each device from prior alert:
            // Volumetric analysis
            BASELINE = query Zeek_conn_log for device over last 30 days, aggregate orig_bytes hourly
            MEAN = calculate mean of BASELINE
            STDEV = calculate standard deviation of BASELINE
            ALERT_TRAFFIC = query Zeek_conn_log for device in 24h post-alert
            IF any hourly volume in ALERT_TRAFFIC > (MEAN + 3 * STDEV) THEN ALERT
          
            // Exfiltration Ratio Analysis
            FOR each connection in ALERT_TRAFFIC:
              IF orig_bytes > 1MB AND resp_bytes > 0:
                RATIO = orig_bytes / resp_bytes
                IF RATIO > 10 THEN ALERT
  - question: Can a time-series forecasting model detect anomalous outbound data volumes that correlate with an unauthorized Accessibility Service grant?
    context: |
      This question uses advanced time-series analysis to detect network anomalies that might be missed by simple statistical methods. Models like SARIMA or Prophet can account for seasonality and trends in a device's normal network behavior. When an observed data volume significantly exceeds the forecasted 99% upper confidence bound, it represents a statistically significant anomaly. Correlating this network anomaly with the MDM alert within a one-hour window provides a very high-confidence signal of malicious activity.
    answer_sources:
      - Zeek conn.log
      - MDM/EMM security policy compliance logs
      - Network data collection points
      - Corporate MDM/EMM servers
    range: last 90 days
    queries:
      - technology: SIEM / Time-Series Model
        query: |
          // Pseudocode for Correlated Time-Series Anomaly
          NETWORK_ANOMALY = check for device where measured_hourly_volume > forecasted_99_percent_confidence_interval
          MDM_ALERT = check for MDM compliance alert for non-allowlisted accessibility service on the same device
          
          IF NETWORK_ANOMALY and MDM_ALERT occurred within 1 hour of each other:
            GENERATE high-confidence incident
  - question: Have the native 'screencap' or 'screenrecord' tools been executed, or has there been an unauthorized inbound connection attempt to the adb port (TCP/5555)?
    context: |
      This question targets direct, overt methods of screen capture. The execution of 'screencap' or 'screenrecord' processes on a non-developer device is highly suspicious. Similarly, an inbound connection to the Android Debug Bridge (adb) port from an unauthorized IP address could indicate an attempt to remotely control the device and capture its screen.
    answer_sources:
      - Mobile EDR logs
      - Firewall logs
      - Zeek conn.log
      - Managed mobile device endpoints with EDR agents
      - Network infrastructure (firewalls)
    range: last 90 days
    queries:
      - technology: EDR / Firewall
        query: |
          // Pseudocode for EDR and Firewall Alerts
          // EDR Rule
          ALERT on process_execution_event
          WHERE process_name IN ('screencap', 'screenrecord')
          
          // Firewall Rule
          ACTION: BLOCK and LOG
          PROTOCOL: TCP
          DESTINATION_PORT: 5555
          SOURCE_IP: NOT IN authorized_developer_IP_range
  - question: For authorized adb connections, is there any activity that deviates from established baselines, suggesting misuse by a legitimate user or a compromised developer account?
    context: |
      Even authorized connections can be abused. This question aims to detect anomalous behavior within legitimate adb sessions. A session with an unusually large data volume or duration could indicate exfiltration of large files (like screen recordings). A very low variance in connection inter-arrival times suggests automated, machine-like behavior (beaconing) rather than interactive human use.
    answer_sources:
      - Zeek conn.log
      - Network data collection points
    range: last 90 days
    queries:
      - technology: Data Analytics Platform
        query: |
          // Pseudocode for Baselining Authorized ADB
          FOR each developer_IP in authorized_range:
            BASELINE = query Zeek_conn_log for dev_IP to TCP/5555 over last 30 days
            IF new_session_volume > 95th_percentile(BASELINE.volume) THEN ALERT
            IF new_session_duration > (MEAN(BASELINE.duration) + 2 * STDEV(BASELINE.duration)) THEN ALERT
          
            // Inter-arrival time analysis
            INTER_ARRIVAL_TIMES = calculate time deltas between connections from dev_IP over 24h
            IF VARIANCE(INTER_ARRIVAL_TIMES) approaches 0 THEN ALERT
  - question: Can a supervised machine learning model accurately classify adb sessions as benign or malicious to automate response actions?
    context: |
      This question proposes an automated detection and response mechanism. By training a classification model (e.g., Gradient Boosting or Random Forest) on known benign and malicious session features from Zeek logs, the system can proactively identify and classify new adb sessions. A high-confidence 'malicious' classification can trigger a SOAR playbook to immediately contain the threat by isolating the mobile device, minimizing potential damage.
    answer_sources:
      - Zeek conn.log
      - Network data collection points
    range: last 90 days
    queries:
      - technology: Machine Learning / SOAR
        query: |
          // Pseudocode for ML Classification and SOAR Trigger
          MODEL = load pre-trained GradientBoosting classifier
          FEATURES = extract 'duration', 'orig_bytes', 'resp_bytes', 'history', etc. from new adb session
          PREDICTION, CONFIDENCE = MODEL.predict(FEATURES)
          
          IF PREDICTION == 'malicious' AND CONFIDENCE > 0.9:
            TRIGGER SOAR_PLAYBOOK
            ACTION: Isolate device via MDM, create incident ticket