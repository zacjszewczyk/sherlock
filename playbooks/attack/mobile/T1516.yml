name: T1516: Input Injection
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook helps investigate whether an adversary is evading defenses or causing impact by using Input Injection (T1516) on mobile devices. This technique often involves abusing accessibility services to perform actions on behalf of the user. Key investigative goals include determining if an adversary is programmatically interacting with sensitive applications (e.g., financial, messaging) to steal data or funds.
  Detection focuses on identifying temporal correlations between a high-risk permission grant ('BIND_ACCESSIBILITY_SERVICE') and subsequent suspicious network behavior. This includes connections to known malware C2 infrastructure, network patterns that are statistical outliers compared to a device's baseline (e.g., high port entropy, automated beaconing), or unusually large data uploads. Further investigation looks for traffic to sensitive services (financial, SSO) that exhibits non-human characteristics, such as non-standard TLS fingerprints (JA3) or User-Agents, highly periodic connection timing, anomalous data volumes, or DNS query patterns indicative of tunneling.
type: technique
related:
  - TA0030: Defense Evasion
  - TA0034: Impact
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Following a 'BIND_ACCESSIBILITY_SERVICE' permission grant on a mobile device, did the device communicate with known malicious infrastructure within the next 15 minutes?
    context: |
      This question aims to detect immediate post-compromise activity. Granting accessibility service permissions is a high-risk event often exploited by mobile malware. A quick connection to known command-and-control (C2) servers, identified by threat intelligence (domains, IPs, TLS fingerprints), strongly indicates the device has been compromised and is establishing a C2 channel.
    answer_sources:
      - MDM Logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek x509.log
      - DHCP/VPN logs
      - Threat Intelligence Feeds
      - Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each MDM event where 'BIND_ACCESSIBILITY_SERVICE' is granted
          // 1. Get device_id and event_timestamp from MDM log.
          // 2. Find device_ip from DHCP/VPN logs for device_id at event_timestamp.
          // 3. Search network logs (Zeek conn, dns, ssl) for source device_ip
          //    in the time window [event_timestamp, event_timestamp + 15 minutes].
          // 4. For each connection, extract destination_ip, destination_fqdn, ja3_hash, ja3s_hash.
          // 5. Compare extracted indicators against threat intelligence feeds for mobile malware C2.
          // 6. Inspect x509 certificates for non-standard issuers/subjects.
          // 7. ALERT on any match.
  - question: In the 15 minutes after an accessibility service permission was granted, did the device's network traffic exhibit statistical anomalies indicative of automated or malicious activity, such as unusual port scanning, beaconing, or DNS query patterns?
    context: |
      This question seeks to identify malicious behavior that may not be in threat intelligence feeds yet. It focuses on statistical deviations from the device's normal behavior. High port entropy suggests scanning, low variance in connection times indicates automated beaconing, and an unusual ratio of DNS query types (like TXT) can be a sign of data exfiltration or C2 communication.
    answer_sources:
      - MDM Logs
      - Zeek conn.log
      - Zeek dns.log
      - Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each MDM event where 'BIND_ACCESSIBILITY_SERVICE' is granted
          // 1. Get device_id, device_ip, and event_timestamp.
          // 2. Define analysis_window = [event_timestamp, event_timestamp + 15 minutes].
          // 3. From conn.log for device_ip in analysis_window, calculate Shannon entropy of destination ports.
          //    ALERT if entropy > 98th percentile of device's 30-day baseline.
          // 4. From conn.log, calculate stddev of inter-arrival times to any single destination.
          //    ALERT if stddev < 1 second.
          // 5. From dns.log for device_ip in analysis_window, calculate ratio of TXT queries to total queries.
          //    ALERT if ratio > 99th percentile of device's 30-day baseline.
  - question: Can a machine learning anomaly detection model identify suspicious network sessions from the device within 15 minutes of an accessibility service permission grant, based on its historical behavior?
    context: |
      This question leverages machine learning to provide a more holistic view of anomalous activity. By training a model on a device's typical network patterns (session duration, data volume, protocols, etc.), it can flag sessions that deviate significantly, even if they don't trigger specific, rule-based alerts. This is effective for detecting novel or sophisticated threats.
    answer_sources:
      - MDM Logs
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek dns.log
      - Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // 1. Train a one-class anomaly detection model (e.g., Isolation Forest) on the last 30 days of a device's network logs.
          //    Features: session duration, bytes sent/received, protocol, JA3/JA3S, cert issuer, dest port, DNS query length.
          // 2. On an MDM alert for 'BIND_ACCESSIBILITY_SERVICE', get device_ip and event_timestamp.
          // 3. For the next 15 minutes, process all network sessions from device_ip with the trained model.
          // 4. ALERT on any session flagged as a high-confidence anomaly by the model.
  - question: Is a device connecting to sensitive services (e.g., financial, SSO) using non-standard client parameters, such as an unexpected TLS fingerprint or HTTP User-Agent?
    context: |
      This question aims to detect credential stuffing or other automated attacks against sensitive services. Legitimate mobile applications typically have a consistent set of TLS parameters (JA3/JA3S) and User-Agent strings. A connection to a sensitive FQDN using parameters not on the approved whitelist suggests an unauthorized client, such as a malicious script or a repackaged app, is attempting to interact with the service.
    answer_sources:
      - Zeek ssl.log
      - Zeek http.log
      - Internal list of sensitive FQDNs and whitelisted parameters
      - Network segments for corporate and guest Wi-Fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // 1. Maintain a whitelist of {fqdn, ja3_hash, ja3s_hash, user_agent} for sensitive services.
          // 2. Continuously monitor Zeek ssl.log and http.log.
          // 3. For each connection to an FQDN in the sensitive list:
          //    a. Extract the connection's JA3/JA3S hash and/or User-Agent string.
          //    b. Check if the extracted values are in the whitelist for that FQDN.
          // 4. ALERT if the values are not found in the whitelist.
  - question: Does network traffic to sensitive services show signs of automation or data exfiltration, such as unusually large data uploads, highly periodic connections, or DNS tunneling characteristics?
    context: |
      This question seeks evidence of impact, such as data theft. It looks for behavioral anomalies specific to a user's interaction with a particular service. A sudden spike in outbound data volume can indicate data exfiltration. Highly periodic, machine-like connection timing suggests automated scripts rather than human interaction. Abnormally long DNS TXT queries are a classic sign of data exfiltration via DNS tunneling.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network segments for corporate and guest Wi-Fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each user-and-service pair (e.g., user_x, sso.corp.com):
          // 1. Establish a 30-day rolling baseline of outbound data volume (orig_bytes).
          //    ALERT if a new session's orig_bytes > 99.5th percentile of the baseline.
          // 2. Analyze connection start times over 1-hour windows.
          //    ALERT if autocorrelation at a non-zero lag > 0.8.
          // 3. Establish a daily baseline for average DNS TXT query length per device.
          //    ALERT if a new query's length > 3 standard deviations above the average.
  - question: Can a supervised machine learning model classify network sessions to sensitive services as 'benign' or 'malicious' with high confidence?
    context: |
      This question proposes using a more advanced, supervised ML model to distinguish legitimate user traffic from malicious automated traffic. Unlike an unsupervised anomaly detection model, a binary classifier is trained on labeled examples of both 'good' and 'bad' traffic. This allows it to learn the specific, subtle features of malicious sessions, potentially leading to higher accuracy and fewer false positives when identifying attacks against sensitive services.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek http.log
      - Malware sandbox traffic logs
      - Network segments for corporate and guest Wi-fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // 1. Train a binary classification model (e.g., Random Forest) on labeled data.
          //    'Benign' data: Historical traffic to sensitive services.
          //    'Malicious' data: Traffic from malware sandboxes or synthetic automated traffic.
          //    Features: duration, orig_bytes, resp_bytes, protocol, JA3/JA3S, HTTP method, URI length, time-of-day.
          // 2. Apply the model in real-time to new sessions targeting sensitive services.
          // 3. ALERT if a session is classified as 'malicious' with a confidence score > 0.9.