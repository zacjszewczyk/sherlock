name: T0848: Rogue Master
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: "This playbook helps identify if an adversary has deployed a 'Rogue Master' to manipulate the operator's view of the industrial process or to directly control physical equipment. A rogue master is an unauthorized device or software instance that masquerades as a legitimate control system master (e.g., an HMI or control server). Detections focus on two primary areas: 1) Unauthorized manipulation of HMI project files, which can alter the operator's display without changing the underlying process. This is identified by monitoring for file modifications from unapproved processes, anomalous process execution chains, or statistical spikes in file-writing activity. 2) Unauthorized network control, where a device not on the approved master list sends control commands (e.g., Modbus/DNP3 writes) over the network. This is identified by detecting commands from unauthorized IPs, ARP spoofing, outstations connecting to unauthorized masters, the stopping of legitimate master services, or the appearance of new devices on the network that begin exhibiting master-like behavior."
type: technique
related:
  - TA0105: Impact
  - TA0108: Initial Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are critical HMI project files being modified by unauthorized processes or users?
    context: Unauthorized modification of Human-Machine Interface (HMI) project files is a key technique for manipulating an operator's view of the process. An adversary could alter graphics or alarm setpoints in the project file, causing the HMI to display a safe state while the physical process is actually in a dangerous condition. This question aims to detect these modifications by checking if the process or user that wrote to a critical HMI file is on a pre-approved whitelist of legitimate software and accounts.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - File systems of HMI application servers, engineering workstations, and historian servers, specifically monitoring application directories and configuration folders.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define whitelist of approved process paths and user SIDs
          WHITELIST_PROCESSES = ["C:\\Wonderware\\editor.exe", ...]
          WHITELIST_USERS = ["S-1-5-...", ...]

          // Search for file write events in HMI directories
          FOR event in search(EventID=4663, Directory in HMI_PROJECT_DIRS):
            // Get the process and user that performed the write
            modifying_process = get_process_info(event.ProcessId)
            modifying_user = event.SubjectUserSid

            // Alert if not on whitelist
            IF modifying_process.Path NOT IN WHITELIST_PROCESSES OR modifying_user NOT IN WHITELIST_USERS:
              ALERT("Unauthorized HMI file modification", event)
  - question: Has there been an anomalous spike in the variety of processes modifying HMI project files?
    context: In a stable environment, only a small, predictable set of applications (e.g., the HMI editor) should modify project files. A sudden increase in the variety of different processes writing to these files, as measured by the Shannon entropy of their names, is highly anomalous. It can indicate that a malicious script or tool is running, which may be obfuscated or randomized, leading to a higher entropy score compared to the baseline.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - File systems of HMI application servers, engineering workstations, and historian servers, specifically monitoring application directories and configuration folders.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Get baseline entropy score (95th percentile over 30 days)
          BASELINE_ENTROPY = calculate_baseline_entropy("HMI_file_writers")

          // Calculate entropy for the last 24 hours
          process_names = get_process_names_for_hmi_writes(last_24h)
          current_entropy = shannon_entropy(process_names)

          // Compare to baseline
          IF current_entropy > BASELINE_ENTROPY:
            ALERT("Anomalous entropy in HMI file modifying processes", current_entropy)
  - question: Have any anomalous process execution chains led to the modification of HMI project files?
    context: Adversaries often use a sequence of commands to achieve their objectives, such as a legitimate service spawning a command shell, which in turn runs a script to alter a file. Normal operations, by contrast, have very predictable process execution chains. This question seeks to identify attacks by training a model on normal parent-child process relationships and flagging any deviation that results in the modification of a sensitive HMI file.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - File systems of HMI application servers, engineering workstations, and historian servers, specifically monitoring application directories and configuration folders.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained sequence analysis model (e.g., HMM)
          MODEL = load_model("process_chain_analyzer")

          // Search for file write events in HMI directories
          FOR event in search(EventID=4663, Directory in HMI_PROJECT_DIRS):
            // Trace the process execution chain leading to this event
            process_chain = trace_parent_processes(event.ProcessId)

            // Score the sequence with the model
            is_anomalous = MODEL.predict(process_chain)

            IF is_anomalous:
              ALERT("Anomalous process chain modified HMI file", process_chain)
  - question: Is an unauthorized IP address sending ICS write or control commands on the network?
    context: In a properly configured ICS network, only a small, well-defined set of master servers should be allowed to send commands that alter the state of a physical process (e.g., Modbus function codes for writing registers, DNP3 WRITE commands). Any other device sending such commands is a strong indicator of a rogue master attempting to take control of the process.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek conn.log
      - Network TAPs or SPAN ports on switches within the Process Control Network (PCN), specifically monitoring traffic to and from PLCs and RTUs, and at the boundary between the PCN and the Industrial DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define whitelist of authorized master server IPs
          AUTHORIZED_MASTERS = ["192.168.1.10", "192.168.1.11", ...]
          WRITE_FUNCTIONS = ["Write Single Coil", "Write Single Register", "Write Multiple Coils", "Write Multiple Registers", "WRITE"]

          // Search Modbus and DNP3 logs for write commands
          FOR event in search_logs(["modbus.log", "dnp3.log"]):
            IF event.function in WRITE_FUNCTIONS:
              IF event.source_ip NOT IN AUTHORIZED_MASTERS:
                ALERT("Unauthorized IP sending ICS write command", event)
  - question: Is there a statistical anomaly in the number or frequency of unauthorized IPs sending ICS write commands?
    context: While a single unauthorized write command is a high-severity event, analyzing the statistics of this activity can reveal the scope and nature of an attack. A sudden increase in the number of unique unauthorized devices sending commands could indicate a widespread compromise, while a high frequency of commands from a single unauthorized source suggests a targeted, active attack.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek conn.log
      - Network TAPs or SPAN ports on switches within the Process Control Network (PCN), specifically monitoring traffic to and from PLCs and RTUs, and at the boundary between the PCN and the Industrial DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Get baseline for unique unauthorized sources
          HOURLY_BASELINE_MEAN, HOURLY_BASELINE_STDDEV = get_baseline("unauthorized_writers")

          // Calculate current hourly count
          unauthorized_ips = get_unique_unauthorized_write_ips(last_1h)
          current_count = count(unauthorized_ips)

          IF current_count > (HOURLY_BASELINE_MEAN + 3 * HOURLY_BASELINE_STDDEV):
            ALERT("Anomalous number of unique unauthorized writers", current_count)

          // Check for high frequency from a single source
          FOR ip in unauthorized_ips:
            command_count = count_writes_from_ip(ip, last_60s)
            IF command_count > 5:
              ALERT("High frequency of writes from unauthorized IP", ip)
  - question: Are new or unauthorized source IPs exhibiting ICS command patterns that are statistically different from legitimate master servers?
    context: Legitimate master servers typically have a stable and predictable pattern of communication. An adversary's tool, however, may exhibit different characteristics (e.g., unusual command timing, different mix of function codes). This question uses a machine learning model to learn the normal behavior of legitimate masters and flag any new or unauthorized device whose command patterns are a statistical outlier.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek conn.log
      - Network TAPs or SPAN ports on switches within the Process Control Network (PCN), specifically monitoring traffic to and from PLCs and RTUs, and at the boundary between the PCN and the Industrial DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained time-series anomaly model
          MODEL = load_model("ics_command_pattern_analyzer")

          // Analyze live traffic
          FOR event in get_live_ics_write_traffic():
            IF event.source_ip is not authorized:
              // Extract features (command volume, frequency, function code distribution)
              features = extract_features(event)
              is_anomalous = MODEL.predict(features)

              IF is_anomalous:
                ALERT("Anomalous command pattern from unauthorized IP", event)
  - question: Are any outstations (PLCs, RTUs) initiating connections to unauthorized master servers?
    context: PLCs and RTUs are typically passive devices that respond to commands from masters. They should only ever initiate connections to a pre-defined, static list of servers (e.g., their primary and backup masters). An outstation initiating a connection to any other device is a critical anomaly and could indicate it is compromised and 'calling home' or connecting to a rogue master.
    answer_sources:
      - Zeek conn.log
      - Network sensors (TAPs/SPANs) monitoring traffic from network segments containing outstations like PLCs and RTUs, and on core switches within the Process Control Network (PCN).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define whitelists for each outstation
          WHITELISTS = {"10.10.10.101": [("192.168.1.10", 502)], ...} // plc_ip: [(master_ip, port)]

          // Search connection logs
          FOR conn in search(log="conn.log"):
            IF conn.source_ip in WHITELISTS:
              destination_tuple = (conn.dest_ip, conn.dest_port)
              IF destination_tuple NOT IN WHITELISTS[conn.source_ip]:
                ALERT("Outstation connected to unauthorized destination", conn)
  - question: Has any outstation shown a statistical increase in the number of unique devices it is connecting to?
    context: A PLC or RTU should connect to a very small and stable number of master servers. This question establishes a baseline for how many unique destinations each outstation normally connects to. A sudden increase beyond this baseline (e.g., more than 3 standard deviations above the mean) is abnormal and could indicate the device has been compromised and is scanning the network or attempting to communicate with multiple malicious servers.
    answer_sources:
      - Zeek conn.log
      - Network sensors (TAPs/SPANs) monitoring traffic from network segments containing outstations like PLCs and RTUs, and on core switches within the Process Control Network (PCN).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each known outstation
          FOR outstation_ip in ALL_OUTSTATIONS:
            // Get baseline of unique daily destinations
            BASELINE_MEAN, BASELINE_STDDEV = get_baseline("unique_destinations", outstation_ip)

            // Get unique destinations for the last day
            unique_dests_today = get_unique_destinations(outstation_ip, last_24h)
            count_today = count(unique_dests_today)

            IF count_today > (BASELINE_MEAN + 3 * BASELINE_STDDEV):
              ALERT("Anomalous increase in unique destinations for outstation", outstation_ip)
  - question: Are there any anomalous network communication clusters involving outstations?
    context: Normal network traffic forms predictable patterns based on which devices talk to each other, on what ports, and how often. This question uses unsupervised machine learning (clustering) to learn these normal patterns. Any connection involving an outstation that does not fit into a known, normal cluster is flagged as an outlier. This can detect novel attack paths or communications with a rogue master that other, more rigid rules might miss.
    answer_sources
      - Zeek conn.log
      - Network sensors (TAPs/SPANs) monitoring traffic from network segments containing outstations like PLCs and RTUs, and on core switches within the Process Control Network (PCN).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained clustering model (e.g., DBSCAN)
          MODEL = load_model("network_traffic_clusterer")

          // Score new connections in real time
          FOR conn in get_live_traffic():
            IF conn.source_ip is an outstation:
              // Extract features (IPs, ports, protocol, duration, bytes)
              features = extract_features(conn)
              cluster_label = MODEL.predict(features)

              // DBSCAN labels outliers as -1
              IF cluster_label == -1:
                ALERT("Anomalous network connection cluster for outstation", conn)
  - question: Is a master server's IP address being associated with an unauthorized MAC address?
    context: This is a direct check for ARP spoofing. In a secure network, critical servers like masters should have static ARP entries, meaning their IP address is permanently mapped to a specific hardware (MAC) address. If network traffic (specifically, an ARP reply) shows the master's IP address being claimed by a different, unauthorized MAC address, it's a critical sign that an attacker is trying to impersonate the master to intercept or inject traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek arp.log
      - Zeek dhcp.log
      - Network sensors monitoring Layer 2 traffic on all subnets containing critical ICS assets, particularly the subnet of the primary and backup master servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define authoritative IP-to-MAC mapping
          IP_MAC_MAP = {"192.168.1.10": "00:1A:2B:3C:4D:5E", ...}

          // Monitor ARP logs for replies
          FOR event in search(log="arp.log", operation="REPLY"):
            ip = event.target_ip
            mac = event.target_mac

            IF ip in IP_MAC_MAP and mac != IP_MAC_MAP[ip]:
              ALERT("Critical ARP spoofing detected for master server", event)
  - question: Is a master server's IP address rapidly changing its associated MAC address?
    context: A stable master server's IP should only ever be associated with one MAC address. If monitoring tools observe the IP address being associated with multiple different MAC addresses in a short time frame (a condition known as IP flapping), it strongly indicates an ongoing ARP poisoning attack where an adversary is trying to fight with the legitimate master for control of the IP address.
    answer_sources:
      - Zeek conn.log
      - Zeek arp.log
      - Zeek dhcp.log
      - Network sensors monitoring Layer 2 traffic on all subnets containing critical ICS assets, particularly the subnet of the primary and backup master servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each monitored master IP
          FOR ip in MONITORED_MASTER_IPS:
            // Count unique MACs in a 5-minute window
            associated_macs = get_unique_macs_for_ip(ip, last_5m)
            count_macs = count(associated_macs)

            IF count_macs > 1:
              ALERT("IP flapping detected for master server", ip)
  - question: Has there been an anomalous spike in ARP traffic related to a master server's IP?
    context: ARP poisoning attacks, especially those used for Man-in-the-Middle, often involve flooding the network with a high volume of ARP requests or replies to poison the ARP caches of other devices. This question aims to detect such floods by establishing a baseline of normal ARP activity for a master server's IP and alerting on any sudden, anomalous spike in traffic volume.
    answer_sources:
      - Zeek conn.log
      - Zeek arp.log
      - Zeek dhcp.log
      - Network sensors monitoring Layer 2 traffic on all subnets containing critical ICS assets, particularly the subnet of the primary and backup master servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained time-series model for ARP traffic volume
          MODEL = load_model("arp_volume_analyzer")

          // Get ARP traffic rate for a master's IP over the last minute
          current_rate = get_arp_traffic_rate("192.168.1.10", last_1m)

          is_anomalous = MODEL.predict(current_rate)
          IF is_anomalous:
            ALERT("Anomalous spike in ARP traffic for master server", "192.168.1.10")
  - question: Has a critical master server software service stopped outside of a scheduled maintenance window?
    context: An adversary may attempt to disable a legitimate master server's software so they can run their own rogue process without conflict, or simply to cause a denial of service. This question provides a simple but highly effective check by alerting whenever a critical service (identified by name) logs a 'stopped' event, while filtering out legitimate stops that occur during approved maintenance periods.
    answer_sources:
      - Windows Event ID 7036
      - Centralized Windows Event Log collection for SCADA/HMI servers, Primary and backup Windows-based master/control servers, Any HMI/SCADA workstations running critical master components.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define critical service names and maintenance windows
          CRITICAL_SERVICES = ["FactoryTalk HMI Server", "WinCC Runtime", ...]
          MAINTENANCE_WINDOWS = get_maintenance_schedule()

          // Search for service control events
          FOR event in search(EventID=7036, ServiceName in CRITICAL_SERVICES):
            IF event.State == "stopped" AND event.timestamp NOT IN MAINTENANCE_WINDOWS:
              ALERT("Critical service stopped outside maintenance window", event)
  - question: Has a critical master server service been stopping more frequently than its established baseline?
    context: Some critical services may be inherently unstable and stop occasionally for non-malicious reasons. However, an adversary repeatedly attempting to disable a service would cause it to stop more frequently than its normal, unstable baseline. This question detects such attacks by alerting when the number of stop events for a service in a 24-hour period exceeds its long-term average.
    answer_sources:
      - Windows Event ID 7036
      - Centralized Windows Event Log collection for SCADA/HMI servers, Primary and backup Windows-based master/control servers, Any HMI/SCADA workstations running critical master components.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For each critical service
          FOR service in CRITICAL_SERVICES:
            // Expected stops are near zero, so a simple threshold is effective
            stop_count_24h = count_events(EventID=7036, ServiceName=service, State="stopped", last_24h)

            IF stop_count_24h > 1:
              ALERT("Anomalous frequency of service stops", service)
  - question: Did a critical service stop event occur as part of a larger sequence of suspicious activity?
    context: A service stop event becomes much more suspicious when it is correlated with other indicators of compromise. For example, a stop event that occurs shortly after an unusual remote login, followed by the execution of command-line tools, is highly likely to be malicious. This question uses a sequence analysis model to look for these known-bad chains of events.
    answer_sources:
      - Windows Event ID 7036
      - Centralized Windows Event Log collection for SCADA/HMI servers, Primary and backup Windows-based master/control servers, Any HMI/SCADA workstations running critical master components.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained model for malicious event sequences
          MODEL = load_model("event_chain_analyzer")

          // Search for critical service stop events
          FOR event in search(EventID=7036, ServiceName in CRITICAL_SERVICES, State="stopped"):
            // Correlate with preceding events (e.g., login, process creation)
            event_sequence = get_preceding_events(event.timestamp, event.host)

            is_malicious = MODEL.predict(event_sequence)
            IF is_malicious:
              ALERT("Critical service stop is part of a malicious sequence", event_sequence)
  - question: Has a new, unauthorized device connected to the network and started sending ICS control commands?
    context: This is one of the most direct indicators of a rogue master. The playbook identifies a new device by observing a MAC address in DHCP logs that is not in the authoritative asset inventory. It then tracks the IP address assigned to that MAC. If that IP address is subsequently seen sending Modbus or DNP3 write commands, it triggers a high-severity alert for a new, active rogue master.
    answer_sources:
      - Zeek dhcp.log
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network sensors monitoring DHCP traffic on the PCN, core switches within the PCN, and the Industrial DMZ where asset discovery occurs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Monitor DHCP logs for new MAC addresses
          FOR event in search(log="dhcp.log"):
            IF event.mac NOT IN ASSET_INVENTORY:
              // Flag the new device and its IP
              new_ip = event.assigned_ip
              // Check if this new IP sends write commands
              is_writer = check_if_ip_sends_ics_writes(new_ip)
              IF is_writer:
                ALERT("New unauthorized device is sending ICS control commands", event)
  - question: Has there been an unusual increase in the number of new devices appearing on the network?
    context: A secure Process Control Network should have a very low rate of new devices being added. A sudden spike in the number of new MAC addresses seen on the network is a security concern. It could indicate a physical security breach, a misconfigured switch, or an adversary connecting multiple devices. This question provides an early warning by baselining the daily count of new MACs and alerting on statistical deviations.
    answer_sources:
      - Zeek dhcp.log
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network sensors monitoring DHCP traffic on the PCN, core switches within the PCN, and the Industrial DMZ where asset discovery occurs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Get baseline for new MACs (99th percentile of daily counts)
          BASELINE_99P = get_baseline("daily_new_mac_count")

          // Count new MACs seen in the last 24 hours
          new_macs_today = count_new_macs(last_24h)

          IF new_macs_today > BASELINE_99P:
            ALERT("Anomalous spike in new devices on the network", new_macs_today)
  - question: Has a new device appeared on the network that behaves like a master server, even if it hasn't sent write commands yet?
    context: This is a proactive, behavior-based question. Before sending malicious commands, a rogue device may first probe the network, communicating with PLCs and other devices in a way that mimics a legitimate master. This question uses a two-stage model: first, it profiles the network behavior of any new device. If the profile is unknown or matches a master server, a second model analyzes its specific communication patterns for anomalies, potentially detecting a rogue master before it attacks.
    answer_sources:
      - Zeek dhcp.log
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network sensors monitoring DHCP traffic on the PCN, core switches within the PCN, and the Industrial DMZ where asset discovery occurs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load device profiler and anomaly detection models
          PROFILER_MODEL = load_model("device_profiler")
          ANOMALY_MODEL = load_model("master_behavior_analyzer")

          // When a new device is detected
          FOR device in get_new_devices():
            // Profile its behavior
            profile = PROFILER_MODEL.predict(device.traffic)

            IF profile == "unknown" OR profile == "master_server":
              // If suspicious, perform deep behavioral analysis
              is_anomalous = ANOMALY_MODEL.predict(device.ics_traffic)
              IF is_anomalous:
                ALERT("New device exhibits anomalous master-like behavior", device)