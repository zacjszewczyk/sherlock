name: T0803: Block Command Message
id: f5e1a2b3-c4d5-4e6f-a7b8-c9d0e1f2a3b4
description: >-
  This playbook helps investigate whether an adversary is attempting to inhibit response functions by blocking command messages from reaching their intended targets, such as PLCs or RTUs. This can be achieved through various means, including network-level disruption (e.g., denial of service), manipulation of host-based firewalls on critical endpoints, or network traffic interception techniques like ARP poisoning. The goal is to detect evidence of commands being initiated but not delivered, anomalous network traffic patterns, malicious firewall rule changes, or ARP table manipulation.
type: technique
related:
  - TA0107: Inhibit Response Function
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are commands initiated on HMI/SCADA servers failing to reach their target PLCs/RTUs?
    context: >-
      This question seeks to find a discrepancy between command initiation and network delivery. When an operator issues a command from an HMI, it is logged by the application or the operating system (e.g., as a process creation event). This command should then generate corresponding network traffic to the target PLC/RTU. The absence of this expected network traffic within a short time window is a strong indicator that the message was blocked en route, possibly due to a network-level attack.
    answer_sources: >-
      Zeek conn.log, Zeek modbus.log, Zeek dnp3.log, Zeek s7comm.log, Zeek enip.log, Windows Event ID 4688, HMI Application Logs. Data should be collected from the Control Network Zone (between HMIs/SCADA Servers and PLCs/RTUs) and HMI/SCADA Server Endpoints.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          FOR each command_event IN (HMI_logs OR WinEventID_4688)
            SET start_time = command_event.timestamp
            SET end_time = start_time + 10_seconds
            SEARCH network_logs FROM start_time TO end_time
            WHERE source_ip = command_event.source_ip AND dest_ip = command_event.dest_plc_ip
            IF no_results_found
              ALERT "Potential Command Block: No network traffic observed for initiated command."

  - question: Is there an anomalous increase in network traffic on critical control network segments that could indicate a resource exhaustion attack?
    context: >-
      This question focuses on detecting denial-of-service (DoS) or network flooding attacks designed to overwhelm network infrastructure or endpoints, thereby preventing legitimate command messages from being delivered. By establishing a baseline of normal network behavior (e.g., traffic volume, packet rate, protocol entropy) and alerting on significant, sustained deviations from this norm, analysts can identify resource exhaustion attempts that inhibit response functions.
    answer_sources: >-
      Zeek conn.log. Data should be collected from the Control Network Zone (between HMIs/SCADA Servers and PLCs/RTUs).
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          CALCULATE 30-day baseline (99th percentile) for metrics (bytes/sec, packets/sec, port_entropy) on critical_network_segments.
          MONITOR live traffic in 60-second windows.
          IF live_metric > baseline for >60_seconds
            ALERT "Anomalous Network Traffic Spike: Potential resource exhaustion attack."

  - question: Can a machine learning model detect anomalous communication patterns between HMIs and PLCs suggestive of a network flood or disruption?
    context: >-
      This is an advanced investigative question that leverages a multivariate anomaly detection model (like a VAE or LSTM autoencoder) to identify subtle deviations from normal network behavior. The model is trained on benign traffic to learn the complex relationships between features like traffic volume, protocol, and connection state. When live traffic deviates significantly from this learned norm (indicated by a high reconstruction error), it signals a potential attack, such as a sophisticated network flood, that simpler threshold-based methods might miss.
    answer_sources: >-
      Zeek conn.log. Data should be collected from the Control Network Zone (between HMIs/SCADA Servers and PLCs/RTUs).
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          TRAIN VAE/LSTM model on 30+ days of normal HMI-to-PLC conn.log data.
          APPLY trained model to live traffic windows.
          CALCULATE reconstruction_error for each window.
          IF reconstruction_error > dynamic_threshold
            ALERT "ML Detection: Anomalous communication pattern detected between HMI and PLC."

  - question: Has a malicious host-based firewall rule been added or modified on a critical endpoint to block outbound ICS command traffic?
    context: >-
      This question aims to directly detect an adversary's attempt to sever communications by manipulating firewall rules on a critical asset like an HMI or Engineering Workstation. The query looks for specific events indicating a new or modified firewall rule and checks if the rule is configured to 'Block' traffic to a 'RemoteAddress' in a PLC subnet on a known ICS 'RemotePort'. This provides a high-confidence indicator of malicious activity.
    answer_sources: >-
      Windows Event ID 4945, Windows Event ID 4947, Windows Event ID 4950. Data should be collected from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and Control Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          MONITOR for WinEventID_4947 (modified) or WinEventID_4945 (added).
          FOR each event
            PARSE rule_details.
            IF rule_details.Action = 'Block' AND rule_details.RemoteAddress IN PLC_subnets AND rule_details.RemotePort IN ICS_ports
              ALERT "Malicious Firewall Rule Detected: Blocking ICS traffic."

  - question: Is there an unusually high frequency of firewall rule changes on critical HMI/EWS assets?
    context: >-
      An adversary making multiple changes to a system's firewall may create a burst of configuration events. This question uses a statistical approach to detect such activity. By establishing a baseline for the normal rate of firewall changes on a host and alerting when the current rate exceeds a statistical threshold (e.g., 3 standard deviations above the mean), analysts can be notified of suspicious configuration activity that warrants further investigation, even if the individual rules do not trigger other alerts.
    answer_sources: >-
      Windows Event ID 4945, Windows Event ID 4947, Windows Event ID 4950. Data should be collected from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and Control Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          CALCULATE 30-day baseline (mean, stddev) for hourly count of firewall change events (4945, 4947, 4950).
          MONITOR live hourly count.
          IF current_hourly_count > (mean + 3 * stddev)
            ALERT "Anomalous Firewall Activity: Unusually high number of rule changes."

  - question: Can a machine learning model automatically classify new firewall rule changes as authorized or unauthorized?
    context: >-
      This advanced question uses a supervised machine learning model to automate the validation of firewall changes. The model is trained on historical change logs that have been labeled as 'authorized' or 'unauthorized' based on change management records. When deployed, it scores new firewall changes in real-time based on their properties (e.g., rule name, action, target port, user). An 'unauthorized' classification with high confidence provides a strong signal of malicious intent, which can be further confirmed by correlating it with subsequent blocked connection events.
    answer_sources: >-
      Windows Event ID 4945, Windows Event ID 4947, Windows Event ID 5157. Data should be collected from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and Control Servers.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          TRAIN classification model on labeled firewall change events.
          APPLY model to new change events (4945, 4947) in real-time.
          IF model_prediction = 'unauthorized' AND confidence > 0.9
            ALERT "ML Detection: Unauthorized firewall change predicted."

  - question: Has the MAC address for a critical ICS device's IP address been spoofed, indicating a potential ARP poisoning attack?
    context: >-
      This question addresses man-in-the-middle attacks executed via ARP poisoning. In a stable ICS network, critical devices have static IP addresses that should always map to the same physical (MAC) address. This query involves checking all observed ARP traffic against an authoritative, pre-defined list of correct IP-to-MAC mappings. Any deviation, where a different MAC address claims to own a critical IP, is a high-fidelity indicator of an ARP spoofing attempt.
    answer_sources: >-
      Zeek arp.log. Data should be collected from Control Network Switches, Control Network Gateways, and Critical PLC Network Interfaces.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          MAINTAIN authoritative table of {IP: MAC} for critical devices.
          MONITOR Zeek arp.log.
          FOR each arp_event
            IF arp_event.IP in authoritative_table AND arp_event.MAC != authoritative_table[arp_event.IP]
              ALERT "ARP Spoofing Detected: MAC address mismatch for critical IP."

  - question: Is there an anomalous volume of ARP traffic or a change in the number of MAC addresses associated with a critical IP, suggesting an ARP flood or conflict?
    context: >-
      This question looks for behavioral evidence of ARP-based attacks. An ARP flood, used to poison caches across a network segment, would cause a statistical anomaly in the rate of ARP events. By baselining the normal frequency and alerting on significant spikes, this attack can be detected. Furthermore, since a critical device should only ever have one MAC address, observing more than one MAC associated with its IP in a short time window is a clear sign of conflict or a spoofing attempt.
    answer_sources: >-
      Zeek arp.log. Data should be collected from Control Network Switches, Control Network Gateways, and Critical PLC Network Interfaces.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          CALCULATE baseline for ARP event rate per critical IP.
          MONITOR live ARP event rate.
          IF rate > (baseline + 3 * stddev)
            ALERT "Anomalous ARP Volume: Potential ARP flooding."
          COUNT unique MACs per critical IP in a 5-min window.
          IF count > 1
            ALERT "IP-MAC Conflict Detected: Multiple MACs seen for a single critical IP."

  - question: Can an unsupervised machine learning model detect anomalous ARP events indicative of spoofing, flooding, or poisoning?
    context: >-
      This advanced question employs an unsupervised anomaly detection model (like Isolation Forest) to find unusual patterns in ARP traffic that may not be caught by simple rules or statistics. The model learns the characteristics of normal ARP activity, including typical source/destination pairs, opcodes, and timing. It can then flag events with a high anomaly score, which represent significant deviations from the norm, such as rare ARP opcodes, rapid IP-MAC changes, or traffic from unexpected hosts, all of which can be indicators of an ARP-based attack.
    answer_sources: >-
      Zeek arp.log, Zeek conn.log. Data should be collected from Control Network Switches, Control Network Gateways, and Critical PLC Network Interfaces.
    range: last 90 days
    queries:
      - search: pseudocode
        query: >-
          TRAIN Isolation Forest model on 30+ days of normal Zeek arp.log data.
          APPLY model to live ARP events.
          IF anomaly_score is high
            ALERT "ML Detection: Anomalous ARP event detected."