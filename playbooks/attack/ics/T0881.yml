name: T0881: Service Stop
id: f4b1b3b2-6c1a-4e8d-9f3b-7d4a1c6e0b5a
description: This playbook helps determine if an adversary is attempting to inhibit critical ICS processes or response functions by stopping services. It focuses on detecting service stop commands correlated with actual service stop events, identifying stops preceded by anomalous network activity, and finding service stops that occur without a corresponding command or crash event, which may indicate non-standard termination methods.
type: technique
related:
  - TA0107: Inhibit Response Function
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Can we detect a service stop command correlated with a service stop event, initiated by an unauthorized user or outside a maintenance window?
    context: This question aims to identify the most direct and explicit evidence of a malicious service stop. By correlating a command execution (like `sc.exe stop`) with the actual service stopping, and then filtering out legitimate administrative activity (known accounts, maintenance windows), we can pinpoint suspicious actions. This is a high-fidelity indicator of an adversary actively trying to disable a specific service.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event ID 1
      - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events (Sysmon 1, WinEvent 4688) AND service_status_events (WinEvent 7036)
          WHERE process_creation_events.Hostname = service_status_events.Hostname
          AND time_diff(service_status_events.time, process_creation_events.time) <= 15s
          AND process_creation_events.ProcessName IN ('sc.exe', 'net.exe', 'powershell.exe', 'taskkill.exe')
          AND process_creation_events.CommandLine CONTAINS 'stop'
          AND CommandLine_ServiceName matches service_status_events.ServiceName
          AND service_status_events.ServiceName IN (critical_ics_service_list)
          AND process_creation_events.User NOT IN (approved_admin_list)
  - question: Is a recent service stop event anomalous when compared to the historical baseline of legitimate stops for that specific service?
    context: This question moves beyond simple rule-based detection to behavioral analysis. It acknowledges that service stops can be legitimate. By baselining normal activity (who stops the service, what process initiates it, when it happens), we can identify deviations. A service being stopped by a novel user or parent process is a strong indicator of unusual, and potentially malicious, activity that might evade static rules.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event ID 1
      - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new service_stop_event:
            LET user = event.User
            LET parent_process = event.ParentProcess
            LET service = event.ServiceName
            LET risk_score = 0
            IF user NOT IN baseline_users_for(service): risk_score += 1
            IF parent_process NOT IN baseline_parents_for(service): risk_score += 1
            IF risk_score >= 2: ALERT
  - question: Does a machine learning model classify a service stop command as a significant anomaly based on its command-line arguments and parent process?
    context: This question applies unsupervised machine learning to detect novel or sophisticated evasion techniques. Adversaries may obfuscate commands or use living-off-the-land binaries in unusual ways. An Isolation Forest model can identify these outliers without needing pre-defined rules, focusing on the rarity of the command's features compared to a vast history of legitimate events.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event ID 1
      - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new service_stop_command (Sysmon 1):
            LET features = featurize(event.CommandLine, event.ParentProcess)
            LET anomaly_score = isolation_forest_model.predict(features)
            IF anomaly_score > anomaly_threshold (top 1%):
              ALERT and CORRELATE with corresponding service_stop_event (WinEvent 7036)
  - question: Was a critical service stop preceded by suspicious inbound network activity, such as connections from untrusted IPs or the use of remote administration tools?
    context: This question seeks to link an internal effect (service stop) with a potential external cause (remote access). An adversary often needs to gain access to a host before they can stop a service. By looking for anomalous network connections immediately before the stop event, we can identify the potential intrusion vector, such as an RDP session from an unexpected source.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 7036
      - Zeek dce_rpc.log
      - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON service_stop_event (WinEvent 7036):
            LET host_ip = event.HostnameIP
            LET event_time = event.time
            SEARCH network_connections (Zeek conn.log, dce_rpc.log)
            WHERE dest_ip = host_ip AND time BETWEEN (event_time - 5m) AND event_time
            IF (source_ip is untrusted) OR (dest_port in (3389, 5985, 445) AND source_ip not in admin_hosts) OR (dce_rpc.operation = 'scmr'):
              ALERT
  - question: Did the network connection preceding a service stop deviate from the host's normal communication baseline in terms of source IP rarity or data volume?
    context: This question uses behavioral baselining on network traffic to find subtle anomalies. Instead of relying on static blocklists, it learns what is "normal" for a specific host. A connection from an IP that has rarely connected before, or a connection that transfers an unusually large amount of data, right before a service stops, is a strong statistical indicator of a potential attack.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 7036
      - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON service_stop_event (WinEvent 7036):
            LET host_ip = event.HostnameIP
            FOR each connection in preceding 5 mins to host_ip:
              LET source_ip_freq = get_historical_freq(connection.source_ip, 30d)
              LET byte_threshold = get_95th_percentile_bytes(host_ip, 30d)
              IF (source_ip_freq < 5%) OR (connection.total_bytes > byte_threshold):
                ALERT
  - question: Does a machine learning model identify any network connections preceding a service stop as highly anomalous compared to the host's learned normal network behavior?
    context: This question leverages an autoencoder to create a sophisticated model of normal network traffic for a host. This model can detect complex deviations across multiple features simultaneously. A high reconstruction error means the model struggled to represent the observed traffic based on its training, flagging it as a significant anomaly that warrants investigation in the context of a service stop.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 7036
      - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON service_stop_event (WinEvent 7036):
            LET host_ip = event.HostnameIP
            FOR each connection in preceding 5 mins to host_ip:
              LET features = featurize(connection)
              LET reconstruction_error = autoencoder_model.evaluate(features)
              IF reconstruction_error > error_threshold (99th percentile):
                ALERT
  - question: Has a critical service stopped without a preceding standard stop command or a recorded crash event?
    context: This question targets stealthy service termination methods. Adversaries might use direct API calls or other non-standard techniques to stop a service, which wouldn't generate a typical process creation event. By looking for a service stop event that is not explained by a command or a crash, we can uncover these more evasive actions.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7034
      - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON service_stop_event (WinEvent 7036) for critical_service:
            SEARCH for (WinEvent 4688/Sysmon 1 with 'stop' command) OR (WinEvent 7034 for same service)
            ON same_host in preceding 60 seconds.
            IF no results found:
              ALERT "Unexplained service stop"
  - question: Is there a statistically significant spike in the number of 'unexplained' service stops for a particular service?
    context: This question looks for trends in unexplained stops. A single unexplained stop might be a glitch, but a sudden increase in their frequency is a strong signal of a potential problem. Using a standard deviation-based threshold (Z-score) helps to automatically flag abnormal bursts of activity against a learned baseline.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7034
      - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE hourly count of 'unexplained stops' (from previous query's logic).
          CALCULATE mean and std_dev of hourly counts over last 30 days.
          IF current_hourly_count > (mean + 3 * std_dev):
            ALERT "Anomalous spike in unexplained service stops."
  - question: Does the rate of 'unexplained' service stops deviate from a time-series forecast that accounts for normal operational rhythms?
    context: This question applies a more sophisticated time-series model (like SARIMA) to the problem of detecting an abnormal frequency of unexplained stops. This approach is superior to a simple Z-score because it can account for seasonality (e.g., more stops during the day). An alert is triggered only when the actual count of stops falls outside the model's predicted confidence interval, resulting in a more robust detection.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Windows Event ID 7034
      - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE hourly count of 'unexplained stops'.
          LET forecast, confidence_interval = sarima_model.predict(next_hour)
          IF current_hourly_count > confidence_interval.upper_bound:
            ALERT "Unexplained stop count exceeds forecasted threshold."