name: T0813: Denial of Control
id: 9e3b1f9b-6d3a-4e2c-8a1d-5c6b7f8e9a0c
description: This playbook helps investigate whether an adversary is attempting to impact an industrial process by denying operator control. This can manifest as network-based denial-of-service attacks against critical ICS devices like PLCs or RTUs, the issuance of unauthorized or anomalous high-risk control commands, or by causing HMI/SCADA client software to crash or hang on operator workstations.
type: technique
related: TA0105: Impact
contributors: Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has an un-whitelisted external IP address initiated an abnormally high number of failed or rejected connections to a critical ICS asset over a common ICS protocol port?
    context: |
      This question aims to detect a common denial-of-service pattern, specifically a SYN flood or connection exhaustion attack. An attacker may attempt to overwhelm a critical device like a PLC or RTU by sending a high volume of connection requests that are never completed ('S0') or are actively rejected ('REJ', 'RSTO'). By filtering for source IPs not on a known-good whitelist and focusing on critical assets and specific ICS ports, this query helps identify targeted, potentially malicious activity aimed at denying control by exhausting device resources.
    answer_sources: Zeek conn.log, Network boundary points of Level 1 (Control) and Level 2 (Supervisory) ICS network segments, including firewalls and network taps monitoring traffic to PLCs, RTUs, HMIs, and SCADA servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log
          WHERE id.resp_h IN Critical_ICS_Assets
          AND id.resp_p IN [502, 20000, 102, 44818]
          AND id.orig_h NOT IN External_Comms_Whitelist
          AND conn_state IN ['S0', 'REJ', 'RSTO']
          GROUP BY id.orig_h, id.resp_h
          TIMEFRAME 60 seconds
          HAVING count > 100
  - question: Has a critical ICS asset experienced a significant spike in traffic volume or connection count that coincides with a sharp decrease in the diversity of source IP addresses?
    context: |
      This question seeks to identify denial-of-service attacks by looking for statistical anomalies in network traffic patterns. A legitimate operational state typically involves a varied set of source IPs communicating with a device. In a targeted attack, traffic volume and connection counts may skyrocket while the source IP entropy (a measure of randomness or diversity) plummets, as the attack often originates from a single or small number of sources. This dual condition—high volume and low source diversity, represented by $$ entropy(id.orig_h) $$ dropping below its 10th percentile—is a strong indicator of a DoS attack.
    answer_sources: Zeek conn.log, Network boundary points of Level 1 (Control) and Level 2 (Supervisory) ICS network segments, including firewalls and network taps monitoring traffic to PLCs, RTUs, HMIs, and SCADA servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOREACH asset in Critical_ICS_Assets:
            CALCULATE 30-day baseline of 5-min rolling averages for:
              - connection_count
              - sum(orig_bytes)
              - entropy(id.orig_h)
            ALERT IF for 2 consecutive 5-min intervals:
              (connection_count > 5 * 99th_percentile_baseline_count OR sum(orig_bytes) > 5 * 99th_percentile_baseline_bytes)
              AND
              (entropy(id.orig_h) < 10th_percentile_baseline_entropy)
  - question: Is the current network traffic pattern to a critical ICS asset significantly deviating from its learned historical 'normal' behavior, as identified by a machine learning model?
    context: |
      This question uses a sophisticated, model-based approach to detect anomalies that simpler threshold-based rules might miss. A time-series anomaly detection model learns the complex, nuanced patterns of normal network traffic, including features like $$ log_{10}(sum(orig_bytes)) $$, $$ log_{10}(connection_count) $$, $$ entropy(id.orig_h) $$, and connection state ratios like $$ ratio_S0_conns $$ and $$ ratio_REJ_conns $$. When live traffic no longer matches this learned pattern, the model produces a high 'reconstruction error,' signaling a significant deviation. This is a powerful method for detecting novel or complex attacks that don't fit pre-defined signatures, including sophisticated denial-of-control attempts.
    answer_sources: Zeek conn.log, Network boundary points of Level 1 (Control) and Level 2 (Supervisory) ICS network segments, including firewalls and network taps monitoring traffic to PLCs, RTUs, HMIs, and SCADA servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, not a direct query.
          // The logic is as follows:
          MODEL: LSTM Autoencoder
          TRAINING DATA: 30+ days of per-minute traffic aggregations per asset.
          FEATURES: log10(sum(bytes)), log10(connections), entropy(source_ip), entropy(source_port), ratio_S0_conns, etc.
          ALERT LOGIC:
            For each minute, feed live feature vector into the trained model.
            Calculate reconstruction error.
            ALERT IF reconstruction_error > (mean_error + 3 * stddev_error) for 3 consecutive minutes.
  - question: Has a high-risk ICS command been issued by a user, from a workstation, or via a process that is not explicitly authorized for that specific operation on that specific PLC?
    context: |
      This question aims to detect unauthorized control actions by cross-referencing ICS network activity with endpoint and identity data. The issuance of a high-risk command (like stopping a PLC or writing to a critical register) is a significant event. By correlating the network event with Windows logs, an analyst can attribute the action to a specific user and process. Checking this full context (who, what, where, to what) against a strict whitelist of approved operations provides a high-fidelity method for identifying malicious or accidental mis-operations that could lead to a denial of control or other impact.
    answer_sources: Zeek conn.log, Zeek modbus.log, Zeek s7comm.log, Zeek dnp3.log, Windows Event ID 4624, Windows Event ID 4688, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, and network taps monitoring Level 2 (Supervisory) to Level 1 (Control) network traffic, as well as Active Directory/Identity Management systems for user authentication.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH ICS protocol logs (modbus, s7comm, etc.) for high-risk commands.
          FOR EACH high-risk command:
            EXTRACT source_ip, target_ip, command_type.
            CORRELATE source_ip with Windows Event 4624 (logon) and 4688 (process creation) to get user and process_name.
            CREATE tuple: (user, source_ip, process_name, target_ip, command_type).
            ALERT IF tuple NOT IN Authorized_Operations_Whitelist.
  - question: Has an authorized user issued a sequence of ICS commands or a high-risk command at a time that is statistically unusual compared to their established behavior?
    context: |
      This question seeks to detect subtler forms of abuse, where a legitimate, authorized user account might be compromised or misused. Even if a user is authorized to perform an action, the context in which they do it matters. This query establishes a behavioral baseline for each authorized user, learning their typical command sequences and working hours. An alert is triggered if they issue an extremely rare sequence of commands or perform a critical action at an odd time (e.g., 3 AM on a Sunday). This behavioral anomaly detection can uncover an adversary operating under the guise of a legitimate user.
    answer_sources: Zeek conn.log, Zeek modbus.log, Zeek s7comm.log, Zeek dnp3.log, Windows Event ID 4624, Windows Event ID 4688, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, and network taps monitoring Level 2 (Supervisory) to Level 1 (Control) network traffic, as well as Active Directory/Identity Management systems for user authentication.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a behavioral baselining process.
          FOREACH authorized (user, workstation, PLC) triplet:
            BUILD 90-day baseline of:
              - Command n-gram (n=3) sequence probabilities.
              - Time-of-day/day-of-week distribution for high-risk commands.
          ALERT IF new command sequence probability < 1st_percentile_baseline.
          ALERT IF high-risk command issued > 2_stddev from mean_time_baseline.
  - question: Has a user's recent session of interaction with a PLC been identified as a behavioral outlier when compared to all previously observed normal operational sessions?
    context: |
      This question employs an advanced User and Entity Behavior Analytics (UEBA) approach to identify anomalous control sessions. Instead of looking at individual commands, it analyzes entire sessions (e.g., a 15-minute window of activity) as a single data point. By clustering historical sessions based on features like command count, read/write ratio, and command entropy, the model learns what different types of 'normal' work look like. A new session that doesn't fit into any existing cluster is flagged as an outlier or 'noise point'. This is a powerful technique for detecting an attacker whose overall interaction pattern with a device is fundamentally different from any legitimate operator's, even if individual commands seem plausible.
    answer_sources: Zeek conn.log, Zeek modbus.log, Zeek s7comm.log, Zeek dnp3.log, Windows Event ID 4624, Windows Event ID 4688, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, and network taps monitoring Level 2 (Supervisory) to Level 1 (Control) network traffic, as well as Active Directory/Identity Management systems for user authentication.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a UEBA/ML model, not a direct query.
          MODEL: DBSCAN clustering
          DATA: Historical ICS command sessions (15-min windows per user/workstation/PLC).
          FEATURES: command_count, read_write_ratio, command_type_entropy, mean_inter_command_time.
          PROCESS:
            Train DBSCAN model on historical sessions to define clusters of normal behavior.
            For each new session, attempt to classify it into an existing cluster.
            ALERT IF the new session is classified as a noise point (outlier).
  - question: Did a critical HMI or SCADA application crash or hang immediately following suspicious network activity directed at the host, such as communication with a known-bad IP, an unexpected file transfer, or unauthorized remote access attempts?
    context: |
      This question directly investigates the possibility that an application failure was maliciously induced. An HMI crash is a form of denial of control, as the operator loses visibility and interaction capability. This query connects the crash event (the effect) with potential malicious network precursors (the cause). By automatically looking back in the moments before the crash for clear indicators of compromise—like threat intel hits, executable file downloads, or unauthorized remote procedure calls—analysts can quickly determine if the crash was a random software bug or part of a targeted attack.
    answer_sources: Windows Event ID 1000, Windows Event ID 1002, Zeek conn.log, Zeek files.log, Zeek dce_rpc.log, Zeek rdp.log, Operator workstations (Level 2), Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and network taps monitoring traffic to and from these critical endpoints within the ICS network.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON TRIGGER: Windows Event 1000/1002 where Application IN Critical_HMI_Executables
          EXTRACT host_ip, timestamp.
          SEARCH network logs (Zeek) for host_ip from (timestamp - 5 minutes) to timestamp.
          ALERT IF any of the following are found:
            - conn.log: Connection with an IP on a threat intel blocklist.
            - files.log: Transfer of executable file (.exe, .dll, .ps1) from untrusted source.
            - dce_rpc.log or rdp.log: Unauthorized activity.
  - question: In the moments before an HMI application crashed, did the workstation receive network traffic from any source with an unusually high connection rate or payload randomness compared to its historical baseline?
    context: |
      This question looks for more subtle signs of a malicious precursor to an HMI crash, such as an exploit attempt. Many exploits or fuzzing tools send malformed data, which can appear as high-entropy (random) payloads. Similarly, some attacks involve rapidly opening connections to probe for vulnerabilities or exhaust resources. By comparing the connection rate and payload entropy from each source IP just before a crash to its established baseline, this query can pinpoint an anomalous traffic stream that was likely responsible for causing the application to fail.
    answer_sources: Windows Event ID 1000, Windows Event ID 1002, Zeek conn.log, Zeek files.log, Zeek dce_rpc.log, Zeek rdp.log, Operator workstations (Level 2), Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and network taps monitoring traffic to and from these critical endpoints within the ICS network.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON TRIGGER: Windows Event 1000/1002 for HMI application.
          EXTRACT host_ip, timestamp.
          ANALYZE Zeek conn.log for host_ip from (timestamp - 5 minutes) to timestamp.
          FOREACH source_ip in traffic:
            CALCULATE connection_rate and payload_entropy.
            COMPARE to 30-day baseline for that (source_ip, host_ip) pair.
            ALERT IF connection_rate > 99th_percentile OR payload_entropy > 99th_percentile.
  - question: Is the current network traffic being sent to an HMI workstation predicted to be highly likely to cause an application crash, based on a machine learning model trained on historical crash data?
    context: |
      This question represents a proactive, predictive approach to preventing denial of control. By training a supervised machine learning model on labeled data (network traffic windows that led to crashes vs. those that didn't), the system can learn the subtle, multi-faceted signatures of crash-inducing traffic. These signatures might involve combinations of features like byte count, connection rates, and protocol anomalies. By scoring live traffic in real-time, this model can alert an analyst to a potential attack *before* the HMI application actually crashes, potentially giving them time to intervene.
    answer_sources: Windows Event ID 1000, Windows Event ID 1002, Zeek conn.log, Zeek files.log, Zeek dce_rpc.log, Zeek rdp.log, Operator workstations (Level 2), Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and network taps monitoring traffic to and from these critical endpoints within the ICS network.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a predictive ML model, not a direct query.
          MODEL: Gradient Boosting Classifier
          TRAINING DATA: Labeled 60-second network traffic windows (Label=1 if HMI crashed after, Label=0 if not).
          FEATURES: total_bytes, connection_count, avg_duration, entropy_of_source_ips, ratio_of_rejected_connections, etc.
          PROCESS:
            Score live 60-second traffic windows destined for HMIs.
            ALERT IF predicted_crash_probability > 0.90.