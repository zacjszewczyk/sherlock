name: T0817: Drive-by Compromise
id: d6e8f7a0-62b1-4c9f-8d5e-3a9b0c8d7e6f
description: |
  This playbook helps answer the question: "Has an adversary compromised a host in our ICS environment via a drive-by attack?". It focuses on detecting evidence of drive-by compromise, where a user browsing a website inadvertently triggers the download and execution of malicious code. Key indicators include web browser processes spawning anomalous child processes (like command shells or script interpreters), network traffic to malicious or unusual domains, downloads of executable or suspicious file types, and the use of anomalous User-Agent strings in HTTP/S requests. The playbook provides investigative questions and queries to analyze process creation logs, network traffic logs (DNS, TLS, HTTP), and file creation events on critical ICS assets like Engineering Workstations and HMIs.
type: technique
related:
  - TA0108: Initial Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a web browser process spawning a suspicious child process like a command shell or script interpreter?
    context: |
      A common pattern in a drive-by compromise is for a vulnerability in a web browser or its plugin to be exploited, leading to the execution of arbitrary code. This often manifests as the browser process (e.g., chrome.exe) launching a child process that is not typical for web browsing, such as a command shell (cmd.exe), PowerShell, or a script interpreter (wscript.exe). This question aims to detect this high-confidence indicator by looking for specific parent-child process relationships and command-line patterns associated with post-exploitation activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Endpoint hosts including Engineering Workstations, Human-Machine Interface (HMI) terminals, operator consoles, and data historians within the Supervisory Control (Purdue Level 2) and Site Operations (Purdue Level 3) networks where process creation logs are collected.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_logs (Sysmon EID 1, Windows EID 4688)
          WHERE parent_process_name IN ['chrome.exe', 'iexplore.exe', 'msedge.exe']
          AND child_process_name IN ['cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe']
          OR child_command_line CONTAINS 'mshta.exe http://' OR 'rundll32.exe javascript:'
  - question: Has a web browser spawned a statistically rare child process or a process with an unusually complex command line?
    context: |
      Adversaries may use custom or renamed tools to evade simple signature-based detections. This question addresses that by employing a statistical approach. It involves baselining all normal parent-child process relationships for specific groups of assets (e.g., HMIs) over time. An alert is triggered when a web browser starts a child process that is statistically rare for that asset group. Additionally, analyzing the character entropy of command-line arguments can reveal obfuscated or complex commands often used by malware, providing another layer of anomaly detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Endpoint hosts including Engineering Workstations, Human-Machine Interface (HMI) terminals, operator consoles, and data historians within the Supervisory Control (Purdue Level 2) and Site Operations (Purdue Level 3) networks where process creation logs are collected.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_logs
          | BASELINE parent_child_frequency over 30 days by asset_group
          | ALERT where parent is browser and child_process_frequency < 1st percentile
          | BASELINE command_line_entropy by parent_child_pair
          | ALERT where entropy > 3 standard deviations from mean
  - question: Can a machine learning model identify a malicious process creation event originating from a web browser?
    context: |
      To improve detection accuracy and reduce false positives from rule-based or simple statistical methods, a machine learning approach can be used. This question involves training a classification model, such as a Random Forest, on a rich set of features from process creation events (e.g., process names, paths, command-line attributes, parent integrity level). The trained model can then score new events in real-time, generating a high-priority alert when a browser-spawned process is classified as malicious with high confidence, which is particularly valuable for protecting critical ICS assets.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 1 (Sysmon)
      - Zeek conn.log
      - Endpoint hosts including Engineering Workstations, Human-Machine Interface (HMI) terminals, operator consoles, and data historians within the Supervisory Control (Purdue Level 2) and Site Operations (Purdue Level 3) networks where process creation logs are collected.
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN Random Forest model on labeled process_creation_events
          DEPLOY model to score new events where parent is browser
          ALERT on event where malicious_probability_score > 0.85
  - question: Is a host communicating with a known malicious, newly registered, or suspicious domain, or using a fraudulent TLS certificate?
    context: |
      After initial compromise, malware often needs to communicate with a command-and-control (C2) server. This question focuses on detecting this network activity. By correlating DNS logs, connection logs, and TLS/SSL certificate logs, analysts can identify multiple red flags in a single connection. These include queries to domains on threat intelligence lists, domains created very recently (a common tactic for attackers), or TLS certificates that are self-signed, have weak encryption, or have a name that doesn't match the requested server.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Network traffic sensors at egress points, internal DNS resolvers, ICS network gateways, and the DMZ between IT and OT networks (Purdue Level 3.5) where Zeek or equivalent network security monitoring logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          JOIN dns.log, x509.log by connection_uid
          | LOOKUP domain against threat_intel_feed and domain_registration_date
          | ALERT if domain_on_threat_list OR domain_age < 30 days
          | ALERT if certificate_is_self_signed OR certificate_subject != dns_query
  - question: Are there signs of Domain Generation Algorithm (DGA) activity or non-standard TLS clients/servers in network traffic?
    context: |
      To make C2 infrastructure resilient, adversaries often use Domain Generation Algorithms (DGAs) to create a large number of potential domains for malware to contact. This question aims to detect DGA by calculating the character entropy of queried domain names; algorithmically generated domains often have a high entropy and appear random. Separately, analyzing TLS fingerprints (JA3/JA3S) can identify non-standard client or server software, as malware often uses custom TLS libraries that produce rare or unique fingerprints compared to standard browsers and servers.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Network traffic sensors at egress points, internal DNS resolvers, ICS network gateways, and the DMZ between IT and OT networks (Purdue Level 3.5) where Zeek or equivalent network security monitoring logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          CALCULATE shannon_entropy on domain_name from dns.log
          | ALERT if entropy_score > 98th percentile
          | BASELINE JA3 and JA3S hash frequency from ssl.log
          | ALERT if hash is new or frequency < 1st percentile
  - question: Are multiple internal assets communicating with the same set of rare external domains, suggesting a coordinated watering hole attack?
    context: |
      In a watering hole attack, an adversary compromises a website frequented by a specific group of targets. This question uses graph analysis to detect such an attack. By creating a graph of internal hosts and the external domains they connect to, community detection algorithms can reveal clusters of assets (e.g., several HMIs) that are all communicating with the same set of uncommon domains. This pattern is a strong indicator of a targeted attack against that group of assets and warrants immediate investigation.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Zeek ssl.log
      - Zeek x509.log
      - Network traffic sensors at egress points, internal DNS resolvers, ICS network gateways, and the DMZ between IT and OT networks (Purdue Level 3.5) where Zeek or equivalent network security monitoring logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          CREATE bipartite graph of (internal_hosts) -> (external_domains)
          | APPLY Louvain Modularity algorithm to find communities
          | ALERT on communities containing (multiple critical_assets) and (rare_domains)
  - question: Has a host downloaded an executable or script file from the web that has a known bad reputation?
    context: |
      A primary goal of a drive-by compromise is to deliver a malicious payload to the victim's machine. This question focuses on detecting the download of that payload. It involves creating rules to inspect network traffic for file downloads with executable MIME types (e.g., 'application/x-dosexec') or suspicious extensions (e.g., .ps1, .vbs). The hash of the downloaded file is then automatically checked against threat intelligence reputation services. A match provides high-confidence evidence of a malicious file download.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 11 (Sysmon)
      - Network egress points, internet gateway proxy servers, ICS network gateways, and local download folders (e.g., `%USERPROFILE%\\Downloads`) on engineering workstations and HMIs.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH files.log for mime_type LIKE 'application/x-dosexec' OR file_extension IN ['.ps1', '.vbs']
          | QUERY file_hash against reputation_service
          | ALERT if detection_ratio > 1
          | CORRELATE with Sysmon EID 11 using file_hash to find local_path
  - question: Has a file been downloaded that is anomalous for its source domain or its file type?
    context: |
      This question provides two methods for detecting anomalous file downloads beyond simple reputation checks. First, it establishes a baseline of the types of files (MIME types) typically served by different websites. An alert is triggered if a domain that usually serves benign content (like 'text/html') suddenly provides a high-risk file (like 'application/x-dosexec'). Second, it analyzes the byte entropy of downloaded files. A file with unusually high entropy for its type may be packed or encrypted to evade signature-based antivirus, making it suspicious.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 11 (Sysmon)
      - Network egress points, internet gateway proxy servers, ICS network gateways, and local download folders (e.g., `%USERPROFILE%\\Downloads`) on engineering workstations and HMIs.
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE mime_types per source_domain from http.log
          | ALERT if domain serves new high-risk mime_type
          | BASELINE file_entropy per mime_type from files.log
          | ALERT if file_entropy > 3 standard deviations from mean
  - question: Can a machine learning model predict whether a file download is malicious based on network and file metadata?
    context: |
      To create a more robust detection capability for malicious downloads, this question proposes using a machine learning model. By training a classifier (like Gradient Boosting) on a wide array of features—such as source domain reputation and age, URI characteristics, file size, file entropy, and connection duration—the model can learn the subtle patterns that differentiate malicious downloads from benign ones. This provides a scoring mechanism that can flag suspicious downloads with higher accuracy than individual rules.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 11 (Sysmon)
      - Network egress points, internet gateway proxy servers, ICS network gateways, and local download folders (e.g., `%USERPROFILE%\\Downloads`) on engineering workstations and HMIs.
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN Gradient Boosting model on labeled download events
          | USE features from http.log, files.log, conn.log, and external data
          | DEPLOY model to score all new file downloads
          | ALERT on download where malicious_probability_score > 0.80
  - question: Is a host using a known malicious, outdated, or mismatched User-Agent string in its web traffic?
    context: |
      The User-Agent (UA) string identifies the client software making a web request. Malware and attacker tools often use specific, hardcoded UA strings that can be flagged by threat intelligence. This question also addresses a more subtle technique: process/UA mismatch. By correlating network logs (HTTP User-Agent) with endpoint logs (process making the network connection), an analyst can spot anomalies like PowerShell (`powershell.exe`) making a request with a Chrome User-Agent, a strong sign of masquerading.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 3 (Sysmon)
      - Endpoint hosts such as Engineering workstations and HMIs where Sysmon logs are collected, and network gateways (corporate internet gateway, ICS network gateways) where Zeek logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH http.log for user_agent in malicious_ua_watchlist
          | CORRELATE http.log with Sysmon EID 3 via connection tuple
          | ALERT if process_name from Sysmon is inconsistent with user_agent
  - question: Is a host, particularly a critical asset, using a User-Agent string that is statistically rare or has an unusual length?
    context: |
      Beyond looking for known-bad User-Agent (UA) strings, this question focuses on finding unknown-bad UAs through statistical analysis. By aggregating all UA strings across the environment, it's possible to identify those that are extremely rare. A UA seen only once or twice, especially from a critical asset like an HMI, is highly suspicious and could indicate a custom C2 tool. Similarly, UA strings that are abnormally long or short can also be indicative of non-standard or malicious software.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 3 (Sysmon)
      - Endpoint hosts such as Engineering workstations and HMIs where Sysmon logs are collected, and network gateways (corporate internet gateway, ICS network gateways) where Zeek logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          AGGREGATE and count all user_agent strings over 30 days by asset_group
          | ALERT on user_agent where frequency < 5th percentile
          | ALERT on user_agent where length is < 1st or > 99th percentile
  - question: Can a machine learning model detect novel or malformed User-Agent strings indicative of malicious activity?
    context: |
      This question proposes an advanced, high-fidelity method for detecting anomalous User-Agent (UA) strings using an autoencoder neural network. The model is trained on all normal UA strings observed in the environment, learning to "reconstruct" them accurately. When a novel, malformed, or algorithmically generated UA string is passed through the model, the reconstruction will be poor, resulting in a high error score. This deviation from normalcy triggers a high-confidence alert, effectively identifying new and unknown threats.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 3 (Sysmon)
      - Endpoint hosts such as Engineering workstations and HMIs where Sysmon logs are collected, and network gateways (corporate internet gateway, ICS network gateways) where Zeek logs are generated.
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN autoencoder model on character vectors of normal user_agent strings
          | FOR each new user_agent, calculate reconstruction_error
          | ALERT if reconstruction_error > 99th percentile of training set errors