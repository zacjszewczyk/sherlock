name: T0862: Supply Chain Compromise
id: 1e9d3b4a-8c3b-4c1d-9d4a-3b1a9c8d2e1f
description: This playbook helps identify if an adversary has compromised the OT environment by exploiting a trusted relationship with suppliers or vendors. Indicators of compromise include anomalous outbound network connections from OT assets shortly after a software or firmware update, execution of masquerading processes that mimic legitimate ICS vendor applications but have invalid properties (hash, path, parent process, or digital signature), and unusual industrial protocol usage or network patterns from embedded controllers following a firmware update or project file download.
type: technique
related:
  - TA0108: Initial Access
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Following a software installation on an OT asset, has it initiated any outbound connections to destinations known to be malicious by threat intelligence feeds within a 72-hour window?
    context: This question is critical for detecting trojanized software updates, a common vector in supply chain attacks. A compromised software package will often 'call home' to a command-and-control (C2) server to receive instructions or exfiltrate data. Correlating software installation events with immediate outbound connections to known-malicious destinations is a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Vendor engineering station logs
      - Network egress points from OT segments (e.g., OT DMZ firewalls), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and IT/OT boundary firewalls.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each software_install_event (e.g., Windows Event ID 4697/4688) on asset_ip
            DEFINE end_time = event_time + 72 hours
            FOR each network_connection from asset_ip WHERE connection_time is between event_time and end_time
              LOOKUP destination_ip or destination_domain in threat_intelligence_feed
              IF match_found
                ALERT "High-Severity: Post-Install C2 Communication Detected"
  - question: After a software update on an OT asset, did it exhibit anomalous network behavior within 72 hours, such as connecting to a new destination (IP, ASN, or country) or exfiltrating an unusually large amount of data compared to its 90-day baseline?
    context: Adversaries may use novel C2 infrastructure that is not yet included in threat intelligence feeds. This question helps detect such activity by baselining an asset's normal network behavior. A sudden connection to a new Autonomous System Number (ASN) or a massive data upload post-update is highly suspicious, as it could indicate data exfiltration or C2 communication via a previously unused channel.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Vendor engineering station logs
      - Network egress points from OT segments (e.g., OT DMZ firewalls), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and IT/OT boundary firewalls.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each asset_ip
            BUILD 90-day baseline of (destination_ips, destination_asns, destination_countries) and CALCULATE 99th_percentile_outbound_bytes
          FOR each software_install_event on asset_ip
            DEFINE end_time = event_time + 72 hours
            FOR each outbound_connection from asset_ip WHERE connection_time is between event_time and end_time
              IF destination_asn NOT IN baseline.destination_asns
                ALERT "Medium-Severity: New Destination ASN Post-Install"
              IF outbound_bytes > baseline.99th_percentile_outbound_bytes
                ALERT "Medium-Severity: Anomalous Data Volume Post-Install"
  - question: Following a software update, did an OT asset's network traffic patterns show a significant deviation from its learned normal behavior, as identified by a time-series anomaly detection model?
    context: This question uses machine learning to find subtle, complex deviations in network behavior that simple rule-based methods might miss. A high reconstruction error from a model like an LSTM Autoencoder suggests the asset's current network activity (e.g., connection frequency, duration, protocol mix, time of day) is fundamentally different from its historical norm. This is a strong indicator of compromise after a software change.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek files.log
      - Vendor engineering station logs
      - Network egress points from OT segments (e.g., OT DMZ firewalls), Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and IT/OT boundary firewalls.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PRE-TRAIN anomaly_detection_model on historical network flow sequences for critical assets
          DEFINE anomaly_threshold = 99th percentile of model's historical reconstruction error
          FOR each software_install_event on asset_ip
            FEED subsequent network_flow_data into anomaly_detection_model
            CALCULATE reconstruction_error
            IF reconstruction_error > anomaly_threshold
              ALERT "High-Severity: ML Detected Behavioral Deviation Post-Install"
  - question: Has a process been executed on a critical OT endpoint that appears to be a legitimate ICS application but violates a defined allow-list (e.g., has a mismatched file hash, runs from a non-standard path, or is spawned by an unusual parent)?
    context: Adversaries often replace legitimate executables with malicious versions (Trojans) or place them in unusual directories to gain execution and persistence. This question uses a strict allow-list to detect such masquerading. A violation of the allow-list, such as a known process name executing with an unknown hash or from a temporary directory, is a strong signal that a trusted application has been compromised.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - File hash repository
      - Endpoint devices within the Process Control Network (PCN) and Manufacturing Zone, specifically Engineering Workstations, HMIs, application servers, and other Windows-based OT assets.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN allow_list_db of (process_name, known_hash, allowed_path, allowed_parent)
          FOR each process_creation_event (e.g., Sysmon Event 1)
            IF event.process_name in allow_list_db AND (event.hash NOT IN db.known_hash OR event.path NOT IN db.allowed_path OR event.parent_process NOT IN db.allowed_parent)
              ALERT "High-Severity: Process Allow-List Violation Detected"
  - question: Have any processes been launched on OT endpoints with unusually high entropy in their file paths or command-line arguments, potentially indicating obfuscation or randomization techniques used by malware?
    context: Malware authors often use randomized file paths or heavily obfuscated command-line arguments to evade signature-based detection and confuse analysts. Calculating the Shannon entropy of these strings provides a mathematical measure of their randomness. A spike in entropy for a given process's path or arguments, compared to its historical baseline, can effectively uncover these evasion tactics.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - File hash repository
      - Endpoint devices within the Process Control Network (PCN) and Manufacturing Zone, specifically Engineering Workstations, HMIs, application servers, and other Windows-based OT assets.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, process_name
            BUILD 30-day baseline and CALCULATE 95th_percentile_entropy for (file_path, command_line)
          FOR each new process_creation_event
            CALCULATE entropy for event.file_path and event.command_line
            IF path_entropy > baseline.95th_percentile_path_entropy OR cmd_entropy > baseline.95th_percentile_cmd_entropy
              ALERT "Medium-Severity: High Entropy Process Parameter Detected"
  - question: Has a supervised machine learning model, trained on process creation event features, classified any new process on an OT endpoint as malicious with a high degree of confidence?
    context: This question leverages a sophisticated, feature-based machine learning approach to identify malicious process activity that might evade simpler checks. By training a model on features like parent process name, file path characteristics, command-line properties, and digital signature status, it can learn the complex patterns that distinguish legitimate from malicious behavior, providing a powerful detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1 (Process Creation)
      - File hash repository
      - Endpoint devices within the Process Control Network (PCN) and Manufacturing Zone, specifically Engineering Workstations, HMIs, application servers, and other Windows-based OT assets.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PRE-TRAIN ml_classifier on labeled Sysmon Event 1 data
          FOR each new process_creation_event
            EXTRACT features (parent_process, path_depth, path_entropy, signature_status, etc.)
            PREDICT classification = ml_classifier.predict(features)
            GET confidence_score
            IF classification == 'malicious' AND confidence_score > 0.9
              ALERT "High-Severity: ML Classified Malicious Process Creation"
  - question: Has any network traffic to a critical controller (PLC, RTU, IED) violated a strict communication policy, such as an unauthorized host sending a critical state-changing command?
    context: In OT environments, controller communication is typically predictable and deterministic. This question aims to enforce a "zero trust" policy at the industrial protocol level. Any deviation, such as an unknown engineering station attempting to send a 'Stop PLC' command (S7comm 'Stop') or 'Cold Restart' (DNP3), is a critical security event and a potential sign of an adversary directly interacting with the control process.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Industrial Firewall logs
      - Network segments at Level 1 (Basic Control) and Level 2 (Area Supervisory Control) of the Purdue Model, particularly network taps and span ports monitoring traffic to/from PLCs, RTUs, and IEDs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allow_list of (source_ip, dest_ip, protocol, function_code)
          FOR each industrial_protocol_packet (e.g., from zeek/modbus.log)
            IF (packet.source_ip, packet.dest_ip, packet.protocol, packet.function_code) NOT IN allow_list
              ALERT "Critical: Unauthorized Industrial Protocol Command Detected"
  - question: Following a firmware update or project download, has a controller exhibited anomalous communication patterns, such as talking to a new device, using an unusual function code, or sending an abnormal volume of data, when compared to its 90-day baseline?
    context: This question focuses on detecting behavioral changes in a controller's network activity after a potential compromise event like a firmware update. A malicious firmware could cause the controller to communicate with new C2 servers on the internal network, use protocol functions for reconnaissance, or exfiltrate logic files. Comparing activity against a historical baseline helps spot these subtle but significant deviations.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Industrial Firewall logs
      - Network segments at Level 1 (Basic Control) and Level 2 (Area Supervisory Control) of the Purdue Model, particularly network taps and span ports monitoring traffic to/from PLCs, RTUs, and IEDs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each controller_ip
            BUILD 90-day baseline of (peer_ips, function_codes) and CALCULATE data_volume_mean, data_volume_std_dev
          FOR each 24_hour_window post-update
            IF controller communicates with new_peer_ip NOT IN baseline.peer_ips
              ALERT "Medium-Severity: Controller Communicating with New Peer"
            IF controller uses new_function_code NOT IN baseline.function_codes
              ALERT "Medium-Severity: Controller Using New Function Code"
            IF hourly_data_volume > (baseline.mean + 3 * baseline.std_dev)
              ALERT "Medium-Severity: Anomalous Data Volume from Controller"
  - question: Has an unsupervised machine learning model detected that a controller's live network traffic is a significant statistical outlier compared to its historically normal communication fingerprint?
    context: This question employs an ML model (e.g., Isolation Forest) to create a comprehensive "fingerprint" of a controller's normal network behavior. This is more powerful than baselining individual metrics because it can detect anomalies in the combination of features (e.g., a common port used with an uncommon protocol). A high anomaly score points to behavior the device has never exhibited before, making it a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Industrial Firewall logs
      - Network segments at Level 1 (Basic Control) and Level 2 (Area Supervisory Control) of the Purdue Model, particularly network taps and span ports monitoring traffic to/from PLCs, RTUs, and IEDs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PRE-TRAIN anomaly_detection_model on historical network flows for each critical controller
          FOR each new network_flow for a controller
            CALCULATE anomaly_score = model.predict(flow_features)
            IF anomaly_score indicates a high anomaly
              ALERT "High-Severity: ML Detected Anomalous Network Flow from Controller"