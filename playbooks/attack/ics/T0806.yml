name: T0806: Brute Force I-O
id: 6f9b8c2a-1e3d-4b5a-9c6f-0a1b2c3d4e5f
description: This playbook helps investigate whether an adversary is attempting to impair process control by manipulating I/O points, a technique known as Brute Force I-O (T0806). The investigation focuses on detecting three primary patterns of malicious activity: high-frequency bursts of write commands from unauthorized or compromised sources; systematic scanning of I/O points to discover writable addresses; and rapid, repeated state changes ('toggling') of a specific I/O point, which could damage or disable physical equipment. The playbook provides investigative questions and queries using symbolic logic, statistical analysis, and machine learning to identify these behaviors across network and host data sources.
type: technique
related:
  - TA0106: Impair Process Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a high-frequency burst of ICS write commands originating from an unauthorized or suspicious source?
    context: This question uses symbolic logic to determine if a high-frequency write event is malicious. It first checks if the source IP is in an authorized asset inventory. If it's not, the event is flagged as a high-confidence unauthorized attempt. If the source is authorized (e.g., an HMI), the logic performs a secondary check on the host's endpoint logs for any newly created processes around the event time. If a new process was launched but doesn't match a pre-defined allow-list of legitimate SCADA applications, it suggests the authorized host may be compromised and is being used for malicious purposes.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Programmable Logic Controllers (PLCs), OT network traffic monitoring points (e.g., SPAN ports on OT switches), and Data Historians.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Detect a high-frequency write event from statistical or ML methods
          high_freq_event = DETECT high_frequency_write(source_ip, dest_plc, io_point)

          // Check if the source IP is authorized
          is_authorized = CHECK source_ip in authorized_asset_inventory

          IF NOT is_authorized THEN
            ALERT "High-Confidence Unauthorized Write Attempt"
          ELSE
            // If authorized, check for suspicious process creation on the source host
            suspicious_process = QUERY endpoint_logs(source_ip) for new_process (EventID 4688) within 5_min_window of high_freq_event
            IF suspicious_process.name NOT IN scada_application_allow_list THEN
              ALERT "Suspicious Write Attempt from Authorized Host"
            END IF
          END IF
  - question: Has the frequency of write commands for a specific source-destination-I/O point tuple statistically deviated from its normal baseline?
    context: This question applies a statistical method to identify anomalous write command frequencies. For every unique combination of source IP, destination PLC, and I/O address, the system calculates a 30-day baseline, including the 99th percentile and the mean plus three standard deviations of write counts per minute. This dual-threshold approach is designed to be highly specific, triggering an alert only when a new count is statistically significant, thus minimizing false positives that might arise from legitimate but infrequent operational tasks.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Programmable Logic Controllers (PLCs), OT network traffic monitoring points (e.g., SPAN ports on OT switches), and Data Historians.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH unique_tuple (source_ip, dest_plc, io_address):
            // Calculate baseline from 30 days of 1-minute write counts
            baseline = CALCULATE_30_day_baseline(tuple)
            percentile_99 = baseline.percentile_99
            upper_control_limit = baseline.mean + (3 * baseline.std_dev)

            // Check current activity
            current_count = GET write_count_for_last_minute(tuple)

            IF current_count > percentile_99 AND current_count > upper_control_limit THEN
              ALERT "Statistical Anomaly in Write Frequency Detected"
            END IF
          END FOR
  - question: Does the pattern of write commands to a critical I/O point indicate a behavioral anomaly when analyzed by a time-series model?
    context: This question leverages a machine learning model, such as an LSTM Autoencoder, to detect subtle deviations in operational patterns. The model is trained on at least 90 days of historical data, learning the normal "rhythm" of I/O writes based on features like write count, time of day, and function code. In production, the model predicts the expected pattern and compares it to live data. A high reconstruction error (a significant difference between prediction and reality) indicates a novel pattern inconsistent with normal operations, triggering an alert for further investigation.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Programmable Logic Controllers (PLCs), OT network traffic monitoring points (e.g., SPAN ports on OT switches), and Data Historians.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Train the model on historical data for critical I/O points
          features = [write_count, time_of_day, day_of_week, function_code]
          model = TRAIN LSTM_Autoencoder(historical_data, features)

          // Feed live data into the trained model
          live_stream = GET live_data_for_io_points
          FOR EACH data_point in live_stream:
            prediction = model.predict(data_point)
            reconstruction_error = CALCULATE_error(data_point, prediction)

            IF reconstruction_error > predefined_threshold THEN
              ALERT "ML Detected Behavioral Anomaly in I/O Writes"
            END IF
          END FOR
  - question: Is a source IP scanning for I/O points by targeting a high ratio of invalid addresses or using sequential addressing?
    context: This question uses symbolic logic to detect I/O scanning behavior. Within a 30-second window, it analyzes all I/O addresses targeted by a single source IP. It raises an alert if it detects one of two conditions: 1) The percentage of targeted addresses that are invalid (not present in a PLC configuration map) exceeds 75%, suggesting a brute-force guess. 2) The valid addresses are being targeted in a clear arithmetic sequence (e.g., 1001, 1002, 1003, 1004, 1005), which is a strong indicator of systematic scanning rather than legitimate operational commands.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments, Programmable Logic Controllers (PLCs), ICS protocol gateways, centralized PLC configuration management databases, and network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH source_ip in 30-second_window:
            // Group targeted I/O addresses
            targeted_addrs = GET all_io_addresses_from(source_ip)
            valid_addrs_list = GET valid_writable_io_points_for_plc()

            // Check for high ratio of invalid addresses
            invalid_count = COUNT addresses in targeted_addrs NOT IN valid_addrs_list
            IF (invalid_count / total(targeted_addrs)) > 0.75 THEN
              ALERT "Scanning Detected: High Ratio of Invalid I/O Addresses"
            END IF

            // Check for sequential scanning
            sequence = DETECT_arithmetic_progression(targeted_addrs, length=5)
            IF sequence_found THEN
              ALERT "Scanning Detected: Sequential I/O Address Targeting"
            END IF
          END FOR
  - question: Has the randomness (Shannon entropy) of I/O addresses targeted by a source IP statistically increased, suggesting scanning instead of operational writes?
    context: This question applies a statistical method to differentiate between normal, targeted operations and broad, random scanning. It calculates the Shannon entropy of I/O addresses targeted by a source-destination pair within a 5-minute window. A 30-day rolling baseline for this entropy value is established. A sudden spike in entropy (e.g., exceeding the baseline by more than two standard deviations) suggests the source has shifted from predictable operational writes to indiscriminate scanning activity, which is highly suspicious.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments, Programmable Logic Controllers (PLCs), ICS protocol gateways, centralized PLC configuration management databases, and network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH pair (source_ip, dest_plc):
            // Establish a 30-day baseline for entropy
            baseline = CALCULATE_30_day_entropy_baseline(pair)
            upper_limit = baseline.mean + (2 * baseline.std_dev)

            // Calculate current entropy
            current_addrs = GET targeted_io_addrs_in_last_5_mins(pair)
            current_entropy = CALCULATE_shannon_entropy(current_addrs)

            IF current_entropy > upper_limit THEN
              ALERT "Statistical Anomaly: Sharp Increase in I/O Address Entropy Suggests Scanning"
            END IF
          END FOR
  - question: Can clustering algorithms identify anomalous I/O write patterns indicative of scanning behavior by flagging them as noise?
    context: This question uses a machine learning clustering algorithm like DBSCAN to identify anomalous scanning behavior. I/O write events are aggregated into 1-minute windows and converted into feature vectors (e.g., count of unique PLCs targeted, count of unique I/O addresses, entropy of addresses). The model is trained on historical data to identify "clusters" of normal activity. Any new data point that does not fit into an existing cluster is flagged as "noise" or an outlier. Such outliers represent novel behaviors that are likely indicative of scanning and should be investigated.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments, Programmable Logic Controllers (PLCs), ICS protocol gateways, centralized PLC configuration management databases, and network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Aggregate data into feature vectors
          features = [unique_PLCs_count, unique_IO_addrs_count, IO_addr_entropy]
          data_points = AGGREGATE events over 1-min windows with features

          // Train model on historical data to define normal clusters
          model = TRAIN DBSCAN(historical_data_points)

          // Classify new data
          FOR EACH new_point in data_points:
            classification = model.classify(new_point)
            IF classification == "noise" THEN
              ALERT "ML Detected Anomalous Scanning Behavior (Outlier)"
            END IF
          END FOR
  - question: Is a rapid toggling of an I/O point correlated with an anomalous user logon on the source machine?
    context: This question uses symbolic logic to add critical context to an I/O toggling event. When a high toggle frequency is detected, this logic first verifies if the source IP is on an allow-list for writing to the PLC. If it is an authorized source (like an HMI), the logic then correlates the event's timestamp with successful logon events (Windows Event ID 4624) on that machine. An alert is escalated if the associated logon is itself anomalous, exhibiting at least two suspicious traits (e.g., occurring at an unusual time, originating from a new country, or performed by a user who has never written to that I/O point before). This strongly suggests a compromised account or host.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments, Programmable Logic Controllers (PLCs), critical field devices (actuators, valves, breakers), HMIs, Active Directory domain controllers, and Identity and Access Management (IAM) log repositories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON DETECT toggle_frequency_anomaly(source_ip):
            // Check if source is authorized
            is_authorized = CHECK source_ip in plc_write_allow_list
            IF NOT is_authorized THEN
              ALERT "Unauthorized I/O Toggling Detected"
              STOP
            END IF

            // Correlate with logon events on the authorized host
            logon = FIND successful_logon (EventID 4624) on source_ip near event_time
            IF logon_found:
              anomalous_traits = 0
              IF logon.time is outside user_working_hours_baseline THEN anomalous_traits++
              IF logon.source_geo is new_for_user_in_30_days THEN anomalous_traits++
              IF user has no_history_with_this_io_point THEN anomalous_traits++

              IF anomalous_traits >= 2 THEN
                ALERT "I/O Toggling Correlated with Anomalous Logon"
              END IF
            END IF
  - question: Is a critical I/O point changing state ('toggling') at a frequency that exceeds either its engineering safety limits or its historical statistical baseline?
    context: This question uses a statistical method to detect potentially dangerous or anomalous I/O point toggling. For critical discrete I/O points, it monitors the number of state changes per minute. It generates an alert if this "toggle frequency" breaches one of two thresholds: 1) a static, pre-defined engineering safety limit (e.g., a large valve should not be toggled more than 5 times per minute to prevent damage), or 2) a dynamic, statistical baseline (e.g., the 98th percentile of its observed frequency over the last 30 days). This dual approach catches both unsafe conditions and significant deviations from normal operational behavior.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments, Programmable Logic Controllers (PLCs), critical field devices (actuators, valves, breakers), HMIs, Active Directory domain controllers, and Identity and Access Management (IAM) log repositories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH critical_io_point:
            // Get pre-defined safety limit
            safety_limit = GET engineering_safety_limit(io_point)

            // Calculate 30-day baseline
            baseline_98th_percentile = CALCULATE 30-day_percentile(io_point, 98)

            // Monitor live toggle frequency
            current_toggle_freq = COUNT state_changes_per_minute(io_point)

            IF current_toggle_freq > safety_limit OR current_toggle_freq > baseline_98th_percentile THEN
              ALERT "Anomalous I/O Point Toggling Frequency Detected"
            END IF
          END FOR
  - question: Does a behavioral anomaly model identify a sequence of writes to a critical I/O point as anomalous, consistent with malicious toggling?
    context: This question applies a machine learning model, such as an Isolation Forest, to detect anomalous behavior at the individual I/O point level. The model is trained on historical data to learn the normal "rhythm" of operations for a point, using features like the value being written, the time elapsed since the last write, and the source IP. An adversary rapidly toggling a value will create a sequence of events with feature vectors that are very different from normal operations. The model will assign these events a high anomaly score, effectively flagging the malicious toggling while ignoring normal state changes.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments, Programmable Logic Controllers (PLCs), critical field devices (actuators, valves, breakers), HMIs, Active Directory domain controllers, and Identity and Access Management (IAM) log repositories.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH critical_io_point:
            // Train model on normal operational 'rhythm'
            features = [value_written, time_since_last_write, source_ip, function_code]
            model = TRAIN Isolation_Forest(historical_data, features)

            // Score new events in real-time
            live_events = GET live_write_events(io_point)
            FOR EACH event in live_events:
              anomaly_score = model.score(event)
              IF anomaly_score > predefined_threshold THEN
                ALERT "ML Detected Behavioral Anomaly Consistent with Toggling"
              END IF
            END FOR
          END FOR