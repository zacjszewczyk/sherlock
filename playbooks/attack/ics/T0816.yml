name: T0816: Device Restart-Shutdown
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on identifying when a critical Industrial Control System (ICS) device has been restarted or shut down, particularly outside of a scheduled maintenance window. It covers detection through three primary evidence types: monitoring for specific Windows shutdown/restart event logs on assets like HMIs and EWS; observing explicit ICS protocol commands (e.g., DNP3, Modbus, EtherNet/IP) designed to restart controllers; and detecting a sustained and anomalous cessation of expected periodic communications from devices like PLCs and RTUs. The goal is to distinguish between legitimate administrative actions and malicious attempts to inhibit response functions or disrupt physical processes.
type: technique
related:
- TA0107: Inhibit Response Function
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can I detect and verify potentially malicious user-initiated or unexpected system shutdowns on critical Windows-based ICS assets?
  context: This question aims to identify unauthorized shutdown or restart events on critical systems like HMIs and EWS. An unexpected shutdown (Windows Event ID 6008) is a strong indicator of a problem. A user-initiated shutdown (Event ID 1074) or clean shutdown (6006) is suspicious if it happens outside a maintenance window and is not caused by a known, whitelisted process (like a system update). Correlating these events with logon and network activity helps determine if the action was performed by a legitimate user and from an authorized location, differentiating between normal administrative tasks and potential malicious activity.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Windows Event ID 6008
  - Windows Event ID 4624
  - Windows Event ID 4634
  - Windows Event ID 4688
  - Zeek conn.log
  - Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, SCADA Servers, and Data Historians within the Process Control Network (PCN) and OT DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH for (EventID 6008) OR (EventID 1074 OR EventID 6006 AND time NOT IN maintenance_window AND process_name NOT IN approved_process_list)
      ON critical_ics_assets
      CORRELATE with logon events (EventID 4624) and network logs (Zeek conn.log) around the event time
      TO verify user and source host.
- question: Can I identify an anomalous frequency or type of shutdown events on critical ICS assets?
  context: This question focuses on detecting deviations from normal shutdown behavior. Even legitimate shutdown events can be part of an attack if they occur with unusual frequency. By creating a baseline of normal shutdown activity (event counts and reason codes) during non-maintenance periods, analysts can be alerted to statistically significant spikes or the appearance of rare shutdown reasons. This provides a quantitative method for spotting subtle anomalies that might otherwise be missed.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, SCADA Servers, and Data Historians within the Process Control Network (PCN) and OT DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each critical_asset
        CALCULATE 90-day baseline of hourly counts for EventID 1074, 6006 outside maintenance_windows.
        ALERT if current hourly count > 99th percentile of baseline.
        CALCULATE 90-day baseline of ShutdownReason codes from EventID 1074.
        ALERT if a new ShutdownReason is observed.
- question: How can a machine learning model be used to classify shutdown events on critical ICS assets as benign or malicious?
  context: This question explores using a supervised machine learning model to automate the detection of malicious shutdown events. By training a model on historical data labeled as 'benign' or 'malicious', the system can learn the complex patterns that differentiate the two. Features like the event ID, time of day, initiating process, and user context provide the model with rich information to make a classification. This approach moves beyond simple rules to a more sophisticated, context-aware detection method.
  answer_sources:
  - Windows Event ID 1074
  - Windows Event ID 6006
  - Windows Event ID 4624
  - Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, SCADA Servers, and Data Historians within the Process Control Network (PCN) and OT DMZ.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN classification model (e.g., Random Forest) on historical logs (EventIDs, time, process, user context) labeled as 'benign' or 'malicious'.
      APPLY model to new shutdown events in real-time.
      ALERT if classification is 'malicious' with confidence > 0.9.
- question: How can I detect explicit ICS protocol commands used to restart critical devices like PLCs or RTUs?
  context: This question targets the direct manipulation of industrial controllers through their native protocols. Attackers can use legitimate but powerful commands (like DNP3 'Cold Restart') to disrupt physical processes. The goal is to immediately flag the use of these specific commands and cross-reference the source IP against a whitelist of authorized workstations to distinguish between legitimate engineering actions and unauthorized commands.
  answer_sources:
  - Zeek conn.log
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Network taps or SPAN ports monitoring traffic between Purdue Levels 0 (Process), 1 (Basic Control), and 2 (Supervisory Control), particularly at network aggregation points for PLCs, RTUs, and IEDs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      SEARCH for specific restart commands in ICS protocol logs (e.g., DNP3 'COLD_RESTART', Modbus function 8 sub-function 1).
      ON alert, ENRICH with asset inventory data.
      CROSS-REFERENCE source IP against authorized workstation whitelist.
      ESCALATE if source is unauthorized.
- question: Can I detect an anomalous frequency of restart commands or an unusual pattern of command sources targeting critical ICS devices?
  context: This question addresses that even authorized restart commands can be malicious if they occur too frequently or outside normal windows. It proposes baselining the normal daily count of restart commands to detect spikes. It also suggests monitoring the diversity of source IP addresses (Shannon entropy); a sudden drop in diversity could indicate a single, potentially compromised host is monopolizing communication, which is a significant deviation from normal.
  answer_sources:
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Network taps or SPAN ports monitoring traffic between Purdue Levels 0 (Process), 1 (Basic Control), and 2 (Supervisory Control), particularly at network aggregation points for PLCs, RTUs, and IEDs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each critical_device
        CALCULATE 30-day baseline of daily restart command counts.
        ALERT if current daily count > 99th percentile of baseline OR if command occurs outside maintenance_window.
        CALCULATE rolling 1-hour Shannon entropy of source IPs.
        ALERT if entropy drops below 5th percentile of baseline.
- question: How can an unsupervised machine learning model identify anomalous ICS protocol commands that might indicate a device restart attempt?
  context: This question proposes using unsupervised learning to find "unknown unknowns" in ICS traffic. An unsupervised model (like Isolation Forest) learns the characteristics of normal traffic patterns from a baseline period. Any new command or sequence that significantly deviates from this learned norm is flagged as an anomaly. This is powerful for detecting novel attack techniques or misuse of legitimate commands in an unusual context that would not trigger a specific rule.
  answer_sources:
  - Zeek conn.log
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Network taps or SPAN ports monitoring traffic between Purdue Levels 0 (Process), 1 (Basic Control), and 2 (Supervisory Control), particularly at network aggregation points for PLCs, RTUs, and IEDs.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      TRAIN unsupervised model (e.g., Isolation Forest) on baseline ICS protocol traffic features (protocol, function, IPs, timing).
      SCORE new commands in real-time using the model.
      ALERT on commands with a high anomaly score.
- question: How can I detect when a critical controller goes offline by monitoring for a cessation of its expected periodic communications?
  context: This question provides a simple, stateful method for detecting if a device has shut down. It involves setting a static timeout for each critical device, based on its known communication frequency (e.g., three times its polling interval). If no communication is seen from the device within that timeout period (and it is not a scheduled maintenance window), an alert is generated. This is a direct way to infer a device shutdown.
  answer_sources:
  - Zeek conn.log
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Core switches in the Process Control Network (PCN) and aggregation switches at Purdue Levels 1 and 2, where network traffic from PLCs, RTUs, and IEDs is concentrated and can be monitored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each critical_controller
        TRACK timestamp of last received communication.
        DEFINE timeout threshold (e.g., 3x polling interval).
        ALERT if time_since_last_packet > threshold AND time NOT IN maintenance_window.
        CORRELATE with TCP RST flags in conn.log for the device.
- question: How can I use statistical analysis of packet timing to detect a significant communication gap from a critical controller?
  context: This question offers a more dynamic and statistically rigorous alternative to static timeouts. This method establishes a baseline distribution of the normal time delays between packets for each device. An alert is triggered only when the current gap since the last packet exceeds a high percentile (e.g., 99.9th) of this historical distribution. This approach is more sensitive and adapts to devices with variable communication patterns, reducing false positives.
  answer_sources:
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Core switches in the Process Control Network (PCN) and aggregation switches at Purdue Levels 1 and 2, where network traffic from PLCs, RTUs, and IEDs is concentrated and can be monitored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each critical_controller
        CALCULATE 30-day baseline distribution of inter-packet arrival times.
        ALERT if current time_since_last_packet > 99.9th percentile of baseline.
- question: Can a time-series forecasting model predict a controller's communication pattern and detect an anomalous drop in traffic suggesting a shutdown?
  context: This question proposes using a time-series model (like ARIMA) to learn the expected packet count per minute for a device. In real-time, the model predicts the expected traffic volume and a confidence interval. If the actual observed traffic falls below this confidence interval for a sustained period, it signals a statistically improbable drop in communication, strongly suggesting the device is offline or malfunctioning.
  answer_sources:
  - Zeek dnp3.log
  - Zeek modbus.log
  - Zeek enip.log
  - Zeek opcua.log
  - Core switches in the Process Control Network (PCN) and aggregation switches at Purdue Levels 1 and 2, where network traffic from PLCs, RTUs, and IEDs is concentrated and can be monitored.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each critical_controller
        TRAIN time-series model (e.g., ARIMA) on its packet count per minute.
        IN real-time, COMPARE observed packet count to model's prediction.
        ALERT if observed count is below the 99% confidence interval for >3 consecutive minutes.