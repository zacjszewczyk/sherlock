name: T0851: Rootkit
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps answer whether an adversary is using a rootkit to hide their presence on ICS assets or to inhibit the response function of an ICS device. It provides investigative questions focused on detecting rootkits by analyzing discrepancies between network and host logs, identifying suspicious service creations, monitoring for abnormal network connection states on ICS protocols, and correlating application crashes with network activity.
type: technique
related:
- TA0103: Evasion
- TA0107: Inhibit Response Function
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can we identify unattributed network connections that might indicate a rootkit hiding its activity?
  context: A rootkit can manipulate the OS to hide its processes and network activity. By comparing network sensor data (like Zeek) with host-based logs (like Sysmon or Windows Events), we can find outbound connections that do not have a corresponding process on the host. This discrepancy is a strong indicator of a hidden threat. This question focuses on finding these unattributed connections in real-time and correlating them with threat intelligence.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - NAI - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
  range: last 90 days
  queries:
  - pseudocode: FOR each Zeek_conn_log_entry | JOIN with (Sysmon_Event_3 OR Windows_Event_5156) on (IPs, ports, timestamp_within_5s) | WHERE join_is_null | FLAG as 'unattributed' | IF unattributed_dest_IP in (Threat_Intel_Feed OR NOT in Egress_Whitelist) THEN ALERT
- question: Can we detect rootkit activity by baselining and identifying statistical anomalies in unattributed network traffic?
  context: Instead of just looking for single unattributed connections, this question aims to find subtle, long-term patterns. By establishing a baseline of normal 'unattributed' traffic, which might have benign causes, we can alert when there is a statistically significant increase. This is useful for detecting low-and-slow activity. Monitoring the ratio of data sent also helps spot potential data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - NAI - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
  range: last 90 days
  queries:
  - pseudocode: CALCULATE hourly_count of 'unattributed' connections per host | BASELINE over 30 days | ALERT if current_count > (baseline_mean + 3 * std_dev). THEN, CALCULATE hourly_ratio of unattributed_bytes_sent / total_bytes_sent | ALERT if ratio increases > 50% over 7-day moving average.
- question: Can a machine learning model be used to classify network flows and assign a risk score to identify suspicious unattributed connections?
  context: This question explores a more advanced, machine learning-based approach. By training a model on known good and bad network flow characteristics (like protocol, port, bytes, etc.), we can create a system that automatically scores new connections for their likelihood of being malicious. This provides a more nuanced risk assessment than simple rule-based alerts.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - NAI - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
  range: last 90 days
  queries:
  - pseudocode: TRAIN classification_model on labeled_network_flows | DEPLOY model for real-time scoring | FOR each new flow | GENERATE features (protocol, port, bytes, is_unattributed, geoIP, ASN) | SCORE flow with model | ALERT if score > threshold AND classified as 'unattributed-suspicious'.
- question: How can we detect potentially malicious services by analyzing their creation events for suspicious properties like non-standard paths or invalid signatures?
  context: Adversaries often install rootkits as Windows services for persistence. This question focuses on basic-but-effective checks during service creation. By looking for services installed in unusual directories (like user temp folders) or those that lack a valid digital signature, we can quickly flag common malware persistence techniques.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7040
  - Sysmon Event ID 1
  - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
  - NAI - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
  range: last 90 days
  queries:
  - pseudocode: ON new Service_Creation_Event (EID 7045) | IF ImagePath NOT in ('C:\\Windows\\system32', 'C:\\Program Files\\') THEN ALERT | IF ServiceName in Malware_Blocklist THEN ALERT | CROSS-REFERENCE with Sysmon_Event_1 for same process | IF Signed == 'false' THEN ALERT.
- question: Can statistical analysis of service names and modification frequency reveal rootkit installation?
  context: This question moves beyond simple path checks to statistical methods. Malware often uses randomly generated names for services and files to evade simple signature-based detection. By calculating the entropy (randomness) of a new service's name and comparing it to a baseline of normal names, we can spot these algorithmically generated names. Monitoring for an unusual number of service modifications can also indicate an adversary altering configurations.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7040
  - Sysmon Event ID 1
  - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
  - NAI - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
  range: last 90 days
  queries:
  - pseudocode: ON new Service_Creation_Event | CALCULATE entropy of ServiceName and ImagePath_filename | BASELINE entropy over 90 days | ALERT if entropy > 95th_percentile_of_baseline. THEN, TRACK daily_count of Service_Modification_Events (EID 7040) | ALERT if count > 99th_percentile_of_historical_daily_counts.
- question: Can an unsupervised machine learning model identify anomalous new services that deviate from a learned baseline of normal service behavior?
  context: This question proposes using an anomaly detection model that learns what 'normal' service creation looks like on your systems. By training on features from legitimate services (name length, path depth, user account, etc.), the model can flag any new service that does not fit this learned profile. This is powerful because it can detect novel threats without prior knowledge of them.
  answer_sources:
  - Windows Event ID 7045
  - Windows Event ID 7040
  - Sysmon Event ID 1
  - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
  - NAI - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
  range: last 90 days
  queries:
  - pseudocode: TRAIN anomaly_detection_model on features from legitimate service creation events | DEPLOY model for real-time scoring | ON new Service_Creation_Event | EXTRACT features (name_entropy, path_depth, user, start_type) | SCORE event with model | ALERT if flagged as outlier.
- question: Are there an excessive number of failed or reset connections on critical ICS protocol ports, suggesting a rootkit is interfering with network communications?
  context: A rootkit may try to disrupt an industrial process by selectively dropping or rejecting control commands. This would manifest as a spike in failed (REJ, RSTO, S1) TCP connections in network logs. This question sets up a simple threshold-based alert to detect a sudden burst of such failures between critical control systems and field devices.
  answer_sources:
  - Zeek conn.log
  - NAI - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
  range: last 90 days
  queries:
  - pseudocode: MONITOR Zeek_conn_log on ports (502, 102, 44818, etc.) | FOR each unique (source, destination) pair | IF count(conn_state in ['REJ', 'RSTO', 'S1']) > 10 within 60s THEN ALERT | ESCALATE if orig_bytes > 0 AND resp_bytes == 0.
- question: Can a change in the statistical distribution (entropy) of connection states indicate a rootkit-induced communication problem?
  context: Healthy, stable ICS communication is predictable and should be dominated by successfully finished connections ('SF'). This results in low information entropy. If a rootkit starts interfering, the mix of connection states will become more varied and random, causing entropy to spike. This question focuses on detecting this statistical shift away from stable communication.
  answer_sources:
  - Zeek conn.log
  - NAI - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
  range: last 90 days
  queries:
  - pseudocode: FOR each critical (HMI, PLC) pair | BASELINE distribution of conn_states in 5-min intervals over 30 days | CALCULATE entropy of distribution for each interval | ALERT if current_interval_entropy > (baseline_mean + 3 * std_dev).
- question: Can a time-series machine learning model learn the normal 'rhythm' of ICS communications and detect deviations caused by a rootkit?
  context: This question proposes a sophisticated approach where a model (like an LSTM autoencoder) learns the complex, sequential patterns of normal network traffic between specific devices. It considers multiple features over time (connection states, byte counts, duration). The model can then detect subtle anomalies that violate this learned 'rhythm', which might indicate rootkit interference that simpler methods would miss.
  answer_sources:
  - Zeek conn.log
  - NAI - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
  range: last 90 days
  queries:
  - pseudocode: FOR key HMI-PLC channels | TRAIN LSTM_autoencoder on sequences of 1-min aggregated traffic features | DEPLOY model for real-time monitoring | CALCULATE reconstruction_error for live traffic sequence | ALERT if reconstruction_error > threshold.
- question: Are critical HMI/SCADA applications crashing immediately after communicating with field devices, suggesting rootkit interference with I/O operations?
  context: A rootkit might hook low-level system functions to inspect or manipulate ICS traffic. This can destabilize the system and cause critical applications to crash. This question aims to find a direct link between an application crash (especially one involving a system driver) and recent ICS network activity, which is strong evidence of such interference.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - NAI - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
  range: last 90 days
  queries:
  - pseudocode: ON new App_Crash_Event (EID 1000) for critical_process | IF FaultingModuleName is system_driver | QUERY Zeek_conn_log for traffic on ICS_port from host_IP within +/- 10s of crash | IF correlation found THEN ALERT.
- question: Can we identify suspicious application crashes by looking for historically rare exception codes, especially when correlated with network activity?
  context: Not all crashes are equal. Some are common due to known bugs, while others are rare and unexpected. This question focuses on identifying these rare crashes. An adversary's tampering is likely to cause a type of crash that has not been seen before. Alerting on rare 'ExceptionCode' values, particularly when they coincide with ICS network traffic, helps filter out noise and focus on truly anomalous events.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - NAI - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
  range: last 90 days
  queries:
  - pseudocode: ON new App_Crash_Event (EID 1000) | LOOKUP frequency of ExceptionCode in 90-day history | IF frequency < 5th_percentile (is rare) THEN ALERT | INCREASE severity if correlated with ICS network traffic.
- question: Can a machine learning model trained on 'benign' crash data identify new, anomalous crashes that may be caused by a rootkit?
  context: This question proposes building a model of what 'normal' or 'benign' application crashes look like. By training on the features of known, non-malicious crashes, an anomaly detection model can then identify any new crash that deviates significantly from this profile. This allows analysts to automatically distinguish between routine software bugs and potentially malicious, adversary-induced failures.
  answer_sources:
  - Windows Event ID 1000
  - Windows Event ID 1001
  - Zeek conn.log
  - NAI - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
  range: last 90 days
  queries:
  - pseudocode: TRAIN anomaly_detection_model on features from historical 'benign' crash events | DEPLOY model for real-time scoring | ON new App_Crash_Event | EXTRACT features (ExceptionCode, FaultingModuleName, associated_network_data) | SCORE event with model | ALERT if flagged as anomaly.