name: "T0889: Modify Program"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps investigate if an adversary has modified program logic on an ICS controller for persistence. It focuses on detecting unauthorized program modification commands, unauthorized controller mode changes (e.g., to STOP/PROGRAM), and mismatches between ICS project files and their trusted baselines. These activities might be identified by checking if the source is an unauthorized IP, if the action occurs outside a maintenance window, if it lacks a corresponding change ticket, or if file integrity checks fail (hash, size, timestamp)."
type: "technique"
related:
  - "TA0110: Persistence"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a program modification command been issued from an unauthorized source or outside an approved maintenance window?"
    context: "This question seeks to identify potentially malicious program modifications by verifying the legitimacy of the command's origin and timing. An adversary might inject new logic into a controller to disrupt a process or establish persistence. By correlating network logs (Zeek) with allowlists of authorized engineering workstations (EWS) and scheduled maintenance windows, we can filter out legitimate engineering activity and flag suspicious commands that are either from an unknown IP address or occur at an unexpected time."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek modbus.log"
      - "Zeek enip.log"
      - "Zeek conn.log"
      - "Windows Event ID 4624"
      - "Network traffic sensors at choke points between the enterprise network (Level 4/5) and the process control network (Level 3), taps on EWS subnets (Level 3), and span ports monitoring traffic to and from critical PLCs/controllers (Level 1/2)."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH Zeek logs (s7comm, modbus, enip) FOR program_modification_commands | JOIN conn.log ON uid | IF source_ip NOT IN authorized_ews_allowlist OR event_timestamp NOT IN maintenance_windows THEN ALERT"
  - question: "Is there a statistically unusual increase in the frequency of program modification commands for any controller?"
    context: "This question aims to detect anomalous behavior by establishing a baseline of normal activity. Adversaries, or malfunctioning equipment, might cause a sudden burst of program modification commands. By tracking the hourly count of these commands for each controller and comparing it against a historical baseline (e.g., a 30-day rolling average), we can use statistical methods (e.g., standard deviation) to identify significant spikes that warrant investigation, even if the source appears legitimate."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek modbus.log"
      - "Zeek enip.log"
      - "Zeek conn.log"
      - "Windows Event ID 4624"
      - "Network traffic sensors at choke points between the enterprise network (Level 4/5) and the process control network (Level 3), taps on EWS subnets (Level 3), and span ports monitoring traffic to and from critical PLCs/controllers (Level 1/2)."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each controller_ip: CALCULATE hourly count of modification_commands over last 30 days to create baseline (mean, std_dev) | GET current hourly count | IF current_count > (baseline_mean + 3 * baseline_std_dev) THEN ALERT"
  - question: "Does the overall pattern of program modification activity across the network deviate from learned normal behavior?"
    context: "This question leverages machine learning to identify complex, subtle anomalies that simple rule-based detections might miss. A sophisticated adversary might try to mimic legitimate activity. A multivariate model (like an LSTM Autoencoder) can learn the intricate relationships between various features, such as the source IP, destination PLC, protocol, and payload size, over time. An alert is triggered when current activity does not conform to these learned legitimate patterns, indicated by a high reconstruction error, suggesting a novel or evasive attack."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek modbus.log"
      - "Zeek enip.log"
      - "Zeek conn.log"
      - "Windows Event ID 4624"
      - "Network traffic sensors at choke points between the enterprise network (Level 4/5) and the process control network (Level 3), taps on EWS subnets (Level 3), and span ports monitoring traffic to and from critical PLCs/controllers (Level 1/2)."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "MODEL = train_lstm_autoencoder(historical_zeek_logs) | FOR each 5-minute_window of live_traffic: a. engineer_features(command_count, unique_sources, unique_dests, protocol, avg_payload) b. calculate_reconstruction_error(MODEL, features) | IF reconstruction_error > threshold THEN ALERT"
  - question: "Has a controller's operational mode been changed (e.g., to 'STOP' or 'PROGRAM') without proper authorization?"
    context: "This question focuses on detecting unauthorized changes to a controller's operational state. Before a program can be modified, a controller must typically be put into a 'STOP' or 'PROGRAM' mode. This action is a critical precursor to program modification. By cross-referencing mode change commands observed in network traffic with an allowlist of authorized sources and an official change management system, we can identify changes that lack proper approval, which could indicate malicious activity."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek enip.log"
      - "Zeek dnp3.log"
      - "Zeek conn.log"
      - "Network interfaces of critical PLCs/Controllers (Level 1/2), Process Control Network (Purdue Level 2/3) monitoring points, network choke points between Level 3 and Level 2, and logs from change management systems."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "SEARCH Zeek logs (s7comm, enip) FOR mode_change_to_STOP/PROGRAM | JOIN conn.log on uid | IF source_ip NOT IN authorized_ews_allowlist OR NOT EXISTS (approved_change_ticket FOR controller_ip, timestamp) THEN ALERT"
  - question: "Has any critical controller spent an unusually long time in a modifiable state (e.g., 'STOP', 'PROGRAM')?"
    context: "This question aims to detect suspicious activity by monitoring the duration a controller spends in a non-operational, modifiable state. While legitimate maintenance requires placing a controller in 'STOP' or 'PROGRAM' mode, this is usually for a brief, predictable period. An adversary might keep a controller in this state for an extended time while they explore, exfiltrate logic, or perform complex modifications. By baselining the normal daily duration for these states and alerting on significant deviations (e.g., exceeding the 99th percentile), we can flag potentially malicious loitering."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek enip.log"
      - "Zeek dnp3.log"
      - "Zeek conn.log"
      - "Network interfaces of critical PLCs/Controllers (Level 1/2), Process Control Network (Purdue Level 2/3) monitoring points, network choke points between Level 3 and Level 2, and logs from change management systems."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each critical_controller: CALCULATE daily_duration_in_non_RUN_state over last 90 days to create baseline (99th_percentile) | GET duration for last 24 hours | IF current_duration > baseline_99th_percentile THEN ALERT"
  - question: "Did a controller state change sequence deviate from the learned legitimate operational workflow?"
    context: "This question seeks to identify attacks by analyzing the entire sequence of operations, rather than just individual events. Legitimate engineering tasks follow a predictable pattern (e.g., RUN -> STOP -> DOWNLOAD -> RUN, all from an authorized source). An adversary's actions might break this pattern (e.g., a STOP command from an unknown source, or a STOP command not followed by a RUN). A sequence analysis model, like a Hidden Markov Model (HMM), can learn the valid state transitions and alert when an improbable or invalid sequence occurs, indicating a potential compromise."
    answer_sources:
      - "Zeek s7comm.log"
      - "Zeek enip.log"
      - "Zeek dnp3.log"
      - "Zeek conn.log"
      - "Network interfaces of critical PLCs/Controllers (Level 1/2), Process Control Network (Purdue Level 2/3) monitoring points, network choke points between Level 3 and Level 2, and logs from change management systems."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "MODEL = train_HMM(historical_sequences_of_(controller_ip, state, source_category)) | FOR each new observed_sequence: a. calculate_probability(MODEL, observed_sequence) | IF probability < threshold THEN ALERT"
  - question: "Has an ICS project file been modified, transferred, or created in a way that violates integrity policies?"
    context: "This question addresses the integrity of the ICS project files themselves, which contain the controller logic. Adversaries may modify these files on an Engineering Workstation (EWS) before deploying them to a controller. This query checks for unauthorized changes by monitoring file systems (using Sysmon for write/delete events) and network transfers (using Zeek). It validates file integrity by comparing file hashes against a 'golden' baseline of approved versions and checking against known-malicious hashes from threat intelligence feeds, alerting on any mismatch or unauthorized activity."
    answer_sources:
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Windows Event ID 23 (Sysmon)"
      - "Windows Event ID 4663"
      - "Windows Event ID 1 (Sysmon)"
      - "File systems of Engineering Workstations (EWS) (Level 3), version control systems for ICS projects, centralized log servers, network file transfer inspection points (Level 3), and dedicated ICS integrity monitoring platforms."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "ON file_event (Sysmon write/delete OR Zeek transfer) for ICS_project_file: a. calculate file_hash b. GET source_host, user | IF source_host is unauthorized OR file_hash != golden_baseline_hash OR file_hash IN malicious_hash_list THEN ALERT"
  - question: "Does a transferred ICS project file exhibit unusual characteristics, such as high or low entropy?"
    context: "This question attempts to identify modified or malicious project files by analyzing their structure, as measured by Shannon entropy. Legitimate project files of a certain type have a predictable range of entropy. An unusually high entropy score might indicate that the file is encrypted or packed, a common obfuscation technique used by attackers. Conversely, an unusually low score could suggest null-padding or other structural anomalies. By baselining normal entropy values for each file type and alerting on outliers, we can flag potentially compromised files for deeper inspection."
    answer_sources:
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Windows Event ID 23 (Sysmon)"
      - "Windows Event ID 4663"
      - "Windows Event ID 1 (Sysmon)"
      - "File systems of Engineering Workstations (EWS) (Level 3), version control systems for ICS projects, centralized log servers, network file transfer inspection points (Level 3), and dedicated ICS integrity monitoring platforms."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "FOR each ICS_project_file in Zeek files.log: a. calculate shannon_entropy b. get file_type | GET baseline_entropy_range for file_type | IF shannon_entropy NOT IN baseline_entropy_range THEN ALERT"
  - question: "Based on a combination of host, network, and contextual factors, is a project file modification likely to be unauthorized?"
    context: "This question uses a machine learning classifier to make a holistic judgment about whether a file modification is legitimate or malicious. Simple rules can be bypassed, but a model like a Random Forest can analyze a wide range of features simultaneously—such as the process that wrote the file, the user account involved, the time of day, network origin, and file entropy. By training on labeled historical data, the model learns the complex characteristics of both authorized and unauthorized changes, allowing it to classify new events with a high degree of confidence and detect sophisticated attacks that might otherwise look normal in isolation."
    answer_sources:
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Windows Event ID 23 (Sysmon)"
      - "Windows Event ID 4663"
      - "Windows Event ID 1 (Sysmon)"
      - "File systems of Engineering Workstations (EWS) (Level 3), version control systems for ICS projects, centralized log servers, network file transfer inspection points (Level 3), and dedicated ICS integrity monitoring platforms."
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: "MODEL = train_random_forest(historical_labeled_events) | FOR each new file_modification_event: a. engineer_features(process, user, time, entropy, source_ip, in_maintenance_window) b. get classification_score(MODEL, features) | IF classification == 'unauthorized' AND score > 0.95 THEN ALERT"