name: T0807: Command-Line Interface
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is executing commands on critical ICS assets via a command-line interface or collecting sensitive project files or configuration data. It focuses on detecting anomalous parent-child process relationships, suspicious remote logons followed by command execution, obfuscated command-line arguments, and the use of command-line tools to enumerate or access sensitive ICS-specific files and directories.
type: technique
related:
  - TA0104: Execution
  - TA0100: Collection
contributors: Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are there unapproved parent-child process relationships originating from known shell processes on critical ICS assets?
    context: This question seeks to identify malicious activity by enforcing a strict whitelist of allowed process executions. An alert for a non-whitelisted child process spawned by a shell (like cmd.exe or powershell.exe) on a critical system is a strong indicator of an adversary attempting to execute arbitrary commands, which deviates from expected, baseline operational behavior.
    answer_sources:
      - Windows Event ID 4688
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers (PCS), Data Gateways, Application Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process_creation_events (EventID=4688)
          WHERE parent_process IN [known_shells]
          AND (hostname, parent_process, child_process) NOT IN [approved_whitelist]
          ALERT high_severity
  - question: Have any new or rare child processes been spawned by shells on ICS hosts recently?
    context: This question aims to detect novel or infrequent command executions that might be missed by static whitelists. By baselining normal parent-child process relationships over 90 days, the emergence of a never-before-seen or statistically rare child process can indicate an attacker using a new tool or technique, especially if that tool is a known living-off-the-land binary (LOLBin).
    answer_sources:
      - Windows Event ID 4688
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers (PCS), Data Gateways, Application Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process_creation_events (EventID=4688)
          FOR EACH host, parent_process:
            BASELINE child_processes over last 90 days
            IF current_child_process NOT IN baseline:
              ALERT medium_severity
              IF current_child_process IS LOLBin:
                ALERT high_severity
  - question: Is there an anomalous burst of command executions from shell processes on a critical host?
    context: Adversaries often execute a rapid series of commands for reconnaissance or scripting purposes. This question uses time-series anomaly detection to identify such bursts. By modeling the normal hourly count of unique child processes, a significant spike that deviates from the established seasonal patterns (like shift changes) can reveal automated or frantic manual activity by an attacker.
    answer_sources:
      - Windows Event ID 4688
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers (PCS), Data Gateways, Application Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ).
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH host, shell_process:
            CREATE time_series of hourly_unique_child_process_count
            APPLY anomaly_detection_model (e.g., ARIMA)
            IF count is anomalous (e.g., >3 std dev from forecast):
              ALERT
  - question: Has a remote logon from an untrusted network been immediately followed by reconnaissance commands?
    context: This question correlates network access with host activity to detect a common attack pattern: gain remote access, then immediately perform discovery. The query looks for a tight time window between a remote logon (RDP, SSH) from an unapproved IP and the execution of commands like 'whoami' or 'net user', which strongly suggests an external adversary is orienting themselves on a newly compromised system.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek rdp.log
      - Zeek ssh.log
      - ICS DMZ/Perimeter, Remote Access Gateways, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Jump Servers, and Terminal Servers within the ICS network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          JOIN remote_logon_events (EventID=4624, Type=10 OR Zeek ssh.log) WITH process_creation_events (EventID=4688)
          ON user, host
          WHERE logon_event.timestamp - process_event.timestamp < 90s
          AND logon_event.source_ip is untrusted
          AND process_event.command CONTAINS [recon_commands]
          ALERT
  - question: Is a user's remote access session exhibiting multiple risky behaviors compared to their historical baseline?
    context: This question moves beyond single indicators to a risk-based scoring model for remote sessions. It assesses multiple behavioral factors—such as logging in from a new location, at an unusual time, or running unfamiliar commands—to build a composite risk score. A high score indicates a significant deviation from the user's normal operational profile, flagging the session as potentially compromised.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek rdp.log
      - Zeek ssh.log
      - ICS DMZ/Perimeter, Remote Access Gateways, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Jump Servers, and Terminal Servers within the ICS network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH new_remote_session:
            risk_score = 0
            IF source_asn is new for user: risk_score += 2
            IF source_country is new for user: risk_score += 3
            IF time is outside maintenance_window: risk_score += 2
            IF command_jaccard_similarity < 0.2: risk_score += 5
            IF risk_score > 6: ALERT
  - question: Does a remote session's overall behavior profile appear anomalous when compared to all historical sessions?
    context: This question uses unsupervised machine learning to detect anomalous sessions without pre-defined rules. By creating a feature vector for each session (capturing duration, process count, command entropy, etc.), an Isolation Forest or Autoencoder can learn what constitutes "normal" session behavior across the entire user base. Sessions that the model flags as outliers represent novel or unusual activity that warrants investigation.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek rdp.log
      - Zeek ssh.log
      - ICS DMZ/Perimeter, Remote Access Gateways, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Jump Servers, and Terminal Servers within the ICS network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH remote_session:
            CREATE feature_vector (duration, process_count, command_entropy, etc.)
            TRAIN anomaly_model (e.g., Isolation Forest) on historical vectors
            SCORE new session vector in real-time
            IF score is outlier: ALERT
  - question: Are there command-line executions containing known malicious or obfuscated patterns?
    context: This question focuses on identifying specific, known-bad command-line strings using signature-based detection. By scanning commands for patterns associated with PowerShell encoding, download cradles, or system manipulation utilities, analysts can quickly detect common attacker TTPs that attempt to hide their actions or interact with the system in a malicious way.
    answer_sources:
      - Windows Event ID 4688
      - All Windows-based ICS assets, including HMIs, EWS, Historian Servers, Process Control Servers (PCS), and Data Gateways within the Process Control Network (PCN) and higher zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          SEARCH process_creation_events (EventID=4688)
          WHERE command_line MATCHES REGEX [malicious_patterns_like_'-enc', 'IEX', 'bitsadmin /transfer']
          ALERT
  - question: Are there command-line arguments with unusually high entropy or a high ratio of non-alphanumeric characters?
    context: This question aims to detect obfuscated or encoded commands by analyzing their statistical properties. High Shannon entropy or a high percentage of special characters in command-line arguments are strong indicators that the command is not human-readable and is likely packed, encrypted, or encoded to evade simple signature-based defenses.
    answer_sources:
      - Windows Event ID 4688
      - All Windows-based ICS assets, including HMIs, EWS, Historian Servers, Process Control Servers (PCS), and Data Gateways within the Process Control Network (PCN) and higher zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH process_creation_event (EventID=4688):
            entropy = calculate_shannon_entropy(command_arguments)
            special_char_ratio = calculate_special_char_ratio(command_arguments)
            IF entropy > 4.5 OR special_char_ratio > 99th_percentile:
              ALERT
  - question: Is a command line classified as malicious by a trained machine learning model?
    context: This question leverages supervised machine learning for advanced threat detection. By training a model (like an LSTM) on a vast dataset of known benign and malicious command lines, the system can learn the subtle, complex patterns of malicious commands. This allows for the detection of novel or zero-day attack strings that would be missed by both signature and statistical methods.
    answer_sources:
      - Windows Event ID 4688
      - All Windows-based ICS assets, including HMIs, EWS, Historian Servers, Process Control Servers (PCS), and Data Gateways within the Process Control Network (PCN) and higher zones.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH process_creation_event (EventID=4688):
            command_features = extract_features(command_line)
            prediction, confidence = classification_model.predict(command_features)
            IF prediction == 'malicious' AND confidence > 0.9:
              ALERT
  - question: Is there evidence of a command-line tool accessing sensitive ICS files, followed by file access on a sensitive share, originating from an unapproved parent process?
    context: This question uses a multi-event correlation to detect a specific data collection scenario. It looks for a sequence where a command-line tool enumerates sensitive files (e.g., project files like .ACD), which is then followed by access to a sensitive file share. The key indicator of maliciousness is if the entire chain of events was initiated by a process that should not be performing such actions, like a web server or an Office application.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5145
      - Zeek conn.log
      - Zeek smb_files.log
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Historians, Asset Management Servers, Process Control Servers, File Shares hosting ICS project files (e.g., .ACD, .L5K, .SCX, .HMI), and Jump Servers providing access to the OT network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          JOIN process_creation_events (EventID=4688) WITH file_share_access_events (EventID=5145)
          ON host, user
          WHERE process_creation_event.command CONTAINS [file_access_keywords] AND [sensitive_extensions]
          AND file_share_access_event.timestamp - process_creation_event.timestamp < 60s
          AND process_creation_event.parent_process NOT IN [whitelisted_admin_tools]
          ALERT
  - question: Has a user's file access behavior shown a statistically significant deviation in the number of unique sensitive files accessed or the volume of data read?
    context: This question aims to detect bulk data collection by baselining user behavior on file shares. It establishes what is "normal" for each user in terms of how many sensitive files they access and how much data they read per hour. A sudden, significant spike in both metrics, measured by z-scores, indicates an abnormal collection activity that might represent an adversary grabbing as much data as possible.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5145
      - Zeek conn.log
      - Zeek smb_files.log
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Historians, Asset Management Servers, Process Control Servers, File Shares hosting ICS project files (e.g., .ACD, .L5K, .SCX, .HMI), and Jump Servers providing access to the OT network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR EACH user, host, hour:
            CALCULATE count_unique_sensitive_files_accessed
            CALCULATE total_data_volume_read
            COMPARE to user's 30-day baseline for that hour
            CALCULATE z_score_files and z_score_volume
            IF (z_score_files + z_score_volume) > 4:
              ALERT
  - question: Does command-line or file access activity appear anomalous when analyzed using clustering or time-series modeling?
    context: This question applies unsupervised machine learning to detect subtle or "low-and-slow" data collection. DBSCAN clustering can identify small groups of unusual command-line executions that don't fit normal patterns. Separately, an Isolation Forest model can analyze the frequency and volume of file access over time to detect bursty activity that might not trigger simple threshold alerts but is abnormal in the context of the day or week.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5145
      - Zeek conn.log
      - Zeek smb_files.log
      - Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Historians, Asset Management Servers, Process Control Servers, File Shares hosting ICS project files (e.g., .ACD, .L5K, .SCX, .HMI), and Jump Servers providing access to the OT network.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          # Clustering approach
          EXTRACT feature_vectors from cmd/powershell events
          APPLY DBSCAN algorithm
          INVESTIGATE points classified as noise or in small, dense clusters

          # Time-series approach
          CREATE time_series of file_access_frequency and data_transfer_volume
          APPLY Isolation Forest model
          ALERT on events flagged as anomalies