name: T0894: System Binary Proxy Execution
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify adversaries using trusted host or application binaries (both native Windows and ICS-specific) to execute malicious commands or payloads on ICS systems. It focuses on detecting suspicious command-line arguments, anomalous network connections initiated by trusted processes, and unexpected parent-child process relationships that indicate a legitimate binary is being co-opted for malicious purposes.
type: technique
related:
  - TA0103: Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are trusted ICS applications or native Windows binaries being executed with command-line arguments containing known malicious strings, base64 encoding, or references to remote scripts?
    context: This question aims to detect adversaries using legitimate binaries (a technique known as System Binary Proxy Execution) to run malicious code. By inspecting the command-line arguments of processes like rundll32.exe or specific ICS applications, we can identify indicators of compromise (IOCs) such as calls to download remote payloads ('IEX', 'DownloadString'), obfuscated commands (base64), or the execution of unauthorized scripts. This is a direct method for finding malicious activity hiding in plain sight.
    answer_sources:
      - Windows Event ID 4688 logs from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Data Gateways within the OT network, and Jump Hosts used for remote OT access.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs (EventID 4688) WHERE parent_process IN (ics_app_list, lolbas_list) AND command_line CONTAINS (known_malicious_strings OR base64_regex OR script_engine_calls)
  - question: Are trusted processes being executed with unusually long or complex command-line arguments compared to their normal behavior?
    context: Malicious payloads injected into command-line arguments often increase the argument's length and complexity (entropy). By establishing a baseline of normal behavior for each trusted process, we can use statistical analysis to detect outliers. A sudden spike in command-line length or entropy for a process like HMI_App.exe could indicate that it is being used to proxy a malicious command, even if the command doesn't contain a known-bad string.
    answer_sources:
      - Windows Event ID 4688 logs from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Data Gateways within the OT network, and Jump Hosts used for remote OT access.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: COMPARE new_process_creation_event.command_line_length AND new_process_creation_event.command_line_entropy AGAINST baseline_stats (99th_percentile) FOR process_name
  - question: Can we use a machine learning model to classify the command-line arguments of trusted processes as benign or malicious?
    context: This question moves beyond simple rules and statistics to a more sophisticated, learning-based approach. By training a model on a labeled dataset of command lines specific to the ICS environment, the system can learn the subtle characteristics that differentiate benign and malicious activity. This method can detect novel threats that might evade signature-based and statistical methods, providing a more robust and adaptive detection capability.
    answer_sources:
      - Windows Event ID 4688 logs from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Data Gateways within the OT network, and Jump Hosts used for remote OT access.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: INPUT new_process_creation_event.command_line INTO ml_classifier_model; ALERT IF prediction is 'malicious' AND confidence_score > 0.90
  - question: Are trusted ICS applications or native Windows binaries making network connections to unapproved IP addresses, domains, or using non-standard protocols?
    context: This question focuses on detecting command-and-control (C2) or data exfiltration channels established by a compromised binary. Critical ICS applications typically have predictable network behavior. By creating and enforcing a strict whitelist of allowed destinations and protocols for each process, any deviation becomes a high-fidelity indicator of a potential compromise. Correlating this with threat intelligence feeds for known C2 servers further strengthens the detection.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Zeek ssl.log from ICS Network Segments (e.g., Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), SCADA Firewalls, and network taps at key egress/ingress points.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: JOIN process_creation_logs (EventID 4688) WITH network_flow_logs (Zeek) ON process_id; ALERT IF destination_ip OR destination_port OR protocol NOT IN process_whitelist OR destination_ip IN threat_intel_feed
  - question: Are trusted processes exhibiting rare or previously unseen network behaviors, such as using uncommon ports, protocols, TLS fingerprints, or generating high-entropy DNS queries?
    context: Adversaries may attempt to blend in by using allowed protocols but in an unusual manner. This question uses statistical baselining to find these subtle anomalies. A process that suddenly uses a rare port, exhibits a new TLS fingerprint (suggesting a different client application), or makes DNS requests with random-looking names (indicative of Domain Generation Algorithms, or DGA) is highly suspicious, even if it's connecting to an IP that hasn't been blacklisted.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log, Zeek dns.log, Zeek ssl.log from ICS Network Segments (e.g., Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), SCADA Firewalls, and network taps at key egress/ingress points.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: COMPARE new_network_connection (port, protocol, ja3_fingerprint) AGAINST baseline_frequency_stats FOR process_name; ALERT IF rarity < 5th_percentile; CALCULATE dns_query_entropy; ALERT IF entropy > 95th_percentile
  - question: Can an unsupervised machine learning model identify anomalous network connections originating from trusted processes based on a multi-dimensional baseline of normal behavior?
    context: This question leverages machine learning to build a holistic model of 'normal' network traffic for trusted processes, considering multiple features simultaneously (protocol, port, bytes transferred, duration, etc.). Unsupervised models like Isolation Forest are effective at identifying outliers that deviate from this learned norm across many dimensions. This can catch sophisticated attackers whose activity might not be anomalous on any single metric but is highly unusual when viewed in combination.
    answer_sources:
      - Windows Event ID 4688, Zeek conn.log from ICS Network Segments (e.g., Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), SCADA Firewalls, and network taps at key egress/ingress points.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: INPUT new_network_flow_features (proto, resp_p, duration, bytes, etc.) INTO unsupervised_anomaly_model; ALERT IF anomaly_score IS HIGH
  - question: Are trusted ICS applications or critical Windows system processes spawning unauthorized child processes like command shells or scripting engines?
    context: In a stable ICS environment, process relationships are often highly predictable. A critical SCADA service should not be spawning PowerShell (powershell.exe) or a command prompt (cmd.exe). This question uses a strict whitelisting approach to detect these illegitimate relationships. Any parent-child process pairing not on the pre-approved list is a strong indicator of malicious activity, such as an adversary attempting to gain interactive access or execute further commands.
    answer_sources:
      - Windows Event ID 4688 from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts, and Domain Controllers within the OT network.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_creation_logs (EventID 4688) WHERE (parent_process, child_process) NOT IN (approved_pair_whitelist)
  - question: Are we observing the creation of new or extremely rare parent-child process relationships in the environment?
    context: This question provides a more dynamic alternative to a rigid whitelist by using statistical rarity. Instead of pre-defining all allowed pairs, this method learns them from the environment over time. A process pair that has never been seen before, or has been seen only a handful of times, is flagged as suspicious. This is effective for detecting adversary actions that introduce novel execution chains, especially when the child process is a powerful administrative tool or interpreter.
    answer_sources:
      - Windows Event ID 4688 from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts, and Domain Controllers within the OT network.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: LOOKUP new_process_pair (parent, child) IN historical_frequency_table; ALERT IF pair IS new OR frequency < 1st_percentile
  - question: Can a graph-based machine learning model detect anomalous process execution chains originating from trusted binaries?
    context: This question represents the most advanced approach, viewing the entire system's process activity as an interconnected graph. Graph-based ML models can learn the normal 'shape' and structure of process relationships. They can then detect anomalies that are not just about a single parent-child link, but about the overall structure of an execution chain—for example, a trusted binary spawning a process that in turn spawns another, creating a chain of a type or depth never seen before. This method is powerful for detecting complex, multi-stage attacks.
    answer_sources:
      - Windows Event ID 4688 from Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts, and Domain Controllers within the OT network.
    range: Last 90 days
    queries:
      - search_technology: Pseudocode
        query: UPDATE process_execution_graph with new_process_creation_event; INPUT new_edge/node INTO graph_anomaly_model; ALERT IF structural_anomaly_score IS HIGH