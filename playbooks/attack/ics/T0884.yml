name: T0884: Connection Proxy
id: a0b9c8d7-e6f5-4a3b-2c1d-0e9f8a7b6c5d
description: This playbook helps determine if an adversary is using a compromised ICS host as a proxy for Command and Control communications. It focuses on identifying three primary indicators: 1) An ICS host exhibiting a 'fan-out' network pattern, where an inbound external connection is followed by multiple new outbound connections to internal assets. 2) A designated intermediary host (like a jump server) relaying connections from an external source to internal ICS assets using native protocols. 3) A host exhibiting signs of C2 protocol tunneling (e.g., via DNS, HTTP, or ICMP) which is then followed by new connections to internal ICS assets.
type: technique
related:
- TA0101: Command And Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can I detect if an ICS host is exhibiting a 'fan-out' pattern by receiving an external connection and then making multiple new outbound connections to internal assets?
  context: This question aims to identify a specific proxy behavior where a compromised ICS host is used as a pivot point. In a typical, deterministic ICS environment, communication patterns are static. An external connection immediately followed by numerous new connections to internal devices is a strong anomaly. This rule-based approach provides a high-fidelity alert by defining 'new' as a connection to an asset not seen in the last 30 days, filtering out normal operational traffic.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Network perimeters between IT and OT zones (e.g., IT/OT firewalls), ICS DMZ hosts, jump servers, and critical ICS assets such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, and SCADA servers.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each inbound connection in conn.log to ICS_HOST from EXTERNAL_IP:
        TIMESTAMP = connection.timestamp
        SEARCH conn.log for outbound connections from ICS_HOST to INTERNAL_ASSET
        WHERE connection.timestamp is within TIMESTAMP + 5 minutes
        COUNT unique INTERNAL_ASSET
        IF count >= 5 AND connection to INTERNAL_ASSET is new (not seen in 30 days):
          TRIGGER_ALERT(
            details: "Fan-out pattern detected",
            source_ip: EXTERNAL_IP,
            proxy_host: ICS_HOST,
            destination_count: count
          )
- question: How can I use statistical baselining to identify an ICS host that is making an anomalous number of connections to unique internal destinations?
  context: This question provides a method for detecting more subtle or slowly developing 'fan-out' behavior that a rigid rule might miss. By calculating a 30-day rolling baseline of normal activity for each host, analysts can identify statistically significant deviations (e.g., exceeding 3 standard deviations). This approach is powerful because it adapts to each host's specific role and normal behavior. Combining this statistical alert with contextual data like IP reputation and asset criticality helps analysts prioritize the most significant threats.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Network perimeters between IT and OT zones (e.g., IT/OT firewalls), ICS DMZ hosts, jump servers, and critical ICS assets such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, and SCADA servers.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each ICS_HOST:
        BASELINE = calculate_30day_baseline(host=ICS_HOST, metric='daily_unique_internal_destinations')
        CURRENT_DAY_COUNT = get_current_day_count(host=ICS_HOST)
        IF CURRENT_DAY_COUNT > (BASELINE.mean + 3 * BASELINE.std_dev) OR CURRENT_DAY_COUNT > BASELINE.99th_percentile:
          RISK_SCORE = calculate_risk(
            z_score: (CURRENT_DAY_COUNT - BASELINE.mean) / BASELINE.std_dev,
            external_ip_reputation,
            destination_asset_criticality
          )
          TRIGGER_ALERT(
            details: "Anomalous number of unique internal connections",
            host: ICS_HOST,
            risk_score: RISK_SCORE
          )
- question: Can a graph-based anomaly detection model identify a compromised ICS host acting as a connection proxy?
  context: This question explores an advanced, machine-learning-based approach to detecting proxy behavior. Network communications can be modeled as a graph where devices are nodes and connections are edges. By training a model on historical data, it learns the normal 'shape' of the network. An adversary using a host as a proxy fundamentally changes that host's role in the graph, drastically increasing its centrality (e.g., how many paths it sits on). This method can detect complex, multi-stage attacks that may not trigger simpler rule-based or statistical detections.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Network perimeters between IT and OT zones (e.g., IT/OT firewalls), ICS DMZ hosts, jump servers, and critical ICS assets such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, and SCADA servers.
  range: last 90 days
  queries:
  - pseudocode: |
      MODEL = train_graph_model(data='90_days_of_conn_log')
      FOR each new connection in conn.log:
        UPDATE real_time_graph
        FOR each ICS_HOST in graph:
          CURRENT_CENTRALITY = calculate_centrality(host=ICS_HOST)
          ANOMALY_SCORE = MODEL.predict(CURRENT_CENTRALITY)
          IF ANOMALY_SCORE > THRESHOLD:
            TRIGGER_ALERT(
              details: "Graph-based centrality anomaly detected",
              host: ICS_HOST,
              anomaly_score: ANOMALY_SCORE
            )
- question: How can I detect if a designated intermediary host (like a Jump Server) is relaying connections from an external source to internal ICS assets using native protocols?
  context: This question targets a common adversary tactic of abusing legitimate remote access infrastructure. By monitoring for a tight temporal correlation (within 30 seconds) between an external connection in and an ICS-protocol connection out, this query can pinpoint unauthorized relay activity. The context is crucial; analysts must verify if this activity is documented in change management logs. If not, and especially if the source IP has a poor reputation, it is a critical security event.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Threat Intelligence Feeds
  - Change Management Logs
  - Hosts within the OT DMZ, designated jump servers, SCADA servers, and the network segments containing field devices such as PLCs and RTUs.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each inbound connection to JUMP_SERVER from EXTERNAL_IP:
        TIMESTAMP = connection.timestamp
        SEARCH for outbound connections from JUMP_SERVER on ICS_PORTS (502, 20000, 102, 44818)
        WHERE connection.timestamp is within TIMESTAMP + 30 seconds
        IF found:
          IS_MALICIOUS = check_threat_intel(EXTERNAL_IP)
          IS_AUTHORIZED = check_change_management(TIMESTAMP)
          IF IS_MALICIOUS OR NOT IS_AUTHORIZED:
            TRIGGER_ALERT(
              details: "Suspected unauthorized ICS relay",
              source_ip: EXTERNAL_IP,
              jump_server: JUMP_SERVER,
              user: user_from_event_4624
            )
- question: How can I use baselining of unique relay connection tuples to detect anomalous proxy behavior on intermediary hosts?
  context: This question addresses the need to detect novel or previously unseen relay patterns. By creating a baseline of normal, authorized relay activity (defined by a tuple of external IP, internal IP, protocol, and user), the system can flag any new combination. This is a powerful way to detect when a known user account starts accessing a new internal device, or when a familiar jump server is used from a new, unexpected external location. It moves beyond simple volume metrics to detect changes in the qualitative nature of connections.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Threat Intelligence Feeds
  - Change Management Logs
  - Hosts within the OT DMZ, designated jump servers, SCADA servers, and the network segments containing field devices such as PLCs and RTUs.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each JUMP_SERVER and USER:
        BASELINE = calculate_14day_baseline_of_unique_tuples(server, user)
        CURRENT_DAY_TUPLES = get_current_day_tuples(server, user)
        IF count(CURRENT_DAY_TUPLES) > BASELINE.99_9th_percentile:
          TRIGGER_ALERT(
            details: "Anomalous relay tuple count detected",
            server: JUMP_SERVER,
            user: USER,
            count: count(CURRENT_DAY_TUPLES)
          )
- question: Can a sequence analysis model be used to identify abnormal connection patterns on intermediary hosts that suggest C2 activity?
  context: This question proposes using a sophisticated model to understand the 'grammar' of normal connection sequences. Legitimate maintenance often follows a predictable pattern (e.g., RDP in, brief activity, RDP out). In contrast, C2 traffic might manifest as a long-lived, low-bandwidth connection (a 'heartbeat') that represents a low-probability sequence. Models like HMMs or LSTMs can learn the normal state transitions and flag these unusual sequences that indicate a persistent adversary presence rather than transient operational activity.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Windows Event ID 5156
  - Asset Inventory DB
  - Threat Intelligence Feeds
  - Change Management Logs
  - Hosts within the OT DMZ, designated jump servers, SCADA servers, and the network segments containing field devices such as PLCs and RTUs.
  range: last 90 days
  queries:
  - pseudocode: |
      MODEL = train_sequence_model(data='90_days_of_connection_sequences')
      FOR each live connection sequence:
        PROBABILITY = MODEL.score(sequence)
        IF PROBABILITY < THRESHOLD:
          TRIGGER_ALERT(
            details: "Low-probability connection sequence detected",
            host: sequence.host,
            sequence_details: sequence
          )
- question: How can I detect C2 protocol tunneling and correlate it with subsequent connections to internal ICS assets?
  context: This question focuses on identifying adversaries who hide their C2 traffic within legitimate protocols (DNS, HTTP, ICMP). The first step is to detect the tunneling itself through specific indicators like high-entropy DNS queries or large ICMP packets. However, the crucial second step is to confirm the host's role as a proxy. By correlating the tunneling detection with a subsequent new connection from that same host to an internal ICS asset within a short time window (60 seconds), the query confirms the adversary's intent to pivot into the OT network.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek icmp.log
  - Windows Event ID 4688
  - Internal DNS servers, any OT host with direct or proxied internet access (e.g., Historians, Engineering Workstations), perimeter firewalls and web proxies, and network segments where ICMP is permitted.
  range: last 90 days
  queries:
  - pseudocode: |
      WHEN tunneling_indicator is detected on HOST (e.g., high DNS entropy, large ICMP payload):
        TIMESTAMP = event.timestamp
        SEARCH conn.log for new connections from HOST to any INTERNAL_ICS_ASSET
        WHERE connection.timestamp is within TIMESTAMP + 60 seconds
        IF found:
          TRIGGER_ALERT(
            details: "Tunneling activity correlated with internal ICS connection",
            host: HOST,
            indicator: tunneling_indicator,
            internal_asset: INTERNAL_ICS_ASSET
          )
- question: How can I use statistical baselines of tunneling metrics to identify hosts engaged in covert communication?
  context: This question provides a more robust, data-driven method for detecting tunneling. Instead of relying on fixed thresholds, it establishes a 'normal' for each host across various metrics (e.g., DNS query entropy, HTTP URI entropy, JA3 hash frequency). Alerting on significant statistical deviations from this baseline is more resilient to minor environmental changes and better at detecting 'low-and-slow' tunneling. Creating a composite risk score from multiple simultaneous anomalies (e.g., a rare JA3 hash and high DNS entropy) greatly improves alert fidelity and helps analysts focus on the most suspicious hosts.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek icmp.log
  - Windows Event ID 4688
  - Internal DNS servers, any OT host with direct or proxied internet access (e.g., Historians, Engineering Workstations), perimeter firewalls and web proxies, and network segments where ICMP is permitted.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each HOST:
        BASELINE_DNS = calculate_30day_baseline(host=HOST, metric='dns_query_entropy')
        BASELINE_HTTP = calculate_30day_baseline(host=HOST, metric='http_uri_entropy')
        ...etc for other metrics
        CURRENT_METRICS = get_current_metrics(host=HOST)
        IF any metric > (baseline.mean + 3 * baseline.std_dev):
          RISK_SCORE = combine_anomalies(CURRENT_METRICS)
          TRIGGER_ALERT(
            details: "Statistical anomaly in tunneling metrics",
            host: HOST,
            risk_score: RISK_SCORE
          )
- question: Can a machine learning classifier be trained to automatically identify traffic indicative of C2 tunneling?
  context: This question outlines a highly effective, albeit complex, method for detecting tunneling. By training a classifier on a rich set of features from network logs, the model can learn the subtle, multi-faceted characteristics of tunneled traffic that are difficult to define with rules. An unsupervised model like an Isolation Forest is particularly useful when labeled malicious data is unavailable. The key to making this actionable is the automated follow-up; once the model predicts tunneling with high confidence, it must trigger a secondary query to check for subsequent internal ICS connections, thereby confirming the proxy behavior.
  answer_sources:
  - Zeek dns.log
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek icmp.log
  - Windows Event ID 4688
  - Internal DNS servers, any OT host with direct or proxied internet access (e.g., Historians, Engineering Workstations), perimeter firewalls and web proxies, and network segments where ICMP is permitted.
  range: last 90 days
  queries:
  - pseudocode: |
      MODEL = train_classifier(data='labeled_or_normal_traffic_data')
      FOR each new network flow from HOST:
        FEATURES = extract_features(flow)
        PREDICTION = MODEL.predict(FEATURES)
        IF PREDICTION.is_tunneling AND PREDICTION.confidence > 0.95:
          // Automated follow-up query
          SEARCH conn.log for subsequent connections from HOST to INTERNAL_ICS_ASSET
          IF found:
            TRIGGER_ALERT(
              details: "ML-detected tunneling confirmed as proxy behavior",
              host: HOST,
              confidence: PREDICTION.confidence
            )