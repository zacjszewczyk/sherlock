name: "T0864: Transient Cyber Asset"
id: "a7d8e9f0-1b2c-4d5e-8f6a-7b8c9d0e1f23"
description: "This playbook helps determine if an adversary is leveraging a transient cyber asset for initial access into an ICS environment. It focuses on detecting new or unauthorized devices, anomalous communication patterns from known transient assets, the transfer and subsequent execution of suspicious files, and anomalous command-line activity originating from sessions associated with these assets."
type: "technique"
related:
  - "TA0108: Initial Access"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "How can I detect and alert on network connections from new, undocumented devices targeting critical ICS hosts?"
    context: "This question aims to identify potentially unauthorized transient assets connecting to the ICS network for the first time. By comparing observed source MAC/IP addresses against historical data and authoritative asset inventories, we can flag devices that are not whitelisted or part of the known configuration, which could represent an initial access attempt."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dhcp.log"
      - "ICS Asset Inventory (CMDB)"
      - "Device Whitelists"
      - "NAI: Network ingress/egress points for ICS zones (e.g., Level 2 Process Control Network, Level 3.5 Manufacturing Zone), especially within maintenance and engineering VLANs, IT/OT DMZ gateways, core ICS network switches, and physical ports where transient devices (e.g., engineering laptops, diagnostic tools) connect. Also, Jump Servers and Bastion Hosts within the IT/OT DMZ."
    range: "last 30 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOREACH conn in zeek_conn_logs:
            source_ip = conn.id.orig_h
            source_mac = conn.source_mac
            is_new_ip = NOT seen_in_logs(source_ip, last 30 days)
            is_new_mac = NOT seen_in_logs(source_mac, last 30 days)
            IF is_new_ip OR is_new_mac:
              is_in_cmdb = lookup_in_cmdb(source_ip, source_mac)
              is_whitelisted = lookup_in_whitelist(source_ip, source_mac)
              IF NOT is_in_cmdb AND NOT is_whitelisted:
                ALERT "New, un-inventoried device detected" with conn details
  - question: "Is there an unusual surge in the number of new devices connecting to an ICS network segment?"
    context: "This question focuses on detecting anomalous trends in new device connections. A sudden increase in the volume of new devices, even if individual connections don't seem malicious, can indicate a coordinated or large-scale unauthorized access event. Baselining this activity helps distinguish normal fluctuations from statistically significant spikes."
    answer_sources:
      - "Zeek conn.log"
      - "NAI: Network ingress/egress points for ICS zones (e.g., Level 2 Process Control Network, Level 3.5 Manufacturing Zone), especially within maintenance and engineering VLANs, IT/OT DMZ gateways, core ICS network switches, and physical ports where transient devices (e.g., engineering laptops, diagnostic tools) connect. Also, Jump Servers and Bastion Hosts within the IT/OT DMZ."
    range: "last 60 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOREACH segment in ics_segments:
            new_devices_today = count_unique_ips_macs(today) NOT seen_in_logs(last 7 days)
            baseline = calculate_percentile(daily_new_device_counts, last 60 days, 99)
            IF new_devices_today > baseline:
              ALERT "Unusual surge in new devices detected" with segment, count, threshold
  - question: "Can machine learning be used to identify network connections that are anomalous compared to historical patterns within an ICS segment?"
    context: "This question proposes using an unsupervised machine learning model (like Isolation Forest) to find connections that don't fit the established normal behavior. This is useful for catching novel or subtle attack techniques that might not be caught by simple rule-based checks, by analyzing multiple features of a connection simultaneously."
    answer_sources:
      - "Zeek conn.log"
      - "NAI: Network ingress/egress points for ICS zones (e.g., Level 2 Process Control Network, Level 3.5 Manufacturing Zone), especially within maintenance and engineering VLANs, IT/OT DMZ gateways, core ICS network switches, and physical ports where transient devices (e.g., engineering laptops, diagnostic tools) connect. Also, Jump Servers and Bastion Hosts within the IT/OT DMZ."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          model = load_pretrained_isolation_forest_model()
          FOREACH conn in new_zeek_conn_logs:
            features = extract_features(conn)
            anomaly_score = model.predict(features)
            IF anomaly_score > 0.6:
              ALERT "Anomalous network connection detected by ML model" with conn details and score
  - question: "Is a known transient asset communicating with unauthorized destinations or known malicious endpoints?"
    context: "Even authorized transient assets can be compromised. This question focuses on enforcing strict communication policies by checking if a transient asset is connecting to an IP/port/protocol combination that is not on its explicit whitelist. It also checks for communication with known malicious IPs/domains from threat intelligence feeds."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Asset Whitelist"
      - "Threat Intelligence Feed"
      - "NAI: Network ingress/egress points for ICS zones, especially at the boundaries of Level 2/3.5 networks, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and network gateways connecting the Process Control Network (PCN) to corporate IT or external networks. Also, the transient asset's point of connection to the ICS network and any associated management/maintenance VLANs."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          malicious_ips = load_threat_intel_ips()
          FOREACH conn in zeek_conn_logs from known_transient_assets:
            is_whitelisted = check_whitelist(conn.id.orig_h, conn.id.resp_h, conn.id.resp_p, conn.proto)
            is_malicious = conn.id.resp_h in malicious_ips
            IF NOT is_whitelisted OR is_malicious:
              ALERT "Transient asset communication violation" with details
  - question: "Is a known transient asset exhibiting statistically anomalous communication behavior in terms of destinations or data volume?"
    context: "This question aims to detect behavioral deviations in authorized transient assets. By creating a baseline of normal activity (common destinations, typical data volume), we can identify when an asset starts communicating with rare destinations or transfers an unusually large amount of data, which could indicate misuse or compromise."
    answer_sources:
      - "Zeek conn.log"
      - "NAI: Network ingress/egress points for ICS zones, especially at the boundaries of Level 2/3.5 networks, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and network gateways connecting the Process Control Network (PCN) to corporate IT or external networks. Also, the transient asset's point of connection to the ICS network and any associated management/maintenance VLANs."
    range: "last 60 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOREACH asset in known_transient_assets:
            baseline_dest = get_99_percentile_destinations(asset, last 60 days)
            baseline_volume_stats = get_hourly_volume_mean_stddev(asset, last 60 days)
            FOREACH conn in new_logs_for(asset):
              IF conn.destination NOT in baseline_dest:
                ALERT "Connection to rare destination"
              current_hourly_volume = get_current_hourly_volume(asset)
              z_score = (current_hourly_volume - baseline_volume_stats.mean) / baseline_volume_stats.stddev
              IF z_score > 3:
                ALERT "Anomalous hourly data volume"
  - question: "Can advanced machine learning models detect subtle anomalies in a transient asset's communication patterns over time or classify individual connections as anomalous?"
    context: "This question leverages two types of ML: time-series forecasting (Prophet) to find deviations from expected traffic patterns over time, and supervised classification (Random Forest) to make a real-time judgment on individual connections. This provides a more sophisticated, multi-faceted approach to detecting compromised transient assets."
    answer_sources:
      - "Zeek conn.log"
      - "NAI: Network ingress/egress points for ICS zones, especially at the boundaries of Level 2/3.5 networks, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and network gateways connecting the Process Control Network (PCN) to corporate IT or external networks. Also, the transient asset's point of connection to the ICS network and any associated management/maintenance VLANs."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          prophet_model = load_prophet_model_for_asset()
          rf_model = load_random_forest_model_for_asset()
          observed_volume = get_observed_hourly_volume()
          forecast = prophet_model.predict()
          IF observed_volume > forecast.yhat_upper for 3 consecutive hours:
            ALERT "Sustained anomalous data volume detected by Prophet"
          FOREACH conn in new_logs_for_asset:
            features = extract_features(conn)
            prediction = rf_model.predict(features)
            IF prediction.class == 'anomalous' AND prediction.confidence > 0.75:
              ALERT "Anomalous connection classified by Random Forest"
  - question: "Was an executable file transferred from a transient asset to an ICS host and then immediately executed?"
    context: "This is a classic 'download and execute' pattern. Correlating a file transfer with a subsequent process creation within a short time window is a strong indicator of malicious activity, such as malware delivery or the staging of unauthorized tools."
    answer_sources:
      - "Zeek files.log"
      - "Zeek smb_files.log"
      - "Zeek http.log"
      - "Windows Event ID 4688"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, file servers, and other Windows-based servers within the Process Control Network (PCN), especially endpoints configured to accept file transfers from transient devices. Also, network segments where transient assets connect and hosts within those segments, and IT/OT DMZ file transfer zones."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOREACH file_transfer in file_logs where source_ip is transient_asset:
            IF file_extension is executable:
              SEARCH process_logs for EventID 4688 where:
                host == file_transfer.destination_ip AND
                process_name == file_transfer.filename AND
                timestamp is within 5 minutes of file_transfer.timestamp
              IF match_found:
                ALERT "File transfer followed by immediate execution" with details
  - question: "Are files being transferred from transient assets with unusually random filenames or unexpected file sizes?"
    context: "Attackers often use randomized filenames to evade simple signature-based detection. High filename entropy can be an indicator of such obfuscation. Similarly, if a file pretending to be a legitimate tool has a size that is significantly different from the real tool, it might be a malicious implant."
    answer_sources:
      - "Zeek files.log"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, file servers, and other Windows-based servers within the Process Control Network (PCN), especially endpoints configured to accept file transfers from transient devices. Also, network segments where transient assets connect and hosts within those segments, and IT/OT DMZ file transfer zones."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          entropy_baseline = calculate_percentile(filename_entropy, last 90 days, 99)
          filesize_baselines = get_legitimate_filesize_baselines()
          FOREACH file_transfer in file_logs:
            entropy = calculate_shannon_entropy(file_transfer.filename)
            IF entropy > entropy_baseline:
              ALERT "High entropy filename detected"
            IF file_transfer.filename in filesize_baselines:
              size_deviation = abs(file_transfer.size - filesize_baselines[file_transfer.filename]) / filesize_baselines[file_transfer.filename]
              IF size_deviation > 0.10:
                ALERT "Anomalous file size detected for known executable"
  - question: "Can a machine learning model be used to predict whether a file transfer followed by execution is a malicious event?"
    context: "This question proposes building a classifier that learns the characteristics of both benign and malicious 'transfer-and-execute' events. By using features like file type, protocol, entropy, and process context, the model can provide a high-confidence assessment of whether a new event is malicious, automating a complex analysis task."
    answer_sources:
      - "Zeek files.log"
      - "Windows Event ID 4688"
      - "Threat Intelligence Feed"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historians, file servers, and other Windows-based servers within the Process Control Network (PCN), especially endpoints configured to accept file transfers from transient devices. Also, network segments where transient assets connect and hosts within those segments, and IT/OT DMZ file transfer zones."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          model = load_pretrained_gbm_model()
          correlated_events = correlate_file_transfers_with_process_creations()
          FOREACH event in correlated_events:
            features = extract_features_from_event(event)
            prediction = model.predict(features)
            IF prediction.class == 'malicious' AND prediction.confidence > 0.85:
              ALERT "Malicious file transfer/execution pair detected by ML model"
  - question: "Is a user session from a transient asset executing commands with suspicious keywords or issuing potentially harmful ICS protocol commands?"
    context: "This question seeks to detect direct malicious interaction. It involves looking for known suspicious command-line strings (e.g., from hacking tools) within sessions originating from transient assets. It also expands the search to the OT layer, checking for dangerous industrial protocol commands (like write operations) that could alter a physical process."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4624"
      - "Zeek rdp.log"
      - "Zeek dnp3.log"
      - "Zeek modbus.log"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Domain Controllers, Bastion Hosts, and other Windows-based servers within the ICS environment, particularly endpoints where transient assets establish direct or indirect interactive sessions. Also, network segments where DNP3/Modbus communications are monitored to detect effects of malicious commands."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          suspicious_keywords = ['mimikatz', 'Invoke-WebRequest', 'whoami /all']
          transient_sessions = get_sessions_from_transient_assets()
          FOREACH process in process_logs where process.session in transient_sessions:
            IF process.command_line contains any suspicious_keywords:
              ALERT "Suspicious keyword in command line from transient session"
          FOREACH ot_command in dnp3_modbus_logs from transient_ips:
            IF ot_command is write_operation AND NOT in maintenance_window:
              ALERT "Unauthorized OT write command from transient asset"
  - question: "Is a transient asset executing administrative commands with novel or unusually complex (high entropy) arguments?"
    context: "Attackers often use legitimate tools for malicious purposes ('living off the land'). This question aims to detect this by baselining normal command-line usage for common tools. A command that is structurally very different (low Jaccard similarity) or overly complex/obfuscated (high entropy) is highly suspicious."
    answer_sources:
      - "Windows Event ID 4688"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Domain Controllers, Bastion Hosts, and other Windows-based servers within the ICS environment, particularly endpoints where transient assets establish direct or indirect interactive sessions. Also, network segments where DNP3/Modbus communications are monitored to detect effects of malicious commands."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOREACH tool in admin_tools:
            baseline_commands = get_historical_commands(tool, last 90 days)
            entropy_baseline = calculate_percentile(command_entropy, last 90 days, 98)
            FOREACH new_command in process_logs for tool from transient_session:
              similarity = max_jaccard_similarity(new_command, baseline_commands)
              entropy = calculate_shannon_entropy(new_command)
              IF similarity < 0.5:
                ALERT "Novel command-line argument detected"
              IF entropy > entropy_baseline:
                ALERT "High entropy command-line argument detected"
  - question: "Can machine learning models classify command lines as malicious or detect anomalous sequences of process executions originating from a transient asset?"
    context: "This question proposes two advanced ML approaches. The first uses NLP to understand and classify the intent of a single command line. The second uses an RNN to model entire workflows (sequences of commands) to detect when a user deviates from normal operational procedures, which could indicate malicious exploration or action."
    answer_sources:
      - "Windows Event ID 4688"
      - "NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Domain Controllers, Bastion Hosts, and other Windows-based servers within the ICS environment, particularly endpoints where transient assets establish direct or indirect interactive sessions. Also, network segments where DNP3/Modbus communications are monitored to detect effects of malicious commands."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          nlp_model = load_nlp_classifier()
          rnn_model = load_rnn_sequence_model()
          FOREACH new_command in process_logs from transient_session:
            prediction = nlp_model.predict(new_command.command_line)
            IF prediction.class == 'malicious' AND prediction.confidence > 0.8:
              ALERT "Malicious command line classified by NLP model"
          process_sequence = get_process_sequence_for_session()
          sequence_probability = rnn_model.predict_probability(process_sequence)
          IF sequence_probability is low:
            ALERT "Anomalous sequence of process executions detected"