name: 'T0874: Hooking'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: |
  This playbook addresses adversary actions involving code hooking (T0874) within Industrial Control Systems (ICS). It focuses on detecting unauthorized code execution and privilege escalation on critical components like Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), and SCADA services. The investigation covers scenarios where adversaries manipulate legitimate processes by forcing them to load malicious or suspicious DLLs, identified by invalid signatures, unusual file paths, or statistical rarity. It also looks for subsequent malicious behavior resulting from hooking, such as anomalous network connections to C2 servers or the spawning of unexpected child processes like command shells with suspicious arguments. The overall goal is to identify hooking activities used to gain deeper control over industrial processes.
type: technique
related:
  - 'TA0104: Execution'
  - 'TA0111: Privilege Escalation'
contributors:
  - Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Is a critical ICS process loading a suspicious DLL based on signature status, path allow/blocklists, or known-bad hashes?
    context: |
      This question aims to identify basic hooking attempts where a legitimate Industrial Control System (ICS) process is forced to load a malicious DLL. Adversaries use this to execute their code within the context of a trusted process. By checking for unsigned DLLs, modules loaded from unexpected or suspicious directories (like temp folders), or modules matching known threat intelligence, analysts can detect common and straightforward hooking implementations.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Search Sysmon Event ID 7 for critical ICS processes. Filter for loaded modules where signature is false/invalid, path is not on allowlist, path is on blocklist, or hash matches threat intelligence.
  - question: Is a critical ICS process loading a DLL that is statistically anomalous based on hash prevalence, path entropy, or file size deviation?
    context: |
      This question seeks to uncover more sophisticated hooking attempts that might evade simple signature or path-based checks. By analyzing statistical properties, analysts can find outliers that suggest malicious activity. A rarely seen DLL hash across the environment, a file path with unusually high randomness (entropy), or a known DLL with a modified file size can all be indicators of a compromised file or a novel malware implant.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For Sysmon Event ID 7 from critical ICS processes, calculate 30-day prevalence of ImageLoadedHash. Alert on hashes below 1st percentile. Calculate Shannon entropy of ImageLoaded path and alert if > 3 std dev from mean. For known DLLs, alert if file size deviates > 10% from average.
  - question: Can a machine learning model detect anomalous DLL loading behavior for a critical ICS process that deviates from its established baseline?
    context: |
      This question leverages machine learning to automate the detection of complex and subtle hooking activities. By training a model on a comprehensive set of features (signature status, path characteristics, file rarity), it can learn the normal profile of DLL loading for a specific process. The model can then flag new events that deviate significantly from this baseline, identifying novel or advanced attacks that might be missed by manual statistical analysis or static rules.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Using historical Sysmon Event ID 7 data, train an anomaly detection model (e.g., Isolation Forest) with features like signature status, path entropy, and hash rarity. Apply the model to new module load events and alert on high-scoring anomalies.
  - question: Is a hooked critical ICS process making network connections to unauthorized destinations, using unapproved protocols, or contacting known malicious domains?
    context: |
      This question investigates the post-exploitation phase of a hooking attack. Once an adversary has injected code into a process, they often establish a network connection for command and control (C2) or data exfiltration. This query looks for clear violations of expected network behavior, such as connections to IPs or ports not on an allowlist, communication over unexpected protocols, or DNS lookups for domains associated with threat actors.
    answer_sources:
      - 'Windows Event ID 3 (Sysmon - Network Connection)'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'NAI: Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers, Network Gateways'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Correlate Sysmon Event ID 3 and Zeek logs for critical ICS processes. Alert if DestinationIP/Port is not on process allowlist. Alert if DNS query matches threat intelligence. Alert if protocol is not on process-destination allowlist.
  - question: Is a critical ICS process exhibiting statistically anomalous network behavior, such as connecting to rare destinations or transferring unusual amounts of data?
    context: |
      This question uses statistical baselining to find subtle indicators of compromise in network traffic from a potentially hooked process. An adversary might use a C2 server that isn't on any public blocklist. However, a connection to a destination rarely or never seen before for that specific ICS process is highly suspicious. Similarly, a sudden spike in data transfer volume could indicate data exfiltration. These statistical anomalies can reveal malicious activity that bypasses static rules.
    answer_sources:
      - 'Windows Event ID 3 (Sysmon - Network Connection)'
      - 'Zeek conn.log'
      - 'NAI: Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers, Network Gateways'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Build 90-day baseline of DestinationIP/Port pairs for critical ICS processes. Alert on connections to destinations in the bottom 1st percentile of frequency. Baseline data transfer volume and alert if a connection exceeds the 99th percentile.
  - question: Can a machine learning model detect anomalous network transactions from a critical ICS process that deviate from its learned multi-variate baseline?
    context: |
      This question applies advanced machine learning to detect anomalous network behavior by considering multiple features simultaneously. An autoencoder can learn the complex, normal relationships between destination, port, protocol, data volume, and connection duration for a specific process. It can then identify malicious activity that presents as an unusual *combination* of these features, even if each individual feature is not anomalous on its own. This provides a powerful method for detecting novel C2 channels or exfiltration techniques.
    answer_sources:
      - 'Windows Event ID 3 (Sysmon - Network Connection)'
      - 'Zeek conn.log'
      - 'NAI: Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers, Network Gateways'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Train an autoencoder on historical network transaction data for critical ICS processes. Use features like IP, port, protocol, byte counts, and duration. Alert on new transactions with a high reconstruction error, indicating a deviation from the normal profile.
  - question: Is a privileged ICS process (High or System integrity) loading a DLL that is not on its strict, pre-approved allowlist?
    context: |
      This question focuses on a high-confidence detection method for hooking as a privilege escalation vector. Privileged processes are high-value targets. By maintaining a strict allowlist of known-good DLLs for these processes, any deviation becomes a critical security event. This approach, known as application allowlisting, is highly effective at preventing unauthorized code execution in sensitive processes, as anything not explicitly permitted is denied and flagged.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For Sysmon Event ID 7 where parent process IntegrityLevel is High/System, check if ImageLoadedHash and ImageLoaded path are on a pre-defined allowlist. Alert on any mismatch.
  - question: Is a privileged ICS process loading a DLL that is statistically anomalous based on hash rarity, file compile time, or path entropy?
    context: |
      This question applies statistical analysis to hunt for hooking in privileged processes, providing detection capabilities when a strict allowlist is not feasible. A DLL loaded into a system-level process should almost never be unique to a single machine (low prevalence). A DLL compiled more recently than the process loading it or the last system patch is also highly suspicious. These statistical indicators help identify novel malware or file-less attacks attempting to escalate privileges.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: For privileged ICS process module loads, calculate 30-day hash prevalence and alert if < 0.5th percentile. Alert if module compile time is newer than parent process or last patch date. Alert if path entropy is > 3 std dev from mean.
  - question: Can a One-Class SVM model identify anomalous DLL loading events for privileged ICS processes that indicate a potential privilege escalation attempt?
    context: |
      This question proposes using a specialized machine learning model (One-Class SVM) to create a high-fidelity baseline of normal DLL loading behavior for privileged processes. This model is particularly well-suited for learning a 'tight' boundary around normal activity. Any new event that falls outside this boundary is considered a significant anomaly. This is a powerful technique for detecting sophisticated hooking attempts aimed at privilege escalation, as it can catch deviations across multiple features simultaneously.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'NAI: Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Train a One-Class SVM model on Sysmon Event ID 7 data for privileged ICS processes, using features like signature status, path entropy, and hash prevalence. Alert on any new module load flagged as an outlier by the model.
  - question: Following a suspicious DLL load, did a critical ICS process spawn a known malicious process or execute a command with suspicious arguments?
    context: |
      This question links the initial hooking event with its immediate consequence: process creation. A common goal of hooking is to spawn a new process, like a command shell, to execute further commands. This query correlates a suspicious module load with a subsequent process creation by the same parent process within a short time window. It looks for high-confidence indicators of malice, such as the creation of `cmd.exe` or `powershell.exe`, or the use of command-line arguments associated with obfuscation (`-enc`) or downloading payloads (`IEX`, `download`).
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'Windows Event ID 4688 (Security - A process has been created)'
      - 'Windows Event ID 1 (Sysmon - Process Create)'
      - 'NAI: Engineering Workstations (EWS), HMIs, Historian Servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Correlate suspicious Sysmon Event ID 7 with subsequent Sysmon Event ID 1 from the same ProcessGuid within 60 seconds. Alert if child process is on a blocklist (cmd.exe, powershell.exe) or command line contains suspicious strings (-enc, download, IEX).
  - question: Did a critical ICS process spawn a child process or use command-line arguments that are statistically unusual compared to its 90-day baseline?
    context: |
      This question uses baselining to detect anomalous process creation events that may indicate a successful hooking attack. Critical ICS processes typically have very predictable behavior, including the child processes they spawn and the arguments they use. This query establishes a historical baseline and alerts on deviations. Alerting on a never-before-seen child process or a command line with a significantly different structure (measured by Jaccard distance) can uncover attacker activity, even if the child process itself is legitimate.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'Windows Event ID 4688 (Security - A process has been created)'
      - 'Windows Event ID 1 (Sysmon - Process Create)'
      - 'NAI: Engineering Workstations (EWS), HMIs, Historian Servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Build a 90-day baseline of child processes and command-line arguments for each critical ICS parent process. Alert if a new child process is not in the baseline. For known child processes, tokenize command line and alert if Jaccard distance from historical token sets is > 0.8.
  - question: Can a graph-based anomaly detection model identify structurally rare process creation events originating from critical ICS processes?
    context: |
      This question applies advanced graph analytics to model and detect anomalous process relationships. Normal system activity forms a predictable process creation graph. A hooking attack often creates a structurally rare or impossible path in this graph, for example, a SCADA service suddenly spawning PowerShell. By using a graph-based machine learning model, analysts can automatically detect these structural anomalies, which are strong indicators of compromise, without relying on pre-defined rules.
    answer_sources:
      - 'Windows Event ID 7 (Sysmon - Image Loaded)'
      - 'Windows Event ID 4688 (Security - A process has been created)'
      - 'Windows Event ID 1 (Sysmon - Process Create)'
      - 'NAI: Engineering Workstations (EWS), HMIs, Historian Servers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: Build a process creation graph from Sysmon Event ID 1 data. Use a graph-based anomaly detection model to find structurally rare parent-child relationships involving critical ICS processes (e.g., historian spawning powershell.exe).