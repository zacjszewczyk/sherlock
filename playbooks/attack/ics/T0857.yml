name: T0857: System Firmware
id: 5a8a68a2-1b1a-4e2b-927a-8b89e3e3b7b1
description: |
  This playbook focuses on detecting malicious modifications to system firmware, a technique used by adversaries for both inhibiting response functions and establishing persistence. Investigations should focus on identifying anomalous firmware transfers and update activities. This includes monitoring for firmware files transferred to critical ICS devices (like PLCs and RTUs) outside of approved maintenance windows, from unauthorized source IPs, using non-standard protocols, or with file sizes that deviate significantly from the norm. It also involves scrutinizing the execution of firmware update utilities on Engineering Workstations (EWS), looking for unauthorized users, processes with incorrect hashes or unusual parent processes (e.g., spawned by an email client), or utilities targeting unknown devices. Post-update behavior, such as new network connections to C2 servers or changes in ICS protocol commands, and validating firmware file hashes against curated allowlists and threat intelligence are also critical investigative steps.
type: technique
related:
  - TA0107: Inhibit Response Function
  - TA0110: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a firmware transfer to a critical ICS device occurred from an unauthorized source or using a non-standard protocol?
    context: This question aims to detect firmware transfers that violate established update policies. Adversaries may attempt to push malicious firmware from compromised systems that are not authorized engineering workstations or vendor servers, or use common protocols like HTTP/SMB instead of designated ones like FTP/TFTP to bypass specific firewall rules. Identifying transfers that don't adhere to a strict allowlist of sources and protocols is a primary indicator of a potential attack.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek ftp.log
      - Zeek tftp.log
      - Zeek smb_files.log
      - Process Control Network (PCN) segments hosting PLCs/RTUs
      - Network segments containing Engineering Workstations (EWS)
      - Industrial Demilitarized Zone (IDMZ) for vendor remote access
      - Enterprise/ICS network boundary points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define allowlist of sources/protocols per device
          ALLOWLIST = { "device_ip": { "sources": [...], "protocols": [...] } }
          // Find firmware file transfers
          transfers = SEARCH files.log WHERE mime_type='application/octet-stream' OR filename MATCHES '*.fw, *.bin'
          FOR transfer in transfers:
            conn = SEARCH conn.log WHERE uid = transfer.uid
            device_ip = conn.destination_ip
            IF device_ip IN ALLOWLIST:
              IF conn.source_ip NOT IN ALLOWLIST[device_ip].sources OR conn.protocol NOT IN ALLOWLIST[device_ip].protocols:
                ALERT "Anomalous firmware transfer: Unauthorized source or protocol"
  - question: Has a recent firmware transfer shown anomalous characteristics in its file size, timing, or source IP compared to historical baselines?
    context: This question uses statistical analysis to find subtle anomalies that might be missed by static rules. Adversaries may try to disguise their activities by using allowed protocols. However, the size of a malicious firmware image might differ from legitimate ones (e.g., due to added code), the transfer might happen at an unusual time (e.g., 2 AM instead of during a maintenance window), or come from a system that, while on the network, has never performed an update before. A cumulative risk score helps bubble up the most suspicious events.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Process Control Network (PCN) segments hosting PLCs/RTUs
      - Network segments containing Engineering Workstations (EWS)
      - Industrial Demilitarized Zone (IDMZ) for vendor remote access
      - Enterprise/ICS network boundary points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Establish 90-day baseline for size, time, and source for each device model
          BASELINE = GET_HISTORICAL_BASELINE(device_model, 90_days)
          // On new firmware transfer event
          EVENT = new_firmware_transfer
          risk_score = 0
          // Calculate Z-score for file size
          size_z_score = (EVENT.file_size - BASELINE.mean_size) / BASELINE.std_dev_size
          IF size_z_score > 3: risk_score += 1
          // Check if time is outside normal window
          IF EVENT.time NOT IN BASELINE.maintenance_windows: risk_score += 1
          // Check if source is new for this device class
          IF EVENT.source_ip NOT IN BASELINE.historical_sources: risk_score += 1
          IF risk_score > THRESHOLD:
            ALERT "High-risk firmware transfer detected based on size, time, or source anomaly"
  - question: Does a recent firmware transfer exhibit a combination of features that an anomaly detection model flags as uncharacteristic of legitimate updates?
    context: This question leverages machine learning to detect complex, multi-faceted anomalies. A single attribute (like file size or protocol) might not be suspicious on its own, but a specific combination of attributes (e.g., a slightly large file, transferred via an allowed protocol but from a new source, taking an unusually long time, outside of a maintenance window) can be a strong indicator of malicious activity. An Isolation Forest or similar model can identify these rare combinations that deviate from millions of past legitimate events.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Process Control Network (PCN) segments hosting PLCs/RTUs
      - Network segments containing Engineering Workstations (EWS)
      - Industrial Demilitarized Zone (IDMZ) for vendor remote access
      - Enterprise/ICS network boundary points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained anomaly detection model
          MODEL = LOAD_MODEL('firmware_anomaly_detector')
          // On new firmware transfer event
          EVENT = new_firmware_transfer
          // Construct feature vector from event data
          feature_vector = [EVENT.file_size, EVENT.duration, EVENT.protocol, EVENT.is_source_known, ...]
          // Get anomaly score from model
          anomaly_score = MODEL.predict(feature_vector)
          IF anomaly_score IS "outlier":
            ALERT "ML model detected anomalous firmware transfer"
  - question: Was a firmware update utility executed by an unauthorized user, with a mismatched hash, or targeting an unknown device?
    context: This question focuses on the host-level execution of firmware update tools. Adversaries who have gained access to an EWS may try to run these tools to load malicious firmware. This query verifies three critical aspects of the execution: identity (is the user authorized?), integrity (is the tool's binary unmodified?), and intent (is the target a valid, inventoried device?). A failure in any of these checks is a strong signal of misuse.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Active Directory security logs
      - Engineering Workstations (EWS) in the Process Control Network
      - Human-Machine Interfaces (HMIs) in the control room
      - Active Directory domain controllers for the ICS environment
      - Identity and Access Management (IAM) systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Define allowlist of utility hashes and authorized admin group
          ALLOWLIST_HASHES = [...]
          ADMIN_GROUP_SID = "S-1-5-..."
          // Search for firmware utility process creation
          events = SEARCH EventID:4688 WHERE ProcessName IN [firmware_utilities.exe]
          FOR event in events:
            // Verify hash
            IF event.ProcessHash NOT IN ALLOWLIST_HASHES:
              ALERT "Firmware utility with mismatched hash executed"
            // Verify user authorization
            user_groups = GET_USER_GROUPS(event.SubjectUserSid)
            IF ADMIN_GROUP_SID NOT IN user_groups:
              ALERT "Firmware utility executed by non-authorized user"
            // Verify target device
            target_ip = PARSE_COMMANDLINE(event.CommandLine)
            IF IS_VALID_ASSET(target_ip) == FALSE:
              ALERT "Firmware utility targeting unknown device"
  - question: Was a firmware utility executed at an unusual time, with unusually high frequency, or by a rare parent process?
    context: This question seeks to identify anomalous usage patterns of legitimate firmware utilities by authorized users, which could indicate a compromised account or insider threat. An administrator who normally updates firmware once a month during business hours suddenly running the tool multiple times on a Sunday night is highly suspicious. Similarly, a firmware utility being launched by an email client (`outlook.exe`) instead of the command line (`cmd.exe`) or file explorer (`explorer.exe`) suggests a potential phishing-based attack chain.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Active Directory security logs
      - Engineering Workstations (EWS) in the Process Control Network
      - Human-Machine Interfaces (HMIs) in the control room
      - Active Directory domain controllers for the ICS environment
      - Identity and Access Management (IAM) systems.
    range: last 180 days
    queries:
      - technology: pseudocode
        query: |
          // Establish 180-day baseline of execution time, frequency, and parent processes per user/host
          BASELINE = GET_HISTORICAL_BASELINE(user, host, 180_days)
          // On new utility execution event
          EVENT = new_utility_execution
          risk_score = 0
          // Check time
          IF EVENT.time IS OUTSIDE BASELINE.typical_times: risk_score += 1
          // Check frequency
          daily_count = GET_DAILY_COUNT(user, host)
          IF daily_count > BASELINE.mean_count + 3 * BASELINE.std_dev_count: risk_score += 1
          // Check parent process
          IF EVENT.ParentProcessName IN BASELINE.rare_parents: risk_score += 1
          IF risk_score > THRESHOLD:
            ALERT "Anomalous execution of firmware utility detected"
  - question: Does the execution of a firmware utility fit a pattern that a UEBA model flags as a behavioral anomaly for that user or host?
    context: This question uses a holistic, machine-learning-based approach to user and entity behavior. A UEBA model builds a rich, multi-dimensional profile of what is 'normal' for each user and system. It can detect subtle deviations across many variables simultaneously—such as the combination of an unusual logon type, a slightly different command-line syntax, and a novel parent process—that, when combined, represent a significant break from established behavior patterns and may indicate a sophisticated threat.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4672
      - Active Directory security logs
      - Engineering Workstations (EWS) in the Process Control Network
      - Human-Machine Interfaces (HMIs) in the control room
      - Active Directory domain controllers for the ICS environment
      - Identity and Access Management (IAM) systems.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained UEBA model
          MODEL = LOAD_MODEL('ueba_firmware_session_model')
          // On new utility execution event, correlated with logon session data
          EVENT = new_utility_execution_session
          // Construct feature vector for the event/session
          feature_vector = [EVENT.process_name, EVENT.parent_process, EVENT.cmd_args, EVENT.logon_type, EVENT.time_of_day]
          // Get anomaly classification from model
          is_anomaly = MODEL.predict(feature_vector)
          IF is_anomaly:
            ALERT "UEBA model detected anomalous session involving firmware utility"
  - question: Following a suspicious firmware update, did the device begin communicating with known malicious IPs or use unauthorized 'write' or 'stop' commands?
    context: This question seeks to confirm a successful compromise by looking for immediate post-exploitation behavior. If malicious firmware is successfully installed, it will often try to 'call home' to a command-and-control (C2) server for further instructions. These C2 server IPs are often available via threat intelligence feeds. Alternatively, the malicious firmware might immediately begin to disrupt the ICS process by issuing dangerous commands (like writing to coils or stopping the PLC) that are not part of a planned operation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network segments containing critical controllers (PLCs/RTUs)
      - Network egress points from the Process Control Network (PCN)
      - Industrial Demilitarized Zone (IDMZ) gateways
      - Network connections to corporate/enterprise DNS and proxy servers.
    range: 60 minutes post-event
    queries:
      - technology: pseudocode
        query: |
          // Triggered by a suspicious firmware update alert for DEVICE_IP
          C2_IP_LIST = GET_THREAT_INTEL_IPS()
          // Monitor traffic from DEVICE_IP for 60 minutes
          connections = SEARCH conn.log WHERE source_ip = DEVICE_IP AND time WITHIN last_60_minutes
          FOR conn in connections:
            IF conn.destination_ip IN C2_IP_LIST:
              ALERT "Device communicating with known C2 server post-firmware-update"
          // Monitor ICS protocol traffic
          ics_commands = SEARCH modbus.log WHERE source_ip = DEVICE_IP AND time WITHIN last_60_minutes
          FOR cmd in ics_commands:
            IF cmd.function_code IN ['write_single_coil', 'write_multiple_registers', 'stop_plc']:
              ALERT "Unauthorized write/stop command from device post-firmware-update"
  - question: Following a firmware update, did the device's network behavior deviate statistically from its established baseline in terms of destinations, protocols, or traffic volume?
    context: This question looks for more subtle indicators of compromise than direct C2 communication. A malicious implant might not talk to a known-bad IP, but it might start communicating with a new, previously unseen IP (a new C2 server). It might start using a protocol it has never used before (e.g., DNS for data exfiltration). Or, it might simply generate significantly more or less traffic than usual. Comparing post-update behavior to a long-term statistical baseline can reveal these otherwise hidden changes.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network segments containing critical controllers (PLCs/RTUs)
      - Network egress points from the Process Control Network (PCN)
      - Industrial Demilitarized Zone (IDMZ) gateways
      - Network connections to corporate/enterprise DNS and proxy servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For a given DEVICE_IP, get its 90-day communication baseline
          BASELINE = GET_COMMUNICATION_BASELINE(DEVICE_IP, 90_days)
          // After a firmware update, monitor traffic for 1 hour
          POST_UPDATE_TRAFFIC = GET_TRAFFIC(DEVICE_IP, 1_hour)
          // Check for new destinations/protocols
          IF ANY(POST_UPDATE_TRAFFIC.destination_ips) NOT IN BASELINE.known_ips:
            ALERT "Device communicating with new IP post-update"
          IF ANY(POST_UPDATE_TRAFFIC.protocols) NOT IN BASELINE.known_protocols:
            ALERT "Device using new protocol post-update"
          // Check traffic volume using Z-score
          volume_z_score = (POST_UPDATE_TRAFFIC.volume - BASELINE.mean_volume) / BASELINE.std_dev_volume
          IF volume_z_score > 3:
            ALERT "Significant increase in traffic volume post-update"
  - question: Following a firmware update, did a time-series anomaly detection model detect a significant change in the device's network traffic patterns?
    context: This question applies advanced machine learning to detect behavioral changes in network traffic. A time-series model like an LSTM Autoencoder learns the normal, complex temporal patterns of a device's traffic (e.g., bytes per second, connections per second). When the device's behavior changes due to a malicious implant, the model will fail to "reconstruct" the new, unseen pattern, resulting in a high reconstruction error. This method is powerful for detecting novel C2 communication or data exfiltration techniques that don't match simple statistical thresholds.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Network segments containing critical controllers (PLCs/RTUs)
      - Network egress points from the Process Control Network (PCN)
      - Industrial Demilitarized Zone (IDMZ) gateways
      - Network connections to corporate/enterprise DNS and proxy servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained time-series model for the specific device
          MODEL = LOAD_MODEL('device_traffic_model_for_DEVICE_IP')
          // Continuously feed live traffic data into the model
          LIVE_TRAFFIC_STREAM = GET_LIVE_TRAFFIC(DEVICE_IP)
          // After a firmware update, monitor the model's output
          reconstruction_error = MODEL.get_reconstruction_error(LIVE_TRAFFIC_STREAM)
          // Get the baseline error distribution
          BASELINE_ERROR = GET_BASELINE_ERROR(MODEL)
          IF reconstruction_error > 99th_percentile(BASELINE_ERROR):
            ALERT "ML model detected significant behavioral change in device traffic post-update"
  - question: Has a firmware file been detected whose hash is either on a known-malicious blacklist or is not on the approved allowlist for the target device?
    context: This is a fundamental integrity check. Organizations should maintain a "golden" repository of approved firmware versions for every ICS device model, with known-good file hashes. This question automates the process of checking every detected firmware file against this internal allowlist and against external threat intelligence feeds of malicious hashes. A match on the blacklist is a high-confidence indicator of a known threat, while a file that is on neither list is an unknown that requires immediate investigation.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Windows Event ID 4688
      - File integrity monitoring logs
      - Process Control Network (PCN) segments
      - Engineering Workstations (EWS)
      - Centralized firmware management servers and repositories
      - Network File Shares in the PCN or IDMZ
      - Systems running file integrity monitoring (FIM) agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load allowlist (device_model -> [hashes]) and denylist (malicious hashes)
          ALLOWLIST = LOAD_FIRMWARE_ALLOWLIST()
          DENYLIST = GET_THREAT_INTEL_HASHES()
          // For every detected firmware file
          FOR file in DETECTED_FIRMWARE_FILES:
            file_hash = COMPUTE_HASH(file)
            target_model = GET_TARGET_DEVICE_MODEL(file)
            // Check against denylist first
            IF file_hash IN DENYLIST:
              ALERT "Known malicious firmware hash detected"
            // Then check against allowlist
            ELSE IF file_hash NOT IN ALLOWLIST[target_model]:
              ALERT "Unknown firmware hash detected for target device"
  - question: For a firmware file with an unknown hash, are its size or entropy statistically different from known-good firmware for the same device model?
    context: When a new, unknown firmware file is found (not on the allowlist or denylist), we need a way to assess its risk. This question provides a method for doing so without reverse-engineering. Malicious firmware may be larger than legitimate versions due to added code, or it might be packed/encrypted to evade signature-based detection, which would significantly increase its byte-level entropy. Comparing the size and entropy of an unknown file to the statistical distribution of all known-good versions for that device can quickly flag it as a suspicious outlier.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Windows Event ID 4688
      - File integrity monitoring logs
      - Process Control Network (PCN) segments
      - Engineering Workstations (EWS)
      - Centralized firmware management servers and repositories
      - Network File Shares in the PCN or IDMZ
      - Systems running file integrity monitoring (FIM) agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // For an unknown firmware file
          UNKNOWN_FILE = new_unknown_firmware
          target_model = GET_TARGET_DEVICE_MODEL(UNKNOWN_FILE)
          // Get statistical profile of known-good firmware for that model
          PROFILE = GET_GOOD_FIRMWARE_PROFILE(target_model)
          // Calculate properties of the unknown file
          unknown_size = GET_FILE_SIZE(UNKNOWN_FILE)
          unknown_entropy = CALCULATE_ENTROPY(UNKNOWN_FILE)
          // Compare using Z-score
          size_z_score = (unknown_size - PROFILE.mean_size) / PROFILE.std_dev_size
          entropy_z_score = (unknown_entropy - PROFILE.mean_entropy) / PROFILE.std_dev_entropy
          IF size_z_score > 3 OR entropy_z_score > 3:
            ALERT "Unknown firmware has anomalous size or entropy"
  - question: Does a machine learning model classify an unknown firmware file as 'suspicious' based on its metadata and transfer characteristics?
    context: This question uses a classification model to predict the maliciousness of a firmware file even when its hash is unknown. This is useful for detecting novel or polymorphic malware. The model is trained on features from both known-good and known-bad firmware files, learning what combinations of metadata (file size, entropy, digital signature) and transfer context (protocol used, source IP reputation) are indicative of a threat. It can then assign a probability score to any new file, providing a powerful tool for prioritizing investigation of unknown firmware.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Windows Event ID 4688
      - File integrity monitoring logs
      - Process Control Network (PCN) segments
      - Engineering Workstations (EWS)
      - Centralized firmware management servers and repositories
      - Network File Shares in the PCN or IDMZ
      - Systems running file integrity monitoring (FIM) agents.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Load pre-trained firmware classification model
          MODEL = LOAD_MODEL('firmware_classifier')
          // For an unknown firmware file and its transfer event
          EVENT = new_unknown_firmware_event
          // Construct feature vector
          feature_vector = [EVENT.file_size, EVENT.file_entropy, EVENT.has_signature, EVENT.protocol, EVENT.source_ip_rep]
          // Get prediction from model
          suspicion_score = MODEL.predict_proba(feature_vector)
          IF suspicion_score > 0.9:
            ALERT "ML model classified unknown firmware as highly suspicious"