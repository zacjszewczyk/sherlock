name: 'T0834: Native API'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: "This playbook helps investigate whether an adversary is executing unauthorized code on critical ICS assets (e.g., HMI, EWS) by directly interacting with the operating system's native API. This can be observed through several indicators: 1) A whitelisted, critical ICS process spawning an anomalous child process, such as an unauthorized interpreter, an unsigned binary, or a process from a temporary directory. 2) A critical ICS application initiating network connections that violate established baselines, such as using IT protocols on an OT segment or connecting to external, unapproved destinations. 3) A whitelisted ICS process performing write or delete operations on sensitive files or registry keys outside of its normal operational baseline, indicating attempts at persistence or system tampering."
type: 'technique'
related:
  - 'TA0104: Execution'
contributors: 'Zachary Szewczyk, Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: 'none'
questions:
  - question: 'Is a critical ICS process spawning an unauthorized child process or attempting to inject into another process?'
    context: 'This question aims to detect direct code execution attempts where a legitimate, whitelisted ICS process is compromised and used to launch malicious tools (like command shells) or inject code. Such behavior is a strong indicator of an adversary leveraging a trusted process to bypass security controls. The action involves creating detection rules based on parent-child relationships, unauthorized interpreters, unsigned binaries, execution from temporary locations, and monitoring for memory write access requests which can precede process injection.'
    answer_sources: 'Windows Event ID 4688, Sysmon Event ID 1, Windows Event ID 4656 from Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network.'
    range: 'Last 90 days'
    queries:
      - 'Search (Process_Creation_Events) WHERE parent_process IN (critical_ics_watchlist) AND (child_process IN (interpreter_denylist) OR child_process_signature = "invalid" OR child_process_path CONTAINS ("%TEMP%", "C:\\Users\\Public"))'
      - 'Search (Memory_Access_Events) WHERE source_process IN (critical_ics_watchlist) AND access_mask CONTAINS ("process_memory_write")'
  - question: 'Are there statistically rare parent-child process relationships or command-line arguments originating from critical ICS processes?'
    context: 'This question seeks to identify anomalies using statistical baselining. Adversaries might use legitimate but uncommon child processes or obfuscated command-line arguments to evade simple signature-based detections. By establishing a baseline of normal behavior and alerting on rare occurrences (99th percentile rarity) or high-entropy command lines (3 standard deviations from the norm), we can detect subtle deviations that may indicate malicious activity.'
    answer_sources: 'Windows Event ID 4688, Sysmon Event ID 1 from Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network.'
    range: 'Last 90 days'
    queries:
      - 'Compare (new_process_event) against (30_day_historical_baseline) IF (parent_child_frequency < 1st_percentile) OR (command_line_entropy_deviation > 3_std_dev) THEN ALERT'
  - question: 'Has a machine learning model detected an anomalous process creation event associated with a critical ICS asset?'
    context: 'This question leverages unsupervised machine learning to find novel or complex attacks that do not fit pre-defined rules or statistical thresholds. An Isolation Forest model can identify outliers across multiple features simultaneously (e.g., process names, command-line attributes, signature status). Flagging events in the top 2% of anomaly scores provides a robust, adaptive detection mechanism for previously unseen malicious process behaviors.'
    answer_sources: 'Sysmon Event ID 1 from Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network.'
    range: 'Last 90 days'
    queries:
      - 'Score (new_process_event) with (Isolation_Forest_Model) IF (anomaly_score > 98th_percentile) THEN ALERT'
  - question: 'Is a critical ICS application initiating network connections using non-standard protocols or communicating with unauthorized external destinations?'
    context: 'This question addresses the risk of compromised ICS applications being used for command and control (C2) or data exfiltration. Critical industrial applications should have highly predictable network behavior, typically restricted to specific industrial protocols and internal destinations. An alert on connections using IT protocols (HTTP, RDP) to external IPs or queries for non-whitelisted domains is a strong indicator that the process''s functionality has been hijacked.'
    answer_sources: 'Zeek conn.log, Zeek dns.log, Windows Event ID 5156, Sysmon Event ID 3 from Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies.'
    range: 'Last 90 days'
    queries:
      - 'Search (Network_Connection_Events) JOIN (Process_Info) WHERE process_name IN (critical_ics_watchlist) AND ((destination_port IN (common_it_ports) AND destination_ip NOT IN (ot_ip_space)) OR (dns_query NOT IN (domain_whitelist)))'
  - question: 'Is a critical ICS application exhibiting statistically anomalous network behavior, such as connecting to new ports or transferring unusual amounts of data?'
    context: 'This question uses baselining to detect subtle changes in network patterns. An adversary might use an allowed protocol but connect to a new, unauthorized port, or exfiltrate data by sending larger-than-normal data volumes. Alerting when an application connects to a port for the first time or when its daily data volume exceeds the 95th percentile helps catch these less obvious indicators of compromise.'
    answer_sources: 'Zeek conn.log from Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies.'
    range: 'Last 90 days'
    queries:
      - 'Compare (new_network_connection) against (30_day_historical_baseline) IF (destination_port_frequency = 0) OR (daily_data_volume > 95th_percentile) THEN ALERT'
  - question: 'Has a machine learning model classified a network connection from a critical ICS application as an outlier?'
    context: 'This question employs a One-Class Support Vector Machine (OC-SVM) model, a machine learning technique ideal for anomaly detection when only ''normal'' data is available for training. The model learns the boundary of normal network behavior based on features like connection duration, bytes transferred, and protocol state. Any new connection that falls outside this learned boundary is flagged as an outlier, enabling the detection of sophisticated attacks with unusual network characteristics.'
    answer_sources: 'Zeek conn.log from Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies.'
    range: 'Last 90 days'
    queries:
      - 'Score (new_network_connection) with (OC_SVM_Model) IF (classification = "outlier") THEN ALERT'
  - question: 'Is a critical ICS process attempting to write to or delete protected system files or registry keys?'
    context: 'This question aims to detect attempts by a compromised ICS process to achieve persistence, escalate privileges, or tamper with the system. Critical applications should not be modifying system executables (e.g., in System32), autorun registry keys, or their own on-disk binaries. By enabling auditing (SACLs) on these sensitive resources and alerting on write/delete attempts from whitelisted ICS processes, defenders can catch blatant attempts to manipulate the operating environment.'
    answer_sources: 'Windows Event ID 4663, Windows Event ID 4657, Sysmon Event ID 11, Sysmon Event ID 12, Sysmon Event ID 13 from File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers.'
    range: 'Last 90 days'
    queries:
      - 'Search (File_or_Registry_Events) WHERE process_name IN (critical_ics_watchlist) AND event_type IN ("write", "delete") AND target_path IN (protected_resource_list)'
  - question: 'Is a critical ICS application writing to a statistically rare file or registry path?'
    context: 'This question uses statistical analysis to find malicious activity that does not target explicitly protected paths. An adversary might drop a payload or configuration file in an unusual but not explicitly forbidden location. By baselining all write locations for a critical process and alerting on writes to very infrequent paths (99th percentile rarity), we can detect suspicious file and registry interactions that deviate from established normal behavior.'
    answer_sources: 'Windows Event ID 4663, Windows Event ID 4657, Sysmon Event ID 11, Sysmon Event ID 12, Sysmon Event ID 13 from File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers.'
    range: 'Last 90 days'
    queries:
      - 'Compare (new_write_event) against (30_day_historical_baseline) IF (path_rarity_score > 99th_percentile) THEN ALERT'
  - question: 'Has a machine learning model detected a syntactically anomalous file or registry path being written by a critical ICS application?'
    context: 'This question uses a deep learning model to detect algorithmically generated or heavily obfuscated paths that would appear structurally different from normal, human-readable paths. A character-level autoencoder learns the typical patterns of file and registry paths. When a new path with an unusual structure is processed, it results in a high reconstruction error. This technique is effective at identifying malware that uses path generation algorithms for its components.'
    answer_sources: 'Windows Event ID 4663, Windows Event ID 4657, Sysmon Event ID 11, Sysmon Event ID 12, Sysmon Event ID 13 from File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers.'
    range: 'Last 90 days'
    queries:
      - 'Score (new_write_path) with (Path_Autoencoder_Model) IF (reconstruction_error > threshold) THEN ALERT'