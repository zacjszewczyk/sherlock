name: T0855: Unauthorized Command Message
id: f3b1b1b0-1a2b-4c3d-8e4f-5a6b7c8d9e0f
description: |
  This playbook helps investigate whether an adversary has attempted to impair process control by sending unauthorized command messages to industrial control system (ICS) devices. It focuses on detecting commands from unapproved sources, commands sent at unusual times, commands initiated by anomalous host processes, and commands containing parameters that violate safe operational limits. Evidence is primarily derived from network protocol logs (e.g., Zeek) and host-based process creation events, correlated to identify suspicious activity across the Process Control Network (PCN).
type: technique
related:
  - TA0106: Impair Process Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an ICS command originating from an IP address that is not on the approved allow-list of authorized command initiators?
    context: |
      This question is crucial for identifying unauthorized devices attempting to control critical infrastructure. By maintaining an explicit allow-list of authorized Engineering Workstations, HMIs, and control servers, any command from an unlisted source IP is a strong indicator of a potential intrusion or misconfiguration. This rule provides a first line of defense against unauthorized access.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, including network taps/sensors monitoring traffic to/from PLCs, RTUs, and field controllers at the Level 3.5 Industrial Demilitarized Zone (IDMZ), Level 3 Manufacturing Operations Management (MOM) Layer, and Level 2 Control System Layer.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each event in (modbus.log, dnp3.log, etc.):
            IF event.id.orig_h NOT IN 'Approved_ICS_Command_Initiators_List':
              GENERATE high_priority_alert
  - question: Has a new, previously unseen source IP address initiated an unusually high volume of ICS commands?
    context: |
      This question helps detect adversaries who may have compromised a new device or are using a novel source to launch a command flood. By baselining normal command counts and identifying new IPs, we can spot suspicious activity that might otherwise be lost in the noise. An alert is triggered if a new IP's activity exceeds the 99th percentile of established devices, indicating a significant deviation.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, including network taps/sensors monitoring traffic to/from PLCs, RTUs, and field controllers at the Level 3.5 Industrial Demilitarized Zone (IDMZ), Level 3 Manufacturing Operations Management (MOM) Layer, and Level 2 Control System Layer.
    range: last 30 days
    queries:
      - technology: Pseudocode
        query: |
          // First, build baseline of known IPs and command count percentile
          established_ips = GET unique(id.orig_h) from last 30 days
          threshold_99p = CALCULATE 99_percentile(daily_command_count) for established_ips
          
          // Then, check new events
          FOR each new_ip NOT IN established_ips:
            IF daily_command_count(new_ip) > threshold_99p:
              GENERATE medium_priority_alert
  - question: Does a machine learning model classify an ICS network event as 'unauthorized' with high confidence?
    context: |
      This question leverages supervised machine learning to identify complex patterns indicative of unauthorized activity that simple rules might miss. By training a model on features like protocol, service, command type, and traffic volume, the system can learn the subtle characteristics of legitimate versus malicious commands and flag events with a high probability of being unauthorized.
    answer_sources:
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, including network taps/sensors monitoring traffic to/from PLCs, RTUs, and field controllers at the Level 3.5 Industrial Demilitarized Zone (IDMZ), Level 3 Manufacturing Operations Management (MOM) Layer, and Level 2 Control System Layer.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each real_time_event:
            features = EXTRACT_FEATURES(event)
            prediction = CLASSIFICATION_MODEL.predict(features)
            confidence = CLASSIFICATION_MODEL.score(features)
            IF prediction == 'unauthorized' AND confidence > 0.90:
              GENERATE alert
  - question: Was an ICS command executed outside of its pre-defined, approved operational schedule or maintenance window?
    context: |
      This question aims to detect malicious activity disguised by legitimate commands but executed at unusual times, such as nights, weekends, or holidays. By defining approved time windows for specific operations, any command sent outside these periods is highly suspicious and could indicate an adversary's attempt to act when monitoring is reduced.
    answer_sources:
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from SCADA/HMI server segments, data historians, network taps, and industrial firewalls monitoring HMI, SCADA server, and PLC/RTU communications within the ICS network, including Level 1 Basic Control Layer and Level 0 Process Layer.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          approved_schedules = LOOKUP 'Approved_Schedules_Table'
          FOR each event in (modbus.log, dnp3.log, etc.):
            IF event.timestamp NOT IN approved_schedules[event.command_type]:
              GENERATE high_priority_alert
  - question: Has the frequency of a specific ICS command during a certain time slice significantly deviated from its historical baseline?
    context: |
      This question uses statistical analysis to find subtle temporal anomalies. Adversaries may try to blend in by using valid commands, but their timing might be abnormal. By baselining the hourly and daily count for each command and alerting when the count exceeds 3 standard deviations from the mean, we can detect unusual bursts of activity that could signal a coordinated attack or manipulation attempt.
    answer_sources:
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from SCADA/HMI server segments, data historians, network taps, and industrial firewalls monitoring HMI, SCADA server, and PLC/RTU communications within the ICS network, including Level 1 Basic Control Layer and Level 0 Process Layer.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Build baseline for each command/source pair and time slice
          baseline = CALCULATE mean, std_dev of command_counts over last 90 days
          
          // Check current activity
          FOR each current_time_slice:
            current_count = COUNT commands
            IF current_count > (baseline.mean + 3 * baseline.std_dev):
              GENERATE medium_priority_alert
  - question: Has a time-series anomaly detection model identified an ICS command's timing as a significant deviation from learned temporal patterns?
    context: |
      This question employs advanced time-series modeling to detect sophisticated temporal anomalies that statistical methods might miss. Models like LSTM or Prophet can learn complex seasonal and long-term patterns in command execution. An alert from such a model indicates that a command's timing is highly improbable based on historical data, suggesting potential manipulation.
    answer_sources:
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from SCADA/HMI server segments, data historians, network taps, and industrial firewalls monitoring HMI, SCADA server, and PLC/RTU communications within the ICS network, including Level 1 Basic Control Layer and Level 0 Process Layer.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new_command in real-time_stream:
            anomaly_score = TIMESERIES_MODEL.predict(new_command.timestamp)
            IF anomaly_score > threshold:
              GENERATE alert
  - question: Was a critical ICS application launched by a non-standard parent process, followed by outbound ICS network traffic?
    context: |
      This question is critical for detecting process injection or masquerading on key assets like HMIs and EWS. Legitimate ICS applications are typically launched by a predictable set of parent processes. If an application like WinCC or FactoryTalk is spawned by an unusual parent (e.g., PowerShell, cmd.exe) and is immediately followed by control system communication, it's a strong indicator of compromise and an attempt to send malicious commands.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and SCADA/Historian Servers within the control network.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each process_creation_event (ID 4688):
            child = event.NewProcessName
            parent = event.ParentProcessName
            IF child IN 'critical_ics_apps' AND parent NOT IN 'approved_parents_for_child':
              host_ip = event.host_ip
              event_time = event.timestamp
              // Correlate with network logs
              IF EXISTS outbound_ics_traffic from host_ip within 60s of event_time:
                GENERATE critical_alert
  - question: Has an extremely rare parent-child process pair involving a critical ICS application been observed?
    context: |
      This question helps uncover 'living-off-the-land' techniques where an adversary might use legitimate but rarely-used system processes to launch an attack. By identifying parent-child process relationships that fall into the bottom 1st percentile of historical frequency, we can flag highly unusual, and therefore suspicious, execution chains, especially when a command shell is involved.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and SCADA/Historian Servers within the control network.
    range: last 60 days
    queries:
      - technology: Pseudocode
        query: |
          // Build baseline of pair frequencies
          pair_frequencies = CALCULATE frequency of all parent-child pairs over 60 days
          
          // Check new events
          FOR each new_process_pair:
            IF new_process_pair.child IN 'critical_ics_apps' AND
               pair_frequencies[new_process_pair] < 1st_percentile:
              GENERATE alert
  - question: Does a graph-based anomaly detection model flag a process creation chain involving a critical ICS application as anomalous?
    context: |
      This question uses graph theory to model and detect deviations in the entire process execution lineage. Adversaries may create complex, multi-step process chains to obscure their actions. A graph-based model can learn the normal structure of these chains and detect anomalous paths, providing a powerful method for identifying sophisticated attacks that manipulate process creation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek modbus.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Zeek dnp3.log
      - Data from Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and SCADA/Historian Servers within the control network.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new_process_creation_event:
            anomaly_score = GRAPH_MODEL.score(event)
            IF event.child IN 'critical_ics_apps' AND anomaly_score > threshold:
              // Correlate with network traffic
              IF EXISTS outbound_ics_traffic from event.host:
                GENERATE high_priority_alert
  - question: Did an ICS command contain a value, parameter, or function code that violates the defined physical or logical safety specifications for the target device?
    context: |
      This is a direct and powerful question for detecting attempts to cause a physical impact. By cross-referencing every command's parameters (target device, function code, register, and value) against a 'process specification' lookup table of safe operational limits, we can immediately flag and alert on any command that attempts to push a system into an unsafe or invalid state. This is a crucial defense against process impairment.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, with a focus on traffic destined for critical final control elements (e.g., actuators, valves), safety instrumented systems (SIS), Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and Intelligent Electronic Devices (IEDs).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          process_spec = LOOKUP 'Process_Specification_Table'
          FOR each command_event:
            target_spec = process_spec[command_event.id.resp_h]
            IF command_event.func NOT IN target_spec.valid_functions OR
               command_event.value < target_spec.min_value OR
               command_event.value > target_spec.max_value:
              GENERATE critical_alert
  - question: Was a value written to a critical control system register that is a statistical outlier compared to its historical distribution?
    context: |
      This question helps detect subtle manipulation of process parameters that might not violate hard-coded limits but are statistically abnormal. By profiling the distribution of values written to each critical register, we can identify when a new value falls far outside the typical range (e.g., >3 standard deviations from the mean). This can indicate an adversary's attempt to slowly drift a process or an automated fuzzing attack.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, with a focus on traffic destined for critical final control elements (e.g., actuators, valves), safety instrumented systems (SIS), Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and Intelligent Electronic Devices (IEDs).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          // Build baseline for each register
          baseline = CALCULATE mean, std_dev of write_values over 90 days per register
          
          // Check new events
          FOR each write_command:
            register_baseline = baseline[write_command.address]
            IF write_command.value > (register_baseline.mean + 3 * register_baseline.std_dev):
              GENERATE alert
  - question: Has an unsupervised machine learning model detected that a command's multivariate parameters (function, address, value) are inconsistent with learned normal behavior?
    context: |
      This question uses an advanced ML approach to consider the relationship between all command parameters simultaneously. An Autoencoder model can learn the complex, non-linear correlations of normal operations. When a new command arrives, if the model cannot reconstruct it accurately (i.e., high reconstruction error), it suggests the combination of parameters is highly unusual and potentially malicious, even if each individual parameter seems valid.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek enip.log
      - Zeek s7comm.log
      - Data from Process Control Network (PCN) segments, with a focus on traffic destined for critical final control elements (e.g., actuators, valves), safety instrumented systems (SIS), Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and Intelligent Electronic Devices (IEDs).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new_command:
            reconstruction_error = AUTOENCODER_MODEL.evaluate(new_command)
            IF reconstruction_error > threshold:
              GENERATE alert