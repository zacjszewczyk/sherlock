name: T0878: Alarm Suppression
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: An adversary is attempting to inhibit response functions by suppressing alarms. This can be achieved by modifying critical alarm configuration files, sending malicious network commands to PLCs/RTUs to alter alarm states, creating a disconnect between process variable excursions and their corresponding alarm events, or by directly terminating or disabling critical alarm management services on hosts like HMIs, EWS, or SCADA servers.
type: technique
related:
  - TA0107: Inhibit Response Function
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has an unauthorized user or process modified a critical alarm configuration file?
    context: This question aims to detect direct tampering with alarm configuration files on key ICS assets like HMIs or SCADA servers. Unauthorized modifications, especially outside of maintenance windows, are a strong indicator of an attempt to blind operators by altering or disabling alarm definitions at the source.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4660
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Historian Servers
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: SEARCH (EventID:4663 AND (Accesses:"WriteData" OR Accesses:"DELETE")) AND (ObjectName IN critical_alarm_files) AND (SubjectUserName NOT IN authorized_users OR ProcessName NOT IN authorized_processes)
  - question: Is there a statistically unusual volume or pattern of modifications to critical alarm files?
    context: This question seeks to identify anomalous behavior that might not be caught by simple whitelist rules. A sudden spike in file modifications, even by an authorized process, or a change in how a process interacts with alarm files (indicated by command-line entropy), could signify a compromised process or a novel attack method.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Historian Servers
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: COMPARE hourly count of (EventID:4663 AND ObjectName IN critical_alarm_files) TO 99th_percentile_baseline. ALERT if exceeded. ANALYZE command-line entropy from EventID:4688 for related processes and ALERT on >2 standard deviation changes.
  - question: Is there a network-wide, coordinated pattern of alarm file modifications that deviates from historical norms?
    context: This question elevates the analysis from single hosts to the entire ICS environment. It aims to detect widespread, potentially slow and low campaigns that might be missed by host-centric rules. A time-series model can learn complex seasonal patterns, like maintenance windows, and flag coordinated activity that deviates from this learned 'normal'.
    answer_sources:
      - Windows Event ID 4663
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Historian Servers
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: APPLY time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to aggregate hourly counts of EventID:4663 for critical alarm files across all hosts. ALERT on sustained deviations from predicted normal range.
  - question: Has an unauthorized device sent a network command to write to a critical alarm register on a PLC/RTU?
    context: This question focuses on detecting unauthorized network-based manipulation of alarm states. By whitelisting which devices (e.g., specific HMIs) can write to specific alarm-related memory addresses on controllers, we can quickly identify illicit commands from unauthorized sources, indicating a potential network intrusion and attempt to suppress alarms at the controller level.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Zeek conn.log
      - OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control)
      - DMZ for remote access to OT
      - Safety Instrumented System (SIS) network zones
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: SEARCH (Zeek:modbus.log OR Zeek:s7comm.log) WHERE (function_code IN write_codes) AND (target_register IN critical_alarm_registers) AND (source_ip NOT IN authorized_ips_for_target)
  - question: Are there statistically unusual patterns in the frequency or targets of write commands to alarm-related systems?
    context: This question looks for behavioral anomalies in network write commands. A sudden increase in the frequency of writes from a particular source or a sudden drop in the variety of registers being written to (low entropy) could indicate a compromised device being used to repeatedly manipulate a specific alarm or a scanning activity to find vulnerable registers.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Zeek conn.log
      - OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control)
      - DMZ for remote access to OT
      - Safety Instrumented System (SIS) network zones
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: COMPARE hourly frequency of (source, dest, func_code) tuples to 99th_percentile_baseline. ALERT if exceeded. CALCULATE Shannon entropy of register_address per source_ip over 30min window. ALERT if entropy drops below 10th percentile.
  - question: Have any network write commands occurred that are statistically rare or abnormal compared to historical traffic?
    context: This question employs machine learning to find 'unknown unknowns' in network traffic. An unsupervised model like an Isolation Forest can learn the characteristics of normal write commands (source, destination, function, value, etc.) and flag any command that is a statistical outlier, even if it doesn't violate a specific, predefined rule.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Zeek conn.log
      - OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control)
      - DMZ for remote access to OT
      - Safety Instrumented System (SIS) network zones
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: APPLY unsupervised anomaly detection model (e.g., Isolation Forest) to feature vectors of new write commands. ALERT on commands with anomaly scores exceeding the learned threshold.
  - question: Has a critical process variable exceeded its alarm threshold without a corresponding alarm being logged?
    context: This question aims to detect a disconnect between the physical process state and the logged events, which is a classic sign of alarm suppression. By correlating real-time process data from the network with alarm logs from servers, we can identify situations where a dangerous condition exists but the expected alert is missing.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Windows Event Log (Application)
      - Custom Application Logs
      - Process Historian Servers
      - Alarm & Event Servers
      - SCADA Servers
      - OT Network segments monitoring Level 1 (Basic Control) process data
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: CORRELATE (Zeek network data showing process_variable > threshold for >30s) WITH (Windows Application Log from alarm_server). ALERT if expected alarm_log_signature is NOT found within 60s.
  - question: Is there an anomalous delay in alarm generation, or are process variables 'flat-lining' just below their alarm thresholds?
    context: This question looks for more subtle indicators of manipulation. An unusual delay between a process excursion and its alarm could indicate a struggling or tampered system. Separately, a process variable that stays unnaturally static just below its alarm point ('flat-lining') can be a sign that an attacker is manipulating the sensor readings to avoid tripping an alarm.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Windows Event Log (Application)
      - Custom Application Logs
      - Process Historian Servers
      - Alarm & Event Servers
      - SCADA Servers
      - OT Network segments monitoring Level 1 (Basic Control) process data
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: CALCULATE time_delta between (network threshold breach) and (log event). ALERT if delta > 3 standard deviations from baseline. APPLY SPC chart to process variable values to detect abnormal 'flat-lining' below alarm thresholds.
  - question: Based on historical data, should an alarm have been generated for the current process conditions, even though one wasn't?
    context: This question uses predictive analytics to identify missed alarms. A supervised model can learn the complex relationships between various process readings and the likelihood of a legitimate alarm. If the model predicts an alarm with high confidence but none is observed, it provides a strong signal that the alarm system has been compromised or has failed.
    answer_sources:
      - Zeek modbus.log
      - Zeek s7comm.log
      - Windows Event Log (Application)
      - Custom Application Logs
      - Process Historian Servers
      - Alarm & Event Servers
      - SCADA Servers
      - OT Network segments monitoring Level 1 (Basic Control) process data
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: APPLY supervised classification model (e.g., Random Forest) to real-time process data. IF model_probability > 0.95 AND no corresponding alarm log is found, GENERATE 'Predicted Alarm Missed' alert.
  - question: Has a critical alarm management service been stopped, disabled, or unexpectedly terminated?
    context: This question checks for the most direct method of disabling alarms on a host, which is stopping the software service responsible for them. Monitoring for specific event IDs related to service state changes (stopped, crashed, disabled) or explicit command-line actions ('taskkill', 'net stop') against a list of critical services provides a clear and high-fidelity alert for this activity.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Windows Event ID 7034
      - Windows Event ID 4697
      - Windows Event ID 4700
      - Windows Event ID 4701
      - Alarm & Event Servers
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Domain Controllers (for Group Policy changes affecting services)
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: SEARCH (EventID IN [7036, 7034, 4701] AND ServiceName IN critical_alarm_services) OR (EventID:4688 AND CommandLine contains ['taskkill', 'net stop'] targeting critical_alarm_services).
  - question: Is the downtime duration or stoppage frequency of a critical alarm service statistically abnormal?
    context: This question aims to detect anomalies in service behavior that might not be caught by simple 'service stopped' alerts, such as a service that stops and restarts frequently or one that remains down for an unusually long time. These could be signs of an unstable service under attack or a persistent adversary attempting to keep it offline.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 7034
      - Alarm & Event Servers
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Domain Controllers (for Group Policy changes affecting services)
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: COMPARE current service downtime OR hourly stop_event_frequency TO 99th_percentile_baseline for that service. ALERT if exceeded.
  - question: Has a critical alarm service entered an unexpected state or remained in a state for an anomalous duration?
    context: This question uses a more sophisticated modeling approach to understand the normal 'lifecycle' of a service. A Hidden Markov Model (HMM) can learn the normal sequence of states (e.g., running, stopped for maintenance, running again) and their typical durations. It can then flag deviations, such as a service stopping at an unusual time or for an unusual length of time, indicating a potential attack.
    answer_sources:
      - Windows Event ID 7036
      - Alarm & Event Servers
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - SCADA Servers
      - Domain Controllers (for Group Policy changes affecting services)
    range: Last 90 days
    queries:
      - tech: pseudocode
        query: APPLY HMM or other time-series model to service state transitions (EventID:7036). ALERT on anomalous state transitions or state durations that deviate from the learned pattern.