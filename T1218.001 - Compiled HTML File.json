
[
  {
    "Is the adversary evading defenses using compiled HTML files? (TA0005 - Defense Evasion)": {
      "Indicators": {
        "T1218.001 - Compiled HTML File": {
          "A Compiled HTML file (.chm) with a known malicious hash is observed on the network or accessed on an endpoint, or network traffic from an hh.exe child process contacts a known malicious IP address or domain.": {
            "Data": "Zeek files.log; Windows Event ID 4663; Zeek conn.log; Windows Event ID 5156",
            "Data Platform": "Network devices, Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Calculate MD5/SHA256 hashes of all `.chm` files from Zeek files.log and compare against a CTI feed of malicious file hashes. For network indicators, correlate child processes of hh.exe (from Windows Event ID 4688) with their network connections (Windows Event ID 5156; Zeek conn.log) and inner join the destination IPs/domains with a CTI feed of known C2 infrastructure. Alert on any matches."
          },
          "Execution of hh.exe with command-line arguments matching known malicious patterns used to execute embedded scripts or commands.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for process creations where the New Process Name is 'hh.exe'. Analyze the command line using regular expressions for patterns like `ms-its:`, `mk:@MSITStore:`, direct calls to scripting objects (e.g., `javascript:`, `vbscript:`), or command-line arguments containing obfuscated content. Use entropy measures on the command-line arguments to identify highly randomized or obfuscated commands. Maintain a list of known malicious `hh.exe` command patterns to flag deviations from benign help file usage."
          },
          "The HTML Help process (hh.exe) spawns an unexpected child process, such as a command shell (cmd.exe, powershell.exe), a scripting engine (wscript.exe, cscript.exe), or another living-off-the-land binary (LOLBAS).": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for process creation events. Identify all instances where the Parent Process Name is 'hh.exe'. Create a baseline of legitimate child processes for hh.exe (which should be rare or none). Alert on any deviation from this baseline, particularly the creation of command shells, scripting engines, or LOLBAS binaries (e.g., rundll32.exe, mshta.exe). Use correlation analysis to link these suspicious process chains to initial user actions like opening an email attachment."
          },
          "The execution of hh.exe is immediately followed by the creation of a new executable or script file in a temporary or user-writable location, which is then executed.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate `hh.exe` execution events (Windows Event ID 4688) with subsequent file creation events (Windows Event ID 4663) for executables (.exe, .dll, .scr) or scripts (.ps1, .vbs, .js) within a short time window (e.g., 1-5 minutes). Focus on files written to common temporary locations (%TEMP%, %APPDATA%, %PUBLIC%). Further correlate this sequence with a subsequent process creation event (Windows Event ID 4688) where the newly created file is executed. Use time series analysis to identify statistically significant clusters of these sequential events, indicating a payload drop and execution behavior."
          },
          "A Compiled HTML file (.chm) is executed from an unusual or high-risk directory, such as an email client's attachment cache, a web browser's download folder, or a temporary folder for unzipped archives.": {
            "Data": "Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for `hh.exe` executions. Analyze the full path of the `.chm` file specified in the command line. Establish a baseline of legitimate locations for `.chm` files (e.g., `C:\\Windows\\Help`). Flag executions from user-profile directories (`Downloads`, `AppData`), temporary internet folders, or other non-standard locations. Use descriptive statistics (frequency analysis) to identify rare and potentially suspicious execution paths which are strong indicators of user-delivered malware."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
