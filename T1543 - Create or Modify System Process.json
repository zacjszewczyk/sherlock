```json
[
  {
    "Is the adversary establishing or maintaining persistence by creating or modifying system processes? (TA0003 - Persistence)": {
      "Indicators": {
        "T1543 - Create or Modify System Process": {
          "A new or modified system service whose executable path, service name, or description matches known malicious indicators or IoCs from threat intelligence.": {
            "Data": "Windows Event ID 4697; Windows Event ID 7045; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event IDs 4697 (new service installed) and 7045 (service installed - older systems), and service modification events which might be logged as re-installs or via registry/file event monitoring. Extract service name, description, and executable path ('Service File Name' or 'ImagePath'). Compare these attributes against a continuously updated CTI feed of known malicious service names, executable paths (including file hashes if obtainable from Windows Event ID 4688 context or integrated EDR/file monitoring), and descriptions associated with malware or persistence tools. Alert on high-confidence matches."
          },
          "Creation of a system service using command-line parameters or naming conventions known to be associated with specific malware families, LOLBAS abuse for persistence, or persistence scripts.": {
            "Data": "Windows Event ID 4697; Windows Event ID 7045; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Analyze Windows Event IDs 4697, 7045 for service creation details, and Windows Event ID 4688 for the process that created the service (e.g., `sc.exe create ...`) or the service process itself. Look for service names exhibiting high entropy (random strings), slight misspellings of legitimate service names, or adherence to known malicious naming schemes. Inspect the service's 'Service File Name' (`ImagePath`) or command-line arguments (from Event ID 4688 if service command is explicit or for the service process startup parameters) for patterns such as PowerShell base64 encoded commands, use of `rundll32.exe` with suspicious DLLs/entry points, or invocation of `mshta.exe`, `cscript.exe`, `wscript.exe` with remote scripts or unusual local scripts. Maintain and use a library of such malicious patterns identified through regular expressions and string analysis. Descriptive statistics on name string properties (length, character distribution) can help flag outliers."
          },
          "Creation or modification of system services whose executable paths point to non-standard or suspicious locations (e.g., temporary directories, user profiles, network shares) or are unsigned/untrusted binaries not part of known good software installations.": {
            "Data": "Windows Event ID 4697; Windows Event ID 7045; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor service creation/modification events (Windows Event IDs 4697, 7045). Analyze the 'Service File Name' (`ImagePath`). Flag services with executables located in unusual directories (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public, Recycle Bin, C:\\Windows\\Temp, Downloads) or on network shares. Correlate with Windows Event ID 4688 data for the service executable to check its signature status (e.g., `Signed` field if available through enrichment); flag unsigned binaries or those signed by untrusted/unknown publishers, especially if newly created. Compare against a baseline of legitimate service executable locations and signer information using frequency analysis, whitelists, or outlier detection (e.g., box-plots for path segment frequencies)."
          },
          "A legitimate system service spawning an unusual child process, particularly one that initiates outbound network connections, executes with suspicious command-line arguments, or is an unexpected interpreter/shell, inconsistent with the parent service's known function.": {
            "Data": "Windows Event ID 4688; Zeek conn.log",
            "Data Platform": "Endpoints, Servers, Network devices",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4688 for processes spawned by known legitimate parent services (e.g., `services.exe`, `svchost.exe`, or whitelisted third-party services identified by ParentProcessName or ParentProcessID). Profile normal child processes (executable name, path, command line) for these services. Flag child processes that are unexpected (e.g., `cmd.exe`, `powershell.exe`, `rundll32.exe`, or binaries in temporary/user locations). Use correlation analysis: join Windows Event ID 4688 data with Zeek conn.log data based on host IP and timestamp to identify service-spawned child processes initiating new, unexpected external network connections. Analyze child process command-line arguments for suspicious patterns (e.g., downloading/executing scripts, reconnaissance commands, encoded payloads). Utilize entropy measures on command lines to spot obfuscation."
          },
          "Modification of an existing legitimate service's binary path (`ImagePath`), `ServiceDll`, failure command (`FailureCommand`), or other critical configuration parameters to execute a malicious payload or ensure repeated execution for persistence.": {
            "Data": "Windows Event ID 4697; Windows Event ID 4657; Windows Event ID 4663",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry modifications (Windows Event ID 4657, requires auditing) to service configuration keys (e.g., `HKLM\\SYSTEM\\CurrentControlSet\\Services\\<ServiceName>\\ImagePath`, `ServiceDll`, `FailureCommand`, `Parameters`). Monitor file write attempts (Windows Event ID 4663, requires auditing) to existing service executables. Flag changes to `ImagePath` pointing to a new/suspicious binary, modification of `ServiceDll` to an untrusted DLL, or addition/modification of `FailureCommand` to launch malicious tools upon service failure. Compare current service configurations against a trusted baseline using configuration management data or periodic snapshots. Use descriptive statistics on the frequency of such modifications across the environment to identify anomalous rates of change."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  },
  {
    "Is the adversary escalating privileges by creating or modifying system processes? (TA0004 - Privilege Escalation)": {
      "Indicators": {
        "T1543 - Create or Modify System Process": {
          "A new or modified system service is created where the service executable is a known privilege escalation tool, an exploit binary, or a LOLBAS commonly abused for privilege escalation, and the service is configured to run with SYSTEM/root privileges.": {
            "Data": "Windows Event ID 4697; Windows Event ID 7045; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor service creation/modification events (Windows Event IDs 4697, 7045) where the 'Service Account' is 'LocalSystem' or equivalent high privilege. Extract the service executable path and name ('Service File Name'). Compare the executable's hash (if obtainable via EDR capabilities or file monitoring integrated with Windows Event ID 4688 process creation event for the service binary) or path/name against a maintained list of known privilege escalation tools (e.g., binaries associated with JuicyPotato, PrintSpoofer, BadPotato) or LOLBAS binaries frequently used in privilege escalation chains (e.g., specific uses of `usermgr.exe`, `reg.exe` manipulating privileged keys executed as a service). Alert on matches where such tools are configured as services running with high privileges."
          },
          "Modification of a pre-existing, often weakly permissioned, legitimate service's configuration (e.g., ImagePath, ServiceDll, FailureCommand) to point to an adversary-controlled executable, using patterns associated with known privilege escalation techniques like unquoted service path exploitation or DLL hijacking via service loading.": {
            "Data": "Windows Event ID 4697; Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor registry changes (Windows Event ID 4657, requires auditing) to `ImagePath`, `ServiceDll`, or `FailureCommand` for existing services. Specifically look for: 1. Insertion of an executable into a directory that could be exploited due to an unquoted service path in `ImagePath`. 2. Modification of `ServiceDll` to point to a malicious DLL in a location from which the service might load DLLs insecurely. 3. Setting `FailureCommand` on a service that an adversary can reliably cause to fail. Correlate these modification patterns with the account making the change (from Windows Event ID 4657 or the parent process in Windows Event ID 4688 that invoked `reg.exe` or `sc.exe config`) to assess if it's a lower-privileged user exploiting a misconfiguration. Maintain patterns of known service-based privilege escalation techniques."
          },
          "A system service is created or modified to run with SYSTEM/root privileges by a user account or process that itself does not possess administrative rights, or by a standard user account not typically associated with service management activities.": {
            "Data": "Windows Event ID 4697; Windows Event ID 7045; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Correlate service creation/modification events (Windows Event IDs 4697, 7045) where the 'Service Account' for the service is 'LocalSystem' (or equivalent), with the initiating user account (SubjectUserName/SubjectLogonId in the event) or the parent process token information (obtained by correlating with the Windows Event ID 4688 event for `sc.exe` or other service utility). Flag instances where the creating/modifying entity is a standard user account, a service account with limited rights, or a process running at a low/medium integrity level. Baseline accounts/processes that legitimately manage services using frequency analysis. This indicates a potential exploit of a privilege escalation vulnerability allowing service manipulation."
          },
          "A newly created or modified service, configured to run with high privileges (SYSTEM/root), is observed spawning unexpected child processes, especially command shells, scripting engines, or tools facilitating further malicious actions like credential dumping or lateral movement.": {
            "Data": "Windows Event ID 4688; Windows Event ID 4697; Windows Event ID 7045",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "First, identify new or modified services running as SYSTEM/root using Windows Event IDs 4697 or 7045. Then, monitor Windows Event ID 4688 for child processes specifically spawned by these high-privilege services (ParentProcessName/ID matching the service). Profile expected child processes for legitimate high-privilege services. Flag the spawning of interactive shells (`cmd.exe`, `powershell.exe`), scripting interpreters (`cscript.exe`, `wscript.exe`, `python.exe`), or known malicious/dual-use tools (e.g., Mimikatz, PsExec), especially if these occur shortly after service creation/modification or restart. Analyze command lines of these child processes for suspicious arguments related to privilege escalation follow-on activity. Use time-series analysis or descriptive statistics to detect unusual bursts of such child process activity from a new or modified high-privilege service."
          },
          "An existing service's permissions are modified to allow a lower-privileged user or group to alter its configuration or control its state, followed by a modification of that service to execute with higher privileges or run adversary-controlled code.": {
            "Data": "Windows Event ID 4670; Windows Event ID 4697; Windows Event ID 4657; Windows Event ID 4688",
            "Data Platform": "Endpoints, Servers",
            "NAI": "Insert site-specific NAI here",
            "Action": "Monitor Windows Event ID 4670 (Permissions on an object were changed; requires appropriate SACL configuration on service objects in `HKLM\\SYSTEM\\CurrentControlSet\\Services`). Identify instances where standard users or groups are granted Modify, Write DAC, Write Owner, or GenericWrite permissions to a service's configuration. Correlate these permission changes (based on user, timestamp, and service name) with subsequent service modification events (Windows Event IDs 4697 for re-install/config change, 4657 for registry changes to ImagePath/FailureCommand, or 4688 for `sc.exe config` usage) by the newly permissioned user/group. Especially flag if the service is consequently configured to run as SYSTEM/root or its executable path is changed to an adversary-controlled binary. This sequence represents a common behavioral pattern for privilege escalation."
          }
        }
      },
      "version": "2.0",
      "last_updated": "2025-05-11"
    }
  }
]
```