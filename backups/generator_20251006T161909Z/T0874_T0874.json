[
  {
    "information_requirement": "Is an adversary executing unauthorized code on critical ICS components (e.g., EWS, HMI) by manipulating legitimate industrial processes? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') loads a DLL that meets one or more of the following criteria: its signature is invalid or it is unsigned; its file path originates from a user-writable or temporary directory (e.g., C:\\ProgramData, C:\\Users\\*\\AppData\\); its hash is statistically rare across the environment; or its name is designed to impersonate a legitimate system DLL (e.g., 'svch0st.dll').",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)",
            "action": [
              "For each Windows Event ID 7 where the parent 'Image' is a critical ICS process, generate an alert if the loaded module ('ImageLoaded') matches any of these conditions: a) 'Signed' is 'false' or 'SignatureStatus' is 'invalid', b) the 'ImageLoaded' path is not in a pre-defined allowlist of DLL paths for that parent process, c) the 'ImageLoaded' path matches a blocklist of suspicious directories like 'C:\\Windows\\Temp', or d) the 'ImageLoadedHash' matches a known-bad hash from a threat intelligence feed.",
              "For all Windows Event ID 7 events from critical ICS processes, calculate the 30-day prevalence of each 'ImageLoadedHash' across all ICS hosts. Alert if a newly loaded module's hash falls below the 1st percentile threshold. Separately, calculate the Shannon entropy of the 'ImageLoaded' file path string; alert if the entropy value exceeds 3 standard deviations from the mean entropy calculated for that process's legitimate DLLs. Additionally, for known DLLs, track the file size; alert if a loaded DLL's size deviates by more than 10% from its historical average.",
              "Train an unsupervised anomaly detection model (e.g., Isolation Forest) on historical Windows Event ID 7 data for critical ICS processes. Use a feature set including one-hot encoded 'Signed' and 'SignatureStatus' values, numerical features like path entropy and directory depth, and a hash-based feature representing file rarity. The model will create a baseline of normal module loading behavior. Generate an alert when a new module load event is flagged as a high-scoring anomaly, indicating a significant deviation from the established normal profile."
            ]
          },
          {
            "description": "A critical ICS process, potentially after being hooked, initiates a network connection to a destination IP, port, or DNS domain that has not been previously observed for that specific process or communicates using a protocol inconsistent with its designed function (e.g., an HMI process using FTP). This indicates a potential command and control (C2) channel or data exfiltration.",
            "data_sources": [
              "Windows Event ID 3 (Sysmon - Network Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers, Network Gateways",
            "action": [
              "Correlate Windows Event ID 3 and Zeek conn.log data to identify network connections from critical ICS processes. Alert if the 'DestinationIp' or 'DestinationPort' is not on an established allowlist for that process. Concurrently, monitor Zeek dns.log for queries from ICS assets and match the 'query' field against a threat intelligence feed of known malicious domains. Also, alert if the 'Protocol' (e.g., TCP, UDP, ICMP) is not on an established allowlist for that specific process-destination pair.",
              "For each critical ICS process, build a 90-day baseline of unique 'DestinationIp' and 'DestinationPort' pairs from Zeek conn.log and Windows Event ID 3. Alert when a new connection is made to an IP or port that falls into the bottom 1st percentile of frequency for that process. Furthermore, establish a baseline for data transfer volume (e.g., 'resp_bytes' in Zeek) for each process. Alert if a new connection's data volume exceeds the 99th percentile of the historical baseline for that process.",
              "Deploy an autoencoder model trained on historical, correlated network data (Sysmon Event ID 3, Zeek conn.log) for each critical ICS process. Use features like 'DestinationIp', 'DestinationPort', 'Protocol', byte counts ('orig_bytes', 'resp_bytes'), and connection duration. The model learns a compressed representation of normal network transaction vectors. Alert when a new transaction's reconstruction error is high, signifying a deviation from learned patterns, such as an unusual combination of port, protocol, and data size."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on ICS hosts to gain deeper control over critical industrial processes? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A process running with an 'IntegrityLevel' of 'High' or 'System' (e.g., a critical SCADA service) loads a DLL that is unsigned, has an invalid signature, originates from a user-writable directory (e.g., 'C:\\Temp'), or possesses a hash that is statistically unique (prevalence < 0.5%) within the environment.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN",
            "action": [
              "Implement and enforce a strict allowlist of 'ImageLoadedHash' and 'ImageLoaded' full paths for all privileged ICS processes. Generate a critical-severity alert for any module load event (Sysmon Event ID 7) where the parent process 'IntegrityLevel' is 'High' or 'System' and the loaded module does not exactly match an entry on the allowlist.",
              "For module loads into privileged ICS processes, calculate the prevalence of the 'ImageLoadedHash' across all endpoints over 30 days and alert if it is below the 0.5th percentile. Additionally, examine the 'ImageLoaded' file's compile time; alert if the compile time is newer than the parent process's compile time or the last system patch date. Calculate the Shannon entropy of the 'ImageLoaded' path and alert if it exceeds 3 standard deviations from the mean for that process.",
              "Train a One-Class SVM model using features derived from Sysmon Event ID 7 for privileged ICS processes. Use a feature set including the module's signature status, path entropy, hash prevalence score, and whether the path is in a standard system directory. The model creates a tight hypersphere around normal data points; flag any new module load that falls outside this boundary as a high-confidence anomaly indicative of privilege escalation."
            ]
          },
          {
            "description": "A critical ICS process spawns an unexpected child process, such as a command shell ('cmd.exe', 'powershell.exe'), or spawns a legitimate process with unusual or suspicious command-line arguments not seen in its operational baseline (e.g., 'powershell.exe -enc ...'). This is often the result of successful code injection via hooking.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)",
              "Windows Event ID 4688 (Security - A process has been created)",
              "Windows Event ID 1 (Sysmon - Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers",
            "action": [
              "Create a rule that triggers when a Sysmon Event ID 7 (Image Loaded) for a critical ICS process matches suspicious criteria (e.g., unsigned, rare hash) and is followed within 60 seconds by a Sysmon Event ID 1 (Process Create) from the same 'ProcessGuid'. Generate a high-severity alert if the child process is on a blocklist ('cmd.exe', 'powershell.exe', 'bitsadmin.exe') or if its command line contains suspicious strings like '-enc', 'download', or 'IEX'.",
              "For each critical ICS parent process, build a 90-day baseline of all child processes and their associated command-line arguments from Sysmon Event ID 1 data. For each new process creation, alert if the child process name has never been seen before for that parent. If the child process is known, tokenize the command line and calculate the Jaccard distance against the set of historical token sets for that parent-child pair. Alert if the distance exceeds 0.8, indicating a novel command structure.",
              "Construct a process creation graph using Sysmon Event ID 1 data, where nodes are process hashes and edges represent parent-child relationships. Enrich nodes with features like process name and integrity level, and enrich edges with features derived from command-line arguments (e.g., TF-IDF scores). Use a graph-based anomaly detection algorithm (e.g., GCN-based autoencoder) to identify structurally rare events, such as a historian service process creating a 'powershell.exe' node, or edges with anomalous command-line features."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]