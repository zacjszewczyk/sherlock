[
  {
    "information_requirement": "Is the adversary using boot or logon initialization scripts for persistence?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "Boot or logon initialization scripts initiating outbound network connections to known malicious C2 domains or IP addresses.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify processes launched by boot/logon scripts using Windows Event ID 4688 (correlating parent process with script interpreters like powershell.exe, cmd.exe, wscript.exe executing a script). Correlate these Process IDs with network connection events (Windows Event ID 5156 for host-based firewall logs or Zeek conn.log for network traffic). Inner join destination IP addresses and domains (from Zeek dns.log or extracted from Zeek conn.log metadata) with a high-confidence, daily-updated threat intelligence feed of known malicious C2 infrastructure. Alert on any matches."
          },
          {
            "description": "Boot or logon scripts containing suspicious command patterns, obfuscation techniques, or launching tools commonly associated with persistence mechanisms (e.g., scheduled task creation, Run key modification).",
            "data_sources": [
              "Windows Event ID 4688 (Command Line)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze command line arguments (from Windows Event ID 4688) of script interpreters (powershell.exe, cmd.exe, wscript.exe, cscript.exe) identified as part of boot/logon processes. Search for patterns like Base64 encoded commands (common in PowerShell), invocation of `schtasks.exe` to create persistent tasks, `reg.exe add HKLM\\...\\Run` or `HKCU\\...\\Run` for registry-based persistence, or execution of unsigned executables dropped by the script. Use regular expressions to detect these patterns and common obfuscation methods. Maintain a library of such suspicious patterns and use correlation analysis to link them to script modification events."
          },
          {
            "description": "Modification or creation of boot/logon initialization scripts by unauthorized accounts, atypical processes, or outside of established change management windows.",
            "data_sources": [
              "Windows Event ID 4663 (File System Auditing for write/create)",
              "Windows Event ID 4656 (Handle Request for write access)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event IDs 4663 (Object Access: An attempt was made to access an object - for successful writes/creations) and 4656 (A handle to an object was requested - for write attempts) on known boot/logon script file paths and directories (e.g., User Startup folders, Group Policy script paths: `C:\\Windows\\System32\\GroupPolicy\\User\\Scripts\\Logon\\`, `C:\\Windows\\System32\\GroupPolicy\\Machine\\Scripts\\Startup\\`). Profile typical accounts (e.g., system administrators, deployment services) and processes (e.g., `gpupdate.exe`, `msiexec.exe`) that modify these scripts. Use descriptive statistics and frequency analysis to flag modifications/creations by unusual accounts or processes. Correlate event timestamps with change management records or use time series analysis of script creation/modification events to detect activity outside normal maintenance windows."
          },
          {
            "description": "Boot or logon scripts launching unexpected child processes or processes with anomalous characteristics such as being unsigned, running from temporary locations, or having unusual command lines not matching established patterns.",
            "data_sources": [
              "Windows Event ID 4688 (Process Creation)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze Windows Event ID 4688 where the parent process is a script interpreter (e.g., powershell.exe, cmd.exe, wscript.exe, cscript.exe) associated with a boot/logon script. Establish a baseline of legitimate child processes, their paths, and common command-line arguments typically launched by authorized scripts. Flag new, rare, or unsigned child processes, processes executing from unexpected locations (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Windows\\Temp\\`), or those with command lines deviating significantly from the baseline using string similarity or anomaly detection techniques on command line features. Use entropy measures on command line arguments to detect unusually complex or obfuscated commands. Correlate multiple anomalous child processes originating from the same script."
          },
          {
            "description": "Boot or logon initialization scripts initiating network connections exhibiting anomalous patterns such as connections to unusual ports, rare external geolocations, or high-entropy/DGA-like domain names not matching known malicious selectors.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156 (Filtering Platform Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify processes launched by boot/logon scripts (via Windows Event ID 4688 parent-child correlation). Correlate these Process IDs with network connection events (Windows Event ID 5156 on hosts, Zeek conn.log on network). For these connections, analyze destination IP geolocations, ports, and domain names (from Zeek dns.log or decrypted TLS SNIs). Flag connections to rare/newly observed geolocations for the organization, non-standard ports for common protocols, or domains with high character entropy indicative of DGAs. Use time series analysis of connection counts and data volumes per script/destination to detect unusual spikes or periodic beaconing patterns. Apply Inter-Quartile Range (IQR) or box-plot analysis to identify outliers in connection frequency or data volume per script."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using boot or logon initialization scripts for privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege-Escalation",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "Boot or logon scripts containing specific commands, referencing known exploits, or invoking tools commonly used for privilege escalation (e.g., specific PowerShell `PowerUp` commands, arguments for `RunAs` targeting service accounts).",
            "data_sources": [
              "Windows Event ID 4688 (Command Line)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze command line arguments (from Windows Event ID 4688) of processes launched by boot/logon scripts, particularly machine startup scripts or those observed running under system/administrator contexts. Search for keywords, specific command sequences (e.g., `powershell.exe -enc <base64_payload_for_privesc>`, `Invoke-Mimikatz`), or tool names/arguments (e.g., `PsExec.exe -s`, specific LOLBAS usage patterns for UAC bypass or token manipulation like `fodhelper.exe` with specific registry keys) indicative of privilege escalation. Maintain and regularly update a list of such selector strings and known malicious script arguments. Correlate findings with script modification events and observed privilege level changes."
          },
          {
            "description": "Boot or logon scripts exhibiting known patterns of privilege escalation, such as attempting to exploit service misconfigurations, hijack DLLs loaded by privileged processes, or modify system integrity levels through specific API call sequences if observable.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4673 (Privileged Service Called)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for sequences of operations characteristic of known privilege escalation patterns involving scripts. Examples include: 1. A script (Windows Event ID 4688) modifying file permissions (Windows Event ID 4663) on a system binary or script it owns then executing it. 2. A script writing a DLL to a path (Windows Event ID 4663) known to be vulnerable to DLL hijacking by a higher-privilege process. 3. A script altering service configuration registry keys (Windows Event ID 4657 using `reg.exe` or PowerShell cmdlets seen in Event ID 4688) to point to a malicious executable. 4. A script calling sensitive privileged services (Windows Event ID 4673). Use correlation analysis to link these related events occurring within a short time window (e.g., 1-5 minutes) on the same host."
          },
          {
            "description": "A boot or logon script, or a process launched by it, executing with an integrity level or user context unexpectedly higher than the user logging in or the script's typical execution context.",
            "data_sources": [
              "Windows Event ID 4624 (Logon)",
              "Windows Event ID 4688 (Process Creation",
              "including TokenElevationType",
              "IntegrityLevel)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate user logon events (Windows Event ID 4624, note user SID and logon type) with subsequent script executions and their child processes (Windows Event ID 4688). Analyze the `TokenElevationType` (e.g., Type 1 for full admin token, Type 2 for UAC elevated, Type 3 for limited) and `IntegrityLevel` (e.g., System, High, Medium, Low) of script processes and their children. Establish baselines for typical integrity levels for different users/scripts. Flag instances where scripts associated with standard user logons execute at High or System integrity, or where machine startup scripts spawn processes with lower-than-expected integrity that then attempt to re-escalate. Use descriptive statistics (e.g., mode, frequency) on integrity level distributions per script type/user context and alert on deviations."
          },
          {
            "description": "Unauthorized or anomalous modifications to boot/logon scripts that are configured to run with administrative or system privileges, or to the system configurations (registry keys, GPOs) that invoke them.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event IDs 4663 (File/Folder access) and 4656 (Handle request) for write modifications to script files in paths executed with high privileges (e.g., machine startup scripts in Group Policy `SYSVOL` locations, scripts run by Task Scheduler as SYSTEM). Monitor Windows Event ID 4657 for changes to registry keys controlling these high-privilege script executions (e.g., `HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run` keys, `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit` or `Shell`). Profile authorized accounts/processes making such changes (e.g., `SYSTEM`, Domain Admins, `gpupdate.exe`). Flag modifications by any other accounts, or changes occurring outside scheduled maintenance windows, using frequency analysis and thresholding on rare modifiers. Use linear regression to identify trending changes not aligned with known good activity."
          },
          {
            "description": "Processes launched by high-privilege boot/logon scripts attempting to access or modify critical system resources (e.g., LSASS memory, SAM database, security descriptors of key objects) or load untrusted/unsigned modules without legitimate purpose.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656 (Handle Request)",
              "Windows Event ID 4663 (Object Access)",
              "Windows Event ID 4616 (System Time Change - less common for this TTP but possible for evasion)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify processes launched by scripts known to run with high privileges (via Windows Event ID 4688 parent-child correlation and context). Monitor these child processes for attempts to access critical system processes like `lsass.exe` (filter Windows Event ID 4656 for ObjectName containing `lsass.exe` and relevant AccessMasks like `PROCESS_ALL_ACCESS`, `PROCESS_VM_READ`), or for modifications (Windows Event ID 4663) to sensitive files like the SAM database or critical system ACLs. Analyze command lines (from Event ID 4688) for loading of unsigned or non-standard DLLs (e.g., via `rundll32.exe` or PowerShell's `Add-Type`). Establish a baseline of legitimate resource access by high-privilege scripts and their children; flag deviations using anomaly detection based on resource access patterns (e.g., low-frequency access combinations). Monitor for system time changes (Windows Event ID 4616) immediately before or after script execution as an anti-forensic measure."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]