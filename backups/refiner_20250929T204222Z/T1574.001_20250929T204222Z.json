[
  {
    "information_requirement": "Is the adversary establishing persistence via DLL hijacking or sideloading?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A known malicious DLL, identified by its file hash or name, is created on disk in a location loaded by a process configured for persistence.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file creation/write events (Windows Event ID 4663) for files with a .dll extension. Compute the hash of newly created/written DLLs and match against a cyber threat intelligence (CTI) feed of known malicious file hashes. Also, match DLL filenames against a list of known malicious persistence DLLs. Correlate with process execution (Windows Event ID 4688) to identify which persistent process is loading the malicious library."
          },
          {
            "description": "A DLL with a name corresponding to a legitimate but commonly hijacked library is placed in a non-standard directory of a known vulnerable application that is also configured to run at startup.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a list of known vulnerable applications, the specific DLL names they are susceptible to hijacking (e.g., version.dll, dwrite.dll), and their persistence mechanisms (e.g., Run keys, Services). Monitor file creation events (Windows Event ID 4663) for these specific DLL names appearing in the corresponding application directories but outside the expected System32 path. Correlate these file writes with known persistence locations to identify high-confidence hijacking attempts."
          },
          {
            "description": "A legitimate process loads a DLL from a non-standard path (e.g., user profile, temp directory) immediately after the DLL file was created or modified on disk.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate file read events on DLLs (Windows Event ID 4663 with Accesses: ReadData) with preceding file write/create events (Windows Event ID 4663 with Accesses: WriteData) on the same file path. Calculate the time delta between write and read events. Flag instances where a legitimate process reads/loads a DLL from a non-standard location (e.g., %TEMP%, %APPDATA%, %PUBLIC%) within a short time window (e.g., < 1 minute) of its creation. Use time series analysis to identify unusual spikes in this behavior across the enterprise."
          },
          {
            "description": "A legitimate process configured for persistence makes network connections to a remote share (SMB/WebDAV) to load a remote DLL.",
            "data_sources": [
              "Zeek smb_files.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek smb_files.log for DLL files being read from remote shares. Correlate the client IP from network logs with endpoint process creation logs (Windows Event ID 4688) to identify the process loading the remote DLL. If the process is a known persistence mechanism (e.g., a service, scheduled task), this indicates a high-risk remote DLL hijacking for persistence. Use descriptive statistics to find rare instances of processes loading DLLs over the network."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by abusing DLL loading?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A DLL known to be part of a privilege escalation toolset (identified by hash) is written to a user-writable directory that is in the DLL search path of an elevated process.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor DLL file creation/write events (Windows Event ID 4663) in user-writable directories (e.g., C:\\ProgramData\\, %APPDATA%, %TEMP%). Calculate the hash of any created DLL and compare it against a CTI feed of hashes associated with known privilege escalation exploits or tools (e.g., Potato-family tools, PrintSpoofer variants). Alert immediately on any match in a location known to be in a privileged process's search path."
          },
          {
            "description": "A DLL is placed in a path known to be exploitable for privilege escalation against a specific high-privilege system service or process (e.g., `wlbsctrl.dll` for the 'IKEEXT' service).",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a curated list of known privilege escalation vectors involving DLL hijacking, including the target process/service, the hijackable DLL name, and the vulnerable path. Monitor file creation events (Windows Event ID 4663) for these specific DLLs being written to these specific vulnerable paths. Alert immediately on a match, as this indicates a specific, known exploit pattern for privilege escalation."
          },
          {
            "description": "A process running with a high integrity level (High/System) loads a DLL from a directory with low-integrity permissions, such as a standard user's profile directory or a world-writable path.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Filter process creation events (Windows Event ID 4688) for processes with Token Elevation Type 'Type 2 (Full)' or running as 'NT AUTHORITY\\SYSTEM'. Correlate with file read events for DLLs (Windows Event ID 4663). For each DLL loaded, check the permissions of its containing directory. Flag any instance where a high-integrity process loads a DLL from a path that is writable by non-administrative users (e.g., 'BUILTIN\\Users', 'Everyone'). Use frequency analysis to baseline normal DLL load locations for privileged processes and identify rare deviations from the baseline."
          },
          {
            "description": "A high-integrity process spawns an anomalous child process (e.g., cmd.exe) or makes a suspicious network connection immediately after loading a DLL from a non-standard, user-writable directory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "First, identify high-integrity processes loading DLLs from user-writable paths. Correlate these events (by Process GUID from Windows Event ID 4688) with subsequent child process creation and network connections. Alert if the privileged process spawns an unexpected child (e.g., a command shell, script interpreter) or initiates a network connection (Zeek conn.log) to an external IP. Use correlation analysis to link the suspicious DLL load to the follow-on action within a short time window (e.g., < 30 seconds)."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by abusing DLLs?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A legitimate process (e.g., `rundll32.exe`, `svchost.exe`) loads a DLL whose hash matches a known defense evasion tool or credential theft utility.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor all DLL file creation/write events (Windows Event ID 4663) and DLL load events (by correlating process creation in Windows Event ID 4688 with file reads). Calculate the hash of all newly written or loaded DLLs and compare against a CTI database of malicious DLLs, specifically those associated with defense evasion, proxying, or credential dumping (e.g., Mimikatz, Cobalt Strike beacons). Prioritize alerts where the parent process is a trusted system binary."
          },
          {
            "description": "A legitimate, signed process loads a DLL that is unsigned or signed by an untrusted publisher, especially when the DLL is located in a non-standard path.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "For process creation events (Windows Event ID 4688), check the signature of the primary executable. For trusted, signed processes (e.g., Microsoft binaries), correlate with DLL load events (file reads from Windows Event ID 4663). Programmatically check the signature status of each loaded DLL. Flag instances where a signed, trusted process loads an unsigned DLL or a DLL signed by a new or untrusted publisher, particularly if the DLL path is outside of C:\\Windows\\System32 or the application's legitimate directory. Use frequency analysis to identify rare publisher names."
          },
          {
            "description": "A legitimate process, after loading a DLL from a non-standard path, initiates suspicious network connections or spawns anomalous child processes inconsistent with its normal function.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "First, identify instances of legitimate processes loading DLLs from non-standard paths (using Windows Event ID 4663 file reads). Then, correlate those process instances (by Process GUID/ID from Windows Event ID 4688) with subsequent activity. Monitor for: 1) Network connections (Zeek conn.log) to unusual ports, low-reputation IPs, or C2-like beacons. 2) Creation of child processes (Windows Event ID 4688) like `cmd.exe`, `powershell.exe`, or `wscript.exe`. Establish a baseline of normal child processes and network behavior for common parent processes (e.g., svchost.exe, explorer.exe) and use linear regression or entropy measures on destination ports/IPs to flag behaviors that deviate significantly from the established baseline."
          },
          {
            "description": "A DLL matching the name of a legitimate system or security product DLL (e.g., `ntdll.dll`, `dbghelp.dll`, `symaveng.dll`) is loaded from a non-standard directory, indicating search order hijacking to bypass defenses.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a list of critical system and security product DLL names. Monitor all DLL load events by correlating process creation (Windows Event ID 4688) with DLL file reads (Windows Event ID 4663). For any loaded DLL whose name is on the critical list, verify its path. Alert on any instance where the DLL is loaded from a location other than its standard, protected directory (e.g., C:\\Windows\\System32, security product's installation folder). Use descriptive statistics to find rare process/path combinations for these critical DLLs."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]