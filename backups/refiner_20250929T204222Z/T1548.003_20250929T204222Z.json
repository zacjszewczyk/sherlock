[
  {
    "information_requirement": "Has the adversary escalated privileges using sudo or sudo caching?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "Execution of `sudo` with commands whose path or hash matches known malicious tools specifically designed for or frequently used in `sudo`-based privilege escalation.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd execve events with euid=0",
              "macOS OpenBSM exec events with elevated privileges)",
              "File system monitoring logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor audit logs for `sudo` executions. Extract the full command path and arguments. Compare command paths or cryptographic hashes of executed binaries (if available from logs or supplementary endpoint tools) against a curated threat intelligence feed of known malicious tools or binaries associated with `sudo`-related exploits (e.g., specific CVE PoCs). Alert on any matches."
          },
          {
            "description": "Use of `sudo` with specific command-line arguments or environment variable manipulations (e.g., `LD_PRELOAD`, `PYTHONPATH` abuse with `sudo`, specific options of tools like `find` or `awk` in `sudo` commands) known to enable privilege escalation.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd execve events",
              "macOS OpenBSM exec events)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze arguments of commands executed via `sudo`. Search for known privilege escalation patterns such as `sudo LD_PRELOAD=/path/to/evil.so /usr/bin/program`, `sudo find . -exec /path/to/shell \\; -quit`, or `sudo awk 'BEGIN {system(\"/bin/sh\")}'`. Maintain and update a list of such command patterns using regular expressions. Correlate with `sudo -l` output if logged, to check for abusable NOPASSWD entries."
          },
          {
            "description": "Anomalous `sudo` command execution by users not typically authorized for `sudo`, or execution of highly privileged or unusual commands by authorized `sudo` users, deviating from established individual or role-based baselines.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd logs with euid=0 and auid!=0",
              "macOS OpenBSM exec events with elevated privileges)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish baselines of normal `sudo` usage per user/group (typical commands, frequency, timing). Monitor audit logs (e.g., Linux `ausearch -k priv_esc_sudo` for `euid=0` events by non-root users). Flag executions by unexpected user accounts. For authorized users, use statistical methods (e.g., command frequency analysis, entropy of commands per user, Inter-Quartile Range (IQR) for command rarity) to detect execution of unusual commands or a sudden spike in `sudo` activity deviating significantly from their profile or role. Use correlation analysis with RUID/EUID discrepancies."
          },
          {
            "description": "Repeated `sudo` executions by the same user within the `sudo` password timeout window, especially from non-interactive sessions or contexts, suggesting abuse of cached credentials.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd logs",
              "macOS OpenBSM logs",
              "auth logs)",
              "File system monitoring logs for /var/db/sudo/"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor audit logs for sequences of `sudo` commands by the same user. Identify `sudo` executions that likely leverage cached credentials (i.e., occur within `timestamp_timeout` of a previous password-authenticated `sudo` and without a new password prompt, if discernible). Use time series analysis to detect unusually high frequencies of such cached `sudo` executions. Prioritize alerts for such patterns originating from scripts, cron jobs, or reverse shells (non-interactive parent processes). Monitor for direct manipulation of `/var/db/sudo/[username]` timestamp files."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading detection using sudo or sudo caching?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "Direct modification of critical `sudo` configuration files (`/etc/sudoers`, files in `/etc/sudoers.d/`) to include known evasion-aiding directives like `!audit`, `!syslog`, or specific `logfile=` re-routing to `/dev/null`.",
            "data_sources": [
              "File Integrity Monitoring (FIM) logs",
              "Audit logs (e.g.",
              "Linux auditd for file writes)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Utilize FIM or auditd rules (e.g., `auditctl -w /etc/sudoers -p wa -k sudoers_mod`, `auditctl -w /etc/sudoers.d/ -p wa -k sudoers_d_mod`) to detect modifications to `sudoers` files. Scan content changes for exact strings like `Defaults !audit`, `Defaults !syslog`, `Defaults !secure_path_check`, or `Defaults logfile=/dev/null`. Alert immediately on such modifications, especially if not part of authorized changes."
          },
          {
            "description": "Addition of `NOPASSWD` directives or `Defaults !tty_tickets` to `/etc/sudoers` or files in `/etc/sudoers.d/`, potentially followed by actions like `killall Terminal` to apply changes.",
            "data_sources": [
              "File Integrity Monitoring (FIM) logs",
              "Audit logs (e.g.",
              "Linux auditd for file writes and process execution)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor FIM or auditd logs for modifications to `sudoers` files. Specifically parse changes for the addition of `NOPASSWD:` rules for users/groups or the `Defaults !tty_tickets` directive. Correlate these file modification events with subsequent process execution events (e.g., `killall Terminal` on macOS, or `pkill -HUP sudo`) within a short time window (e.g., 1-5 minutes) that could be used to force the `sudoers` changes to take effect."
          },
          {
            "description": "`Sudo` execution of commands commonly used for defense evasion, such as disabling security tools, clearing logs, or manipulating audit configurations, especially if anomalous for the user or system context.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd execve events",
              "macOS OpenBSM exec events)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor commands executed via `sudo`. Maintain a list of commands/scripts associated with defense evasion (e.g., `auditctl -e 0`, `systemctl stop auditd`, `echo '' > /var/log/secure`, `history -c`, `set +o history`). Baseline normal administrative `sudo` commands. Flag `sudo` executions of these evasion-focused commands, particularly if executed by unusual users or at atypical times. Use frequency analysis and descriptive statistics to identify deviations and correlate with other suspicious activities to prioritize alerts."
          },
          {
            "description": "Execution of `sudo` commands from unexpected or non-standard parent processes (e.g., web server daemon, user application) or with arguments suggesting obfuscation or attempts to run silently.",
            "data_sources": [
              "Audit logs (e.g.",
              "Linux auditd execve with parent process info",
              "macOS OpenBSM exec events)"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze `sudo` executions, focusing on the parent process name and path. Establish a baseline of legitimate parent processes that spawn `sudo` (e.g., `bash`, `sshd`, `cron`). Alert on `sudo` commands initiated by anomalous parent processes (e.g., `apache2`, `nginx`, `firefox`, or custom malware processes). Investigate `sudo` commands with heavily obfuscated arguments (e.g., multiple layers of base64, hex encoding) or those using redirection to `/dev/null` for both stdout and stderr (`>/dev/null 2>&1`) when not typical for the command. Apply entropy measures to command arguments and linear regression to detect trends in obfuscation complexity over time."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]