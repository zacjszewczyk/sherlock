[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "Detection of known malicious dynamic libraries (dylibs) by name/hash being added to Mach-O binary load commands, or use of specific command-line arguments associated with malicious LC_LOAD_DYLIB modification tools.",
            "data_sources": [
              "macOS File System Event Logs",
              "macOS Process Execution Logs",
              "macOS File Integrity Monitoring Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor macOS process execution logs for command-line arguments to tools like `optool`, `install_name_tool`, or `yololib` that specify known malicious dylib paths/names, or include flags for signature removal (e.g., targeting `LC_CODE_SIGNATURE`). Maintain a list of known malicious dylib hashes and names; scan file systems (via File Integrity Monitoring) for their presence when linked via LC_LOAD_DYLIB. Alert on any matches to these selectors."
          },
          {
            "description": "Observed usage patterns of Mach-O modification tools (e.g., `optool`, `install_name_tool`, `yololib`) consistent with LC_LOAD_DYLIB addition, such as adding a dylib from a temporary or user-writable path, followed by removal of the target binary's code signature.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS File System Event Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor macOS process execution logs for sequences involving Mach-O modification tools: 1. Execution of `optool`, `install_name_tool`, or `yololib` targeting a system or application binary. 2. Specific command arguments indicating LC_LOAD_DYLIB addition (e.g., `install_name_tool -add_dylib ...`, `optool install -payload ... -type dylib`). 3. The specified dylib path originating from a non-standard or suspicious location (e.g., `/tmp/`, `/Users/Shared/`, user's home directory). 4. Optional subsequent command to remove or invalidate the code signature (e.g., `optool uninstall -p LC_CODE_SIGNATURE ...`, `codesign --remove-signature ...`). Correlate these process events occurring in a short time window (e.g., 1-5 minutes) targeting the same binary. Use descriptive statistics on tool usage frequency and specific argument patterns to spot deviations."
          },
          {
            "description": "Modification of a Mach-O binary's headers or checksum, or invalidation/removal of its digital signature, not associated with legitimate patching, followed by its execution, indicating unauthorized tampering for persistence.",
            "data_sources": [
              "macOS File System Event Logs",
              "macOS Process Execution Logs",
              "macOS File Integrity Monitoring Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Implement file integrity monitoring for critical system and application Mach-O binaries. Detect changes to file hashes, modification timestamps, or digital signature status (e.g., signature invalidation, removal of LC_CODE_SIGNATURE segment). Correlate these file modification events with subsequent process execution events of the same binary. Use time series analysis to compare modification events against known patching schedules and developer signing practices; flag modifications outside these windows or by unauthorized signers. Alert if a binary modified in such a way is executed."
          },
          {
            "description": "A legitimate macOS application or system process unexpectedly loading a dynamic library (dylib) from a non-standard or user-writable path, or loading a dylib not typically associated with its normal operation.",
            "data_sources": [
              "macOS Process Module Load Logs",
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor macOS process module loading events (e.g., from EndpointSecurity Framework `ES_EVENT_TYPE_NOTIFY_LOADER_OPEN` or equivalent). Establish baselines of legitimate dylibs loaded by common applications and system processes, including their typical paths (e.g., `/usr/lib/`, `/System/Library/Frameworks/`). Flag processes loading dylibs from unusual locations (e.g., `/tmp/`, `/Users/Shared/`, `~/Library/Application Support/`, hidden directories within user space). Use frequency analysis (count of loads per dylib path per process) and entropy measures on loaded dylib paths for a given process to detect statistical anomalies or newly observed dylib loads."
          },
          {
            "description": "Network connections initiated by legitimate system or application processes that have loaded suspicious dynamic libraries (identified by path, name, or prior modification of the host binary), especially to unusual external destinations or exhibiting C2-like behavior.",
            "data_sources": [
              "Zeek conn.log",
              "macOS Process Module Load Logs",
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate Zeek conn.log entries with host-based macOS process execution and module load logs. Identify network connections made by processes that have: (a) loaded a dylib from a non-standard/suspicious path, (b) loaded a known malicious dylib, or (c) are binaries that were recently modified or had their signature invalidated (indicative of LC_LOAD_DYLIB addition). Analyze destination IPs and ports against threat intelligence feeds. Use correlation analysis to link suspicious network traffic patterns (e.g., regular beaconing, large data transfers to unknown hosts, use of non-standard ports) to the dylib loading event and originating process. Apply descriptive statistics and time series analysis to network traffic volume/frequency from processes with suspicious dylibs to detect outliers."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using LC_LOAD_DYLIB injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege-Escalation",
    "indicators": [
      {
        "technique_id": "T1546.006",
        "name": "LC_LOAD_DYLIB Addition",
        "evidence": [
          {
            "description": "Known malicious dylib names/hashes or specific exploitation tool signatures used in conjunction with modification attempts on setuid/setgid Mach-O binaries.",
            "data_sources": [
              "macOS File System Event Logs",
              "macOS Process Execution Logs",
              "macOS File Integrity Monitoring Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor command-line arguments of tools like `optool`, `install_name_tool`, or `yololib` for known malicious dylib paths/names when the target binary is a setuid/setgid executable (identified by file permissions). Maintain and check against a list of dylib hashes known to be used in privilege escalation payloads. Alert if such selectors are found in operations targeting these privileged binaries. Correlate with any attempts to remove or bypass code signatures on these binaries."
          },
          {
            "description": "A characteristic sequence of actions involving: 1. A lower-privileged user/process modifying a setuid/setgid Mach-O binary to add an LC_LOAD_DYLIB command pointing to a user-controlled dylib. 2. Optional removal of the target binary's code signature. 3. Subsequent execution of the modified setuid/setgid binary by any user.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS File System Event Logs",
              "macOS Audit Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for modifications to setuid/setgid Mach-O binaries (identified by file permissions and usage of tools like `optool`/`install_name_tool`). Use macOS audit logs or process metadata to verify if the modifying process is running as a non-root user. Check if the added dylib path specified in the LC_LOAD_DYLIB command is user-writable (e.g., in `/tmp/`, user's home directory). Correlate this modification event with subsequent execution of the targeted setuid/setgid binary. A confirmed sequence of: [non-root user context] -> [modification of SUID binary to load dylib from user-writable path] -> [execution of said SUID binary] is a high-confidence pattern for privilege escalation."
          },
          {
            "description": "Execution of a setuid/setgid Mach-O binary that has recently had its LC_LOAD_DYLIB commands altered, its content hash changed, or its code signature invalidated/removed, particularly if the modification was performed by a non-root user context.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS File Integrity Monitoring Logs",
              "macOS File System Event Logs",
              "macOS Audit Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Implement strict file integrity monitoring for all setuid/setgid Mach-O binaries. Alert on any unauthorized modifications, including content hash changes, detected LC_LOAD_DYLIB additions (via header parsing if feasible post-modification), or changes in code signature status (invalidation, removal). Correlate these file modification events with subsequent execution of the same binary. Use macOS audit logs or process user context information to determine if the modification was performed by an unprivileged user. Prioritize alerts where a setuid/setgid binary, modified by a non-root account, is executed by any user, as this is a strong indicator of privilege escalation. Calculate the time delta between modification and execution; short deltas (<5 minutes) increase suspicion."
          },
          {
            "description": "A process running with elevated privileges (e.g., as root, or spawned from a setuid/setgid binary execution) loading a dynamic library (dylib) from an unexpected, non-standard system path, particularly user-writable locations like /tmp/ or user home directories.",
            "data_sources": [
              "macOS Process Module Load Logs",
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor module loading events for all processes. Identify processes running with root privileges or other elevated contexts (e.g., effective UID 0). Filter for these privileged processes loading dylibs from atypical locations not part of standard system library paths (e.g., `/tmp/`, `/Users/Shared/`, `~/Library/`, any user home directory, or paths identified via `DYLD_INSERT_LIBRARIES` environment variable). Establish a baseline of dylibs loaded by known privileged system processes and alert on deviations, especially new dylibs from user-writable paths. Use frequency analysis and descriptive statistics (e.g., flagging dylib loads with a Z-score > 3 from the mean for that process type) to identify rare dylib load events by privileged processes."
          },
          {
            "description": "Anomalous process behavior or unexpected child processes (e.g., shells, network utilities) spawned by a setuid/setgid binary immediately after it loads a dynamic library from a suspicious path, indicative of malicious payload execution with elevated privileges.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS Process Module Load Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "When a setuid/setgid binary loads a dylib from a non-standard or user-writable path (identified via previous behavioral detection), closely monitor its subsequent actions and any child processes. Look for spawning of unexpected processes (e.g., `/bin/sh`, `nc`, `curl`, Python/Perl interpreters), creation of new files in sensitive system locations, modification of system configuration, or establishment of network connections (Zeek conn.log) to unusual external IPs or internal systems not typically accessed by the parent. Use process ancestry analysis to link these downstream behaviors back to the initial privileged process and its suspicious dylib load. Compare observed process chain behavior to a rigorously defined baseline of normal behavior for that setuid/setgid binary using correlation analysis."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]