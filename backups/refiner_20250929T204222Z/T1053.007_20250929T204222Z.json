[
  {
    "information_requirement": "Is the adversary executing malicious code using container orchestration jobs?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "Execution of a container orchestration job whose associated container image, command, or subsequent network connections match known malicious indicators (e.g., specific image hash, C2 domains/IPs).",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek conn.log for outbound connections from container IP ranges (identifiable via node CNI configuration or prior pod IP mapping) to known C2 domains/IPs sourced from a regularly updated threat intelligence feed. On worker nodes, inspect command lines and parent processes in Windows Event ID 4688 for processes spawned by containers, looking for hashes of known malicious scripts/tools or execution directly from suspicious job names. Correlate findings with Kubernetes audit logs (if available) for job specifications containing known malicious image names/hashes or suspicious commands. Alert on direct matches to high-confidence selectors."
          },
          {
            "description": "Execution of container orchestration jobs using common reconnaissance, command-and-control (C2), or cryptomining tool names/patterns in their commands or observed process executions within the container.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "On worker nodes, monitor Windows Event ID 4688 for processes launched by containers (identified by parent process being container runtime/shim). Look for execution of known reconnaissance commands (`hostname`, `ip addr`, `netstat -an`), cryptocurrency mining process names (e.g., `xmrig`, `kdevtmpfsi`, `kinsing`), or command-line patterns associated with reverse shells or C2 frameworks (e.g., `nc -e /bin/sh`, `socat TCP-LISTEN`, PowerShell Base64 encoded commands). If Kubernetes audit logs are available, correlate with jobs specifying images from untrusted registries or those containing these tool patterns in their entrypoint/command. Use regular expressions for command patterns and maintain lists of known tool names/artifacts."
          },
          {
            "description": "Anomalous network activity or process behavior on worker nodes immediately following the inferred execution of a new or modified container orchestration job, such as connections to unusual external destinations or unexpected resource consumption.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish baselines for network traffic (destination IPs/ports, protocols, data volume) and process activity (CPU/memory usage, process names, parent-child relationships) for typical container workloads on worker nodes. Monitor Zeek conn.log and Windows Event ID 4688. When a new Kubernetes job is suspected (inferred by new pod IPs appearing or specific process launches post-deployment), scrutinize subsequent activity from the associated pod IPs/node processes. Use time series analysis to detect sudden spikes in network traffic or resource usage (CPU, memory). Apply Inter-Quartile Range (IQR) or percentile analysis to identify connections to rare external IPs or execution of infrequent processes. Correlate high-entropy destination port scanning with job execution times."
          },
          {
            "description": "Container orchestration jobs executing processes that perform unexpected data access or modification within the container, or attempt to interact with other pods/services in a manner inconsistent with their defined role or observed baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "On worker nodes, monitor Windows Event ID 4688 for processes spawned by container jobs. Analyze command lines and process behavior for unexpected file access (e.g., reading sensitive configuration files like /etc/kubernetes/kubeconfig, writing to unexpected binary locations), or modification of running application binaries/scripts. Monitor Zeek conn.log for internal east-west traffic from the job's pod IP to other pods/services that deviates from the application's communication baseline or defined Kubernetes Network Policies. Use descriptive statistics on file access patterns (e.g., count of unique paths accessed) and network flow data (e.g., number of distinct services contacted) to flag anomalies associated with job execution. Compare current activity to historical rolling baselines using statistical process control charts."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using container orchestration jobs?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "Recurring execution of container orchestration jobs that consistently connect to known malicious C2 infrastructure or are named with identifiers matching known malicious campaigns or threat actors.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek conn.log for periodic connections from container IP ranges to IP addresses or domains present in CTI feeds for known C2 servers. Correlate these recurring connections with Kubernetes CronJob schedules (if Kubernetes audit logs are available) or infer recurring job execution from the precise timing of the connections (e.g., connections every 5 minutes on the dot). Alert on jobs consistently communicating with known malicious entities. Maintain and query a list of suspicious job/CronJob names (e.g., `kube-controller`, `system-update`) associated with known threat actor campaigns."
          },
          {
            "description": "Container orchestration jobs (CronJobs) scheduled with unusually high frequency or using specific parameters often abused for persistence, such as jobs that repeatedly execute known backdoor tools or C2 agent commands.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "If Kubernetes audit logs are available, analyze CronJob configurations for suspicious schedules (e.g., `*/1 * * * *` for every minute). Correlate these schedules with recurring process creation events (Windows Event ID 4688) on worker nodes (e.g., `curl | bash` patterns, execution of specific ELF binaries) or network beacons (Zeek conn.log) from associated pod IPs. Look for patterns of jobs repeatedly executing known backdoor tools (e.g., specific web shells, reverse shell commands) or downloading/running payloads from the same external source. Use frequency analysis of observed job execution patterns even without direct K8s log access."
          },
          {
            "description": "Persistent, recurring network communications or process executions on worker nodes at regular intervals, originating from container IP addresses, not corresponding to known legitimate scheduled tasks or benign application behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek conn.log (source/destination IP, port, protocol, byte counts, JA3 hash) and Windows Event ID 4688 (process hash, command line, parent process) from container processes/IPs on worker nodes over extended periods. Use time series analysis (e.g., Fourier transforms, autocorrelation functions) to detect activity occurring with a fixed periodicity. Establish baselines for legitimate scheduled tasks and their expected network/process behaviors. Flag recurring patterns that deviate significantly in terms of target, command, or data volume, or lack a corresponding legitimate job configuration. Use correlation analysis to link specific recurring network flows to recurring process executions to build a stronger case for malicious persistence."
          },
          {
            "description": "Container orchestration jobs configured to ensure a malicious container or pod is always running, indicated by repeated pod restarts or deployments following unexpected termination, coupled with suspicious activity from those pods.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "While direct Kubernetes event log analysis is preferred for pod lifecycle events, infer potential malicious persistence jobs by observing recurring patterns of new pod IP activity (Zeek conn.log) or specific process initiations (Windows Event ID 4688) for the same type of workload shortly after previous instances cease communication or processes terminate. Correlate high rates of inferred pod churn for a specific deployment (if this metadata is available alongside network/host logs) with jobs designed to 'ensure N replicas'. Monitor these recurring pods for suspicious outbound connections or internal activity. Use descriptive statistics on inferred pod/process lifetimes and restart frequencies for specific job types to spot anomalies."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using container orchestration jobs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.007",
        "name": "Container Orchestration Job",
        "evidence": [
          {
            "description": "Execution of container orchestration jobs configured with high-privilege settings (e.g., `privileged: true`, `hostPID: true`) that subsequently connect to known malicious IPs or execute known malicious binaries/scripts associated with privilege escalation.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "If Kubernetes audit logs are available, identify jobs created with high-privilege settings such as `privileged: true`, `hostPID: true`, `hostNetwork: true`, `hostIPC: true`, or sensitive hostPath mounts. Correlate these job executions with subsequent network connections (Zeek conn.log) from their pod IPs to known malicious C2 IPs/domains or with process executions (Windows Event ID 4688) of known malware hashes or privilege escalation tools (e.g., linPEAS, Mimikatz equivalents for Linux/Windows if applicable) on the worker node. Alert on privileged jobs exhibiting such malicious outbound activity or post-exploitation tool execution."
          },
          {
            "description": "Container orchestration jobs executing specific commands or using tools known for container breakout, host system compromise, or leveraging overly permissive configurations to access sensitive host resources.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 on worker nodes for processes launched by container jobs. Filter for command-line patterns indicative of attempts to: access the underlying host's Docker socket (`/var/run/docker.sock`), use tools like `kubectl` from within a pod to illegitimately manage the cluster, mount or access sensitive host directories (e.g., `/proc` for process snooping, `/etc/shadow`, `/root/.ssh`), or execute known container escape exploits/tools (e.g., using `nsenter` to break out). Correlate these with jobs running as root or with privileged flags (inferred if direct K8s logs unavailable). Maintain a list of such patterns and tools for regular expression matching and behavioral rule creation."
          },
          {
            "description": "Anomalous access from a container orchestration job's pod to sensitive host resources (e.g., host filesystem outside expected mounts, kernel interfaces, other processes outside its namespace) or privileged network services not declared or expected for its function.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "On worker nodes, analyze Windows Event ID 4688 for processes spawned by container jobs that attempt to access sensitive host files (e.g., `/etc/shadow`, SSH keys, cloud provider credentials on the node like `~/.aws/credentials`), list host processes using `ps aux` on host PID namespace, or interact with kernel modules. Monitor Zeek conn.log for network connections from job pod IPs to privileged node ports (e.g., kubelet API 10250, etcd 2379) or sensitive internal services like domain controllers (LDAP/Kerberos ports 389, 88), internal credential management systems, or SSH/RDP to administrative hosts, where such access is not part of a defined, legitimate workflow. Use frequency analysis or thresholding against established baselines of pod-to-host and pod-to-sensitive-service interactions, flagging low-frequency, high-impact events."
          },
          {
            "description": "A container orchestration job leading to the creation of new user accounts on the host, modification of host system permissions, or deployment of additional privileged pods/jobs within the Kubernetes cluster by leveraging compromised credentials or permissions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 on worker nodes for commands like `useradd`, `groupadd`, `chmod 777 /`, `chown root ...` executed by processes within a container job, targeting host users/files (especially if host PID/filesystem is mounted). Observe network traffic (Zeek conn.log) from a job's pod that interacts with the Kubernetes API server (if not expected for this job type) in a way that could create new privileged resources (e.g., new service accounts with cluster-admin rights, privileged pods, cluster role bindings). Correlate such API interactions (if visible in network traffic or inferred from K8s audit logs) with the source job. Use regression analysis to see if certain job executions precede an increase in privileged operations on the host or cluster, indicating successful privilege escalation and abuse."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]