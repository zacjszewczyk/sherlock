[
  {
    "information_requirement": "Is the adversary maintaining persistence by abusing the COR_PROFILER environment variable?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "A COR_PROFILER registry key (e.g., HKLM\\...\\COR_PROFILER or HKCU\\Environment\\COR_PROFILER) is modified to point to a DLL whose file hash matches a known malicious profiler, or whose CLSID is associated with known malware.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Developer Workstations",
            "action": [
              "Symbolic: Search for registry modification events (Windows Event ID 4657, Sysmon Event ID 13) where the TargetObject ends with 'COR_PROFILER' or 'COR_PROFILER_PATH'. Cross-reference the specified DLL's file hash or the CLSID value against a threat intelligence feed of known malicious profilers. Generate a high-severity alert on any match.",
              "Statistical: Establish a baseline of legitimate profiler DLLs and their paths used in the environment. Calculate the frequency of each profiler DLL being set in the registry. Flag any DLL that is statistically rare (e.g., appears on fewer than 0.1% of endpoints) or is located in an unusual path (e.g., C:\\Users\\Public\\, C:\\Temp\\) for investigation.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from registry modification events, including the parent process name (e.g., reg.exe, powershell.exe), user context, target key path, and characteristics of the DLL path (e.g., path depth, presence of user-writable directories). Use the model to predict and score the likelihood of a COR_PROFILER registry modification being malicious."
            ]
          },
          {
            "description": "A .NET process is created with command-line arguments or an environment block that sets `COR_ENABLE_PROFILING=1` and `COR_PROFILER`, and the associated profiler DLL is not on an established allowlist of known legitimate profilers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic: Create a detection rule to trigger on process creation events (Windows Event ID 4688, Sysmon Event ID 1) where the command line or process environment block contains both 'COR_ENABLE_PROFILING=1' and 'COR_PROFILER'. Maintain an allowlist of legitimate application installers and profilers; alert on any process that is not on this list.",
              "Statistical: For all processes launched with profiling enabled, calculate the entropy of the command line. A high entropy value may indicate obfuscated or randomized commands. Also, profile parent-child process relationships. A rare parent process (e.g., winword.exe) spawning a .NET process with a profiler is anomalous and should be flagged.",
              "Machine Learning: Use an unsupervised learning algorithm, like an autoencoder, trained on legitimate process creation events (Sysmon Event ID 1) with their full command lines. An event involving COR_PROFILER that results in a high reconstruction error would indicate a significant deviation from normal behavior, suggesting an unauthorized use case."
            ]
          },
          {
            "description": "A .NET process launched with a profiler initiates network connections exhibiting a periodic, low-volume 'heartbeat' pattern to a single external IP address, or communicates with a domain having a low reputation score or young registration date.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints",
            "action": [
              "Symbolic: Correlate process creation events with profiling enabled (Sysmon Event ID 1) with subsequent network connections (Zeek conn.log, Sysmon Event ID 3). Check if the destination IP or domain (from Zeek dns.log) is present on a known C2 threat intelligence list. Alert on any match.",
              "Statistical: For network connections from profiled processes, group flows by source/destination IP pair and calculate the standard deviation of the inter-arrival time between connections. A low standard deviation indicates periodicity (beaconing). Also, flag connections with data volumes in the lower 5th percentile, which may indicate C2 communication.",
              "Machine Learning: Apply a time-series anomaly detection model to the network traffic byte counts and connection frequency of profiled processes. A significant deviation between the predicted and actual traffic could indicate the start of C2 activity. Use a clustering algorithm (e.g., DBSCAN) on connection features (duration, bytes sent) to isolate clusters of C2-like behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges from a low-integrity to a high-integrity context by abusing COR_PROFILER?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "A COR_PROFILER registry key is set to a DLL in a user-writable location (e.g., %APPDATA%), and a .NET process subsequently executes with a high integrity level (e.g., High, System), indicating a potential UAC bypass.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers",
            "action": [
              "Symbolic: Create a rule that triggers when a COR_PROFILER registry key (HKLM or HKCU) is set to a DLL path that is not in a protected directory (e.g., not in C:\\Windows\\ or C:\\Program Files\\) and a subsequent .NET process launch is observed running as SYSTEM or with High integrity. This sequence is a strong indicator of a setup for privilege escalation.",
              "Statistical: Analyze the source process responsible for modifying the COR_PROFILER registry keys. Calculate the rarity of the source process (e.g., 'powershell.exe' is common, 'unusual.exe' is rare). Assign a higher risk score to modifications made by statistically infrequent processes, especially when targeting a profiler for a high-privilege application.",
              "Machine Learning: Train a sequence-based model (e.g., RNN) on event logs to learn normal sequences of user activity. The model can flag a sequence as anomalous if a low-privilege user sets a user-scope profiler and this is immediately followed by the execution of a high-privilege .NET application by the same user, a pattern indicative of UAC bypass."
            ]
          },
          {
            "description": "A process running with Medium integrity modifies the HKCU\\Environment\\COR_PROFILER key, and within a short time window (<60 seconds), a .NET process auto-elevates and launches with High integrity, inheriting the malicious profiler.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations with UAC enabled",
            "action": [
              "Symbolic: Create a correlation rule that looks for this specific event chain within a 60-second window for the same LogonId: 1) Sysmon Event ID 13 (RegistrySet) where TargetObject is 'HKCU\\Environment\\COR_PROFILER' and the initiating process has an IntegrityLevel of 'Medium'. 2) Sysmon Event ID 1 (ProcessCreate) for a .NET process where IntegrityLevel is 'High'.",
              "Statistical: Profile the time delta between HKCU registry modifications and high-integrity process launches for each user. Establish a baseline distribution of these time deltas. A cluster of events with a very short time delta (e.g., < 1 second), which is typical for automated exploits, would fall into a low percentile (e.g., < 5th percentile) and should be investigated.",
              "Machine Learning: Use a graph-based analysis tool to model processes, users, and registry keys as nodes and their interactions as edges. An attack path for privilege escalation would appear as a specific subgraph: (User Node) -> (Launches Medium-Integrity Process) -> (Modifies HKCU Registry Key) -> (Launches High-Integrity Process). Use graph algorithms to search for this malicious subgraph pattern."
            ]
          },
          {
            "description": "A profiled .NET process, running with elevated privileges, spawns a child process (e.g., cmd.exe, powershell.exe) or performs a privileged API call (e.g., LsaAddAccountRights) that is inconsistent with its parent application's baseline behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Active Directory Domain Controllers, Member Servers, Privileged Access Workstations",
            "action": [
              "Symbolic: For any process launched with COR_PROFILER enabled, monitor for subsequent child processes or specific events. Alert if the profiled process spawns cmd.exe/powershell.exe, or generates a Windows Event ID 4720 (User Account Created), 4732 (Member Added to Security-Enabled Local Group), or 4704 (User Right Assigned).",
              "Statistical: For each parent .NET application (e.g., mmc.exe), create a baseline of its normal child processes. Use frequency analysis to identify rare or never-before-seen child processes spawned by a profiled instance of that application. For example, if mmc.exe suddenly spawns 'net.exe', this is a high-risk statistical anomaly.",
              "Machine Learning: Train a classifier on process lineage data (parent, child, command line, user context). The model learns which child processes are legitimate for a given parent. When a profiled .NET process spawns a child, the model can classify the parent-child relationship as 'benign' or 'suspicious'. A 'suspicious' classification for a high-privilege process is a strong signal of post-escalation activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary impairing or disabling security controls by using COR_PROFILER to hijack .NET-based security tools?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.012",
        "name": "COR_PROFILER",
        "evidence": [
          {
            "description": "The COR_PROFILER environment variable is set for a process associated with a known security tool (e.g., EDR agent, AV service), and the specified profiler DLL is not signed by the security vendor or Microsoft.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints with EDR/AV installed, Security Management Servers",
            "action": [
              "Symbolic: Maintain an allowlist of process names for installed security tools (e.g., 'MsMpEng.exe', 'SentinelAgent.exe'). Create a rule that triggers on a process creation event (Sysmon Event ID 1) where the process name is on the list AND profiling is enabled. Check the signature of the profiler DLL. Alert if the signature is invalid or does not belong to the security vendor or Microsoft.",
              "Statistical: Establish a baseline of all DLLs loaded by each security tool process. Calculate the load frequency for each DLL across the environment. If a profiler DLL is loaded by a security tool and that DLL is statistically rare (e.g., loaded on only one machine), it is highly suspicious and warrants immediate investigation.",
              "Machine Learning: Use a file-based classifier trained on features of benign and malicious DLLs (e.g., entropy, import/export tables, string analysis, signature status). When a profiler DLL is loaded into a security process, feed the DLL's features to the model to get a maliciousness score. A high score indicates a likely defense evasion attempt."
            ]
          },
          {
            "description": "A process modifies the COR_PROFILER registry keys, and this is followed by a measurable drop in security telemetry volume from the affected endpoint, or a failure to block a subsequent, known-bad test event.",
            "data_sources": [
              "Windows Event ID 4657",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Log Aggregator, Network Egress Points, All Endpoints",
            "action": [
              "Symbolic: After detecting a COR_PROFILER registry modification (Windows Event ID 4657), trigger a synthetic test on the endpoint, such as an attempt to download an EICAR test file. If the security tool fails to block and alert on this known-bad event, it is a high-confidence indicator that the defense has been successfully impaired.",
              "Statistical: Monitor the log volume (events per minute) ingested by the SIEM from each endpoint. For any host where a COR_PROFILER modification has occurred, compare the log volume in the 24 hours before the event to the 24 hours after. A statistically significant drop (e.g., > 50% decrease) suggests the security tool has been tampered with.",
              "Machine Learning: Use a time-series anomaly detection model on the log ingestion rate for each host. The model learns the normal daily and weekly cycles of log production. An alert is generated when the actual log volume deviates significantly from the model's forecast immediately following a suspicious COR_PROFILER-related event on the host."
            ]
          },
          {
            "description": "A security tool process, confirmed to be profiled via COR_PROFILER, terminates unexpectedly (crashes) or its child/thread processes associated with active scanning are terminated.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4689",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 10 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints with EDR/AV installed",
            "action": [
              "Symbolic: Create a correlation rule: IF a security tool process is created with profiling enabled (Sysmon Event ID 1), THEN monitor for its termination event (Windows Event ID 4689) with a non-zero exit code, OR a ProcessAccess event (Sysmon Event ID 10) targeting it with Terminate privileges from an unauthorized process.",
              "Statistical: Calculate the mean time to failure (MTTF) or average uptime for security tool processes across the environment. If a profiled security process terminates in a time frame that is a statistical outlier (e.g., in the bottom 5th percentile of uptimes), flag it for review as a potential crash induced by a malicious profiler.",
              "Machine Learning: Develop a state transition model for security processes (e.g., 'running', 'scanning', 'terminated'). Train the model on normal state transitions. An anomalous transition, such as from 'running' directly to 'terminated' immediately after a profiling event, without going through a normal shutdown state, would be flagged as a high-risk event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]