[
  {
    "information_requirement": "Is an adversary abusing cloud administration services to execute commands on virtual machines? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1651",
        "name": "Cloud Administration Command",
        "evidence": [
          {
            "description": "A command executed by a cloud VM agent (e.g., ssmagent.exe, waagent.exe) contains arguments matching known malicious indicators, suspicious patterns like encoding, or has statistically anomalous characteristics.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud virtual machine instances",
            "action": [
              "For processes created by known VM agent executables (e.g., ssmagent.exe, waagent.exe, google_guest_agent.exe), scan associated command-line arguments (Windows Event ID 4688) against a threat intelligence feed of malicious domains, IPs, file hashes, and known malicious command strings. Generate an alert on any match.",
              "For the same set of processes, calculate the Shannon entropy of the command-line argument string. Establish a baseline of entropy scores for legitimate administrative commands. Flag any command whose entropy score exceeds the 95th percentile of the baseline, indicating likely obfuscation or encoding (e.g., base64).",
              "Develop a classification model (e.g., Logistic Regression, Random Forest) trained on a labeled dataset of benign and malicious command-line arguments. Use features such as command length, special character count, entropy, and n-gram frequency. Apply the model to new commands executed by VM agents to predict the probability of maliciousness and alert on high-probability events."
            ]
          },
          {
            "description": "A cloud VM agent spawns a child process that is statistically rare for the environment or is an interactive tool inconsistent with automated administration.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud virtual machine instances",
            "action": [
              "For child processes of VM agents, create a deny-list of interactive tools or utilities commonly used for reconnaissance (e.g., `cmd.exe`, `powershell.exe`, `whoami.exe`, `net.exe`, `ipconfig.exe`). Generate an alert if a VM agent spawns any process on this list outside of an authorized, interactive troubleshooting session.",
              "For each host, build a historical baseline of all child processes spawned by VM agents. Using frequency analysis, identify any process that has never been seen before or is in the bottom 5th percentile of execution frequency across the environment. Alert on the execution of such rare processes.",
              "Use a clustering algorithm (e.g., DBSCAN) on features extracted from child process events, such as process name, parent process, user context, and command-line arguments. Identify clusters of normal administrative activity and flag any new process execution that falls outside these established clusters as an anomaly."
            ]
          },
          {
            "description": "A process spawned by a cloud VM agent initiates network connections to an external destination matching threat intelligence, or exhibits statistically anomalous communication patterns like beaconing.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Virtual network gateways and firewalls",
            "action": [
              "Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) by source IP and timestamp. For any connection initiated by a process spawned from a VM agent, check the destination IP/domain against a threat intelligence feed of known C2 servers or malicious endpoints. Alert on any match.",
              "For each process spawned by a VM agent, analyze its network connections in Zeek conn.log. Calculate the time delta between outbound connections to the same destination. A low standard deviation in these time deltas (heartbeat) is indicative of C2 beaconing. Also, flag connections to destination ports that are outside the top 95% of commonly used ports for that host.",
              "Apply a time-series forecasting model (e.g., ARIMA) to the volume and frequency of network connections originating from VM agent child processes. Train the model on historical Zeek conn.log data to learn normal patterns. Alert when observed network activity significantly deviates from the forecasted values, suggesting a change in behavior like data exfiltration or C2 communication."
            ]
          },
          {
            "description": "The timing, frequency, or source of cloud administration command executions deviates significantly from established baselines for the environment.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Identity and Access Management (IAM) service logs",
            "action": [
              "Define specific maintenance windows (e.g., Saturday 1 AM - 4 AM) during which automated administrative commands are expected. Generate an alert for any command executed by a VM agent outside of these pre-defined windows or not associated with a valid change management ticket.",
              "For each host and for the environment as a whole, establish a baseline of command execution frequency per hour using Windows Event ID 4688. Use descriptive statistics to identify the mean and standard deviation. Alert when the number of executions in an hourly window exceeds three standard deviations from the mean.",
              "Use an anomaly detection algorithm (e.g., Isolation Forest) on multi-dimensional data points representing each command execution. Features should include: time of day, day of week, host, and user context. Train the model on historical data to identify normal execution patterns and flag any new execution that the model scores as a significant outlier."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]