[
  {
    "information_requirement": "Is an adversary enumerating cloud services, configurations, or resources within the environment?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1526",
        "name": "Cloud Service Discovery",
        "evidence": [
          {
            "description": "A request to a known cloud provider API endpoint (e.g., management.azure.com, *.amazonaws.com) where the User-Agent header matches a known malicious signature or the request body contains a known compromised API key.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points to the internet, such as network firewalls and proxies.",
            "action": [
              "Symbolic: Query Zeek http.log for requests where the destination host matches a list of cloud provider API domains (e.g., *.amazonaws.com, management.azure.com, *.googleapis.com) AND the user_agent field matches a threat intelligence feed of known malicious User-Agent strings (e.g., 'Pacu', 'Stormspotter') or other suspicious values (e.g., 'curl/7.64.1').",
              "Statistical: For all requests to cloud API endpoints, calculate the Shannon entropy of the 'uri' and 'user_agent' fields. Establish a baseline distribution of entropy scores. Alert on requests where the entropy score for either field exceeds the 99th percentile of the established baseline, indicating a potentially randomized or unusual string characteristic of tool-generated traffic.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) on labeled Zeek http.log records, using features such as request method, URI length, user agent string, destination port, and presence of authentication tokens. The model should classify each request as 'benign' or 'malicious-discovery'. Use this model to score new, unlabeled requests in real-time."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) where the new process name matches a known cloud discovery tool (e.g., pacu.exe, stormspotter.py) or a standard cloud CLI (e.g., aws.exe, az.cmd, gcloud.cmd) is executed with command-line arguments indicative of enumeration (e.g., 'describe-*', 'list-*', 'get-*').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, member servers, and developer workstations with cloud SDKs/CLIs installed.",
            "action": [
              "Symbolic: Create a detection rule to monitor Windows Event ID 4688 for process creation events. Alert if NewProcessName matches a list of known cloud discovery tools (e.g., 'pacu', 'scoutsuite', 'stormspotter') OR if NewProcessName is a known cloud CLI (e.g., 'aws.exe', 'az.cmd', 'gcloud.cmd') AND the CommandLine contains keywords like 'describe', 'list', 'get', 'enum', or 'discover'.",
              "Statistical: For each user, establish a baseline of normal cloud CLI command usage by parsing command-line arguments from Windows Event ID 4688. Calculate the frequency of discovery-related commands (e.g., 'list', 'get') versus operational commands (e.g., 'create', 'update'). Alert if a user's ratio of discovery commands to total commands in a 1-hour window exceeds 3 standard deviations above their historical average or the average for their user group.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model or an LSTM network) to analyze the sequence of commands executed by each user. Train the model on benign command sequences. Identify anomalous sequences that deviate from learned normal patterns, such as a burst of 'list' commands across different services followed by a data access command."
            ]
          },
          {
            "description": "A single source IP address initiates an anomalously high number of connections or requests to a diverse set of distinct cloud API endpoints or services within a short time frame (e.g., >20 unique API endpoints within 5 minutes).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points and internal network segments housing potential pivot points (e.g., developer subnets, management servers).",
            "action": [
              "Symbolic: From Zeek conn.log, create a rule that triggers when a single id.orig_h generates connections to more than a fixed threshold (e.g., 20) of unique id.resp_h addresses within known cloud provider IP ranges in a 5-minute window.",
              "Statistical: For each source host (id.orig_h), calculate the cardinality (count of unique values) of destination hosts (id.resp_h) and destination ports (id.resp_p) over a 10-minute sliding window. Establish a baseline for these cardinality metrics for each host or host group. Generate an alert when a host's destination cardinality exceeds the 95th percentile of its own historical behavior or its peer group's baseline.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features extracted from Zeek conn.log over a time window. Features per source IP should include: total connections, unique destination IPs, unique destination ports, total bytes sent, and total bytes received. The algorithm will group 'normal' behavior into clusters; any source IP that does not belong to a cluster (i.e., is an outlier) is flagged as anomalous scanning activity."
            ]
          },
          {
            "description": "A network connection from a host to a cloud instance metadata service IP address (e.g., 169.254.169.254) where the source host has no prior history of accessing this service, or the access is immediately followed by process creation events involving cloud CLI tools.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud-hosted virtual machines (IaaS), container orchestration platforms, and network gateways monitoring traffic to metadata services.",
            "action": [
              "Symbolic: Maintain a list of hosts that are authorized to access the cloud metadata service (169.254.169.254). Create a rule that alerts on any HTTP request to the metadata service IP from a source IP not on the authorized list, based on Zeek http.log records.",
              "Statistical: Profile the frequency and timing of metadata service access for all hosts. For each host, calculate the inter-arrival time between requests. Alert if a request occurs at a time that is a statistical outlier (e.g., > 3 standard deviations from the mean inter-arrival time) or if the volume of requests from a single host in a 1-minute window exceeds the 98th percentile of the historical distribution.",
              "Machine Learning: Create a time-series model (e.g., ARIMA) for each host that regularly accesses the metadata service, forecasting the expected volume of requests. Generate an alert if the actual request volume significantly deviates from the forecasted volume (i.e., the residual error is anomalously high). Correlate this alert with subsequent command-line activity (Windows Event ID 4688) within 5 minutes to confirm discovery behavior."
            ]
          },
          {
            "description": "A user or service principal executes a statistically significant number of discovery-related API calls (e.g., 'List*', 'Get*', 'Describe*') that deviates from their historical baseline or the baseline of their assigned role, particularly across services they do not typically access.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication logs on Domain Controllers, command-line logs on endpoints/servers, and API gateway logs monitoring cloud service requests.",
            "action": [
              "Symbolic: Define roles (e.g., 'Developer', 'DBA') and map allowed cloud services and API call types to each role. Create a rule that alerts when a user's API call, as observed in Zeek http.log URI paths or Windows Event ID 4688 command lines, violates their defined role policy (e.g., a DBA account attempting to list IAM roles).",
              "Statistical: For each user, create a historical profile of API calls made over the last 30 days. Calculate the frequency distribution of called services (e.g., S3, EC2) and action types (e.g., 'List', 'Describe'). Alert if, in a 24-hour period, a user interacts with a service that is not in their historical top 95% of services, or if the proportion of 'List'/'Describe' calls exceeds their personal baseline by more than 3 standard deviations.",
              "Machine Learning: Employ a peer group analysis model. Group users based on their roles. For each user, compare their activity vector (a feature set including counts of different API calls) to the centroid of their peer group's activity. Use a distance metric (e.g., Mahalanobis distance) to measure deviation. An unusually large distance indicates that the user's behavior is anomalous compared to their peers."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]