[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by renaming legitimate utilities?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.003",
        "name": "Rename Legitimate Utilities",
        "evidence": [
          {
            "description": "A process executes where the filename on disk does not match its expected name, but its file hash (e.g., SHA256) matches the known hash of a legitimate system utility.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with Sysmon deployed, particularly Domain Controllers, file servers, and developer workstations.",
            "action": [
              "Symbolic: Maintain a curated list of legitimate system utility filenames and their corresponding file hashes (e.g., powershell.exe, cmd.exe, certutil.exe). Monitor process creation events (Sysmon Event ID 1). Join the event's file hash with the curated list. Alert on any instance where the process's file hash matches a legitimate utility's hash, but the process's filename does not match the expected filename for that hash.",
              "Statistical: For each host, calculate the historical frequency of process names associated with known legitimate utility hashes. Establish a baseline of common process names for each hash (e.g., 99% of the time, a specific hash is named 'powershell.exe'). Alert when a process name for a given hash falls into a rare percentile (e.g., less than the 1st percentile of observed names), indicating an unusual renaming event on that host.",
              "Machine Learning: Train a classification model (e.g., random forest) using features from process creation events, including the process name, hash, parent process, and command line. Label data based on known instances of renamed utilities versus normal process executions. Use the model to classify new process events in real-time as 'benign' or 'renamed-utility', flagging suspicious events for analyst review."
            ]
          },
          {
            "description": "A process executes where the filename on disk (e.g., 'update.exe') mismatches the 'OriginalFilename' or 'InternalName' fields embedded within the binary's PE header metadata (e.g., 'psexec.exe').",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with Sysmon configured to capture and log PE header information.",
            "action": [
              "Symbolic: Create a detection rule that triggers when a process is created (Sysmon Event ID 1) and the value of the `Image` field does not match the value in the `OriginalFileName` field from the PE header. Maintain a watchlist of high-value `OriginalFileName` values (e.g., 'powershell.exe', 'psexec.exe', 'certutil.exe') to prioritize alerts.",
              "Statistical: For each `OriginalFileName` observed in the environment, calculate the Shannon entropy of the associated `Image` filenames. A high entropy score for a given `OriginalFileName` (e.g., 'certutil.exe') suggests it is being frequently renamed to randomized filenames. Alert when the entropy for a specific `OriginalFileName` on a host exceeds a dynamic threshold (e.g., 2 standard deviations above the global baseline).",
              "Machine Learning: Develop an anomaly detection model using a one-class SVM or autoencoder on pairs of (`Image` filename, `OriginalFileName`). Train the model on data from a known-good baseline period to learn the normal relationships between on-disk filenames and their internal names. Apply the model to new data to flag process executions where the (`Image`, `OriginalFileName`) pair is a statistical outlier."
            ]
          },
          {
            "description": "A process with a generic or unexpected name (e.g., 'audiodg.exe') executes using command-line arguments that are highly characteristic of a specific, different legitimate utility (e.g., containing '-enc' for PowerShell).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers with command-line process auditing enabled.",
            "action": [
              "Symbolic: Develop a list of regular expressions that match unique command-line patterns for abused utilities (e.g., `certutil -urlcache .* -f`, `rundll32.exe javascript:`, `powershell.exe -enc`). Create a SIEM rule that triggers when a command line matches one of these patterns, but the process name is NOT the expected utility.",
              "Statistical: For each distinct command-line pattern identified by the symbolic rule, calculate the frequency distribution of process names that execute it. Establish a baseline of legitimate process names for each pattern. Alert when a process name used with a specific pattern is a statistical outlier (e.g., appears in less than 1% of executions for that pattern across the enterprise).",
              "Machine Learning: Use Natural Language Processing (NLP) techniques like TF-IDF to vectorize command-line arguments. Train a clustering model (e.g., DBSCAN) to group similar command-line invocations. Analyze the resulting clusters to identify groups where the command lines are semantically similar but the associated process names are highly varied. These clusters represent strong candidates for renamed utility abuse."
            ]
          },
          {
            "description": "A file with a name matching a legitimate system utility (e.g., 'svchost.exe') is created in a non-standard file path (e.g., 'C:\\Users\\Public\\') and is subsequently executed from that path.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (e.g., AppData, Temp), shared temporary folders (e.g., C:\\Temp, C:\\ProgramData), and world-writable directories.",
            "action": [
              "Symbolic: Maintain a list of critical system executables and their legitimate locations (e.g., 'svchost.exe' in 'C:\\Windows\\System32\\'). Create a rule that alerts on any process creation event (Sysmon Event ID 1) where the process name is on the list, but the process path is not in the allowed directory list. Correlate with a preceding file creation (Sysmon Event ID 11) in the same location for higher fidelity.",
              "Statistical: For every executable name, profile its common execution paths. Calculate the historical frequency of each path for a given process name. Alert when a common system utility (e.g., 'powershell.exe') is executed from a path that is in the bottom 5th percentile of frequency for that process name across the enterprise, indicating an anomalously rare location.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., Prophet, LSTM) on the count of executions of critical system utilities from non-standard paths per host, per day. A sudden spike in the number of executions of 'cmd.exe' from 'C:\\Users\\Public\\Downloads\\' on a host, compared to its own baseline and the baseline of its peers, would be flagged as an anomaly."
            ]
          },
          {
            "description": "A process, previously identified as a renamed utility, subsequently spawns a command shell or initiates an external network connection to an unusual destination.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and all Windows endpoints/servers with Sysmon installed.",
            "action": [
              "Symbolic: Create a correlation rule that first identifies a renamed utility using hash or PE metadata mismatch. If this 'parent' process then spawns a child process (Sysmon Event ID 1) like 'cmd.exe' or 'powershell.exe', or initiates a network connection (Sysmon Event ID 3 or Zeek conn.log) to an IP address on a threat intelligence blocklist, generate a high-severity alert.",
              "Statistical: For processes identified as renamed utilities, analyze their outbound network connections from Zeek conn.log. Calculate the rarity of the destination port or destination autonomous system number (ASN). If a renamed utility communicates over a port that is statistically rare for any process on that host (e.g., outside the top 95% of commonly used ports), elevate its risk score.",
              "Machine Learning: Construct a process behavior graph for each host, where nodes are processes and edges represent parent-child relationships or network communications. Use a Graph Neural Network (GNN) to identify subgraphs that deviate from normal behavior. A subgraph starting with a node flagged as a 'renamed utility' that then connects to an external IP node and a 'cmd.exe' node would be flagged as a highly anomalous and malicious sequence."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]