[
  {
    "information_requirement": "Has the adversary captured user input to obtain credentials? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1056",
        "name": "Input Capture",
        "evidence": [
          {
            "description": "A process hash matches a known keylogger hash from a threat intelligence feed, or a network connection is established to an IP address or domain known to be associated with keylogger command and control (C2) infrastructure.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers (e.g., Domain Controllers, Financial Systems), Remote Access Gateways",
            "action": [
              "Symbolic: Continuously query process creation events (Sysmon Event ID 1) and network connection events (Zeek conn.log) against threat intelligence feeds for known keylogger hashes, C2 IP addresses, and domains. Generate a high-severity alert upon any match.",
              "Statistical: For processes not matching known malicious hashes, calculate the prevalence of each process hash across the environment. Flag processes with extremely low prevalence (e.g., running on < 0.1% of endpoints) that initiate network connections to newly registered or low-reputation domains. Use the 99th percentile of domain age or the bottom 1st percentile of reputation score as a threshold.",
              "Machine Learning: Develop a supervised classification model (e.g., Gradient Boosting, Random Forest) trained on features from process creation and network connection events (process name, parent process, command line arguments, destination IP/port, connection duration, bytes sent/received). Use the model to score each new process/connection pair for its likelihood of being malicious keylogger activity, alerting on scores above a defined confidence threshold."
            ]
          },
          {
            "description": "A process creates a registry key, value, named pipe, or mutex whose name matches a pattern known to be associated with keylogging or credential theft malware.",
            "data_sources": [
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)",
              "Windows Event ID 14 (Sysmon)",
              "Windows Event ID 17 (Sysmon)",
              "Windows Event ID 18 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) instances",
            "action": [
              "Symbolic: Create detection rules that search for registry and named pipe creation events (Sysmon Event IDs 12-14, 17-18) where the target object name matches a curated list of regular expressions for known keylogger artifacts (e.g., HKCU\\Software\\<random_string>, \\pipe\\<keylog_pattern>). Alert on any match.",
              "Statistical: For all created artifacts (registry keys, pipes), calculate the entropy of the artifact name. Establish a baseline for normal entropy values for artifacts created by legitimate processes. Flag and investigate artifact creation events where the name has an unusually high entropy score (e.g., exceeding the 95th percentile), especially when created by an unsigned or uncommon process.",
              "Machine Learning: Use an unsupervised clustering algorithm (e.g., DBSCAN) on features of artifact creation events, including the creating process name, parent process, artifact path/name, and entropy. Isolate and investigate small clusters that deviate from large clusters representing benign activity, as these may represent novel keylogger variants."
            ]
          },
          {
            "description": "A non-interactive or command-line process loads dynamic-link libraries (DLLs) associated with user input and graphical interfaces (e.g., user32.dll, winio.dll), particularly when the process is unsigned or running from a non-standard directory.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon)",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Backend Servers (Web, Database), Domain Controllers, User Workstations",
            "action": [
              "Symbolic: Create a detection rule that triggers when a process image load event (Sysmon Event ID 7) for 'user32.dll' or 'gdi32.dll' is generated by a process that is not on an allowlist of legitimate GUI applications and is running as a system service or from a command-line parent (e.g., cmd.exe, powershell.exe).",
              "Statistical: For each process name, build a baseline set of normally loaded DLLs. Calculate the frequency of each process-DLL pair across the enterprise. Generate a risk score when a process loads a DLL that is statistically rare for it (e.g., loaded by < 1% of instances of that process). A high score for loading UI-related DLLs by a non-GUI process should be investigated.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on the sequence of DLLs loaded by specific critical processes upon startup. The model will learn the normal loading sequence and timing. Alert when the model detects a significant deviation, such as the injection and loading of an unexpected UI-related DLL at an abnormal point in the process lifecycle."
            ]
          },
          {
            "description": "A scripting interpreter (e.g., PowerShell, VBScript) executes a script block containing functions or commands for capturing user input (e.g., Set-WindowsHookExA, Get-Clipboard), especially when the script block exhibits high levels of obfuscation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Servers with PowerShell Remoting enabled",
            "action": [
              "Symbolic: Scan PowerShell Script Block logs (Event ID 4104) and process command lines (Event ID 4688/Sysmon 1) for keywords such as 'Set-WindowsHook', 'GetAsyncKeyState', 'Get-Clipboard', '[System.Windows.Forms.Clipboard]::GetText()', and API calls to 'user32.dll'. Alert on any matches.",
              "Statistical: For every script block, calculate the character frequency distribution and an entropy score. Establish a baseline for typical scripts. Flag scripts with an entropy score significantly higher than the mean (e.g., > 3 standard deviations) or a character distribution indicative of Base64 or other encoding schemes, as this suggests obfuscation used to hide input capture functionality.",
              "Machine Learning: Utilize a pre-trained Natural Language Processing (NLP) model, fine-tuned on a labeled dataset of benign and malicious scripts, to classify the intent of each executed script block. The model can identify semantic patterns related to credential theft and input capture, even in the absence of specific keywords, and flag suspicious scripts for analyst review."
            ]
          },
          {
            "description": "An internal host initiates an HTTP/S POST request to a low-reputation or newly registered domain, where the request body size and parameter names (e.g., 'user', 'pass', 'keydata') are consistent with credential or keystroke exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Internet Gateway), DNS Resolvers, Web Proxies",
            "action": [
              "Symbolic: Monitor HTTP logs (Zeek http.log) for POST requests where the URI or request body contains parameter names like 'user', 'pass', 'login', 'token', or 'keystroke'. Correlate the destination domain with DNS logs (Zeek dns.log) and threat intelligence to check if the domain is newly registered (e.g., < 30 days old) or has a poor reputation. Alert on a match.",
              "Statistical: For each source-destination pair, model the typical size of POST request bodies using a moving average and standard deviation. Flag any POST request whose size is a statistical outlier (e.g., > 3 standard deviations from the mean), especially if the destination is a low-prevalence domain across the enterprise. Small, periodic POSTs can indicate batched keystroke exfiltration.",
              "Machine Learning: Use an anomaly detection model on time-series data of network connections (Zeek conn.log) for each host. Features can include connection frequency, data volume sent, destination port, and destination prevalence. The model can identify beaconing behavior (periodic, 'heartbeat' connections) that is characteristic of keylogger C2 communication, even when encrypted."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary captured user input to collect information? (PIR)",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1056",
        "name": "Input Capture",
        "evidence": [
          {
            "description": "A process creates a file in a common staging directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public) with a filename matching patterns used by known keylogger tools for storing captured data.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Shared File Systems",
            "action": [
              "Symbolic: Create a rule to monitor file creation events (Sysmon Event ID 11) where the TargetFilename matches a list of known keylogger output files and paths (e.g., *.log, *.dat, *.tmp in %APPDATA% or C:\\Windows\\Temp). The rule should be scoped to trigger on files created by processes not on an allowlist for writing to these locations.",
              "Statistical: Calculate the enterprise-wide prevalence of every filename created in common staging directories. Flag files with extremely low prevalence (e.g., seen on only one host) for investigation, especially if the creating process is also uncommon or unsigned.",
              "Machine Learning: Train a classification model to predict if a file creation event is suspicious based on features like: creating process name, process path, file path, file extension, and time of day. The model can learn to identify combinations of features that indicate staging of collected data, such as a browser process creating a .dat file in a hidden directory."
            ]
          },
          {
            "description": "A sequence of events occurs within a short time window: (1) A process writes to a file in a temporary or user-profile directory. (2) The same or a different process reads the file. (3) The reading process initiates an outbound network connection.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Data Staging Servers, Network Egress Points",
            "action": [
              "Symbolic: Create a stateful detection rule that correlates events by hostname. Trigger an alert if the following sequence is observed within a 5-minute window: [Sysmon EID 11: File Create by Process A in a temp dir] -> [Sysmon EID 3: Network Connection by Process A to external IP].",
              "Statistical: Analyze event sequences across the environment. Calculate the conditional probability of a network connection event following a file write event for a given process. Flag processes where this probability is anomalously high compared to their baseline behavior or to other processes, identifying processes whose function appears to be 'write-then-send'.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model or Recurrent Neural Network) to learn normal sequences of system events (process creation, file writes, network connections) for users and hosts. The model can then identify and alert on the occurrence of rare or anomalous sequences, such as the 'stage-and-exfiltrate' pattern."
            ]
          },
          {
            "description": "A process performs frequent, small-sized write operations to a single file over an extended period, which is characteristic of appending individual keystrokes or small buffers to a log file.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Application Servers, Local File Systems",
            "action": [
              "Symbolic: With file system auditing enabled, create a rule that alerts if a process generates more than 20 write access events (Event ID 4663 with WriteData/AppendData access) to the same file within a 1-minute window, where the process is not an expected logging application.",
              "Statistical: For each process/file pair, aggregate file access events over time. Calculate the inter-arrival time between write events. Compare the statistical properties (mean, variance) of this timing against a baseline of normal file write activity. A low mean and low variance in inter-arrival times can indicate automated logging.",
              "Machine Learning: Apply time-series analysis to the volume of data written to a file by a process. An anomaly detection model can be trained to distinguish the pattern of frequent, small, positive increments (characteristic of a keylogger) from benign patterns like large bulk writes or infrequent updates."
            ]
          },
          {
            "description": "An internal host exhibits periodic, fixed-interval outbound network connections (beaconing) with small payloads, or utilizes DNS queries with abnormally high entropy and length, indicating data exfiltration of captured input.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal DNS Servers, Firewall Log Aggregators",
            "action": [
              "Symbolic: Monitor DNS logs (Zeek dns.log) for queries where the queried domain name is longer than 100 characters and contains subdomains that do not match common patterns (e.g., many hexadecimal characters). Correlate with threat intelligence feeds for known DNS tunneling C2 domains.",
              "Statistical: For each source host, analyze outbound connections (Zeek conn.log) to identify beaconing. Calculate the time delta between consecutive connections to the same destination IP/port. A low standard deviation in these time deltas indicates a fixed interval. Also, calculate the standard deviation of the bytes sent (orig_bytes). A low deviation in both metrics indicates robotic beaconing.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) on network connection features (session duration, bytes sent, port, destination IP) to group traffic into 'normal' and 'abnormal' clusters. Analyze the abnormal clusters for characteristics of data exfiltration, such as low-volume, periodic connections to many different hosts in a low-reputation IP space."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]