[
  {
    "information_requirement": "Has the adversary escalated privileges using ptrace system calls?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.008",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "A process, within a short time window of being the target of a ptrace system call, initiates an outbound network connection to a destination IP address or resolves a domain name present on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web, database), Internet gateway/egress points",
            "action": [
              "Symbolic: Correlate Linux Auditd logs (`syscall=ptrace`) with Zeek conn.log and dns.log using host and timestamp. Join the destination IP or resolved domain against a threat intelligence feed. Alert on any match where the connection originates from the process ID (PID) targeted by the ptrace call within 5 minutes of the event.",
              "Statistical: For processes targeted by ptrace, calculate the rarity of the destination IP/domain compared to the historical baseline of all destinations contacted by that host. Use a frequency analysis (e.g., inverse document frequency) approach. Flag connections to destinations that fall below a low percentile (e.g., 1st percentile) of historical contact frequency, indicating an anomalous destination.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on labeled network connection data (benign vs. malicious). Use features such as connection duration, bytes sent/received, port number, and IP/domain reputation. After a ptrace event is detected, feed the subsequent network connection features from the target process into the model to classify it as potentially malicious."
            ]
          },
          {
            "description": "A ptrace system call is initiated by a process executable that is not on a pre-defined allowlist of legitimate debugging, diagnostic, or containerization tools.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts (servers and workstations), especially those running production applications.",
            "action": [
              "Symbolic: Maintain an explicit allowlist of process executable paths known to legitimately use ptrace (e.g., `/usr/bin/gdb`, `/usr/bin/strace`, `/usr/bin/dockerd`). Monitor Linux Auditd logs for `syscall=ptrace` events. Generate a high-severity alert for any ptrace call where the source process executable (`exe`) is not on the allowlist.",
              "Statistical: For each host, build a statistical profile of processes that use ptrace, recording the frequency of each source process. Calculate a rarity score for each ptrace event based on the historical frequency of the source process on that host or across the enterprise. Alert when a ptrace call is made by a process with a rarity score exceeding a set threshold (e.g., 99th percentile of rarity).",
              "Machine Learning: Use unsupervised learning (e.g., clustering, such as DBSCAN) on ptrace event features (source process name, parent process name, command line, user ID). Identify clusters of normal ptrace activity. Flag any new ptrace event that does not fall into an established cluster as an anomaly for further investigation."
            ]
          },
          {
            "description": "A ptrace system call is observed where the source process has a non-root effective user ID (EUID) and the target process has a root EUID (0), followed by the target process loading a shared library from a non-standard location or executing a new child process.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, execve)",
              "Sysmon for Linux (Event ID 7: Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Linux systems, servers with privileged service accounts, container orchestration nodes.",
            "action": [
              "Symbolic: Create a rule to detect the sequence: 1) Auditd records a `ptrace` syscall where `auid != 0` and the target process's `euid = 0`. 2) Within 10 seconds, the target PID either loads a library (Sysmon for Linux Event ID 7) from `/tmp`, `/var/tmp`, `/dev/shm` or executes a child process (`execve` in Auditd) like `/bin/sh` or `/bin/bash`.",
              "Statistical: Establish a baseline of normal parent-child process relationships and loaded modules for privileged processes. Following a low-to-high privilege ptrace event, calculate the historical probability of the target process spawning the observed child process or loading the observed module. An event with a very low probability (e.g., < 0.01%) should trigger an alert.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., LSTM) on sequences of system calls made by high-privilege processes. After a low-to-high privilege ptrace event, feed the subsequent system call sequence from the target process into the model. An anomaly score exceeding a learned threshold indicates a deviation from normal behavior, likely caused by the injected code."
            ]
          },
          {
            "description": "A statistically significant deviation is observed in the volume of ptrace calls or in the source-to-target process pairings compared to a learned historical baseline.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Fleets of Linux servers with consistent roles (e.g., web server farm), developer workstation subnets.",
            "action": [
              "Symbolic: Define a hard threshold for the number of ptrace calls from a single host or user within a given timeframe (e.g., >100 ptrace calls in 5 minutes from a non-debugging user). Alert when this threshold is breached.",
              "Statistical: For each host, model the rate of ptrace calls using a time-series analysis (e.g., moving average, seasonality decomposition). Alert when the current rate exceeds a dynamic threshold, such as 3 standard deviations above the moving average. Additionally, maintain a frequency map of (source_process, target_process) pairs and alert on any pair that has never been seen before.",
              "Machine Learning: Use a graph-based anomaly detection approach. Model normal ptrace interactions as a graph where nodes are processes and edges are ptrace calls. Analyze graph properties like node degree, centrality, and community structure. A sudden change in these properties, such as a new, highly connected node appearing, can indicate malicious ptrace-based activity."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using ptrace system calls?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.008",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "A ptrace system call is observed where the target process executable name or path matches a known security tool (e.g., EDR agent, antivirus scanner, audit daemon), and the source process is not an authorized component of that security tool.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux endpoints and servers with security agents installed.",
            "action": [
              "Symbolic: Maintain a list of security agent process names (e.g., 'osqueryd', 'falco', 'cbdaemon', 'auditd'). Create a high-priority rule that triggers an alert if any process on this list is the target of a ptrace call, excluding legitimate self-debugging processes from the same tool suite.",
              "Statistical: Baseline the normal parent processes and users that interact with security agents. If a ptrace event occurs targeting a security agent, calculate the rarity of the source user/process interacting with that agent based on historical data. An extremely rare interaction (e.g., from a web server user) paired with ptrace is highly suspicious.",
              "Machine Learning: Train a binary classifier to distinguish between legitimate and malicious interactions with security agents. Features could include the source process name, user context, command line arguments, and the type of interaction (with 'ptrace' being a critical feature). A classification of 'malicious' for a ptrace event should be an immediate, high-fidelity alert."
            ]
          },
          {
            "description": "A trusted process (e.g., 'nginx', 'sshd', 'cron'), after being targeted by a ptrace call, spawns an interactive shell or initiates network connections to destinations or ports that are inconsistent with its established operational baseline.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, execve)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers hosting public-facing or critical internal services (e.g., web servers, SSH jump boxes).",
            "action": [
              "Symbolic: Create a rule to detect a sequence: 1) A common server process (e.g., 'apache2', 'nginx') is the target of a ptrace call. 2) Within 5 minutes, the same PID spawns a shell (e.g., `/bin/sh`, `/bin/bash`, `python`, `perl`). 3) Correlate with network logs to see if that PID or its new child process makes an outbound connection on a non-standard port (not 80/443).",
              "Statistical: For each trusted process, build a baseline of normal child processes, network destination FQDNs/IPs, and destination ports. After a ptrace event targets a trusted process, compare its subsequent activity to this baseline. Alert if the process spawns a child process that is in the bottom 1% of historical frequency, or connects to a destination port that has never been seen for that process.",
              "Machine Learning: Use an autoencoder trained on sequences of system calls and network activity for legitimate processes like 'nginx'. After a ptrace event, feed the subsequent activity sequence of the target process into the autoencoder. A high reconstruction error indicates the behavior is anomalous and does not match the learned legitimate patterns, suggesting code injection."
            ]
          },
          {
            "description": "A process, within minutes of being targeted by a ptrace call, accesses sensitive system files (e.g., '/etc/shadow', '/etc/sudoers') or user credential files (e.g., '~/.ssh/id_rsa'), or writes a new file to a world-writable directory and sets execute permissions.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, openat, chmod)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on critical Linux servers, user home directories.",
            "action": [
              "Symbolic: Define a rule that triggers on a sequence: 1) A process is targeted by a ptrace call. 2) The same PID then issues an 'openat' syscall for a file on a watchlist (e.g., `/etc/shadow`, `~/.ssh/id_rsa`). OR 2) The same PID writes a file to `/tmp` or `/dev/shm` and then calls 'chmod' with execute permissions on that file.",
              "Statistical: Calculate the Shannon entropy of file paths accessed by a given process. Establish a baseline entropy level for key processes. After a ptrace event, monitor the file access entropy of the target process. A sharp, statistically significant increase in entropy can indicate broad, untargeted file system discovery activity by injected code.",
              "Machine Learning: Use a one-class SVM (Support Vector Machine) trained on legitimate file access patterns for a given process. The features would be derived from the file paths (e.g., directory depth, presence of sensitive keywords like 'ssh' or 'shadow'). After a ptrace event, classify the subsequent file accesses of the target process. Any access classified as an outlier is a strong indicator of compromise."
            ]
          },
          {
            "description": "A process, after being targeted by a ptrace call, executes the `socket`, `bind`, and `listen` syscall sequence to open a new listening port, or executes `socket` and `connect` syscalls to establish an outbound connection characteristic of a reverse shell.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, socket, bind, listen, connect)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of all Linux hosts, network egress points.",
            "action": [
              "Symbolic: Detect a sequence where a process is targeted by ptrace, followed by the same PID executing `socket`, `bind`, and `listen` syscalls. Alert if the listening port is not on an allowlist of known application ports. Alternatively, detect a ptrace event followed by the target PID spawning `/bin/sh` which then makes an outbound TCP connection (via `connect` syscall or seen in Zeek conn.log).",
              "Statistical: Profile the listening ports on all hosts. After a ptrace event, if the target process opens a new listening port, calculate the prevalence of that port across the entire enterprise. A port that is unique or extremely rare (e.g., active on <0.1% of hosts) is highly suspicious and indicative of a custom backdoor.",
              "Machine Learning: Train a sequence model (e.g., an HMM or RNN) on legitimate sequences of network-related syscalls (`socket`, `connect`, `bind`, `listen`, `accept`). After a ptrace event, analyze the subsequent syscall sequence from the target process. If the model assigns a low probability to the observed sequence, it indicates an anomalous, potentially malicious pattern like a reverse shell or backdoor setup."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]