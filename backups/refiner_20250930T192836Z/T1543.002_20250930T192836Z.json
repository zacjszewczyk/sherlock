[
  {
    "information_requirement": "Is the adversary maintaining persistence using Systemd services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.002",
        "name": "Systemd Service",
        "evidence": [
          {
            "description": "A new `.service` file is created in a systemd directory (`/etc/systemd/system/`, `/usr/lib/systemd/system/`, `~/.config/systemd/user/`) and its `ExecStart` directive contains a command-line argument or path matching a known indicator of compromise (IOC).",
            "data_sources": [
              "Linux: auditd logs",
              "File content from endpoint agent"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations",
            "action": [
              "Symbolic: Query auditd logs for file creation events (`syscall=creat`, `openat`) in systemd directories. For each new `.service` file, parse the `ExecStart` directive and compare the executable path, filename, and arguments against a threat intelligence feed of known malicious indicators. Alert on any match.",
              "Statistical: For all `ExecStart` commands in `.service` files, calculate the Shannon entropy of the command string. Establish a baseline entropy score for commands created by legitimate package managers (e.g., `yum`, `apt`). Flag new service commands where the entropy score exceeds the 95th percentile of the baseline, indicating potential obfuscation or encoding.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features extracted from `ExecStart` commands, such as command length, presence of special characters, use of scripting interpreters, and file paths pointing to unusual locations (`/tmp`, `/dev/shm`). Use the model to classify newly created service commands as benign or suspicious."
            ]
          },
          {
            "description": "A `.service` file's `ExecStart` directive invokes a scripting interpreter (e.g., `bash`, `python`) with arguments characteristic of obfuscation (e.g., `base64 -d`) or network-based execution (e.g., `/dev/tcp`).",
            "data_sources": [
              "Linux: auditd logs",
              "File content from endpoint agent"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (e.g., web servers, application servers, database servers), Linux developer workstations",
            "action": [
              "Symbolic: Create a detection rule that scans the `ExecStart` directive of new or modified `.service` files for regular expression patterns matching reverse shells or obfuscated execution, such as `bash -i >& /dev/tcp/`, `| base64 -d`, `eval(`, or `IEX (New-Object Net.WebClient)`. Alert on any matches.",
              "Statistical: For `ExecStart` commands that invoke scripting interpreters, calculate the ratio of alphanumeric characters to non-alphanumeric characters. Establish a baseline for this ratio from known-good service files. Flag commands where this ratio falls below the 5th percentile, indicating an unusually high density of special characters common in obfuscated scripts.",
              "Machine Learning: Develop a time-series model to forecast the expected number of new service file creations per host per day. Use anomaly detection on this time series to identify a sudden spike in service creation activity across one or more hosts, which could indicate a widespread persistence deployment."
            ]
          },
          {
            "description": "A process, whose parent is `systemd` (PID 1), initiates an external network connection to an IP address or domain with a low reputation score, or exhibits a periodic connection pattern (beaconing).",
            "data_sources": [
              "Linux: auditd logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., internet gateway), DNS resolvers, Linux servers",
            "action": [
              "Symbolic: For processes where the parent process ID is 1 (systemd), join the process execution event from auditd logs with network connection data from `Zeek conn.log` on host IP and timestamp. Alert if the destination IP or domain (resolved via `Zeek dns.log`) matches a known command-and-control (C2) server from a threat intelligence feed.",
              "Statistical: For each process spawned by systemd, analyze its outbound connections in `Zeek conn.log`. Group connections by destination IP and calculate the time delta between consecutive connections. Flag destination IPs where the standard deviation of the time delta is near zero, indicating a highly regular beaconing interval. Separately, analyze DNS queries in `Zeek dns.log` for high-entropy domain names (DGA) requested by these processes.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on network connection features from `Zeek conn.log` for processes spawned by systemd. Features should include `duration`, `orig_bytes`, `resp_bytes`, and `proto`. Identify clusters of anomalous network behavior that deviate from the normal traffic profile of system services."
            ]
          },
          {
            "description": "A `systemctl enable` or `systemctl start` command is executed for a `.service` file that was not created by a trusted package manager (e.g., `yum`, `apt`) or an authorized configuration management tool.",
            "data_sources": [
              "Linux: auditd logs",
              "Linux: /var/log/dpkg.log",
              "Linux: /var/log/yum.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers and workstations, Configuration Management servers",
            "action": [
              "Symbolic: Correlate `execve` events for `systemctl` with arguments `enable` or `start` from auditd logs with package manager logs (`dpkg.log`, `yum.log`). Alert if a service is enabled/started within minutes of its file creation, and the file creation event does not have a corresponding entry in the package manager logs for the same time window.",
              "Statistical: Establish a baseline of parent processes that typically execute `systemctl` (e.g., `sshd`, `ansible`, `puppet`). Monitor for executions of `systemctl enable/start` by anomalous parent processes (e.g., `bash`, `python`, or a web server process like `httpd`). Calculate the frequency of each parent process and flag executions from parents in the bottom 5th percentile of frequency.",
              "Machine Learning: Use time-series analysis to model the normal hours for administrative activity, including service modifications. Create a forecast model for the volume of `systemctl enable/start` commands. Generate an alert if a cluster of these events occurs significantly outside of modeled maintenance windows or business hours."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using Systemd services?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.002",
        "name": "Systemd Service",
        "evidence": [
          {
            "description": "An executable is run from a systemd generator directory (e.g., `/etc/systemd/system-generators/`) and its file hash matches a known malicious generator, or log entries indicate the successful exploitation of a known privilege escalation vulnerability in the systemd service manager.",
            "data_sources": [
              "Linux: auditd logs",
              "Linux: journalctl"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers, Authentication servers",
            "action": [
              "Symbolic: Monitor `execve` syscalls in auditd logs for any process execution within systemd generator directories. Hash the executable file and compare it against a threat intelligence database of known malicious systemd generators. Also, create regex rules to search `journalctl` logs for specific error messages or strings associated with known systemd CVEs.",
              "Statistical: Create a baseline of all executables ever observed in systemd generator directories across the environment. Flag any new, never-before-seen executable (by hash) that appears in one of these directories. This 'least frequency of occurrence' analysis can uncover novel threats without a specific IOC.",
              "Machine Learning: Train a behavioral model on the sequence of system calls made by legitimate systemd generators during startup. Monitor new generator executions and compare their syscall sequences to the model. Use a sequence matching algorithm (e.g., based on LSTM) to flag executions that deviate significantly from the learned benign behavior."
            ]
          },
          {
            "description": "A file modification event occurs on an existing `.service` file where the `User=` directive is changed to `root`, or the `ExecStart` command is altered to point to a world-writable directory like `/tmp` or `/var/tmp`.",
            "data_sources": [
              "Linux: auditd logs",
              "File content from FIM agent"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd service file directories on all Linux hosts (/etc/systemd/system/, /usr/lib/systemd/system/)",
            "action": [
              "Symbolic: Implement File Integrity Monitoring (FIM) on all files in `/etc/systemd/system/`. On a modification alert, perform a diff against a known-good backup. Trigger a high-severity alert if the change involves the `User=` directive or if the `ExecStart` path is changed to a non-standard, world-writable location (`/tmp`, `/dev/shm`, `/var/tmp`).",
              "Statistical: For each service file, create a historical baseline of its `ExecStart` path. Upon modification, calculate the Levenshtein distance between the new path and the historical path. A high distance score indicates a complete path change rather than a minor argument update. Flag modifications with a score above a tuned threshold.",
              "Machine Learning: Use an anomaly detection model on FIM events. Features can include the user who made the change, the parent process name, the time of day, and the type of change (e.g., `User=` modified, `ExecStart` modified). The model can learn patterns of legitimate changes (e.g., by `yum`/`apt` during patching) and flag modifications that do not fit this pattern."
            ]
          },
          {
            "description": "A process running under a non-root user account (UID > 1000) creates a `.service` file that either explicitly specifies `User=root` or omits the `User` directive, which defaults to root if placed in a system directory.",
            "data_sources": [
              "Linux: auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on Linux hosts (~/.config/systemd/user/), Staging directories (/tmp, /dev/shm)",
            "action": [
              "Symbolic: Create a rule that triggers when a file creation event is logged by auditd for a path ending in `.service`, the creating process's effective user ID (euid) is greater than 1000, and a content scan of the new file reveals the string `User=root` or the `User=` directive is absent.",
              "Statistical: Profile the set of users who legitimately create `.service` files (typically only `root` and specific service accounts). Maintain this set as a statistical baseline. Alert whenever a user not in this baseline set creates a `.service` file anywhere on the filesystem, indicating a rare and suspicious event.",
              "Machine Learning: Train a classifier to predict the risk of a new service file based on the creating user's role, the file's location, and its contents. Features would include: `is_root_creator`, `file_path_entropy`, `contains_user_root_directive`, `is_in_user_home_dir`. The model would output a risk score, allowing analysts to prioritize investigation."
            ]
          },
          {
            "description": "A `.timer` file is created in a systemd directory, and a corresponding `.service` file with the same base name is also created, where the service file contains a suspicious `ExecStart` command or is configured to run with root privileges.",
            "data_sources": [
              "Linux: auditd logs",
              "File content from endpoint agent"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systemd service and timer file directories on all Linux hosts (/etc/systemd/system/, ~/.config/systemd/user/)",
            "action": [
              "Symbolic: Monitor file creation events in systemd directories. If a `.timer` file is created, search for a corresponding `.service` file creation with the same base name by the same process/user within a 5-minute window. If a pair is found, inspect the `.service` file for known suspicious patterns (e.g., `ExecStart` pointing to `/tmp`, `User=root`).",
              "Statistical: Calculate the prevalence of `.timer` units in your environment. For most systems, this is a rare event. Establish a count of `.timer` files per host and alert on any host that exceeds a low threshold (e.g., > 2 standard deviations above the mean, or simply any new creation if they are rare enough).",
              "Machine Learning: Use a graph-based analysis. Model systemd units as nodes and their relationships (e.g., a `.timer` `Wants` a `.service`) as edges. Analyze the graph for newly added subgraphs that are disconnected from the main graph of legitimate, package-installed services. These isolated timer/service pairs are highly suspicious."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]