[
  {
    "information_requirement": "Has the adversary accessed credentials stored in cloud secrets management stores?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.006",
        "name": "Cloud Secrets Management Stores",
        "evidence": [
          {
            "description": "An API call to a cloud secrets manager (e.g., AWS GetSecretValue, Azure Key Vault Get Secret, GCP AccessSecretVersion) originates from a source IP address on a threat intelligence blocklist, or from a user/role/host not explicitly permissioned for secrets access.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane API endpoints, Network egress points, Virtual Private Cloud (VPC) flow logs",
            "action": [
              "Continuously query cloud audit logs (e.g., CloudTrail) and network connection logs (Zeek conn.log) for events related to secret retrieval. Join the source IP address with a threat intelligence feed of known malicious IPs and alert on any match. Maintain and query against an explicit allow-list of approved source IP ranges, user principals, and service roles authorized for secret access.",
              "For each user/role, establish a baseline of typical source Autonomous System Numbers (ASNs) for secret access requests. Calculate the rarity of the source ASN for each new request using frequency analysis. Flag any request originating from an ASN that falls below a 5th percentile rarity score for that specific principal.",
              "Train a binary classification model (e.g., Logistic Regression, Random Forest) on labeled historical access data, using features like source IP, user agent, time of day, principal name, and ASN. Use the model to predict in real-time whether a new access request is 'legitimate' or 'suspicious'. Alert on requests classified as suspicious with a high confidence score."
            ]
          },
          {
            "description": "The command-line arguments of a process (e.g., aws.exe, az.cmd, gcloud.cmd) contain patterns indicative of bulk secret enumeration or retrieval, such as listing all secrets followed by iterative 'get' commands.",
            "data_sources": [
              "Windows Event ID 4688",
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD servers, Cloud-hosted virtual machines, Container orchestration platforms",
            "action": [
              "Using regular expressions, scan process creation command-line arguments (Windows Event ID 4688) for cloud CLI commands related to secrets (e.g., `aws secretsmanager get-secret-value`, `az keyvault secret show`). Alert on commands that use flags for listing or iterating, such as `list-secrets` or `--query` combined with looping constructs.",
              "For each host, calculate the entropy of the command-line arguments for cloud CLI processes. A sudden spike in entropy may indicate obfuscated or randomized scripts. Monitor the ratio of 'list-secret' events to 'get-secret' events per user/host in a session. A ratio skewed heavily towards 'get' after a single 'list' is anomalous and should be flagged if it exceeds 2 standard deviations from the user's or host's baseline.",
              "Use a sequence analysis model like a Recurrent Neural Network (RNN) to analyze the sequence of commands executed by a user or on a host. Train the model on legitimate command sequences from developers and CI/CD systems. The model can then identify and alert on command sequences that deviate significantly from learned legitimate patterns, such as a rapid succession of `get-secret` commands."
            ]
          },
          {
            "description": "A successful secret retrieval event occurs from a principal (user or service role) that has never accessed that specific secret before, or the access context (source IP geolocation, user-agent, process name) is a statistical outlier compared to the principal's historical baseline.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane, Authentication logs, Developer workstations, CI/CD servers",
            "action": [
              "For each secret access event from cloud audit logs, check if the combination of `(principal_id, secret_name)` has been seen before. Alert on the first occurrence of a new combination. Additionally, check if the parent process name (from Event ID 4688) for the cloud CLI command is on an allow-list of expected processes (e.g., `terraform.exe`, `jenkins.sh`).",
              "For each principal, build a historical profile of secret access including: set of source countries, set of user-agents, and typical time-of-day/day-of-week access patterns. For each new access, calculate a risk score by summing penalties for deviations (e.g., +1 for new country, +1 for access at 3 AM). Alert if the cumulative score exceeds a percentile-based threshold (e.g., 95th percentile of historical scores).",
              "Employ an unsupervised anomaly detection model, such as an Isolation Forest or One-Class SVM, trained on features from legitimate secret access events (e.g., numerical representations of user-agent, IP, time of day, principal ID). The model will learn the boundary of normal behavior and flag any new access event that falls outside this boundary as an anomaly."
            ]
          },
          {
            "description": "The number of distinct secrets accessed or the total volume of API calls for secret retrieval by a single principal or from a single source IP address within a defined time window (e.g., 1 hour) is a statistical outlier.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane, VPC flow logs, Network egress points",
            "action": [
              "Create a rule that triggers if a single user principal or source IP address makes more than a hard-coded number (e.g., >50) of `GetSecretValue` or equivalent API calls within a 10-minute window. This threshold should be set based on an understanding of legitimate application behavior.",
              "For each principal, maintain a rolling time-series of the count of distinct secrets accessed per hour. Use a moving average and standard deviation to define a dynamic baseline. Alert when the current hour's count exceeds the moving average by more than 3 standard deviations (a high Z-score).",
              "Apply a time-series forecasting model (e.g., ARIMA, Prophet) to the secret access frequency data for each principal. The model will predict the expected number of accesses for the next time interval. If the actual observed count significantly exceeds the model's predicted upper confidence interval, generate an alert for anomalous volume."
            ]
          },
          {
            "description": "A secret retrieval event from a specific host is temporally correlated (within 5 minutes) with a subsequent outbound network connection from the same host to an external destination that is newly observed, has a low reputation score, or is otherwise suspicious.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD servers, Cloud-hosted virtual machines, Network egress points",
            "action": [
              "Correlate cloud audit logs (for secret access) with network logs (Zeek conn.log) on `host_identifier` and `timestamp`. Trigger an alert if a secret access event is followed within 5 minutes by a connection from the same host to an IP address present on a threat intelligence feed, or to a domain with a DGA (Domain Generation Algorithm) score above a set threshold.",
              "For each host, build a baseline of normal destination IPs, domains, and ports it communicates with after accessing secrets. For a new connection following a secret access event, calculate the rarity of the destination IP/domain based on the host's historical communication patterns. Alert if the destination falls into a low percentile of frequency (e.g., first time seen).",
              "Develop a sequence-based model that learns legitimate 'action pairs' (e.g., 'GetSecret' -> 'Connect to prod-db-api.internal'). The model, trained on historical data, would identify and score the likelihood of a sequence. A low-probability sequence, such as `GetSecretValue` followed by an SSH connection to an unknown external IP, would be flagged as a high-risk anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]