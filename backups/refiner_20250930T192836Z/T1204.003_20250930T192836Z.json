[
  {
    "information_requirement": "Has the adversary achieved execution through a malicious container or virtual machine image? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1204.003",
        "name": "Malicious Image",
        "evidence": [
          {
            "description": "A container is created from an image whose digest (hash) or tag matches an entry on a threat intelligence feed of known-malicious container images.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS), Corporate image registries",
            "action": [
              "(Symbolic) From process creation logs (Windows Event ID 4688), parse container run commands (e.g., `docker run`, `crictl run`) to extract the image name and tag. Correlate the extracted image name/tag against a threat intelligence feed of known-malicious images. Generate a high-severity alert on any match.",
              "(Statistical) For each image name, calculate its deployment frequency across the environment over time. An image that is rarely or never seen before and is not from a trusted, internal registry should have its risk score elevated. Flag images whose deployment frequency is in the bottom 5th percentile of all image deployments.",
              "(Machine Learning) Train a classification model (e.g., Logistic Regression) using features from the image name (length, character entropy, presence of special characters, similarity to known good names) and its source registry. Use the model to predict the likelihood of an image being malicious, even if not on a known CTI feed. Flag images with a high probability score for investigation."
            ]
          },
          {
            "description": "A running container spawns anomalous child processes, such as cryptominers, reverse shells, or enumeration tools, that are inconsistent with its documented purpose.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Application servers running containerized workloads",
            "action": [
              "(Symbolic) Monitor process creation events (Windows Event ID 4688) where the parent process is a container runtime shim. Scan the child process name and command-line arguments against a blocklist of known malicious tools (e.g., `xmrig`, `nc.exe`, `mimikatz.exe`, `kdevtmpfsi`). Generate an alert on any match.",
              "(Statistical) For each container image, build a baseline of 'normal' child processes and their command-line argument patterns. Calculate the rarity of each new process-argument combination. Flag any process execution that is a statistical outlier, such as a Jaccard distance greater than 0.8 from the baseline set of known good processes for that image.",
              "(Machine Learning) Use a time-series anomaly detection model on process creation frequency per container. A sudden, sustained spike in process creation activity, particularly short-lived processes, can indicate a malicious script or tool executing in a loop. Flag containers exhibiting anomalous process creation rates for further analysis."
            ]
          },
          {
            "description": "A container is deployed using high-risk runtime flags that grant it excessive permissions, such as privileged mode, host namespace sharing, or mounting of sensitive host system directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, CI/CD pipeline runners, Kubernetes API servers",
            "action": [
              "(Symbolic) From process creation events (Windows Event ID 4688), parse `docker run` or equivalent commands. Use regular expressions to search for high-risk flags like `--privileged`, `--pid=host`, `--net=host`, or sensitive volume mounts like `-v /:/host` or `-v /var/run/docker.sock:/var/run/docker.sock`. Alert on any usage not explicitly defined in an allow-list of approved use cases.",
              "(Statistical) Establish a baseline of common flag combinations used for each application or by each user/service account. Calculate a risk score for each flag and sum them for a total deployment risk score. Flag deployments where the total score exceeds the 99th percentile of historical deployment risk scores for that application or user.",
              "(Machine Learning) Train an unsupervised anomaly detection model (e.g., Isolation Forest) on vectors representing container deployments, where each feature is a binary indicator for a specific runtime flag. The model will learn normal combinations of flags. Flag any new deployment that the model identifies as an anomaly."
            ]
          },
          {
            "description": "A container initiates suspicious network activity, including connections to known malicious IP addresses or domains, C2-like beaconing, or use of non-standard protocols or ports.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Container overlay network segments, DNS resolvers",
            "action": [
              "(Symbolic) Correlate the source IP of container traffic from Zeek conn.log with destination IPs and domains (from dns.log). Join this data against threat intelligence feeds for known C2 servers, malware domains, and TOR exit nodes. Alert on any matches.",
              "(Statistical) For each container/application, profile its network behavior. Calculate the entropy of requested DNS names; a high entropy score can indicate DGA. Analyze connection time deltas and data volumes in Zeek conn.log to detect beaconing (e.g., regular connections with low byte counts). Flag containers with DNS entropy or connection interval standard deviation exceeding 3 standard deviations from their established baseline.",
              "(Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on network flow features from Zeek conn.log (e.g., destination port, protocol, bytes sent, connection duration). The algorithm can group normal traffic into clusters; any connections that do not belong to a cluster (noise points) are anomalous and should be investigated as potential malicious activity."
            ]
          },
          {
            "description": "A container is deployed from an image with a typosquatted name (e.g., `ngnix` instead of `nginx`) or from an unvetted, public repository instead of the organization's sanctioned private registry.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Corporate image registries, DNS resolvers, Network firewalls",
            "action": [
              "(Symbolic) Maintain an allow-list of approved image registries by domain and IP address. In Zeek dns.log and conn.log, monitor for connections to container registry domains not on this list. Alert on any image pull attempts from untrusted or unvetted registries.",
              "(Statistical) From process creation logs (Windows Event ID 4688), extract all deployed image names. Apply a fuzzy string matching algorithm (e.g., Levenshtein distance) to compare each name against a list of approved/common image names. Flag any image name with a low distance score (e.g., distance of 1 or 2) to a known good name, as it may be a typosquatting attempt.",
              "(Machine Learning) Train a classification model to predict the legitimacy of a source registry. Features could include registry domain age, SSL certificate details, historical usage within the organization, and public reputation scores. Use the model to flag deployments from registries classified as 'suspicious' or 'unknown' for manual review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]