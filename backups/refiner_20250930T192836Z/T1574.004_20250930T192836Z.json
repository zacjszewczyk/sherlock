[
  {
    "information_requirement": "Is an adversary achieving persistence on macOS endpoints by hijacking dylib loads in auto-starting applications?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A dynamic library (.dylib) file is written to a disk location that is part of a legitimate, auto-starting application's dylib search path, and the dylib is either unsigned or has a known malicious hash.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_CREATE)",
              "File integrity monitoring logs",
              "macOS code signing logs (e.g., from Santa or osquery)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, specifically LaunchAgent/LaunchDaemon plists, application bundles in /Applications/ and ~/Applications/, and user-writable library paths like ~/Library/.",
            "action": [
              "Symbolic Logic: Upon a dylib file creation event (ESF NOTIFY_CREATE), compute the file's SHA256 hash. Correlate the hash against a threat intelligence feed of known malicious dylibs. Concurrently, inspect the dylib's code signature; generate an alert if it is unsigned, ad-hoc signed, or signed by a developer certificate not on an approved list.",
              "Statistical Method: For each auto-starting application (identified via LaunchAgent/LaunchDaemon configurations), establish a baseline of dylibs loaded at startup using osquery's process_open_files table. Monitor for the creation of new dylibs in the application's search paths (including @rpath locations). Calculate the Jaccard similarity between the new set of potential dylibs and the historical baseline. Alert on a low similarity score (e.g., below a 0.9 threshold) which indicates a significant and suspicious change.",
              "Machine Learning Application: Train a classification model (e.g., Random Forest) to predict if a dylib file write event is malicious. Use features such as: file path entropy, the name of the process that wrote the file, whether the path is user-writable, and the time difference between the file write and the next launch of the associated auto-start application. Flag file writes that are classified with a high probability of being malicious."
            ]
          },
          {
            "description": "A process associated with an auto-start mechanism (e.g., LaunchAgent, LaunchDaemon) loads a dylib from a non-standard, user-writable, or statistically rare directory.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_MMAP, ES_EVENT_TYPE_NOTIFY_EXEC)",
              "osquery process_open_files table",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, focusing on processes spawned by launchd and their file open/memory map events. Network egress points for behavioral correlation.",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers when a process whose parent is launchd (PID 1) loads a .dylib file from a user-writable directory (e.g., /Users/Shared/, /tmp/, or any path within a user's home directory like ~/Downloads). Maintain an exclusion list for known-good software updaters and developer tools.",
              "Statistical Method: For all processes across the environment, calculate the frequency of dylib load paths. Identify paths that are statistical outliers (e.g., in the bottom 5th percentile of frequency). Alert when a process associated with an auto-start item loads a dylib from one of these rare paths, indicating deviation from common behavior.",
              "Machine Learning Application: Use a graph-based anomaly detection model where nodes are processes, dylibs, and file paths, and edges represent 'loads from' relationships. Analyze the graph to find new, unexpected edges connecting an auto-starting process node to a dylib node in a suspicious location (e.g., a path node corresponding to a user's Downloads folder)."
            ]
          },
          {
            "description": "A legitimate, auto-starting macOS process initiates anomalous network communication to an external destination shortly after system boot or user login.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_EXEC)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and macOS endpoints (for process context).",
            "action": [
              "Symbolic Logic: Correlate process execution events at boot/login with network connection logs. Alert if an auto-starting process, which is not expected to make network connections (e.g., a system utility), communicates with any external IP address or resolves a non-local domain.",
              "Statistical Method: For each auto-starting process, baseline normal network behavior (e.g., destination ASN, port, protocol, daily data volume). Use descriptive statistics to flag any activity that exceeds a dynamic threshold, such as connections to a port never used by the process before or a data transfer volume greater than 4 standard deviations above the mean.",
              "Machine Learning Application: Employ a time-series model to forecast the expected network traffic volume and connection count for each auto-starting application. Anomaly detection flags significant, unexplained deviations from the forecast that occur shortly after a user login or system boot event, suggesting its function has been hijacked for C2."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on macOS by exploiting a privileged application's dylib search path?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A dylib is written to a user-writable directory by a low-privilege process, immediately followed by the execution of a SUID/GUID binary or a privileged helper tool known to be vulnerable to dylib hijacking.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)",
              "system.log for authorization events",
              "osquery suid_bin table"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, focusing on SUID/GUID binaries, privileged helper tools, and world-writable directories such as /tmp/ and /Users/Shared/.",
            "action": [
              "Symbolic Logic: Maintain a list of known-vulnerable privileged executables (including SUID binaries and application updaters). Trigger an alert when a .dylib is created in a world-writable path and a process from the vulnerable list is executed by any user within a 60-second window. Correlate with authorization prompts in system.log.",
              "Statistical Method: Profile the dylib loading behavior of all processes that execute with root privileges (UID 0). Establish a baseline of legitimate dylibs and their paths. Alert when a root-level process loads a dylib from a path not in its baseline, especially if the path is user-writable and the dylib's creation timestamp is recent.",
              "Machine Learning Application: Train a sequence analysis model (e.g., an LSTM) on terminal history and ESF event logs. The model learns normal sequences of commands and events that lead to legitimate privileged execution. Flag sequences as anomalous where a dylib file write by a user process precedes a privileged execution via a vulnerable binary."
            ]
          },
          {
            "description": "A process running under a standard user account successfully writes a .dylib file to a protected system or application directory, indicating a separate vulnerability was used to gain write access.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_CREATE)",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Protected macOS directories such as /System/, /Library/, /usr/bin/, /usr/sbin/, and privileged Application bundles in /Applications/.",
            "action": [
              "Symbolic Logic: Create a high-severity alert that triggers on any successful file creation event for a file ending in .dylib within a protected system directory (e.g., /System/Library/Frameworks/, /usr/lib/) where the responsible process is running as a non-root user (UID > 0).",
              "Statistical Method: Baseline file write locations for all standard user accounts. Use descriptive statistics to identify anomalous write events. Alert if a user process writes a file to a directory path that is statistically rare for that user or user group (e.g., a path they have never written to before), particularly if the file is a dylib and the path is a system directory.",
              "Machine Learning Application: Use a one-class SVM (Support Vector Machine) trained on legitimate file modification events by user processes. The model learns a boundary representing normal behavior. Any file write event, particularly a dylib creation in a system path, that falls outside this boundary is flagged as a potential privilege escalation attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using dylib hijacking on macOS for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.004",
        "name": "Dylib Hijacking",
        "evidence": [
          {
            "description": "A trusted, signed macOS process (e.g., Finder, a security agent) initiates network connections to a destination IP or domain on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "macOS Endpoint Security Framework (ESF) logs for process context"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and macOS endpoints running trusted, signed applications.",
            "action": [
              "Symbolic Logic: Ingest a high-confidence C2 threat intelligence feed. For every network connection in Zeek logs, correlate the destination IP/domain against the feed. If a match is found, query the source endpoint to identify the originating process via its PID and timestamp. Generate a high-severity alert if the process is a trusted, signed binary from Apple or a known security vendor.",
              "Statistical Method: For each trusted process (e.g., Safari, Calendar, Mail), create a baseline of normal network behavior, including features like destination ports, JA3/JA3S hashes, and data volume. Calculate the Mahalanobis distance for new connections based on these features. Alert on connections with a high distance score, indicating a statistically significant deviation from the norm.",
              "Machine Learning Application: Use an autoencoder neural network trained on legitimate network connection metadata (tuples of process name, destination port, protocol, data volume) associated with trusted applications. The model will have a high reconstruction error for connections that do not fit the learned pattern, flagging them as anomalies indicative of hijacking."
            ]
          },
          {
            "description": "A legitimate macOS application binary is copied from its original location to a user-writable directory and is subsequently executed from that new path.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_CREATE, ES_EVENT_TYPE_NOTIFY_EXEC)",
              "osquery file and process tables"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on macOS endpoints, such as ~/Downloads, ~/Documents, /Users/Shared/, and /tmp/.",
            "action": [
              "Symbolic Logic: Create a rule to detect when a process name matching a binary in a trusted system path (e.g., /System/Applications/, /Applications/) is executed from a user-writable path (e.g., /Users/*/...). This is a strong indicator of a side-loading setup.",
              "Statistical Method: Calculate the Shannon entropy of process execution paths across the environment. Paths for legitimate applications (e.g., /Applications/Safari.app/Contents/MacOS/Safari) have low entropy. Paths created by adversaries (e.g., /Users/victim/Downloads/a/b/c/Safari) have high entropy. Alert on executions of known-good process names from paths with an entropy score above the 98th percentile for that specific process name.",
              "Machine Learning Application: Use a clustering algorithm (e.g., DBSCAN) on process execution events, using features like process path, parent process name, and user context. This can identify small, dense clusters that represent anomalous execution patterns, such as a trusted app running from a strange location, which are often missed by single-event rules."
            ]
          },
          {
            "description": "A typically non-network-facing, signed macOS process (e.g., Calculator.app, TextEdit.app) initiates any external network connection or spawns a shell.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs (ES_EVENT_TYPE_NOTIFY_EXEC, ES_EVENT_TYPE_NOTIFY_FORK)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints and network egress points.",
            "action": [
              "Symbolic Logic: Maintain a list of signed, non-network-facing applications. Create a high-priority alert that triggers if any process from this list (A) establishes a network connection to an external IP address, or (B) spawns a child process such as zsh, bash, sh, or osascript.",
              "Statistical Method: Profile the child process lineage for all applications. For each parent process, calculate the frequency of its child processes. Alert when a non-network-facing application spawns a child process that is statistically rare for it (e.g., a frequency of <0.01%), such as spawning `curl` or `nc`.",
              "Machine Learning Application: Train a graph-based model on process parent-child relationships. Flag the creation of new, previously unseen edges in the process graph, such as an edge from `Calculator.app` to `zsh`, as a high-confidence indicator of compromise via hijacking."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]