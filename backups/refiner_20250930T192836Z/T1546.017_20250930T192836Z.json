[
  {
    "information_requirement": "Is the adversary maintaining persistence using malicious udev rules?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.017",
        "name": "Udev Rules",
        "evidence": [
          {
            "description": "A udev rule file located in a monitored directory contains a `RUN` directive with a command matching a known threat intelligence signature (e.g., reverse shell command, C2 downloader) or a path to a known malicious executable.",
            "data_sources": [
              "Linux auditd logs",
              "File content scans"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (web servers, database servers, critical application hosts), Linux developer workstations",
            "action": [
              "Symbolic: Implement a SIEM rule or YARA scan that triggers on the content of files in `/etc/udev/rules.d/`, `/run/udev/rules.d/`, `/usr/lib/udev/rules.d/`, `/usr/local/lib/udev/rules.d/`, and `/lib/udev/rules.d/`. The rule should use regular expressions to match `RUN+=` directives containing suspicious commands like `bash -i`, `nc -e`, `curl`, `wget`, or references to scripts in world-writable directories such as `/tmp/`, `/var/tmp/`, or `/dev/shm`.",
              "Statistical: For each udev rule file modification, calculate the Shannon entropy of the `RUN+=` command string. Establish a baseline entropy score for legitimate commands added by package managers or administrators. Alert on commands with an entropy score exceeding a defined threshold (e.g., 95th percentile), which often indicates obfuscated or packed commands.",
              "Machine Learning: Develop a time series model to monitor the frequency of udev rule modifications across the environment. Anomaly detection algorithms (e.g., Seasonal-Hybrid ESD) can identify unusual spikes in modification events that deviate from the established baseline of system updates and administrative activity, potentially indicating a widespread persistence deployment."
            ]
          },
          {
            "description": "A file creation or modification event is logged for a udev rule file, where the initiating process is not a recognized package manager (e.g., `dpkg`, `yum`, `rpm`) or an authorized administrative shell.",
            "data_sources": [
              "Linux auditd logs",
              "Sysmon for Linux Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (web servers, database servers, critical application hosts), Linux developer workstations",
            "action": [
              "Symbolic: Create a SIEM correlation rule that triggers when a file modification event occurs in a udev rules directory. The rule should check if the process name (`proctitle` in auditd) that initiated the change is not in an allowlist of legitimate package managers (`dpkg`, `yum`, `rpm`, `apt-get`) or configuration management tools (`ansible`, `puppet`, `chef`).",
              "Statistical: For each user account (`auid` in auditd), calculate the frequency of udev rule modifications over a rolling 30-day window. Establish a baseline for each user (most will be zero). Alert when a user's modification count deviates significantly from their own baseline (e.g., goes from 0 to 1) or exceeds a population-based statistical threshold (e.g., > 2 standard deviations from the mean for all users).",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) using features from file modification events, such as the parent process name, user ID, terminal session presence (`tty`), and time of day. The model should classify each modification as 'benign' (e.g., system update) or 'suspicious' (e.g., interactive shell modification). Feed alerts from 'suspicious' classifications into the SIEM."
            ]
          },
          {
            "description": "A process is spawned with `systemd-udevd` as its parent, and this child process is either an unexpected binary (e.g., an interpreter like `bash` or `python`) or initiates an outbound network connection to an untrusted destination.",
            "data_sources": [
              "Linux auditd logs",
              "Zeek conn.log",
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers, Linux workstations, Network egress points (for Zeek data correlation)",
            "action": [
              "Symbolic: Create a SIEM rule that triggers when a process creation event (auditd `execve` or Sysmon Event ID 1) has a parent process name of `systemd-udevd`. The rule should alert if the child process name is not on an allowlist of known-good `udevd` helpers or if the child process is an interpreter like `/bin/bash`, `/usr/bin/python`, or `/usr/bin/perl`.",
              "Statistical: For all processes spawned by `systemd-udevd`, build a frequency distribution of the child process names. Alert when a process name appears that is statistically rare (e.g., falls outside the 99th percentile of common processes). Additionally, for any child process that makes a network connection (joined with Zeek conn.log), calculate the rarity of the destination IP/port combination and alert on rare occurrences.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process execution data where the parent is `systemd-udevd`. Features should include the child process name, command-line arguments, user ID, and network connection details (destination IP, port, protocol) from Zeek conn.log. Outlier clusters can represent anomalous executions triggered by a malicious udev rule."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using malicious udev rules?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.017",
        "name": "Udev Rules",
        "evidence": [
          {
            "description": "A udev rule file contains a `RUN` directive with command-line arguments explicitly used for privilege escalation, such as modifying `/etc/passwd`, adding a `NOPASSWD` entry to a sudoers file, or using `chmod u+s` on a binary.",
            "data_sources": [
              "File content scans",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers (web servers, database servers, critical application hosts), Linux developer workstations",
            "action": [
              "Symbolic: Deploy a YARA rule or SIEM search to scan udev rule file content for `RUN+=` directives containing high-confidence privilege escalation strings. Examples include `chmod u+s`, `/etc/passwd`, `/etc/shadow`, `NOPASSWD`, `useradd`, `usermod`, `newgrp`. Trigger a high-severity alert on any match.",
              "Statistical: Analyze the command-line arguments of `RUN+=` directives across all udev rules. Build a TF-IDF (Term Frequency-Inverse Document Frequency) model of terms used in legitimate rules. Flag any rule containing terms that have a high TF-IDF score and are also present on a watchlist of privilege escalation-related keywords (e.g., `sudo`, `chmod`, `passwd`), as this indicates the term is rare globally but prominent in this specific rule.",
              "Machine Learning: Train a text classification model to categorize the intent of `RUN+=` commands. Use a labeled dataset of benign (e.g., `modprobe`, device setup scripts) and malicious (e.g., privilege escalation one-liners) commands. The model can then classify new or modified udev rules in real-time, alerting on those predicted as 'privilege escalation'."
            ]
          },
          {
            "description": "Creation of a udev rule that is configured to execute a script or binary from a world-writable directory like /tmp, /var/tmp, or /dev/shm.",
            "data_sources": [
              "Linux auditd logs",
              "Sysmon for Linux Event ID 11",
              "File content scans"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers, Linux workstations, especially multi-user systems",
            "action": [
              "Symbolic: Create a SIEM rule that parses the command within any `RUN+=` directive found in a new or modified udev rule file. The rule should use a regular expression to extract the executable path and alert if the path resides in a world-writable directory (`/tmp/`, `/var/tmp/`, `/dev/shm`).",
              "Statistical: Maintain a baseline of all executable paths found in the `RUN+=` directives of legitimate udev rules. For any new or modified rule, compare the executable's parent directory against this baseline. Calculate a rarity score for the directory. Alert if a path from a statistically rare directory (like `/tmp`) is used, especially if that directory also has world-writable permissions.",
              "Machine Learning: Use a time series anomaly detection model to monitor the rate of file creations in world-writable directories (`/tmp`, `/var/tmp`). Correlate spikes in file creation activity with subsequent modifications to udev rules that reference those directories. This temporal correlation can link the staging of a payload to the creation of the privilege escalation mechanism."
            ]
          },
          {
            "description": "A process is spawned by `systemd-udevd` with an effective user ID of 0 (root) and subsequently performs sensitive actions, such as writing to system configuration files, creating new user accounts, or establishing a network connection to a non-standard port.",
            "data_sources": [
              "Linux auditd logs",
              "Zeek conn.log",
              "Sysmon for Linux Event ID 1",
              "Sysmon for Linux Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers, Linux workstations, Domain Controllers (for account creation correlation), Network egress points",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a process with parent `systemd-udevd` and `euid=0` is created. The rule should then track subsequent activity from this process. Alert if this process writes to files in `/etc/` or `/boot/`, executes user management binaries (`useradd`, `usermod`, `passwd`), or initiates a network connection (via Zeek conn.log) to a destination IP on a threat intelligence blocklist.",
              "Statistical: For all root processes spawned by `systemd-udevd`, profile their child processes and system call activity. Establish a baseline of normal syscall sequences (e.g., `open`, `read`, `ioctl` on device files). Use a sequence analysis method like n-grams to identify and alert on statistically improbable sequences of syscalls, such as `socket() -> connect() -> execve('/bin/sh')`.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) or Isolation Forest model on the behavior of legitimate root processes spawned by `systemd-udevd`. Features should include the sequence of syscalls, files accessed, network ports used, and CPU/memory consumption. Use the trained model to identify anomalous outliers in real-time, which represent potentially malicious activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]