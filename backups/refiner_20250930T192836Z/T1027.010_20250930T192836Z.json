[
  {
    "information_requirement": "Has the adversary evaded defenses using command obfuscation? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.010",
        "name": "Command Obfuscation",
        "evidence": [
          {
            "description": "A command line contains high-confidence strings, function names, or comments known to be unique to specific obfuscation frameworks (e.g., Invoke-Obfuscation) or malware families.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.",
            "action": [
              "Symbolic: Scan command line arguments and PowerShell script blocks using regular expressions for a curated list of high-fidelity atomic indicators. This includes unique function names ('Invoke-Obfuscation'), comments, or variable names ('$DoIt') from known obfuscators and APT campaigns.",
              "Statistical: Calculate the enterprise-wide frequency of known obfuscation-related keywords (e.g., 'FromBase64String', 'EncodedCommand', 'Bypass'). A sudden spike in the usage rate of a specific keyword, exceeding 3 standard deviations above its 30-day rolling average, indicates a potential campaign and should trigger an alert.",
              "Machine Learning: Train a logistic regression classifier on labeled command line data (benign vs. malicious). Use features such as the presence or absence of a dictionary of known obfuscation keywords and character combinations. Use the model to score new command lines for their likelihood of being malicious based on these IOC-like features."
            ]
          },
          {
            "description": "A command line matches structural patterns characteristic of obfuscation, such as specific keyword combinations, character sequences for string manipulation, or layered encoding syntax.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.",
            "action": [
              "Symbolic: Apply regular expressions to detect common obfuscation structures. For PowerShell, search for patterns like `IEX(New-Object Net.WebClient).DownloadString` combined with Base64. For cmd.exe, detect chained variable substringing (`%VAR:~start,len%`) or excessive use of carets (`^`) to escape characters.",
              "Statistical: Calculate a 'structural complexity' score for each command based on a weighted sum of features like the count of special characters (`^&|+%`), the ratio of non-alphanumeric characters to total length, and the depth of nested parentheses. Establish a baseline score for common processes and alert on commands exceeding the 98th percentile.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on command lines that have been vectorized using TF-IDF on character 3-grams. This will group structurally similar commands. Investigate small, dense clusters that do not correspond to known benign software behavior, as these may represent a new obfuscation variant."
            ]
          },
          {
            "description": "A command line or URI exhibits high statistical abnormality, such as character entropy exceeding the 99th percentile of its established baseline, or an unusual distribution of characters compared to normal commands.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (for Zeek logs) and all enterprise endpoints (for host logs).",
            "action": [
              "Symbolic: Create a rule to flag any single, unbroken alphanumeric string (a 'word') in a command line that is over 100 characters long and contains a mix of upper-case, lower-case, and numeric characters, as this is a strong indicator of a Base64-encoded payload.",
              "Statistical: For each command line, calculate the Shannon entropy of its character distribution. Establish a 7-day rolling baseline of entropy values for each unique parent-child process pair (e.g., `explorer.exe` > `cmd.exe`). Alert when a new command's entropy exceeds the 99th percentile for its corresponding baseline.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA) on the average entropy of command lines observed per host, per hour. A sudden, sustained spike in average command-line entropy on a host can indicate an adversary's interactive session or automated script execution and should be flagged as anomalous."
            ]
          },
          {
            "description": "A command is dynamically constructed, as evidenced by heavy string concatenation, extensive environment variable substitution, or use of input redirection, particularly when launched by a common interpreter (cmd.exe, powershell.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, developer workstations, and administrative jump boxes where scripting and dynamic command generation are common.",
            "action": [
              "Symbolic: Search PowerShell Event ID 4104 logs for script blocks containing string concatenation (`+`) operators combined with invocation keywords (`IEX`, `Invoke-Expression`) in the same block. For cmd.exe, hunt for commands using input redirection (`<`) from a file in a temporary or user-writable directory.",
              "Statistical: For each PowerShell script block (Event ID 4104), calculate the ratio of variable assignment operators (`=`) to the total character count of the script. A high ratio may indicate a script that spends significant effort building a command string before execution. Flag scripts with a ratio in the top 5% of all observed scripts for manual review.",
              "Machine Learning: Train a Random Forest classifier to distinguish between benign and malicious dynamic commands. Use features such as parent process name, count of expanded environment variables (`%VAR%`), presence of redirection characters (`<`, `>`), and the final command line length. Use the model's output score to prioritize alerts."
            ]
          },
          {
            "description": "A single command requires multiple, layered deobfuscation steps to interpret, such as Base64 encoding followed by string reversal, character substitution, or Gzip compression.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems like Domain Controllers and administrator workstations.",
            "action": [
              "Symbolic: Create a chained detection logic that first identifies and decodes a Base64 block. Then, apply a second set of regular expressions to the decoded content to search for further obfuscation indicators like string reversal (`-join ($a[-1..-($a.Length)]`) or compression (`GzipStream`). Generate a high-severity alert if both stages match.",
              "Statistical: For commands flagged as potentially obfuscated by other means (e.g., high entropy), programmatically attempt a series of common decoding steps (Base64, hex, URL-decode). After each attempt, recalculate the Shannon entropy. A significant drop in entropy (e.g., a decrease of > 2.0) after a decoding step is a strong indicator of successful deobfuscation and malicious intent.",
              "Machine Learning: Develop a sequence-aware model, such as a Recurrent Neural Network (RNN), trained on known multi-layered obfuscated scripts. The model processes the command character-by-character, learning to recognize the nested patterns of encoding and logic. The model's final output will be a probability score indicating if the command contains layered obfuscation."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]