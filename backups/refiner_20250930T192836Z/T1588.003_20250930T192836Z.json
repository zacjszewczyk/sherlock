[
  {
    "information_requirement": "Is the adversary acquiring and using stolen or deceptively obtained code signing certificates for targeting?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1588.003",
        "name": "Code Signing Certificates",
        "evidence": [
          {
            "description": "A process is created from an executable signed by a certificate with a thumbprint, serial number, or issuer matching a known-bad entry in a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows AppLocker Event ID 8002",
              "Windows Code Integrity Event ID 3076",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, End-user Workstations, Application Servers, Network Egress Points",
            "action": [
              "Symbolic: Query process creation logs (e.g., Windows Event ID 4688, Sysmon Event ID 1) for all executed PE files. Extract the certificate thumbprint, serial number, and issuer for each signed file from code integrity or AppLocker logs. Join these attributes against a threat intelligence feed of known-malicious certificate indicators. Alert on any match.",
              "Statistical: From network connection logs (Zeek ssl.log), extract certificate subjects and issuers. Calculate the population frequency of each certificate issuer over a 30-day rolling window. Flag any connection using a certificate from an issuer in the bottom 5th percentile of frequency that is also associated with a newly observed executable on the endpoint.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on a labeled dataset of benign and malicious signed executables. Use features such as certificate issuer, subject, validity period, key length, and signature algorithm. Periodically score newly observed signed executables in the environment; investigate files with a high malicious probability score."
            ]
          },
          {
            "description": "A process is executed from a binary signed with a certificate containing deceptive attributes, such as a subject name with typosquatting (e.g., 'Mircosoft') or a legitimate-sounding subject issued by an unexpected Certificate Authority.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows AppLocker Event ID 8002",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints, Public-Facing Web Servers, Software Distribution Points",
            "action": [
              "Symbolic: From process execution and certificate validation logs, extract certificate subject strings. Apply a list of regular expressions designed to detect common typosquatting and masquerading patterns (e.g., 'Micros[o0]ft', 'Go[o0]gle', 'Adob[e3]'). Maintain a static mapping of trusted publishers to their expected Certificate Authorities (CAs). Alert when a binary's publisher name matches a trusted entity but the CA does not.",
              "Statistical: For all certificate subjects observed in logs, calculate the Levenshtein distance between the subject string and a list of high-value brand names ('Microsoft', 'Google', 'Adobe'). Flag certificates where the subject has a low Levenshtein distance (e.g., 1 or 2) to a known brand but is not an exact match. Correlate with other rarity metrics, such as a rare issuer, to increase confidence.",
              "Machine Learning: Use a Natural Language Processing (NLP) model to analyze certificate subject and issuer strings. Train the model to identify characteristics of deceptive names, such as unusual character combinations, high character-level entropy, or similarity to known malicious naming conventions. Score all new certificates and alert on those exceeding a deception threshold."
            ]
          },
          {
            "description": "Execution of code signed by a statistically rare certificate issuer or subject, or a certificate with an unusually short validity period, when compared to an environmental baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows AppLocker Event ID 8002",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers within the enterprise, Network Egress/Ingress Points",
            "action": [
              "Symbolic: Define a static list of 'never-seen-before' certificate issuers. Ingest all certificate data from process creation and TLS sessions. If a certificate is observed from an issuer on the 'never-seen-before' list, trigger an immediate alert for manual investigation. After vetting, the issuer can be moved to a baselined 'seen' list.",
              "Statistical: Over a 30-day rolling window, collect all certificate issuer and subject names from endpoint and network logs. Calculate the frequency of each. Alert on the execution of any binary signed by an issuer or subject that falls below a rarity threshold (e.g., observed less than 5 times or present on <0.1% of hosts). Additionally, calculate the distribution of certificate validity periods and flag any certificate with a duration in the lowest 5th percentile (e.g., < 90 days), excluding known short-term issuers like 'Let's Encrypt'.",
              "Machine Learning: Apply time-series analysis (e.g., ARIMA) to the daily count of newly observed unique certificate issuers. An anomalous spike in the number of new issuers can indicate a widespread campaign using diverse, freshly-acquired certificates. Investigate the specific new issuers and associated executables contributing to the spike."
            ]
          },
          {
            "description": "A new root or trusted publisher certificate is installed into a system's certificate store by a non-standard administrative process or user account.",
            "data_sources": [
              "Windows Event ID 4688",
              "Microsoft-Windows-CAPI2/Operational Event ID 41",
              "Sysmon Event ID 16"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Critical Application Servers, Developer Workstations",
            "action": [
              "Symbolic: Create a watchlist of processes that are not authorized to modify certificate stores (e.g., 'powershell.exe', 'rundll32.exe', binaries in '%TEMP%'). Monitor for certificate installation events (e.g., CAPI2 Event ID 41, Sysmon Event ID 16) and trigger an alert if the initiating process (from correlated Event ID 4688) is on the unauthorized watchlist.",
              "Statistical: Establish a baseline of processes that legitimately install certificates in your environment (e.g., 'gpupdate.exe', specific installer packages). Calculate the frequency of each process performing this action. Alert when a certificate installation is initiated by a process that is statistically rare for this action (e.g., in the bottom 1% of frequency).",
              "Machine Learning: Use an anomaly detection model on host event sequences. Train the model on sequences of events leading up to legitimate certificate installations (e.g., 'svchost.exe' -> 'gpupdate.exe' -> CAPI2 event 41). An anomalous sequence, like 'outlook.exe' -> 'cmd.exe' -> 'certutil.exe -addstore ...', would be flagged for investigation."
            ]
          },
          {
            "description": "Anomalous network traffic to Certificate Revocation List (CRL) or Online Certificate Status Protocol (OCSP) endpoints that are rare, untrusted, or do not correspond to the certificate authorities expected within the enterprise.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Web Proxies",
            "action": [
              "Symbolic: Maintain a static allowlist of known, trusted CRL and OCSP distribution points used by your organization's standard CAs. Monitor all DNS queries (Zeek dns.log) and HTTP connections (Zeek conn.log on port 80) for traffic related to certificate validation. Alert on any connection to a CRL/OCSP endpoint not on the explicit allowlist.",
              "Statistical: From DNS and connection logs, build a frequency distribution of all requested CRL/OCSP domains over a 30-day baseline period. Calculate the entropy of subdomains for each primary validation domain. Alert on requests to domains that fall in a low-frequency percentile (e.g., bottom 1%) or if the entropy of requested subdomains for a given TLD suddenly increases, suggesting algorithmically generated names.",
              "Machine Learning: Implement a time-series anomaly detection model on the volume of requests to new or rare CRL/OCSP domains. A sudden, coordinated spike in requests from multiple internal hosts to a previously unseen validation endpoint could indicate the deployment of a malicious tool signed with a new, adversary-controlled certificate. The model would flag this deviation from the established baseline of validation traffic."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]