[
  {
    "information_requirement": "Is the adversary attempting to evade defensive measures by detecting debuggers?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1622",
        "name": "Debugger Evasion",
        "evidence": [
          {
            "description": "A process, not associated with software development or system administration, queries for registry keys or file paths related to known debuggers (e.g., x64dbg, OllyDbg, WinDbg, IDA Pro).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 10 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard user workstations, Production servers, Critical application servers",
            "action": [
              "Symbolic: Create a detection rule that alerts when a process command line (Windows Event ID 4688) contains 'reg query' or 'dir' targeting a watchlist of debugger-related registry keys (e.g., 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\') or file paths (e.g., '\\program files\\ida\\', '\\x64dbg\\'). Exclude known legitimate processes like installer executables or authorized security tools.",
              "Statistical: For processes accessing debugger-related artifacts (identified via Sysmon Event ID 10 or Windows Event ID 4663), calculate the rarity of this behavior. Establish a baseline of which processes normally access these artifacts. Alert on any process whose access frequency to these paths/keys exceeds 2 standard deviations from its own or its peer group's baseline.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Decision Tree) on process execution events. Use features such as the process name, parent process, command-line arguments, and a binary feature indicating access to a debugger-related artifact. The model will predict the likelihood that the process is malicious."
            ]
          },
          {
            "description": "A process executes and terminates in under one second after loading modules like 'kernel32.dll' or 'ntdll.dll', a pattern consistent with an API-based anti-debug check.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 5 (Sysmon)",
              "Windows Event ID 7 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Virtual Desktop Infrastructure (VDI) instances, Security analysis sandbox environments",
            "action": [
              "Symbolic: Create a rule that correlates a Sysmon Event ID 7 (Image Load) for 'kernel32.dll' or 'ntdll.dll' with a subsequent Sysmon Event ID 5 (Process Terminate) for the same 'ProcessGuid' within a 1-second window. Alert if the process is unsigned or running from a non-standard directory (e.g., '%APPDATA%', '%TEMP%').",
              "Statistical: Calculate the median process lifetime for all executables across the enterprise by correlating Sysmon Event ID 1 and 5. Maintain a ranked list of the shortest-lived processes. Any process consistently appearing in the bottom 1st percentile for lifetime, especially if it's a new or rare process, should be flagged for investigation as a potential 'check-and-exit' binary.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process events, with features like process lifetime, loaded modules, parent process, and file path entropy. Identify clusters of anomalous, short-lived processes that do not group with known legitimate software installers or scripts."
            ]
          },
          {
            "description": "A parent process spawns a child process, and the child process command line includes debugging flags (e.g., '-p', '-pd') targeting the Parent Process ID (PPID).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Symbolic: Create a high-severity alert rule that triggers when a process creation event (Sysmon Event ID 1 or Windows Event ID 4688) shows a command line containing debugger flags (e.g., 'ntsd -p', 'cdb -p') and the target process ID in the command line matches the 'ParentProcessId' field of the event. This is a highly specific and malicious pattern.",
              "Statistical: Analyze the frequency of parent-child process pairs where the child is a known debugger. Create a baseline, which should be zero in most environments. Any deviation from this zero-baseline is a high-confidence anomaly that warrants immediate investigation.",
              "Machine Learning: Use a graph-based analysis model where processes are nodes and parent-child relationships are edges. An edge representing a process spawning a debugger that targets its own parent forms a unique and highly anomalous subgraph pattern ('A -> B', where 'B' is a debugger targeting 'A'). Flag any such pattern for immediate investigation."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary performing discovery by checking for analysis environments like debuggers?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1622",
        "name": "Debugger Evasion",
        "evidence": [
          {
            "description": "A process creation event occurs where the file hash (SHA256, MD5) of the executable matches a known malware sample in threat intelligence feeds, and this malware family is documented to use debugger detection techniques.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Email gateways, Web proxies",
            "action": [
              "Symbolic: For every process creation event with a hash (Sysmon Event ID 1), perform a real-time lookup against an integrated threat intelligence platform. Generate a high-priority alert on any hash match. Enrich the alert with tags indicating the malware's known capabilities, such as 'Debugger-Evasion'.",
              "Statistical: Analyze the prevalence of file hashes across the enterprise. A hash that appears on only one or a very small number of machines (high rarity) and is not associated with legitimate software should be considered suspicious and prioritized for threat intelligence lookups, even if not immediately known to be malicious.",
              "Machine Learning: Train a classifier on file metadata (e.g., hash prevalence, signer information, entropy, file size) to predict if a newly seen executable is malicious. A positive classification should trigger an automated lookup of the hash against external threat intelligence sources for confirmation."
            ]
          },
          {
            "description": "A single parent process spawns multiple child processes within a short time frame (<30 seconds) that execute discovery commands, including queries for debugger process names (e.g., 'tasklist', 'wmic', 'Get-Process').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Domain Controllers",
            "action": [
              "Symbolic: Create a rule that triggers when a single 'ParentProcessGuid' (from Sysmon Event ID 1) is associated with more than three process creation events in 30 seconds, where the child process command lines contain any string from a watchlist: 'tasklist', 'wmic process get', 'fltMc.exe', 'x64dbg.exe', 'windbg.exe', 'idaq.exe'.",
              "Statistical: For each parent process, count the number of distinct discovery-related child processes spawned within a 1-minute window. Establish a baseline for legitimate administrative scripts and tools. Alert when a process exceeds the 99th percentile for this count, indicating an unusually high volume of discovery activity.",
              "Machine Learning: Use sequence analysis (e.g., a Hidden Markov Model) on command-line executions per user or host. Train the model on normal administrative sequences. Flag command sequences that have a low probability of occurring based on the trained model, as these may represent an adversary's discovery script."
            ]
          },
          {
            "description": "A single host exhibits a correlated sequence of events within a 5-minute window: (1) host-based discovery commands (e.g., 'whoami', 'ipconfig', 'tasklist'), followed by (2) internal network scanning, and (3) unusual DNS queries for internal services.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches (for SPAN/TAP port), DNS servers, All Windows endpoints and servers",
            "action": [
              "Symbolic: Create a correlation rule that joins events by 'source_ip'. Trigger an alert if, within 5 minutes, a host generates Windows Event ID 4688 with 'tasklist' or 'net user', AND generates Zeek conn.log events showing connections to >10 unique internal IPs on the same port (e.g., 445), AND generates Zeek dns.log events for non-existent internal domains.",
              "Statistical: For each host, calculate a 'Discovery Score'. Increment the score for each discovery-related command, for each distinct internal IP scanned (Zeek conn.log), and for each internal DNS query (Zeek dns.log) within a rolling 5-minute window. Establish a baseline score for normal host activity. Alert when a host's score exceeds 3 standard deviations above the mean.",
              "Machine Learning: Model host behavior using a composite feature vector including counts of discovery commands, network scan metrics (IPs/ports contacted), and DNS query statistics. Use an anomaly detection algorithm like Isolation Forest to identify hosts whose overall activity profile is abnormal compared to its peers or its own history."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]