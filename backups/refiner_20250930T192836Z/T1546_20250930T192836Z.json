[
  {
    "information_requirement": "Is the adversary establishing persistence via event triggered execution?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "A new or modified event trigger (e.g., Registry Run Key, Startup Folder Item) is created where the associated executable's hash matches a known malicious hash from a threat intelligence feed, or the command-line arguments contain patterns associated with malicious activity.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "File creation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers, Domain Controllers",
            "action": [
              "Symbolic: Continuously monitor Windows Event ID 4657 (Registry Value Modified) for changes to autorun keys (e.g., HKCU\\...\\Run, HKLM\\...\\Run) and file creation logs for new files in startup folders. For any associated process execution (Windows Event ID 4688), extract the file hash and match it against a threat intelligence feed of known malicious file hashes. Alert on any match.",
              "Statistical: For processes created from common persistence locations, calculate the historical frequency of each process name and parent process per host. Using percentile analysis, flag any process that falls below a low frequency threshold (e.g., 5th percentile) for that host or its peer group. Additionally, calculate the Shannon entropy of command-line arguments to detect obfuscation, flagging arguments with scores greater than 2 standard deviations above the baseline for that persistence mechanism.",
              "Machine Learning: Develop a logistic regression model trained on labeled historical data to classify newly created persistence entries. Features should include: process path rarity, command-line argument length and entropy, presence of keywords (e.g., 'powershell', '-enc', 'http'), parent process legitimacy, and whether the file is signed. A high probability score from the classifier indicates a likely malicious persistence attempt."
            ]
          },
          {
            "description": "A modification is detected in a sensitive registry key or system file known to trigger execution (e.g., Image File Execution Options, Winlogon Notify keys, COM CLSIDs), where the new value points to an executable located in a user-writable or non-standard directory (e.g., %APPDATA%, %TEMP%, C:\\Users\\Public).",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers",
            "action": [
              "Symbolic: Create a watchlist of critical registry keys for event-triggered execution (e.g., `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options`, `HKLM\\...\\Winlogon\\Notify`). Monitor Windows Event ID 4657 for any write operations on these keys. Alert if the process performing the modification is not a known trusted installer (e.g., `msiexec.exe`, `TrustedInstaller.exe`) or if the new registry value points to a path in a temporary or user-profile directory.",
              "Statistical: Establish a baseline of all values within the monitored critical registry keys. For any modification, calculate the Levenshtein distance between the old and new value. Flag modifications where the new value is an outlier in terms of path structure or file name compared to the historical baseline for that specific key (e.g., a path that does not end in a known system binary).",
              "Machine Learning: Use an anomaly detection model (e.g., One-Class SVM) trained on the features of legitimate modifications to these sensitive locations. Features should include the modifying process name, parent process name, file path of the new value, and time of day. Any modification that the model flags as a significant deviation from normal administrative activity should be alerted for investigation."
            ]
          },
          {
            "description": "A process that is not on an established baseline of normal startup processes is executed within 2 minutes of a user logon event (Windows Event ID 4624) and subsequently initiates one or more external network connections.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers, Core Network Switches, DNS Servers",
            "action": [
              "Symbolic: Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on source IP and timestamp. Filter for processes created within 2 minutes after a logon event (Windows Event ID 4624). Alert if such a process initiates an outbound connection to an IP address or resolves a domain (Zeek dns.log) on a known C2 threat intelligence list.",
              "Statistical: For each host, create a historical baseline of processes that normally run at startup and their typical network behavior. Monitor for startup processes not in this baseline (low-frequency outlier). For any such process, analyze its network connections from Zeek conn.log. Flag connections to destination ports that are rare for the host (<1st percentile) or connections with a data volume (orig_bytes + resp_bytes) that is more than 3 standard deviations above the average for startup processes.",
              "Machine Learning: Implement a time series analysis model (e.g., ARIMA) on the count of new process creations and network connections per host immediately following logon events. An alert is triggered when the model detects a statistically significant anomaly that deviates from the predicted pattern, suggesting an unexpected process is executing and establishing command and control."
            ]
          },
          {
            "description": "A WMI Event Filter (Event ID 5860) and a WMI Event Consumer (Event ID 5861) are created within 5 minutes of each other, where the consumer is configured to execute a command-line payload exhibiting high entropy or containing script interpreter calls.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5860",
              "Windows Event ID 5861"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers, especially those with management roles",
            "action": [
              "Symbolic: Correlate WMI-Activity Event ID 5860 (Filter created) and 5861 (Consumer created) on the host. Alert if both events occur within a 5-minute window and the Consumer's command-line payload contains suspicious keywords like 'powershell', '-enc', 'IEX', 'DownloadString', or references `vbscript` or `jscript`.",
              "Statistical: For all `CommandLineEventConsumer` creations (Event ID 5861), calculate the Shannon entropy of the command-line payload. Establish a baseline entropy score for legitimate WMI consumer commands in the environment. Alert on any new consumer whose command-line entropy exceeds the 95th percentile of this baseline, indicating potential obfuscation.",
              "Machine Learning: Train a decision tree classifier to identify malicious WMI subscriptions. Features should include: time difference between filter and consumer creation, the process that created the subscription (via Windows Event ID 4688), the type of consumer (`CommandLineEventConsumer`, `ActiveScriptEventConsumer`), and the entropy of the command-line payload. The model's output (malicious/benign) can be used to trigger high-fidelity alerts."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges via event triggered execution?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "A process creation event is observed where the process is running with high integrity (e.g., NT AUTHORITY\\SYSTEM), the parent process is a service host or task scheduler, and the executable's file hash matches a known malicious hash from a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers, Domain Controllers",
            "action": [
              "Symbolic: Filter all process creation events (Windows Event ID 4688) where the `SubjectLogonId` corresponds to the SYSTEM account (0x3e7). Extract the file hash of the `NewProcessName` and compare it against a threat intelligence feed of known malware and privilege escalation tools. Alert on any match.",
              "Statistical: For all processes running as SYSTEM, build a baseline of legitimate executable paths (`NewProcessName`). Alert when a process running as SYSTEM is launched from a path that is statistically rare for privileged processes in the environment (e.g., `%APPDATA%`, `%TEMP%`, or any path not in the top 99th percentile of common SYSTEM process paths).",
              "Machine Learning: Use a supervised classification model (e.g., Random Forest) to determine the likelihood that a SYSTEM-level process is malicious. Features would include: process path, parent process name, command-line arguments, whether the executable is signed, and the age of the executable on disk. The model, trained on known good and bad examples, can provide a risk score for each new high-privilege process execution."
            ]
          },
          {
            "description": "A process is created by a service or scheduled task that has a known path-interception vulnerability (e.g., unquoted service path), and the process executable path corresponds to a malicious file placed in an intermediate directory by an adversary, rather than the intended system binary.",
            "data_sources": [
              "Windows Event ID 4688",
              "File creation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers",
            "action": [
              "Symbolic: Maintain a static list of services with unquoted paths. Monitor process creation events (Windows Event ID 4688) with `services.exe` as a parent. Alert if the `NewProcessName` path does not exactly match the intended executable path, especially if the path includes spaces and the executed file is in a higher-level directory (e.g., `C:\\Program.exe` instead of `C:\\Program Files\\App\\App.exe`).",
              "Statistical: Periodically scan for path-interception vulnerabilities (unquoted paths, weak folder permissions). For any identified vulnerability, establish a baseline of the legitimate process execution path. Monitor for deviation from this path using string similarity algorithms (e.g., Jaro-Winkler) to score the similarity between the observed execution path and the expected path; a low similarity score indicates a potential hijack.",
              "Machine Learning: Use a graph-based anomaly detection model to map relationships between parent processes (like `services.exe`), child processes, and file paths. A legitimate service starting its designated binary forms a consistent pattern. An alert is triggered when a new, anomalous edge appears, such as `services.exe` launching a process from a previously unseen path that is associated with a vulnerable service configuration."
            ]
          },
          {
            "description": "A registry key or file system object controlling an event trigger is modified by a standard user account, and within a short time window, the corresponding trigger executes a process under a high-privilege account context (e.g., SYSTEM).",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations, Windows Servers",
            "action": [
              "Symbolic: Correlate Windows Event ID 4657 (Registry Modify) on known persistence locations with subsequent process creation events (Windows Event ID 4688). Alert if a modification is made by a non-administrative user (`SubjectUserName` is not in a privileged group) and the subsequently triggered process runs as SYSTEM (`SubjectLogonId` is `0x3e7`).",
              "Statistical: Build a profile of which users typically modify which event trigger configurations. If a rare user-key modification is followed by a privileged execution, calculate the time delta. Flag chains of events where the modification is rare and the time delta to privileged execution is below a threshold (e.g., 10 minutes), indicating a direct cause-and-effect relationship.",
              "Machine Learning: Model this as a sequence classification problem. Create event sequences of `[user_privilege, modification_event, target_object, time_delta, execution_event, process_privilege]`. Train an LSTM model to classify sequences as either benign (e.g., software update) or malicious privilege escalation. The model learns the temporal patterns of an attack chain and can flag suspicious sequences in real-time."
            ]
          },
          {
            "description": "A process running as NT AUTHORITY\\SYSTEM, which was initiated by an event trigger mechanism (e.g., Task Scheduler), spawns a child process such as `cmd.exe` or `powershell.exe`, or initiates an external network connection to a destination not on a pre-defined allowlist.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Servers, Domain Controllers, Core Network Switches, DNS Servers",
            "action": [
              "Symbolic: From Windows Event ID 4688, identify processes running as SYSTEM (`SubjectLogonId` is `0x3e7`). Alert if any of these processes spawn a child process with the name `cmd.exe`, `powershell.exe`, or `wscript.exe`. Correlate the SYSTEM process with Zeek conn.log data and alert if it connects to a destination IP on a CTI blocklist.",
              "Statistical: For each SYSTEM process launched by an event trigger (e.g., `taskeng.exe`, `svchost.exe`), build a baseline of normal child processes and network destinations. Alert when a new child process appears that is a statistical outlier (e.g., not in the top 98% of common child processes) or when a network connection is made to a domain with a low prevalence score across the enterprise (e.g., seen by < 5 hosts).",
              "Machine Learning: Use a graph-based anomaly detection algorithm to model the process execution tree. Train the model on legitimate SYSTEM process activity. Flag any newly observed subgraph where a privileged, event-triggered process spawns an unusual sequence of children or interacts with the network in a way that deviates structurally from the learned baseline."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]