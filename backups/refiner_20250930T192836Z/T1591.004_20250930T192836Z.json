[
  {
    "information_requirement": "Is the adversary gathering information about organizational roles?",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1591.004",
        "name": "Identify Roles",
        "evidence": [
          {
            "description": "Inbound network connection attempts from an external IP address that is present on a threat intelligence feed for reconnaissance activity.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DMZ Firewalls, Cloud VPC Flow Logs",
            "action": [
              "Symbolic: Correlate source IP addresses from all inbound Zeek conn.log entries against a high-confidence, frequently updated cyber threat intelligence (CTI) feed of IPs known for scanning or hosting reconnaissance tools. Generate an alert for any match and investigate the scope and targets of their activity.",
              "Statistical: Calculate the ratio of failed connection states (e.g., REJ, RSTO, RSTR) to successful states (e.g., SF) for each external source IP over a 1-hour window. Flag IPs in the top 99th percentile for this failure ratio, as this is indicative of network scanning.",
              "Machine Learning: Develop a classification model (e.g., Logistic Regression, Random Forest) trained on labeled historical data (IPs from CTI feeds vs. benign IPs). Use features such as connection count, distinct ports contacted, connection state distribution, and country of origin to classify new external IPs as 'benign' or 'reconnaissance-related' in near-real-time."
            ]
          },
          {
            "description": "A series of HTTP GET requests from a single external IP to a public-facing web server, where the User-Agent string matches a known scraping tool or the request URI pattern indicates directory enumeration.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, Application Load Balancers, Web Application Firewalls (WAF)",
            "action": [
              "Symbolic: Use regular expressions to search Zeek http.log for User-Agent strings matching a curated list of common reconnaissance and scraping tools (e.g., sqlmap, nikto, dirb, gobuster, feroxbuster, python-requests, scrapy). Alert on any matches from external IP addresses.",
              "Statistical: For each source IP, calculate the Shannon entropy of the requested URI paths over a 5-minute window. A high entropy score, exceeding a baseline percentile (e.g., 98th), can indicate automated enumeration of resources. Additionally, track the rate of 404 'Not Found' responses per IP; a rate exceeding 3 standard deviations above the norm suggests directory brute-forcing.",
              "Machine Learning: Use a time-series forecasting model (e.g., ARIMA) to predict the expected volume of requests per URI for key public assets. A sudden, unpredicted spike in requests from a new or rare source IP, especially for non-existent pages (404s), can indicate a scraping or enumeration attempt."
            ]
          },
          {
            "description": "An external IP address makes connection attempts to a large number of unique destination ports on one or more internal hosts within a short time frame, indicating a port scan.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DMZ Firewalls, External-facing hosts",
            "action": [
              "Symbolic: Create a rule that triggers when a single source IP attempts to connect to more than 20 unique destination ports on any number of hosts within a 1-minute window. This is a classic horizontal or vertical port scan signature.",
              "Statistical: For each external source IP, calculate the count of distinct destination ports contacted over a 15-minute sliding window. Establish a baseline distribution of this metric for all external IPs. Flag any IP whose distinct port count exceeds the 99th percentile of the baseline distribution as a potential scanner.",
              "Machine Learning: Implement a clustering algorithm (e.g., DBSCAN) on connection data, using features like source IP, destination port, protocol, and connection state. Normal traffic will form dense clusters. Network scans from a single source to many ports will appear as noise or a sparse cluster, allowing the algorithm to automatically identify anomalous scanning IPs that do not fit established traffic patterns."
            ]
          },
          {
            "description": "A high volume of failed login events (Windows Event ID 4625) from a single source IP against an external-facing authentication service, where the target usernames follow a pattern (e.g., 'admin', 'hr', 'finance') or show high variability.",
            "data_sources": [
              "Windows Event ID 4625",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Active Directory Federation Services (ADFS), VPN Concentrators, Microsoft Exchange Servers, Public-facing Application Login Portals",
            "action": [
              "Symbolic: Alert when a single source IP generates more than 20 failed logon events (Windows Event ID 4625 with Failure Reason 0xC0000064 'user name does not exist' or 0xC000006A 'bad password') within 5 minutes on a single authentication server.",
              "Statistical: For a single source IP generating a high volume of failed logins, collect all attempted usernames from logs. Calculate the Shannon entropy of this set of usernames. A high entropy score suggests random username guessing, while a very low score could indicate a password spray against a single known account. A score exceeding 3 standard deviations from the mean of normal login activity is anomalous.",
              "Machine Learning: Train a classifier to distinguish between benign failed logins (e.g., a user typo) and malicious enumeration. Features could include: time of day, source IP reputation, number of attempts, variation in usernames from the source IP, and time between attempts. The model can assign a risk score to each burst of failed logins to prioritize alerts."
            ]
          },
          {
            "description": "An external HTTP request successfully downloads a sensitive configuration file (e.g., .git/config, web.config, .env) or accesses an API endpoint known to return user or role information, which is not part of normal user traffic.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, Source Code Repositories, Cloud Storage Buckets",
            "action": [
              "Symbolic: Create a detection rule to monitor Zeek http.log for requests to specific sensitive paths and filenames (e.g., `/.git/config`, `/.env`, `/etc/passwd`, `/api/v1/users/all`). Alert on any successful (HTTP 200) external access to these resources.",
              "Statistical: Establish a baseline of normal file types and sizes downloaded from public web servers using Zeek files.log. Calculate the rarity of each file download event based on its MIME type and path. Flag downloads that are statistical outliers (e.g., have a rarity score in the top 99.5th percentile) for manual review, as this may indicate exfiltration of a discovered sensitive file.",
              "Machine Learning: Use an anomaly detection model on API traffic. After baselining normal API endpoint usage, parameters, and response sizes, the model can detect deviations. For example, a request to a user-lookup API with a wildcard parameter, or a response size that is orders of magnitude larger than normal, could indicate an adversary successfully enumerating all users via an insecure API."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]