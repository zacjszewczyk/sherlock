[
  {
    "information_requirement": "Is the adversary performing reconnaissance against our perimeter using wordlist scanning? (PIR)",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1595.003",
        "name": "Wordlist Scanning",
        "evidence": [
          {
            "description": "A direct match between the source IP of an inbound web request and an IP address on a threat intelligence feed categorized as a known scanner, botnet, or malicious actor.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points (e.g., Firewalls, Edge Routers)",
            "action": [
              "Symbolic Logic: Continuously join the source IP address (`id.orig_h`) from Zeek conn.log and http.log against a threat intelligence database of known malicious IPs. Generate a high-severity alert for any successful match.",
              "Statistical Method: For an IP that matches a threat feed, calculate the ratio of failed (4xx/5xx) to successful (2xx) connections. If this ratio exceeds the 98th percentile for all external traffic over the last 30 days, escalate the alert priority.",
              "Machine Learning: Use a supervised classification model (e.g., Random Forest) trained on labeled historical data. Features should include the IP's presence on threat lists, connection frequency, bytes sent/received, and protocol distribution. An output probability score above 0.9 indicates a high likelihood of malicious intent and should trigger an investigation."
            ]
          },
          {
            "description": "The `user_agent` field in an HTTP request contains a substring that exactly matches a known web scanning tool (e.g., 'gobuster', 'dirb', 'ffuf', 'nikto').",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, Application load balancers",
            "action": [
              "Symbolic Logic: Use regular expressions to search the `user_agent` field in Zeek http.log for a maintained list of scanning tool names. Generate an alert on any match.",
              "Statistical Method: Calculate the frequency of all User-Agent strings across the enterprise. Alert on any User-Agent string that has never been observed before and is associated with a request rate from a single source IP exceeding 5 requests per second.",
              "Machine Learning: Develop a character-level NLP model (e.g., using an LSTM) to classify User-Agent strings as 'benign-browser', 'benign-script', or 'malicious-scanner'. Train the model on labeled datasets and apply it to new http.log entries to flag suspicious agents that are not on a static signature list."
            ]
          },
          {
            "description": "A single external source IP address generating a rate of HTTP requests resulting in client or server errors (e.g., HTTP 404, 403) that is a statistical outlier compared to a 30-day baseline.",
            "data_sources": [
              "Zeek http.log",
              "Microsoft-IIS-Logging"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, API Gateways",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a single source IP (`id.orig_h`) generates more than 100 requests with a status code of 404 or 403 within a 1-minute window to any web server.",
              "Statistical Method: For each source IP, calculate the ratio of error responses (4xx/5xx) to total responses over a 5-minute window. Establish a dynamic baseline for this ratio using a 30-day moving average. Flag any IP whose error ratio exceeds 3 standard deviations from the mean.",
              "Machine Learning: Use a time-series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) on the count of 404 errors per source IP. The model learns the normal pattern of errors and flags IPs that cause a statistically significant and unexpected spike in the error count."
            ]
          },
          {
            "description": "A high volume of DNS queries for cloud storage endpoints (e.g., *.s3.amazonaws.com, *.blob.core.windows.net) from a single source, followed by connection attempts exhibiting enumerative naming patterns.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud storage account boundaries (e.g., AWS account, Azure subscription), Corporate DNS resolvers",
            "action": [
              "Symbolic Logic: Monitor Zeek dns.log for queries containing known organizational keywords (e.g., 'acme-prod', 'acme-dev') directed at cloud storage domains. Alert if a single source IP makes more than 50 such queries in 10 minutes.",
              "Statistical Method: For each source IP making requests to cloud storage hostnames, extract the requested bucket/container name. Calculate the Levenshtein distance between successive request names. A consistently low average distance (e.g., < 3) indicates sequential or minor permutation scanning. Flag IPs exhibiting this behavior.",
              "Machine Learning: Use a clustering model (e.g., DBSCAN) on features from connection logs to cloud services, including source IP, request frequency, and the character distribution of requested resource names. The model can group normal activity and identify scanners as noise or small, dense, anomalous clusters."
            ]
          },
          {
            "description": "A single source IP making a high number of requests to a valid URI endpoint while systematically varying the URL query parameters at a rate that is a statistical outlier.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web applications with complex user inputs, API endpoints",
            "action": [
              "Symbolic Logic: Create a rule to detect if a source IP sends requests to the same URI path with query parameters containing common fuzzing payloads (e.g., `' OR 1=1`, `../../`, `<script>`).",
              "Statistical Method: For a given source IP and URI path, calculate the Shannon entropy of the set of unique query parameter keys observed within a 5-minute window. A high entropy value compared to the baseline for that endpoint suggests parameter fuzzing. Alert if the entropy score is above the 99th percentile.",
              "Machine Learning: Implement an autoencoder to learn the normal structure of URLs (path + parameters) for the application. Feed all incoming requests through the model and measure the reconstruction error. Requests that are poorly reconstructed (high error) are anomalous and likely represent attempts to find hidden or vulnerable parameters."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]