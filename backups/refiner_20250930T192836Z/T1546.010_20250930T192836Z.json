[
  {
    "information_requirement": "Is the adversary maintaining persistence using AppInit DLLs?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.010",
        "name": "AppInit DLLs",
        "evidence": [
          {
            "description": "The AppInit_DLLs registry value in HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or its Wow6432Node equivalent is modified to reference a DLL whose file hash matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows workstations and servers",
            "action": [
              "Symbolic Logic: Monitor Windows Event ID 4657 for modifications to `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs` or `HKLM\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs`. Extract the full DLL path from the event. Hash the specified DLL file (e.g., SHA256) and compare the hash against a threat intelligence feed of known malicious file hashes. Alert on any match.",
              "Statistical Analysis: For all modifications to the AppInit_DLLs registry value, calculate the enterprise-wide frequency of the parent directory of the new DLL. Alert if the parent directory's frequency falls below the 5th percentile, indicating a rare or unusual location that deviates from standard software installation paths.",
              "Machine Learning: Train a decision tree or random forest classifier on features extracted from AppInit_DLLs modification events. Features should include: process name modifying the key (e.g., reg.exe, powershell.exe, msiexec.exe), path string entropy of the DLL, rarity of the DLL filename, and whether the DLL is digitally signed. Use the model to classify each modification event as 'benign' or 'malicious'."
            ]
          },
          {
            "description": "The AppInit_DLLs registry value is modified to contain a file path pointing to a non-standard or suspicious directory, such as a user profile, temporary folder, or public-writable location.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, specifically user profile directories and temporary file system locations",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers on any modification to the `AppInit_DLLs` value (Windows Event ID 4657) where the new path contains strings like `C:\\Users\\`, `C:\\Windows\\Temp\\`, `\\AppData\\`, or matches a UNC path format (`\\\\server\\share\\...`).",
              "Statistical Analysis: Calculate the string entropy of all DLL paths added to the `AppInit_DLLs` value across the environment. Establish a baseline of entropy scores for legitimate paths (e.g., from `C:\\Program Files\\...`). Alert on any new path with an entropy score exceeding 2 standard deviations from the mean, which may indicate a randomized or obfuscated path.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on the string representations of file paths added to `AppInit_DLLs`. Analyze clusters of outliers or very small clusters, as these represent paths that do not conform to the common patterns of legitimate software installers and system files."
            ]
          },
          {
            "description": "A sequence of events occurs where the AppInit_DLLs registry key is modified, followed by common GUI processes (e.g., explorer.exe) exhibiting anomalous behavior like spawning command shells or making new network connections.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, Network Gateway, DNS servers",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a modification to `AppInit_DLLs` (Windows Event ID 4657) is followed within 10 minutes on the same host by a common process (e.g., `explorer.exe`, `outlook.exe`) spawning `cmd.exe` or `powershell.exe` (Windows Event ID 4688) or initiating a new external connection to a low-reputation IP address (Zeek conn.log).",
              "Statistical Analysis: After an `AppInit_DLLs` modification event, monitor the count of distinct destination domains queried (from Zeek dns.log) by processes that load user32.dll on that host. Compare this activity to a 30-day rolling baseline for that host/user. An increase of more than 3 standard deviations in the count of new domains queried post-modification should be flagged for review.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., LSTM) for key host behaviors, such as process creation rate, network connection volume, and DNS query count. If an `AppInit_DLLs` modification event occurs, flag any subsequent anomalies detected by the time-series model on that host as a potentially correlated malicious event sequence."
            ]
          },
          {
            "description": "The 'RequireSignedAppInit_DLLs' security setting is disabled (set to 0) in the registry, particularly in close temporal proximity to a modification of the 'AppInit_DLLs' value.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows endpoints and servers, especially those running Windows 8 or newer",
            "action": [
              "Symbolic Logic: Create a high-severity alert for any modification to the registry value `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\RequireSignedAppInit_DLLs` (Windows Event ID 4657) where the new value is set to `0`. This action is inherently suspicious and should be investigated immediately.",
              "Statistical Analysis: Track the frequency of `RequireSignedAppInit_DLLs` modifications across the enterprise. As this value should be static, any modification is an anomaly. Calculate the count of modifications per host over a 90-day period. Any host with a count greater than 0, without a corresponding change request, is a high-confidence outlier.",
              "Machine Learning: Use a sequence analysis model to detect the specific pattern of `RequireSignedAppInit_DLLs` being set to `0` followed within one hour by a modification to `AppInit_DLLs` on the same host. A simple state machine or a Hidden Markov Model (HMM) can be trained to recognize this specific state transition as a high-risk indicator of a deliberate attempt to bypass security controls."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges using AppInit DLLs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.010",
        "name": "AppInit DLLs",
        "evidence": [
          {
            "description": "A DLL file written to disk and then referenced by the AppInit_DLLs registry key is identified by its hash or name as a known privilege escalation tool or malware component.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Threat Intelligence Platform data",
            "action": [
              "Symbolic Logic: Upon detection of an `AppInit_DLLs` modification (Windows Event ID 4657), extract the DLL path. Hash the file and correlate the hash and filename against a curated threat intelligence database specifically tagged with 'privilege-escalation' tools or malware families. An exact match is a critical alert.",
              "Statistical Analysis: Maintain a baseline of all DLLs loaded via AppInit across the enterprise. If a DLL known for privilege escalation (e.g., a Mimikatz component) is loaded on a host for the first time, this represents a statistically significant deviation (first occurrence) and should be flagged, even if not on a CTI watchlist.",
              "Machine Learning: Train a classifier to identify privilege escalation tools based on file characteristics. Features can include file size, entropy, PE import/export functions (e.g., presence of LsaEnumerateLogonSessions, OpenProcessToken), and embedded strings. When a new DLL is added to `AppInit_DLLs`, run it through this classifier to get a 'privesc-tool' probability score."
            ]
          },
          {
            "description": "A process running with standard user privileges modifies the AppInit_DLLs key, and shortly thereafter, a new process is created on the same system with an elevated security token.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially multi-user systems",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when: 1) A modification to `AppInit_DLLs` (Windows Event ID 4657) is performed by a process with a standard user security context. 2) Within 5 minutes on the same host, a new process is created (Windows Event ID 4688) with an elevated token (`TokenElevationType` == `Type2`) and is known to load user32.dll (e.g., `mmc.exe`, `taskmgr.exe`).",
              "Statistical Analysis: For each user, baseline the rate at which they launch elevated processes. After an `AppInit_DLLs` modification event is attributed to a user-level process, monitor for a statistically significant spike (e.g., > 3 standard deviations above their baseline) in the rate of elevated process creation by that user account on the affected host.",
              "Machine Learning: Use a graph-based analysis model where nodes are processes and users, and edges represent actions (registry modify, process create). A path in the graph showing `User Process -> Modifies AppInit_DLLs -> Starts -> Privileged Process` represents a potential privilege escalation chain. Apply graph algorithms to score the risk of such paths."
            ]
          },
          {
            "description": "A privileged process, launched after an AppInit DLL is registered, performs actions inconsistent with its established baseline, such as spawning a shell, accessing credential stores, or making external network connections.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Core Windows Servers, Network Gateway, DNS Servers",
            "action": [
              "Symbolic Logic: After an `AppInit_DLLs` modification (Windows Event ID 4657), trigger focused monitoring on the host. Alert if any privileged process (e.g., `lsass.exe`, `services.exe`) subsequently spawns a command shell (`cmd.exe`, `powershell.exe`) (Windows Event ID 4688), accesses the SAM registry hive (`OBJECT: \\REGISTRY\\MACHINE\\SAM`) (Windows Event ID 4663), or communicates with an external IP address (Zeek conn.log).",
              "Statistical Analysis: Establish a baseline of normal behavior for critical privileged processes, including typical child processes, network traffic volume, and file access patterns. Following an `AppInit_DLLs` modification, compare the behavior of newly started privileged processes against this baseline. Use a multi-metric scoring system where deviations (e.g., >2 standard deviations in network bytes sent, a child process in the bottom 1% of frequency) contribute to a risk score.",
              "Machine Learning: Train an autoencoder on telemetry from benign privileged processes (e.g., parent-child relationships, network connection tuples, files accessed). After an `AppInit_DLLs` modification, feed telemetry from newly started privileged processes on that host into the trained autoencoder. A high reconstruction error indicates the process behavior is anomalous and does not match the learned pattern of benign activity."
            ]
          },
          {
            "description": "A process, affected by a suspicious AppInit DLL, creates a new child process with a higher integrity level (e.g., Medium to High) than the parent process.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Symbolic Logic: Create a rule to detect when a process creation event (Windows Event ID 4688) shows a parent process with a 'Medium' integrity level spawning a child process with a 'High' or 'System' integrity level. Correlate this with an `AppInit_DLLs` modification (Windows Event ID 4657) within the last hour on the same host to increase confidence.",
              "Statistical Analysis: For each parent process name (e.g., `explorer.exe`), track the distribution of integrity levels of its child processes across the enterprise. Following an `AppInit_DLLs` modification, if `explorer.exe` on the affected host spawns a child process with an integrity level that is statistically rare for `explorer.exe` children (e.g., 'System' integrity, which might be in the 0.1th percentile), flag it as a potential escalation.",
              "Machine Learning: Use a classification model to predict the expected integrity level of a child process based on features of the parent process (name, user context) and child process (name). If the model predicts 'Medium' integrity but the actual observed integrity level is 'High' or 'System', and this occurs after an `AppInit_DLLs` modification, classify this event sequence as a high-risk privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]