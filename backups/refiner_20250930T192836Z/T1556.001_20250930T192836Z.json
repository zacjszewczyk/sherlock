[
  {
    "information_requirement": "Is the adversary maintaining persistence on the domain controller via patched authentication?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "A new DLL value is added to the multi-string registry key HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages on a domain controller.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Monitor for registry value modifications (Windows Event ID 4657) to 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' on all domain controllers. Maintain a list of known-bad authentication package DLLs (e.g., mimilib.dll). Alert on any event where the new value added to the key matches an entry on the malicious list or if the new DLL is not signed by Microsoft.",
              "Statistical: Establish a baseline of the values within the 'Security Packages' registry key across all domain controllers. Calculate a fleet-wide frequency for each package. Any new package that is a statistical outlier (e.g., present on only one DC) should be flagged for review. Track the rate of change for this key; a change outside of a scheduled patching window is anomalous.",
              "Machine Learning: Develop a time-series model to forecast expected changes to the 'Security Packages' registry key based on historical patching cycles. An observed modification that deviates significantly from the forecast (an anomaly) should generate an alert. Use a classification model trained on file properties (e.g., entropy, signature status, import table) of known-good vs. known-bad security packages to score any new DLL added to the key."
            ]
          },
          {
            "description": "A process is created on a domain controller with command-line arguments containing substrings indicative of Mimikatz skeleton key functionality (e.g., 'misc::skeleton').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Create a detection rule that searches process creation events (Windows Event ID 4688) on domain controllers for command-line arguments containing specific keywords like 'misc::skeleton', 'privilege::debug', or 'sekurlsa::'. Alert on any match.",
              "Statistical: Analyze command-line arguments on domain controllers by calculating the entropy of the command string. Unusually high entropy can indicate obfuscated or packed commands. Establish a baseline of common parent-child process relationships on DCs and flag any new or rare relationship, especially those involving PowerShell or cmd.exe.",
              "Machine Learning: Train a classification model (e.g., logistic regression) on features extracted from command lines (length, special character count, presence of keywords, entropy) to distinguish between benign administrative commands and malicious commands. Use the model to score all new commands on domain controllers in real-time."
            ]
          },
          {
            "description": "A successful logon event (Logon Type 2, 3, or 10) is recorded on a domain controller for a user account that is flagged as 'disabled' or 'expired' in Active Directory.",
            "data_sources": [
              "Windows Event ID 4624",
              "Active Directory User Account Attributes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database",
            "action": [
              "Symbolic: Periodically query Active Directory for all disabled or expired accounts. Ingest this list into the SIEM. Create a correlation rule that joins this list with successful authentication events (Windows Event ID 4624). Any successful logon for an account on the disabled/expired list is a high-fidelity alert.",
              "Statistical: Track the count of successful logons for disabled/expired accounts over time. The baseline count should be zero. Any non-zero value is a significant statistical anomaly. Report the rate of these events per hour to quantify the scope of the abuse.",
              "Machine Learning: Use a time-series model to monitor the volume of distinct disabled accounts successfully authenticating. A sudden spike from zero indicates the initial compromise, while a subsequent increase in the variety of accounts used can indicate the adversary is actively expanding their internal access."
            ]
          },
          {
            "description": "A successful interactive logon (Logon Type 2, 7, or 10) to a domain controller is recorded for a user account, where that account has no history of such logons in the preceding 90 days.",
            "data_sources": [
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Filter Windows Event ID 4624 on domain controllers for Logon Type 2, 7, or 10. Maintain a lookup table of accounts authorized for interactive logon to domain controllers. Alert if any account not on this list successfully performs an interactive logon.",
              "Statistical: For each user account, build a historical profile of logon types to domain controllers over a 90-day rolling window. Calculate the frequency of each logon type. If an account performs an interactive logon and its historical frequency for that logon type is zero (a 'first-time seen' event), flag it as anomalous.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) to group user accounts based on their typical logon behavior (logon types, frequency, times of day). A service account that suddenly moves from a 'non-interactive' cluster to an 'interactive' cluster represents a state change anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by patching domain controller authentication?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "A process is created on a domain controller where the process name (e.g., 'mimikatz.exe') or the original filename from the PE header matches a known malicious tool associated with credential dumping or authentication patching.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Monitor process creation events (Sysmon Event ID 1) on all domain controllers. Compare the 'Image' and 'OriginalFileName' fields against a threat intelligence feed of malicious tool names. Alert on any match.",
              "Statistical: Establish a baseline of all process names executed on domain controllers. Calculate the frequency of each process. A process name that is extremely rare (e.g., seen only once in 30 days across the fleet, falling in the lowest percentile) should be flagged for investigation, especially if it is not signed by a trusted publisher.",
              "Machine Learning: Train a classification model to score process names for maliciousness based on n-grams and character-level features. This can help detect slight variations of known tool names (e.g., 'm1m1katz.exe') designed to evade simple string matching."
            ]
          },
          {
            "description": "A process requests access to the lsass.exe process memory on a domain controller, where the requesting process is not a known, legitimate system process (e.g., wininit.exe, services.exe).",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Monitor for Sysmon Event ID 10 events where the 'TargetImage' is 'lsass.exe'. Maintain a whitelist of legitimate 'SourceImage' processes (e.g., 'wininit.exe', specific EDR/AV processes). Alert on any process accessing lsass.exe that is not on the whitelist, especially if the access mask requests extensive permissions like 0x1010.",
              "Statistical: Profile the frequency of different processes accessing lsass.exe. A process that has never accessed lsass.exe before (a 'first-time' access) is a statistical anomaly. Further, analyze the distribution of access masks requested; a request for an unusual or high-privilege access mask compared to a process's baseline is suspicious.",
              "Machine Learning: Use a sequence anomaly detection model on the events leading up to lsass.exe access. A model can learn the normal sequence of process creations and API calls. A sequence involving process creation from an unusual directory, followed by loading suspicious DLLs, and then accessing lsass.exe would be flagged as a multi-stage anomaly."
            ]
          },
          {
            "description": "A file modification or creation event is recorded for a critical authentication-related DLL (e.g., cryptdll.dll, msv1_0.dll) in the System32 directory of a domain controller, where the event is not associated with a trusted installer process.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Enable File System Object Access Auditing on domain controllers for C:\\Windows\\System32. Monitor for Write or Delete events on a list of critical DLLs (msv1_0.dll, samsrv.dll, etc.). Whitelist the 'TrustedInstaller.exe' process during approved maintenance windows. Alert on any modification by a non-whitelisted process.",
              "Statistical: Establish a baseline hash for each critical authentication DLL on all domain controllers. Periodically re-calculate the hashes and compare against the baseline. Any hash mismatch is a high-fidelity indicator of tampering. Track the rate of file modifications in the System32 directory; a sudden spike in modifications outside of a patch window is a statistical anomaly.",
              "Machine Learning: Use a time-series model to predict file modification events in the System32 directory based on historical patching data. An unpredicted modification event is an anomaly. A classification model can also score the process that performed the modification based on its properties (name, path, parent process) to determine if it is a suspicious actor."
            ]
          },
          {
            "description": "For an interactive or remote logon to a domain-joined resource where MFA is enforced, a successful primary authentication event (Windows Event ID 4624) is logged without a corresponding successful MFA event from the MFA provider for that user within a 2-minute time window.",
            "data_sources": [
              "Windows Event ID 4624",
              "MFA Provider Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, MFA Authentication Servers, Network Gateway",
            "action": [
              "Symbolic: For each successful remote logon (Windows Event ID 4624, Logon Type 10), perform a lookup against the MFA provider logs for a successful authentication event for the same user within a +/- 2-minute window. If no corresponding MFA success event is found, generate an alert.",
              "Statistical: For each user, calculate the ratio of successful Windows logons to successful MFA logons over a rolling time window. The expected ratio should be close to 1.0 for MFA-enforced systems. A sudden drop in this ratio (e.g., many Windows logons but few MFA logons) is a statistical indicator of a potential bypass.",
              "Machine Learning: Train a time-series model on the log event stream for a user session (e.g., VPN connect -> Windows logon -> MFA success). The model learns the expected sequence and timing of these events. An observed sequence that deviates from the learned pattern, such as a missing MFA success event, is flagged as a sequence anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary accessing credentials or accounts via patched domain controller authentication?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "A successful logon event (Windows Event ID 4624) is recorded for a designated honey-token account, which is a disabled account with no legitimate use case.",
            "data_sources": [
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database",
            "action": [
              "Symbolic: Create one or more disabled user accounts in Active Directory to serve as honey-tokens. Create a high-priority detection rule that triggers an immediate alert upon any successful logon event (Windows Event ID 4624) where the 'TargetUserName' matches a honey-token account.",
              "Statistical: The baseline logon frequency for a disabled honey-token account is zero. Any successful logon is therefore an infinite statistical deviation from the norm. Track the number of unique honey-token accounts that have successful logons over time; an increasing count indicates the adversary is actively discovering and using them.",
              "Machine Learning: Use a classification model on the source of the logon (IP address, hostname) to automatically enrich the alert with context, classifying the source as internal/external, trusted/untrusted, or matching known adversary infrastructure."
            ]
          },
          {
            "description": "A failed logon event (Windows Event ID 4625, Status Code 0xc000006d) is followed within 5 seconds by a successful logon event (Windows Event ID 4624) for the same user account from the same source IP address.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a Windows Event ID 4625 (Status Code 0xc000006d) is immediately followed by a Windows Event ID 4624 from the same 'IpAddress' for the same 'TargetUserName' within a 5-second window. This is a specific behavioral signature for skeleton key usage.",
              "Statistical: The time delta between a user's failed logon (4625) and subsequent successful logon (4624) can be analyzed. A distribution of these time deltas clustered near zero for a specific user or source IP is highly anomalous compared to normal user behavior (who may wait longer before re-typing a password).",
              "Machine Learning: Use a sequence analysis model to detect the specific 'fail-then-succeed' event pattern in the stream of authentication logs. The model can learn to distinguish this malicious pattern from benign behavior by considering the timing, frequency, and source of the events."
            ]
          },
          {
            "description": "Following a successful network logon (Logon Type 3), a user account generates logon events on a number of distinct destination hosts that exceeds the 99th percentile of their historical 1-hour activity baseline.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Member Servers, User Workstations, Network Segments",
            "action": [
              "Symbolic: After a successful logon, track the subsequent network connections (e.g., from Zeek conn.log). If the user account attempts to connect to a list of predefined 'crown jewel' assets that it is not authorized to access, trigger an alert.",
              "Statistical: For each user account, build a rolling 30-day baseline of the number of distinct destination hosts accessed per hour. Use percentile-based thresholding to alert when an account's activity in a given hour exceeds its own 99th percentile. This is a form of user behavior analytics (UBA) to detect lateral movement.",
              "Machine Learning: Use a graph-based clustering algorithm to model normal user-to-host access patterns. An edge in the graph represents a user logging into a host. A user who suddenly creates edges to a new cluster of hosts they do not normally interact with would be flagged as a community detection anomaly."
            ]
          },
          {
            "description": "Two successful logon events are recorded for the same user account from two different source IP addresses, where the geographic distance between the IPs and the time elapsed between logons implies a velocity greater than 600 mph.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, Network Gateway",
            "action": [
              "Symbolic: For every successful logon (Windows Event ID 4624), geolocate the source IP address. If the source country is on a 'blocked countries' list, alert immediately. This is a simple geographic IOC rule.",
              "Statistical: For each new successful logon, calculate the great-circle distance and time delta from the user's previous logon. Compute the required travel velocity. If the velocity exceeds a plausible speed (e.g., 600 mph), this is a statistical impossibility. Alert on this 'impossible travel' event.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to identify a user's typical geographic logon clusters (e.g., 'Office', 'Home', 'Mobile Carrier'). A logon from a location far outside any established cluster is a spatial anomaly. A time-series model can also track a user's logon velocity over time to detect sudden, anomalous jumps."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]