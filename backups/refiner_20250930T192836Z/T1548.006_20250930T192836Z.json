[
  {
    "information_requirement": "Has the adversary escalated privileges by manipulating macOS TCC?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.006",
        "name": "TCC Manipulation",
        "evidence": [
          {
            "description": "An unauthorized or unexpected process performs a write operation to the TCC.db SQLite database, located at `/Library/Application Support/com.apple.TCC/TCC.db` or `~/Library/Application Support/com.apple.TCC/TCC.db`.",
            "data_sources": [
              "ESF ES_EVENT_TYPE_NOTIFY_WRITE events",
              "ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "File hash repository"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, particularly those of developers, administrators, and executives.",
            "action": [
              "Symbolic (IOC): Create a watchlist of unauthorized process names or hashes known to manipulate TCC.db. Query ESF file write events where the target file path is `TCC.db`. Alert if the process performing the write action matches an entry on the watchlist or is not a known legitimate system process (e.g., `tccd`).",
              "Statistical: Establish a baseline of processes that legitimately write to TCC.db (e.g., `tccd`, `systemuiserver`). Profile the frequency of writes per process over a 30-day period. Generate an alert when a process not in the baseline writes to TCC.db, or when a baselined process exhibits a write frequency greater than 3 standard deviations above its normal behavior.",
              "Machine Learning: Train a random forest classifier on process and file event features (process name, parent process, file path, process signature validity, command-line arguments) to predict malicious TCC.db modification. Label known-good events (e.g., legitimate permission grants) as 'benign' and known-bad (from threat intel) as 'malicious'. Deploy the model to score new write events in real-time."
            ]
          },
          {
            "description": "The `sqlite3` command-line utility is executed with the TCC.db file path as an argument, indicating direct, programmatic database manipulation.",
            "data_sources": [
              "ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "Process command-line argument logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints within the enterprise.",
            "action": [
              "Symbolic (IOC): Create a detection rule that searches process execution logs for the process name `sqlite3` where the command-line arguments contain the string `TCC.db`. Alert on any match, as this is highly anomalous behavior for a typical user or system process.",
              "Statistical: Establish a baseline of parent processes that spawn `sqlite3`. Legitimate use is rare. Calculate the frequency of `sqlite3` executions per parent process. Alert if `sqlite3` is spawned by an uncommon parent (e.g., a web browser, Office document, or a process running from a temporary directory), representing a statistically rare parent-child relationship.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) on the frequency of `sqlite3` executions across the fleet of macOS endpoints. A sudden spike in `sqlite3` usage, especially when targeting TCC.db, across one or more machines would be flagged as an anomaly indicative of a coordinated attack."
            ]
          },
          {
            "description": "A process with Full Disk Access (e.g., Finder, Terminal) spawns a child process that is unsigned, runs from a non-standard path (e.g., `/tmp`, `~/Downloads`), and subsequently initiates an outbound network connection.",
            "data_sources": [
              "ESF ES_EVENT_TYPE_NOTIFY_FORK events",
              "ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "Process code signature information",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Privileged user workstations, developer machines, and macOS servers.",
            "action": [
              "Symbolic (IOC): Hunt for specific parent-child relationships where a TCC-privileged parent (e.g., `Finder.app`) spawns a suspicious child (e.g., `sh`, `bash`, `python`) that executes a script from a world-writable directory like `/tmp` or `~/Downloads`.",
              "Statistical: Build a frequency table (baseline) of all parent-child process relationships across the environment. Calculate the rarity of each observed pairing. Alert on pairings that fall below a low percentile threshold (e.g., < 1st percentile), indicating a highly unusual and suspicious event.",
              "Machine Learning: Use a graph-based anomaly detection algorithm on process ancestry data. A graph where a node representing an unsigned script is spawned by a trusted utility and then makes a network connection to a low-reputation IP would be flagged as a high-scoring anomalous subgraph."
            ]
          },
          {
            "description": "An application's code signature hash is added to the TCC.db within seconds of its first execution on the system, without a corresponding user approval event in the macOS Unified Log.",
            "data_sources": [
              "macOS Unified Log",
              "ESF ES_EVENT_TYPE_NOTIFY_WRITE on TCC.db",
              "ESF ES_EVENT_TYPE_NOTIFY_EXEC events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, with a focus on monitoring for new application installations.",
            "action": [
              "Symbolic (IOC): Search for log event sequences where a process writes an `INSERT` statement to TCC.db within 60 seconds of that same process's first-ever execution event on the endpoint.",
              "Statistical: For each new TCC permission grant, calculate the time delta between the process's first execution and the TCC.db write event. The distribution of these deltas for legitimate grants will have a certain shape. Alert on any grant where the time delta is a statistical outlier (e.g., in the lowest 1st percentile), suggesting automation.",
              "Machine Learning: Implement a sequence analysis model (e.g., an RNN). Define a 'malicious TCC grant' sequence as: [First Execution -> TCC.db Write -> Network Connection] occurring in a short time window (< 5 minutes). Train a model to recognize this sequence and distinguish it from benign sequences that include long delays or user interaction events."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by manipulating macOS TCC?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.006",
        "name": "TCC Manipulation",
        "evidence": [
          {
            "description": "A process possessing sensitive TCC permissions (e.g., `kTCCServiceScreenCapture`, `kTCCServiceSystemPolicyAllFiles`) initiates a network connection where the destination IP address, domain, or JA4S hash matches a known malicious indicator.",
            "data_sources": [
              "ESF process and network events",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Threat Intelligence Platform data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), DNS servers, and all macOS endpoints.",
            "action": [
              "Symbolic (IOC): Continuously join network flow logs (Zeek conn.log) with a list of TCC-privileged running processes from endpoints. Alert immediately if a destination IP/domain from these flows matches a high-confidence C2 indicator list.",
              "Statistical: For each TCC-privileged process, baseline its network destinations (countries, ASNs) and data volume. Calculate the entropy of destination IPs over a 24-hour window. A sudden drop in entropy (connections to one or a few new IPs) or a connection to a statistically rare country/ASN for that process should trigger an alert.",
              "Machine Learning: Train a classifier to predict malicious connections based on features from Zeek logs (duration, protocol, bytes sent/received, connection state) and process context (name, TCC permissions). Use labeled data from threat intel (malicious) and a baseline of normal traffic (benign) to score new connections from TCC-privileged processes."
            ]
          },
          {
            "description": "A process with `kTCCServiceScreenCapture` or `kTCCServiceAccessibility` permissions spawns a child process known for network data transfer (e.g., `curl`, `wget`, `ncat`, `scp`) which then makes an outbound connection.",
            "data_sources": [
              "ESF ES_EVENT_TYPE_NOTIFY_FORK events",
              "ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "Process command-line argument logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations and endpoints with remote collaboration tools (e.g., Zoom, Slack, Teams).",
            "action": [
              "Symbolic (IOC): Create a detection rule for a parent process with screen capture/accessibility permissions (e.g., `Zoom.us`) spawning a child from the set [`curl`, `wget`, `ncat`, `scp`]. This is a high-fidelity signature for permission abuse.",
              "Statistical: Analyze the frequency of child processes spawned by applications with screen capture/accessibility permissions. Child processes like `curl` will be extremely rare. Alert on any parent-child pairing that has not been observed in the historical baseline or is in the lowest frequency percentile (<1%).",
              "Machine Learning: Use a graph-based model of process relationships. A subgraph representing `[App with Screen Capture Perms] -> spawns -> [Network Utility] -> connects to -> [External IP]` would be flagged as a high-risk anomaly, especially if the destination IP is untrusted or has a low reputation score."
            ]
          },
          {
            "description": "A process with `kTCCServiceMicrophone` or `kTCCServiceCamera` permissions establishes a network connection exhibiting beaconing characteristics: periodic, fixed-size packets sent to the same destination over a long duration.",
            "data_sources": [
              "Zeek conn.log",
              "ESF process and network events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points and endpoints with collaboration software installed.",
            "action": [
              "Symbolic (IOC): Search network logs for connections from processes with mic/camera permissions where the destination is a known C2 and the traffic pattern is simple (e.g., periodic TCP packets with small, consistent payloads).",
              "Statistical: For each connection from a process with mic/camera permissions, calculate the standard deviation of inter-packet arrival times and packet sizes in `Zeek conn.log`. A very low standard deviation for both metrics over a sustained period (e.g., >10 minutes) is indicative of beaconing. Alert if these values fall below a predefined threshold.",
              "Machine Learning: Apply a time-series decomposition model (e.g., STL) to the data volume (bytes sent) for connections from these processes. A strong, non-standard periodic component identified by the model would indicate beaconing, distinguishing it from legitimate, more bursty communication patterns."
            ]
          },
          {
            "description": "A process, within minutes of gaining `kTCCServiceSystemPolicyAllFiles` permission, initiates a high rate of file open/read events across multiple sensitive directories (`~/Documents`, `~/Library/Mail`), followed by data staging and a large outbound data transfer.",
            "data_sources": [
              "ESF file and process events",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers, critical user workstations, and network egress points.",
            "action": [
              "Symbolic (IOC): Define a sequence: (1) `TCC.db` write granting a process Full Disk Access, (2) the same process reading `>1000` files in `<5` minutes, (3) the same process writing a large file (`>10MB`) to `/tmp/`, (4) a network connection from the same process transferring `>10MB` of data. An alert on this full sequence is high-fidelity.",
              "Statistical: For processes with Full Disk Access, baseline the rate of file system reads/writes using a sliding window to calculate file events per minute. Alert if the rate exceeds a dynamic threshold, such as the 99th percentile of the process's historical activity or the overall system baseline for that user.",
              "Machine Learning: Use a Hidden Markov Model (HMM) to model process state transitions (e.g., `Idle`, `Gaining_Perms`, `Enumerating_Files`, `Staging_Data`, `Exfiltrating`). An observed sequence of states matching the attack pattern would have a very low probability under a model trained on normal behavior, triggering a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]