[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying or adding LSASS drivers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "A DLL file hash matches a known malicious LSA driver, or a DLL name added to the LSA Security Packages registry key matches a known malicious package name.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers (e.g., AD CS, ADFS), Standard Enterprise Workstations",
            "action": [
              "Symbolic: Continuously ingest file creation events (Sysmon Event ID 11) and registry modification events for 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' (Sysmon Event ID 13 or Windows Event ID 4657). Compare file hashes and DLL names against a threat intelligence feed of known malicious LSA drivers (e.g., from Mimikatz, Pwnkitti) and alert on any match.",
              "Statistical: For all modifications to the LSA Security Packages registry key, calculate the prevalence of the added DLL name across the enterprise. Flag any DLL with a prevalence score below a defined threshold (e.g., present on <1% of endpoints) for review. Also, track the frequency of modifications to this key by host and alert if a host exceeds a statistical baseline (e.g., > 3 standard deviations above the mean).",
              "ML: Train a classification model (e.g., Random Forest) on features of DLL files added to the LSA registry path. Features should include file entropy, presence/absence of a valid signature, signer name, file size, and the prevalence calculated statistically. The model will classify each new DLL as benign or suspicious. A 'suspicious' classification triggers an alert."
            ]
          },
          {
            "description": "A DLL added to the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' registry key is unsigned, has a prevalence of less than 1% across the enterprise, or resides in a directory other than C:\\Windows\\System32\\.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, File Systems",
            "action": [
              "Symbolic: Create a rule that triggers when a modification to 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' (Sysmon Event ID 13) adds a DLL that is either unsigned or located in a non-standard directory (e.g., not in 'C:\\Windows\\System32\\'). Maintain a watchlist of non-standard but legitimate paths to reduce false positives.",
              "Statistical: For every DLL added to the LSA Security Packages key, calculate its enterprise-wide prevalence. Use a percentile-based threshold (e.g., flag any DLL in the bottom 5th percentile of prevalence) to identify anomalously rare packages. Also, calculate the entropy of the DLL file path; a high entropy score may indicate a randomized or obfuscated path and should be flagged.",
              "ML: Use a clustering algorithm (e.g., DBSCAN) on newly added LSA packages based on features like file path, signer information, and prevalence. The goal is to group legitimate packages together. Any package that is identified as a noise point or part of a very small cluster is flagged as an anomaly for analyst review."
            ]
          },
          {
            "description": "The LSASS process (lsass.exe) loads a DLL module whose hash is not present in an established baseline of legitimate LSA packages for the specific host OS build and role.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, Golden Images/Baselines",
            "action": [
              "Symbolic: For each host OS version and build, establish a 'golden' baseline set of DLLs loaded by 'lsass.exe' (Sysmon Event ID 7). Create a rule to alert any time 'lsass.exe' loads a DLL whose hash is not on this pre-approved allowlist.",
              "Statistical: On each endpoint, monitor the set of DLLs loaded by 'lsass.exe'. Profile the typical count of loaded modules. Alert if the count on a host deviates significantly from its own historical baseline or from the peer group baseline (e.g., > 2 standard deviations from the mean count for that OS build). Calculate a Jaccard similarity score between the current set of loaded modules and the established 'golden' baseline; a score below a certain threshold (e.g., < 0.95) indicates a deviation.",
              "ML: Use a time-series anomaly detection model (e.g., LSTM autoencoder) on the sequence of module load events for 'lsass.exe' on each host. The model learns the normal sequence and timing of DLL loads during system startup and operation. An alert is generated if the model detects a significant reconstruction error, indicating an anomalous module load event or sequence that does not fit the learned pattern."
            ]
          },
          {
            "description": "A process not on the established allowlist (e.g., System, svchost.exe) modifies the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\*' registry keys, especially if the process is an interactive shell or runs from a user-writable path.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 13",
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, Windows Registry",
            "action": [
              "Symbolic: Monitor for registry modifications (Sysmon Event ID 13) to 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\*'. Correlate with the parent process (Sysmon Event ID 1). Alert if the parent process image is not on an allowlist of legitimate system processes (e.g., 'System', 'svchost.exe', 'TrustedInstaller.exe'). Specifically, flag any modifications originating from interactive shells ('cmd.exe', 'powershell.exe') or processes running from temporary user directories.",
              "Statistical: Build a profile of processes that normally modify the LSA registry keys. Calculate the frequency of different parent processes making these changes. Alert on any process that is a statistical outlier (e.g., a process that has never been seen modifying this key before, or whose modification frequency is in the top 1st percentile of rarity).",
              "ML: Train a supervised classification model (e.g., Logistic Regression) to predict whether a modification to an LSA registry key is malicious. Features should include the name of the modifying process, its parent process, user context (SYSTEM vs. user), command-line arguments, and whether the process is signed. The model will output a probability score; scores above a set threshold (e.g., 0.8) generate a high-severity alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges by modifying or adding LSASS drivers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "A process command-line or PowerShell script block contains strings or regular expression patterns known to be used for installing malicious LSA drivers (e.g., 'reg add HKLM...Lsa', 'Install-Mimikatz').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations, PowerShell Script Repositories",
            "action": [
              "Symbolic: Monitor process command-line arguments (Windows Event ID 4688, Sysmon Event ID 1) and PowerShell script block logs (Windows Event ID 4104) for regular expressions matching known LSA driver manipulation commands. Examples include 'reg add HKLM\\\\SYSTEM\\\\...\\\\Lsa', 'Install-Mimikatz', and references to specific malicious DLLs. Trigger a high-severity alert on any match.",
              "Statistical: Analyze PowerShell script blocks (4104) and calculate the entropy of the script content. Correlate high-entropy scripts (e.g., top 5th percentile) with the presence of LSA-related keywords. Also, calculate the rarity of command-line argument combinations across the enterprise. A combination that is statistically rare and contains relevant keywords should be flagged for investigation.",
              "ML: Use a pre-trained Natural Language Processing (NLP) model fine-tuned on a dataset of malicious and benign scripts. Feed all PowerShell script block content (4104) and command-line arguments (4688) into the model to classify them as malicious, suspicious, or benign. An alert is generated for 'malicious' or 'suspicious' classifications, especially when the executing user is not a system administrator."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a 30-second window: 1) A DLL file is created, 2) The LSA Security Packages registry key is modified to include the new DLL, and 3) lsass.exe loads the new DLL module.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Standard Enterprise Workstations",
            "action": [
              "Symbolic: Using a SIEM correlation rule, look for the following sequence on a single host within a 30-second window: 1) A DLL file is created (Sysmon Event ID 11); 2) The 'HKLM\\...\\Lsa\\Security Packages' registry value is modified to include the name of that DLL (Sysmon Event ID 13); 3) The 'lsass.exe' process loads that specific DLL module (Sysmon Event ID 7). An alert is triggered if all three events occur in order.",
              "Statistical: For each host, create a time-series of event counts for file creations (11), LSA registry modifications (13), and lsass module loads (7). Look for correlated spikes in all three event types occurring in a short time window. A simultaneous anomaly score spike across these three data streams for a single host is a strong indicator of this activity.",
              "ML: Develop a Hidden Markov Model (HMM) where the hidden states are 'Benign Activity' and 'LSASS Hijack Attempt'. The observed events are the stream of Sysmon events (1, 7, 11, 13). Train the model on normal system behavior. The model will calculate the probability of transitioning to the 'LSASS Hijack Attempt' state given the observed event sequence. A high probability of being in this hidden state triggers an alert."
            ]
          },
          {
            "description": "A process tree originating from a non-SYSTEM user account modifies an LSA registry key, and a descendant process is subsequently created with NT AUTHORITY\\SYSTEM privileges.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 13",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Authentication Logs, Process Execution Logs",
            "action": [
              "Symbolic: Create a rule that triggers when a process running in a non-SYSTEM user context modifies the 'HKLM\\...\\Lsa\\Security Packages' key (Sysmon 13), and subsequently, a child process of that process (traced via Sysmon 1) is created running as 'NT AUTHORITY\\SYSTEM'. This indicates a successful privilege escalation.",
              "Statistical: Profile the parent-child process relationships and user context switches on endpoints. Identify statistically anomalous privilege escalations where a process tree originating from a standard user account suddenly spawns a SYSTEM-level process. Correlate this statistical anomaly with recent LSA registry modifications on the same host to increase confidence.",
              "ML: Use a graph-based anomaly detection algorithm on process execution data. Model processes as nodes and parent-child relationships as edges, with attributes like user context and process name. The algorithm learns normal process creation graphs. It will then identify anomalous subgraphs, such as a non-system process chain that terminates in a SYSTEM-level process shortly after an LSA registry modification event."
            ]
          },
          {
            "description": "A statistically significant spike in LSA error events (Windows Event ID 3033 or 3063) occurs on a host, immediately following execution of an unsigned or anomalously-named process.",
            "data_sources": [
              "Windows Event ID 3033",
              "Windows Event ID 3063",
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, System Event Logs",
            "action": [
              "Symbolic: Create a rule that alerts when a Windows Event ID 3033 or 3063 (LSA package load failure) occurs within 60 seconds of a process creation event (Sysmon Event ID 1) originating from a non-standard executable path (e.g., 'C:\\Users\\...', 'C:\\Temp\\') or an interactive shell.",
              "Statistical: Monitor the rate of LSA error events (3033, 3063) per host and across the enterprise. Use time-series analysis to establish a baseline rate. Alert when the rate on a single host exceeds a dynamic threshold (e.g., 3 standard deviations above the mean for that host, or enters the 99th percentile of all hosts). Correlate this spike with other anomalous activity on the host.",
              "ML: Use an anomaly detection model (e.g., Isolation Forest) on a feature set describing system state right before an LSA error event. Features would include the name of the last process created, its command line, user context, and recent registry/file activity. The model would identify anomalous system states that precede LSA errors, pointing to likely malicious (but failed) attempts rather than benign system issues."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]