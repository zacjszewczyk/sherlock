[
  {
    "information_requirement": "Has an adversary modified cloud compute configurations to evade defenses or enable resource hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1578.005",
        "name": "Modify Cloud Compute Configurations",
        "evidence": [
          {
            "description": "A cloud CLI process (e.g., 'az', 'aws', 'gcloud') or associated script is executed, and its process hash matches a known malicious hash, or it generates network traffic to an IP address or domain on a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrator workstations, DevOps jump boxes, CI/CD pipeline servers, and network egress points.",
            "action": [
              "Symbolic: From process creation logs (Windows Event ID 4688), identify executions of cloud CLI tools ('az.exe', 'aws.exe', 'gcloud.exe'). Correlate the process hash against a known malware hash database. Simultaneously, join the process start time and source IP with network connection logs (Zeek conn.log) and DNS query logs (Zeek dns.log). Alert if the destination IP or queried domain matches a high-confidence CTI feed of known C2 infrastructure.",
              "Statistical: For each cloud CLI execution, calculate the Jaccard similarity score between the set of command-line arguments used and a baseline set of arguments used by legitimate administrators. Flag executions with a score below a statistically determined threshold (e.g., 20th percentile) as potentially anomalous. Additionally, monitor the frequency of CLI executions per host; an increase of more than 3 standard deviations above the host's 30-day moving average warrants investigation.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on labeled historical process creation and network logs to distinguish between benign and malicious cloud CLI usage. Features should include process name, parent process, command-line argument length and entropy, user context, destination IP/domain reputation, and connection byte counts. Deploy the model to score new events in real-time and alert on predictions with high confidence of being malicious."
            ]
          },
          {
            "description": "A sequence of command-line arguments captured in process creation logs (Windows Event ID 4688) matches the known syntax or operational module execution flow of offensive security tools like Pacu, PowerZure, or Cloudsplaining.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrator workstations, developer endpoints, and servers with cloud SDKs/CLIs installed.",
            "action": [
              "Symbolic: Scan all command-line arguments from process creation logs (Windows Event ID 4688) against a curated library of regular expressions that match the unique commands, flags, and module execution syntax of known offensive cloud tools (e.g., `pacu --import-keys`, `powerzure -Module 'All'`). Generate a high-severity alert upon any match.",
              "Statistical: For each user session, extract the sequence of cloud CLI commands executed within a 30-minute window. Calculate the n-gram (n=2, 3) frequency of these command sequences across the organization. Alert when a user executes a command sequence that is rare (e.g., appears in less than 1% of all observed sequences) and involves modification commands ('set', 'modify', 'update', 'put-policy').",
              "Machine Learning: Use a sequence-based model like a Long Short-Term Memory (LSTM) network trained on benign administrative command sequences. The model learns the 'grammar' of normal administrative workflows. Feed new command sequences from user sessions into the model and alert when the model flags a sequence as having a high anomaly score, indicating a deviation from learned benign patterns."
            ]
          },
          {
            "description": "A cloud configuration modification API call (e.g., 'ModifyVpcAttribute', 'Set-AzPolicyDefinition', 'Update-ServiceQuota') is logged, originating from a user account or source IP address that has a low or zero historical frequency of performing such administrative actions.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services (e.g., AWS CloudTrail S3 bucket, Azure Log Analytics Workspace), and Identity and Access Management (IAM) systems.",
            "action": [
              "Symbolic: Create an explicit allow-list of user accounts and service principals authorized to make sensitive cloud configuration changes. Ingest cloud audit logs (CloudTrail, Azure Activity Logs) and trigger a high-priority alert whenever a modification API call (e.g., containing verbs like 'Set', 'Modify', 'Update', 'Delete', 'Put') is executed by an identity not on this list.",
              "Statistical: For all users, establish a baseline of administrative activity by analyzing historical cloud audit logs. For each user, calculate the frequency of sensitive API calls per hour. Alert when a user's activity exceeds their 99th percentile for this metric, especially if the user is not part of a pre-defined administrator group. Also, track the source IP's ASN and geographic location for each call; flag calls from rare or new locations for a given user.",
              "Machine Learning: Develop an unsupervised learning model (e.g., Isolation Forest) on cloud audit log data to group users based on their API call behavior. Features should include API call names, user agent, source IP, and time of day. Periodically retrain the model and flag users who move from a 'non-privileged' cluster to a 'privileged/administrative' cluster as potential account takeovers."
            ]
          },
          {
            "description": "A configuration change is made to enable a cloud region that is not on the organization's approved list of operational regions, followed by resource deployment in that region.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services and corporate cloud governance documentation.",
            "action": [
              "Symbolic: Maintain a definitive list of approved/supported cloud regions. Ingest cloud audit logs and create a high-severity alert for any API call that enables, modifies, or deploys resources in a region not on this list. Example events include 'CreateSubnet' or 'RunInstances' with a region parameter like 'ap-southeast-3' when it is not an approved region.",
              "Statistical: Profile the historical usage of cloud regions across the entire organization based on audit logs. Calculate the frequency of resource deployments per region. Alert on any resource deployment in a region with a historical frequency of zero or near-zero (e.g., less than 0.01% of all deployments over the last year).",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) on the feature set of benign resource deployments, where one of the key features is the cloud region. The model will learn the boundary of 'normal' deployments. Any new deployment that falls outside this boundary, particularly because it is in an un-modeled region, would be flagged as a novelty or anomaly."
            ]
          },
          {
            "description": "A cloud configuration change, such as increasing a service quota, is immediately followed by a statistically significant increase in resource provisioning API calls or network traffic volume indicative of resource hijacking.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Activity Logs",
              "GCP Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services, network flow log sources, and network egress points.",
            "action": [
              "Symbolic: Create a rule that looks for a specific sequence: 1) A cloud audit log event showing an increase in service quota (e.g., 'RequestServiceQuotaIncrease'). 2) Within 1 hour, a series of audit log events showing mass creation of compute resources (e.g., >20 'RunInstances' calls). 3) Within the next hour, network logs (Zeek conn.log) showing high-volume, sustained outbound traffic from the new resources to a common destination. Alert on this three-event correlation.",
              "Statistical: Monitor cloud audit logs for events related to increasing service quotas. After such an event, use time-series analysis on subsequent resource creation API calls. If the rate of resource creation calls in the 24 hours following the quota increase is more than 3 standard deviations above the 30-day moving average for that account, flag it for review. Correlate with the time of day; quota increases and deployments outside business hours are more suspicious.",
              "Machine Learning: Use a time-series forecasting model (e.g., ARIMA or Prophet) to predict the expected volume of resource provisioning API calls and network data transfer for each account. Feed real-time data from cloud audit and network logs into the model. Alert when the actual observed volume significantly deviates from the forecasted values (e.g., falls outside the 99% confidence interval) immediately following a configuration change event like a quota increase."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]