[
  {
    "information_requirement": "Is an adversary using SSL Pinning to conceal Command and Control communications on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1521.003",
        "name": "SSL Pinning",
        "evidence": [
          {
            "description": "A mobile application's network traffic, when passed through a TLS-inspecting proxy, exhibits a measurable increase in TLS handshake failures compared to its established baseline. This is evidenced by a spike in non-'ok' validation_status codes (e.g., 'self signed certificate in certificate chain', 'unable to get local issuer certificate') in Zeek ssl.log for connections originating from mobile device subnets, while direct, uninspected connections from the same application to the same server may succeed.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic egress points for mobile device VLANs (both corporate-managed and guest Wi-Fi) where a TLS-inspecting proxy is deployed; Zeek sensors monitoring pre- and post-proxy traffic; DHCP server logs to map IP addresses to mobile device hostnames; Mobile Device Management (MDM) logs for device and application context.",
            "action": [
              "Using a SIEM or query language, correlate Zeek ssl.log and conn.log records using the unique identifier ('uid') field for all connections originating from mobile device IP address ranges. Filter for events where `ssl.log.validation_status` is not 'ok' and `conn.log.conn_state` indicates a failed or rejected connection (e.g., 'REJ', 'RST0'). Exclude connections where the `ssl.log.server_name` corresponds to a pre-approved application watchlist (e.g., known banking, corporate apps). Match the remaining `server_name` values against a threat intelligence feed of known malicious C2 domains. Generate a high-severity alert upon a match.",
              "On an hourly basis, group all TLS connections by application (approximated by `ssl.log.server_name`) originating from mobile IP ranges. For each application, calculate the mean and standard deviation of its TLS validation failure count over a 30-day rolling window. Generate an alert if the current hourly failure count for any application exceeds three standard deviations above its historical mean. Additionally, calculate the ratio of failed to successful connections per hour for each application and alert if this ratio exceeds the 95th percentile of its own 30-day historical distribution.",
              "For each distinct application (`server_name`), develop a univariate time-series anomaly detection model (e.g., Seasonal ARIMA, Prophet) on the hourly count of TLS validation failures. Train the model on a minimum of 30 days of historical data to learn normal daily and weekly patterns (seasonality). An alert is generated when the model flags an observation as an anomaly, meaning the observed failure count significantly deviates from the forecasted value and its confidence interval, indicating a statistically improbable spike in connection failures."
            ]
          },
          {
            "description": "A mobile application establishes a successful TLS connection using a certificate that is either self-signed (certificate issuer matches the subject) or issued by a statistically rare Certificate Authority (CA). A rare CA is defined as one that has issued fewer than a defined threshold (e.g., 0.05%) of all unique certificates observed across the network in the last 90 days. This indicates the application trusts a specific certificate or public key outside of the device's standard trust store.",
            "data_sources": [
              "Zeek x509.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Zeek sensors at internet egress points monitoring all outbound traffic from designated mobile device subnets; Certificate Transparency (CT) logs for external validation of observed certificates; Mobile Device Management (MDM) platforms to correlate application names with network activity; Threat intelligence platform containing known malicious certificate hashes and C2 domains.",
            "action": [
              "Correlate Zeek conn.log, ssl.log, and x509.log records using their respective unique identifiers. Filter for successful TCP connections (`conn_state` = 'SF') from mobile IP ranges where the associated certificate is self-signed (`x509.log.certificate.issuer` == `x509.log.certificate.subject`). For these events, match the certificate's SHA1 hash (`x509.log.id`) or the `ssl.log.server_name` against a threat intelligence feed of known mobile malware indicators. Generate a high-priority alert upon a match.",
              "On a daily basis, create a frequency distribution of all certificate issuers (`x509.log.certificate.issuer`) observed across the network over the past 90 days. Define 'rare issuers' as those falling below a low-frequency threshold (e.g., 0.05% of all issued certificates). In parallel, calculate the Shannon entropy for all `ssl.log.server_name` values. Generate an alert for successful connections from mobile devices that simultaneously use a certificate from a 'rare issuer' and connect to a server with high name entropy (e.g., score > 3.5), indicating a non-standard trust relationship with a potentially algorithmically generated domain.",
              "Develop and train a supervised classification model (e.g., Random Forest) to predict if a TLS session from a mobile device is malicious. Extract features for each session, including: `is_self_signed` (boolean), `issuer_rarity_score` (float), `certificate_validity_period_days` (integer), `server_name_entropy` (float), `JA3_hash_frequency` (float), `JA3S_hash_frequency` (float), `connection_duration_seconds` (integer), and `total_bytes_transferred` (integer). Train the model on a labeled dataset curated by analysts. Score each new TLS session from a mobile device; sessions with a predicted malicious probability above a defined threshold (e.g., > 0.9) trigger an alert for investigation and analyst feedback to retrain the model."
            ]
          },
          {
            "description": "Static analysis of a mobile application package (e.g., APK for Android, IPA for iOS) reveals the presence of code constructs, third-party libraries, or configuration files explicitly designed for implementing SSL/TLS pinning, thereby bypassing standard system trust validation.",
            "data_sources": [
              "Mobile Application Package (APK, IPA)",
              "Static Analysis Tool Output (e.g., MobSF JSON report)",
              "Application Manifest Files (e.g., AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) or Mobile Application Management (MAM) platform used for app distribution; Internal corporate app store; Analyst sandbox environment equipped with static analysis tools (e.g., MobSF, jadx).",
            "action": [
              "Automate the scanning of all new and updated mobile application packages using a static analysis tool. Create a rule to search the decompiled code and configuration files for specific strings, API calls, or library names associated with known pinning implementations (e.g., 'okhttp3.CertificatePinner', 'TrustKit', 'AFNetworking', '<pin-set>' in network_security_config.xml). Generate an alert if an application, not on an approved list for using pinning, contains any of these indicators.",
              "For all managed applications, parse their manifest and network security configuration files. Calculate the prevalence of different security settings, such as the use of `<network-security-config>` and the presence of `<pin-set>` directives. Identify applications that are statistical outliers, for example, an application that is the only one in its functional category (e.g., 'productivity') to implement pinning. Correlate these outliers with connections to low-reputation domains for higher fidelity alerting.",
              "Train a classification model using features extracted from static analysis reports of application packages. Features should include: list of imported libraries, permissions requested in the manifest, presence of obfuscated code, number and type of network security configuration rules, and binary entropy. The model will be trained on a labeled dataset of benign apps, malicious apps, and apps known to use pinning for legitimate reasons. The model's output will be a risk score for each application, with high scores on non-obvious candidates for pinning triggering an analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]