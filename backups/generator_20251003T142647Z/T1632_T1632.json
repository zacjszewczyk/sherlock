[
  {
    "information_requirement": "Is an adversary attempting to subvert trust controls on our mobile devices to execute untrusted code or intercept communications? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1632",
        "name": "Subvert Trust Controls",
        "evidence": [
          {
            "description": "Evidence of a potentially malicious Certificate Authority (CA) is found when a certificate installed on a managed mobile device meets one or more of the following criteria: its SHA-256 hash is not on the organizational allowlist of approved CAs; it is self-signed; or its issuer's frequency of observation across the enterprise is in the bottom 1st percentile over a 30-day period.",
            "data_sources": [
              "MDM logs",
              "Zeek x509.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) server, Network egress points/Internet Gateway, DNS Resolvers, SIEM",
            "action": [
              "Query MDM logs for installed certificates. Compare the SHA-256 hash of each certificate against a curated allowlist of approved CA hashes. Generate an alert for any certificate hash not on the allowlist or for any certificate where the 'is_self_signed' attribute is true.",
              "From Zeek x509.log, aggregate all certificate issuers observed from mobile device IP ranges over a 30-day rolling window. Calculate the observation frequency for each issuer and determine the 1st percentile threshold. Alert when a new TLS session (from Zeek ssl.log and conn.log) from a mobile device uses a certificate whose issuer falls below this frequency threshold. Correlate with MDM logs to confirm installation on the device.",
              "Extract features from Zeek ssl.log and x509.log for TLS sessions originating from mobile IP ranges. Features should include: certificate validity period, public key algorithm, key length, number of SAN entries, self-signed status, and the statistical rarity of the issuer. Train a Random Forest classifier on a labeled dataset of benign and malicious certificate traffic. Deploy the model to score new sessions in real-time, generating an alert when a session's malicious probability score exceeds a tuned threshold (e.g., > 0.90) and the associated certificate is confirmed as installed via MDM logs."
            ]
          },
          {
            "description": "Evidence of unauthorized application sideloading is found when a managed Android device has the 'Install unknown apps' permission enabled for a non-system, user-installed application that is not on a pre-defined exception list, and the configuration change in MDM logs lacks a corresponding, authorized change request ticket.",
            "data_sources": [
              "MDM logs",
              "Mobile endpoint security agent logs",
              "Change management system logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android devices, Mobile Device Management (MDM) server, SIEM, Change Management Database (CMDB)",
            "action": [
              "Continuously monitor MDM device configuration logs for any instance where the 'Install unknown apps' permission is enabled. Compare the associated application package name against an allowlist of exceptions. If the application is not on the allowlist, query the change management system for an approved change ticket associated with the device and user within the last 24 hours. If no ticket exists, generate a high-severity alert.",
              "For each application package name across the Android device fleet, calculate the daily count of devices that have the 'Install unknown apps' permission enabled for it. Establish a 90-day baseline mean and standard deviation for this count per application. Trigger an alert if the daily count for any application exceeds three standard deviations from its historical mean.",
              "Develop an Isolation Forest model using features from MDM configuration logs, such as 'Install unknown apps' status, 'developer_mode_enabled', OS version, time since last patch, 'is_rooted', and 'adb_enabled'. Train the model on the fleet's configuration data to identify devices with anomalous settings. Generate an alert when a device is flagged as an outlier and the model identifies the 'Install unknown apps' permission as a key contributor to its high anomaly score."
            ]
          },
          {
            "description": "Evidence of a malicious iOS configuration profile is found when a profile installed on a managed device is unsigned, its identifier is not on the organizational allowlist, or it was downloaded from a source domain that is newly observed (first seen in < 24 hours) or has a domain name entropy score exceeding 3.5.",
            "data_sources": [
              "MDM logs",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed iOS devices, Mobile Device Management (MDM) server, Network egress points/Internet Gateway, DNS servers",
            "action": [
              "Query MDM logs for all installed iOS configuration profiles. Compare each profile's identifier against a maintained allowlist of approved profiles. Generate an alert for any profile identifier not on the allowlist or for any profile flagged as 'unsigned'. Enrich the alert with device and user details.",
              "From Zeek dns.log and http.log, monitor for downloads of files with a '.mobileconfig' extension. For each source domain, calculate the Shannon entropy of the hostname; alert if the score is > 3.5. Additionally, maintain a 30-day baseline of domains observed serving these files. Alert on any download from a source domain not present in the historical baseline.",
              "Aggregate Zeek files.log data by the hour to count the number of '.mobileconfig' file downloads across the network. Train a time series forecasting model, such as SARIMA or Prophet, on this data, accounting for daily and weekly seasonality. Generate an anomaly alert if the observed download count in any given hour exceeds the upper bound of the model's 99% prediction interval, suggesting a possible mass-distribution campaign."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]