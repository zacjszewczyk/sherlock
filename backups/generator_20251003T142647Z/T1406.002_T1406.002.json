[
  {
    "information_requirement": "Is an adversary using packed or obfuscated applications to evade detection on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.002",
        "name": "Software Packing",
        "evidence": [
          {
            "description": "An Android Application Package (APK) file, captured via network monitoring or observed via host-based file creation events, has a calculated byte-level Shannon entropy score that either exceeds a static threshold of 7.5 or falls within the top 5% (95th percentile) of entropy scores from a baseline of known-good, corporate-approved mobile applications.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Security Monitoring (NSM) sensor locations monitoring traffic to/from corporate Wi-Fi and VPNs; Mobile Device Management (MDM) / Enterprise Mobility Management (EMM) platform application inventories; Developer workstations and CI/CD build servers.",
            "action": [
              "1. Monitor Zeek logs (http.log, files.log) for file transfers with MIME type 'application/vnd.android.package-archive'. 2. For each identified APK download, extract the source IP from conn.log and source domain from dns.log. 3. Compare the source IP and domain against a threat intelligence feed of known malware distribution C2 servers. 4. Generate a high-priority alert upon a match, including the file hash, source IP/domain, and destination device.",
              "1. Ingest the application inventory from the MDM/EMM platform. 2. For each approved APK, calculate its byte-level Shannon entropy to establish a historical distribution (baseline). 3. Continuously monitor for new APKs via Zeek files.log and Windows Sysmon Event ID 11. 4. For each new APK, calculate its entropy and compare it to the baseline. 5. Trigger an alert for any APK with an entropy score exceeding the 95th percentile of the baseline or a hard threshold of 7.5, flagging it for manual review.",
              "1. Develop and train a binary classification model (e.g., Gradient Boosting, Random Forest) using features extracted from a labeled dataset of benign and malicious/packed APKs. Features should include: Shannon entropy, file size, requested permissions from AndroidManifest.xml, and network context from Zeek logs (e.g., source ASN, domain age of download source, TLS JA3 hash). 2. Deploy the model into the analysis pipeline. 3. For each new APK detected, apply the model to generate a risk score. 4. If the score exceeds a predetermined confidence threshold (e.g., > 0.9), automatically trigger a high-priority alert and submit the APK to a sandbox for dynamic analysis."
            ]
          },
          {
            "description": "An APK file, upon static analysis, triggers a YARA rule designed to detect byte sequences, strings, or executable section names (e.g., '.UPX0', '.aspack', '.pdata') associated with known software packers such as UPX, FTT, or DexProtector.",
            "data_sources": [
              "Zeek files.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on developer and user endpoints; Corporate application repositories and stores; Network file transfer inspection points (e.g., inline sandboxing); Automated malware analysis sandboxes.",
            "action": [
              "1. Integrate a YARA scanner into the file analysis pipeline. 2. Create or subscribe to a YARA ruleset specifically targeting mobile application packers (e.g., UPX, DexProtector, Bangcle) and common obfuscation libraries. 3. Scan all new APK files identified via Zeek files.log and Windows Sysmon Event ID 11 against this ruleset. 4. A positive match should immediately generate a high-fidelity alert containing the file hash, file path, and the name of the matched YARA rule.",
              "1. For each new APK, use a parser to extract all executable section names from its structure. 2. Establish a frequency baseline of common section names (e.g., '.text', '.data', '.dex') from the organization's approved MDM/EMM application inventory. 3. For a new APK, count the number of section names that are not in the baseline or appear to be randomized (e.g., high entropy strings). 4. Flag any APK where the count of anomalous section names exceeds three standard deviations above the baseline mean for deeper analysis.",
              "1. Collect time-stamped data on YARA rule matches for 'Software Packing' signatures. 2. Apply a time-series anomaly detection model (e.g., Seasonal-ARIMA) to the hourly or daily count of these detections to establish a normal operational rhythm. 3. Generate an alert when the model detects a statistically significant anomaly (e.g., a spike in detections that exceeds the 99th percentile of the forecast confidence interval). 4. This alert should trigger a proactive threat hunt to investigate a potential new campaign, correlating anomalous detections by source, target, or specific packer signature."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]