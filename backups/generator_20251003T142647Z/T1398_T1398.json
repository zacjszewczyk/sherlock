[
  {
    "information_requirement": "Has an adversary established persistence on corporate mobile devices by modifying boot or logon initialization scripts? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1398",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "An MDM attestation log event for a managed Android device where the embedded Google SafetyNet API result contains a `ctsProfileMatch` flag set to `false` (indicating device tampering) or a `basicIntegrity` flag set to `false` (indicating a potential rootkit or unofficial ROM).",
            "data_sources": [
              "MDM attestation event logs",
              "Google SafetyNet API result logs",
              "Samsung Knox attestation logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors.",
            "action": [
              "Deploy a SIEM rule that generates a critical alert upon ingesting an MDM log with a SafetyNet result where `ctsProfileMatch` is `false` or `basicIntegrity` is `false`. The alert must trigger an automated response to invoke an MDM API call that moves the device to a restricted network profile.",
              "For the entire device fleet, calculate a 30-day rolling baseline of the hourly count of attestation failures. Generate a medium-severity alert if the failure count in any given hour exceeds the 99th percentile of this historical baseline. This identifies anomalous spikes in failures that may indicate a widespread attack.",
              "For any device triggering an attestation failure alert, automatically query Zeek logs for the device's IP address over the preceding 24 hours. Input network behavior features\u2014such as Shannon entropy of DNS query names (from dns.log), ratio of failed to successful connections (from conn.log), and count of connections to low-reputation IPs\u2014into a pre-trained logistic regression classifier. A classification of 'malicious' with a confidence score > 0.85 should escalate the incident priority to critical."
            ]
          },
          {
            "description": "A device health telemetry log from an MDM platform indicating an Android Verified Boot status of 'Red' (indicating a corrupt system partition) or 'Yellow' (indicating a modified non-system partition, such as `vbmeta`) [1].",
            "data_sources": [
              "MDM device health telemetry logs",
              "MDM policy compliance status logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform.",
            "action": [
              "Configure a SIEM alert to fire with critical severity upon receiving an MDM log where the `verified_boot_state` field is 'Red'. The corresponding playbook must immediately trigger an MDM action to isolate the device from the network and flag it for a remote wipe.",
              "Generate a daily time series visualization of the count of devices reporting a 'Yellow' verified boot state. Apply a Seasonal-Trend-Loess (STL) decomposition to a 90-day window of this data. Trigger an alert if the trend component shows a statistically significant positive slope over any 7-day period, indicating a potential systemic issue or a slow-moving campaign.",
              "Train an Isolation Forest model to detect anomalous device health profiles using MDM telemetry. Feature inputs should include `verified_boot_state` (one-hot encoded), days since last OS update, hours since last MDM check-in, number of non-store applications installed, and a `developer_mode_enabled` flag. Devices assigned an anomaly score that falls in the top 1% of scores for the device fleet are flagged for manual Tier 2 analyst investigation."
            ]
          },
          {
            "description": "A mismatch between the file hash of a boot-related file (from `/system/etc/init/`, `/system/bin/`, `/vendor/etc/init/`, or `init.rc` files) on a forensic image and a known-good hash from a baseline database. Alternatively, the presence of an unauthorized file not found in the baseline for the device's stock OS image.",
            "data_sources": [
              "Mobile device file system image",
              "File system metadata from image",
              "Internal known-good file hash database",
              "Threat intelligence hash feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage.",
            "action": [
              "After acquiring a device's file system image, compute the SHA-256 hash for every file within critical boot directories. Query these hashes against an internal baseline of known-good hashes for the device model/OS version and against an external threat intelligence feed. A hash mismatch or a known-malicious match confirms a finding and requires immediate escalation.",
              "For each executable and script file in the target boot directories, calculate its Shannon entropy score. Compare this score against a pre-computed baseline distribution of entropy values from known-good firmware files of the same type. Flag any file with an entropy score exceeding 3 standard deviations from the baseline mean for that file type, as this indicates likely obfuscation or encryption.",
              "For any script identified as modified or unknown, extract features and use a pre-trained Random Forest classifier to predict maliciousness. Key features must include n-gram frequency of suspicious commands (e.g., `setenforce 0`, `pm install`), presence and length of encoded strings (Base64, hex), and unusual file permissions (e.g., world-writable). A classification of 'malicious' with a confidence score > 0.90 prioritizes the file for manual reverse engineering."
            ]
          }
        ]
      }
    ],
    "references": [
      {
        "id": 1,
        "citation": "Android Open Source Project. (n.d.). Verified Boot. Retrieved October 01, 2025, from https://source.android.com/docs/security/features/verifiedboot"
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]