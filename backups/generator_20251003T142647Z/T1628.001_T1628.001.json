[
  {
    "information_requirement": "Is an adversary hiding malicious applications by suppressing their icons on managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1628.001",
        "name": "Suppress Application Icon",
        "evidence": [
          {
            "description": "An application package is present in the Mobile Device Management (MDM) inventory for a device, but no corresponding LAUNCHER intent activity is recorded in Mobile Endpoint Detection and Response (EDR) logs for the same package and device over a 30-day period.",
            "data_sources": [
              "MDM application inventory logs",
              "Mobile EDR launcher intent logs",
              "Threat intelligence package name blocklists",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-owned and bring-your-own-device (BYOD) mobile endpoints, MDM and Mobile Threat Defense (MTD) management servers, Security Information and Event Management (SIEM) platform, Network egress gateways, Internal DNS resolvers",
            "action": [
              "Implement a scheduled SIEM query to perform a left join from the MDM application inventory logs (source A) to the mobile EDR launcher intent logs (source B), using device ID and application package name as join keys. Generate an alert if a package from source A has no corresponding record in source B within the last 30 days. Suppress alerts for packages on a maintained allowlist of known non-launcher helper applications. For any positive detection, automatically query threat intelligence feeds using the package name hash (SHA256) and name for immediate risk assessment.",
              "For all applications identified as lacking a launcher intent and not on the allowlist, calculate the fleet-wide installation prevalence by counting unique device installations. Establish a baseline prevalence distribution for known-benign helper applications (e.g., plugins, services) over a 90-day period. Generate a high-severity alert for any new non-launcher application whose installation count exceeds the 99th percentile of this benign baseline, indicating an anomalously widespread installation for an application of its type.",
              "Develop and deploy a logistic regression model to produce a risk score for applications that lack a launcher intent. Engineer features from MDM logs (e.g., binary flag for installation source being 'sideloaded', count of 'dangerous' permissions requested, application age in days) and from network logs by correlating the device IP. Network features from Zeek logs should include the Shannon entropy of destination IP addresses ($$ H(X) = -\\sum p(x) \\log_2 p(x) $$) from conn.log, the entropy of queried domains from dns.log, and the ratio of connections to domains with low reputation scores. Flag applications for analyst review if their predicted probability of being malicious exceeds a defined threshold, such as $$ P(malicious) > 0.8 $$, and establish a model retraining pipeline that runs quarterly."
            ]
          },
          {
            "description": "A process creation event log on an Android 10+ device shows a launcher process (e.g., 'com.google.android.apps.nexuslauncher') spawning the system settings process ('com.android.settings') with command-line arguments that navigate directly to a specific application's details page, indicating a synthesized icon was used.",
            "data_sources": [
              "Mobile EDR process creation event logs",
              "Android Logcat logs",
              "ITSM ticket data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoints running Android 10 or newer, EDR and SIEM log aggregation platforms, IT Service Management system",
            "action": [
              "Create a SIEM correlation rule that triggers on a process creation event where `parent_process_name` is on an allowlist of known launchers (e.g., 'com.google.android.apps.nexuslauncher') and `process_name` is 'com.android.settings'. The rule must validate that the `process_cmdline` contains both 'com.android.settings.ApplicationDetailsPages' and 'package:'. Extract the package name from the command line and generate an alert for analyst investigation.",
              "For each application package name identified by the symbolic rule, maintain a daily count of these 'launcher-to-settings' redirection events per device. Calculate a 30-day moving average ($$ MA_{30} $$) and standard deviation ($$ \\sigma_{30} $$) for this event count per application across the fleet. Generate an alert when the daily count for any single application exceeds three standard deviations above its moving average ($$ DailyCount > MA_{30} + 3\\sigma_{30} $$), indicating a statistically significant spike in this suspicious redirection behavior.",
              "Implement a sequence analysis model, such as a Hidden Markov Model (HMM), using time-series data of UI events and process creations from mobile EDR logs. Define model states representing user activities (e.g., 'HomeScreen', 'AppDrawer', 'SettingsMenu', 'AppDetailsPage'). Train the model on event sequences from a baseline of normal device usage to learn typical user navigation pathways and their transition probabilities. Identify the direct state transition from 'HomeScreen' to 'AppDetailsPage' as a low-probability, anomalous sequence. Score and alert on user sessions where this anomalous sequence is detected, as it strongly indicates a synthesized icon was used."
            ]
          },
          {
            "description": "A static analysis report from an application vetting sandbox for an Android Package (APK) file flags the use of the `PackageManager.setComponentEnabledSetting` API call. The call uses the `COMPONENT_ENABLED_STATE_DISABLED` flag to target a component which is defined in the `AndroidManifest.xml` with both `android.intent.action.MAIN` and `android.intent.category.LAUNCHER` intents.",
            "data_sources": [
              "Static analysis reports from application vetting sandbox",
              "Mobile application reputation service logs",
              "APK files"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organizational application stores (e.g., managed Google Play), Application vetting sandboxes, Developer CI/CD pipelines, Threat intelligence platforms",
            "action": [
              "Integrate a YARA rule into the application vetting pipeline to scan APK files. The rule must detect the bytecode sequence for the `Landroid/content/pm/PackageManager;->setComponentEnabledSetting` method call and the integer constant for `COMPONENT_ENABLED_STATE_DISABLED` (value: 2). If a match occurs, trigger a post-processing script to parse the `AndroidManifest.xml` within the APK and confirm the disabled component has a LAUNCHER intent filter. A confirmed match should automatically flag the application and block it from distribution.",
              "For each new APK submitted for vetting, extract a feature set of all API calls made. Calculate the Jaccard distance ($$ d_J(A, B) = 1 - \\frac{|A \\cap B|}{|A \\cup B|} $$) between the new app's API set ($$ A $$) and a baseline feature set derived from a corpus of known-benign applications ($$ B $$). Additionally, calculate the Shannon entropy of the `classes.dex` file to measure code complexity or obfuscation. Flag an application for manual review if it both contains the icon-hiding API and has a Jaccard distance and entropy score in the top 5th percentile relative to all previously scanned applications.",
              "Train a gradient boosting classifier (e.g., XGBoost, LightGBM) on a labeled dataset of benign and malicious APKs. Engineer features from static analysis reports, including the presence of suspicious API calls (like `setComponentEnabledSetting`), the count of dangerous permissions requested in the manifest, the presence of known obfuscation packer signatures, and the reputation of embedded URLs or IP addresses. Deploy this model in the application vetting sandbox to automatically score each new APK. Automatically reject applications with a malice score above a high threshold (e.g., $$ > 0.9 $$) and quarantine those in a medium-risk band (e.g., $$ 0.7 - 0.9 $$) for manual analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]