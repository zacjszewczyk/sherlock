[
  {
    "information_requirement": "Is an adversary attempting to elevate privileges on mobile devices via process injection? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "Evidence of process injection is the observation of a mobile OS process loading an unsigned or non-allowlisted dynamic library (.so, .dylib) or calling specific debugging and memory manipulation APIs (e.g., `ptrace` on Android, `mach_vm_write` on iOS) where the calling process is not an authorized debugging tool or signed with a developer certificate.",
            "data_sources": [
              "MDM/EDR Process Activity Logs",
              "Android logcat",
              "iOS Unified Logs",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.",
            "action": [
              "Create a detection rule that triggers on EDR logs from mobile devices indicating a process call to sensitive APIs such as `ptrace`, `dlopen` with a non-system path, or `mach_vm_write`. Maintain an allowlist of known developer tools and processes signed with authorized developer certificates to exclude from this rule. Upon a trigger, correlate the device IP and timestamp (+/- 1 minute) with Zeek conn.log and dns.log to enrich with network context. Escalate to an alert if the associated device communicates with a destination IP or domain on a threat intelligence feed.",
              "For each mobile application, use EDR logs to build and maintain an allowlist of all legitimate dynamic libraries loaded across the managed device fleet over a 30-day baseline period. Monitor EDR library load events in real-time and calculate the fleet-wide prevalence of each library-application pair. Flag any library load with a prevalence of less than 1% as a 'rare library' event. Concurrently, ingest Zeek dns.log data and calculate the Shannon entropy of requested domain names per device using the formula $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$. Generate a high-priority alert when a 'rare library' event occurs within a 2-minute window of a DNS request from the same device where the domain's entropy score is in the 99th percentile of its 30-day rolling baseline.",
              "For high-risk applications, collect sequences of system calls from mobile EDR logs. Train a Long Short-Term Memory (LSTM) autoencoder model on historical sequences to learn a representation of normal process behavior. In production, feed live system call sequences into the trained model and calculate the reconstruction error for each sequence. Flag a sequence as anomalous if its reconstruction error exceeds a dynamically calculated threshold set at the 99.9th percentile of errors from a validation dataset. Escalate this anomaly to an alert if it is temporally correlated (within a 5-minute window) with the device initiating a network connection to a newly observed IP address, defined as an IP not seen communicating with the device in the last 30 days based on Zeek conn.log history."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using process injection to hide malicious code within legitimate mobile application processes? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A trusted, allowlisted mobile application process simultaneously exhibits anomalous resource usage (CPU or memory usage exceeding its 95th percentile baseline for over five minutes) and anomalous network behavior (connections to FQDNs or IPs not present in the application's historical baseline), without a corresponding legitimate change such as an application update.",
            "data_sources": [
              "MDM Performance Logs (CPU/Memory)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.",
            "action": [
              "Create a detection rule that joins MDM/EDR process telemetry with Zeek network logs using the device IP. Trigger an alert when a trusted application process (e.g., `com.android.chrome`, `com.apple.mobilesafari`) initiates a network connection where the destination IP or domain from Zeek conn.log or dns.log is on a threat intelligence blocklist, the JA3/JA3S hash from Zeek ssl.log is a known malicious fingerprint, or the User-Agent in Zeek http.log does not match the established, known User-Agent string for that specific application and OS version.",
              "For each unique device-application pair, continuously calculate the 30-day rolling 95th percentile for CPU and memory usage from MDM performance logs. Generate a medium-severity event if both metrics for an application exceed this percentile for a continuous 5-minute window. If an event is generated, analyze the device's concurrent network traffic from Zeek conn.log and calculate the ratio of outgoing to incoming bytes ($$ orig_bytes / resp_bytes $$). Escalate to a high-severity alert if this ratio exceeds the 99th percentile of its historical 30-day distribution for that device, which may indicate data exfiltration.",
              "For each device, create feature vectors for outbound network connections from Zeek conn.log, including destination port, protocol, connection duration, total bytes, and the destination IP's Autonomous System Number (ASN). Train a DBSCAN clustering model on a 30-day baseline of historical connection data to identify clusters representing normal network behavior. In real-time, classify new connections and flag any connection identified as a noise point (outlier) by the model. If a device generates a network outlier while also exhibiting a high resource consumption anomaly (as identified by the statistical method), generate a high-severity alert for immediate investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]