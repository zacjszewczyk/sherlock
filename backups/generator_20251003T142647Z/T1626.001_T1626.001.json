[
  {
    "information_requirement": "Has an adversary illegitimately gained Device Administrator permissions on a corporate mobile device? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1626.001",
        "name": "Device Administrator Permissions",
        "evidence": [
          {
            "description": "An application's AndroidManifest.xml file contains the 'android.permission.BIND_DEVICE_ADMIN' permission, while its corresponding package name and code-signing certificate SHA-256 hash are not found within the established organizational allow-list for approved device administrators.",
            "data_sources": [
              "Static APK Analysis Result (AndroidManifest.xml)",
              "MAM Application Inventory Record",
              "Device Admin Application Allow-list"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application repository and vetting sandbox; Mobile Application Management (MAM) and Mobile Threat Defense (MTD) platforms; Security data lake or SIEM platform hosting the allow-list and correlation engine.",
            "action": [
              "In the application vetting platform, implement a rule: IF 'android.permission.BIND_DEVICE_ADMIN' is present in AndroidManifest.xml THEN query the Device Admin Application Allow-list using the APK's package_name AND signing_certificate_hash. IF (package_name NOT IN allow_list) OR (signing_certificate_hash NOT IN allow_list) THEN generate a high-severity alert for 'Unauthorized Device Admin Request'.",
              "For each application requesting BIND_DEVICE_ADMIN, calculate the Shannon entropy of its package name. Compare this value to a distribution of package name entropy from all allow-listed applications. Any application with an entropy score above the 95th percentile is flagged. Concurrently, calculate the Jaccard similarity between the candidate application's full permission set and the permission sets of all legitimate device admin apps. A Jaccard score below a 0.5 threshold combined with a high entropy score indicates a highly anomalous permission model and should be prioritized for review.",
              "Develop a supervised classification model (e.g., XGBoost, Random Forest) to generate a 'maliciousness' score for APKs. Engineer features from static analysis, including: binary flags for BIND_DEVICE_ADMIN and other high-risk permissions ('SYSTEM_ALERT_WINDOW', 'READ_SMS'), total permission count, package name entropy, presence of known obfuscation packer strings, and the ratio of native code size to DEX file size. Train the model on a labeled dataset of known benign and malicious APKs. Deploy the model in the vetting pipeline to score all new applications, flagging those with a risk score above a calibrated threshold for manual analysis."
            ]
          },
          {
            "description": "An MDM/MTD agent logs a 'Device Administrator Enabled' event for an application not on the approved allow-list, and this event occurs within a 5-minute window of network connections from the device to an IP address or domain that is either on a threat intelligence feed or has a prevalence score of 1 (i.e., first time seen in the environment).",
            "data_sources": [
              "MDM/MTD Audit Log (Event: DeviceAdminEnabled)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feed",
              "Device Admin Application Allow-list"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoint devices (Android); Network egress points (e.g., corporate WiFi gateways, VPN concentrators); Security Information and Event Management (SIEM) platform for log aggregation and correlation.",
            "action": [
              "Create a SIEM correlation rule triggering on 'Device Administrator Enabled' events from MDM/MTD logs. For each event, execute the following logic: 1. Check if the app's package_name is in the Device Admin Allow-list. If yes, stop. 2. If no, query network logs (Zeek conn.log, Zeek dns.log) for the device's IP in a +/- 5-minute window. 3. Check if any destination IP/domain from the query matches a threat intelligence feed OR has an organizational prevalence count of 1 in the last 30 days. 4. If a match is found, generate a critical alert including the user, device, application name, and destination IP/domain.",
              "For each user, create a baseline of device management activity from MDM/MTD logs over a 30-day rolling window, modeling the hour-of-day and day-of-week frequencies. When a 'Device Administrator Enabled' event occurs, calculate its modified Z-score based on the user's temporal baseline. Independently, calculate the organizational prevalence of the application package name being granted admin rights. An event with a Z-score > 3.5 (anomalous time) for a package with a prevalence of <1% across the organization should have its risk score significantly increased and trigger a medium-severity alert.",
              "Construct a time-series anomaly detection model (e.g., LSTM autoencoder) to learn normal sequences of device events. For each device, create sequences of events from MDM/MTD logs. Features for each event should include a categorical event type ('app_install', 'permission_change', 'admin_enabled'), a hashed representation of the package name, and the time delta from the previous event. Train the model on logs from a large, diverse set of devices. In production, a high reconstruction error for any sequence containing a 'Device Administrator Enabled' event indicates a deviation from learned normal behavior and should trigger an alert for analyst investigation."
            ]
          },
          {
            "description": "The detection of a rapid burst of automated input events, defined as more than 10 touch events per second with a coordinate standard deviation near zero, in detailed MTD or logcat logs, occurring within a 2-second window immediately preceding an 'MDM/MTD: Device Administrator Activated' event. This sequence indicates a non-human interaction designed to programmatically bypass user consent.",
            "data_sources": [
              "Android logcat (tag:InputReader)",
              "MTD Agent Behavioral Log (Event:TouchEvent)",
              "MDM/MTD Audit Log (Event:DeviceAdminEnabled)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value or high-risk mobile devices enrolled in an enhanced MTD monitoring program capable of collecting and streaming detailed behavioral logs; Security data lake or SIEM with stream processing capabilities for log analysis.",
            "action": [
              "Using a Complex Event Processing (CEP) engine, create a rule that detects a specific sequence on a single device within a 2-second window: 1) A UI window focus change event where the window text contains 'Activate device admin'. 2) A subsequent series of >10 touch input events from logcat or MTD logs. 3) A final 'Device Administrator Enabled' event from MDM/MTD logs. A match on this full sequence generates a critical alert for 'Automated Device Admin Grant'.",
              "From detailed MTD logs, establish a per-user baseline for touch interaction patterns. Create a streaming query that calculates two metrics over 1-second rolling windows: touch event frequency (count) and the standard deviation of touch X/Y coordinates. Flag any window where the event frequency exceeds the user's 99th percentile AND the coordinate standard deviation is below the user's 1st percentile. If this statistical anomaly occurs within 5 seconds of a 'Device Administrator Enabled' event for a non-allow-listed application, escalate to a high-priority incident.",
              "Train a sequence classification model (e.g., GRU or Transformer) on low-level UI event streams (touch coordinates, window focus changes, text field entries, system calls) labeled as 'human' or 'automated'. Features should include event type, metadata, and nanosecond-precision inter-event timing. Deploy the model on MTD-instrumented, high-risk devices. An 'automated' classification for a sequence that culminates in a sensitive action, such as device admin activation, should automatically trigger a device quarantine and a high-severity alert."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]