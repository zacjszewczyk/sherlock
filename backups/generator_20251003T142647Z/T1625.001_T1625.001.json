[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by hijacking system runtime APIs? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1625.001",
        "name": "System Runtime API Hijacking",
        "evidence": [
          {
            "description": "A structured log event from an MDM or MTD platform indicating a compliance check failure for an Android device. The event must contain key-value pairs specifying `compliance_status: 'failed'` and `failure_reason: 'os_integrity_mismatch'` or `failure_reason: 'file_hash_mismatch'`. The event details must include a file path (e.g., '/system/lib/libart.so') and its measured hash, which deviates from the expected hash in the organization's 'golden image' manifest for that device model and OS version.",
            "data_sources": [
              "MDM event logs",
              "MTD alert logs",
              "Device Asset Inventory"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregator (SIEM) containing ingested MDM/MTD platform logs. The organization's master device asset inventory database. The population of corporate-managed Android devices.",
            "action": [
              "Create a SIEM rule that triggers a high-severity alert when a log event matches `compliance_status = 'failed'` AND (`failure_reason = 'os_integrity_mismatch'` OR `failure_reason = 'file_hash_mismatch'`). Upon alert, extract the `device_id`, `file_path`, and `file_hash` fields. Automatically enrich the alert by querying a threat intelligence platform API with the `file_hash`. Simultaneously, query the asset inventory with the `device_id` to retrieve user and business unit information. Escalate for immediate device isolation if the hash is associated with known malware.",
              "On an hourly basis, aggregate counts of file integrity failure events, grouped by device model and OS version. For each group, maintain a 30-day rolling baseline of the hourly failure count (mean and standard deviation). Generate a medium-severity alert if the current hour's failure count for any group exceeds its historical mean by more than three standard deviations (Z-score > 3). This identifies a widespread issue potentially affecting a specific device or OS patch level.",
              "Develop a time-series forecasting model (e.g., Prophet or SARIMA) using the historical hourly count of all file integrity failures across the fleet, accounting for weekly and daily seasonality. In production, run the model to predict the expected number of failures for the next hour, including a 99% confidence interval. If the actual number of observed failures exceeds the predicted upper confidence bound for two consecutive hours, generate a medium-severity alert for an anomalous, fleet-wide increase in device tampering."
            ]
          },
          {
            "description": "A single mobile device's IP address exhibits multiple concurrent network anomalies over a 15-minute window, including: (1) connections to IP addresses or domains with a low reputation score, (2) highly periodic outbound connections (beaconing) to a single destination, identified by a low standard deviation of inter-arrival times, (3) a high Shannon entropy score calculated on the subdomains of DNS queries, and (4) the use of a JA3 hash that is rare (e.g., present on <1% of devices) across the mobile device fleet.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensor grids (e.g., Zeek clusters) monitoring all corporate Wi-Fi and guest Wi-Fi access points, VPN termination points, and internet egress gateways.",
            "action": [
              "Create a SIEM rule that triggers a high-severity alert when a `id.resp_h` field from `conn.log` or a `query` field from `dns.log` matches an entry in a high-confidence threat intelligence feed (e.g., malicious C2 servers, DGA domains). The rule should be scoped to source IP ranges associated with mobile devices. On alert, automatically correlate the `id.orig_h` with DHCP and VPN logs to map the IP to a device ID and user for investigation.",
              "For each source IP in the mobile IP space, create 15-minute tumbling windows. Within each window, calculate: (a) the Shannon entropy of the set of second-level domains from `dns.log` `query` fields, and (b) for each destination IP, the standard deviation of the inter-arrival time between connections from `conn.log`. Generate a medium-severity alert if a device's DNS entropy score exceeds the 98th percentile of all devices AND the standard deviation of connection timing to any single destination is below the 2nd percentile, indicating highly regular beaconing.",
              "For each outbound connection from a mobile device, construct a feature vector including: `proto`, `id.resp_p`, `duration`, `orig_bytes`, `resp_bytes`, and a one-hot encoded representation of the `ja3` hash from `ssl.log`. Train an unsupervised anomaly detection model, such as an Isolation Forest, on a 30-day baseline of these connection vectors. In real-time, score each new connection. If a device produces a count of anomalous connections (as scored by the model) within a 5-minute window that exceeds the 99th percentile of the baseline anomaly rate per device, generate a medium-severity alert."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]