[
  {
    "information_requirement": "Is an adversary actively collecting sensitive information from mobile device clipboards?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "Static analysis of an Android application package (APK) reveals calls to `ClipboardManager.addPrimaryClipChangedListener` while the application's manifest (`AndroidManifest.xml`) does not declare the necessary intent-filter (`android.view.inputmethod.InputMethod`) to function as a legitimate input method editor (IME).",
            "data_sources": [
              "APK static analysis reports",
              "AndroidManifest.xml",
              "Disassembled DEX files"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android devices, Corporate application vetting pipeline, Mobile Device Management (MDM) server, Source code repositories, Mobile Application Management (MAM) sandbox",
            "action": [
              "During automated application vetting, create a static analysis rule that parses the `AndroidManifest.xml` file. If the manifest does not declare a service with an intent-filter action of `android.view.inputmethod.InputMethod`, scan the application's disassembled code for invocations of the `addPrimaryClipChangedListener` method. Generate a high-severity alert if this API call is present in a non-IME application.",
              "From a large corpus of vetted, benign APKs, establish a baseline for the frequency of the `addPrimaryClipChangedListener` API call relative to other user-interface-related API calls. For each new application submitted for vetting, calculate this ratio. Flag any application where the ratio exceeds the 99th percentile of the benign distribution for manual review.",
              "Develop and train a supervised classification model (e.g., Random Forest, Gradient Boosting) on static features extracted from a labeled dataset of benign and malicious APKs. Include features such as the presence/absence of `addPrimaryClipChangedListener`, count of sensitive permissions requested, string entropy of the `.dex` file, and the use of dynamic code loading or reflection APIs. Integrate this model into the application vetting pipeline to assign a risk score to new APKs."
            ]
          },
          {
            "description": "An iOS application accesses the `UIPasteboard` property at a high frequency (e.g., more than twice per second) or polls the clipboard within 100 milliseconds of an `applicationWillEnterForeground` event, indicating automated, non-user-driven access.",
            "data_sources": [
              "Instrumented API call logs (e.g., Frida trace)",
              "MTD/MDM behavioral event logs (e.g., api_call, app_state_change)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS devices, Corporate application vetting pipeline, Dynamic Application Security Testing (DAST) environment, Sandboxed analysis environment",
            "action": [
              "In a sandboxed dynamic analysis environment, use an instrumentation tool like Frida to hook the `UIPasteboard` class and its properties. Create a rule to log all access attempts to the `general.string` property, including timestamps. Generate an alert if the same application process accesses the property more than twice in a one-second window.",
              "Using MTD/MDM behavioral logs, for each application, calculate the time difference between `applicationWillEnterForeground` events and the first subsequent `UIPasteboard` access event. Identify applications whose median time-to-access falls within the lowest 5th percentile across all monitored applications. Additionally, for each app, calculate the Shannon entropy of the time intervals between its clipboard access events; a low entropy score indicates suspicious, regular polling.",
              "Train a Long Short-Term Memory (LSTM) autoencoder on sequences of API calls (e.g., `applicationWillEnterForeground`, `UIPasteboard.general.string`, `network.connect`) from a large corpus of benign, vetted iOS applications. During dynamic analysis of a new application, feed its API call sequence into the model. If the model's reconstruction error exceeds a statistically determined threshold, flag the application as anomalous for deviating from normal behavioral patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary capturing credentials copied from password managers or other sensitive applications on mobile devices?",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "A `clipboard_accessed` event is logged from an application that is not an approved browser or password manager, occurring within 5 seconds after an `app_backgrounded` event is logged for an approved password manager application on the same device.",
            "data_sources": [
              "MTD/MDM behavioral event logs (e.g., app_backgrounded, clipboard_accessed, device_id, app_name)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with corporate-approved password managers installed, MDM/MTD log aggregation platform (e.g., SIEM)",
            "action": [
              "In the SIEM, create a correlation rule that maintains a list of approved password manager application names. The rule should trigger when an `app_backgrounded` event from a password manager is followed within 5 seconds by a `clipboard_accessed` event on the same `device_id`, where the accessing application is not on an allowlist of password managers or web browsers.",
              "For each `clipboard_accessed` event, query MTD logs to find the time delta from the most recent `app_backgrounded` event from a known password manager on the same device. Aggregate these time deltas by the accessing application's name across all devices. Generate a weekly report of applications whose median time delta is in the lowest 10th percentile (e.g., < 5 seconds) for investigation.",
              "Build and train a sequence classification model (e.g., a Recurrent Neural Network) using labeled MTD event sequences. A malicious sequence could be `[password_manager_focused, password_manager_backgrounded, other_app_focused, other_app_clipboard_access]`. A benign sequence might be `[password_manager_focused, password_manager_backgrounded, browser_app_focused, browser_app_clipboard_access]`. Deploy the trained model to classify new event sequences in near real-time and alert on those classified as malicious."
            ]
          },
          {
            "description": "An application initiates an outbound network connection within two minutes of accessing the clipboard, and the destination is a known-malicious indicator, a newly registered domain (NRD), a domain with high Shannon entropy (>3.5), or uses a self-signed/invalid TLS certificate.",
            "data_sources": [
              "MTD/MDM behavioral event logs",
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints, Corporate VPN concentrators, DNS resolvers, Network egress points, Threat Intelligence Platform",
            "action": [
              "Create a SIEM correlation rule that joins MTD `clipboard_accessed` events with Zeek `conn.log` and `dns.log` on the device's source IP address and a 2-minute time window. The rule should alert if the application process associated with the clipboard access initiates a network connection to a destination IP or domain present in a high-confidence threat intelligence feed of C2 servers.",
              "For every network connection in `conn.log` occurring within 2 minutes of a `clipboard_accessed` event by the same application: a) calculate the Shannon entropy of the requested domain in the corresponding `dns.log` entry and flag if > 3.5; b) check the `validation_status` in the corresponding `ssl.log` or `x509.log` entry and flag if 'invalid' or 'self-signed'; c) check if the domain is a Newly Registered Domain (NRD). Alert if any of these conditions are met.",
              "For network flows in `conn.log` that occur within 5 minutes after a clipboard access event, extract a feature vector for each flow. Features should include destination port, protocol, `orig_bytes`, `resp_bytes`, JA3/JA3S hash from `ssl.log`, and domain entropy from `dns.log`. Use an unsupervised clustering algorithm like DBSCAN to identify small, dense clusters of network activity that deviate from established normal traffic patterns. Manually investigate these anomalous clusters as potential data exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]