[
  {
    "information_requirement": "Is an adversary using steganography to exfiltrate data from or introduce malicious tools to managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.001",
        "name": "Steganography",
        "evidence": [
          {
            "description": "A media file (e.g., PNG, JPG, MP4) transferred to or from a mobile device over the network has a file size that is a statistical outlier compared to a baseline of similar files, or the transfer destination is a known malicious host.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network egress points, Guest Wi-Fi network segments, VPN concentrators serving mobile devices, Cloud storage service gateways",
            "action": "1. (Symbolic) Join Zeek `files.log` and `conn.log` on `uid`. Correlate destination IPs (`id.resp_h`) and server names from `http.log` or DNS queries from `dns.log` against a threat intelligence feed of known C2 or data exfiltration domains. Alert on any match. 2. (Statistical) For each `mime_type` in `files.log` (e.g., `image/jpeg`), build a historical distribution of file sizes (`seen_bytes`). Flag any file transfer where the size exceeds the 99th percentile for its MIME type. Also, calculate the byte frequency distribution for transferred files; files with distributions approaching uniform (high entropy) are more likely to contain encrypted data than typical media files. 3. (Machine Learning) Train a one-class SVM or isolation forest model on features from benign media file transfers (e.g., file size, MIME type, user agent, destination ASN, time of day, transfer duration). Use the trained model to score new transfers in real-time and flag those identified as anomalous, which may indicate novel steganographic exfiltration patterns."
          },
          {
            "description": "A mobile application installed on a managed device contains functions or strings associated with known steganography libraries, or a specific media file on the device filesystem exhibits a Shannon entropy value significantly higher than the baseline for its file type.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Endpoint File System Scan Data",
              "Mobile Application Sandbox Analysis Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Enterprise application store and repository, Mobile device sandboxing environment",
            "action": "1. (Symbolic) From the MDM application inventory, obtain a list of installed package names and their binaries (`.apk`/`.ipa`). Scan these binaries for string matches against a curated list of known steganographic libraries and function names (e.g., 'LsbSteganography', 'StegLib', 'openstego'). Alert on any matches. 2. (Statistical) Using file system scan data from mobile endpoints, periodically scan media files in common storage locations (`DCIM`, `Downloads`). Calculate the Shannon entropy for each file. Establish a baseline entropy distribution for benign files (e.g., photos from the device camera vs. downloaded images). Flag any file with an entropy score greater than 3 standard deviations above the mean for its type or an absolute score > 7.5. 3. (Machine Learning) Develop a classification model (e.g., Gradient Boosting) to predict if an application is suspicious. Use features such as requested permissions, presence of steganography-related strings, ratio of native code, and app store of origin. Train the model on a labeled dataset of benign, Potentially Unwanted Programs (PUP), and known malicious apps to score all newly installed applications for risk."
          },
          {
            "description": "A process on a mobile device, not associated with a standard media viewer or social media app, reads a media file and subsequently initiates one or more network connections to an unusual external host within a short time frame.",
            "data_sources": [
              "Mobile Endpoint Detection and Response (EDR) process logs",
              "Mobile EDR network connection logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Corporate Wi-Fi network egress points",
            "action": "1. (Symbolic) Correlate mobile EDR process activity with network logs (`Zeek conn.log`). Create a rule to alert when a process reads a media file (e.g., `.png`, `.jpg`) and, within a 5-second window, establishes a network connection to an IP address on a threat intelligence blocklist. 2. (Statistical) For each process on a device, establish a baseline of typical behavior: file types accessed and network connection frequency/destinations. Calculate a rarity score for the sequence: [process -> reads media file -> connects to new destination ASN]. A sequence with a high rarity score indicates a statistical anomaly worth investigating. 3. (Machine Learning) Use a sequence analysis model, like a Recurrent Neural Network (RNN), to learn normal sequences of process events (file reads, network connections, etc.) from mobile EDR logs. Train the model on benign application behavior. Apply the model to new event sequences to detect anomalous sequences indicative of a steganographic tool embedding data and then exfiltrating it."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]