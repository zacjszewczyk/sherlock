[
  {
    "information_requirement": "Is an adversary discovering the physical location of our mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1430",
        "name": "Location Tracking",
        "evidence": [
          {
            "description": "An application installed on a managed mobile device requests background location permissions (e.g., Android: ACCESS_BACKGROUND_LOCATION, iOS: NSLocationAlwaysAndWhenInUseUsageDescription) where the permission is not justified by the application's official store description or is absent from a pre-approved permissions baseline for that app.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "Application manifest (AndroidManifest.xml) files",
              "Application property list (Info.plist) files",
              "Threat intelligence feeds on malicious application hashes/package names"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM server, internal application repository, application vetting sandboxes, threat intelligence platform.",
            "action": "1. (Symbolic) Join the current application inventory from MDM logs with a threat intelligence feed of malicious application package names and hashes. Generate a high-severity alert for any match found on a device. 2. (Statistical) For each application, parse its manifest/Info.plist to create a list of requested permissions. For apps in the same functional category (e.g., 'Productivity'), calculate the 95th percentile for the number of requested permissions. Flag any application that requests background location permissions and exceeds this percentile for its category for manual review. 3. (Machine Learning) Train a binary classification model (e.g., Random Forest) on a labeled dataset of benign/malicious app manifests. Features should include one-hot encoded permissions, counts of activities/services/receivers, and presence of sensitive API calls. Use the trained model to score all new and updated applications. An application receiving a 'malicious' prediction with a high confidence score, especially if it requests location permissions, triggers an automated quarantine action via MDM and an analyst alert."
          },
          {
            "description": "A managed mobile device's location service API calls, logged by an MTD agent, increase in frequency by more than three standard deviations above its 30-day rolling average, or location data is transmitted to an IP address not seen from the device in the last 60 days.",
            "data_sources": [
              "Mobile Threat Defense (MTD) API call logs",
              "MDM location history logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, network egress points (e.g., VPN concentrators, corporate Wi-Fi access points), DNS resolvers, cloud-hosted MTD/MDM platforms.",
            "action": "1. (Symbolic) Correlate destination IPs (id.resp_h in Zeek conn.log) and DNS queries (query in Zeek dns.log) from the mobile device IP space against threat intelligence feeds of known malicious infrastructure. Generate a high-severity alert for any match. 2. (Statistical) For each device, calculate a 30-day rolling baseline (mean, standard deviation) of location API calls per hour from MTD logs. Alert if the hourly count exceeds the mean by more than 3 standard deviations. Separately, for each device, maintain a set of destination IP addresses (id.resp_h in Zeek conn.log) seen over the past 60 days. Alert if a new connection is made to an IP address not in this historical set, enriching the alert with GeoIP data and ASN information for the new IP. 3. (Machine Learning) Apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the per-device, per-hour location API call count. This model will account for user-specific seasonality (e.g., daily commute). Alert on anomalies flagged by the model. Additionally, use a clustering algorithm (e.g., DBSCAN) on the geo-coordinates of location reports to identify travel to anomalous locations inconsistent with the user's typical areas of operation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting and exfiltrating location data from our mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1430",
        "name": "Location Tracking",
        "evidence": [
          {
            "description": "A network connection is initiated from a mobile device by an application with location permissions to a destination IP or domain that is either present on a threat intelligence list of C2 servers, or has a JA3 hash that is statistically rare (<0.01% prevalence) across the enterprise.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Threat Intelligence feeds",
              "MDM/MTD application process/network logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, firewalls, proxies, VPN concentrators, DNS resolvers, threat intelligence platforms, MDM/MTD cloud consoles.",
            "action": "1. (Symbolic) Join Zeek conn.log with MDM/MTD application network logs on device IP and timestamp. For connections made by apps with location permissions, check if the destination IP (id.resp_h) or domain (server_name in ssl.log, query in dns.log) matches a C2 indicator from a threat intelligence feed. Generate a critical alert on a match. 2. (Statistical) From Zeek ssl.log, calculate the frequency of every client TLS fingerprint (JA3 hash) observed from the mobile device IP range over the last 30 days. Alert when a connection from an application with location permissions uses a JA3 hash seen in less than 0.01% of all mobile device connections. Enrich the alert with JA3/JA3s fingerprint details from public repositories. 3. (Machine Learning) Develop a supervised learning model (e.g., Gradient Boosting) to produce a risk score for each outbound connection from a mobile device. Features should include: destination IP/ASN reputation, destination port, JA3 hash rarity, DNS query entropy (for DGA detection), data volume (orig_bytes), and a binary flag for whether the source app has location permissions. A connection scoring above a pre-defined threshold triggers an analyst investigation."
          },
          {
            "description": "Total daily data upload volume (orig_bytes) from a single mobile device to non-whitelisted, external destinations exceeds its 99th percentile of historical daily uploads, and this anomaly temporally correlates with the foreground activity of an application possessing location permissions.",
            "data_sources": [
              "Zeek conn.log",
              "MDM/MTD application activity logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., VPN concentrators, corporate Wi-Fi gateways), corporate-managed mobile devices, MDM/MTD cloud consoles.",
            "action": "1. (Symbolic) Define a list of corporate and sanctioned cloud service domains. Create a rule that alerts when a single connection from a mobile device IP (from Zeek conn.log) transfers more than 100MB of data (orig_bytes) to a destination not on the defined list. Correlate the alert's timestamp with MDM logs to identify the foreground application and its permissions. 2. (Statistical) For each device, calculate a 30-day rolling baseline of total daily upload bytes to external IPs (sum of orig_bytes in Zeek conn.log). Generate an alert when the daily upload volume exceeds the 99th percentile of this historical baseline. Enrich the alert with the top 5 destination ASNs for that day and the top 5 active applications from MDM logs during the period of highest data transfer. 3. (Machine Learning) Implement a time-series forecasting model (e.g., Prophet) for each device's daily upload volume, accounting for day-of-week seasonality. Generate an alert when the actual data volume significantly exceeds the model's predicted upper confidence interval. Use a topic modeling algorithm (e.g., Latent Dirichlet Allocation) on the destination domains/ASNs visited during the anomalous period to identify a potential thematic shift in network activity."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]