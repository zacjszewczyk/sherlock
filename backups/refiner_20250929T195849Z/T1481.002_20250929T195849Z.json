[
  {
    "information_requirement": "Is an adversary using a legitimate external web service for command and control of a compromised mobile device? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1481.002",
        "name": "Bidirectional Communication",
        "evidence": [
          {
            "description": "A mobile device application exhibits periodic, low-volume 'heartbeat' connections or anomalous high-volume data transfers to a legitimate web service, where the traffic pattern deviates more than 3 standard deviations from an established 30-day baseline for that user and application.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network security monitoring sensors at internet gateways, corporate Wi-Fi gateways, and VPN concentrators where mobile device traffic is observable.",
            "action": "Symbolic: Query network logs to match destination server names (from Zeek ssl.log SNI) against a threat intelligence feed of domains and subdomains known to be abused for C2 via legitimate services (e.g., specific GitHub repository URLs, Pastebin user accounts). Generate an alert for any match. Statistical: For each unique mobile-device-IP-and-destination-service pair, ingest Zeek conn.log data to establish a 30-day rolling baseline of connection frequency, duration, and data volume (orig_bytes, resp_bytes). Calculate the inter-arrival time (delta) between connections. Generate an alert if: a) data volume for a single connection exceeds the 99th percentile of the baseline, OR b) the standard deviation of the inter-arrival time is less than 1 second over a 10-minute window, indicating automated, periodic beaconing. Machine Learning: Develop a time series forecasting model (e.g., SARIMA, Prophet) for each device's traffic volume (sum of orig_bytes and resp_bytes) to key services, trained on historical Zeek conn.log data. Continuously score live traffic against the model's forecast. Generate an alert when the observed traffic volume at a given time exceeds the model's 99% prediction interval, indicating a statistically significant anomaly from the learned pattern."
          },
          {
            "description": "A mobile application's HTTP/S request to a legitimate web service contains a URI path or query string with Shannon entropy greater than 4.0, or includes a User-Agent string that does not conform to a known-good format for common mobile browsers or applications.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SSL/TLS-inspecting forward proxies, corporate DNS servers, and other network traffic inspection points.",
            "action": "Symbolic: Scan Zeek http.log records for HTTP request URIs matching known malicious regular expressions associated with C2-over-web-service frameworks. Simultaneously, compare the 'user_agent' field against a curated list of anomalous or known-bad User-Agent strings used by mobile malware. Generate an alert for any match on either condition. Statistical: For each destination web service (identified via Zeek ssl.log SNI), establish a baseline of normal URI structures from Zeek http.log. Calculate the Shannon entropy for all URI paths and query strings in live traffic. Generate an alert for any request where the URI entropy score is a statistical outlier (e.g., exceeds 3 standard deviations above the mean entropy for that service) or is above a hard threshold (e.g., 4.0), suggesting encoded data. Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) using features extracted from URIs, such as length, query parameter count, percentage of non-alphanumeric characters, and Shannon entropy. Use a labeled dataset of known-benign and known-malicious C2 URIs. Deploy the model to score all mobile device HTTP requests from Zeek http.log in real-time and alert on any request classified as malicious with high confidence."
          },
          {
            "description": "A mobile application, as identified by MDM/EDR logs, generates network traffic to a destination service (e.g., 'github.com', 'pastebin.com') that is statistically anomalous for its assigned application category (e.g., a 'Calculator' app, categorized as 'Utility', connecting to a 'Development Tools' service).",
            "data_sources": [
              "Mobile EDR/MDM logs",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints via MDM/EDR agents, MDM/EDR management consoles, and network chokepoints like corporate Wi-Fi gateways or Cloud Access Security Brokers (CASBs).",
            "action": "Symbolic: Define a policy that maps high-risk or sensitive applications to an explicit whitelist of allowed network destinations. Using MDM/EDR logs to identify the source application and Zeek ssl.log SNI for the destination, generate a high-severity alert if an application communicates with any destination not on its whitelist. Example rule: IF app_name IN ['Secure_Authenticator', 'Corp_VPN'] AND destination_sni NOT IN ['auth.corp.com', 'vpn.corp.com'] THEN ALERT. Statistical: Ingest MDM/EDR logs to categorize all managed applications (e.g., 'Productivity', 'Social', 'Developer Tools'). For each application category, profile the set of destination services (from Zeek ssl.log SNI) contacted over a 30-day period. Calculate the prevalence of each service within each app category. Generate a medium-severity alert when an application communicates with a service whose prevalence within that category is less than 1%, indicating a rare and potentially suspicious behavior. Machine Learning: Model the relationship between mobile applications and destination services as a bipartite graph, with nodes for apps and nodes for services. Apply a community detection algorithm (e.g., Louvain Modularity) to identify naturally occurring clusters of apps and the services they use. A connection from an app to a service outside of its primary community represents a behavioral anomaly. Score the anomaly based on the 'distance' between the app's home community and the service's community in the graph, and generate an alert for high-scoring anomalies."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]