[
  {
    "information_requirement": "Is malware on a corporate mobile device attempting to detect if it is running in a sandbox or emulator? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A non-system, user-installed application executes one or more calls to `getprop` or `android.os.SystemProperties` to query for specific properties indicative of an emulator (e.g., `ro.hardware.goldfish`, `ro.kernel.qemu`, `ro.boot.qemu`, `ro.product.model` containing 'SDK' or 'Emulator') within the first 60 seconds of its execution.",
            "data_sources": [
              "Android logcat",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM log aggregation servers, Network Security Monitoring (NSM) sensors at the network egress point, Application sandboxing and analysis platforms.",
            "action": "1. (Symbolic) Implement a SIEM rule that triggers an alert when a `logcat` event shows a non-system application process querying a property from a predefined blocklist of emulator/sandbox artifacts (e.g., `ro.hardware: [goldfish]`, `ro.kernel.qemu: [1]`, `ro.product.brand: [generic]`). 2. (Statistical) For each application, calculate the rate of system property queries within the first 5 minutes of execution. Establish a baseline rate for different application categories. Flag any application whose query rate exceeds the 95th percentile for its category as anomalous. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features extracted from `logcat` and `Zeek` logs, including the specific properties queried, count of suspicious queries, time since install, process name, and destination IP reputation. The model will classify application launch behavior as 'benign' or 'evasive'. Correlate a positive 'evasive' classification with subsequent network connections in `Zeek conn.log` to a low-reputation IP or a newly registered domain to escalate the alert."
          },
          {
            "description": "A newly installed application, within the first 60 seconds of its initial launch, makes API calls to access multiple indicators of genuine user presence (e.g., accelerometer, gyroscope, `READ_CONTACTS`, `READ_CALL_LOG`) before initiating significant network traffic. The absence of data from these sources may be followed by a period of inactivity or minimal network beacons.",
            "data_sources": [
              "Android logcat",
              "MDM audit logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application analysis sandbox environment, MDM servers collecting permission and API usage logs, Endpoint Detection and Response (EDR) agents on mobile devices.",
            "action": "1. (Symbolic) Create a detection rule that flags any application that requests permissions for and queries more than three 'user presence' indicators (e.g., `READ_CONTACTS`, `READ_CALL_LOG`, accelerometer, GPS location) within 30 seconds of first launch, and subsequently only sends a data packet less than 1KB, based on `Zeek conn.log` data. 2. (Statistical) Profile the sequence and timing of API calls for legitimate applications upon first launch to create a baseline. Use a statistical measure like Jaccard distance to compare the API call sequence of a new application to the baseline for its declared category. A high distance score indicates a deviation. Additionally, calculate the entropy of network payloads in `Zeek conn.log` following these checks; an entropy score below a threshold (e.g., < 2.0) suggests a simple beacon. 3. (Machine Learning) Employ a time-series anomaly detection model on sensor data streams (e.g., accelerometer) requested by an application. The model can learn the patterns of genuine user-generated sensor data and flag applications interacting with streams that are abnormally flat or repetitive, indicating an emulated environment."
          },
          {
            "description": "A user-installed application, immediately after installation and before significant user interaction, initiates multiple DNS queries for public time servers (e.g., `time.google.com`, `pool.ntp.org`) or multiple distinct geolocation service APIs, a behavior anomalous when compared to legitimate applications.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Recursive DNS servers for the mobile device fleet, Network egress points instrumented with Zeek sensors, Cloud Access Security Broker (CASB) logs.",
            "action": "1. (Symbolic) Implement a query to detect a single device IP making DNS requests for more than three unique public NTP pool domains or geolocation API domains within the first 5 minutes of a new application's process start time (correlated from EDR/MDM logs). 2. (Statistical) For each mobile device, calculate a rolling 24-hour baseline of the number of unique NTP and geolocation domains queried. Use a percentile-based threshold (e.g., alert if the count in a 5-minute window exceeds the 99th percentile of the baseline) to detect sudden spikes in this activity. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on `Zeek dns.log` and `conn.log` data. Features for clustering should include: source IP, number of unique domains queried in a time window, query type, and bytes transmitted (`orig_bytes`). Clusters of devices exhibiting high query counts to diverse time/geo servers with low subsequent data transfer can be automatically identified as suspicious."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]