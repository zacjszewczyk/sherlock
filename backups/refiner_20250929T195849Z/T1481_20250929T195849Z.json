[
  {
    "information_requirement": "Is an adversary using legitimate external web services for command and control on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1481",
        "name": "Web Service",
        "evidence": [
          {
            "description": "A mobile device establishes connections to a legitimate web service with statistically uniform time intervals (low jitter) and consistent, small payload sizes, indicative of automated C2 beaconing rather than variable human interaction.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments for mobile devices, VPN Concentrators, Mobile Device Management (MDM) platform logs",
            "action": "1. (Symbolic) Create a watch list of legitimate services often abused for C2 (e.g., api.telegram.org, pastebin.com, api.github.com). Trigger an alert if a mobile device communicates with a domain on this list more than 50 times in an hour with an average response payload size of less than 1KB. 2. (Statistical) For each source mobile IP and destination service pair, calculate the inter-arrival times between connections over a 24-hour window. Compute the standard deviation and entropy of these times. A standard deviation less than 1 second or an entropy value in the lowest 5th percentile for that service indicates highly periodic, non-human behavior. Simultaneously, calculate the 95th percentile for orig_bytes and resp_bytes for the same connection pairs; flag any connection where both values are below this threshold and the timing is periodic. 3. (Machine Learning) Apply a time series forecasting model (e.g., ARIMA) to the connection timestamps for a given device-service pair. An actual connection occurring significantly outside the model's prediction interval suggests a deviation from established beaconing. Alternatively, use a clustering algorithm like DBSCAN on features (inter-arrival_time, resp_bytes, orig_bytes) to automatically group and identify tight clusters of beacon-like activity separate from sparse, irregular user traffic."
          },
          {
            "description": "A mobile device sends HTTP requests to a legitimate web service containing a user agent string associated with non-standard tools (e.g., curl, python-requests) or accesses URI paths indicative of raw data retrieval (e.g., /raw/, /paste/) instead of typical application endpoints.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points with HTTP/S inspection capabilities, Web Application Firewall (WAF) logs",
            "action": "1. (Symbolic) From Zeek http.log, filter for traffic from the mobile NAI. Maintain and match against a blocklist of user agents known to be associated with command-line tools and scripts (e.g., Wget, curl, python-requests, Go-http-client). Alert on any match. 2. (Statistical) For each destination host (e.g., gist.githubusercontent.com), calculate the entropy of the URI path segments requested by each source IP. A significantly low entropy score indicates a device repeatedly accessing the same or very similar paths. Flag IPs in the bottom 10th percentile of URI entropy for that destination. 3. (Machine Learning) Train a classification model (e.g., Logistic Regression) using a labeled dataset of benign and malicious HTTP requests. Use features such as user-agent string length, user-agent entropy, presence of version numbers in user-agent, URI length, and number of special characters in the URI. Deploy the model to score new HTTP requests from mobile devices in real-time, flagging those with a high probability of being malicious."
          },
          {
            "description": "A mobile device exhibits a high ratio of DNS queries for a specific web service domain to the number of actual data-transferring connections, or to the volume of data transferred to that domain, suggesting a 'check-in' C2 mechanism that only establishes a full connection when a command is pending.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Protective DNS (PDNS) logs",
            "action": "1. (Symbolic) Correlate Zeek dns.log with a threat intelligence feed of known C2 infrastructure domains. Generate an immediate alert if a mobile device queries for a domain that is on the list, regardless of whether a connection is established. 2. (Statistical) For each mobile source IP, join Zeek dns.log and conn.log data over a 1-hour window. Calculate the ratio of DNS query count to the sum of orig_bytes and resp_bytes for each query/host pair. Establish a baseline ratio for popular services. Flag any device-service pair where this ratio exceeds the 99th percentile of the baseline. 3. (Machine Learning) Develop a regression model to predict the expected number of connections and total data volume based on the number of DNS queries for a given domain category (e.g., social media, cloud storage). Use features like time of day and domain popularity. A large positive residual (actual DNS queries far exceeding what's predicted for the observed data transfer) signals a potential anomaly for investigation."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]