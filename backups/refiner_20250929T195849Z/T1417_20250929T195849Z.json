[
  {
    "information_requirement": "Is an adversary capturing user credentials via input manipulation on mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A mobile application, not on the corporate-approved keyboard allow-list, is installed and active on a managed device, and is observed making network connections with characteristics indicative of data exfiltration.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) Continuously monitor MDM Application Inventory Logs. Compare the list of installed keyboard applications against a curated allow-list of approved keyboards. Generate a high-severity alert for any device with an unapproved keyboard application installed. 2. (Statistical) For any device with an unapproved keyboard, analyze its associated network traffic in Zeek logs. Calculate the Shannon entropy of requested domain names in dns.log. Flag domains with an entropy score above a dynamically calculated threshold (e.g., > 3.5) indicative of DGA. Additionally, monitor the size of outbound POST requests in http.log; flag any request where the size is in the 95th percentile or greater compared to the user's 30-day baseline. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., LSTM) on the volume and frequency of outbound network connections per device. Train the model on historical Zeek conn.log data. An alert is triggered if the model detects a significant deviation from the predicted pattern that correlates with the installation time of a new, unapproved keyboard application from MDM logs."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A mobile application is granted 'Draw Over Other Apps' (Android: SYSTEM_ALERT_WINDOW) or 'Accessibility Service' permissions, where this permission is not justified by the application's stated function, and the application exhibits anomalous network behavior.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, create and maintain a list of applications known to legitimately require 'Draw Over Other Apps' or 'Accessibility Service' permissions. Generate an alert whenever a new or unlisted application is granted these permissions. Correlate this alert with threat intelligence feeds for known malicious application package names. 2. (Statistical) For any application flagged by the symbolic logic rule, analyze its network connections in Zeek conn.log. Establish a baseline of typical outbound data volume (orig_bytes) and connection frequency for the user's device. Flag the application if its activity causes the daily outbound data volume to exceed 3 standard deviations from the user's 30-day rolling average. 3. (Machine Learning) Use a classification model (e.g., Random Forest) trained on application metadata (permissions requested, app store category, developer reputation) to predict the likelihood that an app's request for high-risk permissions is malicious. Applications classified as high-risk trigger an investigation, prioritizing analysis of their network traffic in Zeek ssl.log for suspicious characteristics like self-signed certificates or unusual server names (SNI)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive user information via input capture on mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A mobile application, not on the corporate-approved keyboard allow-list, is installed and active on a managed device, and is observed making network connections with characteristics indicative of data exfiltration.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) Continuously monitor MDM Application Inventory Logs. Compare the list of installed keyboard applications against a curated allow-list of approved keyboards. Generate a high-severity alert for any device with an unapproved keyboard application installed. 2. (Statistical) For any device with an unapproved keyboard, analyze its associated network traffic in Zeek logs. Calculate the Shannon entropy of requested domain names in dns.log. Flag domains with an entropy score above a dynamically calculated threshold (e.g., > 3.5) indicative of DGA. Additionally, monitor the size of outbound POST requests in http.log; flag any request where the size is in the 95th percentile or greater compared to the user's 30-day baseline. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., LSTM) on the volume and frequency of outbound network connections per device. Train the model on historical Zeek conn.log data. An alert is triggered if the model detects a significant deviation from the predicted pattern that correlates with the installation time of a new, unapproved keyboard application from MDM logs."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A mobile application is granted 'Draw Over Other Apps' (Android: SYSTEM_ALERT_WINDOW) or 'Accessibility Service' permissions, where this permission is not justified by the application's stated function, and the application exhibits anomalous network behavior.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, create and maintain a list of applications known to legitimately require 'Draw Over Other Apps' or 'Accessibility Service' permissions. Generate an alert whenever a new or unlisted application is granted these permissions. Correlate this alert with threat intelligence feeds for known malicious application package names. 2. (Statistical) For any application flagged by the symbolic logic rule, analyze its network connections in Zeek conn.log. Establish a baseline of typical outbound data volume (orig_bytes) and connection frequency for the user's device. Flag the application if its activity causes the daily outbound data volume to exceed 3 standard deviations from the user's 30-day rolling average. 3. (Machine Learning) Use a classification model (e.g., Random Forest) trained on application metadata (permissions requested, app store category, developer reputation) to predict the likelihood that an app's request for high-risk permissions is malicious. Applications classified as high-risk trigger an investigation, prioritizing analysis of their network traffic in Zeek ssl.log for suspicious characteristics like self-signed certificates or unusual server names (SNI)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]