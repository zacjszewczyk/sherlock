[
  {
    "information_requirement": "Is an adversary executing unauthorized commands or scripts on mobile devices via a Unix shell? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A mobile application process, which is not on a pre-approved allowlist of shell-spawning applications, is observed as the parent of a shell process (e.g., 'sh', 'bash'). The allowlist is derived from the corporate MDM/UEM application catalog and known administrative/security tools.",
            "data_sources": [
              "MTD process events",
              "MDM application inventory"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM servers hosting application inventories, Cloud-hosted Mobile Threat Defense (MTD) platform, Individual corporate-managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic) Develop and maintain an allowlist of parent process names and their corresponding application bundle IDs/hashes that are authorized to spawn shell processes. Create a SIEM rule that generates a high-severity alert when an MTD process event shows a shell ('sh', 'bash') spawned by a parent process not on this allowlist. 2. (Statistical) For each unique mobile application across the fleet, calculate the baseline rate of shell execution per device over a 30-day rolling window. Generate an alert when an application's shell execution rate on any given day exceeds 3 standard deviations above its historical average. 3. (Machine Learning) Train a classification model (e.g., Random Forest) to predict if a parent-shell process relationship is malicious. Use features from MTD process events such as parent process name, parent process path, application signing certificate details, user context, and whether the app is managed by the MDM. Deploy the model to score new events in real-time."
          },
          {
            "description": "A shell process is executed with command-line arguments containing high-entropy strings, patterns indicative of reverse shells or inline execution (e.g., 'curl ... | sh'), or network connections to destinations with low reputation or that are newly registered.",
            "data_sources": [
              "MTD process events with command-line arguments",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress gateways (Firewalls, VPN Concentrators, Proxies), DNS resolvers serving mobile device clients, Cloud-hosted Mobile Threat Defense (MTD) platform",
            "action": "1. (Symbolic) In the SIEM, scan the command-line arguments of all shell processes using regular expressions to detect high-risk patterns like 'curl ... | sh', 'wget ... -O - | sh', 'base64 -d', 'nc -e /bin/sh'. Correlate any matches with network logs (Zeek conn.log) to check for connections to IP addresses or domains on threat intelligence feeds. 2. (Statistical) For each shell command-line string, calculate its Shannon entropy score. Establish a baseline distribution of entropy scores for legitimate commands observed in your environment over a 30-day period. Alert on any command whose entropy score exceeds the 99th percentile of this baseline, flagging it for potential obfuscation. 3. (Machine Learning) Train a sequence-based neural network (e.g., an LSTM) on labeled command-line argument strings to classify them as benign or malicious. The model learns complex patterns and obfuscation techniques that are difficult to capture with regular expressions. Use the model to score and flag suspicious shell commands in near real-time."
          },
          {
            "description": "A process creation event for a superuser binary ('su' or 'sudo') is observed on a mobile device, and the device's compliance status in the MDM/UEM indicates it is not jailbroken or rooted. This signifies an attempted or successful privilege escalation.",
            "data_sources": [
              "MTD process events",
              "MDM compliance status logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM servers hosting device compliance state, Individual corporate-managed mobile endpoints, Identity and Access Management (IAM) platform for user context",
            "action": "1. (Symbolic) Implement a critical-severity SIEM rule to alert on any process creation event where the process name is 'su' or 'sudo'. The rule should automatically query the MDM via API to enrich the alert with the device's real-time compliance status (rooted/jailbroken). Trigger a SOAR playbook to immediately quarantine the device if a 'su' event occurs on a compliant, non-rooted device. 2. (Statistical) Track the fleet-wide count of unique devices executing 'su' or 'sudo' per hour. Alert if this count spikes beyond a dynamic threshold, such as 3 standard deviations above the 7-day rolling average, to detect a potential widespread root compromise campaign. 3. (Machine Learning) After a confirmed superuser execution, use an unsupervised clustering algorithm (e.g., DBSCAN) to group the affected device with other devices showing similar post-compromise behavior. Input features should include subsequent MTD alerts, outbound network destinations (ASNs, domains), and names of child processes spawned after the 'su' event. This helps identify the full scope of a single attack campaign."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]