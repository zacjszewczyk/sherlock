[
  {
    "information_requirement": "Has an adversary successfully collected contact list data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.003",
        "name": "Contact List",
        "evidence": [
          {
            "description": "An application is granted contact list access permissions ('android.permission.READ_CONTACTS' or 'NSContactsUsageDescription') where the application's category is not typically associated with contact management (e.g., 'Games', 'Utilities') and such permissions are statistically rare for that category.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "Mobile Threat Defense (MTD) permission audit logs",
              "Application vetting service reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM/MTD log aggregation platform, Application Vetting Service Portal",
            "action": "1. (Symbolic) Query MDM/MTD logs to identify any application with contact list permissions whose package name or cryptographic hash matches a known-malicious indicator from threat intelligence feeds. 2. (Statistical) Ingest application inventory and permission data from all managed devices. For each application category (e.g., 'Productivity', 'Games'), calculate the percentage of apps that have contact list permissions. Trigger an alert for any application that has the permission but belongs to a category where the prevalence is below a 1% threshold. 3. (Machine Learning) Deploy a logistic regression or random forest classification model trained on application metadata (e.g., developer reputation, application age, count of other permissions). Use the model to predict the likelihood of a permission request being anomalous and flag applications with a high probability score for manual investigation."
          },
          {
            "description": "A process makes an abnormally high number of OS API calls to access the contact list, or contact list access is immediately followed by network exfiltration to a suspicious destination.",
            "data_sources": [
              "MTD OS API call monitoring logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile VPN concentrators, Network egress points for mobile device traffic, DNS resolvers serving mobile clients",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when an MTD log event for contact list access from a specific device IP is followed within a 2-minute window by a Zeek conn.log event from the same IP to a destination address present on a threat intelligence blocklist. 2. (Statistical) For each user-application pair, establish a baseline of hourly contact list API call frequency using MTD logs. Generate an alert if the call count in any given hour exceeds the 95th percentile or 3 standard deviations above the historical mean. Concurrently, monitor Zeek dns.log for DNS queries from the device to domains with high entropy or those not seen in the last 30 days, occurring immediately after the API call spike. 3. (Machine Learning) Implement a time-series anomaly detection model, such as an LSTM autoencoder, trained on sequences of events from a device (e.g., API calls, network connections, data volume). Flag event sequences where contact list access is followed by an anomalous network connection that the model flags with a high reconstruction error."
          },
          {
            "description": "A sideloaded or unofficially installed application with contact list access permissions is found on a device that has failed a security integrity check (i.e., is jailbroken or rooted).",
            "data_sources": [
              "MDM application inventory logs",
              "MDM device integrity attestation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM administration console, Device compliance reporting dashboards",
            "action": "1. (Symbolic) Implement a high-severity SIEM alert that triggers when an MDM log event indicates a single device meets all three of the following conditions: 1) 'device_integrity_status' is 'Failed' or 'Compromised'; 2) an application is installed with 'installation_source' as 'Unknown' or 'Sideloaded'; and 3) the application's manifest includes contact list access permissions. 2. (Statistical) Generate a daily report of all devices with sideloaded applications. For each application, calculate a risk score by summing weights assigned to sensitive permissions (e.g., contacts=10, location=5, microphone=10). Rank devices by the cumulative risk score of their sideloaded apps and investigate the top 5% of devices. 3. (Machine Learning) Use a clustering algorithm like DBSCAN to group managed devices based on a feature set including OS version, patch level, number of sideloaded apps, and count of failed integrity checks. Isolate and investigate devices that fall into small, outlier clusters, as they represent configurations that deviate significantly from the organizational baseline."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]