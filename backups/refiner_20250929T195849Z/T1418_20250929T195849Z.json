[
  {
    "information_requirement": "Is an adversary attempting to discover installed applications on our managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1418",
        "name": "Software Discovery",
        "evidence": [
          {
            "description": "A command-line process, `adb.exe`, is executed on a host computer with arguments indicating an attempt to list installed packages on a connected Android device, such as `shell pm list packages`.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, IT support machines with mobile device management tools, and endpoint devices of privileged users.",
            "action": "1. (Symbolic) Construct a SIEM query to detect process creation events (Windows Event ID 4688) where the `ProcessName` ends in `\\adb.exe` and the `CommandLine` contains `shell pm list packages` or `shell cmd package list packages`. Generate a high-severity alert if the `HostName` is not on a pre-approved list of developer or IT support machines. 2. (Statistical) For hosts on the approved list, establish a baseline of `adb.exe` command-line parameter entropy per user. For each new execution, calculate the Shannon entropy of the command-line string. Generate an alert if the entropy deviates by more than 3 standard deviations from the user's 30-day rolling average, or if the daily execution count for a user exceeds the 99th percentile of their historical activity. 3. (Machine Learning) Deploy a logistic regression model trained on labeled historical process execution data. Engineer features such as: time of day (binary: business hours vs. off-hours), host group (e.g., developer, IT, standard user), command-line length, and a binary feature for the presence of enumeration keywords ('list', 'packages', 'pm'). Use the model to output a probability score of maliciousness for each `adb.exe` execution. Escalate events with a score above a defined threshold (e.g., 0.85) for analyst review."
          },
          {
            "description": "A small-to-medium sized outbound data transfer (e.g., 1KB-50KB) over HTTP/S or DNS from a managed mobile device to a low-reputation or newly observed domain, consistent with the size of an exfiltrated application list.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Wi-Fi network segments for mobile devices, VPN concentrators, and corporate DNS resolvers.",
            "action": "1. (Symbolic) Create a SIEM rule that triggers on network logs (`Zeek http.log`, `dns.log`) from the mobile device IP range. The rule should look for: (a) HTTP POST requests or (b) long DNS queries (query length > 100 characters) directed to domains that are either found on a threat intelligence feed of malicious domains or have a registration age of less than 30 days. Alert on any match. 2. (Statistical) From `Zeek conn.log`, for each outbound connection from the mobile device subnet, calculate a 'beaconing score'. Score = (`orig_bytes` / (`resp_bytes` + 1)) * (1 / destination_popularity_score). Destination popularity is the frequency of the domain being contacted by all devices over the last 7 days. Monitor the beaconing score for each device. Alert if a device's score exceeds the 95th percentile for that device's own historical baseline or the 98th percentile for all mobile devices in the current hour. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) on the total daily outbound data volume (`orig_bytes`) per mobile device. If the model flags a day as anomalous, trigger a secondary analysis. This secondary analysis uses a pre-trained DGA-detection classifier (e.g., an LSTM or Random Forest model using features like domain entropy, n-gram frequency, and vowel-to-consonant ratio) on all destination domains contacted by the device on that day. Escalate if an anomalous data spike coincides with traffic to a high-probability DGA domain."
          },
          {
            "description": "An application installed on a managed mobile device requests permissions or uses APIs indicative of software discovery. For Android, this includes the `android.permission.QUERY_ALL_PACKAGES` permission. For iOS, this involves the use of private APIs like `LSApplicationWorkspace`.",
            "data_sources": [
              "MDM/MTD Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate MDM/MTD platform, managed mobile devices (Android and iOS).",
            "action": "1. (Symbolic) Periodically query MDM/MTD logs for any application that possesses the `android.permission.QUERY_ALL_PACKAGES` permission or is flagged for using the `LSApplicationWorkspace` private API. Compare the list of flagged applications against an allowlist of known-good applications (e.g., legitimate device management tools). Alert on any application not on the allowlist. 2. (Statistical) For all applications, calculate a risk score based on requested permissions. Assign a high weight to `QUERY_ALL_PACKAGES`. Sum the weights for all permissions requested by an app. Calculate the distribution of these risk scores across all apps in the environment. Flag any application whose score is in the top 5th percentile for further review. Additionally, track the prevalence of this permission; an alert should be generated if the percentage of apps with this permission suddenly increases over a short period (e.g., a 10% increase week-over-week). 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features from application manifests scraped from MDM/MTD logs. Features should include: the set of all requested permissions (one-hot encoded), the presence of `QUERY_ALL_PACKAGES` (as a specific feature), the application's age in the app store, and its category. The model should be trained on a labeled dataset of known benign and malicious applications to predict the likelihood that a new application is malicious. Escalate applications with a predicted probability > 0.90."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]