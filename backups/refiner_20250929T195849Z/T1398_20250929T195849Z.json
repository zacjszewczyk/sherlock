[
  {
    "information_requirement": "Has an adversary established persistence on corporate mobile devices by modifying boot or logon initialization scripts? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1398",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A managed Android device returns a failed remote attestation result from the Android SafetyNet API, where 'ctsProfileMatch' or 'basicIntegrity' is 'false', or a failed attestation from an equivalent service like Samsung Knox.",
            "data_sources": [
              "MDM Attestation Logs",
              "Google SafetyNet API Logs",
              "Samsung Knox Attestation Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers, Security Information and Event Management (SIEM) platform, and network sensors at internet egress points.",
            "action": "1. (Symbolic) Continuously ingest MDM attestation logs into the SIEM. Create a high-priority alert that triggers immediately for any device reporting an attestation result where the 'ctsProfileMatch' field or the 'basicIntegrity' field is 'false'. 2. (Statistical) For the entire device fleet, calculate a rolling 30-day baseline of the hourly attestation failure rate. Generate an alert if the current hour's failure count exceeds the 99th percentile of this baseline, which indicates a statistically significant anomaly that could represent a coordinated attack or widespread issue. 3. (Machine Learning) Develop and deploy a logistic regression classifier to produce a device compromise risk score. Enrich attestation results with features from Zeek logs associated with the device's IP, such as: connection to a new or rare ASN, DNS query entropy, ratio of failed to successful connections, and connections to known malicious IPs. A failed attestation combined with multiple high-risk network indicators should produce a critical alert for immediate investigation."
          },
          {
            "description": "A managed Android device reports a non-passing Android Verified Boot state during an MDM-initiated health check, indicated by a 'Red' (corrupt system partition) or 'Yellow' (warning, non-system partition modified) status in the device health logs [1].",
            "data_sources": [
              "MDM Device Health Check Logs",
              "MDM Policy Compliance Reports",
              "Android Verified Boot logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform.",
            "action": "1. (Symbolic) Configure the MDM platform to periodically poll and log the Verified Boot status from all managed devices. Create a critical-severity alert in the SIEM to trigger for any log entry where the 'verified_boot_state' field is 'Red', indicating a compromised system partition. 2. (Statistical) Track the daily count of devices reporting a 'Yellow' Verified Boot state. Apply a time-series decomposition (e.g., Seasonal-Trend-Loess) over a 90-day window to identify a statistically significant upward trend, which could signal a widespread, low-and-slow attack campaign or a problematic OS update affecting device integrity. 3. (Machine Learning) Implement an Isolation Forest anomaly detection model using all device health telemetry from the MDM. Key features should include: Verified Boot state (encoded numerically), OS patch level age in days, time since last successful MDM check-in, and number of installed applications. The model will identify devices that are outliers, such as a device in a 'Yellow' state that has not checked in for an extended period, which rule-based systems might overlook."
          },
          {
            "description": "A post-compromise forensic analysis of a mobile device's file system image reveals unauthorized or modified files within critical boot partitions. Specific paths to inspect include /system/etc/init/, /system/bin/, /vendor/etc/init/, and the contents of init.rc files.",
            "data_sources": [
              "Mobile Device Forensic Image",
              "File system metadata from forensic image",
              "Known-good file hash database",
              "Threat intelligence feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage.",
            "action": "1. (Symbolic) For a suspect device, acquire a full file system image. Compute SHA-256 hashes for all files in boot-related directories (e.g., /system/bin/, /system/etc/init/). Compare these hashes against a curated known-good baseline hash set for the exact device model and OS build. Also, query threat intelligence platforms (e.g., VirusTotal) with any mismatched hashes to identify known malware. 2. (Statistical) For all executable and script files found in boot-related paths, calculate the Shannon entropy score. Establish a baseline entropy distribution from known-good device images. Flag any file whose entropy is a statistical outlier (e.g., > 3 standard deviations from the mean, or a score > 7.5 on an 8-bit scale), as high entropy often indicates packing or encryption used to hide malicious code. 3. (Machine Learning) Utilize a pre-trained Random Forest classifier to analyze the content of any discovered scripts. Train the model on public and internal datasets of benign and malicious mobile scripts (e.g., shell scripts, init.rc files). Features for the model should include frequency of suspicious keywords ('su', 'socket', 'pm install'), string obfuscation patterns (e.g., base64 encoded chunks), and the presence of executable file headers. The model's output will classify scripts as benign, suspicious, or malicious."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]