[
  {
    "information_requirement": "Is an adversary using obfuscated files or information to evade defenses on mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406",
        "name": "Obfuscated Files or Information",
        "evidence": [
          {
            "description": "A file transferred over the network to a mobile device IP address has a calculated Shannon entropy score above $$ 7.0 $$ and/or a mime_type (e.g., 'application/x-dosexec') that is inconsistent with its file extension (e.g., '.jpg').",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators.",
            "action": "1. (Symbolic) Hunt for known malicious file hashes (IOCs) within Zeek files.log for files transferred to the mobile IP space. Create a rule to flag any file where the mime_type is 'application/x-dosexec' or 'application/octet-stream' but the file extension is a common document or image type (e.g., .pdf, .docx, .png, .jpg). 2. (Statistical) For all files in files.log, calculate the Shannon entropy. Establish a baseline entropy score for each mime_type observed over a 30-day period. Alert when a file's entropy exceeds the 95th percentile for its declared mime_type or has an absolute entropy value of $$ E > 7.5 $$, suggesting packing or encryption. 3. (Machine Learning) Train a random forest classifier model on labeled data from Zeek files.log and http.log. Use features such as file entropy, file size, mime_type, file extension, HTTP user-agent, and source IP reputation. The model will classify each file download as 'benign' or 'suspiciously obfuscated' and use this to score new file transfers in real-time."
          },
          {
            "description": "A single mobile device IP address receives multiple (e.g., >3) small (<1MB) file fragments from a single source IP within a short time window (e.g., <5 minutes), where the filenames follow a sequential or common naming pattern (e.g., 'part1.bin', 'archive.z01').",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients.",
            "action": "1. (Symbolic) Create a detection rule that triggers when files.log records multiple downloads to the same destination IP from the same source IP where filenames match a regex pattern like `.*part[0-9]+.*`, `.*\\.z[0-9]+`, or `.*\\.r[0-9]+` within a 5-minute window. 2. (Statistical) For each mobile device IP, count the number of files downloaded from a single source IP in a 1-minute sliding window. Calculate the mean and standard deviation of this count across the mobile device population. Flag any device where the file download count from a single source exceeds 3 standard deviations above the population mean. Further weight the score if the source domain is newly registered (via dns.log and WHOIS). 3. (Machine Learning) Use a clustering algorithm like DBSCAN on network traffic data from conn.log and files.log. Use features such as source IP, destination IP, total bytes transferred, and time between connections to group related network activities, identifying a cluster of connections that represent a single, coordinated split-payload download event."
          },
          {
            "description": "On a development host, a process executes a command containing a known encoding utility (e.g., 'base64', 'certutil') or a custom packing tool, creating an output file. This event is followed within 10 minutes by a network connection from the same host to a mobile device IP or a public file-sharing service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD build servers, code repositories, and artifact management systems.",
            "action": "1. (Symbolic) Monitor Windows Event ID 4688 command-line logging on designated NAIs for strings indicative of encoding or obfuscation, such as `base64`, `certutil -encode`, `openssl enc`, or the names of known Android/iOS packing tools. 2. (Statistical) For each process on developer hosts, calculate the entropy of its command-line arguments. Establish a baseline of normal command-line entropy for common development processes (e.g., git, gradle, xcodebuild). Alert when a command line's entropy exceeds the 98th percentile for that process name, suggesting the presence of encoded data. 3. (Machine Learning) Develop a time-series anomaly detection model for process chains on development hosts. The model learns normal sequences of processes (e.g., compiler -> linker -> code-signer). An alert is generated when an anomalous sequence is detected, such as a compiler being followed by an unexpected encoding utility (e.g., `gcc.exe` -> `certutil.exe`). Correlate this anomaly with subsequent network activity from Zeek conn.log to identify potential side-loading of the obfuscated payload."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]