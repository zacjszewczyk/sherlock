[
  {
    "information_requirement": "Has an adversary compromised our mobile software supply chain to gain initial access? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474.003",
        "name": "Compromise Software Supply Chain",
        "evidence": [
          {
            "description": "An updated mobile application exhibits a digital signature hash that does not match the vendor-published hash or the previously baselined signature. Concurrently, the application's manifest requests new high-risk permissions (e.g., Accessibility Services, Device Admin, Read SMS) not present in the previous version, or the signature is found on a known-malicious deny-list.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory Logs",
              "Mobile Threat Defense (MTD) Signature Analysis Reports",
              "Vendor-published application hashes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM servers hosting application inventories, Corporate-owned mobile devices, Public and private application stores used by the organization",
            "action": "For every application update event captured by MDM/MTD: 1. (Symbolic Logic) Extract the new package's signature hash. Compare this hash against three lists: a) a threat intelligence deny-list of known-malicious hashes, b) a vendor-provided allow-list of official hashes, and c) an internally maintained baseline of previously seen good hashes for that app. Alert on any deny-list match or if the hash is not on the allow-list and has never been seen before. 2. (Statistical Analysis) Extract the list of requested permissions from the new and old application manifests. Assign a risk weight to each permission (e.g., Read SMS=10, Network Access=1, Device Admin=8). Calculate a total risk score for both versions. If the percentage increase in the risk score for the update exceeds the 99th percentile of all historical score increases for that specific application, flag for investigation. 3. (Machine Learning) Feed features from the update (e.g., signature status from Step 1, permission risk score change from Step 2, count of new permissions, presence of specific risky permission combinations) into a pre-trained Random Forest or Gradient Boosting classifier model. The model, trained on historical benign and known-malicious updates, should output a probability of compromise. An alert is triggered if the probability exceeds a defined threshold (e.g., 0.85), especially when correlated with a signature mismatch."
          },
          {
            "description": "Within 24 hours of a mobile application update, the device initiates network connections to domains or IPs with a low reputation score, or to domains with high entropy scores indicative of DGA. Additionally, the total data egress from the updated application exceeds its historical baseline by a statistically significant margin (e.g., >3 standard deviations).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Mobile Threat Defense (MTD) Network Alert Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network egress points (firewalls, proxies), Corporate DNS resolvers, WiFi access points servicing managed mobile devices, VPN concentrators",
            "action": "Correlate MDM application update events with network logs (Zeek) from the device's IP address for the subsequent 24-hour period. 1. (Symbolic Logic) For every new connection, query the destination IP (from Zeek conn.log) and requested domain (from Zeek dns.log) against threat intelligence feeds. Generate a high-severity alert for any match to a known C2 or malware category. 2. (Statistical Analysis) For each application, maintain a 30-day rolling baseline of its average daily data egress (sum of `orig_bytes` + `resp_bytes` in Zeek conn.log). If the post-update daily egress exceeds three standard deviations above this baseline, alert. Concurrently, for all newly requested second-level domains in Zeek dns.log, calculate the Shannon entropy of the domain string. An entropy score greater than 3.5 is a strong indicator of DGA and should be alerted on. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., LSTM) trained on historical network traffic volume (bytes per hour) for each device. If the actual traffic post-update significantly deviates from the model's forecast (i.e., falls outside the 95% confidence interval), flag it as an anomaly. A final risk score is calculated by combining this anomaly flag with alerts from the symbolic and statistical methods to determine the overall likelihood of compromise."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]