[
  {
    "information_requirement": "Has an adversary exploited a software vulnerability to gain initial access to a mobile device? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1664",
        "name": "Exploitation for Initial Access",
        "evidence": [
          {
            "description": "A mobile device initiates a network connection to a destination IP/domain on a mobile-specific threat intelligence feed, OR exhibits a network traffic profile where key metrics (e.g., data volume, destination port entropy, JA3/JA3S hash frequency) deviate more than 3 standard deviations from its 30-day historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, Guest Wi-Fi network, VPN concentrators, Internet gateway proxy/firewall logs, and MDM/UEM servers.",
            "action": "Symbolic: Query network logs (Zeek conn.log, dns.log) to join mobile device IP addresses with requested domains and SSL certificates. Compare destination IPs, domains, and certificate subjects against mobile-specific threat intelligence feeds. Generate a high-severity alert on any match. Statistical: For each mobile device IP, establish a 30-day rolling baseline of network activity using Zeek logs. Calculate the mean and standard deviation for daily data sent/received (`orig_bytes`/`resp_bytes` in conn.log), the entropy of destination ports, and the set of unique JA3/JA3S hashes. Generate a medium-severity alert if a device's daily data transfer exceeds 3 standard deviations from its baseline, if the port entropy score drops below the 10th percentile (indicating tunneling), or if a previously unseen JA3/JA3S hash appears. Machine Learning: Train a device-specific LSTM Autoencoder model on historical time-series feature vectors extracted from Zeek conn.log (e.g., connection duration, bytes transferred, protocol, destination port). For each new connection, calculate the reconstruction error. If the error score exceeds a dynamically calculated threshold (e.g., 99th percentile of training reconstruction errors), flag the connection as a potential exploit-driven anomaly."
          },
          {
            "description": "A mobile device is observed downloading a file with a known malicious hash, OR an application package (e.g., .apk, .ipa) from a URL not on an approved list of app stores, OR a file whose type is inconsistent with its Zeek-inferred MIME type or file extension.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, Web Proxy, Guest Wi-Fi network, Corporate Wi-Fi network segments, and Content Delivery Network (CDN) logs.",
            "action": "Symbolic: From Zeek files.log, extract `md5` and `sha1` hashes for all files downloaded by mobile devices. Compare these hashes against a threat intelligence database of known mobile malware. Generate a high-severity alert on any match. Concurrently, from http.log, filter for downloads of `.apk` or `.ipa` files and alert if the `host` or `referrer` field does not belong to a pre-defined allowlist of official app stores (e.g., play.google.com, apps.apple.com). Statistical: For all files analyzed by Zeek (`files.log`), calculate the fleet-wide baseline rate of mismatch between the server-provided `mime_type` and the `inferred_mime_type` derived from file magic analysis. For each individual mobile device, track its personal mismatch rate. Generate a medium-severity alert if a device's daily mismatch rate exceeds the fleet-wide baseline by more than 3 standard deviations, suggesting potential obfuscation or malformed file delivery. Machine Learning: Implement a pre-trained Gradient Boosting classifier to score URLs for maliciousness based on lexical features (length, entropy, presence of special characters, n-grams) and contextual features (domain age, TLD reputation). Apply this model in near-real-time to all URLs requested by mobile devices (from `dns.log` and `http.log`). Escalate URLs associated with file downloads that receive a high maliciousness score (>0.9) for analyst review."
          },
          {
            "description": "A mobile device receives an inbound connection from a known messaging service (e.g., Apple Push Notification Service, Firebase Cloud Messaging) and, within a short time window (< 60 seconds), initiates an unrelated outbound connection to a low-reputation or newly observed domain or IP address, a pattern indicative of a zero-click exploit.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network, Guest Wi-Fi network, Internet Gateway, and VPN termination points.",
            "action": "Symbolic: Continuously monitor `conn.log` and `dns.log` for connections from mobile device IP ranges to IPs, domains, or SSL certificate fingerprints known to be associated with mobile spyware campaigns (e.g., Pegasus, Predator). Maintain this IOC list from trusted intelligence sources and generate a critical-severity alert on any match. Statistical: For each mobile device, analyze the time delta between an inbound connection from a known push notification service IP block and the next new outbound connection. Create a distribution of these time deltas to establish a baseline of normal user response time. Flag instances where a new outbound connection to a non-allowlisted, high-entropy domain occurs within a statistically anomalous short time window (e.g., less than the 5th percentile of the user's typical response time), suggesting automated, non-user-driven activity. Machine Learning: Model a mobile device's network behavior as a sequence of states using a Hidden Markov Model (HMM). Define states such as 'Idle', 'Receiving_Notification', 'User_Active_Browsing' (connections to high-reputation domains), and 'Anomalous_Beacon' (connections to low-reputation, newly-seen domains with periodic traffic). Train the HMM on baseline data to learn normal state transition probabilities. Generate an alert when the model observes a low-probability state transition, such as 'Receiving_Notification' -> 'Anomalous_Beacon', which bypasses the expected 'User_Active_Browsing' state."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]