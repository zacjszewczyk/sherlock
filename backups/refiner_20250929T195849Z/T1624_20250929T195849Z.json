[
  {
    "information_requirement": "Is an adversary maintaining persistence on our mobile devices through event-triggered execution? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "An installed application's manifest (AndroidManifest.xml) registers one or more broadcast receivers for system events (e.g., 'BOOT_COMPLETED', 'SMS_RECEIVED') that are anomalous for its stated function and are correlated with high-risk permissions (e.g., 'READ_SMS', 'INTERNET').",
            "data_sources": [
              "MDM Application Inventory Logs (containing app name, version, permissions)",
              "Android Application Manifests (AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Mobile Device Management (MDM) server, Application vetting/sandbox environment",
            "action": "1. (Symbolic) Query for applications that register known high-risk event receivers (e.g., 'android.provider.Telephony.SMS_RECEIVED') AND request corresponding dangerous permissions (e.g., 'android.permission.RECEIVE_SMS', 'android.permission.SEND_SMS'). Compare application package names and signing certificates against a deny-list of known malicious indicators. 2. (Statistical) For all installed applications, parse their manifests to extract registered receivers and requested permissions. Assign a risk weight to each receiver/permission pair based on potential for abuse. Calculate a cumulative risk score for each application. Establish a baseline of risk scores across the device fleet and flag any application whose score exceeds the 95th percentile for its functional category (e.g., a calculator app with a high score). 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on features extracted from application manifests (e.g., one-hot encoded permissions, registered receivers, number of activities). Use this model to classify newly installed or updated applications as 'benign' or 'suspicious'. Investigate any application classified as suspicious, paying close attention to the features that contributed most to the classification."
          },
          {
            "description": "A statistically significant deviation in network traffic patterns (e.g., volume, connection count, destination entropy) is observed from a mobile device within a short time window (e.g., 60 seconds) immediately following a logged system event (e.g., 'device boot', 'connected to Wi-Fi').",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM Event Logs (capturing boot, network change, unlock events)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, Internal and external DNS resolvers",
            "action": "1. (Symbolic) Correlate MDM system event timestamps (e.g., 'boot_completed') with network logs from the device's source IP. Within a 60-second window post-event, query all DNS requests (Zeek dns.log) and TCP/UDP connections (Zeek conn.log). Match destination domains and IPs against a threat intelligence feed of known C2 servers or malicious domains. 2. (Statistical) For each device, establish a baseline of normal network activity following key system events. Baselines should include metrics like the number of connections, total bytes transferred, and the Shannon entropy of requested domain names. Trigger an alert if, in the 60-second window post-event, any metric exceeds three standard deviations from its established baseline or if the entropy of DNS queries is anomalously high, suggesting DGA activity. 3. (Machine Learning) Implement a time series anomaly detection model (e.g., LSTM autoencoder) for each device, trained on vectors of network features (e.g., connection count, data volume, protocol mix) from the immediate post-event window. The model learns the normal 'heartbeat' of activity. A high reconstruction error from the model indicates a significant deviation from normal patterns, flagging a potential event-triggered malicious process."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]