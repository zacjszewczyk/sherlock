[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile security controls by disabling or modifying security tools? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.003",
        "name": "Disable or Modify Tools",
        "evidence": [
          {
            "description": "A log event from the MDM/UEM platform indicates a change in the list of active device administrators for a managed mobile device. The evidence is positive if an approved security application (e.g., the MTD agent) is removed from the list, or if an unapproved application is added to the list.",
            "data_sources": [
              "MDM device_administrator_changes.log",
              "MDM application_inventory.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM management console (cloud or on-premise), managed Android and iOS devices",
            "action": "1. (Symbolic) Query MDM logs for events where the `device_administrator_status` field changes. For each change, compare the `current_admins` list against a predefined `allow_list` for that device's profile. Trigger a high-severity alert if `(allow_list - current_admins)` contains a required security tool OR `(current_admins - allow_list)` contains any non-allow-listed application. 2. (Statistical) For each `device_id`, calculate the rate of device administrator change events over a 30-day rolling window. Identify the 99th percentile for this rate across the entire device fleet. Flag any device whose individual change rate exceeds this percentile for investigation, as it indicates an unusually high frequency of administrative modifications. 3. (Machine Learning) Train a Random Forest classification model on historical MDM device administrator change logs. Use features such as `application_name` (added/removed), `application_category`, `time_of_day`, `day_of_week`, and `is_sideloaded_app`. The model will classify each change event as 'benign' or 'suspicious' to prioritize analyst review."
          },
          {
            "description": "The absence of a periodic 'heartbeat' or 'check-in' log from a managed Mobile Threat Defense (MTD) agent for a duration that exceeds a dynamically calculated baseline, or a log from the MTD management console explicitly showing an agent's status as 'disabled', 'unresponsive', or 'tampered'.",
            "data_sources": [
              "MTD agent_health_status.log",
              "MTD management_console_events.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MTD management console (cloud or on-premise), managed Android and iOS devices",
            "action": "1. (Symbolic) Create a SIEM rule that generates a medium-severity alert whenever an `MTD management_console_events.log` contains a record with `agent_status: 'disabled'`, `agent_status: 'stopped'`, or `agent_status: 'tampered'`. Correlate this alert with MDM compliance logs to check if the device is concurrently marked as non-compliant. 2. (Statistical) For each `device_id`, calculate the mean and standard deviation of its MTD agent heartbeat interval from `MTD agent_health_status.log`. Trigger an alert if a device fails to send a heartbeat for a period greater than `mean + (3 * standard_deviation)`. Separately, monitor the fleet-wide count of silent agents per hour; an hourly count exceeding the 95th percentile of the daily average indicates a potential widespread issue or attack. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM or Prophet) on the aggregate MTD heartbeat data volume ingested into the SIEM. The model learns the normal daily and weekly patterns of telemetry. Generate an alert when a sudden, statistically significant drop in telemetry volume is detected that deviates from the model's forecast, suggesting a coordinated disabling of MTD agents."
          },
          {
            "description": "A device compliance or security posture log from a managed Android device contains a key-value pair indicating the SELinux enforcement status is 'permissive' or 'disabled', which deviates from the corporate security baseline requiring an 'enforcing' state.",
            "data_sources": [
              "MDM device_compliance_state.log",
              "MTD security_posture_scan.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM and MTD management consoles, managed Android device fleet",
            "action": "1. (Symbolic) Implement a critical-severity SIEM alert that triggers immediately if any `MTD security_posture_scan.log` or `MDM device_compliance_state.log` contains the field-value pair `selinux_status: 'permissive'` or `selinux_status: 'disabled'`. This event should automatically trigger a device isolation workflow. 2. (Statistical) Establish a baseline where the count of SELinux status changes per device per day is zero. Any non-zero count is a critical anomaly. Additionally, calculate the Shannon entropy of security setting values (`selinux_status`, `root_status`, `encryption_status`) on a per-device basis over a 24-hour period. A device with abnormally high entropy suggests rapid, suspicious state changes indicative of tampering. 3. (Machine Learning) Develop an unsupervised anomaly detection model (e.g., Isolation Forest) using device posture telemetry as input features. Include features like `selinux_status`, `root_status`, `screen_lock_enabled`, `is_sideloading_enabled`, and `last_patch_level`. Any device that the model flags as a significant outlier (i.e., having a high anomaly score) should be automatically queued for Tier 2 analyst investigation, as it represents a deviation from the learned norm of a secure device posture."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]