[
  {
    "information_requirement": "Is an adversary using a compromised mobile device to move laterally within our internal network by exploiting remote services? (PIR)",
    "tactic_id": "TA0033",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1428",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "A single source IP, identified as a mobile device from DHCP or VPN logs, establishes connections to a statistically anomalous number of unique internal hosts (>98th percentile of the 5-minute baseline, or a hard threshold of >10 hosts) on common remote service ports (e.g., 445/SMB, 3389/RDP, 22/SSH, 5985/WinRM). This scanning activity is followed within 60 minutes by a successful remote login (Windows Event ID 4624 with Logon Type 3 or 10) on one of the targeted hosts originating from the same source IP.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek software.log",
              "Windows Event ID 4624",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators, Internal Wi-Fi Access Points, Core network switches, Domain Controllers, and high-value internal servers.",
            "action": "1. Ingest and correlate VPN/DHCP logs with network traffic (Zeek conn.log) to create an enriched session log that maps mobile device IPs and associated user accounts to all network activity. 2. (Symbolic) Create a SIEM rule that triggers when a source IP from a mobile device IP range is seen in Zeek notice.log with notice_type=Scan::Port_Scan. The rule should then look for a subsequent Windows Event ID 4624 (Logon Type 3 or 10) from the same source IP to one of the scanned destinations within the next hour. 3. (Statistical) For each source IP in the mobile device IP range, create a rolling 5-minute count of unique destination IPs and unique destination ports from Zeek conn.log. Establish a baseline distribution for these counts across all mobile devices. Generate an alert when a device's count for either metric exceeds the 98th percentile. Additionally, calculate the Shannon entropy of the destination port set for each 5-minute window; a high entropy score combined with low orig_bytes per connection is a strong indicator of a port scan. 4. (Machine Learning) Train an isolation forest model using features derived from 5-minute sessions for each mobile device IP. Features should include: count of unique destination IPs, count of unique destination ports, entropy of destination ports, total orig_bytes and resp_bytes, protocol distribution (TCP/UDP/ICMP), and a flag for connections to high-value servers. A high anomaly score for a device's session indicates behavior like scanning. 5. If any method flags an IP, automatically query for successful logins (Windows Event ID 4624) from that IP to any of the target hosts within the next hour to confirm successful lateral movement."
          },
          {
            "description": "A critical network-facing service (e.g., IIS, SMB, RDP) on an internal server or workstation unexpectedly terminates (Windows Event ID 7034 or 7031) or the hosting application process crashes (Windows Event ID 1000, Faulting application name matching the service process) within 60 seconds of receiving a network connection from an IP address associated with a mobile device.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 7034",
              "Windows Event ID 7031",
              "Zeek conn.log",
              "Zeek http.log",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, database servers, and workstations hosting remote services (e.g., RDP, SMB, HTTP) accessible from the internal network.",
            "action": "1. Create a trigger that, upon detecting Windows Event ID 1000, 7031, or 7034 for a predefined list of critical service processes, queries Zeek conn.log for all connections to the affected host in the preceding 2 minutes. 2. (Symbolic) The trigger should correlate the source IP of recent connections with mobile device logs. If the source is a mobile device, check protocol-specific logs (e.g., Zeek http.log for non-standard methods or malformed URIs) for signs of malformed traffic immediately preceding the crash. A match against a known exploit signature generates a high-priority alert. 3. (Statistical) For each critical service on each server, model the baseline crash/termination rate using a Poisson distribution, as these are rare events. An observed number of crashes in a given hour that is a statistically significant outlier (e.g., p-value < 0.01) and is temporally correlated with a spike in connection attempts from the mobile IP range triggers an alert. 4. (Machine Learning) Train a supervised classifier (e.g., Gradient Boosting) on historical crash events. Features should be extracted from the network connection immediately preceding the crash, including: source IP reputation, protocol, orig_bytes, resp_bytes, payload entropy (if available from packet capture), and specific fields from protocol logs (e.g., HTTP verb, URI length). A model classification of 'Exploit-Induced' for a crash linked to a mobile-sourced connection generates a high-priority alert. 5. Investigate alerts by examining the crashing application, the source mobile device, and the specific network traffic to determine if a vulnerability was exploited."
          },
          {
            "description": "A network-facing service process (e.g., w3wp.exe, httpd.exe, svchost.exe hosting a remote service) on an internal server spawns a suspicious child process (e.g., cmd.exe, powershell.exe, rundll32.exe, wscript.exe) with a non-interactive parent. This process creation event (Windows Event ID 4688) occurs within 5 seconds of an inbound network connection from a mobile device's IP address recorded in Zeek conn.log.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers, application servers, and other systems running remotely accessible services.",
            "action": "1. Enable command-line logging for Windows Event ID 4688. Create a process-to-network correlation rule that joins process creation events with network connections (Zeek conn.log) on the hostname and a tight time window (< 5 seconds). 2. (Symbolic) Implement a SIEM correlation rule that looks for Windows Event ID 4688 where ParentProcessName is in a list of network services (e.g., w3wp.exe, sqlservr.exe, httpd.exe) and NewProcessName is in a list of suspicious processes (e.g., cmd.exe, powershell.exe, whoami.exe). If a match is found, the rule checks Zeek conn.log for an inbound connection to the host from a mobile device IP within the prior 5 seconds. A match on all conditions generates a critical alert. 3. (Statistical) For each server, build a probabilistic model of normal parent-child process relationships from Windows Event ID 4688 logs over a 30-day period. Flag any observed parent-child pair that has a very low probability (e.g., < 0.001%) of occurring. For flagged events involving command-line arguments, calculate the character-level entropy and the ratio of alphanumeric to non-alphanumeric characters. An unusually high entropy suggests obfuscation. 4. (Machine Learning) Use a pre-trained or custom-trained NLP model (e.g., using BERT) to analyze command-line arguments from Windows Event ID 4688. When a network service spawns a process after a connection from a mobile device, pass the full command line to the model. The model outputs a 'maliciousness' score. A score exceeding a predefined threshold triggers an alert. 5. Alerts should prompt immediate investigation of the spawned process, its command-line arguments, and subsequent network activity from the host."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]