[
  {
    "information_requirement": "Is an adversary collecting call log data from our managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.002",
        "name": "Call Log",
        "evidence": [
          {
            "description": "An Android application's manifest (AndroidManifest.xml) contains the 'android.permission.READ_CALL_LOG' permission, and the application's package name and signing certificate do not match an entry on a pre-approved application allowlist.",
            "data_sources": [
              "MDM/UEM Application Inventory Log",
              "AndroidManifest.xml",
              "Application Allowlist/Blocklist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) console, Cloud-based application sandbox, Corporate application store",
            "action": "1. (Symbolic) During application vetting, parse the AndroidManifest.xml for the 'android.permission.READ_CALL_LOG' string. Compare the application's package name and signing certificate against an allowlist of applications with a documented business need for this permission. Generate a high-severity alert for any application that requests this permission and is not on the allowlist. 2. (Statistical) For all applications in the UEM inventory, calculate the frequency of each requested permission. If 'android.permission.READ_CALL_LOG' is in the 99th percentile for rarity (i.e., requested by <1% of apps), flag any new application requesting it for mandatory security review, even if it has a plausible business case. 3. (Machine Learning) Train a Random Forest or Gradient Boosting classifier on application manifest features (permissions, intents, services), package name structure, and app store metadata. If the model classifies an app requesting 'READ_CALL_LOG' as 'malicious' or 'Potentially Unwanted Application (PUA)' with a confidence score greater than 0.85, automatically block the installation and escalate for reverse engineering."
          },
          {
            "description": "A process on a managed Android device generates an API call to the 'content://call_log/calls' URI, and the SHA256 hash of the process executable does not match a baseline of known-good applications.",
            "data_sources": [
              "Mobile EDR Process and API monitoring logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android endpoints, Unified Endpoint Management (UEM) console, SIEM platform",
            "action": "1. (Symbolic) Using a mobile EDR agent, monitor for runtime access to the 'content://call_log/calls' URI. Maintain an allowlist of SHA256 hashes for legitimate process executables (e.g., from com.android.dialer, com.google.android.dialer) expected to access this provider. Generate a high-severity alert for any process hash not on the allowlist that attempts access. 2. (Statistical) For each application, establish a 24-hour rolling baseline of its API call frequency to the call log provider. Generate an alert if an application's call frequency in any given hour exceeds 3 standard deviations above its own historical baseline or the baseline for its application category (e.g., other messaging apps). 3. (Machine Learning) Implement a sequence analysis model, such as a Hidden Markov Model (HMM) or a Recurrent Neural Network (RNN), to learn the normal sequence of API calls for legitimate applications. Flag any anomalous sequence involving a call to the call log provider that is immediately followed by suspicious actions like creating a network socket, writing to external storage, or accessing encryption APIs, as this indicates a high probability of malicious collection and exfiltration."
          },
          {
            "description": "A managed mobile device exhibits a significant increase in data exfiltration volume, exceeding 3 standard deviations of its 30-day baseline, within 24 hours of installing an application that has the 'android.permission.READ_CALL_LOG' permission.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM/UEM Application Installation Event Logs",
              "Threat Intelligence Platform Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi network gateways, VPN concentrators, DNS resolvers",
            "action": "1. (Symbolic) In a SIEM, correlate MDM application installation logs with Zeek conn.log data on a per-device basis. For any device that installs an app with 'READ_CALL_LOG' permissions, query all subsequent outbound destination IP addresses against a threat intelligence feed of known malicious C2 servers. Generate a critical alert upon a match. 2. (Statistical) For each device, calculate a 30-day rolling baseline of hourly data upload volume (sum of orig_bytes from Zeek conn.log). After an app with 'READ_CALL_LOG' is installed, trigger a high-severity alert if the upload volume in any subsequent hour exceeds the 98th percentile of the historical baseline. Concurrently, calculate the Shannon entropy of second-level domains in Zeek dns.log queries from the device; an entropy score spike post-installation suggests DGA activity and should also trigger an alert. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., ARIMA or Prophet) on per-device outbound traffic volume, trained on the device's historical data. An alert is triggered if the actual traffic volume significantly deviates from the forecasted volume following the installation of a suspicious app. Additionally, use a clustering algorithm (e.g., DBSCAN) on connection metadata (destination IP/port, protocol, duration, bytes sent) to identify outlier network flows that do not conform to the device's established behavior profile."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]