[
  {
    "information_requirement": "Is an adversary intercepting sensitive information, such as one-time passwords, from mobile device notifications? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1517",
        "name": "Access Notifications",
        "evidence": [
          {
            "description": "An application is identified with the `BIND_NOTIFICATION_LISTENER_SERVICE` permission granted, and its package name or the hash of its code-signing certificate is not present on the curated corporate application allowlist.",
            "data_sources": [
              "MDM/MTD Application Permission Logs",
              "MDM/MTD Application Inventory Logs",
              "Corporate Application Allowlist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Management Console; Mobile Threat Defense Platform; Corporate Application Allowlist Repository",
            "action": "1. (Symbolic) Execute a recurring query on the MDM/UEM platform to retrieve all applications with the `BIND_NOTIFICATION_LISTENER_SERVICE` permission. For each application, cross-reference its package name and signing certificate hash against the corporate allowlist. Generate a high-severity alert for any application not found on the allowlist. 2. (Statistical) For any unlisted application with this permission, calculate its installation prevalence across the managed device fleet. Flag for investigation any application that is a statistical outlier, defined as being installed on fewer than 1% of devices or falling below the 5th percentile ($$ P_{install} < 0.05 $$) of installation frequency for all managed applications. 3. (Machine Learning) For any application with notification access, input its metadata (e.g., permissions requested beyond notification access, developer name, app store age, signing certificate validity period, user ratings) into a pre-trained binary classification model (e.g., XGBoost, Random Forest). An application with a predicted maliciousness score exceeding a predefined threshold (e.g., > 0.85) should be prioritized for immediate investigation and potential automated quarantine via MDM."
          },
          {
            "description": "An application possessing `BIND_NOTIFICATION_LISTENER_SERVICE` permission initiates a network connection where the destination IP/domain is found on a threat intelligence feed, has a reputation score below a defined threshold, or the queried domain name exhibits a high entropy score indicative of a domain generation algorithm (DGA).",
            "data_sources": [
              "MDM/MTD Application Permission Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate VPN Concentrators; Corporate WiFi Access Points; Cloud Access Security Broker (CASB); Internal and External DNS Resolvers",
            "action": "1. (Symbolic) Correlate MDM logs identifying devices with notification-accessing apps with network logs from the same devices. Join on device identifier and timestamp. For every outbound connection from these apps, check the destination IP (from Zeek conn.log) and resolved FQDN (from Zeek dns.log) against subscribed threat intelligence feeds. Generate a critical alert on any match. 2. (Statistical) For each application with notification access, analyze its DNS queries from Zeek dns.log. Calculate the Shannon entropy of the requested FQDNs within a 5-minute sliding window using the formula $$ H(X) = - \\sum p(x) \\log_2 p(x) $$. A spike in entropy exceeding the 95th percentile of the application's historical baseline suggests DGA activity and should generate a high-severity alert. 3. (Machine Learning) Deploy a time-series anomaly detection model (e.g., an LSTM autoencoder) trained on benign network behavior. Feed a feature vector from Zeek conn.log for each flow, including `orig_bytes`, `resp_bytes`, `duration`, and `proto`. An anomalously high reconstruction error for a flow originating from a notification-accessing app, especially if the MDM reports the app is in the background, indicates potential C2 communication or data exfiltration and should trigger an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting and exfiltrating data from mobile device notifications? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1517",
        "name": "Access Notifications",
        "evidence": [
          {
            "description": "A user help-desk ticket reporting a missing sensitive notification (e.g., MFA token, password reset link) correlates within a 15-minute window to the installation of a new application, a change in application permissions, or anomalous process activity on the user's device.",
            "data_sources": [
              "User-reported incidents (Help Desk tickets)",
              "MDM/MTD Device Process Logs",
              "Zeek conn.log",
              "MDM/MTD Application Installation Logs",
              "MDM/MTD Application Permission Change Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Help Desk Ticketing System; SIEM Platform; MDM/UEM Console; User Endpoint Devices",
            "action": "1. (Symbolic) Upon creation of a help desk ticket containing keywords like 'MFA', 'missing notification', or 'one-time password', trigger an automated query on the MDM platform. Search for any new application installations or grants of `BIND_NOTIFICATION_LISTENER_SERVICE` on the user's device within a +/- 15-minute window of the ticket creation time. Alert if a new, unvetted app or permission change is found. 2. (Statistical) For the affected user's device, analyze the timeline of application background activity from MDM logs around the incident time. Compare the frequency of background process executions for each non-system app to its 30-day baseline for that user. A deviation greater than 3 standard deviations from the mean ($$ Z > 3 $$) for an app with notification access is highly suspicious and should be flagged. 3. (Machine Learning) Implement an NLP classification model (e.g., a fine-tuned BERT model) to parse help desk ticket subjects and bodies. Automatically categorize and tag tickets related to 'missing MFA,' 'stolen code,' or 'unreceived notification.' For high-confidence classifications, automatically assign a critical priority and trigger the symbolic and statistical analysis playbooks for the associated user and device."
          },
          {
            "description": "An application with `BIND_NOTIFICATION_LISTENER_SERVICE` permission exhibits an outbound data transfer volume that is a statistical outlier compared to its own historical baseline or the baseline of its application category, particularly when the application is operating in the background.",
            "data_sources": [
              "Zeek conn.log",
              "MDM/MTD Application Permission Logs",
              "MDM/MTD Application Usage Logs (foreground/background status)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators; Corporate WiFi Access Points; Cloud Access Security Broker (CASB)",
            "action": "1. (Symbolic) For all applications with `BIND_NOTIFICATION_LISTENER_SERVICE` permission, create a SIEM rule to alert on any outbound connection from Zeek conn.log where the `id.resp_p` (destination port) is not on a pre-defined allowlist of expected ports for that application (e.g., TCP/80, TCP/443). The allowlist should be specific to each app's known function. 2. (Statistical) For each app with notification access, establish a historical baseline of its hourly outbound data volume (`orig_bytes` from Zeek conn.log). Generate an alert when the hourly volume exceeds the 99th percentile of its own 30-day history. Elevate the alert's priority to critical if MDM logs confirm the application was in a background state during the high-volume transfer. 3. (Machine Learning) Use a density-based clustering algorithm (e.g., DBSCAN) on network flow features from Zeek conn.log for all apps with notification access. The features should include total bytes (`orig_bytes` + `resp_bytes`), flow duration, and destination port. This creates clusters of 'normal' communication patterns. Any new flow from an app that is classified as a noise point (i.e., does not belong to any cluster) should be flagged for investigation as a potential anomalous exfiltration channel."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]