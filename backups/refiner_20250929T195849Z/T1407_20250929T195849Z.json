[
  {
    "information_requirement": "Is an adversary bypassing mobile application security controls by downloading and executing new code at runtime?",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1407",
        "name": "Download New Code at Runtime",
        "evidence": [
          {
            "description": "A network connection from a managed mobile device's IP address to a destination IP/domain with a threat intelligence score below 30/100 or registered within the last 30 days, is associated with a file download with a MIME type of 'application/java-archive', 'application/x-dex', 'application/x-sharedlib', or 'application/octet-stream'.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.",
            "action": "1. Symbolic Detection: Continuously query network data for connections where the destination IP (from Zeek conn.log) or SNI (from Zeek ssl.log) matches a threat intelligence feed of known malicious or dynamic code hosting domains. Generate an alert if a matching session also contains a file transfer (in Zeek files.log) with a MIME type indicative of executable code. 2. Statistical Detection: For all HTTP/S sessions from the mobile device IP space, calculate the prevalence of the JA3/JA3S hash. Flag sessions with hashes falling below the 5th percentile of prevalence, indicating a rare client. Concurrently, calculate the entropy of the requested URI in Zeek http.log. If entropy exceeds a threshold (e.g., > 4.5) and the client is rare, escalate for review. Also, monitor the ratio of downloaded executables to total downloads per user; flag users whose ratio exceeds the 95th percentile. 3. Machine Learning Detection: Train a classification model (e.g., Random Forest) on labeled historical network sessions. Use features including domain age, threat intelligence score, JA3/JA3S prevalence, URI entropy, file MIME type, file size, and the presence of self-signed certificates (from Zeek x509.log). Deploy the model to score new network sessions in near-real-time to classify them as 'benign' or 'suspicious dynamic code download'."
          },
          {
            "description": "A Mobile Threat Defense (MTD) agent on a managed Android device reports an API call to 'dalvik.system.DexClassLoader', 'java.lang.System.load', or 'android.webkit.JavascriptInterface' from an application not on a pre-approved allowlist of known-good applications that use these functions.",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Application sandboxing analysis reports",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android mobile devices enrolled in MDM/MTD solutions.",
            "action": "1. Symbolic Detection: Create a watchlist in the SIEM for MTD logs indicating API calls to 'DexClassLoader', 'System.load', or 'JavascriptInterface'. Compare the source application making the call against a static allowlist of known-good apps and versions. Any call from an application not on the allowlist generates a high-severity alert. 2. Statistical Detection: For each application, establish a baseline of normal API call frequency from MTD telemetry. Monitor for statistically significant deviations. A zero-to-one transition where an app begins calling a dynamic loading API for the first time, or a spike in call frequency exceeding 3 standard deviations from its historical mean, should be flagged. 3. Machine Learning Detection: Use an anomaly detection model (e.g., Isolation Forest) on the sequence, frequency, and combination of API calls made by each application. Train the model on data from known-good applications to learn 'normal' behavior profiles. Apply the model to new application activity; any application instance identified as an anomaly, particularly if the behavior involves dynamic loading APIs, should be automatically quarantined by the MDM/MTD and flagged for analyst review."
          },
          {
            "description": "Network traffic from a managed iOS device shows DNS lookups or HTTP/S connections to domains known to host JSPatch scripts, or MTD logs report an application loading a known JSPatch library. [1]",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek conn.log",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.",
            "action": "1. Symbolic Detection: Ingest a threat intelligence feed of domains and IPs known to host JSPatch scripts. Create a SIEM rule to alert on any DNS query (Zeek dns.log) or HTTP/S connection (Zeek conn.log) from an iOS device to a resource on this list. Concurrently, use MTD signatures to detect the presence of the JSPatch library within installed applications. 2. Statistical Detection: Analyze Zeek dns.log data for iOS devices. Calculate the character frequency distribution for all newly observed queried domains. Flag domains with a character distribution that deviates significantly from a baseline of legitimate domains (e.g., using a Chi-squared test) or that have an entropy score above 4.0. A high-scoring domain queried by an app that is not a web browser is a strong indicator of suspicious activity. 3. Machine Learning Detection: Implement a time-series analysis model (e.g., ARIMA) to monitor the volume of network connections per application on iOS devices. An unexpected and sharp spike in network activity from an application that is typically quiet, especially if correlated with symbolic matches or statistical anomalies, could indicate the activation of a downloaded payload. The model would forecast expected traffic volume and alert on significant deviations."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]