[
  {
    "information_requirement": "Has an adversary gained initial access to a mobile device via a physical USB connection? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1458",
        "name": "Replication Through Removable Media",
        "evidence": [
          {
            "description": "A mobile device management process (e.g., adb.exe, ideviceinstaller.exe) on a host executes within 5 minutes of a USB device connection event. The process exhibits one or more of the following: 1) command-line arguments with Shannon entropy > 4.5, 2) initiates network connections to domains with a reputation score below a defined threshold, or 3) connects to a destination IP address not previously associated with that process in the last 30 days.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate workstations, employee laptops, IT helpdesk workstations, public charging kiosks within corporate facilities, VPN concentrators, DNS servers.",
            "action": "Correlate USB device connection events (Windows Event ID 4663) with process creation (Windows Event ID 4688) and network logs (Zeek conn.log, dns.log) on the same host within a 5-minute window. First, create a watchlist of mobile management processes (e.g., 'adb.exe', 'ideviceinstaller.exe', 'iFunBox.exe', 'libimobiledevice'). Generate an alert if a process from this list initiates a connection to a domain or IP on a threat intelligence feed or uses command-line arguments matching known exploits (symbolic logic). Second, for each process on the watchlist, establish a baseline of command-line argument Shannon entropy. Generate an alert if a new execution's entropy exceeds the 98th percentile for that specific process, suggesting obfuscation or encoding (statistical method). Third, train a one-class SVM (Support Vector Machine) on features of 'normal' network connections from these tools (e.g., destination port, data volume, domain reputation). Flag any new connections that the model classifies as anomalous, particularly if they occur shortly after a USB connection event (machine learning method)."
          },
          {
            "description": "Within 5 minutes of a mobile device USB connection, a host PC generates DNS queries for a number of new domains (domains not seen in the last 30 days) that is > 3 standard deviations above the host's baseline, and the ratio of rare TLDs (e.g., .xyz, .club, .top) to common TLDs (.com, .org, .net) exceeds the 99th percentile for the organization.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate workstations, guest network segments, internet gateway, DNS servers, Endpoint Detection and Response (EDR) logs.",
            "action": "Correlate USB device connection events (Windows Event ID 4663) with subsequent DNS queries (Zeek dns.log) from the same host. First, check all domains queried within 5 minutes of the connection against a threat intelligence feed for known malicious or DGA-generated domains and generate a high-priority alert on a match (symbolic logic). Second, for each host, calculate a baseline for the number of new domains queried per day. Alert if the number of new domains queried within the 5-minute window post-connection exceeds the daily baseline by more than 3 standard deviations. Also, calculate the entropy of the queried domain names; alert if entropy is anomalously high (98th percentile), indicating potential DGA activity (statistical method). Third, use an Isolation Forest model trained on features from Zeek dns.log (query length, subdomain count, TLD, entropy) to identify anomalous DNS queries. Flag queries that are marked as outliers by the model and occur immediately after a USB connection for analyst review (machine learning method)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using compromised mobile devices to laterally move to corporate workstations? (PIR)",
    "tactic_id": "TA0033",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1458",
        "name": "Replication Through Removable Media",
        "evidence": [
          {
            "description": "An executable file (.exe, .dll, .ps1, .bat) is written to a user-writable directory (e.g., %APPDATA%, %TEMP%, Downloads) from a process associated with a mobile device connection. The file is executed within 10 minutes of being written, and the resulting process spawns a command interpreter (cmd.exe, powershell.exe) or a network utility (e.g., bitsadmin.exe, certutil.exe).",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Event ID 4688",
              "Windows Security Event ID 5145"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate workstations, IT administrator workstations, user profile directories (Downloads, Temp, AppData), shared network drives.",
            "action": "Correlate file creation events in user directories (Windows Event ID 4663 or 5145) with subsequent process execution (Windows Event ID 4688). First, if a file written from a mobile device source is executed and its hash matches a known malicious signature from a threat intelligence feed, or its name matches a known dropper pattern (e.g., 'update.exe', 'document.exe'), generate an alert (symbolic logic). Second, build a frequency table of parent-child process relationships across the enterprise. Alert if a process originating from a file copied from a mobile device spawns a child process (e.g., powershell.exe) and this specific parent-child relationship is in the bottom 5th percentile of observed frequency (statistical method). Third, train a Random Forest classifier to predict if a newly executed file is malicious. Use features such as file path entropy, file extension, parent process name, command-line argument length, and whether it was written by a mobile device transfer process. Flag files with a high probability score (>0.9) for immediate investigation (machine learning method)."
          },
          {
            "description": "Within 15 minutes of a mobile device USB connection, a host PC initiates network connections to > 20 unique internal IP addresses on common reconnaissance ports (e.g., 22, 135, 139, 445, 3389) or to a number of unique internal IP-port combinations that is > 3 standard deviations above the host's 30-day baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate workstations, network segments containing high-value assets like Domain Controllers and Database Servers, internal network traffic choke points, VLANs with sensitive servers.",
            "action": "Correlate USB connection events (Windows Event ID 4663) with internal network connection logs (Zeek conn.log) from the same host. First, create a rule to alert if Zeek generates a `Scan::Address_Scan` or `Scan::Port_Scan` notice (in notice.log) originating from a host within 15 minutes of a USB connection event on that host (symbolic logic). Second, using a 5-minute sliding window, count the number of unique internal destination IPs and ports per source host in Zeek conn.log. Alert if the count of failed connections (e.g., state 'REJ' or 'S0') to unique IPs exceeds 3 standard deviations above the host's established baseline, indicating a network scan (statistical method). Third, apply a K-Means clustering algorithm to group hosts based on their internal network behavior (features: ratio of internal to external connections, diversity of destination ports, average bytes per connection, connection success/failure ratio). If a host shifts to a 'scanner' cluster (characterized by low bytes, high port diversity, high failure rate) immediately following a USB connection, flag it for investigation (machine learning method)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]