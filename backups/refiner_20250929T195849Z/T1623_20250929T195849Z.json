[
  {
    "information_requirement": "Is an adversary executing commands or scripts on our mobile endpoints? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A mobile application invokes a Java method for shell execution (`java.lang.Runtime.exec()` or `java.lang.ProcessBuilder`), and the invoking application is not on a pre-approved allow list for shell execution, or the command executed deviates from the application's profiled baseline of normal commands.",
            "data_sources": [
              "MDM/MTD API Call Log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/MTD log aggregation server, Managed mobile device fleet (Android with MTD agent), Network egress proxy/firewall",
            "action": "1. Symbolic Logic: Using a SIEM, create a rule that triggers a critical alert when an `MDM/MTD API Call Log` event shows a call to `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder` and the command argument contains strings from a maintained watchlist (e.g., 'su', 'pm install', 'am start', 'reboot', 'chmod'). 2. Statistical Analysis: For each mobile application, calculate the historical frequency of shell execution calls over a 30-day rolling window. Generate a high-severity alert if an application not on the shell-execution allow list makes a call. For allowed applications, alert if the call frequency for a single device exceeds the 99th percentile for that application across the fleet. Additionally, calculate the Shannon entropy of the command string; alert if the entropy score is greater than $$ 4.5 $$ and the command is not part of a known-good profile for that application. 3. Machine Learning: Enrich MTD API call alerts with network data. For any device that triggers a shell execution alert, query `Zeek conn.log` and `http.log` for activity within a 5-minute window following the event. Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on each device's typical outbound data volume (`bytes_out` from `conn.log`). An alert is generated if a shell execution event is immediately followed by an anomalous spike in outbound traffic (reconstruction error > 3 standard deviations from the mean), especially to a low-reputation or newly observed IP/domain."
          },
          {
            "description": "A shell process (`sh`, `bash`) is created, where the parent process is a mobile application (e.g., com.example.app) that is not on an allow-list for spawning shells. This parent-child process relationship is novel, having not been observed across the device fleet in the last 90 days.",
            "data_sources": [
              "MDM/MTD Process Event Log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device OS kernel (via MTD agent), Corporate DNS servers, Network traffic inspection points",
            "action": "1. Symbolic Logic: Create a SIEM rule to generate a critical alert when an `MDM/MTD Process Event Log` shows a shell process (e.g., `sh`, `bash`) spawned by a parent application on a defined deny-list (e.g., non-system apps, productivity suites, social media apps). The rule should automatically query any IP or domain in the command line against a threat intelligence platform and include the result in the alert. 2. Statistical Analysis: For every application, build a profile of its normal child processes observed across the fleet. Calculate the prevalence of each parent-child process pair. Generate a medium-severity alert if a new, previously unobserved pair is detected. Increase severity to high if this pair is observed on fewer than 0.5% of devices with the app installed. Additionally, profile the command-line length for all shell processes; flag any execution where the command length exceeds the 98th percentile for that parent process. 3. Machine Learning: Develop a classification model (e.g., Random Forest) trained on labeled process event data. Features should include: parent process name, child process name, command-line argument entropy, command-line length, and parent process prevalence score (from the statistical method). The model will classify each process creation event as benign or suspicious. An event classified as suspicious with high confidence ($$ p > 0.9 $$) should generate an alert for analyst review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]