[
  {
    "information_requirement": "Is an adversary collecting sensitive data from local system storage on our mobile devices? (TA0035 - Collection) (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1533",
        "name": "Data from Local System",
        "evidence": [
          {
            "description": "An application process exhibits anomalous file access behavior, characterized by either: a) a file read rate (files/minute) exceeding the 95th percentile of its own 30-day historical baseline, or b) accessing more than a threshold (e.g., 50) of unique file paths within sensitive directories (e.g., Contacts, Photos, Downloads) in a 1-minute window.",
            "data_sources": [
              "MDM file access logs",
              "EDR file-system monitoring logs",
              "Android logcat logs",
              "iOS Unified Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/)",
            "action": "1. (Symbolic) In your SIEM, define a watchlist of sensitive directories and known malicious process names. Create a rule that triggers a high-severity alert when a process on the watchlist performs a read operation within a sensitive directory. 2. (Statistical) For each application process ID, ingest MDM/EDR file access logs. Run a scheduled query to calculate the number of file reads per minute. Establish a 30-day rolling baseline and calculate the 95th and 99th percentiles for this metric. Generate a medium-severity alert if a process exceeds the 95th percentile and a high-severity alert if it exceeds the 99th. 3. (Machine Learning) Apply a pre-trained time-series anomaly detection model (e.g., LSTM) to the file access frequency and file path entropy for each application. Generate an alert when the model's prediction error surpasses a defined threshold, indicating a significant deviation from learned normal behavior and a potential data scraping activity."
          },
          {
            "description": "A process not on a pre-defined allowlist of trusted system and application processes makes an API call to access the Android Keystore or iOS Keychain services.",
            "data_sources": [
              "MDM API monitoring logs",
              "EDR API call monitoring logs",
              "OS-level security audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Device credential management services and API gateways on mobile endpoints (e.g., Android Keystore, iOS Keychain).",
            "action": "1. (Symbolic) Using MDM/EDR API monitoring logs, create and maintain an immutable allowlist of process names and their associated cryptographic signers (e.g., 'securityd' on iOS, 'com.android.keychain' on Android) authorized to access credential stores. Create a SIEM rule to generate a critical alert for any access attempt from a process not on this list. 2. (Statistical) For all applications, profile the frequency of credential store API calls. For legitimate apps with expected access patterns, establish a baseline of access frequency per hour. Alert on any activity that deviates by more than 3 standard deviations from the hourly mean, indicating a potential compromise or misuse. 3. (Machine Learning) Deploy a one-class SVM (Support Vector Machine) model trained on legitimate credential access patterns (features: process name, parent process, API function called, time of day). Flag any new access attempt that the model classifies as an outlier for immediate investigation."
          },
          {
            "description": "A process not on a pre-approved allowlist of file management or backup applications creates a large archive file (e.g., >10MB with extension .zip, .tar, .gz, .7z) in a user-writable directory, potentially with a high-entropy filename.",
            "data_sources": [
              "MDM file creation logs",
              "EDR file-system monitoring logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/, iOS: /var/mobile/Library/Mobile Documents/) and corporate network egress points monitored by network sensors.",
            "action": "1. (Symbolic) Monitor MDM/EDR file creation events. Create a SIEM rule that triggers a medium-severity alert if a file with an archive extension (.zip, .tar, .gz, .7z) is created by a process not on the allowlist of approved file managers and backup utilities. 2. (Statistical) For each file creation event matching the symbolic rule, calculate the Shannon entropy of the filename. If the entropy score exceeds a threshold (e.g., >3.5), increase the event's risk score. Correlate this event by device IP and timestamp with network logs (Zeek conn.log) to identify any subsequent large data transfers (e.g., >10MB) to an external destination within a 5-minute window. A successful correlation elevates the alert to high-severity. 3. (Machine Learning) Utilize a trained classification model (e.g., Random Forest) to assign a malicious probability score to each archive creation event. Input features should include: creating process name, file size, file path, filename entropy, and time of day. Prioritize analyst review for events with a probability score above 0.8."
          },
          {
            "description": "An installed application is granted a combination of high-risk permissions (e.g., READ_CONTACTS, READ_SMS, ACCESS_FINE_LOCATION, MANAGE_EXTERNAL_STORAGE) that is statistically rare for its declared application store category.",
            "data_sources": [
              "MDM application inventory logs",
              "App store manifest data",
              "Android logcat permission grant logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application manifests and permission grant logs stored on managed mobile devices and aggregated by the MDM/UEM platform.",
            "action": "1. (Symbolic) Define a list of 'toxic' permission combinations (e.g., READ_CONTACTS + ACCESS_INTERNET + INSTALL_PACKAGES). Run a recurring query against the MDM application inventory to scan for any app possessing a toxic combination. Flag any matches for manual review. 2. (Statistical) For each app store category (e.g., 'Games', 'Productivity'), ingest MDM permission data to calculate the prevalence of every permission across all managed devices. Assign a risk score to each app based on the inverse prevalence of its granted permissions (rarer permissions get higher scores). Investigate the top 5% of applications with the highest cumulative risk scores. 3. (Machine Learning) Apply a clustering algorithm (e.g., DBSCAN) to the entire application inventory, using the set of granted permissions for each app as the feature vector. This will group applications with similar permission profiles. Flag any applications classified as outliers (not belonging to any cluster) or those in small clusters with high-risk permissions as anomalies requiring investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]