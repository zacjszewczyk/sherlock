[
  {
    "information_requirement": "Has an adversary established persistence by modifying a legitimate application executable on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1577",
        "name": "Compromise Application Executable",
        "evidence": [
          {
            "description": "A measured cryptographic hash (SHA-256) of an installed application executable on a managed mobile device deviates from the authoritative hash maintained in an organizational application manifest. A mismatch is a direct indicator of unauthorized modification, such as rebuilding an application with malicious code [2].",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Scan Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (iOS, Android), Mobile Device Management (MDM) / Unified Endpoint Management (UEM) server, Organizational application manifest repository",
            "action": "1. (Symbolic) Periodically query all managed devices via MDM/EDR for a list of installed applications and their SHA-256 hashes. Compare each collected hash against a pre-compiled manifest of known-good hashes for approved application versions. Any direct mismatch is a high-fidelity alert. 2. (Statistical) Analyze the distribution of application versions across the fleet. Calculate the prevalence of each app-version pair; flag any pair with a prevalence below a dynamic threshold (e.g., less than the 1st percentile of prevalence for all apps), as this could indicate a trojanized or custom-rebuilt app. 3. (Machine Learning) Train a one-class SVM or Isolation Forest model on the feature set of installed applications per device (e.g., set of app hashes, versions, installation dates) to learn the 'normal' application profile for the organization. Devices flagged as anomalies by the model warrant investigation for unauthorized or modified software."
          },
          {
            "description": "Static analysis of an Android Application Package (APK) reveals a file structure where data exists in both the APK header and the DEX header. This is a specific artifact of the Janus vulnerability (CVE-2017-13156), which allows malicious code injection without invalidating the v1 signature scheme [1].",
            "data_sources": [
              "Mobile EDR File Scans",
              "Forensic device image",
              "Mobile App Vetting (MAV) scanner results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android device fleet, Application sandbox environment, Mobile security analysis platforms",
            "action": "1. (Symbolic) Deploy a security scanner (Mobile EDR or MAV) configured with a signature to detect the specific file structure anomaly of the Janus vulnerability (CVE-2017-13156). An alert from this signature is a direct indicator of an exploit attempt. 2. (Statistical) During file analysis, calculate the byte size difference between the reported file size in the APK's central directory and the actual file size on disk. Establish a baseline for typical size discrepancies and alert on any APK where this difference exceeds a statistical threshold (e.g., > 3 standard deviations from the mean). 3. (Machine Learning) Develop a classifier trained on APK file features (e.g., number of sections, entropy of sections, header flags) using a dataset of known-good and known-malicious APKs. Use this classifier to score newly installed APKs for their likelihood of being malicious."
          },
          {
            "description": "A whitelisted mobile application generates network traffic that is anomalous when compared to its established baseline. Anomalies include connections to threat-listed IP addresses or domains, unusual DNS query patterns such as high entropy, or data exfiltration volumes that are statistical outliers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN egress points, DNS resolvers, Cloud Access Security Broker (CASB) logs",
            "action": "1. (Symbolic) Continuously monitor Zeek dns.log and conn.log for connections originating from the mobile device IP space to destinations on a threat intelligence feed of known C2 servers or malicious domains. Generate an immediate alert upon any match. 2. (Statistical) For each whitelisted application, establish a network baseline using Zeek logs, including the 95th percentile of daily data transfer volume and the Shannon entropy of requested domain names. Alert when an application's traffic exceeds the data volume percentile or generates DNS queries with an entropy score significantly higher than its baseline, suggesting DGA. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) on aggregated network flow data (e.g., total connections, data volume per hour) for each application to learn its normal network 'rhythm.' A high reconstruction error from the model indicates a deviation from this learned pattern, flagging potential C2 communication."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]