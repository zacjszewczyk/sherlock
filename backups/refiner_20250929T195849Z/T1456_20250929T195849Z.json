[
  {
    "information_requirement": "Has a user's mobile device been compromised via a drive-by attack?",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1456",
        "name": "Drive-By Compromise",
        "evidence": [
          {
            "description": "A mobile device's HTTP session, recorded in network logs, shows a 'Referer' header from a trusted domain followed by a request to a destination host domain that is present on a threat intelligence feed, has a registration age of less than 30 days, or has an unusually high DGA score.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, and other internet egress points used by mobile devices.",
            "action": "1. (Symbolic) In your SIEM, join `Zeek http.log` with a threat intelligence feed of known malicious domains. Create a rule that alerts when `http.log.host` matches a malicious domain and `http.log.referer_host` is a legitimate, high-traffic internal or external site. 2. (Statistical) Using a query against network logs, calculate the 5th percentile of domain registration ages for all domains resolved via `Zeek dns.log` in the last 30 days. Alert on any HTTP request where the destination domain's age is below this threshold and the `referer` is a known high-reputation domain. Additionally, track the count of HTTP redirects (status codes 301, 302, 307) per client IP in 10-minute windows and alert if the count exceeds 3 standard deviations above the 24-hour rolling average for that client. 3. (Machine Learning) Develop a classification model (e.g., logistic regression) to predict malicious web requests. Use features such as domain registration age, lexical features of the hostname (e.g., length, entropy), ASN reputation, geographic location of the IP, and the reputation of the referring domain. An output probability score above a tuned threshold (e.g., 0.85) should generate a high-priority alert."
          },
          {
            "description": "A JavaScript file transferred over HTTP, as seen in Zeek files.log, exhibits a file size greater than the 95th percentile for the source website's baseline and a Shannon entropy score greater than 4.5, indicating probable obfuscation or packing.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices with EDR/MDM agents; network egress points with full packet capture or Zeek sensors.",
            "action": "1. (Symbolic) Using Zeek's file extraction capabilities, stream all files with a MIME type of `application/javascript` or `text/javascript` to a sandbox or a YARA scanner. Apply rulesets designed to detect common JavaScript obfuscation techniques and known exploit code. An alert is generated on a YARA rule match. 2. (Statistical) For each `host` in `Zeek http.log`, maintain a 30-day rolling baseline (mean, standard deviation, 95th percentile) of file sizes and Shannon entropy for all downloaded JavaScript files (`files.log.mime_type` = 'application/javascript'). Alert when a newly downloaded JS file from a given host has a size or entropy score that exceeds the established 95th percentile for that specific host. Also, monitor `Zeek weird.log` for `large_file_in_small_buffer` notices related to JS files. 3. (Machine Learning) Employ a density-based clustering algorithm like DBSCAN on all downloaded JavaScript files. Use a feature set derived from `Zeek files.log` and `http.log`, including file size, Shannon entropy, the ratio of size to uncompressed size (if available), and the reputation of the source `host`. Points identified as noise or belonging to very small clusters should be flagged as outliers for manual inspection."
          },
          {
            "description": "A chain of HTTP requests from a single mobile client IP shows a 'Referer' from a known advertising network domain, followed by one or more HTTP 3xx redirects, culminating in a request to a host that is uncategorized by web filters or has a low reputation score.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DNS servers, network egress points, and web proxies serving mobile device traffic.",
            "action": "1. (Symbolic) Maintain a list of known advertising network domains (e.g., from public sources like EasyList). Correlate `Zeek http.log` against this list and a threat intelligence feed. Alert when `http.log.referer_host` is on the ad network list and the destination `http.log.host` is on the malicious TI feed. 2. (Statistical) For each client IP, construct redirect chains by correlating `http.log` records via `uid` and `referer`. For chains originating from an ad network, calculate the chain length. Alert if a chain length exceeds a threshold of 5 hops. Also, establish a 7-day rolling baseline for each user's count of ad-related redirects. Alert if the count in a 5-minute window exceeds 3 standard deviations above their personal baseline. 3. (Machine Learning) Train a sequence-to-sequence autoencoder (e.g., LSTM-based) on historical, benign redirect chains from mobile devices. Each step in the sequence can be represented by a vector of features: (Time delta since last request, HTTP status code, TLD of destination, reputation of destination). Feed live redirect chains into the model; a high reconstruction error score indicates a deviation from normal browsing patterns and a potentially malicious redirect chain, which should be alerted for analyst review."
          },
          {
            "description": "A mobile device's HTTP request, observed in network logs, contains a URI path or query parameter matching a known exploit kit fingerprint. The User-Agent string confirms the request originated from a mobile browser (e.g., containing 'iPhone', 'Android', 'Mobile').",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points with Zeek sensors; web proxies.",
            "action": "1. (Symbolic) Maintain and apply a list of regular expressions matching known exploit kit URI patterns against the `uri` field in `Zeek http.log`. Trigger an alert on any match where the `user_agent` field indicates a mobile browser. 2. (Statistical) Profile the structure of URIs on a per-domain basis. Calculate statistics on path depth (number of '/'), query parameter count, and character set entropy. Flag requests where these metrics deviate significantly (e.g., > 3 standard deviations) from the domain's established baseline, especially for domains not previously visited by the user. 3. (Machine Learning) Train a supervised classifier (e.g., Random Forest) on a labeled dataset of benign and malicious URLs. Features should include URL length, path depth, number of special characters, presence of keywords like '.php' or '.js', entropy of the path and query strings, and whether the URL contains an IP address. Use this model to score all incoming requests from mobile devices in real-time."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]