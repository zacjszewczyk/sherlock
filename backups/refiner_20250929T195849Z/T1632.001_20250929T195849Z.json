[
  {
    "information_requirement": "Has an adversary modified device security policies to evade defenses? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1632.001",
        "name": "Code Signing Policy Modification",
        "evidence": [
          {
            "description": "The 'REQUEST_INSTALL_PACKAGES' permission state is 'granted' for an Android application whose package name is not on the organizational allowlist of approved installers (e.g., 'com.android.vending').",
            "data_sources": [
              "MDM ApplicationPermissionState Log",
              "MDM ApplicationInventory Report"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android device fleet; MDM Management Server; Organizational App Store Servers",
            "action": "1. (Symbolic) Query MDM logs for all application permission state changes. Maintain an allowlist of package names authorized to have the 'REQUEST_INSTALL_PACKAGES' permission (e.g., 'com.android.vending', 'com.example.internalstore'). Generate a high-severity alert when this permission is granted to any package name not on the allowlist. 2. (Statistical) For each app granted the 'REQUEST_INSTALL_PACKAGES' permission, query the MDM application inventory to calculate its installation prevalence across the device fleet. Calculate the 5th and 10th percentile prevalence thresholds for all applications. Flag any app granted this permission whose prevalence falls below the 5th percentile as highly suspicious, as it indicates a rare or non-standard application acting as an installer. 3. (Machine Learning) Train a logistic regression classifier to predict the likelihood of a 'REQUEST_INSTALL_PACKAGES' permission grant being malicious. Use features such as: app prevalence (numeric), app category (categorical), installation source (e.g., 'Google Play', 'sideloaded'), and the count of other dangerous permissions requested by the app (numeric). An output probability score greater than 0.8 should trigger an automated investigation or high-priority analyst alert."
          },
          {
            "description": "The SHA-256 thumbprint of a user-added CA certificate on an Android device does not match any certificate on the organizational allowlist of trusted CAs.",
            "data_sources": [
              "MDM DeviceCertificateInventory Report",
              "MDM SecurityCompliance Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android device fleet; MDM Management Server; Public Key Infrastructure (PKI) Servers",
            "action": "1. (Symbolic) Maintain a 'golden image' allowlist of SHA-256 thumbprints for all organizationally approved user-added CA certificates. Periodically query the MDM device certificate inventory. For each device, compare the set of installed user-added CA thumbprints against the allowlist. Generate a high-severity alert for any thumbprint present on a device but not in the allowlist. 2. (Statistical) For any non-allowlisted CA certificate, calculate the Shannon entropy of its 'Subject' and 'Issuer' distinguished name fields. Also, query the MDM inventory to calculate the certificate's prevalence (percentage of devices it's installed on). A certificate with high entropy in its subject/issuer fields (e.g., > 4.0) and low prevalence (e.g., < 1% of devices) is a high-confidence indicator of a targeted attack and should be escalated. 3. (Machine Learning) Use an Isolation Forest model, trained on the attributes of known-good, allowlisted certificates, to detect anomalous CAs. Features should include: certificate validity period (in days), key size (e.g., 2048, 4096), subject/issuer string length, and the count of Subject Alternative Names (SANs). The model will assign an anomaly score to each new, unknown certificate; scores in the top 1% of anomalies indicate a high degree of deviation from the norm and require immediate review."
          },
          {
            "description": "An installed iOS Configuration Profile contains a payload identifier or profile identifier that is not on the organizational allowlist for the device's assigned user group or management policy.",
            "data_sources": [
              "MDM DeviceProfileInventory Report",
              "MDM DeviceCompliance Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed iOS device fleet; MDM Management Server; Apple Push Notification service (APNs) infrastructure",
            "action": "1. (Symbolic) For each device management group, maintain an allowlist of approved Configuration Profile identifiers ('PayloadIdentifier'). Query MDM device profile inventories for all installed profiles. For each device, perform a set difference between the installed profile identifiers and the approved allowlist for its group. An alert is generated for any profile identifier found on the device that is not on the corresponding allowlist. 2. (Statistical) From MDM logs, extract the installation timestamp for every configuration profile. Establish a baseline distribution of installation times by hour of day and day of week. Use a Z-score or modified Z-score to identify installations that occur at statistically anomalous times (e.g., > 3 standard deviations from the mean for that day of the week, such as 2 AM on a weekday). Flag these profiles for review. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) on the count of new profile installations per hour across the entire fleet. The model learns the normal rhythm of deployments (e.g., spikes on Patch Tuesday, low activity on weekends). A sudden spike in installations that is flagged as an anomaly by the model and does not correlate with a scheduled IT change ticket indicates a potential widespread campaign and should trigger a high-severity, fleet-wide alert."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]