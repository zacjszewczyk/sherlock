[
  {
    "information_requirement": "Has an adversary illegitimately gained Device Administrator permissions on a corporate mobile device? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1626.001",
        "name": "Device Administrator Permissions",
        "evidence": [
          {
            "description": "An application package's (APK) manifest file (AndroidManifest.xml) contains the 'android.permission.BIND_DEVICE_ADMIN' permission, and the application's package name and signing certificate hash do not match an entry on a pre-approved allow-list.",
            "data_sources": [
              "Mobile Threat Defense (MTD) static analysis report",
              "Mobile Application Management (MAM) application inventory"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application repository, Mobile Application Management (MAM) platform, or Mobile Threat Defense (MTD) platform",
            "action": "1. (Symbolic) Implement an automated static analysis pipeline for all new and updated APKs submitted to the corporate app store or detected on endpoints. Create a rule to parse the AndroidManifest.xml and flag any APK containing the string 'android.permission.BIND_DEVICE_ADMIN'. Cross-reference the flagged application's package name and signing certificate hash against a curated allow-list of known-good applications (e.g., approved MDM clients, security tools). Generate a high-severity alert for any non-allow-listed application requesting this permission. 2. (Statistical) For any application requesting BIND_DEVICE_ADMIN, calculate the Shannon entropy of its package name (e.g., 'com.abccorp.secureemail' vs. 'com.asdfwefasd.wefwef'). Establish a baseline entropy score from all legitimate applications in the corporate app store. Flag applications with package name entropy exceeding the 95th percentile of the baseline. Additionally, calculate the Jaccard similarity between the permission set of the new app and the permission sets of known-good apps; a low similarity score indicates a potentially suspicious permission combination. 3. (Machine Learning) Train a random forest or gradient boosting classifier on features extracted from APKs. Key features should include: a binary flag for the presence of BIND_DEVICE_ADMIN, total number of requested permissions, presence of other high-risk permissions (e.g., SYSTEM_ALERT_WINDOW, READ_SMS), entropy of the package name, presence of known obfuscation library strings, and the ratio of native code to Java code. Use this model to assign a risk score to new applications, flagging those above a defined threshold for manual security review."
          },
          {
            "description": "An audit log from a Mobile Device Management (MDM) or Mobile Threat Defense (MTD) platform shows a 'Device Administrator Enabled' event for an application package name not on the approved list. This event is temporally correlated with network connections to a newly seen or low-reputation domain.",
            "data_sources": [
              "MDM/MTD Audit Log (Device Administrator Enabled event)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoint devices (Android), Corporate network gateway/VPN concentrator, SIEM platform",
            "action": "1. (Symbolic) Ingest MDM/MTD audit logs into a SIEM. Create a rule that triggers an alert when a 'Device Administrator Enabled' event is logged and the associated application package name is not in the organization's approved Device Admin allow-list. Enrich the alert by correlating the device IP and timestamp with Zeek dns.log and conn.log to check for any DNS queries or connections to domains/IPs on a threat intelligence feed within 5 minutes of the activation event. 2. (Statistical) For each user, profile the typical time-of-day for legitimate administrative actions (e.g., app installations, profile updates), creating a baseline distribution. Flag any 'Device Administrator Enabled' event that occurs at a statistically anomalous time (e.g., > 3 standard deviations from the user's mean activity time, or between 1 AM - 5 AM local time). Also, track the prevalence of each package name granted admin rights across the organization; an event involving a package name seen on < 1% of devices is significantly more suspicious. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., an LSTM-based autoencoder) using the sequence of all device management events (app install, app uninstall, permission change, profile update) for each device. The model learns the normal sequence and timing of events for a user. A 'Device Administrator Enabled' event that is out-of-sequence (e.g., not preceded by a sanctioned MDM app push) or occurs with anomalous timing will generate a high anomaly score, triggering a security alert for further investigation."
          },
          {
            "description": "Android logcat or MTD agent logs from a device show a high-frequency burst of input events (e.g., > 10 events per second) occurring within a 2-second window immediately preceding an MDM log event for 'Device Administrator Activated' by a new application.",
            "data_sources": [
              "Android logcat (filtered for InputReader tag)",
              "MDM/MTD Audit Log (Device Administrator Enabled event)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices enrolled in an advanced or enhanced monitoring program via an MTD agent",
            "action": "1. (Symbolic) Create a complex event processing rule that searches for a specific sequence within a 2-second window on a single device: [Event A] logcat shows a new window with text matching the device admin activation prompt (e.g., 'Activate device admin app?'), followed by [Event B] a rapid series of logcat InputReader events, immediately followed by [Event C] an MDM log showing a new device administrator was enabled. This sequence is a high-confidence indicator of automated UI manipulation to gain permissions. 2. (Statistical) For each device, establish a baseline for user touch interaction speed and density from logcat InputReader events. Monitor for bursts of touch events where the rate exceeds the 99th percentile of the user's normal interaction rate. Additionally, calculate the variance of the X/Y coordinates for touch events within a 1-second window; extremely low variance suggests robotic, non-human tapping. If a statistical anomaly in either rate or coordinate variance is temporally correlated (within 5 seconds) with a 'Device Administrator Enabled' event, escalate to a high-priority alert. 3. (Machine Learning) Use a sequence-based classification model, such as a Recurrent Neural Network (RNN) or a Transformer, trained on labeled streams of UI and system events. The model's features would be event type (e.g., TOUCH, KEY, WINDOW_CHANGE), event text/metadata, and inter-event timing deltas. The model learns to classify sequences of events as either 'benign user interaction' or 'malicious automation'. Deploy the model to analyze event streams in near-real time, flagging sequences that match patterns of automated privilege escalation."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]