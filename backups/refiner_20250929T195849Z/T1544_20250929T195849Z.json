[
  {
    "information_requirement": "Is an adversary transferring malicious tools or files onto our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1544",
        "name": "Ingress Tool Transfer",
        "evidence": [
          {
            "description": "A mobile device downloads a file where the combination of a high-risk MIME type (e.g., 'application/vnd.android.package-archive', 'application/octet-stream'), a source domain with a low reputation or recent registration date (e.g., < 90 days), and a filename with high entropy is observed. The source domain is not present on an established allow-list of known software or CDN providers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points capturing traffic from corporate-managed mobile devices, including VPN concentrators, corporate Wi-Fi access point controllers, and Mobile Threat Defense (MTD) platform traffic logs.",
            "action": "1. Symbolic (IOC Matching): Join Zeek `http.log` with `dns.log` on the `uid` field. For each HTTP request, correlate the `host` field (from `http.log`) or the resolved IP address (`id.resp_h` from `conn.log`) against threat intelligence feeds for known malicious C2 or dropper domains/IPs. Generate a high-severity alert for any match originating from a mobile device IP range. 2. Statistical (Heuristic Analysis): From `files.log`, filter for file transfers to mobile IP ranges. For each file, calculate the Shannon entropy of the filename. Establish a 30-day rolling baseline for filename entropy and flag any file where the entropy score exceeds the 95th percentile. Simultaneously, join with `http.log` on `uid` to check if the source domain is younger than 90 days (via external WHOIS lookup enrichment) and not on an allow-list. If a high-entropy filename is downloaded from a new, non-allow-listed domain, and the `mime_type` in `files.log` is 'application/vnd.android.package-archive' or 'application/octet-stream', escalate for investigation. 3. Machine Learning (Behavioral Anomaly): For each mobile device, create a historical profile of JA3/JA3S hashes from `ssl.log` associated with legitimate application traffic and file downloads. Train an anomaly detection model (e.g., Isolation Forest, One-Class SVM) on these known-good hashes. In real-time, for any new file download identified in `files.log`, extract the JA3/JA3S hash. If the model classifies the hash as an anomaly, flag the connection as a potentially malicious tool transfer."
          },
          {
            "description": "A mobile device establishes a single network connection that transfers an unusually large payload, quantified as the total response bytes (`resp_bytes`) exceeding a statistically significant threshold (e.g., 99th percentile) compared to the device's own 30-day baseline. This anomalous transfer does not resolve to a domain associated with known software updates, cloud storage, or backup services.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points capturing traffic from corporate-managed mobile devices, including VPN concentrators, corporate Wi-Fi access point controllers, and Mobile Threat Defense (MTD) platform traffic logs.",
            "action": "1. Symbolic (Rule-Based Threshold): For each connection in `conn.log` originating from a mobile device IP, check if `resp_bytes` exceeds a high, static threshold (e.g., 100MB). Cross-reference the destination IP/domain against an allow-list of approved large-file-transfer services (e.g., App Store, Google Play, corporate cloud storage). Trigger an alert if a large transfer occurs to a destination not on the allow-list. 2. Statistical (Peer Group Analysis): Segment mobile devices into peer groups based on role or department. For each device, calculate the total daily download volume by summing `resp_bytes` from `conn.log`. Within each peer group, calculate the mean and standard deviation of daily download volumes over a 30-day period. For each device, compute a daily Z-score: `(device_daily_volume - group_mean_volume) / group_std_dev`. A Z-score greater than 3 indicates a statistically significant deviation from its peers and should be flagged for review. 3. Machine Learning (Time Series Forecasting): For each individual mobile device, create a time series of its total hourly download volume (`sum(resp_bytes)` from `conn.log`). Train a forecasting model (e.g., SARIMA, Prophet) on the past 90 days of data to learn its specific download patterns. In real-time, compare the actual hourly download volume to the model's predicted range (forecast value +/- confidence interval). If the actual volume significantly exceeds the upper bound of the confidence interval, generate an anomaly alert. Enrich the alert by identifying the top destination domains from `dns.log` during that anomalous time window."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]