[
  {
    "information_requirement": "Is an adversary collecting protected user data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636",
        "name": "Protected User Data",
        "evidence": [
          {
            "description": "An application's manifest or declared entitlements request a combination of high-risk permissions (e.g., READ_CONTACTS, READ_SMS, ACCESS_FINE_LOCATION) that is statistically rare for its declared application category or matches a signature of known malware.",
            "data_sources": [
              "MDM Application Inventory Log (fields: package_name, version, permissions_list, signing_certificate)",
              "Application Vetting Service API Output"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Corporate App Store, Application Vetting System, Corporate-managed mobile endpoints",
            "action": "1. (Symbolic) Query MDM inventory for applications whose package name, file hash, or signing certificate matches entries in mobile threat intelligence feeds. Generate a critical alert upon a match. 2. (Statistical) For each application category (e.g., 'Productivity'), calculate the prevalence of every requested permission (e.g., `READ_CONTACTS`). Create a risk score for each app by summing the inverse prevalence of its requested permissions, where rarer permissions receive higher scores. Flag applications with a total risk score in the top 5% (95th percentile) for their category or enterprise-wide for manual review. 3. (Machine Learning) Train a Random Forest or Gradient Boosting classifier on a labeled dataset of benign and malicious application manifests. Use features including a one-hot encoded vector of permissions, the count of dangerous permissions, and app category. Deploy the model to score all new and updated apps. Investigate apps classified as 'malicious' with a model confidence score greater than 0.90."
          },
          {
            "description": "A mobile device initiates a network connection characterized by a large data upload (orig_bytes > 100MB) to a destination IP not on an established allow-list, where the associated domain is newly registered, has a low reputation score, or exhibits high string entropy.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi access points, VPN concentrators, DNS resolvers",
            "action": "1. (Symbolic) From Zeek logs, filter for connections originating from the mobile device IP range. Join conn.log `id.resp_h` with dns.log `answers` to get domain names. Alert immediately if a destination IP or domain name matches a known C2 or exfiltration endpoint from a threat intelligence feed. 2. (Statistical) For each device, establish a 30-day rolling baseline for outbound data volume (`orig_bytes`) in conn.log. Alert when a single connection's `orig_bytes` exceeds 3 standard deviations or the 98th percentile of the device's historical baseline. Concurrently, from dns.log, calculate the Shannon entropy for all requested domain names (`query`) not on a top-1M domain list; flag domains with an entropy score greater than 3.5. Prioritize alerts where high volume and high entropy co-occur. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM autoencoder) on per-device, per-hour aggregated `orig_bytes`. Feature engineer by including day-of-week and hour-of-day. Flag time intervals where the model's reconstruction error exceeds a dynamic threshold (e.g., 99th percentile of historical errors). Correlate these network anomalies with DNS query anomalies (e.g., high entropy, new TLDs) to increase alert fidelity."
          },
          {
            "description": "An application process accesses a protected data store (e.g., contacts, calendar) and, within a short time window (<10 seconds), initiates an outbound network connection to a destination not previously associated with that application or its category.",
            "data_sources": [
              "Mobile EDR/MDR Agent Logs (API calls, process events, network flows)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile endpoints, Network egress points",
            "action": "1. (Symbolic) Using Mobile EDR logs, create a rule that triggers when a process makes an API call to a protected data source (e.g., Android ContentProvider for `ContactsContract` or iOS `CNContactStore`) and subsequently creates a network socket connection within 10 seconds. Correlate the destination IP with threat intelligence feeds and alert on a match. 2. (Statistical) For each application, build a state transition model of common API call sequences and subsequent network destinations. Calculate the probability of a network connection to a new or unseen destination following a protected data access event. Flag sequences with a transition probability below a threshold (e.g., <1%) as anomalous behavior requiring investigation. 3. (Machine Learning) Use a graph-based anomaly detection algorithm. Model application behavior as a graph where nodes represent the app process, accessed data stores (e.g., 'Contacts'), and network destinations (IPs/domains), and edges represent the sequence of actions. Train a model on graphs from known benign app activity. Score new activity graphs based on their deviation from the learned 'normal' structures. A graph showing a flow from 'Contacts' to a rare, high-entropy domain would receive a high anomaly score."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]