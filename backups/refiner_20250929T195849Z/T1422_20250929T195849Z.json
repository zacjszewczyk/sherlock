[
  {
    "information_requirement": "Is an adversary discovering the network configuration of our corporate mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422",
        "name": "System Network Configuration Discovery",
        "evidence": [
          {
            "description": "A non-whitelisted application (not system, carrier, or default SMS) on a managed Android device requests or is granted the 'READ_PRIVILEGED_PHONE_STATE' permission, as recorded in MDM/MTD logs.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Application Scan Logs",
              "Mobile Device Management (MDM) Policy Compliance Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points",
            "action": "1. (Symbolic) Query MDM/MTD logs for any event where the 'READ_PRIVILEGED_PHONE_STATE' permission is requested or granted. Generate an alert if the application's package name is not on a pre-defined whitelist of system, carrier, and approved applications. 2. (Statistical) For each alert, extract the device IP and timestamp. Query Zeek conn.log for all outbound connections from this IP (`id.orig_h`) within 15 minutes of the event. Calculate the historical prevalence of each destination IP (`id.resp_h`) across the entire mobile subnet over the past 30 days. Flag connections to destination IPs seen by less than 2% of devices in the subnet as statistically rare. 3. (Machine Learning) Train a Random Forest classifier using features from application metadata (e.g., requested permissions, app store category, developer reputation, install source) and post-install network behavior (e.g., connection frequency, data volume). For any new application requesting 'READ_PRIVILEGED_PHONE_STATE', use the model to generate a risk score. Flag applications with a score indicating a high probability of being malicious or a discovery tool."
          },
          {
            "description": "An application on an instrumented Android device makes a statistically significant number of calls to the 'java.net.NetworkInterface' API within a short time frame, exceeding its established behavioral baseline.",
            "data_sources": [
              "Mobile EDR/MTD API Call Monitoring Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points",
            "action": "1. (Symbolic) Create a rule to alert on any call to the 'java.net.NetworkInterface' API originating from an application whose package name or signing certificate hash matches a known indicator of compromise (IOC) from threat intelligence feeds. 2. (Statistical) For each monitored application, ingest API call counts into a time-series database. Establish a 30-day rolling baseline (mean and standard deviation) of 'java.net.NetworkInterface' call frequency per 5-minute interval. Generate an alert if the call count in any interval exceeds 3 standard deviations above the mean for that specific application and time window. 3. (Machine Learning) Deploy a time-series anomaly detection model (e.g., LSTM-based autoencoder) for each high-value application's 'java.net.NetworkInterface' API call stream. The model will learn the normal temporal patterns of API usage. Generate an alert when the model's reconstruction error for a new time interval surpasses a dynamically tuned threshold, indicating a behavioral anomaly inconsistent with learned patterns."
          },
          {
            "description": "Following a new application installation or update on an MDM-managed device, the device establishes a network connection to a domain or IP that is statistically rare or exhibits characteristics of algorithmic generation.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM/MTD Application Install Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers",
            "action": "1. (Symbolic) Correlate MDM/MTD application install logs with network logs. For any connection from a device within 5 minutes of a new app install, check the destination domain (from Zeek dns.log `query`) and IP (from Zeek conn.log `id.resp_h`) against a threat intelligence feed of known malicious C2 infrastructure. Generate a critical alert on any match. 2. (Statistical) For each DNS query from the mobile subnet in Zeek dns.log, calculate the Shannon entropy of the domain name (the `query` field, excluding the TLD). Flag domains with an entropy score greater than 3.5 that are not on an organizational allow-list. Concurrently, calculate the prevalence of the resolved IP across the enterprise over the last 30 days. A high entropy domain resolving to a rare IP is a high-confidence indicator. 3. (Machine Learning) Apply a DBSCAN clustering algorithm to connection data from the mobile subnet sourced from Zeek conn.log. Use a feature vector for each connection including [destination port (`id.resp_p`), protocol (`proto`), connection duration (`duration`), bytes sent (`orig_bytes`), bytes received (`resp_bytes`)]. Label large clusters as normal behavior. Investigate all connections classified as noise (outliers) by the model, as these represent anomalous network patterns potentially linked to adversary discovery or C2 activity."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]