[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by hijacking system runtime APIs? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1625.001",
        "name": "System Runtime API Hijacking",
        "evidence": [
          {
            "description": "A mobile device fails a remote attestation check, evidenced by a log event from a Mobile Device Management (MDM) or Mobile Threat Defense (MTD) solution with a 'failed' or 'non-compliant' status. The event details may specify a file integrity mismatch for a core OS library (e.g., libart.so) and provide the unexpected file hash.",
            "data_sources": [
              "MDM/MTD Attestation Logs",
              "MDM/MTD Compliance Status Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (Android devices), MDM/MTD management console",
            "action": "1. (Symbolic) Ingest MDM/MTD logs into SIEM. Create a rule to generate a high-severity alert whenever a device's attestation status is 'failed'. If the event includes a file hash for a modified system library, automatically cross-reference this hash against a threat intelligence database of known-malicious file hashes. 2. (Statistical) For each device, maintain a historical record of attestation status. Calculate a fleet-wide baseline for the rate of attestation failures per hour. Alert if the number of new failures in a 1-hour window exceeds 3 standard deviations above the 30-day moving average for that hour, indicating an abnormal spike. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., using an LSTM autoencoder) trained on the historical count of fleet-wide attestation failures. Use the model to predict the expected number of failures. An observed count that significantly deviates from the model's prediction and falls outside the confidence interval should trigger an alert for a potential widespread campaign."
          },
          {
            "description": "Anomalous network traffic originates from a mobile device, characterized by connections to low-reputation domains, non-standard TLS fingerprints (JA3/S), or highly periodic, small data transfers (beaconing) inconsistent with user-driven activity or legitimate application background traffic.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi access points, VPN concentrators, and network egress points",
            "action": "1. (Symbolic) Ingest Zeek logs for all mobile device traffic. Create a rule to match destination IPs (id.resp_h in conn.log), requested domains (query in dns.log), and TLS hashes (ja3, ja3s in ssl.log) against threat intelligence feeds of known C2 infrastructure. An immediate alert should be generated on any match. 2. (Statistical) For each device, establish a baseline of normal network activity. Calculate the standard deviation of inter-arrival times for connections to the same destination host over a 24-hour period; a standard deviation near zero suggests automated beaconing. Additionally, calculate the character entropy of requested domains; domains with high entropy and low public suffix prevalence are potential DGA-based C2s. Alert when a domain's entropy and a connection's periodicity both exceed the 95th percentile of the device's baseline. 3. (Machine Learning) For each device, create a feature set for every connection (e.g., destination port, protocol, data volume, JA3 hash). Use a clustering algorithm like DBSCAN to group normal connections. Treat any new connection that the model classifies as noise or an outlier as anomalous. A high count of outlier connections from a single device in a short time frame should escalate to an alert for manual review."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]