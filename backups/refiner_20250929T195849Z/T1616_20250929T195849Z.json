[
  {
    "information_requirement": "Is an adversary disrupting our communications by blocking or redirecting legitimate phone calls?",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application's manifest, not on an approved communications app allowlist, contains one or more of the following high-risk permissions: `ANSWER_PHONE_CALLS`, `PROCESS_OUTGOING_CALLS`, or `MANAGE_OWN_CALLS`.",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifests (.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform managing the corporate mobile fleet.",
            "action": "1. (Symbolic) Query the UEM application inventory for all installed applications. Join this data with a pre-defined allowlist of approved communication apps (e.g., native dialer, Microsoft Teams, Slack). Alert on any application not on the allowlist that possesses the `PROCESS_OUTGOING_CALLS` or `ANSWER_PHONE_CALLS` permission. 2. (Statistical) For each application category (e.g., 'Productivity', 'Games'), calculate the prevalence of high-risk call control permissions. For each individual app, calculate a permission risk score based on its manifest. Flag any application whose risk score is a statistical outlier (e.g., Z-score > 3) compared to its declared App Store category peers. 3. (Machine Learning) Train a Random Forest classifier on a labeled dataset of benign and malicious application manifests. Use features such as the count of permissions, specific permission names (one-hot encoded), and declared services/receivers. Deploy the model to scan newly installed applications and flag any classified as 'malicious' or 'PUP' with a high confidence score."
          },
          {
            "description": "Android Logcat events show a sequence where a `NEW_OUTGOING_CALL` intent is immediately followed by an `abortBroadcast()` call from a non-system, third-party application package, indicating a blocked call.",
            "data_sources": [
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregator (SIEM) collecting real-time Logcat streams from managed devices.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when an `ACTION_NEW_OUTGOING_CALL` intent event is followed within 1 second by an `abortBroadcast()` event, where the source package name of the abort event is not on an allowlist of system or approved telephony packages. 2. (Statistical) For each device, establish a baseline of the ratio of aborted calls to total outgoing calls over a 30-day period. Generate an alert if the daily ratio for a device exceeds 3 standard deviations above its own baseline or exceeds the 95th percentile for the entire device fleet. 3. (Machine Learning) Apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the fleet-wide count of `abortBroadcast()` events per minute. A sudden spike that the model flags as a significant anomaly, outside of normal business patterns, should trigger an investigation into the devices contributing to the spike."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary performing audio surveillance by programmatically answering or initiating calls?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application's manifest contains a combination of permissions enabling surveillance: (`CALL_PHONE` or `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` or `READ_CALL_LOG`).",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifests (.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform and its application inventory database.",
            "action": "1. (Symbolic) Define and deploy a critical-severity rule in the UEM/MDM to alert on any application installation where the manifest contains the permission set (`CALL_PHONE` OR `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` OR `READ_CALL_LOG`). Exclude pre-vetted applications like enterprise voice recorders from this rule. 2. (Statistical) Calculate a 'Spyware Potential Score' for each application based on a weighted sum of risky permissions (e.g., `RECORD_AUDIO`=10, `CALL_PHONE`=5, `WRITE_CALL_LOG`=5). Identify applications whose score is a statistical outlier (e.g., > 3 standard deviations above the mean) for their given application category. 3. (Machine Learning) Use unsupervised learning (e.g., k-means or DBSCAN) on the permission sets (represented as binary vectors) of all installed applications across the fleet. Analyze the resulting clusters to identify small, dense clusters characterized by rare and dangerous permission combinations indicative of spyware."
          },
          {
            "description": "A mismatch is identified where call records present in carrier-provided Call Detail Records (CDRs) are absent from the corresponding device's call log, as retrieved by the UEM/MDM platform.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "MDM-retrieved device call logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data warehouse or SIEM containing both ingested telecom provider CDR feeds and UEM-polled device call logs.",
            "action": "1. (Symbolic) On a daily basis, perform a `LEFT JOIN` in a data analytics platform from the CDR table to the device call log table, using `device_identifier`, `call_timestamp` (within a +/- 5-second tolerance), and `destination_number` as keys. Alert on any record that exists in the CDRs but is null in the device logs. 2. (Statistical) For each device, calculate the Jaccard similarity coefficient between the set of unique outgoing call tuples (`destination_number`, `timestamp`) from the CDRs and the set from the device log over a rolling 24-hour window. Alert on any device where the similarity score drops below a defined threshold (e.g., 0.90) for a sustained period. 3. (Machine Learning) Train a regression model to predict the expected number of calls in the device log based on the number of calls in the CDR for a given user profile and time period. Flag users where the actual number of device log entries is significantly lower than the predicted number, indicating a potential anomaly worthy of investigation for log tampering."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using phone calls as a C2 channel?",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "Call Detail Records (CDRs) for a device show a repeating pattern of outgoing calls with a duration of less than 5 seconds, directed to a small set of destination numbers, occurring at regular intervals.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Telecom provider data feeds ingested into a central SIEM or data lake.",
            "action": "1. (Symbolic) Create a SIEM rule to alert on any single device that makes more than 5 outgoing calls with a duration of less than 5 seconds to the same destination number within a 1-hour period. Exclude known service numbers (e.g., voicemail). 2. (Statistical) For each device, calculate the Shannon entropy of the destination phone numbers for all calls with duration < 5 seconds over a 24-hour period. A very low entropy score indicates calls are being made to only one or a few numbers. Alert on devices that are in the 99th percentile for count of short-duration calls AND in the 1st percentile for destination number entropy. 3. (Machine Learning) Apply a clustering algorithm like DBSCAN to call data, using features such as call duration and the time difference between consecutive calls to the same number. C2 heartbeats will form a dense cluster characterized by low duration and low variance in inter-call timing, which can be automatically flagged as an anomalous cluster."
          },
          {
            "description": "A temporal correlation is observed where a short-duration outgoing call from a device (from CDRs) is immediately followed by network traffic, such as a DNS query or TCP connection, from that same device's IP address (from Zeek logs).",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Correlated data in SIEM from network sensors at internet egress points and ingested CDRs.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers on a CDR entry with a call duration < 5 seconds. The rule then searches for any `Zeek dns.log` or `Zeek conn.log` entry from the device's last known IP address occurring within 10 seconds of the call's end time. Alert if the destination IP or resolved domain is on a threat intelligence feed of known C2 servers. 2. (Statistical) For each device, create two time-series vectors: one for the timestamps of short-duration calls (<5s) from CDRs, and another for the timestamps of initial network connections from `Zeek conn.log`. Calculate the cross-correlation between these two series. A statistically significant peak in the cross-correlation at a small time lag (e.g., 1-10 seconds) indicates a likely causal relationship. 3. (Machine Learning) Use a sequence mining algorithm (e.g., GSP or PrefixSpan) on event logs to identify frequently occurring sequential patterns. Search for the pattern `[Event: Short_Call -> Event: DNS_Query -> Event: TCP_Connect]` originating from the same device within a 15-second window. Flag devices that exhibit this pattern with a destination that is rare across the organization's baseline network traffic."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]