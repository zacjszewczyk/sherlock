[
  {
    "information_requirement": "Is an adversary using our managed mobile devices to generate fraudulent or malicious outbound traffic? (PIR)",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1643",
        "name": "Generate Traffic from Victim",
        "evidence": [
          {
            "description": "Evidence of anomalous SMS activity from a managed mobile device, characterized by either: (1) any SMS sent to a destination number on a known premium-rate or fraudulent blocklist, or (2) a daily SMS volume from a non-messaging application that exceeds a statistical baseline (e.g., 3 standard deviations above the device's 30-day mean or the 99th percentile of peer devices).",
            "data_sources": [
              "Carrier billing records",
              "Mobile Device Management (MDM) application inventory logs",
              "MDM application permission logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, MDM servers, and Telecommunications provider billing systems",
            "action": "1. (Symbolic) Continuously ingest a threat intelligence feed of known premium-rate and international fraud number blocks. Create a detection rule that queries carrier SMS logs hourly and generates an immediate alert for any outbound SMS from a managed device to a number on this blocklist. 2. (Statistical) For each managed Android device, use MDM logs to identify applications with the `SEND_SMS` permission that are not categorized as 'Messaging'. For these apps, calculate a 30-day rolling baseline (mean and standard deviation) of daily SMS volume from carrier logs. Generate a medium-severity alert when a device's daily SMS count from a non-messaging app exceeds 3 standard deviations above its baseline or the 99th percentile of all managed devices. 3. (Machine Learning) Develop and deploy a Random Forest classification model to score daily device activity. Features should include: application name, application category (from MDM), `SEND_SMS` permission status (boolean), daily SMS count, number of unique recipients, time of day for messages, and destination country codes. Train the model on labeled historical data (benign vs. known fraudulent). Run the model daily against all devices, generating a high-severity alert for any device classified as 'fraudulent' with a confidence score greater than 0.90."
          },
          {
            "description": "Evidence of automated, repetitive network traffic from a managed mobile device, characterized by a combination of: (1) a high volume of DNS queries or HTTP/S requests over a short time window (e.g., >95th percentile of the device's hourly baseline), (2) low Shannon entropy in the requested FQDNs or HTTP User-Agent strings (e.g., < 2.5), and (3) a high ratio of connections to data transferred (e.g., > 10 connections per KB).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, DNS resolvers, and Internet web proxies",
            "action": "1. (Symbolic) Continuously ingest threat intelligence feeds for ad fraud, click fraud, and app-ranking manipulation services. Create a detection rule that queries Zeek dns.log and http.log in near real-time and generates an alert upon any request from a managed mobile device IP to a domain, URL, or server IP on the feed. 2. (Statistical) For each mobile device IP on the corporate Wi-Fi, execute an hourly query that: (a) counts total connections from `conn.log`, (b) calculates Shannon entropy on the `query` field in `dns.log`, and (c) calculates the ratio of connection count to the sum of `orig_bytes` and `resp_bytes` from `conn.log`. Generate an alert if the connection count exceeds the 95th percentile of the device's 30-day hourly baseline AND the Shannon entropy is below 2.5. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., Isolation Forest or Seasonal-ARIMA) on key traffic metrics per device, aggregated into 5-minute windows. Monitored metrics should include: connection count, unique DNS queries, total bytes transferred, and DNS query entropy. Train the model on at least 30 days of historical data to learn each device's normal traffic patterns. The model will then score new 5-minute windows, generating an alert for any period identified as a significant anomaly."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]