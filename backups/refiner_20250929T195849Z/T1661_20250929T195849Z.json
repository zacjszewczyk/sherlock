[
  {
    "information_requirement": "Has an adversary gained initial access by pushing a malicious update to a previously benign mobile application? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "Within 24 hours of a mobile application update, the application initiates network connections to destinations that are new or anomalous based on threat intelligence, domain characteristics (age, entropy), or TLS fingerprinting when compared against a 30-day baseline for the application.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Mobile EDR/MDM Network Flow Logs",
              "Whois Data",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi Networks, VPN Concentrators, Cloud Access Security Broker (CASB), Managed Mobile Devices",
            "action": "1. (Correlation) Join mobile application update events from MDM/EDR logs with network logs (Zeek) on device identifier and timestamp, creating a dataset of network activity within 24 hours post-update. 2. (Symbolic) For each new connection, query the destination IP/FQDN against threat intelligence feeds and alert on any match. Enrich with Whois data and flag domains registered within the last 90 days. 3. (Statistical) For each DNS query in dns.log, calculate the Shannon entropy of the domain name; alert if the score is > 4.0. Compare the JA3 and JA3S hashes from ssl.log against a stored set of historical hashes for this application; alert if a new hash appears and its prevalence across the enterprise is less than the 1st percentile. 4. (Machine Learning) Employ a pre-trained time-series anomaly detection model (e.g., Prophet, LSTM) on the application's egress data volume (bytes out) from conn.log. Generate an alert if the observed traffic post-update falls outside the model's 95% confidence interval, indicating a statistically significant deviation from forecasted behavior."
          },
          {
            "description": "Following a detected update, the mobile application's new version requests or is granted a set of permissions that are either on a predefined high-risk list, represent a significant change from the previous version, or are statistically rare for its declared application store category.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "MDM Compliance Logs",
              "Mobile OS permission logs",
              "App Store Category Baselines"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "1. (Extraction) On an application update event from MDM logs, extract the pre-update and post-update permission manifests for the application. 2. (Symbolic) Compare the newly added permissions against a static 'deny list' of high-risk permissions or combinations (e.g., `android.permission.BIND_DEVICE_ADMIN`, `com.apple.developer.kernel.extended-memory-access`) and generate a high-severity alert on any match. 3. (Statistical) Calculate the Jaccard similarity coefficient between the pre- and post-update permission sets. Alert if the similarity is < 0.8. For each new permission, compare it against a pre-computed baseline of permission prevalence for the app's store category; flag any permission that is present in < 2% of apps in that category. 4. (Machine Learning) Represent the application's permissions as a one-hot encoded vector. Use a pre-trained classification model (e.g., Random Forest) to classify the permission set as 'benign' or 'suspicious'. An update that shifts the classification from 'benign' to 'suspicious' triggers an alert."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by hiding malicious code within a legitimate application update? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "An application update is signed with a developer certificate that has a thumbprint different from all previous versions of the same application, or the certificate itself is newly issued, has a low-prevalence issuer, or is associated with other suspicious applications.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Application Manifest Data",
              "Certificate Transparency Logs",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "1. (Extraction) Upon an application update event from MDM, extract the code signing certificate details, including thumbprint, subject, issuer, and validity period. 2. (Symbolic) Compare the new certificate's thumbprint with a historical database of thumbprints for that specific application ID; alert immediately on any mismatch. Cross-reference the thumbprint against threat intelligence feeds for known malicious certificates. 3. (Statistical) Calculate a risk score: add points if the certificate's 'valid from' date is < 90 days ago; add points if the issuer's prevalence across all managed devices is in the bottom 5th percentile; add points if the subject name has a high Levenshtein distance from previous versions' subjects. Alert if the total score exceeds a defined threshold. 4. (Machine Learning) Utilize a graph-based analysis model where nodes are applications, certificates, and developers. If an update causes a previously trusted app to become connected to a known malicious community (e.g., signed by a certificate that also signed a known malicious app), flag it as high-risk."
          },
          {
            "description": "Post-update, an application's network traffic exhibits command-and-control (C2) characteristics, such as periodic beaconing, unusual data egress volumes, communication over non-standard ports, or encrypted traffic patterns inconsistent with its baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek files.log",
              "Mobile EDR/MDM Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi Networks, VPN Concentrators, CASB, Managed Mobile Devices",
            "action": "1. (Baseline) For each managed application, continuously baseline network behavior (ports, protocols, domains, JA3/S hashes, data volume, connection frequency) over a 30-day rolling window. 2. (Symbolic) Alert if traffic is identified by Zeek's protocol analyzer as a protocol other than what is expected for the destination port (e.g., non-TLS traffic on TCP/443). Match the `server_name` field in ssl.log against known C2 FQDN patterns using regular expressions. 3. (Statistical) Calculate the standard deviation of inter-arrival times for outbound connections over a 1-hour window; a value near zero indicates beaconing. Separately, calculate the entropy of the TLS `server_name` in ssl.log; a high entropy value can indicate DGA. Alert if either metric exceeds the 95th percentile for that app. 4. (Machine Learning) Train an autoencoder on feature vectors representing normal network sessions (e.g., duration, orig_bytes, resp_bytes, proto, port). After an update, a high reconstruction error for a new session's feature vector indicates it is anomalous and potentially C2 communication."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]