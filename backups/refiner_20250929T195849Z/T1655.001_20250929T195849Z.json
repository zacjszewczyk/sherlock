[
  {
    "information_requirement": "Is an adversary using masquerading techniques on corporate mobile devices to evade detection? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1655.001",
        "name": "Match Legitimate Name or Location",
        "evidence": [
          {
            "description": "An installed mobile application possesses a display name or package name that is an exact or near-match to a known legitimate application, but its signer certificate thumbprint does not match the allowlisted thumbprint for that application. Alternatively, the application's package name matches an entry on a threat intelligence feed of known malicious application identifiers.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) server database; Corporate-managed iOS and Android devices.",
            "action": "First, for IOC matching, query MDM application inventory logs for installed package names that exist on a threat intelligence feed of known-malicious or typosquatted application identifiers and alert on any match. Second, for a statistical approach, create and maintain an allowlist of (package_name, signer_certificate_thumbprint) tuples for all approved applications. Group all installed applications by display name (e.g., 'Settings'). Alert if any display name is associated with more than one unique (package_name, signer_certificate_thumbprint) tuple. Additionally, calculate the Levenshtein distance between all installed package names and the package names on the allowlist; flag any application with a distance score > 0 and < 3 for manual review as potential typosquatting. Third, for a machine learning approach, train a classification model (e.g., Random Forest) using features extracted from application manifests (e.g., count of permissions, presence of high-risk permissions, exported components) and package name characteristics (e.g., length, n-gram frequency, character entropy). Deploy the model to score all newly installed applications, flagging those classified as 'potential masquerade' with a high confidence score for analyst investigation."
          },
          {
            "description": "A mobile application, identified as potentially masquerading, generates network traffic that deviates from the established baseline of the legitimate application it mimics. This is observed as connections to known malicious domains, domains with statistically anomalous characteristics (e.g., high entropy), or connections to non-standard ports not used by the legitimate application.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), Corporate WiFi network segments, and VPN concentrators",
            "action": "First, for IOC matching, use device IP information from MDM logs to filter network logs (Zeek dns.log, conn.log) for traffic originating from devices with a suspected masquerading application. Join the resulting DNS queries against a threat intelligence feed of known command-and-control (C2) or malicious domains and alert on any match. Second, for statistical analysis, calculate the Shannon entropy for each queried domain name (from Zeek dns.log) originating from a suspected device. Flag any domain whose entropy score exceeds the 98th percentile of the 30-day organizational baseline. Concurrently, from Zeek conn.log, establish a baseline profile for the legitimate version of the application (e.g., common destination ports, average data sent/received, connection duration) and alert if the suspected application's behavior deviates from this baseline by more than 3 standard deviations on any key metric. Third, for a machine learning approach, apply a time-series anomaly detection model (e.g., LSTM) to the volume of outbound data (orig_bytes from Zeek conn.log) for each device/application pair, aggregated in 5-minute intervals. Flag any time window where the observed traffic volume is identified as a significant anomaly compared to a trained model of normal behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]