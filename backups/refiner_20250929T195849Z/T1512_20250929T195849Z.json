[
  {
    "information_requirement": "Is an adversary using a compromised mobile device's camera to collect video or images? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1512",
        "name": "Video Capture",
        "evidence": [
          {
            "description": "An application's manifest file contains camera permissions (`android.permission.CAMERA` or `NSCameraUsageDescription`) but the application's category (e.g., 'Calculator', 'File Manager') does not typically require camera access, or the application is not on the corporate-approved software list.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "App vetting platform scan results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed corporate mobile devices, Corporate application store, Mobile Application Management (MAM) console",
            "action": "Using MDM and app vetting data, implement a three-tiered detection strategy. First (Symbolic Logic), query for any application with camera permissions that is not on a pre-approved 'allow list' of applications and developers. Second (Statistical), for all apps with camera permissions, group them by their App Store category. Calculate the percentage of apps in each category that have camera permissions across the enterprise; flag any app in a category where such permissions are statistically rare (e.g., present in <5% of apps in the 'Business' category). Third (Machine Learning), develop a classification model (e.g., logistic regression) trained on app store data, using features like category, permissions, developer reputation, and user ratings to predict if a permission request is likely malicious. Flag all new apps with high-risk scores for manual review."
          },
          {
            "description": "A mobile device's outbound network traffic shows a total daily upload volume exceeding a statistical baseline by a significant margin (e.g., >3 standard deviations), and the destination IP addresses do not resolve to known cloud storage, corporate, or popular content delivery network (CDN) domains.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate Wi-Fi, VPN concentrators, and cellular data gateways",
            "action": "Analyze Zeek logs from network egress points. First (Symbolic Logic), continuously monitor Zeek conn.log for any connections from the mobile device IP space to destinations on a threat intelligence watchlist of known malicious C2 domains or IP addresses, alerting on any match, especially if associated with large data uploads (`orig_bytes` >> `resp_bytes`). Second (Statistical), for each device, calculate a 30-day rolling average and standard deviation of daily upload bytes from conn.log. Alert if a device's daily upload volume exceeds three standard deviations above its average. Correlate these alerts with dns.log to check if the destination domain has high character entropy or is newly registered (e.g., <30 days old). Third (Machine Learning), use a time-series forecasting model (e.g., ARIMA) to predict the expected outbound traffic volume for each device. Generate an alert when actual traffic significantly deviates from the predicted volume. Enrich alerts by checking files.log for corresponding file transfers with video/image MIME types (e.g., 'video/mp4', 'image/jpeg')."
          },
          {
            "description": "Mobile EDR logs show a process making calls to camera APIs (e.g., `android.hardware.camera2`, iOS `AVCaptureDevice`) while the process is identified as a background service and has not been in the foreground for a defined period (e.g., >5 minutes).",
            "data_sources": [
              "Mobile EDR logs",
              "OS-level API call logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value target mobile devices (e.g., executive leadership, system administrators) with EDR agents installed",
            "action": "On devices with Mobile EDR, deploy a multi-faceted detection approach. First (Symbolic Logic), create a rule to generate a high-severity alert whenever a process makes a camera API call while its application state is 'background' and it is not on an allow-list of apps permitted to use the camera in the background (e.g., video conferencing apps). Second (Statistical), for each application, baseline the frequency of camera API calls per hour. Calculate the 99th percentile of call frequency for each app across the device fleet. Alert when an application on any device exceeds this statistical threshold, indicating abnormally frequent camera access. Third (Machine Learning), train a sequence analysis model (e.g., Hidden Markov Model) on sequences of API calls made by legitimate applications to learn normal operational patterns. Flag any sequence of API calls that deviates from learned legitimate patterns, such as a camera API call occurring without a preceding user interface interaction event, as a high-confidence anomaly."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]