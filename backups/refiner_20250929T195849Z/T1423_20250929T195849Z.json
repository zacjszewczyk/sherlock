[
  {
    "information_requirement": "Is a compromised mobile device being used to perform network service discovery on the internal network? (TA0032 - Discovery)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1423",
        "name": "Network Service Scanning",
        "evidence": [
          {
            "description": "A single mobile device IP, identified via DHCP or VPN logs, initiates connections to more than 20 unique internal IP addresses (horizontal scan) or more than 20 unique TCP/UDP ports on a single host (vertical scan) within a 1-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "DHCP Server Logs",
              "VPN Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments accessible by mobile devices (e.g., corporate Wi-Fi, VPN address pools), Core network switches, VPN concentrators, DHCP servers",
            "action": "Step 1 (Symbolic): Deploy network canaries (honeypots) on unused IP addresses within mobile-accessible network segments. Create a high-priority alert to trigger on any connection attempt from a mobile device IP range to a canary IP or a predefined canary port on a production server. Step 2 (Statistical): For each source IP within the mobile NAI, execute a scheduled query every 5 minutes that calculates the count of unique destination IPs and unique destination ports. Establish a baseline for each device over a 7-day rolling window. Trigger an alert if a device's count for either metric exceeds its own baseline by 3 standard deviations AND also surpasses the 99th percentile for all mobile devices in the same time window. Step 3 (Machine Learning): On a daily basis, featurize each mobile device's network activity using metrics such as unique destination IP count, unique port count, ratio of TCP to UDP connections, and the Shannon entropy of destination ports. Apply an unsupervised density-based clustering model (e.g., DBSCAN) to this feature set to identify devices that form anomalous clusters or are identified as noise points, representing atypical scanning behavior."
          },
          {
            "description": "A mobile device IP generates a high ratio of failed or rejected connections compared to successful connections, with a ratio of failed ('S0', 'REJ') to successful ('SF') states exceeding 10:1 within a 5-minute window.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments accessible by mobile devices (e.g., corporate Wi-Fi, VPN address pools), Core network switches, Network firewalls",
            "action": "Step 1 (Symbolic): Create a real-time alert that triggers if a single mobile source IP generates more than 10 connections with a 'REJ' (Rejected) state in Zeek conn.log to any single destination host within a 1-minute window, which indicates a host-based firewall is actively dropping scan packets. Step 2 (Statistical): For each mobile device IP, run a scheduled query every 10 minutes to calculate the ratio of failed connection states ('S0', 'REJ', 'RSTO', 'RSTR') to successful states ('SF'). Trigger an alert if this ratio exceeds the 95th percentile observed across all mobile devices, flagging an abnormal rate of connection failures. Step 3 (Machine Learning): Implement a time series anomaly detection model (e.g., Seasonal-Hybrid ESD) for each mobile device. The model should be trained on the per-minute count of failed connections ('S0', 'REJ'). The model will learn the normal background 'noise' of connection failures for each user and alert on sudden, statistically significant spikes that deviate from this learned pattern."
          },
          {
            "description": "Traffic from a mobile device IP contains signatures or payloads characteristic of common vulnerability scanning tools (e.g., Nmap, Nessus) or is flagged by Zeek's internal scanning detection heuristics.",
            "data_sources": [
              "Zeek notice.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network tap or span port monitoring the ingress/egress of mobile device network segments (Wi-Fi, VPN).",
            "action": "Step 1 (Symbolic): Monitor Zeek's notice.log for any occurrences of 'Scan::Port_Scan' or 'Scan::Address_Scan'. If the originator IP falls within a mobile device IP range, trigger a high-severity alert. Additionally, create signatures to look for specific User-Agent strings (e.g., 'Nmap Scripting Engine', 'masscan') in protocols like HTTP captured in Zeek's http.log. Step 2 (Statistical): Calculate the Shannon entropy of the first 64 bytes of the payload for TCP sessions initiated by mobile devices where no application layer protocol was identified by Zeek ('OTH' in conn.log). A sustained high entropy value for a given source IP, when compared to the population baseline, can indicate encrypted or obfuscated scanner payloads. Alert if a device's average payload entropy over a 10-minute window exceeds the 98th percentile for all mobile devices. Step 3 (Machine Learning): Train a supervised classification model (e.g., Random Forest) on labeled network flow data to distinguish between benign traffic and traffic generated by various scanning tools. Use features from Zeek conn.log such as duration, packet counts, byte counts, protocol flags, and connection state. Deploy this model to classify new network flows from mobile devices in near-real-time to identify potential scanning activity."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]