[
  {
    "information_requirement": "Is an adversary hiding malicious applications on our mobile devices by suppressing their icons? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1628.001",
        "name": "Suppress Application Icon",
        "evidence": [
          {
            "description": "An application package name exists in the complete application inventory list for a device but is absent from the corresponding list of applications that possess a LAUNCHER intent. This discrepancy is a direct indicator that the application's icon is hidden.",
            "data_sources": [
              "MDM Application Inventory Log (fields: device_id, package_name, is_system_app, permissions)",
              "EDR Application Launcher Activity Log (fields: device_id, package_name, has_launcher_activity)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-owned and BYOD mobile endpoints, MDM/MTD Management Servers, SIEM Platform",
            "action": "1. **Symbolic Detection:** Write a scheduled SIEM query to run daily. The query will join the full application inventory table with the launcher activity table on 'package_name' and 'device_id'. Alert on any non-system application that exists in the inventory but has no corresponding launcher activity entry. Correlate hits against a threat intelligence list of known malicious package names. 2. **Statistical Detection:** For all identified launcher-less applications, calculate the fleet-wide prevalence (percentage of devices it's installed on). Establish a baseline for legitimate launcher-less apps (e.g., system services, plugins). Alert if a new, non-system, launcher-less app is installed on a number of devices exceeding the 99th percentile of all other app installation counts, indicating an unusual widespread deployment. 3. **Machine Learning Detection:** Develop a classification model (e.g., Logistic Regression) to score the risk of launcher-less apps. Features should include: requested permissions (count and risk level), installation source, whether it is a system app, and if it communicates with low-reputation IP addresses (by correlating with Zeek conn.log data from network gateways). Flag apps with a predicted malicious probability above 0.8 for immediate investigation."
          },
          {
            "description": "On a device running Android 10 or newer, a user interaction with a launcher icon results in the immediate launch of the system settings activity ('com.android.settings') directed to the application's details page, instead of the application itself. This indicates the OS has created a 'synthesized activity' placeholder for a hidden app.",
            "data_sources": [
              "EDR Process Event Logs (fields: device_id, timestamp, parent_process_name, process_name, process_cmdline)",
              "Android Logcat Data (filtered for ActivityManager events)",
              "User-Reported Incident Tickets"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoints (Android 10+), EDR/SIEM log aggregation platform, IT Help Desk System",
            "action": "1. **Symbolic Detection:** Create a SIEM correlation rule that triggers when a process creation event for 'com.android.settings' has a parent process of a launcher application (e.g., 'com.google.android.apps.nexuslauncher') within a 1-second window on the same device. Refine the rule to look for command-line arguments in the settings launch that point to a specific app's details page. 2. **Statistical Detection:** For each application, track the frequency of 'launcher -> settings' redirections across all devices. Calculate a baseline rate (e.g., events per day per 100 devices). Generate an alert when this rate for any single application exceeds 3 standard deviations above its historical moving average, indicating a coordinated or widespread attempt to hide. 3. **Machine Learning Detection:** Use a sequence analysis model (e.g., Hidden Markov Model) trained on normal UI navigation event chains from EDR logs. The model learns common user paths, such as 'Launcher -> App' or 'Launcher -> Settings -> Apps -> App Details'. Flag any observation of the low-probability sequence 'Launcher -> App Details' as an anomaly indicative of a synthesized icon being used."
          },
          {
            "description": "Static analysis of an application package (APK) file's manifest and bytecode identifies the use of `PackageManager.setComponentEnabledSetting()` with the `COMPONENT_ENABLED_STATE_DISABLED` flag, targeting a component that has a `android.intent.action.MAIN` and `android.intent.category.LAUNCHER` intent filter.",
            "data_sources": [
              "APK files",
              "Static Analysis Sandbox Logs (JSON/XML output)",
              "Mobile App Reputation Service (MARS) API Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organizational application stores, Application vetting sandboxes, Developer CI/CD pipelines",
            "action": "1. **Symbolic Detection:** As part of the application vetting process, run a YARA rule against every submitted APK. The rule should be designed to detect the bytecode sequence or string combination for `PackageManager.setComponentEnabledSetting` and `COMPONENT_ENABLED_STATE_DISABLED` within the same function. A match immediately flags the APK for manual code review. 2. **Statistical Detection:** During static analysis, extract a feature vector for each APK including all API calls and permissions. Calculate the code entropy of the APK's DEX file sections. Compare the feature vector of a new app to a baseline corpus of known-good, approved applications using a distance metric like cosine similarity. An app that uses icon-hiding APIs, requests sensitive permissions, and has a high code entropy score (indicating obfuscation) and a low similarity score to the benign set should be considered high-risk. 3. **Machine Learning Detection:** Train a gradient boosting classifier (e.g., LightGBM) on a labeled dataset of benign and malicious APKs from a threat intelligence feed. Use static features such as the presence of icon-hiding API calls, the number/type of permissions, embedded URLs, and manifest properties. Deploy this model in the pre-deployment vetting sandbox to assign a 'malice score' from 0 to 1. Automatically reject any app with a score greater than 0.9."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]