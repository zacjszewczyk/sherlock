[
  {
    "information_requirement": "Is the adversary using geofencing to evade detection or analysis on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627.001",
        "name": "Geofencing",
        "evidence": [
          {
            "description": "An application's manifest requests high-risk location permissions (e.g., `ACCESS_BACKGROUND_LOCATION` on Android, `requestAlwaysAuthorization` on iOS) and its functional category, as defined by the app store or internal policy, does not justify such access (e.g., a 'Calculator' or 'File Manager' app requesting persistent background location).",
            "data_sources": [
              "MDM App Inventory Report",
              "Static Analysis Tool Output (e.g., MobSF JSON report)",
              "Corporate Application Policy/Whitelist",
              "Application Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) Platform, Application Vetting Sandbox, Corporate App Store/Repository, Managed Mobile Endpoints",
            "action": "1. (Symbolic) Using a SIEM query or script, join the MDM app inventory (listing apps and permissions) with the corporate application policy. Generate an alert for any application that possesses `ACCESS_BACKGROUND_LOCATION` or `requestAlwaysAuthorization` permissions and is either not on the approved application whitelist or belongs to a functional category where background location is explicitly forbidden. 2. (Statistical) For all applications grouped by App Store category, calculate the frequency of each location permission type. Establish a baseline for normal permission requests within each category. Alert on any application that requests a permission whose frequency within that category is below the 5th percentile, indicating it is an outlier compared to its peers. 3. (Machine Learning) Train a Gradient Boosting classifier using features from static analysis reports and app store metadata. Features should include: a one-hot encoded vector of permissions, app category, presence of code obfuscation, and TF-IDF scores of keywords from the app description (e.g., 'map', 'navigate', 'find'). The model's target is a binary label ('justified_location_request' vs. 'suspicious_location_request') trained on a manually curated dataset. Score all new and updated applications to produce a risk rating, prioritizing those with a 'suspicious' classification for manual review."
          },
          {
            "description": "In a dynamic analysis sandbox, a change in the device's simulated GPS coordinates triggers an immediate and sustained state change in the application's network activity. This is observed as the cessation of periodic C2 callbacks, a reduction of over 90% in egress data volume, or a switch from suspicious to benign network traffic within 60 seconds of the location change.",
            "data_sources": [
              "Mobile Application Vetting Sandbox Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Static Analysis Report (APK/IPA)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Vetting Sandbox, Network Egress Points (VPN, Corporate Wi-Fi), DNS Resolvers, Web Proxy Servers",
            "action": "1. (Symbolic) In a sandbox instrumented to log API calls and network traffic, execute a test where a baseline of network activity is established for 15 minutes, followed by a simulated location change to a region outside the organization's primary operating area. Create an alert if a previously established periodic connection (beacon) to a non-categorized IP in Zeek conn.log ceases and does not resume within 5 minutes post-location change. 2. (Statistical) During the sandboxed test, capture all DNS requests from dns.log. Calculate the Shannon entropy of the requested second-level domains for 1-minute windows before and after the simulated location change. A drop in entropy of more than 50% post-change suggests a shift from diverse to static domains or a halt in requests. Additionally, monitor the `orig_bytes` field in conn.log; alert if the 95th percentile of `orig_bytes` for connections to suspicious IPs drops by over 80% after the location change. 3. (Machine Learning) Deploy an LSTM-based time-series anomaly detection model trained on multivariate network telemetry from sandboxed apps (features: `orig_bytes`, `resp_bytes`, DNS request count, connection count per minute from Zeek logs). Introduce the simulated location change as an exogenous event flag. An anomaly score that spikes significantly immediately following the location-change flag, particularly when correlated with a sustained drop in the `orig_bytes` and connection count metrics, strongly indicates a geofencing-based evasion mechanism."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]