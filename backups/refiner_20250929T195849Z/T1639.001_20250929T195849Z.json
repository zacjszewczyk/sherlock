[
  {
    "information_requirement": "Is an adversary exfiltrating data from our mobile devices over unencrypted, non-C2 protocols? (PIR)",
    "tactic_id": "TA0036",
    "tactic_name": "Exfiltration",
    "indicators": [
      {
        "technique_id": "T1639.001",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
        "evidence": [
          {
            "description": "A series of DNS queries originating from a single mobile device to a single parent domain where the subdomains are abnormally long (e.g., > 100 characters), have high Shannon entropy (e.g., > 4.5), and occur at a high frequency (e.g., > 50 queries/min). This is indicative of data being encoded into subdomains for exfiltration (DNS Tunneling), often using TXT, CNAME, or NULL record types.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolver logs, VPN concentrators, corporate Wi-Fi access point logs, Mobile Device Management (MDM) platforms, Cloud Access Security Broker (CASB) logs.",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of known malicious DNS tunneling domains. Create a rule to generate a high-severity alert when the 'query' field in Zeek dns.log matches any domain on this list. 2. (Statistical) For each DNS query, calculate the length and Shannon entropy of the subdomain portion of the 'query' field. Establish a network-wide baseline for these metrics. Generate an alert for any query where the length exceeds the 99th percentile or the entropy is above 4.5. Concurrently, track the rate of queries per source IP to a specific second-level domain over a 1-minute rolling window. An alert should be triggered if this rate exceeds 3 standard deviations above the device's or network's historical baseline. 3. (Machine Learning) Train a classification model (e.g., Random Forest, Gradient Boosting) to predict the probability of a DNS query being part of a tunneling attack. Features should include: query length, subdomain entropy, ratio of numeric to alphabetic characters in the subdomain, query type (A, AAAA, TXT, CNAME), and the historical rarity of the parent domain. Flag queries with a predicted probability > 0.9 for analyst investigation. Additionally, use a time-series anomaly detection model (e.g., SARIMA) on the volume of DNS traffic per device to spot uncharacteristic bursts of activity."
          },
          {
            "description": "An outbound HTTP POST or PUT request from a mobile device to a low-reputation or newly registered domain, where the request body size is anomalously large (e.g., > 99th percentile of user baseline) and the body's content has high Shannon entropy (e.g., > 4.0), suggesting encoded or compressed data rather than legitimate text or form data. The request may also feature a non-standard or unusually simplistic User-Agent string.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, API Gateways, web proxy logs, MDM/UEM logs with network activity, and Cloud Access Security Broker (CASB) logs.",
            "action": "1. (Symbolic) In Zeek http.log, correlate the destination 'host' and IP address against domain/IP reputation feeds. Generate a high-severity alert for any POST/PUT request to a destination categorized as 'malicious', 'suspicious', or with a registration age of less than 30 days. Also, compare the 'user_agent' field against a list of known, legitimate mobile User-Agents; flag any that are missing, empty, or match known malicious tool signatures. 2. (Statistical) For each user, establish a baseline of outbound POST/PUT request body sizes ('post_body_len' in Zeek http.log). Alert when a request's size exceeds the 99th percentile of that user's baseline. On alert, automatically calculate the Shannon entropy of the request body. An entropy score > 4.0 should escalate the alert severity, as it strongly indicates non-textual data. Also, profile the 'content_type' header; flag uploads of 'application/octet-stream' or other binary types to unusual domains. 3. (Machine Learning) Use an Isolation Forest model to detect anomalous HTTP requests. The feature set should include 'post_body_len', destination IP rarity, request body entropy, the presence/absence of a referrer, and the 'user_agent' string's rarity. Requests identified as anomalies require analyst review. Separately, apply a time-series forecasting model (e.g., Prophet) to the daily outbound data volume via POST/PUT for each user; an observed volume that significantly exceeds the forecasted upper confidence interval indicates potential bulk exfiltration."
          },
          {
            "description": "Any outbound FTP connection (port 21/TCP) from a mobile device IP address, as this protocol is highly atypical for modern mobile applications. High-priority alerts should be generated for sessions involving file upload commands ('STOR') or those transferring a significant volume of data.",
            "data_sources": [
              "Zeek ftp.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, network firewalls, VPN concentrators, corporate Wi-Fi access points, and DMZ network segments.",
            "action": "1. (Symbolic) Implement a zero-tolerance rule to generate a critical alert for any connection from the mobile device IP range to an external destination on port 21/TCP, as logged in Zeek conn.log. If Zeek ftp.log is available, escalate the alert to critical if the 'command' field is 'STOR'. 2. (Statistical) Upon a symbolic alert, enrich the event by determining if this is the first instance of FTP usage for this device in the last 90 days. A first-time occurrence significantly increases suspicion. Additionally, analyze the total bytes transferred ('orig_bytes' + 'resp_bytes' in conn.log) for the session. If the total data volume exceeds the 99.5th percentile of the device's typical session data volume across all protocols, escalate the alert priority. 3. (Machine Learning) Employ a peer group analysis model (e.g., K-Means clustering) to establish normal network behavior for groups of users with similar roles. The model's features should include counts of protocols used, destination diversity, and average data volumes. A device using a protocol like FTP, which is anomalous for its peer group, should be flagged as a high-confidence outlier requiring immediate investigation."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]