[
  {
    "information_requirement": "Is an adversary attempting to discover Wi-Fi network information on managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422.002",
        "name": "Wi-Fi Discovery",
        "evidence": [
          {
            "description": "An application makes an unusually high number of calls to Wi-Fi configuration APIs, such as `WifiManager.getConfiguredNetworks()` on Android or `NEHotspotConfigurationManager.fetchConfigurations` on iOS, exceeding a defined threshold (e.g., >10 calls in 1 minute) for that specific application.",
            "data_sources": [
              "Mobile Device Management (MDM) API call logs",
              "Mobile Endpoint Detection and Response (EDR) process activity logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS, Android), Mobile Device Management (MDM) Platform",
            "action": "Symbolic: Create and maintain an allow-list of application package names and their corresponding hashes that are authorized to query Wi-Fi configurations. Generate a high-severity alert for any application not on this list that attempts to call sensitive APIs like `getConfiguredNetworks` or `fetchConfigurations`. Statistical: For each application on each device, ingest MDM/EDR API call logs to establish a 30-day rolling baseline of call frequency to Wi-Fi configuration APIs. Calculate the 99th percentile and mean/standard deviation for calls within a 5-minute window. Generate a medium-severity alert if an application's call count exceeds 3 standard deviations from its historical mean or surpasses the 99th percentile. Machine Learning: Train a random forest classifier using features extracted from MDM/EDR logs, including API call frequency, application category, application install source (e.g., App Store, Sideloaded), and whether the API call is followed by a network connection to a newly observed domain within 60 seconds. Deploy the model to classify sequences of API calls as 'benign' or 'suspicious Wi-Fi discovery'."
          },
          {
            "description": "A mobile device, within 5 minutes of connecting to a Wi-Fi network, initiates network connections to a high number of unique internal IP addresses (e.g., >20) or unique TCP/UDP ports (e.g., >10) on the local subnet (/24), indicative of internal network scanning.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate and guest Wi-Fi network segments, Network sensors (e.g., Zeek), DHCP servers",
            "action": "Symbolic: Configure network sensors to generate specific alerts for scanning activity. Ingest Zeek notice.log and trigger a high-severity alert for 'Scan::Address_Scan' or 'Scan::Port_Scan' notice types. Correlate the source IP from the notice with DHCP server logs to enrich the alert with the device's MAC address and hostname, flagging if it is a managed mobile device. Statistical: Using Zeek conn.log, group all connections by source IP in 60-second windows. For each window, calculate the count of unique destination IPs on the local subnet and the Shannon entropy of destination ports. Establish a fleet-wide 95th percentile baseline for both metrics derived from mobile devices. Generate a medium-severity alert when a source IP exceeds both the unique IP count threshold (e.g., >20) and the port entropy baseline. Machine Learning: Implement a time-series anomaly detection model, such as ARIMA, on network connection rates per source IP, aggregated into 1-minute intervals from Zeek conn.log. Train the model on at least 30 days of historical data to learn normal connection patterns for the mobile device fleet. Generate an alert when the observed rate of new connections from a mobile device's IP significantly deviates from the model's forecast."
          },
          {
            "description": "A process accesses a known Wi-Fi credential store (e.g., `/data/misc/wifi/wpa_supplicant.conf` on rooted Android, iOS Keychain items with `kSecAttrService` set to `com.apple.wifid.passwords`) and, within 60 seconds, initiates an outbound network connection to a rare or suspicious domain.",
            "data_sources": [
              "Mobile EDR file integrity monitoring logs",
              "Mobile EDR process or keychain access logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Network Egress Points (Firewall/Proxy), Internal DNS Resolvers",
            "action": "Symbolic: From Mobile EDR logs, create a rule to trigger a high-severity alert when any process attempts file or keychain access to a known Wi-Fi credential store. Enrich this EDR alert by correlating the device and timestamp with Zeek conn.log. Escalate the alert's severity if the same process initiates an outbound network connection within a 5-minute window to a destination IP categorized as malicious by threat intelligence feeds. Statistical: For any process that accesses a Wi-Fi credential store, identify any subsequent DNS queries from Zeek dns.log. Calculate a domain prevalence score based on the number of unique devices in the fleet that have queried that domain in the last 30 days. Generate a medium-severity alert if the process connects to a domain in the bottom 1st percentile of prevalence, indicating an unusually rare exfiltration destination. Machine Learning: Develop a sequence-based classifier using a Recurrent Neural Network (RNN). The model should be trained on event sequences: [Process 'A' starts -> Process 'A' reads credential store -> Process 'A' resolves Domain 'B' -> Process 'A' connects to IP 'C']. Features should include process name, file/keychain path, domain name entropy, and domain age. Train the model to classify a new sequence as 'credential theft and exfiltration'."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]