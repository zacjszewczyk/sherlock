[
  {
    "information_requirement": "Has an adversary exfiltrated data from a corporate mobile device by using a non-standard or alternative network protocol? (PIR)",
    "tactic_id": "TA0036",
    "tactic_name": "Exfiltration",
    "indicators": [
      {
        "technique_id": "T1639",
        "name": "Exfiltration Over Alternative Protocol",
        "evidence": [
          {
            "description": "A mobile device transmits a large volume of data using a protocol that is either rare for the specific device or rare across the entire mobile device fleet (e.g., FTP, IRC, SMB), or uses a common protocol (e.g., HTTPS) to a low-reputation destination at a volume that is a statistical outlier.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, guest networks, VPN concentrators, and Mobile Device Management (MDM) platform logs.",
            "action": "1. (Symbolic) Continuously screen destination IP addresses and ports from Zeek conn.log against threat intelligence feeds of known command-and-control (C2) servers and malicious infrastructure. Alert on any match originating from a mobile device IP address. 2. (Statistical) For each mobile device, establish a 30-day rolling baseline of used protocols and the 95th percentile of outbound bytes ('orig_bytes') for each protocol using Zeek conn.log. Compare the device's activity to a peer group baseline (e.g., all mobile devices in the 'Sales' department). Generate a medium-severity alert if a device uses a protocol not seen in its own baseline or its peer group's baseline. Generate a high-severity alert if the outbound data volume for any single connection exceeds 5 times the device's own 95th percentile for that protocol, or 3 times the peer group's 95th percentile. 3. (Machine Learning) 1. Feature Engineering: From Zeek conn.log, extract features for each connection: protocol, destination port, duration, orig_bytes, resp_bytes, and day/hour of connection. 2. Clustering: Apply an unsupervised clustering algorithm (e.g., DBSCAN) to the feature set for all mobile device traffic. Connections that are marked as noise/outliers by the algorithm represent potential anomalies that require investigation. 3. Time-Series Anomaly Detection: For each device and protocol, model the daily outbound data volume using a time-series model (e.g., Prophet or LSTM). Flag days where the actual volume exceeds the model's predicted confidence interval as potential exfiltration events."
          },
          {
            "description": "A mobile device generates DNS queries that exhibit characteristics of data tunneling, such as a statistically anomalous query rate, abnormally long subdomains, or high Shannon entropy in query names, suggesting encoded data rather than human-readable hostnames.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, network egress points, and Cloud Access Security Broker (CASB) logs.",
            "action": "1. (Symbolic) Compare requested domains in the 'query' field of Zeek dns.log against a blocklist of known DNS tunneling C2 domains and services. Alert on any match from the mobile device network segment. 2. (Statistical) For each device, calculate a 30-day rolling baseline for: a) daily DNS query count, b) average query name length, and c) average Shannon entropy of the query name's subdomain. Generate an alert if the daily query count or average length exceeds 3 standard deviations from its historical mean. Generate a separate, higher-severity alert if the average entropy score is consistently above a threshold (e.g., > 4.0), suggesting encoded data. Additionally, monitor for queries to rare or non-standard TLDs not typically used for corporate business. 3. (Machine Learning) 1. Feature Engineering: For each DNS query in dns.log, generate features such as query length, subdomain entropy, ratio of numbers to letters, presence of hex characters, and n-gram frequency analysis. 2. Classification: Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on a labeled dataset of known-good and known-bad (tunneling) DNS queries. Apply this model in real-time to DNS traffic from mobile devices to score each query's likelihood of being malicious. Queries with a high probability score trigger an alert for analyst review."
          },
          {
            "description": "A mobile device sends HTTP/S POST requests containing an anomalously large data payload in a single request, or engages in beaconing behavior characterized by a series of smaller POSTs with regular time intervals, to a destination domain that is not an approved corporate service or a known-good public service.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web proxies, internet gateways, VPN concentrators with SSL/TLS inspection capabilities, and Cloud Access Security Broker (CASB) platforms.",
            "action": "1. (Symbolic) Correlate the 'host' field from http.log and 'server_name' from ssl.log against threat intelligence feeds for malicious domains and newly registered domains (NRDs). Any POST request to a categorized malicious domain or an NRD where the associated connection in conn.log shows an outbound payload ('orig_bytes') over 1MB should be an immediate high-severity alert. 2. (Statistical) For all mobile devices, calculate the 99th percentile of outbound data volume ('orig_bytes' from conn.log) for connections on ports 80/443. Alert when any single connection from a mobile device exceeds this network-wide threshold. Separately, track beaconing by grouping connections by device and destination host, then calculating the standard deviation of the time deltas between consecutive connections. A standard deviation near zero indicates highly regular, automated communication and should be flagged for review. 3. (Machine Learning) 1. Client Fingerprinting: Use JA3/JA3S hashes from ssl.log and User-Agent strings from http.log to build profiles of legitimate mobile applications. Use a clustering algorithm to group similar clients. Any client that does not fall into a known-good cluster (e.g., common browsers, corporate apps) and is associated with high-volume POST requests is considered suspicious. 2. Time-Series Analysis: Model the expected volume of POST data to various destination categories (e.g., 'File Sharing', 'Social Media', 'Uncategorized'). A sudden, sustained spike in data sent from a mobile device to an 'Uncategorized' or low-reputation domain would trigger a time-series anomaly alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]