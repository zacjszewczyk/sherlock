[
  {
    "information_requirement": "Is an adversary using legitimate external web services for command and control on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1481",
        "name": "Web Service",
        "evidence": [
          {
            "description": "A mobile device establishes connections to a known web service (e.g., GitHub, Pastebin, Telegram) where the time between connections has low variance (low jitter) and both request and response sizes are consistently small and uniform, characteristic of automated C2 beaconing rather than variable human-driven web browsing.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments for mobile devices, VPN Concentrators, Mobile Device Management (MDM) platform logs",
            "action": "1. (Symbolic) Define a watchlist of services often abused for C2 (e.g., api.telegram.org, pastebin.com, api.github.com). For traffic originating from the mobile NAI, query network logs to count connections to these services per source device over a 1-hour window. Alert if the connection count exceeds a threshold (e.g., 50) and the average response payload size is less than a threshold (e.g., 1KB). 2. (Statistical) For each source mobile IP and destination service pair, extract connection timestamps from Zeek conn.log over a 24-hour period. Calculate the inter-arrival times (time deltas between consecutive connections) and compute their standard deviation. Alert if the standard deviation is abnormally low (e.g., < 1 second), indicating periodic, machine-like timing. Concurrently, calculate the Shannon entropy of the response byte counts ('resp_bytes'); alert if the entropy value is in the bottom 5th percentile for that destination service, indicating a lack of size variability. 3. (Machine Learning) Using Zeek conn.log data, apply a clustering algorithm like DBSCAN to group connections based on features: (inter_arrival_time, orig_bytes, resp_bytes). Isolate and investigate tight, dense clusters, as these represent repetitive, automated behavior distinct from sparse, irregular user traffic. Label these clusters as potential beaconing for analyst review."
          },
          {
            "description": "A mobile device sends an HTTP request to a legitimate web service where the User-Agent string identifies a non-standard client (e.g., 'curl', 'python-requests') or the URI path indicates direct data access (e.g., '/raw/', '/paste/'), bypassing typical application-level interaction.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points with HTTP/S inspection capabilities, Web Application Firewall (WAF) logs",
            "action": "1. (Symbolic) From Zeek http.log records originating from the mobile NAI, filter and match the 'user_agent' field against a deny-list of strings associated with scripting tools (e.g., 'Wget', 'curl', 'python-requests', 'Go-http-client'). Generate an alert on any match. 2. (Statistical) For each destination host (e.g., 'gist.githubusercontent.com'), group requests by source IP from the mobile NAI. For each group, calculate the Shannon entropy of the 'uri' field. A low entropy score signifies repetitive requests to the same or similar paths. Flag source IPs whose URI entropy falls in the bottom 10th percentile compared to all devices accessing that same destination host. 3. (Machine Learning) Train a binary classification model (e.g., Random Forest) on a labeled dataset of benign and malicious HTTP requests. Engineer features from Zeek http.log including: 'user_agent' string length, 'user_agent' entropy, 'uri' length, count of special characters in 'uri', and the ratio of numeric to alphabetic characters in the 'uri'. Deploy the trained model to score new HTTP requests from the mobile NAI in real-time and alert on requests classified as malicious with high confidence."
          },
          {
            "description": "A mobile device shows a high ratio of DNS queries for a specific web service domain to the number of subsequent TCP/UDP connections made to that domain's resolved IPs, suggesting a 'canary' or 'check-in' C2 mechanism that resolves the domain but only connects when a task is available.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Protective DNS (PDNS) logs",
            "action": "1. (Symbolic) Continuously monitor Zeek dns.log for queries originating from the mobile NAI. Match the 'query' field against a threat intelligence feed of known C2 domains. Generate an immediate, high-priority alert on any match, regardless of whether a subsequent connection is observed in conn.log. 2. (Statistical) Over a 1-hour window, join Zeek dns.log and conn.log on the source IP and destination domain/IP. For each source IP, calculate the DNS-to-Connection Ratio: COUNT(DISTINCT dns.query) / COUNT(DISTINCT conn.uid). Establish a baseline ratio for popular services across the enterprise. Alert on any device whose ratio for a specific service exceeds the 99th percentile of the established baseline. 3. (Machine Learning) Develop a regression model (e.g., Gradient Boosting Regressor) to predict the expected number of connections (conn.log entries) based on the number of DNS queries (dns.log entries) for a given domain. Use features like time of day, domain category, and historical query frequency. A large positive residual, where the actual number of DNS queries far exceeds the number predicted to support the observed connection count, signals a high-risk anomaly. Investigate devices with the highest residuals."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]