[
  {
    "information_requirement": "Is an adversary capturing user credentials via input manipulation on mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "Evidence of a potential keylogger is the installation of an unapproved keyboard application on a managed mobile device, followed by periodic, small outbound network connections (e.g., 1-5 KB) to a new or low-reputation domain. The connection timing does not correlate with user-initiated application activity, suggesting automated exfiltration.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) Query MDM Application Inventory Logs for any application identified as a keyboard. Compare the application's package name against a managed allow-list of approved keyboards. Generate a high-priority alert for any device with an installed keyboard not on the allow-list. Cross-reference the unapproved package name against external threat intelligence feeds for known malware. 2. (Statistical) For devices with an unapproved keyboard, analyze their network traffic in Zeek logs. First, calculate the Shannon entropy of DNS queries in dns.log associated with the device; an entropy score > 4.0 may indicate DGA. Second, analyze conn.log for beaconing behavior: identify connections with a consistent size (orig_bytes) and regular time interval (e.g., every 5 minutes +/- 10 seconds). Third, for any POST requests in http.log, alert if the resp_body_len is 0 or minimal while req_body_len is non-trivial and the transaction size is in the 95th percentile of small data transfers for that device's baseline. 3. (Machine Learning) Train a time-series anomaly detection model (e.g., an LSTM Autoencoder) using features from conn.log for each device, including orig_bytes, resp_bytes, duration, and connection frequency per hour. An alert is triggered when the model's reconstruction error for a new time window exceeds a predefined threshold (e.g., 3 standard deviations above the mean error). Correlate the timestamp of the anomaly with MDM logs to see if a new keyboard application was installed shortly before the anomalous behavior began."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "Evidence of GUI input capture includes a mobile application being granted 'Draw Over Other Apps' (Android: SYSTEM_ALERT_WINDOW) or 'Accessibility Service' permissions where this is not justified by its stated function, and this event is temporally correlated with outbound network connections to destinations not previously associated with the application or user.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, generate an alert whenever an application is granted SYSTEM_ALERT_WINDOW or Accessibility Service permissions. Compare the application's package name against a curated list of approved apps that require these permissions (e.g., password managers, screen readers). If the app is not on the list, escalate the alert and query threat intelligence for the package name and associated network indicators. 2. (Statistical) For an application flagged by the symbolic rule, analyze its network activity in conn.log. Establish a baseline of outbound data volume (orig_bytes) for the user's device. Alert if, within 24 hours of the permission grant, the application initiates connections causing the daily outbound data volume to exceed the 98th percentile of the device's 30-day history. Additionally, analyze ssl.log for the use of self-signed certificates or JA3/JA3S hashes not seen before on the network. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) to score the risk of an application based on its metadata from MDM logs. Features should include: number and type of permissions requested, app store category, developer reputation, user ratings, and age of the application. An application receiving a high-risk score (>0.8) for requesting high-risk permissions triggers an automated forensic data collection from the endpoint and a high-priority alert for SOC investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive user information via input capture on mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "Evidence of a potential keylogger is the installation of an unapproved keyboard application on a managed mobile device, followed by periodic, small outbound network connections (e.g., 1-5 KB) to a new or low-reputation domain. The connection timing does not correlate with user-initiated application activity, suggesting automated exfiltration of collected data like messages or contacts.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) Query MDM Application Inventory Logs for any application identified as a keyboard. Compare the application's package name against a managed allow-list of approved keyboards. Generate a high-priority alert for any device with an installed keyboard not on the allow-list. Cross-reference the unapproved package name against external threat intelligence feeds for known malware. 2. (Statistical) For devices with an unapproved keyboard, analyze their network traffic in Zeek logs. First, calculate the Shannon entropy of DNS queries in dns.log associated with the device; an entropy score > 4.0 may indicate DGA. Second, analyze conn.log for beaconing behavior: identify connections with a consistent size (orig_bytes) and regular time interval (e.g., every 5 minutes +/- 10 seconds). Third, for any POST requests in http.log, alert if the resp_body_len is 0 or minimal while req_body_len is non-trivial and the transaction size is in the 95th percentile of small data transfers for that device's baseline. 3. (Machine Learning) Train a time-series anomaly detection model (e.g., an LSTM Autoencoder) using features from conn.log for each device, including orig_bytes, resp_bytes, duration, and connection frequency per hour. An alert is triggered when the model's reconstruction error for a new time window exceeds a predefined threshold (e.g., 3 standard deviations above the mean error). Correlate the timestamp of the anomaly with MDM logs to see if a new keyboard application was installed shortly before the anomalous behavior began."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "Evidence of GUI input capture includes a mobile application being granted 'Draw Over Other Apps' (Android: SYSTEM_ALERT_WINDOW) or 'Accessibility Service' permissions where this is not justified by its stated function, and this event is temporally correlated with outbound network connections to destinations not previously associated with the application or user, suggesting collection of on-screen information.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, generate an alert whenever an application is granted SYSTEM_ALERT_WINDOW or Accessibility Service permissions. Compare the application's package name against a curated list of approved apps that require these permissions (e.g., password managers, screen readers). If the app is not on the list, escalate the alert and query threat intelligence for the package name and associated network indicators. 2. (Statistical) For an application flagged by the symbolic rule, analyze its network activity in conn.log. Establish a baseline of outbound data volume (orig_bytes) for the user's device. Alert if, within 24 hours of the permission grant, the application initiates connections causing the daily outbound data volume to exceed the 98th percentile of the device's 30-day history. Additionally, analyze ssl.log for the use of self-signed certificates or JA3/JA3S hashes not seen before on the network. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) to score the risk of an application based on its metadata from MDM logs. Features should include: number and type of permissions requested, app store category, developer reputation, user ratings, and age of the application. An application receiving a high-risk score (>0.8) for requesting high-risk permissions triggers an automated forensic data collection from the endpoint and a high-priority alert for SOC investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]