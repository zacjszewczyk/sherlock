[
  {
    "information_requirement": "Is an adversary bypassing mobile application security controls by downloading and executing new code at runtime?",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1407",
        "name": "Download New Code at Runtime",
        "evidence": [
          {
            "description": "A network connection from a managed mobile device IP address to a destination IP/domain that is either present on a threat intelligence list, has a reputation score below 30/100, or was registered within the last 30 days, AND which is associated with a file download where the MIME type is 'application/java-archive', 'application/x-dex', 'application/x-sharedlib', or 'application/octet-stream' and the file source is not an approved corporate or public application store.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.",
            "action": "1. Symbolic Detection: Construct a SIEM query that joins network connection logs (Zeek conn.log) with file transfer logs (Zeek files.log) on the session ID. Filter for sessions originating from the mobile device IP range. Alert if the destination IP or SNI (from Zeek ssl.log) matches a threat intelligence feed OR the domain age is less than 30 days, AND the file MIME type in files.log is one of ('application/java-archive', 'application/x-dex', 'application/x-sharedlib', 'application/octet-stream'). 2. Statistical Detection: For all HTTP/S sessions from the mobile device IP space, calculate the population frequency of each JA3/JA3S hash observed in Zeek ssl.log. Flag sessions using a hash that falls in the bottom 5th percentile of frequency. Separately, calculate the Shannon entropy of the URI string in Zeek http.log. Correlate rare JA3/JA3S hashes with high URI entropy (e.g., > 4.5) to identify potentially obfuscated or algorithmically generated C2 channels. Additionally, baseline the ratio of executable file downloads to total file downloads per user over a 30-day window; alert if a user's daily ratio exceeds the 95th percentile of their own historical baseline. 3. Machine Learning Detection: Train a Random Forest or Gradient Boosting classifier on labeled historical network sessions (benign vs. malicious downloads). Engineer features such as: destination domain age, threat intelligence score, JA3/JA3S hash prevalence, URI Shannon entropy, file MIME type, file size, presence of self-signed certificate (from Zeek x509.log), ratio of uppercase to lowercase characters in the domain, and number of subdomains. Deploy the trained model to score new sessions in near-real-time and generate an alert for sessions classified as 'suspicious dynamic code download' with a confidence score > 0.85."
          },
          {
            "description": "A Mobile Threat Defense (MTD) agent on a managed Android device reports an API call to 'dalvik.system.DexClassLoader', 'java.lang.System.load', or 'android.webkit.JavascriptInterface' from an application that is not on a pre-approved allowlist or is a version of an approved application known to be vulnerable or trojanized.",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Application sandboxing analysis reports",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android mobile devices enrolled in MDM/MTD solutions.",
            "action": "1. Symbolic Detection: Configure a SIEM rule to trigger on MTD logs containing API call events for 'dalvik.system.DexClassLoader', 'java.lang.System.load', or 'android.webkit.JavascriptInterface'. Cross-reference the source application name and version from the event with an MDM application inventory and an internal allowlist of approved applications and versions. Generate a high-severity alert for any call originating from an application not on the allowlist. 2. Statistical Detection: For each application installed on managed devices, use MTD and MDM telemetry to establish a 30-day rolling baseline of API call frequencies for dynamic code loading functions. Alert on two conditions: a 'first use' event where an application calls one of these APIs for the first time, or a 'frequency spike' event where the call count for an application in a 24-hour period exceeds 3 standard deviations above its historical mean. 3. Machine Learning Detection: Develop an anomaly detection model (e.g., Isolation Forest or One-Class SVM) using the sequence, frequency, and combination of all API calls made by each application as features. Train the model on a large dataset of telemetry from known-good applications to define a 'normal behavior profile'. Apply the model to streaming MTD data; flag any application whose behavior is classified as an anomaly, with priority given to anomalies involving the use of dynamic code loading APIs. Integrate with MDM to automatically quarantine the device or application pending analyst review."
          },
          {
            "description": "A managed iOS device initiates a DNS query or a direct HTTP/S connection to a domain/IP on a threat intelligence feed known for hosting JSPatch scripts, OR an MTD agent reports an application is using a known JSPatch library or a similar dynamic code loading framework. [1]",
            "data_sources": [
              "Mobile Threat Defense (MTD) logs",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek conn.log",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.",
            "action": "1. Symbolic Detection: Ingest and maintain a threat intelligence feed of domains, IPs, and file hashes associated with malicious JSPatch use. Create a SIEM correlation rule that alerts when a DNS query (Zeek dns.log) or network connection (Zeek conn.log) from the iOS device IP range matches an indicator on this feed. Simultaneously, create a separate alert based on MTD logs that explicitly identify the use of the JSPatch library within an application. 2. Statistical Detection: For all DNS queries from the iOS device NAI (in Zeek dns.log), calculate the Shannon entropy for all newly observed domains (not seen in the last 30 days). Flag domains with an entropy score > 4.0. Additionally, calculate the character frequency distribution and compare it against a baseline distribution derived from the top 1 million legitimate domains using a Chi-squared test. High entropy or a significant deviation from the baseline distribution for a domain queried by a non-browser application should be considered a high-fidelity indicator of DGA or obfuscated C2. 3. Machine Learning Detection: Implement a time-series forecasting model (e.g., Prophet or LSTM) for each application on iOS devices to predict the expected volume of outbound network connections per hour. Feed the model with historical data from Zeek conn.log aggregated by source device and application (if available from an MTD/MDM integration). An alert is generated when the actual connection volume for an application exceeds the model's predicted upper confidence interval by a significant margin (e.g., > 50%), especially if this anomaly coincides with other symbolic or statistical triggers."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]