[
  {
    "information_requirement": "Is an adversary using steganography to exfiltrate data from or introduce malicious tools to managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.001",
        "name": "Steganography",
        "evidence": [
          {
            "description": "A media file (e.g., PNG, JPG, MP4) transferred over the network from/to a mobile device is directed to a destination on a threat intelligence blocklist, or the file's size exceeds the 99th percentile for its MIME type, or its calculated Shannon entropy is greater than 7.5, indicating a high degree of randomness inconsistent with typical media files.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network egress points, Guest Wi-Fi network segments, VPN concentrators serving mobile devices, Cloud storage service gateways",
            "action": "1. (Symbolic) Ingest Zeek logs into a SIEM. Join `files.log` with `conn.log` on the `uid` field. For each file transfer, cross-reference the destination IP (`id.resp_h`) and any associated server name from `http.log` or `dns.log` against a threat intelligence feed of known malicious hosts. Trigger an alert for any match. 2. (Statistical) For each MIME type observed in `files.log`, build a historical baseline of file sizes (`seen_bytes`). For each new file transfer, compare its size to the baseline. Flag transfers where the size exceeds the 99th percentile. Separately, for each transferred file, calculate its Shannon entropy. Flag any file with an entropy score greater than 7.5, as this suggests encrypted or packed data rather than standard media content. 3. (Machine Learning) Develop an anomaly detection model (e.g., Isolation Forest) trained on features from `files.log`, `conn.log`, and `http.log` representing benign traffic. Features should include: file size, MIME type, transfer duration, destination IP/ASN, user agent, and time of day. Apply the trained model to score all new file transfers. Investigate transfers with the highest anomaly scores as potential steganographic activity."
          },
          {
            "description": "A mobile application binary (.apk or .ipa) installed on a managed device contains embedded strings matching known steganography libraries, or a media file (e.g., JPG, PNG) on the device's local storage has a Shannon entropy score exceeding 3 standard deviations above the established baseline for its file type.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Endpoint File System Scan Data",
              "Mobile Application Sandbox Analysis Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Enterprise application store and repository, Mobile device sandboxing environment",
            "action": "1. (Symbolic) Using MDM application inventory data, retrieve the binaries for all installed applications. Use a YARA rule or simple string matching to scan each binary for keywords related to steganography libraries and functions (e.g., 'StegLib', 'LsbSteganography', 'openstego', 'steganopng'). Generate an alert for any application binary that contains one or more of these strings. 2. (Statistical) Via an EDR agent or MDM script, periodically scan media files in common directories (`DCIM`, `Downloads`, `Pictures`) on managed mobile devices. For each file, calculate its Shannon entropy. Maintain a running baseline (mean and standard deviation) of entropy values for each file type (e.g., `.jpg`, `.png`). Flag any file whose entropy score is more than 3 standard deviations above the mean for its type, or has an absolute value > 7.5. 3. (Machine Learning) Train a classification model (e.g., Gradient Boosting Classifier) using data from an application sandbox and MDM. Features should include: requested permissions (e.g., file access, network access), presence of steganography-related strings, API calls made, app store of origin, and code structure (e.g., ratio of native code). Train the model on a labeled dataset of benign, malicious, and Potentially Unwanted Programs (PUPs). Use the model to assign a risk score to all new and updated applications."
          },
          {
            "description": "A non-standard process on a mobile device (i.e., not a known media player, editor, or social media app) accesses a media file and, within a 5-second window, initiates an outbound network connection to an external IP address not previously associated with that application's baseline behavior.",
            "data_sources": [
              "Mobile Endpoint Detection and Response (EDR) process logs",
              "Mobile EDR network connection logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Corporate Wi-Fi network egress points",
            "action": "1. (Symbolic) In a SIEM, correlate mobile EDR process activity logs with network connection logs. Create a detection rule that triggers when a process (a) is not on an allowlist of standard media applications, (b) performs a file-read operation on a file with a media extension (`.jpg`, `.png`, `.mp4`), and (c) within 5 seconds, initiates a network connection to an IP address present on a threat intelligence blocklist. 2. (Statistical) From mobile EDR logs, establish a behavioral baseline for each application process. The baseline should include the set of file extensions it typically accesses and the set of Autonomous System Numbers (ASNs) it typically connects to. Calculate a rarity score for the sequence: [Process -> reads media file -> connects to a new/rare ASN]. A sequence with a rarity score in the top 1% (i.e., highly unusual) should be flagged for investigation. 3. (Machine Learning) Implement a sequence analysis model (e.g., an LSTM-based autoencoder) using mobile EDR process event logs. Train the model on sequences of events (e.g., process start, file read, network connection, file write) generated by benign applications. The model learns to reconstruct normal sequences with low error. Apply the model to new event sequences in real-time. A high reconstruction error indicates a significant deviation from normal behavior, suggesting a potentially malicious process sequence like that of a steganography tool."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]