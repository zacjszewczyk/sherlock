[
  {
    "information_requirement": "Is an adversary attempting to discover sensitive information on our corporate mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1420",
        "name": "File and Directory Discovery",
        "evidence": [
          {
            "description": "An application on a managed Android device rapidly enumerates files, indicated by accessing over 100 unique file paths in external storage within a 5-minute window, particularly targeting sensitive locations like '/sdcard/Download/' or '/sdcard/Documents/'. This activity deviates from the application's established 30-day baseline file access count by more than 3 standard deviations.",
            "data_sources": [
              "MTD/EDR file access events",
              "Android logcat filtered for 'FileAccess' or 'Vold' tags",
              "Application-specific sandboxed file I/O logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint telemetry from corporate-owned or managed Android devices, particularly those with access to sensitive enterprise resources.",
            "action": "1. (Symbolic) Implement a SIEM rule that triggers an alert when an application process, not on the corporate allow-list, accesses file paths matching regular expressions for sensitive data (e.g., .*/(passwords?|credentials?|secret|backup)\\.(txt|json|db|xml)$/) or accesses more than 10 files in known sensitive directories like '/sdcard/Download/' or '/sdcard/Documents/' within one minute. 2. (Statistical) For each managed application, ingest file access events into a time-series database. Calculate a 30-day rolling baseline of unique file paths accessed per hour. Generate a medium-severity alert if the hourly count exceeds the 98th percentile for that specific application. Calculate the Shannon entropy of directory names accessed in a 5-minute window; alert if the entropy score exceeds the application's baseline by 3 standard deviations, indicating enumeration of random or obfuscated directories. 3. (Machine Learning) Develop an Isolation Forest model to detect anomalous file access patterns. Use features such as the count of file reads/writes, file path depth, frequency of access to rare directories, and the ratio of file access events to UI interaction events for a given process. Train the model on baseline data from approved applications and deploy it to score new activity, flagging low-density (anomalous) events for investigation."
          },
          {
            "description": "A user grants a high-risk storage permission (`android.permission.READ_EXTERNAL_STORAGE`, `android.permission.WRITE_EXTERNAL_STORAGE`, or `android.permission.MANAGE_EXTERNAL_STORAGE`) to an application that is either: a) not on the corporate-approved application list, b) has a low reputation score, or c) has a stated purpose (e.g., 'Calculator') that is incongruous with the need for broad file system access.",
            "data_sources": [
              "MDM application inventory and permission status logs",
              "MTD security policy violation events",
              "Google Play Store API for application metadata (category, developer)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate MDM/UEM platform, MTD management console, and the internal repository defining the corporate application allow-list and associated expected permissions.",
            "action": "1. (Symbolic) Query MDM logs for any event where `permission.state = 'GRANTED'` for `android.permission.READ_EXTERNAL_STORAGE` or `android.permission.WRITE_EXTERNAL_STORAGE`. Cross-reference the application's package name against the corporate allow-list. Generate a high-priority alert if the application is not on the list. 2. (Statistical) For each application across the fleet, calculate the daily grant count for storage permissions. Identify outliers by alerting on any application whose daily grant count exceeds the 99th percentile for all applications over the last 30 days. This highlights apps that are suddenly being installed and granted permissions at an anomalous rate. 3. (Machine Learning) Use a classification model (e.g., Logistic Regression, Random Forest) trained on application metadata (app category, developer age, number of installs, requested permissions) to predict a 'risk score'. An application with a high predicted risk score (e.g., a new 'Solitaire' game from an unknown developer requesting storage, contacts, and microphone access) that is granted storage permissions should trigger an immediate analyst review."
          },
          {
            "description": "A mobile device initiates an outbound network connection resulting in the transfer of a large volume of data (e.g., >50MB) within a short time window (e.g., 30 minutes) immediately following a precursor alert for anomalous file access or a high-risk permission grant on the same device. The connection is made to a destination IP address not seen in the device's or user's 30-day network history.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "VPN logs",
              "MTD/EDR network flow telemetry"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensor logs from corporate Wi-Fi access points, VPN concentrators, and cloud access security brokers (CASB)",
            "action": "1. (Symbolic) Create a correlation rule. When a 'High-Risk Permission Grant' or 'Anomalous File Access' alert fires for a device, monitor its network activity for the next hour. Query `Zeek dns.log` and `conn.log` for connections from the device's IP. Generate a critical alert if the destination IP or requested domain matches an entry in a threat intelligence feed of known C2 infrastructure or data exfiltration endpoints. 2. (Statistical) For a device flagged by a precursor alert, aggregate the `orig_bytes` from `Zeek conn.log` for all connections in the subsequent 30 minutes. Compare this sum to the user's 30-day baseline for outbound data volume in a 30-minute window. Alert if the current volume exceeds the 95th percentile. Additionally, flag connections to destination IP addresses not present in the user's 30-day history (a 'rare' connection). 3. (Machine Learning) Use time-series analysis (e.g., ARIMA or Prophet) to model the expected outbound data volume for each device based on historical network logs. When a precursor file access/permission alert is triggered, compare the actual subsequent network traffic volume against the forecasted volume. An actual volume that significantly exceeds the prediction's confidence interval (e.g., a large residual error) indicates anomalous data transfer and potential exfiltration, triggering an alert."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]