[
  {
    "information_requirement": "Is an adversary using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627",
        "name": "Execution Guardrails",
        "evidence": [
          {
            "description": "A mobile application's manifest file contains a combination of permissions (e.g., ACCESS_FINE_LOCATION, READ_PHONE_STATE) whose co-occurrence frequency is below the 5th percentile for its application store category. Static analysis of the application's code confirms that API calls corresponding to these permissions are invoked prior to the application's primary user-facing functions.",
            "data_sources": [
              "Mobile Application Manifest Files (AndroidManifest.xml)",
              "Mobile Threat Defense (MTD) logs",
              "Static analysis reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, mobile device management (MDM) platforms, and application vetting/sandbox environments.",
            "action": "1. (Symbolic Logic) For all new applications, query the AndroidManifest.xml file for permission combinations designated as high-risk on an internal watchlist (e.g., READ_SMS, SEND_SMS, and ACCESS_FINE_LOCATION used together). Generate a high-severity alert for any application matching a known malicious signature. 2. (Statistical Analysis) For each application, extract its permission set and calculate the Shannon entropy of the list based on the global frequency of each permission across the environment. Compare this score to the historical distribution for the application's declared category (e.g., 'Productivity'). Flag applications with an entropy score exceeding the 95th percentile for their category, as this indicates an unusual and potentially suspicious combination of permissions. 3. (Machine Learning) Input a feature vector for each application (e.g., one-hot encoded permissions, number of activities, presence of exported services) into a pre-trained Random Forest classifier. Quarantine any application for which the model returns a malicious probability score $$ p(malicious) > 0.90 $$ for further dynamic analysis."
          },
          {
            "description": "In a dynamic analysis sandbox, an application's network egress traffic remains below a baseline of 10KB per minute during an initial 5-minute observation period. Upon simulating an environmental change (e.g., setting GPS coordinates to a specific country, connecting to a Wi-Fi SSID with a specific name), the application initiates network connections to a low-reputation IP address and egresses >1MB of data, or makes new API calls to access sensitive data like contacts or SMS messages, which were not observed during the baseline period.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Dynamic analysis sandbox logs (system calls, network traffic, API hooks)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic egress points for corporate mobile devices, guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.",
            "action": "1. (Symbolic Logic) In a dynamic analysis sandbox, systematically iterate through a list of environmental triggers (e.g., specific GPS coordinates, Wi-Fi SSIDs, SIM country codes). Monitor network traffic (Zeek conn.log, Zeek dns.log). Generate a high-severity alert if a connection is established to a domain or IP address present on a threat intelligence feed immediately following a trigger event. 2. (Statistical Analysis) Establish a 5-minute baseline of network behavior for the application, calculating the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of outbound bytes per 10-second interval from Zeek conn.log. After applying an environmental trigger, identify any 10-second interval where outbound bytes exceed $$ \\mu + 3\\sigma $$. Correlate this statistical anomaly with sandbox logs to confirm it is linked to sensitive API calls or file system modifications. 3. (Machine Learning) Feed time-series data of network flows (e.g., bytes_out/sec, connections/sec) from the sandboxed application into a trained LSTM autoencoder model. Continuously monitor the model's reconstruction error. Generate an alert if the reconstruction error spikes above the 99th percentile of historical errors immediately after an environmental variable is changed, indicating a behavioral state change inconsistent with benign application traffic."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]