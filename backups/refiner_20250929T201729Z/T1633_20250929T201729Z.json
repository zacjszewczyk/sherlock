[
  {
    "information_requirement": "Is malware on a corporate mobile device attempting to detect if it is running in a sandbox or emulator? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A non-system, user-installed application process queries for two or more system properties known to be associated with emulated or sandboxed Android environments (e.g., ro.hardware: goldfish, ro.kernel.qemu: 1, ro.product.brand: generic) within the first 60 seconds of its initial execution.",
            "data_sources": [
              "Android logcat",
              "MDM audit logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM log aggregation servers, Centralized SIEM platform, Network Security Monitoring (NSM) sensors at the network egress point, Application sandboxing and analysis platforms.",
            "action": "1. (Symbolic) Using a SIEM, create a rule that alerts when Android logcat data shows a process not associated with the OS or a trusted publisher (identified via MDM logs) querying for a property name present in a watch list of emulator artifacts (e.g., ro.hardware, ro.kernel.qemu, ro.product.model). The rule must trigger if two or more unique watch list properties are queried by the same process within 60 seconds of launch. 2. (Statistical) For all non-system applications, ingest Android logcat data to establish a baseline distribution of system property queries per application category (e.g., 'Social Media', 'Productivity'). Calculate the 95th and 99th percentile for the count of unique properties queried within the first 5 minutes of execution. Generate a high-severity alert for any application exceeding the 99th percentile and a medium-severity alert for any application exceeding the 95th percentile. 3. (Machine Learning) Develop a Random Forest classification model to predict 'evasive behavior'. Features must include: count of suspicious property queries, entropy of property names queried, time between install and first query, process name characteristics (e.g., length, randomness), and application publisher reputation. Correlate a high-confidence 'evasive' prediction with subsequent C2-like network traffic patterns identified in Zeek conn.log (e.g., regular beacons, small payloads to a low-reputation IP) to automatically escalate the incident priority."
          },
          {
            "description": "A newly installed application, within the first 60 seconds of its initial launch, requests permissions for and makes API calls to access three or more sensors indicative of human interaction (e.g., accelerometer, gyroscope, light sensor) or user data (e.g., READ_CONTACTS, READ_CALL_LOG). This activity is followed by either no network connections or a single, small (<1KB) network beacon within the next 5 minutes.",
            "data_sources": [
              "Android logcat",
              "MDM audit logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application analysis sandbox environment, MDM servers collecting permission and API usage logs, Endpoint Detection and Response (EDR) agents on mobile devices, SIEM for log correlation, Network egress points with Zeek sensors.",
            "action": "1. (Symbolic) Configure a SIEM rule to trigger an alert if MDM audit logs show a single application process requesting permissions for and subsequently accessing more than three 'human interaction' APIs (e.g., getSensorList, READ_CONTACTS, READ_CALL_LOG) within 60 seconds of first launch, AND this activity is correlated with Zeek conn.log data showing either no outbound connections or a single TCP/UDP connection with a payload size (orig_bytes) under 1024 bytes from the device in the following 5 minutes. 2. (Statistical) For each application category, establish a baseline of normal first-run API call sequences using MDM logs. Use a sequence analysis technique like Levenshtein distance to compare the API call sequence of a new application against the established baseline for its category. A high distance score, indicating an anomalous sequence, should generate an alert. Additionally, calculate the entropy of sensor data (e.g., accelerometer readings) collected by an app; an entropy value near zero suggests static, non-human data typical of an emulator. 3. (Machine Learning) Train a time-series anomaly detection model, such as an LSTM Autoencoder, on legitimate user sensor data streams (accelerometer, gyroscope) from a sample of corporate devices. Feed real-time sensor data accessed by new applications into the model. A high reconstruction error from the model indicates that the sensor data is not characteristic of normal human interaction, suggesting the application is running in an emulated environment."
          },
          {
            "description": "A single application process, within the first 5 minutes of execution post-installation, initiates DNS queries for three or more distinct public NTP domains (e.g., time.google.com, pool.ntp.org) or public IP geolocation service domains. This behavior is not preceded by or concurrent with significant user interaction with the application.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate DNS resolvers, Network egress points with Zeek sensors, MDM log aggregation servers.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that joins process start events from MDM audit logs with network logs. The rule must alert when a new process on a mobile device is associated with DNS queries (Zeek dns.log) for more than three distinct domains from a watchlist of public time and geolocation services within its first 5 minutes of life. 2. (Statistical) Using Zeek dns.log, calculate a 30-day rolling baseline for the number of unique time/geolocation domains queried per device. Using a 10-minute sliding time window, alert if the count of such domains for any single device exceeds 3 standard deviations above its own baseline. This detects abnormal time-checking behavior on a per-device basis. 3. (Machine Learning) Apply a DBSCAN clustering algorithm to network traffic data from mobile devices. Use features from Zeek dns.log and conn.log, such as: source IP, count of unique domains queried in a 5-minute window, entropy of queried domain names, JA3/JA3S hash, and total bytes transferred. Manually investigate clusters characterized by a high number of queries to diverse time/geo servers followed by low data transfer, as these are indicative of coordinated sandbox evasion attempts."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]