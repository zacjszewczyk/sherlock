[
  {
    "information_requirement": "Is an adversary collecting sensitive information from mobile device clipboards?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "An installed Android application, which is not registered as the default input method editor (IME) in its manifest, is observed making API calls to ClipboardManager.addPrimaryClipChangedListener.",
            "data_sources": [
              "Mobile Application Static Analysis Report",
              "Mobile Threat Defense (MTD) Logs",
              "Android Application Manifest (AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android devices, Corporate application vetting pipeline, Mobile Device Management (MDM) server",
            "action": "Symbolic: During automated application vetting, parse the AndroidManifest.xml file to check for <service> declarations with an <intent-filter> for 'android.view.inputmethod.InputMethod'. If this is absent, statically scan the application's DEX files for invocations of the 'android.content.ClipboardManager.addPrimaryClipChangedListener' method. An alert should be generated if a non-IME application contains this API call. Statistical: Using MTD logs, perform a query to count clipboard access events per application package name over the last 30 days. Group applications by their store category. For each category, calculate the mean (\u03bc) and standard deviation (\u03c3) of access counts. Flag any application where its access count > \u03bc + 3\u03c3 for its category. This identifies applications with anomalously high clipboard interaction compared to their peers. Machine Learning: Train a supervised classification model (e.g., Gradient Boosting, Random Forest) on a labeled dataset of benign and malicious APKs. Extract features during static analysis, including: the presence of 'addPrimaryClipChangedListener', the count of dangerous permissions requested in the manifest, string obfuscation metrics, and the presence of dynamic code loading APIs (e.g., 'DexClassLoader'). Use the trained model to assign a risk score to newly submitted applications during the vetting process."
          },
          {
            "description": "An iOS application is observed programmatically accessing UIPasteboard properties (e.g., UIPasteboard.general.string) multiple times within a one-second interval, or immediately upon an 'applicationWillEnterForeground' notification without corresponding user input.",
            "data_sources": [
              "Mobile Application Dynamic Analysis Report (Sandboxing)",
              "Mobile Device Management (MDM) Logs",
              "Mobile Threat Defense (MTD) Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS devices, Corporate application vetting pipeline, Sandboxed analysis environment",
            "action": "Symbolic: In a sandboxed environment, use instrumentation tools like Frida to hook the 'UIPasteboard' class and log all access to its 'string', 'items', and 'changeCount' properties. Alert on any application accessing the clipboard more than twice per second. Separately, search MDM/MTD logs for the literal string 'pasted from' to identify and inventory all cross-app paste events for manual review. Statistical: From dynamic analysis logs, calculate the time delta between the 'applicationWillEnterForeground' event and the first 'UIPasteboard' access. For each application, compute the median of these deltas over multiple sessions. Flag any application whose median delta is in the lowest 5th percentile (e.g., < 50ms), suggesting automated access. Additionally, calculate the entropy of inter-access timings; low entropy may indicate programmatic, periodic polling of the clipboard. Machine Learning: Model the sequence of API calls (including 'UIPasteboard' access) made by an application as a time series. Train an LSTM-based autoencoder on call sequences from a large corpus of vetted, benign applications. During dynamic analysis of a new app, if the reconstruction error of its API call sequence exceeds a predetermined threshold, flag it as anomalous, indicating a deviation from normal application behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary capturing credentials copied from password managers or other sensitive applications on mobile devices?",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "An application, which is not an approved password manager or web browser, is observed accessing the clipboard within five seconds of an approved password manager application being backgrounded.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Behavioral Logs",
              "Mobile Application Usage Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with corporate-approved password managers installed",
            "action": "Symbolic: Maintain a watch list of approved password manager bundle IDs (e.g., 'com.1password.1password'). In a SIEM, create a correlation rule that triggers when, for the same 'device_id', an 'app_backgrounded' event for a watched bundle ID is followed within 5 seconds by a 'clipboard_accessed' event from a different, non-whitelisted bundle ID. Statistical: For each clipboard access event by a non-browser/non-password-manager application, query backwards in time to find the most recent 'app_used' event for a known password manager on the same device. Calculate the time delta. Aggregate these deltas by application across the fleet. Any application whose median delta is in the bottom 10th percentile of all such calculated deltas should be investigated for credential scraping. Machine Learning: Create a labeled dataset of event sequences from MTD logs. Each sequence is a series of events ('app_focused', 'app_backgrounded', 'clipboard_accessed') tagged with 'device_id' and 'timestamp'. Label sequences as malicious if they match known credential scraping patterns. Train a sequence model (e.g., an RNN or Transformer) on these features to classify new, incoming event sequences in real-time."
          },
          {
            "description": "Within two minutes of accessing the clipboard, an application initiates a network connection to a domain with a high-entropy name or a destination IP address associated with known malicious infrastructure.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Logs",
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints, Corporate VPN concentrators, DNS resolvers, Network egress points",
            "action": "Symbolic: Join MTD logs (on 'device_id', 'bundle_id', 'timestamp') with network logs like Zeek conn.log (on 'src_ip', 'timestamp'). Create a rule that alerts when a 'bundle_id' from a clipboard access event makes a network connection within 2 minutes to a destination IP or domain found in a threat intelligence feed. The join key would be the device's IP address and a time window. Statistical: For each network connection made within 2 minutes of a clipboard access event, perform two checks. First, using Zeek dns.log, calculate the Shannon entropy of the requested domain; alert if entropy > 3.5. Second, using Zeek ssl.log, check the certificate's 'issuer' and 'validation_status'; alert on self-signed or invalid certificates. Also, run a daily query to identify domains contacted by fewer than 3 devices in 30 days (long-tail analysis) and cross-reference these with clipboard access events. Machine Learning: For all network flows originating from a device within 5 minutes of a clipboard access event, extract a feature vector from Zeek logs. Features should include: destination port, protocol, data volume sent ('orig_bytes'), JA3/JA3S hash, TLS version, domain name entropy, and a flag for DGA likelihood. Use an unsupervised clustering algorithm like DBSCAN to find small, distinct clusters of traffic that deviate from the large, central clusters of benign activity. These anomalous clusters represent potential exfiltration channels."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]