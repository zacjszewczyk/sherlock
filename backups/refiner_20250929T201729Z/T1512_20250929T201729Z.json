[
  {
    "information_requirement": "Is an adversary using a compromised mobile device's camera to collect video or images? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1512",
        "name": "Video Capture",
        "evidence": [
          {
            "description": "An application's manifest file requests `android.permission.CAMERA` (Android) or contains the `NSCameraUsageDescription` key (iOS), but its App Store category (e.g., 'Utilities', 'Finance') has a baseline rate of less than 5% of applications requesting this permission, or the application's developer is not on a corporate-approved software list.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "App vetting platform scan results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed corporate mobile devices, Corporate application store, Mobile Application Management (MAM) console",
            "action": "First (Symbolic Logic), query MDM inventory for any application with camera permissions whose package name or developer signature does not match an entry on the corporate 'allow list'. Generate a medium-severity alert for analyst review. Second (Statistical), using MDM inventory data, group all applications by their App Store category. For each category, calculate the proportion of applications that request camera permissions. Generate a low-severity alert for any application belonging to a category where camera permissions are present in less than a defined threshold (e.g., 5th percentile) of applications. Third (Machine Learning), train a random forest classifier using features from an app vetting platform: {permissions requested, app category, developer reputation score, number of downloads, user rating}. The model's target is a binary label ('benign'/'suspicious') derived from historical analysis. Score all new and updated applications; flag any app with a 'suspicious' prediction score above a calibrated threshold (e.g., 0.8) for sandboxed analysis."
          },
          {
            "description": "A mobile device's total outbound data volume over a 24-hour period, as recorded in `orig_bytes` of Zeek conn.log, exceeds the device's historical 99th percentile, and the destination IP address does not resolve to a domain on an 'allow list' of known cloud services or corporate assets.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate Wi-Fi, VPN concentrators, and cellular data gateways",
            "action": "First (Symbolic Logic), continuously monitor Zeek conn.log for connections originating from the mobile device IP range where the destination IP (`id.resp_h`) matches a threat intelligence feed of known C2 servers. Generate a high-severity alert if the connection's `orig_bytes` is greater than `resp_bytes` by a factor of 10 or more. Second (Statistical), for each mobile device IP, calculate a 30-day rolling baseline of total daily outbound bytes (`orig_bytes`). Generate a medium-severity alert if a device's total for a 24-hour period exceeds its 99th percentile. Enrich the alert by cross-referencing the destination IP in Zeek dns.log to check if the queried domain has high Shannon entropy (>3.5) or was registered within the last 60 days. Third (Machine Learning), apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to each device's hourly outbound byte count. An alert is triggered when a data point is identified as an anomaly. Concurrently, use a DBSCAN clustering algorithm on connection metadata {destination IP, destination port, protocol, `orig_bytes`} from all mobile devices. Investigate small, dense clusters that do not map to known services, as these may represent covert C2 channels used for exfiltration of captured media."
          },
          {
            "description": "Mobile EDR telemetry shows a process invoking camera-related API calls (e.g., Android's `android.hardware.camera2` or iOS's `AVCaptureDevice`) when the parent application's UI state is 'background' or 'inactive' for more than 60 seconds.",
            "data_sources": [
              "Mobile EDR logs",
              "OS-level API call logs",
              "Application lifecycle event logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value target mobile devices (e.g., executive leadership, system administrators) with EDR agents installed",
            "action": "First (Symbolic Logic), create a SIEM rule to trigger a high-severity alert when a Mobile EDR log shows a camera API call event immediately following an 'application entered background' event for the same process ID, unless the process name is on a pre-defined allow list (e.g., 'com.zoom.us', 'com.microsoft.teams'). Second (Statistical), for each application across the fleet, baseline the distribution of time deltas between a user interface interaction event (e.g., 'screen tap') and a subsequent camera API call. Generate a medium-severity alert if a camera API call occurs at a time delta that falls beyond the 99th percentile for that specific application, suggesting non-user-initiated camera activation. Third (Machine Learning), train a Hidden Markov Model (HMM) on sequences of API calls from known benign applications. The states of the HMM represent normal operational phases (e.g., 'Initializing', 'UI Interaction', 'Camera Active', 'Background Idle'). Generate a high-confidence alert if an observed sequence of API calls from an application has a low probability (e.g., <0.01) under the trained model, particularly if it involves a transition from 'Background Idle' directly to 'Camera Active'."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]