[
  {
    "information_requirement": "Is an adversary hiding malicious applications on our mobile devices by suppressing their icons? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1628.001",
        "name": "Suppress Application Icon",
        "evidence": [
          {
            "description": "A discrepancy is identified where an application's package name is present in a device's comprehensive application inventory but is missing from the list of applications configured with a LAUNCHER intent, indicating the application's icon is suppressed from the user interface.",
            "data_sources": [
              "MDM ApplicationInventory",
              "MobileEDR LauncherIntents",
              "ThreatIntel PackageNameFeeds",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-owned and BYOD mobile endpoints, MDM/MTD Management Servers, SIEM Platform, Network Gateway",
            "action": "1. Symbolic: Execute a scheduled query against the SIEM to perform a left-join from the MDM ApplicationInventory log source to the MobileEDR LauncherIntents log source on `device_id` and `package_name`. Trigger an alert for any `package_name` where the join is null and the application is not a known system app. Enrich alerts by cross-referencing the identified `package_name` against a threat intelligence feed of malicious mobile applications. 2. Statistical: For all applications identified as lacking a launcher intent, calculate the fleet-wide installation prevalence. Establish a prevalence baseline for legitimate non-launcher applications (e.g., system services, plugins). Flag any new non-system, non-launcher application whose installation count exceeds the 99th percentile of the established baseline, suggesting an anomalous and potentially malicious widespread deployment. 3. Machine Learning: Develop and deploy a logistic regression model to classify the risk of non-launcher applications. Engineer features including: count of high-risk permissions requested, installation source (e.g., official store vs. sideloaded), age of the application in the environment, and network behavior. To generate network features, correlate the `device_id` with Zeek conn.log data, calculating the entropy of destination IPs and the ratio of connections to low-reputation domains. An application with a predicted probability of being malicious greater than 0.8 is flagged for immediate review."
          },
          {
            "description": "A process event chain is observed on an Android 10+ device where the launcher application parent process spawns the system settings process ('com.android.settings') with command-line arguments pointing to a specific application's details page, indicating a synthesized launcher icon was tapped.",
            "data_sources": [
              "MobileEDR ProcessEvents",
              "Android Logcat ActivityManager",
              "HelpDesk Tickets"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoints (Android 10+), EDR/SIEM log aggregation platform, IT Help Desk System",
            "action": "1. Symbolic: Create a SIEM correlation rule that triggers when a MobileEDR ProcessEvents log shows `process_name` 'com.android.settings' being created by a `parent_process_name` matching a known launcher (e.g., 'com.google.android.apps.nexuslauncher', 'com.samsung.android.app.launcher') on the same `device_id` within a 1-second window. The rule must also validate that the `process_cmdline` contains arguments indicative of launching an app's details page, such as 'package:'. Escalate any matches. 2. Statistical: For each `package_name`, create a time series of the count of 'launcher -> settings page' redirection events per day. Calculate the 30-day moving average and standard deviation for this event count. Generate an alert whenever the daily count for a specific application exceeds its moving average by more than three standard deviations, indicating a statistically significant spike in this suspicious behavior. 3. Machine Learning: Implement a sequence analysis model, such as a Hidden Markov Model (HMM), using MobileEDR process and UI event logs as input. Train the model on sequences of user actions to learn normal application navigation pathways. The model should identify the low-probability state transition from a launcher directly to an application's settings details page as an anomaly. Score this sequence anomaly, and if the score surpasses a dynamically tuned threshold, create an alert for analyst investigation."
          },
          {
            "description": "A static analysis result from an APK file shows a call to the `PackageManager.setComponentEnabledSetting` method with the `COMPONENT_ENABLED_STATE_DISABLED` parameter, targeting a component defined in the AndroidManifest.xml with both `android.intent.action.MAIN` and `android.intent.category.LAUNCHER` intents.",
            "data_sources": [
              "APK File Hashes",
              "Static Analysis Sandbox Reports",
              "Mobile App Reputation Service Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organizational application stores, Application vetting sandboxes, Developer CI/CD pipelines",
            "action": "1. Symbolic: Integrate a YARA rule into the application vetting pipeline that scans submitted APK files. The rule must identify the presence of the string `setComponentEnabledSetting` in close proximity to the constant value for `COMPONENT_ENABLED_STATE_DISABLED` (value: 2). If a match is found, the analysis engine should then parse the manifest to confirm the targeted component has a LAUNCHER intent. A confirmed match automatically flags the application as high-risk. 2. Statistical: For each new APK, extract a feature vector containing all API calls and manifest permissions. Calculate the Jaccard distance between the new APK's feature set and the feature set of a baseline corpus of known-benign, approved applications. Separately, calculate the Shannon entropy of the APK's classes.dex file. An application is flagged as anomalous if it contains icon-hiding APIs, has a Jaccard distance in the top 5th percentile (highly dissimilar), and a code entropy in the top 5th percentile (highly obfuscated). 3. Machine Learning: Train a gradient boosting classifier (e.g., XGBoost) using features extracted from a labeled dataset of benign and malicious APKs. Features must include: presence of icon-hiding API calls, count of dangerous permissions, presence of known exploit kits, embedded URLs/IPs and their reputation, manifest component counts, and code entropy. Deploy this model in the application vetting sandbox to generate a malice score for each new APK. Automatically reject any application with a score above 0.9 and quarantine any app with a score between 0.7 and 0.9 for manual review."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]