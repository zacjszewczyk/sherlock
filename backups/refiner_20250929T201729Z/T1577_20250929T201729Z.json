[
  {
    "information_requirement": "Has an adversary established persistence by modifying a legitimate application executable on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1577",
        "name": "Compromise Application Executable",
        "evidence": [
          {
            "description": "The SHA-256 hash of an installed application package on a mobile device, as reported by an MDM or EDR agent, does not match the known-good hash value stored in an authoritative organizational application manifest for that specific application and version. A mismatch is a direct indicator of unauthorized modification, such as rebuilding an application with malicious code [2].",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Scan Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (iOS, Android), Mobile Device Management (MDM) / Unified Endpoint Management (UEM) server, Organizational application manifest repository",
            "action": "1. (Symbolic) Implement a recurring SIEM rule that joins MDM/EDR application inventory logs with the application manifest on the application identifier and version. Alert on any record where the collected_hash does not equal the manifest_hash. 2. (Statistical) For each unique application, aggregate version data across the fleet. Calculate the prevalence of each version. Flag any device reporting an app version with a prevalence below a defined threshold (e.g., installed on <0.5% of devices or <5 devices), as this may indicate a non-standard or maliciously patched version. 3. (Machine Learning) Develop an Isolation Forest model using a feature vector representing the set of installed applications (e.g., a binary vector of app IDs) for each device. Train the model on the entire managed device fleet to learn 'normal' device application profiles. A device with a low anomaly score, indicating it is an outlier, should be flagged for investigation of unauthorized or modified software."
          },
          {
            "description": "Static analysis of an Android Application Package (APK) reveals a file structure where data exists after the APK's central directory but before the DEX section. This is a specific artifact of the Janus vulnerability (CVE-2017-13156), which allows malicious code injection without invalidating the v1 signature scheme [1].",
            "data_sources": [
              "Mobile EDR File Scans",
              "Forensic device image",
              "Mobile App Vetting (MAV) scanner results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android device fleet, Application sandbox environment, Mobile security analysis platforms",
            "action": "1. (Symbolic) In a Mobile App Vetting (MAV) or sandboxing platform, implement a static analysis rule that scans submitted APKs for the Janus vulnerability signature (i.e., data present in both the APK and DEX headers). Generate a high-severity alert upon detection. 2. (Statistical) During static analysis, extract the 'filesize' from the APK's central directory metadata and the actual 'on-disk-filesize'. Calculate the delta: size_diff = on-disk-filesize - filesize. For a large population of APKs, establish a baseline distribution for this delta. Alert on any APK where size_diff is a statistical outlier (e.g., > 3 standard deviations from the mean or > 99th percentile), indicating potentially injected data. 3. (Machine Learning) Train a gradient boosting classifier (e.g., XGBoost) on features extracted from APK file structures, including header flags, section counts, section entropy, and file size discrepancies. Use a labeled dataset of known-benign, Janus-exploited, and other malicious APKs. Deploy the model in the MAV pipeline to score new applications for their likelihood of being compromised."
          },
          {
            "description": "Network traffic from a managed mobile device, attributed to a specific whitelisted application, exhibits characteristics that deviate from an established baseline, such as connections to known malicious domains, high-entropy DNS queries, or statistically unusual data transfer volumes.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN egress points, DNS resolvers, Cloud Access Security Broker (CASB) logs",
            "action": "1. (Symbolic) Create a SIEM correlation rule that enriches Zeek conn.log with mobile device identity from DHCP or VPN logs. The rule should join the destination IP/domain against a threat intelligence feed of known C2 servers. Alert immediately if a connection from an application on a managed mobile device matches a malicious indicator. 2. (Statistical) For each application, create a 30-day rolling baseline of network behavior using Zeek logs. A) For conn.log, calculate the 95th percentile of orig_bytes and resp_bytes per connection and per day. Alert if an app exceeds this threshold. B) For dns.log, calculate the Shannon entropy of the queried domain ('query' field). Alert if the entropy score for a query is significantly higher than the app's historical average, suggesting potential DGA activity. 3. (Machine Learning) For each device-application pair, ingest time-series data from Zeek logs (e.g., bytes transferred per hour, connections per hour, unique domains queried per hour). Train an LSTM Autoencoder on this data to learn the normal 'rhythm' of network activity. In production, feed live data into the model and alert when the reconstruction error exceeds a dynamically set threshold, indicating a significant deviation from the learned normal behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]