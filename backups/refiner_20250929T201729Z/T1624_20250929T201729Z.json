[
  {
    "information_requirement": "Is an adversary maintaining persistence on our mobile devices through event-triggered execution? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "An installed application's AndroidManifest.xml contains broadcast receivers for sensitive system events (e.g., 'android.intent.action.BOOT_COMPLETED', 'android.provider.Telephony.SMS_RECEIVED') combined with high-risk permissions (e.g., 'android.permission.RECEIVE_SMS', 'android.permission.INTERNET') that are inconsistent with the application's documented functionality.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Android Application Manifests (AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Mobile Device Management (MDM) server, Application vetting/sandbox environment",
            "action": "1. (Symbolic) Using MDM data, query for all applications that register broadcast receivers for `android.intent.action.BOOT_COMPLETED`, `android.provider.Telephony.SMS_RECEIVED`, or `android.intent.action.NEW_OUTGOING_CALL` AND also request permissions such as `android.permission.RECEIVE_SMS`, `android.permission.READ_CALL_LOG`, or `android.permission.SYSTEM_ALERT_WINDOW`. Compare the package names and signing certificates of matching applications against a threat intelligence deny-list. 2. (Statistical) For each application, parse its manifest to create a feature vector of its requested permissions and registered broadcast receivers. For each application category (e.g., 'Productivity', 'Games'), calculate a baseline for the number and type of permissions/receivers. Calculate a rarity score for each permission/receiver pair based on its frequency across the entire mobile fleet. Flag applications where the cumulative rarity score exceeds the 98th percentile for their category. 3. (Machine Learning) Train a Random Forest or Gradient Boosting classifier on a labeled dataset of application manifests (features include one-hot encoded permissions, receivers, intents, and metadata like SDK version). Use the model to predict a 'malice score' for new or updated applications. Investigate applications with a score above a set threshold (e.g., 0.85), and use SHAP (SHapley Additive exPlanations) values to identify which features (permissions/receivers) contributed most to the high score."
          },
          {
            "description": "A mobile device exhibits a burst of anomalous network activity, characterized by a sudden increase in connections, data volume, or high-entropy DNS queries, within 1-5 minutes following a system event log from an MDM (e.g., 'device boot', 'network connection change', 'application installed').",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM Event Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, Internal and external DNS resolvers",
            "action": "1. (Symbolic) Join MDM event logs with network logs (Zeek conn.log, dns.log) on device IP and timestamp. For each MDM event (e.g., `event_type='boot_complete'`), filter for network activity from the device's IP within the subsequent 5-minute window. Scan all destination IPs and domains against a threat intelligence feed of known C2 infrastructure. Alert on any match. 2. (Statistical) For each device, establish a 30-day rolling baseline of network metrics (e.g., connection count, bytes_out, unique domains queried) for the 5-minute window following common system events (boot, wifi_connect). Use a Z-score or modified Z-score to detect anomalies. Alert if any metric exceeds a threshold of 3.5 standard deviations from its baseline. Additionally, calculate the Shannon entropy of the queried subdomains in `dns.log` during this window; alert if the entropy score is anomalously high, suggesting DGA. 3. (Machine Learning) For each device, create a time series of feature vectors representing network activity in the 5-minute post-event window. Train a time series anomaly detection model, such as an LSTM-based autoencoder, on this data. The model learns the device's normal post-event 'network signature'. A high reconstruction error on new data points indicates a significant deviation from the learned normal pattern, triggering an alert for analyst investigation."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]