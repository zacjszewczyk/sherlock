[
  {
    "information_requirement": "Is an adversary collecting and archiving sensitive data on corporate mobile devices prior to exfiltration? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1532",
        "name": "Archive Collected Data",
        "evidence": [
          {
            "description": "A file is created on a mobile device with an archive extension (.zip, .rar, .7z, .tar.gz) that either has a file size in the top 5% (95th percentile) for that device, or is created in a directory with high path entropy, inconsistent with standard locations like 'Downloads' or application-specific directories.",
            "data_sources": [
              "MTD File Creation Events",
              "MDM File Inventory Logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation.",
            "action": "First, use symbolic logic: Continuously query MTD file creation events for filenames matching archive extensions (`*.zip`, `*.rar`, `*.7z`, `*.tar.gz`). Cross-reference the creating process against a threat intelligence watchlist of known malicious mobile application package names. Second, apply a statistical method: For each device, establish a 30-day rolling baseline of all created file sizes and directory path entropy scores. Generate an alert if a newly created archive file's size exceeds the 95th percentile of the size baseline, or if its directory path entropy score is 2 standard deviations above the mean for that device. Third, apply a machine learning approach: Develop a classification model (e.g., Random Forest) to predict malicious staging. Use features including: `file_size_percentile`, `directory_path_entropy_score`, `process_name`, `time_of_day`, and `subsequent_outbound_bytes` (from Zeek conn.log within 5 minutes of file creation). A high probability score from the model indicates likely malicious data collection."
          },
          {
            "description": "A process on a mobile device, running while the device screen is off, sustains CPU utilization above 75% and disk write I/O greater than the 98th percentile of normal background activity for over 60 seconds. This behavior is not associated with a whitelisted backup, update, or system process.",
            "data_sources": [
              "MTD Performance Logs",
              "MDM Device Health Metrics"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile device OS kernel, specifically process, CPU, and disk I/O schedulers, with metrics collected by MDM/MTD agents.",
            "action": "First, use symbolic logic: For any process exhibiting high resource consumption, compare its package name and signing certificate against an allowlist of legitimate system/backup applications and a denylist of known malware. Alert on any match to the denylist or any process not on the allowlist. Second, apply statistical methods: For each device and application, create separate baselines for CPU and disk I/O during 'screen on' and 'screen off' states. Use a 60-second moving average for these metrics. Generate an alert if the moving average during a 'screen off' state exceeds 3 standard deviations above the mean for that application's baseline. Third, employ a machine learning model: Employ a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on multi-variate data streams (`cpu_utilization`, `disk_write_io`, `network_tx_bytes`, `screen_status`). An anomaly is flagged when the model's reconstruction error for a given time window surpasses a dynamically calculated threshold, indicating a behavioral pattern inconsistent with the device's learned history."
          },
          {
            "description": "An application invokes compression (`java.util.zip`, `Compression.framework`) or encryption (`javax.crypto`, `CommonCrypto`) APIs, and this same application does not belong to a functional category (e.g., File Manager, Cloud Storage, Secure Messenger) where this is expected behavior, and has also been granted access to sensitive data scopes (e.g., Contacts, Photos, Microphone).",
            "data_sources": [
              "MTD API Call Monitoring Logs",
              "Application Sandboxing Logs",
              "MDM Application Inventory and Permissions Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Instrumentation points within the mobile OS that hook into API calls made by user-installed applications, specifically monitoring calls to system libraries for compression and cryptography.",
            "action": "First, implement symbolic logic: Maintain an allowlist of application package names, grouped by category, that are permitted to call compression/encryption APIs (e.g., `com.dropbox.android`, `net.zipper.app`). Alert on any API call from an application not on this list, especially if it has high-risk permissions. Second, use a statistical approach: For each application, baseline the daily frequency and sequence of calls to sensitive APIs. Calculate the Shannon entropy of the API call sequence over a 1-hour window. Alert if an application's call frequency to crypto/compression APIs exceeds its 99th percentile or if the API sequence entropy significantly deviates from its norm. Third, apply a machine learning classifier: Train a classifier (e.g., Gradient Boosting) to score the risk of an observed API call. Features should include `app_category` (from app store), `app_permissions_granted`, `api_function_called`, `is_foreground_app`, and `app_reputation_score`. A high-risk score indicates a likely malicious use of the API."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]