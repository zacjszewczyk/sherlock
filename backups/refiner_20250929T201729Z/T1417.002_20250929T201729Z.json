[
  {
    "information_requirement": "Is an adversary attempting to steal credentials on corporate mobile devices via GUI impersonation? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application installed on a managed mobile device possesses the 'android.permission.SYSTEM_ALERT_WINDOW' permission in its application manifest and is not present on an enterprise-maintained application allowlist.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile EDR Agent Application Logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Configuration Database, Mobile EDR Data Lake, and Application Inventory Store",
            "action": "1. (Symbolic) Create a detection rule in your MDM or SIEM platform that triggers when an installed application's manifest contains 'android.permission.SYSTEM_ALERT_WINDOW' AND its package name or signing certificate matches a known-bad indicator in a mobile threat intelligence feed. An exact match generates a high-severity alert. 2. (Statistical) Periodically query the MDM application inventory to list all applications with the 'SYSTEM_ALERT_WINDOW' permission. For each, calculate its installation prevalence (% of devices it is installed on). Flag any application with a prevalence in the bottom 5th percentile that is not on the corporate allowlist for investigation as a potentially suspicious rare application. 3. (Machine Learning) For each new application installation that requests the 'SYSTEM_ALERT_WINDOW' permission, extract features from its manifest (e.g., all requested permissions, exported activities, broadcast receivers). Input these features into a pre-trained Random Forest classification model. If the model returns a risk score greater than 0.85, automatically generate an investigation ticket."
          },
          {
            "description": "A newly installed application's display name has a Levenshtein distance less than 3 from a known high-value application (e.g., 'Okta Verify'), while its package name and developer signing certificate do not match the legitimate application's registered values.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "App Vetting Service Report"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Application Inventory Database and the organization's repository of vetted/approved application metadata (package names, signatures).",
            "action": "1. (Symbolic) Maintain a dictionary of high-value app names mapped to their official package names and signing certificates. Create a SIEM rule that triggers on new app installations and checks if the new app's display name is a near-match to a name in the dictionary BUT its package name or certificate is a mismatch. A positive match generates a high-severity alert for credential phishing. 2. (Statistical) On a scheduled basis, query the MDM inventory. For each application, calculate the Jaro-Winkler similarity of its display name against a curated list of commonly targeted corporate and financial app names. Flag any application with a similarity score > 0.90 that has a different package name for manual review. Track the count of such flagged apps over time to identify potential campaigns. 3. (Machine Learning) Apply an unsupervised clustering algorithm (e.g., DBSCAN) to the feature space of all installed applications, using features like character n-grams from the app name, package name, and developer name. Manually investigate clusters that do not contain known-good, allowlisted applications, as these may represent families of malicious apps using similar naming conventions for typosquatting."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to collect sensitive data from users on corporate mobile devices using deceptive GUI overlays? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A temporal correlation is observed within a 5-second window where: 1) a sensitive application is in the foreground, 2) a non-allowlisted application with overlay permissions becomes the foreground process, and 3) a network connection is initiated from the device to a destination with a low reputation or high rarity score.",
            "data_sources": [
              "Mobile EDR Agent Logs (Foreground App Events)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR agent data lake, Corporate VPN concentrators, Network Security Monitoring sensors (e.g., Zeek cluster at internet gateway), and Threat Intelligence Platform API",
            "action": "1. (Symbolic) Create a SIEM correlation rule joining Mobile EDR logs with network logs on device ID and timestamp. Trigger if: (Event A) EDR log shows a sensitive app (e.g., package name matches 'com.financial.app') in foreground, followed within 5 seconds by (Event B) an EDR log showing a non-allowlisted app with overlay permissions in foreground, followed within 60 seconds by (Event C) a Zeek conn.log entry for a connection to an IP address listed in a threat intelligence feed. 2. (Statistical) From Mobile EDR logs, identify rare application transition sequences (e.g., transition probability < 0.01) where the second app has overlay permissions and the first is sensitive. For the device and timeframe of such a transition, analyze Zeek dns.log data. Calculate the entropy of requested FQDNs in 1-minute windows. A spike in entropy > 3 standard deviations above the device's baseline, or a request to a domain in the 99.9th percentile of rarity across the enterprise, should be flagged. 3. (Machine Learning) Deploy a trained LSTM autoencoder model that processes time-series data of network features (e.g., bytes out, connection frequency) for each mobile device. When a high-risk application transition is detected, query the LSTM model for that device's reconstruction error at the event's timestamp. A reconstruction error significantly higher than the device's normal baseline indicates the network activity is anomalous and warrants a high-priority alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]