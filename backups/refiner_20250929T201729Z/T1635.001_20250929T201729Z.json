[
  {
    "information_requirement": "Is an adversary attempting to intercept credentials or access tokens by hijacking URI schemes on mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1635.001",
        "name": "URI Hijacking",
        "evidence": [
          {
            "description": "A duplicate URI scheme registration is detected where an application with a low reputation score registers a URI scheme already associated with a known, high-trust application. A low reputation is defined by factors such as: not being present in official app stores, having a developer signature that is not on an allowlist, or a threat intelligence score below a defined threshold (e.g., < 30/100).",
            "data_sources": [
              "MDM/UEM Application Inventory Logs",
              "MTD Agent Application Scan Logs",
              "Threat Intelligence Platform Reputation Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile endpoints (iOS, Android), Mobile Device Management (MDM) Platform, Mobile Threat Defense (MTD) Console, Application Vetting and Signing Infrastructure",
            "action": "1. (Symbolic Logic - URI Collision): Ingest application inventory logs from MDM/UEM. Create and maintain an allowlist table `known_apps` with columns `(app_name, package_id, uri_scheme)`. Periodically execute a query to find collisions: `SELECT new.package_id, new.uri_scheme FROM app_inventory new JOIN known_apps known ON new.uri_scheme = known.uri_scheme WHERE new.package_id != known.package_id`. Alert on any returned results. 2. (Statistical - Package Entropy): For each distinct `uri_scheme` in the application inventory, calculate the Shannon entropy of the associated `package_id`s. Establish a baseline entropy score for high-value URI schemes (e.g., 'corp-sso://'). Alert if the entropy for a high-value scheme increases by more than 50% in a 24-hour period, which suggests a new, potentially malicious package has registered the scheme across multiple devices. 3. (Machine Learning - Risk Classification): Train a Random Forest classifier using features from MDM/MTD and threat intel: `is_sideloaded` (boolean), `developer_signature_trust` (enum: trusted, untrusted, unknown), `permissions_count` (integer), `app_age_days` (integer), `uri_collision` (boolean), `threat_intel_score` (numeric). The model outputs a risk score (0.0-1.0) for each new app installation. Trigger a high-severity alert for scores > 0.9 and a medium-severity alert for scores between 0.7-0.9 for analyst review."
          },
          {
            "description": "A single user device reports more than a threshold number (e.g., >3) of 'application chooser' dialog events for the same sensitive URI scheme (e.g., 'msauth://', 'okta://') within a short time window (e.g., 5 minutes), as logged by an MTD agent. This indicates multiple applications are concurrently attempting to handle the same authentication redirect.",
            "data_sources": [
              "MTD Agent Security Event Logs",
              "Android Logcat Logs",
              "iOS Console Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile endpoints (iOS, Android), Mobile Threat Defense (MTD) Platform",
            "action": "1. (Symbolic Logic - High-Frequency Chooser): Create a SIEM rule that monitors MTD event logs for an event ID corresponding to 'chooser dialog'. Maintain a watchlist of sensitive URI schemes. Trigger an alert if the same `user_id` and `device_id` generate more than 3 chooser dialog events for a URI on the watchlist within a 5-minute window. 2. (Statistical - User Baseline Anomaly): For each user, calculate a 30-day rolling average and standard deviation of daily 'chooser dialog' events. Trigger an alert if a user's daily count exceeds their personal baseline by 3 standard deviations. This detects abnormal user-specific activity that might not be fleet-wide. 3. (Machine Learning - Fleet-wide Anomaly Detection): Apply a time-series anomaly detection model (e.g., Prophet, LSTM) to the aggregated, fleet-wide count of 'chooser dialog' events, binned per hour. The model should account for weekly and daily seasonality. An alert is triggered when the observed count significantly deviates from the model's predicted forecast interval, especially if the anomaly correlates with a new application push or a known phishing campaign."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]