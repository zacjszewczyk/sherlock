[
  {
    "information_requirement": "Is an adversary collecting calendar entries from managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.001",
        "name": "Calendar Entries",
        "evidence": [
          {
            "description": "An application with calendar access permissions (`android.permission.READ_CALENDAR` or `NSCalendarsUsageDescription`) is observed sending data to a network destination matching threat intelligence, or exfiltrates a volume of data that is a statistical outlier (e.g., >95th percentile) compared to its historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile Device Management (MDM) Application Inventory",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network gateways, VPN concentrators, DNS resolvers, and MDM/UEM platforms monitoring mobile device traffic and application installations.",
            "action": "1. (Context) From MDM/UEM inventory, create and maintain a list of devices and applications with calendar access permissions. Correlate devices with network traffic using IP assignments from VPN or wireless logs. 2. (Symbolic) For all network connections (Zeek conn.log) from these devices, join with threat intelligence feeds. Generate a high-severity alert on any connection where the destination IP or FQDN matches a known malicious C2 or exfiltration node. 3. (Statistical) For each unique application-device pair, establish a baseline of total bytes transferred (`orig_bytes` + `resp_bytes`) per connection. Alert when a new connection's data volume exceeds the 99th percentile of this historical baseline. Concurrently, calculate the Shannon entropy of requested subdomains in Zeek dns.log; an entropy score greater than 3.5 combined with a high-volume data transfer to that domain should be flagged as suspicious DGA-based exfiltration. 4. (Machine Learning) Apply a pre-trained time-series anomaly detection model (e.g., an LSTM autoencoder) to each device's total outbound data volume, aggregated per hour. An alert is triggered if the model's reconstruction error for a given hour exceeds a dynamic threshold, indicating a significant deviation from the learned pattern of normal user activity."
          },
          {
            "description": "An application requests calendar permissions and meets multiple risk criteria, such as: its functional category (e.g., 'Games') does not justify calendar access, it has a low installation prevalence across the organization (e.g., installed on <2% of devices), and it is not on an approved application allowlist.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Threat Defense (MTD) Scan Results",
              "Public App Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Mobile Threat Defense (MTD) platform, and public application stores (e.g., Google Play, Apple App Store).",
            "action": "1. (Context) Continuously ingest application inventory data (including bundle IDs, versions, and permissions) from the MDM/MTD platform for all managed devices. Maintain an application allowlist for business-approved software. 2. (Symbolic) Compare the bundle ID of each newly installed application requesting calendar access against the internal allowlist and a denylist of known malware. Generate a high-severity alert for any app on the denylist or any app that is not on the allowlist and requires manual approval. 3. (Statistical) For each app with calendar permissions not on the allowlist, retrieve its public App Store category. Assign a risk score to apps in unexpected categories (e.g., Games, Utilities). Calculate the installation prevalence of each risky app across the device fleet. Prioritize apps for manual review that have both a high-risk score and a low prevalence. 4. (Machine Learning) Utilize a trained classification model (e.g., Random Forest) to generate a 'suspicion score' for each application requesting calendar access. Model features should include: app category, developer reputation, total number of other permissions requested, user ratings, and enterprise installation prevalence. Rank applications by this score to prioritize the queue for security vetting."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]