[
  {
    "information_requirement": "Is an adversary attempting to elevate privileges on mobile devices via process injection? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "The loading of an unsigned or unexpected dynamic library (.so on Android, .dylib on iOS) by a running process, or the use of specific memory/process manipulation APIs such as `ptrace` on Android or `mach_vm_write` on iOS, detected in EDR or OS-level logs.",
            "data_sources": [
              "Android logcat",
              "iOS Unified Logs",
              "MDM/EDR Process Activity Logs",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Endpoint Detection and Response (EDR) agents on managed mobile devices, Network sensors monitoring corporate Wi-Fi and VPN traffic, DNS resolvers serving mobile clients.",
            "action": "1. (Symbolic Logic) Query EDR logs for any process execution events on mobile devices involving calls to `ptrace`, `dlopen`, or `mach_vm_write`. Filter this list to processes that are not on an approved list for development or debugging activities. For any matching event, correlate the device's IP address and timestamp with network logs (Zeek conn.log, Zeek dns.log) within a +/- 5 minute window. Alert if the device communicated with an IP or domain on a threat intelligence blocklist or if the loaded library name matches a known malicious signature. 2. (Statistical) For each application package name, create a baseline set of all legitimate dynamic libraries loaded across all devices over a 30-day period. For each new library load event from EDR logs, calculate its prevalence (rarity) across the enterprise fleet. A library seen on <1% of devices running the app is considered rare. Separately, ingest Zeek dns.log and calculate the Shannon entropy for the FQDN of each DNS request, using the formula $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$. An event where a rare library is loaded and the device makes a DNS query with an entropy score in the 99th percentile (or > 4.0) within a 2-minute window generates a high-priority alert. 3. (Machine Learning) Using historical EDR data, create sequences of system calls (e.g., 100 calls per sequence) for each high-risk application (e.g., browsers, messaging apps). Train an LSTM autoencoder model on these sequences to learn normal execution patterns. In production, feed live system call sequences from EDR logs into the trained model. If the model's reconstruction error for a given sequence exceeds a dynamically determined threshold (e.g., the 99.9th percentile of reconstruction errors from the validation set), flag the sequence as anomalous. Correlate this anomaly with any outbound network connections to newly observed IPs (from Zeek conn.log) to prioritize the alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using process injection to hide malicious code within legitimate mobile application processes? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A trusted mobile application process exhibits a sustained, statistically significant anomaly in resource consumption (CPU, memory > 3 standard deviations from baseline) concurrent with network traffic to destinations not previously associated with the application's normal function.",
            "data_sources": [
              "MDM Performance Logs (CPU/Memory)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM console providing performance telemetry, Network egress points capturing traffic from corporate Wi-Fi and VPNs, Devices assigned to users with access to sensitive corporate data (e.g., executives, system administrators, R&D personnel).",
            "action": "1. (Symbolic Logic) Join EDR process telemetry with network logs (Zeek) on device IP and timestamp. Create a detection rule to alert when a process name matching a common trusted application (e.g., `com.android.chrome`, `com.apple.mobilesafari`) initiates a connection where the destination IP, domain, or JA3/JA3S hash is present on a threat intelligence feed. As a secondary check, extract the User-Agent from Zeek http.log and alert if it does not match the known User-Agent string for that application and OS version. 2. (Statistical) For each unique device-application pair, calculate the 30-day rolling 95th percentile for CPU and memory usage from MDM performance logs. Generate an alert if both metrics exceed this percentile for a continuous 10-minute window. For the same time window, query Zeek conn.log for all connections made by the device and calculate the ratio of `orig_bytes` to `resp_bytes`. If this ratio exceeds the 99th percentile of its historical distribution for that device, and the resource usage is high, escalate the alert priority. 3. (Machine Learning) From Zeek conn.log, create feature vectors for each network connection originating from mobile devices. Features should include: destination port, protocol, duration, `orig_bytes`, `resp_bytes`, and a categorical representation of the destination IP's ASN. Train a DBSCAN clustering model on historical data to identify clusters of 'normal' traffic patterns for each application. In real-time, score new connections against the model. Any connection classified as an outlier (noise point) by DBSCAN should be flagged. If an outlier connection occurs during a period of anomalous CPU/memory usage (from the statistical method), generate a high-severity alert for immediate analysis."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]