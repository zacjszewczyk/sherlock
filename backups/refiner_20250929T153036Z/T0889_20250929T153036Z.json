[
  {
    "information_requirement": "Has an unauthorized program modification been made to a critical ICS controller to establish persistence?",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0889",
        "name": "Modify Program",
        "evidence": [
          {
            "description": "Observation of specific ICS protocol function codes (e.g., S7COMM 'Program Download' (function code 0x1B), Modbus 'Write Multiple Registers' (function code 0x10), EtherNet/IP 'Write Tag' (service code 0x4C)) in network traffic logs, indicating a program modification command directed at an ICS controller. This evidence is particularly significant if the source IP address is not an authorized Engineering Workstation (EWS) or if the activity occurs outside of predefined operational windows for program changes.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Windows Event ID 4634"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network Segment (Level 2/3), Engineering Workstations (Level 3), Critical PLC/Controller Network Interfaces (Level 1/2), Network Intrusion Detection Systems (NIDS) in the DMZ and Process Control Network",
            "action": "1. Symbolic Logic: Monitor Zeek ICS protocol logs (e.g., s7comm.log for 'program_download' or function code 0x1B, modbus.log for 'write_multiple_registers' or function code 0x10, enip.log for 'write_tag' or service code 0x4C) for commands targeting ICS controllers. Join these network events with Windows Event ID 4688 on Engineering Workstations (EWSs) to verify that an authorized programming software (e.g., TIA_Portal.exe, Studio5000.exe) was executed from an authorized user session within 5 minutes prior to the network command. Generate a high-priority alert if a program modification command is observed originating from an IP address not on the authorized EWS allowlist, or if no corresponding programming software execution event is found on the source EWS.\n2. Statistical Method: Establish a rolling 60-day baseline for each authorized EWS-to-PLC pair, tracking the daily count of program modification commands and the typical hours of occurrence using Zeek ICS protocol logs. Calculate the mean and standard deviation for the daily command count and the inter-event arrival time for these commands. Trigger an alert if the daily count of program modification commands for an EWS-to-PLC pair exceeds the 99th percentile of its historical count, or if commands are observed during periods outside the 99th percentile of typical operational hours (e.g., 2 AM on a Sunday), indicating statistically anomalous activity.\n3. Machine Learning: Implement a time-series anomaly detection model (e.g., Isolation Forest, Prophet, or an autoencoder) on the aggregated hourly counts of program modification commands per ICS controller, derived from Zeek ICS logs (s7comm.log, modbus.log, enip.log). Train the model on at least 90 days of historical benign activity. Generate an alert when the model detects a significant deviation from the learned normal pattern, such as a sudden surge in command volume or an unusual distribution of command types (e.g., a high number of 'online edits' when typically only 'program downloads' occur), indicating a potential unauthorized program modification attempt."
          },
          {
            "description": "Observation of ICS network protocol commands (e.g., S7COMM CPU Control, Modbus Write Coil/Register, EtherNet/IP Set Attribute Single) instructing a critical ICS controller to transition its operational mode from 'RUN' to a program modification-enabling state such as 'PROGRAM', 'STOP', or 'REMOTE'. This evidence is particularly indicative of unauthorized activity if the command originates from an IP address not on the authorized Engineering Workstation (EWS) allowlist, or if no corresponding change management ticket is open for the target controller at the time of the event.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical PLC/Controller Network Interfaces (Level 1/2), Process Control Network Segment (Level 2/3), Demilitarized Zone (DMZ) Network Segment (for remote access points)",
            "action": "1. Symbolic Logic: Monitor Zeek ICS protocol logs (e.g., s7comm.log for 'cpu_control' function with 'stop' or 'program' states, modbus.log for 'write_coil' or 'write_register' commands affecting mode, enip.log for 'set_attribute_single' service code targeting operational mode attributes) for commands attempting to change a critical controller's mode from 'RUN' to 'PROGRAM', 'STOP', or 'REMOTE'. Generate a high-priority alert if the source IP address of the command is not present in the authorized EWS IP allowlist, or if the destination controller is explicitly designated as a critical PLC and the command occurs outside of a pre-approved maintenance window.\n2. Statistical Method: For each critical controller, establish a rolling 90-day baseline for the daily count of mode changes from 'RUN' to 'PROGRAM'/'STOP'/'REMOTE' and the total duration spent in these non-'RUN' modes, using Zeek ICS protocol logs. Calculate the mean and standard deviation for both metrics. Trigger an alert if the current day's total duration in non-'RUN' modes or the count of mode changes exceeds the 99th percentile of its historical baseline, indicating an unusual operational state or frequency of changes for that controller.\n3. Machine Learning: Develop a sequence anomaly detection model (e.g., using Hidden Markov Models or a Recurrent Neural Network with LSTM layers) trained on historical Zeek ICS logs to learn typical sequences of PLC mode changes and subsequent actions (e.g., 'RUN' -> 'PROGRAM' -> 'Program Download' -> 'RUN'). The model should capture the timing and order of events. Detect and flag deviations from these learned benign sequences, such as an unexpected mode change to 'PROGRAM' followed by a command from an unauthorized source, or a mode change without the expected subsequent program modification command, indicating a potential malicious sequence of operations."
          },
          {
            "description": "Detection of a significant deviation (e.g., change in hash value, file size, or timestamp) between the current program logic, firmware, or configuration files residing on an ICS controller or its associated project files on an Engineering Workstation (EWS) and their last known authorized 'golden image' or baseline. This discrepancy can be reported by an ICS integrity monitoring system, identified through direct file system analysis, or observed via network file transfer logs.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 1",
              "Specific ICS Integrity Monitoring System logs (e.g., X-Guard, Verve, Dragos Platform logs)",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Integrity Monitoring Servers (Level 3.5), Engineering Workstations (Level 3), Critical PLC/Controller File Systems (Level 1/2 - if accessible for direct monitoring), Central Log Management System",
            "action": "1. Symbolic Logic: Configure SIEM alerts to trigger on specific log messages from ICS integrity monitoring systems (e.g., 'Program Hash Mismatch', 'Controller Logic Deviation', 'Firmware Checksum Failure') that indicate a deviation from the established 'golden hash' or baseline for critical PLC programs, firmware, or configuration files. Additionally, monitor Sysmon Event ID 1 (File Creation/Modification/Deletion) on Engineering Workstations for changes to ICS project files (e.g., .ACD, .S7P, .L5X) that are not correlated with an active change management ticket. Correlate file hashes from Zeek files.log for transferred project files against known malicious hashes from a threat intelligence feed.\n2. Statistical Method: Establish a rolling 90-day baseline for each EWS and PLC, tracking the file size and Shannon entropy of transferred ICS project files (e.g., .ACD, .S7P, .L5X) observed in Zeek files.log. Calculate the mean and standard deviation for both metrics. Generate an alert if a transferred project file's size or entropy deviates by more than 3 standard deviations from its historical mean for that EWS-to-PLC pair, or if its entropy falls below the 1st percentile of observed benign project files, potentially indicating obfuscation, packing, or an unexpected change in file structure.\n3. Machine Learning: Implement a binary classification model (e.g., Support Vector Machine, Random Forest, or XGBoost) to classify ICS project file transfers as 'authorized' or 'unauthorized'. Feature vectors should include attributes extracted from Zeek files.log such as file size, Shannon entropy, file type extension, source/destination IP pair, protocol used, and historical frequency of such transfers. Train the model on a dataset of known authorized transfers and, if available, known malicious or anomalous transfers. Flag any transfer classified as 'unauthorized' with a high confidence score as a potential unauthorized program modification or transfer of malicious logic."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]