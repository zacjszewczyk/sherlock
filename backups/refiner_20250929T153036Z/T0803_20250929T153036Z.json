[
  {
    "information_requirement": "Is the adversary attempting to inhibit response functions by blocking command messages? (TA0107 - Inhibit Response Function)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0803",
        "name": "Block Command Message",
        "evidence": [
          {
            "description": "A critical control command is logged as initiated and sent by an HMI application (e.g., `Windows Event ID 1000` from a specific HMI application source, or a specific application log entry indicating 'command_sent' to a PLC), but within a defined time window (e.g., 5-10 seconds), no corresponding outbound `Zeek conn.log` entry from the HMI's IP to the target PLC's IP on the expected ICS protocol port is observed, or no expected response traffic from the PLC (e.g., `Zeek conn.log` with `resp_bytes > 0` or specific application-layer response in `modbus.log`) is recorded. This command non-delivery is concurrently observed with a significant and sustained increase (e.g., 99th percentile deviation from baseline) in total `Zeek conn.log` bytes or packets per second on the control network segment where the HMI and PLC reside, potentially indicating a denial-of-service attack.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek ethernetip.log",
              "Windows Event ID 1000 (HMI Application Log)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control Network Zone (between HMIs/SCADA Servers and PLCs/RTUs), HMI/SCADA Server Endpoints",
            "action": "1. **Symbolic Logic:** Query HMI application logs (e.g., `Windows Event ID 1000` filtered by HMI application source and message content indicating 'command sent' for critical control operations) for successful command transmissions to a PLC. For each such 'command sent' event, within a 10-second window, search `Zeek conn.log` (and relevant protocol-specific logs like `modbus.log`) for corresponding outbound traffic from the HMI's IP to the target PLC's IP on the relevant ICS protocol port (e.g., TCP 502, 20000, 44818). Alert with high severity if a 'command sent' event has no corresponding `conn.log` entry with `orig_bytes > 0` to the PLC, or no expected response (`resp_bytes > 0` or specific application-layer response field) from the PLC within the same window. 2. **Statistical Method:** Establish a 7-day rolling baseline of network traffic volume (total `bytes_per_second` and `packets_per_second` from `Zeek conn.log`) for each critical control network segment. Continuously monitor real-time traffic volume. Generate an alert if the real-time `bytes_per_second` or `packets_per_second` for the segment consistently exceeds the 99th percentile of its historical baseline for more than 60 seconds, especially when correlated with an observed command non-delivery alert. 3. **Machine Learning Application:** Implement a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on aggregated `Zeek conn.log` data, specifically `bytes_per_second` and `packets_per_second`, for critical HMI-PLC communication pairs and overall control network segments. Train the model on at least 30 days of benign historical traffic patterns, accounting for scheduled operations. Trigger a high-confidence alert when the model detects a sustained, statistically significant deviation from the learned baseline (e.g., an anomaly score above a predefined threshold for 5 consecutive minutes), indicating a potential network flood or disruption that could block command messages."
          },
          {
            "description": "A new host-based firewall rule is observed on an Engineering Workstation (EWS) or Human-Machine Interface (HMI). This rule explicitly denies or blocks outbound network communication to a critical PLC's IP address or subnet over standard ICS protocol ports (e.g., TCP 502 for Modbus, TCP 20000 for DNP3, TCP 44818 for EtherNet/IP), preventing legitimate control commands from being transmitted. This is detected through specific Windows security event logs indicating firewall rule changes.",
            "data_sources": [
              "Windows Event ID 4945",
              "Windows Event ID 4947",
              "Windows Event ID 5157"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Control Servers",
            "action": "1. **Symbolic Logic:** Continuously monitor critical HMI and EWS assets for `Windows Event ID 4945` (A rule has been added to the Windows Firewall exception list) or `Windows Event ID 4947` (A change was made to Windows Firewall exception list). Immediately generate a high-severity alert if the `RuleName` or `Action` field indicates a 'block' or 'deny' action, and the `RemoteAddress` field matches a known critical PLC IP address or subnet, and the `RemotePort` field matches a common ICS protocol port (e.g., 502, 20000, 44818). Cross-reference any new or modified rule against a pre-approved whitelist of expected firewall rules for these assets. 2. **Statistical Method:** Establish a 30-day rolling baseline for the daily count of `Windows Event ID 4945` and `4947` occurrences on each critical HMI and EWS. Calculate the mean and standard deviation for this baseline. Generate an alert if the number of firewall rule modifications on a single host, or the sum across multiple critical hosts within a 24-hour period, exceeds 3 standard deviations from its rolling average, indicating an anomalous spike in firewall configuration changes. 3. **Machine Learning Application:** Develop a binary classification model (e.g., Random Forest or Gradient Boosting) trained on historical `Windows Event ID 4945` and `4947` data from HMI/EWS assets. Features for the model should include `RuleName`, `Action`, `Direction`, `Protocol`, `LocalPort`, `RemotePort`, `LocalAddress`, `RemoteAddress`, `User`, and `TimeOfDay`. The model should classify new or modified rules as 'benign' or 'malicious'. Trigger a high-fidelity alert for any rule classified as 'malicious', especially if it targets ICS-specific destinations or ports, and correlate with `Windows Event ID 5157` (Windows Filtering Platform blocked a connection) events for the same destination."
          },
          {
            "description": "An unexpected change in the MAC address associated with a critical PLC's static IP address is detected via network monitoring (e.g., `Zeek arp.log`), indicating potential ARP spoofing. This change is not correlated with scheduled maintenance or network reconfigurations. Additionally, a high volume of gratuitous ARP messages for the critical PLC's IP from an unknown or anomalous source is observed, suggesting an adversary is attempting to redirect traffic to intercept and drop command messages.",
            "data_sources": [
              "Zeek arp.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control Network Switches, Control Network Gateways, Critical PLC Network Interfaces",
            "action": "1. **Symbolic Logic:** Maintain a static IP-to-MAC address mapping (whitelist) for all critical ICS devices (PLCs, RTUs, IEDs) within the control network. Continuously monitor `Zeek arp.log` for entries where the `id.orig_h` (IP address) matches a critical PLC, but the `mac` field (MAC address) deviates from the established whitelist. Immediately generate a high-severity alert if an unapproved MAC address is observed for a critical PLC's IP. Additionally, alert if gratuitous ARP messages (`opcode: 2` in `Zeek arp.log`) are observed for critical PLC IPs originating from an unapproved or unknown `id.orig_h` or `id.resp_h`. 2. **Statistical Method:** Establish a 7-day rolling baseline for the normal frequency of `Zeek arp.log` events (ARP requests, replies, gratuitous ARPs) for each critical PLC IP address. Calculate the mean and standard deviation for this baseline. Generate an alert if the rate of ARP requests or gratuitous ARPs for a critical PLC's IP address exceeds 3 standard deviations from its 7-day rolling average within a 60-second window, indicating a potential ARP flood or spoofing attempt. Quantify the number of unique MAC addresses observed per critical IP within a 5-minute window and alert if this count exceeds one. 3. **Machine Learning Application:** Implement an unsupervised anomaly detection model (e.g., Isolation Forest or Autoencoder) on `Zeek arp.log` data, using features such as `id.orig_h`, `mac`, `opcode`, `id.resp_h`, and `time_interval_between_arps`. Train the model on at least 30 days of historical benign ARP traffic patterns. The model should identify clusters of anomalous ARP events (e.g., frequent changes in MAC for a static IP, unusually high rates of ARP activity, or unknown sources of gratuitous ARPs) that deviate significantly from learned normal behavior, triggering an alert for potential ARP spoofing that could block command messages. Calculate an entropy score for observed MAC addresses per IP and alert on significant drops or spikes."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]