[
  {
    "information_requirement": "Is an adversary attempting to impair our process control by manipulating I/O points? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0806",
        "name": "Brute Force I-O",
        "evidence": [
          {
            "description": "A source IP (e.g., Zeek modbus.log:id.orig_h) initiates Modbus/DNP3/S7comm write commands (e.g., Zeek modbus.log:func, Zeek dnp3.log:func, Zeek s7comm.log:func) to a single I/O point (e.g., Zeek modbus.log:addr) at a frequency exceeding its 99th percentile and 3-sigma upper control limit, originating from an IP address not whitelisted for control operations on the destination PLC, or from an HMI/EWS where no authorized process (e.g., SCADA client, historian client) was active at the time of the anomalous writes (Windows Event ID 4688).",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control Network segments, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and Programmable Logic Controllers (PLCs)",
            "action": "1. Statistical (Frequency Anomaly Detection): For each unique combination of (source IP, destination PLC IP, I/O address) observed in Zeek modbus.log, dnp3.log, and s7comm.log (specifically func='write' or similar operation codes), calculate the 'write command per minute' frequency. Establish a dynamic 30-day rolling baseline for each unique (source IP, destination PLC IP, I/O address) tuple. Calculate the 99th percentile and the 3-sigma upper control limit (UCL) for this baseline. Trigger an alert if the current 1-minute write command frequency for any tuple exceeds both its 99th percentile AND its 3-sigma UCL. This can be implemented in a SIEM using scheduled queries and historical data functions. 2. Symbolic Logic (Unauthorized Source/Process Correlation): Upon detection of a frequency anomaly from action 1, perform the following correlations: a) Check if the source IP (Zeek log: id.orig_h) is present in an approved asset whitelist (e.g., CMDB, static lookup table) specifically authorized to write to the destination PLC IP and I/O point. If not found, flag as an unauthorized source. b) On the identified source IP (if it is an HMI/EWS), query Windows Event ID 4688 (Process Creation) for the 5-minute window preceding and during the anomalous write activity. Identify if the process initiating the network connection is a known, authorized control application (e.g., SCADA.exe, HistorianClient.exe). Flag if the process is unknown, unauthorized, or if no relevant process creation event is found for the network activity. 3. Machine Learning (Time Series Anomaly Detection): Implement a time-series anomaly detection model (e.g., Isolation Forest, ARIMA, Prophet) on the 'write command per minute' frequency for each critical (source IP, destination PLC IP, I/O address) tuple. Train the model using 90 days of historical Zeek logs. The model should learn the normal patterns of write activity, including expected variations. Generate an alert when the model detects a statistically significant deviation from the learned normal pattern, indicating an unusual surge or sustained high rate of write commands. The model should output an anomaly score and trigger an alert if the score exceeds a predefined threshold (e.g., top 1% anomaly score)."
          },
          {
            "description": "A single source IP (e.g., Zeek modbus.log:id.orig_h) executes multiple Modbus/DNP3/S7comm write commands to a sequence of I/O point addresses (e.g., Zeek modbus.log:addr) that exhibit linear or arithmetic progression within a 30-second window. Alternatively, the source targets more than 75% of unassigned or invalid I/O point addresses for a specific PLC (based on a known-good configuration), or shows a sudden, significant increase in the Shannon entropy of targeted I/O addresses within a 5-minute window.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control Network segments, Programmable Logic Controllers (PLCs), and ICS field devices",
            "action": "1. Symbolic Logic (Sequential/Invalid Address Targeting): For each source IP (Zeek log: id.orig_h), group Modbus/DNP3/S7comm write commands by 30-second sliding windows. Within each window, extract the sequence of I/O addresses (e.g., Zeek modbus.log:addr). Identify if the sequence demonstrates linear progression (e.g., addr_n+1 = addr_n + 1), arithmetic patterns (e.g., addr_n+1 = addr_n + k), or other common scanning patterns. Simultaneously, compare all targeted addr values against a pre-configured whitelist/blacklist of valid I/O points for the destination PLC (e.g., from a CMDB or PLC configuration file). Generate an alert if a sequential pattern is detected OR if more than 75% of targeted addresses within a 30-second window are identified as unassigned or invalid for that specific PLC. 2. Statistical Method (Entropy Anomaly): For each source IP (Zeek log: id.orig_h), calculate the Shannon entropy of the `addr` field for all Modbus/DNP3/S7comm write commands over a 5-minute sliding window. Establish a 30-day moving average baseline for the entropy values. Trigger an alert if the current entropy value deviates by more than 2 standard deviations from its baseline, particularly if it shows a sudden increase (suggesting broad scanning of I/O points) or a rapid shift from low to high entropy followed by a sharp decrease (suggesting initial scanning followed by focused targeting). This can be calculated using SIEM statistical functions. 3. Machine Learning (Sequence Anomaly Detection): Develop and train a sequence modeling algorithm (e.g., Hidden Markov Model, LSTM-based Recurrent Neural Network) using historical sequences of I/O write commands (specifically the `addr` field) from Zeek logs. The model should learn typical patterns of I/O address traversal for authorized operations. Flag any new sequence of I/O writes that significantly deviates from these learned normal patterns, outputting an anomaly score that, when exceeding a predefined threshold, indicates an unusual scanning or manipulation attempt (e.g., an adversary attempting to map accessible I/O points)."
          },
          {
            "description": "A single I/O point (e.g., Zeek modbus.log:addr) receives Modbus/DNP3/S7comm write commands from a source IP (e.g., Zeek modbus.log:id.orig_h) that cause its value to toggle (e.g., discrete output changing from 0 to 1 then back to 0) at a frequency exceeding a predefined engineering safe operating limit (e.g., >10 toggles per minute). This activity is either sourced from an unapproved IP, or is correlated with a successful logon event (Windows Event ID 4624) on an HMI/EWS that exhibits multiple anomalous characteristics simultaneously, such as originating from a rare geographic location, occurring outside of normal working hours, or using an unfamiliar user account for that specific control operation.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control Network segments, Programmable Logic Controllers (PLCs), and critical field devices (e.g., actuators, valves)",
            "action": "1. Statistical (Toggle Frequency Anomaly): For each unique (source IP, destination PLC IP, I/O address) tuple in Zeek modbus.log, dnp3.log, and s7comm.log, monitor write commands that result in a discrete state change (e.g., a Modbus coil changing from 0 to 1 then to 0, or vice-versa). Calculate the 'toggle frequency' (number of state changes) per minute. Establish a dynamic 30-day rolling baseline for each I/O point's maximum safe toggle frequency based on engineering specifications or historical operational data. Generate an alert if the observed toggle frequency exceeds its baseline by more than 150% or if it surpasses a hard-coded critical threshold (e.g., >10 toggles/minute for a critical valve), indicating potential process instability or equipment wear. This can be implemented in a SIEM using aggregation and thresholding. 2. Symbolic Logic (Anomalous Authentication/Source Correlation): Upon detection of a toggle frequency anomaly from action 1, correlate the source IP (Zeek log: id.orig_h) with successful logon events (Windows Event ID 4624) on relevant HMIs/EWS within a 5-minute window. Identify if the logon session associated with the anomalous activity exhibits any of the following characteristics: a) The source IP address of the logon is not on an approved whitelist for control operations. b) The logon occurs outside of standard operating hours for the associated user account. c) The user account has no established historical pattern of interacting with that specific I/O point, based on a 90-day historical analysis of Zeek logs. Flag if two or more of these conditions are met, indicating a potentially compromised or unauthorized session. 3. Machine Learning (Behavioral Anomaly Detection for I/O Toggling): Develop and train a behavioral anomaly detection model (e.g., One-Class SVM, Isolation Forest, or an Autoencoder) on historical sequences of I/O point values and their transitions (e.g., value changes in Zeek logs for critical I/O points). This model learns the expected 'value change' behavior and transition frequencies for critical I/O points during normal operations. Trigger an alert when the model detects a sequence of rapid toggles or state changes that significantly deviates from the learned normal operational patterns, indicating potentially malicious manipulation or an attempt to induce instability. The model should output an anomaly score, triggering an alert if above a certain percentile (e.g., 99th percentile of anomaly scores)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]