[
  {
    "information_requirement": "Has a critical ICS device been restarted or shut down outside of a scheduled maintenance window? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0816",
        "name": "Device Restart-Shutdown",
        "evidence": [
          {
            "description": "Detection of Windows System Event ID 1074 (user-initiated restart/shutdown), Event ID 6006 (clean shutdown), or Event ID 6008 (unexpected shutdown) on critical Windows-based ICS assets (e.g., HMIs, EWS, SCADA Servers), indicating an alteration of the system's operational state.",
            "data_sources": [
              "Windows Event ID 1074",
              "Windows Event ID 6006",
              "Windows Event ID 6008",
              "Windows Event ID 4624",
              "Windows Event ID 4634",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, and SCADA Servers within the Process Control Network (PCN).",
            "action": "1. **Symbolic Logic:** Query SIEM for `Windows Event ID 1074` on critical ICS assets (HMIs, EWS, SCADA Servers). Identify `ShutdownReason` and `InitiatingProcessName`. Alert if `ShutdownReason` is unexpected (e.g., `0x50004` (System Failure) or `0x80000000` (Unplanned)) and not associated with scheduled maintenance. Additionally, cross-reference `InitiatingProcessName` with a threat intelligence blacklist or a whitelist of approved shutdown executables (e.g., `shutdown.exe`, `wuauclt.exe` for updates). Alert if the process is not whitelisted or is blacklisted. For `Windows Event ID 6008`, immediately alert as this indicates an abrupt, unexpected shutdown. 2. **Statistical Method:** Establish a 90-day rolling baseline for each critical ICS asset (HMI, EWS, SCADA Server) of: 1) the frequency of `Windows Event ID 1074` (user-initiated) and 2) the frequency of `Windows Event ID 6006` (clean shutdown) events, specifically noting the `ShutdownReason` and `InitiatingUser`. Calculate the average and 99th percentile for these events during and outside of scheduled maintenance windows. Generate an alert if the number of `Windows Event ID 1074` or `6006` events for an asset in a 24-hour period exceeds its 99th percentile, or if an event occurs with a `ShutdownReason` that has not been observed in the last 180 days (statistical rarity). 3. **Machine Learning:** Utilize a supervised classification model (e.g., Random Forest, XGBoost) trained on historical `Windows Event ID 1074`, `6006`, and `6008` data (6-12 months) from critical ICS assets. Features for the model should include: `EventID`, `ShutdownReason`, `InitiatingProcessName` (encoded), `InitiatingUser` (encoded), `time_of_day`, `day_of_week`, and `preceding_login_activity` (from `Windows Event ID 4624` within a 15-minute window). Label known legitimate shutdowns (e.g., scheduled maintenance) as 'benign' and unexpected or unauthorized shutdowns as 'malicious' during training. The model should classify new events, alerting on high-confidence 'malicious' classifications, especially when `ShutdownReason` is indicative of an abrupt or unplanned event."
          },
          {
            "description": "Detection of specific ICS protocol function codes or commands (e.g., DNP3 Function Code 1 (Restart IIN), DNP3 Function Code 2 (Cold Restart), Modbus Function Code 8 (Diagnostic) with sub-function 0x01 (Return Query Data) or 0x0A (Clear Counters and Restart), EtherNet/IP 'Reset' service request, or IEC 61850 GOOSE/SV messages indicating a device restart state change) targeting a critical PLC, RTU, or IED within the ICS network, signaling a device restart or shutdown command.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek opcua.log",
              "Zeek iec61850goose.log",
              "Zeek iec61850sv.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic monitoring points between Level 1 (Basic Control) and Level 2 (Supervisory Control) of the Purdue Model, specifically targeting PLCs, RTUs, and IEDs, and in DMZ segments separating IT and OT networks.",
            "action": "1. **Symbolic Logic:** Configure SIEM to ingest `Zeek dnp3.log`, `modbus.log`, `enip.log`, `opcua.log`, `iec61850goose.log`. Create correlation rules to detect the following: `dnp3.log` where `function_code` is 1 or 2 (Restart IIN/Cold Restart); `modbus.log` where `function_code` is 8 and `sub_function` is `0x01` or `0x0A`; `enip.log` where `service` field indicates a 'Reset' command; `opcua.log` for specific `method_call` or `data_change` indicating restart; `iec61850goose.log` for specific `dat_attribute` values indicating device state change to restart/shutdown. Immediately alert if any of these are observed originating from an IP address not present in the 'Authorized ICS Engineering Workstations' or 'Approved HMI' whitelist. Include context from `Zeek conn.log` for source/destination details. 2. **Statistical Method:** For each critical PLC/RTU/IED, establish a 30-day rolling baseline using `Zeek dnp3.log`, `modbus.log`, `enip.log`, `opcua.log`, `iec61850goose.log` for: 1) the total count of restart/shutdown function codes (as defined above in Symbolic Logic) and 2) the source IP addresses issuing these commands. Calculate the daily average and 99th percentile for the count of these commands for each device. Alert if the daily count of restart/shutdown commands for a critical device exceeds its 99th percentile. Additionally, calculate the Shannon entropy for the `source_ip` field associated with these commands over a 24-hour window; a sudden drop in entropy (e.g., a single source IP dominating) for restart commands could indicate a focused attack, triggering an alert if below the 1st percentile of historical entropy. 3. **Machine Learning:** Implement a supervised anomaly detection model (e.g., One-Class SVM or Isolation Forest) trained on 6-12 months of `Zeek dnp3.log`, `modbus.log`, `enip.log`, `opcua.log`, `iec61850goose.log` data. Features should include: `protocol`, `function_code`, `sub_function` (if applicable), `source_ip` (encoded), `destination_ip` (encoded), `packet_size`, `time_of_day`, and `day_of_week`. Train the model on 'normal' ICS command patterns, excluding known legitimate restart events (e.g., during scheduled maintenance). The model should identify and alert on function code sequences or command patterns that deviate significantly from the learned normal behavior, classifying them as anomalous restart/shutdown attempts."
          },
          {
            "description": "Absence of expected periodic network communication (e.g., Modbus polling, DNP3 heartbeats, EtherNet/IP I/O messaging, OPC UA data updates, or IEC 61850 GOOSE messages) from a critical controller (PLC, RTU, IED) for a duration exceeding its established operational communication interval threshold (e.g., 1.5x the normal polling interval), indicating an unexpected shutdown, reboot, or communication failure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek opcua.log",
              "Zeek iec61850goose.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic flows to and from critical controllers on the Process Control Network (PCN), specifically at network aggregation points or switch mirror ports for Level 0/1/2 devices.",
            "action": "1. **Symbolic Logic:** For each critical PLC/RTU/IED, define its expected communication partners (HMIs, Historians, other PLCs) and its normal polling/heartbeat interval (e.g., 5 seconds for Modbus, 1 second for GOOSE). Configure SIEM to monitor `Zeek conn.log` and relevant ICS protocol logs (`dnp3.log`, `modbus.log`, `enip.log`, `opcua.log`, `iec61850goose.log`) for communication events involving these devices. If no log entries are observed for a specific critical controller's expected communication flows (e.g., `orig_h` or `resp_h` matching the controller's IP) within `1.5 * normal_polling_interval` for its primary communication protocol, generate a 'Communication Loss' alert. Exclude known scheduled maintenance periods from this alerting logic. 2. **Statistical Method:** For each critical controller, utilize `Zeek conn.log` and relevant ICS protocol logs to calculate a 7-day rolling average and standard deviation of the inter-arrival times of expected periodic communication packets (e.g., Modbus requests, DNP3 heartbeats). If the observed inter-arrival time for a controller's communication stream exceeds its 99th percentile or is more than 3 standard deviations greater than its mean, trigger an alert for potential communication loss. Additionally, analyze the `duration` field from `Zeek conn.log` for connections involving critical controllers; an abrupt drop in the average connection duration (e.g., below the 1st percentile of historical values) for a sustained period could also indicate an issue. 3. **Machine Learning:** Deploy a time-series forecasting model (e.g., Prophet, LSTM) for each critical controller, trained on 6-12 months of historical `Zeek conn.log` and ICS protocol log data (e.g., `modbus.log:count`, `dnp3.log:count`) to predict expected communication volume and presence. The model should account for daily/weekly cycles and known maintenance windows. When the observed communication volume (e.g., `bytes_orig`/`bytes_resp` from `conn.log` or `count` of protocol-specific messages) for a controller falls below the model's predicted lower bound (e.g., 95% confidence interval) for a duration exceeding its normal polling interval, classify it as an anomaly and generate an alert, indicating an unexpected shutdown or communication interruption."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]