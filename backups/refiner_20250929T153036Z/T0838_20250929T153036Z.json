[
  {
    "information_requirement": "Is an adversary attempting to modify or suppress critical process alarms? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0838",
        "name": "Modify Alarm Settings",
        "evidence": [
          {
            "description": "Detection of a file modification (write or delete) or replacement event targeting a critical alarm configuration file (e.g., .ALM, .XML, .INI) on an ICS host (HMI, EWS, Historian) by an unauthorized process, user account, or occurring outside of defined maintenance windows.",
            "data_sources": [
              "Windows Event ID 4663 (Object Access - File System)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 4656 (Handle Request)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, Data Gateways/OPC Servers",
            "action": "1. Symbolic Logic (Whitelist/Rule-based): Identify critical alarm configuration file paths (e.g., C:\\SCADA\\Projects\\*.ALM, D:\\HMI_Config\\*.XML) on EWS, HMI, and Historian assets. Filter Windows Event ID 4663 for 'Object Type: File' and 'Access Mask' indicating write (0x2) or delete (0x10000) operations on these paths. Correlate with Windows Event ID 4688 (Process Creation) using 'Process ID' and 'TimeCreated' to obtain the 'Process Name', 'Parent Process Name', and 'SubjectUserName'. Establish a whitelist of authorized 'Process Name' and 'SubjectUserName' pairs, along with expected command-line arguments. Alert when a critical alarm configuration file is modified by a process or user not on the whitelist, or if the command-line arguments (from 4688) are unusual (e.g., PowerShell, cmd.exe, or scripting interpreters directly manipulating files). 2. Statistical Method (Anomaly Detection): For each critical ICS host, collect the daily count of unique file modification events (Windows Event ID 4663 on identified critical alarm configuration files, unique by 'FilePath' and 'ProcessId'). Calculate the 7-day and 30-day moving average and standard deviation of this daily count. Generate an alert when the daily modification count for a host exceeds the 95th percentile of its 30-day historical distribution or is more than 2.5 standard deviations above its 7-day moving average, indicating an anomalous spike in activity. 3. Machine Learning (Classification): Develop a supervised classification model (e.g., XGBoost, Random Forest) trained on historical Windows Event ID 4663 and 4688 data from critical ICS hosts. Engineer features including 'Process Name', 'Parent Process Name', 'SubjectUserName', 'Time of Day (hour)', 'Day of Week', 'FilePath entropy', 'File Extension', and 'IsMaintenanceWindow (boolean)'. Label known legitimate modifications (e.g., during scheduled updates by authorized personnel) as 'benign' and known unauthorized or suspicious modifications as 'malicious'. Deploy the model to classify new modification events, alerting with high priority for predictions indicating 'malicious' activity with a confidence score above 0.8."
          },
          {
            "description": "Observation of a file transfer event containing a known critical alarm configuration file (e.g., .ALM, .XML, .PRJ) to an ICS endpoint (PLC, HMI, EWS) from a non-whitelisted source IP, via an unauthorized network protocol/port, or with an atypical file size or cryptographic hash (MD5/SHA256).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT boundary firewalls, Industrial Demilitarized Zones (IDMZ), Control Network segments (Process Control, Safety Instrumented Systems), Wireless Industrial Networks",
            "action": "1. Symbolic Logic (Whitelist/Rule-based): Create a watchlist of critical alarm configuration file extensions (e.g., '.ALM', '.PRJ', '.XML', '.CFG') and their typical size ranges. Filter Zeek 'files.log' for records where 'fuid' exists and 'filename' ends with a watchlisted extension, and 'tx_hosts' or 'rx_hosts' includes an ICS network IP. Establish a whitelist of authorized source IPs, destination IPs, and allowed protocols/ports (e.g., SMB, FTP, Modbus/TCP, EtherNet/IP) for such transfers using 'conn.log'. If known good hashes (MD5, SHA256) for these files exist, compare the 'md5' or 'sha256' field from 'files.log'. Alert on any transfer of a watchlisted file type to an ICS destination from a non-whitelisted source IP, using an unauthorized protocol/port, or if the file's hash does not match a known good baseline or if the file size is outside the typical range (e.g., +/- 20%). 2. Statistical Method (Entropy/Volume Anomaly): For each critical ICS asset, calculate the daily sum of 'total_bytes' and 'num_files' for transfers involving watchlisted configuration file extensions from Zeek 'files.log' and 'conn.log'. Establish a 30-day moving average and standard deviation for these metrics. Generate an alert when the daily 'total_bytes' or 'num_files' for an ICS asset exceeds the 99th percentile of its historical distribution or is more than 3 standard deviations above the moving average, indicating an anomalous surge in configuration file transfer activity. Additionally, calculate the Shannon entropy of file names for transferred configuration files; alert if the entropy deviates significantly (> 2 standard deviations) from the baseline entropy of known legitimate configuration file names. 3. Machine Learning (Time Series Anomaly Detection): Develop an unsupervised time-series anomaly detection model (e.g., Isolation Forest, Autoencoder) on the aggregated hourly byte volume and count of file transfers to critical ICS devices from Zeek 'conn.log' and 'files.log'. Train the model on at least 90 days of historical network traffic, specifically focusing on traffic involving common ICS protocols and known configuration file types. Account for scheduled transfers and maintenance activities by labeling these periods. Alert when the model classifies the current transfer volume or frequency to critical ICS assets as anomalous (e.g., anomaly score above 0.7), indicating potential unauthorized data movement that could include modified configuration files."
          },
          {
            "description": "Detection of a critical ICS-related Windows service (e.g., alarm management, HMI runtime, OPC server) transitioning to a 'stopped' state (Service Control Manager Event ID 7036) without a corresponding authorized user action, scheduled maintenance window, or a legitimate system shutdown/restart event (Event ID 1074).",
            "data_sources": [
              "Windows Event ID 7036 (Service Control Manager - Service Change)",
              "Windows Event ID 4688 (Process Creation)",
              "Windows Event ID 1074 (System Shutdown/Restart)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator Stations, Human-Machine Interfaces (HMIs), Alarm management servers, SCADA Servers, Data Historian Servers",
            "action": "1. Symbolic Logic (Whitelist/Rule-based): Identify critical ICS service names (e.g., 'Rockwell_Alarm_Service', 'Siemens_HMI_Runtime', 'OPC_Server_Service') on Operator Stations, HMIs, and SCADA Servers. Monitor Windows Event ID 7036 for these services entering the 'stopped' state. Correlate these 7036 events with Windows Event ID 4688 (Process Creation) using 'Process ID' and 'TimeCreated' to identify the 'Process Name' and 'SubjectUserName' responsible for the service stoppage. Additionally, correlate with Windows Event ID 1074 (System Shutdown/Restart) to account for legitimate system events. Establish a whitelist of authorized users and processes. Alert when a critical service is stopped by an unauthorized user or process, or if the stoppage occurs outside of scheduled maintenance windows and does not correlate with a system shutdown or restart. 2. Statistical Method (Frequency/Uptime Anomaly): For each critical ICS service, track its daily 'stopped' occurrences (Windows Event ID 7036, excluding those correlated with 1074 or authorized maintenance). Calculate the 30-day moving average and standard deviation for this daily count. Additionally, calculate the average uptime for each service (time between 'started' and 'stopped' events). Generate an alert if the daily count of unauthorized service stops exceeds the 99th percentile of its historical distribution or is more than 3 standard deviations above its moving average. Also, alert if a critical service's uptime falls below the 5th percentile of its historical uptime, indicating unusual or repeated disruptions. 3. Machine Learning (Classification): Develop a supervised classification model (e.g., LightGBM, Logistic Regression) to assess the legitimacy of service stop events. Features should include 'Service Name', 'SubjectUserName' (from 4688), 'Process Name' (from 4688), 'Time of Day (hour)', 'Day of Week', 'HostName', and a boolean feature indicating correlation with 'Event ID 1074' or a defined maintenance window. Train the model on historical data, labeling service stops during maintenance or system restarts as 'legitimate' and other known unauthorized stops as 'malicious'. Deploy the model to classify new service stop events, generating high-priority alerts for predictions indicating 'malicious' intent with a confidence score greater than 0.9."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]