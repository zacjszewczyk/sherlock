[
  {
    "information_requirement": "Is the adversary attempting to inhibit our response functions by stopping critical ICS services? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0881",
        "name": "Service Stop",
        "evidence": [
          {
            "description": "Observation of a process creation event (Windows Event ID 4688) with command-line arguments explicitly indicating a service stop operation (e.g., 'sc stop', 'net stop', 'Stop-Service') targeting a critical ICS service, immediately followed (within 10 seconds) by a Windows System Event ID 7036 confirming the service entered a 'stopped' state.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Domain Controllers, Jump Servers in OT/DMZ",
            "action": "1. **Symbolic Logic**: Define a watchlist `ICS_CRITICAL_SERVICES` with exact names of critical ICS services (e.g., 'Rockwell FactoryTalk Linx', 'OSIsoft PI Data Archive', 'Wonderware Historian'). Monitor for Windows Event ID 4688 (Process Creation) where `CommandLine` contains `sc stop`, `net stop`, or `Stop-Service` and targets a service in `ICS_CRITICAL_SERVICES`. Correlate this with a subsequent Windows System Event ID 7036 (Service Status Change) on the same host, within 10 seconds, where `Service_Name` is in `ICS_CRITICAL_SERVICES` and `Service_Status` is 'stopped'. Generate an immediate high-severity alert for any such correlated event sequence lacking a corresponding approved change management ticket. 2. **Statistical Method**: For each critical OT host, establish a 90-day historical baseline of normal service stop events for services in `ICS_CRITICAL_SERVICES`, recording `Service_Name`, `Timestamp`, and `Host_ID`. Calculate the mean and standard deviation of stop occurrences by time of day and day of week. Create a detection rule to flag any Windows System Event ID 7036 for a service in `ICS_CRITICAL_SERVICES` that: a) occurs outside of defined normal operational hours (e.g., 6 PM - 6 AM local time) or on weekends, OR b) deviates from the host's historical baseline by more than 2 standard deviations for frequency or timing. Additionally, correlate Windows Event ID 4688 where `CommandLine` contains `sc stop`, `net stop`, or `Stop-Service` for a service in `ICS_CRITICAL_SERVICES` with a subsequent Event ID 7036 on the same host, within a 60-second window, and apply the same statistical deviation analysis to this correlated activity. Alert on high-deviation events. 3. **Machine Learning Application**: Deploy a time-series anomaly detection model (e.g., Isolation Forest, Prophet, LSTM Autoencoder) trained on 6 months of historical Windows Event ID 7036 data for critical ICS services on each host. The model should monitor the frequency and timing of service stop events. Configure the model to generate an alert when the anomaly score for a given service stop event or a cluster of events exceeds a predefined threshold (e.g., top 1% of anomaly scores observed during training), indicating a significant deviation from learned normal patterns (e.g., unusually high frequency of stops in a short period, or a stop at a highly atypical time not covered by simpler statistical rules). Supplement this with analysis of process creation events (Windows Event ID 4688) related to service control commands, using a classifier model (e.g., SVM) to identify anomalous command-line arguments or process parentage."
          },
          {
            "description": "Observation of a critical ICS service entering a 'stopped' state (Windows Event ID 7036) within a 30-second window after an inbound network connection (Zeek conn.log) to the affected host, where the network connection's attributes (e.g., source IP, port, protocol, byte count) significantly deviate from the host's established historical network communication profile as defined by statistical baselines.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT Network Segments, DMZ between IT/OT, Critical Control System Hosts (e.g., EWS, HMIs), Network Intrusion Detection Systems (NIDS) deployed in OT",
            "action": "1. **Symbolic Logic**: Define a watchlist `ICS_CRITICAL_SERVICES` (as per the first evidence block). Identify all Windows Event ID 7036 events where `Service_Name` is in `ICS_CRITICAL_SERVICES` and `Service_Status` is 'stopped'. For each such event, search Zeek conn.log for `conn` records where `id.resp_h` matches the affected host's IP address and `ts` (timestamp) is within the 5 minutes preceding the Event ID 7036 `TimeCreated`. Filter these connections for `id.orig_h` (source IP) originating from predefined untrusted network segments (e.g., IT network, external IPs, or non-ICS subnets) or utilizing commonly restricted ports for OT (e.g., 3389/RDP, 445/SMB, 5985/WinRM). Generate an immediate high-severity alert for any identified inbound connection from an untrusted source or on a restricted port followed by a critical service stop event on the same host. 2. **Statistical Method**: For each critical OT host, establish a 30-day statistical baseline of normal inbound Zeek `conn.log` attributes: `id.orig_h` (source IP), `id.orig_p` (source port), `id.resp_p` (destination port), `proto` (protocol), `orig_bytes`, `resp_bytes`, and `duration`. Calculate the mean, standard deviation, and 99th percentile for numerical fields, and frequency distributions for categorical fields. When a critical service stop (Windows Event ID 7036) occurs, retrieve all inbound Zeek `conn.log` entries for the affected host within the preceding 5 minutes. For each retrieved connection, compute a 'deviation score' by comparing its attributes to the host's baseline. Assign a high score for: a) `id.orig_h` not seen in the last 30 days, b) `id.resp_p` outside the top 5 most frequent ports, c) `orig_bytes` or `resp_bytes` exceeding the 99th percentile, or d) `proto` being unusual. Generate an alert if the cumulative deviation score for any single connection or a cluster of connections exceeds a predefined threshold (e.g., a score indicating multiple metrics are beyond the 99th percentile or 3 standard deviations from the mean). 3. **Machine Learning Application**: Implement an unsupervised machine learning anomaly detection model (e.g., Isolation Forest, One-Class SVM, Autoencoder) for each critical OT host, trained on 60 days of historical Zeek `conn.log` data. The model should learn the 'normal' patterns of inbound network connections, including features like `id.orig_h`, `id.resp_p`, `proto`, `orig_bytes`, `resp_bytes`, and `duration`. Upon detection of a critical service stop (Windows Event ID 7036), retrieve all inbound Zeek `conn.log` records to the affected host within the preceding 5 minutes. Feed these connection records into the trained model. Generate a high-severity alert if the model classifies any of these preceding connections as anomalous (e.g., anomaly score exceeding the 99.5th percentile of scores seen during training), suggesting a potential malicious network-based trigger for the service cessation."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]