[
  {
    "information_requirement": "Is the adversary executing unauthorized scripts on critical ICS assets like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0853",
        "name": "Scripting",
        "evidence": [
          {
            "description": "Successful execution of `powershell.exe` (Windows Event ID 4688) on an ICS asset (Engineering Workstation, Human-Machine Interface, Historian Server) where the command-line arguments contain base64 encoded strings, have a Shannon entropy score exceeding 4.5 bits per byte, or include parameters indicative of malicious intent (e.g., `-EncodedCommand`, `-NonInteractive`, `-nop`, `-w hidden`, `-ExecutionPolicy Bypass`). Additionally, `powershell.exe` initiating outbound network connections (Zeek conn.log) to unapproved external IP addresses or domains (Zeek dns.log), or being spawned by an untypical parent process (e.g., web browser, Microsoft Office application, instead of a legitimate system process or management tool).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers",
            "action": "1. **Symbolic Logic**: Establish a watch list for `powershell.exe` process creations (Windows Event ID 4688) on ICS assets (EWS, HMIs, Historian Servers). Alert when the command line contains known malicious arguments (e.g., `-EncodedCommand`, `-NonInteractive`, `-nop`, `-w hidden`, `-ExecutionPolicy Bypass`). Additionally, alert if `powershell.exe` is spawned by an unusual parent process (e.g., `iexplore.exe`, `outlook.exe`, `winword.exe`) or if it initiates outbound network connections (Zeek conn.log) to IP addresses or domains present in a threat intelligence feed (Zeek dns.log). 2. **Statistical Method**: For PowerShell Script Block logs (Windows Event ID 4104), calculate the Shannon entropy for all script content strings. Establish a 30-day baseline for entropy scores for each asset and alert when a script block's entropy exceeds the 95th percentile of its historical baseline, indicating high obfuscation. For network connections initiated by `powershell.exe` (Zeek conn.log), establish a 7-day baseline of unique destination IP/port pairs and connection volumes per asset. Alert if `powershell.exe` connects to a destination IP/port that is not within the top 99th percentile of historically observed activity or if the connection volume for a known destination deviates by more than 3 standard deviations from the historical mean. 3. **Machine Learning**: Apply a time series anomaly detection model (e.g., Isolation Forest or ARIMA) to the frequency and duration of `powershell.exe` executions (Windows Event ID 4688) on each ICS asset over a rolling 24-hour window, alerting on statistically significant deviations (e.g., 3-sigma rule) from the learned baseline. Utilize a text classification model (e.g., TF-IDF with SVM or BERT-based model) trained on known benign and malicious PowerShell script blocks (Windows Event ID 4104) to score and identify potentially malicious script content with a confidence score above 0.8."
          },
          {
            "description": "Successful execution of `python.exe` or `pythonw.exe` (Windows Event ID 4688) on an ICS asset (Engineering Workstation, Human-Machine Interface, Process Control Server) where the executable path is not present in an approved software whitelist. This includes instances where a `.py` file was transferred to the asset (Zeek files.log, Zeek http.log, Zeek smb.log) within the last 15 minutes, immediately followed by `python.exe` execution from the same or related directory, or if the Python executable attempts to communicate with external or unapproved internal network destinations (Zeek conn.log, Zeek dns.log).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Zeek http.log",
              "Zeek smb.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Process Control Servers, OT Network Segments (for Zeek logs), Jump Servers",
            "action": "1. **Symbolic Logic**: Maintain a strict software whitelist for `python.exe` and `pythonw.exe` on all ICS assets (EWS, HMIs, Process Control Servers), specifying approved executable paths and authorized parent processes. Alert (Windows Event ID 4688) for any `python.exe` or `pythonw.exe` execution from an unapproved path, by an unauthorized parent process, or from temporary/user-writable directories (e.g., `%TEMP%`, `%APPDATA%`). Correlate Zeek `files.log`, `http.log`, or `smb.log` entries indicating a `.py` file transfer to an ICS asset, followed within 10 minutes by a `python.exe` or `pythonw.exe` process creation (Windows Event ID 4688) on that same asset, especially if the script path matches the transferred file. 2. **Statistical Method**: For all `python.exe` and `pythonw.exe` executions (Windows Event ID 4688), establish a 30-day baseline for the frequency of execution per user account and unique script path on each ICS asset. Alert if a user account executes Python from a path that falls below the 5th percentile of its typical execution frequency or if a new, previously unobserved script path is used. Analyze Zeek `dns.log` for domains contacted by systems running `python.exe`; use a statistical rarity score (e.g., inverse document frequency or frequency-based anomaly detection) to identify communication with domains that are statistically rare across the network or not part of an approved domain list, especially if associated with newly observed Python executions. 3. **Machine Learning**: Implement an unsupervised machine learning model (e.g., Isolation Forest or One-Class SVM) to profile normal `python.exe` and `pythonw.exe` execution behavior (Windows Event ID 4688) on each ICS asset, considering factors like execution time, duration, command-line arguments, and associated network connections. Alert on significant deviations from these learned profiles. Utilize a classification model (e.g., XGBoost) to identify suspicious `.py` file transfers (Zeek `files.log`, `http.log`, `smb.log`) by analyzing file size, source IP reputation, file extension, and content entropy, flagging those that resemble known malicious Python scripts or originate from uncharacteristic network locations."
          },
          {
            "description": "Successful execution of `wscript.exe` or `cscript.exe` (Windows Event ID 4688) on an ICS asset (Engineering Workstation, Human-Machine Interface, Historian Server) where the command-line arguments exhibit high entropy (Shannon entropy > 4.5 bits per byte), contain base64 encoded strings, or execute script files from non-standard user-writable directories (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Users\\Public\\`, `C:\\Windows\\Temp`). This also includes instances where `wscript.exe` or `cscript.exe` is spawned by an untypical parent process (e.g., web browser, email client, Microsoft Office application) or attempts to establish network connections to unapproved external or internal destinations (Zeek conn.log, Zeek dns.log).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers",
            "action": "1. **Symbolic Logic**: Create an alert (Windows Event ID 4688) for `wscript.exe` or `cscript.exe` process creations on ICS assets (EWS, HMIs, Historian Servers) where the command-line arguments include known malicious patterns (e.g., specific C2 URLs, IP addresses, or known malware domain indicators) or execute script files from common temporary/user-writable directories (`%TEMP%`, `C:\\Windows\\Temp`, `%APPDATA%`, `C:\\Users\\Public\\`). Additionally, configure alerts for executions where the parent process is unusual (e.g., `iexplore.exe`, `outlook.exe`, `winword.exe`) or if the script host initiates outbound network connections (Zeek conn.log) to threat intelligence-identified destinations (Zeek dns.log). 2. **Statistical Method**: For all `wscript.exe` and `cscript.exe` executions (Windows Event ID 4688), calculate the Shannon entropy of the full command-line arguments. Establish a 60-day baseline for entropy scores per asset and alert if any new execution's entropy score exceeds the 99th percentile of its historical baseline, indicating potential obfuscation. Track the frequency of unique script execution paths per asset over a 90-day window; flag any execution from a path that has not been observed in this period or falls below the 0.1st percentile of observed paths, indicating extreme rarity. 3. **Machine Learning**: Employ a supervised machine learning model (e.g., Random Forest or Gradient Boosting) trained on historical `wscript.exe` and `cscript.exe` command-line arguments (Windows Event ID 4688) and their known outcomes (benign/malicious) to classify new executions, alerting on those with a high probability of being malicious (e.g., > 0.7 confidence). Additionally, use a clustering algorithm (e.g., DBSCAN or K-Means) on features extracted from command-line arguments (e.g., length, character distribution, presence of specific keywords) to identify new, anomalous clusters of script host activity that deviate significantly from established benign groups."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]