[
  {
    "information_requirement": "Is an adversary attempting to inhibit our ability to respond to a process disruption or failure? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0878",
        "name": "Alarm Suppression",
        "evidence": [
          {
            "description": "Observed unauthorized modification, deletion, or access attempts on critical alarm configuration files (e.g., INI, XML, DB files), scripts, or associated executable binaries on HMI, EWS, or SCADA servers, identifiable by file system access logs.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4660"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Historian Servers",
            "action": "1. **Symbolic Logic:** Identify critical alarm configuration files (e.g., .ini, .xml, .db files in known HMI/SCADA application directories) and service executables. Create alerts for `Windows Event ID 4663` (File System Object Access) indicating modification or deletion of these files by non-whitelisted processes or users. Additionally, alert on `Windows Event ID 4688` (Process Creation) where parent processes like `cmd.exe` or `powershell.exe` are spawned by non-HMI/SCADA applications to interact with these critical files. Alert on `Windows Event ID 4656` (Object Access Attempt) for denied access to these files. 2. **Statistical Method:** Baseline the hourly frequency of `Windows Event ID 4663` events on each critical HMI/EWS for specific alarm configuration files. Alert if the observed event rate exceeds the 99th percentile of the historical hourly rate for that host, indicating an unusual surge in file modifications. For processes interacting with alarm configurations, calculate the Shannon entropy of their command-line arguments over a rolling 1-hour window and alert on values significantly below the historical average (e.g., 3 standard deviations), indicating highly repetitive or targeted commands. 3. **Machine Learning Application:** Implement a time-series anomaly detection model (e.g., ARIMA or Prophet) on the count of `Windows Event ID 4663` events per host targeting critical alarm files. Flag as anomalous any sustained deviation (e.g., 3 consecutive data points outside the 95% prediction interval) from the forecasted normal event rate, which could indicate a coordinated attack on alarm configurations."
          },
          {
            "description": "Detection of unauthorized or anomalous ICS protocol write commands (e.g., Modbus Function Codes 5, 6, 15, 16; S7Comm write requests) targeting controller registers or memory locations known to control alarm states, thresholds, or suppression flags, as observed in network traffic.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control), DMZ for remote access to OT, Safety Instrumented System (SIS) network zones",
            "action": "1. **Symbolic Logic:** Create a whitelist of authorized source IP addresses, destination controller IPs, and specific ICS function codes (e.g., Modbus Function Codes 5, 6, 15, 16) permitted for write operations from `Zeek modbus.log` or `Zeek s7comm.log`. Generate an immediate alert for any write command that violates this whitelist (e.g., unauthorized source, unauthorized destination, or unauthorized function code). Specifically, identify known register addresses for alarm bits or thresholds and alert on any write to these addresses by non-whitelisted sources. 2. **Statistical Method:** For authorized write commands, baseline the hourly frequency of write operations per source IP and destination controller, as well as the values being written. Alert if the observed frequency or written values exceed the 99th percentile of historical activity for that specific source-destination pair. Additionally, over a rolling 30-minute window, calculate the Shannon entropy of target register addresses written to by a single source; a sudden decrease (e.g., 2 standard deviations below the mean) could indicate focused, malicious manipulation rather than normal operations. 3. **Machine Learning Application:** Apply an unsupervised anomaly detection algorithm (e.g., Isolation Forest or One-Class SVM) to a feature set derived from `Zeek modbus.log` or `Zeek s7comm.log` entries, including source IP, destination IP, function code, register address, and value written. Train the model on historical normal ICS write operations. Flag connections or command sequences that are identified as outliers compared to the established baseline, indicating rare or unusual write patterns potentially indicative of alarm suppression."
          },
          {
            "description": "Absence of expected alarm generation in the alarm management system (e.g., custom application logs, Windows Event Logs) despite critical process variables, observed in ICS network traffic (e.g., Modbus reads), consistently exceeding predefined operational safety or alarm thresholds for a sustained duration.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Windows Event Log (Application)",
              "Custom Application Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian Servers, Alarm & Event Servers, SCADA Servers, OT Network segments monitoring Level 1 (Basic Control) process data",
            "action": "1. **Symbolic Logic:** Define critical process variables (e.g., specific Modbus register addresses for temperature, pressure) and their corresponding alarm thresholds. Implement a stateful correlation rule: if a process variable observed in `Zeek modbus.log` or `Zeek s7comm.log` consistently exceeds its alarm threshold for a sustained period (e.g., >10 seconds, confirmed by multiple samples), AND no corresponding alarm event (e.g., specific log message patterns in `Windows Event Log (Application)` or `Custom Application Logs`) is logged on the central alarm server within an expected timeframe (e.g., 5-15 seconds), then generate a 'Missing Alarm' alert. 2. **Statistical Method:** For each critical process variable, calculate the average and 99th percentile of the time it takes for an alarm to be generated after its threshold is exceeded, based on historical data. Alert if the observed alarm generation delay for a given event significantly exceeds this statistical threshold (e.g., 3 standard deviations from the mean). Additionally, monitor the distribution of process values in `Zeek modbus.log`; an unusually flat distribution, values consistently just below a threshold, or a sudden lack of variance, without expected alarms, could be flagged using statistical process control (e.g., CUSUM charts). 3. **Machine Learning Application:** Train a simple classification model (e.g., Logistic Regression or Decision Tree) that learns the normal relationship between process variable values (from `Zeek modbus.log` or `Zeek s7comm.log` over a time window) and the generation of alarm events (from `Windows Event Log (Application)` or `Custom Application Logs`). When the model predicts an alarm *should* have occurred based on the observed process data, but no corresponding alarm event is found in the logs within the expected timeframe, flag it as a 'Predicted Alarm Missed' anomaly. This model should be retrained periodically to adapt to system changes and avoid concept drift."
          },
          {
            "description": "Explicit termination, unexpected stoppage, or disabling of critical alarm management services or processes (e.g., HMI display, alarm logger, notification services) via system commands, configuration changes, or direct manipulation on HMI, EWS, or alarm servers, resulting in a cessation of alarm generation, logging, or display.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 7034",
              "Windows Event ID 4697",
              "Windows Event ID 4700",
              "Windows Event ID 4701"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Alarm & Event Servers, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Domain Controllers (for Group Policy changes affecting services)",
            "action": "1. **Symbolic Logic:** Maintain a watchlist of critical alarm-related service names (e.g., 'HMI_Alarm_Service', 'SCADA_Notifier', 'AlarmLogger.exe') and their associated executable paths. Create an immediate alert upon `Windows Event ID 7036` (Service Control Manager) indicating a service from the watchlist has transitioned to a 'stopped' state, or `Windows Event ID 7034` (Service Control Manager) indicating a service terminated unexpectedly. Also, alert on `Windows Event ID 4688` (Process Creation) where the `CommandLine` contains `taskkill`, `net stop`, `sc stop`, or similar commands explicitly targeting a watchlist service or process. Additionally, monitor for `Windows Event ID 4697` (A service was installed in the system) followed by an immediate stop, or `Windows Event ID 4700`/`4701` (Service enabled/disabled). 2. **Statistical Method:** Baseline the typical uptime and downtime durations for each critical alarm service on its respective host. Alert if a service's downtime exceeds the 99th percentile of its historical uptime, or if the frequency of service stoppages (from `Windows Event ID 7036` or `7034`) exceeds the 99th percentile for a given rolling time window (e.g., hourly). Calculate the average duration between a service stopping and restarting; flag instances where a service remains stopped significantly longer than this historical average (e.g., 3 standard deviations beyond the mean). 3. **Machine Learning Application:** Implement a time-series anomaly detection model (e.g., LSTM or state-space model) on the operational status (running/stopped) of critical alarm services, leveraging `Windows Event ID 7036` and `7034`. Train the model on historical service states, including scheduled maintenance. A sudden, unexpected, and sustained 'stopped' state, particularly outside of scheduled maintenance windows or without preceding system reboot events, would be flagged as an anomaly. This could involve a simple state-transition model that learns expected state changes and alerts on unexpected ones based on historical patterns of service lifecycle."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]