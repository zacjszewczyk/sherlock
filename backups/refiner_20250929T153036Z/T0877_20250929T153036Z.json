[
  {
    "information_requirement": "Is an adversary collecting PLC I/O image data to understand the industrial process? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0877",
        "name": "I-O Image",
        "evidence": [
          {
            "description": "Successful ICS protocol read commands (e.g., S7COMM Read Variable, Modbus Function Code 03/04 - Read Input/Holding Registers, EtherNet/IP Read Tag Service) observed in network traffic, specifically targeting well-known PLC I/O memory addresses or data blocks (e.g., S7COMM DB1, DB2, or specific memory areas like P, I, Q; Modbus registers 0xxxx, 1xxxx for inputs/outputs) where the initiating source IP address is not explicitly whitelisted in the asset management system as an authorized HMI, Engineering Workstation (EWS), or Historian for that specific destination PLC.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, including Level 1 (Control) and Level 2 (Supervisory) zones, specifically network tap points or SPAN ports on managed switches connected to PLC subnets (e.g., Safety PLC subnet, Production Line 1 PLC subnet) and between Level 2/3 firewalls.",
            "action": "1. Symbolic Logic: Maintain an up-to-date whitelist of authorized source IP addresses (e.g., HMIs, EWS, Historians) permitted to initiate read commands to each specific PLC IP address and specific I/O memory regions. Filter Zeek s7comm.log, modbus.log, and enip.log for 'read' function codes or services targeting PLC I/O memory. For each detected read command, check if the `id.orig_h` (source IP) is present in the corresponding PLC's authorized whitelist. Generate a high-priority alert for any read attempt from an unlisted IP address.\n2. Statistical: For each PLC, establish a rolling 30-day baseline of unique source IP addresses observed initiating read commands. Detect and alert on any source IP that has not been observed in the baseline period. Additionally, calculate the daily frequency of unique source IPs for each PLC and alert if the current day's unique source IP count exceeds the 99th percentile of the historical baseline.\n3. Machine Learning: Develop a supervised machine learning model (e.g., Random Forest or Support Vector Machine) trained on historical Zeek logs to classify source IP/destination PLC/function code combinations as 'authorized' or 'unauthorized' based on existing asset inventory and observed normal communication patterns. Retrain the model periodically and use it to score new read commands, alerting on classifications indicating unauthorized access with a confidence score above a defined threshold (e.g., 0.95)."
          },
          {
            "description": "An authorized HMI or Engineering Workstation (EWS) source IP address, as identified by the asset management system, initiates a volume or frequency of ICS protocol read commands (e.g., S7COMM function code 0x04 'Read Var', Modbus Function Code 03 'Read Holding Registers', EtherNet/IP 'Read_Tag' service) directed at a specific PLC's I/O memory addresses that exceeds its established historical baseline (e.g., average requests per minute) by a defined statistical threshold (e.g., 3 standard deviations, 99th percentile, or a fixed operational maximum) over a rolling 15-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network tap points or SPAN ports on managed switches within PCN segments, specifically monitoring traffic flows between Level 3 (Manufacturing Operations Management) devices like HMIs and Engineering Workstations and Level 2 (Control Systems) devices like PLCs, particularly in critical production zones or safety instrumented system (SIS) networks.",
            "action": "1. Symbolic Logic: Identify any authorized source (HMI/EWS) to destination (PLC) pair where the count of ICS read commands (e.g., `s7comm.log:function=Read_Var`, `modbus.log:func=Read_Input_Registers`, `enip.log:service=Read_Tag`) within a 5-minute window exceeds a fixed, hard-coded operational maximum (e.g., 1000 requests/5min) known to be impossible under normal conditions or defined by vendor specifications. Generate an immediate alert for such an event.\n2. Statistical: For each unique `id.orig_h` (HMI/EWS) to `id.resp_h` (PLC) pair, calculate a rolling 1-hour baseline for the average and standard deviation of ICS read command frequency (e.g., requests per minute) over the past 30 days. Detect and alert when the current read command frequency for a given pair exceeds its established 99th percentile or 3 standard deviations from its mean. Additionally, calculate a percentile rank for each observed frequency and alert if it falls above the 99.5th percentile.\n3. Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA, Prophet, or Isolation Forest) on the read command frequency for each authorized source-destination PLC pair. Train the model on at least 90 days of historical data. Generate an alert when the model detects a significant deviation from the predicted frequency, indicating a potential surge in I/O image collection, with an anomaly score exceeding a predefined threshold."
          },
          {
            "description": "Observation of ICS protocol read requests utilizing diagnostic, vendor-specific, or direct memory access function codes/services (e.g., S7COMM function code 0x06 'Block Read', Modbus Function Code 23 'Read/Write Multiple Registers', EtherNet/IP explicit messaging with Class 0x88 'Memory' or Instance 0x01 'Memory Object') that are not part of the documented and baselined normal operational function codes or services used by authorized HMIs or EWS for routine process variable polling on a given PLC.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Deep Packet Inspection (DPI) points on network taps or SPAN ports within PCN segments (e.g., SCADA network, Process Network) where Level 3 (Manufacturing Operations Management) devices like EWS and HMIs communicate with Level 2 (Control Systems) devices like PLCs, especially where granular ICS protocol analysis is performed.",
            "action": "1. Symbolic Logic: Maintain a whitelist of authorized ICS protocol function codes or services (e.g., `s7comm.log:function`, `modbus.log:func`, `enip.log:service`) for each unique source (HMI/EWS) to destination (PLC) pair, based on vendor documentation and normal operations. Filter Zeek logs for read commands and alert immediately if any function code or service observed is not present in the established whitelist for that specific communication path.\n2. Statistical: For each source IP, calculate the Shannon entropy of observed ICS function codes in Zeek s7comm.log, modbus.log, and enip.log over a rolling 1-hour window. Establish a baseline for this entropy. Alert when the current entropy score for a source IP exceeds its 95th percentile or 2 standard deviations from the mean, indicating a sudden diversification of function code usage. Additionally, track the frequency of 'rare' or 'uncommon' function codes (those observed less than 0.1% of the time historically) and alert if their frequency significantly increases (e.g., by 500% compared to average).\n3. Machine Learning: Employ an unsupervised anomaly detection model (e.g., One-Class SVM or Autoencoder) on the distribution of ICS function codes for each source IP. Train the model on historical data representing normal communication patterns. Flag and alert on function code distributions that deviate significantly from the learned normal profile, indicating the use of unusual or unexpected read commands, with an anomaly score exceeding a defined threshold."
          },
          {
            "description": "A source IP identified as an Engineering Workstation (EWS) in the asset management system initiates ICS protocol read commands to a PLC that align with previously defined anomalous behaviors (e.g., from an unapproved IP, exceeding frequency thresholds, or using unusual function codes), *and* concurrently exhibits host-based suspicious activity. This host activity includes the execution of processes (Windows Event ID 4688) not present in the EWS's approved software baseline, command-line executions with unusual or obfuscated arguments (e.g., `powershell.exe -EncodedCommand`, `cmd.exe /c findstr /s /i password *.txt`), or the presence/execution of known unauthorized tools (e.g., `mimikatz.exe`, `psexec.exe`, `nmap.exe`).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices identified as Engineering Workstations (EWS) within the Level 3 (Manufacturing Operations Management) zone, including dedicated programming workstations, maintenance laptops, and virtualized EWS environments. Also, network tap points or SPAN ports within PCN segments where these EWS communicate with Level 2 (Control Systems) PLCs.",
            "action": "1. Symbolic Logic: When a network alert for anomalous PLC read activity (from any of the preceding actions) is triggered by an EWS IP, immediately query Windows Event ID 4688 (Process Creation) logs from that EWS for the 15-minute window before and after the network alert. Search for specific blacklisted process names (e.g., `mimikatz.exe`, `psexec.exe`, `nmap.exe`) or known malicious command-line arguments (e.g., `powershell.exe -EncodedCommand ...`, `cmd.exe /c type C:\\Users\\Public\\password.txt`). Alert on any direct matches, indicating a strong correlation with a known compromise tool.\n2. Statistical: For each EWS, establish a baseline of unique processes and their execution frequency (from Windows Event ID 4688) over the past 30 days. Calculate a rarity score for each executed process and command line by comparing it against the historical baseline. When a network alert occurs, look for processes on the EWS within the anomalous time window that have a rarity score exceeding the 99th percentile or have not been observed in the last 90 days. Additionally, calculate the entropy of command-line arguments for frequently used utilities (e.g., `powershell.exe`) and alert on sudden spikes in entropy (e.g., exceeding 2 standard deviations from the mean).\n3. Machine Learning: Develop a multi-modal anomaly detection system that correlates network flow data (Zeek conn.log, s7comm.log, modbus.log, enip.log) with host process creation logs (Windows Event ID 4688) for EWS. Train a model (e.g., a Graph Neural Network or a sequence-based model) to identify patterns of network-host activity that are indicative of compromise, such as an EWS initiating unusual PLC reads *followed by* the execution of a privilege escalation tool. Alert when the model identifies a high-risk combined activity sequence with a probability or anomaly score exceeding a predefined threshold (e.g., 0.8)."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]