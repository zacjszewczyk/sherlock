[
  {
    "information_requirement": "Is an adversary attempting to disrupt industrial control system (ICS) device functionality via Denial of Service? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A statistically significant and sustained increase (exceeding the 95th percentile of the 7-day historical baseline) in network traffic volume (bytes/second or packets/second) or connection establishment rate (new connections/second) directed at a critical ICS device (e.g., PLC, RTU, HMI) over a continuous period of at least 60 seconds, particularly involving non-standard or malformed ICS protocol traffic.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments, particularly the network interfaces of critical controllers (PLCs, RTUs) and Human-Machine Interfaces (HMIs), and the Control System DMZ.",
            "action": "1. **Symbolic Logic**: Query Zeek `conn.log` for entries where `id.resp_h` matches a predefined watchlist of critical ICS device IP addresses and `id.resp_p` matches known ICS protocol ports (e.g., Modbus TCP 502, EtherNet/IP 44818). Identify and flag connections where `orig_bytes` or `resp_bytes` are zero for a given time window (e.g., 5 seconds) while `duration` is non-zero, indicating potential empty floods or malformed requests. Additionally, identify connections with `conn_state` 'S0' (SYN sent, no reply) or 'RSTO' (originator sent TCP reset) at an elevated rate directed at ICS devices. 2. **Statistical Method**: For each critical ICS device, calculate the rolling 5-minute average and standard deviation of `orig_bytes`, `resp_bytes`, `orig_pkts`, `resp_pkts`, and unique `id.orig_h` counts from `conn.log`. Generate an alert when any of these metrics exceed 3 standard deviations from their respective rolling means or cross the 99th percentile of historical values (e.g., last 7 days) for a continuous period of at least 60 seconds, specifically for traffic directed at ICS assets. 3. **Machine Learning**: Implement a time-series anomaly detection model (e.g., Prophet or Isolation Forest) on aggregated `conn.log` data (e.g., total bytes per minute, connection count per minute, unique source IP count per minute) directed at critical ICS devices. The model should learn normal traffic patterns and trigger an alert when it identifies a significant, sustained deviation from these learned patterns, indicating a potential DoS event."
          },
          {
            "description": "A sustained, statistically anomalous increase (exceeding the 95th percentile of the 7-day historical baseline) in network connection resets (`RST` flag) or explicit rejections (Zeek `conn_state` 'REJ', 'RSTO', 'RSTR', 'RSTRH') originating from a specific critical ICS device, occurring within 30 seconds of receiving a high volume of traffic from a single or small cluster of source IP addresses, indicating the device is overwhelmed or malformed traffic is being sent.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System DMZ, network interfaces of Programmable Logic Controllers (PLCs) and Remote Terminal Units (RTUs), and SCADA Servers.",
            "action": "1. **Symbolic Logic**: Filter Zeek `conn.log` for entries where `id.resp_h` is a critical ICS device IP and `conn_state` is one of 'REJ', 'RSTO', 'RSTR', or 'RSTRH'. Additionally, identify connections where `resp_pkts` is significantly higher than `orig_pkts` but with minimal `resp_bytes` (e.g., less than 10 bytes) for a given `duration`, indicating potential malformed replies or device struggle. Correlate these events with `id.orig_h` counts to identify single or few sources. 2. **Statistical Method**: For each critical ICS device, establish a 5-minute rolling average and standard deviation for the count of connections with `conn_state` indicating resets/rejections. Trigger an alert if this count exceeds the 99th percentile of its historical baseline (e.g., last 7 days) for at least 30 seconds, specifically when correlated with a sudden spike in traffic originating from a small cluster of source IPs (e.g., less than 5 unique `id.orig_h` values contributing to >80% of the traffic). 3. **Machine Learning**: Apply an unsupervised clustering algorithm (e.g., K-Means or DBSCAN) to group `conn.log` entries based on `id.resp_h`, `id.orig_h`, `conn_state`, `duration`, and `orig_pkts`/`resp_pkts`. Identify clusters that represent unusual patterns of high-frequency, short-duration connections with error states to specific ICS devices, especially those originating from a limited set of source IPs, indicating potential DoS activity."
          },
          {
            "description": "An unexpected Application Error (Windows Event ID 1000), Application Hang (Windows Event ID 1002), or Service Control Manager event indicating abnormal termination (Windows Event ID 7031, 7034) for a critical ICS process or service (e.g., HMI.exe, HistorianService.exe) on a Windows-based ICS host, occurring within 60 seconds of a statistically significant increase in network connection attempts (from Zeek `conn.log`) or other resource-intensive network activity directed at that host.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), and Historian Servers within the ICS network.",
            "action": "1. **Symbolic Logic**: Define a watchlist of critical processes and services (e.g., `hmi_app.exe`, `historian.exe`, `scada_server.exe`) on Windows-based ICS hosts. Configure alerts for Windows Event IDs 1000 (Application Error), 1002 (Application Hang), 7031 (Service terminated unexpectedly), and 7034 (Service terminated unexpectedly) when generated by processes/services on this watchlist. Prioritize alerts from high-value ICS assets. 2. **Statistical Method**: Upon detection of any critical application/service error or hang event (from Action 1), query Zeek `conn.log` for the affected host's inbound traffic during the 60 seconds prior to the event. Calculate the percentile rank of `orig_bytes`, `resp_bytes`, and `connection_count` directed at the host during that period compared to the host's historical 5-minute average (e.g., last 7 days). Generate an alert if any of these network metrics exceed the 99th percentile, especially if originating from an internal IP address with no prior communication history with the affected host. 3. **Machine Learning**: Develop a correlation model (e.g., using a graph neural network or a Bayesian network) to identify unusual temporal relationships between spikes in network traffic (e.g., connection count, bytes/second from Zeek `conn.log`) directed at a specific Windows-based ICS host and the subsequent occurrence of critical application/service error or hang events (Windows Event IDs 1000, 1002, 7031, 7034) on that host. The model should learn typical network-to-host event causality and flag deviations where high network activity immediately precedes host instability, particularly when the network activity involves known DoS attack patterns."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]