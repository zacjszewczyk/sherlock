[
  {
    "information_requirement": "Is an adversary exploiting remote services to gain initial access into the ICS environment?",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "An inbound network connection from an IT network segment to an OT asset's service port (e.g., SMB/445, RDP/3389, VNC/5900, Modbus/502, DNP3/20000) that is either not whitelisted, targets a port with no established baseline, or exhibits a protocol anomaly (e.g., a non-standard SMB negotiation sequence, an unexpected Modbus function code) or a payload entropy (Shannon entropy) exceeding the 95th percentile for that protocol's typical traffic.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek smb.log",
              "Zeek rdp.log",
              "Firewall logs",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Industrial Demilitarized Zone (IDMZ) network segments, firewalls at the IT/OT boundary, remote access gateways for OT, historian servers with external interfaces, and network switches/routers connecting IT and OT zones.",
            "action": "1. Monitor Zeek conn.log for all inbound connections crossing the IT/OT boundary (e.g., orig_h in IT subnet, resp_h in OT subnet). Filter for connections targeting known vulnerable service ports (e.g., SMB/445, RDP/3389, VNC/5900) or ICS protocols (e.g., Modbus/502, DNP3/20000) that are not on an approved whitelist. Correlate with Zeek notice.log for signatures of known exploits (e.g., SMB_NT_Trans_Pipe_Access_SMBv1_Exploit_Attempt) or protocol anomalies from Zeek smb.log, rdp.log, or dce_rpc.log (e.g., unexpected SMB commands, invalid RDP sequence). Alert on matches.\n2. Establish a baseline for each IT/OT boundary connection, tracking the count of unique destination IPs, connection duration, and data volume per service port over a 7-day rolling window. For each connection, calculate the Shannon entropy of the first 1024 bytes of the application layer payload (if available from Zeek's ssl.log or reconstructed from PCAP). Alert when a connection's payload entropy exceeds the 95th percentile for that specific service's historical traffic, or when the connection volume to a specific OT service port from an IT source exceeds 3 standard deviations from its historical mean.\n3. Implement a time-series anomaly detection model (e.g., Isolation Forest or ARIMA) on aggregated network flow statistics (e.g., connection volume, unique source/destination pairs, protocol distribution) for IT/OT boundary traffic. Train the model on at least 30 days of historical data. Trigger an alert when the model detects sudden spikes, drops, or significant deviations from learned communication patterns in connection metrics, indicating potential scanning or exploit attempts."
          },
          {
            "description": "A critical OT asset's service (e.g., on an HMI, SCADA server) registers an application crash (Windows Event ID 1000) or unexpected service termination (Windows Event ID 7031, 7034) within 60 seconds of receiving an inbound network connection from an IT network segment, where the connection's destination port matches the affected service's listening port.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 7034",
              "Windows Event ID 7031",
              "Zeek conn.log",
              "Zeek pe.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) within the PCN/SCN, Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and critical Windows-based control system assets in the Process Control Network (PCN) or Supervisory Control Network (SCN).",
            "action": "1. Join Zeek conn.log entries (where orig_h is from an IT network segment and resp_h is an OT asset) with host-based Windows Event IDs on the resp_h. Specifically, search for Windows Event ID 1000 (Application Error), Windows Event ID 7034 (Service Control Manager: Service Terminated Unexpectedly), or Windows Event ID 7031 (Service Control Manager: Service Terminated). Correlate events where the Faulting Application or Service Name matches the service listening on the connection's destination port. Alert if a service termination event occurs within a 60-second window after the initial network connection.\n2. Baseline the hourly frequency of Windows Event ID 1000, 7034, and 7031 for each critical service on OT assets. Monitor for sudden increases in these event types. Alert when the rate of these events, especially for services exposed to the IT network (e.g., SMB, RDP, historian web services), exceeds the 99th percentile or 3 standard deviations above the historical mean for that service, particularly when preceded by a network connection from an unusual source IP or to an unusual port.\n3. Develop a binary classification model (e.g., Logistic Regression or Random Forest) to distinguish between legitimate service crashes and exploit-induced crashes. Features for the model should include network connection metadata (source IP, destination port, protocol anomalies from Zeek logs), host event details (process name, error codes, faulting module, crash time from Windows Event Logs), and temporal proximity. Train the model on labeled historical data to predict exploit-induced crashes."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary exploiting remote services to move laterally within the ICS environment?",
    "tactic_id": "TA0109",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "An OT host initiates connections on common remote service ports (e.g., SMB/445, RDP/3389, VNC/5900) or ICS protocols (e.g., Modbus/502, DNP3/20000) to more than 10 unique destination OT hosts within a 5-minute window, or to a number of unique destinations exceeding its 99th percentile baseline for a 24-hour period by a factor of 2 or more.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek rdp.log",
              "Zeek dce_rpc.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Supervisory Control Network (SCN), Process Control Network (PCN), individual device networks (e.g., for PLCs, RTUs, IEDs), internal OT firewalls, and network switches/routers within the OT environment.",
            "action": "1. Analyze Zeek conn.log for intra-OT network traffic (where both orig_h and resp_h are within OT network segments). For each source host, count the number of unique destination IP addresses it connects to on common remote service ports (e.g., SMB/445, RDP/3389, VNC/5900) or ICS ports (e.g., Modbus/502, DNP3/20000) within a 5-minute sliding window. Alert if a host connects to more than 10 unique destinations on these ports within that window, or if any connection is made to a known blacklisted IP address or an unapproved port for OT communication.\n2. For each OT source host, calculate a rolling 24-hour baseline of the 99th percentile for unique destination IPs contacted on specific remote service ports (e.g., SMB, RDP, Modbus). Alert when a host's current unique destination count within a 10-minute window exceeds this 99th percentile by a factor of 2 or more. Apply a similar statistical baseline and alerting for connection frequency and total data volume from OT hosts to multiple destinations.\n3. Implement a graph-based anomaly detection algorithm (e.g., PageRank or Community Detection) that models host interactions from Zeek conn.log data within the OT network. Train the model to identify nodes (hosts) exhibiting unusual 'bursty' connection patterns, sudden increases in their degree centrality, or deviations from learned communication 'neighborhoods' that suggest scanning, propagation, or C2 activity. Use a clustering algorithm (e.g., K-means or DBSCAN) to group hosts by their normal communication patterns and flag hosts that fall into unusual clusters."
          },
          {
            "description": "A critical OT application process (e.g., Historian.exe, HMI_Runtime.exe, SCADA_Server.exe) on an OT asset spawns a child process (Windows Event ID 4688, Sysmon Event ID 1) that is not part of its established legitimate child process whitelist, such as command interpreters (cmd.exe, powershell.exe), scripting engines (python.exe, wscript.exe), or unsigned executables, within 120 seconds of receiving an inbound network connection from another OT asset.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and other critical Windows-based control system assets within the Process Control Network (PCN) or Supervisory Control Network (SCN).",
            "action": "1. Join Zeek conn.log entries (where both orig_h and resp_h are OT assets) with Windows Event ID 4688 (Process Creation) or Sysmon Event ID 1 on the resp_h. Trigger an alert when an incoming network connection from another OT host is followed within a 120-second window by a process creation event where the parent process is a whitelisted critical OT application (e.g., Historian.exe, HMI_Runtime.exe, SCADA_Server.exe) and the child process is an unexpected executable (e.g., cmd.exe, powershell.exe, wmic.exe, certutil.exe) or an unsigned binary not on a known good list.\n2. Establish a baseline of normal parent-child process relationships for each critical OT application on each host using Windows Event ID 4688 or Sysmon Event ID 1. Use frequency analysis and entropy scores on command-line arguments to identify process creation events where the child process, its command-line arguments, or its execution path is statistically rare (e.g., below the 1st percentile) or deviates significantly from established normal parent-child relationships for that specific OT application. Alert on deviations exceeding a set threshold (e.g., 3 standard deviations from the mean frequency).\n3. Develop a behavioral anomaly detection model (e.g., a sequence model like an LSTM, or a Hidden Markov Model) that learns the typical sequence and characteristics of processes spawned by critical OT applications based on Windows Event ID 4688 or Sysmon Event ID 1. The model should detect deviations in the process execution chain (e.g., an HMI spawning powershell.exe directly) or the spawning of unusual child processes that do not fit the learned normal behavior, especially when correlated with preceding network activity from other OT hosts."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.2",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]