[
  {
    "information_requirement": "Is an adversary attempting to discover systems on the ICS network? (TA0102 - Discovery)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0846",
        "name": "Remote System Discovery",
        "evidence": [
          {
            "description": "A single source IP address, especially one not categorized as an engineering workstation or server, generates a total connection count exceeding the 99th percentile of its historical 5-minute average, AND this activity involves connection attempts to more than 50 unique destination IP addresses or 100 unique destination ports within a 5-minute window, particularly targeting common ICS/OT ports (e.g., 502 Modbus, 102 S7comm, 44818 EtherNet/IP, 20000 DNP3) or a wide range of ports across a subnet.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek icmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (e.g., Control Network, Safety Instrumented System Network), OT/IT DMZ, Engineering Subnet, Process Control Network (PCN)",
            "action": "1. Symbolic Logic: Query Zeek conn.log for id.orig_h not matching entries in the 'Authorized ICS Management Hosts' whitelist. Identify events where id.resp_p is one of the common ICS/OT ports (502, 102, 44818, 20000) or falls within common ephemeral port ranges (e.g., 49152-65535). Further filter for a count of unique id.resp_h greater than 50 OR a count of unique id.resp_p greater than 100 within any 5-minute window for the same id.orig_h. 2. Statistical Method: Calculate for each id.orig_h in Zeek conn.log the unique count of id.resp_h and id.resp_p, and the total connection count within rolling 5-minute windows. Establish a 7-day moving average baseline for these metrics for each id.orig_h. Generate an alert if, for any id.orig_h, the current unique destination IP count, unique destination port count, or total connection count exceeds the 99th percentile of its respective 7-day historical baseline, especially if id.resp_p includes known ICS/OT ports. 3. Machine Learning Application: Utilize a time-series anomaly detection model (e.g., Isolation Forest or Prophet) applied to the aggregated metrics (unique destination IPs per source IP per 5-minute window, unique destination ports per source IP per 5-minute window, total connection count per source IP per 5-minute window) from Zeek conn.log. Train the model on at least 30 days of historical data for each id.orig_h. Generate an alert for significant deviations (e.g., anomaly score above 0.7 or outside 3-sigma bounds) from established patterns, indicating potential network sweeps."
          },
          {
            "description": "A process on an ICS Engineering Workstation (EWS) or Human-Machine Interface (HMI) executes known network discovery utilities (e.g., ping.exe, net.exe, nbtstat.exe, ipconfig.exe, arp.exe, or potentially nmap.exe if installed) with command-line arguments indicative of network enumeration (e.g., /a, /enum, subnet ranges like 192.168.1.0/24, -sP for ping scan). This activity is initiated by an unexpected parent process or user context, or occurs outside of scheduled maintenance windows.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, Data Historians, Jump Servers within the OT network",
            "action": "1. Symbolic Logic: Query Windows Event ID 4688 for New Process Name matching ping.exe, net.exe, nbtstat.exe, ipconfig.exe, arp.exe, or nmap.exe. Apply regex matching to the CommandLine field for arguments indicative of network enumeration, such as (?i)/a|/enum|\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/\\d{1,2}|-sP|-sn. Further filter for ParentProcessName not in a whitelist of expected parent processes (e.g., explorer.exe, cmd.exe by authorized users) or Security ID not belonging to authorized users. Also, check if TimeCreated falls outside of documented normal operational hours or maintenance windows. 2. Statistical Method: For each unique host and user in Windows Event ID 4688, calculate the rolling 24-hour count of executions for the identified discovery utilities with suspicious command-line arguments. Establish a 30-day historical baseline for this count. Generate an alert if the current execution count exceeds the 99th percentile of its historical average for that specific host-user combination. Additionally, flag any execution where the ParentProcessName is not a known interactive user process or a whitelisted automation script. 3. Machine Learning Application: Implement a graph-based anomaly detection model (e.g., using Graph Neural Networks or community detection algorithms) on process execution trees derived from Windows Event ID 4688. Features for the graph nodes would include New Process Name, CommandLine, ParentProcessName, and Security ID. Train the model on historical process execution data (at least 60 days) to learn normal parent-child relationships and command-line patterns. Generate an alert when a process execution chain deviates significantly from learned normal patterns, specifically flagging instances where non-administrative users or unexpected parent processes execute discovery tools with enumeration arguments."
          },
          {
            "description": "A source IP address not present in a pre-defined whitelist of authorized ICS engineering or management hosts initiates more than 10 unique ICS-specific discovery requests (e.g., EtherNet/IP List Identity requests, Modbus Read Device Identification, S7comm Get Block Info, DNP3 Get Device Attributes) to more than 5 unique destination ICS devices (PLCs, RTUs, HMIs) within a 1-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek enip.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System LAN, connections to PLCs and RTUs, SCADA Server Network, Field Device Network",
            "action": "1. Symbolic Logic: Query Zeek s7comm.log, enip.log, modbus.log, and dnp3.log for records containing specific discovery function codes: 'List Identity' (EtherNet/IP), 'Read Device Identification' (Modbus function code 0x2B/43), 'Get Block Info' (S7comm), and 'Get Device Attributes' (DNP3). Filter for id.orig_h not matching entries in the 'Authorized ICS Management Hosts' whitelist. Generate an alert for any instance where a non-whitelisted host initiates one of these specific discovery requests. 2. Statistical Method: For id.orig_h not in the 'Authorized ICS Management Hosts' whitelist, aggregate the count of unique id.resp_h (ICS devices) and the total count of ICS discovery requests (based on specific function codes) from Zeek ICS logs within rolling 1-minute windows. Establish a baseline for these counts. Generate an alert if, for any non-whitelisted id.orig_h, the count of unique destination ICS devices exceeds 5 OR the total count of ICS discovery requests exceeds 10 within a 1-minute window. This threshold is chosen as any such activity from an unauthorized source is highly suspicious. 3. Machine Learning Application: Apply an unsupervised anomaly detection algorithm (e.g., DBSCAN or One-Class SVM) to features extracted from Zeek ICS protocol logs (s7comm, enip, modbus, dnp3), including id.orig_h, id.resp_h, protocol, function_code, and request_count aggregated over 1-minute intervals. Train the model on historical ICS network traffic for at least 30 days to establish normal interaction patterns. Generate an alert for activity clusters identified as outliers, particularly those characterized by a high number of unique id.resp_h or unusual function_code sequences originating from a single id.orig_h."
          },
          {
            "description": "A process on an Engineering Workstation (EWS) or HMI generates over 50 failed network connection attempts (e.g., TCP RST/SYN-ACK-RST, ICMP Destination Unreachable, or connection timeouts) to more than 20 unique destination IP addresses within a 60-second period, where the source process is not a known legitimate network diagnostics or management tool, and the activity occurs outside of normal operational hours.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek icmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, HMIs, ICS Network Segments, Servers within the OT network",
            "action": "1. Symbolic Logic: Correlate id.orig_h and ts from Zeek conn.log and icmp.log with ComputerName and TimeCreated from Windows Event ID 4688. Filter Zeek conn.log for conn_state values such as REJ (connection refused), RSTO (originator sent RST), S0 (connection attempt seen, no reply), S1 (SYN_SENT, no SYN_ACK), RSTR (responder sent RST). Filter Zeek icmp.log for icmp_type 'Destination Unreachable'. Identify the New Process Name from correlated Windows Event ID 4688 that initiated this network activity. Generate an alert if the process is not whitelisted as a legitimate network diagnostics or management tool AND the activity occurs outside of documented normal operational hours. 2. Statistical Method: For each New Process Name on an EWS/HMI (from Windows Event ID 4688), aggregate the count of failed network connection attempts (from Zeek conn.log and icmp.log) and the count of unique destination IPs within rolling 60-second windows. Establish a 30-day historical baseline for these metrics. Generate an alert if, for any process, the count of failed connection attempts exceeds 50 AND the count of unique destination IPs with failed connections exceeds 20 within a 60-second window. Additionally, consider alerting if the ratio of failed connections to total connections for a process exceeds the 99th percentile of its historical average. 3. Machine Learning Application: Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) trained on historical, labeled data of network activity (features: New Process Name from Windows Event ID 4688, id.orig_h, count_unique_resp_h, count_failed_connections, and distribution of conn_state values from Zeek logs aggregated over 60-second intervals). Label historical scanning activity as 'anomalous' and normal activity as 'benign'. Continuously feed real-time aggregated network connection patterns and associated process information into this model. Generate an alert when the model classifies an activity block as 'scanning' with a high confidence score (e.g., >0.9)."
          }
        ]
      }
    ],
    "version": "1.2",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]