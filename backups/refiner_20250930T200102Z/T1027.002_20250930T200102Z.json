[
  {
    "information_requirement": "Is the adversary evading defenses using software packing?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.002",
        "name": "Software Packing",
        "evidence": [
          {
            "description": "Execution of a file that matches a known malicious hash or contains static signatures of a known software packer.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Application servers, File shares, Email gateways",
            "action": [
              "For each new process creation (Windows Event ID 4688), calculate the file hash of the executable. Compare the hash against a threat intelligence feed of known malicious packed executables. Additionally, scan the file content using a YARA rule set designed to detect byte sequences or strings specific to common packers like UPX, MPRESS, Themida, and VMProtect. Alert on any match.",
              "For each new executable, extract the PE section names. Calculate the frequency of all section names observed across the environment over a 30-day rolling window to establish a baseline. Alert on executables containing section names that are statistically rare (e.g., in the bottom 5th percentile of frequency) or match known packer conventions (e.g., '.UPX0', '.UPX1').",
              "Develop a supervised classification model (e.g., Gradient Boosting) trained on features extracted from PE headers, including section names, import table size, and virtual vs. raw size ratios. Train the model on a labeled dataset of known packed and non-packed executables. Deploy the model to score all new executables in real-time, alerting on those classified as 'packed' with a confidence score greater than 0.90."
            ]
          },
          {
            "description": "An executable file exhibits heuristic characteristics of packing, such as abnormally high file entropy and a very low number of imported functions.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Development servers, Staging environments",
            "action": [
              "For each new executable identified via Windows Event ID 4688, scan its PE import table. Alert if the number of imported functions is below a defined threshold (e.g., fewer than 10 imports from KERNEL32.dll) and the file is not on an established allow-list of legitimate software with few imports.",
              "For each new executable, calculate the Shannon entropy of the binary. Establish a baseline entropy distribution for known-good executables in the environment. Alert on any new executable whose entropy is a statistical outlier, such as exceeding the 99th percentile of the baseline or a fixed high-value threshold (e.g., > 7.5 on a scale of 0-8).",
              "Use a clustering algorithm (e.g., DBSCAN) on features extracted from executables, such as file entropy, number of imported functions, and the ratio of virtual size to raw size for PE sections. Analyze clusters that form away from the main group of legitimate software. Profile these outlier clusters to identify groups of files that share packing characteristics, even if the specific packer is unknown."
            ]
          },
          {
            "description": "A process with static characteristics of packing (e.g., high entropy) performs suspicious runtime activities, such as spawning command-line interpreters or initiating beaconing-like network communications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints, Domain Controllers, Internet gateways, DNS servers",
            "action": [
              "Correlate processes having static packing indicators (high entropy, few imports) with subsequent child process creation (Windows Event ID 4688). Alert if such a process spawns a command-line interpreter ('cmd.exe', 'powershell.exe') or makes a network connection (Zeek conn.log) to an IP address or domain on a threat intelligence blocklist within 60 seconds of execution.",
              "For processes with high entropy, track their network behavior using Zeek conn.log. Calculate the time interval (jitter) and data volume between successive outbound connections. Compare these patterns to a baseline of typical application behavior. Flag processes exhibiting network traffic patterns where the standard deviation of the connection interval is low and the data volume per connection is consistent, indicating statistically regular beaconing.",
              "Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) on process behavior. For each process, create a time series of events including child processes created and network connections made. Train a model on the behavior of known-good applications. Monitor new high-entropy processes and alert when their sequence of actions results in a high reconstruction error, indicating a significant deviation from normal application behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]