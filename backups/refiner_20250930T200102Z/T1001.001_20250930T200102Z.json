[
  {
    "information_requirement": "Is the adversary using junk data to obfuscate command and control communications? (PIR)",
    "tactic_id": "TA0011",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1001.001",
        "name": "Junk Data",
        "evidence": [
          {
            "description": "A network connection is established with a remote IP address or domain that is present on a threat intelligence feed and is tagged with T1001.001 or associated malware.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Egress Firewalls, Internal DNS Resolvers",
            "action": [
              "Symbolic: Join network connection logs (Zeek conn.log) and DNS query logs (Zeek dns.log) against a threat intelligence feed of known C2 indicators (IPs, domains) tagged with T1001.001. Generate an alert for any observed match.",
              "Statistical: For all connections matching threat intelligence, calculate the ratio of bytes sent to bytes received (`orig_bytes` / `resp_bytes`). Flag connections where this ratio exceeds the 95th percentile for the given destination port, suggesting an anomalous data transfer pattern often seen with data padding.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from Zeek logs (protocol, duration, byte counts, port) and a binary label indicating if the connection matched a known T1001.001 indicator. Use the model to score new, non-matching connections for their likelihood of being related C2, prioritizing high-scoring connections for investigation."
            ]
          },
          {
            "description": "A network payload contains a sequence of bytes matching a known signature for junk data padding used by a specific malware family (e.g., repeating 0xFF bytes, prepended magic strings).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Security Monitoring (NSM) Sensor Grid, DMZ Packet Capture Points",
            "action": [
              "Symbolic: Using an IDS like Zeek or Suricata, deploy and monitor signatures that use regular expressions to match known junk data patterns within network payloads. Generate a high-severity alert upon a signature match.",
              "Statistical: For traffic on non-standard ports, calculate the byte-frequency distribution of the payload. Compare this distribution to a baseline of typical traffic on that port using a Chi-squared test. A statistically significant deviation may indicate the presence of non-random, structured junk data.",
              "Machine Learning: Use a time series forecasting model (e.g., ARIMA) on the volume of IDS alerts for T1001.001 signatures. An unexpected spike in alerts that deviates significantly from the forecast can indicate a new campaign or outbreak, prompting a broader hunt."
            ]
          },
          {
            "description": "A network connection's client-to-server data ratio (`orig_bytes` / `resp_bytes`) is a statistical outlier compared to a historical baseline for the specific protocol and destination port.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Application Server Subnets, Database Server Subnets",
            "action": [
              "Symbolic: Create a rule that flags any HTTP or DNS connection where the request size (`orig_bytes`) is greater than the response size (`resp_bytes`) by a factor of 10 or more, and the destination is not an established file upload service.",
              "Statistical: For each destination port, establish a baseline of the mean and standard deviation for `orig_bytes` and the ratio of `orig_bytes` to `resp_bytes` from Zeek conn.log. Alert on any new connection where these values exceed 3 standard deviations from the mean for that specific port.",
              "Machine Learning: Apply clustering algorithms (e.g., DBSCAN) to Zeek conn.log data, using features like `orig_bytes`, `resp_bytes`, `duration`, and `proto`. Investigate clusters that are small in size (rare) and have high average client-to-server data ratios, as these may represent novel C2 channels using data padding."
            ]
          },
          {
            "description": "A data payload within an unencrypted protocol (e.g., DNS, HTTP) exhibits a Shannon entropy value that is a statistical outlier, approaching the entropy of random data, and is not associated with legitimate compression or file transfers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek weird.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Resolvers, Web Proxies, Network Taps before SSL/TLS decryption points",
            "action": [
              "Symbolic: Analyze Zeek's `weird.log` for events such as `data_before_established`, `unsolicited_response`, or `inappropriate_fin`, and correlate these with the source/destination IPs to identify malformed traffic that could indicate padding.",
              "Statistical: For DNS queries (Zeek dns.log), calculate the Shannon entropy of the queried domain name. Establish a baseline entropy for legitimate queries. Flag queries with entropy scores in the top 1% (e.g., > 3.5 bits/character), as this is a common characteristic of Domain Generation Algorithms (DGAs) which are often used with padded C2.",
              "Machine Learning: Train a time series anomaly detection model (e.g., using an autoencoder) on the entropy values of payloads for specific protocols over time. The model learns the normal range of entropy; flag any new connection whose payload entropy causes a high reconstruction error, indicating it doesn't conform to past patterns."
            ]
          },
          {
            "description": "A process, identified by its name and path (e.g., `calc.exe` in `%APPDATA%`), initiates a network connection, and this process is not on an established allowlist of network-communicating applications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Critical Application Servers",
            "action": [
              "Symbolic: Join process creation logs (Windows Event ID 4688) with network connection logs (Windows Event ID 5156). Alert when a process name not on a pre-defined allowlist (e.g., `svchost.exe`, `chrome.exe`) initiates an external network connection.",
              "Statistical: For each process name, calculate the frequency of its parent process from Windows Event ID 4688 logs. Identify rare parent-child process relationships that result in network activity (Windows Event ID 5156). A relationship in the bottom 5th percentile of frequency is highly suspicious and warrants investigation.",
              "Machine Learning: Use a One-Class SVM (Support Vector Machine) model trained on features from legitimate process network activity (e.g., process path, command line, destination IP reputation, port, protocol). Use this model to classify new process network events as either 'inlier' (normal) or 'outlier' (anomalous), with outliers representing potentially malicious activity to be investigated."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]