[
  {
    "information_requirement": "Is an adversary discovering the network configuration of our corporate mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422",
        "name": "System Network Configuration Discovery",
        "evidence": [
          {
            "description": "On an MDM-managed Android device (version 10 or later), a non-system, non-carrier, or non-default SMS application successfully requests and is granted the 'READ_PRIVILEGED_PHONE_STATE' permission, with the grant event captured in MDM or MTD logs.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Application Scan Logs",
              "Mobile Device Management (MDM) Policy Compliance Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android mobile device fleet; MDM/MTD management servers; Network egress points and VPN concentrators",
            "action": [
              "Define an explicit allow list of application package names authorized to hold the 'READ_PRIVILEGED_PHONE_STATE' permission. Create a SIEM rule that queries MDM/MTD logs for all permission grant events for 'READ_PRIVILEGED_PHONE_STATE'. Trigger a high-severity alert if the grantee's package name is not on the defined allow list.",
              "For each alert from the symbolic rule, correlate the device identifier and timestamp with Zeek conn.log using the device's IP address ($$id.orig_h$$) within a +/- 15-minute window. For all outbound connections, calculate the 30-day historical prevalence of the destination IP/port pair ($$id.resp_h$$, $$id.resp_p$$) across the entire mobile device subnet. Flag any connection where the destination is seen by less than 1% of devices or is a new, unseen destination, as a statistically significant anomaly indicative of exfiltration or C2.",
              "Train a classification model (e.g., Gradient Boosting, Random Forest) to generate a risk score for applications based on MDM/MTD metadata. Features should include: application category, developer reputation, user rating, number of installs, requested permission set (one-hot encoded), and install source. Deploy the model to score any application newly requesting 'READ_PRIVILEGED_PHONE_STATE'. Escalate applications with a risk score above a calibrated threshold (e.g., > 0.85) for sandboxed analysis and establish a feedback loop where analyst findings (true/false positive) are used to periodically retrain the model."
            ]
          },
          {
            "description": "An application on an Android device with an EDR/MTD agent generates a high-frequency burst of calls to the 'java.net.NetworkInterface' API, where the call frequency in a short time window (e.g., one minute) exceeds a statistically significant threshold (e.g., 3 standard deviations) compared to the application's own historical baseline.",
            "data_sources": [
              "Mobile EDR/MTD API Call Monitoring Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices with EDR/MTD agents installed, especially those used by high-value targets; EDR/MTD management servers; Network traffic monitoring points",
            "action": [
              "Implement a detection rule within the Mobile EDR/MTD platform to generate an immediate alert if a call to the 'java.net.NetworkInterface' API originates from an application whose package name or signing certificate hash is present on a threat intelligence feed of known malware.",
              "Ingest API call counts for 'java.net.NetworkInterface' from MTD logs into a time-series database, aggregated into one-minute intervals per application per device. For each application, establish a 30-day rolling baseline (mean and standard deviation) of its call frequency. Generate a medium-severity alert if the call count in any interval exceeds the 99th percentile or 3 standard deviations above its historical mean. Consider baselining per-app-version to account for behavioral changes after updates.",
              "For critical applications or devices of high-value users, train a time-series anomaly detection model (e.g., LSTM autoencoder) on historical 'java.net.NetworkInterface' API call frequency data. The training data must encompass multiple business cycles (e.g., 60-90 days) to learn normal temporal patterns. Deploy the model to analyze API call frequency in near-real-time. Generate a high-severity alert when the model's reconstruction error for a new time window surpasses a dynamically tuned threshold, indicating a significant behavioral deviation."
            ]
          },
          {
            "description": "Within a five-minute window following a new application installation event logged by MDM/MTD, the associated device initiates an outbound network connection to a suspicious destination, characterized by a high-entropy domain name (e.g., Shannon entropy > 3.5) or a destination IP address with very low prevalence (e.g., seen by <1% of devices) across the enterprise.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM/MTD Application Install Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers; MDM management servers",
            "action": [
              "Create a correlation rule that joins MDM/MTD application installation logs with network logs (Zeek dns.log and conn.log) on device identifier and timestamp. For any network connection within five minutes of an install, check the destination domain ($$query$$) and IP address ($$id.resp_h$$) against a threat intelligence feed of known malicious infrastructure. Trigger a critical alert upon any match.",
              "For all DNS queries from the mobile subnet in Zeek dns.log, calculate the Shannon entropy of the second-level domain in the $$query$$ field. In parallel, maintain a 30-day baseline of all destination IP addresses ($$id.resp_h$$ in conn.log) and their prevalence (count of unique source devices). Create a rule that alerts when a device, within 5 minutes of a new app install, makes a connection involving both a high-entropy domain (> 3.5) and a low-prevalence IP (< 1% of device fleet).",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to normalized network connection metadata from Zeek conn.log for the mobile device fleet. Use a feature vector for each connection including scaled values for destination port ($$id.resp_p$$), protocol ($$proto$$), connection duration ($$duration$$), and total bytes transferred ($$orig_bytes$$ + $$resp_bytes$$). Label large, dense clusters as 'normal' behavior. Flag all connections that the model classifies as noise/outliers for investigation, as these represent anomalous network patterns that could indicate C2 communication following a discovery action."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]