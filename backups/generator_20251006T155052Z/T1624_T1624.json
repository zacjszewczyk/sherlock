[
  {
    "information_requirement": "Is an adversary maintaining persistence on our mobile devices through event-triggered execution? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "An installed application's manifest (AndroidManifest.xml) registers broadcast receivers for high-risk system events (e.g., 'android.intent.action.BOOT_COMPLETED') and requests sensitive permissions (e.g., 'android.permission.RECEIVE_SMS') that are anomalous for its application store category or stated purpose.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Android Application Manifests (AndroidManifest.xml)",
              "Application Vetting System Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Mobile Device Management (MDM) server, Application vetting/sandbox environment",
            "action": [
              "Using MDM logs, identify all applications registering broadcast receivers for high-risk events such as 'BOOT_COMPLETED' or 'SMS_RECEIVED'. For this list, extract their signing certificates and package names. Compare these identifiers against a threat intelligence feed of known malicious mobile indicators and generate an alert for any match.",
              "Parse the manifests of all managed applications to extract all requested permissions and registered broadcast receivers. For each app store category (e.g., 'Productivity', 'Games'), calculate the prevalence of each permission-receiver pair. For each application, generate a rarity score by summing the inverse prevalence of its declared pairs. Flag any application whose rarity score exceeds the 98th percentile for its category for manual review.",
              "Build a feature set for each application using one-hot encoded vectors of its permissions and broadcast receivers from its manifest. Train a supervised classification model (e.g., Gradient Boosting) on a labeled dataset of known benign and malicious applications. Integrate the model to score all new and updated applications, alerting on any application with a predicted malice probability above a tuned threshold (e.g., $$ 0.90 $$). For each alert, use SHAP (SHapley Additive exPlanations) to provide the analyst with the specific permissions and receivers that contributed most to the high score."
            ]
          },
          {
            "description": "A mobile device exhibits a measurable burst of anomalous network activity, such as a significant increase in connections, data volume, or high-entropy DNS queries, within a 5-minute window immediately following a system event (e.g., 'device boot', 'network connection change', 'application installed') logged by a Mobile Device Management (MDM) platform.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Zeek http.log",
              "MDM Event Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, Internal and external DNS resolvers",
            "action": [
              "Join MDM event logs with network logs (Zeek conn.log, dns.log, ssl.log) on device IP and a 5-minute post-event timestamp. For events like 'device boot', isolate all subsequent outbound connections. Compare destination IPs, requested domain names, and TLS/SSL certificate details (issuer, subject) and JA3/JA3S hashes against known C2 threat intelligence indicators. Generate an alert on any match.",
              "For each managed device, establish a 30-day baseline of post-event network behavior by analyzing the 5-minute window after each MDM event type. Calculate the mean and standard deviation for key metrics like connection count, bytes sent, and unique domains queried. In real-time, compare post-event activity to this baseline and alert if any metric's Z-score exceeds $$ 3.5 $$. Simultaneously, calculate the Shannon entropy of DNS query subdomains in Zeek dns.log within the window; alert if the entropy score significantly deviates from the device's historical norm, suggesting DGA.",
              "For each device, generate a time series of network activity vectors (e.g., connection count, data volume, protocol distribution) for the 5-minute window following a system boot. Train a Long Short-Term Memory (LSTM) autoencoder model on at least 30 days of this historical data to learn the device's normal post-boot network signature. Monitor live boot events and use the trained model to calculate a reconstruction error. Trigger an alert if the error exceeds a dynamically set threshold based on the model's training performance, indicating a significant deviation from normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]