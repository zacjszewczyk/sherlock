[
  {
    "information_requirement": "Is an adversary attempting to discover installed applications on our managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1418",
        "name": "Software Discovery",
        "evidence": [
          {
            "description": "A Windows process creation event (Event ID 4688 or Sysmon Event ID 1) is recorded where the 'ProcessName' field is 'adb.exe' and the 'CommandLine' field contains the substrings 'shell', 'pm', 'list', and 'packages'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities.",
            "action": [
              "Create a rule to alert when a process creation event shows a 'ProcessName' ending in 'adb.exe' and a 'CommandLine' containing 'shell' AND 'pm list packages'. Correlate the source host against a pre-defined asset list of authorized mobile developers; escalate alerts for any host not on this list.",
              "For each user, establish a 30-day baseline of their 'adb.exe' command frequency. Alert if a user executes the 'pm list packages' command more than three standard deviations above their personal daily average. Additionally, calculate the Shannon entropy of the full command line for each adb.exe execution; alert if the entropy score exceeds the 98th percentile of all adb.exe executions for that specific user, which may indicate obfuscated or unusual commands.",
              "Train a supervised classification model (e.g., Random Forest) to identify anomalous 'adb.exe' usage. Feature engineer from process creation logs to include: command-line length, command-line entropy, presence of specific keywords ('shell', 'pm', 'list', 'install', 'pull'), parent process name (e.g., 'cmd.exe', 'powershell.exe', 'explorer.exe'), and time-of-day features (e.g., is_business_hours). Deploy the model to score each 'adb.exe' execution and generate an alert for any event with a malicious probability score above 0.90."
            ]
          },
          {
            "description": "A network connection log entry (Zeek conn.log) from a managed mobile device's IP address shows an outbound-dominant connection where orig_bytes is significantly greater than resp_bytes, with a payload size between 1KB and 50KB, to a destination IP not previously seen in the last 30 days.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers.",
            "action": [
              "Create a rule to alert on events from the mobile device IP range where: (a) a Zeek http.log entry shows an HTTP POST with a 'request_body_len' between 1024 and 51200 bytes, AND the destination 'host' field matches a threat intelligence feed or is a domain younger than 30 days, OR (b) a Zeek dns.log entry shows a query length over 100 characters directed to a low-reputation domain.",
              "For each mobile device IP, calculate a baseline of outbound data transfer sizes (orig_bytes from Zeek conn.log) over a 30-day rolling window. Generate an alert if a new connection's 'orig_bytes' value exceeds the 99th percentile for that device and the connection duration is less than 10 seconds. Further enrich this by checking if the destination IP's enterprise-wide prevalence is below a threshold (e.g., seen by fewer than 5 other internal devices).",
              "Implement a two-stage anomaly detection pipeline. Stage 1: Use an unsupervised clustering algorithm (e.g., DBSCAN) on Zeek conn.log data from mobile devices, using features like 'orig_bytes', 'resp_bytes', 'duration', 'proto', and the ratio of 'orig_bytes' to 'resp_bytes'. Isolate sessions flagged as noise or belonging to small, sparse clusters. Stage 2: For each anomalous session, extract the destination FQDN (from http.log or dns.log) and input it into a pre-trained DGA detection model (e.g., a CNN or LSTM). Escalate if an anomalous session's destination FQDN receives a DGA score above 0.85."
            ]
          },
          {
            "description": "An entry in the MDM/MTD platform's application inventory or security event log explicitly indicates that a managed application manifest requests the 'android.permission.QUERY_ALL_PACKAGES' permission (Android) or that analysis has detected the use of the private 'LSApplicationWorkspace' API (iOS).",
            "data_sources": [
              "MDM/MTD Application Inventory Logs",
              "MDM/MTD Security Alert Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate MDM/MTD platform and Application Vetting Systems.",
            "action": [
              "Configure a high-severity alert in the MDM/MTD platform to trigger immediately upon the installation or update of any application that either requests 'android.permission.QUERY_ALL_PACKAGES' or is flagged for 'LSApplicationWorkspace' API usage. Maintain an allowlist of approved applications (e.g., specific security tools) to suppress false positives.",
              "Ingest MDM application inventory logs. Calculate a 'prevalence score' for each permission by dividing the number of apps requesting it by the total number of unique apps. Assign a risk weight to each permission inversely proportional to its prevalence. Calculate a total risk score for each app by summing the weights of its requested permissions. Alert on any new app whose risk score is in the top 1% (99th percentile) of all apps in the mobile fleet.",
              "Develop a supervised classification model (e.g., XGBoost) to predict application maliciousness based on MDM data. Use features such as: a binary vector of all requested permissions, the install source (e.g., official App Store, sideloaded), the developer's reputation, the age of the application, and a binary flag for the presence of 'QUERY_ALL_PACKAGES'. Train the model on known benign and malicious application samples. Deploy the model to score all new applications; automatically quarantine any application with a predicted malicious probability score greater than 0.95."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]