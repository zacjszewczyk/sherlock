[
  {
    "information_requirement": "Has an adversary manipulated the operator's view of the industrial process? (TA0105 - Impact)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0832",
        "name": "Manipulation of View",
        "evidence": [
          {
            "description": "A persistent and measurable discrepancy between a process variable's value as read directly from a PLC's network response (e.g., via `zeek.modbus.log`) and the value for the same variable and timestamp recorded by a data historian or displayed on an HMI (inferred from network traffic to those systems). A discrepancy is defined as >2% for analog values or any mismatch for discrete/boolean values.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI servers, Historian servers, and network segments connecting PLCs to HMIs and Historians, focusing on data gateways and visualization platforms.",
            "action": [
              "For critical process tags, perform cross-source validation. Ingest and correlate ICS read responses from PLC IPs (`is_response`=true in Zeek logs) with data sent from HMI/gateway IPs to historian IPs for the same process tag. Account for network latency and use a small time window (e.g., 5 seconds) for correlation. Generate an alert if the values differ by more than a pre-defined engineering threshold (e.g., 2% for analog, any non-match for discrete).",
              "For each critical process tag, create two synchronized time series: (1) the value reported by the PLC (from Zeek logs of PLC responses) and (2) the value recorded by the historian (from HMI/gateway traffic). Calculate a rolling 10-minute Pearson cross-correlation coefficient between these two series. Generate an alert if the correlation coefficient drops below a threshold (e.g., 0.9) for a sustained period (e.g., >5 minutes), indicating a significant divergence between the physical process and the recorded view.",
              "Train a multivariate autoencoder on synchronized time-series data from multiple sources. The input feature vector for each timestamp should include: `[PLC_reported_value, HMI_displayed_value, Historian_recorded_value, associated_control_output_value]`. The model learns the normal, highly correlated state between these values. A high reconstruction error on new data indicates a statistical anomaly and a likely divergence between sources, triggering an alert for a potential view manipulation attack."
            ]
          },
          {
            "description": "Unauthorized modification of HMI graphical configuration or project files (e.g., files with extensions like `.gfx`, `.pvi`, `.xml`, `.ini`), evidenced by a file write (`Windows Event ID 4663`) originating from a process (`ProcessName` from `Windows Event ID 4688`) not on a pre-approved whitelist of HMI development or deployment software.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on HMI servers and engineering workstations, specifically directories containing HMI screen and logic configuration files.",
            "action": [
              "Maintain a strict whitelist of `ProcessName` and `ProcessHash` values for all authorized HMI editing and deployment software. Create a detection rule to monitor `Windows Event ID 4663` for write access (`AccessMask` contains `WRITE_DATA`) to files with HMI-specific extensions (`.gfx`, `.pvi`, `.xml`, etc.) in known project directories. Correlate with the parent process via `ProcessId` to `Windows Event ID 4688` and generate an alert if the `ProcessName` or `ProcessHash` is not on the whitelist.",
              "For all HMI configuration files, establish a 30-day baseline of modification frequency (`Event ID 4663` count) per user, per host, and per process. Generate an alert if the modification count for any single file by a single user or process in a 24-hour period exceeds the 99th percentile of its own historical behavior. This indicates unusually frequent editing activity that could be part of an attack.",
              "Deploy a User and Entity Behavior Analytics (UEBA) model that learns a baseline of normal file modification activity for each user and system process on HMI servers. The model should profile features such as files/paths accessed, frequency, time of day, day of week, and the originating process name and parent process. The model should flag any significant deviation from this baseline, such as an administrator account modifying HMI display files via a script (`powershell.exe`) outside of business hours, instead of using the standard HMI editor (`HMI_Editor.exe`) during the workday."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has an adversary successfully executed an action that has resulted in, or is intended to cause, physical damage to operational technology property? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0832",
        "name": "Manipulation of View",
        "evidence": [
          {
            "description": "An ICS write command, observed in network protocol logs (e.g., Zeek Modbus, DNP3, ENIP), targets a critical control register (e.g., motor speed, valve position) and sets its value outside of predefined engineering safety limits. This includes commands intended to induce physical stress such as mechanical fatigue (e.g., 5 or more alternating open/close commands to a valve within 1 second) or thermal shock (e.g., commanding a heater to maximum output while a cooling system is simultaneously commanded off). The command originates from an IP address not on the approved allowlist of HMIs or Engineering Workstations and is not correlated with any authorized change management activity within a 15-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, Safety Instrumented System (SIS) network segments, PLC/RTU network interfaces, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Data Historian servers.",
            "action": [
              "Create and maintain an asset inventory of critical PLC registers with their documented safe operating ranges (min/max values), data types, and read/write status. Implement a SIEM rule to generate a high-severity alert if a 'write' command (e.g., modbus.func=6 or 16) from a source IP not on the HMI/EWS allowlist targets a critical register with a value outside its defined safe range. Create a second rule to alert if a 'write' command targets a register defined as 'read-only'.",
              "For each critical process parameter (e.g., temperature, pressure, flow rate), establish a 30-day rolling baseline of its distribution during normal operations, calculating the 1st and 99th percentiles. Generate an alert if a live parameter reading, as reported by read commands, falls outside this established percentile range for more than three consecutive polling cycles. For interdependent systems (e.g., motor RPM, current draw, and temperature), calculate the Mahalanobis distance of the current state vector from the centroid of its normal operating baseline. Alert if this distance exceeds the 99.9th percentile of historical distances.",
              "Train a One-Class Support Vector Machine (OCSVM) on a baseline of normal operating data vectors, where each vector is a tuple of [source_ip, register_address, value]. Feed live 'write' command tuples into the model; a prediction of '-1' (outlier) indicates a deviation from learned normal commands and should trigger an alert. Separately, implement a time-series anomaly detection model (e.g., Isolation Forest) on features aggregated into 1-minute windows, such as: frequency of 'write' commands, entropy of target register addresses, and the ratio of 'write' to 'read' commands. An alert is generated on statistically significant changepoints or spikes in these metrics."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]