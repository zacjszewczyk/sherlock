[
  {
    "information_requirement": "Is an adversary attempting to modify or suppress critical process alarms? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0838",
        "name": "Modify Alarm Settings",
        "evidence": [
          {
            "description": "Evidence of unauthorized alarm setting modification is present when a write, delete, or permission change is made to a file identified as a critical alarm configuration. The modification is considered unauthorized if it is performed by a non-whitelisted user or process, occurs outside a scheduled maintenance window, or originates from an anomalous parent process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 5145",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, Data Gateways/OPC Servers",
            "action": [
              "Create and maintain a watchlist of critical alarm configuration file paths (e.g., C:\\SCADA\\Projects\\*.ALM, D:\\HMI_Config\\*.XML). Monitor for Windows Event ID 4663 (Object Access) or 5145 (Detailed File Share) indicating write or delete access. Correlate the ProcessId with Windows Event ID 4688 (Process Creation) to identify the user, process, and parent process. Trigger an alert if the modifying user or process (e.g., powershell.exe, certutil.exe) is not on an approved whitelist, or if the event occurs outside a designated maintenance window.",
              "For each monitored file path, establish a 60-day baseline of modification activity by collecting the hourly count of write/delete events (Event ID 4663/5145). Calculate the 99th percentile of modification counts for each hour. Trigger an alert when the current hourly count exceeds this percentile threshold. Concurrently, calculate the Shannon entropy of parent process names modifying these files over a rolling 24-hour window; a sharp decrease or increase outside of a 2-standard-deviation band from the baseline entropy indicates a potential anomaly and should trigger an alert.",
              "Develop and deploy a supervised classification model (e.g., Gradient Boosting Classifier) to predict malicious file modifications. Use historical data from Event IDs 4663 and 4688, labeled via incident response findings. Engineer features including: process name, parent process name, user account, time of day, day of week, file path, a boolean for scripting engine execution, and a boolean for occurring outside a maintenance window. Score new modification events in real-time and generate a high-priority alert for any event classified as 'malicious' with a confidence score greater than 0.90."
            ]
          },
          {
            "description": "Evidence of alarm setting modification via network transfer is present when a file whose name, extension, or content hash matches a known alarm configuration file is transferred to or from a critical ICS asset. The transfer is considered anomalous if it originates from a non-whitelisted IP address, uses an unapproved protocol or port, or if the file's hash or size deviates from known-good versions.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek smb_files.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT boundary firewalls, Industrial Demilitarized Zones (IDMZ), Control Network segments (Process Control, Safety Instrumented Systems), Wireless Industrial Networks",
            "action": [
              "Create a watchlist of alarm configuration filenames (e.g., *.alm, *.prj, *.cfg) and a whitelist of their known-good SHA1 hashes. Monitor Zeek files.log for transfers where the filename matches the watchlist and the destination (rx_hosts) is a critical ICS asset. Join with conn.log on the unique ID (uid). Trigger an alert if the source IP (id.orig_h) or destination port (id.resp_p) is not on an approved whitelist. Additionally, trigger an alert if the 'sha1' hash in files.log does not match the known-good hash for that specific file.",
              "For each critical ICS asset, baseline the daily count and total volume (sum of 'total_bytes' from files.log) of configuration file transfers over a 60-day period using Zeek logs. Calculate the 99th percentile for both metrics. Trigger an alert if the daily count or volume exceeds its respective threshold. Separately, calculate the Shannon entropy of source IPs (id.orig_h) transferring these files to critical assets over a rolling 24-hour window; a sudden drop in entropy may indicate a single anomalous host performing bulk transfers and should trigger an alert.",
              "Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) using features aggregated hourly from Zeek conn.log and files.log for network traffic directed at critical ICS assets. Features should include: total byte count, packet count, count of unique protocols, count of file transfers, average file size, and average session duration. Train the model on at least 90 days of data to learn normal behavior patterns. Deploy the model to score incoming hourly data, alerting on any time window where the reconstruction error (anomaly score) is high, indicating a significant deviation from the learned norm."
            ]
          },
          {
            "description": "Evidence of alarm service inhibition is present when a critical ICS application service (e.g., alarm manager) enters a 'stopped' state. The stop is considered suspicious if it is not immediately preceded by a legitimate system shutdown event (within 5 minutes) and is not initiated by a whitelisted administrative account or authorized automation process.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 1074",
              "Windows Event ID 4688",
              "Windows Event ID 7040"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator Stations, Human-Machine Interfaces (HMIs), Alarm management servers, SCADA Servers, Data Historian Servers",
            "action": [
              "Create a watchlist of critical ICS service names (e.g., 'CitectAlarm', 'FTAEAlarms'). Monitor for Windows Event ID 7036 where a watchlisted service enters the 'stopped' state. Suppress this alert if a Windows Event ID 1074 (System Shutdown) is logged on the same host within the preceding 5 minutes. If not suppressed, investigate for associated process creation events (Event ID 4688) from processes like 'net.exe' or 'sc.exe' to identify the initiator. Also, create a high-priority alert for any change to the start type of these services (Event ID 7040), especially to 'Disabled'.",
              "For each critical service, track its uptime between 'started' and 'stopped' states using Event ID 7036 logs over a 90-day baseline period. Calculate the historical uptime distribution and trigger an alert if a service stops after an uptime duration that falls below the 5th percentile, indicating a premature or unexpected stop. Separately, baseline the daily frequency of unsuppressed stop events per service and alert if this count exceeds the 99th percentile of its historical daily counts.",
              "Train a supervised classification model (e.g., Random Forest) to classify the legitimacy of a service stop event. Engineer features from Event ID 7036 and correlated logs, including: service name, time of day, day of week, a boolean flag for a preceding shutdown event (Event ID 1074), and the initiating user/process if available. Use historical data labeled as 'legitimate' or 'suspicious' for training. Deploy the model to score new service stop events in real-time, alerting on any event classified as 'suspicious' with a probability score greater than 0.85."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]