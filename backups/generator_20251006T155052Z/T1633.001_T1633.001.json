[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile analysis or sandbox environments by performing system checks? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "A mobile application, within the first 300 seconds of execution, makes API calls (e.g., Android's 'android.os.SystemProperties.get' or runtime execution of 'getprop') or reads file paths that match a watchlist of known emulator/sandbox artifacts. These queries are not followed within 60 seconds by a corresponding, whitelisted API call that legitimately uses this information (e.g., for UI rendering based on screen density, device-specific feature toggles). Monitored artifacts include properties containing strings like 'goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86', 'sdk_google', or file paths like '/system/bin/qemu-props'.",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "Mobile EDR File Integrity Monitoring Logs",
              "Mobile Application Vetting (MAV) Sandbox Reports",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environment, Corporate-managed mobile devices (Android & iOS), Mobile Device Management (MDM) platform, Mobile Application Vetting (MAV) platform",
            "action": [
              "Implement a detection rule that triggers on Mobile EDR logs where a process calls a system property API (e.g., `android.os.SystemProperties.get`) or executes `getprop` and the property argument contains a known emulator string ('goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86', 'sdk_google', 'ttVM', 'Genymotion'). The rule must also trigger on file read events for paths like '/system/bin/qemu-props' or for reads of '/proc/cpuinfo' where content matches emulator signatures (e.g., 'QEMU Virtual CPU').",
              "For each new application package, calculate the count of unique system properties queried within the first 300 seconds of runtime. Maintain a rolling 30-day baseline distribution of this count, segmented by application category (e.g., 'Productivity', 'Games'). Flag any application whose query count exceeds the 98th percentile of its category-specific baseline, or a global baseline if the category is new or has fewer than 100 samples.",
              "Train a gradient boosting classifier (e.g., XGBoost) using labeled data from MAV sandbox runs. Features should include: a binary flag for each known emulator property queried, the total count of distinct properties queried, the Shannon entropy of the set of queried property prefixes (e.g., 'ro.build.', 'ro.product.'), the time delta in milliseconds from process start to the first system property query, and a count of property queries per second. Deploy the model to assign an 'evasion_probability' score to new applications."
            ]
          },
          {
            "description": "A mobile application queries for the list of available hardware sensors (e.g., using Android's 'SensorManager.getSensorList' or iOS's 'CMMotionManager' properties) upon startup, but this query is not followed by a corresponding API call to register a listener for sensor data (e.g., 'registerListener' or 'start...Updates') from the same process within a 90-second window. This behavior indicates a check for a realistic hardware environment rather than legitimate functionality.",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "MAV Sandbox API Call Trace Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Bring-Your-Own-Device (BYOD) fleet with security agents, Application sandboxing environment, MDM/UEM platform logs",
            "action": [
              "Create a correlation rule that triggers when a process on a mobile device generates an API call event for 'SensorManager.getSensorList' (Android) or queries 'CMMotionManager' properties like 'isAccelerometerAvailable' (iOS), and is NOT followed by an event for 'registerListener' (Android) or 'startAccelerometerUpdates'/'startGyroUpdates' (iOS) from the same process ID within 90 seconds. Maintain an allowlist of applications known to exhibit this behavior legitimately.",
              "For each application, calculate a 'Dangling Sensor Query Ratio' over the first 5 minutes of execution, defined as (Count of sensor list queries) / (Count of sensor listener registrations + 1). Establish a baseline ratio from known good applications, segmented by app store category. Alert on applications where this ratio exceeds 3 standard deviations from the category-specific mean, signaling an abnormal pattern of querying without use.",
              "Use a DBSCAN clustering algorithm on features representing sensor interaction patterns. Features for each application should include: 1) Count of distinct sensor types queried (e.g., accelerometer, gyroscope, light). 2) Count of listener registration calls. 3) A binary flag if GPS/Location sensor was queried but the 'ACCESS_FINE_LOCATION' permission was not requested in the app's manifest. 4) The ratio from the statistical action. Isolate and investigate small clusters or outliers (labeled as noise by DBSCAN) that exhibit high query counts and low registration counts."
            ]
          },
          {
            "description": "A mobile application, within 60 seconds of querying for network interface details (e.g., MAC address via 'NetworkInterface.getHardwareAddress()'), precipitates a sustained, anomalous shift in its network traffic patterns. This behavioral change is characterized by a sudden drop in connection diversity (entropy), a pivot to encrypted DNS (DoH/DoT) to a non-standard resolver, or communication exclusively with a single, non-CDN IP address, indicating a possible post-check change in communication strategy.",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway), DNS resolvers, Core network switches generating NetFlow/IPFIX, Corporate-managed mobile devices",
            "action": [
              "Create a correlation rule linking a Mobile EDR alert for a network interface query to Zeek logs from the device's source IP. Generate a high-severity alert if, within 5 minutes of the query: a) DNS traffic in `dns.log` stops and is replaced by TLS traffic to a known public or non-corporate DoH resolver identified by its SNI in `ssl.log` (e.g., not 'dns.google'), AND b) the JA3 hash of this new TLS traffic matches a threat intelligence feed of known malware C2.",
              "For each mobile device IP, process Zeek logs in 5-minute windows. In each window, calculate the Shannon entropy of destination IPs (`id.resp_h` in `conn.log`) and requested FQDNs (`query` in `dns.log`). Maintain a 1-hour rolling average for both entropy scores. An alert is triggered if the current window's entropy for either metric drops more than 80% below its rolling average, which indicates a sudden channelization of network communications.",
              "Implement a time-series anomaly detection model for each device using an LSTM autoencoder. Create a multivariate time series from Zeek logs with features aggregated per minute: total `orig_bytes` from `conn.log`, count of unique `id.resp_h`, count of unique `uid`s, entropy of `ja3` hashes in `ssl.log`, and the ratio of UDP to TCP connections. A sustained, high reconstruction error from the model signifies a behavioral deviation from the established baseline that requires investigation, especially if temporally correlated with an on-device system check."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]