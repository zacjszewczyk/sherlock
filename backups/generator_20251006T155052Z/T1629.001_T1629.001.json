[
  {
    "information_requirement": "Is an adversary preventing the removal of malicious applications on our managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.001",
        "name": "Prevent Application Removal",
        "evidence": [
          {
            "description": "A mobile application package is granted 'Device Administrator' or 'Accessibility Service' permissions and meets at least one of the following criteria: 1) The package name is not on the approved corporate application allow-list. 2) The package name's Shannon entropy score is above the 95th percentile calculated from the allow-list. 3) The package name's Levenshtein distance is 2 or less compared to a high-value application name (e.g., 'com.company.vpn').",
            "data_sources": [
              "MDM/EMM application inventory logs",
              "MDM/EMM permission audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM Management Server, Managed Mobile Device Fleet, Centralized Log Aggregator (SIEM)",
            "action": [
              "Query MDM/EMM permission audit logs for events indicating 'Device Administrator' or 'Accessibility Service' permission grants. Cross-reference the application package name against a maintained corporate allow-list. Generate a high-severity alert for any package not on the list.",
              "For any application granted high-risk permissions, calculate the Shannon entropy of its package name. Compare this value against a baseline distribution of entropy scores from all allow-listed application package names. Flag packages with entropy scores exceeding the 95th percentile. Separately, calculate the Levenshtein distance between the package name and a curated list of high-value or commonly impersonated application names (e.g., 'com.android.chrome', 'com.microsoft.office.outlook'). Alert if the distance is less than or equal to 2.",
              "Feed application metadata (package name entropy, number and type of requested permissions, Levenshtein scores, app store source) for newly permissioned apps into a pre-trained classification model (e.g., Random Forest, Gradient Boosting). The model, trained on labeled benign and malicious mobile app datasets, will output a probability score of maliciousness. Automatically generate a critical alert and trigger a device quarantine API call via MDM if the probability exceeds a pre-defined threshold (e.g., 0.90)."
            ]
          },
          {
            "description": "A sequence of events on a mobile device shows a user navigating to the application uninstall screen, followed within 2 seconds by a performGlobalAction(GLOBAL_ACTION_BACK) or performGlobalAction(GLOBAL_ACTION_HOME) API call originating from a non-system, user-installed application.",
            "data_sources": [
              "Mobile Threat Defense (MTD) API call logs",
              "Endpoint Detection and Response (EDR) for Mobile logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Device Fleet, Mobile Threat Defense (MTD) Console, SIEM",
            "action": [
              "Create a SIEM correlation rule that triggers a critical alert when an event indicating navigation to the application uninstall screen is followed by an API call event for `performGlobalAction` with arguments `GLOBAL_ACTION_BACK` (1) or `GLOBAL_ACTION_HOME` (2) originating from a non-system application on the same device ID within a 2-second window.",
              "For each application on each device, calculate a 14-day rolling baseline of the hourly frequency of `performGlobalAction` calls. Generate a medium-severity alert if an application's call frequency exceeds 3 standard deviations above its own baseline for a given hour. This identifies anomalous usage of the API by a specific app.",
              "Utilize a pre-trained sequence-to-sequence model (e.g., LSTM or Transformer-based) that has learned normal user UI interaction patterns from MTD/EDR logs. Feed real-time event streams from each device into the model. An alert is generated when the model detects a sequence with a high anomaly score, specifically looking for sequences where an 'app settings' or 'uninstall' event is immediately followed by an anomalous `GLOBAL_ACTION_BACK` or `GLOBAL_ACTION_HOME` event."
            ]
          },
          {
            "description": "A mobile device, within 60 minutes of a high-risk permission grant ('Device Administrator' or 'Accessibility Service'), initiates network connections to a domain registered within the last 30 days or exhibits beaconing behavior characterized by periodic, fixed-size connections.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "MDM/EMM permission audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Gateway Firewalls, Internal DNS Servers, Network Security Monitoring (NSM) Sensor Grid at egress points, MDM/EMM Management Server",
            "action": [
              "Create a SIEM rule that triggers on an MDM alert for a high-risk permission grant. For the associated device IP address, query Zeek dns.log and conn.log for all network connections within the subsequent 60 minutes. Enrich destination domains/IPs against threat intelligence feeds and WHOIS data. Generate a high-severity alert if the device connects to a known-bad destination or a domain registered within the last 30 days.",
              "For network traffic from a device that recently had a high-risk permission grant, analyze its Zeek conn.log data for connections to a single destination IP. Calculate the standard deviation of the time delta between connections and the standard deviation of the total bytes (`orig_bytes` + `resp_bytes`). A value near zero for both metrics indicates periodic, fixed-size beaconing and should generate an alert. Additionally, analyze the JA3/JA3S hashes from Zeek ssl.log and alert if a hash is observed that has a prevalence of less than 1% across the entire organization's baseline.",
              "Continuously feed time-series network telemetry (e.g., bytes out per minute, connections per minute, protocol mix) from Zeek conn.log for each mobile device into a trained LSTM autoencoder model. The model learns the normal network profile for each device. Following a high-risk permission grant event, if the subsequent network traffic causes the model's reconstruction error to exceed the 99th percentile of its historical error distribution, generate a high-severity anomaly alert, as this indicates a significant deviation from normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]