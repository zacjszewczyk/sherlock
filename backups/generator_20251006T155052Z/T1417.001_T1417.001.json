[
  {
    "information_requirement": "Is an adversary capturing user credentials via keylogging on mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "An application inventory record from a UEM/MDM platform shows an installed package is registered as a third-party keyboard or Input Method Editor (IME) and its package name or developer signature does not appear on a corporate allowlist of approved IMEs. Further evidence includes the application being flagged as sideloaded or having a binary hash that mismatches the known-good version in the allowlist.",
            "data_sources": [
              "UEM/MDM Application Inventory Report",
              "Mobile EDR Process Execution Logs",
              "Corporate Application Allowlist Database",
              "Threat Intelligence Hash/Signature Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM platform's central database, corporate application store, and threat intelligence vendor portals.",
            "action": [
              "Continuously query UEM/MDM application inventory data. For each device, join the list of installed packages with a maintained allowlist of approved keyboard applications based on package name, developer signature, and binary hash. Generate a high-severity alert for any application that functions as an IME but is not on the allowlist or has a mismatched signature/hash.",
              "From the UEM/MDM inventory, calculate the fleet-wide installation percentage for every application identified as an IME. Flag any IME with a prevalence below a 1% threshold as a 'Rare Keyboard' for review. Additionally, for these rare keyboards, calculate a 30-day moving average and standard deviation of daily new installations. Alert if the daily installation count exceeds the mean by 3 standard deviations, indicating a suspicious coordinated installation.",
              "Train a Random Forest classifier using features from application metadata (e.g., permission requests, developer age, app store rating, installation source, user review text sentiment). For any newly detected or 'Rare Keyboard' application, extract its features and predict its likelihood of being malicious. If the model's output probability for the 'malicious' class is > 0.90, automatically generate a critical incident and trigger an endpoint scan."
            ]
          },
          {
            "description": "An Android device permissions report from a UEM/MDM platform indicates the 'android.permission.BIND_ACCESSIBILITY_SERVICE' permission is granted to an application whose package name is not on a pre-approved allowlist for applications requiring this level of access (e.g., password managers, screen readers). This permission allows interception of system-wide text input events. [1]",
            "data_sources": [
              "UEM/MDM Device Permissions Report",
              "Mobile EDR API Call Monitoring Logs",
              "Android dumpsys accessibility output"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM platform's device configuration and compliance database; EDR agent logs on managed Android devices.",
            "action": [
              "Create a SIEM rule to monitor UEM/MDM permission logs. The rule should trigger a critical alert whenever an event shows 'android.permission.BIND_ACCESSIBILITY_SERVICE' being granted to an application whose package name is not present in a strictly curated allowlist of essential accessibility tools.",
              "For any application with 'BIND_ACCESSIBILITY_SERVICE' granted, calculate the Shannon entropy of its full Android permission set. Alert if the entropy score falls into the 99th percentile of all apps in the UEM, indicating an unusually large and diverse set of permissions. Concurrently, calculate the Jaccard distance between the app's permission set and the median permission set for its stated app store category; alert if the distance is > 0.8, signifying a highly atypical permission profile for its function.",
              "Deploy an Isolation Forest model trained on sequences of API calls from known-benign applications that use accessibility services. On EDR-enabled devices, monitor the API call stream from any application with these services enabled. If the model flags a sequence as an anomaly (e.g., onAccessibilityEvent with TYPE_VIEW_TEXT_CHANGED immediately followed by Socket.connect or FileOutputStream.write) with an anomaly score in the top 1%, generate a critical alert for potential keylogging and data exfiltration."
            ]
          },
          {
            "description": "Zeek connection logs (conn.log) reveal a mobile device IP address establishing a repeating pattern of small (<1KB) outbound data transmissions to a single, non-corporate external IP address. These connections exhibit high temporal regularity (low inter-packet delay variance, or jitter), consistent with automated C2 beaconing used for exfiltrating captured keystroke data.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR Network Connection Logs",
              "Threat Intelligence IP/Domain Feeds",
              "WHOIS Registration Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensor logs from corporate Wi-Fi controllers, VPN concentrators, and internet gateway traffic mirrors.",
            "action": [
              "In your SIEM, create a rule that continuously joins Zeek dns.log and conn.log for traffic originating from the mobile device IP space. Correlate the destination FQDN (query field) and destination IP (id.resp_h field) against a threat intelligence feed of known malicious C2 servers. Generate a high-severity alert on any match.",
              "Aggregate Zeek conn.log data into 1-hour windows, grouped by source IP (id.orig_h) and destination IP (id.resp_h). For each group, calculate the standard deviation of the time delta between consecutive connection timestamps and the 95th percentile of outbound bytes (orig_bytes). Generate a medium-severity alert if the time delta standard deviation is < 2 seconds and the 95th percentile of orig_bytes is < 1024 bytes. Enrich with WHOIS data and escalate to high-severity if the destination domain was registered in the last 30 days.",
              "For each mobile device, create a time-series dataset of its network activity (features: total outbound bytes per minute, unique destination ports, connection frequency). Train a Long Short-Term Memory (LSTM) Autoencoder on at least 30 days of this historical data to learn a baseline of normal behavior. In real-time, feed current network activity into the model. If the model's reconstruction error for a given time window exceeds a dynamic threshold (e.g., 99th percentile of historical reconstruction errors), generate a high-severity anomaly alert for behavior inconsistent with the device's established pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive information (PII, proprietary data) via keylogging on mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "An application inventory record from a UEM/MDM platform shows an installed package is registered as a third-party keyboard or Input Method Editor (IME) and its package name or developer signature does not appear on a corporate allowlist of approved IMEs. Further evidence includes the application being flagged as sideloaded or having a binary hash that mismatches the known-good version in the allowlist.",
            "data_sources": [
              "UEM/MDM Application Inventory Report",
              "Mobile EDR Process Execution Logs",
              "Corporate Application Allowlist Database",
              "Threat Intelligence Hash/Signature Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM platform's central database, corporate application store, and threat intelligence vendor portals.",
            "action": [
              "Continuously query UEM/MDM application inventory data. For each device, join the list of installed packages with a maintained allowlist of approved keyboard applications based on package name, developer signature, and binary hash. Generate a high-severity alert for any application that functions as an IME but is not on the allowlist or has a mismatched signature/hash.",
              "From the UEM/MDM inventory, calculate the fleet-wide installation percentage for every application identified as an IME. Flag any IME with a prevalence below a 1% threshold as a 'Rare Keyboard' for review. Additionally, for these rare keyboards, calculate a 30-day moving average and standard deviation of daily new installations. Alert if the daily installation count exceeds the mean by 3 standard deviations, indicating a suspicious coordinated installation.",
              "Train a Random Forest classifier using features from application metadata (e.g., permission requests, developer age, app store rating, installation source, user review text sentiment). For any newly detected or 'Rare Keyboard' application, extract its features and predict its likelihood of being malicious. If the model's output probability for the 'malicious' class is > 0.90, automatically generate a critical incident and trigger an endpoint scan."
            ]
          },
          {
            "description": "An Android device permissions report from a UEM/MDM platform indicates the 'android.permission.BIND_ACCESSIBILITY_SERVICE' permission is granted to an application whose package name is not on a pre-approved allowlist for applications requiring this level of access (e.g., password managers, screen readers). This permission allows interception of system-wide text input events. [1]",
            "data_sources": [
              "UEM/MDM Device Permissions Report",
              "Mobile EDR API Call Monitoring Logs",
              "Android dumpsys accessibility output"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM platform's device configuration and compliance database; EDR agent logs on managed Android devices.",
            "action": [
              "Create a SIEM rule to monitor UEM/MDM permission logs. The rule should trigger a critical alert whenever an event shows 'android.permission.BIND_ACCESSIBILITY_SERVICE' being granted to an application whose package name is not present in a strictly curated allowlist of essential accessibility tools.",
              "For any application with 'BIND_ACCESSIBILITY_SERVICE' granted, calculate the Shannon entropy of its full Android permission set. Alert if the entropy score falls into the 99th percentile of all apps in the UEM, indicating an unusually large and diverse set of permissions. Concurrently, calculate the Jaccard distance between the app's permission set and the median permission set for its stated app store category; alert if the distance is > 0.8, signifying a highly atypical permission profile for its function.",
              "Deploy an Isolation Forest model trained on sequences of API calls from known-benign applications that use accessibility services. On EDR-enabled devices, monitor the API call stream from any application with these services enabled. If the model flags a sequence as an anomaly (e.g., onAccessibilityEvent with TYPE_VIEW_TEXT_CHANGED immediately followed by Socket.connect or FileOutputStream.write) with an anomaly score in the top 1%, generate a critical alert for potential keylogging and data exfiltration."
            ]
          },
          {
            "description": "Zeek connection logs (conn.log) reveal a mobile device IP address establishing a repeating pattern of small (<1KB) outbound data transmissions to a single, non-corporate external IP address. These connections exhibit high temporal regularity (low inter-packet delay variance, or jitter), consistent with automated C2 beaconing used for exfiltrating captured keystroke data.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR Network Connection Logs",
              "Threat Intelligence IP/Domain Feeds",
              "WHOIS Registration Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensor logs from corporate Wi-Fi controllers, VPN concentrators, and internet gateway traffic mirrors.",
            "action": [
              "In your SIEM, create a rule that continuously joins Zeek dns.log and conn.log for traffic originating from the mobile device IP space. Correlate the destination FQDN (query field) and destination IP (id.resp_h field) against a threat intelligence feed of known malicious C2 servers. Generate a high-severity alert on any match.",
              "Aggregate Zeek conn.log data into 1-hour windows, grouped by source IP (id.orig_h) and destination IP (id.resp_h). For each group, calculate the standard deviation of the time delta between consecutive connection timestamps and the 95th percentile of outbound bytes (orig_bytes). Generate a medium-severity alert if the time delta standard deviation is < 2 seconds and the 95th percentile of orig_bytes is < 1024 bytes. Enrich with WHOIS data and escalate to high-severity if the destination domain was registered in the last 30 days.",
              "For each mobile device, create a time-series dataset of its network activity (features: total outbound bytes per minute, unique destination ports, connection frequency). Train a Long Short-Term Memory (LSTM) Autoencoder on at least 30 days of this historical data to learn a baseline of normal behavior. In real-time, feed current network activity into the model. If the model's reconstruction error for a given time window exceeds a dynamic threshold (e.g., 99th percentile of historical reconstruction errors), generate a high-severity anomaly alert for behavior inconsistent with the device's established pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary capturing user credentials via input manipulation on managed mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A non-standard keyboard application, not on the corporate allow-list, is installed on a managed mobile device. Within 24 hours of installation, Zeek conn.log data for the device shows a new pattern of periodic outbound connections characterized by: 1) low data volume (500 bytes to 5 KB per connection), 2) high connection frequency with regular intervals (e.g., every 300 seconds +/- 10% jitter), and 3) connections to a destination IP/domain with a low reputation score or a registration age of less than 30 days.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": [
              "From MDM Application Inventory Logs, continuously monitor for installed keyboard applications. Compare each keyboard's package name against a managed allow-list. If an unapproved keyboard is found, cross-reference its network traffic destinations from Zeek dns.log against a threat intelligence feed of known malicious C2 domains and generate a high-priority alert on a match.",
              "For devices with a non-allowlisted keyboard, analyze Zeek conn.log data to establish a 14-day baseline of outbound connection size (orig_bytes) and inter-arrival times. Alert if a new connection pattern emerges where the median connection size is between 500 bytes and 5 KB and the standard deviation of the inter-arrival time for those connections is less than 30 seconds, indicating programmatic beaconing. Additionally, calculate the Shannon entropy of requested subdomains in Zeek dns.log; an entropy score exceeding 3.5 for a given parent domain strongly indicates DGA-based C2.",
              "Train a time-series anomaly detection model, such as an LSTM Autoencoder, on a per-device basis using features from Zeek conn.log (e.g., orig_bytes, resp_bytes, duration, protocol, and connection frequency per hour). Trigger an alert when the model's reconstruction error for a new time window exceeds a dynamic threshold, such as the 99th percentile of reconstruction errors observed over the past 30 days. Correlate the timestamp of the anomaly with MDM logs to link the behavior to the installation of the suspicious keyboard app."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive user information (e.g., messages, contacts) via input capture on managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A non-allowlisted keyboard application is installed on a managed mobile device. Following installation, the device exhibits a new pattern of outbound network connections consistent with bulk data exfiltration. This pattern, observed in Zeek conn.log, is characterized by: 1) larger, more variable data volumes (e.g., 10 KB to 1 MB per connection) than typical C2 beaconing, 2) connections occurring immediately after the use of messaging or email applications, and 3) connections to destination domains with low reputation scores or a registration age of less than 90 days.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": [
              "Continuously monitor MDM Application Inventory Logs for newly installed keyboard applications. For any keyboard package name not on a managed allow-list, cross-reference its observed network destinations from Zeek dns.log against threat intelligence feeds for known spyware drop zones or malicious domains. Generate a high-priority alert upon a match.",
              "For devices with a non-allowlisted keyboard, analyze Zeek conn.log to monitor outbound data volume (orig_bytes). Generate an alert if a connection's orig_bytes exceeds the 99th percentile of the device's historical (30-day) outbound connection sizes, particularly if the destination IP has no history for that device. Further score the alert's priority based on the size of the deviation and the reputation of the destination.",
              "Employ unsupervised clustering, such as DBSCAN, on network connection data from all managed mobile devices, using features such as orig_bytes, duration, protocol, destination port, and destination IP prevalence. Investigate any device that falls into a small cluster characterized by high average orig_bytes and connections to rare domains. Correlate devices in these anomalous clusters with MDM logs to identify a common malicious application responsible for the behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]