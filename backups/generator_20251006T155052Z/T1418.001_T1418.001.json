[
  {
    "information_requirement": "Is the adversary attempting to discover security software on our managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1418.001",
        "name": "Security Software Discovery",
        "evidence": [
          {
            "description": "An application, within five minutes of its first launch as reported by an MDM/EMM, makes a DNS request for a domain with a query prevalence below the 1st percentile and subsequently establishes an outbound connection to the resolved IP, transferring more than 1KB of data.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM/EMM Application Activity Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate DNS Resolvers, Network Egress Firewalls, VPN Concentrators, MDM/EMM Platform Servers",
            "action": [
              "Join MDM/EMM new application launch events with network logs on device IP and timestamp. For any DNS query (Zeek dns.log) from the device within 5 minutes of launch, match the `query` field against threat intelligence feeds of known malicious or DGA domains. For the corresponding TLS connection (Zeek ssl.log), match the `ja3` and `ja3s` hashes against known malicious fingerprints.",
              "For all DNS queries originating from the mobile device subnet, calculate the 30-day prevalence of each queried domain (`query` in Zeek dns.log). Create an alert if a device queries a domain with a prevalence below the 1st percentile (e.g., seen by <1% of devices). Also, calculate the Shannon entropy of the registered domain part of the FQDN; alert if the entropy score exceeds 4.0, indicating high randomness often associated with DGAs.",
              "Develop a per-device time-series model (e.g., using Prophet or an LSTM) to forecast expected outbound data volume (`orig_bytes` in Zeek conn.log) in 1-minute intervals. If an observed data transfer spike within 5 minutes of a new application launch exceeds the model's prediction confidence interval (e.g., > 99%), and correlates with a low-prevalence DNS query, flag it as a high-confidence anomaly for immediate investigation."
            ]
          },
          {
            "description": "A mobile application initiates an HTTP/S POST request where the outbound data volume (`request_body_len`) exceeds the 99th percentile of its 30-day historical baseline, and the destination SNI (`server_name`) is either new for that application or has a poor threat intelligence reputation.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log",
              "MDM/EMM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Forward Proxies, Cloud Access Security Brokers (CASB), VPN Concentrators",
            "action": [
              "Create a rule to match the `host` field (Zeek http.log) and `server_name` field (Zeek ssl.log) from mobile device traffic against threat intelligence lists of known C2 servers. Augment this by alerting on any HTTP request from mobile devices that uses a generic, non-browser User-Agent (e.g., `curl/*`, `Wget/*`, `python-requests/*`) not associated with a known developer tool.",
              "For each unique application identified via MDM, establish a 30-day baseline of its typical HTTP POST request body size (`request_body_len` in Zeek http.log). Generate an alert if a new request's size exceeds the 99th percentile of this baseline. Concurrently, maintain a list of historical SNIs (`server_name` in Zeek ssl.log) per application and alert if an app communicates with a destination SNI not present in its historical profile.",
              "Train an unsupervised Isolation Forest model on features derived from Zeek logs (http.log, ssl.log, conn.log) for mobile traffic. Features should include: URI length, request body length, User-Agent prevalence, SNI prevalence, TLS version, and JA3 hash prevalence. Use the model to score each HTTP/S session, flagging the top 0.5% of outliers as anomalous for analyst review."
            ]
          },
          {
            "description": "A static or dynamic analysis of a mobile application package reveals the inclusion of the `android.permission.QUERY_ALL_PACKAGES` permission (Android) or the use of private APIs for application enumeration, such as `LSApplicationWorkspace` (iOS).",
            "data_sources": [
              "MDM/EMM Application Scan Reports",
              "Mobile Application Vetting Platform Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) / Enterprise Mobility Management (EMM) Platform, Integrated Mobile Threat Defense (MTD) Solution, Third-party Application Vetting Service",
            "action": [
              "Implement an automated policy within the MDM/MTD platform to alert or block any new application installation if its manifest contains `android.permission.QUERY_ALL_PACKAGES` or if a scan detects calls to `LSApplicationWorkspace`, unless the application's package name and hash are on a pre-approved allow-list of legitimate system management or security tools.",
              "Periodically analyze the entire mobile application inventory. Calculate the prevalence of the `QUERY_ALL_PACKAGES` permission within each app store category. Flag any non-security application (e.g., 'Games', 'Social') possessing this permission if its prevalence is in the bottom 5th percentile for that category. Additionally, analyze permission co-occurrence using a metric like Jaccard index to identify statistically improbable combinations (e.g., `QUERY_ALL_PACKAGES` and `RECORD_AUDIO`) that fall below a 1st percentile co-occurrence threshold.",
              "Train a supervised classification model (e.g., XGBoost, Random Forest) to produce an application risk score. Use features including: a high-weight binary flag for `QUERY_ALL_PACKAGES` or private API usage, number of requested permissions, request of other dangerous permissions (e.g., `INSTALL_PACKAGES`), developer reputation, app store rating count, and time since last update. Automatically submit applications exceeding a high-risk score threshold to a sandbox for dynamic analysis."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]