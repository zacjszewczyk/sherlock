name: T1550.004: Use Alternate Authentication Material: Web Session Cookie
id: f5a1b2c3-d4e5-4f6a-7b8c-9d0e1f2a3b4c
description: This playbook focuses on detecting adversaries using stolen web session cookies to bypass authentication controls, evade defenses, and move laterally within a network. It addresses techniques such as replaying cookies from malicious infrastructure (e.g., TOR nodes, known C2 servers), anomalous user behavior like impossible travel, sessions starting without a proper login workflow, and command-line tools accessing local cookie stores for exfiltration. The playbook covers both external-facing and internal web applications, aiming to identify compromised sessions by analyzing network traffic, process execution logs, and authentication events.
type: technique
related:
  - TA0005: Defense Evasion
  - TA0008: Lateral Movement
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Is a valid session cookie being used in an HTTP request that originates from a known malicious IP, TOR exit node, or anonymizing proxy?
    context: This question aims to identify session hijacking by checking if a session is being used from infrastructure associated with malicious actors. A match provides a high-confidence indicator that a stolen cookie is being replayed from an adversary-controlled system to bypass authentication.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Threat Intelligence Feeds
      - Internet Gateway
      - VPN Concentrator
      - External Web Application Servers
      - Cloud Service Provider Flow Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN http_logs ON session_id WITH connection_logs
          WHERE http_logs.has_session_cookie = true
          AND connection_logs.source_ip IN (threat_intel_list_of_malicious_ips)
          RETURN http_logs.session_id, connection_logs.source_ip, user_account
  - question: Is a user's authenticated session originating from a new or statistically rare country or Autonomous System Number (ASN) compared to their historical activity?
    context: Adversaries often use infrastructure in geographic locations or networks different from the legitimate user. By baselining each user's typical source locations over the last 30 days, we can detect anomalous sessions that deviate significantly from established patterns, which could indicate a stolen cookie being used from an unusual location.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - VPN Concentrator
      - External Web Application Servers
      - Cloud Service Provider Flow Logs
    range: last 30 days (for baseline), check against new sessions
    queries:
      - technology: pseudocode
        query: |
          FOR each user:
            user_baseline = baseline_locations(user, last 30 days)
          FOR each new_session:
            IF new_session.location IS RARE FOR user_baseline (99th percentile):
              ALERT user, new_session.location
  - question: Does the volume of requests within a user's session significantly exceed the forecasted volume based on their historical behavior, especially during non-business hours?
    context: Automated tools used by adversaries to exploit a compromised session often generate requests at a rate or at times that are inconsistent with normal human interaction. This question uses a time-series model to predict expected activity levels and flags sessions with abnormally high request volumes, which could indicate scripted actions or data exfiltration.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Internet Gateway
      - VPN Concentrator
      - External Web Application Servers
      - Cloud Service Provider Flow Logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each user:
            model = train_request_volume_model(user, historical_data)
          FOR each user_session:
            observed_volume = count_requests(user_session)
            predicted_volume = model.predict(user_session.time)
            IF observed_volume > predicted_volume.upper_confidence_bound:
              ALERT user, user_session.id
  - question: Has a process been created with command-line arguments that reference common browser cookie databases or known credential dumping tools?
    context: Before a cookie can be used, it must be stolen. This question looks for the initial theft activity by searching for processes, especially known hacking tools, that are executed with command-line arguments pointing directly to the file paths where browsers store their cookies.
    answer_sources:
      - Windows Event ID 4688
      - User Endpoints
      - Critical Staff Workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs (EventID 4688)
          WHERE command_line CONTAINS 'mimikatz.exe' OR 'lazagne.exe'
          OR command_line MATCHES REGEX for 'cookies.sqlite', 'Network\\Cookies'
          RETURN hostname, process_name, command_line
  - question: Has a command-line utility like PowerShell or cmd.exe been executed with unusually high-entropy arguments that also reference user profile paths?
    context: Adversaries often obfuscate commands to evade simple signature-based detections. High-entropy command lines can indicate obfuscation (e.g., base64 encoding). When combined with keywords like 'AppData', it suggests a potentially obfuscated attempt to access sensitive user files, such as cookie stores.
    answer_sources:
      - Windows Event ID 4688
      - User Endpoints
      - Critical Staff Workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs (EventID 4688)
          WHERE process_name IN ('powershell.exe', 'cmd.exe')
          AND entropy(command_line) > (baseline_entropy + 3 * std_dev)
          AND command_line CONTAINS 'AppData' OR 'Local'
          RETURN hostname, command_line, entropy_score
  - question: Can a machine learning model classify a process creation event as malicious based on its command-line features?
    context: This question moves beyond simple heuristics to a more robust ML-based approach. By training a model on features like command-line length, entropy, and character patterns, it's possible to detect novel or complex malicious commands designed to steal credentials or cookies that might evade other detection methods.
    answer_sources:
      - Windows Event ID 4688
      - User Endpoints
      - Critical Staff Workstations
      - Virtual Desktop Infrastructure (VDI) instances
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_process_event:
            features = extract_features(process_event.command_line)
            prediction = classification_model.predict(features)
            IF prediction == 'malicious' with high_confidence:
              ALERT process_event.hostname, process_event.command_line
  - question: Did the User-Agent string change during a single, authenticated user session?
    context: A legitimate user's browser will maintain a consistent User-Agent string throughout a session. A sudden change in this value for the same session cookie is a strong anomaly, suggesting that the cookie may have been stolen and is now being used by a different tool or browser, likely by an adversary.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4634
      - Internet Gateway
      - User Endpoints
      - Authentication Logs from Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP http_logs by session_id
          FOR each session_group:
            IF count(distinct user_agent) > 1:
              ALERT session_id, list_of_user_agents
  - question: Does a user session show 'impossible travel' velocity between requests, or is it using a User-Agent string that is significantly different from the user's normal set?
    context: This question combines two powerful anomalies. 'Impossible travel' detects when a session is accessed from geographically distant locations in an impossibly short time. Additionally, comparing the session's User-Agent to the user's historical baseline can reveal the use of unfamiliar hacking tools or browsers, both of which point to a hijacked session.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4634
      - Internet Gateway
      - User Endpoints
      - Authentication Logs from Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each session_id:
            requests = get_requests_sorted_by_time(session_id)
            FOR consecutive requests r1, r2:
              velocity = calculate_velocity(r1.location, r2.location, r1.time, r2.time)
              IF velocity > 600 mph:
                ALERT session_id, "Impossible Travel"
  - question: Does a user session fall outside of normal activity clusters when analyzed with other sessions based on features like source IP, User-Agent, and request timing?
    context: This question applies unsupervised machine learning to identify anomalous sessions. By clustering sessions based on multiple behavioral features, normal, legitimate activity will form dense clusters. Sessions that are outliers or form their own sparse clusters do not conform to established patterns and are strong candidates for being malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4634
      - Internet Gateway
      - User Endpoints
      - Authentication Logs from Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          features = extract_features(all_sessions, ['source_ip', 'user_agent', 'timing'])
          clusters = DBSCAN(features)
          outliers = find_noise_points(clusters)
          FOR each outlier_session in outliers:
            ALERT outlier_session.id, "Anomalous session detected"
  - question: Is a process accessing a browser cookie file immediately followed by a DNS query from the same host for a domain on a threat intelligence watchlist?
    context: This sequence of events is highly indicative of credential theft followed by C2 communication or exfiltration. This question creates a time-based rule to correlate local file access (cookie theft) with subsequent suspicious network activity (contacting a known-bad domain).
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - User Endpoints
      - DNS Servers
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for cookie_access_event in process_logs
          WITHIN 60 seconds of cookie_access_event on same host:
            SEARCH for dns_query_event in dns_logs
            WHERE dns_query_event.domain IN threat_intel_watchlist
            ALERT host, cookie_access_event.process, dns_query_event.domain
  - question: After a suspicious cookie file access, does the host connect to a statistically rare network destination?
    context: After stealing credentials, an adversary needs to exfiltrate them or use them. This question looks for the exfiltration/usage step by monitoring for network connections to destinations that are unusual for the source host, based on its own historical baseline. This can uncover C2 channels or data staging servers that are not yet on threat intelligence lists.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - User Endpoints
      - DNS Servers
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON suspicious_cookie_access_event(host):
            host_baseline = get_baseline_destinations(host)
            MONITOR new connections from host
            FOR each new_connection:
              IF new_connection.destination IS RARE FOR host_baseline (99th percentile):
                ALERT host, new_connection.destination
  - question: Does a sequence of host and network events (e.g., PowerShell reads cookie, then makes a DNS query to a dynamic DNS domain) match a known anomalous pattern?
    context: This question uses a sequence analysis model to detect a chain of events that, while potentially benign individually, are highly suspicious when observed in a specific order. This is more resilient than single-event alerts and can detect the logical flow of an adversary's actions, from credential access to exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - User Endpoints
      - DNS Servers
      - Internet Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT event_stream (process, network, dns) into sequence_model
          IF model.detect_anomalous_sequence('powershell_reads_cookie' -> 'dns_query_to_ddns'):
            ALERT host, detected_sequence
  - question: Has a new authenticated session been established without a preceding request to a defined authentication-workflow URL (e.g., login page)?
    context: Legitimate sessions are typically established after a user interacts with a login page or SSO redirect. An adversary using a stolen cookie can bypass this workflow and directly access internal pages. This question detects such "workflow bypass" by alerting when a new session appears without first visiting an expected authentication URL.
    answer_sources:
      - Zeek http.log
      - Web Application Servers
      - Load Balancers
      - Reverse Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE auth_urls = ['/login.aspx', '/sso/callback']
          FOR each new_session (new IP/User-Agent combo):
            first_request = get_first_request(new_session)
            IF first_request.url NOT IN auth_urls:
              ALERT new_session.id, "Session started without visiting auth URL"
  - question: Did a new user session begin by accessing a high-entropy URL (i.e., not a common landing page)?
    context: Users typically land on common pages like '/home' or '/dashboard'. A session starting on a deep, complex, or high-entropy URL may indicate that an adversary is using a stolen cookie to jump directly to a specific, pre-targeted resource, bypassing the normal application flow.
    answer_sources:
      - Zeek http.log
      - Web Application Servers
      - Load Balancers
      - Reverse Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_session:
            landing_page = get_first_url(new_session)
            IF entropy(landing_page) IS HIGH compared to baseline:
              ALERT new_session.id, landing_page
  - question: Does a model of user navigation paths detect a session starting in a state that is not a designated 'start' state?
    context: This question models the web application as a state machine where each page is a state and navigation is a transition. A Markov chain model can learn valid navigation paths. A session that materializes in a state that cannot be reached legitimately from a start state is a high-confidence anomaly, strongly suggesting cookie replay.
    answer_sources:
      - Zeek http.log
      - Web Application Servers
      - Load Balancers
      - Reverse Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          model = train_markov_chain(navigation_paths)
          FOR each new_session:
            start_state = get_first_page(new_session)
            IF model.is_invalid_start_state(start_state):
              ALERT new_session.id, "Session started in invalid application state"
  - question: Has a new authenticated web session to an internal application originated from an internal IP that is on a dynamic watchlist for other suspicious activity?
    context: This question correlates suspicious lateral movement with other security alerts. If a host is already flagged for suspicious behavior (e.g., C2 beaconing), any subsequent authenticated web activity from it is highly suspect and could represent an adversary using a stolen cookie to pivot to other internal systems.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Segments
      - Server Subnets
      - Data Center Core Switches
      - Internal Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH internal_web_requests with session_cookie
          WHERE source_ip IN dynamic_watchlist_of_risky_hosts
          ALERT source_ip, destination_server, user_account
  - question: Is an internal host contacting a number of unique web servers that is anomalously high compared to its peers?
    context: An adversary performing reconnaissance or lateral movement may cause a compromised host to connect to many different internal web services, whereas a normal user's workstation typically connects to a limited, consistent set. This question identifies potential pivot points by flagging hosts with an unusually high 'out-degree' in the internal web traffic graph.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Segments
      - Server Subnets
      - Data Center Core Switches
      - Internal Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            out_degree = count(distinct web_servers_contacted)
          IF host.out_degree > 95th_percentile_for_peer_group:
            ALERT host, host.out_degree
  - question: Has a web connection been observed that bridges two distinct communities or clusters of normal host-to-server activity?
    context: This question uses graph analysis to map normal patterns of communication (e.g., the 'Finance' user group accessing the 'ERP' server group). A connection that crosses between two otherwise separate clusters is anomalous and may represent an adversary moving from a compromised host in one part of the network to a target in another.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Segments
      - Server Subnets
      - Data Center Core Switches
      - Internal Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          graph = build_communication_graph(internal_traffic)
          communities = community_detection(graph)
          FOR each connection:
            IF connection.source.community != connection.destination.community:
              ALERT "Anomalous cross-community connection", connection
  - question: Is an internal web request containing a session cookie originating from a process that is not a standard web browser (e.g., powershell.exe, curl.exe)?
    context: Adversaries often use scripting engines and command-line tools for lateral movement, as it is stealthier and easier to automate. This question correlates network traffic with endpoint process data to find web requests made by non-browser processes, which is a strong indicator of script-based lateral movement using a stolen cookie.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - User Endpoints
      - Servers hosting internal web applications
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN http_logs with process_logs on source_ip and timestamp
          WHERE http_logs.has_cookie = true
          AND process_logs.name NOT IN ('chrome.exe', 'msedge.exe', 'firefox.exe')
          ALERT process_logs.name, http_logs.destination_url
  - question: Did a process that initiated an internal web request have a rare or anomalous parent-child relationship?
    context: Normal user activity involves predictable process chains (e.g., explorer.exe -> chrome.exe). Adversaries often create unusual process chains, such as an Office document spawning PowerShell to make a web request. This question seeks to identify these anomalous chains associated with lateral movement activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - User Endpoints
      - Servers hosting internal web applications
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each web_request from non-browser_process:
            parent = get_parent_process(non-browser_process)
            IF is_rare_relationship(parent, non-browser_process):
              ALERT "Anomalous parent-child process chain", parent, non-browser_process
  - question: Can a machine learning classifier identify an internal web request as originating from non-browser traffic based on process and network features?
    context: This question uses a classifier trained on process names, parent processes, User-Agent strings, and other features to distinguish legitimate automated traffic from malicious script-based lateral movement. This provides a more robust and adaptable method than static whitelists or blacklists for detecting unauthorized tool usage.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - User Endpoints
      - Servers hosting internal web applications
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each internal_web_request:
            features = extract_features(process_data, network_data)
            prediction = classification_model.predict(features)
            IF prediction == 'scripted_lateral_movement':
              ALERT request, "ML detected non-browser traffic"
  - question: Is the same session cookie being used in requests to an internal web application from multiple distinct internal IP addresses?
    context: A legitimate user session is typically tied to a single host and IP address. If the same session cookie appears from multiple internal IPs within a short time frame, it strongly suggests the cookie has been stolen and is being used by an adversary from a different machine to move laterally.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Core
      - Application Server Load Balancers
      - East-West Traffic Mirrors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each session_id in http_logs:
            source_ips = get_distinct_source_ips(session_id, within 30 minutes)
            IF count(source_ips) > 1:
              ALERT session_id, "Session re-used from multiple IPs", source_ips
  - question: Is a user accessing internal applications from a number of different source IP addresses that is significantly higher than their personal baseline?
    context: While some users may legitimately use multiple devices, a sudden spike in the number of source IPs for a single user in a day can indicate that their credentials or session are being used across multiple compromised hosts as part of a lateral movement campaign.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Core
      - Application Server Load Balancers
      - East-West Traffic Mirrors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each user, each day:
            ip_count = count(distinct source_ips)
            baseline_ip_count = user.get_baseline_ip_count()
            IF ip_count > (baseline_ip_count + 3 * std_dev):
              ALERT user, "Anomalous number of source IPs used"
  - question: Does a model of user navigation paths detect an illogical jump in application state that also coincides with a change in the source IP address?
    context: This advanced detection correlates two strong anomalies. A sudden, illogical navigation path (e.g., jumping from a settings page to a deep operational page without going through a menu) combined with a simultaneous change in source IP provides high-confidence evidence of a session being hijacked and re-used from a different host.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Internal Network Core
      - Application Server Load Balancers
      - East-West Traffic Mirrors
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          model = train_state_machine(navigation_paths)
          FOR each request in session:
            IF model.is_invalid_transition(previous_request, current_request)
            AND current_request.source_ip != previous_request.source_ip:
              ALERT session.id, "Invalid state transition with IP change"
  - question: Has an authenticated internal web request occurred from a host where the associated user has no recent interactive or network logon event?
    context: This question looks for 'ghost' sessions. For a legitimate user to make a web request from a host, they should have an associated logon event on that host. The absence of such an event suggests the session cookie was stolen and used on a machine where the user never actually logged in.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Domain Controllers
      - Member Servers
      - User Endpoints
      - Internal Web Servers
    range: last 24 hours
    queries:
      - technology: pseudocode
        query: |
          FOR each internal_web_request(user, source_host):
            logon_event = search_logons(user, source_host, last 24 hours, type=[2,3,10])
            IF logon_event is NULL:
              ALERT "Ghost session detected", user, source_host
  - question: Is a web request coming from a user on a host that they have a zero or near-zero historical probability of logging into?
    context: This question builds a baseline of which users log into which hosts. A web request originating from a user-host pairing that is statistically improbable or has never been seen before is a strong indicator of lateral movement, as the adversary is using stolen credentials on a machine the legitimate user does not use.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Domain Controllers
      - Member Servers
      - User Endpoints
      - Internal Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          baseline = build_user_host_logon_probabilities()
          FOR each internal_web_request(user, source_host):
            probability = baseline.get_probability(user, source_host)
            IF probability is very low:
              ALERT "Web request from improbable user-host pair", user, source_host
  - question: Does a bipartite graph model of user-host relationships flag a web request as coming from a highly improbable source host for that user?
    context: This question formalizes the user-host logon relationship using a bipartite graph model. The model learns expected connections and can predict the likelihood of a given user logging onto a given host. A web request from a user-host pair that the model flags as a highly unlikely connection points to anomalous lateral movement.
    answer_sources:
      - Zeek http.log
      - Windows Event ID 4624
      - Domain Controllers
      - Member Servers
      - User Endpoints
      - Internal Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          model = train_bipartite_graph(user_host_logon_data)
          FOR each internal_web_request(user, source_host):
            IF model.is_anomalous_link(user, source_host):
              ALERT "Graph model detected anomalous user-host web activity"
  - question: Is a user who is not in a privileged group attempting to access a URL defined as a high-privilege action within a sensitive internal application?
    context: This is a form of access control validation. By defining URL patterns for sensitive actions (e.g., deleting a VM, exporting users) and checking them against a user's group memberships, we can detect when a non-administrative user (or an adversary using their session) attempts privilege escalation or other malicious administrative actions.
    answer_sources:
      - Zeek http.log
      - Administrative Network Segment
      - Servers hosting critical management tools
      - Core Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE privileged_urls = ['/api/v1/delete_vm', '/admin/export_all_users']
          DEFINE privileged_groups = ['vCenter Admins', 'Domain Admins']
          FOR each web_request(user, url):
            IF url IN privileged_urls AND user.group NOT IN privileged_groups:
              ALERT "Unauthorized privileged action attempted", user, url
  - question: Is a user performing actions (accessing URLs/APIs) within a sensitive application that are statistically rare for them or their peer group?
    context: This question uses anomaly detection to find behavior that deviates from the norm. An adversary who has hijacked a session may perform actions that are unusual for the legitimate user or their role. By identifying actions that are in the 99.9th percentile of rarity for that user or their peer group, we can spot potential abuse of a compromised session.
    answer_sources:
      - Zeek http.log
      - Administrative Network Segment
      - Servers hosting critical management tools
      - Core Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          user_profile = build_url_profile(user, history)
          peer_profile = build_url_profile(user.peer_group, history)
          FOR each new_action(user, url):
            IF is_rare(url, user_profile) OR is_rare(url, peer_profile):
              ALERT "User performed statistically rare action", user, url
  - question: Does a sequence-to-sequence autoencoder model fail to reconstruct a user's sequence of actions, indicating a significant deviation from normal behavior?
    context: This advanced ML technique learns the 'rhythm' and 'grammar' of normal user navigation sequences within an application. An autoencoder trained on these sequences will have a high reconstruction error when presented with an anomalous sequence, such as one generated by an adversary. This can detect sophisticated, multi-step attacks within a hijacked session.
    answer_sources:
      - Zeek http.log
      - Administrative Network Segment
      - Servers hosting critical management tools
      - Core Switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          model = train_autoencoder(normal_navigation_sequences)
          FOR each user_session:
            sequence = get_url_sequence(user_session)
            reconstruction_error = model.get_error(sequence)
            IF reconstruction_error > threshold:
              ALERT "Anomalous user navigation sequence detected", user_session.id