name: T1018: Remote System Discovery
id: 5a2d60b8-2c1a-4f5e-9e6b-1c4d9a3f8b7c
description: This playbook helps determine if an adversary has begun active internal reconnaissance by enumerating remote systems on the network. It focuses on identifying the use of non-native discovery tools (like Nmap), the scripted or anomalous use of native utilities (like ping, net.exe), discovery via PowerShell or WMI, broad network scanning patterns characterized by a high volume of failed connections, and 'fan-out' activity where a compromised host connects to numerous other systems shortly after a remote logon.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events indicating the use of unauthorized remote discovery tools?
    context: This question seeks to identify the execution of known non-native reconnaissance tools like Nmap or Masscan. Adversaries often introduce these tools to a network to efficiently map out systems and services. Detecting their execution by name, hash, or associated network signatures (like specific User-Agent strings) is a high-fidelity indicator of active reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events (WinEventID:4688) WHERE process_name IN (watchlist_of_discovery_tools) OR file_hash IN (threat_intel_hashes). CORRELATE with network_traffic_logs (zeek_http) WHERE user_agent IN (known_tool_signatures).
  - question: Have any rarely seen executables, potentially indicative of newly introduced discovery tools, been executed on the network?
    context: This question uses statistical analysis to find outliers. Instead of relying on known-bad signatures, it identifies tools that are uncommon in the environment. An adversary might use a lesser-known or custom tool to evade signature-based detections. Flagging statistically rare executables helps uncover these unknown tools.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
    range: last 90 days
    queries:
      - pseudocode: CALCULATE prevalence of all process_names over 30 days. ALERT on any new process_creation_event WHERE process_name_prevalence < 1st_percentile. ENRICH with parent_process, user, command_line.
  - question: Has a machine learning model identified any process executions as being characteristic of a discovery tool?
    context: This question leverages a machine learning model to classify process behavior. The model analyzes various features of a process execution event (like parent process, command-line entropy, etc.) to determine if it behaves like a discovery tool, even if the tool itself is unknown or obfuscated. This provides a sophisticated, behavior-based detection method.
    answer_sources:
      - Windows Event ID 4688
      - Zeek http.log
      - Zeek conn.log
      - Endpoints and servers across all user and data center subnets, with a focus on ingress/egress points, DMZ servers, and developer workstations where such tools might be illegitimately staged or used.
    range: last 90 days
    queries:
      - pseudocode: INPUT process_execution_features (parent_process, cmd_line_entropy, user, etc.) into classification_model. ALERT where model_prediction == 'Discovery Tool' AND confidence_score > 0.9.
  - question: Has the native 'net.exe' utility been used in a non-interactive manner to enumerate domain information?
    context: Adversaries often 'live off the land' by using built-in system tools to avoid detection. The 'net.exe' command is powerful for discovering domain computers, users, and groups. When it's run by a process that isn't a user's command prompt or explorer (e.g., a web server or system service), it strongly suggests automated or malicious reconnaissance activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events (WinEventID:4688) WHERE process_name == 'net.exe' AND command_line CONTAINS ('view' OR '/domain' OR 'group \"Domain Computers\"') AND parent_process NOT IN ('explorer.exe', 'cmd.exe').
  - question: Has any host shown an anomalous spike in the execution of native discovery utilities like 'ping', 'net', or 'arp'?
    context: This question aims to detect the scripted or automated use of native tools by looking for statistical anomalies. While a single 'ping' is normal, hundreds of 'ping' commands executed in a short period by a script is not. By baselining normal activity for each host, we can spot significant deviations that indicate an adversary is rapidly enumerating the network.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: FOR each host, CALCULATE baseline hourly_execution_count for ('ping.exe', 'net.exe', 'arp.exe'). ALERT if current_hourly_count > (baseline_average + 3 * baseline_std_dev). CORRELATE with network_logs for fan-out_connections.
  - question: Are there any hosts exhibiting unusual command-line usage patterns for native utilities compared to their peers?
    context: This question uses unsupervised machine learning to find hosts that 'don't fit in.' By clustering hosts based on how they use native tools (frequency, arguments, time of day), we can identify outliers. A host that falls into a very small, unique cluster or is classified as noise may be performing reconnaissance in a way that is distinct from all other systems on the network.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - All Windows endpoints and servers, with heightened monitoring on critical assets like Domain Controllers, application servers, bastion hosts, and administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: CREATE feature_vectors for each host based on native_utility_usage (frequency, argument_patterns, time_of_day). APPLY clustering_algorithm (DBSCAN). INVESTIGATE hosts classified as 'noise' or belonging to small clusters.
  - question: Has PowerShell been used to perform scripted enumeration of multiple remote systems?
    context: PowerShell is a common tool for both administration and malicious activity. This question looks for signs that discovery cmdlets (like 'Test-Connection') are being used against a list of computers rather than a single, manually-typed target. The presence of variables, file reads, or long, comma-separated lists in the computer name argument is a strong indicator of automated reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management, such as application servers, management servers (e.g., SCCM), Domain Controllers, and Exchange servers.
    range: last 90 days
    queries:
      - pseudocode: SEARCH powershell_script_logs (EventID:4104) WHERE script_block CONTAINS ('Test-Connection', 'Get-CimInstance', etc.) AND target_argument CONTAINS ('$', 'Get-Content', or >10 commas).
  - question: Have there been any 'powershell.exe' or 'wmic.exe' commands with unusually complex or random-looking arguments?
    context: Adversaries may obfuscate their PowerShell or WMI commands to evade simple keyword-based detections. This obfuscation often increases the complexity or randomness (entropy) of the command-line string. By baselining normal command-line entropy, we can flag commands that are statistically unusual, which may reveal obfuscated discovery attempts, especially in arguments specifying target computer names.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management, such as application servers, management servers (e.g., SCCM), Domain Controllers, and Exchange servers.
    range: last 90 days
    queries:
      - pseudocode: CALCULATE entropy for command_line_arguments of 'powershell.exe' and 'wmic.exe' processes. ALERT when entropy_score > 95th_percentile of baseline.
  - question: Has any non-administrative host shown a sudden spike in outbound PowerShell Remoting or WMI/RPC network traffic?
    context: This question focuses on the network traffic generated by PowerShell and WMI remote enumeration. A sudden, sharp increase in connections on ports 5985/5986 (PowerShell Remoting) or 135/RPC (WMI) from a workstation or server that is not a designated management server is highly suspicious. It suggests that the host has been compromised and is being used to scan or query other systems on the network.
    answer_sources:
      - Windows Event ID 4688
      - Windows PowerShell Event ID 4104
      - Zeek conn.log
      - All Windows endpoints and servers, particularly those with PowerShell Remoting or WMI enabled for remote management, such as application servers, management servers (e.g., SCCM), Domain Controllers, and Exchange servers.
    range: last 90 days
    queries:
      - pseudocode: MONITOR time-series of outbound connection volume on ports 5985, 5986, 135 per host. USE anomaly_detection_model (ARIMA). ALERT on significant positive spikes for non-admin hosts.
  - question: Has any single host attempted to connect to a large number of other internal hosts, resulting in a high rate of connection failures?
    context: This question seeks to identify classic network scanning behavior. When an adversary performs a horizontal scan (searching for a specific open port across many hosts), many of the connection attempts will fail because the port is closed. This results in a high volume of TCP Reset ('REJ' or 'RSTO') packets from a single source to many destinations, which is a tell-tale sign of a network scan.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek dns.log
      - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
    range: last 90 days
    queries:
      - pseudocode: FROM network_connection_logs (zeek_conn), ALERT if count(distinct destination_ip) > 50 in 1 minute WHERE source_ip is internal AND connection_state IN ('REJ', 'RSTO'). CHECK for Zeek scan notices.
  - question: Are any hosts exhibiting a high ratio of unique destination hosts and ports relative to their total number of connections?
    context: This question uses a scoring metric to quantify 'scan-like' behavior. A high score indicates that a host is talking to many different hosts on many different ports, which is characteristic of both horizontal and vertical scanning. Normal traffic is often repetitive, while scanning traffic is exploratory. Flagging hosts with an anomalously high scan score helps to pinpoint reconnaissance activity.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek dns.log
      - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
    range: last 90 days
    queries:
      - pseudocode: FOR each source_ip in 5-minute windows, CALCULATE scan_score = (distinct_dest_ips * distinct_dest_ports) / (total_connections + 1). ALERT if scan_score > 99th_percentile of all hosts.
  - question: Has a machine learning model detected anomalous network traffic patterns from any host that are consistent with scanning?
    context: This question applies machine learning to network traffic analysis. A One-Class SVM is trained on what 'normal' host traffic looks like (e.g., connection counts, protocol mix, data volume). It can then identify any new traffic patterns that deviate significantly from this learned norm. This is effective for detecting novel or slow scanning techniques that might evade simpler threshold-based rules.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek dns.log
      - Core network switch span/tap ports, internal network segment gateways, virtual network taps in the cloud, and data center distribution layer switches.
    range: last 90 days
    queries:
      - pseudocode: CREATE feature_vectors from 5-minute traffic windows (connection_count, dest_ip_entropy, etc.). TRAIN one-class_svm_model on normal traffic. CLASSIFY new traffic windows and ALERT on outliers.
  - question: Following a successful remote logon, did the source machine immediately begin connecting to an unusually large number of internal systems?
    context: This question links an authentication event to subsequent network behavior. Adversaries often gain a foothold via a remote logon (e.g., RDP, VPN) and immediately begin discovering other systems to move laterally. Correlating a logon with a subsequent 'fan-out' of connections to many internal hosts on key administrative ports is a strong indicator that the logged-on session is malicious.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
    range: last 90 days
    queries:
      - pseudocode: ON successful_remote_logon (WinEventID:4624, Type 3 or 10), MONITOR source_ip for 10 minutes. ALERT if source_ip initiates connections to > 20 unique internal IPs on ports 135, 139, 445, 3389.
  - question: Has any user, after logging in remotely, connected to significantly more systems than they normally do?
    context: This question refines the 'fan-out' detection by personalizing it to each user. An administrator might normally connect to 30 servers after logging in, while a regular user connects to two. By creating a baseline for each user's typical post-login behavior, we can detect when a user's account is behaving anomalously, which could indicate it has been compromised and is being used for discovery.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
    range: last 90 days
    queries:
      - pseudocode: FOR each user, PROFILE historical post-login fan-out count. ON new_logon, CALCULATE fan-out for current session. ALERT if current_fan-out > (user_average + 4 * user_std_dev).
  - question: Did a remote logon event trigger a rapid and abnormal change in the network communication graph, centered on the source host?
    context: This question applies graph theory to threat detection. The network is modeled as a graph of nodes (hosts) and edges (connections). A remote logon by an adversary followed by discovery will appear as the rapid creation of many new edges originating from the source host's node. Graph-based anomaly detection algorithms can quantify this structural change and flag it as suspicious, providing a sophisticated way to visualize and detect discovery activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Domain Controllers (for logon events), VPN Concentrators, Bastion Hosts, and internal network segment gateways (for correlated network traffic).
    range: last 90 days
    queries:
      - pseudocode: MODEL network as host-to-host graph. ON remote_logon, MONITOR graph for new edge creation from source_host_node. USE graph_anomaly_detection to ALERT on rapid, high-degree outbound edge creation.