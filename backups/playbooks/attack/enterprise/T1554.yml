name: T1554: Compromise Host Software Binary
id: 5a8a1b9e-6b0f-4b0a-9d7a-7f1b2c3d4e5f
description: Is the adversary maintaining persistence by modifying host software binaries?
  This can be detected by observing discrepancies in binary hashes or digital signatures
  compared to known-good baselines, unauthorized file write/rename events in protected
  directories, unexpected network activity from trusted processes, or suspicious
  parent-child process relationships and module loads. These indicators suggest a
  binary has been tampered with to execute malicious code.
type: technique
related:
- TA0003: Persistence
contributors: Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
investigative_questions:
- question: Has a process executed from a critical file path with a hash that does
    not match the known-good allowlist or has an invalid signature?
  context: This question aims to detect direct modification of critical system or
    application binaries. By comparing the hash of an executed process against a pre-approved
    allowlist for that specific file path, we can identify instances where a legitimate
    binary has been replaced or tampered with. Additionally, checking the signature
    status helps catch cases where a binary's integrity is compromised.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - search: Process creation logs
    query: join on file_path with known_good_hash_allowlist | where process_hash !=
      allowlist_hash OR signature_status != 'Valid'
- question: Is there an abnormal number of unique hashes being observed for a specific
    binary file path, suggesting frequent or unusual modifications?
  context: Legitimate software is typically updated in predictable cycles. A sudden
    spike in the number of different hashes seen for the same executable file path
    can indicate unauthorized patching, trojanization, or other forms of tampering
    occurring outside of normal update schedules. This statistical approach helps
    detect subtle changes that might not be caught by static allowlists.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - search: Process creation logs
    query: group by file_path, day | count distinct process_hash | compare daily_count
      to 30-day_baseline | alert if daily_count > (mean + 3*stdev)
- question: Does a machine learning model classify a process execution event as suspicious
    based on its signature, hash status, and contextual features?
  context: This question leverages a machine learning model to identify complex patterns
    indicative of a compromised binary that may be missed by simple rule-based detections.
    By analyzing a combination of features like signature validity, hash reputation,
    parent process, and command-line characteristics, the model can make a holistic
    assessment and flag executions that deviate from established normal behavior.
  answer_sources:
  - Windows Event ID 1
  - Zeek pe.log
  - Critical system directories (e.g., C:\Windows\System32, /usr/bin)
  - Application installation directories (e.g., C:\Program Files)
  - Network file shares hosting executables
  - Domain controllers
  - Application servers
  - Developer workstations
  range: last 90 days
  queries:
  - search: Process creation logs
    query: apply binary_classification_model(features: signature_status, hash_in_allowlist,
      parent_process, cmd_length, cmd_entropy, path_entropy) | alert if classification
      == 'suspicious' and confidence > threshold
- question: Has a new binary file been created in a protected system directory by
    a process that is not an authorized installer or updater?
  context: This question focuses on detecting the unauthorized placement or modification
    of executables and libraries in sensitive system locations. Legitimate changes
    to these directories are typically performed by a small, known set of processes.
    By alerting when an unapproved process writes a binary file to these locations,
    we can catch attempts to plant backdoors or replace legitimate software with malicious
    versions.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories
  - CI/CD pipeline build servers
  range: last 90 days
  queries:
  - search: File creation logs
    query: where target_filename ends with (.exe, .dll, .sys) AND target_path in protected_dirs
      | filter where source_process not in trusted_installer_allowlist
- question: Is there an unusually diverse set of processes writing files to protected
    directories on a given host?
  context: Normally, only a few specific processes (like installers and updaters)
    modify files in protected directories. An increase in the variety (entropy) of
    processes performing these writes can signal that an adversary is using multiple
    tools or living-off-the-land binaries to modify system files, deviating from the
    host's normal operational baseline.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories
  - CI/CD pipeline build servers
  range: last 90 days
  queries:
  - search: File creation logs
    query: where target_path in protected_dirs | group by host, day | calculate shannon_entropy
      of unique source_process_names | alert if daily_entropy > 98th_percentile of
      30-day_host_baseline
- question: Does an anomaly detection model identify a file modification event in
    a protected directory as a statistical outlier compared to normal installation
    and patching behavior?
  context: This question uses an unsupervised machine learning model to learn the
    complex relationships that define legitimate file modification activity, such
    as which user accounts run which installers to update specific files. The model
    can then identify new file write events that do not fit this learned pattern,
    flagging them as potential unauthorized modifications without relying on pre-defined
    rules.
  answer_sources:
  - Windows Event ID 11
  - Windows Event ID 1
  - File systems of production servers and user endpoints
  - Software deployment servers
  - Code repositories
  - CI/CD pipeline build servers
  range: last 90 days
  queries:
  - search: File creation logs
    query: apply anomaly_detection_model(features: source_process, target_path, user,
      parent_process) | alert if event is outlier
- question: Has a process that should never use the network (e.g., notepad.exe) initiated
    an outbound network connection?
  context: Certain utilities and system processes have no legitimate reason to initiate
    network connections. If a process like `calc.exe` is observed making an outbound
    connection, it is a strong indicator that its binary has been compromised or it
    is being used in a process injection attack. This is often a sign of a backdoor
    attempting to establish a command and control channel.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: last 90 days
  queries:
  - search: Network connection logs
    query: where source_process in network_blocklist AND destination_ip is external
      | alert
- question: Is a process communicating over a non-standard port or transferring an
    unusually large amount of data compared to its historical baseline?
  context: This question aims to detect when a compromised binary uses the network
    in an anomalous way. Adversaries may use a legitimate, network-enabled process
    for C2 or data exfiltration. By baselining normal behavior (e.g., a web browser
    usually connects to ports 80/443), we can spot deviations, such as connecting
    to a high, non-standard port or exfiltrating an unusually large file, which could
    indicate malicious activity.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: last 90 days
  queries:
  - search: Network connection logs
    query: compare destination_port and data_volume to historical_baseline for source_process
      | alert if destination_port is new OR data_volume > 99th_percentile
- question: Does the volume of network traffic from a host to a specific destination
    port significantly deviate from the forecasted normal pattern?
  context: This question uses time-series analysis to detect anomalies in the rhythm
    and volume of network traffic. Normal network activity often has predictable
    daily or weekly patterns. A compromised binary used for tasks like data exfiltration
    or maintaining a C2 heartbeat might create traffic spikes or patterns that break
    from this predicted behavior, allowing for their detection.
  answer_sources:
  - Windows Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Endpoint process and network monitoring
  - Network egress points (firewalls, web proxies)
  - DNS resolution logs
  - Intrusion Detection Systems (IDS)
  range: last 90 days
  queries:
  - search: Network traffic logs
    query: aggregate by host, dest_port over 5min intervals | apply time_series_model
      | alert if observed_volume deviates significantly from predicted_volume
- question: Has a known-suspicious parent-child process relationship been observed,
    or has a process loaded an unsigned module from a user-writable directory?
  context: This question seeks to identify two high-fidelity indicators of compromise.
    First, certain process chains (like a document reader spawning a command shell)
    are almost always malicious. Second, legitimate software modules are typically
    signed and stored in protected system directories. Loading an unsigned DLL from
    a temporary or user folder is a common technique for malware to inject code into
    a trusted process, indicating that the parent process may be compromised.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  - System memory where modules are loaded
  - User profile directories (e.g., %APPDATA%, %TEMP%)
  - Application plugin directories
  range: last 90 days
  queries:
  - search: Process creation logs and Module load logs
    query: search process_creation where parent_child_pair in known_bad_chains OR
      search module_load where module_is_signed == 'false' AND module_path in user_writable_dirs
- question: Has a statistically rare parent-child process relationship occurred in
    the environment?
  context: This question uses environmental baselining to find 'haystack' needles.
    While some parent-child relationships are universally suspicious (e.g., `winword.exe`
    -> `cmd.exe`), others might be rare but legitimate in a specific organization.
    By calculating the frequency of all parent-child pairs across the enterprise,
    we can flag new, extremely rare combinations that represent a deviation from
    established software behavior and warrant investigation.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  - System memory where modules are loaded
  - User profile directories (e.g., %APPDATA%, %TEMP%)
  - Application plugin directories
  range: last 90 days
  queries:
  - search: Process creation logs
    query: lookup prevalence of parent_child_pair in enterprise_baseline | alert if
      prevalence < 0.1%
- question: Does a graph-based anomaly detection model identify a process's behavior
    (its parent and child relationships) as a structural outlier compared to the rest
    of the enterprise?
  context: This question applies advanced graph analytics to model the complex web
    of process interactions. By representing process lineage as a graph, we can analyze
    the structural role of each process. A compromised binary may start exhibiting
    uncharacteristic behaviors, like spawning a rare child process, which would change
    its position in the graph and cause it to be flagged as a structural outlier.
  answer_sources:
  - Windows Event ID 1
  - Windows Event ID 7
  - Process execution logs on all endpoints and servers
  - System memory where modules are loaded
  - User profile directories (e.g., %APPDATA%, %TEMP%)
  - Application plugin directories
  range: last 90 days
  queries:
  - search: Process creation logs
    query: build process_lineage_graph | generate node_embeddings | cluster nodes
      to find behavioral communities | alert if process_vector is an outlier