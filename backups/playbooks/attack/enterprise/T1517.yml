name: T1517: Access Notifications
id: 5a8e21c2-6c34-4a2b-8a8c-9d6e7f1b0a3d
description: >
  Investigates whether an adversary is intercepting or exfiltrating sensitive information, such as one-time passwords (OTPs) or multi-factor authentication (MFA) codes, by abusing mobile device notification access permissions. This playbook focuses on detecting unauthorized applications with the BIND_NOTIFICATION_LISTENER_SERVICE permission, analyzing their network behavior for signs of command and control (C2) communication or data exfiltration, identifying programmatic dismissal of sensitive notifications, and correlating user-reported issues (e.g., missing MFA codes) with suspicious device activity. Detections are based on comparing application inventories to corporate allowlists, analyzing network traffic against threat intelligence and behavioral baselines, and modeling user interaction patterns to spot non-interactive, automated data harvesting.
type: technique
related:
  - TA0031: Credential Access
  - TA0035: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any non-allowlisted applications granted notification access permissions on managed devices?
    context: >
      Adversaries may deploy malicious applications that request the `BIND_NOTIFICATION_LISTENER_SERVICE` permission to intercept sensitive data from notifications, such as MFA codes. This question aims to identify any application with this powerful permission that is not explicitly approved on the corporate allowlist. A mismatch in either package name or code-signing certificate hash can indicate a trojanized or unauthorized application, which poses a significant security risk.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform; Mobile Threat Defense (MTD) cloud console; Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH MDM logs for permission='BIND_NOTIFICATION_LISTENER_SERVICE' | JOIN with corporate_allowlist on app_package_name and signing_certificate_hash | WHERE allowlist_match=false | ALERT with device_id, user, app_name, package_name
  - question: Do any unlisted applications with notification access have an unusually low installation prevalence or a permission set that deviates significantly from their peers?
    context: >
      Malicious or targeted spyware is often not widely distributed. This question seeks to identify unlisted applications with notification access that are statistical outliers in terms of installation count. A very low prevalence ($$ P_{install} < 0.05 $$) can be a strong indicator of a targeted attack. Furthermore, comparing the app's requested permissions to the norm for its category can reveal over-permissioned, and therefore risky, applications. A high Jaccard distance suggests the app's functionality, as defined by its permissions, is abnormal.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform; Mobile Threat Defense (MTD) cloud console; Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each unlisted_app with notification_access: GET install_count from MDM inventory | IF install_count < 5th percentile: CALCULATE Jaccard distance of app_permissions vs category_average | FLAG if distance is high
  - question: Can machine learning models predict if an application with notification access is likely malicious based on its metadata?
    context: >
      This question leverages a pre-trained machine learning model to assess the risk of an application based on a variety of metadata features. Factors like an unusually short signing certificate validity, a developer with no history, heavy code obfuscation, and an excessive number of requested permissions are common traits of malware. A high maliciousness score (e.g., > 0.85) from the model provides a data-driven basis for escalating an application for immediate review or automated quarantine, enabling faster response to potential threats.
    answer_sources:
      - MDM Permission Grant Event Log
      - MDM Application Inventory Report
      - Corporate Application Allowlist File
      - Centralized Mobile Device Management (MDM) platform; Mobile Threat Defense (MTD) cloud console; Internal repository (e.g., Git, database) hosting the application package name and certificate hash allowlist.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: EXTRACT features (permissions, developer, cert_validity, etc.) | INPUT into ML model | IF predicted_probability > 0.85: ADD to watchlist OR QUARANTINE via MDM API
  - question: Is any application with notification access communicating with known malicious infrastructure?
    context: >
      Once a malicious app has harvested data from notifications, it needs to exfiltrate it. This question aims to detect that communication by correlating device-level application permissions with network logs. By checking the destination IPs, domain names (SNI), and TLS fingerprints (JA3/JA3S) against known threat intelligence feeds and blocklists, we can identify connections to adversary command-and-control (C2) servers or data drop zones. A match is a high-confidence indicator of compromise.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed; SIEM platform containing correlated MDM and network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH MDM logs for apps with notification_access | JOIN with Zeek logs on device_ip, timestamp | FOR each outbound flow: CHECK destination_ip, sni, ja3_hash against threat_intel_feeds | ALERT on match
  - question: Is any application with notification access exhibiting network patterns indicative of Domain Generation Algorithms (DGA) or C2 beaconing?
    context: >
      Adversaries use DGA and periodic beaconing to make their C2 infrastructure resilient and difficult to detect. This question applies advanced analytical techniques to network logs to uncover these patterns. A sudden spike in the Shannon entropy of DNS queries ($$ H(X) = - \sum p(x) \log_2 p(x) $$) suggests the use of randomly generated domains (DGA). Concurrently, using FFT to analyze connection timestamps can reveal the highly regular, low-volume 'heartbeats' characteristic of C2 beaconing, even if the destination is not on a known threat list.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed; SIEM platform containing correlated MDM and network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: ANALYZE Zeek dns.log in 5-min windows | CALCULATE Shannon entropy of domains | ALERT if entropy > 95th percentile of baseline | ANALYZE Zeek conn.log timestamps with FFT | ALERT on periodic 'heartbeat' patterns
  - question: Is any application with notification access generating network traffic that is anomalous compared to a baseline of normal behavior?
    context: >
      This question uses a time-series anomaly detection model (e.g., LSTM autoencoder) to identify subtle deviations in network traffic that signature-based methods might miss. The model learns what 'normal' network behavior looks like for mobile devices. When a network flow from an app with notification access—especially one running in the background—cannot be accurately 'reconstructed' by the model, it results in a high reconstruction error. This indicates the traffic is anomalous and could represent C2 activity or data exfiltration.
    answer_sources:
      - MDM Permission Grant Event Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Threat Intelligence Feed
      - Network egress points including corporate VPN concentrators, WiFi access points, and Cloud Access Security Broker (CASB) proxies where Zeek sensors are deployed; SIEM platform containing correlated MDM and network logs.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each network flow from app with notification_access: CREATE feature vector (bytes, duration, proto, etc.) | FEED into LSTM autoencoder model | IF reconstruction_error > threshold AND app_state=background: TRIGGER investigation
  - question: Are sensitive notifications, such as from authenticator apps, being programmatically dismissed almost instantly by another application?
    context: >
      A key behavior of notification-harvesting malware is to intercept and dismiss a sensitive notification before the user can see it. This question looks for this specific activity by correlating 'notification posted' and 'notification dismissed' events. If a notification from a trusted source (like an MFA app) is dismissed by a different app within a very short timeframe (e.g., < 2 seconds), it is a strong indicator of automated, non-user-initiated interception for credential theft.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console; SIEM platform for log correlation.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH MTD logs for notification_posted from trusted_auth_app | JOIN with notification_dismissed on notification_id | WHERE dismissing_app != source_app AND time_diff < 2 seconds | ALERT
  - question: Is a specific application dismissing certain notifications significantly faster than its own typical behavior?
    context: >
      This question establishes a behavioral baseline for how quickly an application normally dismisses notifications it interacts with. By identifying dismissals that are statistical outliers—specifically, those that are much faster than usual ($$ T_{dismiss} < P_{5} $$)—we can pinpoint suspicious activity. A dismissal that is abnormally fast, especially for a notification from a sensitive source like an authenticator app, suggests a programmatic process designed to capture information before the user can act.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console; SIEM platform for log correlation.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: CALCULATE baseline median dismiss_time | FOR each new dismissal: IF dismiss_time < 5th percentile of baseline AND notification_source is sensitive: FLAG for review
  - question: Are we observing notification dismissal event sequences that deviate from normal user interaction patterns?
    context: >
      Normal user behavior follows a predictable sequence: a notification arrives, the user interacts with it, and this often leads to the user launching the relevant application. This question uses a sequence-based model (like an RNN) to learn these normal patterns. An anomalous sequence, such as a notification being dismissed by a third-party app followed by no user activity, breaks this pattern. This indicates a non-interactive, programmatic event, which is highly indicative of automated data harvesting by malware.
    answer_sources:
      - MTD Notification Posted Log
      - MTD Notification Dismissed Log
      - MDM Application Launch Log
      - Mobile Threat Defense (MTD) cloud console; SIEM platform for log correlation.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL normal user sequence: [Notif_Posted -> Notif_Dismissed -> App_Launch] | MONITOR for anomalous sequences like [Notif_Posted -> Dismissed_by_other_App -> No_App_Launch] | FLAG as high-probability anomaly
  - question: Is there a correlation between help desk tickets for missing MFA/OTP codes and recent application installations or permission changes on the user's device?
    context: >
      A user reporting a missing MFA or OTP notification is a powerful human-in-the-loop sensor for potential compromise. This question operationalizes that insight by automatically correlating such help desk tickets with device management logs. Finding a new, unvetted application installation or a grant of notification access permission around the time of the incident provides strong circumstantial evidence that the new app may have intercepted and suppressed the notification.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow); Centralized SIEM platform; MDM/UEM management console; User's managed mobile device.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH helpdesk tickets for keywords ('MFA', 'OTP', etc.) | ON match, GET user and timestamp | QUERY MDM logs for that user +/- 15 mins from timestamp | ALERT if new_app_install or notification_permission_grant is found
  - question: Following a user report of a missing notification, did any app on their device exhibit anomalous background data usage?
    context: >
      After intercepting sensitive data, a malicious app will likely attempt to exfiltrate it. This question focuses investigation on the device of a user who has already reported a potential issue. By analyzing background data usage and calculating the Z-score against a historical baseline, we can spot significant deviations. A high Z-score ($$ Z > 3 $$) indicates that an app transferred a statistically unusual amount of data, which, when combined with notification access permission, is a strong signal of data exfiltration.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow); Centralized SIEM platform; MDM/UEM management console; User's managed mobile device.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON user report of missing notification: QUERY MTD/MDM logs for background data usage on user's device | FOR each app with notification_access: CALCULATE Z-score of data_volume vs 30-day baseline | ALERT if Z-score > 3
  - question: Can we use Natural Language Processing (NLP) to automatically identify and prioritize help desk tickets related to notification interception?
    context: >
      Manually triaging help desk tickets is slow and can delay the response to a critical security incident. This question proposes using an advanced NLP model (like BERT) to understand the intent and context of user-submitted tickets. By automatically classifying tickets related to potential credential theft with high confidence (e.g., probability > 0.90), the system can immediately escalate the incident, assign a critical priority, and trigger automated investigative workflows, significantly reducing the time to detection and response.
    answer_sources:
      - ServiceNow Incident Table
      - MDM Application Install Log
      - MDM Permission Grant Event Log
      - Service desk ticketing system (e.g., Jira, ServiceNow); Centralized SIEM platform; MDM/UEM management console; User's managed mobile device.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INTEGRATE NLP model with helpdesk system | FOR each new ticket: CLASSIFY relevance to notification theft | IF probability > 0.90: SET priority=critical, TAG user/device as high-risk, TRIGGER automated investigation
  - question: Are applications with notification access communicating over unexpected network ports or exhibiting signs of unstable connections during large data transfers?
    context: >
      Legitimate applications typically communicate over standard, predictable ports (e.g., 443 for HTTPS). This question aims to detect anomalous network behavior by flagging connections to non-standard or unexpected ports from apps with notification access. Furthermore, analyzing the connection history (`history` field in Zeek) can reveal network-level issues like packet retransmissions (`R`). When these issues occur during a large outbound data transfer, it can indicate an attempt to exfiltrate data over a poor or covert channel, warranting a higher-priority alert.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies; SIEM platform for log correlation and analysis.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: MONITOR outbound connections in Zeek | ALERT if destination_port is not on app_category_allowlist | ELEVATE alert if conn_history shows anomalies (e.g. 'R' flag) AND orig_bytes is large
  - question: Is an application with notification access exfiltrating an anomalously large amount of data, especially while running in the background?
    context: >
      This question focuses on detecting data exfiltration by baselining the network behavior of each application. A sudden, significant spike in outbound data volume (exceeding the 99th percentile of its history) or an unusually high ratio of sent-to-received data is a strong indicator of exfiltration. The suspicion is greatly increased if this activity occurs while the application is in a background state, as there is no user interaction to explain the data transfer. This combination of factors should trigger a critical alert.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies; SIEM platform for log correlation and analysis.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: BASELINE hourly outbound_bytes and outbound/inbound_ratio | ALERT if hourly_bytes > 99th percentile OR ratio > 99th percentile | ESCALATE if app_state=background during transfer
  - question: Can an unsupervised machine learning model identify anomalous network flows from apps with notification access that may represent covert exfiltration?
    context: >
      This question leverages an unsupervised ML model like Isolation Forest, which is effective at identifying outliers in data without prior labeling. By feeding the model a rich set of network flow features, it can learn to spot unusual combinations of attributes (e.g., odd port, strange data volume, unusual duration) that represent anomalous activity. Flagging these anomalies, especially when they occur outside of a user's normal active hours, can uncover covert exfiltration channels that might otherwise go unnoticed.
    answer_sources:
      - Zeek conn.log
      - MDM Permission Grant Event Log
      - MDM Application State Log
      - Network data collection points such as VPN concentrators, corporate WiFi controllers, and CASB proxies; SIEM platform for log correlation and analysis.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each app with notification_access: FEED network flow features (bytes, duration, port, etc.) into Isolation Forest model | FLAG flows with high anomaly scores | INCREASE priority if flow occurs outside user's typical active hours