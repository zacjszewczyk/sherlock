name: T1543.004: Launch Daemon
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is using macOS Launch Daemons for persistence or privilege escalation. Adversaries may create or modify property list (.plist) files in /Library/LaunchDaemons/ to execute malicious payloads at system startup or on a schedule with root privileges. Investigative focus includes detecting known-malicious hashes, identifying plists with suspicious characteristics (e.g., non-standard paths, obfuscated arguments, typosquatted names), analyzing network traffic for beaconing or connections to malicious C2 servers, and detecting hijacking of legitimate daemons. The playbook also addresses privilege escalation by looking for daemons identified as known exploit tools, unauthorized loading of daemons via `sudo launchctl`, file creations in `/Library/LaunchDaemons/` by non-root users, and post-escalation activity such as user creation or security control modification by a daemon-spawned process.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly created or modified Launch Daemon or its associated executable a known-malicious file?
    context: Adversaries often reuse known malware. This question checks if a new or modified plist file in the /Library/LaunchDaemons/ directory, or the executable it is configured to run, matches a hash from a threat intelligence feed. A match is a high-confidence indicator of compromise.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - Threat Intelligence Feeds
      - File system logs from all company-managed macOS endpoints, specifically monitoring the `/Library/LaunchDaemons/` directory.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*)
          IF file_event.type is 'create' or 'modify'
          plist_path = file_event.path
          executable_path = PARSE_PLIST(plist_path, 'Program')
          plist_hash = HASH(plist_path, 'sha256')
          executable_hash = HASH(executable_path, 'sha256')
          IF (IS_IN_THREAT_INTEL(plist_hash) OR IS_IN_THREAT_INTEL(executable_hash))
          THEN ALERT(high, "Known malicious Launch Daemon detected")
  - question: Is a Launch Daemon's executable unusually rare across the environment, suggesting it might be novel malware?
    context: Novel or targeted malware will not have a known-bad hash in threat intelligence feeds. This question helps identify potentially malicious executables by checking their prevalence (how many endpoints have the same file hash). A very low count is suspicious and warrants investigation, as legitimate software is typically widely distributed.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - Threat Intelligence Feeds
      - File system logs from all company-managed macOS endpoints, specifically monitoring the `/Library/LaunchDaemons/` directory.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH executable_path IN (all executables from /Library/LaunchDaemons/*.plist)
          executable_hash = HASH(executable_path, 'sha256')
          prevalence = COUNT(endpoints where file.hash == executable_hash)
          IF prevalence < THRESHOLD(1st percentile)
          THEN ALERT(medium, "Anomalously rare Launch Daemon executable found")
  - question: Can a machine learning model classify a new or modified Launch Daemon as malicious based on its characteristics?
    context: This question explores a proactive, machine learning-based approach to detection. By training a classification model on features like file size, hash prevalence, code signing status, and binary entropy, we can automatically flag suspicious Launch Daemons that might not trigger simpler, signature-based rules.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - Threat Intelligence Feeds
      - File system logs from all company-managed macOS endpoints, specifically monitoring the `/Library/LaunchDaemons/` directory.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*)
          features = EXTRACT_FEATURES(file_event.path) // size, prevalence, signing, entropy
          prediction = ML_MODEL.predict(features)
          IF prediction is 'malicious'
          THEN ALERT(medium, "ML model classified Launch Daemon as malicious")
  - question: Does a new or modified Launch Daemon plist file contain suspicious patterns indicative of malicious activity?
    context: Adversaries often use specific patterns, such as placing executables in temporary or user-writable directories (/tmp/, /Users/Shared/), obfuscating commands with base64, or misspelling legitimate daemon names. This question uses YARA rules to scan for these known bad patterns within the plist file itself.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - File Content
      - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content of all plist files within it.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*.plist)
          IF file_event.type is 'create' or 'modify'
          matches = YARA_SCAN(file_event.path, ruleset='macos_launchdaemon_patterns')
          IF matches.count > 0
          THEN ALERT(high, "Suspicious pattern detected in Launch Daemon plist", details=matches)
  - question: Does a new plist file exhibit anomalous characteristics like high entropy in its arguments or a name suspiciously similar to a legitimate daemon?
    context: This question uses a statistical approach to find suspicious plists that might not match exact YARA rules. High Shannon entropy in the program arguments can indicate obfuscated code, and a small Levenshtein distance (e.g., 1-2 character difference) to a known-good daemon name can indicate typosquatting.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - File Content
      - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content of all plist files within it.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*.plist)
          args = PARSE_PLIST(file_event.path, 'ProgramArguments')
          entropy = CALCULATE_ENTROPY(args)
          lev_dist = MIN(LEVENSHTEIN_DISTANCE(file_event.name, known_good_names))
          IF entropy > THRESHOLD(95th percentile) OR (lev_dist > 0 AND lev_dist < 3)
          THEN ALERT(medium, "Anomalous plist characteristics detected")
  - question: Does a new Launch Daemon plist cluster with known benign plists, or does it appear as an outlier?
    context: This question uses unsupervised machine learning (DBSCAN clustering) to find outliers. By grouping plists based on numerical features like executable path depth, number of arguments, and average argument length, we can identify novel or unusual plists that do not fit any existing cluster, marking them for investigation.
    answer_sources:
      - File Creation Events
      - File Modification Events
      - File Content
      - The `/Library/LaunchDaemons/` directory on all macOS endpoints and the content of all plist files within it.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          features = EXTRACT_FEATURES_FOR_ALL_PLISTS() // path depth, arg count, etc.
          clusters = DBSCAN(features)
          FOR EACH plist WHERE plist.cluster is 'noise'
          ALERT(low, "Launch Daemon plist is a statistical outlier")
  - question: Is a process spawned by a new Launch Daemon connecting to a known malicious domain or a newly registered domain?
    context: Persistence mechanisms are often used to establish command and control (C2). This question correlates the creation of a Launch Daemon with its subsequent network activity to see if it communicates with suspicious endpoints, as identified by threat intelligence or by their recent creation date (Newly Registered Domains).
    answer_sources:
      - File Creation Events
      - Process Execution Events
      - Zeek conn.log
      - Zeek dns.log
      - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN (file_events where path contains '/Library/LaunchDaemons/') AS fe
          WITH (process_events) AS pe ON fe.executable = pe.path
          WITH (network_events) AS ne ON pe.pid = ne.pid
          ENRICH ne.destination with threat_intel, whois_data
          IF ne.destination.is_malicious OR ne.destination.is_nrd
          THEN ALERT(high, "Launch Daemon process connected to suspicious destination")
  - question: Does the network traffic from a process spawned by a Launch Daemon exhibit beaconing behavior?
    context: C2 beaconing often involves regular, low-volume connections that can be hard to spot. This question uses statistical analysis of connection timing (jitter) and data volume to identify this characteristic pattern. Low standard deviation in time between connections and data volume is a strong indicator of automated C2 activity.
    answer_sources:
      - File Creation Events
      - Process Execution Events
      - Zeek conn.log
      - Zeek dns.log
      - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process spawned by launchd
          connections = GET_NETWORK_CONNECTIONS(process.pid, last 24h)
          jitter_stddev = STDEV(connections.time_deltas)
          volume_stddev = STDEV(connections.bytes_out)
          IF jitter_stddev < THRESHOLD(5th percentile) AND volume_stddev < THRESHOLD(5th percentile)
          THEN ALERT(medium, "Potential C2 beaconing detected from Launch Daemon process")
  - question: Is the network activity pattern of a daemon-spawned process anomalous when compared to a baseline of normal behavior using an LSTM autoencoder?
    context: This question applies advanced anomaly detection using an LSTM autoencoder, a neural network well-suited for time-series data like network logs. By training the model on what normal daemon network traffic looks like, it can flag any significant deviations in patterns (e.g., connection frequency, data volume), potentially catching sophisticated C2 or data exfiltration.
    answer_sources:
      - File Creation Events
      - Process Execution Events
      - Zeek conn.log
      - Zeek dns.log
      - Network gateways, DNS resolvers, and process-level network logs on all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process spawned by launchd
          timeseries_data = GET_NETWORK_TIMESERIES(process.pid) // bytes_out, packets_out, etc.
          reconstruction_error = LSTM_AUTOENCODER.score(timeseries_data)
          IF reconstruction_error > THRESHOLD
          THEN ALERT(medium, "Anomalous network behavior detected by LSTM model")
  - question: Has the executable file for a pre-existing, legitimate Launch Daemon been modified, indicating a potential hijack?
    context: Adversaries may hijack legitimate daemons by replacing their executables with malicious ones to inherit their persistence and privileges. This question involves creating a baseline (a 'golden manifest') of known-good file hashes and alerting on any deviation, a technique also known as File Integrity Monitoring (FIM).
    answer_sources:
      - File Modification Events
      - File Hash Database
      - Directories containing executables referenced by plists in /Library/LaunchDaemons/ across all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event where type is 'modify'
          IF file_event.path IN golden_manifest
          new_hash = HASH(file_event.path, 'sha256')
          IF new_hash != golden_manifest[file_event.path].hash
          THEN ALERT(high, "Legitimate Launch Daemon executable has been hijacked")
  - question: Is an executable for a Launch Daemon being modified more frequently than its historical baseline, suggesting suspicious activity instead of a normal update?
    context: While legitimate software updates cause file modifications, they usually happen at a predictable, infrequent rate. This question seeks to find an anomalous modification frequency, which could indicate an attacker repeatedly trying to modify or replace a file, distinguishing malicious activity from normal patching cycles.
    answer_sources:
      - File Modification Events
      - File Hash Database
      - Directories containing executables referenced by plists in /Library/LaunchDaemons/ across all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH executable in launch_daemon_executables
          modification_count_monthly = COUNT(file_modify_events for executable in last 30d)
          historical_mean, historical_stdev = GET_HISTORICAL_MODS(executable)
          IF modification_count_monthly > historical_mean + 2 * historical_stdev
          THEN ALERT(medium, "Anomalous modification frequency for Launch Daemon executable")
  - question: Does a file modification event for a Launch Daemon's executable deviate from the profile of a legitimate software update?
    context: This question uses a one-class SVM, an anomaly detection model, to learn the characteristics of normal software updates (e.g., initiated by a known installer process like `installer` or `system_installd`, running as root). Any modification event that does not fit this learned profile is flagged as anomalous and potentially malicious.
    answer_sources:
      - File Modification Events
      - File Hash Database
      - Directories containing executables referenced by plists in /Library/LaunchDaemons/ across all macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event where type is 'modify' and path is launch_daemon_executable
          features = EXTRACT_FEATURES(file_event) // parent_process, user_context, etc.
          is_anomaly = ONE_CLASS_SVM_MODEL.predict(features)
          IF is_anomaly
          THEN ALERT(medium, "Anomalous file modification of Launch Daemon executable")
  - question: Is a new Launch Daemon or its executable identified as a known privilege escalation tool?
    context: This question aims to detect the use of known malicious tools for privilege escalation. It checks if a new plist or its associated executable in the LaunchDaemons directory matches a known signature (hash or YARA rule) from threat intelligence feeds specifically curated for macOS privilege escalation tools.
    answer_sources:
      - File Creation Events
      - Threat Intelligence Feeds
      - YARA rule sets
      - File system and process logs on all macOS endpoints, with specific focus on monitoring `/Library/LaunchDaemons/`.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*)
          hash = HASH(file_event.path)
          yara_match = YARA_SCAN(file_event.path, 'macos_privesc_tools')
          IF IS_IN_THREAT_INTEL(hash, 'privesc') OR yara_match
          THEN ALERT(high, "Known privilege escalation tool detected as Launch Daemon")
  - question: Does the content of a new Launch Daemon or its executable contain an unusual frequency of keywords related to privilege escalation?
    context: This question uses natural language processing (TF-IDF) to find suspicious files without relying on exact signatures. It identifies daemons that contain a high concentration of terms commonly used in privilege escalation exploits (e.g., `dscl`, `setuid`, `AuthorizationExecuteWithPrivileges`), which is a strong statistical indicator of malicious intent.
    answer_sources:
      - File Creation Events
      - Threat Intelligence Feeds
      - YARA rule sets
      - File system and process logs on all macOS endpoints, with specific focus on monitoring `/Library/LaunchDaemons/`.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*)
          text_content = GET_STRINGS(file_event.path)
          tfidf_scores = CALCULATE_TFIDF(text_content, privesc_keywords)
          IF MAX(tfidf_scores) > THRESHOLD(98th percentile)
          THEN ALERT(medium, "High frequency of privesc-related keywords in Launch Daemon")
  - question: Can a Naive Bayes classifier, trained on text content, identify a new Launch Daemon as a potential privilege escalation tool?
    context: This question leverages a supervised machine learning model (Naive Bayes) to classify daemons as 'benign' or 'malicious' based on their textual content. By training on a labeled dataset of legitimate daemons versus known privilege escalation tools, the model can learn to recognize the linguistic patterns of such tools.
    answer_sources:
      - File Creation Events
      - Threat Intelligence Feeds
      - YARA rule sets
      - File system and process logs on all macOS endpoints, with specific focus on monitoring `/Library/LaunchDaemons/`.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_event IN (/Library/LaunchDaemons/*)
          text_content = GET_STRINGS(file_event.path)
          prediction = NAIVE_BAYES_MODEL.predict(text_content)
          IF prediction is 'malicious_privesc'
          THEN ALERT(medium, "ML model classified Launch Daemon as a privesc tool")
  - question: Is a user attempting to load a Launch Daemon from a non-standard, user-writable directory using `sudo launchctl load`?
    context: This is a high-fidelity detection for a privilege escalation attempt. Legitimate system daemons are loaded from protected system directories. Loading a daemon from a temporary or user-shared directory (like /tmp/ or /Users/Shared/) using `sudo` is a classic technique to gain root-level execution and is almost always malicious.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including full command-line arguments, from all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_events
          WHERE command_line contains 'sudo launchctl load'
          AND command_line contains path NOT IN ('/System/Library/', '/Library/')
          THEN ALERT(high, "Unauthorized Launch Daemon loaded with sudo from non-standard path")
  - question: Is `sudo launchctl` being executed by an anomalous user or parent process?
    context: This question uses baselining to detect suspicious behavior. The `sudo launchctl` command is typically used by system administrators or specific installer processes. Execution by a standard user account or from an unexpected parent application (like Microsoft Word) is a strong indicator of compromise.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including full command-line arguments, from all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_events WHERE command_line contains 'sudo launchctl'
          IF user NOT IN approved_admins OR parent_process NOT IN approved_installers
          THEN ALERT(medium, "Anomalous execution of sudo launchctl")
  - question: Does a user's command sequence, involving `sudo launchctl load`, represent a statistically improbable and suspicious chain of events?
    context: This question applies sequence analysis to detect exploit chains. A Hidden Markov Model (HMM) can learn normal user command progressions. A sequence such as downloading a plist with `curl`, followed immediately by `sudo launchctl load` on that plist, is an abnormal pattern that the HMM would flag as a highly suspicious, low-probability sequence.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including full command-line arguments, from all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH user_session
          command_sequence = GET_COMMAND_HISTORY(user_session)
          probability = HMM_MODEL.score(command_sequence)
          IF probability < THRESHOLD AND command_sequence contains 'sudo launchctl load'
          THEN ALERT(medium, "Suspicious command sequence involving launchctl detected")
  - question: Has a file been created in the root-only `/Library/LaunchDaemons/` directory by a non-root process?
    context: This is a direct detection for a successful privilege escalation exploit. The `/Library/LaunchDaemons/` directory should only be writable by the root user (Effective User ID 0). A write event by any other user ID is a definitive sign that a vulnerability has been used to bypass system permissions.
    answer_sources:
      - File Creation Events
      - File creation logs for the /Library/LaunchDaemons/ directory on all macOS endpoints, ensuring logs contain the user context of the writing process.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events
          WHERE path contains '/Library/LaunchDaemons/'
          AND process.euid != 0
          THEN ALERT(critical, "Non-root process wrote to /Library/LaunchDaemons/")
  - question: Was a file in `/Library/LaunchDaemons/` written by a statistically rare or unexpected parent process?
    context: This question focuses on the origin of the write event. Legitimate writes to this directory are performed by a small set of known processes (e.g., `installer`, `system_installd`). If a file is written by an unusual process like a shell (`bash`, `zsh`) or a scripting engine (`python`), it strongly suggests an exploit rather than a standard installation.
    answer_sources:
      - File Creation Events
      - File creation logs for the /Library/LaunchDaemons/ directory on all macOS endpoints, ensuring logs contain the user context of the writing process.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file_creation_events WHERE path contains '/Library/LaunchDaemons/'
          IF parent_process.name NOT IN (known_legit_writers)
          THEN ALERT(high, "Anomalous parent process wrote to /Library/LaunchDaemons/")
  - question: Does the process lineage leading to a file write in `/Library/LaunchDaemons/` represent an anomalous graph structure?
    context: This question uses advanced graph analysis to detect exploit chains. Normal writes to `/Library/LaunchDaemons/` have a predictable process ancestry. A write originating from an unexpected lineage, such as one starting with a web browser that spawns a shell that then writes the file, would be flagged as a structural anomaly in the process graph, indicating a likely exploit.
    answer_sources:
      - File Creation Events
      - File creation logs for the /Library/LaunchDaemons/ directory on all macOS endpoints, ensuring logs contain the user context of the writing process.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON file_creation_event in '/Library/LaunchDaemons/'
          process_graph = CONSTRUCT_PROCESS_GRAPH(event.pid)
          is_anomaly = GRAPH_MODEL.predict(process_graph)
          IF is_anomaly
          THEN ALERT(medium, "Anomalous process graph led to LaunchDaemon creation")
  - question: Has a root process spawned by `launchd` executed sensitive commands to modify user accounts or system security settings?
    context: This question looks for post-escalation activity. Once an adversary has a root-level daemon, they may use it to create new admin accounts, grant privileges (`dscl . -append /Groups/admin`), or disable security tools (`spctl --master-disable`). This correlated search identifies such actions immediately following the launch of a daemon.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including parent process and user context, on all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_events AS child
          WHERE child.command_line contains ('dscl', 'sysadminctl', 'spctl')
          AND child.uid == 0
          AND child.parent.name == 'launchd'
          AND child.parent.pid == 1
          THEN ALERT(high, "Root Launch Daemon executed sensitive system command")
  - question: Is a root process spawned by `launchd` executing administrative commands in a statistically anomalous way?
    context: This question uses baselining to spot the abuse of administrative tools. While some legitimate daemons might use tools like `dscl`, an adversary's usage may be a statistical outlier. This query flags executions of admin commands by `launchd`-spawned processes that do not match known, approved scripts or behavioral patterns.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including parent process and user context, on all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_events
          WHERE parent.name == 'launchd' AND uid == 0 AND command_line contains admin_tool
          IF command_line_args are anomalous based on historical baseline
          THEN ALERT(medium, "Anomalous usage of admin tool by Launch Daemon process")
  - question: Can a sequence-aware machine learning model classify the actions of a root process from `launchd` as malicious post-escalation activity?
    context: This question uses a supervised learning model (like a Recurrent Neural Network) to recognize malicious command sequences. By training on labeled examples, the model can learn the difference between benign daemon activity (e.g., running a single maintenance task) and a malicious sequence (e.g., modifying a file, then creating a user), providing a powerful detection capability.
    answer_sources:
      - Process Execution Events
      - Process execution logs, including parent process and user context, on all company-managed macOS endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH process where parent.name is 'launchd' and uid is 0
          action_sequence = GET_CHILD_PROCESSES_AND_ACTIONS(process.pid)
          prediction = SEQUENCE_CLASSIFIER.predict(action_sequence)
          IF prediction is 'malicious_post_escalation'
          THEN ALERT(medium, "ML model detected malicious action sequence from Launch Daemon")