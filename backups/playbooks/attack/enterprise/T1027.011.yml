name: T1027.011: Fileless Storage
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is attempting to evade defenses by using fileless storage techniques on Windows and Linux systems. It focuses on detecting malicious payloads, scripts, or configurations stored in non-file locations such as the Windows Registry, WMI objects, Event Logs, or Linux shared memory (`/dev/shm`). The investigative questions aim to identify these threats by analyzing content for malicious signatures and high entropy, monitoring for anomalous command-line activity, flagging unusual network traffic patterns like beaconing or connections to rare destinations, detecting unauthorized process behaviors like non-administrative processes modifying the registry, identifying the creation of persistent WMI consumers, and spotting direct modification of sensitive system files like registry hives.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are newly created or modified Windows Registry values or PowerShell script blocks matching known malicious signatures?
  context: This question aims to detect known malicious payloads, droppers, and fileless malware families by scanning specific event log fields against a library of YARA rules. Adversaries often store obfuscated or malicious code directly in the registry (`NewValue` in Event ID 4657) or execute it via PowerShell (`ScriptBlockText` in Event ID 4103) to evade file-based antivirus detection. Identifying these signatures provides a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - NAI: Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SCAN ScriptBlockText from powershell_event_4103 AND NewValue from registry_event_4657 WITH yara_rule_library FOR matches
- question: Are there any Base64-encoded strings in PowerShell script blocks or registry values with unusually high entropy?
  context: This question seeks to identify potentially obfuscated malicious code by analyzing its statistical properties. Adversaries frequently use Base64 encoding to hide payloads. Malicious encoded strings (like packed executables or scripts) often have higher Shannon entropy than legitimate encoded data (like configuration strings). Alerting on high-entropy outliers can uncover novel or unknown malware that signature-based methods might miss.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - NAI: Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOREACH powershell_event_4103/4104 OR registry_event_4657: EXTRACT base64_strings; DECODE strings; CALCULATE shannon_entropy; ALERT IF entropy > baseline_99th_percentile
- question: Can we classify PowerShell script blocks as malicious based on their features?
  context: This question leverages machine learning to proactively identify malicious PowerShell activity. By training a model on features like script length, entropy, character ratios, and the presence of suspicious keywords ('IEX', 'Invoke-Expression'), we can score new scripts in real-time. This approach provides a scalable and adaptive defense against evolving PowerShell-based threats that use fileless techniques.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - NAI: Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations, Centralized Log Aggregator/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT powershell_script_block_4103; EXTRACT_FEATURES (length, entropy, char_ratio, keywords); SCORE with logistic_regression_model; ALERT IF score > malicious_threshold
- question: Is a critical Linux server communicating with network destinations or using TLS fingerprints associated with known fileless malware?
  context: This question aims to detect command-and-control (C2) communications from fileless malware on Linux systems. By correlating outbound network traffic (destination IPs, DNS queries, JA3/JA4 hashes) with up-to-date threat intelligence feeds, analysts can identify connections to known malicious infrastructure used by malware families like Muhstik or Kinsing, which often operate from shared memory.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: MATCH destination_ips from zeek_conn_log, dns_queries from zeek_dns_log, ja3/ja4_hashes from zeek_ssl_log AGAINST threat_intel_feeds; ALERT on match
- question: Are any Linux servers exhibiting low-jitter network beaconing, indicative of automated C2 communication?
  context: This question focuses on identifying automated malware beaconing by its regularity. Unlike human-generated traffic, C2 check-ins often occur at fixed intervals with very little variation (low jitter). By calculating the standard deviation of time between connections to a single destination, we can statistically identify this machine-like behavior and uncover potential C2 channels that aren't yet on threat intelligence lists.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH host, destination_ip in zeek_conn_log: CALCULATE stdev of inter_arrival_times; ALERT IF stdev < threshold AND connection_count > 10
- question: Is a critical Linux server showing an anomalous spike in outbound data volume that could indicate data exfiltration?
  context: This question uses time-series forecasting to detect abnormal data transfer volumes. A fileless payload, after staging data, might attempt to exfiltrate it, causing a significant deviation from normal network behavior. By modeling the expected daily outbound traffic for each server, we can automatically flag days where the actual volume exceeds the forecasted upper limit, pointing to potential data theft.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek ssl.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application), Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH server: FORECAST daily_outbound_bytes using time_series_model; ALERT IF actual_bytes > forecasted_upper_bound
- question: Is `reg.exe` or PowerShell being used to add an unusually large value to the registry?
  context: This question aims to detect the use of command-line tools to store large payloads directly in the registry, a common fileless technique. By monitoring for `reg.exe` commands that add values over a certain size threshold (e.g., 1024 bytes) or PowerShell `Set-ItemProperty` commands with large variable values, we can catch blatant attempts to hide malicious code or data in the registry.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - Windows Event ID 4657
  - NAI: User Workstations, Domain Controllers, Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH event_4688 for process 'reg.exe' AND command_line 'add' AND value_length > 1024; OR SEARCH event_4103 for 'Set-ItemProperty' AND value_is_large_or_encoded; ALERT on find
- question: Are there any registry write operations with a value size that is an outlier for that specific registry key?
  context: This question provides a more nuanced approach than a fixed size threshold. Adversaries may use legitimate-looking registry keys for storage. By baselining the normal size of data written to each unique registry key path, we can statistically identify anomalous writes. An operation that writes data significantly larger than what's historically observed for that specific key is highly suspicious, even if the absolute size isn't massive.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - Windows Event ID 4657
  - NAI: User Workstations, Domain Controllers, Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH registry_key_path in event_4657: CALCULATE baseline_length_percentiles; ALERT IF NewValue length > 99th_percentile for that key_path
- question: Are there any anomalous command-line executions from script interpreters like PowerShell that indicate obfuscated activity?
  context: This question uses anomaly detection to find malicious command-line usage that deviates from normal patterns. By training a One-Class SVM model on legitimate command-line structures for processes like `powershell.exe` and `cmd.exe`, the system can identify novel or heavily obfuscated commands that don't conform to learned benign behavior, indicating an attempt to execute code from a fileless storage location.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Event ID 4103
  - Windows PowerShell Event ID 4104
  - Windows Event ID 4657
  - NAI: User Workstations, Domain Controllers, Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT command_line from event_4688 for script_interpreters; SCORE with One_Class_SVM_model; ALERT IF score is anomalous
- question: Are any scripts transferred over the network attempting to use Linux shared memory directories?
  context: This question looks for direct evidence of fileless malware droppers. Adversaries often download scripts that then write a payload to a shared memory location like `/dev/shm` and execute it. By scanning the content of scripts transferred over the network for keywords and commands related to these directories, we can detect the staging of fileless payloads before they are executed.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - NAI: Network Egress/Ingress Points, Web Proxies, Linux Server Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SCAN content of files from zeek_files_log WHERE mime_type is script FOR regex_patterns ('/dev/shm/', '/run/shm/'); ALERT on match
- question: Has a Linux server downloaded a script file from a domain that is historically rare for that server?
  context: This question helps identify suspicious downloads by focusing on the rarity of the source. Servers typically download files from a predictable set of update sites or repositories. A script downloaded from a new or infrequently used domain ('rare' domain) is anomalous and could be a malicious dropper, especially if it's part of a targeted attack. This helps prioritize alerts for further investigation.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - NAI: Network Egress/Ingress Points, Web Proxies, Linux Server Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH server: BASELINE download_source_domains from zeek_http_log; ON new_script_download: CALCULATE domain_rarity; ALERT IF rarity < 5th_percentile
- question: Can we classify transferred shell scripts as malicious based on their content?
  context: This question applies machine learning to automatically vet all scripts seen on the network. By training a classifier (like Naive Bayes) on the words and commands found in known benign and malicious scripts, we can build a model that scores and classifies new scripts in real-time. This provides a scalable way to detect potentially harmful scripts, even if they don't contain obvious keywords.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - NAI: Network Egress/Ingress Points, Web Proxies, Linux Server Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT script_content from zeek_files_log; VECTORIZE content (bag_of_words/TF-IDF); CLASSIFY with Naive_Bayes_model; ALERT IF malicious_class and high_confidence
- question: Is an unexpected process, such as a Microsoft Office application, writing to the registry or WMI?
  context: This question aims to detect when adversaries abuse legitimate, non-administrative processes to perform malicious actions. A process like `winword.exe` or `acrord32.exe` writing to the registry or WMI is highly irregular and often indicates code execution via a malicious document or exploit. Maintaining an allowlist of processes expected to modify certain registry keys or WMI namespaces can quickly pinpoint this suspicious behavior.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows Event ID 4688
  - NAI: Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ON event_4657 or event_5861: CHECK if ProcessName is NOT in allowlist for target_key/namespace; ALERT if not allowed
- question: Has any process written a value to the registry that is statistically anomalous in size for that specific process?
  context: This question identifies suspicious registry writes by detecting outlier behavior for a given process. Even a legitimate process might be compromised. By establishing a baseline of the normal size of data written by each unique process, we can use a statistical method like the Interquartile Range (IQR) to flag when a process writes a value that is abnormally large compared to its own history, suggesting it's being used to store a fileless payload.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows Event ID 4688
  - NAI: Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH process_name in event_4657: CALCULATE baseline_IQR for NewValue_length; ALERT IF NewValue_length > (Q3 + 1.5 * IQR)
- question: Are there any anomalous WMI write events that deviate from normal activity clusters?
  context: This question uses unsupervised machine learning to find unusual WMI modifications. By clustering normal WMI write events based on features like the process name, target namespace, and data size, we can establish profiles of legitimate activity. A new event that doesn't fit well into any existing cluster (i.e., is an outlier) is highly suspicious and could represent an adversary creating a WMI-based persistence mechanism.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 5861
  - Windows Event ID 4688
  - NAI: Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT WMI_write_event_5861; CLUSTER using K-Means with features (ProcessName, Namespace, data_size); ALERT IF event is outlier or in small cluster
- question: Has a new permanent WMI event consumer been created on the system?
  context: This question targets a key technique for achieving persistence through WMI. The creation of a permanent WMI event consumer (Event ID 5861) is a very rare event in most environments and is a strong indicator of an adversary establishing a fileless backdoor. Alerting on every occurrence of this event and correlating it with the associated filter (Event ID 5860) and parent process (Event ID 4688) is a critical detection.
  answer_sources:
  - Windows Event ID 5859
  - Windows Event ID 5860
  - Windows Event ID 5861
  - Windows Event ID 4688
  - Zeek conn.log
  - NAI: WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ALERT ON ANY event_5861; CORRELATE with event_5860 and event_4688 to find parent process and filter
- question: Has the WMI provider host process (`wmiprvse.exe`) spawned a rare or unusual child process?
  context: This question looks for suspicious activity originating from the WMI service itself. When a WMI-based persistence mechanism is triggered, `wmiprvse.exe` will often spawn another process (like `powershell.exe` or `cmd.exe`) to execute the malicious payload. By baselining the typical child processes of `wmiprvse.exe`, we can statistically identify and alert on the execution of a rare child process, which is a strong sign of a WMI-based trigger being fired.
  answer_sources:
  - Windows Event ID 5859
  - Windows Event ID 5860
  - Windows Event ID 5861
  - Windows Event ID 4688
  - Zeek conn.log
  - NAI: WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FROM event_4688: BASELINE child_process frequency for parent 'wmiprvse.exe'; ALERT IF new child_process has frequency < 5th_percentile
- question: Can we detect anomalous WMI-initiated activity by analyzing its process and network communication graph?
  context: This question uses advanced graph-based machine learning to model the complex behaviors initiated by WMI. By constructing a graph of WMI processes, their children, and the network connections they make, a Graph Neural Network (GNN) can learn the structure of normal WMI activity. The model can then score new activity subgraphs, flagging complex anomalous behaviors that would be difficult to define with simple rules or statistics.
  answer_sources:
  - Windows Event ID 5859
  - Windows Event ID 5860
  - Windows Event ID 5861
  - Windows Event ID 4688
  - Zeek conn.log
  - NAI: WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BUILD graph of wmiprvse_children and network_connections; SCORE subgraph with GNN_model; ALERT IF anomaly_score is high
- question: Is an unauthorized process attempting to write to protected registry hive files or the WMI repository?
  context: This question aims to detect direct tampering with critical system files used for fileless storage. By enabling auditing (SACLs) on the directories containing registry hives (`%SystemRoot%\System32\Config`) and the WMI repository, we can generate alerts (Event ID 4663) for any write access. Comparing the process attempting the write against a very strict allowlist (e.g., core system processes) provides a high-fidelity detection for this aggressive technique.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - NAI: File Systems of Domain Controllers and Critical Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ENABLE SACL on registry_hive/WMI_repo_dirs; ALERT ON event_4663 with write_access AND ProcessName NOT in strict_allowlist
- question: Is any process accessing sensitive registry or WMI files with a statistically anomalous frequency?
  context: This question provides a statistical method to detect unusual access patterns to sensitive files, even by allowed processes. An adversary might compromise a legitimate process to perform their actions. By baselining the normal daily access count for each process to these sensitive directories, we can alert when a process's access count exceeds its historical average by a significant margin (e.g., 3 standard deviations), indicating a potential compromise or misuse.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - NAI: File Systems of Domain Controllers and Critical Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR_EACH ProcessName in event_4663: BASELINE daily_access_count; ALERT IF today_count > (mean + 3 * stdev)
- question: Can we classify file access events to sensitive registry or WMI files as malicious?
  context: This question uses a supervised machine learning model to distinguish between benign and malicious access attempts to critical system files. By training a classifier (like a random forest) on features from file access events (process name, access type, user ID), the system can learn to predict malicious activity. This allows for more nuanced detection than simple allowlists, potentially catching novel attack vectors.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - NAI: File Systems of Domain Controllers and Critical Windows Servers
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT event_4663 features (ProcessName, AccessMask, ObjectName); CLASSIFY with random_forest_model; ALERT IF malicious_class
- question: Does a Linux host connect to a rare destination IP shortly after downloading a script that references shared memory?
  context: This question correlates two suspicious events to create a high-fidelity alert. The download of a script referencing `/dev/shm` is suspicious, and an outbound connection to a historically uncommon IP is also suspicious. When both events occur on the same host within a short time window (e.g., 5 minutes), it strongly indicates that a fileless dropper was downloaded and has activated its C2 communication channel.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: TRIGGER ON file_download with '/dev/shm' content; WITHIN 5 mins, CHECK for outbound_connection to IP NOT in top_1000_org_destinations; ALERT on correlation
- question: Does a Linux host exhibit an anomalous spike in data upload volume after downloading a script with shared memory indicators?
  context: This question aims to detect data staging or exfiltration following a potential fileless infection. After a script referencing shared memory is downloaded, we monitor the host's data upload volume. An upload volume in the following hour that significantly exceeds the host's normal daily baseline (e.g., 99th percentile) suggests that a payload was activated and is now sending data out of the network.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: TRIGGER ON file_download with '/dev/shm' indicators; MONITOR outbound_bytes for 1 hour; ALERT IF total_bytes > 99th_percentile_of_daily_baseline
- question: Can a composite anomaly score from multiple ML models detect when a malicious fileless payload is dropped and activated?
  context: This question describes a sophisticated detection strategy that combines multiple machine learning models to reduce false positives and increase confidence. An alert is only generated when a host receives high anomaly scores from different models in a short time window: one model flags anomalous network beaconing, and another classifies a downloaded file as malicious. This fusion of network and file analysis provides strong evidence of a successful fileless attack.
  answer_sources:
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - NAI: Network Egress/Ingress Points, Linux Server Network Segments
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SCORE network_traffic with LSTM_model; SCORE downloaded_files with classifier_model; ALERT IF both scores are high within 10_minute_window