name: T1055.013: Process Doppelgänging
id: 9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d
description: This playbook helps analysts investigate whether an adversary is using Process
  Doppelgänging (T1055.013) for privilege escalation and defense evasion. This
  technique involves creating a legitimate-looking process from a transactionalized
  file, which is then rolled back, leaving the malicious code running in memory under
  the guise of a trusted application. Key indicators include anomalous parent-child
  process relationships (e.g., Microsoft Word spawning svchost.exe), the use of deprecated
  Transactional NTFS (TxF) APIs, legitimate system processes making suspicious outbound
  network connections, and processes accessing lsass.exe for credential theft immediately
  after an unusual creation event.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known malicious parent process spawning a legitimate system binary,
    a common pattern in Process Doppelgänging?
  context: This question aims to detect Process Doppelgänging by identifying its initial
    stage. The technique often involves a malicious loader process (ParentImage)
    creating a legitimate-looking but hollowed process (Image). By checking the parent
    process hash against a list of known malicious tools and verifying the child
    is a common system binary, analysts can uncover the start of a doppelgänging
    attack.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Threat Intelligence Feeds
  - NAI: Domain Controllers, Critical Application Servers, Executive Workstations,
    All Windows Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE parent_process_hash IN (threat_intel_list)
      AND child_process_image IN ("svchost.exe", "explorer.exe", "csc.exe")
- question: Is a parent process exhibiting an unusually complex or obfuscated command
    line when creating a child process?
  context: Adversaries may pass malicious code or configuration data via the command
    line, often obfuscating it to evade simple signature-based detections. Calculating
    the Shannon entropy of the command line provides a mathematical measure of its
    randomness or complexity. A significant deviation from the normal baseline for
    a given parent process suggests obfuscation and potential malicious activity.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: Domain Controllers, Critical Application Servers, Executive Workstations,
    All Windows Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process_creation_event, CALCULATE entropy of ParentCommandLine.
      ALERT if entropy > 99th percentile of historical baseline for that ParentImage.
- question: Can a machine learning model classify a process creation event as suspicious
    based on features associated with Process Doppelgänging?
  context: This question leverages supervised machine learning to move beyond simple
    rule-based detection. By training a model on features like parent/child process
    names, command-line length, and user context from both benign and known-malicious
    events, analysts can create a more nuanced and resilient detection method that
    identifies subtle patterns indicative of Process Doppelgänging.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: Domain Controllers, Critical Application Servers, Executive Workstations,
    All Windows Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT features (ParentImage, Image, CommandLine length, User) from process_creation_events
      into a trained classification model. ALERT if model classifies event as malicious.
- question: Is a common user application spawning a core system process with an elevated
    token?
  context: This behavior is highly anomalous. User-facing applications like web browsers
    or document editors should not typically create core system processes (e.g.,
    lsass.exe). When they do, and the new process uses an elevated token (Type 2 /
    %%1937), it is a strong indicator of privilege escalation, where an exploit in
    the user application is used to launch a higher-privileged process.
  answer_sources:
  - Windows Event ID 4688
  - NAI: User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events WHERE ParentProcess IN ("winword.exe",
      "chrome.exe") AND ChildProcess IN ("lsass.exe", "csrss.exe") AND TokenElevationType
      == "%%1937"
- question: Are statistically rare parent-child process relationships occurring in
    the environment?
  context: Adversaries often create process relationships that are not seen during
    normal system and user activity. By analyzing process creation events across
    the enterprise and calculating the frequency of each parent-child pair, analysts
    can identify outliers. A pair that is extremely rare (e.g., in the bottom 1st
    percentile) is suspicious by definition and warrants investigation as a potential
    malicious action.
  answer_sources:
  - Windows Event ID 4688
  - NAI: User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: COMPUTE frequency of all (ParentProcess, ChildProcess) pairs over 30 days.
      ALERT on any new pair that falls into the bottom 1st percentile of frequency.
- question: Can unsupervised machine learning identify outlier process creation events
    that do not fit normal patterns?
  context: Unlike supervised models, unsupervised algorithms like DBSCAN can find
    anomalies without prior labeling. By clustering process creation events based
    on features like parent/child names and token elevation type, the algorithm can
    group normal, repetitive behaviors. Events that do not fit into any cluster (outliers/noise)
    are isolated as potential one-off malicious actions.
  answer_sources:
  - Windows Event ID 4688
  - NAI: User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER process_creation_events using DBSCAN on features (Parent, Child,
      User, TokenElevationType). INVESTIGATE events classified as noise/outliers.
- question: Is a recently created suspicious process attempting to access credentials
    by targeting lsass.exe?
  context: After creating a doppelgänged process, a common next step is to access
    credentials stored in memory. The Local Security Authority Subsystem Service
    (lsass.exe) is the primary target. This question correlates a suspicious process
    creation alert with a subsequent attempt by that same process to access lsass.exe
    with high-privilege read rights.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Event ID 4656
  - NAI: Domain Controllers, Authentication Servers, Credential Stores
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: ON high-risk_process_alert, if ProcessID accesses "lsass.exe" with GrantedAccess
      "0x1010" within 60 seconds, CORRELATE and ALERT.
- question: Is a statistically rare process attempting to access the lsass.exe process?
  context: Access to lsass.exe is typically limited to a small, predictable set of
    system and security processes. An unexpected process, such as a user application
    or a rarely seen utility, accessing lsass.exe is highly suspicious. By baselining
    which processes normally access lsass.exe, analysts can easily spot and alert
    on these anomalous access attempts.
  answer_sources:
  - Sysmon Event ID 10
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Event ID 4656
  - NAI: Domain Controllers, Authentication Servers, Credential Stores
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE frequency of source processes accessing lsass.exe. ALERT if a
      new access comes from a process not in the top 95% of common accessors.
- question: Does a sequence of events, starting with an anomalous process creation,
    match a known malicious attack pattern?
  context: This question uses sequence analysis to detect a chain of malicious behaviors.
    A model like a Hidden Markov Model (HMM) can be trained to recognize the probability
    of state transitions (e.g., from 'Anomalous Creation' to 'LSASS Access'). A low-probability
    sequence of events is flagged as a potential attack.
  answer_sources:
  - Sysmon Event ID 10
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - Windows Event ID 4663
  - Windows Event ID 4656
  - NAI: Domain Controllers, Authentication Servers, Credential Stores
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT event sequence (ProcessCreate -> ProcessAccess) into a trained HMM.
      ALERT if the sequence probability is below a learned benign threshold.
- question: Is a process using deprecated Transactional NTFS (TxF) APIs in a manner
    consistent with Process Doppelgänging?
  context: Process Doppelgänging abuses TxF APIs to write a malicious payload into
    a file-based transaction, which is then rolled back, leaving no trace of the
    malicious file on disk. The specific sequence of CreateTransaction -> CreateFileTransacted
    -> RollbackTransaction is a high-fidelity indicator of this technique.
  answer_sources:
  - EDR Telemetry (API Monitoring)
  - Sysmon Event ID 26 (FileCreateTransacted)
  - NAI: All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: ALERT if a single Process ID calls CreateTransaction, CreateFileTransacted,
      and RollbackTransaction within a 5-second window.
- question: Is a process that is not on an established allow-list making calls to
    Transactional NTFS (TxF) APIs?
  context: Given the rarity of legitimate TxF API usage, a simple detection strategy
    is to identify all processes that use these APIs. By maintaining an allow-list
  - technology: pseudocode
    query: COLLECT all processes making TxF API calls (e.g., from Sysmon Event ID
      26). ALERT if a process is not on the pre-defined allow-list.
- question: Can a machine learning model detect anomalous sequences of API calls
    indicative of TxF abuse?
  context: This question applies machine learning to API call analysis. A sequence-to-sequence
    autoencoder can learn the 'normal' patterns of API calls for benign processes.
    When a process executes an unusual sequence, like the one used in Process Doppelgänging,
    the model will fail to reconstruct it accurately, resulting in a high reconstruction
    error that serves as an alert.
  answer_sources:
  - EDR Telemetry (API Monitoring)
  - Sysmon Event ID 26 (FileCreateTransacted)
  - NAI: All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT real-time API call sequences into a trained Seq2Seq autoencoder.
      ALERT if the reconstruction error is above the anomaly threshold.
- question: Is a legitimate-looking system process making outbound network connections
    to a known malicious destination?
  context: Adversaries use Process Doppelgänging to make their malicious code appear
    as a trusted system process (e.g., svchost.exe), allowing it to bypass host-based
    firewalls. This question aims to detect this evasion by correlating network logs
    with threat intelligence, flagging instances where a seemingly legitimate process
    communicates with a known C2 server.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - NAI: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: JOIN network logs with DNS logs. ALERT if destination IP/CNAME matches
      threat intel and source process is a system binary (e.g., csc.exe).
- question: Is a system process connecting to a high-risk domain (e.g., newly registered
    or with a random-looking name)?
  context: Adversaries frequently use newly registered domains (NRDs) or domain generation
    algorithms (DGAs) for C2 infrastructure. This question assigns a risk score to
    network connections based on the domain's age and entropy. A connection from
    a trusted system process to a high-risk domain is a strong indicator of compromise.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - NAI: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: For each DNS query, SCORE risk based on domain age < 30 days or entropy
      > 3.5. ALERT if a system process connects to a high-risk domain.
- question: Is a whitelisted system process exhibiting network behavior that deviates
    from its normal profile?
  context: Even trusted system processes have predictable network patterns. An anomaly
    detection model can learn this normal behavior. If a doppelgänged process masquerading
    as 'svchost.exe' starts C2 communication, its network activity will differ from
    the learned profile, generating an anomaly score and an alert.
  answer_sources:
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Windows Event ID 4688
  - NAI: Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: INPUT network connection metadata for system processes into a trained
      Isolation Forest model. ALERT if the model returns a high anomaly score.
- question: Is a critical system process being spawned from an unexpected parent
    process?
  context: Windows processes have a well-defined and predictable lineage. A violation
    of this lineage, such as explorer.exe spawning svchost.exe directly, is a strong
    indicator of malicious activity like Process Doppelgänging, where an adversary
    hides their code under the guise of a system process.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: User Workstations, Application Servers, Terminal Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: DEFINE expected parent-child process tree. ALERT on any process creation
      event that violates this defined lineage.
- question: Is a critical system process being executed with an anomalous command
    line, such as an empty one?
  context: Many system processes require specific command-line arguments to function.
    An adversary might create an instance of a process like 'rundll32.exe' but fail
    to provide a command line. By baselining the normal command-line characteristics
    for these processes, analysts can flag outliers that may indicate malicious execution.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: User Workstations, Application Servers, Terminal Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: BASELINE command-line length for critical processes. ALERT if an instance
      has a length of zero or is > 3 standard deviations from the mean.
- question: Can a machine learning model identify when a system process like 'rundll32.exe'
    is created with anomalous characteristics?
  context: This question uses a one-class classification model to establish a tight
    profile of what 'normal' looks like for a specific, frequently-abused process.
    The One-Class SVM is trained only on benign examples. Any new event that falls
    outside this learned 'normal' boundary is flagged as an outlier.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: User Workstations, Application Servers, Terminal Servers
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: TRAIN a One-Class SVM model on benign creation events for 'rundll32.exe'.
      ALERT if the model classifies a new event as an outlier.
- question: Is a legitimate-looking system process exhibiting network beaconing or
    connecting via suspicious SSL certificates?
  context: This question aims to identify command-and-control (C2) activity hidden
    within a doppelgänged process. Zeek's analysis engine can natively detect signs
    of C2, such as periodic beaconing or connections using invalid SSL certificates.
    Correlating these network notices with endpoint data can pinpoint the malicious
    process.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Zeek notice.log
  - NAI: Network Egress Points, DNS recursive resolvers, Endpoint Devices
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: MONITOR Zeek notices for 'C2::Beaconing' or 'SSL::Invalid_Server_Cert'.
      Correlate source IP with Sysmon to find process. ALERT if it's a system binary.
- question: Is a system process communicating with a destination IP at highly regular,
    machine-like intervals?
  context: Malware C2 beaconing is often characterized by its high degree of periodicity.
    This question identifies this behavior by calculating the standard deviation
    of time intervals between connections for a given source-destination pair. A
    very low standard deviation indicates machine-generated, non-human traffic.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Zeek notice.log
  - NAI: Network Egress Points, DNS recursive resolvers, Endpoint Devices
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: For each source-dest pair, CALCULATE std dev of time delta between connections.
      ALERT if std dev < 1.0 second and source is a system process.
- question: Is a doppelgänged system process showing a sudden, unexpected spike in
    outbound data volume?
  context: This question uses time-series forecasting to model the normal amount
    of data a process sends. If the actual volume significantly exceeds the forecast,
    it could indicate an event like data exfiltration or the download of a second-stage
    payload by the malicious code hiding in the doppelgänged process.
  answer_sources:
  - Zeek conn.log
  - Sysmon Event ID 3
  - Zeek notice.log
  - NAI: Network Egress Points, DNS recursive resolvers, Endpoint Devices
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: MODEL outbound data volume per-process/per-hour using ARIMA. ALERT if
      actual volume significantly exceeds the forecast.
- question: Is a core system process spawning an interactive shell or a reconnaissance
    tool?
  context: Core system processes (e.g., svchost.exe) are non-interactive and should
    never spawn command prompts, PowerShell sessions, or discovery tools (like whoami.exe).
    Such an event is an unambiguous, high-severity indicator of compromise, suggesting
    an adversary has taken control of that process.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: Domain Controllers, Internal Web Servers, Developer Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: ALERT with high severity where ParentImage is a core system process and
      Image is an interactive shell or recon tool (cmd.exe, powershell.exe, whoami.exe).
- question: Is a system process spawning a child process that has never been associated
    with it before?
  context: This question leverages historical data to define 'normal' for process
    relationships. By building a baseline of all child processes ever spawned by
    a given parent system process, analysts can immediately flag any new, never-before-seen
    child as a potential threat.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: Domain Controllers, Internal Web Servers, Developer Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: MAINTAIN historical set of all (ParentImage, ChildImage) pairs. ALERT
      if a new pair involving a system parent is not in the set.
- question: Does a process creation event form an anomalous 'bridge' between two
    normally separate clusters of activity in a process relationship graph?
  context: This question visualizes process activity as a graph and uses community
    detection to find 'neighborhoods' of related processes. A malicious event, like
    'svchost.exe' spawning 'cmd.exe', would create an edge connecting two normally
    separate communities, flagging it as a high-risk event to be investigated.
  answer_sources:
  - Sysmon Event ID 1
  - Windows Event ID 4688
  - NAI: Domain Controllers, Internal Web Servers, Developer Workstations
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: CONSTRUCT a process relationship graph. Apply community detection. ALERT
      on new edges that bridge two distinct communities.