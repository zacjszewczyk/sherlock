name: T1204.001: Malicious Link
id: 9f3f9b3a-5e7d-4b1c-8a2d-6c8f9b3a5e7d
description: This playbook helps determine if an adversary has achieved execution via user interaction with a malicious link. It focuses on identifying suspicious network activity, process execution, file behavior, and command-and-control communication that often follows a user clicking on a malicious link. Indicators include connections to blocklisted domains, URLs with anomalous characteristics, the spawning of command-line interpreters by browsers or email clients, the rapid execution of downloaded files, execution from non-standard directories, and network traffic patterns indicative of C2 beaconing.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are endpoints connecting to domains or IP addresses known to be malicious?
    context: This question addresses the most direct indicator of malicious link execution. By correlating outbound network traffic (DNS requests and TCP/IP connections) with a continuously updated threat intelligence feed of known malicious domains and IP addresses, an analyst can quickly identify high-confidence compromise events. A match suggests a user has clicked a link leading to a known malicious infrastructure.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Enterprise Web Gateway
      - DNS Resolvers
      - Firewall Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network logs (dns.log, conn.log)
          JOIN with threat intelligence feed ON (log.destination_ip = intel.ip OR log.query = intel.domain)
          RETURN matching events
  - question: Are users accessing URLs with unusual lexical characteristics that might indicate obfuscation or Domain Generation Algorithms (DGA)?
    context: Adversaries often use DGAs to create a large number of domain names for their C2 infrastructure, or they use obfuscation techniques to hide the true nature of a URL. This question aims to identify these links by analyzing their structure. High entropy (randomness), excessive length, or an unusual ratio of numbers to letters can indicate that a URL is machine-generated or obfuscated, rather than designed for human use.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Enterprise Web Gateway
      - DNS Resolvers
      - Firewall Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each URL in http.log:
            CALCULATE entropy, length, numeric_char_ratio
            COMPARE metrics to established baseline
            ALERT if metrics exceed 95th percentile
  - question: Can a machine learning model identify URLs that are likely malicious based on their lexical features?
    context: While baselining and threat intelligence are effective, they can be reactive. A trained classification model can proactively identify malicious URLs that have not yet been seen or added to a blocklist. By learning from the features of millions of known good and bad URLs (e.g., character patterns, keywords, entropy), the model can assign a probability score to new URLs, flagging suspicious ones for investigation.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek dns.log
      - Enterprise Web Gateway
      - DNS Resolvers
      - Firewall Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT http.log and dns.log streams into URL classification model
          ALERT on any URL where model_probability_score > 0.90
  - question: Are common user applications (browsers, email clients, document readers) spawning command-line interpreters or LOLBins?
    context: A common step after a user clicks a malicious link is for the compromised application (e.g., a browser or document reader) to execute a secondary payload. This is often done by spawning a command-line interpreter (like PowerShell, cmd) or a Living-off-the-Land Binary (LOLBin, like certutil.exe). This parent-child process relationship is highly anomalous and a strong indicator of post-exploitation activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Remote Desktop Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (Sysmon EID 1, WEF 4688)
          WHERE parent_process in ('outlook.exe', 'chrome.exe', 'acrord32.exe')
          AND child_process in ('powershell.exe', 'cmd.exe', 'wscript.exe', 'mshta.exe', 'certutil.exe')
          ALERT on matches
  - question: Are there any statistically rare or anomalous parent-child process relationships involving command-line interpreters?
    context: Beyond a static list of suspicious parent-child relationships, adversaries may use novel or less common processes to achieve execution. This question seeks to find these outliers by first baselining all parent-child process relationships in the environment and then using frequency analysis to identify pairs that are statistically rare. For interpreters, analyzing the command-line arguments for high entropy or length can further pinpoint malicious usage.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Remote Desktop Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ANALYZE historical process creation events to identify rare parent-child pairs (frequency < 0.01%)
          FOR rare pairs involving interpreters:
            CALCULATE command-line entropy and length
            ALERT if values exceed 3 standard deviations from the norm for that pair
  - question: Can a machine learning model predict if a process creation event is a suspicious execution attempt?
    context: A sophisticated attacker might try to blend in by using common process names or obfuscated command lines. A machine learning model can help detect this by considering multiple features of a process creation event simultaneously (parent image, child image, command-line arguments, user context, etc.) to generate a holistic risk score. This allows for the detection of subtle anomalies that might be missed by rule-based alerts.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Remote Desktop Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          APPLY Random Forest classification model to new process creation events
          ALERT on any event where the assigned risk_score > tuned_threshold
  - question: Are users executing files that have been recently downloaded and are known to be malicious?
    context: This question provides a very high-confidence detection by linking three distinct events: a file being created on disk (from a download), that same file being executed as a process, and the file's hash matching a known malicious signature from a threat intelligence feed. A positive match on all three is a clear sign of a successful compromise via a malicious download.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User Workstations
      - Enterprise Web Gateway
      - Email Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE file creation events (Sysmon EID 11) with process creation events (Sysmon EID 1) by file hash
          JOIN with threat intelligence hash feed
          ALERT on any match
  - question: Are downloaded files being executed almost immediately after being saved to disk?
    context: Typical user behavior involves a delay between downloading a file and executing it. An automated attack, however, often involves a script or macro that executes a payload immediately upon download. By calculating the time delta between a file-write event and a process-creation event for the same file, analysts can identify this suspicious, rapid execution, with very short deltas (e.g., under 30 seconds) being highly anomalous.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User Workstations
      - Enterprise Web Gateway
      - Email Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each downloaded file that is executed:
            CALCULATE time_delta = execution_time - creation_time
            COMPARE delta to user's historical baseline
            ALERT if delta is in the 1st percentile (e.g., < 30s)
  - question: Is there a sudden, anomalous spike in the number of 'download-then-execute' events across the enterprise?
    context: While individual 'download-then-execute' events can be malicious, a sudden increase in the aggregate rate of these events across the entire organization is a strong indicator of a widespread, coordinated attack, such as a mass phishing campaign. This question uses time-series anomaly detection to monitor this rate and alert security teams to a potential large-scale incident in progress.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - User Workstations
      - Enterprise Web Gateway
      - Email Gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE count of 'download-then-execute' events per hour
          APPLY a time-series anomaly detection model (e.g., SARIMA) to the aggregated count
          ALERT on any anomalous spike
  - question: Are child processes of browsers or email clients executing from suspicious or non-standard directories?
    context: To evade detection and persist, malware often drops executables into user-writable directories that are not typical locations for programs, such as temporary folders or download directories. This question aims to detect this behavior by monitoring for processes spawned by browsers or email clients that are running from a deny-listed path (e.g., %APPDATA%, %TEMP%, C:\Users\Public\).
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Application Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (Sysmon EID 1)
          WHERE parent_process in (browsers, email_clients)
          AND child_process_path in ('%APPDATA%', '%TEMP%', '%USERPROFILE%\\Downloads\\')
          ALERT on match
  - question: Are processes being launched from statistically rare or novel file paths for a given parent process?
    context: Adversaries constantly find new locations to hide their payloads, which may not be on a static deny-list. This question moves beyond fixed lists by baselining all historical execution paths for each parent-child process pair. It then flags any new execution that occurs from a file path that has never been seen before or is extremely rare (e.g., in the bottom 1% of occurrences), indicating a deviation from normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Application Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each parent process, build a baseline of child process execution paths and their frequencies
          MONITOR new process creation events
          ALERT if execution path is novel or has a frequency < 1% for that parent-child pair
  - question: Can unsupervised machine learning (clustering) identify anomalous process executions based on path, parent, and user context?
    context: This question applies unsupervised machine learning to discover anomalous executions without pre-existing rules or labels. By clustering process events based on features like the file path, parent process, and user, the algorithm can group normal, repetitive behaviors together. Any event that does not fit into a cluster (an outlier) is, by definition, anomalous and warrants investigation as a potential threat.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations
      - Application Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (tokenized path, parent name, user) from process creation events
          APPLY a clustering algorithm (e.g., DBSCAN) to the feature set
          INVESTIGATE all events classified as noise/outliers
  - question: Are newly created processes, spawned from user applications, connecting to known command-and-control (C2) servers?
    context: A critical step for an attacker after gaining execution is to establish a C2 channel for further commands. This question aims to detect this by correlating process data with network data. It checks if a process spawned by a browser or document reader makes an outbound network connection to a destination IP or domain that is present on a threat intelligence feed of known C2 servers. A match is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Firewall Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE process creation (Sysmon EID 1) with network connections (Sysmon EID 3)
          JOIN with C2 threat intelligence feed ON (connection.destination_ip = intel.ip OR connection.destination_domain = intel.domain)
          ALERT on match
  - question: Are processes exhibiting network behavior indicative of C2 communication, such as connecting to rare destinations or using highly regular 'beaconing' patterns?
    context: Adversaries often use C2 servers in unusual geographical locations or autonomous systems (ASNs) to evade detection. Furthermore, their C2 communication is often automated, resulting in highly regular 'beaconing' or 'heartbeat' traffic. This question looks for these two signs: connections to rare destinations and network traffic with a very low standard deviation in timing and data volume, both of which are hallmarks of C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Firewall Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR processes spawned by browsers:
            ALERT if destination IP's ASN or country is rare for the organization
            CALCULATE standard deviation of connection time intervals and data volume
            ALERT if standard deviation is anomalously low
  - question: Can a time-series model trained on benign network traffic detect anomalous patterns, like C2 heartbeats, from newly created processes?
    context: C2 beaconing can be subtle and hard to define with simple statistical rules. This question proposes using an advanced time-series model, like an LSTM Autoencoder, to learn the complex patterns of normal network traffic from a process. When the model encounters traffic from a new process, it attempts to reconstruct it; if the reconstruction error is high, it means the traffic pattern is anomalous and does not match what the model learned as 'normal', flagging it as potential C2.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - User Workstations
      - Firewall Egress Points
      - DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM Autoencoder on network flow data from benign processes
          APPLY model to network flows from newly created processes
          ALERT if reconstruction error is above a learned threshold, indicating an anomaly