name: T1652: Device Driver Discovery
id: 3c59a30a-9e1e-4f1c-8e4d-3d46a8b1c4b7
description: This playbook helps identify adversary attempts to discover system information, specifically device drivers, as part of post-compromise reconnaissance. This behavior can be detected by observing the execution of known malicious tools identified by their file hash, the use of built-in system utilities (e.g., `driverquery.exe`, `lsmod`) via the command line, high-volume read operations on the Windows Registry service key (`HKLM\\SYSTEM\\CurrentControlSet\\Services`), or the execution of these discovery commands shortly after a suspicious remote logon or privilege escalation event.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a process associated with a known malicious discovery tool being executed on the endpoint?
  context: Adversaries often use pre-compiled, known malicious tools to perform reconnaissance activities like driver discovery. This question helps identify the execution of these tools by checking the process's hash against a threat intelligence feed. A match indicates a high-fidelity signal of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
        GET process_hash
        IF process_hash IN threat_intelligence_feed(category='discovery')
          ALERT 'Known malicious discovery tool executed'
- question: Is a known malicious discovery tool that is also rare in the environment being executed?
  context: While a match in a threat intelligence feed is a strong indicator, adversaries may use tools that are not widely distributed. By combining threat intelligence data with internal prevalence data, analysts can prioritize alerts for tools that are both known-bad and rare, suggesting a more targeted or sophisticated attack rather than common malware.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
        GET process_hash
        CALCULATE hash_prevalence across all endpoints
        IF process_hash IN threat_intelligence_feed(category='discovery') AND hash_prevalence < 0.1%
          ALERT 'Rare malicious discovery tool executed'
- question: Does a process creation event exhibit features characteristic of malicious discovery activity, as determined by a machine learning model?
  context: This question leverages a machine learning model to identify subtle or novel discovery techniques that may not be caught by simple signature or statistical methods. The model analyzes multiple features of a process creation event (e.g., process name, parent process, command-line arguments) to determine if it aligns with patterns of known malicious discovery behavior. A high confidence score from the model suggests a strong likelihood of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Zeek files.log
  - All Windows Endpoints and Servers, particularly Tier 0/1 assets like Domain Controllers and critical application servers; Network sensors capturing file transfers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event
        EXTRACT features (process_name_entropy, parent_process, cmd_line_entropy, hash_in_threat_feed)
        SCORE event with ML_model
        IF score > 0.9
          ALERT 'High-confidence malicious discovery detected by ML model'
- question: Is a common driver discovery utility being executed from an unusual parent process or by a non-administrative user?
  context: Adversaries often use legitimate system tools ("living off the land") to avoid detection. This question focuses on identifying anomalous usage of these tools, such as being launched by an office application (e.g., Word, Outlook) instead of a standard command shell, or being run by a user who does not typically perform administrative tasks.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_event with command_line containing ('driverquery', 'lsmod', 'modinfo', 'Get-WmiObject Win32_SystemDriver')
        GET parent_process and user_privileges
        IF parent_process IN ('winword.exe', 'outlook.exe', 'excel.exe') OR user_privileges IS NOT 'administrator'
          ALERT 'Anomalous execution of driver discovery utility'
- question: Is a user executing driver discovery commands at an anomalous rate or with unusually complex arguments?
  context: This question aims to detect brute-force or scripted enumeration by establishing a baseline of normal command usage for each user. An alert is triggered if a user suddenly starts running these commands far more frequently than their historical average. Additionally, analyzing the complexity (entropy) of command-line arguments can help detect obfuscation techniques used to hide malicious parameters.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user
        CALCULATE baseline_frequency of discovery_commands per hour
        CALCULATE threshold = 95th_percentile of baseline_frequency
      FOR each new discovery_command_execution
        IF user_execution_count_past_hour > threshold
          ALERT 'Anomalous frequency of driver discovery commands'
- question: Is there a statistically significant, enterprise-wide spike in driver discovery commands, or are there clusters of unusual command-line activity?
  context: This question uses machine learning to look for broader patterns of compromise. A time-series model can detect a sudden, coordinated increase in discovery activity across many systems, which could indicate a widespread campaign. Clustering algorithms can group similar command-line executions together to identify novel or outlier techniques that deviate from established patterns.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Command-line and script execution logs on all Windows, Linux, and macOS endpoints and servers.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR aggregate count of discovery commands over time with ARIMA model
      IF anomaly_detected
        ALERT 'Enterprise-wide spike in driver discovery activity'
      CLUSTER command_line_features using DBSCAN
      IF new_outlier_cluster_identified
        ALERT 'Novel driver discovery command pattern detected'
- question: Is a process not on the approved allowlist accessing the Windows registry key for system services?
  context: The `HKLM\\SYSTEM\\CurrentControlSet\\Services` registry key contains information about system drivers and services. Access to this key is typically restricted to a small number of legitimate system and administrative processes. This question helps detect unauthorized reconnaissance by alerting when any process not on a predefined allowlist attempts to read this sensitive registry location.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE process_allowlist = ('svchost.exe', 'services.exe', ...)
      FOR each registry_access_event to 'HKLM\\SYSTEM\\CurrentControlSet\\Services'
        GET process_name
        IF process_name NOT IN process_allowlist
          ALERT 'Unauthorized process accessed services registry key'
- question: Is a process accessing the system services registry key at an anomalously high rate or enumerating an unusually large number of subkeys?
  context: Adversaries attempting to enumerate all drivers on a system will often read from the `...\\Services` registry hive in a rapid, programmatic fashion. This question establishes a baseline for normal access rates for each process and alerts when a process's activity significantly deviates from its norm (e.g., exceeds 3 standard deviations) or enumerates subkeys at a rate far beyond the environment's average.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process
        CALCULATE baseline_mean_and_stddev of access_rate to '...\\Services' key
      FOR each new access_event
        CALCULATE z_score = (current_rate - mean) / std_dev
        IF z_score > 3
          ALERT 'Anomalous registry access rate detected'
- question: Does a registry access event exhibit anomalous characteristics when analyzed by an unsupervised machine learning model?
  context: This question uses an unsupervised learning model, like an Isolation Forest, to find rare and unusual registry access events without relying on predefined rules or signatures. By analyzing features like the process name, its parent, and the rate of access, the model can identify novel or stealthy enumeration techniques that might otherwise go unnoticed.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each registry_access_event
        EXTRACT features (process_name, parent_process, access_rate_per_minute)
        SCORE event with Isolation_Forest_model
        IF event is classified as anomaly
          ALERT 'Anomalous registry access pattern detected by ML model'
- question: Was a driver discovery command executed shortly after a remote logon or the assignment of special privileges?
  context: A key indicator of malicious activity is the timing of actions. Adversaries often perform reconnaissance immediately after gaining initial access to a system or escalating their privileges. This question creates a high-fidelity alert by correlating a driver discovery command with a preceding high-risk event, such as a remote logon or privilege escalation, within a short time window (e.g., 15 minutes).
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Zeek conn.log
  - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      WHEN driver_discovery_command is executed by session_id
        SEARCH for (Event 4624 with Logon Type 3 or 10) OR (Event 4672) for same session_id in last 15 minutes
        IF found
          ALERT 'Driver discovery followed high-risk logon or privilege escalation'
- question: Does a user's risk score, based on a combination of precursor events, exceed a defined threshold when a driver discovery command is executed?
  context: This question moves beyond simple correlation to a more nuanced risk-based alerting system. It assigns risk points to various suspicious but not definitively malicious events (e.g., logging in from a rare location, running a command outside business hours). A driver discovery command executed by a user who has accumulated a high-risk score is more likely to be malicious, allowing analysts to focus on the most threatening activities.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Zeek conn.log
  - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FUNCTION calculate_risk(user, time_window):
        score = 0
        IF logon from rare_geoip in time_window: score += 10
        IF unusual parent_process for command in time_window: score += 15
        IF execution outside_business_hours in time_window: score += 5
        RETURN score
      WHEN driver_discovery_command is executed by user
        IF calculate_risk(user, 30_minutes) > 20
          ALERT 'High-risk user executed driver discovery command'
- question: Does a sequence of events, including a driver discovery command, match a known malicious attack chain identified by a sequence analysis model?
  context: This question employs advanced machine learning to understand the "story" of an attack. By training a model (like an HMM or RNN) on known malicious and benign sequences of events, it can learn to distinguish between an administrator performing routine tasks and an attacker executing a kill chain. An alert is triggered when an observed sequence of events (e.g., Remote Logon -> Privilege Escalation -> Driver Discovery) has a high probability of being malicious according to the model.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Windows Event ID 4672
  - Zeek conn.log
  - Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway logs providing GeoIP and ASN context.
  range: Last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new event sequence (e.g., Logon -> PrivEsc -> Discovery)
        SCORE sequence with HMM/RNN model
        GET probability_malicious, probability_benign
        IF probability_malicious > 0.9
          ALERT 'Event sequence matches known malicious attack chain'