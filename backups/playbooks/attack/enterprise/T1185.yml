name: T1185: Browser Session Hijacking
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is leveraging browser sessions for collection or lateral movement. This involves detecting anomalous network connections from browsers to malicious sites, unusual process activity related to browser data stores (cookies, credentials), browsers spawning suspicious child processes like shells, abnormal network traffic patterns inconsistent with user baselines, and the concurrent use of a single session token from multiple impossible-to-travel-between geolocations or with conflicting client details.
type: technique
related:
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Is a user's browser initiating network connections to known command and control (C2) or malware infrastructure?
    context: This question aims to detect the most direct evidence of a compromised browser session being used for malicious communication. By joining network and DNS logs and comparing destinations against threat intelligence, we can identify when a browser, which is typically a trusted process, is communicating with known bad actors. A match is a high-fidelity indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Enterprise web proxy
      - DNS resolvers
      - all user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: JOIN (network_connections, dns_logs) ON (ip, timestamp) WHERE process IN (browsers) AND destination IN (threat_intel_feed) -> ALERT
  - question: Is a user's browser connecting to an unusually rare and newly registered domain?
    context: Adversaries often use newly created domains for their C2 infrastructure to evade reputation-based blocking. This question focuses on identifying these domains by looking for statistical outliers. A connection to a domain that is both rarely visited across the organization and very recently created is a strong indicator of potential malicious activity that might not yet be on threat intelligence feeds.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Enterprise web proxy
      - DNS resolvers
      - all user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each browser_connection CALCULATE domain_prevalence and domain_age. IF prevalence < 1% AND age < 30_days -> REVIEW
  - question: Can machine learning classify browser network connections as malicious based on their traffic characteristics?
    context: This question explores a more advanced, behavioral approach. Instead of relying on specific indicators like known bad domains, a machine learning model can learn the subtle characteristics of malicious traffic (e.g., connection duration, data volume, protocol anomalies). This allows for the detection of novel threats and variants that share behavioral patterns with known malware, even if the destination is unknown.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Enterprise web proxy
      - DNS resolvers
      - all user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: EXTRACT features from browser_connections. SCORE with trained_ML_model. IF score > 0.9 -> ALERT
  - question: Is a browser process being launched with suspicious command-line flags that could enable remote control or disable security features?
    context: Adversaries may launch a browser with specific flags to facilitate session hijacking. For example, enabling remote debugging allows external control, while disabling web security can make the browser vulnerable to cross-site attacks. Monitoring for these specific, high-risk command-line arguments is a direct way to detect attempts to compromise or control a browser process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - All user endpoints (workstations, VDIs) and terminal servers
      - User profile directories containing browser data (e.g., C:\Users\<username>\AppData\)
    range: last 90 days
    queries:
      - search: pseudocode
        query: FROM process_creation_events IF process IN (browsers) AND command_line CONTAINS (suspicious_flags) -> ALERT
  - question: Is a non-standard or rare process accessing sensitive browser files like cookie or credential stores?
    context: Browser session data, including cookies and saved credentials, is stored in specific files. Normally, only the browser process itself should access these files. This question aims to detect credential theft or session hijacking attempts by monitoring for unusual processes (like PowerShell or a custom tool) accessing these sensitive files. By baselining normal access patterns, we can spot rare and potentially malicious access events.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - All user endpoints (workstations, VDIs) and terminal servers
      - User profile directories containing browser data (e.g., C:\Users\<username>\AppData\)
    range: last 90 days
    queries:
      - search: pseudocode
        query: FROM file_access_events IF target_file IN (sensitive_browser_files) CALCULATE process_rarity. IF rarity > 99th_percentile -> ALERT
  - question: Are there anomalous browser process launch commands that deviate from established normal behavior?
    context: While some command-line arguments are known to be malicious, adversaries may use novel combinations or parameters. An unsupervised machine learning model can learn the full spectrum of normal browser launch commands within an environment. This allows it to flag any command line that is structurally different or contains unusual parameters, providing a way to detect new or unknown techniques for browser manipulation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - All user endpoints (workstations, VDIs) and terminal servers
      - User profile directories containing browser data (e.g., C:\Users\<username>\AppData\)
    range: last 90 days
    queries:
      - search: pseudocode
        query: VECTORIZE browser_command_lines. TRAIN anomaly_detection_model. IF new_command_line has high anomaly_score -> ALERT
  - question: Is a browser process spawning a command shell or scripting interpreter, or is another process injecting a thread into a browser?
    context: A browser's legitimate function does not typically involve spawning shells (like cmd.exe or powershell.exe) or having other processes inject code into it (process injection). These actions are highly indicative of an adversary using a compromised browser or an exploit to execute arbitrary code. This question uses high-fidelity rules to detect these specific, suspicious parent-child and process injection relationships.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 8
      - All endpoints running user-facing web browsers
    range: last 90 days
    queries:
      - search: pseudocode
        query: RULE 1 IF parent_process IN (browsers) AND child_process IN (shells). RULE 2 IF remote_thread_target IN (browsers) AND source_process NOT IN (browsers, installers) -> ALERT
  - question: Is a browser spawning a child process that is statistically rare or has never been seen before in the environment?
    context: Beyond just shells, a browser spawning any unusual process can be a sign of compromise. This question aims to detect this by first establishing a baseline of all normal child processes spawned by browsers (e.g., update helpers, crash reporters). Any new or extremely rare child process is then flagged for review, as it could be a malicious payload or tool deployed by an attacker.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 8
      - All endpoints running user-facing web browsers
    range: last 90 days
    queries:
      - search: pseudocode
        query: BASELINE parent-child relationships for browsers. IF new_relationship.frequency < 0.1% -> REVIEW
  - question: Does the process activity graph on a host show an anomalous structure originating from a browser process?
    context: This question moves beyond simple parent-child pairs to analyze the entire chain of process activity. By modeling process relationships as a graph, we can use algorithms to find unusual patterns, such as a browser spawning a multi-step process chain or receiving a remote thread from an unexpected source. This provides a more holistic view of process behavior and can detect complex attack sequences.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 8
      - All endpoints running user-facing web browsers
    range: last 90 days
    queries:
      - search: pseudocode
        query: BUILD process_graph per host. USE graph_anomaly_detection to find rare subgraphs involving browser processes -> INVESTIGATE
  - question: Is a browser process attempting to connect to internal network services on non-standard web ports?
    context: Browsers are for browsing the web (typically ports 80, 443). When a browser process starts making connections to internal systems on ports for services like SSH (22), SMB (445), or RDP (3389), it's a strong indicator that an attacker has compromised the browser and is using it to pivot and move laterally within the network. This question targets this specific, high-confidence lateral movement behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - Network gateways
      - internal network segments
      - user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: FROM network_events IF process IN (browsers) AND destination_ip is_internal AND destination_port IN (non_web_ports) -> ALERT
  - question: Has a user's browser network activity significantly deviated from their own historical baseline?
    context: Every user has a unique pattern of web browsing. This question aims to detect session hijacking by identifying drastic changes in this pattern. A sudden spike in the amount of data uploaded, connections to internal servers, or the variety of ports used can indicate that an attacker is using the user's browser for activities like data exfiltration or internal reconnaissance. This method detects anomalies relative to the user's own normal behavior.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - Network gateways
      - internal network segments
      - user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each user BASELINE browser network metrics. IF current_metric > 3 * std_dev from baseline -> ALERT
  - question: Has a user's overall browser behavior profile anomalously shifted when compared to their peers?
    context: This question uses peer group analysis to find outliers. Users can be grouped into clusters based on their browsing habits. If a user suddenly jumps from a cluster characterized by light external web browsing to one characterized by heavy internal network traffic, it suggests a fundamental change in how their browser is being used, which could be due to a compromise. This flags unusual role changes or compromised accounts.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 5156
      - Network gateways
      - internal network segments
      - user endpoints
    range: last 90 days
    queries:
      - search: pseudocode
        query: CLUSTER users daily based on browser activity features. TRACK cluster membership. IF user makes anomalous cluster transition -> FLAG
  - question: Is a single web application session token being used with multiple, conflicting User-Agent strings?
    context: A legitimate user session should consistently originate from the same browser and have the same User-Agent string. If an attacker steals a session cookie and uses it with their own browser or a tool, the User-Agent will change. This question aims to detect this specific artifact of session token theft by flagging when a single session ID is associated with more than one User-Agent.
    answer_sources:
      - Zeek http.log
      - Application-level logs (WAF, reverse proxy, application server)
      - Network traffic inspection points (internet gateways, WAFs)
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each session_id STORE initial User-Agent. IF subsequent request with same session_id has different User-Agent -> ALERT
  - question: Is a single web application session token being used from geographically distant locations in an impossibly short amount of time?
    context: This question uses geolocation to detect session hijacking. A legitimate user cannot physically travel from New York to London in five minutes. If session activity for a single user token appears from both locations within that timeframe, it is a very strong indicator that the token has been stolen and is being used by an attacker in a different location. This is often referred to as an "impossible travel" alert.
    answer_sources:
      - Zeek http.log
      - Application-level logs (WAF, reverse proxy, application server)
      - Network traffic inspection points (internet gateways, WAFs)
    range: last 90 days
    queries:
      - search: pseudocode
        query: FOR each session_id GEO-LOCATE source IP. CALCULATE velocity between consecutive requests. IF velocity > impossible_speed -> ALERT
  - question: Does the sequence of actions within a user's web session deviate from learned legitimate behavior patterns?
    context: This question applies machine learning to model the flow of a user's session. An RNN or LSTM model can learn the normal sequences of user actions (e.g., login, view dashboard, view report) and flag a session when it observes a sequence that is highly improbable, indicating a potential hijacker who doesn't know the normal application workflow.
    answer_sources:
      - Zeek http.log
      - Application-level logs (WAF, reverse proxy, application server)
      - Network traffic inspection points (internet gateways, WAFs)
    range: last 90 days
    queries:
      - search: pseudocode
        query: MODEL legitimate session event sequences with an RNN. FOR new sessions CALCULATE reconstruction error. IF error is high -> ALERT