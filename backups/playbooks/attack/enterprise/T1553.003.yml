name: T1553.003: SIP and Trust Provider Hijacking
id: f5a1b2c3-d4e5-4f6a-7b8c-9d0e1f2a3b4c
description: This playbook helps investigate if an adversary has hijacked a Subject Interface Package (SIP) or Trust Provider to evade defenses. This technique involves an adversary modifying registry values to point to a malicious DLL, using native utilities like reg.exe to manipulate cryptography keys, or leveraging non-standard processes to perform these modifications. The goal is to make malicious code appear as if it is properly signed and trusted. Evidence of this activity includes modifications to registry keys under HKLM\SOFTWARE\Microsoft\Cryptography, often by an un-allowlisted or statistically rare process. The attack chain may involve a new DLL being created in a user-writable directory, the registry being modified to point to it, and a subsequent code signature validation event. Post-compromise indicators can include a 'validated' process executing from an atypical directory and initiating outbound network connections to low-reputation or newly-observed domains.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious DLL been registered as a SIP or Trust Provider?
    context: This question investigates whether an adversary has modified a Subject Interface Package (SIP) or Trust Provider registry key to point to a malicious DLL. By correlating the DLL path from the registry modification event with file creation or network transfer events, we can obtain the file's hash. This hash can then be checked against threat intelligence feeds to identify known malicious tools used for SIP hijacking, providing a high-confidence indicator of compromise.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Zeek files.log
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint file systems
      - Network egress points
      - Threat intelligence platforms
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each registry modification event (Sysmon 13, Win 4657) on SIP/Trust provider path:
            EXTRACT DLL_path from event details
            SEARCH for file creation (Sysmon 11) or network transfer (Zeek files.log) with DLL_path
            EXTRACT file_hash
            QUERY threat intelligence for file_hash
            IF match found:
              ALERT "Known malicious SIP/Trust provider DLL detected"
  - question: Has a SIP or Trust Provider been modified to point to an unusually rare DLL path?
    context: This question aims to detect SIP hijacking by identifying modifications that point to rare or unique DLL paths within the enterprise. Legitimate software updates typically use common installation paths, whereas attackers may place their malicious DLLs in unusual locations. By calculating the prevalence of the new DLL path and flagging outliers (e.g., those in the bottom 1st percentile), we can uncover suspicious modifications that warrant further investigation, especially when the change is not performed by a known software installer.
    answer_sources:
      - Sysmon Event ID 13
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint file systems
      - Network egress points
      - Threat intelligence platforms
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each SIP/Trust provider registry modification (Sysmon 13):
            EXTRACT new_DLL_path and modifying_process
            CALCULATE enterprise-wide prevalence of new_DLL_path over 30 days
            IF prevalence < 1st percentile AND modifying_process is NOT in allowlist:
              ALERT "Anomalous SIP/Trust provider DLL path detected"
  - question: Can a machine learning model identify suspicious SIP/Trust Provider registry modifications based on contextual features?
    context: This question leverages a machine learning approach to proactively detect SIP hijacking. By training a classifier on various features of registry modification events—such as the process involved, user context, and the location of the new DLL—we can score new events in real-time. This allows for the automated identification of modifications that exhibit characteristics of malicious activity, even if the specific DLL or path is not previously known to be malicious.
    answer_sources:
      - Sysmon Event ID 13
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint file systems
      - Network egress points
      - Threat intelligence platforms
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each registry modification event (Sysmon 13):
            EXTRACT features (process, parent_process, cmd_line, user, is_SIP_path, is_user_writable_dir)
            SCORE event with pre-trained logistic regression model
            IF score > high_confidence_threshold:
              ALERT "ML model detected suspicious SIP/Trust provider modification"
  - question: Is a native Windows utility like reg.exe or regsvr32.exe being used to manipulate specific SIP or Trust Provider functions?
    context: This question focuses on detecting the direct manipulation of SIP/Trust Provider registry keys using common command-line utilities. Adversaries may use tools like reg.exe to script these changes. By monitoring for the execution of these utilities with command-line arguments that contain specific keywords related to SIP functions or known GUIDs, we can create a high-fidelity alert for this specific hijacking vector.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint process execution logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process creation event (Sysmon 1, Win 4688):
            IF process_name is in ('reg.exe', 'regedit.exe', 'regsvr32.exe') AND command_line contains SIP-related keywords:
              ALERT "Suspicious use of registry utility to modify SIP/Trust provider"
  - question: Is there an unusual variety of parent processes modifying SIP/Trust Provider keys on a single host?
    context: This question uses a statistical approach to detect anomalous behavior. Normally, only a few specific processes (like installers or system tools) modify SIP/Trust keys. An attacker's activities might involve multiple, different, or unusual parent processes making these changes in a short period. By calculating the Shannon entropy of the parent process names, we can quantify this variety and alert when it deviates significantly from the established baseline for a given host, suggesting potential malicious activity.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint process execution logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host:
            CALCULATE 30-day rolling average and stddev of hourly entropy for parent processes modifying SIP/Trust keys (Sysmon 13)
            CALCULATE current hourly entropy
            IF current_entropy > (average + 3 * stddev):
              ALERT "Anomalous diversity of processes modifying SIP/Trust keys"
  - question: Can an anomaly detection model identify unusual SIP/Trust Provider modifications without prior labeling?
    context: This question applies an unsupervised machine learning model, Isolation Forest, to find outliers in registry modification events. Unlike supervised models, this approach doesn't require pre-labeled malicious data. It identifies anomalies by learning the patterns of normal administrative activity and flagging events that deviate significantly. This is effective for detecting novel or previously unseen attack techniques involving process context, user, and command-line parameters.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Endpoint process execution logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each SIP/Trust key modification event (Sysmon 13):
            CREATE feature vector (process, parent_process, user, cmd_line)
            SCORE event with pre-trained Isolation Forest model
            IF event is scored as a strong anomaly:
              ALERT "ML anomaly detection model flagged suspicious SIP/Trust key modification"
  - question: Has a SIP or Trust Provider key been modified by a process not on the approved allowlist?
    context: This question provides a straightforward and effective detection method by leveraging an allowlist. Modifications to sensitive cryptography keys should only be performed by a small, well-defined set of trusted processes, such as system utilities or approved software installers. Any process not on this list that performs such a modification is highly suspicious and warrants an immediate alert, as it is a strong indicator of unauthorized or malicious activity.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Enterprise-wide process execution baselines
      - Software deployment and patching servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE allowlist of trusted installer/system processes
          FOR each SIP/Trust key modification event (Sysmon 13, Win 4657):
            EXTRACT modifying_process_name
            IF modifying_process_name is NOT in allowlist:
              ALERT "SIP/Trust key modified by non-allowlisted process"
  - question: Has a statistically rare process modified a SIP or Trust Provider key?
    context: This question aims to identify suspicious modifications by focusing on the rarity of the modifying process itself. Across an enterprise, the processes that legitimately alter SIP/Trust keys are typically common. A process that has rarely or never been seen performing this action before is anomalous. By tracking the frequency of modifying processes and flagging those in the bottom percentile, we can uncover novel or targeted attacks that use uncommon tools.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Enterprise-wide process execution baselines
      - Software deployment and patching servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN 30-day frequency table of process names modifying SIP/Trust keys
          FOR each new SIP/Trust key modification (Sysmon 13):
            EXTRACT modifying_process_name
            IF frequency of modifying_process_name is in bottom 5th percentile:
              ALERT "Statistically rare process modified SIP/Trust key"
  - question: Has there been a statistically significant surge in SIP/Trust key modifications by rare processes?
    context: This question looks for broader campaign activity by analyzing trends over time. A single rare modification might be an isolated event, but a sudden increase in the number of such modifications across the enterprise could signal a coordinated attack. By using a time-series model to forecast the expected number of 'rare' modifications, we can automatically detect and alert on any day where the actual count significantly exceeds the prediction, pointing to a potential widespread campaign.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Enterprise-wide process execution baselines
      - Software deployment and patching servers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL daily count of SIP/Trust key modifications by rare processes using time-series forecast (e.g., SARIMA)
          CALCULATE daily upper confidence interval for forecasted count
          GET actual daily count of rare modifications
          IF actual_count > upper_confidence_interval:
            ALERT "Surge in SIP/Trust key modifications by rare processes detected"
  - question: Has a newly created DLL in a user directory been registered as a SIP/Trust provider and then immediately used for code signing validation?
    context: This question targets a specific, high-fidelity attack chain. Adversaries often drop their malicious DLL in a temporary or user-specific location, register it as a trust provider, and then immediately leverage it to falsely validate malicious code. By creating a correlation rule that looks for this exact sequence of events (file creation, registry modification, and successful validation) in a short time frame on a single host, we can detect the full execution of the hijack with high confidence.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Endpoint file systems (e.g., %APPDATA%, %TEMP%, %PUBLIC%)
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Windows CAPI2 event logs on endpoints
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON same host, within 5 minutes:
          DETECT Sysmon 11 (FileCreate) for DLL in user-writable dir
          THEN DETECT Sysmon 13 (RegistryValueSet) for SIP/Trust key pointing to that DLL
          THEN DETECT CAPI2 11 (Successful Validation)
          IF sequence matches:
            ALERT "Suspicious SIP/Trust hijack sequence detected"
  - question: Has a code signing validation event occurred immediately after a SIP/Trust key modification, which is a statistically rare sequence?
    context: This question uses conditional probability to identify a highly anomalous sequence of events. In normal system operations, it is extremely rare for a sensitive cryptography key to be modified and then immediately followed by a code signing validation event. By baselining the probability of this sequence, we can treat any occurrence as a significant deviation from the norm (an event in the 99.9th percentile). This provides a robust statistical method for detecting the core of the hijacking technique.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Endpoint file systems (e.g., %APPDATA%, %TEMP%, %PUBLIC%)
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Windows CAPI2 event logs on endpoints
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE conditional probability of CAPI2 11 occurring within 5 mins after a SIP/Trust key modification (Sysmon 13)
          FOR each new SIP/Trust key modification (Sysmon 13):
            CHECK for subsequent CAPI2 11 event within 5 mins
            IF sequence occurs (exceeds 99.9th percentile of probability):
              ALERT "Statistically improbable SIP/Trust hijack sequence detected"
  - question: Can a sequence-aware machine learning model detect the state transitions characteristic of a SIP/Trust provider hijack?
    context: This question proposes using a sophisticated, sequence-aware model like a Hidden Markov Model (HMM) to understand the 'story' of events on a host. The model is trained to recognize normal sequences of activity. A SIP hijack represents a specific, anomalous sequence of state transitions - from benign activity to writing a suspicious DLL, then modifying a critical registry key, and finally achieving an anomalous validation. When the model observes a live event stream following this high-probability malicious path, it can flag the activity as a likely hijack.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Endpoint file systems (e.g., %APPDATA%, %TEMP%, %PUBLIC%)
      - Endpoint registry hives (HKLM\SOFTWARE\Microsoft\Cryptography)
      - Windows CAPI2 event logs on endpoints
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL event stream with pre-trained HMM with states ('Benign', 'Suspicious DLL Write', 'Critical Reg Modify', 'Anomalous Validation')
          FOR each live event stream on a host:
            CALCULATE probability of transition path
            IF path matches 'Suspicious DLL Write' -> 'Critical Reg Modify' -> 'Anomalous Validation' with high probability:
              ALERT "HMM detected event sequence characteristic of SIP/Trust hijack"
  - question: Has a process, validated via the hijacked trust, initiated network communication to a known malicious destination?
    context: This question focuses on the post-hijack activity. After an adversary successfully uses a hijacked trust provider to get their code validated, a common next step is to establish command and control (C2). This rule correlates a successful validation event with the subsequent process execution and network activity. An alert is triggered if a validated process, running from an unusual location, communicates with an IP address on a threat intelligence blocklist, indicating a likely C2 channel.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network connection logs
      - Windows CAPI2 event logs
      - Network gateway traffic logs
      - DNS server logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN CAPI2 11 events with Sysmon 1 events on ProcessGUID
          FOR each joined event:
            IF process_path is in suspicious directory AND process makes outbound connection (Sysmon 3, Zeek conn.log) within 60s to a blocklisted IP:
              ALERT "Validated process from suspicious path connected to malicious IP"
  - question: Has a validated process, running from a rare path or spawned by a rare parent, connected to a newly observed domain?
    context: This question uses statistical profiling to uncover stealthy C2 activity. Adversaries may use a validated but otherwise legitimate-looking process to initiate C2. This rule first identifies anomalous process execution context (rare path or parent process) for a validated process. It then escalates to an alert if this anomalously executed process communicates with a newly observed domain (NOD), a common indicator for newly stood-up C2 infrastructure.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network connection logs
      - Windows CAPI2 event logs
      - Network gateway traffic logs
      - DNS server logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each validated process execution (CAPI2 11):
            CHECK if execution path or parent process is statistically rare (e.g., not in top 95%)
            IF rare context is found:
              MONITOR for network connections
              IF process connects to a domain first seen in last 24 hours (Zeek dns.log):
                ALERT "Anomalously executed process connected to newly observed domain"
  - question: Can a graph-based model detect the entire SIP hijacking attack chain as an anomalous subgraph of activity?
    context: This question leverages graph analytics to visualize and detect the entire attack chain as a single anomalous entity. By representing system activities (process creation, file writes, network connections) as a graph, we can train a model to understand normal patterns. A SIP hijack creates a distinct and anomalous subgraph - a rare process node connected to a registry key node, which connects to a file node in a strange path, which in turn connects to a low-reputation IP node. The model can identify and score this entire subgraph as a high-confidence anomaly, providing a holistic view of the attack.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Microsoft-Windows-CAPI2/Operational Event ID 11
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network connection logs
      - Windows CAPI2 event logs
      - Network gateway traffic logs
      - DNS server logs
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL system activity as a graph (nodes: process, file, IP; edges: interactions)
          TRAIN graph anomaly detection model on benign activity
          SCORE new subgraphs in real-time
          IF a subgraph representing the hijack chain (rare process -> regkey -> strange file path -> low-prevalence IP) is scored as a high anomaly:
            ALERT "Graph model detected anomalous subgraph indicative of SIP hijack"