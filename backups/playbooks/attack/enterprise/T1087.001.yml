name: T1087.001: Local Account
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Has the adversary attempted to enumerate local system accounts? (TA0007 - Discovery). This playbook focuses on detecting enumeration of local system accounts through various methods. This includes identifying the use of known malicious discovery tools by checking file hashes, spotting command-line arguments indicative of account enumeration (like `net user`), detecting anomalously high numbers of discovery commands from a single source, correlating discovery commands with subsequent logon attempts, and observing process events related to SAM database dumping followed by network exfiltration activity.
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process been executed whose file hash matches a known malicious discovery tool on a threat intelligence list?
    context: This question aims to detect the simplest case of discovery: the use of off-the-shelf malicious tools like PowerSploit, BloodHound, or Mimikatz. By hashing every new process and checking it against a list of known-bad hashes, analysts can quickly identify known threats without complex behavioral analysis. A match provides a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Endpoint Detection and Response (EDR) platform
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events | HASH process_executable | LOOKUP hash against threat_intel_feed | WHERE match_found
  - question: Has an extremely rare process been executed, especially by an anomalous parent process?
    context: Adversaries may use custom or slightly modified tools to evade hash-based detection. This question helps find such tools by focusing on rarity. A process that has rarely or never been seen before in the environment is inherently suspicious. This suspicion is amplified if the process is spawned by an unusual parent, like a Microsoft Office application, or if it is unsigned.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Endpoint Detection and Response (EDR) platform
      - SIEM/Log Aggregator
    range: last 30 days
    queries:
      - pseudocode: SEARCH process_creation_events WHERE hash NOT in (allowlist, denylist) | CALCULATE prevalence of hash over 30 days | WHERE prevalence < 1st_percentile | CORRELATE with parent_process_anomalies
  - question: Has a machine learning model identified a process execution as likely malicious based on its features?
    context: This question leverages machine learning to move beyond simple rules and identify suspicious behavior based on a combination of factors. A model can learn the complex patterns that distinguish malicious activity from benign system administration, considering features like the process name, its parent, user context, command-line arguments, and its rarity.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Endpoint Detection and Response (EDR) platform
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: INPUT process_event_features (name, parent, user, cmd_line, hash_prevalence) INTO classification_model | WHERE model_score > confidence_threshold
  - question: Has a process been executed with command-line arguments containing known local account enumeration commands?
    context: This question targets the direct use of built-in operating system utilities for discovery. Adversaries frequently use commands like `net user`, `Get-LocalUser`, or `wmic useraccount get` to list local accounts. Searching for these specific strings in command-line logs is a direct way to detect this technique, especially when initiated by unusual parent processes.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Terminal servers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_events | REGEX_MATCH command_line for ('net user', 'net localgroup', 'Get-LocalUser', etc.) | WHERE match_found
  - question: Has a user or host executed a command with unusually high entropy or an abnormal frequency of discovery-related commands?
    context: This question aims to detect obfuscated or unusually frequent discovery activity. Adversaries may use obfuscation to hide their commands, which can increase the entropy of the command-line string. Additionally, a sudden spike in the number of discovery commands compared to a user's or host's normal baseline can indicate an active enumeration phase.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Terminal servers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: FOR EACH user, host: SEARCH process_creation_events | CALCULATE command_line_entropy AND frequency_of_discovery_commands | WHERE entropy > 3_std_dev_from_baseline OR frequency > 99th_percentile_of_baseline
  - question: Has a sequence analysis model detected a chain of commands indicative of a malicious discovery pattern?
    context: This question looks beyond individual commands to analyze the entire sequence of actions within a user session. A single `whoami` or `net user` command might be benign, but a sequence like 'network connection -> `whoami` -> `net user`' is highly suspicious. A sequence model can learn these malicious 'grammars' and flag sessions that follow a known attack path.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Member servers
      - Domain controllers
      - Terminal servers
      - SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: INPUT user_session_command_sequence INTO sequence_analysis_model | WHERE model_identifies_malicious_pattern
  - question: Has a single source user or host executed an unusually high number of discovery commands within a short time frame?
    context: This question seeks to identify brute-force or scripted enumeration activity. An adversary attempting to quickly map out local accounts will generate a high volume of discovery commands in a short period. A simple rule that counts these commands and alerts when a static threshold is crossed (e.g., >10 commands in 5 minutes) can catch this noisy activity.
    answer_sources:
      - Windows Event ID 4688
      - Source host initiating discovery
      - Target hosts being enumerated
      - Security Information and Event Management (SIEM) system
    range: last 90 days
    queries:
      - pseudocode: SEARCH discovery_command_events | COUNT events by source_user, source_host over 5_min_window | WHERE count > 10
  - question: Has a user or host exceeded their own historical baseline for the number of discovery commands executed in a time window?
    context: This question enhances simple thresholding by using dynamic, per-entity baselines. By establishing a baseline of normal activity for each user and host, this approach can detect when an entity deviates from its own normal behavior. An alert is triggered when the count of discovery commands significantly exceeds what is typical for that specific entity.
    answer_sources:
      - Windows Event ID 4688
      - Source host initiating discovery
      - Target hosts being enumerated
      - Security Information and Event Management (SIEM) system
    range: last 90 days
    queries:
      - pseudocode: FOR EACH user, host: AGGREGATE discovery_command_counts over 5_min_window | COMPARE current_count to historical_baseline | WHERE current_count > 3_std_dev_from_mean
  - question: Has a clustering algorithm identified a 'low and slow' enumeration campaign spread across multiple hosts and times?
    context: This question is designed to detect sophisticated adversaries who spread their discovery activities over long periods and across multiple systems. A density-based clustering algorithm like DBSCAN can group together seemingly disparate, sparse events that are part of a single coordinated campaign, connecting the dots that a human analyst or simple rule might miss.
    answer_sources:
      - Windows Event ID 4688
      - Source host initiating discovery
      - Target hosts being enumerated
      - Security Information and Event Management (SIEM) system
    range: last 90 days
    queries:
      - pseudocode: INPUT event_features (source, target, user, command, time) INTO DBSCAN_algorithm | IDENTIFY clusters of related activity | ALERT on new clusters
  - question: Was a local account discovery command from a source IP followed by a local logon attempt from the same IP within 60 minutes?
    context: This question directly links the 'discovery' phase to the 'access' phase. Seeing a discovery command followed closely by a logon attempt from the same source is a very strong indicator that the discovery was successful and is now being acted upon. This correlation turns two potentially low-fidelity events into one high-priority alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Authentication servers
      - Domain Controllers
      - High-value servers
      - User workstations
      - SIEM system
    range: last 90 days
    queries:
      - pseudocode: SEARCH for discovery_event from source_ip | WITHIN 60_minutes, SEARCH for local_logon_event (success or failure) from same source_ip | IF both_found, ALERT
  - question: If a discovery-then-logon pattern is detected, was the target account one that has been dormant or is infrequently used?
    context: This question adds risk scoring to the discovery-then-logon alert. Adversaries often target dormant or service accounts. By checking the logon history of the account being used, analysts can determine if it's a rarely used account. A logon to a dormant account after recent discovery activity significantly increases the likelihood of a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Authentication servers
      - Domain Controllers
      - High-value servers
      - User workstations
      - SIEM system
    range: last 90 days
    queries:
      - pseudocode: ON discovery_then_logon_alert: QUERY authentication_logs for target_account | CALCULATE time_since_last_logon | IF time_since_last_logon > 95th_percentile_of_dormancy, INCREASE alert_priority
  - question: Has a machine learning model assigned a high risk score to a logon event, especially one that was preceded by recent discovery activity?
    context: This question operationalizes the correlation between discovery and logon as a feature in a machine learning model. The model can weigh multiple factors but gives special significance to the boolean feature 'was this logon preceded by discovery?'. This allows for a more nuanced risk scoring, catching suspicious logons that might not have triggered a standalone alert.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Zeek conn.log
      - Authentication servers
      - Domain Controllers
      - High-value servers
      - User workstations
      - SIEM system
    range: last 90 days
    queries:
      - pseudocode: FOR EACH logon_event: CREATE feature 'preceded_by_discovery' | INPUT all_features into classification_model | WHERE model_score > confidence_threshold
  - question: Has activity indicating a SAM database dump been observed, followed by the exfiltration of a similarly named file over the network?
    context: This question targets a common method for offline credential discovery: dumping the Security Account Manager (SAM) database. The query looks for the initial host-based action, such as using `reg.exe` to save the SAM hive, and correlates it with network evidence of a file being transferred off the machine.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - Zeek files.log
      - Domain Controllers
      - Critical application servers
      - Network egress points
      - File servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH for SAM_dump_event (e.g., 'reg save hklm\\sam') | WITHIN 15_minutes, SEARCH network_file_transfers for file with matching name/hash | IF both_found, ALERT
  - question: Following a SAM access event, did the host initiate a network connection with an anomalously large amount of outbound data?
    context: This question provides an alternative way to detect exfiltration when file-level network visibility isn't available. After detecting a SAM dump, the query pivots to analyzing the volume of outbound network traffic from the same host. An unusually large data transfer, compared to the host's normal baseline, is a strong indicator of exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - Zeek files.log
      - Domain Controllers
      - Critical application servers
      - Network egress points
      - File servers
    range: last 90 days
    queries:
      - pseudocode: ON SAM_access_event: ANALYZE subsequent_network_connections from host | COMPARE outbound_bytes to host_baseline | WHERE outbound_bytes > 99th_percentile, ALERT
  - question: Has a network anomaly detection model flagged an unusual outbound traffic pattern from a critical asset that is temporally correlated with a host-based SAM access event?
    context: This question uses unsupervised machine learning to detect subtle exfiltration patterns from critical assets like Domain Controllers. An anomaly detection model can flag deviations from normal traffic. Correlating this network anomaly with a preceding host-based event (like SAM access) provides powerful, contextualized evidence of credential theft.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - Zeek files.log
      - Domain Controllers
      - Critical application servers
      - Network egress points
      - File servers
    range: last 90 days
    queries:
      - pseudocode: INPUT network_timeseries_data into anomaly_detection_model | ON network_anomaly_detected: CHECK for preceding SAM_access_event on host within short_timeframe | IF correlated, ALERT