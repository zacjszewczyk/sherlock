name: T1546.015: Component Object Model Hijacking
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Adversaries may hijack Component Object Model (COM) objects to achieve persistence or privilege escalation. This playbook helps investigate such activity by monitoring for modifications to COM-related registry keys in both the HKEY_CURRENT_USER (HKCU) and HKEY_LOCAL_MACHINE (HKLM) hives. Detections focus on identifying when these keys are changed to point to malicious files (identified by hash), script interpreters, or executables in non-standard, user-writable locations. The playbook also outlines methods for correlating these registry modifications with subsequent suspicious activities, such as anomalous process creation or rare network connections initiated by high-privilege processes that may have been compromised through the hijack.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors: Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a modified HKCU COM server registry key been pointed to a file with a known-bad hash?
  context: Adversaries can achieve persistence by hijacking COM objects in the current user's registry hive (HKCU). This redirects a legitimate program's execution flow to a malicious payload. This question aims to directly detect this by checking if the new file specified in the COM registry key is a known malicious file according to threat intelligence feeds. A match is a strong indicator of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Threat Intelligence Feeds
  - User Workstations, Remote Desktop Servers, VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Windows Event ID 4657
      WHERE object_name contains "HKCU\Software\Classes\CLSID\" and (object_name contains "\InProcServer32" or object_name contains "\LocalServer32")
      EXTRACT file_path from new_value
      CALCULATE hash of file at file_path
      LOOKUP hash in threat_intelligence_feed
      RETURN events where hash is found
- question: Is any process performing an unusually high number of HKCU COM modifications on a host compared to its historical baseline?
  context: While some processes legitimately modify COM keys, malicious scripts or tools might perform these actions more frequently than normal. This question seeks to identify anomalous behavior by establishing a baseline for how often each process modifies HKCU COM keys and alerting on significant deviations. This can help detect novel or unknown malware that isn't yet on a blacklist.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Remote Desktop Servers, VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each parent_process_name, host:
        CALCULATE daily count of HKCU COM modifications over 90 days to create baseline.
        CALCULATE 95th percentile threshold.
      SEARCH today's Windows Event ID 4657 for HKCU COM modifications.
      GROUP by parent_process_name, host.
      RETURN groups where count > 95th percentile threshold.
- question: Does a machine learning model classify a recent HKCU COM modification as likely malicious based on its features?
  context: This question leverages a machine learning model to score the maliciousness of a COM modification. The model considers various features like the entropy of the file path, the presence of suspicious keywords (e.g., 'temp'), the parent process, whether the binary is unsigned, and the time of day. This provides a more nuanced detection method, capable of catching sophisticated or previously unseen hijacking attempts.
  answer_sources:
  - Windows Event ID 4657
  - File metadata
  - User Workstations, Remote Desktop Servers, VDI Environments
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new HKCU COM modification event:
        EXTRACT features (file path entropy, path keywords, parent process, binary signature, time of day).
        INPUT features into pre-trained Random Forest model.
        SCORE the event for maliciousness.
      RETURN events where score > high_probability_threshold.
- question: Has an HKCU COM server registry key been modified to execute a script interpreter like powershell.exe or mshta.exe?
  context: COM server keys should typically point to a DLL or EXE file path, not a command line that invokes a script interpreter. An adversary might do this to execute a fileless payload directly when the COM object is loaded. This question uses regular expressions to find these highly suspicious and irregular command-line values, which are a strong indicator of a COM hijack.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Application Servers, Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Windows Event ID 4657
      WHERE object_name contains "HKCU\Software\Classes\CLSID\"
      AND new_value matches regex '(powershell|wscript|cscript|mshta|rundll32)\.exe .*'
      RETURN matching events
- question: Does the new value of a modified HKCU COM key have an unusually high character entropy?
  context: Legitimate COM server values are simple file paths with low character entropy. Adversaries often use obfuscated scripts or commands, which have high entropy, as the value for the hijacked key. This question aims to detect these obfuscated payloads by calculating the entropy of the registry value and alerting when it's anomalously high compared to a baseline of normal values.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Application Servers, Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE baseline entropy for new_value in HKCU COM modification events.
      CALCULATE 99th percentile threshold.
      FOR each new HKCU COM modification event:
        CALCULATE entropy of new_value.
      RETURN events where entropy > 99th percentile threshold.
- question: Has there been an anomalous spike in the rate of HKCU COM modifications involving script interpreters on a specific host?
  context: A sudden increase in COM hijack attempts using script interpreters on a single host can indicate an automated attack or a broader campaign. This question uses a time-series model to monitor the frequency of such events per host. Alerting on a statistically significant spike helps detect coordinated persistence deployment, even if individual scripts are not immediately flagged.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Application Servers, Remote Desktop Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        MODEL the time-series of HKCU COM modifications involving script interpreters.
      MONITOR for new events.
      RETURN alerts for hosts where the rate of new events is a statistical anomaly.
- question: Has an HKCU COM server been modified to point to a file in a suspicious, user-writable directory like AppData or Temp?
  context: Adversaries often drop their payloads in common user-writable directories (%APPDATA%, %TEMP%, %PUBLIC%) to ensure execution without needing elevated permissions. Legitimate COM servers are rarely located in these areas. This question checks if a COM object is being pointed to a file in one of these suspicious locations, which strongly suggests a persistence attempt.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Windows Event ID 4657 for HKCU COM modifications.
      WHERE new_value matches regex for suspicious paths ('\\AppData\\', '\\Temp\\', '\\Downloads\\', '\\Public\\')
      RETURN matching events.
- question: Is a modified HKCU COM server pointing to a file in a directory that is rarely or never used for COM objects across the enterprise?
  context: This question focuses on identifying rarity and novelty. By baselining all directory paths used for legitimate COM servers, we can identify when a modification points to a new or highly unusual directory. Such rarity is a strong indicator of an adversary placing their tool in an uncommon location to evade detection based on common suspicious folder lists.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE baseline of all directory paths from new_value in historical HKCU COM modifications.
      CALCULATE prevalence for each path.
      FOR each new HKCU COM modification event:
        EXTRACT directory_path from new_value.
      RETURN events where directory_path prevalence is below a rarity threshold (e.g., < 0.1%).
- question: Is a recent HKCU COM modification event an outlier when clustered with other similar events?
  context: Legitimate software installations and updates tend to produce clusters of similar events (e.g., same parent process, similar file paths). This question uses unsupervised machine learning to group COM modification events. Events that do not belong to any dense, "known good" cluster are treated as outliers and potential one-off persistence attempts by an adversary.
  answer_sources:
  - Windows Event ID 4657
  - User Workstations, Multi-user servers (e.g., Citrix, RDS)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CLUSTER historical HKCU COM modification events using features (target directory, parent process, file extension).
      FOR each new HKCU COM modification event:
        DETERMINE if it is part of an existing cluster or an outlier.
      RETURN events identified as outliers.
- question: Did a common COM-loading process like explorer.exe spawn a command-line interpreter shortly after a COM registry key was modified?
  context: After hijacking a COM object, the adversary's code will be executed by a legitimate process (like explorer.exe) that loads the object. This malicious code might then spawn a shell (cmd.exe, powershell.exe) to execute further commands. This question looks for this specific sequence of events: a COM key modification followed closely by a legitimate process spawning a shell, which is highly indicative of a successful hijack.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - User Workstations, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for a Windows Event ID 4657 (COM modification).
      WITHIN 5 minutes on the same host, SEARCH for a Windows Event ID 4688.
      WHERE parent_process is a common COM-loader (e.g., 'explorer.exe') AND child_process is a shell ('cmd.exe', 'powershell.exe').
      RETURN correlated event pairs.
- question: After a COM key modification, did a system process like explorer.exe or svchost.exe make a network connection to a rare or new destination?
  context: If a COM hijack is used to establish a command-and-control (C2) channel, the compromised legitimate process will initiate network traffic to the adversary's server. This question aims to detect this by baselining the normal network behavior of system processes and alerting when one of them connects to a statistically rare destination shortly after a COM modification alert, suggesting a new C2 channel.
  answer_sources:
  - Windows Event ID 4657
  - Zeek conn.log
  - User Workstations, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON a COM modification alert for a host:
        BASELINE normal network destinations for system processes (explorer.exe, svchost.exe).
        MONITOR network traffic from those processes on the host.
        ALERT if a connection is made to a destination with very low prevalence (e.g., bottom 5%).
- question: Does a graph-based model detect an anomalous sequence of events, such as a rare registry write followed by explorer.exe spawning powershell.exe and connecting to a new IP?
  context: This question uses advanced analysis by modeling system activity as a graph of interconnected events (processes, registry writes, network connections). A machine learning model trained on this graph data can learn what legitimate sequences of activity look like. It can then flag anomalous subgraphs, such as the specific chain of events corresponding to a COM hijack, payload execution, and C2 beacon, as a high-risk sequence.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CONSTRUCT event graphs from process, registry, and network logs.
      INPUT new event sequences into a pre-trained graph neural network.
      MODEL identifies known-good subgraphs.
      RETURN alerts for subgraphs that are flagged as anomalous, such as (HKCU write -> explorer.exe -> powershell.exe -> new external IP).
- question: Has a modified HKLM COM server registry key been pointed to a file with a known-bad hash?
  context: Adversaries can escalate privileges by hijacking COM objects in the HKEY_LOCAL_MACHINE (HKLM) hive, as these objects are often loaded by high-privilege system processes. This question aims to detect this by checking if the new file specified in a modified HKLM COM key is a known malicious file. A match is a strong indicator of a privilege escalation attempt.
  answer_sources:
  - Windows Event ID 4657
  - Threat Intelligence Feeds
  - Domain Controllers, Tier 0 Servers, Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Windows Event ID 4657
      WHERE object_name contains "HKLM\SOFTWARE\Classes\CLSID\"
      EXTRACT file_path from new_value
      CALCULATE hash of file at file_path
      LOOKUP hash in threat_intelligence_feed
      RETURN events where hash is found
- question: Has a host experienced an unusually high number of HKLM COM key modifications?
  context: Modifications to HKLM COM keys are typically rare and occur during software installations or patching. An adversary attempting to find a vulnerable COM object for privilege escalation might cause multiple modifications. This question seeks to detect such activity by alerting when the number of HKLM COM modifications on a host exceeds a low, established threshold, especially outside of maintenance windows.
  answer_sources:
  - Windows Event ID 4657
  - Domain Controllers, Tier 0 Servers, Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each host:
        CALCULATE daily baseline for HKLM COM modifications.
      SEARCH today's Windows Event ID 4657 for HKLM COM modifications.
      GROUP by host.
      RETURN hosts where count > low threshold (e.g., 2) or is a statistical anomaly.
- question: Does a machine learning model classify a recent HKLM COM modification as an anomaly compared to normal software installation behavior?
  context: This question uses a one-class SVM model trained exclusively on legitimate HKLM COM modification events (e.g., made by 'msiexec.exe', pointing to signed binaries). The model learns the boundary of "normal." Any new modification that falls outside this boundary is flagged as a potential privilege escalation attempt, as it doesn't resemble a typical, safe software installation.
  answer_sources:
  - Windows Event ID 4657
  - File metadata
  - Domain Controllers, Tier 0 Servers, Administrator Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new HKLM COM modification event:
        EXTRACT features (parent process, binary signature, etc.).
        INPUT features into pre-trained one-class SVM model.
      RETURN events that the model classifies as anomalies (outside the 'normal' boundary).
- question: Has a known high-risk HKLM COM object, often used in public exploits, been modified?
  context: Security researchers and attackers have identified specific COM objects that are vulnerable to hijacking for privilege escalation. This question involves maintaining a watchlist of these specific, high-risk CLSIDs. Any modification to one of these keys is a high-fidelity indicator of a known privilege escalation technique being attempted and should be treated as a high-severity alert.
  answer_sources:
  - Windows Event ID 4657
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN watchlist of high-risk CLSIDs.
      SEARCH Windows Event ID 4657 for modifications to "InProcServer32" or "LocalServer32" subkeys.
      WHERE the CLSID is in the high-risk watchlist.
      RETURN matching events as high-severity alerts.
- question: Was an HKLM COM key modified by an unusual process not typically associated with software installation, such as cmd.exe or powershell.exe?
  context: Legitimate modifications to HKLM COM keys are almost always performed by trusted installers like 'msiexec.exe' or 'setup.exe'. If a process like a command shell, a script interpreter, or a random executable running from a user profile modifies these keys, it is highly suspicious. This question aims to detect such anomalous actors performing sensitive registry changes.
  answer_sources:
  - Windows Event ID 4657
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE legitimate processes that modify HKLM COM keys (e.g., msiexec.exe, setup.exe).
      SEARCH Windows Event ID 4657 for HKLM COM modifications.
      WHERE the modifying process is NOT in the baseline of legitimate installers.
      RETURN matching events.
- question: Does a graph analysis model identify a modification to a high-risk HKLM COM key as an isolated, outlier event?
  context: This question uses graph analysis to distinguish between legitimate software installations and malicious modifications. Legitimate installers create a "community" of related process and registry events. A single, isolated write to a high-risk HKLM key by a non-installer process will not fit into any known good community, making it stand out as an anomalous outlier indicative of a targeted attack.
  answer_sources:
  - Windows Event ID 4657
  - Process creation logs
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL process-registry interactions as a graph.
      USE community detection to identify clusters of legitimate installation activity.
      FOR each new HKLM COM key modification:
        DETERMINE if it is an outlier that does not belong to a known good community.
      RETURN outlier events, especially those involving high-risk keys and non-installer processes.
- question: Did a process running at a Medium or Low integrity level successfully modify a protected HKLM COM key?
  context: HKLM registry keys are protected and should only be modifiable by processes running with High or System integrity. A successful write from a Medium or Low integrity process is a definitive indicator that a privilege escalation vulnerability has been successfully exploited. This question checks for this specific condition, which provides high-confidence evidence of a compromise.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each Event ID 4657 (HKLM COM modification):
        GET the Process ID.
        CORRELATE with Event ID 4688 for that Process ID to get token information.
        IF 'Mandatory Label' is 'Medium Integrity' (S-1-16-8192) or 'Low Integrity' (S-1-16-4096):
          RETURN as a high-confidence alert.
- question: Has a statistically impossible event occurred, where a Medium or Low integrity process wrote to an HKLM COM key?
  context: In a properly configured system, the frequency of a Medium or Low integrity process successfully writing to the HKLM hive is zero. This question frames the detection as the observation of a statistical impossibility. Finding even one such event is an extreme anomaly and a definitive sign of privilege escalation, bypassing standard Windows security controls.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for HKLM COM key modifications (Event ID 4657).
      CORRELATE with process creation event (Event ID 4688) to get integrity level.
      RETURN any event where the integrity level is 'Medium' or 'Low'. This is an alert by definition, as its normal frequency is zero.
- question: Following a confirmed privilege escalation via a low-integrity HKLM write, what was the adversary's immediate post-exploitation intent?
  context: Once a high-confidence privilege escalation event is detected (a low-integrity process writing to HKLM), the next question is "what did they do with it?" This question proposes using a model to automatically analyze the subsequent actions of the now-privileged process (e.g., command line arguments, network connections) to classify the adversary's intent, such as establishing C2 or performing local discovery, to help prioritize the incident response.
  answer_sources:
  - Windows Event ID 4657
  - Windows Event ID 4688
  - Command line logs
  - Network logs
  - All Windows Servers and Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON alert for a low-integrity HKLM write:
        COLLECT subsequent activity from the parent and any child processes (command lines, network connections).
        INPUT activity features into a classification model.
      RETURN the classified intent (e.g., 'C2', 'Discovery', 'Lateral Movement').
- question: Following an HKLM COM key modification, did a high-privilege process (e.g., services.exe) connect to an unapproved external IP address?
  context: After successfully hijacking an HKLM COM object, an adversary can execute code within a high-privilege process. A common next step is to establish a C2 channel. This question looks for this by correlating an HKLM COM modification with a subsequent network connection from a SYSTEM-level process to an external IP not on an explicit allowlist.
  answer_sources:
  - Windows Event ID 4657
  - Zeek conn.log
  - Tier 0 Servers, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for Event ID 4657 (HKLM COM modification).
      WITHIN 10 minutes on the same host, search Zeek conn.log.
      WHERE process is high-privilege (services.exe, lsass.exe) AND destination IP is external AND NOT on allowlist.
      RETURN correlated events.
- question: After an HKLM COM key was modified, did a high-privilege process connect to an extremely rare network destination for that server or process?
  context: High-privilege processes on critical servers usually have very predictable network behavior. This question leverages this fact by baselining their normal destinations. After a suspicious HKLM COM modification, a connection from one of these processes to a destination that is almost never seen (e.g., in the bottom 1% of rarity) is a strong signal of a compromised process being used for C2.
  answer_sources:
  - Windows Event ID 4657
  - Zeek conn.log
  - Tier 0 Servers, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE network destinations for high-privilege processes on critical servers.
      ON an HKLM COM modification alert for a host:
        MONITOR network traffic from high-privilege processes on that host.
        ALERT if a connection is made to a destination with very low prevalence (e.g., bottom 1%).
- question: Following an HKLM COM modification, did a high-privilege process begin exhibiting a new, periodic network beaconing pattern?
  context: Adversary C2 implants often communicate with a periodic "heartbeat" or beacon. If a COM hijack is used to inject such an implant into a SYSTEM-level process, the process's network traffic will change. This question uses a time-series model to detect the emergence of such a new, regular beaconing pattern (e.g., connections every 60 seconds) from a high-privilege process after a COM modification, which would be anomalous.
  answer_sources:
  - Windows Event ID 4657
  - Zeek conn.log
  - Tier 0 Servers, Domain Controllers, Network Egress Points
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each high-privilege process on critical servers:
        MODEL time-series of network connection patterns (frequency, bytes, ports).
      ON an HKLM COM modification alert:
        CONTINUE monitoring the process's network traffic.
        ALERT if the model detects an anomalous new pattern, such as periodic beaconing.