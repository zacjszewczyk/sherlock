name: T1623.001: Unix Shell
id: 5a9b8c7d-0e1f-4a2b-9c3d-6e8f7a6b5c4d
description: This playbook focuses on detecting adversaries executing unauthorized commands or scripts on mobile devices via a Unix shell. It addresses threats such as shell processes being spawned by unapproved applications, the use of high-risk command patterns indicative of payload execution (e.g., 'curl...|sh'), and anomalous superuser ('su') command executions on devices that should be non-rooted and compliant. The goal is to identify malicious activity by analyzing process creation events, command-line arguments, and device compliance state changes.
type: technique
related:
  - TA0041: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a shell process (like 'sh' or 'bash') been initiated by an application that is not on the approved allowlist for spawning such processes?
    context: This question aims to detect unauthorized command execution by identifying when applications, which are not explicitly permitted to do so, start a shell process. This could indicate that a legitimate application has been compromised or that a malicious application is attempting to execute commands on the device. Maintaining an allowlist of applications authorized to spawn shell processes is a critical baseline for this detection.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ApplicationInventory.csv
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH MTD process logs WHERE process_name IN ('sh', 'bash', 'zsh') AND parent_app_bundle_id NOT IN (UEM_allowlist) | ALERT high_severity
  - question: Is any application executing an anomalously high number of shell commands for a specific user compared to their historical baseline?
    context: This question focuses on detecting unusual behavior from otherwise legitimate applications. By establishing a baseline of normal shell execution frequency for each application per user, we can identify significant deviations that might suggest a change in the application's behavior, possibly due to compromise or malicious use. An execution count exceeding three standard deviations from the mean is a strong statistical indicator of an anomaly.
    answer_sources:
      - MTD ProcessEvents.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE baseline (mean, stddev) of shell executions per app/user over 30 days | SEARCH today's MTD process logs | COUNT shell executions per app/user | ALERT medium_severity if count > (mean + 3*stddev)
  - question: Can we use a machine learning model to predict whether a new shell execution event is malicious based on features from historical data?
    context: This question explores a proactive, machine learning-based approach to detection. By training a model on features of known benign and malicious shell execution events (like parent process, app signature, source, and user role), the system can learn to identify complex malicious patterns that rule-based detections might miss. Events scored with a high probability of being malicious are flagged for immediate investigation.
    answer_sources:
      - MTD ProcessEvents.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: TRAIN Random Forest model on labeled MTD logs (features: parent_process, app_signature, etc.) | DEPLOY model | FOR each new shell event, SCORE with model | ALERT high_severity if probability > 0.9
  - question: Are there shell commands being executed that contain high-risk patterns (e.g., downloading and executing scripts) and are also associated with network connections to known malicious destinations?
    context: This question seeks to identify classic "living-off-the-land" techniques where an attacker uses built-in tools like 'curl' and 'sh' to download and execute malicious payloads. The detection is strengthened by correlating the command execution with network logs (DNS, connection logs) to see if the device is communicating with an IP or domain listed in threat intelligence feeds, providing strong evidence of malicious activity.
    answer_sources:
      - MTD ProcessEvents.log
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH MTD logs for command_line MATCHES regex ('curl .*\\|.*sh', 'nc -e', 'base64 -d') | CORRELATE with Zeek logs on device_ip and timestamp to get destination_ip/domain | IF destination IN threat_intel_feed THEN ALERT high_severity
  - question: Are there any shell commands being executed with an unusually high level of complexity or randomness, potentially indicating obfuscation?
    context: This question uses information theory to detect obfuscated commands. Attackers often use complex, encoded, or randomized strings to hide their actions. By calculating the Shannon entropy (a measure of randomness) of command-line arguments and comparing it to a baseline, we can flag commands that are statistically unusual. A command with entropy in the 99th percentile is highly suspect and warrants investigation.
    answer_sources:
      - MTD ProcessEvents.log
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE baseline Shannon entropy distribution for command lines over 30 days | DEFINE threshold at 99th percentile | FOR each new command, CALCULATE entropy | IF entropy > threshold THEN ALERT medium_severity
  - question: Can a deep learning model be trained to recognize the syntax and structure of malicious shell commands, distinguishing them from benign ones?
    context: This question proposes using advanced deep learning models (like LSTMs or Transformers) that excel at understanding sequential data, such as command-line strings. By training on a large dataset of labeled commands, the model can learn the grammatical and structural nuances that differentiate malicious commands from normal administrative or application-related commands, providing a sophisticated layer of detection.
    answer_sources:
      - MTD ProcessEvents.log
      - Network Egress/Ingress points instrumented with Zeek sensors
      - Corporate DNS infrastructure
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: TRAIN LSTM/Transformer model on labeled command-line dataset | DEPLOY model | FOR each new command string, CLASSIFY with model | IF classification is 'malicious' with high confidence THEN ALERT
  - question: Has the superuser command ('su') been executed on a device that is reported as compliant and non-rooted by the management platform?
    context: This question targets a critical contradiction that strongly indicates a successful privilege escalation attack, possibly via a zero-day exploit. A device that the UEM/MDM platform believes is secure and non-rooted should never be able to execute the 'su' command. Detecting this event signifies a failure in the device's security posture and requires immediate, automated response, such as quarantining the device to prevent further compromise.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: ON MTD event where process_name = 'su' | TRIGGER SOAR playbook | QUERY UEM/MDM API for device_id | IF compliance_status = 'compliant' AND rooted_status = 'non-rooted' THEN ESCALATE and QUARANTINE device
  - question: Is there a sudden, statistically significant increase in the number of devices across the fleet executing the superuser ('su') command?
    context: This question shifts the focus from a single device to the entire mobile fleet to detect widespread attacks. A sudden spike in 'su' executions across multiple devices, measured as a significant deviation from the rolling average, could indicate a coordinated campaign leveraging a new exploit or vulnerability. This provides an early warning of a large-scale incident.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE 7-day rolling average and stddev of hourly unique device 'su' counts | ON an hourly basis, COUNT unique devices executing 'su' | IF current_count > (rolling_avg + 3*stddev) THEN ALERT high_severity_fleet_wide
  - question: After identifying one device with a malicious superuser execution, can we find other compromised devices by looking for similar post-exploitation behaviors?
    context: This question focuses on incident scoping and proactive threat hunting after an initial compromise is confirmed. By analyzing the behavior of a known-bad device (e.g., child processes, network connections, subsequent alerts), we can create a "post-compromise" behavioral profile. Using clustering algorithms like DBSCAN, we can then search the entire fleet for other devices that match this profile, allowing analysts to identify and contain other compromised assets that might have otherwise gone unnoticed.
    answer_sources:
      - MTD ProcessEvents.log
      - UEM ComplianceState.log
      - Zeek conn.log
      - Corporate Mobile Device Management (MDM) Platform
      - Mobile Threat Defense (MTD) Cloud Console
      - SIEM Log Aggregator
      - SOAR Platform
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR a confirmed malicious device, COLLECT post-'su' telemetry (child processes, network connections) | USE DBSCAN to cluster all devices based on this telemetry | INVESTIGATE devices in the same cluster as the known-malicious one