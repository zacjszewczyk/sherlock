name: "T1562.010: Downgrade Attack"
id: "4471e9a3-3561-4a37-b450-482a937c4406"
description: "This playbook helps investigate if an adversary is attempting to evade defenses by using downgraded system features. This can involve using vulnerable or outdated drivers/tools to bypass security controls, downgrading PowerShell to version 2 to evade logging, disabling security features like Windows Defender or HVCI via registry modifications, forcing network traffic to use deprecated cryptographic protocols, chaining multiple distinct defense evasion activities in a short time window, or using tools like bcdedit.exe to disable boot integrity checks."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are there any processes or services being created using a binary with a file hash known to belong to a vulnerable driver or tool?"
    context: "This question seeks to identify the use of 'Living Off The Land Drivers' (LOLDrivers), which are legitimate but vulnerable drivers that adversaries can abuse to execute malicious code with kernel-level privileges, effectively bypassing security controls like EDR. A match against a known vulnerable driver hash is a high-confidence indicator of a defense evasion attempt."
    answer_sources: "Windows Event ID 4688, Windows Event ID 7045. Focus on: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents."
    range: "last 90 days"
    queries:
      - "Symbolic: SEARCH process_creation_events OR service_creation_events | JOIN file_hash with vulnerable_driver_hash_feed | WHERE match_found"
  - question: "Are any newly created processes or services associated with an executable or driver hash that is statistically rare within the enterprise?"
    context: "Adversaries often introduce custom or rarely-used tools, including vulnerable drivers, which will have a low prevalence across the organization. This question uses statistical analysis to baseline 'normal' file hash occurrences and flag outliers. A hash that is extremely rare (e.g., in the bottom 5th percentile) could indicate a newly introduced malicious tool or a downgrade attempt using an uncommon component."
    answer_sources: "Windows Event ID 4688, Windows Event ID 7045. Focus on: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents."
    range: "last 90 days"
    queries:
      - "Statistical: SEARCH process_creation_events OR service_creation_events | CALCULATE prevalence of file_hash over last_90_days | WHERE prevalence < 5th_percentile"
  - question: "Can a machine learning model, based on features like command line, user context, and file hash rarity, identify process or service creation events that are likely malicious downgrade attempts?"
    context: "This question leverages machine learning to build a more nuanced detection than simple symbolic or statistical methods. By training a model on various features from known benign and malicious events, it can learn complex patterns associated with abuse of vulnerable drivers. A high 'maliciousness' score from the model provides a probabilistic indicator of a downgrade attack, even if the specific hash isn't on a known threat list."
    answer_sources: "Windows Event ID 4688, Windows Event ID 7045. Focus on: Domain Controllers, Critical Application Servers, Endpoint Workstations of privileged users, Systems with EDR/AV agents."
    range: "last 90 days"
    queries:
      - "Machine Learning: INPUT process_creation_event OR service_creation_event | EXTRACT features (command_line, parent_process, user, etc.) | APPLY classification_model | WHERE maliciousness_score > threshold"
  - question: "Is anyone explicitly launching PowerShell version 2 using command-line arguments?"
    context: "This question looks for a very specific and high-fidelity indicator of a PowerShell downgrade attack. Adversaries intentionally downgrade to PowerShell v2 because it lacks modern security features like Script Block Logging, Module Logging, and the Anti-Malware Scan Interface (AMSI). Finding an explicit call to v2 is a strong signal of malicious intent to evade defenses."
    answer_sources: "Windows Event ID 4688, Windows Event ID 400. Focus on: All Windows Endpoints and Servers."
    range: "last 90 days"
    queries:
      - "Symbolic: SEARCH process_creation_events WHERE process_name = 'powershell.exe' AND command_line CONTAINS ('-v 2' OR '-version 2')"
  - question: "Has a PowerShell v2 session been initiated on a host or by a user that has rarely or never used it before?"
    context: "This question uses historical data to baseline normal PowerShell version usage for each user and host. While some legacy systems might legitimately use PowerShell v2, a sudden switch to v2 by a user or on a modern system that has never used it before is a significant anomaly. This statistical approach helps find downgrade attempts in environments where v2 might have some limited, legitimate presence."
    answer_sources: "Windows Event ID 4688, Windows Event ID 400. Focus on: All Windows Endpoints and Servers."
    range: "last 90 days"
    queries:
      - "Statistical: SEARCH powershell_engine_start_events | BASELINE EngineVersion usage by user/host over 30 days | ALERT if current event is v2 AND historical v2 usage is rare/zero"
  - question: "Does the volume of PowerShell Script Block logging suddenly drop to zero immediately after a PowerShell v2 execution is detected?"
    context: "This question aims to detect the *effect* of a PowerShell downgrade. A successful downgrade to v2 will cause Script Block Logging (Event ID 4104) to cease. By creating a time-series forecast of the expected log volume for a host, we can detect a sudden, unexpected drop. Correlating this drop with a preceding PowerShell v2 execution (found via Event ID 4688) provides strong evidence of a successful downgrade attack intended to blind security monitoring."
    answer_sources: "Windows Event ID 4688, Windows Event ID 400. Focus on: All Windows Endpoints and Servers."
    range: "last 90 days"
    queries:
      - "Machine Learning: FORECAST volume of Event ID 4104 per host | DETECT negative anomaly (drop) | CORRELATE anomaly with preceding Event ID 4688 for powershell.exe v2 execution"
  - question: "Is a process modifying a critical registry key to disable a security feature like Windows Defender or Hypervisor-Enforced Code Integrity (HVCI)?"
    context: "This question targets direct attempts to disable built-in security controls by modifying the Windows Registry. Adversaries modify specific keys to turn off protections, making the system vulnerable. Monitoring a watchlist of these critical keys for changes to an insecure state provides a high-confidence alert for a defense evasion downgrade attack."
    answer_sources: "Windows Event ID 4657, Windows Event ID 4688. Focus on: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled."
    range: "last 90 days"
    queries:
      - "Symbolic: SEARCH registry_modification_events (Event ID 4657) | WHERE registry_key IN critical_security_keys_watchlist AND value = insecure_state"
  - question: "Is a statistically uncommon process modifying a security-related registry key?"
    context: "This question aims to identify anomalous processes that are disabling security features. While legitimate processes like system installers modify security registry keys during updates, it is highly unusual for a process like `powershell.exe` or `rundll32.exe` to do so. By baselining which processes normally perform these actions, we can flag modifications made by rare or unexpected processes as suspicious."
    answer_sources: "Windows Event ID 4657, Windows Event ID 4688. Focus on: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled."
    range: "last 90 days"
    queries:
      - "Statistical: SEARCH registry_modification_events (Event ID 4657) for security_keys | BASELINE modifying_process_name | ALERT if modifying_process_name is statistically rare"
  - question: "Does a machine learning model predict that a registry modification event is likely malicious based on its context?"
    context: "This question applies a machine learning classifier to registry modification events to determine their likelihood of being malicious. The model considers a combination of factors, such as the process making the change, the user account, and the time of day, to make a more intelligent decision than a simple rule. A high probability score for an event that modifies a security key provides a strong, context-aware signal of a downgrade attack."
    answer_sources: "Windows Event ID 4657, Windows Event ID 4688. Focus on: Domain Controllers, Hyper-V Hosts, and Windows 10/11 Endpoints with Virtualization-Based Security (VBS) enabled."
    range: "last 90 days"
    queries:
      - "Machine Learning: INPUT registry_modification_event | EXTRACT features (process_name, user, time_of_day, key_path) | APPLY classification_model | WHERE probability_score > threshold"
  - question: "Is any network traffic using deprecated cryptographic protocols like SSLv3/TLS 1.0/1.1, or is unencrypted HTTP traffic being sent over a typical HTTPS port?"
    context: "This question looks for evidence of network protocol downgrade attacks. Adversaries may force a connection to use a weak, outdated encryption standard to make it easier to decrypt traffic. Detecting the use of protocols like SSLv3 or TLS 1.0/1.1 is a direct indicator of this. Similarly, observing plain 'http' traffic on port 443 (which should be encrypted) suggests a successful downgrade or stripping of encryption."
    answer_sources: "Zeek conn.log, Zeek ssl.log. Focus on: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers."
    range: "last 90 days"
    queries:
      - "Symbolic: SEARCH zeek_ssl_logs WHERE version IN ('SSLv3', 'TLSv10', 'TLSv11') OR SEARCH zeek_conn_logs WHERE dest_port = 443 AND service = 'http'"
  - question: "Is there a statistically significant increase in the ratio of weak-to-strong TLS protocols for any internal server?"
    context: "This question aims to detect a subtle, targeted downgrade campaign against a specific server. While a small amount of weak TLS traffic might exist for legacy reasons, a sudden spike in its proportion is anomalous. By tracking the ratio of weak-to-strong protocols for each server and comparing it to its historical baseline, we can identify servers that may be under a sustained downgrade attack."
    answer_sources: "Zeek conn.log, Zeek ssl.log. Focus on: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers."
    range: "last 90 days"
    queries:
      - "Statistical: FOR each server | CALCULATE daily ratio of (weak_tls / strong_tls) | COMPARE to 30-day rolling average and standard deviation | ALERT if daily_ratio > (average + 3*std_dev)"
  - question: "Can an unsupervised machine learning model identify anomalous TLS connections that deviate from normal negotiation patterns?"
    context: "This question uses anomaly detection to find suspicious TLS sessions without relying on predefined rules. The model learns what 'normal' TLS handshakes look like in the environment based on features like cipher suites, TLS versions, and JA3/JA3S fingerprints. Connections that are identified as outliers are flagged as suspicious, potentially indicating a novel or sophisticated downgrade attack that doesn't trigger simple symbolic checks."
    answer_sources: "Zeek conn.log, Zeek ssl.log. Focus on: Network Egress Points, Internal Network Segments (East-West traffic), VPN Concentrators, Reverse Proxies and Load Balancers."
    range: "last 90 days"
    queries:
      - "Machine Learning: INPUT zeek_ssl_log_events | EXTRACT features (tls_version, cipher, ja3, etc.) | APPLY isolation_forest_model | WHERE anomaly_score is high"
  - question: "Has a single parent process spawned a sequence of distinct defense evasion activities within a short time window?"
    context: "This question seeks to identify a chain of related malicious activities, which is a strong indicator of an automated attack script. A single adversary tool or script will often perform multiple steps to disable defenses. Correlating distinct events like stopping a security service, modifying a registry key, and running an evasion tool back to a single parent process within a tight timeframe connects the dots and elevates the finding to a high-confidence attack sequence."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 7040. Focus on: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts."
    range: "last 90 days"
    queries:
      - "Symbolic: GROUP events by ParentProcessID over 5-min window | IF group contains (EventID 7040 AND EventID 4657 AND EventID 4688 for evasion_tool) THEN ALERT"
  - question: "Is a parent process, like PowerShell, executing an unusually diverse set of commands in a short period?"
    context: "This question uses information theory to detect complex malicious scripts. Benign scripts often involve repetitive commands (low entropy), while an attack script might execute a wide variety of different commands (high entropy). A spike in command entropy for a process like PowerShell is a statistical red flag for complex, non-interactive activity."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 7040. Focus on: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts."
    range: "last 90 days"
    queries:
      - "Statistical: FOR each parent_process over 10-min window | CALCULATE shannon_entropy of child_process_command_lines | COMPARE to historical baseline | ALERT if entropy > 98th_percentile"
  - question: "Does a sequence of system events on a host match a known malicious attack pattern identified by a sequence analysis model?"
    context: "This question applies advanced machine learning to recognize the 'grammar' of an attack. Sequence analysis models can learn the temporal relationships between different events. By training the model on event sequences from real attacks, it can learn to identify similar multi-stage attack chains in new data, providing a powerful method for detecting sophisticated, chained evasion techniques."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 7040. Focus on: All Windows Endpoints and Servers, Privileged Access Workstations (PAWs), Critical Service Hosts."
    range: "last 90 days"
    queries:
      - "Machine Learning: INPUT sequence of events (process, registry, service) for a host | APPLY LSTM_sequence_model | WHERE sequence_classification = 'suspicious'"
  - question: "Is a user or process using `bcdedit.exe` to disable boot integrity checks or `manage-bde.exe` to disable BitLocker?"
    context: "This question targets explicit commands used to disable fundamental platform security features. Using `bcdedit` to enable test signing or disable integrity checks allows the loading of unsigned drivers. Similarly, using `manage-bde` to disable BitLocker protectors undermines disk encryption. These commands are rarely used in normal operations and are high-fidelity indicators of a deliberate attempt to weaken system security."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 4663. Focus on: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints."
    range: "last 90 days"
    queries:
      - "Symbolic: SEARCH process_creation_events WHERE (process_name = 'bcdedit.exe' AND command_line CONTAINS ('testsigning on' OR 'nointegritychecks on')) OR (process_name = 'manage-bde.exe' AND command_line CONTAINS '-protectors -disable')"
  - question: "Are the `bcdedit.exe` or `manage-bde.exe` tools being run by a user or parent process that has never run them before?"
    context: "This question identifies anomalous usage of powerful system configuration tools. In most environments, only a specific set of administrators or system management tools should ever run `bcdedit.exe` or `manage-bde.exe`. By creating a baseline of legitimate users and parent processes, any execution outside of this baseline can be flagged as a statistical anomaly, indicating potential misuse by an adversary."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 4663. Focus on: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints."
    range: "last 90 days"
    queries:
      - "Statistical: SEARCH executions of 'bcdedit.exe' or 'manage-bde.exe' | BASELINE legitimate users and parent_processes over 60 days | ALERT if executing_user or parent_process is not in baseline"
  - question: "Does the execution of `bcdedit.exe`, based on its command line, user, and parent process, appear as an outlier when compared to normal administrative usage?"
    context: "This question uses an anomaly detection model (One-Class SVM) to find unusual executions of `bcdedit.exe`. The model is trained on known-good, legitimate executions to learn a profile of 'normal' behavior. Any new execution that deviates significantly from this learned profile is flagged as an outlier. This can detect novel malicious command-line variations or executions in a strange context that might be missed by static rules."
    answer_sources: "Windows Event ID 4688, Windows Event ID 4657, Windows Event ID 4663. Focus on: UEFI-based systems, Domain Controllers, and BitLocker-encrypted endpoints."
    range: "last 90 days"
    queries:
      - "Machine Learning: INPUT bcdedit.exe execution event | EXTRACT features (command_line, user, parent_process) | APPLY one_class_svm_model | WHERE event is flagged as outlier"