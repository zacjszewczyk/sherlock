name: "T1027.008: Stripped Payloads"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: |
  This playbook helps investigate whether an adversary is using stripped payloads to evade defenses. It focuses on detecting stripped payloads by analyzing file hashes against threat intelligence, examining static properties like symbol counts and PE headers for anomalies, checking for high entropy in code sections indicative of packing, monitoring post-execution behavior for unusual network activity or non-standard execution paths, and identifying system processes that may be masquerading as legitimate but whose binaries exhibit stripped characteristics.
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
investigative_questions:
  - question: "Are new executables on the network or endpoints matching known stripped malware payload hashes from threat intelligence?"
    context: |
      This question aims to identify stripped malware by comparing the SHA256 hashes of newly observed executables (from network traffic or process execution events) against a curated list of known malicious indicators. A match provides a high-confidence signal that a known threat is present in the environment, bypassing defenses that might rely on other signatures.
    answer_sources:
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "Network egress/ingress points"
      - "User workstations"
      - "Critical application servers"
      - "File shares"
      - "Email gateways"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_executable_hash IN (network_traffic OR process_execution_events), CHECK if new_executable_hash EXISTS in threat_intel_feed_of_stripped_malware. IF match, ALERT."
  - question: "Is there an anomalous increase in the number of unique, previously unseen executable hashes within a given time window?"
    context: |
      This question seeks to detect potential malware campaigns, including those using stripped payloads, by identifying statistical anomalies in the volume of new executables. A sudden spike in new, unique files, exceeding a calculated baseline (e.g., 3 standard deviations above a 30-day rolling average), can indicate a mass deployment of polymorphic or previously unknown malware.
    answer_sources:
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "Network egress/ingress points"
      - "User workstations"
      - "Critical application servers"
      - "File shares"
      - "Email gateways"
    range: "last 90 days"
    queries:
      - "pseudocode: COUNT unique_hashes per hour. CALCULATE 30-day rolling_average and standard_deviation. IF current_hour_count > (rolling_average + 3 * standard_deviation), ALERT."
  - question: "Can a machine learning model classify new executables as malicious based on their metadata?"
    context: |
      This question leverages a supervised machine learning model (e.g., Random Forest) to proactively classify executables. By analyzing a combination of features like file size, MIME type, and IP/hash reputation, the model can identify potentially malicious files, including stripped payloads, that may not match existing signatures but share characteristics with previously seen malware. A high-confidence malicious classification warrants immediate investigation.
    answer_sources:
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "Network egress/ingress points"
      - "User workstations"
      - "Critical application servers"
      - "File shares"
      - "Email gateways"
    range: "last 90 days"
    queries:
      - "pseudocode: EXTRACT features (size, type, reputation) from new_executable. INPUT features into trained_classification_model. IF classification is 'malicious' AND confidence > 0.8, ALERT."
  - question: "Are new executables being observed that lack common PE resource sections, such as a 'VersionInfo' resource?"
    context: |
      This question focuses on identifying stripped payloads by checking for the absence of standard PE file structures. Legitimate software typically includes a .rsrc section with version information. The absence of this resource is a strong indicator that the file has been intentionally stripped to reduce its size and evade signature-based detection, a common tactic for malware.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "User workstations"
      - "Application servers"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_executable, SUBMIT to static_analysis_tool. IF tool_report shows '.rsrc section missing' OR 'VersionInfo resource is zero-sized', ALERT."
  - question: "Do any new executables exhibit an anomalously low number of imported/exported functions or a low density of printable strings compared to legitimate software?"
    context: |
      This question uses statistical analysis to find outliers that may be stripped payloads. By comparing the symbol count and string density of a new executable against a baseline for similar legitimate files, we can spot anomalies. A file falling in the bottom 5th percentile for these metrics is suspicious, as stripping often removes non-essential symbols and strings to obfuscate functionality and reduce footprint.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "User workstations"
      - "Application servers"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_executable, EXTRACT symbol_count and string_density. COMPARE to baseline for similar file_type. IF values are < 5th_percentile of baseline, ALERT."
  - question: "Can a clustering algorithm identify new executables as outliers based on their static file properties?"
    context: |
      This question applies unsupervised machine learning to detect stripped or unusual executables. A clustering algorithm (e.g., DBSCAN) is trained on features from known-good software to define 'normal' clusters. New files that do not fit into any existing cluster are flagged as outliers, suggesting they have an unusual structure that may be indicative of stripping or other malicious modifications.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "User workstations"
      - "Application servers"
      - "Network file shares"
    range: "last 90 days"
    queries:
      - "pseudocode: EXTRACT feature_vector (section_count, symbol_count, etc.) from new_executable. INPUT vector into trained_clustering_model. IF model classifies as 'outlier', ALERT."
  - question: "Are there any executables with high entropy in the code section and a missing or empty resource section?"
    context: |
      This question seeks to identify packed and stripped malware. High Shannon entropy (e.g., > 7.2) in a code section (.text) often indicates that the code is packed or encrypted to evade static analysis. When this is combined with a missing or zero-size resource section (.rsrc), it strongly suggests an adversary has packed their payload and stripped non-essential data to further hinder analysis and detection.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "Network egress/ingress points"
      - "User workstations"
      - "Endpoint Detection and Response (EDR) platforms"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_executable, ANALYZE PE sections. IF entropy(.text) > 7.2 AND (.rsrc section is missing OR size is 0), ALERT."
  - question: "Are there executables where the code section entropy is a statistical outlier (high) and the resource section size is also an outlier (low)?"
    context: |
      This question uses statistical outlier detection to find files that are likely packed and stripped. By establishing a baseline for entropy values and section sizes from known-good files, we can use a method like the Interquartile Range (IQR) to identify anomalies. A file with unusually high .text section entropy and an unusually small .rsrc section is a strong candidate for being malicious.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "Network egress/ingress points"
      - "User workstations"
      - "Endpoint Detection and Response (EDR) platforms"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new_executable, CALCULATE entropy and size for sections. IF .text_entropy is upper_outlier (IQR method) AND .rsrc_size is lower_outlier (IQR method), ALERT."
  - question: "Can an anomaly detection model, trained on PE section entropy vectors, identify executables with abnormal entropy profiles?"
    context: |
      This question uses an autoencoder or similar anomaly detection model to learn the normal patterns of entropy across PE sections in legitimate software. When a new executable is processed, the model attempts to reconstruct its entropy vector. A high reconstruction error indicates the file's entropy profile is abnormal and does not match known-good patterns, suggesting it may be packed, stripped, or otherwise malicious.
    answer_sources:
      - "Static analysis tool output"
      - "Zeek file.log"
      - "Windows Event ID 4688"
      - "File sandboxes"
      - "Network egress/ingress points"
      - "User workstations"
      - "Endpoint Detection and Response (EDR) platforms"
    range: "last 90 days"
    queries:
      - "pseudocode: EXTRACT entropy_vector from new_executable. INPUT vector into trained_autoencoder_model. IF reconstruction_error > threshold, ALERT."
  - question: "Is a process from a previously identified 'stripped' executable making network connections to known malicious IP addresses shortly after execution?"
    context: |
      This question aims to confirm malicious activity by correlating endpoint and network data. When a process is launched from an executable already flagged as potentially stripped, any subsequent network connection to an IP on a threat intelligence blocklist within a short time window (e.g., 60 seconds) serves as strong confirmation of malicious C2 communication.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User workstations"
      - "Domain Controllers"
      - "Network egress/ingress points"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - "pseudocode: ON process_creation from 'stripped_executable', MONITOR for network_connections for 60s. IF destination_ip is ON threat_intel_blocklist, ALERT."
  - question: "Are processes launched from stripped executables exhibiting highly regular, machine-like network beaconing behavior?"
    context: |
      This question seeks to identify C2 communications by analyzing the timing and size of network traffic. Automated malware often beacons out to its C2 server at very regular intervals. By calculating the standard deviation of the time between connections, a very low value (e.g., < 1 second) indicates a lack of human-like randomness and points to automated C2 activity.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User workstations"
      - "Domain Controllers"
      - "Network egress/ingress points"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR process from 'stripped_executable', ANALYZE outbound connections in 10-min window. CALCULATE std_dev of inter-arrival_time. IF std_dev < 1_second, ALERT."
  - question: "Can a time series forecasting model predict the network traffic patterns of a process launched from a stripped executable, suggesting automated behavior?"
    context: |
      This question uses a forecasting model like ARIMA to detect automated C2 traffic. Human-generated traffic is typically bursty and unpredictable, while automated beaconing is often regular and predictable. If a model can predict the future traffic (bytes, packets) of a process with a consistently low error rate, it implies the behavior is automated and non-human, a hallmark of C2 communication.
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "User workstations"
      - "Domain Controllers"
      - "Network egress/ingress points"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - "pseudocode: FOR process from 'stripped_executable', CAPTURE outbound traffic time_series. APPLY ARIMA model. IF forecast_error is consistently low, ALERT."
  - question: "Is a process masquerading as a critical system binary (e.g., svchost.exe) running from a non-standard path or having a hash that doesn't match a known-good manifest?"
    context: |
      This question seeks to detect a common persistence and defense evasion technique where malware mimics a legitimate system process. By checking every creation event for critical process names, we can alert if the executable path is not the expected C:\Windows\System32\ or if its hash does not match an approved list for the OS. This is a high-fidelity indicator of masquerading.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User workstations"
      - "Critical application servers"
      - "System Registry"
    range: "last 90 days"
    queries:
      - "pseudocode: ON process_creation for 'svchost.exe', etc. IF process_path is NOT 'C:\\Windows\\System32\\' OR file_hash is NOT in known_good_manifest, ALERT."
  - question: "Is a legitimate system process (e.g., svchost.exe) being spawned by an unusual parent process?"
    context: |
      This question identifies masquerading by analyzing parent-child process relationships. Legitimate system processes have predictable parents (e.g., services.exe is the parent of svchost.exe). If a statistically rare parent, like explorer.exe, is observed spawning svchost.exe, it is a significant anomaly that could indicate a user-level process has been compromised and is launching a malicious, masquerading payload.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User workstations"
      - "Critical application servers"
      - "System Registry"
    range: "last 90 days"
    queries:
      - "pseudocode: BASELINE parent-child relationships for system_processes. MONITOR for new relationships. IF frequency of new_parent for 'svchost.exe' is a statistical_outlier (e.g., bottom 1%), ALERT."
  - question: "Can a one-class SVM model detect anomalous executions of system processes that indicate masquerading?"
    context: |
      This question uses a one-class classifier to build a model of 'normal' for system process executions, based on features like path, parent, and command-line arguments. This model creates a boundary around legitimate activity. Any new process execution that falls outside this boundary is flagged as an anomaly, providing a powerful way to detect sophisticated masquerading attempts that might evade simpler rule-based checks.
    answer_sources:
      - "Windows Event ID 4688"
      - "Domain Controllers"
      - "User workstations"
      - "Critical application servers"
      - "System Registry"
    range: "last 90 days"
    queries:
      - "pseudocode: EXTRACT features (path, parent, args) for system_process execution. INPUT into trained_one-class_SVM_model. IF model classifies as 'anomaly', ALERT."