name: "T1516: Input Injection"
id: "5a9b8c7d-0e1f-4a2b-9d6c-3e7f8a9b0c1d"
description: |
  This playbook helps identify adversaries using input injection on mobile devices to evade defenses or cause impact. The primary goals are to detect the abuse of accessibility services to perform unauthorized actions and the programmatic interaction with sensitive applications (e.g., financial, SSO) to steal data or funds. The playbook focuses on correlating the 'BIND_ACCESSIBILITY_SERVICE' permission grant on a mobile device with subsequent suspicious network activity. This includes connections to known C2 infrastructure, statistically anomalous traffic patterns (e.g., high port entropy, automated beaconing), or unusually large data uploads. It also identifies anomalous interactions with sensitive services, such as the use of non-whitelisted TLS/HTTP parameters, highly periodic connections, and DNS tunneling indicators.
type: "technique"
related:
  - "TA0030: Defense Evasion"
  - "TA0034: Impact"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "After a 'BIND_ACCESSIBILITY_SERVICE' permission is granted, is the device communicating with known mobile malware command-and-control (C2) infrastructure?"
    context: |
      This question aims to detect the immediate weaponization of a newly granted high-risk permission. By correlating the Mobile Device Management (MDM) event with network logs in a tight time window (15 minutes), an analyst can determine if the permission was granted to a malicious application that is now 'calling home' to C2 infrastructure. The query checks network connections against a threat intelligence feed of known malicious domains, IPs, and TLS fingerprints (JA3/JA3S), and also inspects for unusual certificate details, providing a high-confidence signal of compromise.
    answer_sources:
      - "MDM Logs"
      - "Zeek conn.log"
      - "Zeek notice.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Zeek x509.log"
      - "Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices."
    range: "15 minutes after permission grant"
    queries:
      - search_technology: "Pseudocode"
        query: |
          ON MDM_event WHERE permission = 'BIND_ACCESSIBILITY_SERVICE':
            device_id = event.device_id
            event_time = event.timestamp
            device_ip = LOOKUP IP from DHCP/VPN logs for device_id at event_time
          
            SEARCH Zeek logs (dns.log, ssl.log, conn.log)
            WHERE source_ip = device_ip
            AND timestamp BETWEEN event_time AND event_time + 15 minutes
          
            JOIN with Threat_Intelligence_Feed
            ON (Zeek.destination_ip = TI.ip OR Zeek.fqdn = TI.domain OR Zeek.ja3/ja3s = TI.hash)
          
            IF match:
              SEARCH x509.log for non-standard issuers/subjects for the connection
              ALERT high_severity
  - question: "Following an accessibility service permission grant, does the device's network traffic exhibit statistically anomalous patterns indicative of automated activity?"
    context: |
      This question focuses on detecting behavioral anomalies that signal malicious automation, even without matching a known threat signature. It looks for three distinct indicators within a 15-minute window after the permission grant: (1) High Shannon entropy of destination ports, suggesting scanning activity. (2) Very low deviation in connection inter-arrival times, indicating robotic beaconing. (3) An unusually high ratio of DNS TXT queries, a common channel for covert communication. Comparing these metrics against a device's own 30-day baseline helps to identify significant deviations from normal behavior.
    answer_sources:
      - "MDM Logs"
      - "Zeek conn.log"
      - "Zeek notice.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Zeek x509.log"
      - "Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices."
    range: "15 minutes after permission grant"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each device with a recent 'BIND_ACCESSIBILITY_SERVICE' grant:
            // For the 15-min window after grant
            port_entropy = CALCULATE Shannon_entropy(destination_ports) from conn.log
            IF port_entropy > 98th_percentile(device_30_day_baseline):
              ALERT
          
            inter_arrival_std_dev = CALCULATE std_dev(inter_arrival_times) from conn.log
            IF inter_arrival_std_dev < 1 second:
              ALERT
          
            txt_query_ratio = COUNT(TXT queries) / COUNT(all queries) from dns.log
            IF txt_query_ratio > 99th_percentile(device_30_day_baseline):
              ALERT
  - question: "Can an anomaly detection model identify suspicious network sessions from the device shortly after an accessibility service permission is granted?"
    context: |
      This question proposes using a one-class anomaly detection model, such as an Isolation Forest, to find novel or subtle malicious network activity. The model is trained on the device's normal network behavior over the past 30 days, learning its unique patterns across features like session duration, bytes transferred, protocol, and TLS fingerprints. Any new session occurring within 15 minutes of a permission grant that the model flags as a high-confidence anomaly is surfaced for analyst review. This machine learning approach can catch threats that evade rule-based and statistical methods.
    answer_sources:
      - "MDM Logs"
      - "Zeek conn.log"
      - "Zeek notice.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Zeek x509.log"
      - "Corporate Wi-Fi network gateways, VPN terminators, Mobile Device Management (MDM) platform, and DNS resolvers used by mobile devices."
    range: "15 minutes after permission grant (detection), 30 days (model training)"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Model Training (offline, periodic)
          baseline_data = GET Zeek logs for device over last 30 days
          features = EXTRACT (duration, bytes, protocol, ja3, etc.) from baseline_data
          model = TRAIN IsolationForest(features)
          
          // Real-time Detection
          ON 'BIND_ACCESSIBILITY_SERVICE' grant event:
            recent_sessions = GET Zeek logs for device in next 15 minutes
            FOR each session in recent_sessions:
              session_features = EXTRACT (duration, bytes, protocol, ja3, etc.)
              anomaly_score = model.PREDICT(session_features)
              IF anomaly_score is high_confidence_anomaly:
                ALERT for analyst review
  - question: "Is a device connecting to sensitive services (e.g., financial, SSO) using non-standard or non-whitelisted client parameters?"
    context: |
      This question aims to detect impersonation or modification of legitimate applications used to access sensitive services. It requires maintaining a curated whitelist of known-good TLS fingerprints (JA3/JA3S) and HTTP User-Agent strings for approved mobile apps. By continuously monitoring network traffic to these sensitive FQDNs, any connection that uses a parameter not on the whitelist is immediately flagged. This is a highly effective method for detecting custom malware, repackaged apps, or interception tools attempting to interact with high-value corporate or financial systems.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Zeek dns.log"
      - "Zeek http.log"
      - "MDM Logs"
      - "Network segments for corporate and guest Wi-Fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Whitelist Management (offline)
          WHITELIST = {
            'sso.corp.com': {'ja3_hashes': [...], 'user_agents': [...]},
            'bank.com': {'ja3_hashes': [...], 'user_agents': [...]}
          }
          
          // Real-time Monitoring
          SEARCH Zeek ssl.log and http.log
          WHERE destination_fqdn IN WHITELIST.keys()
          
          FOR each connection:
            IF connection.ja3_hash NOT IN WHITELIST[destination_fqdn].ja3_hashes
            OR connection.user_agent NOT IN WHITELIST[destination_fqdn].user_agents:
              ALERT
  - question: "Are there sessions to sensitive services exhibiting anomalous data volumes, highly periodic timing, or DNS tunneling characteristics?"
    context: |
      This question looks for behavioral red flags in connections to sensitive services that indicate automated, non-human interaction. It combines three checks: (1) Unusually large outbound data volume for a session, which could be data exfiltration, compared against a user's historical baseline for that service. (2) Highly regular, clockwork-like connection timing, which points to automated scripts. (3) Abnormally long DNS TXT record queries, a known technique for covert C2 or exfiltration. Finding any of these indicators suggests that an automated process, not a user, is interacting with a sensitive application.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Zeek dns.log"
      - "Zeek http.log"
      - "MDM Logs"
      - "Network segments for corporate and guest Wi-Fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each session to a sensitive_service by a user:
            // Data volume check
            baseline_volume = 99.5th_percentile(outbound_bytes for user-service pair over last 30 days)
            IF session.outbound_bytes > baseline_volume:
              ALERT
          
            // Periodicity check (over 1-hour windows)
            connection_times = GET start_times for user-service pair in last hour
            autocorrelation = CALCULATE autocorrelation(connection_times)
            IF autocorrelation > 0.8:
              ALERT
          
            // DNS TXT query check
            baseline_txt_length = avg(TXT_query_length) + 3 * std_dev(TXT_query_length) for device
            IF session.dns_txt_query_length > baseline_txt_length:
              ALERT
  - question: "Can a supervised machine learning model classify network sessions to sensitive services as benign or malicious/automated?"
    context: |
      This question proposes using a supervised classification model, such as a Random Forest, to distinguish between legitimate user traffic and malicious automation. The model is trained on a labeled dataset containing examples of 'benign' baseline traffic and 'malicious' traffic from malware sandboxes or synthetic generation. By learning the distinct characteristics of both classes from features like session duration, byte counts, and protocol details, the model can classify new, unseen sessions with a high degree of accuracy. A session classified as 'malicious' with high confidence should trigger an immediate, high-severity alert.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek ssl.log"
      - "Zeek dns.log"
      - "Zeek http.log"
      - "MDM Logs"
      - "Network segments for corporate and guest Wi-Fi, cloud service provider network ranges, known financial service IP blocks, and internet gateways."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Model Training (offline, periodic)
          benign_data = LABEL baseline traffic as 'benign'
          malicious_data = GET sandbox/synthetic traffic and LABEL as 'malicious'
          training_data = COMBINE(benign_data, malicious_data)
          features = EXTRACT (duration, bytes, protocol, ja3, etc.) from training_data
          model = TRAIN RandomForestClassifier(features, labels)
          
          // Real-time Detection
          FOR each new session to a sensitive service:
            session_features = EXTRACT (duration, bytes, protocol, ja3, etc.)
            prediction, confidence = model.PREDICT(session_features)
            IF prediction == 'malicious' AND confidence > 0.9:
              ALERT high_severity