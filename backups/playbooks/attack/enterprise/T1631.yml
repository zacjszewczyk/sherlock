name: T1631: Process Injection
id: 5c8f8b0a-9d6e-4a1b-8c5d-3e2f1a0b9c4d
description: This playbook focuses on detecting adversarial attempts to elevate privileges or evade defenses on mobile devices through process injection. This involves an adversary running arbitrary code in the address space of a separate live process. Evidence of this technique includes a mobile OS process loading an unsigned or non-allowlisted dynamic library, calling sensitive debugging and memory manipulation APIs (e.g., `ptrace` on Android, `mach_vm_write` on iOS) when the calling process is not an authorized tool, or a trusted application exhibiting anomalous resource usage (CPU/memory) and network behavior (connections to new or suspicious FQDNs/IPs) without a legitimate cause like an update. The goal is to identify these activities by analyzing process activity, library loads, system calls, resource consumption, and network traffic from managed mobile devices.
type: technique
related:
  - TA0029: Privilege Escalation
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: How can we detect process injection attempts that use sensitive APIs like `ptrace` or `mach_vm_write` on mobile devices?
    context: This question aims to identify the direct use of sensitive system functions commonly abused for process injection. By monitoring for calls to APIs like `ptrace`, `dlopen`, and `mach_vm_write` from unexpected processes, we can catch blatant injection attempts. The key is to maintain an allowlist of legitimate processes (e.g., developer tools, debuggers) that are authorized to use these APIs to minimize false positives. Correlating a suspicious API call with network traffic to a known-malicious destination provides strong evidence of a compromise and warrants immediate escalation.
    answer_sources:
      - MDM/EDR Process Activity Logs
      - Android logcat
      - iOS Unified Logs
      - Zeek dns.log
      - Zeek conn.log
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH mobile EDR logs for sensitive API calls (`ptrace`, `dlopen` with non-system path, `mach_vm_write`)

          WHERE calling process is NOT IN (developer tools allowlist)

          AND calling process is NOT signed with (authorized developer certificates)

          JOIN device IP and timestamp (+/- 1 min) with network logs (Zeek conn.log, dns.log)

          WHERE destination IP or domain is IN (threat intelligence feed)

          TRIGGER alert
  - question: Can we identify process injection by detecting the loading of rare or anomalous dynamic libraries in mobile applications?
    context: This question addresses a more subtle form of process injection where a malicious library is loaded by a legitimate application. The premise is that legitimate applications have a predictable set of libraries they load. By baselining normal library loads across the entire device fleet, we can spot when an application loads a library that is rarely or never seen. This 'rare library' event is a significant anomaly. To increase confidence and prioritize alerts, this anomaly is correlated with another suspicious signal from the same device: a DNS request for a domain name with high entropy (randomness), a common characteristic of domains generated by malware algorithms. The formula used is $$ H(X) = -\sum_{i=1}^{n} P(x_i) \log_2 P(x_i) $$.
    answer_sources:
      - MDM/EDR Process Activity Logs
      - Zeek dns.log
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          // Baseline phase

          FOR each mobile app:

            BUILD allowlist and calculate prevalence of all dynamic libraries from EDR logs over 30 days.

          // Real-time detection phase

          MONITOR EDR library load events.

          IF library-application pair prevalence < 1%:

            FLAG as 'rare library' event.

          CONCURRENTLY, for each device:

            CALCULATE Shannon entropy of DNS queries from Zeek dns.log.

          IF 'rare library' event occurs within 2 minutes of a high-entropy DNS request (99th percentile of 30-day baseline):

            TRIGGER high-priority alert.
  - question: Is it possible to detect process injection by modeling normal system call sequences and identifying deviations?
    context: This question explores a behavioral approach to detecting process injection, particularly for high-risk applications. The normal operation of an application can be represented as a sequence of system calls. By training a machine learning model, such as an LSTM autoencoder, on vast amounts of normal sequences, the model learns to 'reconstruct' them with low error. When a process is injected with malicious code, its system call sequence will deviate from normal, causing the model to produce a high reconstruction error. This flags the process as anomalous. To confirm malicious intent, this process anomaly is then correlated with a network anomaly, such as the device connecting to an IP address it has never communicated with before.
    answer_sources:
      - MDM/EDR Process Activity Logs
      - Zeek conn.log
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          // Training phase

          FOR high-risk apps:

            TRAIN LSTM autoencoder on historical system call sequences from EDR logs.

          // Real-time detection phase

          FOR live system call sequences:

            CALCULATE reconstruction error using the trained model.

          IF reconstruction error > 99.9th percentile threshold:

            FLAG as anomalous sequence.

          CONCURRENTLY, monitor Zeek conn.log for newly observed IPs (not seen in last 30 days).

          IF anomalous sequence occurs within 5 minutes of connection to a new IP:

            TRIGGER alert.
  - question: How can we detect if a trusted mobile application process is compromised and communicating with malicious infrastructure?
    context: This question focuses on identifying when a legitimate, trusted application (like a web browser) has been hijacked for malicious purposes. The application itself may appear normal, but its network communications betray the compromise. This detection strategy involves creating rules that join process information with network logs. An alert is triggered if a trusted application is observed communicating with a destination on a threat intelligence blocklist, using a TLS fingerprint (JA3/JA3S) known to be associated with malware, or presenting an HTTP User-Agent string that doesn't match the known, legitimate string for that application and OS version.
    answer_sources:
      - MDM/EDR Process Activity Logs
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          SEARCH MDM/EDR logs for trusted app processes (e.g., `com.android.chrome`, `com.apple.mobilesafari`).

          JOIN with Zeek network logs (conn, dns, ssl, http) on device IP.

          TRIGGER alert IF:

            destination IP/domain is IN (threat intelligence blocklist)

            OR JA3/JA3S hash is IN (known malicious fingerprints)

            OR HTTP User-Agent does NOT MATCH (known good User-Agent for app/OS).
  - question: Can anomalous resource usage combined with unusual network traffic patterns indicate a compromised application?
    context: Malicious code injected into a legitimate process often leads to abnormal resource consumption. This question outlines a method to detect this by first establishing a baseline of normal CPU and memory usage for each application on each device. A sustained spike above this baseline (e.g., exceeding the 95th percentile for over five minutes) generates a medium-severity event. To verify if this is malicious, the event triggers a secondary analysis of the device's network traffic. An unusually high ratio of outgoing to incoming data ($$ orig_bytes / resp_bytes $$), which could indicate data exfiltration, would escalate the event to a high-severity alert for immediate investigation.
    answer_sources:
      - MDM Performance Logs (CPU/Memory)
      - Zeek conn.log
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi--Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          // Baseline phase

          FOR each device-application pair:

            CALCULATE 30-day rolling 95th percentile for CPU and Memory from MDM logs.

          // Real-time detection phase

          IF app's CPU and Memory > 95th percentile for 5+ minutes:

            GENERATE medium-severity event.

            ANALYZE concurrent Zeek conn.log for the device.

            CALCULATE outgoing/incoming byte ratio.

          IF byte ratio > 99th percentile of its 30-day baseline:

            ESCALATE to high-severity alert.
  - question: Can we use unsupervised machine learning to identify anomalous network connections that, when correlated with resource spikes, indicate malicious activity?
    context: This question proposes using unsupervised machine learning to find the 'unknown unknowns' in network traffic. By training a clustering algorithm like DBSCAN on features of normal network connections (port, protocol, duration, bytes, ASN), we can create a model of what constitutes 'normal' behavior for a device. In real-time, any new connection that does not fit into a known cluster is flagged as a noise point, or an outlier. While a single network outlier might not be malicious, correlating it with another sign of compromise, such as a concurrent high resource consumption anomaly from the previous method, creates a high-fidelity signal that a device is likely compromised.
    answer_sources:
      - Zeek conn.log
      - MDM Performance Logs (CPU/Memory)
      - Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.
    range: last 90 days
    queries:
      - pseudocode: >-
          // Training phase

          FOR each device:

            TRAIN DBSCAN model on feature vectors from 30-day baseline of Zeek conn.log.

          // Real-time detection phase

          CLASSIFY new network connections using the trained model.

          IF connection is flagged as a noise point (outlier):

            CHECK for concurrent high resource consumption anomaly.

          IF both conditions are met:

            GENERATE high-severity alert.