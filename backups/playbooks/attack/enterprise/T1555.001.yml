name: T1555.001: Keychain
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: >
  This playbook helps investigate whether an adversary has accessed or exfiltrated credentials from macOS Keychains, which could lead to unauthorized network access. It focuses on detecting signs of keychain theft, such as the execution of known enumeration malware (e.g., KeySteal), the use of the 'security' command-line utility for credential dumping, and anomalous applications making API calls to keychain data. The playbook also extends to identifying subsequent suspicious activities, including anomalous network authentications from unexpected locations for macOS user accounts and the use of lateral movement tools on Windows hosts following such a logon, indicating that stolen credentials are being actively used.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Have any known keychain theft tools been executed on macOS endpoints?
    context: >
      This question aims to find direct evidence of compromise by looking for the execution of tools specifically designed to steal keychain credentials. Matching process execution events against a threat intelligence feed of known malicious file hashes or process names is a high-fidelity way to detect this activity.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events
      - Sysmon for macOS Event ID 1
      - Antivirus/EDR detection logs
      - Applies to: All corporate macOS endpoints, developer workstations
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          JOIN process_events WITH threat_intel_feed ON process_hash OR process_name
          WHERE event_type = 'process_execution'
          AND (process_hash IN threat_intel_feed.hashes OR process_name IN threat_intel_feed.names)
  - question: Have any rare or unknown processes accessed keychain files on macOS endpoints?
    context: >
      Adversaries may use novel or custom tools not yet in threat intelligence feeds. This question identifies such tools by flagging processes that are not on an allowlist, are statistically rare in the environment (prevalence < 1%), and interact with sensitive keychain database files. This helps uncover emerging threats.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events
      - Sysmon for macOS Event ID 1
      - Antivirus/EDR detection logs
      - Applies to: All corporate macOS endpoints, developer workstations
    range: last 90 days
    queries:
      - technology: SIEM / Data Analytics
        query: >
          SEARCH process_events WHERE process NOT IN allowlist AND accesses_file('~/Library/Keychains/login.keychain-db')
          | STATS count(process_hash) as prevalence
          | WHERE prevalence < 1%
  - question: Can we predictively identify malicious process executions likely related to keychain theft using machine learning?
    context: >
      This question leverages a machine learning model to proactively identify malicious processes that may not be caught by symbolic or simple statistical methods. By analyzing a combination of features like parent process, file path, and code signature, the model can score the likelihood of a process being malicious, allowing for automated flagging of suspicious activity that might otherwise be missed.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events
      - Sysmon for macOS Event ID 1
      - Antivirus/EDR detection logs
      - Applies to: All corporate macOS endpoints, developer workstations
    range: last 90 days
    queries:
      - technology: Machine Learning Model
        query: >
          SCORE process_events WITH classification_model(features=[parent_process, file_path, signature_status, entropy])
          | FILTER score > high_probability_threshold
  - question: Has the 'security' command-line utility been used to dump keychain credentials from an unusual parent process?
    context: >
      The 'security' utility is a legitimate macOS tool, but it can be abused by adversaries to dump credentials. This question focuses on identifying this abuse by looking for specific credential-dumping commands (`dump-keychain`, etc.) spawned by unexpected parent processes (like a web browser), which is a strong indicator of compromise.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events with command-line arguments
      - Sysmon for macOS Event ID 1
      - Applies to: All corporate macOS endpoints, particularly those of privileged users
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          SEARCH process_events WHERE process_name = 'security'
          AND command_line REGEX 'dump-keychain|find-generic-password|find-internet-password'
          AND parent_process NOT IN [Terminal.app, iTerm2.app, ...]
  - question: Is there an anomalous spike in the usage of 'security' credential dumping commands on any single host?
    context: >
      Even legitimate use of the 'security' command for credential access is typically infrequent. This question aims to detect a sudden burst of activity on a single host, which could indicate an adversary or a malicious script attempting to enumerate multiple credentials. It compares current hourly activity against a 30-day historical baseline for that specific host to spot deviations.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events with command-line arguments
      - Sysmon for macOS Event ID 1
      - Applies to: All corporate macOS endpoints, particularly those of privileged users
    range: last 90 days
    queries:
      - technology: SIEM / Anomaly Detection
        query: >
          SEARCH process_events WHERE process_name = 'security' AND command_line REGEX '...'
          | TIME_BUCKET 1h | COMPARE count WITH 30d_baseline
          | ALERT IF count > 99th_percentile
  - question: Has there been an anomalous, fleet-wide increase in 'security dump-keychain' commands that could indicate a widespread campaign?
    context: >
      While single-host anomalies are important, a coordinated increase in credential dumping activity across many hosts is a critical indicator of a large-scale attack. This question uses a time-series anomaly detection model to monitor the aggregate count of these commands across the entire environment, allowing for the detection of widespread campaigns that might be missed by focusing on individual hosts.
    answer_sources:
      - Apple Endpoint Security Framework (ESF) process execution events with command-line arguments
      - Sysmon for macOS Event ID 1
      - Applies to: All corporate macOS endpoints, particularly those of privileged users
    range: last 90 days
    queries:
      - technology: Machine Learning Model (Time-Series)
        query: >
          AGGREGATE count(security_dump_events) per hour
          | APPLY time_series_model(ARIMA)
          | ALERT IF actual_count > forecast_upper_bound
  - question: Are there any suspicious processes (e.g., unsigned, non-standard path) making keychain access API calls?
    context: >
      Legitimate applications that access the keychain are typically signed and run from standard locations. This question seeks to identify malicious software by looking for processes that access keychain APIs while exhibiting suspicious characteristics, such as being unsigned, running from a temporary or user-writable directory, and not being on a pre-approved allowlist.
    answer_sources:
      - macOS API Monitoring logs (e.g., from an EDR agent)
      - macOS Unified Log events for `Security` and `SecurityAgent` subsystems
      - Applies to: All corporate macOS endpoints
    range: last 90 days
    queries:
      - technology: EDR / SIEM
        query: >
          SEARCH api_calls WHERE api = 'SecItemCopyMatching'
          AND process_is_unsigned = true AND process_path CONTAINS '~/Downloads'
          AND process NOT IN allowlist
  - question: Are any applications that normally do not access the keychain suddenly attempting to do so?
    context: >
      This question helps detect when a legitimate application might be compromised or when a malicious application is masquerading as a benign one. By establishing a baseline of which applications typically access the keychain, we can flag any application that deviates from this norm as a statistical anomaly, even if the application itself is common.
    answer_sources:
      - macOS API Monitoring logs (e.g., from an EDR agent)
      - macOS Unified Log events for `Security` and `SecurityAgent` subsystems
      - Applies to: All corporate macOS endpoints
    range: last 90 days
    queries:
      - technology: SIEM / Data Analytics
        query: >
          SEARCH api_calls WHERE api = 'SecItemCopyMatching'
          | STATS distinct_count(host) by application
          | CALCULATE rarity
          | ALERT IF rarity < 0.5%
  - question: Can a machine learning model classify keychain access attempts as 'benign' or 'suspicious' based on process characteristics?
    context: >
      This question uses a more sophisticated, multi-faceted approach to detecting malicious keychain access. A Random Forest classifier can evaluate a combination of features (parent process, name entropy, age, network connections) simultaneously to determine the likelihood that an access attempt is malicious, providing a more robust detection capability than single-feature rules.
    answer_sources:
      - macOS API Monitoring logs (e.g., from an EDR agent)
      - macOS Unified Log events for `Security` and `SecurityAgent` subsystems
      - Applies to: All corporate macOS endpoints
    range: last 90 days
    queries:
      - technology: Machine Learning Model
        query: >
          FOR each keychain_access_event
          | SCORE with Random_Forest_model(features=[parent, entropy, age, net_conn])
          | ALERT IF classification = 'suspicious'
  - question: Has a successful network logon for a macOS user's account originated from a known malicious IP address?
    context: >
      This question aims to detect the use of stolen credentials from a compromised source. By correlating successful network logons (especially remote ones like Type 3 or 10) with threat intelligence feeds, we can immediately identify authentication attempts from IPs associated with malicious actors, command-and-control servers, or anonymizing services like Tor.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek kerberos.log
      - VPN logs
      - Applies to: Domain Controllers, Network Gateway, VPN Concentrators, RADIUS servers
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          SEARCH event_id = 4624 AND (logon_type = 3 OR logon_type = 10)
          | JOIN threat_intel ON source_ip
          | ALERT IF source_ip IN threat_intel.blocklist
  - question: Has a macOS user's account been used in a network logon that is statistically improbable based on their historical behavior?
    context: >
      Adversaries using stolen credentials often log in from locations or at times that are atypical for the legitimate user. This question identifies these "impossible travel" or anomalous behavior scenarios by building a 90-day baseline of each user's login patterns (country, ISP, time) and scoring new logins against it. A high deviation score points to a likely compromised account.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek kerberos.log
      - VPN logs
      - Applies to: Domain Controllers, Network Gateway, VPN Concentrators, RADIUS servers
    range: last 90 days
    queries:
      - technology: UEBA / SIEM
        query: >
          FOR each logon_event
          | SCORE against user_90d_baseline(features=[country, ISP, hour])
          | CALCULATE risk_score
          | ALERT IF risk_score > 95th_percentile
  - question: Does a recent network logon for a macOS user's account fall outside their established clusters of normal behavior?
    context: >
      This question uses unsupervised machine learning (clustering) to define what "normal" login behavior looks like for a user without pre-defined rules. The DBSCAN algorithm groups historical logins into clusters of common activity. Any new login that doesn't fit into an existing cluster is flagged as an outlier or "noise," representing a significant and potentially malicious deviation from the user's routine.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek kerberos.log
      - VPN logs
      - Applies to: Domain Controllers, Network Gateway, VPN Concentrators, RADIUS servers
    range: last 90 days
    queries:
      - technology: Machine Learning Model (Clustering)
        query: >
          FOR each user
          | CLUSTER historical_logins with DBSCAN(features=[ASN, service, time])
          | FOR new_login
          | CLASSIFY against clusters
          | ALERT IF classification = 'noise'
  - question: Following a network logon from a macOS user's account, were any common lateral movement tools or obfuscated PowerShell commands executed on the target Windows host?
    context: >
      This question seeks to confirm the malicious use of stolen credentials by looking for immediate post-exploitation activity. An adversary who has successfully authenticated will often quickly use tools like PsExec, WMIC, or obfuscated PowerShell to move laterally. Correlating a network logon with the immediate execution of these tools is a strong indicator of an active intrusion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows PowerShell Script Block Logging (Event ID 4104)
      - Zeek dce_rpc.log
      - Applies to: Windows Servers, Windows Endpoints, Domain Controllers
    range: last 90 days
    queries:
      - technology: SIEM
        query: >
          CORRELATE (event_id=4624 AND logon_type=3) with (event_id=4688 AND process IN [psexec, wmic, powershell] AND command_line CONTAINS '-enc') within 5m on same host
  - question: Did a PowerShell script with unusually high entropy execute shortly after a network logon?
    context: >
      Adversaries frequently use obfuscation to hide their PowerShell payloads, which significantly increases the script's character entropy (randomness). This question aims to detect this activity by calculating the entropy of any PowerShell script that runs shortly after a logon and comparing it to a baseline of normal scripts. A high entropy score is a strong statistical indicator of obfuscation and malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows PowerShell Script Block Logging (Event ID 4104)
      - Zeek dce_rpc.log
      - Applies to: Windows Servers, Windows Endpoints, Domain Controllers
    range: last 90 days
    queries:
      - technology: SIEM / Script Analysis
        query: >
          SEARCH event_id=4104 within 10m of logon_event
          | CALCULATE entropy(script_block)
          | ALERT IF entropy > (mean_entropy + 2 * stddev_entropy)
  - question: Did the sequence of processes executed after a network logon deviate from normal, modeled behavior?
    context: >
      Legitimate users and automated processes tend to have predictable sequences of activity after logging in. This question uses a sequence model (like an HMM) to learn these normal patterns. When an adversary logs in, their sequence of actions (e.g., running `whoami`, then `net user`, then `psexec`) will likely be novel. The model will assign a low probability to this unseen sequence, flagging it as a significant anomaly indicative of an intrusion.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Windows PowerShell Script Block Logging (Event ID 4104)
      - Zeek dce_rpc.log
      - Applies to: Windows Servers, Windows Endpoints, Domain Controllers
    range: last 90 days
    queries:
      - technology: Machine Learning Model (Sequence)
        query: >
          FOR each logon_session
          | CAPTURE process_creation_sequence
          | SCORE sequence with HMM
          | ALERT IF probability < low_threshold