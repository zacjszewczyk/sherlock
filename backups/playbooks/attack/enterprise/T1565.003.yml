name: T1565.003: Runtime Data Manipulation
id: e1a2b3c4-d5e6-4f7a-8b9c-0d1e2f3a4b5c
description: |
  This playbook helps answer the primary investigative requirement: "Has an adversary altered or replaced a critical application binary or its in-memory process to impact data integrity?". It focuses on detecting runtime data manipulation, a technique where adversaries modify data in-memory or on-disk to disrupt processes or compromise data integrity. This can manifest as direct modification of critical application binaries, altering configuration files or registry keys to change application behavior, injecting malicious threads into running processes, causing applications to modify their own code, or preceding these actions with anomalous network connections. The goal is to identify unauthorized changes that could lead to system outages, data corruption, or misinformation.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Is a critical application binary being modified by an unauthorized process?
    context: |
      This question aims to detect the direct, unauthorized replacement or modification of key application executables. By monitoring file creation events in directories containing critical binaries and correlating them with the creating process, analysts can identify when a file is changed. An alert is triggered if the new file's hash is known to be malicious or if the process responsible for the change is not on a strict allowlist of approved software installers and patch managers (e.g., 'msiexec.exe', 'TrustedInstaller.exe').
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Threat intelligence feeds
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - symbolic_query: |
          SEARCH file creation events (Sysmon EID 11) in critical directories
          JOIN with process creation events (Windows EID 4688) on ProcessID
          WHERE file hash matches known malicious signatures
          OR creating process name is NOT in allowlist ('msiexec.exe', 'TrustedInstaller.exe', etc.)
          ALERT high severity

  - question: Has a critical application binary been modified with an unusual frequency?
    context: |
      This question seeks to identify abnormal rates of change for critical files, which can indicate tampering even if the source is unknown. A file integrity monitoring (FIM) approach establishes a baseline hash and size for each critical binary. By tracking the frequency of modification events outside of scheduled maintenance windows, analysts can detect anomalies. An alert is generated if the daily modification count for a specific binary exceeds a statistical threshold (e.g., the 99th percentile) of its historical 90-day count.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - File integrity monitoring logs
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - statistical_query: |
          FOR each critical application binary:
            BASELINE file hash and size.
            BASELINE historical 90-day modification frequency.
          MONITOR file modification events outside maintenance windows.
          CALCULATE daily modification count per file.
          ALERT if daily count > 99th percentile of historical baseline.

  - question: Can a machine learning model classify a file write event on a critical application as malicious?
    context: |
      This question leverages machine learning to provide a more nuanced detection method than static rules. A classification model (e.g., Random Forest) is trained on features from file write events targeting critical application directories. Features include the writing process, parent process, user context, and command line. Events are labeled as 'benign' (e.g., a patch via 'TrustedInstaller.exe') or 'malicious' (e.g., a write from 'powershell.exe'). The deployed model scores new events, alerting on those classified as malicious with high confidence.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4688
      - File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.
    range: last 90 days
    queries:
      - ml_query: |
          SCORE new file write events (Sysmon EID 11) using pre-trained classification model.
          FEATURES: writing process name, parent process name, user context, command line, time of day.
          ALERT if model prediction is 'malicious' and confidence score > threshold.

  - question: Is a process using command-line utilities to modify sensitive registry keys or configuration files for a critical application?
    context: |
      This question directly targets adversary attempts to alter an application's behavior by changing its configuration. It involves monitoring process creation and registry modification events for the use of utilities like 'reg.exe' or 'powershell.exe'. A specific ruleset is created to detect command-line arguments that target sensitive, application-specific registry keys, especially when executed by unexpected or non-administrative user accounts. This allows for precise detection of configuration tampering.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Sysmon Event ID 13
      - Process execution logs and registry monitoring logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - symbolic_query: |
          SEARCH process creation (Sysmon EID 1) and registry modification (Sysmon EID 13) events.
          WHERE command line contains sensitive registry paths (e.g., 'reg.exe add HKLM\\Software\\CriticalApp\\...')
          AND user account is not an authorized administrator.
          ALERT on match.

  - question: Is a process exhibiting an unusually high command-line entropy when interacting with system configurations?
    context: |
      This question is designed to detect the use of obfuscated commands, which adversaries often use to hide their actions. By establishing a baseline for the Shannon entropy of command-line arguments for common utilities ('powershell.exe', 'cmd.exe'), analysts can spot anomalies. A sudden, sharp increase in entropy (e.g., exceeding 3 standard deviations from the 24-hour rolling average) for a given process can indicate a heavily obfuscated or randomized command string, warranting investigation.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Process execution logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - statistical_query: |
          FOR each host and relevant process ('powershell.exe', 'cmd.exe'):
            BASELINE 24-hour rolling average of command-line Shannon entropy.
          CALCULATE entropy for new command lines in 5-minute windows.
          ALERT if entropy > (rolling average + 3 * standard deviation).

  - question: Can a machine learning model classify a command-line string as an attempt to maliciously manipulate application data or configuration?
    context: |
      This question applies Natural Language Processing (NLP) to detect novel or complex manipulation commands that may evade static rules. A pre-trained NLP model is fine-tuned on an internal dataset to classify command-line strings as 'benign configuration', 'suspicious manipulation', or 'malicious'. The model learns to recognize patterns associated with altering data formats, disabling security validations, or redirecting data streams. It can then score new command lines in real-time on critical systems.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - Process execution logs on servers hosting financial, industrial control, or proprietary data processing applications.
    range: last 90 days
    queries:
      - ml_query: |
          SCORE new process command-line strings using fine-tuned NLP classification model.
          MODEL is trained to recognize patterns of data/config manipulation.
          ALERT if classification is 'malicious' or 'suspicious manipulation'.

  - question: Has a remote thread been created in a critical application's memory space by an unauthorized source process?
    context: |
      This question addresses a classic process injection technique used for in-memory data manipulation. By monitoring for 'CreateRemoteThread' events (Sysmon Event ID 8), analysts can detect when one process injects code into another. A high-severity alert is generated if the target of the injection is a critical application (e.g., 'sap.exe') and the source process is not on a pre-defined allowlist of legitimate system, security, or debugging utilities (e.g., 'lsass.exe', 'procexp.exe').
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe') on production servers, monitored via EDR agents.
    range: last 90 days
    queries:
      - symbolic_query: |
          SEARCH remote thread creation events (Sysmon EID 8).
          MAINTAIN allowlist of legitimate [SourceImage, TargetImage] pairs.
          WHERE TargetImage is a critical application
          AND SourceImage is NOT on the allowlist.
          ALERT high severity.

  - question: Has a rare or previously unseen process injected a thread into a critical application?
    context: |
      This question uses statistical analysis to uncover novel or infrequent process injection techniques that an allowlist might miss. A graph model of normal inter-process remote thread creation is built over a 30-day period. Frequency analysis is then used to identify source-target process pairs that are extremely rare or have never been observed before. An alert is triggered for any remote thread creation event involving a pair that has not been seen in the last 90 days or has a historical frequency below a very low threshold (e.g., 0.1%).
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications on production servers, monitored via EDR agents.
    range: last 90 days
    queries:
      - statistical_query: |
          BASELINE graph of normal remote thread creation (source-target pairs) over 30 days.
          CALCULATE frequency of each pair.
          SEARCH for new remote thread creation events (Sysmon EID 8).
          ALERT if the source-target pair has not been observed in the last 90 days or has a frequency < 0.1%.

  - question: Does a remote thread creation event fall outside the clusters of normal, known-good behavior?
    context: |
      This question applies machine learning to identify anomalous process injection without relying on pre-defined rules. A clustering algorithm (e.g., DBSCAN) groups remote thread creation events based on features like source/target process paths, user context, and parent processes. This identifies clusters of normal activity, such as developers using debuggers or OS processes performing routine tasks. Any event that does not fall into a known-good cluster and is classified as noise is treated as a high-risk anomaly requiring immediate investigation.
    answer_sources:
      - Sysmon Event ID 8
      - Process memory space of critical applications on production servers, monitored via EDR agents.
    range: last 90 days
    queries:
      - ml_query: |
          CLUSTER remote thread creation events (Sysmon EID 8) using DBSCAN.
          FEATURES: source path, target path, user, parent processes.
          IDENTIFY known-good clusters (e.g., debugging tools, OS processes).
          ALERT on any event classified as noise or not belonging to a known-good cluster.

  - question: Is a critical application process modifying its own executable or a loaded DLL?
    context: |
      This question targets highly suspicious behavior where a process modifies its own code on disk, often for persistence or to patch itself in memory. The query correlates DLL load events (Sysmon Event ID 7) with file write events (Sysmon Event ID 11). An alert is triggered if a process writes to a file path that matches a DLL it has already loaded or if the target path is identical to its own executable image path (self-modification). Legitimate software updaters must be excluded from this rule to avoid false positives.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories and system directories (e.g., C:\\Windows\\System32) on critical servers.
    range: last 90 days
    queries:
      - symbolic_query: |
          SEARCH for processes where a file write event (Sysmon EID 11) target path
          MATCHES a DLL loaded by that same process (Sysmon EID 7)
          OR MATCHES the process's own image path.
          EXCLUDE known software updaters.
          ALERT on match.

  - question: Is a critical process writing to an unusual file type, such as an executable or DLL?
    context: |
      This question helps detect when a process deviates from its normal file I/O behavior. A baseline is established for each critical process, profiling the file extensions and directory paths it normally writes to (e.g., '.log' files in its AppData folder). The query then monitors for file write events and alerts if a critical process writes to an executable file type ('.exe', '.dll', '.sys') when such behavior has not been observed in its historical baseline, suggesting a potential compromise.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories and system directories on critical servers.
    range: last 90 days
    queries:
      - statistical_query: |
          FOR each critical process:
            BASELINE historical file write behavior (target extensions, directories).
          MONITOR new file write events.
          ALERT if a process writes to an executable file type ('.exe', '.dll')
          AND this behavior is not in its historical baseline.

  - question: Does a file write event from a critical process appear as an outlier when compared to its normal behavior?
    context: |
      This question uses a one-class machine learning model to detect anomalous file write activity. The model (e.g., a One-Class SVM) is trained on feature vectors representing the normal file write behavior for a specific critical process. Features can include target file extension, directory depth, and time of day. The deployed model then classifies new file write patterns in real-time. Any pattern classified as an 'outlier'—such as a database engine attempting to modify a system DLL—is flagged as anomalous and generates an alert.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 7
      - Application installation directories and system directories on critical servers.
    range: last 90 days
    queries:
      - ml_query: |
          SCORE new file write events for a critical process using a trained one-class SVM.
          FEATURES: target file extension, target directory depth, time of day.
          ALERT if the model classifies the event as an 'outlier'.

  - question: Did an inbound network connection from an unauthorized source precede suspicious file or memory activity on a critical server?
    context: |
      This question links a potential network entry point to a subsequent malicious action on a host. It relies on an allowlist of authorized source IP addresses/subnets for inbound connections to critical applications. The query correlates inbound network connections with subsequent high-risk host events (e.g., process injection, critical file modification) within a short time window (e.g., 60 seconds). An alert is generated if a connection from a non-allowlisted source is immediately followed by such an event.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Sysmon Event ID 11
      - Sysmon Event ID 8
      - Network traffic to/from critical application server subnets and host-based endpoint logs.
    range: last 90 days
    queries:
      - symbolic_query: |
          SEARCH inbound network connections (Sysmon EID 3, Zeek) to critical servers.
          IF source IP is NOT on the application's connection allowlist:
            MONITOR host for 60 seconds.
            IF process injection (Sysmon EID 8) or critical file write (Sysmon EID 11) occurs:
              ALERT high severity.

  - question: Has a critical server received a connection from a rare source IP or with an unusually large payload?
    context: |
      This question uses statistical methods to identify anomalous network connections that could be precursors to an attack. First, it establishes a baseline frequency distribution of all source IPs that connect to a critical server. An alert is triggered if the server receives a connection from a 'rare' source IP (e.g., in the bottom 1st percentile of frequency). Additionally, it baselines the typical data volume of connections and alerts if a new connection's payload size is anomalously large (e.g., exceeds the 99th percentile), which could indicate data staging or a large payload delivery.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network traffic to/from critical application server subnets.
    range: last 90 days
    queries:
      - statistical_query: |
          FOR each critical server:
            BASELINE frequency distribution of source IPs over 30 days.
            BASELINE 99th percentile of connection payload size ('orig_bytes').
          MONITOR new inbound connections.
          ALERT if source IP frequency is in the bottom 1st percentile
          OR if payload size > 99th percentile of historical average.

  - question: Does a network connection to a critical server represent a statistically improbable pattern in the internal network communication graph?
    context: |
      This question uses advanced graph-based anomaly detection to identify suspicious lateral movement. The internal network is modeled as a graph where hosts are nodes and connections are edges. A machine learning algorithm learns the normal communication patterns between all nodes. An edge representing a new or statistically improbable connection—for example, a workstation from the marketing department VLAN connecting to a financial database server's administrative port—would be flagged by the model as a high-risk anomaly.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 3
      - Network traffic at internal network gateways.
    range: last 90 days
    queries:
      - ml_query: |
          MODEL the internal network as a graph (nodes=hosts, edges=connections).
          USE a graph-based anomaly detection algorithm to learn normal patterns.
          SCORE new connections based on their probability within the learned graph.
          ALERT on connections flagged as high-risk anomalies (e.g., a marketing host connecting to a finance DB admin port).