name: T1636.002: Call Log
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps investigate potential call log collection by adversaries on managed mobile devices (TA0035 - Collection). It focuses on identifying unapproved Android applications with 'android.permission.READ_CALL_LOG' permissions, detecting unauthorized runtime API calls to the call log provider, and correlating anomalous network traffic with the installation of apps that can access call logs.
type: technique
related:
  - TA0035: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any unapproved applications on our mobile devices that have permission to read call logs?
    context: |
      This question aims to identify potentially malicious applications by checking which apps request the sensitive 'android.permission.READ_CALL_LOG' permission and verifying if they are sanctioned by the organization. An unapproved application with this permission could be used by an adversary to exfiltrate call history for reconnaissance or social engineering purposes.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each app in UEM inventory:
          IF 'android.permission.READ_CALL_LOG' in app.permissions AND app.package_name NOT IN corporate_allowlist:
            GENERATE_ALERT(app)
  - question: Are any applications requesting call log access, and is this permission statistically rare in our environment?
    context: |
      This question seeks to identify outliers by focusing on permissions that are uncommon across the organization's mobile fleet. If an application requests a sensitive permission like 'READ_CALL_LOG' and that permission is rarely used by other applications, it increases the likelihood that the application may have a specialized, and potentially malicious, purpose.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CALCULATE permission_rarity_scores across all apps.
          FOR each app in UEM inventory:
            IF 'android.permission.READ_CALL_LOG' in app.permissions AND permission_rarity_scores['READ_CALL_LOG'] < 0.01:
              GENERATE_ALERT(app)
  - question: Has a machine learning model classified any application with call log access as malicious or a Potentially Unwanted Application (PUA)?
    context: |
      This question leverages advanced analysis to determine the intent of an application. By using a machine learning model trained to recognize malicious characteristics, we can proactively identify and block threats that might otherwise go unnoticed, especially when an application requests sensitive permissions like call log access. A high confidence score from the model provides strong evidence for immediate response.
    answer_sources:
      - MDM/UEM Application Inventory Log
      - AndroidManifest.xml
      - Application Allowlist
      - Unified Endpoint Management (UEM) console
      - Cloud-based application sandbox
      - Corporate application store
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each app in sandbox_analysis_queue:
            IF 'android.permission.READ_CALL_LOG' in app.permissions AND ml_model.predict(app) == 'malicious' AND ml_model.confidence > 0.85:
              TRIGGER_RESPONSE(app)
  - question: Is an unapproved process making a runtime API call to access the call log?
    context: |
      This question focuses on detecting active attempts to access call log data at runtime. While static permission analysis is useful, monitoring actual API calls provides direct evidence of malicious behavior. An unapproved process (identified by its hash) accessing the call log content provider is a strong indicator of compromise.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          ON Mobile EDR event WHERE api_call == 'content://call_log/calls':
            IF event.process_hash NOT IN approved_hash_allowlist:
              GENERATE_ALERT(event)
  - question: Is any application accessing the call log with a frequency that is statistically anomalous compared to its own baseline behavior?
    context: |
      This question helps detect when a legitimate, approved application might be compromised or behaving maliciously. By establishing a normal baseline of call log access for each app, we can identify sudden spikes in activity that deviate significantly from the norm (e.g., exceeding three standard deviations). This could indicate that the application is being used to exfiltrate data.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          FOR each app on each device:
            CALCULATE baseline_access_frequency (mean, std_dev) over 14 days.
            IF current_hourly_access > (baseline.mean + 3 * baseline.std_dev):
              GENERATE_ALERT(app)
  - question: Has an anomalous sequence of API calls involving call log access, followed by suspicious activity like data staging or exfiltration, been detected?
    context: |
      This question looks for a chain of malicious behaviors, not just a single event. A sequence analysis model can learn the normal "grammar" of API calls for approved apps. An alert is triggered when an app deviates from this grammar, for instance, by accessing the call log and immediately attempting to connect to the network or encrypt data. This contextual sequence is a very strong indicator of a data theft attempt.
    answer_sources:
      - Mobile EDR Process and API monitoring logs
      - Android Logcat
      - Managed Android endpoints
      - Unified Endpoint Management (UEM) console
      - SIEM platform
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          MONITOR real-time API call sequences.
          IF sequence_model.detect_anomaly(sequence) AND 'content://call_log/calls' in sequence AND ('network_connect' OR 'write_external' OR 'encrypt_api') in sequence within 60s:
            GENERATE_CRITICAL_ALERT(sequence)
  - question: Did a device install an application with call log access and then connect to a known command-and-control (C2) server shortly after?
    context: |
      This question correlates multiple, distinct data sources to uncover a high-confidence threat. The installation of an app with sensitive permissions is suspicious. A subsequent network connection to a destination on a threat intelligence list (a known bad IP or domain) within a short time frame provides strong evidence that the newly installed app is malicious and is "calling home" to an adversary's infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CORRELATE (MDM install logs WHERE perm == 'READ_CALL_LOG') with (Zeek conn.log) within 24 hours.
          IF conn.dest_ip IN threat_intel_C2_list:
            GENERATE_CRITICAL_ALERT(device, app, dest_ip)
  - question: Has a device exhibited an anomalous spike in outbound network traffic shortly after installing an app with call log permissions, and are there signs of Domain Generation Algorithm (DGA) activity?
    context: |
      This question aims to detect data exfiltration by looking for unusual volumes of outbound traffic. A device suddenly sending out much more data than its historical norm (e.g., exceeding the 98th percentile) after installing an app that can read call logs is highly suspicious. The suspicion is further amplified if DNS queries from the device appear random (high Shannon entropy), a common characteristic of DGAs used by malware to locate C2 servers.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          CALCULATE 30-day traffic baseline (98th percentile) for each device.
          IF current_hourly_traffic > baseline AND (app with 'READ_CALL_LOG' installed in last 24h):
            GENERATE_ALERT.
          ENRICH alert with Shannon entropy of DNS queries in same hour.
  - question: Has a device's network traffic deviated significantly from its predicted volume, and has it also made outlier network connections, shortly after an app with call log permissions was installed?
    context: |
      This question uses two different machine learning techniques to find anomalies. First, a time-series model predicts what a device's normal traffic volume should be, flagging significant deviations. Second, a clustering algorithm identifies network connections that don't fit in with the device's typical connection patterns (e.g., unusual ports, TLS fingerprints). When both types of network anomalies occur soon after the installation of an app with call log access, it strongly suggests malicious activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - MDM/UEM Application Installation Event Logs
      - Threat Intelligence Platform Data
      - Network egress points
      - Corporate Wi-Fi network gateways
      - VPN concentrators
      - DNS resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: |
          PREDICT expected traffic volume with time-series model.
          IDENTIFY outlier connections with clustering model.
          IF (actual_traffic deviates from prediction) AND (outlier_connection detected) AND (app with 'READ_CALL_LOG' installed in last 24h):
            ESCALATE_ALERT_PRIORITY