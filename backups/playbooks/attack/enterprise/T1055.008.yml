name: "T1055.008: Ptrace System Calls"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps investigate whether an adversary has escalated privileges or evaded defenses using ptrace system calls. This involves detecting when a process is targeted by ptrace and subsequently initiates suspicious network connections, is initiated by a non-allowlisted process, targets a root process from a non-root process, shows a statistical deviation in usage volume, targets security tools, or leads to anomalous file or network activity from a trusted process."
type: "technique"
related:
  - "TA0004: Privilege Escalation"
  - "TA0005: Defense Evasion"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a process targeted by a ptrace call subsequently initiated a network connection to, or resolved a domain for, a known malicious indicator?"
    context: "This question aims to detect a common post-exploitation pattern where an adversary uses ptrace to inject code into a legitimate process and then uses that compromised process to 'call home' to malicious infrastructure. By correlating the ptrace event with subsequent network activity within a 5-minute window and checking against threat intelligence, analysts can identify high-confidence instances of process injection used for command and control."
    answer_sources: "Linux Auditd (syscall=ptrace), Zeek conn.log, Zeek dns.log. Focusing on Critical Linux servers (e.g., web, database) and Internet gateway/egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FIND ptrace events from Linux Auditd
          FOR each event:
            GET target_pid, host, timestamp
            SEARCH for network connections OR DNS queries from target_pid on same host within (timestamp + 5 minutes)
            EXTRACT destination_ip or resolved_domain
            CHECK if destination_ip or resolved_domain in threat_intelligence_feed
            IF match found, ALERT

  - question: "Has a process targeted by ptrace made a network connection to a statistically rare destination IP and port combination for that process?"
    context: "This question seeks to identify anomalous network behavior following a ptrace event without relying solely on threat intelligence. An attacker injecting code may cause the process to connect to unusual destinations. By establishing a 30-day baseline of normal network activity for each process executable, we can flag connections to IP/port pairs that are statistical outliers (e.g., in the bottom 1st percentile of frequency), which helps detect novel command and control infrastructure."
    answer_sources: "Linux Auditd (syscall=ptrace), Zeek conn.log, Zeek dns.log. Focusing on Critical Linux servers (e.g., web, database) and Internet gateway/egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: Maintain a 30-day baseline of (process_name, dest_ip, dest_port) frequency
          FIND ptrace events
          FOR each event:
            GET target_pid, target_process_name, host, timestamp
            SEARCH for network connections from target_pid on same host within 5 minutes
            FOR each connection:
              GET dest_ip, dest_port
              CALCULATE frequency of (target_process_name, dest_ip, dest_port) from baseline
              IF frequency is in bottom 1st percentile, ALERT

  - question: "Can we classify the network connection of a process targeted by ptrace as malicious using a machine learning model?"
    context: "This question uses a supervised machine learning approach (Random Forest) to score the maliciousness of network activity following a ptrace event. By training a model on features like connection duration, bytes transferred, and IP reputation, the system can provide a probabilistic assessment of whether a connection is malicious, offering a more nuanced detection method than simple rule-based alerts."
    answer_sources: "Linux Auditd (syscall=ptrace), Zeek conn.log, Zeek dns.log. Focusing on Critical Linux servers (e.g., web, database) and Internet gateway/egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A trained Random Forest model for classifying network connections
          FIND ptrace events
          FOR each event:
            GET target_pid, host, timestamp
            SEARCH for network connections from target_pid on same host within 5 minutes
            FOR each connection:
              EXTRACT features (duration, bytes_sent, bytes_received, dest_port, etc.)
              PREDICT malicious_probability using trained model
              IF probability > high_threshold, ALERT

  - question: "Has a ptrace system call been initiated by a process that is not on a pre-defined allowlist of legitimate tools?"
    context: "This question aims to detect the use of custom or unauthorized tools for process injection. Ptrace is legitimately used by debuggers and diagnostic tools. By maintaining an allowlist of known-good executables (e.g., gdb, strace, dockerd), any ptrace call from a process not on this list is highly suspicious and warrants a high-severity alert, as it likely indicates malicious activity."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux hosts (servers and workstations), especially those running production applications."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: An allowlist of executable paths known to use ptrace legitimately
          FIND ptrace events from Linux Auditd
          FOR each event:
            GET source_process_exe_path
            IF source_process_exe_path NOT in ptrace_allowlist, ALERT

  - question: "Has a ptrace call been made by a process that is statistically rare for that host or the entire enterprise?"
    context: "This question uses a frequency analysis approach to identify anomalous ptrace usage. By baselining which processes normally use ptrace over 30 days, we can calculate a rarity score for any new ptrace event. A call from a process that has rarely or never used ptrace before (e.g., in the 99th percentile of rarity) is a strong indicator of anomalous behavior that could be malicious."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux hosts (servers and workstations), especially those running production applications."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A 30-day baseline of ptrace source process frequencies per host and enterprise-wide
          FIND ptrace events
          FOR each event:
            GET source_process_exe_path, host
            CALCULATE rarity score for source_process_exe_path on this host and enterprise-wide
            IF rarity score > 99th percentile, ALERT

  - question: "Is a new ptrace event an outlier when compared to historical clusters of normal ptrace activity?"
    context: "This question applies unsupervised machine learning (DBSCAN) to model normal ptrace behavior. By clustering historical events based on features like source/parent process, user ID, and arguments, we can define 'normal' clusters. A new ptrace event that does not fit into any existing cluster is flagged as an outlier or noise, indicating a deviation from established patterns that could be malicious."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux hosts (servers and workstations), especially those running production applications."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A trained DBSCAN model on historical ptrace event features
          FIND new ptrace events
          FOR each event:
            EXTRACT features (source_process, parent_process, uid, args)
            CLASSIFY event using DBSCAN model
            IF classification is 'outlier' or 'noise', ALERT

  - question: "Has a non-root process used ptrace to target a root process, which then loaded a library from a non-standard location or spawned a shell?"
    context: "This question looks for a specific privilege escalation chain. An attacker with user-level access might use ptrace to take control of a root-owned process. A key indicator of success is the now-compromised root process performing a suspicious action, such as loading a library from a world-writable directory (e.g., /tmp) or spawning a shell, which would grant the attacker root access."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Sysmon for Linux (Event ID 7: Image Loaded). Focusing on Multi-user Linux systems and servers with privileged service accounts."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FIND ptrace events WHERE source_uid != 0 AND target_euid == 0
          FOR each event:
            GET target_pid, timestamp
            SEARCH within (timestamp + 10 seconds) for:
              (Sysmon EventID 7 from target_pid WHERE image_path in ['/tmp', '/var/tmp', '/dev/shm'])
              OR (execve event from target_pid WHERE process_name in ['/bin/sh', '/bin/bash'])
            IF found, ALERT

  - question: "After a non-root process ptrace'd a root process, did the root process perform a historically unprecedented action, like spawning a rare child process?"
    context: "This question uses historical baselining to detect privilege escalation. After a non-root process targets a root process with ptrace, we analyze the root process's subsequent actions. By comparing its new child processes or loaded libraries against a baseline of normal behavior, we can flag actions with a very low conditional probability (e.g., <1%). This indicates a significant deviation from the norm, likely caused by malicious code injection."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Sysmon for Linux (Event ID 7: Image Loaded). Focusing on Multi-user Linux systems and servers with privileged service accounts."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: Historical baseline of P(Child|Parent) and P(Library|Process) probabilities
          FIND ptrace events WHERE source_uid != 0 AND target_euid == 0
          FOR each event:
            GET target_pid, target_process_name
            MONITOR subsequent child processes or loaded libraries from target_pid
            CALCULATE P(NewChild|target_process_name) or P(NewLibrary|target_process_name)
            IF probability < 0.01, ALERT

  - question: "Following a low-to-high privilege ptrace event, did the target process's sequence of system calls deviate from its normal behavior?"
    context: "This question uses a time-series anomaly detection model (LSTM) to spot behavioral changes in a privileged process after being targeted by ptrace. LSTMs can learn the normal sequence of system calls for a process. If a non-root user ptrace's a root process and injects code, the resulting syscall sequence will likely differ from the learned norm, generating a high anomaly score and triggering an alert."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Sysmon for Linux (Event ID 7: Image Loaded). Focusing on Multi-user Linux systems and servers with privileged service accounts."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: An LSTM model trained on normal syscall sequences for high-privilege processes
          FIND ptrace events WHERE source_uid != 0 AND target_euid == 0
          FOR each event:
            GET target_pid
            COLLECT subsequent syscall sequence from target_pid
            FEED sequence into the LSTM model
            IF anomaly_score > learned_threshold, ALERT

  - question: "Has the volume of ptrace calls from a single user or host exceeded a simple threshold, or has an unknown source-target ptrace pair been observed?"
    context: "This question uses basic thresholding and list-based detection to find suspicious ptrace activity. It's a straightforward method to catch brute-force or anomalous injection attempts. Rule A detects a sudden burst of ptrace activity from one user/host. Rule B detects when a process ptrace's another process in a combination that has never been seen and approved, catching novel attack patterns."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on fleets of Linux servers with consistent roles."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Rule A
          COUNT ptrace calls per user/host in a 1-minute window
          IF count > 50 (excluding service accounts), ALERT
          // Rule B
          // Prerequisite: A list of known-good (source_exe, target_exe) ptrace pairs
          FIND ptrace events
          GET source_exe, target_exe
          IF (source_exe, target_exe) NOT in known_good_pairs, ALERT

  - question: "Is the current rate of ptrace calls on a host anomalous compared to its dynamic baseline, or has a new source-target process pair appeared enterprise-wide?"
    context: "This question uses more advanced statistical methods to detect deviations. Instead of a fixed threshold, it alerts when ptrace activity exceeds a dynamic one (3 standard deviations above the moving average), adapting to changing system behavior. It also complements host-level analysis by maintaining an enterprise-wide map of ptrace pairs, allowing it to detect a new malicious tool being used for the first time anywhere in the environment."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on fleets of Linux servers with consistent roles."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: 30-day baseline of ptrace rates per host and a map of all observed pairs
          FOR each host:
            CALCULATE current ptrace rate
            IF rate > (24hr_moving_avg + 3 * std_dev), ALERT
          FOR each new ptrace event:
            GET source_exe, target_exe
            IF (source_exe, target_exe) is a new pair enterprise-wide, ALERT

  - question: "Does a new ptrace event create an anomalous structure in the process interaction graph, such as a new hub or bridge?"
    context: "This question models ptrace activity as a graph and uses a Graph Neural Network (GNN) to find structural anomalies. A malicious tool might act as a 'hub' (ptrace'ing many processes) or a 'bridge' (connecting unrelated process groups). A GNN can learn the normal graph structure and detect the emergence of these anomalous patterns, which are difficult to spot with traditional methods."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on fleets of Linux servers with consistent roles."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A GNN trained on the historical ptrace process graph
          BUILD a graph of all ptrace interactions (nodes=processes, edges=ptrace calls)
          FEED graph into the trained GNN
          IF GNN detects anomalous structures (new hubs, bridges), ALERT

  - question: "Has a security tool, such as an EDR agent or audit daemon, been targeted by a ptrace call from an unauthorized process?"
    context: "This question is designed to detect defense evasion. Adversaries may use ptrace to tamper with, disable, or blind security software. By maintaining a watchlist of security agent process names, we can create a high-priority alert whenever one is targeted by a ptrace call from any process that isn't an explicitly allowlisted part of the tool itself. This is a strong indicator of a direct attack on security controls."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux endpoints and servers with security agents installed."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A watchlist of security agent process names and their authorized helper processes
          FIND ptrace events
          GET target_process_name, source_process_name
          IF target_process_name in security_agent_watchlist AND source_process_name NOT in its allowlist, ALERT

  - question: "Has a security agent been targeted by a ptrace call from a user or process that has rarely or never interacted with it before?"
    context: "This question identifies defense evasion attempts by baselining all interactions with security agents. While some ptrace interactions might be legitimate (e.g., from a helper process), an attempt from a novel user or process is highly suspect. Calculating the rarity of the source user/process pair for any ptrace event targeting a security agent can uncover previously unseen and potentially malicious tampering attempts."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux endpoints and servers with security agents installed."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A 30-day baseline of (source_user, source_process) pairs that ptrace security agents
          FIND ptrace events WHERE target is a security agent
          GET source_user, source_process
          CALCULATE rarity of the (source_user, source_process) pair from baseline
          IF pair is new or in lowest percentile of frequency, ALERT

  - question: "Can we classify a ptrace interaction with a security agent as malicious using a machine learning model?"
    context: "This question applies a supervised learning model to distinguish between legitimate and malicious ptrace interactions with security agents. By training a classifier on features like the source process, user context, and command-line arguments, the system can provide a probability score for maliciousness. This offers a more robust detection capability than static rules, especially for sophisticated evasion techniques."
    answer_sources: "Linux Auditd (syscall=ptrace). Focusing on all Linux endpoints and servers with security agents installed."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A trained classifier (e.g., Logistic Regression) for security agent interactions
          FIND ptrace events WHERE target is a security agent
          EXTRACT features (source_process, user, args, etc.)
          PREDICT malicious_probability using trained model
          IF probability > high_threshold, ALERT

  - question: "After being targeted by ptrace, did a trusted process like 'nginx' or 'sshd' spawn a shell or connect to a non-standard port?"
    context: "This question looks for the hijacking of trusted, often internet-facing, processes. An attacker might inject code into a process like 'nginx' to inherit its permissions and network access. A successful compromise would be indicated by the trusted process performing uncharacteristic actions, like spawning an interactive shell or making an outbound connection to an unusual port, which this rule is designed to detect."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Zeek conn.log. Focusing on Linux servers hosting public-facing or critical internal services."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FIND ptrace events where target_process is a trusted daemon (e.g., nginx, sshd)
          FOR each event:
            GET target_pid
            MONITOR for 5 minutes for events from target_pid:
              execve of a shell (e.g., /bin/bash)
              OR outbound network connection to a non-standard port
            IF found, ALERT

  - question: "Following a ptrace event, did a trusted process exhibit behavior (like spawning child processes or making network connections) that is statistically rare for it?"
    context: "This question uses behavioral baselining to detect when a trusted process has been compromised. For each critical process (e.g., 'nginx'), we build a profile of its normal child processes and network destinations. After a ptrace event, we check if the process's subsequent actions deviate from this profile. Spawning a never-before-seen child process or connecting to a novel port/domain is a strong indicator of hijacking."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Zeek conn.log. Focusing on Linux servers hosting public-facing or critical internal services."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: Historical baseline of normal child processes and network destinations for trusted processes
          FIND ptrace events targeting a trusted process
          GET target_process_name, target_pid
          MONITOR subsequent activity from target_pid
          IF a child process is spawned that is rare for target_process_name, ALERT
          IF a network connection is made to a port/domain that is rare for target_process_name, ALERT

  - question: "After being targeted by ptrace, did the behavior of a critical service process deviate significantly from its learned normal patterns?"
    context: "This question uses an autoencoder, an unsupervised learning model, to detect subtle signs of process hijacking. The autoencoder learns a compressed representation of a process's normal behavior (syscalls, network activity). After a ptrace event, the process's new actions are fed to the model. If the model cannot reconstruct the behavior accurately (high reconstruction error), it means the new behavior is anomalous and likely malicious."
    answer_sources: "Linux Auditd (syscall=ptrace, execve), Zeek conn.log. Focusing on Linux servers hosting public-facing or critical internal services."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A trained autoencoder for each critical service's normal behavior
          FIND ptrace events targeting a critical service
          GET target_pid
          COLLECT sequence of subsequent actions (syscalls, network events) from target_pid
          FEED sequence into the trained autoencoder
          IF reconstruction_error > threshold, ALERT

  - question: "After being targeted by ptrace, did a process access sensitive files or write and execute a new file in a world-writable directory?"
    context: "This question detects post-injection actions related to credential access or persistence. Once an attacker has control of a process via ptrace, they might use it to read sensitive files like '/etc/shadow' or SSH keys. Alternatively, they might write a malicious executable to a temporary directory like '/tmp' and make it executable ('chmod +x'). This rule detects this suspicious sequence of events."
    answer_sources: "Linux Auditd (syscall=ptrace, openat, chmod). Focusing on file systems on critical Linux servers and user home directories."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FIND ptrace events
          GET target_pid
          MONITOR target_pid for 2 minutes for:
            (openat syscall on a file in sensitive_file_list)
            OR (write to /tmp, /dev/shm AND chmod with execute permissions)
          IF sequence found, ALERT

  - question: "Following a ptrace event, did the target process show a sudden increase in file system discovery activity?"
    context: "This question aims to detect reconnaissance activity performed by injected code. After compromising a process, an attacker may not know where they are and will begin exploring the file system. This can be detected as a sharp increase in the variety of directory paths accessed. By calculating the Shannon entropy of accessed paths within a 5-minute window and comparing it to a baseline, we can spot this anomalous discovery behavior."
    answer_sources: "Linux Auditd (syscall=ptrace, openat, chmod). Focusing on file systems on critical Linux servers and user home directories."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A baseline of normal file access entropy for key processes
          FIND ptrace events
          GET target_pid
          MONITOR file access events from target_pid for 5 minutes
          CALCULATE Shannon entropy of directory paths accessed
          IF entropy shows a statistically significant spike compared to baseline, ALERT

  - question: "After being targeted by ptrace, did a process access files that are considered outliers compared to its normal file access patterns?"
    context: "This question uses a one-class SVM, a machine learning algorithm for anomaly detection, to identify unusual file accesses. The model is trained on the legitimate file access patterns of a specific process. After that process is targeted by ptrace, any subsequent file access that the model classifies as an outlier is flagged as a strong indicator of compromise, suggesting injected code is accessing unexpected files."
    answer_sources: "Linux Auditd (syscall=ptrace, openat, chmod). Focusing on file systems on critical Linux servers and user home directories."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: A trained one-class SVM model on legitimate file access patterns for a process
          FIND ptrace events targeting a process with a model
          GET target_pid
          MONITOR subsequent file accesses by target_pid
          FOR each file access:
            CLASSIFY the access using the one-class SVM
            IF classified as 'outlier', ALERT

  - question: "After being targeted by a ptrace call, did a process attempt to open a new listening port (bind shell) or establish a reverse shell?"
    context: "This question detects two common methods for establishing a backdoor after process injection. It looks for specific sequences of network-related system calls that indicate either a 'bind shell' (the compromised host listens for an incoming connection) or a 'reverse shell' (the compromised host connects out to the attacker). Detecting these syscall sequences (`socket`, `bind`, `listen` or `socket`, `connect`) provides a high-fidelity indicator of a backdoor."
    answer_sources: "Linux Auditd (syscall=ptrace, socket, bind, listen, connect), Zeek conn.log. Focusing on network interfaces of all Linux hosts and network egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FIND ptrace events
          GET target_pid
          MONITOR syscalls from target_pid
          IF sequence (socket, bind, listen) is seen, ALERT as potential bind shell
          IF sequence (socket, connect to external IP) is seen, ALERT as potential reverse shell

  - question: "Following a ptrace event, did a process open a listening port that is statistically rare across the enterprise?"
    context: "This question aims to find hidden backdoors by focusing on the rarity of the listening port. While an attacker might use a common port to blend in, they often use high, non-standard ports. By maintaining a baseline of all listening ports across the enterprise, we can perform a 'stack count' on any new port opened by a process post-ptrace. A port that is active on a very small percentage of hosts (e.g., <0.1%) is highly suspicious."
    answer_sources: "Linux Auditd (syscall=ptrace, socket, bind, listen, connect), Zeek conn.log. Focusing on network interfaces of all Linux hosts and network egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: An enterprise-wide baseline of listening port frequencies
          FIND ptrace events
          GET target_pid
          MONITOR for target_pid opening a new listening port
          GET listening_port
          CALCULATE frequency of listening_port across enterprise
          IF frequency < 0.1% of hosts, ALERT

  - question: "After a ptrace event, did the target process execute a sequence of network-related system calls that is improbable according to a trained model?"
    context: "This question uses a Recurrent Neural Network (RNN), which is adept at modeling sequences, to learn legitimate patterns of network-related syscalls. After a ptrace event, the subsequent syscall sequence from the target process is analyzed by the model. If the observed sequence has a very low probability under the model, it indicates a significant deviation from normal network setup behavior, which could be an attacker establishing a custom C2 channel."
    answer_sources: "Linux Auditd (syscall=ptrace, socket, bind, listen, connect), Zeek conn.log. Focusing on network interfaces of all Linux hosts and network egress points."
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          // Prerequisite: An RNN trained on legitimate sequences of network syscalls
          FIND ptrace events
          GET target_pid
          COLLECT subsequent sequence of network syscalls from target_pid
          CALCULATE probability of the sequence using the trained RNN
          IF probability is below a learned threshold, ALERT