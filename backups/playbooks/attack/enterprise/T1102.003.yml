name: T1102.003: One-Way Communication
id: d2b1f8e0-5a9c-4d3b-8f7a-1c9d0b8e4f6a
description: This playbook helps determine if an adversary is using external web services for one-way command and control (C2). It focuses on detecting outbound network connections to malicious C2 dead drop locations, identifying anomalous HTTP/S metadata (like rare User-Agents or high-entropy URLs), spotting non-browser processes initiating web connections, finding beacon-like traffic patterns with regular timing and small sizes, and flagging connections with an unusually low response-to-request byte ratio.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any internal hosts connecting to known malicious C2 dead drop domains, URLs, or IP addresses identified by threat intelligence?
    context: This question aims to detect direct connections to adversary infrastructure hosted on public file/text sharing or social media platforms. By cross-referencing outbound network traffic with a watchlist of known malicious indicators from CTI feeds, we can identify compromised hosts attempting to receive commands or exfiltrate data through one-way C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy
      - Egress Firewalls
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_logs (conn, dns, http, ssl) | JOIN threat_intel_watchlist ON (destination_ip, destination_domain, url) | WHERE match_found
  - question: Are any internal hosts exhibiting an anomalous frequency of connections to legitimate public file or text sharing services?
    context: Adversaries may use legitimate, high-reputation services for C2 to blend in with normal traffic. This question identifies hosts whose connection frequency to these services deviates significantly from their own historical baseline. A sudden spike can indicate automated C2 check-ins rather than normal user activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy
      - Egress Firewalls
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_logs | FOR_EACH source_ip | CALCULATE daily_connection_count_to (pastebin.com, gist.github.com, etc.) | COMPARE to 30-day_baseline | ALERT if count > 99th_percentile
  - question: Can we predict which outbound connections to public web services are likely C2 dead drop check-ins using a machine learning model?
    context: This question uses a supervised machine learning model to proactively identify C2 communications that may not appear on static watchlists. By analyzing a combination of features like destination domain age, ASN reputation, URL entropy, and JA3 hash, the model can score connections and flag those with a high probability of being malicious C2 activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy
      - Egress Firewalls
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE network_connections USING pre-trained_classifier | FEATURES (domain_age, ASN, IP_rep, URL_entropy, JA3) | ALERT on high_probability_c2_score
  - question: Are there any outbound HTTP/S connections to high-reputation web services that contain known indicators of malicious activity, such as non-standard User-Agents, malicious JA3/S hashes, or specific URL patterns?
    context: This question seeks to identify C2 traffic hiding within connections to legitimate services. It uses specific, high-fidelity indicators like User-Agent strings associated with scripting tools (e.g., Python, curl), JA3/S hashes of known malware, or URL structures common to C2 frameworks to pinpoint malicious connections that would otherwise appear benign.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy and Egress Firewalls with TLS Inspection Capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH http_ssl_logs | FILTER destination is high_reputation_service | MATCH on (user_agent in (Python*, curl*, ...), ja3_hash in (malicious_hashes), url matches regex('/raw/...')) | ALERT on match
  - question: Are there any connections to high-reputation domains that exhibit a combination of a rare User-Agent and a high-entropy URL path?
    context: This question identifies outliers by combining two statistical anomalies. A rare User-Agent suggests an uncommon client, while a high-entropy URL can indicate encoded data or unique identifiers used in C2 communications. The combination of both in a single connection is highly suspicious and indicative of non-standard, potentially automated activity.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy and Egress Firewalls with TLS Inspection Capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH http_logs | CALCULATE user_agent_prevalence and url_path_entropy | FILTER destination is high_reputation_service | ALERT where user_agent_prevalence < 5th_percentile AND url_path_entropy > 95th_percentile
  - question: Are new or anomalous groups of clients appearing on the network, based on their TLS fingerprints (JA3 hashes)?
    context: This question uses unsupervised machine learning to detect the introduction of new malicious tools. By clustering JA3 hashes, we can group clients with identical TLS implementations. A new, small cluster appearing, or a host moving from a large, common cluster (like Chrome) to a small, distinct one, can signal the execution of a new C2 tool on that host.
    answer_sources:
      - Zeek http.log
      - Zeek ssl.log
      - Enterprise Web Proxy and Egress Firewalls with TLS Inspection Capabilities
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH ssl_logs | EXTRACT ja3_hash | CLUSTER ja3_hashes using DBSCAN/K-Means | MONITOR for new_small_clusters or hosts_migrating_clusters | ALERT on anomalous cluster behavior
  - question: Are any non-browser system processes (e.g., powershell.exe, rundll32.exe) making direct outbound connections to the internet on web ports?
    context: This question aims to detect living-off-the-land techniques where adversaries use legitimate system utilities for C2. By correlating process execution events with network logs, we can identify when processes that shouldn't be browsing the web (like PowerShell or the command-line script host) initiate connections to external IP addresses on ports 80 or 443.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Workstations
      - Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_logs (event_id=4688) AND network_logs (dest_port in (80, 443)) | JOIN on source_ip and time (<2s) | FILTER process_name in (powershell.exe, rundll32.exe, ...) | ALERT on match
  - question: Has any host initiated an external network connection from a process (or parent-process pair) that has never done so before on that host?
    context: This question establishes a behavioral baseline for each host, learning which processes normally connect to the internet. An alert is generated when a new process, or a process spawned by an unusual parent, makes an external connection. This is effective for detecting when malware or an attacker uses a pre-existing tool in an uncharacteristic way for C2.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Workstations
      - Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH host | BUILD_BASELINE of {process_name, parent_process_name} tuples that make external connections | MONITOR for new tuples | ALERT on new_tuple_observation
  - question: Can we use a machine learning model to detect anomalous network activity originating from host processes?
    context: This question applies an autoencoder, a type of neural network, to learn the normal pattern of network-initiating processes. The model is trained on features like process name, command line details, and connection properties. Processes whose activity the model cannot accurately 'reconstruct' are flagged as anomalous, indicating a deviation from established normal behavior that could be C2.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Workstations
      - Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN autoencoder_model on process_network_features (process_name, parent_process, cmd_line_entropy, dest_port, etc.) | SCORE new process activity | ALERT on high_reconstruction_error
  - question: Is any internal host communicating with an external destination using highly regular, machine-like timing and small, consistent data packets?
    context: This question looks for the classic 'heartbeat' of C2 beaconing. By calculating the standard deviation of time between connections (jitter), we can distinguish automated, periodic traffic from sporadic, human-driven activity. A very low jitter, combined with small, uniform request sizes, is a strong indicator of a C2 beacon.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Core Network Switches
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH src_dst_pair in conn_logs (1hr_window) | CALCULATE time_delta_stdev and avg_orig_bytes | ALERT if count > 10 AND time_delta_stdev < 1s AND avg_orig_bytes < 512
  - question: Are there any source-destination communication pairs that are unusually consistent in both their timing and data size compared to all other network traffic?
    context: This question uses a statistical approach to find beaconing behavior that is anomalous relative to the entire network's traffic patterns. By identifying communication flows where both the inter-arrival time and the request size have extremely low variance (e.g., in the bottom 1st percentile), we can find highly structured, robotic C2 communications that stand out from the noise of normal network activity.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Core Network Switches
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH src_dst_pair | CALCULATE iat_std and orig_bytes_std over 1hr_window | FIND 1st_percentile_thresholds for all traffic | ALERT if iat_std < threshold AND orig_bytes_std < threshold
  - question: Can we detect periodic signals indicative of C2 beaconing within network traffic time series data?
    context: This question applies signal processing techniques to network traffic analysis. By converting a time series of connection events into the frequency domain using a Fast Fourier Transform (FFT), we can easily spot strong periodic components. A sharp peak in the frequency spectrum is a powerful mathematical indicator of a beaconing signal, even if the timing has some jitter.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Core Network Switches
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH src_dst_pair | CREATE connection_time_series | APPLY Fast_Fourier_Transform | ANALYZE frequency_spectrum | ALERT on strong_sharp_peak (dominant_frequency)
  - question: Are there any outbound web connections where the amount of data sent by the client is nearly equal to or greater than the data received in the response?
    context: This question identifies a fundamental anomaly in web traffic. Normal web browsing involves a small request (GET /page) followed by a much larger response (the page content). C2 check-ins or data uploads often reverse this, with the client sending data and receiving a small acknowledgement. A response/request byte ratio close to or less than 1 is highly indicative of this non-standard, one-way communication.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH conn_logs | FILTER conn_state='SF' AND dest_port in (80, 443) | CALCULATE ratio = resp_bytes / orig_bytes | ALERT if orig_bytes > 0 AND ratio < 1.1
  - question: Is any host's daily average traffic profile shifting towards a lower response-to-request byte ratio compared to its own history?
    context: This question establishes a baseline of normal byte-ratio behavior for each host. A significant drop in this ratio indicates a change in the host's communication patterns, suggesting it may have started performing C2 check-ins or data uploads where it sends more data than it receives. This detects a behavioral shift on the host.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR_EACH source_ip | CALCULATE 30-day_rolling_avg_and_std of (resp_bytes / orig_bytes) ratio | MONITOR daily_avg_ratio | ALERT if daily_avg < (historical_avg - 2 * historical_std)
  - question: Can an unsupervised machine learning model identify network connections that are anomalous based on their byte ratio and other connection features?
    context: This question uses an Isolation Forest algorithm to find 'the needle in the haystack.' The model learns what multi-featured normal traffic looks like (considering byte ratio, duration, packet counts, etc.) and can then quickly 'isolate' and score connections that don't fit the pattern. This is effective at finding novel C2 techniques that might not be caught by specific ratio thresholds alone.
    answer_sources:
      - Zeek conn.log
      - Egress Firewalls
      - Network Taps
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN isolation_forest_model on connection_features (byte_ratio, duration, pkts, protocol) | SCORE new connections | ALERT on high_anomaly_score