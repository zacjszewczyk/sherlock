name: T1036.006: Space after Filename
id: f3d9a1c8-8b7a-4e6f-9d1c-2b0a3e8d7c6b
description: This playbook helps investigate whether an adversary is attempting to evade defenses by executing a payload from a file with a trailing space in its name. This involves looking for processes created from executables with trailing spaces, especially when the file hash matches known malware, the process mimics a legitimate system binary in a non-standard path, or it initiates suspicious outbound network connections. It also covers monitoring for the creation of files with trailing spaces in common staging directories and identifying processes with trailing spaces that have unusual parent-child relationships.
type: technique
related:
  - TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process running from an executable with a trailing space in its filename a known piece of malware?
    context: Adversaries add trailing spaces to filenames to evade simple name-based blocklists or detection rules. By checking the file hash of such executables against threat intelligence feeds, an analyst can quickly determine if a process with a seemingly benign name (e.g., 'document.docx ') is actually a known malicious tool. This helps prioritize incidents and confirm malicious intent early in the investigation.
    answer_sources:
      - Centralized SIEM/log aggregator containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name ENDS_WITH " " | GET file_hash | LOOKUP threat_intelligence file_hash
  - question: How prevalent is a given executable with a trailing space across the enterprise?
    context: Stack counting, or determining the prevalence of a file hash, helps differentiate between widespread, possibly benign software and rare, potentially malicious files. A file hash associated with a process having a trailing space that is found on only a few systems is highly suspicious and warrants immediate investigation, as it could indicate a targeted attack or a newly introduced tool.
    answer_sources:
      - Centralized SIEM/log aggregator containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name ENDS_WITH " " | STATS count(hosts) BY file_hash | SORT count(hosts) ASC
  - question: Can a machine learning model identify high-risk processes that have a trailing space in their filename?
    context: This question explores using machine learning to automate the detection of malicious processes that use trailing spaces. By training a model on features like filename properties, file hash prevalence, and parent process information, a risk score can be assigned to new events. This automates the triaging process, allowing analysts to focus on the highest-risk executions and reduce noise from benign administrative actions or software quirks that might also involve trailing spaces.
    answer_sources:
      - Centralized SIEM/log aggregator containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PROCESS process_creation_logs WHERE process_name ENDS_WITH " " | EXTRACT features (filename_entropy, hash_prevalence, parent_process_details) | APPLY classification_model | OUTPUT risk_score
  - question: Is a process with a trailing space in its name masquerading as a critical system process?
    context: Adversaries often name their malware after legitimate system processes like 'svchost.exe' or 'lsass.exe' to blend in. By adding a trailing space (e.g., 'svchost.exe '), they can bypass simple name-matching detections. This question focuses on finding these masquerading attempts by specifically looking for well-known system process names followed by a space, especially when they are running from an unexpected directory (e.g., not C:\Windows\System32).
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN watchlist_of_system_processes_with_trailing_space | FILTER process_path NOT IN standard_system_paths
  - question: Is a process with a trailing space, masquerading as a system process, executing from an anomalous path or with an unusual parent process?
    context: Legitimate system processes have predictable execution patterns, including their file path and parent process. This question aims to identify masquerading by baselining these normal patterns and then looking for deviations. An execution of 'svchost.exe ' from a user's 'Downloads' folder or being spawned by 'winword.exe' is a significant anomaly. Identifying statistically rare combinations of path and parent for these processes is a strong indicator of malicious activity.
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN watchlist_with_trailing_space | LOOKUP baseline_of_path_and_parent | FILTER is_rare_combination
  - question: Can unsupervised machine learning (clustering) distinguish a masquerading process with a trailing space from legitimate system processes?
    context: This question proposes an advanced, data-driven approach to find masquerading processes. By clustering all process executions based on features like name, command line, and path, legitimate system processes will form large, dense clusters. A malicious process masquerading with a trailing space will have different feature values and will therefore fall outside these normal clusters, being identified as a statistical outlier or noise point. This method can detect novel masquerading attempts without relying on predefined rules.
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PROCESS all_process_creation_logs | EXTRACT features (process_name, command_line, parent_process, file_path) | APPLY clustering_algorithm | IDENTIFY outliers | FILTER outlier_process_name ENDS_WITH " "
  - question: Has a file with a trailing space in its name been created in a common staging directory?
    context: Adversaries often stage their tools and payloads in temporary or user-writable directories (e.g., C:\Windows\Temp, AppData) before execution. This question focuses on detecting the initial placement of a malicious file that uses a trailing space for evasion. Monitoring for file creation events with this characteristic in high-risk locations can provide an early warning of an impending attack, even before the file is executed.
    answer_sources:
      - Centralized log aggregator containing file system audit logs (Windows Event ID 4663, Sysmon Event ID 11) from endpoints, file servers, and web servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_creation_logs WHERE filename ENDS_WITH " " AND directory IN high_risk_staging_directories
  - question: Is there a statistical anomaly, such as high filename entropy or an unusual rate of creation, associated with files having trailing spaces in staging directories?
    context: This question aims to find suspicious staging activity by looking beyond simple file creation. Adversaries might use randomized filenames (leading to high entropy) to avoid static indicators. A sudden spike in the entropy of filenames created by a user, or a user creating an unusually high number of files with trailing spaces, can be a statistical indicator of automated malware or staging activity. This helps detect malicious behavior that might otherwise be lost in the noise of normal file operations.
    answer_sources:
      - Centralized log aggregator containing file system audit logs (Windows Event ID 4663, Sysmon Event ID 11) from endpoints, file servers, and web servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH file_creation_logs WHERE directory IN staging_dirs | CALCULATE filename_entropy, rate_of_trailing_space_files_per_user | ALERT on statistical_outliers (e.g., >2 std dev from baseline)
  - question: Can a one-class anomaly detection model identify file creation events with trailing spaces as deviations from normal activity?
    context: This question proposes using a model trained only on 'normal' data to find anomalies. By training a One-Class SVM on legitimate file creation events in temp directories, the model learns the boundary of normal behavior. Any new file creation, such as one with a trailing space and other unusual features (e.g., creating process, extension), that falls outside this boundary is flagged as an anomaly. This is effective for detecting novel attack patterns without needing prior examples of malicious behavior.
    answer_sources:
      - Centralized log aggregator containing file system audit logs (Windows Event ID 4663, Sysmon Event ID 11) from endpoints, file servers, and web servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: PROCESS legitimate_file_creation_logs | TRAIN one_class_svm_model | APPLY model to new_file_creation_events | IDENTIFY outliers | FILTER outlier_filename ENDS_WITH " "
  - question: Did a process with a trailing space in its filename make a network connection to a known malicious destination?
    context: A key goal for malware is to establish command and control (C2). This question aims to detect this by linking a process using the trailing space evasion technique to its subsequent network activity. By correlating the process creation event with network connection logs and checking the destination against threat intelligence, an analyst can confirm that the suspicious process is communicating with a known malicious C2 server, providing high-confidence evidence of a compromise.
    answer_sources:
      - SIEM containing aggregated logs from network egress points (Zeek conn.log, Zeek dns.log), DNS servers, and all endpoints (Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN process_creation_logs (WHERE process_name ENDS_WITH " ") WITH network_connection_logs (ON host, WITHIN 60s) | LOOKUP threat_intelligence destination_ip_or_domain
  - question: Did a process with a trailing space connect to a statistically rare or suspicious domain?
    context: Even if a destination domain isn't on a threat list, it can still be suspicious. Adversaries often use newly registered domains (DGA) or domains that are rarely visited. This question focuses on identifying these by analyzing the properties of the destination domain. A connection from a process using a trailing space to a brand new, unpopular, and internally rare domain is a strong statistical indicator of C2 activity that might otherwise be missed.
    answer_sources:
      - SIEM containing aggregated logs from network egress points (Zeek conn.log, Zeek dns.log), DNS servers, and all endpoints (Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connections FROM process_with_trailing_space | GET destination_domain | ENRICH with_domain_age, popularity, internal_prevalence | ALERT on rare_domains (e.g., age < 30 days AND internal_prevalence < 0.1%)
  - question: Did a process with a trailing space cause an anomalous spike in outbound network traffic, possibly indicating data exfiltration?
    context: This question aims to detect data exfiltration or heavy C2 communication by modeling a host's normal network behavior. Using a time series model, we can forecast the expected outbound data volume. If, after a process with a trailing space executes, the actual data volume significantly exceeds this forecast, it's a strong anomaly. This indicates that the process is performing unexpected network activity, which could be data being stolen from the network.
    answer_sources:
      - SIEM containing aggregated logs from network egress points (Zeek conn.log, Zeek dns.log), DNS servers, and all endpoints (Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FORECAST host_outbound_traffic_baseline | MONITOR for actual_traffic > forecast_confidence_interval | CORRELATE spike with execution_of_process_with_trailing_space
  - question: Was a process with a trailing space spawned by an unexpected parent process?
    context: Legitimate software follows predictable execution chains (e.g., 'services.exe' starts 'svchost.exe'). Adversaries often break these patterns, for example, by having a Microsoft Office application spawn a command shell. This question focuses on detecting such violations when the child process is also using the trailing space evasion technique. An alert on a rule violation like 'winword.exe' -> 'svchost.exe ' is a high-fidelity indicator of compromise.
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE child_process_name ENDS_WITH " " | FILTER parent_child_pair VIOLATES predefined_rules
  - question: Does a process with a trailing space have a statistically rare parent-child relationship?
    context: This question provides a data-driven way to find anomalous parent-child relationships without predefined rules. By calculating the frequency of all parent-child pairs across the enterprise, we can establish a baseline of what's common. When a process with a trailing space is created, we can check how rare its parent-child relationship is. A pair that has almost never been seen before (e.g., in the bottom 1% of frequency) is a strong statistical anomaly that warrants investigation.
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE child_process_name ENDS_WITH " " | LOOKUP parent_child_pair_frequency | ALERT if frequency < 1st_percentile
  - question: Can graph analysis identify a process with a trailing space as a structural anomaly in the enterprise's process execution graph?
    context: This advanced analytical question treats the enterprise's entire process activity as a large graph. Normal software behavior forms dense 'communities' or clusters within this graph. A malicious process, especially one using evasion techniques like a trailing space, will often create an execution chain that doesn't fit into these normal communities. Using graph algorithms, we can identify these processes as structural anomalies, providing a powerful way to detect sophisticated and novel attack paths.
    answer_sources:
      - SIEM containing process creation logs (Windows Event ID 4688, Sysmon Event ID 1) from all enterprise endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process_ancestry_graph | APPLY community_detection_algorithm | IDENTIFY nodes_outside_communities | FILTER node_process_name ENDS_WITH " "