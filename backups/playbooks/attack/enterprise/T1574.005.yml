name: T1574.005: Executable Installer File Permissions Weakness
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary is exploiting weak file permissions on executable installers for persistence, privilege escalation, or defense evasion (MITRE ATT&CK T1574.005). Key investigative activities include looking for modifications to service executables followed by anomalous process or network activity; examining instances where files written by low-integrity processes are executed with high privileges; searching for system-level processes running from unusual, user-writable locations; and identifying when trusted, signed executables are overwritten with unsigned or improperly signed versions, often leading to core service processes spawning command shells or other unexpected children.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: >-
      Is there evidence of a service executable being modified and then immediately started, leading to the launch of a command interpreter?
    context: >-
      This question investigates a common persistence technique where an adversary replaces a legitimate service's executable with a malicious one. By monitoring for a rapid sequence of a file write, a service start, and the spawning of a command shell (like cmd.exe or powershell.exe), analysts can detect attempts to hijack services. The new executable, running with the service's permissions, provides the adversary with persistent access.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND file_write OR file_create events (Sysmon 11, Win 4663) to known service executable paths
          JOIN with service_start events (Win 7036) for the same service within 60 seconds
          JOIN with process_create events (Sysmon 1, Win 4688) from that service process
          WHERE child process is cmd.exe OR powershell.exe
          ALERT on any match
  - question: >-
      Has a service spawned a child process with an unusually complex or obfuscated command line?
    context: >-
      Adversaries often use obfuscation to hide their commands. This question aims to detect this by baselining the normal command-line arguments for child processes of services and looking for outliers. A high Shannon entropy score can indicate a randomized or encoded command, which is a strong indicator of malicious activity, especially when spawned by a system service that typically has predictable behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each service parent process:
            BASELINE legitimate child processes and their command-line arguments over time.
          FOR each new child process creation:
            CALCULATE Shannon entropy of the command line.
            ALERT if entropy > 95th percentile for that parent service.
  - question: >-
      Is there an anomalous sequence of file write, service start, and process creation events on any host?
    context: >-
      This question uses machine learning to identify novel attack patterns that might not be caught by simple correlation rules. By training a model like an LSTM Autoencoder on normal sequences of system events, we can detect when an observed sequence is highly unusual (has a high reconstruction error). This approach can uncover sophisticated service hijacking techniques that deviate from known patterns.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Sysmon Event 1
      - Sysmon Event 11
      - Zeek conn.log
      - Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM Autoencoder model on triplets of (file_write, service_start, process_create) events per host.
          FOR each new event triplet:
            CALCULATE reconstruction error using the trained model.
            ALERT if error is above a learned threshold, indicating an anomaly.
  - question: >-
      Has a Windows Service process spawned a command shell or connected to a known malicious IP or domain?
    context: >-
      This is a direct and high-confidence question to identify compromised services. Legitimate Windows services rarely, if ever, need to spawn a command shell or connect to external addresses found on threat intelligence feeds. Such an event is a strong indicator that the service has been hijacked for command and control (C2) or to execute further malicious commands.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND process_create events (Sysmon 1) where parent is a service.
          WHERE child process is cmd.exe, powershell.exe, etc.
          OR
          FIND network_connection events (Sysmon 3) from a service process.
          WHERE destination IP/domain is on a threat intelligence list.
          ALERT on any match.
  - question: >-
      Is a service exhibiting anomalous network behavior, such as connecting to a rare port or sending an unusually large amount of data?
    context: >-
      This question aims to detect C2 activity or data exfiltration from a compromised service by baselining its normal network patterns. An adversary might use a common service process to blend in, but its network activity will likely deviate from the norm. Monitoring for statistically significant changes in destination ports, data volume, or connection frequency can reveal this covert activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each service process:
            PROFILE typical network behavior (destination ports, data volume, frequency) using Sysmon 3 and Zeek data.
          FOR each new network connection:
            ALERT if destination port is in the 99th percentile of rarity for that service.
            ALERT if outbound data volume is > 3 standard deviations above the daily average.
  - question: >-
      Has a critical service process suddenly generated a spike in network traffic that exceeds forecasted levels?
    context: >-
      This question applies time-series forecasting to network traffic to detect anomalies that might indicate C2 or data exfiltration. By creating a predictive model for the data volume of critical services, we can automatically flag periods where the actual traffic significantly exceeds the expected range (the confidence interval), pointing to a potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Sysmon Event 1
      - Sysmon Event 3
      - Zeek conn.log
      - Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each critical service process:
            TRAIN a time-series forecasting model (e.g., ARIMA) on historical network data volume.
          FOR each new time interval:
            FORECAST expected data volume and confidence interval.
            ALERT if observed volume exceeds the upper bound of the confidence interval.
  - question: >-
      Has an executable file been written by a low-privilege process and then executed by a high-privilege process shortly after?
    context: >-
      This question targets a classic privilege escalation pattern. An adversary with low or medium integrity access writes a malicious executable to a location they can control. They then trick a high-integrity process (often through a vulnerable service or scheduled task) into executing that file. Correlating a file write from a low-integrity process with a subsequent execution by a high/system integrity process within a short time window is a strong indicator of this technique.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND file_create events (Sysmon 11) for an executable file.
          WHERE creating process IntegrityLevel is 'Medium' or 'Low'.
          JOIN with process_create events (Sysmon 1) for the same file path within 5 minutes.
          WHERE new process IntegrityLevel is 'High' or 'System'.
          ALERT on any match.
  - question: >-
      Is a process running with SYSTEM integrity from a statistically rare, user-writable location?
    context: >-
      Processes running as 'NT AUTHORITY\SYSTEM' have the highest level of privilege on a Windows system and should almost always execute from protected system directories. An adversary might place a malicious executable in a user-writable location (like C:\Users\Public) and cause it to be run as SYSTEM. This question identifies such anomalies by baselining all execution paths for SYSTEM processes and flagging any that are statistically rare across the enterprise.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR process_create events (Sysmon 1) where IntegrityLevel is 'System'.
          CALCULATE the frequency of each executable path in user-writable locations (e.g., 'C:\Users\*').
          ALERT if a SYSTEM process executes from a path that has occurred < 5 times in the last 90 days.
  - question: >-
      Is there a novel process-file interaction sequence that represents a low-to-high integrity privilege escalation path?
    context: >-
      This question uses a graph-based approach to model system activity and detect privilege escalation. The entire sequence—a low/medium integrity process writing a file, which is then executed by a high/system integrity process—can be represented as a path in a graph. By identifying when such a path appears for the first time in the environment, a graph anomaly detection model can flag novel or previously unseen escalation techniques.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event 1
      - Sysmon Event 11
      - File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL process-file interactions as a graph (nodes=processes/files, edges=actions).
          SEARCH for graph paths matching: 'Low/Medium Integrity Process' -> [writes] -> 'File' -> [executed by] -> 'High/System Integrity Process'.
          ALERT if the identified path is novel to the environment's graph model.
  - question: >-
      Is a process running as 'NT AUTHORITY\SYSTEM' from an unusual directory like a user's profile or temporary folder?
    context: >-
      This is a high-fidelity alert for potential privilege escalation. SYSTEM-level processes should not originate from user-writable directories like 'C:\Users\', 'C:\ProgramData', or temporary application data folders. An exception might be a legitimate software installer, which should be explicitly excluded. Any other occurrence is highly suspicious and indicates a likely compromise or misconfiguration being exploited.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND process_create events (Sysmon 1).
          WHERE 'User' is 'NT AUTHORITY\SYSTEM'
          AND 'Image' path starts with 'C:\Users\', 'C:\ProgramData', 'C:\PerfLogs', or contains '\AppData\'.
          EXCLUDE known good software installers from the results.
          ALERT on any remaining matches.
  - question: >-
      Has a SYSTEM-level process executed from a path that is extremely rare across the entire enterprise?
    context: >-
      This question leverages the power of enterprise-wide data to spot outliers. While an execution path might be seen on one machine due to a specific software installation, if that same path is nearly unique across thousands of endpoints, it becomes highly suspect. By calculating the frequency of all SYSTEM process execution paths, we can flag those in the bottom percentile as potential threats that warrant investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE all execution paths for processes running as 'NT AUTHORITY\SYSTEM' over 30 days.
          CALCULATE the frequency of each path across the enterprise.
          ALERT when a new SYSTEM process executes from a path in the bottom 1st percentile of frequency.
  - question: >-
      Is there a SYSTEM-level process execution that is an outlier compared to normal system behavior clusters?
    context: >-
      This question uses unsupervised machine learning to find "unknown unknowns." By clustering all SYSTEM-level process executions based on features like image path, parent process, and command line arguments, we can define what "normal" looks like. Any new execution that does not fit into an established cluster (i.e., is flagged as noise or an outlier by an algorithm like DBSCAN) is considered anomalous and potentially malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\Users, C:\ProgramData, and C:\Windows\Temp.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTER SYSTEM-level process executions (Sysmon 1) using features like image path, parent path, and command line.
          IDENTIFY and label clusters of normal behavior.
          ALERT on any new execution that is classified as an outlier or noise by the clustering model.
  - question: >-
      Has a signed executable in a protected system directory been replaced with a file that is unsigned, has an invalid signature, or is signed by an untrusted publisher?
    context: >-
      This question targets a defense evasion technique known as file hijacking or masquerading. Adversaries overwrite a legitimate, trusted executable (e.g., a Windows binary) with their own malware. By correlating file modification events with subsequent module load events for the same file, we can check the signature status. A change from a valid signature to an invalid, unsigned, or untrusted one is a critical indicator of a compromise.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND file_create events (Sysmon 11) in protected paths (e.g., C:\Windows\System32).
          JOIN with subsequent image_load events (Sysmon 7) for the same file.
          WHERE 'SignatureStatus' is 'Invalid' or 'Unsigned' OR 'Signature' is not on an allowlist of trusted publishers.
          ALERT on any match.
  - question: >-
      Has a signed executable been modified by a file signed by a publisher that is extremely rare in the environment?
    context: >-
      Adversaries may sign their malware with a self-signed certificate or a newly created code-signing certificate to appear more legitimate. This question aims to defeat that by baselining all software publishers seen across the enterprise. If a file modification occurs and the new file is signed by a publisher seen on a tiny fraction of endpoints (e.g., <0.1%), it is highly suspicious and could indicate an attempt to hijack a trusted application.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN a baseline of all software publishers seen via Sysmon logs.
          FOR each file modification on a signed executable:
            CALCULATE the prevalence of the new file's publisher across the enterprise.
            ALERT if the publisher is present on fewer than 0.1% of endpoints.
  - question: >-
      Can we distinguish between a legitimate software update and a suspicious modification of a critical system file using a machine learning model?
    context: >-
      This question proposes a more advanced, supervised learning approach to reduce false positives from legitimate patch management. By training a classifier (like a Random Forest) with features that characterize both good and bad file modifications—such as the parent process (e.g., 'trustedinstaller.exe' is good), time of day, and signature changes—we can build a high-fidelity detection that automatically flags modifications that don't fit the profile of a legitimate update.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event 7
      - Sysmon Event 11
      - File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\System32') on all endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a classification model (e.g., Random Forest) on features of file modifications (source process, time, path, signature change).
          LABEL events as 'legitimate update' or 'suspicious modification'.
          APPLY the model to new file modification events.
          ALERT on 'suspicious modification' classifications for critical files.
  - question: >-
      Has a core service host process like 'services.exe' or 'svchost.exe' spawned a command-line interpreter or scripting engine?
    context: >-
      This is a very strong indicator of defense evasion and persistence. Core Windows processes like 'services.exe' and 'svchost.exe' should never directly spawn interactive shells or scripting engines (cmd.exe, powershell.exe, wscript.exe, etc.). Such an event almost certainly indicates that a service has been compromised and is being used to execute arbitrary commands on behalf of an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FIND process_create events (Sysmon 1).
          WHERE 'ParentImage' is 'services.exe' or 'svchost.exe'.
          AND child 'Image' is 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or 'rundll32.exe'.
          ALERT on any match.
  - question: >-
      Has a critical parent process like 'svchost.exe' spawned a child process that is statistically very rare or has never been seen before?
    context: >-
      While 'svchost.exe' hosts many different services and can have many legitimate child processes, the overall set of children is still relatively predictable within an enterprise. This question involves baselining all historical parent-child relationships for critical processes. When a new child process appears that is either entirely novel or falls in the lowest percentile of historical frequency, it signifies a deviation from the norm that could be malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each critical parent process (e.g., svchost.exe):
            CREATE a frequency table of all its historical child process names.
          FOR each new child process creation:
            ALERT if the child process name has never been seen before for that parent.
            ALERT if the child process name is in the lowest 1st percentile of historical frequency.
  - question: >-
      Is there an anomalous parent-child process relationship involving a trusted service host, as identified by a graph-based model?
    context: >-
      This question uses a sophisticated graph neural network to learn the "normal" process tree of an operating system. The model understands which processes are expected to spawn which children. When a new relationship (an "edge" in the graph) is created, such as 'svchost.exe' spawning a previously unknown binary, the model can flag this as a high-probability anomaly, providing a powerful way to detect novel evasion techniques.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event 1
      - Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a graph neural network on normal parent-child process relationships.
          FOR each new process creation event:
            EVALUATE the new relationship (graph edge) with the model.
            ALERT if the model flags the relationship as a high-probability anomaly, especially if the parent is a trusted service host.