name: T1521.003: SSL Pinning
id: e8a3a2b1-5e6f-4c9a-8b7d-6c1f0e9a4b3c
description: |
  This playbook helps answer the question: Is an adversary using SSL Pinning to conceal Command and Control communications on our mobile devices? It focuses on detecting SSL/TLS pinning by analyzing network traffic and application packages. Key indicators include: a measurable increase in TLS handshake failures when traffic is proxied, indicating the application rejects the proxy's certificate; the use of self-signed or certificates from rare Certificate Authorities (CAs), suggesting a non-standard trust store; and the presence of code, libraries, or configurations within the mobile application package specifically designed for implementing SSL pinning.
type: technique
related:
- TA0037: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are we observing a spike in TLS handshake failures from mobile devices to domains not on an approved watchlist, which also match known C2 domains?
  context: |
    This question aims to find direct evidence of SSL pinning by identifying its primary symptom: failed TLS handshakes when an inspecting proxy is present. By filtering out connections to known, legitimate services and correlating the remaining failures with threat intelligence feeds of malicious Command and Control (C2) domains, analysts can focus on high-probability threats.
  answer_sources:
  - Zeek ssl.log
  - Zeek conn.log
  - Network traffic egress points for mobile device VLANs
  - DHCP server logs
  - Mobile Device Management (MDM) logs
  - Threat intelligence feed
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH logs from mobile device IP ranges
      CORRELATE Zeek ssl.log and conn.log using 'uid'
      FILTER where ssl.validation_status is not 'ok'
      AND conn.conn_state indicates failure (e.g., 'REJ', 'RST0')
      AND ssl.server_name is NOT in a pre-approved application watchlist
      AND ssl.server_name MATCHES a known malicious C2 domain feed
      ALERT on match
- question: Is any mobile application exhibiting a statistically significant increase in TLS validation failures compared to its historical baseline?
  context: |
    This question uses statistical baselining to detect anomalous behavior. By establishing a normal pattern of TLS failures for each application (approximated by server name), a sudden spike that exceeds a statistical threshold (e.g., three standard deviations above the mean) can indicate a change in the application's behavior, such as the recent implementation of SSL pinning. This method helps detect pinning without prior knowledge of the C2 domain.
  answer_sources:
  - Zeek ssl.log
  - Zeek conn.log
  - Network traffic egress points for mobile device VLANs
  - DHCP server logs
  - Mobile Device Management (MDM) logs
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each application (ssl.server_name) from mobile IP ranges:
        CALCULATE 30-day mean and standard deviation of hourly TLS validation failures
        CALCULATE current hourly failure count
        ALERT if current count > (mean + 3 * standard_deviation)
- question: Does a time-series anomaly detection model identify any statistically improbable spikes in TLS validation failures for a specific mobile application?
  context: |
    This question proposes a more advanced analytical method than simple statistical thresholds. A time-series model (like ARIMA or Prophet) can learn complex patterns, including daily and weekly seasonality, in an application's TLS failure rate. An alert is triggered only when a spike in failures is statistically improbable according to the model's forecast, leading to higher-fidelity alerts and fewer false positives from predictable usage patterns.
  answer_sources:
  - Zeek ssl.log
  - Zeek conn.log
  - Network traffic egress points for mobile device VLANs
  - DHCP server logs
  - Mobile Device Management (MDM) logs
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each application (ssl.server_name):
        TRAIN time-series model on historical (e.g., 30+ days) hourly TLS failure counts
        FORECAST expected failure count and confidence interval for the current hour
        ALERT if observed failure count significantly exceeds the forecasted confidence interval
- question: Are mobile devices successfully connecting to servers using self-signed certificates, and do these servers or certificates match known threat indicators?
  context: |
    This question looks for a classic indicator of SSL pinning where an application successfully communicates using a certificate that is not trusted by the device's standard operating system. A self-signed certificate (where the issuer is also the subject) is a strong sign of a custom trust relationship. Correlating these events with threat intelligence on known malicious certificate hashes or server names elevates the finding to a high-priority alert.
  answer_sources:
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  - Threat intelligence platform
  - Mobile Device Management (MDM) platforms
  - Certificate Transparency (CT) logs
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH logs from mobile device IP ranges
      CORRELATE conn.log, ssl.log, and x509.log
      FILTER where conn.conn_state is 'SF' (successful)
      AND x509.certificate.issuer equals x509.certificate.subject
      AND (x509.id (SHA1 hash) OR ssl.server_name MATCHES threat intelligence feed)
      ALERT on match
- question: Are mobile devices connecting to high-entropy domains using certificates from statistically rare Certificate Authorities?
  context: |
    This question combines two powerful indicators of compromise. A rare Certificate Authority (CA) suggests the adversary is using a custom or private CA for their C2 infrastructure. A high-entropy server name suggests the domain is algorithmically generated, a common tactic for evading blocklists. The combination of a successful connection from a mobile device to a high-entropy domain using a rarely seen CA is highly indicative of malicious activity leveraging SSL pinning.
  answer_sources:
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  - Certificate Transparency (CT) logs
  range: last 90 days
  queries:
  - pseudocode: |
      CALCULATE frequency distribution of all x509.certificate.issuer over last 90 days
      DEFINE 'rare issuers' as those below a frequency threshold (e.g., 0.05%)
      FOR each successful connection from mobile IPs:
        CALCULATE Shannon entropy of ssl.server_name
        ALERT if certificate issuer is in 'rare issuers' list
        AND server name entropy is high (e.g., > 3.5)
- question: Can a machine learning model, trained on various TLS session features, identify high-risk connections from mobile devices indicative of SSL pinning?
  context: |
    This question describes a sophisticated, data-driven approach. By training a supervised machine learning model (e.g., Random Forest) on a rich set of features from TLS sessions (e.g., certificate details, issuer rarity, JA3/JA3S hashes, connection duration, bytes transferred), the system can learn the subtle, combined characteristics of malicious pinned connections. This allows for the detection of novel threats that may not be caught by signature- or rule-based methods.
  answer_sources:
  - Zeek x509.log
  - Zeek ssl.log
  - Zeek conn.log
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each new TLS session from a mobile device:
        EXTRACT features (is_self_signed, issuer_rarity, validity_period, server_name_entropy, JA3_frequency, etc.)
        INPUT features into pre-trained classification model
        CALCULATE malicious probability score
        ALERT if score exceeds a defined threshold (e.g., > 0.9)
- question: Do any new or updated mobile applications, which are not on an approved list, contain code or libraries known to be used for SSL pinning?
  context: |
    This question focuses on proactive threat hunting through static analysis. By automatically scanning application packages (APKs, IPAs) before or during deployment, an organization can identify the presence of known pinning libraries (like OkHttp's CertificatePinner or TrustKit) or specific code patterns. If an application that has no legitimate business reason for pinning contains these indicators, it can be flagged for review before it poses a risk on the network.
  answer_sources:
  - Mobile Application Package (APK, IPA)
  - Static Analysis Tool Output (e.g., MobSF JSON report)
  - Application Manifest Files (e.g., AndroidManifest.xml)
  - Analyst sandbox environment
  range: last 90 days
  queries:
  - pseudocode: |
      ON new or updated application package:
        SCAN package with static analysis tool (e.g., MobSF)
        SEARCH decompiled code and configs for pinning keywords (e.g., 'CertificatePinner', '<pin-set>')
        CHECK if application is on approved list for using pinning
        ALERT if keywords are found and application is not on the approved list
- question: Are there any mobile applications that are statistical outliers in their use of network security configurations, such as implementing pinning when similar apps do not?
  context: |
    This question applies peer group analysis to application configurations. It's unusual for a simple application in a category like 'productivity' to implement strict security controls like pinning if its peers do not. By parsing manifest and network configuration files, this method identifies such outliers. An application that deviates significantly from its functional group in its security posture warrants investigation, especially if it also communicates with low-reputation domains.
  answer_sources:
  - Mobile Application Package (APK, IPA)
  - Application Manifest Files (e.g., AndroidManifest.xml)
  - Mobile Device Management (MDM) or Mobile Application Management (MAM) platform
  range: last 90 days
  queries:
  - pseudocode: |
      FOR all managed applications:
        PARSE manifest and network security configuration files
        IDENTIFY applications that implement pinning
        CATEGORIZE applications by function (e.g., 'productivity', 'social')
        ALERT if an application implements pinning and is an outlier within its category
- question: Can a machine learning model, trained on static analysis features, assign a risk score to mobile applications to identify those likely using pinning for malicious purposes?
  context: |
    This question describes building a predictive model based on static properties of an application package. Features such as requested permissions, imported libraries, code obfuscation, and binary entropy are extracted from static analysis reports. A model trained on a labeled dataset of benign and malicious apps can then assign a risk score to new, unknown applications. A high score suggests the app has characteristics associated with malware, prompting a deeper manual review.
  answer_sources:
  - Mobile Application Package (APK, IPA)
  - Static Analysis Tool Output (e.g., MobSF JSON report)
  - Analyst sandbox environment
  range: last 90 days
  queries:
  - pseudocode: |
      FOR each new application package:
        EXTRACT static features (e.g., permissions, libraries, code obfuscation, binary entropy)
        INPUT features into pre-trained classification model
        CALCULATE a risk score for the application
        ALERT if risk score exceeds a defined threshold