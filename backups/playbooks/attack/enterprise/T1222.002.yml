name: "T1222.002: Linux and Mac File and Directory Permissions Modification"
id: "f8d2c1e0-5b4a-4f9e-8d7c-6a0b1c2d3e4f"
description: "This playbook helps identify if an adversary is attempting to evade defenses by modifying file or directory permissions on Linux or macOS systems. This involves detecting the use of commands like 'chmod' and 'chown' to apply high-risk permissions (e.g., 777), change ownership, or make files immutable with 'chattr' (+i, +a). It also looks for behavioral anomalies, such as a single process rapidly changing permissions on a large number of files, which could indicate scripted malicious activity."
type: "technique"
related:
  - "TA0005: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any command line executions of `chmod` or `chown` that exhibit high-risk patterns, such as overly permissive settings or suspicious parent processes?"
    context: "Adversaries often use `chmod` or `chown` to weaken security configurations. This question looks for direct evidence of these commands being used with risky arguments, such as granting universal read/write/execute permissions (`777`), recursively applying permissions (`-R`), or changing ownership of sensitive files. Answering this is critical because such changes, especially when initiated by a web server process (`apache2`, `nginx`) or a low-privileged shell, are strong indicators of a compromised system or a privilege escalation attempt."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "last 90 days"
    queries:
      - "Pseudocode: Search process logs for command lines matching regex for high-risk `chmod` (e.g., `chmod\\s+(-R\\s+)?(777|666|u\\+s|g\\+s)`) or `chown` commands. Prioritize events where the parent process is a web server or a non-root interactive shell."
  - question: "Has any user or host exhibited an anomalous frequency of `chmod` or `chown` command executions compared to their historical baseline or peer group?"
    context: "While legitimate administrators use `chmod` and `chown`, their usage typically follows a stable pattern. A sudden, sharp increase in the frequency of these commands by a single user or on a single host is a strong behavioral indicator of malicious scripting. This question aims to identify such statistical outliers by comparing current activity against a user's own 30-day baseline and the baseline of their peer group (e.g., 'developers'). A drop in the variety (entropy) of parent processes initiating these commands further suggests a single script is at work."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "last 90 days"
    queries:
      - "Pseudocode: For each user, count `chmod`/`chown` executions per hour. Alert if the count exceeds the 99th percentile of the user's 30-day historical activity. Separately, calculate the entropy of parent process names and alert on sharp decreases for a user."
  - question: "Can machine learning models identify anomalous `chmod` or `chown` executions that deviate from established benign patterns, and do these anomalies correlate with suspicious network activity?"
    context: "Some malicious permission changes may not be caught by simple rules. This question leverages an unsupervised machine learning model (Isolation Forest) to detect subtle anomalies. The model is trained on features of normal activity (user privilege, parent process, target file path, arguments, time of day). Events flagged as outliers are then correlated with subsequent network connections to new external IP addresses, which helps prioritize alerts that might be associated with data exfiltration or the establishment of a command-and-control channel."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "macOS Endpoint Security Framework events"
      - "Zeek conn.log"
      - "Crown jewel servers (e.g., authentication, database, code repositories), web servers, developer endpoints, and shared file servers."
    range: "last 90 days"
    queries:
      - "Pseudocode: Score new `chmod`/`chown` events with a trained Isolation Forest model. If an event has a high outlier score, query network logs for new outbound connections from the source host within the following 5 minutes."
  - question: "Has the `chattr` command been used to make critical system files immutable or append-only, outside of normal administrative activity?"
    context: "Adversaries use the `chattr` command with the `+i` (immutable) or `+a` (append-only) flags as a defense evasion and persistence technique. This makes their malicious tools or backdoors difficult to remove, even by a root user. This question focuses on creating high-fidelity alerts for any use of `chattr +i` or `chattr +a`, while filtering out legitimate administrative activity from tools like Ansible or Puppet or changes to expected log file directories."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "last 90 days"
    queries:
      - "Pseudocode: Alert on any process execution of `chattr` with `+i` or `+a` arguments. Suppress alerts where the parent process is a known configuration management tool or the target path is on a pre-defined allow-list."
  - question: "Is the `chattr` command being used on files in unusual or rarely seen directory locations?"
    context: "System administrators typically use `chattr` on a predictable set of files and directories. When an adversary uses it, they may target novel locations. This question aims to detect this novelty by maintaining a historical record of directories where `chattr` is used. A new execution targeting a directory that has a very low similarity score (e.g., Jaccard similarity < 0.1) compared to the historical set is flagged as suspicious and warrants investigation."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "last 90 days"
    queries:
      - "Pseudocode: For each `chattr` execution, calculate the Jaccard similarity of the target file's parent directory against a lookup table of historical parent directories. Alert if the similarity score is below 0.1."
  - question: "Can a machine learning model detect anomalous `chattr` executions based on the context of the user, process, and target file?"
    context: "This question uses a one-class SVM model to establish a baseline of benign `chattr` activity and detect deviations. The model considers features like the user, their group memberships, the parent process, and file characteristics (extension, path depth). Events that the model flags as anomalous are enriched by checking for recent file write activity to the same file by the same process. This correlation is significant as it can uncover an adversary dropping a malicious file and immediately locking it with `chattr`."
    answer_sources:
      - "EDR Process Creation Logs"
      - "Linux auditd logs"
      - "System binary directories (/usr/bin, /bin), configuration directories (/etc), user home directories (/home/*/.bashrc), and log directories (/var/log)."
    range: "last 90 days"
    queries:
      - "Pseudocode: Score new `chattr` events with a trained one-class SVM model. For events flagged as anomalous, query file modification logs to verify if the same process wrote to the target file just before the `chattr` execution."
  - question: "Is a single process rapidly modifying permissions or ownership for a large number of files within a specific directory tree?"
    context: "A common tactic for malware or a compromised user is to run a script that recursively changes permissions to gain access or cover its tracks. This results in a large volume of `chmod` or `chown` syscalls in a short period. This question aims to detect this brute-force activity by counting these syscalls per process over a 1-minute window. An alert is triggered if the count is high (e.g., > 100) and the targeted files are concentrated under a common parent directory."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "last 90 days"
    queries:
      - "Pseudocode: Using syscall logs, count `chmod`/`chown` events grouped by process ID over a 1-minute window. Alert if the count exceeds 100 and the target file paths share a common parent directory."
  - question: "Has any host experienced a statistically significant spike in file modification events concentrated in a single directory?"
    context: "This question provides a host-level view of the previous process-level question. It seeks to identify a burst of file permission modification activity on a host that is statistically significant (e.g., 4 standard deviations above the 30-day mean). To increase the fidelity of the alert, the Gini coefficient is calculated for the parent directories of the modified files. A low coefficient (near 0) indicates the changes are highly concentrated in one directory, strengthening the signal of a targeted, scripted attack."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "last 90 days"
    queries:
      - "Pseudocode: In a time-series database, track the rate of file permission modification syscalls per host. Alert if the rate in a 1-minute window exceeds 4 standard deviations above the 30-day rolling average. Qualify the alert by requiring a low Gini coefficient for the target directories."
  - question: "Can clustering algorithms identify suspicious, scripted file modification activity, and does this activity correlate with potential C2 network traffic?"
    context: "This question applies unsupervised machine learning to find attacks without pre-defined rules. The DBSCAN algorithm clusters file modification events based on time, process ID, and target directory. A small, dense cluster generated by a non-system process is a strong indicator of a malicious script. The alert is then prioritized by correlating the process ID from the cluster with any network traffic from the same host that exhibits a regular, 'heartbeat' pattern, which is a common characteristic of command-and-control (C2) communication."
    answer_sources:
      - "EDR File Modification Events"
      - "Linux auditd logs"
      - "Zeek conn.log"
      - "Web application directories, user home directories on shared systems, directories containing sensitive configuration files."
    range: "last 90 days"
    queries:
      - "Pseudocode: Apply DBSCAN to file modification events in 10-minute windows. Investigate dense clusters originating from non-system processes. Correlate the process ID with network logs to find periodic, heartbeat-like connections to external IPs."