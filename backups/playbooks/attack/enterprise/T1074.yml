name: T1074: Data Staged
id: d2b1b3a0-621f-4a9f-863a-23d58c07c8d9
description: This playbook helps investigate whether an adversary is staging data prior to exfiltration. It focuses on detecting suspicious file creation events, such as those with malicious hashes or algorithmically generated names; the execution of archiving utilities or LOLBins with compression and encryption arguments; processes that read a large number of unique files before writing to a single archive; sudden increases in file volume or size within common staging directories; and large internal network transfers to a single non-server host, which may indicate data consolidation.
type: technique
related:
- TA0009: Collection
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are newly created files associated with known malicious hashes or suspicious filename patterns?
  context: This question aims to identify data staging by looking for files created by a process that match known indicators of compromise (IOCs). Adversaries often use known malware or tools to stage data, and their file hashes can be found in threat intelligence feeds. Additionally, they may use automated scripts that generate filenames with specific, recognizable patterns (e.g., a 16-character alphanumeric string followed by '.zip'). Detecting these indicators provides a high-confidence signal of malicious activity.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (File Creation)
  - Threat Intelligence Feed
  - This data can be found in locations such as user home directories, shared network drives, common staging directories (e.g., C:\Windows\Temp, C:\Users\Public), application data folders, and cloud storage synchronization folders.
  range: last 90 days
  queries:
  - 'Pseudocode: JOIN process_creation_events ON process_guid WITH file_creation_events | WHERE file_hash IN (threat_intel_hashes) OR filename MATCHES (regex_list_of_malicious_patterns)'
- question: Are newly created archive files exhibiting unusually high filename entropy, suggesting automated generation?
  context: This question seeks to uncover data staging by identifying files with algorithmically generated names. Adversaries often use tools that create random or high-entropy filenames to evade simple signature-based detections. By calculating the Shannon entropy of filenames for newly created archives and comparing it to a baseline of normal activity, we can spot statistical outliers. A high entropy score, especially when the file is created by a command-line utility rather than a standard installer, is a strong indicator of automated staging.
  answer_sources:
  - Sysmon Event ID 11 (File Creation)
  - Sysmon Event ID 1 (Process Creation)
  - This data can be found in locations such as user home directories, shared network drives, common staging directories (e.g., C:\Windows\Temp, C:\Users\Public), application data folders, and cloud storage synchronization folders.
  range: last 90 days
  queries:
  - 'Pseudocode: FROM file_creation_events WHERE file_extension IN (''.zip'', ''.rar'', ''.7z'') | CALCULATE shannon_entropy(filename) | ALERT IF entropy > 98th_percentile_baseline_for_extension'
- question: Can a machine learning model classify file creation events as malicious staging based on a combination of file, process, and threat intelligence features?
  context: This question leverages machine learning to provide a more nuanced detection of data staging. Simple rules can miss sophisticated attacks. A Random Forest model can analyze multiple features simultaneously—such as file extension, path depth, filename entropy, parent process, and command-line length—to learn the complex patterns of malicious staging. By training the model on known benign and malicious events, it can classify new, unseen file creation events in real-time, identifying suspicious activity that might otherwise be missed.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (File Creation)
  - Threat Intelligence Feed
  - This data can be found in locations such as user home directories, shared network drives, common staging directories (e.g., C:\Windows\Temp, C:\Users\Public), application data folders, and cloud storage synchronization folders.
  range: last 90 days
  queries:
  - 'Pseudocode: EXTRACT features (file_ext, path_depth, filename_entropy, parent_process, cmd_line_length, hash_in_ti) FROM file_creation_events | INPUT features INTO pre-trained_random_forest_model | ALERT IF prediction == ''malicious_staging'''
- question: Are known archiving utilities or LOLBins being executed with command-line arguments for password protection and outputting to high-risk directories?
  context: This question focuses on detecting the misuse of legitimate tools for data staging. Adversaries often use built-in or common archiving tools (like 7z, tar, or even PowerShell) to compress and password-protect stolen data before exfiltration. This rule-based query looks for the specific combination of a suspicious process, command-line flags indicating encryption or silent operation, and an output path in a non-standard or temporary location (like C:\Users\Public or %TEMP%), which together strongly suggest malicious intent.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Windows Event ID 4688 (A new process has been created)
  - This data can be found in locations such as common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin), user profile directories (e.g., %APPDATA%), and network-accessible temporary folders.
  range: last 90 days
  queries:
  - 'Pseudocode: FROM process_creation_events | WHERE process_name IN (''7z.exe'', ''rar.exe'', ''powershell.exe'', ...) AND command_line CONTAINS (''-p'', ''Protect-Archive'', ...) AND output_path IN (''C:\Users\Public'', ''%TEMP%'', ...)'
- question: Are there statistically rare combinations of process, parent process, and output directory associated with process executions?
  context: This question aims to find anomalous process behavior that deviates from established norms. Most processes are launched by predictable parent processes and write to expected directories. By tracking the historical frequency of (process, parent, output directory) combinations, we can identify outliers. For example, powershell.exe being launched by cmd.exe to create a file in C:\PerfLogs is a statistically rare event and highly suspicious, indicating a deviation from normal administrative or user activity that could be data staging.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - This data can be found in locations such as common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin), user profile directories (e.g., %APPDATA%), and network-accessible temporary folders.
  range: last 90 days
  queries:
  - 'Pseudocode: FROM process_creation_events | CREATE feature_tuple (process_name, parent_process_name, output_directory) | CALCULATE frequency of tuple over 30 days | ALERT IF frequency < 1st_percentile'
- question: Can a machine learning model detect anomalous command-line argument sequences indicative of data staging?
  context: This question applies advanced natural language processing techniques to command-line analysis. Adversaries often construct complex command lines to perform staging. A Transformer-based model (like BERT) can be trained to understand the structure and semantics of 'normal' command lines in an environment. When a new, malicious command line is executed, the model will flag it as anomalous due to its unfamiliar structure or high perplexity, providing a powerful way to detect novel or obfuscated staging techniques.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - This data can be found in locations such as common staging directories (e.g., C:\Windows\Temp, C:\$Recycle.Bin), user profile directories (e.g., %APPDATA%), and network-accessible temporary folders.
  range: last 90 days
  queries:
  - 'Pseudocode: FROM process_creation_events | INPUT command_line_string INTO pre-trained_transformer_model | ALERT IF anomaly_score or perplexity > threshold'
- question: Is a single process, not on an allowlist, accessing an unusually large number of files from diverse directories and then creating a single archive file?
  context: This question targets the classic 'smash and grab' data collection pattern. Before exfiltration, an adversary's script will often rapidly read many sensitive files from various locations and consolidate them into one archive. This query correlates file read events with file creation events for a single process. It triggers an alert when a non-allowlisted process (i.e., not a backup or indexing tool) exceeds a threshold for unique files read across multiple directories within a short time window, followed by the creation of a compressed file. This behavior is a strong indicator of malicious data collection.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (File Creation)
  - Windows Event ID 4663 (An attempt was made to access an object)
  - This data can be found on file servers, document repositories, user home directories, and source code repositories.
  range: last 90 days
  queries:
  - 'Pseudocode: CORRELATE file_read_events and file_create_events by process_guid | FOR each process_guid NOT IN (backup_tools_allowlist) | ALERT IF unique_files_read > 50 AND unique_directories > 5 IN 5_minutes AND subsequent_archive_file_creation'
- question: Is a process exhibiting unusually high entropy in the directory paths it is reading from, compared to its own baseline?
  context: This question uses information theory to detect abnormal file access patterns. A legitimate process typically reads files from a predictable, limited set of directories, resulting in low entropy. An adversary's collection script, however, will likely traverse a wide and varied set of directories to find valuable data, resulting in high entropy for the set of accessed paths. By establishing a baseline entropy profile for each process and alerting on significant deviations, we can detect this unusual 'directory hopping' behavior.
  answer_sources:
  - File access logs (e.g., Windows Event ID 4663)
  - Sysmon Event ID 1 (Process Creation)
  - This data can be found on file servers, document repositories, user home directories, and source code repositories.
  range: last 90 days
  queries:
  - 'Pseudocode: FOR each process_name | CALCULATE shannon_entropy of the set of unique directory paths read in a 1-minute window | ALERT IF entropy > (mean_entropy_for_process + 3 * std_dev)'
- question: Can unsupervised machine learning algorithms identify anomalous process sessions based on file access patterns?
  context: This question uses clustering algorithms to find outlier processes without needing pre-labeled data. By creating a feature set for each process session (e.g., count of files read, ratio of reads to writes, entropy of paths), algorithms like Isolation Forest or DBSCAN can group 'normal' processes together. Any process session that falls far outside these clusters is flagged as an anomaly. This is effective for detecting novel or unknown collection tools whose behavior does not match any known signature but is inherently different from the bulk of benign system activity.
  answer_sources:
  - Sysmon Event ID 1 (Process Creation)
  - Sysmon Event ID 11 (File Creation)
  - Windows Event ID 4663 (An attempt was made to access an object)
  - This data can be found on file servers, document repositories, user home directories, and source code repositories.
  range: last 90 days
  queries:
  - 'Pseudocode: FOR each process_session (by ProcessGUID) | ENGINEER features (files_read, dirs_read, read_write_ratio, path_entropy, bytes_read) | INPUT features into Isolation Forest or DBSCAN model | ALERT on outlier sessions'
- question: Has a non-allowlisted process created an excessive number of files in a common staging directory within a short time frame?
  context: This question provides a simple, high-fidelity method for detecting bulk file creation indicative of staging. Adversaries may copy or create many small files in a temporary directory before archiving them. This query sets a hard threshold for the number of file creation events generated by a single process in a high-risk directory like C:\Windows\Temp. If a process that is not a known software installer or patch manager exceeds this threshold (e.g., 100 files in 5 minutes), it is a strong signal of suspicious activity.
  answer_sources:
  - Sysmon Event ID 11 (File Creation)
  - This data is found in system-wide temporary directories (C:\Windows\Temp), user-specific temporary directories (%TEMP%), and public folders (C:\Users\Public).
  range: last 90 days
  queries:
  - 'Pseudocode: FROM file_creation_events in ''C:\Windows\Temp'' | GROUP BY process_guid | ALERT IF count(events) > 100 in 5_minutes AND process_name NOT IN (installer_allowlist)'
- question: Has the rate of file creation in a key staging directory suddenly and significantly spiked above its normal moving average?
  context: This question uses time-series analysis to detect anomalous bursts of file creation. System activity in temporary directories has a certain rhythm. By calculating a simple moving average (SMA) and standard deviation for file creation counts, we establish a dynamic baseline of 'normal'. When a sudden data dump occurs, the current activity will significantly exceed this baseline (e.g., rise more than four standard deviations above the average). This statistical approach adapts to the normal ebb and flow of activity on a host and effectively flags unusual spikes.
  answer_sources:
  - Sysmon Event ID 11 (File Creation)
  - This data is found in system-wide temporary directories (C:\Windows\Temp), user-specific temporary directories (%TEMP%), and public folders (C:\Users\Public).
  range: last 90 days
  queries:
  - 'Pseudocode: CREATE time_series of file_creation_counts per minute for ''C:\Windows\Temp'' | CALCULATE 60-min SMA and STDDEV | ALERT IF current_count > (SMA + 4 * STDDEV)'
- question: Can a time-series forecasting model detect an abnormal volume of data being written to staging directories that cannot be explained by normal seasonality?
  context: This question employs more sophisticated time-series models to identify anomalies in data volume. Normal system and user behavior creates predictable patterns of disk activity (e.g., more activity during work hours, less at night or on weekends). A model like Prophet or one using seasonal-trend decomposition can learn these complex daily and weekly patterns. When an adversary stages a large amount of data, the volume of bytes written will fall outside the model's 99% confidence interval, creating an anomaly alert that is highly unlikely to be a false positive because it is not explained by normal, learned behavior.
  answer_sources:
  - Sysmon Event ID 11 (File Creation)
  - This data is found in system-wide temporary directories (C:\Windows\Temp), user-specific temporary directories (%TEMP%), and public folders (C:\Users\Public).
  range: last 90 days
  queries:
  - 'Pseudocode: CREATE time_series of total_bytes_written per hour to key directories | TRAIN Prophet or STL model on historical data | ALERT IF new_observation falls outside the model''s 99% prediction interval'
- question: Has a workstation received an unusually large data transfer (>1GB) from a server over a non-standard protocol?
  context: This question aims to detect the consolidation of data onto a single host before exfiltration. Adversaries often compromise a workstation and use it as a staging point, pulling data from various internal servers. This query looks for a specific, high-risk scenario a very large data transfer (e.g., >1 GB) from a server to a workstation using a protocol that is not typically used for legitimate file sharing or backups. This combination is a strong indicator that the workstation is being used as a collection hub.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156 (The Windows Filtering Platform has permitted a connection)
  - This data is found by analyzing internal network segments, especially east-west traffic between servers and workstations.
  range: last 90 days
  queries:
  - 'Pseudocode: FROM zeek_conn_log | WHERE source_ip IN server_range AND dest_ip IN workstation_range AND response_bytes > 1GB AND service NOT IN (''smb'', ''nfs'', ...)'
- question: Has the volume of data transferred between a specific source-destination pair on the internal network exceeded its historical 95th percentile?
  context: This question provides a more tailored approach to detecting anomalous network transfers. Instead of a single global threshold, it establishes a baseline for each unique communication path (source-destination pair). For example, it's normal for a backup server to send large amounts of data to a storage server, but not for a file server to send gigabytes of data to a marketing team's workstation. By alerting when the data transferred exceeds the 95th percentile for that specific path, this method effectively detects transfers that are unusually large for their context.
  answer_sources:
  - Zeek conn.log
  - This data is found by analyzing internal network segments, especially east-west traffic between servers and workstations.
  range: last 90 days
  queries:
  - 'Pseudocode: FOR each source-dest_ip_pair in zeek_conn_log | CALCULATE 95th_percentile of response_bytes over 30 days | ALERT IF new_connection_bytes > established_95th_percentile'
- question: Using graph analysis, has a workstation's network 'centrality' score suddenly increased to resemble that of a server?
  context: This question models the network as a graph to identify changes in a host's role. Servers are typically central nodes in a network graph, receiving many connections and handling large data volumes. Workstations are usually peripheral. By using a graph algorithm like PageRank to score the 'centrality' of each host, we can learn the normal score distribution for workstations. If an adversary uses a workstation as a staging point, it will begin receiving large amounts of data from many sources, causing its centrality score to spike into the range typically seen by servers. This shift in its network role is a powerful indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - This data is found by analyzing internal network segments, especially east-west traffic between servers and workstations.
  range: last 90 days
  queries:
  - 'Pseudocode: MODEL network as a graph from zeek_conn_log (nodes=IPs, edges=bytes_transferred) | CALCULATE PageRank or centrality score for each node daily | ALERT IF workstation_node_score suddenly increases into server_score_range'