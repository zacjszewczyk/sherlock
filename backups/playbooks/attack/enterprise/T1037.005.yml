name: T1037.005: Startup Items
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook provides investigative steps to detect adversaries using macOS Startup Items for persistence and privilege escalation. Startup Items are a legacy method for running scripts or applications at boot but are still supported and can be abused by malware. The playbook focuses on identifying suspicious process executions, file creations, network connections originating from startup items, and unauthorized modifications that indicate attempts to gain higher privileges.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are processes executing from `/Library/StartupItems/` that are identified as known malware by threat intelligence feeds?
  context: This question targets the direct execution of malicious code from a classic persistence location. By checking the hash of any executable running from `/Library/StartupItems/` against known malware signatures, analysts can quickly identify common threats that have been configured to survive a reboot.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint Process Creation Logs
  - File Integrity Monitoring Logs
  - Threat Intelligence Feed
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_execution_logs
      WHERE process_path starts with '/Library/StartupItems/'
      FOREACH process:
        file_hash = sha256(process.executable)
        is_known_malware = lookup_threat_intel(file_hash)
        IF is_known_malware:
          ALERT(process, file_hash)
- question: Are there any 'rare' executables within `/Library/StartupItems/` directories that have a low prevalence across the enterprise?
  context: Adversaries often use custom or newly compiled malware that will not be present in threat intelligence feeds. This question helps uncover such threats by identifying executables that are not widely distributed across the organization. A file appearing on only a small number of systems is statistically anomalous and warrants investigation as a potential targeted implant.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint Process Creation Logs
  - File Integrity Monitoring Logs
  - Threat Intelligence Feed
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      all_hashes = GET all file hashes from '/Library/StartupItems/' across all endpoints
      prevalence = CALCULATE prevalence for each hash in all_hashes
      total_endpoints = COUNT all endpoints
      FOREACH hash, count in prevalence:
        IF (count / total_endpoints) < 0.01:
          ALERT('Rare binary found', hash, count)
- question: Have any executables in `/Library/StartupItems/` been classified as malicious by a static analysis machine learning model?
  context: This question leverages machine learning to detect potentially malicious files without relying on known signatures or prevalence analysis. By analyzing static properties like file entropy, strings, and code signing status, a model can identify characteristics common to malware, providing a proactive detection method for novel threats.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - Endpoint Process Creation Logs
  - File Integrity Monitoring Logs
  - Threat Intelligence Feed
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for new files in '/Library/StartupItems/'
      FOREACH file:
        features = EXTRACT_STATIC_FEATURES(file)
        prediction_score = ML_MODEL.predict(features)
        IF prediction_score > 0.90:
          ALERT('High confidence malicious file detected', file, prediction_score)
- question: Have any files created or modified within `/Library/StartupItems/` matched YARA rules for suspicious content or malware signatures?
  context: This question seeks to detect malicious payloads as they are written to disk. By scanning new or modified files in this persistence location with YARA rules, analysts can identify suspicious scripts, obfuscated code, or known malware families before they are even executed, enabling early detection and response.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - Endpoint File Creation/Modification Logs
  - File Integrity Monitoring Logs
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON file_create OR file_write in '/Library/StartupItems/*'
      yara_matches = SCAN_FILE(file_path) with malware_ruleset
      IF yara_matches:
        ALERT('YARA rule match found', file_path, yara_matches)
- question: Are new files or directories being created in `/Library/StartupItems/` with high-entropy or randomized names?
  context: Adversaries may use randomized file or directory names to evade simple signature-based detections and make analysis more difficult. A high Shannon entropy score suggests a name is not a common word or abbreviation. This question helps identify such evasion techniques by flagging names that appear to be randomly generated, which is a strong indicator of malicious activity.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - Endpoint File Creation/Modification Logs
  - File Integrity Monitoring Logs
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON file_create in '/Library/StartupItems/*'
      entropy = CALCULATE_SHANNON_ENTROPY(file.name)
      IF entropy > 3.0 OR entropy > (baseline_mean + 3 * baseline_std_dev):
        ALERT('High entropy file name detected', file.name, entropy)
- question: Has there been an anomalous spike in the rate of file creation or modification events within `/Library/StartupItems/` across the enterprise?
  context: This question aims to detect large-scale or coordinated malware deployment. A sudden, sharp increase in file write activity to `/Library/StartupItems/` across many systems deviates from normal operational patterns. A time-series anomaly detection model can identify these spikes, which could indicate an automated attack campaign establishing persistence.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - Endpoint File Creation/Modification Logs
  - File Integrity Monitoring Logs
  - File systems on all macOS endpoints, specifically the `/Library/StartupItems/` directory.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE file create/modify events in '/Library/StartupItems/*' by hour
      INPUT aggregated counts into time_series_model
      IF model detects anomaly (spike):
        ALERT('Anomalous spike in StartupItems activity detected', time_window, event_count)
- question: Are processes originating from `/Library/StartupItems/` making network connections to known malicious destinations?
  context: This question directly links a persisted process to command and control (C2) activity. By correlating process execution from a startup item with subsequent network connections, and then checking the destination against threat intelligence, analysts can confirm that a persisted implant is active and communicating with an adversary's infrastructure.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - ESF ES_EVENT_TYPE_NOTIFY_CONNECT
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Endpoint Network Connection Logs
  - macOS endpoints, Network egress points, and DNS servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_execution_logs
      WHERE process_path starts with '/Library/StartupItems/'
      JOIN with network_connection_logs on hostname within 5 minutes
      FOREACH connection:
        is_malicious = lookup_threat_intel(connection.destination_ip)
        IF is_malicious:
          ALERT('Startup item process connected to malicious destination', process, connection)
- question: Are processes from `/Library/StartupItems/` connecting to high-risk domains that are newly registered or have low popularity?
  context: Adversaries frequently use newly registered domains (NRDs) for C2 infrastructure to evade reputation-based blocking. This question helps identify suspicious connections by risk-scoring domains based on their age and popularity. A connection from a startup item process to a domain that is both very new and not widely visited is a strong indicator of malicious C2 communication.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - ESF ES_EVENT_TYPE_NOTIFY_CONNECT
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Endpoint Network Connection Logs
  - macOS endpoints, Network egress points, and DNS servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH dns_logs for queries from processes originating in '/Library/StartupItems/'
      FOREACH domain:
        age = get_domain_age(domain)
        popularity = get_domain_popularity(domain)
        risk_score = CALCULATE_RISK(age, popularity)
        IF risk_score > threshold:
          ALERT('Startup item process connected to high-risk domain', process, domain, risk_score)
- question: Are TLS connections from startup item processes exhibiting characteristics of malicious traffic, according to a machine learning model?
  context: This question aims to detect encrypted C2 channels by analyzing the metadata of TLS connections, a practice known as JA3/S fingerprinting. Even without decrypting the traffic, a machine learning model can identify anomalous patterns in the TLS handshake (like specific cipher suites or self-signed certificates) that are common in malware, flagging suspicious encrypted communication.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_EXEC
  - ESF ES_EVENT_TYPE_NOTIFY_CONNECT
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Endpoint Network Connection Logs
  - macOS endpoints, Network egress points, and DNS servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH ssl_logs for connections from processes originating in '/Library/StartupItems/'
      FOREACH connection:
        features = EXTRACT_TLS_FEATURES(connection.ja3, connection.certificate, etc)
        prediction_score = ML_MODEL.predict(features)
        IF prediction_score > 0.85:
          ALERT('Suspicious TLS connection from startup item process', process, connection, prediction_score)
- question: Has a non-root process, which is not an authorized installer, created a file in `/Library/StartupItems/`?
  context: This question targets a key indicator of privilege escalation. The `/Library/StartupItems` directory should only be modified by processes running with root privileges, typically legitimate system installers. A write operation from a non-root user process (e.g., a process running as a standard user) is highly anomalous and suggests an adversary is exploiting a vulnerability to place a persistence mechanism.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Endpoint File Creation Logs with User Context
  - Osquery process_events
  - Osquery file_events
  - File systems on all macOS endpoints, specifically the /Library/StartupItems/ directory and associated process user context.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_creation_events
      WHERE file_path starts with '/Library/StartupItems/'
      AND process.euid != 0
      AND process.name NOT IN (allowlist_of_installers)
      ALERT('Non-root process wrote to StartupItems', process, file_path)
- question: Has a process with an unusual parent (e.g., a web browser or terminal) written a file to `/Library/StartupItems/`?
  context: Legitimate software installations that modify `/Library/StartupItems/` typically originate from a predictable parent process, like `launchd` or `installer`. This question helps identify suspicious activity by looking for writes originating from an unexpected process chain. For example, a web browser or a terminal shell spawning a process that writes a startup item is a strong indicator of a user-driven compromise or local exploit.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Endpoint File Creation Logs with User Context
  - Osquery process_events
  - Osquery file_events
  - File systems on all macOS endpoints, specifically the /Library/StartupItems/ directory and associated process user context.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_creation_events in '/Library/StartupItems/'
      parent_process = GET_PARENT(event.process)
      is_anomalous = CHECK_PARENT_PREVALENCE(parent_process.name)
      IF is_anomalous:
        ALERT('Anomalous parent process wrote to StartupItems', parent_process, event.process)
- question: Has a machine learning model predicted that a file write to `/Library/StartupItems/` is a likely privilege escalation attempt?
  context: This question uses a predictive model to synthesize multiple weak signals into a stronger detection. By considering the creating process's name, its parent, its user context (EUID), and its code signing status, a machine learning model can learn the complex patterns of a privilege escalation event, allowing it to flag suspicious writes that might not trigger simpler, single-indicator rules.
  answer_sources:
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - Endpoint File Creation Logs with User Context
  - Osquery process_events
  - Osquery file_events
  - File systems on all macOS endpoints, specifically the /Library/StartupItems/ directory and associated process user context.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON file_creation in '/Library/StartupItems/'
      features = EXTRACT_FEATURES(process.name, parent.name, process.euid, process.signing_status)
      prediction = ML_MODEL.predict(features)
      IF prediction == 'privilege_escalation':
        ALERT('ML model detected likely privilege escalation to StartupItems', process)
- question: Does a newly created or modified script in `/Library/StartupItems/` contain commands associated with privilege escalation or disabling security controls?
  context: This question focuses on the content of the persistence mechanism itself. After gaining the ability to write to `/Library/StartupItems/`, an adversary's script will often contain commands to further their objectives, such as creating new users (`dscl`), disabling security tools (`spctl`), or establishing a reverse shell. YARA rules can detect these specific, high-impact commands within the script file.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File Content Analysis Tools
  - The contents of executable scripts within all subdirectories of /Library/StartupItems/ on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON file_write in '/Library/StartupItems/*/*'
      yara_matches = SCAN_FILE(file_path) with privesc_ruleset (e.g., 'dscl', 'spctl --master-disable')
      IF yara_matches:
        ALERT('Privilege escalation command detected in StartupItem script', file_path, yara_matches)
- question: Are there any shell scripts in `/Library/StartupItems/` that use statistically rare commands compared to a baseline of all startup scripts in the enterprise?
  context: This question helps find 'suspicious but not definitively malicious' commands. While a command like `whoami` isn't inherently bad, its presence in a startup script is unusual. By baselining all commands found in all startup scripts across the organization, we can flag scripts that use commands that are rare for this specific context, pointing to anomalous or adversarial behavior.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File Content Analysis Tools
  - The contents of executable scripts within all subdirectories of /Library/StartupItems/ on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      all_commands = PARSE all commands from all scripts in '/Library/StartupItems/' across enterprise
      command_frequencies = CALCULATE frequency of each command
      FOREACH script:
        FOREACH command in script:
          IF command_frequencies[command] < 0.005:
            ALERT('Rare command found in StartupItem script', script, command)
- question: Have any startup item scripts been categorized into suspicious or unknown 'topics' by an NLP model?
  context: This question uses unsupervised machine learning to group scripts by their content and function. A topic model like LDA can learn to recognize clusters of scripts related to 'installers', 'updaters', or 'configuration'. If a new script doesn't fit into any known benign topic, or if it forms a new topic with other suspicious scripts containing keywords related to exploitation or C2, it can be flagged as anomalous for further review.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_CREATE
  - ESF ES_EVENT_TYPE_NOTIFY_WRITE
  - File Content Analysis Tools
  - The contents of executable scripts within all subdirectories of /Library/StartupItems/ on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      all_scripts_text = GET text from all scripts in '/Library/StartupItems/'
      topic_model = TRAIN_LDA_MODEL(all_scripts_text)
      FOREACH new_script:
        topic_distribution = topic_model.predict(new_script.text)
        IF topic is 'unknown' or in 'suspicious_keyword_topic':
          ALERT('Anomalous script topic detected', new_script, topic)
- question: Have file permissions within `/Library/StartupItems/` been changed to be insecurely permissive, or has a `StartupParameters.plist` file been modified after creation?
  context: This question looks for two types of suspicious modifications. First, an adversary might make a startup script world-writable (`777`) to allow other unprivileged processes to modify it. Second, modification of the `StartupParameters.plist` file, which controls how the startup item is run, is highly unusual after initial setup. Both actions are red flags for tampering.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_SETATTR
  - Osquery file_events
  - Endpoint File Permission Modification Logs
  - All files and subdirectories within the /Library/StartupItems/ path on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_attribute_modification_events
      WHERE path starts with '/Library/StartupItems/'
      IF (new_permissions are world-writable) OR (file_name is 'StartupParameters.plist' and event is 'modify'):
        ALERT('Suspicious modification in StartupItems', event)
- question: Are there any files in `/Library/StartupItems/` with permissions that deviate from the established enterprise baseline (e.g., not `755` for executables or `644` for plists)?
  context: This question operationalizes the principle of least privilege by defining and enforcing a standard configuration. Legitimate executables in this directory should be `755` (owner can read/write/execute, others can read/execute) and plists should be `644` (owner can read/write, others can read). Any deviation from this norm, such as a `777` or `744` file, indicates a misconfiguration or malicious tampering and should be investigated.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_SETATTR
  - Osquery file_events
  - Endpoint File Permission Modification Logs
  - All files and subdirectories within the /Library/StartupItems/ path on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_events or run periodic scan of '/Library/StartupItems/'
      FOREACH file:
        IF file is executable AND permissions != '755':
          ALERT('Incorrect permissions for executable', file, file.permissions)
        ELSE IF file is plist AND permissions != '644':
          ALERT('Incorrect permissions for plist', file, file.permissions)
- question: Has an anomalous sequence of file system events occurred in `/Library/StartupItems/`, deviating from the pattern of a legitimate software installation?
  context: This question seeks to identify malicious behavior by analyzing the order of operations. A legitimate installation follows a predictable pattern (e.g., create directory, create plist, create executable, set permissions). An adversary might exhibit a different sequence (e.g., create executable, then change permissions to be world-writable later). A sequence analysis model can learn the 'grammar' of a normal install and flag any series of events that violates it.
  answer_sources:
  - File Integrity Monitoring Logs
  - ESF ES_EVENT_TYPE_NOTIFY_SETATTR
  - Osquery file_events
  - Endpoint File Permission Modification Logs
  - All files and subdirectories within the /Library/StartupItems/ path on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      COLLECT sequence of file events for each process writing to '/Library/StartupItems/'
      INPUT sequence into sequence_analysis_model (HMM)
      IF model flags sequence as anomalous:
        ALERT('Anomalous event sequence in StartupItems detected', process, event_sequence)