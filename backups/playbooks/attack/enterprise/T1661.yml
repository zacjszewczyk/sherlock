name: T1661: Application Versioning
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate whether an adversary has compromised a mobile application through a malicious update, either for initial access or defense evasion. It focuses on detecting anomalies post-update, such as suspicious network connections (to new or known-bad domains, or with rare TLS fingerprints), significant changes in application permissions (inclusion of high-risk permissions or low similarity to previous versions), unusual code-signing certificates (new, short-lived, or known-bad), and network traffic patterns indicative of command-and-control (C2) activity like beaconing, DGA, or volumetric anomalies.
type: technique
related:
  - TA0027: Initial Access
  - TA0030: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: After a mobile application update, did the application connect to any network destinations that are either on a threat intelligence feed or are newly registered domains?
    context: Adversaries may push malicious updates that cause an application to connect to their command-and-control (C2) infrastructure. Checking network connections against threat intelligence feeds can identify known malicious destinations. Additionally, attackers often use newly registered domains (NRDs) for their campaigns, so identifying connections to domains created within the last 90 days is a strong indicator of suspicious activity. This helps detect initial C2 communication post-compromise.
    answer_sources:
      - MDM Application Update Log
      - Zeek conn.log
      - Zeek dns.log
      - External WHOIS Data Feed
      - External Threat Intelligence Feed
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH MDM logs for app updates
          JOIN with network logs on device_id where timestamp is within 24 hours of update
          FOR each destination, CHECK against threat intelligence feed
          FOR each destination FQDN, GET WHOIS creation_date
          ALERT if threat_intel_match OR creation_date < 90 days
  - question: Following an update, did the application establish any rare or anomalous TLS sessions, or query any high-entropy domain names?
    context: Malware often uses custom or uncommon TLS libraries, resulting in unique JA3/JA3S fingerprints. A new, rare fingerprint appearing after an update can indicate a malicious library was introduced. Similarly, Domain Generation Algorithms (DGAs) are used by malware to create a large number of random-looking domain names for C2. High-entropy scores in DNS queries can reveal this DGA activity, which is a strong sign of compromise.
    answer_sources:
      - MDM Application Update Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - External WHOIS Data Feed
      - External Threat Intelligence Feed
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each app, BUILD baseline of JA3/JA3S hashes and FQDN entropy scores
          AFTER update, for each new TLS session, GET JA3/JA3S hash
          ALERT if hash is not in baseline AND global prevalence < 1st percentile
          AFTER update, for each new DNS query, CALCULATE FQDN entropy
          ALERT if entropy > 99th percentile of app's baseline
  - question: Did the application exhibit anomalous data exfiltration or download volumes after the update?
    context: A malicious update might initiate data exfiltration or download a larger second-stage payload. This activity often results in a significant spike in network traffic volume compared to the application's normal behavior. By modeling the expected data volume over time, we can detect statistically significant deviations that suggest anomalous and potentially malicious data transfer.
    answer_sources:
      - MDM Application Update Log
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - External WHOIS Data Feed
      - External Threat Intelligence Feed
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each app, TRAIN time-series model on historical outbound data volume
          AFTER update, for each 15-min interval in next 24 hours, GET actual data volume
          PREDICT expected data volume and 95% confidence interval
          ALERT if actual volume > predicted upper bound
  - question: Following an update, was the application granted any predefined high-risk permissions?
    context: Malicious applications often require high-risk permissions to perform their objectives, such as gaining device administrator rights, accessing sensitive user data, or modifying system settings. By comparing newly added permissions against a curated list of known dangerous permissions, analysts can quickly identify updates that significantly increase the application's potential for harm.
    answer_sources:
      - MDM Application Inventory Log (pre/post update)
      - Curated High-Risk Permission List
      - Pre-computed App Store Category Permission Baselines
      - MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.
    range: last 90 days
    queries:
      - pseudocode: |
          ON app update, GET pre- and post-update permission sets
          IDENTIFY newly added permissions
          COMPARE new permissions against curated high-risk list
          ALERT on any match
  - question: Did the application's permission set change dramatically after an update, or did it add a permission that is statistically rare for its app category?
    context: A legitimate update typically involves minor, incremental changes to permissions. A significant change, reflected by a low Jaccard similarity score, could indicate a refactoring for malicious purposes or a complete change in functionality. Furthermore, if an application adds a permission that is very uncommon for other apps in its category (e.g., a calculator app asking for contact access), it is a strong indicator of suspicious intent.
    answer_sources:
      - MDM Application Inventory Log (pre/post update)
      - Curated High-Risk Permission List
      - Pre-computed App Store Category Permission Baselines
      - MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.
    range: last 90 days
    queries:
      - pseudocode: |
          ON app update, GET pre- and post-update permission sets
          CALCULATE Jaccard similarity; ALERT if score < 0.8
          FOR each new permission, GET prevalence from app category baseline
          ALERT if prevalence < 2%
  - question: Does the application's new set of permissions resemble known malicious permission patterns, according to a machine learning model?
    context: Certain combinations of permissions are more indicative of malware than any single permission in isolation. A machine learning model can be trained to recognize these complex patterns from known benign and malicious examples. If an application update causes its permission profile to shift from being classified as 'benign' to 'malicious', it provides a strong, data-driven signal that the update may have been compromised.
    answer_sources:
      - MDM Application Inventory Log (pre/post update)
      - Curated High-Risk Permission List
      - Pre-computed App Store Category Permission Baselines
      - MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN ML classifier on labeled benign/malicious permission vectors
          ON app update, GET pre- and post-update permission vectors
          CLASSIFY both vectors
          ALERT if pre_vector_class == 'benign' AND post_vector_class == 'malicious'
  - question: Was the application update signed with a new, previously unseen developer certificate or a certificate known to be malicious?
    context: Legitimate developers typically use the same code-signing certificate for all updates of a given application. A sudden change in the certificate thumbprint is highly anomalous and could indicate that the developer's key was compromised or that a malicious actor is attempting to impersonate the legitimate developer. Checking the new certificate against threat intelligence can also directly identify if it has been used in previous malicious campaigns.
    answer_sources:
      - MDM Application Inventory Log (with certificate details)
      - Historical Application Certificate Thumbprint Database
      - External Certificate Transparency Log Data
      - External Threat intelligence Feed
      - MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.
    range: last 90 days
    queries:
      - pseudocode: |
          ON app update, EXTRACT certificate thumbprint
          CHECK thumbprint against historical allow-list for that app; ALERT on mismatch
          CHECK thumbprint against threat intelligence feed of malicious certs; ALERT on match
  - question: Does the new code-signing certificate have characteristics that suggest it is suspicious or illegitimate?
    context: Beyond simply being new, a certificate can have other suspicious attributes. Attackers often use newly created certificates to sign malware. They may also use certificates from rare or unknown issuers, or use subject names that are slight misspellings of the legitimate developer's name (typosquatting). A risk scoring system combines these weak signals into a stronger, more confident indicator of a potentially malicious certificate.
    answer_sources:
      - MDM Application Inventory Log (with certificate details)
      - Historical Application Certificate Thumbprint Database
      - External Certificate Transparency Log Data
      - External Threat intelligence Feed
      - MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.
    range: last 90 days
    queries:
      - pseudocode: |
          ON app update with new certificate, INITIALIZE risk_score = 0
          IF certificate_age < 90 days, ADD 50 to risk_score
          IF issuer_prevalence < 5th percentile, ADD 30 to risk_score
          IF Levenshtein(new_subject, old_subject) > 5, ADD 20 to risk_score
          ALERT if risk_score > 75
  - question: Does the new signing certificate create a link between a trusted application and a known high-risk or malicious group of apps and developers?
    context: Malicious actors often reuse infrastructure, including developer certificates, across multiple campaigns. A graph database can model these complex relationships. If a new certificate used to sign a trusted app is also linked to other apps or developers already identified as malicious, it reveals a "guilt by association." This technique can uncover broader campaigns and infrastructure that might be missed by analyzing a single application in isolation.
    answer_sources:
      - MDM Application Inventory Log (with certificate details)
      - Historical Application Certificate Thumbprint Database
      - External Certificate Transparency Log Data
      - External Threat intelligence Feed
      - MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.
    range: last 90 days
    queries:
      - pseudocode: |
          MAINTAIN graph of (apps, certs, developers)
          ON app update, ADD new cert and relationships to graph
          RUN community detection algorithm
          ALERT if new cert connects trusted_app_node to malicious_community
  - question: After an update, is the application communicating over non-standard ports or to domains associated with known C2 frameworks?
    context: Adversaries often attempt to blend their C2 traffic with normal encrypted traffic by using port 443 (typically for HTTPS/TLS). However, they may use a non-TLS protocol over this port, which is a strong indicator of evasion. Additionally, C2 frameworks and threat intelligence feeds provide signatures and patterns (e.g., specific domain structures) that can be matched against network logs to directly identify malicious communication.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/EDR Network Flow Log
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform aggregating network flow data (Zeek, EDR/MDM) for behavioral analysis.
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER app update, MONITOR network traffic from device
          ALERT if protocol is not TLS AND dest_port == 443
          MATCH server_name and dns_query against known C2 regex patterns
          ALERT on match
  - question: Is the application's post-update network traffic exhibiting periodic beaconing or queries to algorithmically generated domains (DGA)?
    context: Malware implants often "call home" to their C2 server at regular intervals, a behavior known as beaconing. This results in network connections with a very low variance in the time between them. Detecting this periodicity can unmask C2 channels. Similarly, using DGA to generate a large number of potential C2 domains is a common evasion technique. These domains appear random and have high entropy, which can be measured and flagged when compared to an application's normal DNS query patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/EDR Network Flow Log
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform aggregating network flow data (Zeek, EDR/MDM) for behavioral analysis.
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER app update, GROUP outbound connections by destination
          CALCULATE stdev of inter-arrival times; ALERT if stdev is anomalously low
          FOR each DNS query, CALCULATE entropy of domain name
          ALERT if entropy is anomalously high
  - question: Does the application's post-update network behavior deviate significantly from its established baseline of normal activity, as identified by an anomaly detection model?
    context: An autoencoder is a type of neural network that can learn a compressed representation of "normal" data. When it encounters data that deviates from this norm (like C2 traffic, data exfiltration, or other malicious activity), it will have a high "reconstruction error." By training a model on an application's typical network session characteristics, we can use it to flag any new, post-update sessions that are statistically anomalous, even if they don't match a predefined rule or signature.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - MDM/EDR Network Flow Log
      - Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform aggregating network flow data (Zeek, EDR/MDM) for behavioral analysis.
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each app, TRAIN autoencoder on normal network session feature vectors
          AFTER update, for each new session, CALCULATE reconstruction error using model
          ALERT if reconstruction_error > anomaly_threshold