name: T1090.004: Domain Fronting
id: d4c6b8c0-68a8-4b77-9a4c-1e8d2e3f4a5b
description: Investigates if an adversary is using domain fronting for command and control communications. This involves detecting network connections with a mismatch between the TLS SNI and the inner HTTP Host header, particularly when the destination is a known malicious indicator. It also looks for hosts generating an anomalous volume of such mismatches, C2-like behavior (e.g., beaconing) over known CDN IPs, high-cardinality fan-outs of inner HTTP Host headers behind a single SNI, and suspicious source processes on endpoints initiating these connections.
type: technique
related:
- TA0011: Command and Control
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any network connections where the TLS SNI and HTTP Host header do not match, and the destination IP or inner Host domain is on a threat intelligence feed?
  context: This question seeks to identify the most clear-cut cases of malicious domain fronting. By joining TLS session data (ssl.log) with HTTP data (http.log), we can find SNI/Host mismatches. Correlating these mismatches with high-fidelity threat intelligence for known malicious domains and IP addresses allows for the direct detection of connections to adversary infrastructure.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      joined_logs = JOIN (ssl.log, http.log) ON connection_uid
      mismatches = FILTER joined_logs WHERE ssl.server_name != http.host
      mismatches_with_conn = JOIN mismatches, conn.log ON connection_uid
      suspicious_traffic = FILTER mismatches_with_conn WHERE http.host IN threat_intel_domains OR conn.dest_ip IN threat_intel_ips
      ALERT ON suspicious_traffic
- question: Are there any SNI/Host mismatches involving destination IPs or inner Host domains that are unusually rare for the organization's traffic patterns?
  context: This question uses statistical analysis to find outliers. Even without a direct threat intelligence match, an SNI/Host mismatch to a rarely-seen destination is suspicious. By establishing a 30-day baseline of all destination IPs and inner Host domains, we can flag new mismatches involving destinations that fall into the lowest percentile of prevalence, suggesting they are not part of normal business or internet traffic.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
  range: last 30 days
  queries:
  - platform: pseudocode
    query: |
      mismatches = FIND all SNI/Host mismatches
      baseline_ips = CALCULATE prevalence of all destination_ips over last 30 days
      baseline_hosts = CALCULATE prevalence of all http_hosts over last 30 days
      FOR each new mismatch:
        IF prevalence(mismatch.dest_ip) < 5th_percentile(baseline_ips) OR prevalence(mismatch.http_host) < 5th_percentile(baseline_hosts):
          ALERT ON mismatch
- question: Can we classify new SNI/Host mismatch events as malicious using a machine learning model?
  context: This question aims to automate the detection of malicious domain fronting by using a supervised machine learning model. The model is trained on historical data, learning the characteristics that differentiate benign mismatches (like those used by CDNs) from malicious ones. Features like IP reputation, domain age, ASN info, and the TLS fingerprint (JA3) provide rich context for the model to make accurate, near real-time classifications.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and security infrastructure (e.g., SIEM, TIP).
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      FOR each new SNI/Host mismatch:
        features = EXTRACT (dest_ip_rep, domain_age, asn_info, ja3_hash)
        prediction = APPLY classification_model(features)
        IF prediction == 'malicious':
          ALERT ON mismatch
- question: Are there any network connections with an SNI/Host mismatch or a blank SNI that are not on an established allowlist of known-good traffic?
  context: This question uses a symbolic approach to identify suspicious traffic by exclusion. Many legitimate applications and services use domain fronting-like techniques or blank SNIs. By creating and maintaining an allowlist of these known-good (SNI, Host) pairs and applications, any new mismatch or blank SNI connection that does not appear on this list is immediately flagged as anomalous and worthy of investigation.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and internal network segments.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      allowlist = GET known_good_sni_host_pairs
      mismatches = FIND connections WHERE ssl.server_name != http.host OR (ssl.server_name is NULL AND http.host is NOT NULL)
      suspicious_mismatches = FILTER mismatches WHERE (mismatch.sni, mismatch.host) NOT IN allowlist
      ALERT ON suspicious_mismatches
- question: Has any internal host suddenly started generating a statistically significant higher rate of SNI/Host mismatches compared to its own baseline?
  context: This question focuses on detecting changes in individual host behavior. A compromised machine may suddenly begin using domain fronting for C2 communication. By monitoring the ratio of mismatched connections to total TLS connections for each host, and comparing it to a 7-day rolling average, we can detect sudden spikes (e.g., 3 standard deviations above average) that indicate a behavioral anomaly on that specific host.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and internal network segments.
  range: last 7 days
  queries:
  - platform: pseudocode
    query: |
      FOR each source_host:
        rolling_avg, rolling_stddev = CALCULATE 7-day rolling average and stddev of (mismatch_count / total_tls_count)
        current_ratio = CALCULATE hourly ratio for host
        IF current_ratio > (rolling_avg + 3 * rolling_stddev):
          ALERT ON source_host
- question: Can we identify highly unusual SNI/Host mismatch connections by using an unsupervised anomaly detection model?
  context: This question leverages machine learning to find novel or previously unseen domain fronting activity without relying on predefined rules or labels. An unsupervised model, like Isolation Forest, learns the characteristics of 'normal' benign mismatches within the environment. It can then flag connections that are statistical outliers based on a combination of features like IP addresses, port, data volume, and the specific SNI/Host values, pointing to potentially new C2 techniques.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Egress points (e.g., internet gateways, forward proxies) and internal network segments.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      mismatch_data = GET all SNI/Host mismatches with features (src_ip, dst_ip, dst_port, bytes, duration, sni, host)
      outliers = APPLY isolation_forest_model(mismatch_data)
      ALERT ON outliers
- question: Are any connections to known CDN IP ranges using TLS fingerprints (JA3/JA3S) associated with known malware?
  context: This question provides a high-fidelity method for detecting specific malware families that use CDNs for domain fronting. Malware often has a unique or identifiable TLS implementation, which results in a consistent JA3 or JA3S hash. By filtering for connections to CDNs and comparing their TLS fingerprints against a threat intelligence feed of malicious hashes, we can directly identify infections like Cobalt Strike or Metasploit.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Egress points, cloud service access points, and endpoint devices.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      cdn_connections = FILTER ssl.log WHERE dest_ip IN known_cdn_ranges
      malicious_hashes = GET threat_intel_ja3_ja3s_hashes
      suspicious_connections = FILTER cdn_connections WHERE ja3 IN malicious_hashes OR ja3s IN malicious_hashes
      ALERT ON suspicious_connections
- question: Do any connections to CDNs exhibit statistical anomalies like beaconing behavior or unusually large data transfers?
  context: This question aims to identify C2 behavior hidden within legitimate CDN traffic. Malicious beaconing often occurs at fixed, regular intervals, resulting in a very low standard deviation of time between connections. Similarly, data exfiltration may manifest as an unusually large data transfer compared to normal activity for that user and service. By calculating these statistical measures, we can uncover covert channels that would otherwise blend in with normal CDN traffic.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Egress points, cloud service access points, and endpoint devices.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      # Beaconing detection
      GROUP connections by src_host, dest_sni
      CALCULATE time_delta_stddev for each group
      ALERT if time_delta_stddev is near zero
      # Data exfil detection
      CALCULATE 95th_percentile_data_volume per user/service
      ALERT on sessions exceeding this threshold
- question: Can we detect periodic, non-business communication patterns to CDN domains using time series analysis?
  context: This question applies advanced time series analysis to detect C2 beaconing. Adversary heartbeats are often highly periodic (e.g., every 60 seconds), a pattern that is distinct from sporadic human-driven web browsing. By modeling the time series of connection counts to CDNs, we can identify these non-business cycles or use anomaly detection on the model's residuals to flag unexpected spikes in activity that don't fit normal patterns.
  answer_sources:
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek dns.log
  - Egress points, cloud service access points, and endpoint devices.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      FOR each source_host:
        connection_timeseries = CREATE time series of connection counts to CDNs
        APPLY SARIMA or similar model to connection_timeseries
        DETECT non-business periodic components
        ALERT on detected periodic beaconing
- question: Has any single source IP communicated with an abnormally high number of unique inner HTTP hosts behind a single outer SNI?
  context: This question targets a specific domain fronting technique called 'domain hiding,' where an adversary rapidly cycles through many different subdomains or host headers behind a single 'front' domain. A legitimate user will typically only access a few hostnames behind a single CDN SNI. By setting a threshold (e.g., >50 unique hosts in 24 hours), we can flag a source IP that exhibits this high fan-out behavior, which is a strong indicator of automated C2 activity.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Internal network segments and egress points.
  range: last 24 hours
  queries:
  - platform: pseudocode
    query: |
      GROUP mismatches by src_ip, outer_sni over 24 hours
      COUNT unique inner_http_hosts for each group
      IF unique_host_count > 50:
        ALERT on src_ip
- question: Does any source IP exhibit an abnormally high entropy of inner HTTP Host names for a given SNI, compared to an enterprise baseline?
  context: This question uses information theory to quantify the randomness of inner hostnames used in domain fronting. A high Shannon entropy indicates a very diverse and unpredictable set of inner hosts, which is characteristic of certain C2 tools trying to evade simple blocklists. By establishing a baseline for normal entropy levels in CDN traffic, we can alert when a specific host's activity exceeds this norm (e.g., is in the 99th percentile), pointing to suspicious fan-out behavior.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Internal network segments and egress points.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      baseline_entropy = CALCULATE 99th percentile of inner_host entropy per SNI across enterprise
      FOR each src_ip and SNI pair in 1-hour window:
        current_entropy = CALCULATE Shannon entropy of inner_hosts
        IF current_entropy > baseline_entropy:
          ALERT on src_ip
- question: Can we identify outlier hosts engaged in domain fronting by clustering them based on their mismatch activity?
  context: This question uses unsupervised machine learning to group hosts with similar network behaviors. Most hosts will exhibit 'normal' levels of benign mismatch activity and will be grouped into a large cluster. Hosts that are compromised and using domain fronting for C2 will likely have different patterns (e.g., more unique SNIs, higher host entropy). A clustering algorithm like DBSCAN can isolate these hosts as outliers that do not belong to any normal cluster, flagging them for investigation.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Internal network segments and egress points.
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      FOR each host, create feature_vector (mismatch_count, unique_sni_count, unique_host_count, avg_entropy)
      outlier_hosts = APPLY DBSCAN_model(feature_vectors)
      ALERT on outlier_hosts
- question: Is the source process of a suspicious domain fronting connection an unapproved application or not a standard web browser?
  context: This question pivots from a network-level detection to the host to find the root cause. Once a suspicious connection (e.g., SNI/Host mismatch) is found, we can correlate it with endpoint process and network logs (like Sysmon). By identifying the process that initiated the connection, we can check if it's a legitimate, allowlisted browser or application. If the process is something unexpected (e.g., a script, a downloaded executable), it's a strong indicator of malicious activity.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      ON network_alert (suspicious_connection):
        connection_details = GET 4-tuple from alert
        process_info = FIND Sysmon EVT 3 with matching 4-tuple
        IF process_info.Image NOT IN allowlisted_browsers:
          ALERT on process_info.Image and host
- question: Does the source process of a domain fronting connection have multiple risky characteristics, such as being unsigned or running from a temporary directory?
  context: This question uses a risk-scoring system to evaluate the suspiciousness of a source process. A single indicator might be weak, but multiple indicators together build a strong case. After a network alert, we examine the source process on the host and assign points for risky attributes: being unsigned, running from a user-writable path like 'AppData', or having an unusual parent process (e.g., Word launching PowerShell). A cumulative score exceeding a set threshold elevates the alert's priority.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      ON network_alert:
        process = GET source process from host logs
        risk_score = 0
        IF process is unsigned: risk_score += 1
        IF process_path in temp_dirs: risk_score += 1
        IF parent_process is unusual: risk_score += 1
        IF risk_score > 2:
          ESCALATE ALERT
- question: Can a machine learning model classify the source process of a domain fronting connection as benign or malicious based on its execution context?
  context: This question aims to automate the host-level analysis following a network alert. A pre-trained classification model can analyze features of the source process (e.g., name, parent process, command line entropy, signature status) from logs like Sysmon Event ID 1. When a network domain fronting alert occurs, this model can be invoked to instantly classify the responsible process, allowing security operations to immediately focus on confirmed malicious activity and reduce manual investigation time.
  answer_sources:
  - Zeek ssl.log
  - Zeek http.log
  - Zeek conn.log
  - Sysmon Event ID 1
  - Sysmon Event ID 3
  - Windows Event ID 4688
  - Endpoint devices (workstations, servers) and log aggregation platforms (e.g., SIEM).
  range: last 90 days
  queries:
  - platform: pseudocode
    query: |
      ON network_alert:
        process = GET source process from host logs
        features = EXTRACT (process_name, parent_name, cmd_entropy, signature_status) from process
        prediction = APPLY classification_model(features)
        IF prediction == 'malicious':
          ESCALATE ALERT