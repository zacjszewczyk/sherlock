name: 'T1533: Data from Local System'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: |
  This playbook helps investigate whether an adversary is collecting sensitive data from local system storage on mobile devices. It focuses on detecting anomalous file read behavior, such as unusually high read rates or access to numerous sensitive files; unauthorized API calls to credential stores like Android Keystore or iOS Keychain; the creation of large archive files (.zip, .tar) in user-writable directories followed by suspicious network egress; and the presence of applications with statistically rare and high-risk permission combinations not justified by their function.
type: technique
related:
  - 'TA0035: Collection'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Is a non-allowlisted process reading from sensitive mobile directories?
    context: |
      This question aims to identify unauthorized processes accessing sensitive user data locations like DCIM, Contacts, or Documents on mobile devices. Legitimate applications have predictable access patterns, so a non-allowlisted process reading from these areas is a strong indicator of potential data staging or theft. This check relies on maintaining a well-defined allowlist of approved applications based on business needs and threat intelligence.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/, /storage/emulated/0/Documents/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/, /var/mobile/Library/Mobile Documents/)
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          SEARCH file_access_logs 
          WHERE (process_name NOT IN allowlist) AND (target_directory IN sensitive_directories) 
          GROUP BY process_name, device_id

  - question: Is an application exhibiting an unusually high rate of file read operations compared to its historical baseline?
    context: |
      This question focuses on detecting anomalous behavior from otherwise legitimate applications. A sudden, statistically significant spike in file read activity (e.g., exceeding the 95th or 99th percentile of its normal behavior) can indicate that an application has been compromised or is being abused to quickly access and collect a large volume of files. This method helps find 'living off the land' techniques where legitimate tools are used for malicious purposes.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          CALCULATE 30_day_baseline_of_file_reads_per_minute FOR EACH process
          SEARCH file_access_logs WHERE file_reads_per_minute > 95th_percentile_of_baseline

  - question: Does an application's file access pattern deviate from its learned normal behavior profile?
    context: |
      This question uses a machine learning model to identify subtle deviations from an application's normal file access patterns. The model considers features like access frequency, file path entropy, and time of day. An alert is triggered when an activity's reconstruction error is high, indicating the behavior is unlike anything seen during the model's training period. This can detect sophisticated adversaries trying to blend in by mimicking normal activity but failing to replicate it perfectly.
    answer_sources:
      - MDM file access logs
      - EDR file system monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Zeek conn.log
      - User data partitions, application sandboxes, and shared storage on managed mobile devices
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          DEPLOY anomaly_detection_model ON file_access_logs
          SCORE new_activity_window
          ALERT IF reconstruction_error > threshold

  - question: Is an unauthorized process attempting to access the Android Keystore or iOS Keychain?
    context: |
      This question is designed to detect direct attempts to steal credentials stored securely on the device. The Android Keystore and iOS Keychain are protected system services. Access from an application that is not on a strict allowlist (verified by process name and signer hash) is a critical security event and a strong indicator of a targeted attack aiming to compromise user accounts or other sensitive data.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints, specifically the Android Keystore and iOS Keychain services.
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          SEARCH api_monitoring_logs 
          WHERE (target_api IN ["AndroidKeystore", "iOSKeychain"]) AND (process_name:signer_hash NOT IN allowlist)

  - question: Is an authorized application making an unusually high number of calls to the credential store?
    context: |
      This question helps identify the potential misuse of a legitimate, authorized application. Even trusted apps should have predictable patterns for accessing credentials. A sudden, significant increase in API calls (e.g., more than 3 standard deviations from the mean) could indicate that the application is compromised and being used to enumerate or exfiltrate credentials in bulk.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          CALCULATE hourly_baseline_of_credential_api_calls FOR EACH authorized_app
          SEARCH api_monitoring_logs WHERE call_count > (mean + 3 * std_dev) FOR a_given_hour

  - question: Is a credential store access event being flagged as an outlier by a machine learning model?
    context: |
      This question leverages a machine learning model (One-Class SVM) to detect anomalous credential access events that might not be caught by simple thresholding. The model learns the multi-faceted pattern of legitimate access (process, parent process, API function, time of day) and flags any access attempt that doesn't conform to this learned pattern. This is effective for identifying novel or stealthy credential theft techniques.
    answer_sources:
      - MDM API monitoring logs
      - EDR API call monitoring logs
      - Android logcat
      - iOS Unified Logs
      - Device credential management services and API gateways on mobile endpoints
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          DEPLOY one_class_svm_model ON credential_access_logs
          SCORE new_access_event
          ALERT IF event_is_outlier

  - question: Has a large archive file been created by a non-standard process and then quickly followed by a network transfer to an external address?
    context: |
      This question looks for a common adversary pattern: collecting data into a single archive file (staging) and then sending it out of the network (exfiltration). The query specifically looks for large archives created by unapproved applications, and then correlates that event with a subsequent network connection from the same device within a short time window (5 minutes). This combination of events is highly indicative of data theft.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/; iOS: /var/mobile/Library/Mobile Documents/)
      - Corporate network egress points monitored by network sensors
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          SEARCH file_creation_logs WHERE file_size > 10MB AND file_extension IN [".zip", ".tar", ".gz", ".7z"] AND process_name NOT IN allowlist
          CORRELATE with network_logs WHERE source_ip IS file_creator_ip AND event_time is within 5 minutes AND destination_ip is external

  - question: Does a newly created large archive file have a highly random (high entropy) filename?
    context: |
      This question serves as an enrichment step to assess the suspiciousness of a created archive file. Adversaries often use randomly generated filenames to evade simple signature-based detection. A filename with high Shannon entropy (e.g., > 3.5) is statistically unusual for human-created files and can increase the confidence that the file creation event is malicious. This is often combined with other indicators, like checking the file's MIME type during transfer.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          ON archive_creation_event:
            CALCULATE shannon_entropy(filename)
            IF entropy > 3.5, INCREASE risk_score
            CORRELATE with network_file_transfer_logs to CONFIRM mime_type

  - question: Is a new archive file creation event being classified as malicious by a machine learning model?
    context: |
      This question uses a supervised machine learning model (Random Forest) to score the risk of a file creation event. The model is trained on various features from known-good and known-bad events, such as process name, signer, file size, path depth, and filename entropy. It provides a probabilistic score of maliciousness, allowing analysts to prioritize the most high-risk events for investigation.
    answer_sources:
      - MDM file creation logs
      - EDR file system monitoring logs
      - Zeek files.log
      - Zeek conn.log
      - User-writable storage locations on mobile devices
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          DEPLOY random_forest_classifier ON file_creation_events
          SCORE new_archive_creation_event
          ALERT IF malicious_probability > 0.8

  - question: Is there an application installed on a device that has a pre-defined 'toxic' combination of permissions?
    context: |
      This question aims to proactively identify potentially malicious applications based on their requested permissions. Certain combinations of permissions are rarely needed for legitimate purposes (e.g., reading contacts, accessing the internet, and installing new packages all at once). By defining these 'toxic combos' and scanning for them, we can flag high-risk applications even before they execute any malicious action.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          SEARCH mdm_app_inventory_logs DAILY
          FOR EACH app, CHECK permissions
          ALERT IF permissions MATCH any_toxic_combo

  - question: Which applications have the riskiest permission sets based on the statistical rarity of those permissions within their app category?
    context: |
      This question identifies outliers by comparing an app's permissions to its peers. An application in the 'Games' category that requests to read contacts is statistically rare and therefore suspicious. By calculating a risk score based on the inverse prevalence of an app's permissions, we can surface applications whose requested access rights are unusual for their stated purpose, warranting a manual review.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          CALCULATE permission_prevalence_per_category FROM fleet_wide_app_inventory
          FOR EACH app, CALCULATE risk_score = SUM(inverse_prevalence(permission))
          ALERT on top 5% of apps by risk_score per category

  - question: Are there any applications whose permission profiles are outliers when clustered with all other applications?
    context: |
      This question uses an unsupervised machine learning approach (DBSCAN) to find applications with unique permission sets without pre-defining what is 'bad'. The algorithm groups applications with similar permission profiles together. Any application that doesn't fit well into any cluster is labeled as an outlier or 'noise'. These outliers represent applications with uncommon permission combinations that should be investigated as potentially malicious.
    answer_sources:
      - MDM application inventory logs
      - Mobile Threat Defense (MTD) scan results
      - App store manifest data
      - Android logcat permission grant logs
      - Application manifests, permission grant logs, and application inventory databases
    range: last 90 days
    queries:
      - language: pseudocode
        query: |
          ENCODE app_permissions_as_vectors
          RUN DBSCAN_clustering_algorithm
          ALERT on all apps classified as noise/outliers