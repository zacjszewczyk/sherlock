name: T1558.005: Ccache Files
id: 5b1d4c7a-1e8f-4b0d-8c9a-7e6f5d4a3b2c
description: This playbook helps investigate whether an adversary is stealing or misusing Kerberos ccache files to facilitate credential access. This involves looking for indicators such as logon sessions initiated by unusual processes, command-line arguments related to ticket manipulation, anomalous network transfer or local access of ccache files, unusual sequences of Kerberos-related commands, and anomalous Kerberos service ticket requests or logons.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known credential theft tools creating new logon sessions (Logon Type 9) to misuse credentials?
    context: This question aims to detect the direct use of credential theft tools like Mimikatz, Rubeus, or Kekeo. These tools can create a new logon session with stolen credentials (Logon Type 9) to perform actions in the context of another user. Correlating the process creation event (4688) with the subsequent logon event (4624) provides a high-fidelity indicator of an adversary using these tools for lateral movement or privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Privileged access workstations, member servers, domain controllers, Tier 0 assets
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          watchlist = ["kekeo.exe", "rubeus.exe", "mimikatz.exe"]
          suspicious_procs = search Event 4688 where process_name in watchlist
          for each proc in suspicious_procs:
            search Event 4624 where TargetLogonId == proc.ProcessGuid and LogonType == 9
            if found, generate alert
  - question: Are statistically rare or unusual processes initiating new logon sessions (Logon Type 9)?
    context: This question helps uncover novel or less common tools used for credential misuse. Adversaries may use custom scripts or legitimate but infrequently used system tools to create new logon sessions. By establishing a baseline of normal parent processes that trigger Logon Type 9 events, we can flag any statistically rare process as suspicious, indicating a potential deviation from normal administrative behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Privileged access workstations, member servers, domain controllers, Tier 0 assets
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          get all processes that created a Logon Type 9 event in the last 90 days
          calculate frequency of each parent process name
          identify processes in the bottom 1st percentile of rarity
          for new Logon Type 9 events:
            if parent_process_name in rare_processes, flag for investigation
  - question: Can a machine learning model classify correlated process creation and logon events as suspicious?
    context: This question seeks to automate the detection of credential misuse by using a supervised machine learning model. By training on features like process names, command-line arguments, user context, and logon types from both known-good and known-bad activities, the model can learn to identify complex, subtle patterns of malicious behavior that might be missed by simple rules or statistical thresholds. This allows for more robust and adaptive detection.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Privileged access workstations, member servers, domain controllers, Tier 0 assets
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each new Logon Type 9 event (4624):
            correlate with parent process creation event (4688)
            extract_features(process_name, parent_process, cmd_line_entropy, etc.)
            prediction = trained_model.predict(features)
            if prediction is malicious with high confidence, generate alert
  - question: Is a process being executed with command-line arguments indicating Kerberos ticket manipulation?
    context: This question aims to detect the active manipulation of Kerberos tickets using tools that interact with ccache files or perform pass-the-ticket attacks. By searching for specific keywords, command structures, and encoded ticket strings in process command lines, analysts can identify the use of tools like Rubeus or Mimikatz for credential access, even if the executable name is changed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Linux/macOS systems with command-line logging, Windows systems used for ticket conversion, domain controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          patterns = ["ptt /ticket:", "tgs::ask", "convert /ccache", "[a-zA-Z0-9+/=]{100,}"]
          search Process Creation Events (4688) where command_line matches any pattern in patterns
          if match found, generate alert
  - question: Are there command-line executions with unusually high entropy that could indicate an embedded Kerberos ticket?
    context: This question provides a way to find suspicious command-line activity without relying on known keywords. Kerberos tickets are long, random-looking strings, and when passed on the command line, they significantly increase the string's entropy. By baselining normal command-line entropy and alerting on outliers, we can detect potential pass-the-ticket activity, even if it's obfuscated or uses novel tools.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Linux/macOS systems with command-line logging, Windows systems used for ticket conversion, domain controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          establish baseline entropy for command-line arguments over 30 days
          for each new Process Creation Event (4688):
            calculate shannon_entropy(command_line_arguments)
            if entropy > 98th_percentile_of_baseline, flag for investigation
  - question: Can an unsupervised anomaly detection model identify novel or obfuscated ticket manipulation commands?
    context: This question focuses on detecting unknown or zero-day attack techniques. An unsupervised model, like an Isolation Forest, learns the characteristics of normal command-line activity (length, argument count, character types, etc.). It can then identify any new command that deviates significantly from this learned norm. This is valuable for catching attackers who use custom tools or heavily obfuscate their commands to evade signature-based detection.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Linux/macOS systems with command-line logging, Windows systems used for ticket conversion, domain controllers
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          train anomaly detection model on historical command-line features
          for each new Process Creation Event:
            extract_features(command_line)
            anomaly_score = model.score(features)
            if anomaly_score is high, generate alert
  - question: Are Kerberos ccache files being transferred over the network?
    context: This question directly targets the exfiltration of Kerberos ccache files. These files, typically named `krb5cc_*` or `krb5.ccache`, contain valuable tickets that can be used for offline attacks or lateral movement. Monitoring for the transfer of files with these names, especially to external destinations or non-standard internal servers, is a strong indicator of credential theft.
    answer_sources:
      - Windows Event ID 4663
      - Zeek files.log
      - Zeek conn.log
      - Zeek ftp.log
      - Zeek smb_files.log
      - File servers hosting Linux user home directories, network egress points, Linux developer workstations
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          search Zeek logs (files, ftp, smb) for filename matching regex "(krb5cc_|krb5\\.ccache)"
          for each match:
            get destination IP from conn log
            if destination is external or not in allowlist, generate alert
  - question: Are statistically rare processes accessing ccache files on file servers?
    context: This question helps identify suspicious local access to ccache files. On systems where these files are stored, only a small set of legitimate processes (like `sshd`) should be accessing them. By creating a baseline of normal process access, we can flag any access from a rare or unexpected process (like `powershell.exe` or a custom script) as a potential indicator of an adversary staging the files for exfiltration.
    answer_sources:
      - Windows Event ID 4663
      - Zeek files.log
      - Zeek conn.log
      - Zeek ftp.log
      - Zeek smb_files.log
      - File servers hosting Linux user home directories, network egress points, Linux developer workstations
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          build baseline of processes accessing ccache files on file servers
          calculate frequency of each accessing process
          for new File Access Events (4663) to a ccache file:
            if accessing_process is in the bottom 5th percentile of frequency, flag as anomalous
  - question: Can a graph database identify improbable access patterns related to ccache file theft and exfiltration?
    context: This question uses a more advanced, context-rich approach to detection. By modeling relationships between users, processes, files, and network destinations in a graph, we can query for suspicious multi-step behaviors. For example, a path showing a standard user's process accessing a privileged user's ccache file and then sending it to an external IP would be a highly improbable and suspicious chain of events that a graph database can efficiently identify.
    answer_sources:
      - Windows Event ID 4663
      - Zeek files.log
      - Zeek conn.log
      - Zeek ftp.log
      - Zeek smb_files.log
      - File servers hosting Linux user home directories, network egress points, Linux developer workstations
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          ingest file access and network logs into graph DB
          query for paths: (Process)-[:EXECUTED_BY]->(User), (Process)-[:ACCESSED]->(File), (File)-[:TRANSFERRED_TO]->(IP)
          where File.name matches 'krb5cc_*' and IP is external
          if such a path exists, generate alert
  - question: Is a user executing a sequence of commands indicative of ccache file staging and exfiltration?
    context: This question aims to detect adversary tradecraft by looking for a logical sequence of actions. An attacker might list Kerberos tickets (`klist`), access the ccache file, compress or encode it, and then transfer it out. A stateful rule that triggers only when these specific events happen in order for a single host within a short time window can be a very high-fidelity indicator of a credential theft operation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, bastion hosts, servers with interactive logins
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          for a single host within a 5-minute window, look for the sequence:
          1. Process execution of 'klist' (4688)
          2. File access to 'krb5cc_*' (4663)
          3. Process execution of 'tar', 'zip', or 'base64' (4688)
          4. Outbound network connection to external IP (Zeek conn.log)
          if sequence completes, generate alert
  - question: Is a user exhibiting anomalous command sequences involving Kerberos and exfiltration-related utilities?
    context: This question uses behavioral analytics to find suspicious activity. By modeling a user's normal command sequences using N-grams, we can establish a probabilistic baseline of their behavior. A sequence of commands that is historically very improbable for that user, such as running `klist` followed by `powershell -enc`, would stand out as a behavioral anomaly worth investigating, even if the individual commands are not inherently malicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, bastion hosts, servers with interactive logins
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each user, build a model of command sequence probabilities (N-grams)
          for new command sequences:
            calculate the probability of the sequence occurring
            if probability is below the 1st percentile for that user, flag as behavioral anomaly
  - question: Can a sequence-based deep learning model detect anomalous event sequences indicative of ccache theft?
    context: This question proposes using a sophisticated AI model to learn the normal "rhythm" of activity on a host or for a user. An LSTM autoencoder can process sequences of diverse events (process, file, network) and learn what's normal. When an anomalous sequence occurs, like a Word document spawning a process that accesses a ccache file, the model will fail to "reconstruct" it accurately, resulting in a high error score that signals a significant deviation from normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, bastion hosts, servers with interactive logins
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          train LSTM autoencoder on sequences of user/host events
          for each new event sequence:
            calculate the reconstruction error from the model
            if error is anomalously high, generate alert
  - question: Is a Kerberos service ticket being requested for the krbtgt service from a non-Domain Controller?
    context: This question is designed to detect a Golden Ticket attack, a powerful persistence technique that can be enabled by credentials stolen from ccache files. A request for a Ticket-Granting Ticket (TGT), identified by the service name 'krbtgt', should only ever originate from a Domain Controller during legitimate replication or administrative tasks. A request from any other client address is a critical indicator of a forged ticket attack.
    answer_sources:
      - Zeek kerberos.log
      - Zeek conn.log
      - Windows Event ID 4769
      - Windows Event ID 4624
      - Domain controllers, critical application servers, network choke points
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          search Kerberos Auth Events (4769)
          where ServiceName is 'krbtgt' and ClientAddress is not in [List of DC IPs]
          if found, generate high-severity alert
  - question: Is a user authenticating from an anomalous location, to an unusual service, or at an odd time?
    context: This question focuses on detecting the *use* of a stolen ticket. By creating a historical profile of each user's typical authentication behavior (source IPs, services accessed, time of day), we can score new authentications for deviation. A logon that is out of character for a user—for example, from a new country, to a critical server they've never touched before, at 3 AM—is highly suspicious and could indicate an attacker is using their stolen credentials.
    answer_sources:
      - Zeek kerberos.log
      - Zeek conn.log
      - Windows Event ID 4769
      - Windows Event ID 4624
      - Domain controllers, critical application servers, network choke points
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          for each user, build profile of {source_subnets, destination_spns, logon_hours}
          for each new authentication event:
            score deviation from user's profile (e.g., new subnet, new SPN, off-hours)
            if score > threshold, generate alert
  - question: Can unsupervised clustering identify anomalous logons resulting from a pass-the-ticket attack?
    context: This question applies machine learning to find "loner" events that don't fit any normal pattern of activity. By clustering all authentication events based on features like user, source/destination, and time, the algorithm identifies "peer groups" of normal behavior. An authentication event that does not belong to any cluster (a "noise point") is an outlier. This is a powerful way to detect pass-the-ticket attacks, as they often create logons with unusual combinations of attributes that don't match any established peer group.
    answer_sources:
      - Zeek kerberos.log
      - Zeek conn.log
      - Windows Event ID 4769
      - Windows Event ID 4624
      - Domain controllers, critical application servers, network choke points
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          extract features from auth logs (user, source_ip, dest_spn, time)
          run DBSCAN clustering algorithm on the feature set
          for any auth event classified as a noise point:
            generate alert for anomalous logon