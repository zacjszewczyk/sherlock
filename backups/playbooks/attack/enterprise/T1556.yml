name: T1556: Modify Authentication Process
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps analysts investigate whether an adversary is modifying authentication processes (T1556) to establish persistence, evade defenses, or steal credentials. This involves looking for indicators such as the creation and loading of malicious DLLs into lsass.exe, unauthorized modifications to LSA-related registry keys (e.g., Notification Packages, Security Packages), attempts to disable Credential Guard, weakening of authentication policies via GPO, or successful logons that bypass expected MFA or network authentication protocols (e.g., Kerberos, NTLM). The investigation focuses on critical assets like Domain Controllers, ADFS servers, and privileged workstations.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense-Evasion
  - TA0006: Credential-Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a newly created DLL in System32 being loaded by lsass.exe and does it match known threat intelligence?
    context: |
      Adversaries may drop a malicious DLL, such as a password filter or Security Support Provider (SSP), into a system directory like C:\Windows\System32\. The Local Security Authority Subsystem Service (lsass.exe) is then manipulated to load this DLL. This provides the adversary with persistence and/or the ability to capture credentials. This question seeks to identify this specific sequence of events and verify the file's reputation against threat intelligence feeds.
    answer_sources:
      - Sysmon Event ID 11 (File Creation)
      - Sysmon Event ID 7 (Image Load)
      - Sysmon Event ID 1 (Process Creation)
      - Threat Intelligence Feeds
      - NAI: Domain Controllers, ADFS Servers, Privileged Access Workstations (PAWs); specifically the C:\Windows\System32\ directory and the lsass.exe process space.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon
          JOIN (EventID=11, TargetDirectory="C:\Windows\System32\*") with (EventID=7, Image="*lsass.exe")
          WHERE file_creation.TargetFilename == image_load.ImageLoaded
          AND time_diff(image_load.timestamp, file_creation.timestamp) < 5 minutes
          LOOKUP file_creation.hash against threat_intelligence_feed
          RETURN results where threat_intelligence_feed.match == true
  - question: Is lsass.exe loading any DLLs that are rare across the enterprise or appear to be packed?
    context: |
      Malicious DLLs used to modify authentication are often not part of standard operating system or software deployments, making them rare across an enterprise. Additionally, attackers frequently pack their payloads to obfuscate them, which often results in high Shannon entropy. This question hunts for DLLs loaded by the critical lsass.exe process that are statistically uncommon or appear to be packed, as these are strong indicators of malicious activity.
    answer_sources:
      - Sysmon Event ID 7 (Image Load)
      - NAI: Domain Controllers, ADFS Servers, Privileged Access Workstations (PAWs); specifically the lsass.exe process space.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon EventID=7 where Image="*lsass.exe"
          CALCULATE prevalence of ImageLoaded.hash across all endpoints
          CALCULATE shannon_entropy of ImageLoaded
          RETURN results where prevalence < 1% OR shannon_entropy > 7.0
  - question: Is there an anomalous spike in the number of unique DLLs being loaded by lsass.exe on a host?
    context: |
      The set of DLLs loaded by lsass.exe on a stable system, especially a server like a Domain Controller, should be relatively consistent. A sudden increase in the number of new or unique DLLs being loaded can indicate that an adversary has introduced a malicious module. This question uses time-series analysis to detect deviations from the established baseline of DLL loading behavior.
    answer_sources:
      - Sysmon Event ID 7 (Image Load)
      - NAI: Domain Controllers, ADFS Servers, Privileged Access Workstations (PAWs); specifically the lsass.exe process space.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Time-series forecasting (ARIMA, Prophet)
          DATA_INPUT: Hourly count of unique DLLs loaded by lsass.exe per host
          TRAINING: Train on historical data to establish baseline and confidence intervals
          ALERT_CONDITION: Alert if current_count > forecasted_upper_bound, especially on high-value assets like Domain Controllers
  - question: Has an unauthorized DLL been registered as an LSA Notification or Security Package?
    context: |
      Adversaries can persist and capture credentials by registering a malicious DLL in the LSA Notification or Security Packages registry keys. Legitimate packages are few and well-known. This question checks for any modifications to these critical registry keys that introduce a DLL not on an established allowlist, which is a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Windows Servers; specifically the registry hives at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH (Sysmon EventID=13 OR WinEventID=4657)
          WHERE TargetObject ends with "\Lsa\Notification Packages" OR "\Lsa\Security Packages"
          PARSE Details to extract new_dll_paths
          FOR EACH path in new_dll_paths:
            IF path NOT IN allowlist_of_lsa_packages:
              ALERT
  - question: Has a statistically rare DLL been added to an LSA package registry key, or has any change occurred on a Domain Controller outside a maintenance window?
    context: |
      This question uses statistical rarity instead of a hardcoded allowlist. By baselining which LSA package DLLs are common for specific server roles (e.g., web servers vs. domain controllers), we can spot anomalies. Any modification that introduces a rare DLL is suspicious. For highly critical assets like Domain Controllers, any change outside of a planned maintenance window is a major red flag.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Windows Servers; specifically the registry hives at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH registry modification events for LSA packages
          FOR EACH new DLL added:
            CALCULATE prevalence of DLL within its server_role_peer_group
            IF prevalence < 5%:
              ALERT
          IF server_role == "Domain Controller" AND current_time NOT IN maintenance_window:
            ALERT
  - question: Has a machine learning model detected an anomalous LSA package modification?
    context: |
      Legitimate modifications to LSA packages, such as during Windows updates, have predictable characteristics (e.g., initiated by TrustedInstaller.exe, signed DLLs). This question proposes using a one-class SVM or similar anomaly detection model trained on these legitimate events. Any modification that the model classifies as an anomaly is highly suspect and likely malicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 11
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Windows Servers; specifically the registry hives at HKLM\SYSTEM\CurrentControlSet\Control\Lsa\.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Anomaly Detection (One-Class SVM)
          FEATURES: parent_process_name, user_context, time_of_day, new_dll_is_signed, new_dll_file_age
          TRAINING: Train on feature sets from known-good LSA modifications (e.g., during patching)
          ALERT_CONDITION: Alert if a new modification event is classified as an anomaly
  - question: Is there evidence of a successful logon that bypassed standard network authentication protocols like Kerberos or NTLM?
    context: |
      A successful network logon (e.g., RDP) on a Windows server should generate a logon event (Event ID 4624) on the server and corresponding network authentication traffic (Kerberos or NTLM) visible in network logs. If a logon event occurs without the expected network traffic, it could indicate an attacker has bypassed or manipulated the standard authentication mechanism.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek krb5.log
      - Zeek ntlm.log
      - NAI: Domain Controllers, VPN Concentrators, Bastion Hosts; specifically network traffic logs at ingress/egress points and Windows Security Event Logs on destination servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH WinEventID=4624 where LogonType IN (3, 10)
          SUBSEARCH Zeek logs (krb5.log, ntlm.log) for the same time window (+/- 5 seconds)
          WHERE logon.SourceAddress == zeek.ClientIP AND logon.Server == zeek.ServerIP
          ALERT if no corresponding Zeek authentication event is found
  - question: Has the ratio of successful logons to network authentication events anomalously increased on a critical server?
    context: |
      On a stable server, there should be a predictable ratio between successful network logons and the underlying network authentication traffic. A sudden, sharp increase in this ratio—meaning more logons are occurring than can be explained by observed Kerberos or NTLM traffic—suggests a potential bypass. This question uses statistical monitoring to detect such a deviation from the baseline.
    answer_sources:
      - Windows Event ID 4624
      - Zeek krb5.log
      - Zeek ntlm.log
      - NAI: Domain Controllers, VPN Concentrators, Bastion Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each critical server, per hour:
            CALCULATE ratio = count(WinEventID=4624, LogonType=3) / (count(Zeek krb.log) + count(Zeek ntlm.log))
            CALCULATE moving average and standard deviation of this ratio
            ALERT if current_ratio > (moving_average + 3 * std_dev)
  - question: Has a machine learning model classified a logon event as 'suspect' due to a lack of corresponding network authentication traffic?
    context: |
      This question proposes a more advanced detection method using a supervised classification model. The model is trained to distinguish between 'valid' logons (those with corresponding network traffic) and 'suspect' ones (those without). By learning the patterns of legitimate activity, the model can flag logons on critical servers that are highly likely to be the result of an authentication bypass.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek krb5.log
      - Zeek ntlm.log
      - NAI: Domain Controllers, VPN Concentrators, Bastion Hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Binary Classification (Logistic Regression, Random Forest)
          FEATURES: logon_type, source_subnet, dest_subnet, target_server_role, time_of_day
          LABEL: 'valid' (has network traffic), 'suspect' (lacks network traffic)
          ALERT_CONDITION: Alert if logon on a critical server is classified as 'suspect' with high confidence
  - question: Has an explicit attempt been made to disable Windows Defender Credential Guard via the registry?
    context: |
      Credential Guard is a key Windows security feature that isolates secrets. A specific registry modification, setting `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\LsaCfgFlags` to `2`, is the documented method for disabling it. This action is highly unusual for legitimate administration and is a direct indicator that an attacker is attempting to weaken system defenses to access credentials.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - NAI: System Registry Hives on all Windows endpoints and servers with Credential Guard enabled, particularly Domain Controllers and Privileged Access Workstations.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH (Sysmon EventID=13 OR WinEventID=4657)
          WHERE TargetObject == "HKLM\SYSTEM\CurrentControlSet\Control\Lsa\LsaCfgFlags"
          AND Details contains "DWORD: 2"
          ALERT with high severity
  - question: Are there any endpoints where the Credential Guard configuration has deviated from its expected baseline?
    context: |
      This question involves proactively auditing the state of Credential Guard across the enterprise. For systems where it should be enabled, the `LsaCfgFlags` registry key should have a specific value (typically `1`). Any host found to have a different value (like `0` or `2`) represents a security gap or a potential compromise that needs investigation.
    answer_sources:
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - NAI: System Registry Hives on all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PERIODICALLY_QUERY all endpoints for the value of "HKLM\...\Lsa\LsaCfgFlags"
          COMPARE current_value with expected_baseline_value for that host/role
          ALERT on any host where current_value != baseline_value
  - question: Has an unusual sequence of events involving the modification of the Credential Guard registry key occurred?
    context: |
      An attacker disabling Credential Guard will likely follow a specific pattern: a non-standard process (e.g., `powershell.exe` from a malicious script) modifies the key, followed by a system reboot to make the change effective. This question uses a sequence-based model to detect such anomalous chains of events, distinguishing them from legitimate changes made by standard tools like Group Policy or SCCM.
    answer_sources:
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows Event logs for system reboot
      - NAI: System Registry Hives and process execution logs on Windows endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Sequence Anomaly Detection (LSTM Autoencoder)
          DATA_INPUT: Sequence of events per host (process_create, reg_mod, system_reboot)
          FEATURES: modifying_process_name, parent_process, user_context, time_to_reboot
          ALERT_CONDITION: Alert if a sequence of events is flagged as a statistical anomaly
  - question: Are unsigned DLLs being loaded into critical authentication processes, or are GPOs being modified to weaken authentication policies?
    context: |
      This question combines two distinct but related defense evasion tactics. First, loading an unsigned DLL into `lsass.exe` or `winlogon.exe` is a major red flag, as legitimate components are almost always signed. Second, an adversary with sufficient privileges might modify a Group Policy Object (GPO) to weaken domain-wide authentication policies, such as by enabling the storage of passwords using reversible encryption (LM hashes), making them easier to crack.
    answer_sources:
      - Sysmon Event ID 7
      - Windows Event ID 5136 (GPO Change)
      - Windows PowerShell Event ID 4104
      - NAI: Domain Controllers (for GPO changes), all Windows Endpoints and Servers (for image loads).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon EventID=7 WHERE Image IN ("*lsass.exe", "*winlogon.exe") AND Signed == "false" -> ALERT
          SEARCH WinEventID=5136 WHERE AttributeLDAPDisplayName relates to authentication (e.g., "LMPolicy") AND NewValue is a weaker setting -> ALERT
  - question: Are rare DLLs being loaded by lsass.exe, or is there a sudden burst of modifications to security-sensitive GPOs?
    context: |
      This question applies statistical analysis to defense evasion techniques. A newly observed DLL loaded by `lsass.exe` that is extremely rare across the enterprise is highly suspicious. Similarly, while GPO changes occur, a sudden spike in modifications to security-related policies, especially outside of a normal maintenance window, could indicate an adversary is actively reconfiguring defenses.
    answer_sources:
      - Sysmon Event ID 7
      - Windows Event ID 5136 (GPO Change)
      - NAI: Domain Controllers, all Windows Endpoints and Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon EventID=7 WHERE Image == "*lsass.exe"
          CALCULATE prevalence of ImageLoaded.hash
          IF prevalence < 0.5% -> ALERT
          MONITOR rate of WinEventID=5136 for security policies
          ALERT if rate exceeds statistical threshold outside maintenance window
  - question: Has a machine learning model assigned a high risk score to a GPO modification event?
    context: |
      Evaluating the risk of a GPO change can be complex. This question suggests using a classification model to automate this risk assessment. By training a model on features like who made the change, when it was made, and the security impact of the specific policy change, the system can automatically flag high-risk modifications that warrant immediate analyst review.
    answer_sources:
      - Windows Event ID 5136 (GPO Change)
      - Active Directory user data
      - NAI: Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Classification (Random Forest)
          FEATURES: user_making_change, time_of_day, policy_modified, security_impact_of_change
          ALERT_CONDITION: Alert if a GPO change event is classified as 'high-risk'
  - question: Is there a successful remote logon for an MFA-enforced user without a corresponding MFA success log, or is a non-allowlisted process accessing lsass.exe memory?
    context: |
      This question targets two methods of defense evasion. A logon for a user who is supposed to be protected by Multi-Factor Authentication (MFA) that doesn't have a matching success event in the MFA provider's logs indicates a potential MFA bypass. Separately, any process that is not an expected system or security tool reading the memory of `lsass.exe` is a classic credential dumping technique.
    answer_sources:
      - Sysmon Event ID 10 (Process Access)
      - Windows Event ID 4624
      - MFA Provider Logs
      - NAI: VPN Concentrators, Cloud Service Authentication Logs, Domain Controllers, Privileged Endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH WinEventID=4624, LogonType=10 for MFA-enforced user
          CORRELATE with MFA logs for same user/IP within 60s
          ALERT if no MFA success event is found
          SEARCH Sysmon EventID=10, TargetImage="*lsass.exe", GrantedAccess includes "0x1000"
          IF SourceImage NOT IN allowlist -> ALERT
  - question: Is a statistically rare process accessing lsass.exe memory?
    context: |
      Building on the previous question, this approach uses statistical rarity to identify suspicious processes accessing `lsass.exe`. Legitimate processes that access LSASS memory (like endpoint security agents) are typically widespread. A process that is rare across the enterprise performing this sensitive action is a strong anomaly signal.
    answer_sources:
      - Sysmon Event ID 10 (Process Access)
      - NAI: Domain Controllers, Privileged Endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon EventID=10, TargetImage="*lsass.exe"
          CALCULATE enterprise-wide prevalence of SourceImage
          IF prevalence is in the bottom 5th percentile -> ALERT
  - question: Has a clustering algorithm identified an anomalous lsass.exe memory access event?
    context: |
      Legitimate access to `lsass.exe` memory tends to follow predictable patterns, forming 'clusters' of activity when analyzed. For example, a specific security tool will always access it in the same way. This question proposes using a clustering algorithm like DBSCAN to model these legitimate patterns. Any access event that doesn't fit into a known cluster is considered 'noise' or an outlier and is a strong candidate for a malicious credential access attempt.
    answer_sources:
      - Sysmon Event ID 10 (Process Access)
      - NAI: Domain Controllers, Privileged Endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Clustering (DBSCAN)
          FEATURES: SourceImage, GrantedAccess, parent_process, user_context
          ANALYSIS: Legitimate access patterns will form dense clusters.
          ALERT_CONDITION: Alert on any access event that is classified as noise (not belonging to any cluster)
  - question: Has a known credential harvesting DLL been written to System32 and then registered as an LSA package?
    context: |
      This is a high-fidelity detection for a classic credential access technique. An adversary drops a known malicious tool (like Mimikatz's `memssp.dll`) onto the system and then modifies the registry to load it as a Security Support Provider. This allows the tool to intercept authentications and harvest credentials in cleartext. Chaining these specific events together provides a very strong signal of compromise.
    answer_sources:
      - Sysmon Event ID 1 (Process Creation)
      - Sysmon Event ID 11 (File Creation)
      - Sysmon Event ID 13 (Registry Set)
      - NAI: Domain Controllers, Member Servers, System Registry Hives, File System (C:\Windows\System32\).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CHAIN events by ProcessGUID within a short time window:
          1. Sysmon EventID=1 (Process Create)
          2. Sysmon EventID=11 in "C:\Windows\System32\" where file_hash matches known_malicious_ssp_hashes
          3. Sysmon EventID=13 modifying an LSA package key to add the path from step 2
          IF chain is complete -> HIGH SEVERITY ALERT
  - question: Has a newly registered LSA package DLL been identified as packed or flagged as malicious by a machine learning model?
    context: |
      This question provides two advanced methods for detecting malicious LSA packages when the hash is unknown. First, since attackers often pack their tools, a high Shannon entropy score for a newly registered DLL is suspicious. Second, a supervised machine learning model can be trained to recognize the characteristics of a malicious LSA registration event (e.g., file properties, initiating process) and predict if a new one is malicious.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Member Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Combined statistical and ML approach
          ON LSA package registration event:
            CALCULATE entropy of the new DLL
            IF entropy > 7.2 -> ALERT
            INPUT event features into trained XGBoost model
            IF model_prediction == "malicious" -> ALERT
  - question: Has a user account in Active Directory been modified to enable reversible password encryption or to not require a password?
    context: |
      This is a critical security misconfiguration that an attacker with domain privileges might enact. Enabling reversible password encryption stores a user's password in a way that can be easily retrieved, and setting 'password not required' removes a fundamental security control. Monitoring for these specific changes to the `userAccountControl` attribute in Active Directory is crucial for detecting credential access attempts.
    answer_sources:
      - Windows Event ID 4738 (User Change)
      - Windows PowerShell Event ID 4104
      - NAI: Domain Controllers, Active Directory Database (NTDS.dit).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH WinEventID=4738 where userAccountControl change includes "Password not required" OR "Store password using reversible encryption" -> ALERT
          SEARCH PowerShell logs (EventID=4104) for "Set-ADUser -AllowReversiblePasswordEncryption $true" -> ALERT
  - question: Is there an anomalous spike in `userAccountControl` modifications, or is an admin making changes inconsistent with their role?
    context: |
      Beyond looking for specific dangerous changes, this question hunts for anomalous behavior. A sudden burst of `userAccountControl` modifications across the domain could signal a widespread attack. Additionally, using peer group analysis, we can model the typical behavior of different administrators. If a 'help desk' admin suddenly enables reversible encryption for a senior executive, this is a behavioral anomaly that deviates from their role and should be investigated.
    answer_sources:
      - Windows Event ID 4738 (User Change)
      - NAI: Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR rate of WinEventID=4738 per day. ALERT if count > 3 standard deviations from the mean.
          MODEL typical AD changes per admin role (peer group). ALERT if an admin performs a change inconsistent with their role's activity profile.
  - question: Has a rare process executed a rapid sequence of file creation and LSA registry modification?
    context: |
      This question combines event chaining with statistical rarity for a powerful detection. The sequence of a process creating a DLL and immediately registering it as an LSA package is suspicious. When the process performing this action is also statistically rare in the environment (i.e., not a common installer or system tool), the likelihood of it being malicious is extremely high.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Critical Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CHAIN events by ProcessGUID within 60 seconds: Sysmon(1) -> Sysmon(11) -> Sysmon(13) for LSA package
          ENRICH with prevalence of the initiating process from Sysmon(1)
          IF process_prevalence < 5% -> INCREASE ALERT SEVERITY
  - question: Has a graph-based model detected an anomalous, linear chain of process -> file -> registry key modification?
    context: |
      This question reframes the previous detection in terms of graph analytics. Legitimate software installations often create complex graphs of activity (many files, many registry keys). An adversary's actions are often more direct and linear: a single process writes one file and modifies one key. By modeling system activity as a graph, we can use anomaly detection to flag these small, simple, high-velocity subgraphs involving critical assets like LSA registry keys.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - NAI: Domain Controllers, Critical Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a graph analytics model, pseudocode represents the logic
          MODEL_TYPE: Graph-based anomaly detection
          GRAPH: Nodes are processes, files, registry keys. Edges are actions (write, modify).
          ALERT_CONDITION: Flag small, linear subgraphs created in a short time involving LSA registry keys (e.g., P1 -> writes -> F1 -> modifies -> R1)
  - question: Has a downgrade in authentication protocol strength (e.g., NTLMv1, RC4 Kerberos) been observed from a host with a recent authentication modification alert?
    context: |
      After modifying an authentication process, an adversary might force the system to use weaker, more crackable protocols. This question looks for network-level evidence of this, such as the use of the outdated NTLMv1 protocol or weak RC4 encryption ciphers in Kerberos tickets. Correlating this network activity with a host that has already been flagged for suspicious authentication process changes provides strong confirmation of a successful attack.
    answer_sources:
      - Zeek ntlm.log
      - Zeek krb5.log
      - NAI: Network traffic to/from Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH (Zeek ntlm.log where version=="v1") OR (Zeek krb5.log where cipher=="rc4-hmac")
          CORRELATE source or destination IP with hosts having recent T1556-related alerts
          IF match -> ALERT
  - question: Has the percentage of weak authentication protocols on the network suddenly increased?
    context: |
      This question establishes a network-wide baseline for authentication protocol usage. In a properly configured environment, strong protocols like NTLMv2 and AES Kerberos should be dominant. A sudden, statistically significant increase in the percentage of weak protocols (NTLMv1, RC4) across the network can indicate a widespread, systemic attack or misconfiguration that an adversary is exploiting.
    answer_sources:
      - Zeek ntlm.log
      - Zeek krb5.log
      - NAI: Network traffic to/from Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          PER_HOUR_CALCULATE percentage of authentications using NTLMv1 or RC4-HMAC
          ESTABLISH baseline (e.g., should be <1%)
          ALERT if percentage spikes above the statistical threshold
  - question: Is there an anomalous spike in outbound traffic from an authentication server following a suspected compromise?
    context: |
      After an adversary successfully installs a credential harvesting tool (like a malicious password filter) on an authentication server, they need to exfiltrate the captured credentials. This could manifest as an unusual spike in outbound network traffic from that server. This question uses time-series anomaly detection to monitor the server's traffic patterns and flag deviations that could represent data exfiltration.
    answer_sources:
      - Zeek conn.log
      - NAI: Network traffic from Authentication Servers (e.g., Domain Controllers).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // This is a machine learning model, pseudocode represents the logic
          MODEL_TYPE: Time-series anomaly detection (LSTM autoencoder)
          DATA_INPUT: Hourly outbound `total_bytes` from authentication servers in conn.log
          TRAINING: Train on historical traffic to learn daily/weekly seasonality
          ALERT_CONDITION: Alert if observed traffic significantly exceeds the model's prediction, especially after a recent T1556 alert on that host