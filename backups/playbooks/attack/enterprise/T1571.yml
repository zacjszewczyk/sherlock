name: T1571: Non-Standard Port
id: d2a4f6d8-4b9c-4e1f-9a7b-8c6d5e4f3a2b
description: >
  Investigates whether an adversary is communicating with command and control infrastructure using non-standard ports. This involves analyzing network traffic for connections on ports outside the standard egress allow-list, especially to destinations on threat intelligence feeds. It also includes inspecting TLS/SSL sessions for known malicious fingerprints (JA3/JA3S, certificates), identifying mismatches between application-layer protocols and their expected ports, and examining host-level data for unusual processes making network connections. Furthermore, the playbook looks for C2-like behavioral patterns such as periodic heartbeats, asymmetric data flows, or unusually long sessions.
type: technique
related: TA0011: Command and Control
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can we detect successful outbound connections to known C2 servers on non-standard ports?
    context: This question aims to identify high-confidence malicious activity by correlating two specific conditions: communication on a port that is not explicitly allowed for egress traffic, and a destination IP address that is already known to be a command and control server. A match provides a strong signal of a compromised host communicating with an adversary.
    answer_sources: Zeek conn.log, Threat Intelligence Feed, Egress network gateways, internet-facing proxies, and SIEM/Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log
          WHERE conn_state = 'SF' AND
          destination_ip is public AND
          destination_port NOT IN {standard_ports}
          JOIN destination_ip with Threat_Intel_C2_Feed
          ALERT on match
  - question: How can we identify potential C2 servers by analyzing the frequency of outbound connections on non-standard ports?
    context: This question helps uncover previously unknown C2 infrastructure. Adversaries may use a single IP for many compromised hosts. By identifying destination IPs that receive an unusually high number of connections from the internal network, especially on non-standard ports, analysts can discover new malicious servers that are not yet on threat intelligence feeds. Enrichment with ASN and geographic data helps filter out legitimate services.
    answer_sources: Zeek conn.log, Threat Intelligence Feed, Egress network gateways, internet-facing proxies, and SIEM/Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log over 24h
          WHERE conn_state = 'SF' AND destination_port NOT IN {standard_ports}
          CALCULATE frequency of destination_ip
          ENRICH destination_ip with ASN/Geo data
          FLAG IPs in top 99th percentile of frequency
          FILTER out known business/cloud services
  - question: Can we use a machine learning model to classify new, non-standard port connections as malicious?
    context: This question focuses on proactively scoring the risk of network connections that use non-standard ports. By training a model on various features like connection duration, bytes transferred, and threat intelligence scores, it's possible to identify subtle patterns of maliciousness that simple rules might miss, allowing for the detection of novel or evolving C2 techniques.
    answer_sources: Zeek conn.log, Threat Intelligence Feed, Egress network gateways, internet-facing proxies, and SIEM/Threat Intelligence Platform
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR new connections on non-standard ports:
          EXTRACT features (port, duration, bytes, IP_rep, ASN_rarity)
          INPUT features into trained classification model (e.g., Random Forest)
          SCORE connection's probability of being malicious
          ALERT on high scores
  - question: How can we detect C2 communication by matching TLS/SSL fingerprints on non-standard ports against known malicious indicators?
    context: Many C2 frameworks (like Cobalt Strike, Metasploit) use default or recognizable TLS configurations. This question aims to identify these frameworks by looking for specific, known-bad indicators such as JA3/JA3S hashes, certificate subjects/issuers, or the use of self-signed certificates. A match is a strong indicator of a specific malware family or C2 tool being used.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek x509.log, Egress network gateways and any network sensors performing TLS/SSL inspection
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH connections on non-standard ports
          CORRELATE conn.log with ssl.log and x509.log by UID
          MATCH ja3, ja3s, issuer, subject against known C2 indicator list
          ALERT if self_signed = true OR a C2 indicator is matched
  - question: Can we identify C2 traffic by analyzing the entropy of TLS certificate subjects on non-standard ports?
    context: This question helps find malicious servers by examining the randomness of their certificate subject names. Domain Generation Algorithms (DGAs) often produce highly random, high-entropy names, while some default C2 setups use generic, low-entropy names. By flagging subjects with outlier entropy values, analysts can uncover potential C2 infrastructure that might otherwise be missed.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek x509.log, Egress network gateways and any network sensors performing TLS/SSL inspection
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR TLS traffic on non-standard ports:
          CALCULATE Shannon entropy of certificate subject string
          FLAG subjects in top 5th (high entropy) and bottom 5th (low entropy) percentile for review
  - question: How can we use clustering algorithms to identify anomalous groups of TLS connections on non-standard ports?
    context: This question focuses on discovering previously unknown C2 campaigns without relying on pre-existing signatures. By grouping connections based on their TLS characteristics (certificate validity, key length, JA3 hash, etc.), a clustering algorithm can surface groups of connections that share similar, anomalous properties. These clusters may represent a single adversary's infrastructure.
    answer_sources: Zeek conn.log, Zeek ssl.log, Zeek x509.log, Egress network gateways and any network sensors performing TLS/SSL inspection
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features from ssl.log and x509.log for non-standard port traffic
          APPLY clustering algorithm (e.g., DBSCAN) to the feature set
          ANALYZE resulting clusters for anomalous groups of connections
  - question: How can we detect C2 activity by identifying mismatches between the observed application-layer protocol and the expected protocol for a given port?
    context: Adversaries often tunnel traffic over common ports to bypass firewalls (e.g., running a C2 protocol over port 53, which is for DNS). This question aims to detect this evasion technique by using a network sensor's ability to dynamically identify the true protocol. An alert for a mismatch, like non-DNS traffic on port 53, is a strong indicator of policy evasion or malicious tunneling.
    answer_sources: Zeek conn.log, Internal network segments (for East-West traffic visibility) and egress network gateways (for North-South traffic visibility)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log
          ALERT IF (port = 53 AND service != 'dns') OR
          (port = 80 AND service NOT IN {'http', 'ssl'}) OR
          (port = 443 AND service != 'ssl')
  - question: How can we identify hosts exhibiting anomalous protocol/port mismatch behavior compared to their baseline?
    context: While some protocol/port mismatches can be benign, a sudden increase on a specific host can indicate compromise. This question focuses on establishing a normal baseline of mismatch activity for each host and then flagging any significant deviation. This helps differentiate between normal network quirks and a potential security incident on a specific machine.
    answer_sources: Zeek conn.log, Internal network segments (for East-West traffic visibility) and egress network gateways (for North-South traffic visibility)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host, establish a baseline of protocol/port mismatch ratio
          MONITOR the ratio over a rolling 24-hour window
          ALERT if a host's ratio exceeds 3 standard deviations above its baseline or the network average
  - question: Can a time series anomaly detection model identify network-wide spikes in protocol-port mismatch events?
    context: This question aims to detect widespread or coordinated C2 activity that might manifest as a sudden, network-wide increase in protocol-port mismatches. A time series model can learn the normal daily and weekly patterns of these events and alert on statistically significant spikes that could indicate a new malware campaign or large-scale attack.
    answer_sources: Zeek conn.log, Internal network segments (for East-West traffic visibility) and egress network gateways (for North-South traffic visibility)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE count of protocol-port mismatch events per hour, network-wide
          APPLY time series anomaly detection model (e.g., Seasonal-ARIMA)
          ALERT on spikes that deviate significantly from the forecasted pattern
  - question: How can we detect when processes not typically associated with network activity initiate outbound connections?
    context: Adversaries often use legitimate system utilities that don't normally make network connections (like regsvr32.exe or mshta.exe) to download or execute malicious code. This is a "living off the land" technique. This question aims to create high-fidelity alerts by detecting when these specific, suspicious processes make an outbound network connection.
    answer_sources: Sysmon Event ID 3, Windows Event ID 5156, Windows Event ID 4688, Critical servers (Domain Controllers, database servers), developer workstations, and executive endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon Event ID 3
          WHERE Image IN {list_of_suspicious_processes} AND
          DestinationIp is external
          ALERT on match
  - question: How can we identify anomalous process network behavior by baselining legitimate process, parent process, and destination port combinations?
    context: This question focuses on detecting novel malicious activity on an endpoint by identifying "first-seen" behaviors. By building a historical baseline of normal process network activity (which process, launched by what parent, connects to which port), any new combination that has never been seen before can be flagged as anomalous. The rarity of the process and port can be used to score the severity of the anomaly.
    answer_sources: Sysmon Event ID 3, Windows Event ID 5156, Windows Event ID 4688, Critical servers (Domain Controllers, database servers), developer workstations, and executive endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD a 30-day baseline of {Image, ParentImage, DestinationPort} tuples
          FOR new Sysmon Event ID 3 events:
          CHECK if the {Image, ParentImage, DestinationPort} tuple is in the baseline
          IF not, flag as a 'first-seen' anomaly and score based on rarity
  - question: Can a One-Class SVM model be used to detect anomalous process network connections that deviate from a learned baseline of normal behavior?
    context: This question proposes a more advanced method for baselining endpoint network activity. A One-Class SVM learns a complex boundary around what constitutes "normal" behavior based on features like the process, parent, port, and protocol. Any new connection that falls outside this learned boundary is automatically classified as an anomaly, allowing for detection of subtle deviations that might not be caught by simple "first-seen" logic.
    answer_sources: Sysmon Event ID 3, Windows Event ID 5156, Windows Event ID 4688, Critical servers (Domain Controllers, database servers), developer workstations, and executive endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN a One-Class SVM model on baseline data of normal {Image, ParentImage, DestinationPort, Protocol} tuples
          FOR new connections:
          PREDICT if the connection falls outside the learned boundary of normal behavior
          IF it is an outlier, flag as an anomaly for investigation
  - question: How can we detect malformed or evasive C2 traffic by monitoring for specific protocol violation events on non-standard ports?
    context: C2 channels sometimes do not adhere to standard TCP/IP protocol behavior, and network sensors like Zeek can flag these as "weird" traffic. This question aims to find C2 activity by looking for these protocol anomalies (e.g., a connection being active without data transfer) specifically on non-standard ports, as this combination is highly indicative of an adversary trying to maintain a covert connection.
    answer_sources: Zeek conn.log, Zeek weird.log, Egress network gateways and internal network core switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek weird.log for events like 'active_connection_without_data'
          CORRELATE with Zeek conn.log by UID
          ALERT if the connection is on a non-standard port
  - question: How can we detect periodic C2 beaconing by analyzing the timing consistency of outbound connections?
    context: C2 implants often "beacon" back to their server on a regular, automated schedule (e.g., every 60 seconds). This creates a highly consistent time interval between connections. This question aims to detect this machine-like behavior by calculating the standard deviation of inter-arrival times for connections between a source and destination. A very low deviation suggests a non-human, periodic heartbeat characteristic of C2.
    answer_sources: Zeek conn.log, Zeek weird.log, Egress network gateways and internal network core switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          GROUP connections by source_ip, dest_ip, dest_port
          FOR each group, calculate standard deviation of inter-arrival time over 1 hour
          FLAG groups with a low standard deviation (e.g., < 2s) and >= 5 connections
  - question: Can a time series autoencoder detect anomalous C2-like traffic patterns like heartbeating or slow data exfiltration?
    context: This question proposes using a neural network to learn the normal patterns of network connections over time. An autoencoder is trained to reconstruct sequences of normal traffic data. When it encounters an anomalous sequence, such as the rhythmic, low-data pattern of C2 beaconing or the long, slow trickle of data exfiltration, it will fail to reconstruct it accurately. This high "reconstruction error" serves as a powerful signal for an anomaly.
    answer_sources: Zeek conn.log, Zeek weird.log, Egress network gateways and internal network core switches
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source-destination pair, create time series of connection features {duration, bytes, pkts}
          INPUT series into trained time series autoencoder
          ALERT if the reconstruction error is high, indicating an anomalous pattern