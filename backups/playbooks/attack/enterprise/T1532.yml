name: "T1532: Archive Collected Data"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "Is an adversary collecting and archiving sensitive data on corporate mobile devices prior to exfiltration? This involves monitoring for applications creating archive files (.zip, .rar), especially if the application is not an approved utility and has access to sensitive data like Contacts or Photos. Suspicion is heightened if the created file is unusually large, stored in an obfuscated path, or followed by a large network outbound connection. Another indicator is anomalous resource consumption (CPU, memory, disk I/O) by a process when the device screen is off, suggesting background data processing. A third indicator is the execution of a suspicious sequence of API calls within a short window, such as accessing sensitive data, followed by calling a compression library, and then initiating a network connection, particularly from an application not expected to perform such actions."
type: "technique"
related:
  - "TA0035: Collection"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a non-approved application with access to sensitive data creating archive files?"
    context: "This question seeks to identify a core behavior of data staging: an application, not recognized as a legitimate backup or file management tool, creating compressed files. The check becomes critical if the application's manifest shows it has permissions to access sensitive user data (e.g., Contacts, Photo Library, Microphone) or if the application is found on a threat intelligence denylist. A positive match is a strong indicator of malicious data collection."
    answer_sources:
      - "MTD file_creation.log"
      - "MDM application_inventory.log"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH MTD file_creation.log WHERE file_extension IN ['.zip', '.rar', '.7z', '.tar.gz']. JOIN with MDM inventory on process_name. ALERT if process_not_in_allowlist AND has_sensitive_permissions OR is_on_denylist."
  - question: "Are newly created archive files unusually large or stored in obfuscated directory paths, and is this activity followed by significant data transfer?"
    context: "This question looks for contextual clues that suggest malicious intent behind an archive's creation. An unusually large file (e.g., in the 95th percentile of file sizes on that device) suggests bulk data collection. A high-entropy file path (Shannon entropy > 3.0) suggests an adversary is attempting to hide the staged data. Correlating these events with a subsequent large network upload (e.g., >1MB) within minutes strongly indicates data exfiltration is in progress."
    answer_sources:
      - "MTD file_creation.log"
      - "MDM application_inventory.log"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation."
    range: "last 90 days"
    queries:
      - "pseudocode: ON archive_file_creation_event: CALCULATE file_size_percentile(device_id, 30_days). CALCULATE shannon_entropy(file_path). SEARCH Zeek conn.log for device_ip within 5_minutes WHERE bytes_out > 1MB. ALERT if size_percentile > 95 OR path_entropy > 3.0."
  - question: "Can a machine learning model identify malicious data staging events by combining file, application, and network characteristics?"
    context: "This question proposes using a probabilistic, machine learning-based approach for higher-fidelity alerting. By training a classification model (e.g., Gradient Boosting) on a combination of features—such as file size percentile, path entropy, app permissions, and network bytes sent post-creation—the system can learn to score file creation events for their likelihood of being malicious. This can automate incident creation for high-confidence events and reduce analyst fatigue from false positives."
    answer_sources:
      - "MTD file_creation.log"
      - "MDM application_inventory.log"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation."
    range: "last 90 days"
    queries:
      - "pseudocode: SCORE file_creation_event with ML_Model(features: [file_size_percentile, path_entropy, is_archive, app_permissions, on_allowlist, time_of_day, post_creation_network_bytes]). ALERT if score > 0.90."
  - question: "Is an unrecognized or denylisted application consuming high resources while the device screen is off?"
    context: "Adversaries often perform resource-intensive staging activities, like data compression, when the device is idle and the screen is off to avoid impacting user experience and evade detection. This question aims to catch this behavior by looking for processes that are not on an allowlist of known-good background services and are consuming resources above a static high-water mark. An alert for a denylisted application would be of the highest severity."
    answer_sources:
      - "MTD process_performance.log"
      - "MDM device_health.log"
      - "MDM application_inventory.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH MTD performance_logs WHERE screen_state = 'off'. CHECK process_name against denylist and allowlist. ALERT if on_denylist. ALERT if not_on_allowlist AND (cpu > 70% OR memory > X) for 60s."
  - question: "Is an application exhibiting a statistically significant anomaly in CPU, memory, and disk I/O consumption simultaneously while the screen is off, compared to its own historical baseline?"
    context: "This question improves upon static thresholds by using per-application behavioral baselining. It seeks to identify when an application's resource usage deviates significantly (e.g., >3 standard deviations) from its own established norm for 'screen off' activity. A simultaneous spike across CPU, memory, and disk I/O is a strong indicator of a process performing heavy lifting, like compressing a large volume of collected data, while the user is inactive."
    answer_sources:
      - "MTD process_performance.log"
      - "MDM device_health.log"
      - "MDM application_inventory.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each process WHERE screen_state = 'off': CALCULATE moving_average(cpu, 60s), moving_average(memory, 60s), moving_average(disk_io, 60s). COMPARE to 30-day baseline for that process. ALERT if all three metrics > (mean + 3 * std_dev)."
  - question: "Can a multivariate time-series model detect anomalous device behavior indicative of data staging by analyzing the combined patterns of CPU, memory, disk, and network usage?"
    context: "This question proposes using an advanced anomaly detection model, such as an LSTM Autoencoder, to learn the normal, holistic behavior of a device. The model analyzes vectors of performance metrics over time. An anomaly is flagged when the model's reconstruction error is high, meaning the device's current state does not match its learned 'normal' patterns. This can detect subtle or novel staging techniques that might be missed by rule-based or univariate methods."
    answer_sources:
      - "MTD process_performance.log"
      - "MDM device_health.log"
      - "MDM application_inventory.log"
      - "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents."
    range: "last 90 days"
    queries:
      - "pseudocode: FEED live telemetry vector [cpu, memory, disk, network, screen_state] into trained LSTM_Autoencoder_model. CALCULATE reconstruction_error. ALERT if reconstruction_error > dynamic_threshold."
  - question: "Is a non-backup or non-cloud-storage application accessing sensitive data, compressing it, and then initiating a network connection in a short time frame?"
    context: "This question looks for a very specific, high-confidence chain of events that strongly indicates malicious activity. The sequence of reading sensitive data (contacts, photos), calling a compression library, and then opening a network socket, all within a minute, is a textbook pattern for data theft. If the application performing these actions is not a known backup or cloud storage utility, it warrants an immediate high-severity alert."
    answer_sources:
      - "MTD api_call.log"
      - "Application Sandboxing Logs"
      - "MDM application_inventory.log"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH MTD api_call.log for sequence [read_contacts, zip_file, socket_connect] by same_process_id within 60s. JOIN with MDM inventory on app_name. ALERT if app_category NOT IN ['Backup', 'Cloud Storage']."
  - question: "Is an application executing rare sequences of API calls or exhibiting unusually random API call patterns compared to its own normal behavior?"
    context: "This question applies behavioral analysis to API call patterns. An application executing a sequence of API calls that is statistically rare for that specific app (e.g., in the bottom 1st percentile of n-gram frequency) could indicate new, malicious functionality has been activated. Likewise, a spike in API call entropy suggests an app is behaving erratically and performing a wider variety of actions than usual, which can be a precursor to or part of a compromise."
    answer_sources:
      - "MTD api_call.log"
      - "Application Sandboxing Logs"
      - "MDM application_inventory.log"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each app: MONITOR API call trigrams. ALERT if new trigram frequency is in bottom 1st percentile. CALCULATE 5-min sliding window entropy of API calls. ALERT if entropy > (baseline_mean + 3 * std_dev)."
  - question: "Can a deep learning model trained on known malicious and benign examples classify API call sequences in real-time to identify data staging and exfiltration attempts?"
    context: "This question proposes a sophisticated, supervised learning approach for detecting malicious behavior. By training a sequence-aware model like an LSTM or GRU on labeled datasets of benign and malicious API call sequences, the system can learn to identify complex attack patterns. When deployed, it can classify new, unseen sequences in real-time, triggering a high-confidence alert when a sequence is classified as malicious."
    answer_sources:
      - "MTD api_call.log"
      - "Application Sandboxing Logs"
      - "MDM application_inventory.log"
      - "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications."
    range: "last 90 days"
    queries:
      - "pseudocode: FOR each new API_sequence: CLASSIFY with trained LSTM_model(sequence_vector). ALERT if classification is 'malicious' AND confidence_score > 0.95."