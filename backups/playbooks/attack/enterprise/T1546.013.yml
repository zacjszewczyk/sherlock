name: T1546.013: PowerShell Profile
id: 03a4b6b6-3c8f-4d9a-8f0a-1b1e2c7d5f6e
description: This playbook helps investigate whether an adversary is using PowerShell profiles for persistence or privilege escalation. It focuses on detecting malicious content within profile scripts, identifying structural patterns indicative of persistence (like download cradles or task creation), analyzing anomalous file creation or modification events, and monitoring for suspicious network activity originating from PowerShell processes that load profiles. The investigation also covers scenarios where profiles are used to execute privilege escalation tools or to trigger sensitive system changes after being modified by lower-privileged accounts.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are PowerShell profile scripts matching known malicious file hashes or containing suspicious content signatures?
  context: This question aims to perform a direct, signature-based check for known malicious activity. Adversaries often reuse tools or code snippets. By comparing file hashes against a watchlist of known-bad hashes and scanning script content with YARA rules for strings like 'Invoke-Mimikatz' or 'DownloadString', analysts can quickly identify common threats.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Sysmon Event ID 11
  - File systems on endpoints and servers
  - PowerShell script block logs
  range: last 90 days
  queries:
  - 'Pseudocode: Correlate file creation events (Sysmon 11) in profile paths with a malicious hash list. Scan script block logs (WinEvent 4104) with a YARA rule for malicious strings.'
- question: Are PowerShell profile scripts exhibiting unusually high entropy, suggesting obfuscation or encryption?
  context: Adversaries frequently obfuscate or encrypt their payloads to evade signature-based detection. High entropy (a measure of randomness) in a script block is a strong indicator of such techniques. This question involves establishing a baseline for normal script entropy in the environment and flagging scripts that are statistical outliers, which require closer inspection.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - PowerShell script block logs
  range: last 90 days
  queries:
  - 'Pseudocode: Calculate Shannon entropy for script blocks from profiles. Compare against a baseline (mean + 3 stddev or 95th percentile) and alert on high-entropy outliers.'
- question: Can a machine learning model classify PowerShell profile scripts as malicious based on their features?
  context: This question proposes a more advanced detection method using supervised machine learning. By training a model on a labeled dataset of benign and malicious scripts, it can learn to identify maliciousness based on a combination of features like character frequency, specific keywords (e.g., 'IEX', 'FromBase64String'), function calls, and entropy. This can catch novel or heavily obfuscated threats that other methods miss.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - PowerShell script block logs
  range: last 90 days
  queries:
  - 'Pseudocode: Extract features (keywords, entropy, function calls) from script blocks. Score scripts using a trained classification model (e.g., Gradient Boosting) and alert on high-confidence malicious classifications.'
- question: Do PowerShell profile scripts contain common persistence patterns like download cradles or calls to create scheduled tasks/WMI events?
  context: Adversaries use profile scripts not just to execute a payload, but to establish a more durable form of persistence. This question focuses on finding the code that creates these secondary mechanisms. It involves searching for specific commands (e.g., `Net.WebClient`, `Register-ScheduledTask`) and correlating the profile execution with the successful creation of a new scheduled task or WMI event subscription.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4698
  - Windows Event ID 5861
  - Windows Event ID 4688
  - PowerShell execution logs
  - Windows Security/System event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Search script block logs (WinEvent 4104) with regex for persistence patterns (e.g., `FromBase64String`, `Register-ScheduledTask`). Correlate profile execution with task creation (WinEvent 4698) or WMI event creation (WinEvent 5861).'
- question: Is the frequency of sensitive cmdlets (e.g., 'IEX', 'Invoke-Expression') in a profile script statistically anomalous compared to a user group's baseline?
  context: While some sensitive commands are used legitimately by administrators or developers, their presence in other users' profiles or an unusually high count in any profile can be suspicious. This question involves baselining the normal frequency of these commands for different user roles and alerting when a script deviates significantly from its peer group's baseline.
  answer_sources:
  - Windows Event ID 4104
  - PowerShell execution logs
  range: last 90 days
  queries:
  - 'Pseudocode: Establish a baseline frequency of sensitive cmdlets per user group. Alert if a profile script''s cmdlet count exceeds the baseline (e.g., mean + 2 stddev).'
- question: Can an anomaly detection model identify profile scripts that are structurally and semantically different from a known-good baseline?
  context: This question uses an unsupervised machine learning approach to find anomalous scripts without relying on known-bad signatures. By converting scripts into numerical vectors (e.g., using TF-IDF) and training a model on a corpus of known-good scripts, the model learns what 'normal' looks like. It can then flag any new script that is a significant outlier in structure or content.
  answer_sources:
  - Windows Event ID 4104
  - PowerShell execution logs
  range: last 90 days
  queries:
  - 'Pseudocode: Tokenize script blocks and use TF-IDF to create feature vectors. Train a one-class SVM on benign scripts and flag new scripts that the model identifies as anomalies.'
- question: Was a PowerShell profile file created or modified by an unexpected parent process (e.g., Word, Outlook)?
  context: The context of how a file is modified is critical. PowerShell profiles should be modified by legitimate text editors or development tools. A modification originating from a process like Microsoft Word or a web browser is highly anomalous and may indicate that a malicious document or drive-by download was the initial vector.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Monitor file writes (WinEvent 4663) to profile.ps1 paths. Correlate with parent process (Sysmon 1) and alert if the parent is not on an allowlist of expected editors (e.g., code.exe, powershell.exe).'
- question: Is the frequency of PowerShell profile modifications for a specific host or user statistically unusual?
  context: Legitimate users and administrators typically modify their profile scripts infrequently. A sudden burst of modifications for a single user or on a single host is abnormal. This behavior could indicate an adversary refining their payload or attempting to fix a broken persistence mechanism. Baselining modification frequency helps detect these unusual flurries of activity.
  answer_sources:
  - Windows Event ID 4663
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Baseline the frequency of profile modifications per host/user. Alert if the count in a 24-hour period exceeds a statistical threshold (e.g., mean + 3 stddev).'
- question: Can a time-series model detect an anomalous spike in the number of profile modifications across the enterprise?
  context: This question seeks to identify widespread, coordinated activity. By forecasting the expected number of profile modifications per day across the entire organization, a time-series model can detect significant deviations. Such a spike could indicate a large-scale campaign where an adversary is deploying persistence across many machines simultaneously.
  answer_sources:
  - Windows Event ID 4663
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Use a time-series model (e.g., ARIMA) to forecast daily profile modifications. Alert if the actual count significantly deviates from the forecast''s confidence interval.'
- question: Did a PowerShell process, after loading a profile, connect to a known malicious or low-reputation domain?
  context: A primary goal for a malicious profile script is often to establish command and control (C2). This question focuses on detecting that C2 traffic by correlating PowerShell processes (that did not use the '-NoProfile' switch) with outbound network connections. These connections are then checked against threat intelligence feeds for known-bad or low-reputation destinations.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Network traffic logs
  - DNS server logs
  range: last 90 days
  queries:
  - 'Pseudocode: Correlate PowerShell process creation (WinEvent 4688, without -NoProfile) with network logs (Zeek). Alert if the destination IP/domain is on a threat intelligence blocklist.'
- question: Did a PowerShell process connect to a rare domain or transfer an anomalously large amount of data compared to the user's baseline?
  context: Adversaries often use newly registered or obscure domains to evade threat intelligence. This question focuses on identifying such connections by looking for domains that are rare within the organization or for a specific user. It also looks for anomalous data transfer sizes, which could indicate data exfiltration or the download of a larger second-stage payload.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Network traffic logs
  range: last 90 days
  queries:
  - 'Pseudocode: Baseline PowerShell network behavior per user (common domains, data sizes). Alert if a connection goes to a rare domain (low prevalence) or if data transfer size exceeds the 99th percentile of the user''s baseline.'
- question: Can a clustering model identify PowerShell-initiated network connections that are outliers from normal behavior?
  context: This question applies unsupervised machine learning to network traffic. By grouping all PowerShell-initiated connections based on features like destination port, protocol, data volume, and duration, the model can define clusters of 'normal' behavior. Any new connection that does not fit into an existing cluster is flagged as an outlier, potentially representing a new or unknown C2 channel.
  answer_sources:
  - Zeek conn.log
  - Network traffic logs
  range: last 90 days
  queries:
  - 'Pseudocode: Use a clustering model (e.g., DBSCAN) on features from PowerShell network connections. Flag connections that do not belong to any established cluster as outliers.'
- question: Does a PowerShell profile script, running in a high-privilege session, contain signatures of known privilege escalation tools or token manipulation functions?
  context: Adversaries may place privilege escalation code within a profile (e.g., the Administrator's profile or the AllUsersAllHosts profile) to automatically run with elevated rights. This question involves first identifying high-privilege PowerShell sessions and then scanning the associated profile script blocks for signatures of known tools like PowerSploit or functions related to token theft.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Windows Event ID 4624
  - PowerShell and security logs
  range: last 90 days
  queries:
  - 'Pseudocode: Identify high-privilege PowerShell sessions (correlate WinEvent 4688/4624). Scan associated script blocks (WinEvent 4104) with YARA rules for privesc tool signatures (e.g., ''Invoke-AllChecks'').'
- question: Are there rare but sensitive commands appearing in a high-privilege profile script, as identified by a high TF-IDF score?
  context: This is a statistical method to find suspicious commands within privileged scripts. TF-IDF (Term Frequency-Inverse Document Frequency) assigns a high score to terms that are frequent in one document (a specific script) but rare across all other documents (all other scripts). A high score for a sensitive command like 'Add-Type' in a privileged profile is a strong indicator of malicious intent.
  answer_sources:
  - Windows Event ID 4104
  - PowerShell and security logs
  range: last 90 days
  queries:
  - 'Pseudocode: Calculate TF-IDF scores for all cmdlets in privileged profile scripts. Alert on scripts containing cmdlets with unusually high scores (e.g., ''Add-Type'', ''Get-Process -Name lsass'').'
- question: Can a machine learning model predict if a privileged profile script is attempting privilege escalation based on its features?
  context: This question leverages a supervised learning model to automatically assess the risk of a privileged script. By training on features indicative of escalation, such as the use of .NET reflection or P/Invoke calls to access Windows APIs, the model can provide a probability score that the script is malicious, allowing analysts to focus on the highest-risk events.
  answer_sources:
  - Windows Event ID 4104
  - PowerShell and security logs
  range: last 90 days
  queries:
  - 'Pseudocode: Extract features (reflection APIs, P/Invoke) from privileged script blocks. Use a trained logistic regression model to score the script and alert if the probability of escalation exceeds a threshold.'
- question: Did a high-privilege PowerShell profile script execute a known sequence of privilege escalation actions, such as reflective DLL loading followed by service creation or LSASS access?
  context: This question looks for a specific, high-confidence attack chain. Privilege escalation often involves multiple steps. A correlation rule can detect a sequence where a privileged PowerShell process first executes a script with suspicious reflection code, and is then immediately used to create a new SYSTEM service or access credentials in LSASS memory, linking the preparatory action to the malicious outcome.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Windows Event ID 7045
  - Sysmon Event ID 10
  - System, Security, and Sysmon event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Correlate a script block with reflection (WinEvent 4104) from a privileged process with a subsequent new service creation (WinEvent 7045) or LSASS access (Sysmon 10) from the same process ID.'
- question: Did a privileged profile script execute a sequence of commands that has a very low probability of occurring based on a model of normal administrative workflows?
  context: This question aims to detect novel attack sequences by modeling the 'grammar' of legitimate administrative scripts. Using a Markov chain model, we can calculate the probability of one command following another. If a live script executes a sequence of commands with a very low probability under the model, it signifies a deviation from normal workflow and is flagged as anomalous.
  answer_sources:
  - Windows Event ID 4104
  - System, Security, and Sysmon event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Model normal command sequences in privileged scripts using Markov chains. Alert if an observed command sequence in a live script has a very low probability under the model.'
- question: Can a sequence-aware machine learning model (e.g., RNN, LSTM) classify the entire command sequence from a privileged profile script as malicious?
  context: This is an advanced approach that considers the full context and order of commands in a script. Sequence-aware models like RNNs are trained on entire scripts (benign and malicious) and can learn complex, long-range patterns indicative of malicious intent that simpler methods might miss, allowing for a more holistic classification of the script's behavior.
  answer_sources:
  - Windows Event ID 4104
  - System, Security, and Sysmon event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Train a sequence model (RNN/LSTM) on tokenized command sequences from benign and malicious scripts. Classify command sequences from privileged profiles in real-time.'
- question: Was a privileged PowerShell profile execution immediately followed by a sensitive action like new user creation, privileged group modification, or SYSTEM-level task creation?
  context: This question seeks to link a profile execution directly to its impact. If a privileged account's profile runs, and within a very short timeframe (e.g., 60 seconds) that same user context is used to create a new account, add a user to Domain Admins, or create a SYSTEM-level scheduled task, it's a very strong signal that the profile script was responsible for the malicious action.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4698
  - Security and System event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Correlate a privileged profile execution with subsequent sensitive events (WinEvent 4720, 4732, 4698) within a 60-second window from the same user.'
- question: Is the pattern of actions following a privileged profile execution a statistical deviation from that administrator's normal behavior?
  context: Different administrators have different duties. This question involves creating a behavioral baseline for each privileged user, tracking the types of sensitive actions they normally perform after their profile script runs. A statistical test can then identify when a user's activity deviates from their own historical norm, such as an administrator who normally only manages services suddenly creating new users.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4698
  - Security and System event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Baseline the distribution of follow-on actions for each admin. Use a chi-squared test to detect significant deviations from this baseline after a profile execution.'
- question: Can a machine learning model predict that a privileged profile script will lead to a sensitive system change not typical for that account?
  context: This question involves training a model to predict the consequences of a script's execution. The model learns the relationship between script features (entropy, keywords) and subsequent system changes (user creation, etc.). It can then generate an alert if it predicts a script will cause a sensitive action that is not part of that user's normal, established behavior.
  answer_sources:
  - Windows Event ID 4720
  - Windows Event ID 4732
  - Windows Event ID 4698
  - Security and System event logs
  range: last 90 days
  queries:
  - 'Pseudocode: Train a multi-label classification model to predict system changes based on script features. Alert if the model predicts a sensitive change that is not part of the account''s baseline.'
- question: Was a privileged PowerShell profile modified by a low-privilege user, and then subsequently executed by the high-privilege account?
  context: This identifies a classic privilege escalation attack chain. An attacker with low-privilege access modifies a profile that a high-privilege user will execute (e.g., the Administrator's profile). The detection requires a two-stage rule: first, flag the anomalous write by the low-privilege user, then escalate the alert if the high-privilege account logs in and runs PowerShell, triggering the payload.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 11
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Alert in two stages. Stage 1: Low-priority alert on write to privileged profile by non-privileged user. Stage 2: Escalate to high-priority if the privileged account executes PowerShell within 24 hours.'
- question: Did a rare or first-seen parent process modify a privileged PowerShell profile?
  context: The integrity of privileged profiles is critical. This question focuses on the parent process that modifies them. While an admin might use 'code.exe', a modification from a process like 'winword.exe' or a custom, unknown executable is highly suspicious. Baselining legitimate parent processes and alerting on rare or first-seen writers is an effective anomaly detection strategy.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Baseline parent processes that modify privileged profiles. Alert if a low-frequency or first-seen parent process performs a modification.'
- question: Can a graph-based anomaly detection model identify the attack chain of a low-privilege user modifying a privileged profile that is later executed?
  context: This question proposes modeling system activity as a graph, where nodes are entities like users and files, and edges are actions like 'writes_to'. A graph-based machine learning model can be trained to recognize normal patterns of interaction. The specific sequence of a low-privilege user writing to a privileged profile which is then executed by the privileged user forms an anomalous graph structure that the model can identify.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Sysmon Event ID 11
  - File system audit logs
  range: last 90 days
  queries:
  - 'Pseudocode: Model user/process/file interactions as a graph. Train a graph-based anomaly detection model to flag the specific subgraph structure representing this attack chain.'