name: T1218.013: Mavinject
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: Helps investigate if an adversary is attempting to evade defenses by proxying execution through the signed binary, mavinject.exe. The playbook focuses on detecting malicious use of mavinject.exe by analyzing several indicators: injections involving known malicious DLLs; target processes making low-reputation network connections; use of suspicious command-line flags pointing to DLLs in non-standard locations; unusual parent-child process relationships (e.g., an Office application spawning mavinject to target a critical system process); and statistical anomalies such as the first execution on a host or a significant spike in enterprise-wide activity.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Was a known malicious DLL injected using mavinject.exe?
    context: This question seeks to identify direct evidence of malicious code injection. Adversaries may use mavinject.exe to load a malicious DLL into the memory of another process to evade defenses. By extracting the hash of the injected DLL and checking it against a threat intelligence database, we can confirm if the payload is a known threat.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Threat Intelligence Platform (TIP)
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation logs for mavinject.exe. FOR EACH event, EXTRACT injected DLL path. GET file hash for DLL from file logs. QUERY threat intelligence platform with hash. ALERT on match.
  - question: Did a process injected by mavinject.exe subsequently communicate with low-reputation network destinations?
    context: This question investigates the post-injection behavior of the target process. Malicious payloads often establish command and control (C2) or exfiltrate data. By analyzing the network traffic of the process that was injected into, we can identify suspicious communications with destinations known to be malicious or having a poor reputation, which strongly indicates a compromise.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Threat Intelligence Platform (TIP)
      - Network egress points (e.g., perimeter firewalls, web proxies)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH mavinject.exe executions. FOR EACH, EXTRACT target PID. SEARCH network logs for connections from PID within 5 minutes. ENRICH destination IPs with reputation data. IF average reputation score < threshold, ALERT.
  - question: Does the network behavior of a process injected by mavinject.exe exhibit characteristics of malicious activity according to a machine learning model?
    context: This question uses a machine learning model to detect subtle or novel malicious network patterns that may not be caught by simple reputation lookups. By training a classifier on features like port usage, data transfer ratios, and connection duration from known good and bad sources, we can score the network traffic from an injected process to determine its likelihood of being malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Platform (TIP)
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH process injected by mavinject.exe, EXTRACT network connection features (IP reputation, port entropy, duration, data ratio). APPLY pre-trained logistic regression model. ALERT if classification is malicious.
  - question: Was mavinject.exe used to inject a DLL from a suspicious or non-standard file location?
    context: Adversaries often place their malicious payloads in world-writable or temporary directories to ensure execution permissions and evade detection. This question looks for mavinject.exe being used with specific command-line flags to inject a DLL from locations like Temp folders or Public user directories, which are uncommon for legitimate software and are highly indicative of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
      - User profile directories (C:\Users\*)
      - System temporary folders (C:\Windows\Temp)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation logs for mavinject.exe where command line contains '/INJECTRUNNING' or '/HMODULE' AND DLL path is in (C:\Windows\Temp, %APPDATA%, etc.). ALERT on match.
  - question: Is mavinject.exe injecting a DLL from a directory that is statistically rare across the enterprise?
    context: Legitimate software typically resides in common, predictable locations. This question leverages this fact by baselining the prevalence of all directory paths used in injection events across the organization. An injection originating from a directory that is very rarely seen (e.g., in the bottom 5th percentile) is a strong statistical anomaly and warrants investigation, as it could be an adversary's custom staging location.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR mavinject.exe executions with '/INJECTRUNNING' or '/HMODULE', EXTRACT DLL directory. COMPARE directory against 90-day prevalence baseline. IF prevalence is in bottom 5th percentile, ALERT.
  - question: Does the file path of the injected DLL appear anomalous based on its structural characteristics?
    context: Adversaries may use randomly generated or obfuscated file paths to hide their tools. This question employs an anomaly detection model (Isolation Forest) to analyze the structure of the DLL file path itself. Features like path length, randomness of directory names (entropy), and the presence of suspicious keywords can help identify paths that deviate significantly from the norm, even if the location isn't on a pre-defined watchlist.
    answer_sources:
      - Windows Event ID 4688
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR mavinject.exe injections, EXTRACT features from DLL path (depth, entropy, keywords). APPLY pre-trained Isolation Forest model. ALERT on anomalous score.
  - question: Was mavinject.exe launched by a non-standard parent process to inject into a critical system process?
    context: This question looks for a suspicious process chain. It is highly unusual for a user application like Microsoft Word or a browser to spawn mavinject.exe, and even more unusual for it to then target a critical system process like lsass.exe. This pattern is a strong indicator of an adversary attempting to escalate privileges or access credentials by injecting code from a compromised user application into a higher-privileged system process.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Critical application servers
      - Process creation logs from all Windows endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process creation logs WHERE process is mavinject.exe, parent is in (winword.exe, powershell.exe, etc.), AND target process is in (lsass.exe, services.exe, etc.). ALERT on match.
  - question: Has a statistically rare chain of processes involving mavinject.exe occurred?
    context: This question aims to find anomalous process chains by looking at their historical frequency. By creating a baseline of normal process interactions (Parent -> mavinject.exe -> Target), any new or extremely rare combination can be flagged as suspicious. An event chain that has never been seen before or is in the bottom 1% of occurrences is a strong anomaly that likely indicates malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Process creation logs from all Windows endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR mavinject.exe executions, construct triplet (Parent, mavinject.exe, Target). COMPARE triplet against 90-day frequency baseline. IF frequency is in bottom 1st percentile, ALERT.
  - question: Does the process execution chain involving mavinject.exe represent an anomalous path in a process ancestry graph?
    context: This question models the entire system's process relationships as a graph to identify unusual connections. A graph database can represent complex parent-child relationships over time. A path like an Office application spawning mavinject.exe to target a system process would be a very distant and rare connection in the graph, making it a high-scoring anomaly that is easily distinguishable from normal system behavior.
    answer_sources:
      - Windows Event ID 4688
      - Process creation logs from all Windows endpoints
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INGEST process creation logs into a graph database. USE graph anomaly detection algorithm to score paths. ALERT on high-scoring paths involving mavinject.exe (e.g., winword.exe -> mavinject.exe -> lsass.exe).
  - question: Has mavinject.exe executed for the first time on a specific host?
    context: This question is based on the 'first-seen' principle. The first time a potentially suspicious tool like mavinject.exe runs on a host is a significant event. While it could be part of a software installation, it often indicates the initial stages of an attack on that machine. By keeping a record of hosts where mavinject.exe has run, we can immediately flag new instances for investigation.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise-wide process execution logs stored in a SIEM
      - Host-based asset inventory
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON mavinject.exe execution, CHECK hostname against a 90-day lookup table of known hosts. IF hostname is not in table, ALERT and ADD hostname to table.
  - question: Has there been a statistically significant spike in the enterprise-wide execution of mavinject.exe?
    context: This question looks for widespread, coordinated activity. A sudden, sharp increase in the number of mavinject.exe executions across the entire network (e.g., exceeding 3 standard deviations from the norm) suggests a potential automated attack or a lateral movement campaign. This statistical approach helps detect large-scale events that might be missed when looking at individual hosts.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise-wide process execution logs stored in a SIEM
      - Baselining data for normal process counts
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE 30-day hourly moving average and standard deviation for mavinject.exe executions. IF current hourly count > (average + 3 * stddev), ALERT.
  - question: Is there an anomalous burst in mavinject.exe activity that cannot be explained by normal trends or seasonality?
    context: This question uses advanced time-series analysis to find anomalies. System activities can have regular patterns (e.g., more activity during work hours). A decomposition model separates the data into trend, seasonality, and a 'residual' component. A sudden spike in the residual is an event that doesn't fit any normal pattern, making it a strong indicator of an anomalous, and potentially malicious, burst of activity.
    answer_sources:
      - Windows Event ID 4688
      - Enterprise-wide process execution logs stored in a SIEM
    range: last 90 days
    queries:
      - technology: pseudocode
        query: APPLY time-series decomposition model to hourly mavinject.exe counts. MONITOR the residual component. IF residual component shows a significant spike, ALERT.