name: T1624.001: Broadcast Receivers
id: 61c47087-0182-4527-916c-a20a45479953
description: This playbook focuses on detecting adversaries who maintain persistence on mobile devices by abusing broadcast receivers. The investigation involves both static and dynamic analysis. Static analysis examines the AndroidManifest.xml file for high-risk broadcast intents (like BOOT_COMPLETED), statistically rare receivers, or "toxic combinations" of receivers and permissions that create a malicious capability. Dynamic analysis monitors runtime API calls (registerReceiver()) for suspicious or anomalous registrations of sensitive system events, leveraging baselining and machine learning to detect deviations from normal behavior. The goal is to identify applications configured to launch in response to system events, which is a common persistence technique.
type: technique
related:
- TA0028: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an application registering a high-risk broadcast receiver from a known watchlist, such as 'android.intent.action.BOOT_COMPLETED', without being on an approved allowlist?
  context: This question aims to identify applications configured to automatically launch in response to sensitive system events. Abusing these receivers, like `BOOT_COMPLETED`, is a common persistence technique for malware to ensure it runs whenever the device is rebooted. By checking for these high-risk receivers in applications that are not explicitly trusted, we can proactively flag potential threats.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - Corporate Unified Endpoint Management (UEM) platform
  - Static Application Security Testing (SAST) pipeline
  - Internal corporate application repository
  - Third-party application vetting sandboxes
  range: Last 90 days
  queries:
  - FOR each application, PARSE AndroidManifest.xml. IF receiver is in high_risk_watchlist AND application_name NOT in allowlist, THEN ALERT.
- question: Is an application declaring statistically rare broadcast receivers compared to the entire mobile application inventory?
  context: This question uses anomaly detection to find suspicious applications. Malware authors may use obscure or custom broadcast receivers to evade simple signature-based detection. By calculating the frequency of every receiver across all known applications, we can identify those that are statistical outliers (e.g., in the bottom 5th percentile). Such rarity is a strong indicator that the application's behavior deviates from the norm and warrants a manual review.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - Corporate Unified Endpoint Management (UEM) platform
  - Static Application Security Testing (SAST) pipeline
  - Internal corporate application repository
  - Third-party application vetting sandboxes
  range: Last 90 days
  queries:
  - GET all declared_receivers from all manifests. CALCULATE frequency for each receiver. FOR each application, IF receiver_frequency < 5th_percentile, THEN FLAG for review.
- question: Does a new or updated application exhibit manifest features (receivers and permissions) similar to those of known malicious applications, based on a machine learning classification model?
  context: This question leverages machine learning to automate the detection of malicious patterns that might be too complex for manual rule-based systems. By training a model on the declared receivers and permissions from a large dataset of both benign and malicious apps, we can create a classifier that predicts the likelihood of an unknown app being malicious. Flagging apps with a high malicious probability score (>0.8) allows for targeted, resource-intensive analysis like dynamic sandboxing.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - Corporate Unified Endpoint Management (UEM) platform
  - Static Application Security Testing (SAST) pipeline
  - Internal corporate application repository
  - Third-party application vetting sandboxes
  range: Last 90 days
  queries:
  - EXTRACT features (receivers, permissions) from application manifest. INPUT features into trained_ML_model. IF malicious_probability > 0.8, THEN FLAG for dynamic analysis.
- question: Is an application dynamically registering a receiver for a high-risk system event at runtime, where the application's category (e.g., not 'Communications') does not justify such behavior?
  context: This question focuses on runtime behavior. While manifest analysis is static, this approach detects applications that register receivers dynamically using the `registerReceiver()` API call. This can be a more evasive technique. Alerting when an application that is not a communication or system tool tries to listen for events like new calls or incoming SMS messages can uncover malicious functionality that is not declared in the manifest.
  answer_sources:
  - Mobile EDR API call logs
  - Dynamic Analysis Sandbox API Traces (JSON)
  - Android Debug Bridge (adb) logcat output
  - Endpoint fleet of corporate-managed mobile devices
  - Mobile EDR/Threat Defense management console
  - Automated dynamic application security testing (DAST) pipeline
  range: Last 90 days
  queries:
  - ON Mobile EDR event, IF API_call == 'registerReceiver()' AND intent_action in high_risk_list AND app_category NOT in ('Communications', 'System Tools'), THEN ALERT.
- question: Has an application started registering a new, never-before-seen broadcast receiver on a device, deviating from its established 30-day baseline behavior?
  context: This question applies user and device-specific behavioral analytics. Instead of a global watchlist, it establishes a historical baseline of normal activity for each application on each device. An alert is triggered when an application registers an intent that is anomalous for that specific context. This can detect targeted attacks, compromised legitimate applications, or polymorphic malware that changes its behavior over time.
  answer_sources:
  - Mobile EDR API call logs
  - Dynamic Analysis Sandbox API Traces (JSON)
  - Android Debug Bridge (adb) logcat output
  - Endpoint fleet of corporate-managed mobile devices
  - Mobile EDR/Threat Defense management console
  - Automated dynamic application security testing (DAST) pipeline
  range: Last 90 days
  queries:
  - FOR each app on each device, CREATE baseline of registered_intents over 30 days. IF new registered_intent NOT in baseline, THEN ALERT.
- question: Is the sequence of `registerReceiver()` calls on a device anomalous when compared to a model of normal behavior trained on a known-benign period?
  context: This question employs advanced anomaly detection using a sequence-aware machine learning model (LSTM autoencoder). This method can detect not just what receivers are registered, but also the suspicious timing, order, and combination of registrations. The model learns the normal 'rhythm' of API calls on a device and flags sequences that it cannot reconstruct accurately, indicating a significant deviation from normalcy that could signify a sophisticated attack.
  answer_sources:
  - Mobile EDR API call logs
  - Dynamic Analysis Sandbox API Traces (JSON)
  - Android Debug Bridge (adb) logcat output
  - Endpoint fleet of corporate-managed mobile devices
  - Mobile EDR/Threat Defense management console
  - Automated dynamic application security testing (DAST) pipeline
  range: Last 90 days
  queries:
  - CREATE time-ordered sequences of registerReceiver() calls. FEED sequence into trained_LSTM_autoencoder_model. IF reconstruction_error > 99th_percentile, THEN FLAG as anomaly.
- question: Does an application's manifest contain a known 'toxic combination' of a broadcast receiver and permissions that enable a high-impact malicious capability?
  context: This question hunts for specific, high-confidence indicators of malicious intent. Certain combinations of a receiver and permissions are inherently dangerous. For example, an app that can receive SMS messages (`RECEIVE_SMS` receiver) and also access contacts (`READ_CONTACTS`) and the internet (`INTERNET`) can be used to exfiltrate contact lists triggered by a text message. By pre-defining these known dangerous combinations, we can create high-fidelity alerts for critical threats.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - UEM/MDM application inventory database
  - Static Application Security Testing (SAST) platform
  - Mobile Threat Defense (MTD) management console
  range: Last 90 days
  queries:
  - FOR each application, PARSE manifest for receivers and permissions. IF {receiver, permissions} matches a known_toxic_combination, THEN GENERATE critical alert.
- question: Does an application have an unusually high aggregate risk score based on the statistical rarity of its declared receiver-permission pairs?
  context: This question provides a more nuanced risk score than simply looking at individual components. It recognizes that the risk is in the combination. By analyzing a large dataset of manifests, we can determine which (receiver, permission) pairs are common and likely benign, and which are rare and suspicious. By summing the rarity scores for all pairs within a single app, we can quantify its overall risk and prioritize the top offenders for manual analysis, even if they do not match a pre-defined 'toxic combination'.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - UEM/MDM application inventory database
  - Static Application Security Testing (SAST) platform
  - Mobile Threat Defense (MTD) management console
  range: Last 90 days
  queries:
  - CALCULATE co-occurrence matrix and rarity score for all (receiver, permission) pairs. FOR each app, SUM rarity scores of its pairs. IF total_risk_score > 95th_percentile, THEN FLAG for review.
- question: Does an application belong to a small, isolated cluster of apps with a similar, uncommon set of receivers and permissions, suggesting a shared but non-mainstream origin?
  context: This question uses unsupervised machine learning (clustering) to find 'families' of related applications based on their manifest features. Legitimate applications from major vendors will form large, well-defined clusters. Malware or unwanted software from a single author or group will often form small, dense, isolated clusters because they share a unique but consistent set of capabilities (receivers and permissions). Investigating these small clusters can efficiently uncover entire campaigns or groups of related malicious apps.
  answer_sources:
  - Parsed AndroidManifest.xml from APKs
  - UEM application inventory metadata
  - UEM/MDM application inventory database
  - Static Application Security Testing (SAST) platform
  - Mobile Threat Defense (MTD) management console
  range: Last 90 days
  queries:
  - GENERATE feature vectors for all apps from receivers/permissions. APPLY DBSCAN clustering algorithm. INVESTIGATE small, dense clusters not associated with known vendors.