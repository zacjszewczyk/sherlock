name: T1548.006: TCC Manipulation
id: c3a0b1d2-e4f5-4a6b-8c9d-1e2f3a4b5c6d
description: This playbook provides investigative steps to determine if an adversary has escalated privileges or evaded defenses by manipulating the macOS Transparency, Consent, and Control (TCC) framework. It covers various methods of TCC manipulation, such as direct writes to the TCC.db database by unauthorized processes, command-line manipulation using sqlite3, abuse of Full Disk Access (FDA) permissions to spawn malicious child processes, and programmatic addition of permissions without user consent. The playbook also addresses post-exploitation activities, including the use of TCC-privileged applications for data exfiltration, C2 beaconing, and mass file collection after gaining FDA.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has an unauthorized process written to the TCC.db database?
    context: This question seeks to identify direct manipulation of the TCC database. Standard macOS services like `tccd` and approved MDM agents are the only processes expected to write to this file. Any other process writing to `TCC.db` is highly suspicious and could indicate an adversary is attempting to grant their malware permissions without user interaction, effectively escalating privileges.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH file_write_events WHERE target_file_path CONTAINS 'TCC.db' AND initiating_process_name NOT IN (approved_process_watchlist)
  - question: Has a statistically anomalous process written to the TCC.db database?
    context: This question uses a statistical approach to find unusual TCC.db write activity. By establishing a baseline of normal processes that interact with TCC.db, any new or zero-frequency process attempting to write to it can be flagged as an anomaly. This is effective for catching novel tools or techniques not on a predefined watchlist.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH file_write_events WHERE target_file_path CONTAINS 'TCC.db' | GROUP BY initiating_process_name | DETECT process if frequency is zero in 30-day baseline
  - question: Can machine learning models identify anomalous write events to the TCC.db database?
    context: This question leverages machine learning to detect subtle or complex TCC.db manipulation. A model trained on features of legitimate write events (e.g., process name, parent process, code signature) can identify outliers that might evade simpler symbolic or statistical checks. This is useful for detecting sophisticated adversaries who may try to masquerade their actions.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint agent log collectors on all macOS devices, particularly those of developers, administrators, and executives.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SCORE file_write_events to 'TCC.db' using one-class SVM/Isolation Forest model | ALERT on events flagged as anomaly
  - question: Has the `sqlite3` utility been used to directly modify the TCC.db database?
    context: This question looks for direct, programmatic manipulation of the TCC database using the `sqlite3` command-line tool. Legitimate system or user activity almost never involves using `sqlite3` on TCC.db. Observing this is a high-fidelity indicator of an adversary attempting to alter TCC permissions.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs. Data should be collected via endpoint process execution logs from all macOS devices in the enterprise.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_execution_events WHERE process_name == 'sqlite3' AND command_line CONTAINS 'TCC.db'
  - question: Has `sqlite3` been executed against TCC.db by a statistically rare parent process?
    context: Since any use of `sqlite3` against TCC.db is suspicious, this question adds context by examining the parent process. An adversary might run this command from a script or a compromised application. Alerting when `sqlite3` is spawned by a rare parent (like a browser or office app) helps prioritize investigations and can indicate a compromised process is being used to escalate privileges.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs. Data should be collected via endpoint process execution logs from all macOS devices in the enterprise.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH process_execution_events WHERE process_name == 'sqlite3' AND command_line CONTAINS 'TCC.db' | ANALYZE parent_process frequency | ALERT on statistically rare parent-child pairs
  - question: Is there a sudden spike in `sqlite3` executions targeting TCC.db across the environment, as detected by time-series analysis?
    context: This question aims to detect a widespread attack campaign by monitoring the aggregate volume of `sqlite3` usage against TCC.db. A time-series anomaly detection model can identify a sudden, sharp increase in these events across the entire fleet of endpoints, which would be a strong indicator of a coordinated attack rather than an isolated incident.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs. Data should be collected via endpoint process execution logs from all macOS devices in the enterprise.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MONITOR aggregate count of 'sqlite3' on 'TCC.db' executions per hour | USE time-series model (ARIMA/Prophet) | ALERT on anomalous spikes
  - question: Has a process with Full Disk Access (FDA) spawned an unsigned or untrusted child process that initiated a network connection?
    context: This question identifies a common privilege abuse pattern. An adversary may compromise a legitimate application with FDA (like Terminal or Finder) to launch their own malicious code. This child process inherits the parent's powerful permissions. If this untrusted child then makes an outbound network connection, it could be for C2 communication or data exfiltration. Detecting this specific sequence is a strong indicator of compromise.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process code signature logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on high-value macOS endpoints and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: DETECT sequence: 1. parent_process with FDA spawns child_process. 2. child_process is unsigned. 3. child_process initiates network_connection.
  - question: Has a process with Full Disk Access (FDA) spawned a statistically rare child process, especially one that is unsigned?
    context: This question uses statistical analysis to find abnormal process relationships. By baselining normal parent-child pairings where the parent has FDA, any new or previously unseen relationship can be flagged. This is particularly powerful if a known pairing, which normally involves a signed child, suddenly appears with an unsigned child, indicating a potential process injection or masquerading.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process code signature logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on high-value macOS endpoints and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: ANALYZE parent-child process pairs where parent has FDA | ALERT on new pairs not in 30-day baseline or pairs where child is now unsigned
  - question: Can a graph-based model detect an anomalous process chain involving an FDA-privileged parent, an unsigned child, and a low-reputation network connection?
    context: This question applies graph-based anomaly detection to visualize and score entire process execution chains. This method excels at connecting disparate events: a trusted parent spawning an untrusted child that then connects to a malicious IP. By modeling these relationships as a graph and enriching it with data like code signing status and IP reputation, the entire malicious subgraph can be identified as a high-risk anomaly.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process code signature logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on high-value macOS endpoints and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: CONSTRUCT process ancestry graph | ENRICH nodes with FDA status, signing info, network activity | SCORE subgraphs and ALERT on anomalies (e.g., trusted_parent -> unsigned_child -> low_rep_IP)
  - question: Has a TCC permission been granted programmatically to a new application without a corresponding user approval event in the system logs?
    context: This question aims to detect TCC grants that bypass the user. A legitimate grant involves a user clicking 'Allow' on a system prompt, which generates a specific trace in the macOS Unified Log. An adversary might use a script to directly INSERT a permission into TCC.db. Correlating a new process execution with a rapid TCC.db write, while confirming the absence of a user approval log, provides strong evidence of malicious activity.
    answer_sources: macOS Unified Log, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint log collectors across all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: DETECT sequence: 1. first_execution of process X. 2. write to TCC.db with INSERT within 60s. 3. ABSENCE of user approval traceID in Unified Log for process X.
  - question: Was a TCC permission granted with a statistically anomalous time delay between the application's first execution and the database write?
    context: This question uses timing analysis to differentiate between human and programmatic actions. A human-driven permission grant has a variable, but typically non-instantaneous, delay. A script, however, can grant permission almost instantly. By baselining the normal time deltas, any grant that occurs with an outlier-short delay can be flagged as suspicious and likely automated.
    answer_sources: macOS Unified Log, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint log collectors across all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: CALCULATE time_delta between first_execution and TCC.db write for new grants | ALERT if time_delta is a statistical outlier (e.g., lowest 1st percentile)
  - question: Can a sequence classification model identify a malicious TCC permission grant followed by immediate network activity?
    context: This question employs a sequence-aware machine learning model (like an LSTM) to recognize a full attack chain as a single, malicious pattern. The model is trained to identify the sequence of 'First Execution -> TCC.db Write -> Outbound Network Connection' occurring in a short time frame. This holistic approach is powerful for detecting the entire privilege escalation and C2 setup phase with high confidence.
    answer_sources: macOS Unified Log, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_WRITE, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC. Data should be collected via endpoint log collectors across all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SCORE real-time event sequences using trained LSTM/RNN model | ALERT on sequences classified as malicious (e.g., [First_Exec -> TCC_Write -> Net_Conn] in < 5 mins)
  - question: Has a process with sensitive TCC permissions connected to a known malicious IP address or domain?
    context: This question identifies when an application with powerful permissions (e.g., screen capture, full disk access) communicates with a destination on a threat intelligence list. This is a high-fidelity indicator that a trusted application has been compromised or is being abused for malicious purposes, such as command and control or data exfiltration.
    answer_sources: macOS Endpoint Security Framework (ESF) process and network events, Zeek conn.log, Zeek ssl.log, Zeek intel.log. Data should be collected from network sensors at internet egress points, DNS resolvers, and endpoint network event collectors on all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: JOIN process_logs with network_logs | ALERT where process has sensitive_TCC_perms AND destination_IP/domain is in threat_intel_feed (e.g., Zeek intel.log)
  - question: Has a process with sensitive TCC permissions exhibited statistically anomalous network behavior?
    context: This question seeks to identify malicious activity by detecting deviations from a privileged application's normal network patterns. An alert could be triggered if the application connects to a new country or ASN, or if its destination IP entropy suddenly drops, which could indicate a switch to a small set of C2 servers. This is useful for detecting attacks that don't use previously known malicious indicators.
    answer_sources: macOS Endpoint Security Framework (ESF) process and network events, Zeek conn.log, Zeek ssl.log, Zeek intel.log. Data should be collected from network sensors at internet egress points, DNS resolvers, and endpoint network event collectors on all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: BASELINE network behavior (dest_country, ASN) for TCC-privileged processes | ALERT on connections to destinations not in baseline or on significant entropy drops
  - question: Can a machine learning classifier distinguish between benign and malicious network connections originating from TCC-privileged processes?
    context: This question uses a supervised learning model to score the risk of network connections from sensitive applications. By training a classifier on features from both network logs (duration, protocol, JA4S hash) and endpoint data (process name, TCC permissions), the model can learn to predict malicious connections in real-time, even for novel C2 infrastructure.
    answer_sources: macOS Endpoint Security Framework (ESF) process and network events, Zeek conn.log, Zeek ssl.log, Zeek intel.log. Data should be collected from network sensors at internet egress points, DNS resolvers, and endpoint network event collectors on all macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SCORE new network connections from TCC-privileged processes using a trained classifier (e.g., Random Forest) | ALERT on connections predicted as malicious
  - question: Has an application with screen capture or accessibility permissions spawned a network utility like `curl` or `scp`?
    context: This question looks for a very specific and highly suspicious chain of events. Legitimate applications with screen capture or accessibility permissions (like Zoom or a VNC client) have no normal reason to spawn command-line network utilities. This behavior strongly suggests an adversary is abusing the parent application's permissions to capture data and then using the child utility to exfiltrate it.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on macOS devices with collaboration software installed.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH for parent process with screen_capture/accessibility perms (e.g., Zoom.us) that spawns child process in ['curl', 'wget', 'ncat', 'scp']
  - question: Has an application with screen capture or accessibility permissions spawned a statistically rare child process?
    context: This question uses frequency analysis to detect abnormal behavior from trusted applications. By baselining all child processes spawned by applications with sensitive permissions, any rare or never-before-seen child process can be flagged. This approach can catch the use of not just common network utilities but any unusual tool an adversary might bring to exfiltrate data.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on macOS devices with collaboration software installed.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: ANALYZE frequency of child processes spawned by apps with screen_capture/accessibility perms | ALERT on parent-child pairs not in baseline or in lowest frequency percentile
  - question: Can a graph-based anomaly detection model identify a high-risk process chain where a screen capture application is used to exfiltrate data?
    context: This question applies graph-based analysis to connect the dots between a privileged parent, a utility child, and a network destination. The model can identify the entire subgraph representing this attack chain and flag it as a high-risk anomaly. The risk score can be further increased if the destination IP is untrusted, providing a comprehensive view of the threat.
    answer_sources: macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_FORK, macOS Endpoint Security Framework (ESF) ES_EVENT_TYPE_NOTIFY_EXEC, Process command-line argument logs, Zeek conn.log. Data should be collected from endpoint process and network event collectors on macOS devices with collaboration software installed.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MODEL process relationships as a graph | ALERT on subgraphs matching pattern: [App_with_Screen_Perms] -> spawns -> [Network_Utility] -> connects to -> [External_IP]
  - question: Is a process with microphone or camera permissions making suspicious network connections to a known malicious destination?
    context: This question seeks to identify compromised applications (e.g., video conferencing software) being used for command and control. It specifically looks for connections to threat-listed IPs where the network traffic pattern in Zeek logs is simple and repetitive, not matching a full, legitimate TCP session. This could indicate a simple C2 implant piggybacking on the application's permissions.
    answer_sources: Zeek conn.log, macOS Endpoint Security Framework (ESF) process and network events. Data should be collected from network traffic sensors at internet egress points and endpoint network event collectors on macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: SEARCH network_logs where source_process has mic/camera perms AND dest_IP is in threat_intel AND conn_state shows simple/repeated pattern (e.g., S1, OTH)
  - question: Is a process with microphone or camera permissions exhibiting network beaconing behavior?
    context: This question aims to detect C2 beaconing by analyzing network traffic characteristics, even if the destination is unknown. Malicious beaconing is often highly regular, with consistent timing and packet sizes. By calculating the standard deviation of inter-packet arrival times and packet sizes, we can statistically identify this automated behavior, as both metrics will be close to zero for a beacon.
    answer_sources: Zeek conn.log, macOS Endpoint Security Framework (ESF) process and network events. Data should be collected from network traffic sensors at internet egress points and endpoint network event collectors on macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR long-lived connections from mic/camera-privileged processes | CALCULATE stddev of inter-packet times and packet sizes | ALERT if both values are near zero
  - question: Can a time-series decomposition model detect a periodic, non-standard C2 signal in the network traffic of a process with microphone or camera permissions?
    context: This question uses a more advanced time-series model to find hidden periodic signals in network traffic. The model can separate a connection's data rate into trend, seasonal (periodic), and residual components. If a strong periodic component is found that doesn't match known legitimate keepalive intervals, it is a strong indicator of C2 beaconing.
    answer_sources: Zeek conn.log, macOS Endpoint Security Framework (ESF) process and network events. Data should be collected from network traffic sensors at internet egress points and endpoint network event collectors on macOS devices.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: APPLY time-series decomposition (e.g., STL) to bytes-per-second data for connections from mic/camera-privileged processes | ALERT on strong, non-standard periodic component
  - question: Has a process, shortly after gaining Full Disk Access (FDA), performed mass file collection, staging, and exfiltration?
    context: This question looks for a clear, sequential attack pattern: an adversary gains FDA, immediately uses it to read thousands of files from sensitive user directories, stages them into a single archive, and then sends that archive over the network. Detecting this entire sequence provides a very high-confidence alert for data theft.
    answer_sources: macOS Endpoint Security Framework (ESF) file and process events, Zeek conn.log, Zeek files.log. Data should be collected from endpoint collectors on high-value macOS workstations and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: DETECT sequence: 1. Process gains FDA. 2. Within 5 mins, process reads >1000 files from sensitive dirs. 3. Process writes large archive to temp dir. 4. Process sends >10MB outbound.
  - question: Has a process that recently gained Full Disk Access (FDA) exhibited a statistically anomalous rate of file read events?
    context: This question focuses on the initial data collection phase after an FDA grant. By monitoring the rate of file read operations in a short sliding window, it's possible to detect the 'smash and grab' behavior of an adversary collecting files. A rate of file reads that exceeds the 99th percentile for that user or host is a strong statistical indicator of anomalous behavior.
    answer_sources: macOS Endpoint Security Framework (ESF) file and process events, Zeek conn.log, Zeek files.log. Data should be collected from endpoint collectors on high-value macOS workstations and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR processes that newly gained FDA | MONITOR file_read events/sec in 60s sliding window | ALERT if rate exceeds 99th percentile of host/user baseline
  - question: Can a Hidden Markov Model (HMM) detect a sequence of process states corresponding to data exfiltration after gaining Full Disk Access?
    context: This question uses a state machine model (HMM) to understand the 'story' of a process's behavior. By training the model on normal activity, it learns legitimate state transitions. An adversary's actions—gaining permissions, enumerating files, staging, and exfiltrating—represent a sequence of states that is highly improbable under the normal model. Detecting this low-probability path triggers a high-confidence alert.
    answer_sources: macOS Endpoint Security Framework (ESF) file and process events, Zeek conn.log, Zeek files.log. Data should be collected from endpoint collectors on high-value macOS workstations and network sensors at egress points.
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MODEL process behavior with HMM (states: Idle, Gaining_Perms, File_Enum, Staging, Exfil) | ALERT if observed state sequence has a very low probability under the trained model