name: T1499.003: Application Exhaustion Flood
id: c8a2b0e6-5c6f-4e8a-8f9a-0b1c2d3e4f5a
description: This playbook helps investigate whether an adversary is causing a denial of service (DoS) by exhausting application resources. It focuses on detecting several key indicators of an Application Exhaustion Flood (T1499.003). These indicators include an abnormally high rate of new connections from a single IP address that is present on a threat intelligence feed; HTTP requests containing signatures of known application-layer DoS tools (like GoldenEye or Slowloris); a rapid and sustained increase in request volume that deviates significantly from established baselines; the correlation of application-level crash events (e.g., Windows Event ID 1000) with network DoS alerts; a single source IP targeting resource-intensive API endpoints at an unusually high rate; and automated, repetitive requests characterized by extremely short inter-request times and low URI entropy.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any connections to critical applications originating from IP addresses known for DoS or botnet activity?
    context: This question aims to identify initial indicators of an attack by cross-referencing incoming traffic with threat intelligence feeds. A match provides a high-confidence starting point for an investigation, as it connects an observed event with known malicious infrastructure.
    answer_sources:
      - Zeek conn.log
      - Internet Gateways
      - Cloud WAFs
      - Public-facing Web Servers
      - Application Load Balancers
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek conn.log WHERE source_ip IN (threat_intel_list) AND destination_port IN (critical_app_ports) | GENERATE alert
  - question: For IPs identified on threat intelligence lists, is the connection rate to critical applications statistically anomalous compared to normal traffic?
    context: This question seeks to quantify the suspicious activity identified by the symbolic rule. By comparing the connection rate of a suspicious IP against a historical baseline (99th percentile), analysts can differentiate between low-level scanning and a high-volume flood attack, helping to prioritize the alert.
    answer_sources:
      - Zeek conn.log
      - Internet Gateways
      - Cloud WAFs
      - Public-facing Web Servers
      - Application Load Balancers
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek conn.log WHERE source_ip in (flagged_ips) | STATS count by source_ip, time_window | WHERE count > baseline_99th_percentile | ESCALATE alert
  - question: Can a machine learning model assign a high probability of maliciousness to connections originating from IPs flagged by initial rules?
    context: This question uses a machine learning model to add a layer of confidence to alerts. By analyzing multiple connection features (bytes, duration, state), a logistic regression model can score the likelihood of an attack, helping analysts distinguish sophisticated, low-and-slow attacks from benign traffic that might share some characteristics with them.
    answer_sources:
      - Zeek conn.log
      - Internet Gateways
      - Cloud WAFs
      - Public-facing Web Servers
      - Application Load Balancers
    range: last 90 days
    queries:
      - pseudocode: FROM flagged_connections | INPUT into logistic_regression_model | IF probability_score > threshold | PROVIDE confidence_level
  - question: Are there any incoming HTTP requests with User-Agent strings or other headers that match signatures of known application-layer DoS tools?
    context: This question looks for explicit fingerprints of attack tools within HTTP traffic. Many DoS tools (e.g., GoldenEye, Slowloris) use default or recognizable User-Agent strings. Detecting these provides strong evidence that an attack is being attempted with a specific tool.
    answer_sources:
      - Zeek http.log
      - Reverse Proxies
      - API Gateways
      - Public-facing Web Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek http.log | WHERE user_agent MATCHES (dos_tool_regex_list) OR other_headers MATCHES (dos_tool_regex_list) | GENERATE alert
  - question: Is any source IP making highly repetitive requests to the same resource, indicated by very low URI entropy?
    context: This question aims to identify automated, non-human behavior. Human users typically browse various URIs, resulting in higher entropy. An attacker trying to exhaust a single resource will make repetitive requests, leading to a very low Shannon entropy score for the URIs requested by that source IP. This is a strong statistical indicator of a targeted flood.
    answer_sources:
      - Zeek http.log
      - Reverse Proxies
      - API Gateways
      - Public-facing Web Servers
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek http.log | CALCULATE shannon_entropy(uri) by source_ip, time_window | WHERE entropy < baseline_10th_percentile | FLAG source_ip
  - question: Does a machine learning model classify any user sessions as malicious based on a combination of HTTP request features?
    context: This question leverages a Random Forest classifier to analyze multiple aspects of an HTTP session (method, URI length, body length, headers) simultaneously. This holistic approach can detect complex or novel attack patterns that might not be caught by simple signature or statistical checks, providing a more robust detection capability.
    answer_sources:
      - Zeek http.log
      - Reverse Proxies
      - API Gateways
      - Public-facing Web Servers
    range: last 90 days
    queries:
      - pseudocode: FROM http_sessions | INPUT features into random_forest_model | IF classification == 'malicious' with high_confidence | GENERATE high_severity_alert
  - question: Has the number of connections per minute to a web server surpassed a pre-defined critical threshold?
    context: This question acts as a safety net to catch large, unsophisticated flood attacks. By setting a high-water mark for connections per minute, analysts can quickly detect brute-force volumetric attacks that don't require complex statistical analysis, ensuring a rapid response to overwhelming traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Application Load Balancers
      - Public-facing Web Servers
      - API Gateways
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek conn.log | STATS count by destination_ip, destination_port, time_window | WHERE count > high_water_mark_threshold | GENERATE alert
  - question: Is the current request rate for a specific application statistically anomalous when compared to its historical baseline for the same time of day and day of week?
    context: This question aims to detect significant deviations from normal traffic patterns. By baselining request rates and calculating the z-score, analysts can identify sustained increases (e.g., >3 standard deviations) that are highly unlikely to be legitimate. This method adapts to natural traffic fluctuations, reducing false positives.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Application Load Balancers
      - Public-facing Web Servers
      - API Gateways
    range: last 90 days
    queries:
      - pseudocode: FOR each_application | CALCULATE z_score for current_request_rate against baseline | IF z_score > 3 for 3 consecutive minutes | GENERATE alert
  - question: Has the observed request volume for an application significantly exceeded the predicted volume from a time series forecasting model?
    context: This question uses a predictive model (like ARIMA or Prophet) to forecast expected traffic volume. An alert is generated when the actual traffic volume significantly and persistently exceeds the model's prediction, including its confidence interval. This approach is powerful for detecting anomalies in services with complex, seasonal traffic patterns that simple baselines might miss.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Application Load Balancers
      - Public-facing Web Servers
      - API Gateways
    range: last 90 days
    queries:
      - pseudocode: FOR each_application | USE time_series_model to predict expected_volume and confidence_band | IF actual_volume > upper_confidence_band for sustained_period | GENERATE alert
  - question: Has a critical application error or resource exhaustion event occurred on a server that is also the target of a concurrent network traffic anomaly alert?
    context: This question seeks to directly link a network-level attack with its impact on the target system. Correlating a network DoS alert with a server-level application crash (e.g., Windows Event ID 1000) provides strong evidence that the attack is successful in causing a denial of service, justifying an immediate incident response.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 2004
      - Zeek conn.log
      - Public-facing Web Servers
      - Backend Application Servers
      - Database Servers
    range: last 90 days
    queries:
      - pseudocode: CORRELATE network_dos_alerts with windows_events (ID 1000, 2004) | IF alert_destination_ip == event_source_server AND time_delta < 5_minutes | GENERATE incident
  - question: Is there a statistically significant increase in the rate of critical application or resource events on any given server?
    context: This question aims to detect signs of system distress even without a corresponding network alert. By modeling the normal rate of critical events (e.g., crashes, resource warnings) with a Poisson distribution, analysts can identify when the observed frequency of these events becomes statistically improbable, suggesting an underlying issue like a resource exhaustion attack.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 2004
      - Zeek conn.log
      - Public-facing Web Servers
      - Backend Application Servers
      - Database Servers
    range: last 90 days
    queries:
      - pseudocode: FOR each_server | MODEL baseline_event_rate using Poisson distribution | IF observed_event_count has p_value < 0.01 | GENERATE alert
  - question: Can an unsupervised learning algorithm detect a dense cluster of resource-related error events that coincides with a network anomaly?
    context: This question uses clustering (like DBSCAN) to find anomalous groupings of server events in time. The goal is to automatically identify a 'storm' of errors on a server. If this cluster of errors temporally overlaps with a network anomaly detected by another model (e.g., a time-series forecast), it strongly suggests a cause-and-effect relationship and should be escalated as a high-priority incident.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 2004
      - Zeek conn.log
      - Public-facing Web Servers
      - Backend Application Servers
      - Database Servers
    range: last 90 days
    queries:
      - pseudocode: CLUSTER server_events using DBSCAN by time and host | IF dense_cluster_of_errors is found AND overlaps with network_anomaly_timeframe | ESCALATE to incident
  - question: Is any single source IP making an excessive number of requests to known resource-intensive API endpoints within a short time frame?
    context: This question uses a simple but effective threshold to detect brute-force attacks against costly application functions (e.g., search queries, report generation). By maintaining a list of these URIs and alerting when a hard-coded request limit is breached, analysts can quickly catch unsophisticated attempts to exhaust server resources.
    answer_sources:
      - Zeek http.log
      - API Gateways
      - Application Logic Servers
      - Microservices
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek http.log WHERE uri IN (resource_intensive_uri_list) | STATS count by source_ip, time_window(1_minute) | WHERE count > 50 | GENERATE alert
  - question: Is any source IP's request rate to a resource-intensive endpoint in the top percentile (e.g., 99.5th) compared to all other IPs targeting that same endpoint?
    context: This question identifies outliers by comparing the behavior of one IP against all others. Instead of a static threshold, it uses a dynamic one based on the 99.5th percentile of request rates. This makes the detection more resilient to changes in traffic volume and helps pinpoint the most aggressive actors targeting a specific, vulnerable endpoint.
    answer_sources:
      - Zeek http.log
      - API Gateways
      - Application Logic Servers
      - Microservices
    range: last 90 days
    queries:
      - pseudocode: FOR each_intensive_uri | CALCULATE 99.5th_percentile_request_rate for all source_ips | SEARCH Zeek http.log | STATS count by source_ip, time_window(5_minutes) | WHERE count > calculated_percentile | GENERATE alert
  - question: Using clustering, can we identify user sessions that are significant outliers from the typical 'heavy user' profile, indicating a potential exhaustion attack?
    context: This question uses K-Means clustering to define what 'normal' heavy usage looks like. The model groups sessions into clusters, including one for legitimate power users. Any new session that falls far outside this 'heavy user' cluster—specifically by having an extremely high request frequency to a single endpoint—is flagged as a probable attack, distinguishing malicious abuse from legitimate high usage.
    answer_sources:
      - Zeek http.log
      - API Gateways
      - Application Logic Servers
      - Microservices
    range: last 90 days
    queries:
      - pseudocode: CLUSTER user_sessions using K-Means on features (duration, request_count, etc.) | IDENTIFY 'heavy_user' cluster centroid | IF new_session is a significant outlier from centroid | FLAG as potential attack
  - question: Are there any HTTP requests with exceptionally large bodies or long URIs targeting application endpoints?
    context: This question looks for specific exploit signatures where an attacker sends an unusually large payload in the request body or URI to consume server memory or processing power. Alerting on requests that exceed generous but firm limits (e.g., >10MB body, >2048 char URI) can catch these specific types of exhaustion attacks.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Servers
      - API Gateways
      - Load Balancers
    range: last 90 days
    queries:
      - pseudocode: SEARCH Zeek http.log | WHERE request_body_len > 10MB OR uri_length > 2048 | GENERATE alert
  - question: Is any source IP exhibiting behavior characteristic of automation, such as extremely low inter-request times combined with low URI entropy?
    context: This question combines two strong statistical indicators of automation. A very short time between requests (<100ms) suggests machine speed, while very low URI entropy (<1.0) suggests repetitive action. When both conditions are met for a single source IP, it is highly likely that the traffic is from a script or bot, not a human user.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Servers
      - API Gateways
      - Load Balancers
    range: last 90 days
    queries:
      - pseudocode: FOR each_source_ip | CALCULATE avg_inter_arrival_time and uri_entropy over 1_minute | IF avg_inter_arrival_time < 100ms AND uri_entropy < 1.0 | GENERATE alert
  - question: Can an anomaly detection algorithm (Isolation Forest) identify outlier requests based on a combination of features like request size, timing, and entropy?
    context: This question uses an Isolation Forest, an unsupervised algorithm well-suited for anomaly detection, to find outliers in multi-dimensional data. By feeding it features like request body length, inter-arrival time, and URI entropy, the model can identify novel or unusual combinations of these attributes that represent potential attacks, without prior knowledge or labeled data.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Public-facing Web Servers
      - API Gateways
      - Load Balancers
    range: last 90 days
    queries:
      - pseudocode: FROM request_data | INPUT features (body_len, inter_arrival_time, uri_entropy, byte_ratio) into Isolation_Forest_model | IF request is identified as anomaly | GENERATE alert