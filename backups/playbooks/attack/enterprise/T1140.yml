name: T1140: Deobfuscate-Decode Files or Information
id: 59c5d808-7243-4c9c-850f-2287955c4d51
description: This playbook focuses on identifying adversary attempts to deobfuscate or decode files or information as a defense evasion technique. This involves detecting the use of known malicious deobfuscation tools or script routines, abuse of legitimate system utilities like certutil.exe for decoding, execution of encoded PowerShell commands, reassembly of files from multiple parts, and suspicious process chains originating from Microsoft Office applications. The goal is to uncover hidden malicious payloads and scripts by monitoring process execution events, command-line arguments, script block logs, and file system activity for indicators of decoding and deobfuscation.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are processes being created from known malicious deobfuscation tools, or do script logs contain strings associated with known deobfuscation routines?
  context: This question aims to detect the use of specific malicious tools or code snippets that adversaries use to deobfuscate their payloads. By comparing process hashes against a threat intelligence feed and scanning script logs for known malicious signatures, analysts can directly identify the execution of known-bad deobfuscation activities.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - Zeek files.log
  - Domain Controllers, Application Servers, User Workstations, Network Egress Points, DMZ Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ProcessCreationEvents(Sysmon Event ID 1)
      WHERE file_hash IN known_malicious_decoder_hashes
      ALERT on match
  - technology: pseudocode
    query: |-
      SEARCH ScriptLogs(Windows Event ID 4104) OR NetworkFileLogs(Zeek files.log)
      WHERE script_content CONTAINS known_malware_deobfuscation_strings
      ALERT on match
- question: Are any PowerShell script blocks exhibiting unusually high entropy, suggesting obfuscated or packed code?
  context: High entropy, or a high degree of randomness, in a script is a common indicator of obfuscation, encryption, or packing. Adversaries use this to hide the script's true functionality. By establishing a baseline of normal script entropy in the environment, analysts can identify outliers that are likely malicious and warrant further investigation.
  answer_sources:
  - Windows Event ID 4104
  - Domain Controllers, Application Servers, User Workstations, Network Egress Points, DMZ Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CALCULATE entropy for all ScriptBlockLogs(Windows Event ID 4104)
      ESTABLISH baseline entropy distribution from historical data (30+ days)
      ALERT on any new script_block where entropy_score > 99th_percentile_of_baseline
- question: Can machine learning be used to classify PowerShell script blocks as benign or malicious in near real-time?
  context: This question explores a more advanced, proactive detection method beyond simple signatures. By training a classifier (like a Random Forest model) on various script features (length, character distribution, entropy, keywords), the system can learn to automatically distinguish between legitimate and malicious scripts, catching novel or highly obfuscated threats.
  answer_sources:
  - Windows Event ID 4104
  - Domain Controllers, Application Servers, User Workstations, Network Egress Points, DMZ Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR new ScriptBlockLogs(Windows Event ID 4104):
      EXTRACT features (length, char_freq, entropy, keywords like 'FromBase64String', 'IEX')
      APPLY trained_random_forest_model
      ALERT where model_classification = 'malicious'
- question: Is the built-in Windows utility certutil.exe being used to decode files?
  context: Certutil.exe is a legitimate command-line program for managing certificates, but adversaries frequently abuse its built-in decoding functions to reconstruct malicious payloads on a compromised host. Monitoring for the specific command-line arguments related to decoding (`-decode`, `-decodehex`) is a high-fidelity method for detecting this misuse.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Web Servers, Domain Controllers, Application Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ProcessCreationEvents(Sysmon Event ID 1)
      WHERE process_name = 'certutil.exe'
      AND (command_line CONTAINS '-decode' OR command_line CONTAINS '-decodehex' OR (command_line CONTAINS '-urlcache' AND command_line CONTAINS '-split' AND command_line CONTAINS '-f'))
      ALERT on match
- question: Is certutil.exe being executed with decoding arguments by an unusual parent process or user?
  context: While some administrators may use certutil for legitimate decoding tasks, it is highly unusual for it to be spawned by common applications like Microsoft Word or Outlook. By baselining normal certutil usage, analysts can flag executions that deviate from the norm, such as being initiated by a statistically rare parent process or a user who has never used the utility before, which strongly indicates malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Web Servers, Domain Controllers, Application Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      BASELINE normal parent_process and user for 'certutil.exe' over 30 days
      SEARCH ProcessCreationEvents(Sysmon Event ID 1) for 'certutil.exe' with decoding arguments
      ALERT where parent_process (e.g., 'winword.exe') or user is statistically rare or new
- question: Is there an anomalous spike in certutil.exe decoding activity on any host or for any user?
  context: A sudden, sharp increase in the frequency of certutil.exe executions with decoding arguments, especially outside of normal business hours, can signal an automated attack or a widespread payload deployment. Using a time-series anomaly detection model can help automatically identify such spikes that deviate significantly from established patterns of activity for a given host or user.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Web Servers, Domain Controllers, Application Servers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      MODEL hourly frequency of 'certutil.exe' with decoding args per host and user
      APPLY time-series anomaly detection (e.g., ARIMA)
      ALERT on spikes that significantly deviate from the forecast, especially off-hours
- question: Is PowerShell being used to execute encoded commands or run scripts with deobfuscation functions?
  context: Adversaries heavily rely on PowerShell's ability to execute encoded commands (`-EncodedCommand`) and use built-in functions (like `FromBase64String`, `Invoke-Expression`) to deobfuscate and run malicious code in memory. This is a core defense evasion tactic. This question focuses on creating signature-based rules to find these literal strings and command-line flags.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows Endpoints, All Windows Servers, Microsoft Exchange Servers, Domain Controllers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ScriptBlockLogs(Windows Event ID 4104)
      WHERE script_content CONTAINS ('FromBase64String' OR 'IEX' OR 'Invoke-Expression' OR '-bxor')
      ALERT on match
  - technology: pseudocode
    query: |-
      SEARCH ProcessCreationEvents(Sysmon Event ID 1)
      WHERE process_name = 'powershell.exe' AND command_line CONTAINS ('-EncodedCommand' OR '-e' OR '-enc')
      ALERT on match
- question: Are there any PowerShell encoded commands or script blocks that are anomalously long or have an unusual character distribution?
  context: Malicious encoded commands are often significantly longer than legitimate ones. Likewise, obfuscated scripts have a different character frequency than normal scripts. By baselining the typical length of encoded commands and the character distribution of benign scripts, analysts can flag outliers that are statistically likely to be malicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows Endpoints, All Windows Servers, Microsoft Exchange Servers, Domain Controllers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      BASELINE distribution of Base64 string length for powershell.exe -EncodedCommand
      ALERT on any command where length > (mean + 3 * stdev)
  - technology: pseudocode
    query: |-
      BASELINE character frequency of normal scripts from ScriptBlockLogs(Windows Event ID 4104)
      ALERT on scripts with a character distribution that significantly deviates from the baseline
- question: Can a risk score be assigned to PowerShell commands to identify malicious activity?
  context: This question proposes building a scoring system (e.g., a logistic regression model) to evaluate the risk of a PowerShell command. By combining multiple weak indicators—such as command length, presence of encoding, script entropy, and character ratios—into a single risk score, analysts can create a more robust and accurate detection mechanism that is less prone to false positives than single-indicator rules.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows Endpoints, All Windows Servers, Microsoft Exchange Servers, DomainControllers
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each PowerShell command/script_block:
      CALCULATE risk_score using a trained logistic regression model (features: length, encoding_flags, entropy, etc.)
      ALERT where risk_score > tuned_threshold
      CORRELATE high-score events with subsequent suspicious network connections or child processes
- question: Is an adversary using built-in command-line tools to reassemble a malicious executable from multiple files?
  context: To evade network-based detection, adversaries may split a malicious file into several smaller, seemingly benign parts, download them, and then reassemble them on the target machine. This question focuses on detecting the use of `copy /b` or `type` commands to concatenate multiple files into a single executable, a common technique for this reassembly.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, File Servers, Staging Servers, Developer Endpoints
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ProcessCreationEvents(Sysmon Event ID 1)
      WHERE (process_name = 'cmd.exe' OR process_name = 'powershell.exe')
      AND (command_line CONTAINS 'copy /b' OR command_line CONTAINS 'type')
      AND command_line matches pattern of multiple input files concatenated to a single output file with extension (.exe, .dll, .ps1, .bat)
- question: Are file concatenation commands being run in unusual or high-risk locations?
  context: While developers might use `copy /b` legitimately, it's highly suspicious when used to create an executable in a temporary or user-writable directory like `%TEMP%` or `C:\Users\Public\`. By baselining normal usage patterns, analysts can flag executions that occur in unusual locations or involve an anomalously high number of source files, indicating likely malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, File Servers, Staging Servers, Developer Endpoints
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      BASELINE normal usage of 'copy /b' and 'type' (paths, file extensions, number of source files)
      SEARCH for 'copy /b' or 'type' executions
      ALERT where destination_path is a high-risk directory (e.g., %TEMP%, %APPDATA%)
      AND number_of_source_files > 95th_percentile_of_baseline
- question: Can a machine learning model distinguish between legitimate and malicious file reassembly?
  context: This question aims to automate the detection of malicious file concatenation by training a model (like a decision tree) to recognize the difference between legitimate developer activity and adversary tradecraft. The model would use features like the parent process, rarity of the destination path, and user context to make its determination.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, File Servers, Staging Servers, Developer Endpoints
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      FOR each file concatenation event:
      EXTRACT features (parent_process, destination_path_rarity, output_extension, user_context)
      APPLY trained_decision_tree_model
      ALERT where model_classification = 'suspicious'
- question: Is a 'download, decode, execute' sequence of events occurring on any single host?
  context: This question looks for a classic attack chain where an adversary downloads a file, uses a utility to decode it, and then executes the resulting payload. By creating a correlation rule that looks for this specific sequence of events (file download, access by a decoder, and new process/network connection) in a short time window, analysts can detect the entire attack lifecycle.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Zeek conn.log
  - Network Perimeter (Gateway/Proxy), DMZ Servers, User Workstations, Egress Points
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CORRELATE events on the same host within a 5-minute window:
      1. File download observed (Zeek http.log)
      2. Downloaded file path used by 'certutil.exe' or 'powershell.exe' (Sysmon Event ID 1)
      3. AND the decoding process creates a new file (Sysmon Event ID 11) or makes an outbound connection (Zeek conn.log)
      ALERT on correlated sequence
- question: Can we identify high-risk 'download and decode' behavior by aggregating risk scores?
  context: Not all downloads or decoding activities are malicious on their own. This question proposes a method to score the risk of individual events (e.g., download from a low-reputation domain) and then aggregate these scores. When a file with a high initial risk score is subsequently accessed by a decoding utility, the aggregated risk can cross a threshold, triggering a high-confidence alert.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Sysmon Event ID 1
  - Network Perimeter (Gateway/Proxy), DMZ Servers, User Workstations, Egress Points
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CALCULATE initial_risk_score for file downloads (source_rep, file_type_rarity, etc.)
      IF file with high initial_risk_score is accessed by a known decoding utility (Sysmon Event ID 1):
      AGGREGATE risk
      ALERT if host's aggregated_risk_score > dynamic_network_threshold
- question: Can we use graph-based anomaly detection to find rare 'download -> decode -> connect' sequences?
  context: This question explores using a sophisticated graph-based approach to find malicious activity. By modeling system activity as a graph (nodes = processes/files, edges = interactions), analysts can use algorithms to find behavioral sequences that are statistically rare compared to a learned baseline of normal activity. A rare path representing a 'download -> decode -> connect' sequence is a strong indicator of compromise.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Zeek conn.log
  - Network Perimeter (Gateway/Proxy), DMZ Servers, User Workstations, Egress Points
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      CONSTRUCT activity graph for each host (nodes=processes, files, connections; edges=interactions)
      APPLY graph-based anomaly detection to identify statistically rare paths
      ALERT on rare paths matching a 'download -> decode -> connect' sequence
- question: Are Microsoft Office applications spawning child processes associated with script execution or decoding?
  context: Legitimate Microsoft Office applications (Word, Excel, etc.) should not typically launch command shells, script interpreters, or decoding utilities. This behavior is a hallmark of attacks involving malicious documents or macros. Creating a simple rule to detect this parent-child relationship is a very effective way to catch the initial stages of a compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Microsoft Exchange Servers, Terminal Servers / Citrix Environments
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      SEARCH ProcessCreationEvents(Sysmon Event ID 1)
      WHERE parent_process IN ('winword.exe', 'excel.exe', 'powerpnt.exe', 'outlook.exe')
      AND child_process IN ('powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe', 'certutil.exe')
      ALERT on match
- question: Are there any new or rare parent-child process relationships involving Office applications?
  context: Adversaries are constantly evolving and may use new or less common processes in their attacks. Instead of relying only on a static list, this question involves baselining all parent-child process relationships in the environment. Any newly observed relationship (e.g., `excel.exe` spawning `certutil.exe` for the first time) or a relationship that is extremely rare across the enterprise should be flagged for immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Microsoft Exchange Servers, Terminal Servers / Citrix Environments
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      GENERATE frequency table of all parent-child process pairs from 30 days of historical data (Sysmon Event ID 1)
      CALCULATE rarity of each pair
      ALERT on any newly observed pair or any pair that falls below a low frequency threshold
- question: Can a probabilistic model identify anomalous process creation events originating from Office applications?
  context: This question proposes a more advanced, probabilistic approach to detecting suspicious process creation. By training a Bayesian network to understand the conditional probability of legitimate parent-child relationships (P(Child | Parent)), the model can score the likelihood of any new event. An event with a very low probability, such as `P(powershell.exe | winword.exe)`, would be flagged as highly anomalous and likely malicious.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations, Microsoft Exchange Servers, Terminal Servers / Citrix Environments
  range: the last 90 days
  queries:
  - technology: pseudocode
    query: |-
      TRAIN a Bayesian network on P(Child | Parent) from historical process creation data
      FOR each new process creation event:
      CALCULATE its probability score using the model
      ALERT on events with a very low probability score, especially where parent is an Office application