name: T1059.003: Windows Command Shell
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary has executed commands using the Windows command shell (cmd.exe). It provides investigative steps to detect malicious usage, including searching for known indicators of compromise (IOCs) in command lines, identifying obfuscation techniques, spotting rapid reconnaissance activity, flagging anomalous parent processes like Microsoft Office applications, detecting direct network connections from cmd.exe, and finding instances of batch scripts being dropped in temporary locations and executed.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any command lines executed by cmd.exe found to contain known malicious indicators of compromise (IOCs)?
    context: This question aims to detect the most direct evidence of malicious activity by matching artifacts (IP addresses, domains, file hashes) from command-line arguments against a threat intelligence feed. A match provides a high-confidence signal that a known threat is active on the host.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers; DNS and Web Proxy logs; Threat Intelligence Platform feeds.
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: SEARCH process_creation_events (process_name='cmd.exe') | EXTRACT ip_addresses, domains, file_hashes from command_line | LOOKUP threat_intelligence_feed ON ip_addresses, domains, file_hashes | WHERE threat_match=true | ALERT
  - question: Have any domains observed in cmd.exe command lines been identified as statistically rare within the enterprise?
    context: This question helps uncover potentially malicious domains that are not yet present in threat intelligence feeds. Adversaries often use newly registered or unique domains for C2 communications. Identifying domains with very low prevalence across the organization can surface these suspicious outliers for further investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers; DNS and Web Proxy logs; Threat Intelligence Platform feeds.
    range: last 30 days
    queries:
      - technology: SIEM Pseudocode
        query: SEARCH process_creation_events (process_name='cmd.exe') | EXTRACT domains from command_line | CALCULATE prevalence of each domain over last 30 days | WHERE prevalence < 1st_percentile | CORRELATE with DNS logs for rarity | ALERT
  - question: Can a machine learning model classify any cmd.exe command lines as having a high probability of being malicious?
    context: This question leverages machine learning to detect malicious commands that may not match simple IOCs or rarity analytics. By training a model on the characteristics of known malicious and benign commands, it can identify complex patterns and novel threats in real-time that might otherwise be missed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - All Windows Endpoints and Servers; DNS and Web Proxy logs; Threat Intelligence Platform feeds.
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: FOR each new command_line from cmd.exe event | features = GENERATE_FEATURES(command_line) | malicious_probability = CLASSIFY(model, features) | IF malicious_probability > threshold | ALERT
  - question: Do any cmd.exe command lines exhibit known obfuscation patterns, such as excessive carets or environment variable substitution?
    context: This question focuses on identifying attempts by adversaries to hide their commands from simple signature-based detection. Detecting specific, known techniques for obfuscation within the Windows Command Shell is a strong indicator that the command's author has malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, particularly those with administrative or developer tools installed.
    range: last 90 days
    queries:
      - technology: Regex/SIEM Pseudocode
        query: SEARCH process_creation_events (process_name='cmd.exe') | FILTER command_line MATCHES regex_pattern_for_obfuscation | ALERT
  - question: Are there any cmd.exe command lines with unusually high character entropy, suggesting potential obfuscation or encoding?
    context: This question uses a statistical approach to find obfuscated commands. Obfuscated or encrypted commands often have a higher degree of randomness (entropy) than normal, human-readable commands. A command with an entropy score significantly higher than the established baseline is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, particularly those with administrative or developer tools installed.
    range: last 30 days
    queries:
      - technology: SIEM Pseudocode
        query: SEARCH process_creation_events (process_name='cmd.exe') | CALCULATE entropy for each command_line | COMPARE to baseline entropy (last 30 days) | WHERE entropy > 95th_percentile | ALERT
  - question: Does unsupervised machine learning (clustering) identify any cmd.exe command lines as anomalous outliers?
    context: This question applies unsupervised learning to find "unknown unknowns." By grouping all command lines based on their structural features, this technique can identify small, isolated clusters of commands that are structurally different from the vast majority of common, benign commands, pointing to novel or rare malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, particularly those with administrative or developer tools installed.
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: VECTORS = generate_feature_vectors for all command_lines | CLUSTERS = DBSCAN(VECTORS) | IDENTIFY outlier_clusters | INVESTIGATE commands in outlier_clusters
  - question: Has any single parent process rapidly executed multiple, distinct reconnaissance commands via cmd.exe within a short time window?
    context: This question aims to detect automated or scripted reconnaissance activity. A legitimate user is unlikely to manually run a series of discovery commands in quick succession. Such behavior is a classic hallmark of an adversary or malware trying to quickly gather information about the compromised system and its environment.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Domain Controllers and critical application servers where reconnaissance is most impactful.
    range: last 90 days
    queries:
      - technology: Stateful SIEM Pseudocode
        query: GROUP BY ParentProcessID over 5_minutes | IF process_name='cmd.exe' AND command_line contains one_of(recon_commands) | COUNT distinct recon_commands | WHERE distinct_count >= 3 | ALERT
  - question: Has any user executed a sequence of commands that is statistically rare for them or their peer group?
    context: This question moves beyond simple command counts to analyze the order of operations, which can be highly indicative of intent. By baselining normal command sequences for each user, this technique can spot deviations that suggest an account has been compromised or a user is performing an unusual, potentially malicious, set of actions.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Domain Controllers and critical application servers where reconnaissance is most impactful.
    range: last 30 days
    queries:
      - technology: Behavioral Analytics Pseudocode
        query: FOR each user | BUILD baseline of command_sequences over 30 days | FOR each new command_sequence | IF sequence_is_rare (frequency < 1st_percentile) for user | ALERT
  - question: Did a predictive model (like a Markov chain or LSTM) flag any sequence of user commands as having a very low probability of occurring?
    context: This question uses advanced sequential modeling to predict a user's next command based on their history. When a user executes a command that has a very low probability of following the previous one, it signals a significant break from their established pattern of behavior, which could indicate a compromised session.
    answer_sources:
      - Windows Event ID 4688
      - All Windows Endpoints and Servers, especially Domain Controllers and critical application servers where reconnaissance is most impactful.
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: FOR each user_session | CALCULATE probability of current_command_sequence using trained_model (Markov/LSTM) | IF sequence_probability < threshold | ALERT
  - question: Has cmd.exe been launched by a suspicious parent process, such as a Microsoft Office application, browser, or PDF reader?
    context: This question targets a common initial access and execution vector where malware embedded in a document or webpage spawns a command shell to execute its payload. Legitimate use cases for applications like Word or Acrobat to launch cmd.exe are extremely rare, making this a high-fidelity indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - All Windows workstations, particularly those used by non-technical staff or in departments outside of IT and software development.
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: SEARCH process_creation_events (process_name='cmd.exe') | WHERE ParentProcessName IN (watchlist 'WINWORD.EXE', 'EXCEL.EXE', 'chrome.exe', etc.) | ALERT
  - question: Has cmd.exe been launched by a parent process that has rarely or never been observed launching it before across the enterprise?
    context: This question provides a dynamic way to detect suspicious parent-child relationships without a static watchlist. By baselining all process relationships, it can automatically flag a process like unusual_app.exe spawning cmd.exe even if unusual_app.exe is not on a predefined list, making it effective against novel or custom tools.
    answer_sources:
      - Windows Event ID 4688
      - All Windows workstations, particularly those used by non-technical staff or in departments outside of IT and software development.
    range: last 90 days
    queries:
      - technology: Behavioral Analytics Pseudocode
        query: BASELINE all parent-child relationships over 90 days | FOR each new event where child='cmd.exe' | CALCULATE frequency of (parent, child) pair | IF pair_is_new OR frequency < 1st_percentile | ALERT
  - question: Does a machine learning classifier, trained on process relationship features, deem any cmd.exe creation event as 'suspicious'?
    context: This question employs a supervised machine learning model to make a sophisticated judgment about whether a cmd.exe process creation is legitimate or not. By considering multiple features (parent name, path, user, etc.) simultaneously, the model can identify nuanced, suspicious patterns that a simple rule might miss.
    answer_sources:
      - Windows Event ID 4688
      - All Windows workstations, particularly those used by non-technical staff or in departments outside of IT and software development.
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: FOR each new cmd.exe creation event | features = GENERATE_FEATURES(parent_process, user, etc.) | suspicion_score = CLASSIFY(model, features) | IF suspicion_score > threshold | ALERT
  - question: Has the cmd.exe process itself been observed making a direct outbound network connection to an external IP address?
    context: This question targets highly anomalous behavior. The command shell (cmd.exe) is a local interpreter and should not be making network connections on its own. Such an event strongly suggests that shellcode has been injected into the cmd.exe process to establish a command and control (C2) channel or exfiltrate data.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies) and hosts generating network traffic (endpoints, servers).
    range: last 90 days
    queries:
      - technology: SIEM Pseudocode
        query: JOIN process_creation (EID 4688) with network_connection (EID 5156) on ProcessID | WHERE process_name='cmd.exe' AND destination_ip is external | ALERT
  - question: If cmd.exe is making network connections, are the destinations (countries or ASNs) statistically unusual for the source host?
    context: This question adds contextual and behavioral analysis to the rare event of cmd.exe making a network connection. A connection to a common destination might be less critical than one to a country or network provider the host has never contacted before, which would heighten suspicion of C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies) and hosts generating network traffic (endpoints, servers).
    range: last 90 days
    queries:
      - technology: Behavioral Analytics Pseudocode
        query: FOR each network_connection from 'cmd.exe' | ENRICH with GeoIP and ASN data | COMPARE destination_country/ASN to host's baseline | IF destination is rare (< 5th percentile) or new for host | ALERT
  - question: Has a time-series model detected an anomalous spike in the volume of outbound data from a network connection initiated by cmd.exe?
    context: This question seeks to identify data exfiltration. While a C2 channel might involve small, regular "heartbeat" traffic, a sudden, large burst of outbound data from a cmd.exe-initiated connection that deviates from the norm is a strong signal that an adversary is stealing and exfiltrating files.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Network egress points (e.g., firewalls, proxies) and hosts generating network traffic (endpoints, servers).
    range: last 90 days
    queries:
      - technology: Time-Series ML Pseudocode
        query: AGGREGATE outbound_bytes from cmd.exe connections over 5-min intervals | APPLY time-series model (e.g., SARIMA) | IF current_volume is an anomaly (deviates from forecast) | ALERT
  - question: Has a batch script been created in a temporary or public directory and then executed almost immediately?
    context: This question targets a common persistence and execution technique where adversaries drop a script into a non-standard, often world-writable, location and execute it. The tight timing between file creation and execution is a key indicator that this is an automated, malicious action.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories, temporary file locations, and public folders on endpoints and servers; Shared network drives.
    range: last 90 days
    queries:
      - technology: Stateful SIEM Pseudocode
        query: DETECT file_write (EID 4663) for .bat/.cmd in temp/public dirs | IF within 2 minutes, a process_creation (EID 4688) executes same file path | ALERT
  - question: Have any newly created and executed batch files been discovered with randomized, high-entropy filenames?
    context: This question helps to identify malware-generated scripts. Legitimate scripts usually have descriptive names (e.g., install_updates.bat), whereas malware often generates random filenames (e.g., a83hfg92.bat) to avoid static signature detection. High entropy in a filename is a strong signal of programmatic generation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories, temporary file locations, and public folders on endpoints and servers; Shared network drives.
    range: last 90 days
    queries:
      - technology: Behavioral Analytics Pseudocode
        query: FOR each new .bat/.cmd file_creation event | CALCULATE entropy of filename | COMPARE to baseline filename entropy | IF entropy is abnormally high | ALERT
  - question: Has a machine learning model flagged the file path of a newly created and executed batch script as being a suspicious location?
    context: This question uses machine learning to formalize the analyst's intuition about "bad" vs. "good" file paths. By learning from the characteristics of countless known good and bad script locations, a model can provide a consistent, data-driven score for how suspicious a given file path is, helping to prioritize alerts.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories, temporary file locations, and public folders on endpoints and servers; Shared network drives.
    range: last 90 days
    queries:
      - technology: ML Pseudocode
        query: FOR each new .bat/.cmd creation/execution event | features = GENERATE_FEATURES(file_path) | path_suspicion_score = CLASSIFY(model, features) | IF path_suspicion_score > threshold | ALERT