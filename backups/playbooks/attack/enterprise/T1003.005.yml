name: "T1003.005: Cached Domain Credentials"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps analysts investigate whether an adversary has accessed cached domain credentials on Windows or Linux systems. It provides questions and queries to detect credential dumping through various means, including the use of known tools identified by hash, suspicious command-line arguments, unauthorized access to registry hives or the LSASS process, and access to Linux credential cache files. The playbook covers symbolic, statistical, and machine learning-based detection methods, and also includes logic to correlate credential access with subsequent lateral movement."
type: "technique"
related: 
  - "TA0006: Credential Access"
contributors: 
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Has a process executed with a cryptographic hash matching a known credential dumping utility?"
    context: "Adversaries often use well-known tools like Mimikatz or secretsdump.py to perform credential dumping. Correlating the cryptographic hash of executed processes against a threat intelligence feed of known malicious tool hashes is a high-fidelity method for detecting the use of these common utilities. A match provides a strong indication of malicious activity."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon for Linux Event ID 1"
      - "All Windows and Linux Endpoints, Privileged Access Workstations, Critical Application Servers, and Domain Controllers."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_execution_logs WHERE process_hash IN known_cred_dumper_hashes"
  - question: "Has a statistically rare process executed, potentially indicating an unknown or obfuscated credential dumper?"
    context: "To evade hash-based detection, adversaries may use custom-compiled, packed, or lesser-known credential dumping tools. By analyzing the enterprise-wide prevalence of every executed process hash, analysts can identify outliers. A process seen on very few hosts, especially if running from a user-writable or temporary directory, is highly suspicious and warrants investigation as a potential unknown threat."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon for Linux Event ID 1"
      - "All Windows and Linux Endpoints, Privileged Access Workstations, Critical Application Servers, and Domain Controllers."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_execution_logs | CALCULATE prevalence(process_hash) | FILTER prevalence < threshold AND (process_path LIKE '%temp%' OR process_path LIKE '/tmp%')"
  - question: "Can a machine learning model classify a process as a credential dumper based on its metadata and execution context?"
    context: "A supervised machine learning model can learn the complex, non-obvious patterns of malicious processes that evade simpler rule-based detections. By training a model on features like hash prevalence, file path entropy, parent process characteristics, and whether the file is signed, it can classify new process executions with a high degree of accuracy, identifying sophisticated or novel credential dumping tools."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Sysmon for Linux Event ID 1"
      - "All Windows and Linux Endpoints, Privileged Access Workstations, Critical Application Servers, and Domain Controllers."
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY classification_model ON process_execution_events | FILTER prediction == 'malicious'"
  - question: "Did a process execute with command-line arguments containing known signatures for credential dumping?"
    context: "Credential dumping tools and techniques often rely on specific commands or arguments. For example, Mimikatz uses 'sekurlsa::logonpasswords' or 'lsadump::cache', and native Windows tools can be abused with commands like 'reg.exe save HKLM\\SECURITY'. Searching process command-line logs for these signature strings and patterns is a direct and effective way to detect credential dumping attempts."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Auditd logs"
      - "All Windows Endpoints, Authentication Servers, Linux systems integrated with Active Directory"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH process_execution_logs WHERE command_line MATCHES REGEX ('sekurlsa::', 'lsadump::cache', 'reg.exe save HKLM\\\\SECURITY', 'tdbdump')"
  - question: "Has a user or host executed a command with a statistically rare command-line argument pattern?"
    context: "Users and systems typically exhibit predictable command-line behavior. By establishing a baseline of normal command-line argument patterns (e.g., using n-grams) for each user and host, analysts can spot significant deviations. A command that is statistically rare for a particular user or on a specific host is anomalous and could indicate malicious activity, such as an attacker using a tool for the first time."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Auditd logs"
      - "All Windows Endpoints, Authentication Servers, Linux systems integrated with Active Directory"
    range: "last 90 days"
    queries:
      - "pseudocode: BASELINE command_line_patterns per user/host | SEARCH process_execution_logs | FILTER command_line_pattern IS rare for user/host"
  - question: "Can machine learning identify anomalous or malicious command-line arguments by clustering them with known bad commands or identifying them as outliers?"
    context: "Natural Language Processing (NLP) techniques can convert command-line strings into numerical vectors, allowing them to be grouped by semantic similarity. Using a clustering algorithm, a new or unknown command that groups with a cluster of known malicious commands can be identified as suspicious. This approach helps detect variations and obfuscations of known attack commands."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 1, Auditd logs"
      - "All Windows Endpoints, Authentication Servers, Linux systems integrated with Active Directory"
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY NLP_clustering_model ON command_line_arguments | IDENTIFY outliers or members of malicious_clusters"
  - question: "Has an unauthorized process attempted to read from the SECURITY, SYSTEM, or SAM registry hives?"
    context: "The HKLM\\SECURITY, HKLM\\SYSTEM, and HKLM\\SAM registry hives store critical credential materials and security settings. Access to these hives should be limited to a very small, well-defined set of legitimate system processes. By enabling auditing (SACLs) on these hives, analysts can create high-fidelity alerts for any read attempts from processes not on the approved allowlist, indicating a likely credential access attempt."
    answer_sources:
      - "Windows Event ID 4656, Windows Event ID 4663, Sysmon Event ID 13"
      - "Domain Controllers, Windows Servers with cached credentials enabled, User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH registry_access_logs WHERE object_name IN ('HKLM\\SECURITY', 'HKLM\\SYSTEM', 'HKLM\\SAM') AND process_path NOT IN (allowlist)"
  - question: "Has a process from a file path with unusually high entropy accessed critical registry hives?"
    context: "Malware is often dropped into paths with randomized names to evade simple signature-based detections. These randomized paths have high Shannon entropy. A process executing from a high-entropy path (e.g., 'C:\\Users\\Public\\..\\xyz123.exe') that then attempts to access sensitive registry hives is a strong statistical indicator of malicious behavior, as legitimate software rarely behaves this way."
    answer_sources:
      - "Windows Event ID 4656, Windows Event ID 4663, Sysmon Event ID 13"
      - "Domain Controllers, Windows Servers with cached credentials enabled, User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH registry_access_logs WHERE object_name IN (critical_hives) | CALCULATE entropy(process_path) | FILTER entropy > threshold"
  - question: "Can unsupervised machine learning detect anomalous access to critical registry hives by identifying outlier events?"
    context: "Unsupervised clustering algorithms can establish a baseline of normal access to sensitive registry hives by grouping events based on features like process name, user context, time of day, and parent process. Any access event that does not fit into an established benign cluster is identified as an outlier. These anomalies represent a deviation from normal behavior and require investigation for potential malicious activity."
    answer_sources:
      - "Windows Event ID 4656, Windows Event ID 4663, Sysmon Event ID 13"
      - "Domain Controllers, Windows Servers with cached credentials enabled, User Workstations"
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY clustering_model ON registry_access_events | IDENTIFY outliers"
  - question: "Has an unauthorized process attempted to read the memory of the LSASS process?"
    context: "The Local Security Authority Subsystem Service (lsass.exe) process stores credentials in memory. A primary method for credential dumping is to access and read this memory space. Sysmon Event ID 10 can monitor for process access events, specifically flagging when a process requests read access (e.g., GrantedAccess code '0x1010') to lsass.exe. Alerting on this behavior from any process not on a strict allowlist of security and system tools is a critical, high-fidelity detection."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, especially Domain Controllers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH sysmon_event_10 WHERE target_process == 'lsass.exe' AND granted_access IN (process_vm_read_codes) AND source_process NOT IN (allowlist)"
  - question: "Has a process or user accessed the LSASS process for the first time?"
    context: "Legitimate access to lsass.exe is typically performed by a small, predictable set of processes and user accounts. By baselining the pairs of (Source Process, User) that normally access LSASS, analysts can use 'first-seen' analysis to detect anomalies. A process or user accessing LSASS for the first time is highly suspicious and could indicate the start of a credential dumping attempt."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, especially Domain Controllers"
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH sysmon_event_10 WHERE target_process == 'lsass.exe' | IDENTIFY first_time(source_process, user) pair"
  - question: "Can a one-class SVM model identify anomalous or novel access to the LSASS process?"
    context: "A one-class Support Vector Machine (SVM) is a machine learning model ideal for anomaly detection. It can be trained exclusively on legitimate LSASS access events to learn a 'boundary' of normal behavior. Any new access event that falls outside this boundary is classified as an anomaly. This technique is effective at detecting novel or previously unseen credential dumping methods that don't match known signatures."
    answer_sources:
      - "Sysmon Event ID 10"
      - "All Windows Endpoints and Servers, especially Domain Controllers"
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY one_class_svm_model ON lsass_access_events | IDENTIFY anomalies"
  - question: "Has a credential dumping indicator been followed by anomalous network logon activity from the same host within a short time window?"
    context: "The primary goal of credential dumping is to facilitate lateral movement. A powerful detection strategy is to correlate a credential dumping alert (like LSASS access) with subsequent network activity. A stateful rule that triggers when a host generates a credential dump alert and then, within an hour, initiates network logons to multiple new internal systems, provides strong evidence of an active compromise."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 10, Windows Event ID 4624, Windows Event ID 4625, Zeek conn.log, Zeek dce_rpc.log"
      - "Enterprise-wide network traffic gateways, Authentication logs on all servers, Process execution logs on all endpoints"
    range: "last 90 days"
    queries:
      - "pseudocode: CORRELATE cred_dump_alert WITH subsequent_network_logons(type=3) from same_host | TRIGGER IF logon_count > 5 AND destinations are new"
  - question: "Following a credential dumping alert, did the affected host exhibit a statistically significant increase in the number of distinct network connections?"
    context: "After successfully dumping credentials, an adversary will often use them to scan for or connect to other machines on the network. This results in a burst of network connections to new destination IPs and ports. By baselining a host's normal hourly network connection patterns, a spike above the 99th percentile immediately following a credential dump alert can serve as a statistical indicator of lateral movement."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 10, Windows Event ID 4624, Windows Event ID 4625, Zeek conn.log, Zeek dce_rpc.log"
      - "Enterprise-wide network traffic gateways, Authentication logs on all servers, Process execution logs on all endpoints"
    range: "last 90 days"
    queries:
      - "pseudocode: ON cred_dump_alert, MONITOR network_connections from host | CALCULATE distinct_dest_ips_and_ports | TRIGGER IF count > baseline_99th_percentile"
  - question: "Can a Hidden Markov Model detect the state transition from benign activity to credential dumping to lateral movement?"
    context: "An attack is a sequence of states. A Hidden Markov Model (HMM) can be trained on sequences of security events (process creations, authentications, etc.) to model the probability of transitioning between states like 'Benign', 'Credential Dumping', and 'Lateral Movement'. An observed event sequence that leads to a high probability of this malicious state transition provides a high-confidence alert that an attack chain is in progress."
    answer_sources:
      - "Windows Event ID 4688, Sysmon Event ID 10, Windows Event ID 4624, Windows Event ID 4625, Zeek conn.log, Zeek dce_rpc.log"
      - "Enterprise-wide network traffic gateways, Authentication logs on all servers, Process execution logs on all endpoints"
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY HMM_model ON sequence_of_security_events | TRIGGER IF probability(Benign -> CredDump -> LateralMove) > threshold"
  - question: "Has a non-privileged or unauthorized process read from Linux credential cache files like SSSD or Quest/VAS databases?"
    context: "On Linux systems integrated with Active Directory, cached credentials are held in specific database files (e.g., /var/lib/sss/db/cache_*.ldb). Access to these files should be restricted to the root user or the SSSD service account. Using auditd to monitor for and alert on any read access by other users or processes is a direct way to detect attempts to steal these cached credentials."
    answer_sources:
      - "Auditd logs, Sysmon for Linux Event ID 1, bash_history"
      - "Linux servers and workstations integrated with Active Directory via SSSD or Quest/VAS."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH auditd_logs WHERE file_path IN (sssd_db_paths, vas_db_paths) AND user NOT IN ('root', 'sssd')"
  - question: "Has a statistically rare process or command been used to access Linux credential cache files?"
    context: "Legitimate access to Linux credential cache files is performed by a very limited set of system processes. Any access from a process not on this established baseline is anomalous. Furthermore, analyzing the command-line arguments of any process that does access these files for rarity can help spot 'first-seen' or unusual commands, which are highly suspicious and may indicate an attack."
    answer_sources:
      - "Auditd logs, Sysmon for Linux Event ID 1, bash_history"
      - "Linux servers and workstations integrated with Active Directory via SSSD or Quest/VAS."
    range: "last 90 days"
    queries:
      - "pseudocode: SEARCH file_access_logs WHERE file_path IN (cred_cache_paths) | FILTER process_name IS rare OR command_line IS rare"
  - question: "Can a machine learning model classify access events to sensitive Linux credential files as malicious?"
    context: "A supervised classification model can be trained to distinguish between benign administrative access and malicious attempts to read Linux credential cache files. By using features such as the user's privileges, the process name, parent process, and time of day, the model can learn to identify suspicious access patterns that might be missed by simple signature or rule-based methods."
    answer_sources:
      - "Auditd logs, Sysmon for Linux Event ID 1, bash_history"
      - "Linux servers and workstations integrated with Active Directory via SSSD or Quest/VAS."
    range: "last 90 days"
    queries:
      - "pseudocode: APPLY classification_model ON file_access_events | FILTER prediction == 'malicious'"