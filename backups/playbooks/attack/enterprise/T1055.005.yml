name: T1055.005: Thread Local Storage
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate adversary attempts to achieve privilege escalation or defense evasion using Thread Local Storage (TLS) callbacks. This technique involves injecting code into a legitimate process and using TLS to execute it, bypassing standard entry points. Detections focus on identifying malicious or unusual processes requesting write/execute handles to critical or commonly abused host processes (e.g., lsass.exe, explorer.exe), and then monitoring the targeted process for subsequent anomalous activity like spawning shells, initiating outbound network connections to suspicious destinations, or creating unexpected child processes.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known malicious process requested a handle with write or execute permissions to a critical system process?
    context: This question aims to detect a classic injection technique where a process identified as malicious by threat intelligence attempts to gain control over critical system processes like lsass.exe, services.exe, or wininit.exe. By querying for handle requests with specific access rights (memory writing, thread creation) and correlating the source process ID with its hash, we can identify high-confidence threats using known indicators.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: Last 90 days
    queries:
      - symbolic: "SEARCH handle_requests (Sysmon 10, WinEvent 4656) WHERE target_process IN (lsass.exe, services.exe, wininit.exe) AND access_rights CONTAINS ('PROCESS_VM_WRITE', 'PROCESS_VM_OPERATION', 'PROCESS_CREATE_THREAD'). JOIN process_creations (Sysmon 1, WinEvent 4688) ON source_pid. CHECK source_hash against threat_intel_feed."
  - question: Is a process with a statistically unusual or obfuscated file path requesting a handle to a critical system process?
    context: Adversaries often randomize or place malware in obscure file paths to evade static, path-based detections. This question uses Shannon entropy to measure the randomness of the source process path. By establishing a baseline of normal path entropy, we can flag requests from processes with abnormally high entropy paths as suspicious, indicating potential evasion.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: Last 90 days
    queries:
      - statistical: "FOR handle_requests to privileged_processes, CALCULATE Shannon_entropy of source_process_path. COMPARE to baseline. ALERT if entropy > 98th_percentile."
  - question: Can a machine learning model classify a handle request to a privileged process as malicious based on its characteristics?
    context: This question leverages a logistic regression model to provide a probabilistic score of malice for each handle request. By training on a rich feature set including process path entropy, command-line details, digital signature status, and parent process information, the model can identify complex, non-obvious patterns associated with malicious injection attempts that might be missed by symbolic or simple statistical rules.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - Domain Controllers, Critical Application Servers, Privileged User Workstations
    range: Last 90 days
    queries:
      - machine_learning: "INPUT features (path_entropy, cmd_length, is_signed, access_rights, target_is_privileged, parent_process) into logistic_regression_model. PREDICT P(malicious). ALERT if score > 0.9."
  - question: Did an unsigned process request write/execute access to a privileged process, which was immediately followed by that privileged process creating a network connection or spawning a shell?
    context: This question detects a common post-injection sequence. An adversary injects code into a trusted, privileged process to inherit its permissions and evade defenses. The injected code then often establishes a C2 connection or spawns a command shell. Correlating the initial handle request from an unsigned source with subsequent suspicious activity from the target process provides strong evidence of a successful injection.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - Domain Controllers, Enterprise DNS Servers, Network Egress Points
    range: Last 90 days
    queries:
      - symbolic: "ON handle_request from unsigned_process to privileged_process, WATCH target_pid for 60s. IF target_pid creates network_connection OR spawns_shell (cmd.exe, powershell.exe), ALERT."
  - question: Following a write-access handle request, did a privileged process spawn a statistically rare child process or connect to a rare network destination?
    context: Privileged system processes typically have predictable behavior. This question establishes a baseline of normal child processes and network destinations for each critical process. Any deviation from this baseline—such as spawning an uncommon process or connecting to a new IP address—immediately after being targeted by a write-access handle request is a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - Domain Controllers, Enterprise DNS Servers, Network Egress Points
    range: Last 90 days
    queries:
      - statistical: "AFTER write_access handle_request to privileged_process, MONITOR target_pid. IF target_pid spawns child_process OR connects to destination_ip with frequency < 1st_percentile of baseline, ALERT."
  - question: Does a time-series anomaly detection model show a significant spike in a critical process's network activity that correlates with a preceding write-access handle request?
    context: This question uses a machine learning model to monitor the volume of network traffic from critical processes over time. A sudden, unexplained spike in outbound data or unique destinations, temporally linked to a handle request that would allow code injection, can be identified as an anomaly by the model, pointing to data exfiltration or C2 communication from a compromised process.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 5156
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 3
      - Sysmon Event ID 1
      - Zeek conn.log
      - Domain Controllers, Enterprise DNS Servers, Network Egress Points
    range: Last 90 days
    queries:
      - machine_learning: "MODEL outbound_bytes and unique_dest_ips for critical_processes using time-series_model (LSTM, Prophet). IF write-access handle_request is followed by significant anomaly (high reconstruction_error), ALERT."
  - question: Has a critical system process that should not have network access (e.g., lsass.exe, smss.exe) made an outbound network connection?
    context: Certain core Windows processes like lsass.exe or smss.exe have no legitimate reason to initiate outbound network connections. Any such activity is a high-fidelity indicator of compromise, likely resulting from code injection where an adversary uses the process's high privileges to establish a covert C2 channel. This is a "zero-tolerance" detection.
    answer_sources:
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, Domain Controllers, DNS Servers
    range: Last 90 days
    queries:
      - symbolic: "SEARCH network_connections (WinEvent 5156, Sysmon 3, Zeek conn.log) WHERE source_process IN (lsass.exe, smss.exe, wininit.exe, csrss.exe) AND destination_ip is_external. ALERT."
  - question: Has a system process (e.g., services.exe) connected to a non-standard port with a statistically significant frequency?
    context: While some system processes like services.exe might have legitimate network activity, adversaries may use them to connect to non-standard ports for C2. This question uses a Z-score to identify statistically significant deviations in the daily connection count per port. A high Z-score, especially when correlated with lookups for newly registered domains, can uncover covert channels.
    answer_sources:
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, Domain Controllers, DNS Servers
    range: Last 90 days
    queries:
      - statistical: "CALCULATE daily Z-score for connection_count_per_port for system_processes. IF Z-score > 3, CORRELATE with DNS_queries for domains < 30_days_old. ALERT."
  - question: Has a one-class SVM model classified a network connection from a system process as an anomaly?
    context: This question uses a one-class SVM, a machine learning algorithm ideal for anomaly detection when only "normal" data is available for training. By learning the boundary of legitimate network behavior based on features like port, protocol, and SSL fingerprint, the model can effectively identify any novel or outlier connection from a system process as suspicious.
    answer_sources:
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, Domain Controllers, DNS Servers
    range: Last 90 days
    queries:
      - machine_learning: "TRAIN one-class_SVM on legitimate_network_connections from system_processes. USE features (dest_port, protocol, bytes_sent, JA3_hash). CLASSIFY new connections. ALERT if classified as anomaly."
  - question: Has a process running from a suspicious location (e.g., user profile, temp folder) requested full access to a privileged process?
    context: Adversaries often drop malware into user-writable directories (like AppData or Temp) or masquerade it in system-like paths to evade detection and persist. This question looks for the combination of a process executing from one of these suspicious locations and its attempt to gain full control (PROCESS_ALL_ACCESS) over a privileged process, a strong indicator of a malware payload attempting to escalate privileges.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers, Application Servers
    range: Last 90 days
    queries:
      - symbolic: "SEARCH handle_requests WHERE target is privileged_process AND access_mask is 'PROCESS_ALL_ACCESS'. JOIN with process_creations on source_pid. IF source_path MATCHES regex for suspicious_locations (C:\\Users\\*, C:\\ProgramData\\*), ALERT."
  - question: Has a process executing from a statistically rare file path requested write or execute access to a privileged process?
    context: Instead of relying on predefined "bad" paths, this question identifies rarity. Most legitimate process executions come from a small set of common paths (e.g., System32, Program Files). A process requesting high-privilege access from a path that is statistically infrequent across the enterprise is highly suspicious and could represent a novel malware location.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers, Application Servers
    range: Last 90 days
    queries:
      - statistical: "CALCULATE frequency of all source_paths requesting handles to privileged_processes. IF path_frequency < 5th_percentile AND access is write/execute, ALERT."
  - question: Did a process identified as anomalous by a clustering algorithm subsequently attempt to inject into a privileged process?
    context: This question uses an unsupervised machine learning approach (DBSCAN) to first cluster process execution events and identify outliers based on path, parent, and command-line arguments. If a process from one of these anomalous clusters is later observed requesting a handle to a privileged process, it provides a two-stage, high-confidence detection of abnormal execution followed by an attempt to escalate privileges.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers, Application Servers
    range: Last 90 days
    queries:
      - machine_learning: "CLUSTER process_execution events (Sysmon 1) using DBSCAN. IDENTIFY anomalous clusters. IF process from anomalous_cluster later requests handle to privileged_process (Sysmon 10), ALERT."
  - question: Has a process with a known malicious hash attempted to inject into a common host process like explorer.exe or svchost.exe?
    context: This question aims to detect when known malware attempts to evade defenses by injecting its code into a legitimate, commonly running process. By checking the hash of a newly created process against threat intelligence and then monitoring it for injection attempts (handle requests with write/execute access) into processes like explorer.exe, we can catch this evasion technique with high confidence.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - All Enterprise Workstations and Servers, VDI Environments
    range: Last 90 days
    queries:
      - symbolic: "ON process_creation, check hash against threat_intel. IF match found, WATCH pid. IF pid requests write/execute handle to (explorer.exe, svchost.exe), ALERT."
  - question: Has a statistically rare process requested write access to a common injection target like explorer.exe?
    context: Common processes like explorer.exe are typically accessed by a predictable set of other processes. This question establishes a baseline of these normal interactions. If a process that does not normally interact with explorer.exe suddenly requests a handle with write access, it is a statistical anomaly that suggests an unusual and potentially malicious injection attempt.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - All Enterprise Workstations and Servers, VDI Environments
    range: Last 90 days
    queries:
      - statistical: "PROFILE legitimate source_processes that request handles to (explorer.exe, svchost.exe). IF new handle_request comes from a source_process not in top 95% of frequent requesters AND requests write access, ALERT."
  - question: Does a Random Forest model classify a handle request to explorer.exe or svchost.exe as malicious?
    context: This question applies a supervised machine learning model (Random Forest) to score the likelihood of a handle request being malicious. The model considers a wide range of features about the source process (name, path, parent, signature) and the request itself. This allows for the detection of nuanced patterns of malicious injection that might not be captured by simple rules.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - All Enterprise Workstations and Servers, VDI Environments
    range: Last 90 days
    queries:
      - machine_learning: "INPUT features (source_name, path, parent, cmdline, signature, access_mask) into Random_Forest_model. SCORE handle_requests to (explorer.exe, svchost.exe). ALERT if score > threshold."
  - question: Did a process like explorer.exe spawn a command shell (cmd.exe, powershell.exe) within 60 seconds of another process requesting write access to it?
    context: A classic sign of process injection is the hijacked process being used to launch a command shell for the attacker. This question creates a specific rule to detect this sequence a write-access handle request to a common process followed shortly by that same process (now likely controlled by the attacker) spawning cmd.exe or powershell.exe.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - symbolic: "ON write-access handle_request to 'explorer.exe', watch target_pid. IF within 60s, target_pid becomes parent of (cmd.exe, powershell.exe), ALERT."
  - question: After a write-access handle request, did a common process like explorer.exe or chrome.exe spawn a child process that is statistically rare for it?
    context: Legitimate applications have a predictable set of child processes they normally spawn. This question leverages this fact by baselining normal parent-child relationships. If, after being targeted for injection, a process like chrome.exe spawns a child that is historically very infrequent (e.g., ftp.exe), it is a strong statistical indicator of compromise.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - statistical: "BASELINE frequency of child_processes for (explorer.exe, chrome.exe). AFTER write-access handle_request to one of these, IF it spawns a child in bottom 5th percentile of frequency, ALERT."
  - question: Has a graph-based anomaly detection algorithm identified an anomalous process-lineage subgraph originating from a process that was recently targeted for injection?
    context: This question models process activity as a graph, where parent-child relationships form the structure. Machine learning can identify anomalous subgraphs (e.g., explorer.exe -> powershell.exe -> rundll32.exe) that deviate from the normal process tree. Correlating the appearance of such a subgraph with a preceding handle request to its root process provides a powerful, context-aware detection method.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations, Terminal Servers
    range: Last 90 days
    queries:
      - machine_learning: "MODEL process lineage as a graph. IDENTIFY anomalous subgraphs. IF the root_process of an anomalous subgraph was recently targeted by a handle_request, ALERT."
  - question: Has a common user process like explorer.exe or chrome.exe connected to a known-bad or newly registered domain?
    context: After injecting into a user-facing process, adversaries often use it to connect to their C2 infrastructure. This question uses threat intelligence to check if the destination of a network connection is on a blocklist, has a bad reputation, or is a newly registered domain (a common tactic for attackers). A match provides a high-fidelity alert.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - User Workstations, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - symbolic: "ENRICH network logs with threat_intel (reputation, domain_age). ALERT if (explorer.exe, chrome.exe) connects to destination with (reputation=bad OR age < 30_days)."
  - question: Has a process connected to a 'first seen' domain for that host, where the domain name has high entropy?
    context: This question aims to detect connections to domains generated by a Domain Generation Algorithm (DGA), which are algorithmically created and often appear random. It identifies when a process connects to a domain that the host has never seen before and then calculates the domain's entropy. A combination of "first seen" and high entropy is a strong signal of DGA-based C2.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - User Workstations, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - statistical: "MAINTAIN baseline of domains per host. IF connection to 'first_seen' domain, CALCULATE domain_entropy. ALERT if entropy is in top 5th percentile."
  - question: Has a time-series model detected an anomalous network traffic pattern from a common application, especially to a new destination?
    context: This question uses an LSTM autoencoder to learn the normal "rhythm" of network traffic for applications on a per-host basis. If injected code begins to exfiltrate data or communicate with a C2 server, it will likely alter the traffic pattern (e.g., volume, frequency, destination) in a way that the model flags as a high-error anomaly, indicating a deviation from learned normal behavior.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - User Workstations, Network Egress Points, DNS Servers
    range: Last 90 days
    queries:
      - machine_learning: "TRAIN LSTM_autoencoder on normal network traffic patterns per host/app. IF observed traffic has high reconstruction_error, ALERT as anomaly."
  - question: Did a non-installer process like Word or Outlook write an executable file and then, within 5 minutes, attempt to inject it into another process?
    context: This detects a common "dropper" pattern where a document or email is used to write a malicious payload (.exe or .dll) to disk. The same process then immediately attempts to inject that payload into a legitimate host process to execute it. Correlating the file-write event with the subsequent injection attempt from the same process ID creates a very specific and high-confidence alert for this attack chain.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Download Directories, Temporary File Locations
    range: Last 90 days
    queries:
      - symbolic: "ON file_creation (Sysmon 11) of .exe/.dll by non-installer (winword.exe), WATCH process_id. IF same process_id attempts write-access injection (Sysmon 10) within 5 mins, ALERT."
  - question: Did a statistically uncommon process create an executable file, especially in an unusual location, followed by an injection attempt?
    context: Most executable files are created by a predictable set of installer and updater processes. This question identifies when a process that doesn't normally create executables (e.g., a browser) does so. This is flagged as anomalous, and the anomaly score is increased if the file is written to an odd location or if the event is followed by a process injection attempt from the same process.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Download Directories, Temporary File Locations
    range: Last 90 days
    queries:
      - statistical: "IDENTIFY processes that create .exe/.dll files. IF creator_process is statistically rare (< 5th percentile frequency) AND is followed by injection attempt from same PID, ALERT."
  - question: Has a Gradient Boosting model identified a sequence of events as a high-confidence 'drop and inject' behavior?
    context: This question uses a powerful classifier (Gradient Boosting) trained specifically to recognize the multi-stage "drop and inject" tactic. By feeding it features describing the file creation event (who, what, where) and whether it was followed by an injection attempt, the model can learn the specific combination of features that represent this malicious sequence with high accuracy.
    answer_sources:
      - Sysmon Event ID 11
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - Windows Event ID 4688
      - User Workstations, Download Directories, Temporary File Locations
    range: Last 90 days
    queries:
      - machine_learning: "TRAIN Gradient_Boosting_classifier on features (creator_process, file_ext, target_dir, subsequent_injection_bool). PREDICT if a file_creation event is part of a malicious sequence. ALERT on high probability."