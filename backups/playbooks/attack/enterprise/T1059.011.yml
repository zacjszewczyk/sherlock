name: T1059.011: Lua
id: 48b1919a-9e38-4e89-a359-86e06b9875f5
description: This playbook addresses the malicious execution of Lua scripts (T1059.011) as part of the Execution tactic (TA0002). It provides guidance for investigating whether an adversary has used a Lua interpreter for command and control, code execution, or reconnaissance. Key investigative angles include identifying Lua processes followed by suspicious network connections to malicious domains, analyzing command-line arguments for high entropy or malicious function calls, detecting Lua processes spawned by unusual parent processes (like Microsoft Office), finding Lua scripts executed from non-standard temporary directories, and observing Lua processes that spawn command shells or system discovery tools.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a Lua process execution been followed by a network connection to a known malicious indicator within five minutes?
    context: This question aims to detect immediate command and control (C2) callbacks following a Lua script execution. Adversaries often use an initial execution to connect to their infrastructure. Correlating Lua process creation with outbound network traffic to destinations on a threat intelligence feed is a high-fidelity method for identifying this C2 pattern.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log from Endpoint devices, Application servers (e.g., those running web applications with Lua components), and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process events for lua interpreters (e.g., lua.exe). FOR EACH event, SEARCH network/DNS logs from the same host within 5 minutes. JOIN destination IP/domain with CTI feed. RETURN matches.
  - question: Following a Lua execution, has the source host connected to a new or rarely accessed domain or IP address?
    context: This question helps uncover potential C2 communications that may not be on a threat intelligence feed. By establishing a baseline of normal network destinations for a host, any connection to a statistically rare or brand-new destination after a Lua execution becomes suspicious. This method is effective for detecting emerging threats or custom C2 infrastructure.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log from Endpoint devices, Application servers (e.g., those running web applications with Lua components), and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR EACH Lua execution, establish 30-day baseline of destination FQDNs/IPs for the source host. CALCULATE access frequency. FLAG connections where destination falls below 1st percentile of historical frequency.
  - question: After a Lua process execution, did the host's network traffic exhibit anomalous beaconing behavior?
    context: This question focuses on identifying the subtle, periodic 'heartbeat' signals characteristic of C2 beaconing. A time-series model learns a host's normal network patterns. Anomaly detection algorithms can then flag significant deviations from this baseline after a Lua execution, such as the emergence of a regular, low-volume connection pattern indicative of C2.
    answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log from Endpoint devices, Application servers (e.g., those running web applications with Lua components), and Network Egress Points.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL normal host beaconing behavior (frequency, volume, port entropy). AFTER Lua execution, MONITOR traffic from host. APPLY anomaly detection (e.g., Isolation Forest) to identify deviations from baseline.
  - question: Was a Lua interpreter executed with command-line arguments containing suspicious patterns like Base64, specific function calls, or URIs?
    context: This question seeks to identify malicious code being passed directly to the Lua interpreter via the command line. Adversaries use this technique to execute code without writing a file to disk. Scanning command-line arguments for patterns like '-e', 'os.execute', 'io.popen', Base64 strings, or URLs can directly reveal attempts at remote code execution.
    answer_sources: Windows Event ID 4688 from Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH process creation events for Lua interpreters. SCAN command-line arguments with regex for patterns like '-e', 'os.execute', 'http://', or Base64. TRIGGER alert on match.
  - question: Did a Lua process execution have command-line arguments with unusually high Shannon entropy?
    context: This question helps detect obfuscated scripts or data passed via the command line. Legitimate command-line arguments typically have low entropy, while packed or encoded payloads have high entropy. By baselining normal entropy scores, any Lua execution with an anomalously high entropy score becomes a strong indicator of malicious obfuscation.
    answer_sources: Windows Event ID 4688 from Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR EACH Lua execution, CALCULATE Shannon entropy of command-line args. ESTABLISH 30-day entropy baseline. FLAG any execution where entropy exceeds 95th percentile of baseline.
  - question: Can a machine learning model classify the command-line arguments of a Lua execution as malicious?
    context: This question leverages a predictive model to automate the detection of malicious Lua command lines. By training a classifier on features like argument length, character frequency, and entropy, the model can identify complex malicious patterns that might be missed by simple checks, providing a more robust detection method.
    answer_sources: Windows Event ID 4688 from Endpoint devices and Application servers where Lua interpreters are installed.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN a classifier (e.g., Random Forest) on labeled benign/malicious Lua command lines. ENGINEER features (length, entropy, n-grams). APPLY model to new Lua process events for classification.
  - question: Was a Lua interpreter process spawned by an unexpected parent process, such as a Microsoft Office application or web browser?
    context: This question aims to detect instances where Lua is launched as part of a phishing or exploitation chain. A Lua process spawned by a document-based application like 'winword.exe' or 'excel.exe' is highly suspicious and often indicates a user opened a malicious document.
    answer_sources: Windows Event ID 4688 from User workstations, VDI instances, and servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR EACH Lua process creation, INSPECT parent process name. COMPARE parent against an allowlist. ALERT if parent is not on allowlist, especially if it is 'winword.exe', 'excel.exe', etc.
  - question: Has a rare or never-before-seen parent-child process relationship involving a Lua interpreter occurred?
    context: This question uses historical data to identify anomalous process lineage. By building a baseline of all parent-child process pairs involving Lua, any new execution with a statistically rare or previously unobserved parent is flagged. This is effective for catching novel attack vectors that deviate from established normal behavior.
    answer_sources: Windows Event ID 4688 from User workstations, VDI instances, and servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: BUILD a 30-day frequency table of all parent-child pairs involving Lua. FOR EACH new execution, CALCULATE rarity of the pair. FLAG if pair is new or falls below a low frequency threshold (e.g., <0.1%).
  - question: Does the spawning of a Lua process represent a topologically improbable event within the host's process relationship graph?
    context: This question models process creation events as a graph to identify structurally anomalous relationships. A Lua process being spawned by a parent that is 'distant' or 'unconnected' in the typical process graph is a strong indicator of a malicious execution path.
    answer_sources: Windows Event ID 4688 from User workstations, VDI instances, and servers running Microsoft Office or web browsers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL process relationships as a directed graph. USE a graph anomaly detection algorithm to identify rare edges (parent-child spawns). SCORE anomalies based on graph metrics like betweenness.
  - question: Was a Lua script (.lua file) executed from a temporary or user-writable public directory?
    context: This question helps detect adversaries placing scripts in common, non-standard locations. Executing a Lua script from a world-writable location like '%TEMP%', '%APPDATA%', or 'C:\\Users\\Public' is a common tactic for malware to gain execution and persistence.
    answer_sources: Windows Event ID 4688 from User-writable directories on endpoints and servers (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Perflogs\\, %TEMP%).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MONITOR process creation events for command lines with '.lua' files. USE regex to check if path is in a high-risk directory ('%TEMP%', '%APPDATA%', etc.). ALERT on match.
  - question: Was a Lua script executed from a directory path that is statistically rare across the enterprise?
    context: This question identifies outlier execution locations by baselining all directory paths from which Lua scripts are run. An execution from a path that falls into a low percentile of historical usage is suspicious and can uncover malware dropped in unusual or randomly named folders.
    answer_sources: Windows Event ID 4688 from User-writable directories on endpoints and servers (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Perflogs\\, %TEMP%).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: ANALYZE directory paths of all Lua script executions over 30 days. CALCULATE frequency for each directory. FLAG any execution where the path falls in the bottom 5th percentile of locations.
  - question: Does the directory path of a Lua script execution belong to a sparse or distant cluster of anomalous paths?
    context: This question uses clustering algorithms to group similar, legitimate execution paths. Paths that do not fit into these large, dense clusters are flagged as anomalies. This is useful for identifying malicious scripts placed in directories with unusual characteristics like high name entropy.
    answer_sources: Windows Event ID 4688 from User-writable directories on endpoints and servers (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Perflogs\\, %TEMP%).
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: APPLY clustering algorithm (e.g., DBSCAN) to directory paths of Lua executions. DERIVE features from path string (depth, entropy). INVESTIGATE small, sparse, or distant clusters as anomalies.
  - question: Did a process spawned by a Lua interpreter execute a command shell or a known system discovery command?
    context: This question aims to detect post-exploitation activity initiated by a Lua script. After initial execution, adversaries often spawn shells ('cmd.exe') or run reconnaissance commands ('whoami', 'net user') to understand the compromised system. Alerting on this downstream activity is a reliable detection method.
    answer_sources: Windows Event ID 4688 from Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CORRELATE process events by parent process ID. IF parent is a Lua interpreter, INSPECT child process name. ALERT if child matches a denylist ('cmd.exe', 'powershell.exe', 'whoami.exe', 'net.exe').
  - question: Did the set of child processes spawned by a Lua process instance deviate significantly from its historical baseline?
    context: This question identifies when a legitimate process that uses Lua begins to behave maliciously. By creating a baseline of normal child processes for a given Lua-enabled application, any new instance that spawns a different set of child processes can be flagged as a suspicious deviation.
    answer_sources: Windows Event ID 4688 from Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each legitimate Lua process, BUILD a 30-day baseline of its normal child processes. FOR new instances, COMPARE the spawned child set against the baseline set using a Jaccard similarity index. FLAG low scores.
  - question: Did a process execution chain originating from a Lua interpreter have a very low probability according to a Hidden Markov Model of normal process sequences?
    context: This question models entire sequences of process creations to detect anomalous chains of events. A Hidden Markov Model (HMM) learns the normal transition probabilities between processes. A chain of commands initiated by a Lua script that has a low probability under the model indicates a rare and suspicious sequence of actions.
    answer_sources: Windows Event ID 4688 from Endpoint devices, including workstations and servers.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: MODEL process sequences as a Hidden Markov Model (HMM) based on historical data. CALCULATE transition probabilities. FLAG process chains from a Lua execution that have a very low probability under the model.