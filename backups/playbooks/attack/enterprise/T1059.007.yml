name: T1059.007: JavaScript
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has executed malicious
  code using a JavaScript interpreter (wscript.exe, cscript.exe, node.exe). It
  focuses on detecting suspicious execution patterns, including script hosts initiating
  network connections to malicious destinations, command-line obfuscation, execution
  from unusual parent processes or directories, and post-execution behavior indicative
  of command-and-control (C2) or persistence. The playbook covers analysis of process
  logs, network traffic, file content, and command-line arguments to identify these
  malicious activities.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Is a script host process (wscript.exe, cscript.exe, node.exe) initiating
    a network connection to a destination known to be malicious, or is a transferred
    JavaScript file a known malicious file?
  context: This question aims to detect direct evidence of compromise by correlating
    script host activity with threat intelligence. A match indicates that a script
    has either connected to a known command-and-control (C2) server or that a known
    malicious script file has been transferred, providing a high-confidence indicator
    of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - User Workstations, Web Proxies and Gateways, DNS Servers
  range: last 90 days
  queries:
  - 'SEARCH process creation logs for wscript.exe, cscript.exe, node.exe. JOIN with
    network logs by host and timestamp. COMPARE destination IP/domain against threat
    intel feed. ALERT on match.'
  - 'SEARCH file transfer logs (Zeek files.log) for JavaScript files. COMPARE file
    hash against malware signature database. ALERT on match.'
- question: Is a script host process connecting to a domain that is both new for
    the user and rarely visited across the entire organization?
  context: This is a behavioral anomaly detection technique designed to identify
    connections to novel or targeted C2 infrastructure. Legitimate domains are often
    visited by many users, whereas a domain that is new for a specific user and rare
    enterprise-wide is highly suspicious and could be part of a new attack campaign.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - User Workstations, Web Proxies and Gateways, DNS Servers
  range: last 90 days
  queries:
  - 'FOR each user, BASELINE domains contacted by script hosts over 30 days. CALCULATE
    global rarity of all domains. SEARCH for script host connections to domains NOT
    in user baseline AND with low global rarity (e.g., <1% of users). ALERT on match.'
- question: Does a URL requested by a script host have lexical features (e.g., length,
    entropy, special characters) that a machine learning model classifies as likely
    malicious?
  context: This question uses machine learning to proactively identify malicious
    URLs without relying on known-bad signatures. It analyzes the structure of the
    URL itself, looking for patterns common in domain generation algorithms (DGAs)
    or obfuscated C2 paths, which often differ significantly from human-readable,
    benign URLs.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - User Workstations, Web Proxies and Gateways, DNS Servers
  range: last 90 days
  queries:
  - 'FOR each URL from script host network traffic, EXTRACT lexical features (length,
    entropy, query parameter count, etc.). APPLY pre-trained classification model.
    ALERT if maliciousness score > threshold (e.g., 0.90).'
- question: Are wscript.exe or cscript.exe being executed with command-line arguments
    containing keywords or patterns indicative of obfuscation or malicious activity
    (e.g., 'eval', Base64)?
  context: Adversaries often embed obfuscated or encoded payloads directly in the
    command line to avoid leaving malicious files on disk. This question helps detect
    this technique by searching for common scripting keywords used for execution
    ('eval', 'ActiveXObject') and patterns that indicate encoding (e.g., Base64),
    which are highly irregular in legitimate command-line usage.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint Devices, Application Servers
  range: last 90 days
  queries:
  - 'SEARCH process creation logs (Windows Event ID 4688) for wscript.exe/cscript.exe.
    SCAN command line for keywords like "eval", "ActiveXObject", "setRequestHeader",
    "fromCharCode" or regex for Base64 strings. ALERT on match.'
- question: Is a script host being executed with a command line that has unusually
    high entropy, suggesting the presence of obfuscated or packed code?
  context: Shannon entropy measures randomness. Obfuscated or encrypted code is designed
    to be unreadable and appears random, resulting in high entropy. By establishing
a baseline for normal command-line entropy in the environment, this question helps
    spot outliers that are likely carrying a packed or obfuscated malicious payload.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint Devices, Application Servers
  range: last 90 days
  queries:
  - 'FOR each wscript.exe/cscript.exe execution, CALCULATE Shannon entropy of the
    command-line string. ESTABLISH a baseline distribution. ALERT if entropy score
    exceeds a high percentile (e.g., 98th).'
- question: Does a machine learning model classify the command-line arguments of
    a script host execution as likely malicious based on its features (length, argument
    count, entropy, etc.)?
  context: This question describes a more sophisticated approach that combines multiple
    command-line features into a machine learning model. This allows for more accurate
    detection of malicious commands by considering the interplay of various attributes,
    reducing false positives that might arise from simpler checks on entropy or keywords
    alone.
  answer_sources:
  - Windows Event ID 4688
  - Endpoint Devices, Application Servers
  range: last 90 days
  queries:
  - 'FOR each script host command line, EXTRACT features (length, arg count, special
    char frequency, entropy). APPLY pre-trained classification model. ALERT if classified
    as malicious with high confidence.'
- question: Does JavaScript content from network traffic contain signatures of known
    malicious code or frameworks?
  context: This question involves inspecting the actual content of JavaScript files
    as they traverse the network. By applying signatures, such as YARA rules, analysts
    can detect the presence of known malicious functions (e.g., those used for code
    evaluation from a string), specific exploit frameworks (like BeEF), or hardcoded
    C2 indicators.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Egress Points, Web Application Firewalls (WAFs), Intrusion Detection/Prevention
    Systems (IDS/IPS)
  range: last 90 days
  queries:
  - 'INSPECT content of JavaScript files from network traffic. APPLY YARA rules to
    detect known malicious libraries, functions (e.g., "eval(atob(...))"), or hardcoded
    C2 indicators. ALERT on match.'
- question: Does a downloaded JavaScript file exhibit structural anomalies, such
    as a low comment-to-code ratio or an unusual distribution of Abstract Syntax
    Tree nodes, suggesting obfuscation?
  context: Legitimate JavaScript is often well-documented with comments, while malicious
    scripts are typically minified and obfuscated, lacking comments. This question
    identifies suspicious scripts by analyzing their structure. A low comment ratio
    or a high frequency of AST nodes associated with obfuscation can indicate that
    the script's primary purpose is concealment and malicious execution.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Egress Points, Web Application Firewalls (WAFs), Intrusion Detection/Prevention
    Systems (IDS/IPS)
  range: last 90 days
  queries:
  - 'FOR each downloaded JS file, PARSE into an Abstract Syntax Tree (AST). CALCULATE
    code/comment ratio and distribution of AST node types. ESTABLISH baseline. ALERT
    on outliers (e.g., >3 standard deviations from the norm).'
- question: Does an NLP model classify the intent of a JavaScript file from network
    traffic as malicious (e.g., dropper, skimmer)?
  context: This question applies advanced Natural Language Processing (NLP) techniques
    to understand the likely purpose of a script. By training a model on a large
    dataset of labeled benign and malicious scripts, it can learn to classify new,
    unseen scripts based on their code patterns and structure, enabling detection
    of novel threats.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network Egress Points, Web Application Firewalls (WAFs), Intrusion Detection/Prevention
    Systems (IDS/IPS)
  range: last 90 days
  queries:
  - 'TOKENIZE JavaScript code from network traffic. APPLY pre-trained NLP model (e.g.,
    transformer-based classifier). ALERT if script is classified as malicious (dropper,
    skimmer, C2) with high confidence.'
- question: Is a JavaScript interpreter being launched by an unusual parent process
    (like an Office app) or from a non-standard directory (like Downloads or Temp)?
  context: This question seeks to identify anomalous execution context. Legitimate
    scripts are typically run from specific application directories by expected processes.
    An Office application (like Word or Outlook) spawning a script host is a classic
    sign of a malicious document macro, and execution from temporary or download
    directories is also highly suspicious.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Mail Servers, File Servers, Web Servers
  range: last 90 days
  queries:
  - 'SEARCH process creation events (Windows Event ID 4688). ALERT if parent of wscript.exe/cscript.exe
    is WINWORD.EXE, OUTLOOK.EXE, etc. OR if script path is in a disallowed directory
    (Downloads, Temp, Public).'
- question: Is a script host being launched by a parent process or from a directory
    that is statistically rare for the host or user?
  context: This is a behavioral approach to the previous question. Instead of using
    a static blocklist, it builds a baseline of normal parent-child process relationships
    and script execution locations. It then alerts on activity that is statistically
    uncommon, allowing it to detect novel or environment-specific attack vectors
    that a static list might miss.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Mail Servers, File Servers, Web Servers
  range: last 90 days
  queries:
  - 'BUILD a frequency map of parent-child pairs and script execution directories
    over 30 days. ALERT when a script host is launched by a parent or from a directory
    in the bottom 5th percentile of observed frequencies.'
- question: Does an anomaly detection model identify a rare or suspicious combination
    of parent process, script path, and user context for a script host execution?
  context: This question leverages a more advanced anomaly detection model that considers
    multiple features of the execution event simultaneously. It can identify scenarios
    where each individual feature might seem normal, but their combination is highly
    anomalous (e.g., a specific user running a script from a specific path via a specific
    parent for the first time).
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Mail Servers, File Servers, Web Servers
  range: last 90 days
  queries:
  - 'TRAIN an anomaly detection model (e.g., Isolation Forest) on benign execution
    features (parent process, script path, user). APPLY model to new events. ALERT
    on executions identified as anomalous.'
- question: Following a JavaScript execution, does the host immediately spawn a suspicious
    process (like cmd.exe) or modify a persistence-related registry key?
  context: Malicious scripts are often just the first stage of an attack. Their goal
    is frequently to execute other commands or establish persistence. This question
    looks for this follow-on activity by correlating a script execution with subsequent
    suspicious events, like the spawning of a command shell or modifications to 'Run'
    keys in the registry, within a short time window.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Windows Event ID 4663
  - Zeek conn.log
  - All Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - 'CORRELATE a script host execution with subsequent events on the same host within
    5 minutes. ALERT if a child process (powershell.exe, cmd.exe) is created OR a
    registry modification occurs on a known persistence key.'
- question: Following a script execution, does the host exhibit network traffic
    patterns consistent with C2 beaconing (periodic, low-volume connections)?
  context: After compromise, a malicious script may initiate command-and-control
    (C2) communications. This beaconing traffic is often characterized by its regularity
    (e.g., connecting every 5 minutes) and small data size. This question aims to
    detect this pattern by analyzing the timing and volume of network connections
    that occur shortly after a script is executed.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Windows Event ID 4663
  - Zeek conn.log
  - All Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - 'AFTER a script execution, analyze subsequent network connections from the host.
    CALCULATE standard deviation of inter-arrival times and average data volume over
    10 minutes. ALERT if time deviation is near zero and volume is low.'
- question: Does a graph-based anomaly detection model identify the sequence of host
    events following a script execution as structurally dissimilar from benign activity?
  context: This question models post-execution activity as a sequence or graph of
    events (process creations, file access, etc.). By comparing the structure of this
    graph to a learned model of benign activity graphs, it can identify complex anomalous
    behaviors that might be missed by looking at individual events in isolation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Windows Event ID 4663
  - Zeek conn.log
  - All Endpoints and Servers, Domain Controllers
  range: last 90 days
  queries:
  - 'MODEL post-script-execution events as a temporal graph. APPLY a graph-based
    anomaly detection algorithm to compare the new graph against a library of benign
    graphs. ALERT on structurally dissimilar sequences.'
- question: Is node.exe executing a script from a high-risk directory or spawning
    suspicious child processes like powershell.exe?
  context: While Node.js is a legitimate development tool, adversaries can abuse
    it for execution. This question focuses on clear-cut signs of misuse, such as
    running a Node.js script from a temporary or user download folder (which is not
    a typical development practice) or using it to launch command-line tools for
    subsequent actions.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Development Environments, Web Servers, User Workstations
  range: last 90 days
  queries:
  - 'MONITOR node.exe process creation. ALERT when script path is in a high-risk
    directory (%APPDATA%, %TEMP%) OR when node.exe spawns a child process like powershell.exe
    or whoami.exe.'
- question: Has node.exe spawned a child process never seen before on the host, or
    is it generating an anomalous volume of outbound network data?
  context: This question uses baselining to detect anomalous Node.js behavior. It
    assumes that on a given server or workstation, Node.js activity is relatively
    predictable. The sudden appearance of a new child process or a significant spike
    in outbound data can indicate that the Node.js process has been hijacked or that
    a malicious script is performing data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Development Environments, Web Servers, User Workstations
  range: last 90 days
  queries:
  - 'FOR hosts running Node.js, BASELINE normal child processes and network volumes.
    ALERT if node.exe spawns a novel child process OR if outbound data in a 1-hour
    window exceeds 3 standard deviations above baseline.'
- question: Does a time-series anomaly detection model flag the network telemetry
    from a node.exe process as a significant deviation from normal patterns, potentially
    indicating C2 or exfiltration?
  context: This question applies sophisticated time-series analysis to the network
    traffic originating from Node.js. By training a model (like an LSTM autoencoder)
    on legitimate traffic patterns, it can learn the normal "rhythm" of the application.
    Significant deviations from this learned pattern can effectively detect stealthy
    C2 communications or data exfiltration that might not be obvious from simple
    volume metrics.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - Development Environments, Web Servers, User Workstations
  range: last 90 days
  queries:
  - 'APPLY a time-series anomaly detection model (e.g., LSTM autoencoder) to network
    telemetry (bytes out, connection count) from node.exe. TRAIN on benign traffic.
    ALERT on significant deviations from learned patterns.'