name: T1005: Data from Local System
id: f1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has staged or searched for local system data in preparation for exfiltration. This can manifest as the execution of known data collection tools (e.g., secretsdump.py, SharpHound.exe), the use of command-line utilities for recursive file discovery or content searching (`dir /s`, `findstr`), anomalous high-volume file access from a single process, processes accessing files in unusual directories (e.g., a web server reading NTDS.dit), or commands on network devices to export their running configuration.
type: technique
related:
- TA0009: Collection
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any known data staging or collection utilities been executed, based on process name or file hash?
  context: This question aims to identify the execution of well-known adversary tools used for collecting data from local systems. By monitoring process creation events and comparing file hashes and names against a threat intelligence feed of known malicious indicators (like secretsdump.py, SharpHound.exe, Rubeus.exe, or 7z.exe), analysts can detect the initial stages of data collection with high confidence. A match indicates an adversary is likely using standard, off-the-shelf tooling to gather sensitive information.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (Domain Controllers, Database Servers)
  - Executive workstations
  - Developer endpoints
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (EID 4688, EID 1)
      WHERE process_name IN (known_collection_tools_list)
         OR process_hash IN (known_collection_tool_hashes)
      GROUP BY hostname, process_name, command_line
- question: Has any unusually rare or non-standard software, based on file hash prevalence, been executed on the network?
  context: This question focuses on identifying potentially malicious or unauthorized software that is not part of the standard operating environment. By calculating the prevalence of a process's file hash across the entire endpoint population, analysts can flag software that is exceptionally rare (e.g., seen on fewer than 5 systems). This statistical approach helps uncover custom adversary tools or legitimate-but-unauthorized software being used for data collection, which would be missed by signature-based detection.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (Domain Controllers, Database Servers)
  - Executive workstations
  - Developer endpoints
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE prevalence of each file_hash in process_creation_events over 30 days
      SEARCH process_creation_events
      WHERE hash_prevalence < 5 systems OR hash_prevalence < 0.1% of total systems
      GROUP BY hostname, process_name, file_hash, prevalence_count
- question: Have any process executions been flagged by a machine learning model as having a high probability of being malicious data collection activity?
  context: This question leverages a machine learning model to detect nuanced or novel data collection techniques that may evade simpler detection methods. By training a model on features like parent process, user context, command-line characteristics, and hash rarity, it can learn the subtle patterns of malicious behavior. This allows for the scoring of every new process, flagging those that exhibit a combination of suspicious characteristics, even if no single feature is definitively malicious on its own.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Critical servers (Domain Controllers, Database Servers)
  - Executive workstations
  - Developer endpoints
  - Privileged Access Workstations (PAWs)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_creation_event:
        EXTRACT features (ParentProcessName, User, CommandLineLength, CommandLineEntropy, HashPrevalence)
        SCORE event with trained classification model
      SEARCH for events where score > high_probability_threshold
      GROUP BY hostname, process_name, command_line, score
- question: Has a command-line interpreter or scripting host been used with arguments indicative of file searching, content discovery, or data archiving?
  context: This question seeks to identify adversaries 'living off the land' by using built-in system utilities (like cmd.exe or powershell.exe) to perform data collection. By scanning command-line arguments and PowerShell script blocks for specific patterns—such as recursive directory listings (`dir /s`), content searching (`findstr`), or archiving commands (`tar`, `zip`)—analysts can detect collection activity that doesn't involve dropping new tools onto the system.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 1
  - User workstations
  - File servers
  - SharePoint servers
  - Code repositories
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_creation_events (EID 4688, EID 1) OR powershell_script_blocks (EID 4104)
      WHERE command_line MATCHES REGEX for ('dir /s', 'findstr', 'grep', 'Get-ChildItem -Recurse', 'tar', 'zip', 'Compress-Archive')
        AND keywords ('password', 'secret', 'config')
      GROUP BY hostname, process_name, command_line
- question: Have any command-line executions exhibited unusually high entropy, potentially indicating obfuscation or encoded data?
  context: This question helps detect obfuscated commands or data being passed directly through command-line arguments. Adversaries may encode scripts or commands to bypass simple keyword-based detections. By calculating the Shannon entropy of command-line arguments and comparing it to a baseline for normal activity, analysts can flag commands that are abnormally complex or random, which is a common indicator of obfuscation.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 1
  - User workstations
  - File servers
  - SharePoint servers
  - Code repositories
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each command_line_event:
        CALCULATE shannon_entropy of arguments
        COMPARE entropy to historical baseline for that process_name/user_role
      SEARCH for events where entropy > 99th_percentile of baseline
      GROUP BY hostname, process_name, user, command_line, entropy_score
- question: Has a time-series model detected an anomalous spike in the frequency of file search or archiving commands from a specific user or host?
  context: This question aims to identify a burst of collection activity that deviates from established user or system behavior. While a single archiving command might be normal, a sudden, high-frequency burst is suspicious. A time-series anomaly detection model can learn the normal daily and weekly rhythms of such commands (e.g., scheduled backup scripts) and alert only when the observed frequency significantly exceeds the forecasted normal range, indicating a potential 'smash and grab' data collection event.
  answer_sources:
  - Windows Event ID 4688
  - Windows PowerShell Logging Event ID 4104
  - Sysmon Event ID 1
  - User workstations
  - File servers
  - SharePoint servers
  - Code repositories
  - Application servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR frequency of search/archive commands per user/host over time
      APPLY time-series model (e.g., ARIMA) to forecast expected frequency
      ALERT when observed_frequency significantly deviates from forecasted_range
      GROUP BY user, host, command_type, deviation_score
- question: Has a single process accessed an unusually large number of unique files or directories within a short time frame?
  context: This question is designed to detect mass file enumeration or copying, a common precursor to data exfiltration. By creating a rule that triggers when a single process reads an excessive number of files (e.g., >500) across many directories (e.g., >20) in a short window (e.g., 5 minutes), analysts can identify behavior typical of data staging. This requires careful tuning and exclusion of legitimate processes like backup services or search indexers.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers containing sensitive PII/PHI/Financial data
  - Critical system directories (e.g., C:\Windows\System32)
  - User profile directories
  - Cloud storage synchronization folders (e.g., OneDrive, Dropbox) on endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      AGGREGATE file_access_events (EID 4663, EID 11) over 5-minute windows
      GROUP BY ProcessID, process_name
      COUNT unique files and unique directories
      SEARCH where unique_file_count > 500 AND unique_directory_count > 20
        AND process_name NOT IN (backup_process_exclusion_list)
- question: Has any process accessed a number of unique files per minute that exceeds the 99.5th percentile of its historical baseline?
  context: This question provides a more dynamic and robust method for detecting mass file access than a static threshold. By establishing a historical baseline for the number of unique files accessed per minute for every process name (e.g., 'explorer.exe' vs. 'svchost.exe'), this approach can flag when a specific process instance behaves anomalously compared to its peers. Using a high percentile (99.5th) helps to reduce false positives from normal, but heavy, usage.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers containing sensitive PII/PHI/Financial data
  - Critical system directories (e.g., C:\Windows\System32)
  - User profile directories
  - Cloud storage synchronization folders (e.g., OneDrive, Dropbox) on endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process_name, create a historical distribution of 'unique_files_accessed_per_minute'
      FOR each new 1-minute window:
        COUNT unique files accessed by each process instance
        ALERT if count > 99.5th percentile of that process_name's historical distribution
- question: Has a clustering algorithm identified any file access patterns as anomalous outliers that do not fit into normal activity clusters?
  context: This question uses unsupervised machine learning to find novel or unusual file access behavior without pre-defined rules. A clustering algorithm like DBSCAN can group together 'normal' high-volume activities (like backups or indexing) into dense clusters based on features like process name, user, file extension, and time of day. Any activity that doesn't fit into a known cluster is labeled as 'noise' or an outlier, making it a strong candidate for investigation as it represents a pattern of access the system has never seen before.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - File servers containing sensitive PII/PHI/Financial data
  - Critical system directories (e.g., C:\Windows\System32)
  - User profile directories
  - Cloud storage synchronization folders (e.g., OneDrive, Dropbox) on endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT file access events with features (ProcessName, UserName, FileExtension, DirectoryDepth, HourOfDay)
      APPLY clustering algorithm (DBSCAN) to group events
      IDENTIFY and alert on events classified as 'noise' or outliers
      REVIEW outlier events for signs of malicious collection
- question: Has any process exhibited anomalous behavior, such as a suspicious parent-child relationship or attempts to access highly sensitive system files?
  context: This question looks for high-fidelity indicators of compromise through specific, well-defined forbidden actions. This includes monitoring for unusual process chains (e.g., Microsoft Word spawning PowerShell) which are common in malware delivery, as well as creating strict rules to flag any access to critical system files like the NTDS.dit database or SAM registry hive by any account other than the SYSTEM account. A positive hit on these rules is a strong signal of malicious activity.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Web servers (IIS, Apache)
  - Application servers
  - Domain Controllers
  - Endpoints with local administrator privileges
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for process_creation_events where parent_child_pair IN (anomalous_pairs_list)
      UNION
      SEARCH for file_access_events where target_file IN ('NTDS.dit', 'SAM', 'SYSTEM', 'SECURITY')
        AND user_account IS NOT 'SYSTEM'
- question: Have there been any file access events involving a combination of process, user, and directory path that is statistically rare in the environment?
  context: This question aims to identify unusual file access by calculating the rarity of the relationship between the actor (user, process) and the target (directory). For example, a web server process (`w3wp.exe`) accessing a user's home directory (`C:\Users\...`) is an extremely rare and suspicious event. By baselining all `(ProcessName, DirectoryPrefix, UserName)` combinations and alerting on those that fall below a very low prevalence threshold (e.g., < 0.01%), analysts can uncover abnormal access patterns indicative of privilege escalation or lateral movement.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Web servers (IIS, Apache)
  - Application servers
  - Domain Controllers
  - Endpoints with local administrator privileges
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE prevalence of each (ProcessName, DirectoryPrefix, UserName) tuple over the last 90 days
      SEARCH for file_access_events
      WHERE tuple_prevalence < 0.01%
      GROUP BY ProcessName, DirectoryPrefix, UserName, prevalence_count
- question: Has a UEBA model detected a significant deviation from a user's or host's established 'file access fingerprint'?
  context: This question uses a User and Entity Behavior Analytics (UEBA) model to create a comprehensive profile of normal activity for each user and system. This 'fingerprint' includes the applications they use, the files and shares they typically access, and their normal hours of operation. The model can then detect significant deviations from this established profile, such as a user suddenly accessing file shares from another department or using an application they've never run before. This holistic approach is effective at detecting account takeovers or insider threats engaged in data collection.
  answer_sources:
  - Windows Event ID 4663
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Web servers (IIS, Apache)
  - Application servers
  - Domain Controllers
  - Endpoints with local administrator privileges
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each user/host, MAINTAIN a profile of normal file access behavior (apps, paths, file types, hours)
      FOR each new file_access_event:
        SCORE the event's deviation from the user/host profile
      ALERT when deviation_score exceeds a dynamic threshold
      GROUP BY user, host, deviation_score, anomalous_activity_details
- question: Has a command to display or export a network device's configuration file been executed?
  context: This question focuses on detecting attempts to steal network device configurations, which contain sensitive information like passwords, routing tables, and firewall rules. By monitoring syslog data from network devices for specific commands (e.g., `show running-config`, `copy running-config tftp:`), analysts can identify this activity. Alerts should be prioritized as high-severity if the command involves copying the configuration to a remote, especially external or unknown, location.
  answer_sources:
  - Zeek syslog.log
  - Zeek conn.log
  - Core network switches
  - Edge routers
  - Firewalls
  - VPN concentrators
  - Wireless LAN Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH syslog from network devices
      WHERE message MATCHES REGEX for ('show running-config', 'copy running-config tftp:', 'scp export configuration')
      IF destination is remote (TFTP, SCP, FTP):
        GENERATE high-severity alert
- question: Have any network device administrative sessions originated from rare or unauthorized locations, or shown a spike in configuration-viewing commands?
  context: This question adds context to administrative activity by analyzing its origin and frequency. By correlating the source IP of a syslog command with connection logs (e.g., Zeek), analysts can check if the session originates from an unusual ASN, country, or an IP outside of whitelisted management subnets. Additionally, baselining the frequency of configuration-viewing commands per administrator and alerting on spikes can help detect unusual information gathering, even from a legitimate account.
  answer_sources:
  - Zeek syslog.log
  - Zeek conn.log
  - Core network switches
  - Edge routers
  - Firewalls
  - VPN concentrators
  - Wireless LAN Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each admin_session in syslog:
        GET source_ip
        LOOKUP source_ip in conn.log to get ASN, geo-location
        ALERT if source_ip NOT IN management_subnets OR ASN is rare
      MONITOR frequency of config-view commands per admin
      ALERT on spikes compared to baseline
- question: Has a sequence analysis model detected an administrative session where a configuration was exported without preceding diagnostic activity?
  context: This question aims to differentiate between legitimate troubleshooting and malicious 'smash and grab' data theft on network devices. A sequence analysis model (like a Markov Chain) can learn the common command chains used by administrators during normal troubleshooting (e.g., `show interface` -> `show log` -> `debug`). It can then flag sessions that deviate from this pattern, such as a session where a `copy running-config` command is executed with few or no preceding diagnostic commands, which is highly suspicious behavior.
  answer_sources:
  - Zeek syslog.log
  - Zeek conn.log
  - Core network switches
  - Edge routers
  - Firewalls
  - VPN concentrators
  - Wireless LAN Controllers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL command sequences within admin sessions using a Markov Chain
      LEARN common legitimate sequences (e.g., diagnostic commands before changes)
      FOR each new session:
        ALERT if a config-export command appears without a preceding, high-probability diagnostic sequence