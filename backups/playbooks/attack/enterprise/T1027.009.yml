name: "T1027.009: Embedded Payloads"
id: "c4a1b8e2-8d7f-4c9a-9e6b-0d7f8c1a2b3d"
description: "This playbook is designed to help analysts detect adversaries who are evading defenses by embedding malicious payloads within other files. This technique, T1027.009, is a sub-technique of Obfuscated Files or Information. The playbook provides investigative questions to identify indicators such as: files with known malicious hashes or high-entropy sections indicating packing; PE files with anomalously large data overlays or an unusual number of sections; PowerShell scripts with high entropy, large Base64 blocks, and suspicious function calls; process injection events from non-system processes into legitimate ones; execution of files with mismatched non-executable extensions and MIME types; and the immediate execution of a newly created executable by a non-installer parent process."
type: "technique"
related: "TA0005: Defense Evasion"
contributors: "Zachary Szewczyk, Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "How can we symbolically detect embedded payloads by matching file hashes against threat intelligence and identifying known packer signatures in PE files?"
    context: "This question aims to identify known malicious files or packed executables. By comparing file hashes from network logs (Zeek) and endpoint process creation events (EID 4688) against a threat intelligence database, we can quickly spot known threats. Additionally, searching for specific section names in Portable Executable (PE) files, like 'UPX0' or '.aspack', can reveal the use of common packers that adversaries use to hide malicious code."
    answer_sources:
      - "Zeek files.log"
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "User Workstations"
      - "File Servers"
      - "Threat Intelligence Feed"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:files.log, WinEvent:4688 | EXTRACT file_hash | JOIN threat_intel_feed ON file_hash WHERE tag IN ('dropper', 'loader', 'packed')"
      - "SEARCH Zeek:pe.log | WHERE section_name MATCHES REGEX ('UPX[0-9]', 'FSG!', '.aspack')"
  - question: "How can we statistically identify embedded payloads by detecting abnormally high entropy in PE file sections?"
    context: "This question focuses on finding packed or encrypted data, which often has high entropy (randomness). By calculating the Shannon entropy for each section of a PE file and comparing it to a baseline of normal, legitimate software in the environment, we can flag outliers. An entropy value exceeding a statistical threshold (like the 99th percentile or 3 standard deviations from the mean) is a strong indicator of a potentially malicious embedded payload."
    answer_sources:
      - "Zeek files.log"
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "User Workstations"
      - "File Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:pe.log | FOREACH pe_section | CALCULATE shannon_entropy | WHERE entropy > (baseline_mean_entropy + 3 * baseline_stddev)"
  - question: "Can we use a machine learning classifier to predict the likelihood that a PE file contains an embedded payload based on its structural features?"
    context: "This question explores a more advanced, predictive approach. A machine learning model (like logistic regression) can be trained to recognize the complex patterns of malicious packed files. By feeding it features such as the number and names of sections, entropy values, and import table characteristics from observed PE files, the model can assign a probability score. Files with a high score are likely to contain embedded payloads and warrant investigation."
    answer_sources:
      - "Zeek files.log"
      - "Zeek pe.log"
      - "Windows Event ID 4688"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "User Workstations"
      - "File Servers"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:pe.log | EXTRACT_FEATURES (section_count, section_names, entropy, imphash, overlay_size) | PREDICT model=pe_payload_classifier | WHERE probability > 0.9"
  - question: "How can we symbolically detect PE files with unusually large data overlays?"
    context: "Adversaries may append malicious code to a legitimate file as a data overlay. This question aims to find these anomalies by setting a rule to detect PE files where the overlay size is either larger than a fixed threshold (e.g., 500KB) or exceeds the size of the legitimate PE structure itself. This is often correlated with executables that have very few imported functions, as they resolve them dynamically at runtime."
    answer_sources:
      - "Zeek pe.log"
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "Endpoint temporary directories"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:files.log, Zeek:pe.log | CALCULATE overlay_size = total_bytes - pe_size | WHERE overlay_size > 500KB OR overlay_size > pe_size | CORRELATE with low_import_function_count"
  - question: "How can we statistically identify PE files with an abnormal overlay size ratio or an excessive number of sections?"
    context: "This question uses statistical analysis to find outliers. By calculating the ratio of a PE file's overlay size to its total size and comparing it to a baseline of legitimate software, we can flag files where this ratio is abnormally high (e.g., in the 95th percentile). Similarly, tracking the number of sections per PE file and flagging those with a count significantly above the average (e.g., >2 standard deviations) can indicate file packing or manipulation."
    answer_sources:
      - "Zeek pe.log"
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "Endpoint temporary directories"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:pe.log | CALCULATE overlay_ratio = overlay_size / total_size | WHERE overlay_ratio > baseline_95th_percentile"
      - "SEARCH Zeek:pe.log | WHERE section_count > (baseline_mean_sections + 2 * baseline_stddev_sections)"
  - question: "Can an unsupervised machine learning model detect anomalous PE files based on their structural features?"
    context: "This question proposes using an unsupervised anomaly detection model, like an Isolation Forest, to identify malicious PE files without pre-existing labels. The model learns the characteristics of 'normal' PE files from a large dataset of network traffic, using features like section count, entropy, and overlay size. It can then identify and flag new files that are strong outliers from this learned norm, indicating potential threats."
    answer_sources:
      - "Zeek pe.log"
      - "Zeek files.log"
      - "Windows Event ID 11 (Sysmon)"
      - "Internet Gateway Firewalls"
      - "Web Proxies"
      - "Email Gateways"
      - "Endpoint temporary directories"
    range: "last 90 days"
    queries:
      - "SEARCH Zeek:pe.log | EXTRACT_FEATURES (section_count, avg_entropy, overlay_ratio, import_count) | PREDICT model=isolation_forest_pe_anomaly | WHERE is_outlier = true"
  - question: "How can we symbolically detect malicious PowerShell scripts containing encoded payloads and in-memory execution commands?"
    context: "This question targets a common PowerShell-based attack pattern. Using regular expressions on PowerShell script block logs (Event ID 4104), we can search for the co-occurrence of keywords associated with decoding and execution (e.g., 'FromBase64String', 'Invoke-Expression') alongside large blocks of Base64 encoded text. This combination is a strong indicator of an attempt to execute an embedded payload in memory."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4103"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Exchange Servers"
    range: "last 90 days"
    queries:
      - "SEARCH WinEvent:4104 | WHERE script_block MATCHES REGEX ('(FromBase64String|Invoke-Expression|IEX|Reflection.Assembly::Load).*[A-Za-z0-9+/=]{256,}')"
  - question: "How can we statistically identify obfuscated PowerShell scripts by analyzing their entropy and character distribution?"
    context: "This question aims to find obfuscated scripts by measuring their statistical properties. Malicious, obfuscated scripts often have higher Shannon entropy and a different character frequency than normal administrative scripts. By establishing a baseline for legitimate scripts, we can alert on any new script block (from Event ID 4104) that has an unusually high entropy score or a character distribution that significantly deviates from the norm."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4103"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Exchange Servers"
    range: "last 90 days"
    queries:
      - "SEARCH WinEvent:4104 | CALCULATE shannon_entropy, char_distribution | WHERE entropy > baseline_98th_percentile OR chi_squared_test(char_distribution, baseline_distribution) > threshold"
  - question: "Can a machine learning text classifier be used to automatically identify malicious PowerShell scripts in real-time?"
    context: "This question proposes an automated classification system for PowerShell scripts. A text classifier (like Naive Bayes or a neural network) can be trained on a labeled dataset of malicious and benign scripts. By analyzing features like keyword frequency, API calls, and entropy, the deployed model can classify incoming script blocks from Event ID 4104 in near real-time, alerting analysts to scripts that are predicted to be malicious with high confidence."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4103"
      - "User Workstations"
      - "Application Servers"
      - "Domain Controllers"
      - "Exchange Servers"
    range: "last 90 days"
    queries:
      - "STREAM WinEvent:4104 | EXTRACT_FEATURES (ngrams, api_calls, entropy, length) | PREDICT model=powershell_classifier | WHERE prediction = 'malicious' AND confidence > 0.9"
  - question: "How can we create a symbolic rule to detect suspicious process injection from common applications into system processes?"
    context: "This question focuses on detecting process injection, a key technique for executing embedded code. A detection rule can be created to trigger on Sysmon Event ID 8 (CreateRemoteThread) when the source process is a common productivity application (like an Office app or browser) and the target is a core system process (like svchost.exe). The suspicion is heightened if the code being injected is not backed by a known module on disk (StartModule is null)."
    answer_sources:
      - "Windows Event ID 8 (Sysmon)"
      - "Windows Event ID 10 (Sysmon)"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Servers"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon:8 | WHERE SourceImage IN ('WINWORD.EXE', 'CHROME.EXE') AND TargetImage IN ('svchost.exe', 'explorer.exe') AND StartModule IS NULL"
  - question: "How can we statistically identify rare and potentially malicious process injection events?"
    context: "While some process injection is normal, malicious injection often involves unusual source-target pairs. This question aims to find these anomalies by analyzing the frequency of all process injection pairs (SourceImage -> TargetImage) across the enterprise. By establishing a baseline of common, legitimate injections, we can flag any pairs that are statistically rare or have never been seen before, as these are more likely to be malicious."
    answer_sources:
      - "Windows Event ID 8 (Sysmon)"
      - "Windows Event ID 10 (Sysmon)"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Servers"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "SEARCH Sysmon:8 | GROUP by SourceImage, TargetImage | COUNT events | WHERE events < 5"
  - question: "Can we use a graph-based machine learning model to detect anomalous process injection patterns?"
    context: "This question proposes a sophisticated approach using graph analytics. We can model endpoint activity as a graph where processes are nodes and injection events are directed edges. By enriching this graph with metadata (user context, parent process) and training a model on benign activity, the system learns normal process interaction patterns. It can then flag new, anomalous edges (injections) that deviate from these learned structures, indicating a potential attack."
    answer_sources:
      - "Windows Event ID 8 (Sysmon)"
      - "Windows Event ID 10 (Sysmon)"
      - "Windows Event ID 4688"
      - "User Workstations"
      - "Critical Servers"
      - "Terminal Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - "STREAM Sysmon:8 | UPDATE process_interaction_graph | DETECT_ANOMALOUS_EDGES model=graph_anomaly_detector"
  - question: "How can we create a symbolic correlation rule to detect the execution of executables masquerading as non-executable files?"
    context: "This question targets the tactic of hiding an executable by giving it a benign file extension. A SIEM correlation rule can join network file transfer logs (Zeek) with endpoint process execution logs (Windows EID 4688). An alert is triggered when a file identified over the network as an executable (e.g., MIME type 'application/x-dosexec') but with a non-executable extension (e.g., .jpg, .txt) is executed on an endpoint shortly after being downloaded."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "User Workstations"
      - "Web Proxies"
      - "Email Gateways"
      - "Network Egress Points"
      - "File Servers"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Zeek:files.log | WHERE mime_type = 'application/x-dosexec' AND filename ENDSWITH ('.jpg', '.txt', '.pdf')) AND (SEARCH WinEvent:4688) ON file_hash, filename | WHERE time_delta < 5_minutes"
  - question: "How can we statistically identify the execution of processes with uncommon file extensions?"
    context: "This question aims to find unusual process executions by analyzing file extensions. By performing a frequency analysis on the extensions of all executed processes (from Event ID 4688), we can create a dynamic baseline of common executable extensions (e.g., .exe, .dll, .bat). An alert can then be generated whenever a process is created from a file with an extension that falls outside this common set, as it represents a statistical rarity and potential evasion attempt."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "User Workstations"
      - "Web Proxies"
      - "Email Gateways"
      - "Network Egress Points"
      - "File Servers"
    range: "last 90 days"
    queries:
      - "SEARCH WinEvent:4688 | EXTRACT file_extension | WHERE file_extension NOT IN (common_extensions_baseline)"
  - question: "Can a time-series machine learning model detect a coordinated attack involving the execution of non-standard file types?"
    context: "This question proposes using a time-series model (like ARIMA) to detect sudden changes in execution patterns. The model would be trained on the historical frequency of process executions, grouped by file extension. A sudden, anomalous spike in the execution of a typically non-executed file type (like .iso or .dat) across multiple hosts could indicate a coordinated campaign. The model would flag such a significant deviation from the established temporal baseline."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "User Workstations"
      - "Web Proxies"
      - "Email Gateways"
      - "Network Egress Points"
      - "File Servers"
    range: "last 90 days"
    queries:
      - "SEARCH WinEvent:4688 | TIME_SERIES_AGGREGATE count BY file_extension | PREDICT model=arima_extension_frequency | WHERE anomaly_score > threshold"
  - question: "How can we create a symbolic rule to detect 'drop and execute' behavior from non-installer processes?"
    context: "This question targets the common malware behavior of dropping a file and immediately running it. A correlation rule can link a file creation event (Sysmon EID 11) for an executable with a subsequent process creation event (Windows EID 4688) for the same file path within a very short window (e.g., < 1 minute). The rule's fidelity is increased by verifying that the same process created and then executed the file, and by excluding known, legitimate software installers from the parent process."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 11 (Sysmon)"
      - "User Workstations"
      - "Application Servers"
      - "Temporary File Directories (%TEMP%, %APPDATA%)"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Sysmon:11) AND (SEARCH WinEvent:4688) ON file_path WHERE event1.ProcessGuid = event2.ParentProcessGuid AND time_delta < 1_minute AND event2.ParentProcessName NOT IN (installer_allowlist)"
  - question: "How can we statistically identify automated 'drop and execute' behavior by analyzing time deltas?"
    context: "This question uses timing analysis to find suspicious activity. For all observed sequences where a process creates a file and then executes it, we can calculate the time delta between the two events. By establishing a baseline distribution of these deltas, we can flag sequences where the time delta is extremely short (e.g., in the lowest 5th percentile). This indicates automated, immediate execution, which is highly suspicious if the parent process is not a known installer or trusted system utility."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 11 (Sysmon)"
      - "User Workstations"
      - "Application Servers"
      - "Temporary File Directories (%TEMP%, %APPDATA%)"
    range: "last 90 days"
    queries:
      - "JOIN (SEARCH Sysmon:11) AND (SEARCH WinEvent:4688) ON file_path WHERE event1.ProcessGuid = event2.ParentProcessGuid | CALCULATE time_delta | WHERE time_delta < baseline_5th_percentile AND event2.ParentProcessName NOT IN (installer_allowlist)"
  - question: "Can a sequence mining model learn and detect anomalous post-download behavior?"
    context: "This question proposes using a sequence-aware machine learning model, like an LSTM autoencoder, to detect malicious activity following a file download. The model is trained to learn the normal sequences of endpoint events (file creations, process starts, network connections) that typically follow a download by a specific application (e.g., Outlook). It can then flag event sequences that deviate significantly from the learned 'normal' behavior, such as an unexpected 'drop and execute' pattern."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 11 (Sysmon)"
      - "User Workstations"
      - "Application Servers"
      - "Temporary File Directories (%TEMP%, %APPDATA%)"
    range: "last 90 days"
    queries:
      - "STREAM endpoint_events | GROUP_BY parent_application | CREATE event_sequences | PREDICT model=lstm_autoencoder_post_download | WHERE reconstruction_error > threshold"