name: T1518.001: Security Software Discovery
id: 6a8d7be4-9e33-4f51-872a-367f3341a46b
description: The adversary is attempting to identify security software, services, and configurations on the system. This is often done to evade defenses, disable security tools, or tailor subsequent payloads. This playbook helps detect this activity by looking for the execution of known malicious discovery tools, the use of native system utilities to query for security products, unusual enumeration of security-related file paths and registry hives, suspicious process parent-child relationships (e.g., an Office app spawning tasklist.exe), and sequences of discovery commands followed by network exfiltration.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Have any processes been created that match a known malicious hash associated with security software discovery tools?
  context: Adversaries often use pre-compiled, publicly available, or custom tools to perform security software discovery. These tools leave a distinct file hash signature. Comparing process creation events against a threat intelligence feed of known malicious hashes is a high-fidelity method for detecting the execution of these specific tools.
  answer_sources: Windows Event ID 4688, Threat Intelligence Feed. Applicable to User Workstations, Domain Controllers, Application Servers, Cloud Compute Instances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events (EventID 4688) | LOOKUP file_hash against known_malicious_hashes_for_T1518.001 | IF match THEN ALERT
- question: Are there any rare processes being executed with command-line arguments related to security software discovery?
  context: To evade hash-based detections, adversaries may use custom-compiled or slightly modified tools. This approach identifies suspicious processes by focusing on rarity. A process that has rarely or never been seen before in the environment (low hash prevalence) and that also includes command-line keywords for discovery (like 'antivirus' or 'firewall') is a strong indicator of malicious activity.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Domain Controllers, Application Servers, Cloud Compute Instances.
  range: last 30 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events (EventID 4688) | CALCULATE prevalence of file_hash over 30 days | FILTER prevalence < 1st_percentile AND command_line contains ('antivirus', 'firewall', 'defender') | ALERT
- question: Has a machine learning model classified any newly created processes as malicious discovery tools based on their execution characteristics?
  context: Advanced adversaries may use techniques that evade both hash and keyword-based detections. A machine learning model can identify subtle, complex patterns by analyzing multiple features of a process execution event, such as its parent process, user context, and command-line structure. Classifying a process as malicious, especially when it contains names of security products, provides a robust detection method against novel or obfuscated tools.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Domain Controllers, Application Servers, Cloud Compute Instances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process_creation_event (EventID 4688) | EXTRACT features (parent_process, command_line, user, hash_prevalence) | APPLY Random Forest model | IF classification == 'malicious' AND command_line contains (security_product_names) THEN ALERT
- question: Have any native system utilities been executed with command-line arguments known to query for security products?
  context: Adversaries frequently 'live off the land' by using built-in system tools like 'tasklist', 'wmic', and 'reg query' to discover security software. This avoids introducing new files to the system. This question looks for specific, known command-line patterns used to query for security product processes, services, or registry keys, which is a strong indicator of reconnaissance.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Privileged Access Workstations, Enterprise Servers, Cloud Compute Instances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events (EventID 4688) | FILTER command_line matches regex_for_security_discovery_commands (e.g., 'wmic .* antivirusproduct', 'reg query .* symantec') | ALERT
- question: Have 'cmd.exe' or 'powershell.exe' been executed with unusually complex or obfuscated command lines that also contain discovery keywords?
  context: To hide their commands from simple keyword searches, adversaries may use obfuscation, which often increases the complexity and randomness (entropy) of the command-line string. This question identifies command executions that are anomalously complex compared to a historical baseline for a user or host, and also contain discovery-related keywords. This combination points to potentially evasive reconnaissance activity.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Privileged Access Workstations, Enterprise Servers, Cloud Compute Instances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process_creation_event (EventID 4688) where process_name is ('cmd.exe', 'powershell.exe') | CALCULATE shannon_entropy of command_line | COMPARE to baseline | IF entropy > 95th_percentile AND command_line contains ('av', 'edr') THEN ALERT
- question: Has a natural language processing (NLP) model identified any command lines as having the intent of security software discovery?
  context: Sophisticated adversaries can craft novel command-line syntax that evades regular expressions and keyword matching. An NLP model trained on command-line semantics can understand the *intent* behind a command, even if it uses non-standard syntax or obfuscation. This allows for the detection of new or unknown variations of discovery techniques.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Privileged Access Workstations, Enterprise Servers, Cloud Compute Instances.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process_creation_event (EventID 4688) | APPLY NLP intent_classification_model to command_line | IF intent == 'Security Software Discovery' with high_confidence THEN ALERT
- question: Has a single process generated a high volume of file or registry access events in a short period, targeting common software installation locations?
  context: When an adversary doesn't know the exact location of security software, they may perform broad, rapid enumeration of common directories (like Program Files) or registry hives. This question sets a 'tripwire' to detect this brute-force scanning behavior by flagging any single process that generates an unusually high number of object access events in a very short time frame, which is not typical for benign applications.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688. Applicable to File Servers, Application Servers, Standard User Workstations, Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH object_access_events (EventID 4663) | GROUP by ProcessID, time_window(60s) | COUNT events | FILTER event_count > 500 AND ObjectName path contains ('C:\\Program Files\\', 'HKLM\\SOFTWARE\\') | ALERT
- question: Is there a process accessing files or registry keys at a rate that is statistically anomalous for that process and host?
  context: Benign processes typically have a predictable rate of file and registry access. An adversary's enumeration tool, however, will likely cause a significant, anomalous spike in these events. This question establishes a historical baseline of activity for each process on each host and alerts when a process deviates significantly from its normal behavior, indicating a potential enumeration attempt. The suspicion is increased if the accessed objects contain security-related keywords.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688. Applicable to File Servers, Application Servers, Standard User Workstations, Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each host | PROFILE rate of read_events (EventID 4663) per process_name | IF current_rate > (average_rate + 3 * stdev) AND ObjectName contains ('Agent', 'Security', 'EDR') THEN ALERT
- question: Has a time-series model detected an anomalous spike in file or registry enumeration activity on a host?
  context: Overall system activity has a certain rhythm or seasonality. A time-series anomaly detection model can learn this normal pattern for a host and forecast expected activity levels. This question uses such a model to identify significant, unexpected spikes in file and registry read events that deviate from the forecast. This method is effective at catching enumeration activity that might be missed by simple thresholding, as it understands the host's unique operational context.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688. Applicable to File Servers, Application Servers, Standard User Workstations, Domain Controllers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY time_series_anomaly_model (e.g., ESD) to stream of read_events (EventID 4663) per host | IF model detects anomalous spike in enumeration activity THEN ALERT
- question: Have any common discovery utilities been launched by a parent process that is not typically associated with administrative activity, such as an Office application or browser?
  context: System administration tools like 'tasklist.exe' or 'cmd.exe' are normally launched by an administrator directly or by other system processes. It is highly suspicious for them to be spawned by a user-facing application like Microsoft Word, Outlook, or a web browser. This often indicates that a malicious document, email, or webpage has exploited the application to gain initial execution and is now performing reconnaissance.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Terminal Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_events (EventID 4688) | FILTER ParentProcessName in ('WINWORD.EXE', 'EXCEL.EXE', 'chrome.exe', etc.) AND NewProcessName in ('tasklist.exe', 'wmic.exe', 'cmd.exe', etc.) | ALERT
- question: Have any discovery utilities been executed via a rare or never-before-seen parent-child process relationship?
  context: Over time, an enterprise develops a predictable set of common parent-child process relationships. Adversaries often create new, unusual execution chains as part of their attack. This question leverages this by profiling all parent-child pairs and flagging the execution of a discovery tool if its specific lineage is extremely rare (e.g., seen in less than 0.1% of all process creations). This is a powerful way to spot novel execution methods.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Terminal Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BUILD frequency table of all (ParentProcess, NewProcess) pairs from EventID 4688 | FOR new event where NewProcess is a discovery_utility | IF (ParentProcess, NewProcess) frequency < 0.1% THEN ALERT
- question: Has a graph-based model detected an anomalous process execution chain involving a discovery utility?
  context: Process execution can be modeled as a graph, where processes are nodes and parent-child relationships are edges. Benign activity forms common, recurring graph structures (subgraphs). This question uses a graph model to learn these common structures and alert when a new, structurally rare execution chain involving a discovery utility appears. This is effective against complex attack chains, such as 'OUTLOOK.EXE -> powershell.exe -> tasklist.exe', that might be missed by simple parent-child rules.
  answer_sources: Windows Event ID 4688. Applicable to User Workstations, Terminal Servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: MODEL process lineage (EventID 4688) as a graph | LEARN common subgraphs | IF new execution chain (e.g., 'OUTLOOK.EXE -> powershell.exe -> tasklist.exe') forms a structurally rare subgraph THEN ALERT
- question: Following on-host security discovery activity, did the same host connect to a known malicious IP address?
  context: Adversaries often perform discovery to understand the environment before exfiltrating data or fetching a next-stage payload. This question correlates on-host discovery activity with subsequent network connections. A connection to an IP address on a threat intelligence blocklist shortly after discovery is a very strong indicator that the host is compromised and communicating with a command-and-control (C2) server.
  answer_sources: Windows Event ID 4688, Zeek dns.log, Zeek conn.log. Applicable to Network Egress Points, DNS Servers, Host Network Interfaces, Cloud VPC Flow Logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: WHEN security_discovery_alert is triggered for a host | SEARCH for network_connections (Zeek conn.log) from same host_ip within 5 minutes | IF destination_ip is on threat_intel_blocklist THEN ALERT
- question: Following a cluster of discovery commands, did the host perform a DNS query for a suspicious domain (e.g., newly registered or DGA-like)?
  context: A burst of discovery commands indicates focused reconnaissance. Adversaries often use newly registered domains (NRDs) or domain generation algorithms (DGAs) for their C2 infrastructure to evade blocklists. This question links a cluster of on-host discovery activity with a subsequent suspicious DNS query, which could represent the compromised host 'calling home' for instructions or exfiltrating its findings.
  answer_sources: Windows Event ID 4688, Zeek dns.log, Zeek conn.log. Applicable to Network Egress Points, DNS Servers, Host Network Interfaces, Cloud VPC Flow Logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: IDENTIFY cluster of >3 discovery_commands (EventID 4688) on a host within 2 minutes | SEARCH for DNS_queries (Zeek dns.log) from same host within next 5 minutes | IF queried_domain is newly_registered OR has high_entropy_score THEN ALERT
- question: Has a sequence analysis model detected an anomalous sequence of on-host discovery events followed by unusual network behavior?
  context: Adversary behavior can be viewed as a sequence of events. This question uses a sophisticated sequence analysis model (like an LSTM) to learn the normal sequences of host and network events for each host. The model can then detect when an anomalous sequence occurs, such as on-host discovery commands followed by network behavior that deviates from the learned norm (e.g., a direct-to-IP connection on a non-standard port). This is powerful for detecting novel C2 communication patterns.
  answer_sources: Windows Event ID 4688, Zeek dns.log, Zeek conn.log. Applicable to Network Egress Points, DNS Servers, Host Network Interfaces, Cloud VPC Flow Logs.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: APPLY sequence_analysis_model (e.g., LSTM) to time-sorted host and network events per host | IF model flags sequence containing (discovery_events, subsequent_network_events) as anomalous THEN ALERT