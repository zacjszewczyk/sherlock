name: "T1498: Network Denial of Service"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook helps investigate whether an adversary is attempting to disrupt network availability through a Network Denial of Service (DoS) attack. It covers various DoS methods, including volumetric attacks from known malicious infrastructure (DDoS bots, stressers), application-layer attacks targeting HTTP/S services with slow connection patterns or malicious user-agents, and reflection/amplification attacks using UDP-based services like DNS and NTP. The playbook also addresses detecting DoS activity through statistical anomalies, such as sustained spikes in traffic volume or connection rates that significantly deviate from established baselines, and sudden shifts in traffic characteristics like a drop in source IP entropy or an increase in malformed TCP packets.
type: "technique"
related:
  - "TA0040: Impact"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are inbound connections originating from IP addresses known to be associated with DDoS, botnet, or stresser infrastructure?"
    context: |
      This question aims to identify and block traffic from high-confidence malicious sources. By continuously cross-referencing inbound connection source IPs against updated threat intelligence feeds, an organization can proactively detect and mitigate volumetric attacks from known threat actors before they significantly impact network availability. A match indicates a high probability of a coordinated DoS attempt.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "Threat Intelligence Feeds"
      - "Internet Gateway/Firewall"
      - "Edge Routers"
      - "Public-facing server segments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FOR each inbound connection, JOIN source_ip with threat_intel_reference_set WHERE category IN ('DDoS', 'botnet', 'stresser'). ALERT on match."
  - question: "For IPs identified on threat feeds, what is the volume and frequency of their connection attempts?"
    context: |
      After identifying a malicious IP, it's crucial to understand the scale of its activity to prioritize response. This question helps quantify the impact by calculating the total connection count and data volume from each flagged source over the last hour. Ranking these sources helps security teams focus their blocking efforts on the most aggressive attackers first.
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "Internet Gateway/Firewall"
      - "Edge Routers"
      - "Public-facing server segments"
    range: "last 1 hour"
    queries:
      - technology: "pseudocode"
        query: "FROM inbound_connections WHERE source_ip IN (matched_threat_ips), GROUP BY source_ip, CALCULATE SUM(bytes), COUNT(connections) over 1_hour_window. ORDER BY COUNT(connections) DESC. RETURN top 10."
  - question: "Can we use machine learning to predict in real-time if an inbound connection is part of a DoS attack?"
    context: |
      This question explores a proactive, predictive approach to DoS detection. By training a classification model on historical connection data (including features like duration, protocol, and whether the source is on a known threat list), the system can learn the patterns of malicious traffic. This allows for the assignment of a real-time risk score to new connections, enabling automated alerting or blocking when a connection's characteristics strongly resemble past DoS attacks, even from previously unseen sources.
    answer_sources:
      - "Zeek conn.log"
      - "Labeled historical connection data"
      - "DoS Threat List"
      - "Internet Gateway/Firewall"
      - "Edge Routers"
      - "Public-facing server segments"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "MODEL = TRAIN Random_Forest ON historical_conn_logs (features: duration, proto, service, bytes, is_on_threat_list). FOR each new_connection, SCORE = MODEL.predict(new_connection). IF SCORE > threshold, ALERT."
  - question: "Are inbound HTTP/S sessions using user-agent strings associated with known DoS attack tools?"
    context: |
      This question focuses on identifying application-layer DoS attacks by inspecting the User-Agent string in HTTP headers. Many common DoS tools (like Slowloris, LOIC, etc.) use default or recognizable user-agents. Detecting these strings provides a high-fidelity signal that an attacker is using a specific tool to target a web application, allowing for immediate blocking of the malicious session.
    answer_sources:
      - "Zeek http.log"
      - "Public-facing Web Servers"
      - "Application Load Balancers"
      - "API Gateways"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM http_logs, SCAN user_agent field FOR known_dos_tool_strings ('Slowloris', 'LOIC', etc.). ALERT on match."
  - question: "Are there any unusually long-lasting web connections with very low data transfer rates, indicative of a slow-rate attack?"
    context: |
      This question helps detect 'slow and low' application-layer DoS attacks, which aim to exhaust server resources by keeping connections open for a long time while sending minimal data. By calculating the transfer rate for web connections and comparing it against a baseline, we can identify sessions that are abnormally slow (e.g., lasting over 5 minutes with a transfer rate in the bottom 5th percentile). Such behavior is a strong indicator of an attack like Slowloris or R.U.D.Y.
    answer_sources:
      - "Zeek conn.log"
      - "Public-facing Web Servers"
      - "Application Load Balancers"
      - "API Gateways"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM web_connections (ports 80, 443), CALCULATE transfer_rate = (orig_bytes + resp_bytes) / duration. IF duration > 300 AND transfer_rate < baseline_5th_percentile, ALERT."
  - question: "Can we use unsupervised machine learning to detect anomalous HTTP/S sessions that may represent novel application-layer DoS attacks?"
    context: |
      This question addresses the challenge of detecting new or unknown DoS attack techniques. By using an unsupervised clustering algorithm like DBSCAN on connection features (duration, byte counts, etc.), we can model what 'normal' traffic looks like. Any connection that doesn't fit into a normal cluster (i.e., is an outlier) or forms a new, distinct cluster of anomalous activity can be flagged for investigation, providing a way to catch attacks that don't match predefined rules or signatures.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Public-facing Web Servers"
      - "Application Load Balancers"
      - "API Gateways"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "MODEL = TRAIN DBSCAN on http_session_features (duration, total_bytes, request_body_len, etc.). FOR each new_session, CLASSIFY as inlier or outlier. IF outlier, ALERT."
  - question: "Are external entities sending DNS queries of type 'ANY' or for large record types to our public DNS servers?"
    context: |
      This question targets a common method used in DNS amplification attacks. Attackers send small queries for large record types (like 'ANY', which requests all available records) to a public DNS server, spoofing the source IP to be their victim's. The server then sends a large response to the victim. Detecting these specific query types from external sources is a strong indicator that your DNS server is being abused as a reflector in a DoS attack.
    answer_sources:
      - "Zeek dns.log"
      - "Public DNS Servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM dns_logs WHERE source_ip is_external AND (query_type == 'ANY' OR query_record_type IN ('DNSKEY', 'RRSIG')), ALERT."
  - question: "Are any UDP sessions on services like DNS, NTP, or CLDAP exhibiting an unusually high amplification factor?"
    context: |
      This question provides a quantitative method for detecting amplification attacks. The amplification factor (response size divided by request size) measures how much a service magnifies traffic. A normal factor is small, but in an attack, it can be very large. By calculating this factor for UDP services and alerting when it exceeds a high-percentile baseline (e.g., 99th percentile), we can identify when our servers are being used to amplify traffic as part of a DoS attack against a third party.
    answer_sources:
      - "Zeek conn.log"
      - "Public DNS Servers"
      - "NTP Servers"
      - "Misconfigured Memcached servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM udp_sessions WHERE dest_port IN (53, 123, 389, 11211), CALCULATE amp_factor = resp_bytes / orig_bytes. IF amp_factor > baseline_99th_percentile, ALERT."
  - question: "Can an anomaly detection model identify UDP sessions that are likely part of a reflection/amplification attack?"
    context: |
      This question leverages machine learning to find anomalous UDP sessions without relying on fixed thresholds. An Isolation Forest model can analyze multiple features simultaneously (port, amplification factor, packet count, duration) to identify sessions that are 'isolated' or different from the norm. This approach is effective at detecting sophisticated or novel amplification attacks that might evade simpler rule-based detection methods.
    answer_sources:
      - "Zeek conn.log"
      - "Public DNS Servers"
      - "NTP Servers"
      - "Misconfigured Memcached servers"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "MODEL = TRAIN Isolation_Forest ON udp_session_features (dest_port, amp_factor, packet_count, duration). FOR each new_session, SCORE = MODEL.predict(new_session). IF SCORE indicates anomaly, ALERT."
  - question: "Has inbound traffic or connection activity breached predefined static 'circuit breaker' thresholds on critical assets?"
    context: |
      This question provides a simple but effective safety net for catastrophic traffic floods. By setting absolute, high-watermark thresholds for metrics like connections per second or total bandwidth on critical servers and network choke points, we can ensure a rapid, critical alert is generated during an overwhelming volumetric attack. These 'circuit breakers' are a last line of defense when more nuanced detection methods are bypassed or overwhelmed.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dstats.log"
      - "Windows Event ID 5157"
      - "Network Choke Points (e.g., firewalls, core switches)"
      - "Critical Application Servers"
      - "Entire Subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM traffic_metrics ON critical_assets, IF connections_per_sec > 10000 OR inbound_bps > 1e9 OR wfp_blocks_per_min > 5000, GENERATE CRITICAL ALERT."
  - question: "Is the current traffic volume or new connection rate significantly deviating from its normal, time-aware baseline?"
    context: |
      This question aims to detect DoS attacks by identifying statistical anomalies in traffic patterns. Network traffic naturally fluctuates based on the time of day and day of the week. By creating rolling baselines that account for this seasonality, we can detect when current traffic levels (e.g., bytes, packets, or connection rates in a 5-minute window) are abnormally high (e.g., more than 3 standard deviations above the expected mean). This method is effective for catching volumetric attacks that cause a sudden, sustained spike in activity.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dstats.log"
      - "Network Choke Points (e.g., firewalls, core switches)"
      - "Critical Application Servers"
      - "Entire Subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "CALCULATE rolling_baseline (mean, std_dev) for traffic_metrics over 5_min_windows, accounting for seasonality. IF current_metric > (mean + 3 * std_dev), ALERT."
  - question: "Is the observed traffic volume significantly exceeding the volume predicted by a time-series forecasting model?"
    context: |
      This question represents a more advanced form of baseline anomaly detection. A time-series forecasting model (like ARIMA or Prophet) can learn complex historical patterns and predict the expected range of traffic volume for the immediate future. By continuously comparing the actual traffic against this forecast, we can detect deviations that signal a potential DoS attack. An alert is triggered when observed traffic persistently exceeds the predicted upper confidence bound, indicating a statistically significant and unexpected surge.
    answer_sources:
      - "Zeek dstats.log"
      - "aggregated conn.log data"
      - "Network Choke Points (e.g., firewalls, core switches)"
      - "Critical Application Servers"
      - "Entire Subnets"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "MODEL = TRAIN Prophet ON historical_traffic_volume. PREDICT next_5_min_volume with confidence_interval. IF actual_volume > predicted_upper_bound, ALERT."
  - question: "Are we observing TCP packets with unusual or illegitimate flag combinations?"
    context: |
      This question focuses on detecting certain types of network scans or DoS attacks that use malformed TCP packets. TCP flag combinations like 'ShAD' (SYN, ACK, FIN) or packets with no flags set are not part of standard TCP communication and are highly indicative of malicious activity or reconnaissance. Monitoring for these specific, irregular patterns in the TCP connection history can provide early warnings of an impending or ongoing attack.
    answer_sources:
      - "Zeek conn.log"
      - "Internet Gateway/Firewall"
      - "Load Balancers"
      - "Any network segment receiving external traffic"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "FROM conn_logs, PARSE tcp_history_field. IF flag_combination is_invalid (e.g., 'ShAD', no flags), ALERT."
  - question: "Has the diversity (entropy) of source IP addresses for inbound traffic dropped significantly below its normal baseline?"
    context: |
      This question helps detect DoS attacks that originate from a small number of sources or botnets with synchronized behavior. Normal internet traffic comes from a wide, diverse range of IP addresses, resulting in high entropy. During certain DoS attacks, traffic is dominated by a few sources, causing a measurable drop in source IP entropy. By monitoring this value in 5-minute windows and comparing it to a seasonal baseline, an alert can be generated when a statistically significant drop occurs, indicating a potential concentration of malicious traffic.
    answer_sources:
      - "Zeek conn.log"
      - "Internet Gateway/Firewall"
      - "Load Balancers"
      - "Any network segment receiving external traffic"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "CALCULATE shannon_entropy of source_ips in 5_min_windows. ESTABLISH seasonal_baseline (mean, std_dev). IF current_entropy < (mean - 3 * std_dev), ALERT."
  - question: "Can we use dimensionality reduction techniques to detect anomalous shifts in the overall state of network traffic?"
    context: |
      This question proposes a holistic method for detecting subtle changes in network behavior that might indicate a DoS attack. By creating a 'fingerprint' of network traffic using a vector of metrics (protocol ratios, packet sizes, IP entropy, etc.) and then using PCA to reduce its complexity, we can model the 'normal' state of the network. The Mahalanobis distance measures how far a new traffic state is from this normal center. A sudden increase in this distance indicates a significant shift in traffic characteristics, which can be an early sign of a coordinated DoS attack.
    answer_sources:
      - "Zeek conn.log"
      - "Internet Gateway/Firewall"
      - "Load Balancers"
      - "Any network segment receiving external traffic"
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: "AGGREGATE traffic_metrics into vectors per 5_min_window. MODEL = TRAIN PCA on historical_vectors. FOR each new_vector, CALCULATE Mahalanobis_distance from centroid. IF distance > threshold, ALERT."