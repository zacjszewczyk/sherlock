name: 'T1407: Download New Code at Runtime'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: This playbook addresses the threat of adversaries bypassing mobile application security by downloading and executing new code at runtime. It provides investigative steps to detect this activity by analyzing network traffic for suspicious file downloads (e.g., JAR, DEX, shared libraries) from mobile devices to untrusted destinations, monitoring Android devices for API calls related to dynamic code loading (like DexClassLoader), and observing iOS devices for connections to malicious JSPatch servers or the use of similar dynamic code loading frameworks.
type: technique
related:
  - 'TA0030: Defense Evasion'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: How can I detect if a mobile device is downloading potentially malicious executable code from a newly registered or known-bad domain?
    context: |
      This question helps identify direct payload delivery. Adversaries often use newly created domains or known malicious infrastructure to host their code. By correlating network file transfers of executable types (like JARs, DEX files, or shared libraries) with threat intelligence or domain age analysis, analysts can create high-fidelity alerts for suspicious downloads to mobile devices. This action focuses on creating a SIEM rule to automate this detection by joining network connection logs with file transfer logs and enriching the data with threat intelligence and WHOIS information.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek ssl.log
      - Zeek x509.log
      - Zeek dns.log
      - Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          JOIN conn.log, files.log ON session_uid
          WHERE source_ip IN mobile_device_ip_range
          AND file_mime_type IN ('application/java-archive', 'application/x-dex', 'application/x-sharedlib', 'application/octet-stream')
          ENRICH destination_server_name from ssl.log
          ENRICH domain_age from dns.log via WHOIS lookup
          ALERT if (destination_server_name MATCHES threat_intel_feed) OR (domain_age < 30_days)
  - question: Can I identify obfuscated command-and-control channels used for dynamic code downloads by analyzing TLS and HTTP metadata?
    context: |
      This question targets sophisticated adversaries who use techniques like Domain Generation Algorithms (DGA) or URI obfuscation to hide their C2 infrastructure. By analyzing statistical properties of network traffic, such as the rarity of a TLS client fingerprint (JA3/JA3S hash) or the randomness (Shannon entropy) of a URI, analysts can uncover anomalies that signature-based methods might miss. This is particularly effective for detecting custom malware that doesn't use standard libraries for its network communication.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek ssl.log
      - Zeek x509.log
      - Zeek dns.log
      - Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE frequency of all JA3/JA3S hashes in ssl.log over last 30 days
          IDENTIFY bottom 5th percentile hashes
          CALCULATE Shannon entropy for URI path and query in http.log
          ALERT if (session_JA3_hash IN bottom_5_percentile) AND (URI_entropy > 4.5)
          PRIORITIZE if correlated with file download event
  - question: How can a machine learning model be used to proactively identify network sessions involving malicious dynamic code downloads?
    context: |
      This question explores a proactive, machine learning-based approach to detection. Instead of relying on fixed rules, a classifier (like a Random Forest) can learn the complex patterns that distinguish malicious downloads from benign ones. By training the model on a rich set of features—including network metadata, reputation scores, file characteristics, and certificate details—it can score new network sessions in real-time and generate high-confidence alerts, adapting to new and evolving threats more effectively than static rules.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek files.log
      - Zeek ssl.log
      - Zeek x509.log
      - Zeek dns.log
      - Corporate Wi-Fi network segments, VPN concentrators, and cloud-based secure web gateways used by mobile devices.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FEATURE_SET = [domain_age, threat_intel_match, reputation_score, JA3_frequency, URI_entropy, file_mime_type, file_size, cert_validity, cert_issuer]
          TRAIN Random Forest model on labeled historical data (benign vs. malicious)
          FOR each new network session:
            EXTRACT feature set
            PREDICT probability = model.predict(session_features)
            ALERT if probability > 0.85
  - question: How can I automatically detect and respond when an unapproved Android application attempts to load dynamic code?
    context: |
      This question focuses on a direct, host-based detection and response mechanism. Mobile Threat Defense (MTD) solutions can monitor for specific, high-risk API calls on the device itself. By creating a SIEM rule that triggers on logs for 'DexClassLoader', 'System.load', or 'addJavascriptInterface', security teams can get immediate, high-fidelity alerts. Automating the response—by cross-referencing the app against an allowlist and quarantining the device if it's unapproved—dramatically reduces the time to containment for this threat.
    answer_sources:
      - Mobile Threat Defense (MTD) API monitoring logs
      - Mobile Device Management (MDM) Application Inventory Logs
      - Managed Android mobile devices enrolled in MDM/MTD solutions.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          ON MTD log receipt:
            IF API_call IN ('dalvik.system.DexClassLoader', 'java.lang.System.load', 'addJavascriptInterface'):
              ENRICH with app_info from MDM using package_name
              IF app NOT IN allowlist:
                ALERT with high severity
                EXECUTE playbook to quarantine device via MDM/MTD API
  - question: Can I detect malicious dynamic code loading by identifying anomalous API call frequencies on Android devices?
    context: |
      This question addresses the scenario where a legitimate, allowlisted application is compromised or begins behaving maliciously. By establishing a historical baseline of normal API call behavior for each user-app pair, analysts can detect significant deviations. This behavioral approach can catch 'first use' events (an app suddenly using a dynamic loading API for the first time ever) or frequency spikes (an app using it far more than usual), both of which are strong indicators of a potential compromise or a malicious update.
    answer_sources:
      - Mobile Threat Defense (MTD) API monitoring logs
      - Mobile Device Management (MDM) Application Inventory Logs
      - Managed Android mobile devices enrolled in MDM/MTD solutions.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each user_app_pair:
            CALCULATE 30-day rolling baseline (mean, std_dev, 99th_percentile) of dynamic_code_API_calls
          FOR each new API call event:
            IF event is 'first use' for this API across the fleet:
              ALERT with medium severity
            ELSE IF 24hr_call_count > (mean + 3*std_dev) OR > 99th_percentile:
              ALERT with medium severity
  - question: How can an unsupervised machine learning model identify novel or sophisticated attempts at dynamic code execution on Android?
    context: |
      This question proposes using anomaly detection models (like Isolation Forest or LOF) to find unknown threats. Unlike supervised models that need labeled data, these models learn what 'normal' application behavior looks like from a set of known-good apps. They can then identify outliers based on features like API call sequences (n-grams), timing between calls, and requested permissions. This is powerful for detecting zero-day exploits or custom malware that uses novel techniques to load code dynamically, as it flags any behavior that deviates from the established norm.
    answer_sources:
      - Mobile Threat Defense (MTD) API monitoring logs
      - Mobile Device Management (MDM) Application Inventory Logs
      - Managed Android mobile devices enrolled in MDM/MTD solutions.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FEATURE_SET = [API_call_ngrams, time_between_calls, requested_permissions, network_volume]
          TRAIN Isolation Forest model on telemetry from known-good applications
          FOR each running application's telemetry stream:
            EXTRACT feature set
            SCORE behavior using trained model
            ALERT if behavior is classified as an anomaly
            PRIORITIZE alerts involving dynamic code loading APIs
  - question: How can I detect if an iOS device is compromised via a known malicious JSPatch framework?
    context: |
      JSPatch is a common framework used to inject and execute JavaScript code dynamically on iOS, bypassing App Store review processes. This question focuses on detecting its malicious use through two primary methods: network-based detection and host-based detection. By correlating network traffic from iOS devices against a threat intelligence feed of known malicious JSPatch domains and IPs, or by using an MTD agent to directly identify JSPatch function calls, analysts can create high-severity alerts and quickly identify compromised devices.
    answer_sources:
      - Mobile Threat Defense (MTD) logs
      - Zeek dns.log
      - Zeek conn.log
      - MDM Application Inventory Logs
      - Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          ALERT if (DNS_query OR network_connection from iOS_device_range) MATCHES mobile_threat_intel_feed
          ALERT if MTD_log identifies JSPatch function use in a non-allowlisted app
          ENRICH all alerts with device owner and app inventory from MDM
  - question: Can statistical analysis of DNS queries from iOS devices reveal potential payload delivery from suspicious domains?
    context: |
      This question aims to uncover suspicious payload delivery on iOS by analyzing DNS traffic for indicators of obfuscation or abnormality. Adversaries may use algorithmically generated or otherwise strange-looking domains to host payloads. By calculating the Shannon entropy of newly observed domain names and flagging the use of rare Top-Level Domains (TLDs) like .zip or .mov, analysts can identify suspicious DNS activity. Correlating this with a subsequent large file download from that domain provides a strong signal of a potential dynamic code download event.
    answer_sources:
      - Mobile Threat Defense (MTD) logs
      - Zeek dns.log
      - Zeek conn.log
      - MDM Application Inventory Logs
      - Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each new DNS query from a non-browser app on iOS:
            IF domain not seen in last 30 days:
              CALCULATE domain_entropy
              CHECK if TLD is on rare_tld_list
              IF (domain_entropy > 4.0) OR (TLD is rare):
                MONITOR for subsequent download > 1MB from this domain
                IF download occurs:
                  ALERT with medium priority
  - question: Can time-series forecasting of network connections from critical iOS apps detect anomalous data exfiltration or C2 activity?
    context: |
      This question proposes a sophisticated method for detecting anomalies in the network behavior of specific, critical iOS applications. By building a time-series model (like SARIMA) for each app, we can predict its normal volume of outbound connections, accounting for regular patterns like time of day or day of week. An alert is generated when the actual connection volume significantly and persistently exceeds the predicted range. This can indicate that the application has been compromised and is being used for unexpected C2 communication or data staging, which might precede or accompany a dynamic code download.
    answer_sources:
      - Mobile Threat Defense (MTD) logs
      - Zeek dns.log
      - Zeek conn.log
      - MDM Application Inventory Logs
      - Managed iOS mobile devices enrolled in MDM/MTD solutions and their associated network traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each critical iOS app:
            TRAIN time-series model (e.g., SARIMA) on historical hourly connection counts (from conn.log)
          FOR each app:
            GET current hourly connection count
            PREDICT expected connection range (with confidence interval) using model
            IF actual_count > upper_confidence_bound for > 10 minutes:
              ALERT with medium severity