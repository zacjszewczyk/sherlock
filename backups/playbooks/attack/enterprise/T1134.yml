name: T1134: Access Token Manipulation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has escalated privileges or evaded defenses using access token manipulation (T1134). This involves identifying the use of known token manipulation tools (e.g., JuicyPotato), detecting anomalous process behavior such as critical system services spawning unusual child processes (e.g., services.exe spawning cmd.exe), or spotting rare parent-child process relationships. It also covers correlating non-privileged user processes with subsequent SYSTEM-level logons, detecting suspicious loopback network logons (e.g., Logon Type 3 to SYSTEM from 127.0.0.1), and identifying defense evasion techniques like Parent Process ID (PPID) spoofing, the use of `psexec.exe -s` or `runas.exe /netonly`, and system processes making unusual outbound network connections.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are known token manipulation tools (e.g., JuicyPotato, RottenPotato) being executed in the environment?
  context: This question aims to identify the direct execution of publicly known and commodity tools used for access token manipulation. Detecting these tools by name or unique command-line arguments is a high-confidence indicator of a privilege escalation attempt. Adversaries often use these readily available exploits to elevate their privileges from a low-level account to a higher one, such as SYSTEM.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Application Servers, User Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE (process.name IN ('JuicyPotato.exe', 'RottenPotato.exe', 'PrintSpoofer.exe', 'GodPotato.exe') OR process.command_line CONTAINS ('-t * -l'))
- question: Are there processes with statistically rare command-line arguments being spawned by privileged parent processes?
  context: This question seeks to uncover novel or obfuscated token manipulation tools by focusing on anomalous command-line arguments. Instead of relying on known signatures, this approach uses statistical analysis to find outliers. A process with very unusual arguments spawned by a high-privilege parent like 'services.exe' is a strong indicator of an exploit that doesn't match known patterns.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Application Servers, User Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create | GROUP BY process.command_line | CALCULATE frequency | FILTER frequency < 1st_percentile AND parent_process.privilege_level == 'High' | ALERT
- question: Can machine learning models identify process creation events indicative of token-stealing exploits?
  context: This question leverages a supervised machine learning model to detect subtle patterns of malicious behavior that are difficult to capture with simple rules. By training on features like process name, parent process, command-line entropy, and length, the model can learn to distinguish between benign and malicious process creations, identifying novel token manipulation techniques.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Application Servers, User Workstations, Windows Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT MaliciousProcess (process.name, parent_process.name, command_line.length, command_line.entropy) FROM Process:Create | FILTER prediction == 'malicious'
- question: Have any sensitive system services (like services.exe or lsass.exe) spawned an unapproved or unexpected child process?
  context: Critical system processes have predictable behavior and should only spawn a limited, known set of child processes. An adversary who has compromised a service or injected code into it might use that service's token to spawn a shell (like cmd.exe) or another malicious tool with SYSTEM privileges. This question helps detect such anomalies by comparing observed parent-child process relationships against a pre-defined allow-list.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE parent_process.name IN ('services.exe', 'lsass.exe', 'spoolsv.exe') AND process.name NOT IN (allow_list_for_parent)
- question: Are there any new or statistically improbable parent-child process relationships appearing in the environment?
  context: This question aims to detect novel attack techniques by baselining all normal parent-child process relationships over time. When a new process is spawned by a parent that has never spawned it before (or does so very rarely), it represents a statistical anomaly. This could indicate an adversary is using a compromised process to launch a tool or shell in a way not seen before in the environment.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create | CALCULATE probability(process.name | parent_process.name) | FILTER probability < 0.01 | ALERT
- question: Can unsupervised machine learning identify anomalous clusters of process creation activity?
  context: This question uses clustering algorithms to group all process creation events based on their features. The majority of events will form large clusters representing normal activity. Small, isolated clusters are anomalous and may represent malicious activity, such as a compromised service spawning a shell, which would have different characteristics (user context, process name) than typical behavior.
  answer_sources:
  - Windows Event ID 4688
  - Domain Controllers, Critical Infrastructure Servers, Privileged Access Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CLUSTER on (parent_process.name, process.name, user.name) FROM Process:Create | IDENTIFY outlier_clusters | ALERT
- question: Has a process started by a non-privileged user led to a local SYSTEM account logon?
  context: This question looks for a classic pattern of a 'Potato' family exploit. The exploit involves a user-level process tricking a privileged service into authenticating to an endpoint controlled by the attacker. This results in a service logon (Logon Type 5) for the SYSTEM account, but the logon event can be traced back to the process started by the regular user. Correlating these two events in a short time window is a strong indicator of privilege escalation.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Authentication Servers, Application Servers, User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (SEARCH Event:4688 WHERE user.privilege != 'High') AND (SEARCH Event:4624 WHERE logon_type == 5 AND user.name == 'SYSTEM') ON process.id WHERE time_diff < 5_seconds
- question: Are there any anomalous token elevations for processes in the environment?
  context: Windows tracks whether a process is running with an elevated token. While some elevations are normal (e.g., via UAC prompt/consent.exe), an unexpected elevation to a full token from a limited-token parent process can indicate token manipulation. This question seeks to baseline normal elevation behavior and flag statistical outliers that may represent a successful exploit.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Authentication Servers, Application Servers, User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE token_elevation_type == 'Type 1' AND parent_process.token_is_limited == true | CALCULATE frequency by user, host | ALERT on outliers
- question: Is there an anomalous spike in SYSTEM-level service logons on any host?
  context: A successful token manipulation exploit often results in a service logon (Logon Type 5) for the SYSTEM account. While these events can occur during normal operations, a sudden, sharp increase in their frequency on a single host is abnormal. This question uses time-series analysis to detect such spikes, which could indicate an attacker repeatedly using an exploit.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4624
  - Authentication Servers, Application Servers, User Workstations
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event:4624 WHERE logon_type == 5 AND user.name == 'SYSTEM' | TIMESERIES count by host | DETECT spikes
- question: Has a SYSTEM account logon occurred from a local, non-system process?
  context: This question hunts for a specific pattern associated with 'Potato' exploits where an adversary tricks a service into authenticating over the network to the local machine (127.0.0.1). This generates a network logon (Logon Type 3) for the high-privilege SYSTEM account, but the source process is a non-standard, user-level program rather than a legitimate system authenticator. This is a high-fidelity indicator of token manipulation.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event:4624 WHERE logon_type == 3 AND source.ip IN ('127.0.0.1', '::1') AND user.name == 'SYSTEM' AND process.name NOT IN (allow_list)
- question: Are there any users or processes generating an unusual number of localhost network logons?
  context: While some legitimate applications may use localhost network logons, this behavior is not typically widespread. This question establishes a baseline for this activity per user and process. A sudden increase or a user/process exhibiting this behavior far more than its peers is a statistical anomaly that could indicate repeated attempts at a 'Potato' style exploit.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event:4624 WHERE logon_type == 3 AND source.ip IN ('127.0.0.1', '::1') | CALCULATE frequency by user, process | ALERT on outliers
- question: Can a machine learning model be used to detect 'Potato' family attacks from logon events?
  context: This question uses a classifier to automatically identify the specific combination of features in a logon event that indicates a 'Potato' attack. By training a model on logon type, source IP, target username, and source process name, it can provide a high-confidence alert when this distinct pattern appears, serving as an automated detection mechanism.
  answer_sources:
  - Windows Event ID 4624
  - Windows Event ID 4688
  - Domain Controllers, Member Servers, User Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: PREDICT PotatoAttack (logon_type, source.ip, user.name, process.name) FROM Event:4624 | FILTER prediction == 'true'
- question: Is PsExec being used to run processes with SYSTEM privileges?
  context: PsExec is a legitimate administration tool, but adversaries frequently abuse it for lateral movement and privilege escalation. The `-s` flag specifically instructs PsExec to run the remote process in the SYSTEM account context. Detecting the use of `psexec.exe` (or its variants like `paexec.exe`) with the `-s` flag is a high-severity indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, IT Administrator Systems, Jump Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process.name IN ('psexec.exe', 'paexec.exe') AND process.command_line CONTAINS '-s'
- question: Is PsExec usage occurring that is anomalous for a given user or host?
  context: Even if PsExec is used legitimately, its usage patterns are often predictable. This question aims to identify anomalous usage by risk-scoring events based on the user's role (e.g., non-admin using PsExec), the rarity of the source-destination host pair, and the time of day. High-risk scores can surface malicious use of PsExec even when the `-s` flag isn't present.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, IT Administrator Systems, Jump Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE process.name IN ('psexec.exe', 'paexec.exe') | CALCULATE risk_score(user.role, source_dest_pair_rarity) | ALERT on high score
- question: Can a sequence of events be identified that corresponds to a malicious PsExec attack chain?
  context: A PsExec-based attack is not a single event, but a sequence: the tool is written to disk, executed with specific flags, and then spawns a child process on the remote host. This question uses a sequence analysis model to learn this entire chain of events. Detecting the full sequence provides a much higher-confidence alert than looking at any single event in isolation.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, IT Administrator Systems, Jump Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ANALYZE sequence(File:Create, Process:Create, Remote:Process:Create) | MATCH pattern('psexec.exe', '-s', 'whoami.exe') | ALERT
- question: Is `runas.exe /netonly` being used to facilitate lateral movement with alternate credentials?
  context: The `/netonly` switch for `runas.exe` allows a process to be launched using certain credentials for remote network access only, while local actions use the original user's token. Adversaries abuse this to use stolen credentials for lateral movement (e.g., accessing SMB shares or using WinRM) without needing to fully impersonate the user locally. This question detects this behavior by correlating the use of `runas /netonly` with subsequent outbound network connections to new destinations.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations, Network Egress/Ingress Points, Authentication Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: JOIN (SEARCH Event:4688 WHERE process.name == 'runas.exe' AND process.command_line CONTAINS '/netonly') AND (SEARCH Network:Connection WHERE protocol IN ('smb', 'winrm')) ON host.name WHERE time_diff < 2_minutes AND destination.ip IS_NEW
- question: Is a user employing `runas /netonly` to connect to destinations they don't normally access?
  context: Legitimate administrators may use `runas /netonly` as part of their workflow, but they typically connect to a predictable set of servers. This question establishes a baseline of normal destinations for each user. When a user connects to a system that is highly dissimilar from their historical set of destinations, it is a strong anomaly signal that could indicate credential abuse and lateral movement.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations, Network Egress/Ingress Points, Authentication Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR_EACH user | BASELINE runas_destinations | SEARCH Event:4688 WHERE process.name == 'runas.exe' AND command_line CONTAINS '/netonly' | COMPARE current_destination to baseline | ALERT on low similarity
- question: Can graph analysis detect anomalous lateral movement patterns involving `runas`?
  context: This question models user, process, and host activity as a graph. The specific sequence of a user running `runas /netonly` on one host, which then connects to another remote host, forms a distinct subgraph pattern. By analyzing these graphs, the model can identify patterns that are rare or structurally different from the norm, indicating potentially malicious lateral movement.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - User Workstations, Network Egress/Ingress Points, Authentication Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BUILD_GRAPH from (User, Process, Host) | SEARCH for subgraph_pattern(user -> runas -> host -> remote_host) | IDENTIFY rare_patterns
- question: Are critical system processes making outbound network connections?
  context: Certain core Windows processes, such as `lsass.exe` or `winlogon.exe`, should never initiate outbound network connections. An attacker who has injected code into one of these processes might use its context to establish a command-and-control channel. This question creates a high-priority alert for this specific, high-confidence indicator of compromise.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Network:Connection WHERE source_process.name IN ('lsass.exe', 'winlogon.exe', 'csrss.exe') AND connection.direction == 'outbound'
- question: Are system processes like `svchost.exe` exhibiting anomalous network behavior?
  context: While some system processes like `svchost.exe` are expected to make network connections, their behavior is often predictable (e.g., connecting to Windows Update servers). This question establishes a detailed statistical baseline of normal network activity for these processes, including typical destination IPs, ports, and data volumes. It then flags significant deviations from this baseline, which could indicate a compromised process being used for C2 or data exfiltration.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Network:Connection WHERE source_process.name == 'svchost.exe' | ALERT if destination.ip_rarity < 1st_percentile OR data_volume > 99th_percentile
- question: Is there an unexplainable spike in network traffic from a key system or security process?
  context: This question uses time-series analysis to monitor the network traffic volume for individual system processes. By decomposing the time series into its normal trend and seasonal components, it can isolate the residual (unexplained) noise. A sudden spike in this residual component indicates a burst of activity that is not part of the process's normal behavior, potentially signaling malicious use.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 4688
  - Network Egress Points (Firewall, Proxy), Domain Controllers, Endpoint Security Agents
  range: last 90 days
  queries:
  - technology: pseudocode
    query: TIMESERIES_DECOMPOSE network_traffic FOR process.name == 'svchost.exe' | MONITOR residual_component | ALERT on spike > 3_std_dev
- question: Is a single host attempting to log into many different systems using a large number of unique accounts?
  context: This question looks for a brute-force or "pass-the-token" style of lateral movement. An adversary who has stolen multiple access tokens or credentials may use them in rapid succession from a single compromised host to try and access many other systems. A hard threshold on the number of unique accounts used in network logons from one source IP can effectively detect this "fan-out" behavior.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event:4624 WHERE logon_type == 3 | COUNT unique(user.name) by source.ip over 1_hour | ALERT if count > 10
- question: Is a source host exhibiting high entropy in the usernames it is using for network logons?
  context: This question provides a more dynamic approach than a hard threshold for detecting lateral movement. By calculating the Shannon entropy of the set of usernames used by a source host, it measures the randomness or unpredictability of the accounts. A high entropy value indicates the host is using many different, unrelated accounts, which is abnormal and may indicate an attacker cycling through a list of stolen tokens or credentials.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Event:4624 WHERE logon_type == 3 | CALCULATE shannon_entropy(user.name) by source.ip over 30_min | ALERT on entropy > baseline
- question: Is any host's lateral movement activity significantly different from that of its peers?
  context: This question uses peer group analysis to find outliers. It groups hosts by their role (e.g., all marketing workstations) and learns the typical "fan-out" behavior (number of remote logons) for that group. A host that suddenly starts connecting to far more unique systems or accounts than its peers is a strong anomaly, even if the absolute number is low. This helps detect the initial stages of lateral movement.
  answer_sources:
  - Windows Event ID 4624
  - Domain Controllers, Centralized Log Aggregator (SIEM), Member Servers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: GROUP hosts by ad_role | MODEL typical_fan_out for each group | IDENTIFY hosts with fan_out deviating from peer_group_model
- question: Are there any processes with suspicious or illogical parent-child relationships, suggesting PPID spoofing?
  context: Adversaries use Parent Process ID (PPID) spoofing to make their malicious processes appear as though they were launched by a legitimate process (e.g., `explorer.exe`). This question looks for illogical process trees, such as a non-interactive service spawning an interactive command shell, or a known spoofing target spawning an unapproved tool, which can indicate an attempt to evade defenses.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Application Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH Process:Create WHERE parent_process.name == 'explorer.exe' AND process.name NOT IN (allow_list)
- question: Are any "orphaned" processes being created, where the specified parent process does not exist?
  context: A common technique in PPID spoofing is to specify the ID of a process that has already terminated as the parent. This creates an "orphaned" process. This question involves maintaining a stateful table of running processes to verify that for every new process, its specified parent ID is valid and currently running. A spike in the rate of orphaned processes on a host is a strong indicator of PPID spoofing.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Application Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: STATEFUL_CHECK: For each Process:Create, query if parent_process.id exists in running_processes_table. ALERT if not exists.
- question: Can a machine learning model detect structurally anomalous process lineage graphs?
  context: This question uses an advanced graph neural network (GNN) to learn the normal structure of process trees in an environment. The model can then evaluate new process creations and their lineage in real-time. It can identify anomalies that simple rules would miss, such as a process tree with unusual depth or a node with an illogical parent (e.g., `svchost.exe` spawning `notepad.exe`), which are hallmarks of sophisticated PPID spoofing.
  answer_sources:
  - Windows Event ID 4688
  - User Workstations, Application Servers, Developer Endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: BUILD_GRAPH from Process:Create events | EVALUATE graph_structure with GNN | ALERT on anomalous structures