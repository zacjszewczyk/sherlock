name: T1560.003: Archive via Custom Method
id: 5a8e0f1e-6b9c-4d3a-9a0f-8c7d6e5b4f3a
description: Investigates if an adversary is collecting and staging data for exfiltration
  using custom archiving methods. This involves detecting processes with high-entropy
  command-line arguments, unusual file access patterns (e.g., a single process reading
  many sensitive files and writing to one staging file), high-entropy outbound network
  traffic on non-standard ports, rare parent-child process relationships, the creation
  of unusually large files in staging areas followed by large network transfers,
  and outbound connections with anomalous data volumes to low-reputation or newly
  observed domains.
type: technique
related: TA0009: Collection
contributors: Zachary Szewczyk, Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Are processes being created whose executable hashes match known custom
    archivers or whose command-line arguments contain obfuscation patterns?
  context: This question aims to identify custom archiving tools using two distinct
    methods. First, it checks the process hash against threat intelligence feeds
    for known malicious archivers, providing a high-fidelity match. Second, it looks
    for common obfuscation techniques in command-line arguments, such as PowerShell's
    '-e' or '-enc' flags or long Base64 strings, which are often used to hide malicious
    activity. Answering this helps detect known threats and common evasion tactics.
  answer_sources: Windows Event ID 4688, Threat intelligence feeds of known custom
    archivers. Focus on workstation and server endpoints, especially developer workstations,
    administrator consoles, Domain Controllers, and file servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each process_creation_event (EID 4688)
      CHECK process_hash against known_malicious_archiver_list
      OR
      CHECK command_line for patterns like '-e', '-enc', or long_base64_strings
      IF match found, ALERT
- question: Are any processes being executed with command-line arguments that have
    an unusually high Shannon entropy compared to their historical baseline?
  context: This question seeks to uncover obfuscated or scripted activity by measuring
    the randomness (Shannon entropy) of command-line arguments. Legitimate commands
    are often predictable, while custom scripts, packed commands, or encrypted payloads
    appear more random. By comparing the entropy of a new command to the historical
    95th percentile for that same process (e.g., `powershell.exe`), analysts can spot
    significant deviations that suggest an adversary is hiding their actions.
  answer_sources: Windows Event ID 4688. Focus on workstation and server endpoints,
    especially developer workstations, administrator consoles, Domain Controllers,
    and file servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each process_creation_event (EID 4688)
      CALCULATE entropy of command_line_string
      GET historical_95th_percentile_entropy for that process_name
      IF current_entropy > historical_95th_percentile_entropy
      THEN ALERT
- question: Can a machine learning model identify process creation events that are
    likely to be malicious based on features like command-line entropy and argument
    length?
  context: This question leverages a machine learning classifier to provide a more
    sophisticated, multi-faceted detection than single-metric methods. The model
    considers a combination of features (command-line entropy, argument length, parent
    process, special characters) to generate a malice score. This approach is powerful
    because it can identify complex patterns of malicious behavior that might not
    trigger simpler symbolic or statistical rules, providing a more robust and context-aware
    detection capability.
  answer_sources: Windows Event ID 4688. Focus on workstation and server endpoints,
    especially developer workstations, administrator consoles, Domain Controllers,
    and file servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each process_creation_event (EID 4688)
      EXTRACT features (entropy, arg_length, parent_process, etc.)
      INPUT features into pre-trained classification_model
      GET malice_score
      IF malice_score > confidence_threshold
      THEN ALERT
- question: Has a process, not on an approved list of backup tools, read an unusually
    large number of files from sensitive locations and written them to a single file
    in a staging directory?
  context: This question targets the classic 'smash and grab' data collection behavior.
    Adversaries often use a single script or tool to quickly read numerous files
    from sensitive locations (e.g., user profiles, file shares) and consolidate them
    into a single archive file in a temporary or public directory for easier exfiltration.
    By looking for this specific sequence of high-volume reads followed by a single
    write from an unapproved process, analysts can detect data staging activity.
  answer_sources: Windows Event ID 4688, Windows Event ID 4663 (with SACL auditing
    enabled). Focus on file servers, database servers, user profile directories (e.g.,
    Documents, Desktop), and common staging directories (e.g., %TEMP%, %APPDATA%,
    C:\Users\Public) on endpoints and servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      CORRELATE process_creation (EID 4688) with file_access (EID 4663) over a 5-minute window
      FOR each process
        IF process_path NOT in backup_tool_allowlist
        AND count(distinct_files_read_from_sensitive_dirs) > 100
        AND count(files_written_to_staging_dirs) == 1
        THEN ALERT
- question: Are any processes exhibiting a statistically anomalous ratio of unique
    files read to files written compared to their baseline?
  context: This question provides a statistical approach to identifying data collection.
    Most normal processes have a predictable ratio of file reads to writes. A process
    engaged in data aggregation will have a very high read-to-write ratio (many reads,
    one write). By establishing a baseline for this ratio for common processes and
    alerting on significant deviations (e.g., >3 standard deviations), analysts can
    detect this anomalous behavior without relying on static file counts or directory
    paths.
  answer_sources: Windows Event ID 4688, Windows Event ID 4663. Focus on file servers,
    database servers, user profile directories (e.g., Documents, Desktop), and common
    staging directories (e.g., %TEMP%, %APPDATA%, C:\Users\Public) on endpoints and
    servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each process over a 10-minute window
        CALCULATE ratio = count(unique_files_read) / count(files_written)
        GET historical_baseline (mean, std_dev) for that process's ratio
        IF ratio > (mean + 3 * std_dev)
        THEN ALERT
- question: Can anomalous clusters of process activity, characterized by high file
    read/write counts and unusual directory access, be identified using machine learning?
  context: This question uses unsupervised machine learning (clustering) to find
    'unknown unknowns.' Instead of looking for a specific predefined pattern, this
    method groups all process sessions based on their file I/O behavior. Legitimate
    activities will form large, dense clusters. Anomalous data collection, being
    rare and different, will likely form small, isolated clusters or be flagged as
    noise. This helps analysts discover novel or unusual data aggregation techniques
    that don't fit existing rules.
  answer_sources: Windows Event ID 4688, Windows Event ID 4663. Focus on file servers,
    database servers, user profile directories (e.g., Documents, Desktop), and common
    staging directories (e.g., %TEMP%, %APPDATA%, C:\Users\Public) on endpoints and
    servers.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      AGGREGATE process session features (read_count, write_count, unique_dirs, etc.)
      APPLY clustering algorithm (e.g., DBSCAN) to the dataset
      INVESTIGATE processes in small, isolated clusters or those classified as outliers
- question: Has a host, recently flagged for anomalous file or process activity,
    initiated a large outbound network connection over a non-standard port?
  context: This question connects suspicious on-host activity (data staging) with
    suspicious network activity (potential exfiltration). An alert for anomalous
    file access or process creation is a strong indicator of pre-exfiltration staging.
    Correlating this with a subsequent large (>10MB) data transfer over an uncommon
    port strongly suggests that the staged data is being sent out. This rule helps
    bridge the gap between collection and exfiltration phases of an attack.
  answer_sources: Zeek conn.log, Zeek file_analysis, internal alert system. Focus
    on network egress points, such as border firewalls and routers, where network
    sensors (e.g., Zeek) are deployed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      TRIGGER on alert for anomalous_file_access or high_entropy_process on a host
      WITHIN 10 minutes, CHECK Zeek conn.log for outbound connection from that host
      IF connection_port is non-standard (not 80, 443, 22, etc.)
      AND outbound_bytes > 10MB
      THEN ALERT
- question: Is there any outbound network traffic on non-standard ports with unusually
    high payload entropy, suggesting custom encryption or compression?
  context: This question focuses on the characteristics of the data being exfiltrated.
    High entropy (>7.5 bits/byte) indicates that data is either compressed or encrypted.
    When this occurs over a non-standard port and is not part of a recognized protocol
    like TLS or SSH, it is highly suspicious. Adversaries use custom encryption or
    simple compression to obfuscate exfiltrated data. Detecting high entropy on unusual
    ports is a strong sign of this tactic.
  answer_sources: Zeek conn.log, Zeek file_analysis. Focus on network egress points,
    such as border firewalls and routers, where network sensors (e.g., Zeek) are
    deployed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each network flow in Zeek file_analysis
      CALCULATE payload_entropy
      GET historical_98th_percentile_entropy for that destination_port
      IF destination_port is not a known encrypted protocol port
      AND payload_entropy > historical_98th_percentile_entropy
      THEN ALERT
- question: Can a time-series anomaly detection model identify hosts exhibiting network
    behavior that significantly deviates from their normal profile, especially when
    correlated with high payload entropy?
  context: This question uses a machine learning model to establish a unique 'normal'
    network behavior profile for each host over time. The model learns patterns in
    metrics like data volume, connection duration, and protocols used. When a host's
    network activity suddenly changes—for instance, sending a large amount of data
    over an unusual port—the model will flag it as an anomaly (high reconstruction
    error). This is a powerful way to detect exfiltration without relying on static
    rules, as it's tailored to each host's specific normal behavior.
  answer_sources: Zeek conn.log, Zeek file_analysis. Focus on network egress points,
    such as border firewalls and routers, where network sensors (e.g., Zeek) are
    deployed.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each host, INPUT time-series of network flow features into LSTM Autoencoder model
      CALCULATE reconstruction_error for new network flows
      IF reconstruction_error is high
      AND payload_entropy is high
      THEN ALERT
- question: Has a common office application, like Word or Outlook, spawned a forbidden
    child process, such as cmd.exe or powershell.exe?
  context: This question looks for a common exploitation technique where an adversary
    uses a malicious document or email to gain initial execution. Office applications
    should not normally be spawning command shells or scripting engines. By maintaining
    a static list of these high-risk, forbidden parent-child process relationships,
    analysts can quickly and reliably detect this type of initial access and execution
    behavior.
  answer_sources: Windows Event ID 4688, Windows Event ID 4663. Focus on all end-user
    workstations and servers running common business applications (e.g., Microsoft
    Office, Adobe Reader, web browsers).
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each process_creation_event (EID 4688)
      IF parent_process is in ['WINWORD.EXE', 'OUTLOOK.EXE', 'Acrobat.exe']
      AND child_process is in ['cmd.exe', 'powershell.exe', 'wscript.exe']
      THEN ALERT
- question: Are there any instances of a parent process spawning a child process
    that is statistically very rare for that parent across the entire enterprise?
  context: This question moves beyond a static blocklist to a data-driven approach.
    By analyzing all parent-child process relationships across the environment, we
    can determine what is normal. A legitimate process like `WINWORD.EXE` might spawn
    `splwow64.exe` thousands of times, but spawning `powershell.exe` might happen
    only once. Flagging these statistically rare events (e.g., in the bottom 1st
    percentile of frequency) allows analysts to uncover novel or targeted attacks
    that use unusual process chains to execute code.
  answer_sources: Windows Event ID 4688. Focus on all end-user workstations and servers
    running common business applications (e.g., Microsoft Office, Adobe Reader, web
    browsers).
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      BUILD frequency table of all parent-child process pairs over 30 days
      FOR each new process_creation_event
      CALCULATE probability of that child for that parent
      IF probability < 1st_percentile_for_parent
      THEN ALERT
- question: Can we detect anomalous process chains that bridge distinct 'communities'
    of normal activity, such as an Office application spawning a developer tool?
  context: This question models the enterprise's process activity as a large graph,
    where processes are nodes and parent-child relationships are edges. Normal operations
    form distinct clusters or 'communities' (e.g., Office apps interact with each
    other, developer tools interact with compilers). An attack often involves a process
    from one community spawning a process in another (e.g., `OUTLOOK.EXE` -> `powershell.exe`).
    This method uses graph analytics to detect these 'bridge' events, which represent
    a significant and suspicious deviation from normal workflows.
  answer_sources: Windows Event ID 4688. Focus on all end-user workstations and servers
    running common business applications (e.g., Microsoft Office, Adobe Reader, web
    browsers).
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      MODEL all process chains as a directed graph
      APPLY community detection algorithm to identify normal clusters
      FLAG any new process chain that connects two separate communities
- question: Was a very large file (>50MB) created in a staging directory by a non-standard
    process, and was it immediately followed by a large outbound network transfer
    from the same host?
  context: This is a high-confidence correlation rule for data staging followed by
    exfiltration. It looks for a specific, suspicious sequence; 1) a large file appears
    in a temporary location (e.g., %TEMP%), 2) the process creating it is not a known
    installer or backup tool, and 3) a large network transfer originates from the
    same machine shortly after. Matching all three conditions provides a strong signal
    that an adversary has created an archive and is now exfiltrating it.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688, Zeek conn.log. Focus
    on common staging directories (e.g., C:\Windows\Tasks, %TEMP%, C:\Perflogs, Recycle
    Bin) on endpoints/servers, and network egress points.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      TRIGGER on file_creation (EID 4663) in staging_dir where file_size > 50MB
      AND creating_process not in ['backup.exe', 'msiexec.exe']
      WITHIN 5 minutes, CHECK Zeek conn.log for outbound connection from same host
      IF outbound_bytes > 50MB to an external IP
      THEN ALERT
- question: Has a host created a file in a staging directory that is unusually large
    for that location, and then initiated an outbound network connection that is
    unusually large for that host?
  context: This statistical approach generalizes the symbolic rule. Instead of using
    hardcoded file and data transfer sizes, it uses dynamic, host-specific baselines.
    It alerts when a file is created that exceeds the 95th percentile size for its
    directory, and this is followed by a network outflow that exceeds the 95th percentile
    for that host. This makes the detection more adaptive and less prone to false
    positives or negatives caused by fixed thresholds.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688, Zeek conn.log. Focus
    on common staging directories (e.g., C:\Windows\Tasks, %TEMP%, C:\Perflogs, Recycle
    Bin) on endpoints/servers, and network egress points.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      CALCULATE 95th_percentile_file_size for staging_dirs
      CALCULATE 95th_percentile_outbound_bytes per host
      TRIGGER on file_creation in staging_dir where file_size > 95th_percentile_file_size
      WITHIN 10 minutes, CHECK for outbound connection from same host
      IF outbound_bytes > 95th_percentile_outbound_bytes for that host
      THEN ALERT
- question: Can a sequence analysis model detect improbable sequences of events,
    such as a large file write in a temp directory followed by a large data egress
    to a new IP address?
  context: This question applies machine learning to model the 'grammar' of normal
    host activity. A sequence analysis model (like an HMM) learns the typical order
    of events (e.g., process create -> file read -> small network connection). An
    adversary's actions—creating a large archive in a temp folder and immediately
    exfiltrating it to a new destination—would represent a highly improbable sequence
    according to the model. Flagging such sequences allows for the detection of logically
    suspicious activity chains that might not violate any single statistical threshold.
  answer_sources: Windows Event ID 4663, Windows Event ID 4688, Zeek conn.log. Focus
    on common staging directories (e.g., C:\Windows\Tasks, %TEMP%, C:\Perflogs, Recycle
    Bin) on endpoints/servers, and network egress points.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      TRAIN HMM on sequences of host events (process_create, file_write, network_conn, etc.)
      FOR new event sequences per host
      CALCULATE probability of the sequence
      IF probability is below a threshold (i.e., improbable sequence)
      THEN ALERT
- question: Is there an outbound network connection to a known malicious IP, a newly
    registered domain, or a domain with a poor reputation?
  context: This question focuses on identifying exfiltration to high-risk destinations.
    By correlating network logs with threat intelligence, it's possible to flag connections
    to command-and-control (C2) servers on blocklists. Additionally, adversaries
    often use newly registered domains (NRDs) for their infrastructure. Checking
    the domain registration date or a reputation score provides strong indicators
    that the destination is not a legitimate business partner and may be part of
    a malicious infrastructure.
  answer_sources: Zeek conn.log, Zeek dns.log, threat intelligence feeds. Focus on
    network egress points, enterprise DNS servers, and threat intelligence feeds.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each outbound connection (Zeek conn.log)
      GET destination_IP and destination_domain (from dns.log)
      CHECK if destination_IP is on blocklist
      OR if domain_registration_date < 30 days ago
      OR if domain_reputation_score is low
      THEN ALERT
- question: Has a host initiated an outbound connection with a data volume that is
    a significant statistical outlier (e.g., >4 standard deviations above its mean),
    especially if the destination is uncommon for that host?
  context: This question aims to detect exfiltration by identifying anomalous data
    volumes on a per-host basis. Every host has a normal pattern of outbound traffic.
    A sudden, massive data transfer (e.g., 4+ standard deviations above the average)
    is a strong statistical anomaly. The significance of this alert is increased
    if the destination IP is also rare for that specific host, suggesting a new, unsanctioned
    communication channel is being used for a large data transfer.
  answer_sources: Zeek conn.log, Zeek dns.log. Focus on network egress points, enterprise
    DNS servers, and threat intelligence feeds.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each host, maintain baseline (mean, std_dev) of outbound_bytes
      FOR each new outbound connection
      IF outbound_bytes > (mean + 4 * std_dev)
      AND destination_IP is rare for this host (e.g., bottom 5th percentile of frequency)
      THEN ALERT
- question: Can a machine learning model, trained on a host's normal outbound network
    profile, identify new connections that are outliers?
  context: This question uses a one-class classifier (like a one-class SVM) to build
    a sophisticated, multi-dimensional profile of a host's normal network behavior,
    considering features like duration, data volume, protocol, and port. The model
    essentially creates a boundary around 'normal.' Any new connection that falls
    outside this boundary is flagged as an outlier. This is a powerful method for
    detecting novel exfiltration techniques or C2 communication that doesn't rely
    on predefined thresholds or known bad destinations.
  answer_sources: Zeek conn.log, Zeek dns.log. Focus on network egress points, enterprise
    DNS servers, and threat intelligence feeds.
  range: last 90 days
  queries:
  - type: pseudocode
    query: |
      FOR each host, train a One-Class SVM on normal network flow features
      FOR each new outbound connection
      USE model to classify the connection
      IF classified as an outlier
      THEN ALERT