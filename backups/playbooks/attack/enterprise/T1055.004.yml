name: T1055.004: Asynchronous Procedure Call
id: a8d0c324-5d82-4c6e-9f0a-1b9e8d7c6b5a
description: This playbook helps investigate potential adversary activity involving Asynchronous Procedure Call (APC) injection, a technique used for both privilege escalation (TA0004) and defense evasion (TA0005). It provides a structured approach to analyzing various data sources to detect signs of APC injection. The playbook focuses on identifying suspicious process creation events linked to known malicious tools, anomalous process access requests indicating injection attempts (e.g., an unsigned process accessing a system process with write permissions), unexpected parent-child process relationships, and unusual network behavior from processes that may have been compromised via APC injection. The goal is to determine if an adversary has used this technique to execute malicious code within the context of another legitimate process, thereby gaining higher privileges or bypassing security controls.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any processes been created from executables matching known malicious tool hashes associated with APC injection?
    context: This question aims to identify the initial execution of a malicious tool on an endpoint. Adversaries often use known or slightly modified tools for process injection. By comparing the file hash of every new process against a threat intelligence feed, we can quickly detect the presence of binaries specifically designed for techniques like APC injection, providing a high-confidence starting point for an investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Domain Controllers
      - Critical Application Servers
      - User Workstations
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process_creation_event (Sysmon 1, Win 4688) | LOOKUP file_hash against threat_intel_feed | WHERE threat_intel_match == true AND category contains 'process injection' | ALERT
  - question: Are there any rarely seen processes executing that are subsequently accessing system processes in a suspicious manner?
    context: This question focuses on finding 'needles in a haystack'. Malicious binaries, especially those used in targeted attacks, are often not widespread. By identifying executables that are rare in the environment and then checking if they perform suspicious follow-on actions like accessing critical system processes (a precursor to injection), we can uncover stealthy injection tools that aren't yet in threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Domain Controllers
      - Critical Application Servers
      - User Workstations
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: CALCULATE prevalence of all process_hashes over 30 days | FILTER for hashes on < 0.1% of hosts | FOR each rare_hash, FIND subsequent process_access_events (Sysmon 10) from that process | WHERE target_process is a system_process | ALERT
  - question: Have any new processes been executed that have characteristics highly indicative of a malicious injector tool?
    context: This question uses machine learning to proactively identify potential injector tools based on a collection of suspicious properties. Instead of relying on a single indicator, it scores a process based on features like unusual file paths, high-entropy command lines, and lack of a valid digital signature. A high score suggests the process is anomalous and warrants investigation as a potential injection tool, even if it's a zero-day or previously unknown.
    answer_sources:
      - Sysmon Event ID 1
      - Domain Controllers
      - Critical Application Servers
      - User Workstations
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each new process_creation_event (Sysmon 1) | EXTRACT features (path_entropy, parent_process, cmdline_entropy, etc.) | APPLY classification_model to features | WHERE probability_score > threshold | ALERT
  - question: Has a process that is either unsigned or located in a non-standard directory opened a handle to another process with rights sufficient for APC injection?
    context: This question seeks to identify the core action of process injection preparation. A legitimate process rarely needs to open another process with rights to write to its memory or modify its information. When the source process is also suspicious (unsigned or running from a temp directory) and the target is a high-integrity system process, it is a strong indicator of an APC injection attempt.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - All Windows Endpoints and Servers
      - Active Directory Domain Controllers
      - High-Value Asset Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process_access_event (Sysmon 10) WHERE GrantedAccess includes injection_rights | GET source_process_details (Sysmon 1) | IF source_process is unsigned OR path is suspicious AND target_process is system_process | ALERT
  - question: Have any statistically rare process access events occurred?
    context: This question uses anomaly detection to find unusual inter-process interactions. By baselining normal activity, we can spot a process trying to access another process with a set of permissions it has never used before. This can catch novel injection techniques or the use of legitimate tools for malicious purposes, which might be missed by signature-based rules.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - All Windows Endpoints and Servers
      - Active Directory Domain Controllers
      - High-Value Asset Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: BASELINE frequency of (SourceImage, TargetImage, GrantedAccess) tuples | FOR each new process_access_event | CALCULATE rarity_score based on baseline | IF rarity_score > threshold AND source_path/signature is anomalous | ALERT
  - question: Have any process access patterns been flagged as anomalous by a machine learning model?
    context: This question operationalizes a sophisticated anomaly detection model to find subtle signs of injection. The model considers a wide range of features from both the source and target processes to identify deviations from normal behavior that are too complex to define with simple rules. This is effective at detecting advanced attackers who try to blend in with normal system activity.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - All Windows Endpoints and Servers
      - Active Directory Domain Controllers
      - High-Value Asset Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process_access_event (Sysmon 10) | EXTRACT features (process_names, access_rights, path_entropy, etc.) | APPLY anomaly_detection_model | WHERE event is flagged as an outlier | ALERT
  - question: Has a process not on an established allow-list requested memory or thread manipulation rights to another process?
    context: This question implements a strict, allow-list-based security policy. Many organizations can define the small set of legitimate tools (like debuggers or EDRs) that need to perform process injection-like actions. Any process access event involving injection-related rights from a source process not on this list is highly suspicious and warrants an immediate alert.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations
      - Developer Machines
      - System Administration Consoles
      - All Windows Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MAINTAIN allow_list of source_images for high-privilege access | FOR each process_access_event (Sysmon 10) with injection_rights | IF SourceImage NOT IN allow_list | ALERT
  - question: Has a process requested access rights to another process that are statistically unusual for its own behavior?
    context: This question focuses on behavioral anomaly detection at the individual process level. For example, 'notepad.exe' should never need to request memory write access to 'lsass.exe'. By baselining the typical access requests made by each unique process, we can detect when a legitimate process has been compromised or is being misused to facilitate an injection attack.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations
      - Developer Machines
      - System Administration Consoles
      - All Windows Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each SourceImage, BASELINE historical GrantedAccess requests | FOR each new process_access_event | IF RequestedAccess is a statistical outlier for that SourceImage's baseline | ALERT
  - question: Have any anomalous process interactions been detected by a graph-based model?
    context: This question models the entire system's inter-process communication as a network graph. Anomalies are detected as new or unusual connections (edges) between processes (nodes). This approach is powerful for visualizing and detecting when a process interacts with another in a way that is structurally different from the established norm, indicating a potential attack path.
    answer_sources:
      - Sysmon Event ID 10
      - Sysmon Event ID 1
      - User Workstations
      - Developer Machines
      - System Administration Consoles
      - All Windows Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: BUILD graph of normal process interactions | FOR each new process_access_event | IF the interaction represents an anomalous edge in the graph | ALERT
  - question: Has a common injection target process spawned a suspicious child process like a command shell or networking tool?
    context: This question looks for the post-exploitation outcome of a successful injection. After an adversary injects code into a process like 'svchost.exe', they often use that hijacked process to spawn a command shell ('cmd.exe') or a tool like 'net.exe' to continue their attack. Detecting these specific, high-risk parent-child relationships is a strong indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MONITOR for process_creation_events (Sysmon 1) | WHERE (parent_process, child_process) in high_risk_list (e.g., svchost.exe -> cmd.exe) | ALERT
  - question: Has a common parent process spawned a child process with an unusually complex or obfuscated command line?
    context: Adversaries often use long, complex, and obfuscated command lines to execute malicious scripts or commands via an injected process. This question establishes a baseline for the normal command-line complexity of child processes for a given parent and alerts when an outlier is detected. High entropy can indicate base64 encoding or other forms of obfuscation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each parent_process, BASELINE child_process names and cmdline_entropy | FOR each new process_creation_event | IF child_process is not in baseline OR cmdline_entropy is an outlier | ALERT
  - question: Has a sequence of process events occurred that deviates from a machine-learned model of normal host activity?
    context: This question uses a time-series model to understand the normal "rhythm" of process activity on a host. An attack, such as code injection followed by spawning a shell, creates a sequence of events that is often different from day-to-day operations. The model can flag these low-probability sequences, pointing to a deviation from normal behavior that may be malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: TRAIN time-series model on sequences of process events per host | FOR each new event sequence | IF sequence_probability < threshold under the model | ALERT
  - question: Has a commonly injected-into process initiated an outbound network connection to a known malicious IP or domain?
    context: This question looks for a key indicator of defense evasion: a legitimate, trusted process (like a browser or system process) making a network connection to a command-and-control (C2) server. Since the process itself is trusted, this traffic might bypass firewalls. Correlating the source process with destinations from a threat feed is a high-confidence way to detect this.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Resolvers
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each network_connection (Sysmon 3, Zeek) | FROM process in [svchost.exe, explorer.exe, etc.] | LOOKUP destination_ip/domain against threat_intel_feed | IF match_found | ALERT
  - question: Has a process made a network connection to a destination domain that is statistically anomalous for that process?
    context: This question aims to detect C2 communication without relying on threat intelligence feeds. It profiles the characteristics of domains a process normally connects to (e.g., age, popularity, character patterns). If a process like 'svchost.exe' suddenly connects to a brand new, random-looking domain, it will be flagged as a statistical outlier, indicating a potential C2 channel.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Resolvers
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process, PROFILE features of normal destination_domains | FOR each new network_connection | CALCULATE Mahalanobis distance of destination_domain features | IF distance > threshold | ALERT
  - question: Is a process connecting to a domain that appears to be generated by a Domain Generation Algorithm (DGA)?
    context: This question specifically targets a common C2 technique where malware generates a large number of domain names to find its C2 server. By applying a DGA detection model to domains requested by processes that are common targets for injection, we can identify likely C2 communications even when the domains are new and not yet on any blacklist.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points (Firewalls, Proxies)
      - DNS Resolvers
      - All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each network_connection from a common_injection_target_process | EXTRACT domain_name | APPLY DGA_detection_model | IF domain is classified as DGA | ALERT
  - question: Has an unsigned process or one from a suspicious path attempted to access a network-facing application with injection rights?
    context: This question identifies a specific defense evasion pattern: injecting into a process that is expected to communicate on the network, like a web browser. An adversary might inject into 'chrome.exe' to inherit its network permissions and blend in. This query looks for the preparatory step: a suspicious process trying to get the rights to inject into a browser or email client.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - User Workstations
      - Remote Desktop Servers
      - All Windows Endpoints
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process_access_event (Sysmon 10) WHERE target is network_app AND rights are for injection | GET source_process_details (Sysmon 1) | IF source is unsigned OR path is suspicious | ALERT
  - question: Has a rare or never-before-seen process attempted to access a browser or email client with high privileges?
    context: This question uses baselining to spot anomalous interactions with sensitive, network-facing applications. While some legitimate tools might interact with a browser, it's a relatively stable set. An alert on a new or very rare process attempting to gain control over a browser is a strong signal that an adversary is trying to hijack its network capabilities or steal data.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - User Workstations
      - Remote Desktop Servers
      - All Windows Endpoints
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: BASELINE frequency of (SourceImage, TargetImage) pairs where TargetImage is network_app | FOR each new access_event to network_app | IF (SourceImage, TargetImage) pair is rare or new | ALERT
  - question: Has a process access event been scored by a model as a high-risk defense evasion attempt?
    context: This question applies a purpose-built machine learning model to score the risk of an inter-process access event. The model is trained to recognize combinations of features that indicate an attempt to evade defenses, such as a non-standard process accessing a browser. This provides a more nuanced detection capability than a simple rule.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - User Workstations
      - Remote Desktop Servers
      - All Windows Endpoints
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each process_access_event | EXTRACT features (source/target names, source signed status, etc.) | APPLY classification_model | IF probability_of_evasion > threshold | ALERT
  - question: Has a process that is not on a network allow-list initiated an outbound connection?
    context: This is a straightforward and effective detection method based on an allow-list policy. Most processes on a typical workstation or server do not need to make outbound network connections. By maintaining a list of those that do (e.g., browsers, updaters), any connection from a process not on the list (like 'notepad.exe' or 'calculator.exe') is highly suspicious and could indicate code injection.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MAINTAIN network_access_allow_list for processes | FOR each network_connection (Sysmon 3) | IF process_image NOT IN allow_list | ALERT
  - question: Has an unexpected process made an outbound connection to a destination IP/port that is also rare in the environment?
    context: This question combines two forms of rarity to increase detection confidence. A process like 'calculator.exe' making a network connection is strange. If that connection is also to an IP address and port that almost no other host in the enterprise talks to, it is extremely suspicious and likely indicates a C2 channel. This helps prioritize alerts from the previous question.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: FOR each connection from unexpected_process | CALCULATE prevalence of destination IP/port across enterprise | IF destination_prevalence is very low | ALERT for potential beaconing patterns
  - question: Has a process with typically no network activity shown a sudden and uncharacteristic spike in network traffic?
    context: This question uses time-series anomaly detection to spot changes in a process's network behavior. A process like 'services.exe' might have zero network traffic for weeks, and then suddenly start sending or receiving data. This abrupt change from its own baseline is a strong indicator that the process has been hijacked and is now being used for data exfiltration or C2.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 1
      - All Windows Endpoints
      - Network Egress Points
      - Internal DNS Resolvers
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: MODEL network traffic volume per-process per-host over time | FOR each process | IF current_traffic is an anomalous spike compared to its history | ALERT
  - question: Following an anomalous process chain, did the parent process initiate a suspicious network connection after the child terminated?
    context: This question links suspicious process activity with subsequent suspicious network activity to build a more complete attack story. For example, Word spawning 'cmd.exe' is anomalous. If, after 'cmd.exe' closes, the original Word process then connects to an unknown IP, it strongly suggests a "hollowed" or injected process is now activating a C2 channel.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: DETECT anomalous parent->child chain (Sysmon 1) | ON child termination (Sysmon 5) | MONITOR parent PID | IF parent initiates network connection (Sysmon 3) to non-allow-listed destination | ALERT
  - question: After spawning an anomalous child, did the parent process initiate a network connection with statistically outlier characteristics?
    context: This question looks for subtle changes in a parent process's network behavior following a suspicious process creation event. For example, 'explorer.exe' might normally connect to Microsoft update sites. If, after spawning a strange child process, it starts making small, regular connections on a non-standard port, this behavioral shift indicates it may be compromised and beaconing to a C2 server.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: ON anomalous process spawn | PROFILE subsequent network connections from parent | IF connection characteristics (port, volume, timing) are outliers compared to parent's baseline | ALERT
  - question: Did a sequence of host events (process creation, network connection) occur that deviates from a machine-learned prediction of normal behavior?
    context: This question uses a holistic sequence model to detect an entire attack chain. The model learns normal sequences of events on a host (e.g., user opens Word, Word saves a file). An attack sequence (e.g., Word spawns 'cmd.exe', 'cmd.exe' terminates, Word connects to a rare IP) would have a very low probability under the model, triggering an alert for a significant deviation from normalcy.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 3
      - Zeek conn.log
      - All Windows Endpoints and Servers
      - Log Aggregation Platform (SIEM)
    range: last 90 days
    queries:
      - search_technology: Pseudocode
        query: TRAIN Seq2Seq model on host event sequences (process, network, etc.) | FOR each new sequence of events | IF model prediction for next event differs significantly from actual event | ALERT