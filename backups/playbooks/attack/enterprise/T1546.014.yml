name: 'T1546.014: Emond'
id: 'c8a2b5e1-7d3f-4e9b-a6f0-1c9d8e7f6a5b'
description: |
  This playbook addresses adversary actions using the macOS Emond service for persistence and privilege escalation (T1546.014). It provides investigative steps to detect malicious activity by analyzing new or modified Emond rules in `/etc/emond.d/rules/`, monitoring for suspicious child processes spawned by `/sbin/emond`, and inspecting the content of rule files (`.plist`) for malicious commands. Investigations focus on identifying rules that execute scripts from world-writable directories, use known malicious signatures, exhibit statistical anomalies like high entropy, or perform actions indicative of privilege escalation, such as user creation or modification of sensitive system files.
type: 'technique'
related:
  - 'TA0003: Persistence'
  - 'TA0004: Privilege Escalation'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: 'Is a newly created Emond rule file or a process spawned by Emond known to be malicious based on threat intelligence?'
    context: |
      This question aims to detect known threats by matching artifacts against threat intelligence. Adversaries may reuse malware or attack patterns, leaving identifiable signatures. By checking file hashes of new Emond rules and command lines of Emond-spawned processes against a database of known-malicious indicators, analysts can quickly identify a compromise with high confidence.
    answer_sources:
      - 'macOS ESF file creation event logs'
      - 'macOS process execution logs (including command line arguments)'
      - 'Threat Intelligence Platform hash and signature feeds'
      - 'EDR logs from all macOS endpoints'
      - 'Threat Intelligence Platform API'
      - 'SIEM correlation engine'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH file_creation_events WHERE path = "/etc/emond.d/rules/*" | HASH file | LOOKUP hash in threat_intel_feed'
      - type: 'pseudocode'
        query: 'SEARCH process_creation_events WHERE parent_process = "/sbin/emond" | MATCH command_line against known_bad_signatures'
  - question: 'Is an Emond-spawned process using obfuscated command-line arguments?'
    context: |
      This question seeks to identify anomalous or obfuscated commands that might evade signature-based detection. Adversaries often use encoding (like Base64) or encryption to hide their malicious payloads within command-line arguments. High Shannon entropy is a strong statistical indicator of such obfuscation. By baselining normal activity and alerting on significant deviations, we can detect novel or previously unseen malicious commands.
    answer_sources:
      - 'macOS process execution logs (including command line arguments)'
      - 'EDR logs from all macOS endpoints'
      - 'SIEM correlation engine'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH process_creation_events WHERE parent_process = "/sbin/emond" | CALCULATE entropy of command_line_args | ALERT if entropy > baseline_99th_percentile'
  - question: 'Does a process spawned by Emond exhibit characteristics of maliciousness according to a machine learning model?'
    context: |
      This question uses advanced machine learning to move beyond simple signatures or statistical anomalies. By training a model on a rich set of features (length, argument count, character types, entropy, n-grams), it can learn the subtle patterns that distinguish malicious command lines from benign ones. This approach is powerful for detecting novel threats that do not match known signatures but share underlying structural similarities with other malware.
    answer_sources:
      - 'macOS process execution logs (including command line arguments)'
      - 'EDR logs from all macOS endpoints'
      - 'SIEM correlation engine'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'STREAM process_creation_events WHERE parent_process = "/sbin/emond" | EXTRACT features (length, arg_count, entropy, etc.) | PREDICT with ML_model | ALERT if prediction is "malicious" and confidence > 0.9'
  - question: 'Has an Emond rule been created or modified to execute a command from an unsafe location?'
    context: |
      This question focuses on identifying a common persistence technique where an adversary places a payload in a world-writable directory (e.g., /tmp, /Users/Shared) and configures an Emond rule to execute it. Since Emond runs as root, this provides a powerful and persistent execution vector. Detecting rules that point to script interpreters or binaries in such locations is a critical finding.
    answer_sources:
      - 'macOS file integrity monitoring logs for /etc/emond.d/rules/'
      - 'EDR file content inspection logs'
      - 'File Integrity Monitoring (FIM) solution'
      - 'EDR agent logs on all macOS endpoints'
      - 'SIEM for content parsing and alerting'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH file_modification_events WHERE path = "/etc/emond.d/rules/*.plist" | PARSE plist_content | ALERT if (RunCommand or RunExecutable key exists) AND (value matches regex for script_interpreters OR unsafe_paths)'
  - question: 'Is a newly created Emond rule executing a command that has never been seen before in the environment?'
    context: |
      This question uses statistical rarity to detect suspicious activity. In a mature environment, the set of legitimate administrative commands executed by Emond is often stable. A new, previously unseen command string in an Emond rule is a statistical anomaly. By maintaining an allowlist or frequency table of known-good commands, analysts can flag any deviation, which could represent an unauthorized administrative change or malicious action.
    answer_sources:
      - 'macOS file integrity monitoring logs for /etc/emond.d/rules/'
      - 'EDR file content inspection logs'
      - 'File Integrity Monitoring (FIM) solution'
      - 'EDR agent logs on all macOS endpoints'
      - 'SIEM for content parsing and alerting'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH file_modification_events WHERE path = "/etc/emond.d/rules/*.plist" | EXTRACT command_string from RunCommand/RunExecutable | ALERT if command_string is NOT in established_allowlist'
  - question: 'Does a new Emond rule contain command strings that are thematically different from normal administrative commands?'
    context: |
      This question applies Natural Language Processing (NLP) to find semantically anomalous commands. Legitimate Emond rules typically perform a limited set of administrative tasks. Using topic modeling (like LDA), we can cluster these commands into benign topics. A new command that does not fit any existing topic or forms a new, suspicious topic (e.g., related to networking or data exfiltration) can be flagged as anomalous, even if the command itself is not on a blocklist.
    answer_sources:
      - 'macOS file integrity monitoring logs for /etc/emond.d/rules/'
      - 'EDR file content inspection logs'
      - 'File Integrity Monitoring (FIM) solution'
      - 'EDR agent logs on all macOS endpoints'
      - 'SIEM for content parsing and alerting'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'CORPUS = all emond rule commands from last 30 days | MODEL = LDA(CORPUS) | FOR new_command in new_emond_rule: | SCORE = MODEL.get_topic_distribution(new_command) | ALERT if score indicates an anomaly'
  - question: 'Has the Emond daemon spawned a child process, or has an Emond rule been created by an unauthorized process?'
    context: |
      This question targets two highly anomalous behaviors. The /sbin/emond daemon should not normally have child processes; any child process is a strong indicator of a rule being triggered. Furthermore, Emond rules should only be created by approved administrative tools (like configuration management) or administrators. A rule created by an unexpected process (e.g., a user's web browser) is a major red flag for compromise.
    answer_sources:
      - 'macOS process execution logs (with parent process name and path)'
      - 'macOS ESF file creation event logs (with parent process context)'
      - 'Process execution logs from all macOS endpoints aggregated in a SIEM/data lake'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH process_creation_events WHERE parent_process = "/sbin/emond"'
      - type: 'pseudocode'
        query: 'SEARCH file_creation_events WHERE path = "/etc/emond.d/rules/*" AND creating_process NOT in (approved_process_list)'
  - question: 'Is a process creating an Emond rule that has never been observed creating one before?'
    context: |
      This question leverages statistical baselining to identify suspicious rule creation activity. Over time, only a small, predictable set of processes (e.g., `jamf`, `ansible`, `bash`) should be creating Emond rules. By tracking the frequency of which processes create these rules, any new process performing this action for the first time becomes a statistical anomaly worthy of investigation.
    answer_sources:
      - 'macOS ESF file creation event logs (with parent process context)'
      - 'Process execution logs from all macOS endpoints aggregated in a SIEM/data lake'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'BASELINE process_creators for path "/etc/emond.d/rules/" over 30 days | SEARCH file_creation_events WHERE path = "/etc/emond.d/rules/*" | ALERT if creating_process NOT in baseline'
  - question: 'Has the Emond daemon spawned any child processes?'
    context: |
      This question is based on the simple, high-fidelity premise that the `/sbin/emond` process should have zero child processes during normal operation. The number of child processes over time can be modeled as a time series with an expected value of zero. Any non-zero value is a definitive anomaly, indicating an Emond rule has been triggered and executed. This provides an immediate and reliable signal for investigation.
    answer_sources:
      - 'macOS process execution logs (with parent process name and path)'
      - 'Process execution logs from all macOS endpoints aggregated in a SIEM/data lake'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'MODEL = EWMA on count of child processes for /sbin/emond per host per hour | ALERT if model predicts a non-zero value'
  - question: 'Is a process spawned by Emond executing commands associated with reconnaissance, user manipulation, or reverse shells?'
    context: |
      This question hunts for post-exploitation activity following a successful persistence attempt. Since Emond runs as root, an adversary will often use its execution context to perform privilege escalation or reconnaissance. This involves looking for specific command patterns (e.g., `whoami`, `dscl`, `bash -i`) in the command lines of processes spawned by Emond and correlating them with suspicious network activity to detect reverse shells.
    answer_sources:
      - 'macOS process execution logs (with UID, command line arguments, parent process)'
      - 'Zeek conn.log'
      - 'EDR process logs from all macOS endpoints'
      - 'Network gateway Zeek sensors'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH process_creation_events WHERE parent_process = "/sbin/emond" AND user_id = 0 | MATCH command_line against post_exploitation_regex | IF match, CORRELATE with network_logs for outbound connections to untrusted IPs'
  - question: 'Are the command-line arguments of a root process spawned by Emond unusually long?'
    context: |
      This question uses the statistical property of command length to find anomalies. Legitimate administrative commands are typically concise. Adversaries, however, may embed entire scripts or encoded payloads into the command-line arguments, resulting in an unusually long string. By baselining the typical length of root command arguments, we can flag Emond-spawned commands that are statistical outliers, potentially indicating a hidden payload.
    answer_sources:
      - 'macOS process execution logs (with UID, command line arguments, parent process)'
      - 'EDR process logs from all macOS endpoints'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH process_creation_events WHERE parent_process = "/sbin/emond" AND user_id = 0 | CALCULATE length of command_line_args | ALERT if length > 98th_percentile_of_system_root_commands'
  - question: 'Does a root process spawned by Emond behave differently from all known-benign root processes?'
    context: |
      This question employs machine learning for high-fidelity anomaly detection. A one-class SVM is trained exclusively on the features of known-good root processes. When a new process is spawned by Emond, this model can determine if it fits the profile of "normal." If the model classifies the process as an outlier, it is a strong indication of a novel or unknown attack pattern that doesn't rely on specific signatures.
    answer_sources:
      - 'macOS process execution logs (with UID, command line arguments, parent process)'
      - 'EDR process logs from all macOS endpoints'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'MODEL = OneClassSVM trained on benign root process features | FOR new_process where parent is /sbin/emond: | PREDICT with MODEL | ALERT if prediction is "outlier"'
  - question: 'Has a new Emond rule been created that contains commands for privilege escalation?'
    context: |
      This question involves deep content inspection of Emond rules at the time of their creation. The goal is to proactively detect privilege escalation attempts before they are executed. By parsing the `.plist` file and using regular expressions to search for commands known to be used for this purpose (e.g., `dscl` to create users, `visudo` to edit sudoer permissions, `chmod` on sensitive files), a critical alert can be generated immediately.
    answer_sources:
      - 'macOS file integrity monitoring logs'
      - 'EDR file content inspection logs for /etc/emond.d/rules/'
      - 'SIEM for content analysis and correlation'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'SEARCH file_creation_events WHERE path = "/etc/emond.d/rules/*.plist" | PARSE content | ALERT if content matches regex for privilege_escalation_commands (dscl, visudo, etc.)'
  - question: 'Does a new Emond rule have a high risk score based on statistically rare characteristics?'
    context: |
      This question operationalizes threat hunting by assigning a quantitative risk score to new Emond rules. Instead of a single binary alert, this method combines multiple weak signals into a stronger indicator. Points are awarded for various suspicious but not definitively malicious properties (e.g., a never-before-seen command, targeting a rarely modified file). If the cumulative score crosses a predefined threshold, it suggests the rule is highly anomalous and warrants investigation.
    answer_sources:
      - 'macOS file integrity monitoring logs'
      - 'EDR file content inspection logs for /etc/emond.d/rules/'
      - 'SIEM for content analysis and correlation'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'ON new_emond_rule: | SCORE = 0 | IF command_is_new THEN SCORE += 5 | IF target_path_is_rare THEN SCORE += 10 | IF arg_count_is_outlier THEN SCORE += 3 | IF SCORE > 10 THEN ALERT'
  - question: 'Has a low-privilege process created an Emond rule that subsequently modified a high-privilege system resource?'
    context: |
      This question uses graph-based analysis to trace the entire attack path of a privilege escalation. By modeling system events as a graph (nodes = entities, edges = actions), we can visualize and detect the chain of events where a non-privileged process writes an Emond rule, which, due to its root execution context, then modifies a sensitive system file or user. Detecting this specific path across the graph is a powerful way to uncover a sophisticated privilege escalation.
    answer_sources:
      - 'macOS file integrity monitoring logs'
      - 'EDR file content inspection logs for /etc/emond.d/rules/'
      - 'SIEM for content analysis and correlation'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'BUILD system_activity_graph from process, file, user events | SEARCH for path: (low_priv_process) -> [writes_rule] -> (emond_rule_file) -> [executes_command] -> (high_priv_resource) | ALERT on path detection'
  - question: 'Has a new user been added or a new LaunchDaemon created shortly after a new Emond rule was triggered?'
    context: |
      This question uses stateful correlation to detect a specific, multi-stage attack pattern indicative of privilege escalation and persistence. An adversary might create an Emond rule whose sole purpose is to establish a more permanent foothold, such as creating a new admin user or a LaunchDaemon. By looking for this specific sequence of events (Emond rule write -> Emond process spawn -> user creation/LaunchDaemon write) on the same host within a short time window, we can detect the attack with high confidence.
    answer_sources:
      - 'macOS ESF file creation event logs'
      - 'macOS process execution logs (with process lineage)'
      - 'macOS Unified Logs for user/group management events'
      - 'Centralized SIEM platform capable of stateful, cross-source event correlation'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'CORRELATE across 5 minutes on same host: (Event A: file write to /etc/emond.d/rules/) FOLLOWED BY (Event B: process create with parent /sbin/emond) FOLLOWED BY (Event C: dscl admin user add OR file write to /Library/LaunchDaemons/) WHERE process(C) is descendant of process(B) | ALERT on correlation'
  - question: 'Did a process spawned by Emond generate an anomalously high number of security-relevant events?'
    context: |
      This question aims to identify malicious Emond-triggered activity by its downstream impact. While a single action might seem benign, a flurry of subsequent security-relevant events (like writing to system directories, managing users, or making network connections) is suspicious. By baselining the normal number of such follow-on events for typical system processes, we can flag an Emond-spawned process that generates a statistically significant excess of these events as potentially malicious.
    answer_sources:
      - 'macOS ESF file creation event logs'
      - 'macOS process execution logs (with process lineage)'
      - 'macOS Unified Logs for user/group management events'
      - 'Centralized SIEM platform'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'FOR each process spawned by /sbin/emond: | COUNT security_events (file writes to system dirs, user management, network conns) in next 10 mins | ALERT if count > 3 standard deviations above system_wide_baseline'
  - question: 'Does the sequence of system events following an Emond rule creation match a known-malicious pattern?'
    context: |
      This question uses advanced sequence analysis with machine learning (like an RNN) to detect malicious behavior. The model is trained on vast amounts of event sequences from normal host activity to learn what "benign" looks like. When a new sequence of events occurs in real-time (e.g., a process writes an Emond rule, Emond spawns a new process, that process creates an admin user), the model can score its probability. A sequence that is highly improbable or anomalous according to the model is flagged as a potential threat.
    answer_sources:
      - 'macOS ESF file creation event logs'
      - 'macOS process execution logs (with process lineage)'
      - 'macOS Unified Logs for user/group management events'
      - 'Centralized SIEM platform'
    range: 'last 90 days'
    queries:
      - type: 'pseudocode'
        query: 'MODEL = RNN trained on benign system event sequences | STREAM real-time event sequences into model | ALERT if anomaly_score for a sequence is high'