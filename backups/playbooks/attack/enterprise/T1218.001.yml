name: 'T1218.001: Compiled HTML File'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: |
  This playbook is designed to detect adversaries evading defenses by using malicious Compiled HTML (CHM) files. The investigation focuses on identifying CHM files with known malicious hashes that lead to C2 communication, analyzing hh.exe command-line arguments for suspicious patterns like script execution or obfuscation, detecting unusual child processes spawned by hh.exe (such as shells or scripting engines), correlating hh.exe execution with subsequent suspicious file drops and executions, and flagging CHM files executed from non-standard or high-risk locations like download or temp folders.
type: 'technique'
related:
  - 'TA0005: Defense Evasion'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'How can I detect if a CHM file with a known malicious hash is executed and its process chain communicates with a known command and control server?'
    context: |
      This question aims to identify a high-confidence attack chain. An adversary uses a known malicious CHM file, which, upon execution via hh.exe, initiates network communication to a command and control (C2) server. Correlating a malicious file hash with subsequent C2 traffic from the same process lineage provides a strong signal of compromise.
    answer_sources:
      - 'Zeek files.log'
      - 'Windows Event ID 4663'
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Endpoint devices, Email gateway, Web proxy/gateway, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Correlate file hash from file logs (Zeek, Win 4663) against TI feed. If match, track hh.exe process (Win 4688) and its children. Correlate child process network connections (Zeek conn/dns) against C2 TI feed. Alert on double match.'
  - question: 'Are child processes of hh.exe making network connections to rare or suspicious destinations?'
    context: |
      This question helps uncover previously unknown malicious infrastructure. Instead of relying solely on known bad indicators, it uses statistical and heuristic analysis. Adversaries often use newly registered domains or infrastructure that is not commonly accessed by the organization. Analyzing destination rarity, domain age, IP reputation, and domain name entropy (for DGA detection) can surface these suspicious connections.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Endpoint devices, DNS servers, Network Security Monitoring (NSM) sensor, Threat Intelligence Platform'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: For child processes of hh.exe (Win 4688), analyze network connections (Zeek conn/dns). Calculate rarity of destination IP/domain/ASN against a 30-day baseline. Check domain age and IP reputation. Calculate domain entropy. Alert on rare/suspicious findings.'
  - question: 'Can a machine learning model classify hh.exe process chains as malicious based on their behavioral features?'
    context: |
      This question explores a more advanced, automated detection method. By training a supervised model (like Random Forest) on a rich set of features (process lineage, network stats, domain info), it is possible to automatically identify complex malicious patterns that are difficult to capture with simple rules. This helps scale detection efforts and find novel attack variations.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Zeek conn.log'
      - 'Zeek dns.log'
      - 'Endpoint devices, DNS servers, Network Security Monitoring (NSM) sensor'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Train a classification model using features from hh.exe process chains (Win 4688) and network logs (Zeek conn/dns). Features: process depth, child rarity, port, IP reputation, domain age/entropy, bytes transferred. Use the model to classify new activity and alert on `malicious` predictions.'
  - question: 'Is hh.exe being executed with command-line arguments that indicate malicious activity, such as remote resource fetching or script execution?'
    context: |
      This question targets the initial execution vector. Adversaries often abuse hh.exe command-line features to execute code directly from a CHM file or to fetch remote content. Searching for specific protocol handlers (ms-its:, mk:@MSITStore:) or embedded scripts (javascript:, http:) in the command line is a direct way to detect this misuse.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Search process logs (Win 4688) for `Process Name: hh.exe`. Apply regex to command line for patterns like `ms-its:`, `mk:@MSITStore:`, `javascript:`, `vbscript:`, `http`, `https`. Alert on match.'
  - question: 'Are there any hh.exe executions with unusually complex or obfuscated command-line arguments?'
    context: |
      This question aims to detect obfuscation techniques. Adversaries may try to hide malicious commands within long, randomized, or encoded strings to evade simple signature-based detections. High Shannon entropy in a command line is a strong indicator of such obfuscation. By baselining normal hh.exe command-line entropy, we can flag outliers that warrant investigation.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: For each hh.exe execution (Win 4688), calculate Shannon entropy of the command line. Compare score to a 30-day baseline of normal hh.exe command lines. Alert if entropy exceeds the 95th percentile.'
  - question: 'Can an unsupervised machine learning model identify anomalous hh.exe command-line arguments that deviate from normal behavior?'
    context: |
      This question leverages machine learning to find "unknown unknowns" in command-line abuse. An unsupervised model like Isolation Forest can learn the structure of normal hh.exe commands without needing pre-labeled malicious examples. It can then flag any command that is structurally different (e.g., unusual length, character distribution, keyword usage), making it effective against novel obfuscation and evasion techniques.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices (workstations and servers), Active Directory domain controllers (for centralized logging), Log Aggregation Platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Train an anomaly detection model (e.g., Isolation Forest) on features from benign hh.exe command lines (length, arg count, char frequency, keywords). Use the model to score new command lines and alert on anomalous outliers.'
  - question: 'Is hh.exe spawning suspicious child processes like command shells or scripting engines?'
    context: |
      The primary purpose of hh.exe is to display help files; it should not typically launch other programs, especially powerful tools like PowerShell or Command Prompt. An adversary can use a malicious CHM file to make hh.exe spawn these processes to execute further commands. This question looks for this explicit and high-fidelity indicator of malicious activity by checking for a denylisted set of child processes.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices, Critical servers, Log aggregation platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Search process logs (Win 4688) for `Parent Process: hh.exe`. Check if `Child Process` is in denylist (cmd.exe, powershell.exe, wscript.exe, etc.). Alert on match.'
  - question: 'Are there any rare or uncommon child processes being spawned by hh.exe across the enterprise?'
    context: |
      This question aims to find suspicious activity without relying on a fixed denylist. By analyzing the frequency of all hh.exe child processes across the entire organization, we can identify statistical outliers. A process that is launched by hh.exe on only a handful of machines is highly suspicious and could represent a targeted attack or a novel tool, even if the process itself is not on a standard denylist.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices, Critical servers, Log aggregation platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Aggregate all `hh.exe -> child process` relationships over 30 days. Calculate the prevalence of each unique child process across the endpoint population. Alert if a child process is seen on less than 1% of endpoints (and is not on an allowlist).'
  - question: 'Can graph analysis identify anomalous process chains originating from hh.exe?'
    context: |
      This question applies advanced analytics to model process behavior. By representing all process creations as a large graph, we can use algorithms to find "communities" of normal activity. A malicious process chain, such as hh.exe launching PowerShell to download and run a script, will likely form a small, isolated chain that does not fit into any large, common community. This makes it a structural anomaly that can be flagged for investigation.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Endpoint devices, Critical servers, Log aggregation platform (SIEM)'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Build a process relationship graph from Win 4688 data. Apply a community detection algorithm. Identify process chains starting with hh.exe that are not part of large, known communities. Alert on these structural anomalies.'
  - question: 'Is hh.exe being used to drop and then immediately execute a new script or executable file?'
    context: |
      This question targets a common attack sequence where a malicious document or initial payload is used to stage the next part of the attack. A malicious CHM file might contain code that writes a new file (e.g., a PowerShell script or an EXE) to a temporary directory and then executes it. Correlating hh.exe execution with a subsequent file write and then the execution of that new file within a short time window is a very strong indicator of a multi-stage payload delivery.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 4663'
      - 'User workstations, File servers, Application servers hosting user-writable directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Correlate events in a 120s window: 1) hh.exe process start (Win 4688), 2) file create/write event for a risky extension (.exe, .ps1, etc.) in a temp/user dir (Win 4663), 3) process start for the newly created file (Win 4688). Alert on this sequence.'
  - question: 'Is hh.exe creating any executable or script files, which would be anomalous behavior?'
    context: |
      This question simplifies the detection logic by focusing on a single, highly anomalous behavior. Legitimate use of hh.exe should not involve creating new executable or script files. By defining a "suspicious file drop score" and knowing that the baseline for hh.exe is zero, any instance where hh.exe drops such a file is an immediate and significant red flag, representing a major deviation from normal behavior.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 4663'
      - 'User workstations, File servers, Application servers hosting user-writable directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Monitor file creation events (Win 4663) where the creating process is hh.exe. If the created file has a script/executable extension (.exe, .dll, .ps1, .bat), this is an anomaly. Alert immediately.'
  - question: 'Can a time-series model detect the anomalous sequence of events associated with a malicious CHM file dropping and executing a payload?'
    context: |
      This question proposes a sophisticated, host-centric detection method. An LSTM autoencoder or similar model can be trained on typical sequences of events (process starts, file writes, etc.) on a user's machine. The malicious sequence of hh.exe starting, writing an executable to a temp folder, and that executable then running is a pattern that the model would not have seen in benign training data. This would result in a high "reconstruction error," flagging the sequence as a novel and suspicious anomaly without needing predefined rules.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Windows Event ID 4663'
      - 'User workstations, File servers, Application servers hosting user-writable directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Train a time-series anomaly model (e.g., LSTM) on normal host event sequences (process/file events). Feed live host events into the model. Alert if the sequence involving hh.exe, file write, and new process execution causes a high reconstruction error.'
  - question: 'Are CHM files being executed from non-standard or high-risk locations like download folders, temp directories, or email attachment caches?'
    context: |
      This question focuses on the delivery vector. Legitimate help files are typically located in program or system directories. CHM files delivered to a user via phishing or a malicious download will be executed from user-writable locations like the Downloads folder, temporary internet files, or an Outlook cache. Creating a detection rule that looks for hh.exe launching a CHM from these denylisted high-risk paths is an effective way to catch user-executed malicious files.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User workstations (specifically profile directories), Email client cache directories, Web browser download directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: From hh.exe process logs (Win 4688), extract the .chm file path from the command line. Use regex to check if the path matches a denylist of risky locations (e.g., `\Downloads`, `\AppData\Local\Temp`, `\INetCache`). Alert on match.'
  - question: 'Are there any CHM files being executed from rare or unique file paths across the organization?'
    context: |
      This question uses enterprise-wide statistical analysis to find outlier execution paths. While some legitimate third-party applications might place CHM files in non-standard locations, these paths would likely be common across multiple installations. A malicious CHM file executed from a user''s desktop or a randomly named folder in %APPDATA% would be unique or extremely rare across the enterprise. Identifying these rare paths, especially outside of standard program directories, helps to surface suspicious activity.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User workstations (specifically profile directories), Email client cache directories, Web browser download directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Aggregate all .chm execution paths from hh.exe command lines over 30 days. Calculate the frequency/prevalence of each path. Alert on paths outside standard directories (C:\Windows\Help, C:\Program Files) that are seen on <1% of endpoints.'
  - question: 'Can a machine learning model classify the execution path of a CHM file as suspicious or benign?'
    context: |
      This question applies machine learning to the problem of path analysis. By training a simple classifier like Naive Bayes on features extracted from file paths (e.g., path depth, presence of keywords like `Temp` or `Download`, location in a user profile vs. a system directory), the model can learn to distinguish between legitimate and potentially malicious locations. This provides an automated way to score and prioritize alerts based on the likelihood that an execution path is associated with malicious activity.
    answer_sources:
      - 'Windows Event ID 4688'
      - 'User workstations (specifically profile directories), Email client cache directories, Web browser download directories'
    range: 'last 90 days'
    queries:
      - 'Pseudocode: Train a Naive Bayes classifier on path features from known-good .chm files (path depth, keywords like `Temp`, user vs. system directory). Use the model to classify new .chm execution paths and alert on those classified as `suspicious-like`.'