name: T1195.002: Compromise Software Supply Chain
id: 2b9a7c3d-1f5e-4b8a-9c7d-03f1e5a6b2c1
description: |
  This playbook helps determine if an adversary has gained initial access by compromising a software supply chain. This involves investigating whether downloaded executables match known malicious signatures or originate from untrusted sources; if new executables are unsigned, have invalid signatures, or are signed by rare or disreputable publishers; if legitimate software updates exhibit suspicious statistical deviations from their historical norms; if known updater processes connect to unauthorized network locations; if suspicious follow-on actions (like persistence) occur immediately after a software update; or if unauthorized processes modify executable files in trusted software directories.
type: technique
related:
  - TA0001: Initial Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a newly observed executable file matched a known malicious hash, or was it downloaded from a known malicious IP address or domain?
    context: |
      This question focuses on detecting known threats at the point of entry. It involves implementing real-time monitoring of new executables (from network downloads or process creation events) and network connections. By calculating the file's hash and checking it, along with the source IP and hostname, against threat intelligence feeds, analysts can immediately identify and respond to downloads of known malware or connections to malicious infrastructure.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - Web Proxies
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new executable OR process:
            GET file_hash, source_ip, source_domain
            QUERY file_hash, source_ip, source_domain AGAINST threat_intelligence_feeds
            IF match_found:
              ALERT HighSeverity:"Known malicious file or source detected"
  - question: Is an executable file being downloaded from a statistically rare or previously unseen source IP address or domain?
    context: |
      This question aims to identify potential zero-day threats or novel attack infrastructure by focusing on the rarity of the source. By profiling all executable downloads and baselining the source IPs and domains over 90 days, this method identifies sources that have rarely or never been seen serving executables to the enterprise. A source falling into a high rarity percentile (e.g., 99th) is treated as a risk indicator, triggering an alert for analyst review, as legitimate software is typically served from consistent, well-known sources.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - Web Proxies
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each executable_download:
            GET source_ip, source_domain
            CALCULATE historical_frequency of source over last 90 days
            IF source in 99th_percentile_for_rarity:
              ALERT "Suspicious executable from rare source"
  - question: Does a machine learning model classify a new file download as likely malicious based on its network and file characteristics?
    context: |
      This question leverages machine learning to detect novel threats that do not have a known signature. A supervised classification model is trained on a wide range of features extracted from network logs (e.g., user-agent, MIME type, connection duration, TLS/SSL fingerprint, domain age). The model learns to predict the probability of a download being malicious. Any download exceeding a set probability threshold is flagged for immediate investigation, providing a predictive capability against unknown threats.
    answer_sources:
      - Zeek files.log
      - Zeek http.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - Web Proxies
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each file_download:
            EXTRACT features (user_agent, mime_type, conn_duration, ja3_hash, domain_age)
            INPUT features INTO supervised_ml_model
            IF predicted_probability > 0.85:
              ALERT "High-probability malicious download detected by ML model"
  - question: Is a newly observed executable file unsigned, does it have an invalid or expired digital signature, or is it signed by a blocklisted publisher?
    context: |
      This question verifies the authenticity and integrity of new software. Digital signatures are a primary mechanism for trusting software. This check automatically inspects new executables for the presence and validity of a digital signature. An alert is generated if a file is unsigned, has a signature that is invalid or expired, or is signed by a publisher on a manually curated blocklist of known-malicious or suspicious entities.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Application Log (CodeIntegrity Events)
      - Endpoints
      - Software Distribution Servers
      - Code Signing Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new_executable:
            VERIFY digital_signature_status
            IF is_unsigned OR is_invalid OR is_expired OR publisher_on_blocklist:
              ALERT HighPriority:"Suspicious executable signature status"
  - question: Is a new executable signed by a publisher that is new to the environment or statistically rare?
    context: |
      This question helps detect adversaries using newly created or seldom-seen code signing certificates. By maintaining a 90-day rolling baseline of all software publishers observed in the environment, this method can flag executables signed by a publisher that is either brand new or appears infrequently (e.g., in the bottom 5th percentile). Additionally, calculating the entropy of the publisher's name can identify randomly generated, suspicious names ($$ > 4.0 $$). This flags potentially malicious software that is trying to appear legitimate.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Application Log (CodeIntegrity Events)
      - Endpoints
      - Software Distribution Servers
      - Code Signing Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each signed_executable:
            GET publisher_subject_name
            CALCULATE frequency of publisher over last 90 days
            IF publisher_is_new OR frequency_in_bottom_5_percentile:
              ALERT "Executable signed by new or rare publisher"
            CALCULATE shannon_entropy of publisher_subject_name
            IF entropy > 4.0:
              ALERT "Executable signed by publisher with high-entropy name"
  - question: Does the digital certificate of a new executable exhibit anomalous features when compared to a baseline of normal certificates in the environment?
    context: |
      This question uses unsupervised machine learning to find forged or malicious certificates that are still technically valid. An anomaly detection model (like an Isolation Forest) is trained on features from all historically observed certificates (e.g., issuer, validity period, key usage). The model learns what a 'normal' certificate looks like in the enterprise. It can then identify new certificates that deviate significantly from this norm, flagging them as potential indicators of a sophisticated supply chain attack.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Application Log (CodeIntegrity Events)
      - Endpoints
      - Software Distribution Servers
      - Code Signing Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new_certificate:
            EXTRACT features (issuer, subject, validity_period, key_usage)
            INPUT features INTO anomaly_detection_model
            IF anomaly_score is_high:
              ALERT "Anomalous digital certificate detected"
  - question: Has the file hash of a critical software component changed unexpectedly after a software update or file write event?
    context: |
      This question provides a high-fidelity check on the integrity of critical system files. A 'golden image' manifest, containing known-good file hashes for essential executables and libraries (e.g., `lsass.exe`), is maintained. A monitoring rule alerts on any hash mismatch for these files following a file write or update event. This is a direct and effective way to detect unauthorized modification or tampering with core components.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Endpoints
      - File Servers
      - Software Deployment Systems
    range: last 90 days
    queries:
      - pseudocode: |
          ON file_write TO critical_file_list:
            GET file_hash
            COMPARE file_hash TO golden_image_manifest
            IF hash_mismatch:
              ALERT "Critical file integrity violation detected"
  - question: Does a new version of a software package show statistically significant changes in its file size, section entropy, or imported functions compared to historical versions?
    context: |
      This question aims to detect malicious code injected into legitimate software updates. By establishing a historical baseline for a given software's characteristics (file size, code section entropy, and imported functions via IMPHASH), this method can statistically detect significant deviations. A high Z-score ($$ > 3 $$) for size or entropy, or a low Jaccard similarity ($$ < 0.8 $$) for function imports, indicates a substantial change that could be caused by a malicious implant and warrants investigation.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Endpoints
      - File Servers
      - Software Deployment Systems
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new_software_version:
            CALCULATE file_size, section_entropy, impash
            COMPARE metrics to historical_baseline
            CALCULATE size_z_score, entropy_z_score, imports_jaccard_similarity
            IF size_z_score > 3 OR entropy_z_score > 3 OR imports_jaccard_similarity < 0.8:
              ALERT "Significant statistical deviation in software update detected"
  - question: Is the file size of a new software update an outlier compared to the forecasted size based on its update history?
    context: |
      This question uses time-series forecasting to detect abnormal changes in software updates. A model (like ARIMA or Prophet) learns the typical file size progression of an application's updates over time. If a new update's size falls significantly outside the forecast's confidence interval, it is flagged as an anomaly. This can detect unexpected file bloating that may result from a malicious payload being added to a legitimate patch.
    answer_sources:
      - Zeek pe.log
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Endpoints
      - File Servers
      - Software Deployment Systems
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new_software_update:
            GET file_size
            COMPARE file_size TO time_series_forecast_model
            IF file_size is_outside_confidence_interval:
              ALERT "Anomalous file size in software update detected"
  - question: Has a known software updater process connected to a domain or IP address that is not on its pre-approved allowlist of update servers?
    context: |
      This question is designed to detect when a legitimate updater process is hijacked or redirected. By creating and maintaining an explicit allowlist of known-good update domains and IPs for common software, any network connection from a known updater process (e.g., `TrustedInstaller.exe`) to a destination not on this list is immediately flagged. This is a highly effective method for identifying connections to unauthorized or malicious command-and-control servers.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each network_connection from known_updater_process:
            GET destination_ip, destination_domain
            CHECK if destination in updater_allowlist
            IF destination NOT in allowlist:
              ALERT "Updater process connected to unauthorized destination"
  - question: Has a known software updater process connected to a domain that is statistically rare for that specific process?
    context: |
      This question provides a dynamic alternative to static allowlisting. It involves building a historical profile of destination domains contacted by each specific software updater process over a 90-day period. When an updater queries a domain that is statistically very rare for that particular process (e.g., in the bottom 1st percentile of frequency), it generates an alert. This can detect compromised updaters connecting to novel malicious infrastructure without relying on a pre-built list.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each network_connection from known_updater_process:
            GET destination_domain
            CALCULATE historical_frequency of domain for this process
            IF frequency_in_bottom_1_percentile:
              ALERT "Updater process connected to statistically rare domain"
  - question: Does a network connection from a software updater exhibit anomalous characteristics (port, protocol, data volume, etc.) that cause it to be flagged as an outlier by a clustering model?
    context: |
      This question uses unsupervised machine learning to detect abnormal network behavior from updater processes. A clustering algorithm (like DBSCAN) groups normal network connections based on a set of features (destination IP/port, protocol, data volume, JA3 hash). Any new connection that does not fit into an existing cluster is classified as noise or an outlier. This can identify a compromised updater communicating with a C2 server using a non-standard port or protocol.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Network Egress Points
      - DNS Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each network_connection from known_updater_process:
            EXTRACT features (dest_ip, dest_port, protocol, volume, ja3)
            INPUT features to clustering_model
            IF connection is_classified_as_noise_or_outlier:
              ALERT "Anomalous network behavior from updater process detected"
  - question: Did a process spawned by a software installer or updater perform a high-risk follow-on action, such as creating persistence or launching a scripting engine, shortly after execution?
    context: |
      This question aims to detect malicious payloads delivered via trojanized installers. A correlation rule is created to monitor the actions of processes spawned by known installers (`msiexec.exe`) or updaters. If, within a short time window, a child process performs a high-risk action like creating a scheduled task, modifying a registry run key, or spawning a scripting engine (especially with an encoded command), an alert is triggered. Legitimate installers typically do not perform such actions immediately.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Zeek conn.log
      - Zeek dns.log
      - Endpoints
      - Domain Controllers
      - Active Directory
    range: last 90 days
    queries:
      - pseudocode: |
          IF process is_child_of_installer_or_updater:
            MONITOR child_process for 5 minutes
            IF child_process creates_scheduled_task OR modifies_run_key OR spawns_script_engine:
              ALERT "High-risk follow-on action after software installation"
  - question: Did a software updater process spawn a child process that is statistically rare or unexpected based on historical data?
    context: |
      This question uses probabilistic analysis to detect anomalous process lineage. By continuously profiling parent-child process relationships, a model of normal behavior is built. This model calculates the conditional probability $$ P(\text{child} | \text{parent}) $$ for all observed relationships. If an updater process spawns a child that has a very low probability (e.g., $$ P(\text{cmd.exe} | \text{SomeUpdater.exe}) < 0.01 $$), the activity is flagged as a statistical anomaly, indicating a likely deviation from normal execution flow.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Zeek conn.log
      - Zeek dns.log
      - Endpoints
      - Domain Controllers
      - Active Directory
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new parent_child_process_relationship:
            CALCULATE conditional_probability P(child|parent) from baseline
            IF probability < 0.01:
              ALERT "Statistically rare child process spawned by updater"
  - question: Does the sequence of host events (process creation, registry access, network connections) following a software update deviate significantly from the normal, learned sequence for that update?
    context: |
      This question applies advanced anomaly detection to the sequence of events following a software update. A sequence-based model, such as an LSTM Autoencoder, is trained on the typical patterns of host activity (processes, registry modifications, network connections) that occur after legitimate updates. During inference, if the sequence of events following a new update has a high reconstruction error, it means the activity pattern is significantly different from normal, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Zeek conn.log
      - Zeek dns.log
      - Endpoints
      - Domain Controllers
      - Active Directory
    range: last 90 days
    queries:
      - pseudocode: |
          CAPTURE sequence_of_host_events post-update
          INPUT sequence INTO LSTM_autoencoder_model
          CALCULATE reconstruction_error
          IF reconstruction_error > threshold:
            ALERT "Anomalous sequence of events detected post-update"
  - question: Was a library or executable file in a protected application directory modified by a process that is not an authorized installer or updater?
    context: |
      This question focuses on file integrity monitoring in critical directories like 'Program Files'. By enabling file system auditing (SACL) to log write access (Event ID 4663), an alert can be triggered whenever a .dll or .exe file is modified. The rule's fidelity is increased by checking if the process performing the write is on an explicit allowlist of trusted installers (`msiexec.exe`, `TrustedInstaller.exe`, etc.). Any write by an unlisted process is considered unauthorized tampering.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Critical System Directories (e.g., System32, Program Files)
      - Application Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          ON file_write_event in protected_directory:
            GET writing_process_name, target_file_name
            IF target_file is .dll or .exe AND writing_process NOT in trusted_installer_allowlist:
              ALERT "Unauthorized process modified protected file"
  - question: Has a statistically rare process (e.g., notepad.exe) written to a file in a protected application directory?
    context: |
      This question enhances file integrity monitoring with statistical analysis. Instead of a static allowlist, it establishes a baseline of all processes that normally write to protected application directories and calculates their frequency. If a process that is statistically rare in this context (e.g., in the bottom 5th percentile, like `notepad.exe`) performs a write to a protected file, it's a strong indicator of suspicious activity, as such processes are not typically involved in software patching.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Critical System Directories (e.g., System32, Program Files)
      - Application Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          ON file_write_event in protected_directory:
            GET writing_process_name
            CALCULATE historical_frequency of writing_process for this directory
            IF frequency_in_bottom_5_percentile:
              ALERT "Statistically rare process wrote to protected directory"
  - question: Does a graph-based model detect an anomalous interaction, such as an unexpected process writing to a protected file?
    context: |
      This question applies graph-based anomaly detection to model system-wide interactions. Processes and files are represented as nodes, and interactions like 'writes to' are represented as directed edges. The model learns the normal structure of this graph across the enterprise. A compromised supply chain component could manifest as a new, structurally anomalous edge—for instance, a web server process directly writing to a core OS DLL. The model would flag this unusual relationship as a potential indicator of tampering.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Critical System Directories (e.g., System32, Program Files)
      - Application Servers
      - Endpoints
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL process_file_interactions as a graph
          ON new_file_write_interaction:
            CREATE edge between process_node and file_node
            ANALYZE edge in context of graph structure
            IF edge is a structural_anomaly:
              ALERT "Anomalous process-file interaction detected by graph model"