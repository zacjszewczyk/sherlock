name: T1037: Boot or Logon Initialization Scripts
id: b9f5f8a0-6b7c-4a1d-8e9f-0a1b2c3d4e5f
description: |
  This playbook provides investigative guidance for detecting adversaries who have established persistence or escalated privileges by modifying or creating boot or logon initialization scripts (MITRE ATT&CK Technique T1037). It covers indicators such as script interpreters making suspicious outbound network connections, command-line arguments containing obfuscation or known malicious commands, unauthorized modifications to script files, execution of unsigned or rare processes from logon scripts, and attempts to access sensitive resources like LSASS memory or critical system files. The goal is to identify persistence and privilege escalation activities leveraging this technique.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a script process launched during logon or startup connecting to a known command-and-control (C2) IP address?
    context: |
      This question seeks to identify classic C2 beaconing behavior. When a logon or startup script launches another process (like PowerShell), and that process immediately makes an outbound network connection, it could be a persistence mechanism checking in with its controller. Correlating the destination IP with threat intelligence is a high-fidelity way to confirm malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - Enterprise Workstations
      - Internet Gateway/Egress Points
      - DNS Resolvers
    range: last 90 days
    queries: |
      SEARCH process creation events (Event 4688) WHERE parent_process IN ('userinit.exe', 'services.exe')
      | JOIN network connection events (conn.log) on process_id
      | JOIN C2_threat_intel_list on destination_ip
      | RETURN matching events.
  - question: Is a script process launched during logon or startup connecting to a geographically or organizationally rare network destination?
    context: |
      Adversaries often use infrastructure in locations or autonomous systems (ASNs) not typically contacted by the organization. By identifying destination ASN/country pairs that are statistically rare compared to a 30-day baseline, this question helps uncover novel C2 infrastructure that may not yet be on a threat intelligence feed.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - Enterprise Workstations
      - Internet Gateway/Egress Points
      - DNS Resolvers
    range: last 90 days
    queries: |
      SEARCH network connections from logon-script-spawned processes
      | ENRICH destination_ip with ASN and geo-location
      | CALCULATE frequency of (ASN, country) pair over last 30 days
      | ALERT if current pair frequency is in bottom 1% of baseline.
  - question: Does the network traffic from a logon script-spawned process exhibit a 'heartbeat' pattern characteristic of C2 beaconing?
    context: |
      C2 implants often communicate with their controllers on a regular, automated schedule (e.g., every 5 minutes) with small, consistent data payloads. This question uses time-series analysis to detect such periodic 'heartbeat' signals in the connection frequency and data volume, which are strong indicators of automated C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Domain Controllers
      - Enterprise Workstations
      - Internet Gateway/Egress Points
      - DNS Resolvers
    range: last 90 days
    queries: |
      FOR each destination_ip from logon-script-spawned processes
      | CREATE time-series of byte_count and connection_frequency
      | APPLY ARIMA or similar model to detect periodicity
      | ALERT on statistically significant periodic patterns.
  - question: Does the command line of a script executed at logon contain explicit persistence commands or common PowerShell obfuscation flags?
    context: |
      This question looks for direct evidence of an adversary attempting to establish or hide their persistence mechanism. The presence of keywords for creating scheduled tasks, modifying run keys, or using PowerShell's built-in encoding features within a logon script's command line is a strong indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      SEARCH process creation events (Event 4688) for script interpreters
      | REGEX_SEARCH CommandLine for keywords ('schtasks', 'reg add', 'HKCU\\...\\Run', '-EncodedCommand', '[Convert]::FromBase64String')
      | ALERT on match.
  - question: Does the command line of a script executed at logon have an unusually high level of randomness (entropy)?
    context: |
      Adversaries often encode or encrypt their commands to evade simple keyword-based detection. This results in command-line strings that appear random and have high entropy. By comparing the entropy of a given command line to a baseline of normal script commands, this question can detect obfuscated payloads without needing to know the specific obfuscation method.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      FOR each script execution event (Event 4688)
      | CALCULATE Shannon entropy of CommandLine field
      | COMPARE to baseline average and standard deviation
      | ALERT if entropy > (mean + 3*std_dev).
  - question: Does the command line of a script executed at logon appear malicious based on a machine learning model?
    context: |
      This question uses a supervised machine learning model, trained on known good and bad command lines, to score new commands. This approach can identify complex patterns and combinations of features that are indicative of maliciousness but might be missed by simple keyword or entropy checks, providing a more robust and adaptable detection method.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      FOR each script execution event (Event 4688)
      | VECTORIZE CommandLine using pre-trained TF-IDF model
      | APPLY pre-trained logistic regression classifier
      | ALERT if predicted malicious probability > 0.85.
  - question: Was a known logon or startup script file modified by an unauthorized user or an unapproved process?
    context: |
      Logon scripts are critical files that should only be modified by specific administrators or through approved change management tools (like Group Policy Management Console). This question aims to detect unauthorized changes by checking if the user or process that modified the script file is on a pre-defined whitelist. A modification from an unexpected source is highly suspicious.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share)
      - File Servers hosting roaming profiles
      - Enterprise Workstations
    range: last 90 days
    queries: |
      SEARCH file modification events (Event 4663, Accesses: WriteData) for logon script paths
      | CHECK if modifying user_account OR parent_process is in whitelist
      | ALERT on non-whitelisted modification.
  - question: Was a logon script modified at an unusual time or by a user who has never modified it before?
    context: |
      Adversaries may modify logon scripts outside of normal business hours to avoid detection. This question establishes a baseline of normal modification activity (who, when) and uses statistical analysis (z-scores) to flag significant deviations. A modification at 3 AM by an account that has never touched the file before is a strong anomaly.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share)
      - File Servers hosting roaming profiles
      - Enterprise Workstations
    range: last 90 days
    queries: |
      FOR each logon script modification event
      | COMPARE modification time and user_account to historical baseline
      | CALCULATE z-score for time and user frequency
      | ALERT if z-score > 3.
  - question: Does a recent modification to a logon script deviate from the pattern of normal, legitimate changes?
    context: |
      This question employs an unsupervised machine learning model to learn the complex, multi-dimensional profile of 'normal' modification events (e.g., user, source IP, time of day, parent process). It can then identify any new modification that does not fit this learned profile, flagging it as an outlier without requiring pre-defined rules or whitelists.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 4688
      - Domain Controllers (SYSVOL share)
      - File Servers hosting roaming profiles
      - Enterprise Workstations
    range: last 90 days
    queries: |
      FOR each logon script modification event
      | CREATE feature vector (user, source_ip, time, process)
      | APPLY pre-trained one-class SVM or isolation forest model
      | ALERT if event is classified as an outlier.
  - question: Did a logon script launch an unsigned process from a non-standard or user-writable directory?
    context: |
      Legitimate software launched by logon scripts is typically signed by a trusted publisher and located in a protected system directory. Adversaries often drop their tools into world-writable locations like C:\Users\Public or %TEMP% and use unsigned executables. This question looks for this suspicious combination of an unsigned binary running from an unusual location.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      SEARCH process creation events (Event 4688) with logon script host as parent
      | CHECK if process is digitally signed AND if process_path is in suspicious directory list
      | ALERT if process is unsigned AND path is suspicious.
  - question: Did a logon script launch a child process that has never been seen before in the environment?
    context: |
      Over time, logon scripts tend to launch a predictable set of child processes. This question involves baselining all normal parent-child relationships originating from logon scripts. Any new or extremely rare relationship (e.g., userinit.exe launching `totally_not_malware.exe`) is flagged as a potential indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      FOR each logon script child process event
      | CALCULATE historical frequency of the (parent_process, child_process) pair
      | ALERT if pair has never been seen or frequency is in bottom 1%.
  - question: Does a child process launched by a logon script have anomalous characteristics compared to normal child processes?
    context: |
      This question uses an autoencoder, a type of neural network, to learn a compressed representation of 'normal' child process attributes (e.g., path, command line length, parent). When a new process event is fed to the model, a high reconstruction error indicates that its attributes are dissimilar to the learned norm and is therefore anomalous.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Application Servers
    range: last 90 days
    queries: |
      FOR each logon script child process event
      | CREATE feature vector (path_depth, cmd_length, etc.)
      | APPLY pre-trained autoencoder model
      | ALERT if reconstruction error is above threshold.
  - question: Does the command line of a logon script-spawned process contain keywords for known privilege escalation or credential dumping tools?
    context: |
      This is a direct-detection question that hunts for known-bad strings. By using regular expressions to search command lines for names of tools like 'PsExec.exe -s', 'mimikatz', or commands like 'net localgroup administrators... /add', we can quickly identify blatant attempts to escalate privileges or dump credentials.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Servers with local administrator accounts
    range: last 90 days
    queries: |
      SEARCH process creation events (Event 4688) from logon scripts
      | REGEX_SEARCH CommandLine for privilege escalation tool names and commands
      | ALERT on match.
  - question: Does a logon script's command line contain a high concentration of terms that are statistically rare in our environment but common in malicious activity?
    context: |
      This question moves beyond simple keyword matching. By using TF-IDF, it identifies command-line arguments that are rare internally (high IDF) but appear in the command (high TF). When these rare terms are known to be associated with malicious tools (e.g., 'lsass', '-accepteula'), their presence is a strong statistical indicator of an attack.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Servers with local administrator accounts
    range: last 90 days
    queries: |
      FOR each logon script command line
      | CALCULATE TF-IDF scores for terms based on enterprise-wide and threat-intel corpuses
      | ALERT if command contains a high concentration of high-risk, high-IDF terms.
  - question: Does a machine learning model classify a command line from a logon script as a likely privilege escalation attempt?
    context: |
      This question leverages a powerful classification model (like XGBoost) trained on labeled examples of benign and malicious commands. The model learns complex, non-linear relationships between command features (n-grams, length, etc.) and can provide a probabilistic score of maliciousness, enabling more nuanced and accurate detection of novel or sophisticated privilege escalation attempts.
    answer_sources:
      - Windows Event ID 4688
      - Domain Controllers
      - Enterprise Workstations
      - Servers with local administrator accounts
    range: last 90 days
    queries: |
      FOR each logon script command line
      | APPLY pre-trained XGBoost classification model
      | ALERT if predicted probability of privilege escalation is above threshold.
  - question: Has a script recently modified a service's binary path in the registry and then immediately started that service?
    context: |
      This question hunts for a specific, multi-stage attack pattern known as 'Service Execution' or 'Path Interception'. An adversary modifies a legitimate service to point to their malware and then starts the service to execute their code, often with system privileges. Detecting this exact sequence of events in a short time window is a high-fidelity indicator of privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - Application Servers
      - Enterprise Workstations
    range: last 90 days
    queries: |
      CORRELATE events on a single host within a 2-minute window: (1) Script process creation (4688), THEN (2) Registry write to service ImagePath (4657), THEN (3) Service start for the same service (7036)
      | ALERT on sequence completion.
  - question: Was a service's configuration (ImagePath) modified by a process that does not normally do so, particularly a script interpreter?
    context: |
      Service configurations are sensitive and should only be changed by a small, predictable set of processes (e.g., `services.exe`, `sc.exe`). This question establishes a baseline of which processes are allowed to modify service ImagePaths. A modification by a process with a very low historical probability of doing so, like `powershell.exe`, is a strong anomaly indicating potential hijacking.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - Application Servers
      - Enterprise Workstations
    range: last 90 days
    queries: |
      FOR each service ImagePath registry modification (4657)
      | LOOKUP historical probability of the modifying process making this change
      | ALERT if probability is < 0.01%, especially if it is a script interpreter.
  - question: Did a sequence of system events, including a script execution and service modification, occur in a pattern that is statistically unlikely based on normal behavior?
    context: |
      This question uses an HMM to learn the normal 'grammar' of system event sequences. The model understands which events typically follow others. An anomalous sequence, like a script execution followed by a rare registry write, will have a low probability according to the model, allowing for the detection of unusual attack chains that might not fit a rigid correlation rule.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Windows Event ID 7040
      - Windows Event ID 7036
      - Domain Controllers
      - Application Servers
      - Enterprise Workstations
    range: last 90 days
    queries: |
      FEED stream of system events (4688, 4657, 7036, etc.) into a pre-trained HMM
      | CALCULATE the likelihood of the observed sequence
      | ALERT if sequence likelihood is below a learned threshold.
  - question: Did a non-privileged user launch a process that successfully elevated its privileges?
    context: |
      This question looks for the direct result of a successful UAC bypass or other privilege escalation technique. By linking a process creation event to the user's logon session, we can verify the user's identity. If a standard, non-admin user creates a process that has an elevated token (Type 1 or 2), it means privileges were escalated, which is a critical security event.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Enterprise Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries: |
      JOIN process creation events (4688) with logon events (4624) on LogonId
      | FOR events where user is non-privileged
      | ALERT if TokenElevationType is 'Type1' or 'Type2'.
  - question: Did a user launch a process with an integrity level that is unusually high for them?
    context: |
      Standard users almost always launch processes at 'Medium' integrity. An administrator might launch processes at 'High' integrity. A process running at 'System' integrity is rare for any interactive user. This question profiles the normal process integrity levels for each user and flags statistical outliers, which can indicate a successful privilege escalation.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Enterprise Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries: |
      FOR each user
      | BASELINE the distribution of IntegrityLevels for their created processes
      | FOR each new process creation event (4688)
      | ALERT if the IntegrityLevel is a statistical outlier for that user (e.g., 'High' or 'System' for a standard user).
  - question: Does a process creation event represent an anomalous combination of user, logon type, and integrity level?
    context: |
      This question uses unsupervised clustering to find unusual process creation events. The model groups together common events (e.g., standard user, interactive logon, medium integrity). Any event that doesn't fit into a dense cluster is flagged as an outlier. This can catch novel privilege escalation techniques that create an unusual combination of attributes.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Enterprise Workstations
      - Terminal Servers
      - Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries: |
      FOR each process creation event (4688)
      | CREATE feature vector (UserSid, LogonType, IntegrityLevel)
      | APPLY pre-trained DBSCAN model
      | ALERT if the event is classified as noise/outlier.
  - question: Did a script process attempt to read the memory of the LSASS process or write to the SAM file?
    context: |
      The LSASS process memory contains credentials, and the SAM file stores local password hashes. Access to these resources is a primary goal for adversaries seeking to dump credentials. This question creates a high-priority, rule-based alert for any script interpreter attempting to read from LSASS or write to the SAM file, as there are very few, if any, legitimate reasons for this to occur.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Domain Controllers
      - Credential Stores (LSASS process memory)
      - Security Databases (SAM file)
    range: last 90 days
    queries: |
      SEARCH for handle requests (4656) where object is 'lsass.exe' and access_mask includes 'PROCESS_VM_READ' AND requester is a script interpreter
      | OR SEARCH for write attempts (4663) where object is SAM file and process is unexpected
      | ALERT on match.
  - question: Did an unauthorized or statistically rare process access the memory of LSASS?
    context: |
      While some security and system tools may legitimately need to access LSASS memory, the list is very small and stable. This question involves creating a strict baseline of known-good processes that access LSASS. Any access from a process not on this baseline, or from a process whose access frequency is anomalous, is a critical red flag for credential dumping.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Domain Controllers
      - Credential Stores (LSASS process memory)
      - Security Databases (SAM file)
    range: last 90 days
    queries: |
      FOR each lsass.exe memory access event
      | CHECK if the requesting process is on the pre-approved baseline
      | ALERT if process is not on baseline OR if access frequency is anomalous.
  - question: Based on a graph-based ML model, is the interaction between a script and the LSASS process considered anomalous system behavior?
    context: |
      This question models the entire system's activity as a large graph of interactions. A graph neural network (GNN) learns what normal connections between processes and objects look like. An edge representing a script process accessing LSASS would be highly unusual in this graph, and the model would flag it as an anomaly based on its learned understanding of normal system-wide behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4663
      - Domain Controllers
      - Credential Stores (LSASS process memory)
      - Security Databases (SAM file)
    range: last 90 days
    queries: |
      MODEL system events as a graph (nodes=processes, edges=accesses)
      | APPLY pre-trained GNN to score subgraphs
      | ALERT if the subgraph containing a script accessing LSASS is scored as anomalous.