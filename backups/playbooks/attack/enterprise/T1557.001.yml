name: T1557.001: LLMNR-NBT-NS Poisoning and SMB Relay
id: a6e8b4d0-5b3c-4e8a-9f7b-2d1c0e9a8f6d
description: This playbook helps investigate credential access attempts and subsequent data collection activities using LLMNR/NBT-NS poisoning and SMB relay (T1557.001). It focuses on identifying evidence such as the execution of poisoning tools (e.g., Responder, Inveigh) through command-line arguments or file hashes, anomalous network traffic like a high volume of LLMNR/NBT-NS responses from a single source, and patterns of failed or unusual NTLM authentication. The playbook also covers post-exploitation actions, including persistence via new Windows services and data exfiltration indicated by abnormal SMB file access patterns following a suspicious logon.
type: technique
related:
  - TA0006: Credential Access
  - TA0009: Collection
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any processes been created with command-line arguments matching known LLMNR/NBT-NS poisoning tools like Responder or Inveigh?
    context: This question aims to detect the direct execution of common poisoning tools. Adversaries use tools like Responder.py, Invoke-Inveigh.ps1, and ntlmrelayx.py to spoof name resolution requests and capture or relay credentials. Searching for their characteristic command-line arguments and flags (e.g., -I, --lm) in process creation logs is a high-fidelity method for identifying this attack technique at its source.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE command_line MATCHES /(Responder\\.py|Invoke-Inveigh|ntlmrelayx\\.py)/ AND command_line MATCHES /(-I\\s+\\w+|-w|--lm|--disable-ess)/
  - question: Are there any process creation events, particularly for powershell.exe, with unusually long or complex command-line arguments that deviate from historical baselines?
    context: Adversaries often use obfuscation or complex scripting to hide their malicious commands. By baselining the normal length and Shannon entropy (a measure of randomness) of command-line arguments for common processes like powershell.exe, we can identify outliers. A command that is significantly longer or more random than usual can indicate obfuscated payloads, such as those used in fileless attacks or to launch tools like Inveigh.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
    range: last 90 days
    queries:
      - pseudocode: FOR each parent_process, CALCULATE baseline_length_entropy(command_line); ALERT WHERE new_command.length > 95th_percentile(baseline_length) OR new_command.entropy > 95th_percentile(baseline_entropy)
  - question: Can machine learning models identify suspicious process creation events based on command-line features that are indicative of poisoning tools?
    context: This question explores a more advanced, proactive detection method. A machine learning model can be trained on features like command length, entropy, character types, and keyword presence to score the likelihood of a command being malicious. This approach can detect novel or heavily obfuscated variations of poisoning tools that might evade simple signature-based searches, providing a more robust and adaptable detection capability.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations, member servers, IT administrator jump boxes, and any endpoint on a local network segment where LLMNR/NBT-NS traffic is present.
    range: last 90 days
    queries:
      - pseudocode: SCORE process_creation_events USING classification_model(features: command_line_length, entropy, special_chars, ip_addresses, keywords); ALERT WHERE score > confidence_threshold
  - question: Is there any LLMNR (UDP/5355) or NBT-NS (UDP/137) traffic originating from hosts that are not authorized name servers?
    context: In a well-configured network, LLMNR and NBT-NS are often disabled in favor of DNS. If they are used, only specific servers should be responding. This question aims to identify unauthorized hosts acting as name responders, which is a key indicator of a poisoning attack. Any traffic from a non-whitelisted source, especially if these protocols should be disabled network-wide, is highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek weird.log
      - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
    range: last 90 days
    queries:
      - pseudocode: SEARCH network_logs WHERE (dest_port=5355 OR dest_port=137) AND protocol='udp' AND source_ip NOT IN authorized_responders_watchlist; CORRELATE with zeek_notice='LLMNR_NBT-NS_Spoofing'
  - question: Has any single host sent LLMNR or NBT-NS responses to an unusually large number of different machines in a short time frame?
    context: A legitimate host typically communicates with a limited number of peers. An adversary's poisoning tool, however, will respond to broadcast requests from many hosts on the local segment. By analyzing network traffic, we can detect a single source IP sending responses on ports 5355 or 137 to a statistically anomalous number of unique destinations. This one-to-many response pattern is a strong sign of a poisoning attempt.
    answer_sources:
      - Zeek conn.log
      - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
    range: last 90 days
    queries:
      - pseudocode: FROM network_logs ON ports 5355/137, GROUP by source_ip over 5_min_window, CALCULATE unique_dest_ip_count; ALERT WHERE unique_dest_ip_count > 99th_percentile(historical_counts)
  - question: Are there any hosts exhibiting a sudden and uncharacteristic spike in their volume of LLMNR/NBT-NS response traffic?
    context: This question uses time-series analysis to find behavioral anomalies. Even if a host is a legitimate responder, its traffic should follow a somewhat predictable pattern. A sudden, sharp increase in the volume of response packets that deviates significantly from its own historical forecast can indicate that the host has been compromised and is now being used to conduct a poisoning attack.
    answer_sources:
      - Zeek conn.log
      - Network traffic sensor locations monitoring internal network segments (VLANs), core network switches, and network choke points between user and server subnets.
    range: last 90 days
    queries:
      - pseudocode: FOR each host, MODEL time_series(llmnr_nbtns_response_volume); ALERT WHERE observed_volume SIGNIFICANTLY_DEVIATES_FROM forecasted_volume
  - question: Is there a high rate of failed NTLM logons (Event ID 4625) originating from a source IP that was recently flagged for suspicious LLMNR/NBT-NS activity?
    context: This question links the network poisoning attempt to the credential relay/capture phase. After an adversary's machine receives a name resolution request, it may attempt to relay captured credentials. This often results in a flurry of failed logon attempts (Logon Type 3, Status 0xC000006A) from the attacker's IP. Correlating these failed logons with prior network anomalies from the same source IP provides strong, contextualized evidence of an SMB relay attack in progress.
    answer_sources:
      - Windows Event ID 4625
      - Zeek conn.log
      - Zeek ntlm.log
      - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
    range: last 90 days
    queries:
      - pseudocode: SEARCH failed_logons (EventID=4625, LogonType=3, Status=0xC000006A) WHERE source_ip IN (ips_flagged_for_llmnr_poisoning in last 15 mins); ALERT if source_ip > 5 unique_users AND > 5 unique_hosts in 10 mins
  - question: Are any source IP addresses exhibiting an extremely high ratio of failed-to-successful NTLM logons?
    context: A legitimate user or service may have occasional logon failures, but a very high failure rate is abnormal. An attacker attempting to relay credentials or conduct a password spray will likely generate a large number of failures relative to successes. Identifying a source IP with a failure rate over 90% for a significant number of attempts is a strong indicator of malicious authentication activity, such as an SMB relay attack.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4624
      - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
    range: last 90 days
    queries:
      - pseudocode: FOR each source_ip in 5_min_window, CALCULATE failure_ratio = failed_logons / (failed_logons + successful_logons); ALERT WHERE failure_ratio > 0.90 AND total_logons > 20
  - question: Can we detect clusters of failed authentication events that point to a single attacker targeting multiple users and systems?
    context: An SMB relay attack often manifests as a single attacking machine (source IP) attempting to authenticate against many different destination hosts using credentials from many different users. This creates a distinct pattern in authentication logs. Using a clustering algorithm like DBSCAN can automatically identify these dense groupings of failed logons that share a common source IP but have diverse usernames and target hosts, effectively fingerprinting the attack.
    answer_sources:
      - Windows Event ID 4625
      - Security event logs on Domain Controllers, member servers, and high-value workstations; network authentication logs captured by Zeek sensors.
    range: last 90 days
    queries:
      - pseudocode: APPLY DBSCAN to authentication_logs (features: source_ip, dest_host, username, time); ALERT on dense_clusters OF failed_logons (EventID=4625, LogonType=3) with single source_ip AND multiple users/hosts
  - question: Has any process executed on an endpoint with a file hash matching a known LLMNR/NBT-NS poisoning tool?
    context: This question focuses on finding known malicious tools by their unique file hash (e.g., MD5, SHA256). By comparing the hashes of all newly executed processes against a curated threat intelligence database of signatures for tools like Responder and Inveigh, we can detect their presence with very high confidence, even if the filename has been changed.
    answer_sources:
      - Sysmon Event ID 1
      - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation_logs WHERE process_hash IN known_malicious_hash_feed; ALERT on match
  - question: Has a rare or unique executable file been run, especially from a suspicious parent process like powershell.exe or python.exe?
    context: Adversaries often use custom-compiled or slightly modified tools to evade signature-based detection. These binaries will be rare in the environment. By tracking the prevalence of all file hashes, we can flag the execution of any file seen on only a very small number of hosts. This "low prevalence" analysis is a powerful heuristic for discovering novel malware or attacker tools, especially when combined with other context like the parent process or associated network activity.
    answer_sources:
      - Sysmon Event ID 1
      - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: CALCULATE prevalence(process_hash) across all hosts; ALERT WHERE prevalence < 3 AND (parent_process IN ('powershell.exe', 'python.exe') OR network_connections ON ports 137, 5355, 445)
  - question: Can we proactively identify unknown variants of relaying tools by analyzing their file structure and content?
    context: This question proposes using static binary analysis and machine learning to detect malicious files before they are even run or have a known signature. By extracting features from a portable executable (PE) file—such as its imported functions, section names, and string characteristics—a trained model can classify the file as benign or malicious. This helps identify packed or obfuscated versions of tools that are designed to look different on disk.
    answer_sources:
      - Sysmon Event ID 1
      - Endpoints where process creation is monitored, particularly user workstations, jump servers, and IT administrator workstations.
    range: last 90 days
    queries:
      - pseudocode: FOR each new_file_hash, EXTRACT PE_features (imports, sections, string_entropy); SCORE file using trained_classifier; ALERT if score > threshold
  - question: Has a new Windows service been installed for persistence with a name or binary path related to known poisoning tools?
    context: After gaining access, adversaries often install their tools as a service to ensure they persist across reboots. This question looks for the creation of new services (Event ID 7045) where the service name, description, or executable path contains suspicious keywords (e.g., relay, spoofer). It also flags services installed in non-standard directories like a user's Temp folder, which is a common tactic for malware.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 13
      - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
    range: last 90 days
    queries:
      - pseudocode: SEARCH service_creation_logs (EventID=7045) WHERE service_name OR binary_path MATCHES /(responder|inveigh|spoofer|relay)/ OR binary_path IN ('C:\\Users\\', 'C:\\Temp\\')
  - question: Are there any newly installed services that have highly anomalous characteristics compared to a baseline of normal service installations?
    context: Most legitimate software installs services in a predictable way. This question aims to find outliers by creating a baseline of normal service attributes (e.g., common binary paths like System32, typical service accounts, standard installer processes). A new service receives a high anomaly score if it deviates from this baseline—for example, if it's an unsigned binary, runs from a user profile directory, and was installed by an unusual process. This behavioral approach can catch unknown persistence techniques.
    answer_sources:
      - Windows Event ID 7045
      - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
    range: last 90 days
    queries:
      - pseudocode: FOR each new_service_install, SCORE anomaly based on rarity of (binary_path, service_account, parent_process); ALERT on high_score
  - question: Can a machine learning model be used to automatically classify newly installed services as benign or malicious?
    context: This question proposes a predictive approach to detecting malicious services. A model can be trained on features like whether the service binary is digitally signed, the entropy of its name and description, the location of its executable, and the privileges of its service account. By automatically scoring each new service, this method can flag suspicious installations for analyst review, improving the scalability of persistence detection.
    answer_sources:
      - Windows Event ID 7045
      - System event logs on all Windows endpoints, especially Domain Controllers, member servers, and other high-value assets targeted for persistence.
    range: last 90 days
    queries:
      - pseudocode: FOR each new_service_install, SCORE using classification_model(features: is_signed, name_entropy, binary_path_location, account_type); ALERT if score > threshold
  - question: Has a successful network logon occurred from a source IP that was recently involved in a suspected poisoning or relay attack?
    context: This is a critical question for confirming a successful attack. After an adversary relays a credential, a successful logon (Event ID 4624, Logon Type 3) will be generated. By correlating this success event with prior alerts for suspicious network activity (poisoning) or authentication failures (relay attempts) from the same source IP, we can connect the dots and confirm that the attacker has successfully gained access to a resource.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek ntlm.log
      - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
    range: last 90 days
    queries:
      - pseudocode: SEARCH successful_logons (EventID=4624, LogonType=3) WHERE source_ip IN (ips_flagged_for_suspicious_activity in last 30 mins) AND source_ip NOT IN (known_management_servers)
  - question: Has any user successfully logged on from a new or infrequent source workstation?
    context: Employees typically log in from a consistent set of workstations. A successful logon from a machine a user has never used before, or hasn't used in a long time, is anomalous. By maintaining a history of user-to-hostname logon activity, we can flag these "first-time" or "rare" connections. This is a strong indicator of lateral movement or a successful credential relay, especially if the user's primary workstation is also active.
    answer_sources:
      - Windows Event ID 4624
      - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
    range: last 90 days
    queries:
      - pseudocode: FOR each successful_logon (user, source_host), CHECK if pair exists in 90-day history; ALERT if pair is new or last_seen > 30 days ago
  - question: Are there any successful logons that deviate significantly from a user's established pattern of behavior?
    context: This question uses machine learning to build a comprehensive profile of "normal" for each user, considering factors like their typical source and destination hosts, protocols used, and time of day. A successful logon that falls far outside a user's normal cluster of activity—for example, a logon to a server they never access, from a strange IP, at 3 AM—is highly anomalous and could represent a compromised account being used by an attacker.
    answer_sources:
      - Windows Event ID 4624
      - Security event logs on destination servers (Domain Controllers, file servers, application servers); network traffic logs from sensors monitoring traffic to these high-value assets.
    range: last 90 days
    queries:
      - pseudocode: FOR each user, CLUSTER historical logons to create behavior_profile; FOR new_logon, CALCULATE distance from user's cluster_centroid; ALERT if distance is anomalous
  - question: Following a suspicious logon, did the source IP begin accessing a high number of directories or files with sensitive names?
    context: After gaining access, an attacker's next step is often reconnaissance or data collection. This question looks for that activity by monitoring file access logs (Event ID 5145, Zeek SMB logs) immediately following a suspicious logon. Behavior like rapidly traversing many directories or accessing files named passwords.txt, config.xml, or secret.docx is a strong signal that the attacker is searching for valuable information or credentials.
    answer_sources:
      - Zeek smb_files.log
      - Zeek files.log
      - Windows Event ID 5145
      - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
    range: last 90 days
    queries:
      - pseudocode: MONITOR file_access_logs for IP flagged in suspicious logon; ALERT if distinct_directories_accessed > 100 in 5 mins OR accessed_file_name MATCHES /(password|config|secret|backup)/
  - question: Did a user's SMB session involve an anomalously large number of file accesses or data transfers compared to their personal baseline?
    context: Every user has a typical pattern of file share interaction. An accountant might access many small spreadsheets, while a video editor might access a few very large files. By establishing a per-user baseline for metrics like 'files accessed per session' and 'bytes transferred', we can detect significant deviations. An SMB session following a suspicious logon that transfers gigabytes of data when the user normally transfers megabytes is a strong indicator of bulk data theft.
    answer_sources:
      - Zeek smb_files.log
      - Windows Event ID 5145
      - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
    range: last 90 days
    queries:
      - pseudocode: FOR each user, CREATE baseline(avg_files_per_session, avg_bytes_per_session); FOR session following suspicious_logon, ALERT if files_accessed > 3 * stdev(baseline_files) OR bytes_transferred > 3 * stdev(baseline_bytes)
  - question: Was there a sudden, sharp spike in the rate of file access operations within a single user session on a file share?
    context: Human users access files at a relatively slow and irregular pace. Automated scripts used by attackers for data collection, however, access files very rapidly and systematically. This question uses time-series analysis on a per-session basis to detect these machine-speed interactions. A sudden, sustained burst in file access events that breaks from the user's previously established pattern within that same session is a strong sign of automated collection.
    answer_sources:
      - Zeek smb_files.log
      - Windows Event ID 5145
      - File servers hosting sensitive intellectual property or PII, Domain Controller SYSVOL/NETLOGON shares, Software distribution points.
    range: last 90 days
    queries:
      - pseudocode: FOR each user_session, MODEL time_series(file_access_rate); ALERT on sharp_spike that deviates from learned_pattern