name: T1578.005: Modify Cloud Compute Configurations
id: 9a82b2d4-1e75-4b72-91dd-2e83c276c021
description: "Has an adversary modified cloud compute configurations to evade defenses or enable resource hijacking? This can be observed through several indicators: A cloud CLI process ('az.exe', 'aws.exe', 'gcloud.exe') or an associated script is executed from a non-standard parent process (e.g., an Office application) or its process hash matches a known malicious hash, and the process generates network traffic to an IP address or domain on a threat intelligence feed. A sequence of command-line arguments captured in process creation logs matches the known syntax, module names, or operational flow of offensive security tools like Pacu, PowerZure, or Cloudsplaining. A cloud configuration modification API call (e.g., 'ModifyVpcAttribute', 'Set-AzPolicyDefinition', 'Update-ServiceQuota') is logged, originating from a user, role, or source IP address that has a zero or near-zero historical frequency of performing such administrative actions. A configuration change is logged that enables or modifies policies for a cloud region not on the organization's approved list, immediately followed by resource deployment API calls targeting that unauthorized region. A cloud configuration change, such as increasing a service quota for compute instances, is immediately followed by a burst of resource provisioning API calls and a corresponding spike in network traffic volume indicative of resource hijacking."
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: "Are cloud CLI tools being executed from suspicious parent processes or generating network traffic to known malicious destinations?"
    context: "This question seeks to identify when legitimate cloud CLI tools (az.exe, aws.exe, gcloud.exe) are used maliciously. Adversaries often run these tools from unexpected parent processes, like an Office application, to hide their tracks. By correlating process execution with process hashes from malware databases and network connections to destinations on threat intelligence feeds, analysts can quickly flag legitimate tools being abused for unauthorized cloud access or configuration changes."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - "Administrator workstations, DevOps jump boxes, CI/CD pipeline servers, and network egress points."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "SEARCH process_logs WHERE process_name IN ('az.exe', 'aws.exe', 'gcloud.exe') AND parent_process NOT IN ('explorer.exe', 'cmd.exe', 'powershell.exe') | JOIN hash with malware_db | JOIN network_logs on host, time (within 5 mins) WHERE destination IN threat_intel_feed"
  - question: "Is there an anomalous pattern in cloud CLI command-line entropy or execution frequency for a given user or host?"
    context: "This question aims to detect adversary activity by establishing a baseline of normal cloud CLI usage. A sudden spike in command-line argument complexity (entropy) can indicate obfuscation, while an unusual increase in the frequency of CLI executions on a host can signal automated scripts or hands-on-keyboard activity. Comparing these metrics against historical norms for a specific user role or host helps filter out noise and focus on statistically significant deviations that may represent malicious behavior."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - "Administrator workstations, DevOps jump boxes, CI/CD pipeline servers, and network egress points."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH cloud_cli_execution | CALCULATE command_line_entropy | ALERT if entropy > 95th_percentile_for_user_role | FOR_EACH host | CALCULATE hourly_cli_execution_count | ALERT if count > (30_day_avg + 3 * 30_day_stddev)"
  - question: "Can a machine learning model identify malicious cloud CLI usage based on process and network behavior?"
    context: "This question leverages a machine learning classifier to automatically distinguish between benign and malicious use of cloud CLI tools. By training a model on features like parent process, command-line attributes, user context, and network connection details (e.g., destination reputation), the system can learn complex patterns indicative of an attack. This approach allows for real-time scoring of new events, enabling the detection of novel or sophisticated attacks that may evade simpler rule-based methods."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - "Administrator workstations, DevOps jump boxes, CI/CD pipeline servers, and network egress points."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "SCORE cloud_cli_execution_events using pre-trained_classifier_model(features: parent_process, cmd_length, cmd_entropy, user, dest_ip_rep, bytes_out) | ALERT if prediction is 'malicious' with confidence > 0.9"
  - question: "Are command-line arguments from process creation logs matching signatures of known offensive cloud security tools?"
    context: "This question is designed to detect the direct use of specific offensive security tools like Pacu, PowerZure, or Cloudsplaining. These tools have unique command structures, module names, and flags. By scanning process command-line arguments for these specific signatures using regular expressions, analysts can generate high-fidelity alerts, as their presence is a strong indicator of a targeted attack on the cloud environment."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - "Administrator workstations, developer endpoints, and servers with cloud SDKs/CLIs installed."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "SEARCH process_creation_logs | FILTER command_line_arguments MATCHES regex_library_for_offensive_tools (e.g., 'pacu --import-keys', 'Invoke-PowerZure', 'cloudsplaining') | ALERT on match"
  - question: "Has a user executed an extremely rare sequence of cloud modification commands?"
    context: "This question looks for anomalous command sequences to uncover novel or unusual attack paths. Legitimate administrative tasks often follow common, repeated patterns. By analyzing the frequency of command sequences (n-grams) within user sessions, we can identify when a user executes a chain of commands that is statistically rare, especially if it involves modification actions ('set', 'update', 'put-policy'). Such rarity can indicate an exploratory or malicious action that deviates from normal operational workflows."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - "Administrator workstations, developer endpoints, and servers with cloud SDKs/CLIs installed."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH user_session (30min window) | PARSE command_sequences (n-grams) | CALCULATE frequency_of_sequence | ALERT if frequency < 1st_percentile AND sequence_contains_modification_verb"
  - question: "Does a user's sequence of CLI commands deviate from the learned 'grammar' of normal administrative behavior?"
    context: "This question employs a sequence-based machine learning model, like an LSTM autoencoder, to understand the normal syntax and flow of administrative command sessions. The model is trained exclusively on benign command sequences. When a new sequence of commands from a user session is fed to the model, a high reconstruction error suggests the sequence is anomalous and does not conform to any learned benign pattern. This is effective for detecting sophisticated attackers who try to blend in by using legitimate commands in an illegitimate order."
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - "Administrator workstations, developer endpoints, and servers with cloud SDKs/CLIs installed."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH user_command_sequence | INPUT into LSTM_autoencoder_model | CALCULATE reconstruction_error | ALERT if reconstruction_error > anomaly_threshold"
  - question: "Has an unauthorized user or service principal made a sensitive cloud configuration change?"
    context: "This question focuses on enforcing access control policies by checking if sensitive API calls are made by unauthorized identities. By maintaining a strict allow-list of users and service principals who are permitted to perform high-impact configuration changes (e.g., modifying instance attributes, writing policy assignments), any API call from an identity not on this list can be immediately flagged as a high-priority security incident, indicating a potential privilege escalation or account compromise."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - "Cloud provider logging services (e.g., AWS CloudTrail S3 bucket, Azure Log Analytics Workspace), Identity and Access Management (IAM) systems, and VPN/remote access logs."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "SEARCH cloud_audit_logs FOR sensitive_api_calls (e.g., 'ModifyInstanceAttribute', 'policyAssignments/write') | ALERT if user_identity NOT IN authorized_identity_allow_list"
  - question: "Has a user made a sensitive API call for the first time, or from a new location, or at an unusually high frequency?"
    context: "This question uses 'first-seen' analysis to detect unusual administrative behavior. Adversaries often perform actions that are anomalous for the compromised account. This analytic flags three types of statistical outliers: a user making a specific sensitive call for the first time, making a call from a previously unseen geographic location or network (ASN), or executing sensitive calls at a rate that far exceeds their personal baseline. These 'firsts' are strong indicators of account misuse."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - "Cloud provider logging services (e.g., AWS CloudTrail S3 bucket, Azure Log Analytics Workspace), Identity and Access Management (IAM) systems, and VPN/remote access logs."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH sensitive_api_call | CHECK if (user, api_call) is first_seen_ever | CHECK if (user, source_geo/asn) is first_seen_in_90_days | CHECK if hourly_call_count_for_user > 99th_percentile | ALERT on any true condition"
  - question: "Does a cloud configuration modification API call fall outside of known clusters of normal administrative behavior?"
    context: "This question uses unsupervised machine learning to identify anomalous API calls without pre-defined rules. By clustering historical log data based on features like the API call name, source IP details, and user agent, the model learns what different 'normal' behaviors look like for various user roles. Any new API call that does not fit well into an existing cluster is flagged as an outlier. This is a powerful method for detecting novel attack techniques or insider threats that don't match known patterns."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - "Cloud provider logging services (e.g., AWS CloudTrail S3 bucket, Azure Log Analytics Workspace), Identity and Access Management (IAM) systems, and VPN/remote access logs."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH api_call | EXTRACT features (api_name, user_agent, source_ip_info) | SCORE with isolation_forest_model | ALERT if score is 'anomaly'"
  - question: "Has a resource been modified or deployed in a cloud region that is not on the organization's approved list?"
    context: "This question enforces corporate governance by monitoring for activity in unauthorized cloud regions. Adversaries may use unmonitored or disallowed regions to deploy resources for cryptomining or C2 infrastructure, hoping to evade detection. By creating a SIEM rule that checks the 'region' parameter of any deployment or modification API call against a definitive list of approved regions, any violation can be immediately alerted as a potential compliance breach and security risk."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - "Cloud provider logging services, corporate cloud governance documentation, and the corporate Asset Management Database."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "SEARCH cloud_audit_logs FOR deployment_or_modification_events | LET event_region = event.region_parameter | ALERT if event_region NOT IN approved_region_list"
  - question: "Has a resource been deployed in a dormant or never-before-used cloud region?"
    context: "This question aims to detect the use of unauthorized regions from a data-driven perspective, without relying on a manually maintained list. By profiling the historical usage of all cloud regions over the past year, the system can automatically detect a deployment in a region that has either never been used or has been dormant for an extended period (e.g., 180 days). This statistical approach can catch both abuse of net-new regions and the reactivation of old, forgotten environments that may lack current security controls."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - "Cloud provider logging services, corporate cloud governance documentation, and the corporate Asset Management Database."
    range: last 365 days
    queries:
      - technology: pseudocode
        query: "BUILD historical_region_usage_profile (last 365 days) | FOR_EACH new_resource_deployment | LET deployment_region = event.region | ALERT if deployment_region has zero historical usage or last_usage > 180_days_ago"
  - question: "Does a new resource deployment deviate from the established norm of benign deployments, particularly regarding its region?"
    context: "This question uses a one-class machine learning model to create a boundary of 'normal' for all resource deployments. The model is trained on features of benign deployments, including region, instance type, and user. Any new deployment that falls outside this learned boundary is flagged as an anomaly. This is especially effective at catching malicious deployments in unusual regions, as the region feature would cause the new data point to be significantly different from the training data, resulting in a high anomaly score."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - "Cloud provider logging services, corporate cloud governance documentation, and the corporate Asset Management Database."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FOR_EACH new_resource_deployment | EXTRACT features (region, instance_type, user, time_of_day) | SCORE with one-class_svm_model | ALERT if score is 'anomaly'"
  - question: "Has a service quota increase been immediately followed by a burst of resource provisioning and a spike in egress network traffic?"
    context: "This question looks for a specific, high-confidence attack chain indicative of resource hijacking for activities like cryptomining. The pattern is: 1) The adversary requests a higher service quota (e.g., to run more VMs). 2) They immediately provision a large number of resources. 3) These new resources begin egressing large amounts of data. A correlated rule that detects this specific sequence of events within a short time window provides a strong signal of a compromised account being used for resource abuse."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - VPC Flow Logs
      - Zeek conn.log
      - "Cloud provider logging services, network flow log sources, network egress points, and cloud billing/cost management dashboards."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "TRIGGER on quota_increase_event | WITHIN 1_hour, SEARCH for >20 resource_creation_events by same_user | WITHIN next 1_hour, SEARCH network_flow_logs for >1GB egress from new_resources | ALERT if all conditions met"
  - question: "Following a service quota increase, did the rate of resource creation significantly exceed the historical baseline for that account?"
    context: "This question provides a statistical method to detect resource hijacking. It establishes a normal baseline for the rate of resource creation in an account. When a quota increase event is detected, the system begins to monitor this rate more closely. If the rate spikes to a level that is statistically significant (e.g., more than 3 standard deviations above the mean) in the 24 hours following the quota change, it suggests an abnormal, likely malicious, burst of provisioning activity. Flagging activity outside of business hours adds further context."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - VPC Flow Logs
      - Zeek conn.log
      - "Cloud provider logging services, network flow log sources, network egress points, and cloud billing/cost management dashboards."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "MONITOR for quota_increase_event | IN next 24_hours, CALCULATE hourly_resource_creation_rate | ALERT if rate > (30_day_avg_rate + 3 * 30_day_stddev) | INCREASE_SEVERITY if outside_business_hours"
  - question: "Did a time-series model detect a significant changepoint in resource provisioning or network traffic immediately following a configuration change like a quota increase?"
    context: "This question uses advanced time-series analysis to detect a fundamental shift in an account's behavior. A model like Prophet is used to forecast expected resource provisioning and network traffic volumes. The model can then detect 'changepoints'—abrupt moments where the real-time data structurally breaks from the forecast. An alert is triggered when a significant changepoint occurs right after a sensitive configuration change (like a quota increase), as this indicates a state change from normal operations to potentially abusive activity."
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - VPC Flow Logs
      - Zeek conn.log
      - "Cloud provider logging services, network flow log sources, network egress points, and cloud billing/cost management dashboards."
    range: last 90 days
    queries:
      - technology: pseudocode
        query: "FEED real-time (provisioning_api_calls, network_volume) into time-series_forecast_model | DETECT changepoints in data stream | ALERT if significant_changepoint_detected AND recent_quota_increase_event_occurred"