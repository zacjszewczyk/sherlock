name: T1567.004: Exfiltration Over Webhook
id: 6a2f8c5d-9b3e-4f1a-8d7c-0b3e1a9f4b2c
description: |
  This playbook helps determine if an adversary has established a data exfiltration channel using webhooks. It provides investigative steps to detect this activity by looking for various indicators, such as outbound HTTP POST requests to known malicious webhook endpoints or those with high-entropy URIs; the use of command-line utilities like curl or PowerShell with arguments indicative of webhook activity; POST requests containing archived or high-entropy data payloads; statistically significant increases in POST request volume from a host; and suspicious sequences of events, like data archival followed immediately by an outbound POST to a rare domain.
type: technique
related:
- TA0010: Exfiltration
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an internal host making an HTTP POST request to a known malicious webhook endpoint listed in our threat intelligence feeds?
  context: |
    This question aims to detect direct communication with command and control (C2) or data exfiltration endpoints that are known to be associated with webhook abuse. By ingesting and creating watchlists from threat intelligence feeds, we can quickly identify outbound POST requests to malicious domains, URLs, or IP addresses. A match indicates a high-confidence security event that requires immediate investigation.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., proxies, firewalls)
  - DNS resolvers
  - Cloud Access Security Broker (CASB) logs
  - Threat intelligence feeds
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      watchlist = GET_MALICIOUS_WEBHOOK_IOCS_FROM_THREAT_INTEL()
      FOR EACH http_event IN zeek_http_logs:
        IF http_event.method == "POST":
          conn_event = FIND_CONN_LOG_BY_UID(http_event.uid)
          IF http_event.host IN watchlist OR http_event.uri IN watchlist OR conn_event.resp_h IN watchlist:
            CREATE_ALERT(event=http_event, reason="POST to known malicious webhook endpoint")
- question: Are there any outbound HTTP POST requests to legitimate webhook services (like Discord or Slack) with unusually high-entropy URI paths?
  context: |
    Adversaries often use legitimate services for C2 and exfiltration by generating random-looking webhook endpoints. While the domain (e.g., discord.com) is legitimate, the full URI path is unique and random. This question uses Shannon entropy to measure the randomness of URI paths. A high entropy score for a POST request's URI path, when compared to a baseline of normal traffic to that service, suggests the endpoint may be adversary-controlled and not a standard integration.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., proxies, firewalls)
  - DNS resolvers
  - Cloud Access Security Broker (CASB) logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      webhook_domains = ["discord.com", "hooks.slack.com"]
      FOR EACH domain in webhook_domains:
        baseline_entropy_dist = CALCULATE_BASELINE_ENTROPY_DISTRIBUTION(domain, time_range="last 90 days")
        threshold = GET_PERCENTILE(baseline_entropy_dist, 95)
        FOR EACH http_event IN zeek_http_logs WHERE http_event.host == domain AND http_event.method == "POST":
          uri_entropy = CALCULATE_SHANNON_ENTROPY(http_event.uri_path)
          IF uri_entropy > threshold:
            CREATE_ALERT(event=http_event, reason="High entropy URI for webhook POST request")
- question: Can we use a machine learning model to classify outbound HTTP POST requests as potentially malicious webhook activity?
  context: |
    This question leverages a machine learning approach to move beyond simple signatures or statistical thresholds. By training a logistic regression classifier on a variety of features from HTTP POST requests (such as URI length/entropy, destination, and user-agent), the model can learn the complex patterns that distinguish malicious webhook traffic from benign traffic. This allows for the detection of novel threats that may not match existing rules.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - Network egress points (e.g., proxies, firewalls)
  - DNS resolvers
  - Cloud Access Security Broker (CASB) logs
  - Labeled dataset of benign/malicious webhook traffic
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ml_model = LOAD_TRAINED_LOGISTIC_REGRESSION_MODEL("webhook_classifier")
      FOR EACH http_event IN zeek_http_logs WHERE http_event.method == "POST":
        features = EXTRACT_FEATURES(http_event) // URI length, entropy, domain, etc.
        prediction_probability = ml_model.PREDICT(features)
        IF prediction_probability > 0.8:
          CREATE_ALERT(event=http_event, reason="ML model classified as malicious webhook", score=prediction_probability)
- question: Has a command-line utility like curl or PowerShell been used to execute an HTTP POST request indicative of webhook usage?
  context: |
    This question focuses on detecting the direct use of common command-line tools for data exfiltration via webhooks. Adversaries frequently use built-in or common utilities to 'live off the land.' This query looks for specific process creation events (e.g., curl.exe, powershell.exe) and uses regular expressions to find argument patterns, such as -X POST or Invoke-RestMethod -Method Post, that are strongly associated with sending data to an external endpoint.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - User workstations
  - servers (especially web and application servers)
  - development environments
  - CI/CD pipeline runners
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      suspicious_processes = ["curl.exe", "wget.exe", "bitsadmin.exe", "powershell.exe"]
      suspicious_patterns = ["-X POST", "--data", "Invoke-RestMethod -Method Post", "discord.com/api/webhooks", "hooks.slack.com"]
      FOR EACH process_event IN windows_event_4688_logs:
        IF process_event.process_name IN suspicious_processes:
          FOR EACH pattern IN suspicious_patterns:
            IF REGEX_MATCH(process_event.command_line, pattern):
              CREATE_ALERT(event=process_event, reason="Suspicious command-line for potential webhook exfil")
- question: Has a common command-line utility been executed with statistically rare or anomalous arguments on any given host?
  context: |
    This question aims to find unusual command-line executions that deviate from a host's normal behavior, even if they don't match a specific malicious signature. By baselining the frequency of command-line argument combinations (n-grams) for utilities like curl.exe and powershell.exe, we can identify executions that are statistically improbable for that specific system. For example, using Invoke-RestMethod with -InFile on a server that has never done so before is a high-value anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - User workstations
  - servers (especially web and application servers)
  - development environments
  - CI/CD pipeline runners
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      utilities = ["curl.exe", "powershell.exe"]
      FOR EACH host IN monitored_hosts:
        baseline_ngram_freq = CALCULATE_BASELINE_NGRAM_FREQUENCY(host, utilities, time_range="last 90 days")
        threshold = GET_PERCENTILE(baseline_ngram_freq, 1)
        FOR EACH process_event ON host:
          IF process_event.process_name IN utilities:
            event_ngrams = EXTRACT_NGRAMS(process_event.command_line)
            IF ANY_NGRAM_FREQUENCY_BELOW(event_ngrams, baseline_ngram_freq, threshold):
              CREATE_ALERT(event=process_event, reason="Statistically rare command-line arguments detected")
- question: Can we use a machine learning model to detect anomalous command-line invocations that deviate from a host's established normal behavior?
  context: |
    This question uses an unsupervised machine learning model (One-Class SVM) to identify outlier command-line activity without relying on pre-defined signatures of 'badness.' The model is trained on what is considered 'normal' command-line usage for a specific host or group of hosts. Any new command that deviates significantly from this learned normal profile is flagged as an anomaly. This is particularly effective at finding novel or evasive techniques that don't use common malicious strings.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - User workstations
  - servers (especially web and application servers)
  - development environments
  - CI/CD pipeline runners
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host_or_group in monitored_scope:
        model = TRAIN_ONE_CLASS_SVM(host_or_group, event_logs="last 90 days")
        FOR EACH new_process_event in real_time_events:
          IF new_process_event.host IN host_or_group:
            is_outlier = model.PREDICT(new_process_event.command_line)
            IF is_outlier:
              CREATE_ALERT(event=new_process_event, reason="ML outlier detection for command-line invocation")
- question: Is there an outbound HTTP POST request to a webhook service with a Content-Type header indicating data archival or a high-entropy body?
  context: |
    This question looks for signs that the data being sent in a POST request is not typical web traffic but rather staged data for exfiltration. Specific Content-Type headers like 'application/zip' or 'application/octet-stream' are strong indicators of file transfer. Additionally, a high-entropy payload suggests the data is compressed or encrypted, which is a common tactic to obfuscate exfiltrated data.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network egress points
  - Data Loss Prevention (DLP) systems
  - servers hosting sensitive data (e.g., databases, file shares)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      suspicious_types = ["application/zip", "application/x-rar-compressed", "application/x-7z-compressed", "application/octet-stream"]
      webhook_domains = ["discord.com", "slack.com"]
      FOR EACH http_event IN zeek_http_logs:
        IF http_event.method == "POST" AND http_event.host IN webhook_domains:
          IF http_event.content_type IN suspicious_types:
            CREATE_ALERT(event=http_event, reason="Suspicious Content-Type in POST to webhook domain")
- question: Are there any outbound HTTP POST requests containing data with statistically high entropy?
  context: |
    This question attempts to identify exfiltration of compressed or encrypted data, regardless of the Content-Type header. By calculating the Shannon entropy of the POST request's body and comparing it to a baseline, we can flag traffic that is unusually random. A high entropy score (e.g., > 7.5 for 8-bit bytes) is a strong indicator of non-textual data, such as an encrypted file or a compressed archive, being exfiltrated.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network egress points
  - Data Loss Prevention (DLP) systems
  - servers hosting sensitive data (e.g., databases, file shares)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      entropy_threshold = 7.5
      FOR EACH http_event IN zeek_http_logs WHERE http_event.method == "POST" AND http_event.body_is_available:
        body_entropy = CALCULATE_SHANNON_ENTROPY(http_event.body_first_4096_bytes)
        IF body_entropy > entropy_threshold:
          CREATE_ALERT(event=http_event, reason="High entropy detected in POST request body")
- question: Can a time-series model detect anomalous spikes in data volume for specific Content-Types from any host?
  context: |
    This question uses machine learning to detect large-scale exfiltration events that manifest as a sudden change in behavior. A time-series model (like ARIMA or LSTM) learns the normal baseline of data transfer volume for each host and Content-Type. An alert is generated when the actual observed volume significantly deviates from the model's prediction, indicating an anomalous spike that could represent a data breach in progress.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Network egress points
  - Data Loss Prevention (DLP) systems
  - servers hosting sensitive data (e.g., databases, file shares)
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host in monitored_hosts:
        FOR EACH content_type in monitored_types:
          model = TRAIN_TIMESERIES_MODEL(host, content_type, data="last 90 days")
          current_volume = GET_CURRENT_VOLUME(host, content_type, time_window="last hour")
          predicted_volume, prediction_interval = model.PREDICT()
          IF current_volume > prediction_interval.upper_bound:
            CREATE_ALERT(host=host, reason="Anomalous spike in POST data volume")
- question: Has any host shown a sudden, significant increase in the number of POST requests to webhook domains compared to its recent average?
  context: |
    This question aims to catch the start of an exfiltration campaign by looking for a rapid increase in the frequency of POST requests from a single host. A simple rule that compares the count of POSTs in a short window (e.g., one hour) to a longer-term rolling average (e.g., 24 hours) can be an effective, low-computation method to spot a deviation from normal behavior. A large percentage increase (e.g., 300%) is a strong signal of anomalous activity.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - All internal host subnets
  - Virtual Private Network (VPN) concentrators
  - servers with direct internet access
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host in monitored_hosts:
        avg_count_24h = GET_AVG_POST_COUNT(host, time_range="last 24 hours")
        count_1h = GET_POST_COUNT(host, time_range="last 1 hour")
        IF count_1h > (avg_count_24h * 4): // 300% increase
          CREATE_ALERT(host=host, reason="Spike in POST request count to webhook domains")
- question: Is any host exhibiting a statistically outlying volume or count of outbound POST requests compared to its own 30-day baseline?
  context: |
    This question uses a robust statistical method (the IQR method) to identify outlier behavior over a longer period. For each host, we establish a 30-day rolling profile of its daily POST request activity (both count and total bytes). Any day where the activity exceeds the upper fence (Q3 + 1.5*IQR) is flagged as an outlier. This method is effective at finding significant deviations while being resistant to noise from a few extreme values in the baseline data.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - All internal host subnets
  - Virtual Private Network (VPN) concentrators
  - servers with direct internet access
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host in monitored_hosts:
        daily_volumes = GET_DAILY_POST_VOLUMES(host, time_range="last 30 days")
        Q1, Q3 = CALCULATE_QUARTILES(daily_volumes)
        IQR = Q3 - Q1
        upper_fence = Q3 + (1.5 * IQR)
        today_volume = GET_DAILY_POST_VOLUMES(host, time_range="today")
        IF today_volume > upper_fence:
          CREATE_ALERT(host=host, reason="Statistically outlying daily POST volume detected")
- question: Can a time-series forecasting model detect when a host's outbound POST request volume significantly exceeds its predicted normal behavior?
  context: |
    This question applies advanced time-series forecasting to model a host's behavior more accurately. A model like Prophet can account for seasonality (time of day, day of week patterns) in a host's network traffic. It predicts an expected range for POST request volume in the next time period. If the actual observed volume falls outside this predicted range (specifically, above the `yhat_upper` value), it signals a statistically significant anomaly that is unlikely to be part of normal operations.
  answer_sources:
  - Zeek http.log
  - Zeek conn.log
  - All internal host subnets
  - Virtual Private Network (VPN) concentrators
  - servers with direct internet access
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR EACH host in monitored_hosts:
        model = TRAIN_PROPHET_MODEL(host, data="last 90 days of POST volume")
        forecast = model.PREDICT(future_time_window="next 1 hour")
        actual_volume = GET_CURRENT_POST_VOLUME(host, time_window="last 1 hour")
        IF actual_volume > forecast.yhat_upper:
          CREATE_ALERT(host=host, reason="POST volume exceeds forecasted upper bound")
- question: Has a host executed an archiving utility (like 7-Zip or tar) and then, within a short time window, made an HTTP POST request to an external destination?
  context: |
    This question uses stateful correlation to detect a common adversary TTP: staging data and then exfiltrating it. A symbolic rule looks for a sequence of events: first, a process creation event for a known archiving tool, followed within minutes by an outbound HTTP POST from the same host. This sequence is highly suspicious as it directly maps to the 'collect, stage, and exfiltrate' pattern.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Staging servers
  - developer workstations
  - CI/CD pipeline runners
  - any host with both sensitive data access and direct internet connectivity
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      archive_tools = ["7z.exe", "rar.exe", "tar.exe", "zip.exe"]
      FOR EACH archive_event IN windows_event_4688_logs:
        IF archive_event.process_name IN archive_tools:
          host = archive_event.host
          timestamp = archive_event.timestamp
          FIND post_event IN zeek_http_logs WHERE post_event.host == host AND post_event.method == "POST" AND post_event.timestamp > timestamp AND post_event.timestamp < (timestamp + 5_minutes)
          IF post_event FOUND:
            CREATE_ALERT(events=[archive_event, post_event], reason="Archive process followed by HTTP POST")
- question: Has a host followed an archiving action with an HTTP POST to a domain that is rarely visited by anyone in the organization?
  context: |
    This question enhances the previous sequence-based detection with statistical context. Adversaries often use custom or newly registered domains for exfiltration, which will appear as rare destinations in an organization's DNS logs. After detecting the 'archive then POST' sequence, we can assign a much higher risk score if the destination domain of the POST is statistically uncommon (e.g., in the bottom 5th percentile of prevalence). This helps prioritize alerts and reduce false positives from legitimate software updates or other benign sequences.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Staging servers
  - developer workstations
  - CI/CD pipeline runners
  - any host with both sensitive data access and direct internet connectivity
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      domain_prevalence = CALCULATE_DOMAIN_PREVALENCE(dns_logs, time_range="last 30 days")
      prevalence_threshold = GET_PERCENTILE(domain_prevalence, 5)
      // Run the query from the previous question
      FOR EACH alert FROM "Archive process followed by HTTP POST":
        destination_domain = GET_DOMAIN_FROM_ALERT(alert)
        IF domain_prevalence[destination_domain] < prevalence_threshold:
          INCREASE_ALERT_SEVERITY(alert, reason="Destination domain is rare for the organization")
- question: Can a sequence analysis model detect an anomalous transition from a 'Data Staging' state to an 'Exfiltration' state on a host?
  context: |
    This question applies machine learning to sequence analysis to formalize the detection of suspicious TTP chains. A Hidden Markov Model (HMM) can be trained on typical sequences of events (process creations, network connections, etc.) to learn what 'normal' state transitions look like. The model can then identify when a host makes a highly improbable transition, such as from a state characterized by running archiving tools to a state characterized by making POST requests to low-prevalence domains. This detects the malicious pattern as a whole, rather than just its individual components.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek http.log
  - Zeek dns.log
  - Staging servers
  - developer workstations
  - CI/CD pipeline runners
  - any host with both sensitive data access and direct internet connectivity
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      hmm_model = LOAD_TRAINED_HMM("host_activity_sequencer")
      // Define states like 'Browsing', 'Data Staging', 'Exfiltration' based on event types
      FOR EACH host in monitored_hosts:
        event_sequence = GET_RECENT_EVENT_SEQUENCE(host)
        is_anomalous_sequence = hmm_model.EVALUATE(event_sequence)
        IF is_anomalous_sequence:
          CREATE_ALERT(host=host, reason="Anomalous event sequence detected by HMM model")