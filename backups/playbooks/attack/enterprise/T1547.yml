name: 'T1547: Boot or Logon Autostart Execution'
id: f5d4a1b0-2c3e-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook helps investigate the MITRE ATT&CK technique T1547, where adversaries achieve persistence and/or privilege escalation by placing malicious code in locations that automatically execute at boot or logon. This includes common locations like startup folders, registry run keys, Windows services, scheduled tasks, and WMI event subscriptions. The playbook provides investigative questions to detect suspicious file creations, registry modifications, obfuscated script executions, unauthorized changes to autostart mechanisms, beaconing network activity from autostarted processes, and processes running with elevated privileges from unusual locations.
type: technique
related:
  - 'TA0003: Persistence'
  - 'TA0004: Privilege Escalation'
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a known-malicious file or registry value been added to an autostart location?
    context: This question aims to identify the most direct evidence of persistence: the placement of a file or registry entry in a startup location that is already known to be malicious. By cross-referencing file hashes, filenames, or registry values against a high-confidence threat intelligence feed, analysts can quickly detect and respond to threats using pre-existing indicators of compromise (IOCs). An alert here signifies a high-probability threat that requires immediate investigation.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - High-fidelity threat intelligence feed
      - Data from Windows workstations and servers, specifically user/system startup directories and HKLM/HKCU registry hives.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (sysmon_eid=11 AND path IN startup_paths) OR (sysmon_eid=13 AND target_object IN autorun_keys) | lookup threat_feed hash OR value | where threat_match=true'
  - question: Has an unusually rare executable or registry value been added to an autostart location?
    context: This question seeks to find novel persistence attempts that are not yet on threat intelligence feeds. By baselining normal autostart entries across the enterprise, any new file or registry value that is statistically uncommon (i.e., has a very low frequency of occurrence) becomes suspicious. This is a powerful way to detect 'patient zero' or targeted attacks using custom tools.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Historical baseline of autostart entries
      - Data from Windows workstations and servers, specifically user/system startup directories and HKLM/HKCU registry hives.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (sysmon_eid=11 AND path IN startup_paths) OR (sysmon_eid=13 AND target_object IN autorun_keys) | stats count(file_name or value) over 90d | where count < threshold'
  - question: Does a machine learning model classify a new autostart entry as malicious?
    context: This question leverages a machine learning model to proactively identify malicious persistence attempts based on a combination of features. Instead of relying on a single indicator like a hash or rarity, the model considers file path, name characteristics (entropy), PE header data, and digital signature status to make a holistic judgment. An alert from the model suggests the entry has multiple suspicious characteristics, warranting an investigation.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - PE header information and signer status
      - Data from Windows workstations and servers, specifically user/system startup directories and HKLM/HKCU registry hives.
    range: last 90 days
    queries:
      - spl: 'pseudocode: for new autostart_entry in (file_creations OR registry_sets): score = ml_model.predict(features(autostart_entry)) | if score > risk_threshold: alert'
  - question: Is a scripting engine being launched from an autostart location with suspicious or obfuscated arguments?
    context: Adversaries frequently use scripting engines like PowerShell to execute malicious code at startup. They often hide their activity using obfuscation (e.g., Base64 encoding) or flags that suppress windows ('-w hidden'). This question uses regular expressions to find these tell-tale signs in command-line arguments, providing a strong signal of malicious script-based persistence.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Data from all Windows endpoints/servers with command-line logging and PowerShell logging enabled.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (sysmon_eid=1 OR win_eid=4688) AND process_name IN (powershell.exe, cscript.exe) AND command_line matches_regex (''-enc'', ''-w hidden'', ''base64_pattern'') | check parent_process origin'
  - question: Has a script launched from an autostart location exhibited unusually high command-line entropy?
    context: High entropy (randomness) in command-line arguments is a classic indicator of obfuscation or encryption. Adversaries use this to hide their commands from simple keyword-based detections. By calculating the entropy of command lines for autostarted scripts and comparing it to a baseline, we can flag executions that are likely obfuscated and therefore malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Data from all Windows endpoints/servers with command-line logging and PowerShell logging enabled.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (sysmon_eid=1 OR win_eid=4688) AND process_name IN scripting_engines | calculate entropy(command_line) | where entropy > baseline_threshold'
  - question: Does a Natural Language Processing (NLP) model classify an autostarted script's command line as malicious?
    context: This question applies advanced NLP to understand the intent of a command line, rather than just matching keywords or entropy. An NLP model trained on thousands of malicious and benign scripts can recognize complex malicious patterns, argument structures, and function calls that evade simpler detection methods. A high-risk score from the model indicates a sophisticated threat.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Data from all Windows endpoints/servers with command-line logging and PowerShell logging enabled.
    range: last 90 days
    queries:
      - spl: 'pseudocode: for new script_process in autostart_processes: score = nlp_model.predict(command_line) | if score > risk_threshold: alert'
  - question: Has an autostart location been modified without an approved change request or software deployment?
    context: In a managed environment, most changes to autostart locations should be tied to legitimate activities like software installation or patching. This question operationalizes that assumption by creating an allowlist of expected changes from change management and deployment systems. Any modification that occurs outside of this allowlist is considered unauthorized and potentially malicious.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Change management database
      - Software deployment logs
    range: last 90 days
    queries:
      - spl: 'pseudocode: search autostart_mod_events | lookup change_management_logs by time, host | where NOT found'
  - question: Is there an anomalous spike in the rate of autostart modifications on a specific host?
    context: Legitimate changes to autostart locations are typically infrequent. A sudden burst of modifications on a single host can indicate an adversary or malware rapidly establishing multiple persistence points. This question uses time-series analysis to model the normal rate of change for each host and alerts when a statistically significant deviation occurs.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search autostart_mod_events | timechart count by host | detect_anomalies where deviation > 3*stddev'
  - question: Does a modification to an autostart location appear as an outlier when clustered with other similar events?
    context: This question uses clustering algorithms to group similar modification events. Legitimate software installers tend to create similar patterns of changes across many machines, forming dense clusters. A malicious or one-off change, however, will not fit into these clusters and will be identified as an outlier or 'noise'. This is effective for finding unique, targeted attacks.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4698
      - Windows Event ID 4702
      - Sysmon Event ID 11
      - Sysmon Event ID 13
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: events = get_autostart_mod_events | features = extract_features(events) | clusters = dbscan(features) | alert on noise_points'
  - question: Has a process launched at startup established a network connection to a known command-and-control (C2) server?
    context: The ultimate goal of many persistence mechanisms is to establish a connection back to the adversary for command and control. This question directly links process execution at startup to outbound network connections and checks the destination against threat intelligence for known C2 infrastructure. A match is a high-confidence indicator of an active compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Threat intelligence feeds for C2 servers and newly registered domains
      - Data from network egress points, DNS servers, and all Windows endpoints.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (sysmon_eid=1 linked to sysmon_eid=3) | lookup c2_threat_intel on destination_ip | where threat_match=true'
  - question: Is an autostarted process exhibiting beaconing behavior to a rare destination?
    context: C2 communication often manifests as 'beaconing'—connections made at highly regular intervals. This question analyzes the timing between connections from an autostarted process to identify this machine-like regularity. When this beaconing behavior is directed at a destination that is rarely contacted by other hosts in the enterprise, it strongly suggests a C2 channel.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Data from network egress points, DNS servers, and all Windows endpoints.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search zeek_conn_log | stats stdev(inter_arrival_time) as jitter, distinct_count(source_host) as prevalence by dest_ip | where jitter < low_threshold AND prevalence < low_threshold'
  - question: Can the network connection times of an autostarted process be accurately predicted, suggesting programmatic beaconing?
    context: This question uses a more advanced time-series forecasting model to detect beaconing. If a model can predict when the next connection will occur with high accuracy, it proves the pattern is programmatic and not human-driven. Combining a high-confidence forecast with a rare or low-reputation destination provides a very strong signal for C2 activity.
    answer_sources:
      - Zeek conn.log
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Data from network egress points and all Windows endpoints.
    range: last 90 days
    queries:
      - spl: 'pseudocode: for process in autostart_processes: connection_times = get_connection_times(process) | model = arima.fit(connection_times) | if model.accuracy > high_threshold: alert'
  - question: Has a new service been created to run as 'LocalSystem' with a known-malicious executable?
    context: Creating a new service is a classic privilege escalation and persistence technique. Adversaries configure the service to run with the highest privileges ('LocalSystem'). This question looks for the creation of such a service and immediately checks if the associated executable file is on a list of known malware, providing a high-confidence alert.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Threat intelligence feed
      - Data from Domain Controllers, critical servers, and administrator workstations.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search (win_eid=7045 AND service_account=''LocalSystem'') OR (sysmon_eid=13 AND target_object matches ''ImagePath'') | lookup threat_intel on file_hash | where threat_match=true'
  - question: Has a new service been created to run as 'SYSTEM' from a statistically rare or unusual file path?
    context: Legitimate system services are typically located in standard, protected directories like System32. An adversary might place their malicious service executable in a non-standard, user-writable location like C:\Temp or a user's profile. This question baselines common service paths and flags any new SYSTEM service created from a statistically rare location, which is highly suspicious.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Data from Domain Controllers, critical servers, and administrator workstations.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search win_eid=7045 AND service_account=''LocalSystem'' | stats count by image_path | where count < threshold OR image_path IN (''C:\\Users\\*'', ''C:\\Temp\\*'')'
  - question: Does a machine learning model classify a newly created service as high-risk?
    context: This question employs a machine learning model to assess the risk of a new service based on a variety of features, such as its executable path, the account it runs as, the process that created it, and whether its executable is digitally signed. This provides a more nuanced detection than a single rule, catching novel threats that combine several slightly anomalous characteristics to appear high-risk overall.
    answer_sources:
      - Windows Event ID 7045
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Data from Domain Controllers, critical servers, and administrator workstations.
    range: last 90 days
    queries:
      - spl: 'pseudocode: for new_service_event in service_creations: score = ml_model.predict(features(new_service_event)) | if score > risk_threshold: alert'
  - question: Have command-line tools like 'sc.exe' or 'schtasks.exe' been used to create a privileged autostart entry from an unusual parent process?
    context: Adversaries often use built-in Windows tools to create persistence. However, the context of how these tools are used is key. An administrator might run schtasks.exe from a command prompt, but it's highly suspicious for Microsoft Word (winword.exe) to do so. This question looks for the creation of privileged autostart entries and flags them if the parent process is not a typical administrative tool or installer.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints/servers with command-line auditing.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=1 AND process_name IN (''sc.exe'', ''schtasks.exe'') AND command_line contains ''/ru SYSTEM'' | where parent_process_name NOT IN (''cmd.exe'', ''explorer.exe'', ''known_installers.exe'')'
  - question: Has an administrative utility that can modify autostart mechanisms been executed by a statistically anomalous parent process?
    context: This question expands on the previous one by using a statistical baseline of all parent-child process relationships across the enterprise. It learns what normal process execution chains look like. Any time an administrative tool like sc.exe is launched by a parent process that is a statistical outlier (e.g., outlook.exe), it is flagged as a potential threat, indicating process injection or a malicious macro.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints/servers with command-line auditing.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=1 | stats count by parent_process_name, process_name | where process_name IN (''sc.exe'', ''schtasks.exe'') | identify rare parent_process_name'
  - question: Does a model identify the command-line arguments used with an administrative utility as an outlier?
    context: Beyond the parent process, the specific combination of arguments used with a tool like schtasks.exe can be revealing. This question uses an anomaly detection model (like an isolation forest) to learn the patterns of legitimate command-line usage. It can then spot novel or unusual combinations of arguments that an adversary might use to create a stealthy persistence mechanism, even if the parent process seems legitimate.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints/servers with command-line auditing.
    range: last 90 days
    queries:
      - spl: 'pseudocode: commands = get_historical_commands(''schtasks.exe'') | model = isolation_forest.fit(vectorize(commands)) | for new_command in stream: if model.predict(new_command) == ''outlier'': alert'
  - question: Has a privileged system process loaded an unsigned DLL or a DLL from a location not on its specific allowlist?
    context: This is a classic DLL hijacking detection. Privileged processes like services.exe should only load specific, signed DLLs from protected system directories. This question creates a strict allowlist for these critical processes and alerts on any deviation, such as loading an unsigned DLL or a DLL from an unexpected path. This is a high-fidelity indicator of a compromised system process.
    answer_sources:
      - Sysmon Event ID 7
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=7 AND process_name IN (''services.exe'', ''winlogon.exe'') | where (signed=false) OR (dll_path NOT IN process_allowlist)'
  - question: Has a privileged system process loaded a DLL from a statistically outlier path?
    context: Instead of a manually curated allowlist, this question uses a statistical approach. It profiles the normal DLL loading behavior for each privileged process across the enterprise. It then flags any instance where a process loads a DLL from a path that is a statistical outlier (e.g., C:\ProgramData\) or has characteristics of randomness (high entropy), indicating a probable hijack attempt.
    answer_sources:
      - Sysmon Event ID 7
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=7 AND process_name IN privileged_processes | stats count by dll_path | where count < threshold OR entropy(dll_path) > high_threshold'
  - question: Does the sequence of DLLs loaded by a privileged process deviate from its normal boot-time behavior?
    context: The order in which a process loads its DLLs is often stable. This advanced question uses a sequence-aware model (like an LSTM autoencoder) to learn the normal sequence of DLL loads for a process during boot. If an adversary injects a malicious DLL, it can disrupt this sequence. The model detects this disruption as a high 'reconstruction error' and flags it as an anomaly, catching sophisticated injection techniques.
    answer_sources:
      - Sysmon Event ID 7
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: for process in privileged_processes: dll_sequence = get_boot_dll_sequence(process) | model = lstm_autoencoder.fit(normal_sequences) | if model.reconstruction_error(dll_sequence) > threshold: alert'
  - question: Is a process running as 'SYSTEM' from an unsigned executable located in a user-writable directory?
    context: There is almost no legitimate reason for a process to be running with the highest system privileges (NT AUTHORITY\SYSTEM) out of a common user directory like C:\Users or C:\Temp. This question combines three strong indicators: SYSTEM-level integrity, a user-writable path, and a lack of a valid digital signature. An alert from this rule is a very high-confidence indicator of privilege escalation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=1 AND user=''NT AUTHORITY\\SYSTEM'' AND image_path IN (''C:\\Users\\*'', ''C:\\Temp\\*'') AND signed=false'
  - question: Has a process been executed as 'SYSTEM' from a path that is extremely rare across the enterprise?
    context: This question leverages the power of enterprise-wide data to find 'needle in a haystack' threats. It builds a frequency table of every executable path that runs as SYSTEM. A new process running as SYSTEM from a path that has never been seen before, or only on a tiny fraction of hosts, is highly suspicious. This can detect custom malware used in targeted attacks.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: search sysmon_eid=1 AND user=''NT AUTHORITY\\SYSTEM'' | stats dc(host) as host_count by image_path | where host_count < threshold'
  - question: Does a novelty detection model identify a new SYSTEM process as an outlier?
    context: This question uses a machine learning model trained only on legitimate SYSTEM processes. The model learns the 'profile' of normalcy based on features like image path, parent process, and signature status. Any new SYSTEM process that doesn't fit this profile is flagged as a novelty or outlier. This is effective for catching threats that don't match any specific rule but are 'abnormal' in their overall characteristics.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Data from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - spl: 'pseudocode: system_processes = get_legit_system_processes() | model = one_class_svm.fit(features(system_processes)) | for new_process in stream: if model.predict(new_process) == ''novelty'': alert'