name: T1546.016: Installer Packages
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps analysts investigate the use of malicious installer packages for persistence and privilege escalation. It covers scenarios such as installers dropping known malicious files, creating unauthorized persistence mechanisms (services, tasks, run keys), exhibiting anomalous network behavior, executing obfuscated scripts, leveraging vulnerable application versions for exploits, spawning privilege escalation tools, performing UAC bypasses, adding users to privileged groups, and modifying sensitive registry keys. The goal is to identify and respond to adversaries abusing legitimate or trojanized software installers to gain a foothold and elevate their access within the environment.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect if an installer process created a file or child process that matches a known malicious hash?
    context: This question aims to identify a direct indicator of compromise where an installer process (like msiexec.exe or setup.exe) creates a file or launches a process that is already known to be malicious. By correlating process and file creation events with a threat intelligence feed of malware hashes, analysts can quickly detect trojanized installers or post-installation malware drops. A match is a high-confidence indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_events OR file_creation_events
          WHERE parent_process IN ('msiexec.exe', 'setup.exe', 'install.exe')
          JOIN threat_intelligence_feed ON child_process_hash=malware_hash OR file_hash=malware_hash
          RETURN matching_events
  - question: How can I detect potentially obfuscated PowerShell scripts launched by installer processes?
    context: Adversaries often use obfuscation to hide malicious PowerShell commands executed during installation. This question focuses on using Shannon entropy to identify such obfuscation. High entropy in a script block suggests randomness, characteristic of encoded or encrypted payloads. By baselining the entropy of legitimate installer scripts and flagging outliers (e.g., top 5th percentile), analysts can uncover hidden malicious logic.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH powershell_script_block_logs
          WHERE parent_process IN ('msiexec.exe', 'setup.exe', 'install.exe')
          CALCULATE shannon_entropy(script_block_content)
          COMPARE entropy_score to established_baseline
          RETURN scripts WHERE entropy_score > 95th_percentile_baseline
  - question: Can a machine learning model be used to predict if a file written by an installer is malicious?
    context: This question explores a proactive, predictive approach. A machine learning model, such as a gradient boosting classifier, can be trained to recognize subtle patterns of maliciousness. By analyzing features like file entropy, size, write location, parent process, and digital signature status, the model can score new files in near-real-time, enabling analysts to find novel threats not yet in threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_xgboost_classifier(features=[entropy, size, path, parent, signature])
          FOR each new file_creation_event where parent is installer:
            SCORE file with MODEL
            IF score > 0.9:
              ALERT "High-confidence malicious file detected"
  - question: How can I detect if an installer creates a persistence mechanism that matches a known malicious pattern?
    context: This question focuses on detecting when an installer establishes persistence (e.g., a new service, scheduled task, or registry run key) using methods associated with known malware. By monitoring for these persistence creation events and correlating them to an installer parent process, analysts can apply rule-based detection (like YARA or Sigma) to the properties of the persistence mechanism to identify known threats.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH service_creation OR scheduled_task_creation OR autorun_registry_modification
          WHERE parent_process_is_installer
          APPLY ruleset (YARA/Sigma) to (service_name, task_name, command_line, registry_value)
          RETURN events matching rules
  - question: How can statistical rarity be used to identify suspicious persistence mechanisms created by installers?
    context: This question addresses finding novel malicious persistence by identifying statistically unusual behavior. By calculating a "rarity score" for the properties of a new persistence entry (e.g., how uncommon is this executable path for a service?), analysts can flag entries that deviate significantly from the norm. A high aggregate rarity score suggests the persistence mechanism is an outlier and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new_persistence_event from installer:
            rarity_path = calculate_frequency(executable_path)
            rarity_name = calculate_frequency(service_name)
            combined_score = aggregate(rarity_path, rarity_name)
            IF combined_score > 98th_percentile:
              ALERT "Anomalous persistence detected"
  - question: Can a machine learning model predict if a new persistence entry created by an installer is malicious?
    context: This question proposes using a machine learning classifier to automate the detection of malicious persistence. The model analyzes a combination of features, including the parent installer, executable path, command-line arguments, and path rarity. This allows for a more nuanced decision-making process than simple rules or rarity scores alone, helping to identify malicious persistence with a higher degree of confidence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Windows Event ID 4698
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_logistic_regression(features=[parent_process, path_location, args_present, rarity_score])
          FOR each new_persistence_event from installer:
            SCORE event with MODEL
            IF score > 0.9:
              ALERT "High-confidence malicious persistence detected"
  - question: How can I detect when a known installer creates an unauthorized persistence mechanism?
    context: This question focuses on baselining the behavior of legitimate, known installer packages. By creating an explicit allowlist that maps approved installers to the specific persistence entries they are authorized to create (e.g., 'acrobat_installer.msi' creates 'AdobeARMservice'), any deviation from this known-good behavior can be immediately flagged as suspicious. This is effective against supply chain attacks or trojanized versions of legitimate software.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4697
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          ALLOWLIST = load_installer_to_persistence_map()
          SEARCH persistence_creation_events
          IF event.installer_hash NOT IN ALLOWLIST OR event.persistence_entry NOT IN ALLOWLIST[event.installer_hash]:
            ALERT "Unauthorized persistence created by known installer"
  - question: How can I use frequency analysis to find anomalous persistence created by common installers?
    context: This question provides a statistical method for baselining installer behavior. By tracking the frequency of (installer_name, persistence_type, persistence_path_location) tuples over time, a profile of normal activity is established. Any new persistence creation event that forms a statistically rare combination (e.g., a common installer writing to a user-writable directory like C:\PerfLogs) is flagged as an anomaly, pointing to potentially malicious abuse of a legitimate installer.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4697
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE = build_frequency_map(installer, type, path_location)
          FOR each new persistence_creation_event:
            TUPLE = (event.installer, event.type, event.path_location)
            IF frequency(TUPLE) < 1st_percentile:
              ALERT "Statistically rare persistence behavior detected"
  - question: Can clustering algorithms identify anomalous installation patterns?
    context: This question suggests using an unsupervised machine learning approach, like DBSCAN, to find outliers in installation behavior. By clustering persistence creation events based on features like parent process, persistence type, and target path, legitimate installation patterns will form dense clusters. Events that are classified as noise or fall into very small, sparse clusters are anomalies that do not fit any established pattern and require investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4698
      - Windows Event ID 4697
      - Windows Event ID 4657
      - Endpoint devices
      - Application servers
      - Domain Controllers
      - Software deployment servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_dbscan_clusterer(features=[parent, type, path_characteristics, user])
          FOR each new persistence_creation_event:
            CLUSTER_ID = predict(event)
            IF CLUSTER_ID is "noise" or cluster_size is very small:
              ALERT "Anomalous installation pattern detected"
  - question: How can I detect if an installer is connecting to a known-malicious IP or domain?
    context: This question addresses the detection of malicious network activity from an installer process. By correlating process creation events with network connection logs and comparing the destination IP/domain against a threat intelligence feed of known C2 servers or malicious sites, analysts can identify installers that are downloading secondary payloads or communicating with an attacker's infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network egress points (firewalls/proxies)
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH network_connections where process_is_installer
          JOIN threat_intelligence_feed ON destination_ip=bad_ip OR destination_domain=bad_domain
          RETURN matching_connections
  - question: How can I detect anomalous network behavior from a specific installer process?
    context: This question focuses on building a network behavior baseline for each unique installer. By profiling typical activity (e.g., destination ports, protocols, data volume, requested TLDs), any significant deviation can be flagged. For example, an installer that suddenly transfers an unusually large amount of data or connects to a newly registered domain would be considered anomalous and suspicious, even if the destination is not on a blocklist.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network egress points (firewalls/proxies)
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE = build_network_profile_for_each_installer()
          FOR each new network_connection from installer:
            IF connection_properties deviate from BASELINE[installer_name] (e.g., data_volume > 99th_percentile):
              ALERT "Anomalous network behavior for installer"
  - question: Can a machine learning model detect anomalous network connections from installers?
    context: This question proposes using a one-class SVM model to learn the boundary of "normal" network behavior for all legitimate installers. The model is trained on features from known-good network activity. Any new connection from an installer that falls outside this learned boundary is flagged as a high-confidence anomaly. This is effective at detecting novel attack techniques that don't match any pre-defined statistical or signature-based rule.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint devices
      - Network egress points (firewalls/proxies)
      - DNS resolvers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_one_class_svm(features=[port, protocol, ja3, duration, bytes])
          FOR each new network_connection from installer:
            IF MODEL.predict(connection) is "anomaly":
              ALERT "Anomalous network connection detected by ML model"
  - question: How can I detect if an installer is executing a script with known malicious commands?
    context: This question aims to find malicious activity by inspecting the content of scripts (e.g., PowerShell) executed by installer processes. By enabling script block logging (Windows Event ID 4104) and applying a ruleset (like Sigma) to search for suspicious string combinations (e.g., 'IEX', 'DownloadString', 'Bypass'), analysts can detect common malicious script-based techniques used during installation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH powershell_script_block_logs where parent_process_is_installer
          APPLY ruleset to script_content for keywords like 'IEX', 'DownloadString', 'Base64'
          RETURN scripts matching rules
  - question: How can I use statistical analysis to find suspicious scripts executed by installers?
    context: This question focuses on identifying malicious scripts that are obfuscated or use uncommon techniques. By calculating the Shannon entropy of script content, analysts can flag potentially packed or encoded scripts (high entropy). Additionally, by tracking the frequency of all PowerShell cmdlets used by installers, the use of a statistically rare cmdlet can be flagged as anomalous and worthy of investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH powershell_script_block_logs where parent_process_is_installer
          CALCULATE entropy(script_content)
          CALCULATE cmdlet_frequency(script_content)
          IF entropy > 95th_percentile OR cmdlet_is_rare:
            ALERT "Anomalous script execution detected"
  - question: Can a machine learning model classify scripts executed by installers as malicious?
    context: This question suggests leveraging a pre-trained Natural Language Processing (NLP) model to automatically classify PowerShell script blocks. By fine-tuning a model on a large corpus of both malicious and benign scripts, it can learn the nuanced patterns, syntax, and functions indicative of malicious intent. This allows for the detection of novel and complex malicious scripts that may evade other methods.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Application servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = load_pretrained_nlp_script_classifier()
          FOR each new powershell_script_block from installer:
            SCORE script_content with MODEL
            IF score is "malicious" and confidence > 0.90:
              ALERT "Malicious script detected by NLP model"
  - question: How can I detect if an executed installer is a known vulnerable application?
    context: This question focuses on proactively identifying risk. When an installer is executed, its file hash can be compared against a database of known-vulnerable application versions that have public privilege escalation exploits. A match indicates that an adversary could potentially exploit this installation to elevate their privileges on the system, and it should be treated as a high-priority alert.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Software repositories
      - Patch management systems
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_events where process_is_installer
          EXTRACT file_hash of installer
          JOIN vulnerability_database ON file_hash=vulnerable_app_hash
          RETURN matches with known privilege escalation exploits
  - question: How can I statistically identify installations of software with known privilege escalation vulnerabilities?
    context: This question provides a broader, risk-based approach. By maintaining an inventory of installed applications and cross-referencing new installations against a vulnerability database (like NVD), analysts can flag any new software that has a known Local Privilege Escalation vulnerability with a high CVSS score. This helps prioritize patching and identify systems where an attacker might easily elevate privileges.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Software repositories
      - Patch management systems
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each new installation_event:
            LOOKUP software_name, software_version in NVD
            IF CVE exists with (Attack Vector: Local) AND (CVSS > 7.0):
              ALERT "Vulnerable software with PrivEsc vector installed"
  - question: Can a machine learning model predict if an installer corresponds to a vulnerable application version?
    context: This question proposes using a model to predict vulnerability based on installer metadata. By training a classifier on features like software name, version string, publisher, and certificate info from both vulnerable and patched historical versions, the model can learn to proactively flag installations of software that are likely to be outdated and contain known vulnerabilities, even without a direct hash match.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint devices
      - Software repositories
      - Patch management systems
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_classifier(features=[name, version, publisher, cert_info])
          FOR each new installation_event:
            PREDICT vulnerability_status with MODEL
            IF prediction is "vulnerable":
              FLAG for review
  - question: How can I detect if an installer spawns a known privilege escalation tool?
    context: This is a direct, signature-based question. When an installer process creates a child process, the child's name and command-line arguments should be scanned for patterns matching known privilege escalation tools (e.g., 'JuicyPotato.exe', 'Invoke-PowerUp'). A match is a strong indicator that the installer is malicious and is actively attempting to elevate its privileges on the host.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Domain Controllers
      - High-value asset servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_events where parent_process_is_installer
          APPLY regex for known tool names ('JuicyPotato', 'PrintSpoofer') to child_process_name and command_line
          RETURN matching events
  - question: How can I use statistical analysis to find suspicious child processes spawned by installers?
    context: This question helps find unknown or obfuscated privilege escalation tools. By analyzing the command-line arguments of child processes, statistical outliers can be identified. High Shannon entropy or unusual character frequencies in a command line can indicate obfuscation. Flagging commands that are in the 99th percentile of entropy for that specific process name (e.g., a high-entropy `rundll32.exe` command) can uncover hidden malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Domain Controllers
      - High-value asset servers
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each child_process from installer:
            CALCULATE entropy, char_frequency of command_line
            IF entropy > 99th_percentile for that child_process_name:
              ALERT "Anomalous command line detected"
  - question: Can a machine learning model detect anomalous command-line arguments from installer child processes?
    context: This question proposes using a sequence-based model like an LSTM to learn the normal structure of command-line arguments for processes spawned by legitimate installers. The model learns the typical order and combination of tokens. Any command line that the model finds difficult to reconstruct (i.e., has a high anomaly score) is flagged as suspicious, which can help detect novel or heavily obfuscated tools.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Endpoint devices
      - Domain Controllers
      - High-value asset servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_lstm_on_command_line_token_sequences()
          FOR each child_process from installer:
            ANOMALY_SCORE = MODEL.reconstruction_error(command_line)
            IF ANOMALY_SCORE is high:
              ALERT "Anomalous command-line sequence detected"
  - question: How can I detect if an installer bypasses UAC by spawning a higher-integrity child process?
    context: This question targets a specific UAC bypass technique. A rule can be created to alert any time an installer process running at a 'Medium' integrity level spawns a child process (like `cmd.exe`) that is running at a 'High' or 'System' integrity level. Exclusions for legitimate elevation brokers (like `consent.exe`) are necessary, but an unexpected elevation is a strong sign of a privilege escalation exploit.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint devices
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process_creation_events (Sysmon EID 1)
          WHERE parent_process_is_installer AND parent_integrity_level is 'Medium'
          AND child_integrity_level IN ('High', 'System')
          AND child_process_name is NOT 'consent.exe'
          ALERT "Potential UAC Bypass Detected"
  - question: How can I statistically find anomalous integrity level changes from installers?
    context: This question involves baselining the normal behavior of installers. For each unique installer name, a profile of the typical integrity levels of its child processes is created. An alert is triggered when an installer spawns a child with an integrity level that is statistically rare for that parent (e.g., a 'System' level process when 99.9% of historical children were 'Medium'), indicating a deviation from normal operation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint devices
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE = build_integrity_level_profile_for_each_installer()
          FOR each child_process from installer:
            IF child_integrity_level is anomalous for BASELINE[installer_name]:
              ALERT "Anomalous integrity level elevation detected"
  - question: Can a machine learning model find anomalous integrity escalations?
    context: This question proposes using an unsupervised model like Isolation Forest to find rare combinations of process attributes. The model is trained on features including parent/child process names and integrity levels. It learns to quickly "isolate" rare events. An event like a non-system installer spawning a SYSTEM-level command prompt would be isolated quickly and flagged as a high-confidence anomaly.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint devices
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_isolation_forest(features=[parent, child, parent_integrity, child_integrity])
          FOR each process_creation_event:
            ANOMALY_SCORE = MODEL.predict(event)
            IF ANOMALY_SCORE is high:
              ALERT "Anomalous process integrity combination detected"
  - question: How can I detect if an installer adds a user to a high-privilege group?
    context: This question targets a direct privilege escalation action. A high-severity alert should be created for any event where a member is added to a privileged group like 'Administrators' or 'Domain Admins' (Windows Event ID 4732/4728). By correlating this event back to the process that initiated it, analysts can determine if an installer was responsible for the unauthorized privilege escalation.
    answer_sources:
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Windows Event ID 4688
      - Endpoint devices
      - Domain Controllers
      - Active Directory databases
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH group_membership_add_event (4732, 4728) where group is privileged
          CORRELATE subject_process_id with process_creation_events (4688)
          IF source_process_is_installer:
            ALERT "Installer added user to privileged group"
  - question: How can I detect a burst of group modification activity following an installation?
    context: This question uses time-series analysis to find suspicious behavior. By profiling the normal rate of group modifications per host, a sudden spike in these events immediately following an installation can be detected. A burst of activity that is several standard deviations above the hourly baseline for that host is a strong anomaly, suggesting a script or tool run by the installer is manipulating user privileges.
    answer_sources:
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Windows Event ID 4688
      - Endpoint devices
      - Domain Controllers
      - Active Directory databases
    range: last 90 days
    queries:
      - pseudocode: |
          MONITOR rate of group_modification_events per host
          IF rate > (baseline + 3 * std_dev) within minutes of an installation_event:
            ALERT "Anomalous spike in group modifications post-installation"
  - question: Can a machine learning model determine if a group membership change is suspicious?
    context: This question suggests using a simple classifier like a decision tree to model suspicious group changes. The model is trained on features like the process making the change, the group being modified, and the time of day. It can learn rules like "a change to the Administrators group made by `net.exe` which was spawned by `msiexec.exe` is highly suspicious," providing automated, context-aware alerting.
    answer_sources:
      - Windows Event ID 4732
      - Windows Event ID 4728
      - Windows Event ID 4688
      - Endpoint devices
      - Domain Controllers
      - Active Directory databases
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_decision_tree(features=[process_name, group_name, time_of_day, parent_process])
          FOR each group_membership_change_event:
            IF MODEL.predict(event) is "suspicious":
              ALERT "Suspicious group membership change detected"
  - question: How can I detect if an installer modifies sensitive registry keys related to privilege escalation?
    context: This question involves monitoring critical registry keys (e.g., Image File Execution Options, LSA, Winlogon) that can be abused for persistence and privilege escalation. A rule should be created to generate a critical alert on any write or create operation to these keys where the source process is a known installer or a direct child of an installer, as this is not legitimate behavior.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Endpoint devices
      - Windows Registry hives on critical servers and workstations
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH registry_write_events (Sysmon EID 13, Win EID 4657)
          WHERE target_key IN (critical_key_list)
          AND (source_process_is_installer OR source_process_parent_is_installer)
          ALERT "Installer modified sensitive registry key"
  - question: How can I find statistically rare processes modifying sensitive registry keys?
    context: This question focuses on identifying anomalous processes that interact with sensitive registry locations. By building a frequency profile of all processes that legitimately modify these keys, any write access from a process that has never been seen before or is statistically very rare (e.g., in the bottom 1% of frequency) can be flagged. For example, if `msiexec.exe` rarely or never touches the IFEO key, such an event is highly suspicious.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Endpoint devices
      - Windows Registry hives on critical servers and workstations
    range: last 90 days
    queries:
      - pseudocode: |
          PROFILE = build_frequency_profile_of_processes_writing_to_sensitive_keys()
          FOR each write_event to sensitive_key:
            IF frequency(event.process_name) is in bottom 1%:
              ALERT "Statistically rare process modified sensitive registry key"
  - question: Can a machine learning model detect an anomalous sequence of registry modifications during installation?
    context: This question suggests using a Markov Chain model to baseline the normal sequence of registry operations during a legitimate installation. The model learns the probability of transitioning from one key access to another. An anomalous sequence, such as an installer writing to its own software key and then immediately writing to a sensitive system key like IFEO (a low-probability transition), would be flagged as a significant deviation from normal behavior.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Endpoint devices
      - Windows Registry hives on critical servers and workstations
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL = train_markov_chain_on_registry_access_sequences()
          FOR each installation session:
            SEQUENCE = get_registry_access_sequence()
            PROBABILITY = MODEL.get_sequence_probability(SEQUENCE)
            IF PROBABILITY is very low:
              ALERT "Anomalous registry access sequence detected"