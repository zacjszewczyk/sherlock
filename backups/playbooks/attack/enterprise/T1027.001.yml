name: T1027.001: Binary Padding
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify adversarial use of binary padding, a technique to evade static file-based defenses by increasing file size. It focuses on detecting files with hashes matching known padded malware, anomalous Portable Executable (PE) file overlay sizes, executables with statistically unusual file sizes, and suspicious post-execution behaviors (like discovery commands or C2 beaconing) originating from potentially padded binaries.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a file been observed on the network or endpoint with a hash matching a known padded malware IOC?
    context: This question aims to directly identify known malicious files that use padding to evade detection. By matching file hashes against a curated threat intelligence feed specifically containing IOCs for padded malware, we can detect threats that might otherwise be missed by generic signature-based systems. A match is a strong indicator of compromise.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Zeek files.log OR Sysmon Event ID 11 FOR file_hash IN threat_intel_feed_padded_malware
  - question: For files identified as known padded malware, does the filename exhibit unusually high randomness?
    context: Adversaries often use randomly generated or high-entropy filenames for their payloads to avoid static naming conventions. After identifying a file as known padded malware based on its hash, analyzing the filename's entropy provides a secondary confirmation and helps prioritize the alert. A filename with entropy in the top 95th percentile for the environment is highly suspicious.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR file in known_padded_malware_matches | CALCULATE filename_entropy | IF filename_entropy > 95th_percentile_baseline THEN ALERT
  - question: Can we use machine learning to score the risk of a file that matches a known padded malware hash, based on contextual features?
    context: This question seeks to automate the prioritization of alerts for known padded malware. By using a machine learning model that considers features like the reputation of the source IP, the importance of the targeted asset, the filename's entropy, and how common the file is, we can assign a confidence score. A high score indicates a higher-priority threat that requires immediate analyst attention.
    answer_sources:
      - Zeek files.log
      - Sysmon Event ID 11
      - Network egress points
      - Proxy server logs
      - Mail gateway logs
      - Endpoint file systems
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT file_hash_match_event | PREDICT malicious_probability with ML_model(features=[source_ip_rep, asset_crit, filename_entropy, hash_prevalence]) | IF probability > 0.9 THEN ALERT
  - question: Have any PE files been observed on the network with an unusually large data overlay?
    context: Binary padding is often implemented by appending a large block of junk data to the end of an executable. This data sits in the file's "overlay." This question looks for PE files where the overlay size exceeds a reasonable threshold (e.g., 512KB), which is much larger than typical appended data like digital certificates. This is a strong indicator of padding.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each PE_file in Zeek logs | CALCULATE overlay_size = files.seen_bytes - pe.size_of_image | IF overlay_size > 512KB THEN ALERT
  - question: Does a specific PE file have an overlay size that is a statistical outlier compared to other files with the same name?
    context: A massive increase in the overlay for a single instance of a common executable (like chrome.exe) is suspicious. This question aims to establish a baseline overlay size for each executable name and flag any deviations. An overlay size in the 99th percentile for its group suggests an attacker has padded a specific instance of that file.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each PE_file in Zeek logs | GROUP by filename | IF current_overlay_size > 99th_percentile(historical_overlay_sizes_for_filename) THEN ALERT
  - question: Has there been a sudden, anomalous spike in the average overlay size of new executables seen on the network?
    context: A coordinated attack might involve distributing many different padded executables over a short period. A time series anomaly detection model can monitor the average overlay size of new files per hour. A sudden, sharp increase in this metric, which deviates from the normal pattern, could indicate the start of a campaign using binary padding.
    answer_sources:
      - Zeek pe.log
      - Zeek files.log
      - Network monitoring sensors (e.g., Zeek) at internet gateways, VPN termination points, and data center ingress/egress points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR time_series(average_overlay_size_per_hour) | USE anomaly_detection_model | IF anomalous_spike_detected THEN ALERT
  - question: Has a critical system process been created from an executable file whose size or hash differs from known-good values?
    context: Adversaries may pad critical system files (e.g., lsass.exe) to mask their malicious versions. This question focuses on protecting high-value targets by maintaining a watchlist of these critical files and their expected properties (size and hash). An alert is triggered if a process is spawned from a file with a matching name but a mismatched size or hash, indicating potential tampering.
    answer_sources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon Event ID 1 WHERE process_name IN critical_process_watchlist | IF file_size OR file_hash != known_good_values THEN ALERT
  - question: Was a process created from an executable file whose size is statistically anomalous compared to historical versions at the same file path?
    context: This question broadens the scope beyond just critical system files to all executables. By tracking the historical file size for every unique executable path, we can build a statistical model of what's normal. A newly observed file at a known path that is significantly larger (e.g., more than 3 standard deviations from the mean size) is a strong anomaly and could indicate binary padding.
    answer_sources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process_creation_event in Sysmon Event ID 1 | CALCULATE historical_mean_and_stddev(file_size) for file_path | IF current_file_size > (mean + 3*stddev) THEN ALERT
  - question: Can unsupervised machine learning identify files with anomalous structural properties indicative of padding?
    context: This question proposes using an unsupervised approach like an Isolation Forest to find outliers without pre-existing rules. The model can analyze multiple file features simultaneously (e.g., size, entropy, PE section count). Files that the model flags as anomalies are structurally different from the majority of benign files and warrant investigation for padding or other obfuscation.
    answer_sources:
      - Sysmon Event ID 1
      - Critical servers (Domain Controllers, database servers)
      - developer workstations
      - standard user endpoints
      - and systems within the DMZ.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INPUT file_metadata (size, entropy, sections, path_depth) | USE Isolation_Forest_model | IF file is_anomaly THEN ALERT
  - question: Did a process originating from a suspected padded binary execute any suspicious child processes, such as discovery commands?
    context: If a process, already flagged as potentially padded, is then observed launching system discovery commands (whoami, net.exe, etc.), it significantly increases the likelihood that it is malicious and is performing reconnaissance on the compromised host. This correlation is a critical step in confirming a compromise.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - and SIEM correlation engines.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH for parent_process flagged_as_padded | IF child_process in (whoami.exe, net.exe, systeminfo.exe, ...) THEN ALERT
  - question: Is a process from a suspected padded binary exhibiting periodic network beaconing consistent with command and control (C2) activity?
    context: Malicious implants often communicate with a C2 server at regular intervals. By analyzing the timestamps of outbound network connections from a process suspected of being padded, we can look for highly regular, automated beaconing. A low standard deviation in the time between connections is a strong statistical indicator of C2 communication.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - and SIEM correlation engines.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR process flagged_as_padded | ANALYZE outbound_connection_timestamps | CALCULATE stddev(time_deltas) | IF stddev < 1.5s THEN ALERT on C2_beaconing
  - question: Can a risk score be dynamically calculated for a process, starting with a padding detection and increasing with subsequent suspicious behaviors identified by machine learning?
    context: This method creates a dynamic risk score. A process gets an initial score if its binary is suspected of being padded. The score then increases if subsequent ML models detect other malicious behaviors, such as DGA-based DNS queries. When the score crosses a critical threshold, a high-severity alert is generated for immediate response.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Endpoint process and network monitoring agents
      - DNS resolvers
      - Network egress points
      - and SIEM correlation engines.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: INITIATE risk_score for process_from_padded_binary | IF DGA_model_predicts_DGA_query THEN increase_risk_score | IF C2_beaconing_detected THEN increase_risk_score | IF risk_score > threshold THEN CRITICAL_ALERT