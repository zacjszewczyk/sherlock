name: T1059.001: PowerShell
id: d4e5f6a1-b2c3-4d7e-8f9a-0b1c2d3e4f5a
description: This playbook helps determine if an adversary is executing malicious code on the network using PowerShell. It focuses on identifying threats by analyzing PowerShell script blocks and command-line execution for various indicators of compromise. These include matching script content against known malicious hashes and C2 indicators, detecting statistically rare or obfuscated scripts, identifying in-memory download and execution patterns, flagging the loading of the PowerShell engine by non-standard processes, spotting command-line arguments that weaken security controls, and finding scripts with large, high-entropy embedded payloads.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a PowerShell script block executing known malicious code or communicating with known malicious infrastructure?
  context: This question checks for direct matches to known threats. By hashing script content and extracting network indicators (IPs, domains, URLs), we can quickly identify if a script is a known malicious tool or if it's trying to contact a command-and-control (C2) server identified by threat intelligence. A match provides a high-confidence signal of malicious activity.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  - Threat Intelligence Feeds
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Windows Event ID 4104 | HASH script block content | LOOKUP against malicious hash list | EXTRACT IPs, domains, URLs from script block content | LOOKUP against malicious indicator feeds | ALERT on match
- question: Is a statistically rare PowerShell script being executed, and is it associated with suspicious network activity like contacting newly registered domains?
  context: Adversaries often use custom or slightly modified scripts that will be rare in a given environment. This question aims to find these needles in the haystack by identifying scripts that have run on very few machines. Correlating the execution of a rare script with high-risk network behavior, such as contacting a domain that was just created, strengthens the suspicion that the script is malicious.
  answer_sources:
  - Windows Event ID 4104
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  - Newly Registered Domain (NRD) feeds
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Windows Event ID 4104 over 30 days | COUNT hosts by script hash | FILTER for hashes on < 5 hosts | FOR each rare script execution | SEARCH Zeek dns.log for DNS queries from same host within 1 minute | LOOKUP domain against NRD feed | ALERT on match
- question: Can a machine learning model classify a given PowerShell script block as malicious based on its textual features?
  context: This question moves beyond simple signature matching to behavioral analysis of the script's content. By training a machine learning model on features like script length, character randomness (entropy), and the presence of suspicious keywords (e.g., 'IEX', 'DownloadString'), we can identify novel or unknown malicious scripts that don't match any known hash but exhibit malicious characteristics.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  - DNS Resolvers
  - Network Egress Points
  - Labeled dataset of benign/malicious scripts
  range: Last 90 days
  queries:
  - pseudocode: FOR each Windows Event ID 4104 | EXTRACT features (length, entropy, n-grams, keywords) | APPLY pre-trained ML model | IF score > 0.85, ALERT
- question: Is a PowerShell command or script using common obfuscation techniques to hide its true intent?
  context: Adversaries frequently use obfuscation to bypass simple keyword-based detections. This question looks for tell-tale signs of obfuscation, such as Base64 encoding flags (`-e`, `-enc`), in-memory execution commands (`IEX`), and string manipulation functions. Finding these patterns is a strong indicator that the command is trying to hide its malicious payload.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Event ID 4688 (command line) OR Event ID 4104 (script block) | REGEX for patterns like '-e', '-enc', 'IEX', 'DownloadString', 'FromBase64String' | ALERT on match
- question: Does a PowerShell script exhibit high entropy or an unusual character ratio, suggesting it is packed or obfuscated?
  context: Obfuscated or encrypted code is more random than normal text-based scripts. This question uses statistical measures like Shannon entropy to quantify this randomness. A script with unusually high entropy or a skewed ratio of letters/numbers to symbols is likely hiding its true code, which is a common technique for malicious payloads.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: FOR each Event ID 4104 | CALCULATE Shannon entropy and character ratio | COMPARE to established baseline | IF entropy > 95th percentile OR ratio > 3 std dev from mean, ALERT
- question: Can a machine learning model classify a PowerShell script as obfuscated based on its structural and statistical properties?
  context: This leverages machine learning to automatically learn the complex patterns of obfuscation. By feeding a model features like entropy, character case ratios, and the frequency of specific obfuscation-related tokens, it can make a sophisticated judgment on whether a script is obfuscated, even if it uses novel techniques not covered by simple regex.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  - Labeled dataset of obfuscated/non-obfuscated scripts
  range: Last 90 days
  queries:
  - pseudocode: FOR each Event ID 4104 | EXTRACT features (entropy, case ratio, length, token frequency) | APPLY pre-trained ML classifier | IF classified as obfuscated, ALERT
- question: Is a PowerShell process downloading and executing a script from the internet in memory, and what network activity is associated with it?
  context: This is a classic "fileless" attack pattern. Adversaries use it to run malicious code without writing a file to disk, bypassing many traditional antivirus solutions. This question identifies this specific behavior by looking for the combination of a download command and an execution command, and then immediately pivots to network logs to see where the script was downloaded from.
  answer_sources:
  - Windows Event ID 4104
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - Zeek dns.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Web Proxies
  - DNS Resolvers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Event ID 4688/4104 for 'IEX' AND ('DownloadString' OR 'DownloadFile' OR 'Invoke-WebRequest') | ON trigger, SEARCH Zeek logs for network connections from source host within 10 seconds | ALERT on correlation
- question: Is the PowerShell process on a given host making an anomalously high number of network connections or connecting to unusual destinations?
  context: While some administrative tasks use PowerShell to connect to the network, it's often predictable. This question establishes a baseline of normal network behavior for `powershell.exe` on each host. A sudden, significant spike in connections, or connections to destinations not on an approved list (allowlist), can indicate that PowerShell has been co-opted for malicious C2 communication or data exfiltration.
  answer_sources:
  - Windows Event ID 4688
  - Zeek http.log
  - Zeek conn.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  - Web Proxies
  range: Last 90 days
  queries:
  - pseudocode: BASELINE daily network connection count from powershell.exe per host | ALERT if count > 99th percentile | ANALYZE Zeek http.log for User-Agent 'WindowsPowerShell' | ALERT if destination is not on allowlist
- question: Is the volume of outgoing network traffic from PowerShell processes on a host significantly deviating from its normal, learned pattern?
  context: This question uses time-series analysis to detect subtle anomalies in data exfiltration. A model learns the typical daily and weekly ebb and flow of data sent by PowerShell for legitimate tasks. A significant, unexpected increase in outgoing data volume can be a strong signal that an adversary is using PowerShell to steal data.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - All Windows Endpoints and Servers
  - Network Egress Points
  range: Last 90 days
  queries:
  - pseudocode: TRAIN time-series model on 'bytes_out' from powershell.exe per host | MONITOR real-time traffic | ALERT if observed traffic significantly deviates from model's prediction
- question: Is the core PowerShell engine (`System.Management.Automation.dll`) being loaded by an unexpected process, such as `rundll32.exe` or a Microsoft Office application?
  context: Adversaries can run PowerShell code without `powershell.exe` by having another process load the PowerShell DLL directly. This is a powerful evasion and process injection technique. This question specifically looks for this behavior by monitoring which processes are loading the PowerShell engine and alerting when it's not a standard host like `powershell.exe` or `pwsh.exe`.
  answer_sources:
  - Sysmon Event ID 7
  - Windows Event ID 4104
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  - Microsoft Office applications
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Sysmon Event ID 7 where ImageLoaded is 'System.Management.Automation.dll' | FILTER where ProcessImage is NOT in ('powershell.exe', 'pwsh.exe', 'powershell_ise.exe') | ALERT on any other process, especially 'rundll32.exe', 'mshta.exe'
- question: Has a rare or unique process loaded the PowerShell engine across the enterprise?
  context: This is another "find the needle in the haystack" approach. By looking at all processes that load the PowerShell DLL across the entire organization, we can spot outliers. A legitimate application that uses PowerShell will likely do so on many machines, whereas a custom tool used by an adversary will appear on only one or a few compromised hosts.
  answer_sources:
  - Sysmon Event ID 7
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Sysmon Event ID 7 over 30 days for 'System.Management.Automation.dll' loads | COUNT hosts per ProcessImage | FLAG processes not on allowlist that appear on < 5 hosts
- question: Has an anomalous process-to-DLL load relationship involving the PowerShell engine been observed?
  context: This question models the system's behavior as a graph, where processes and DLLs are nodes and a "load" event is an edge connecting them. After learning what's normal, the model can detect new, unexpected relationships. For example, if `winword.exe` suddenly loads `System.Management.Automation.dll` for the first time ever in the environment, the model would flag this as a highly anomalous and suspicious event.
  answer_sources:
  - Sysmon Event ID 7
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: BUILD graph of (ProcessImage)-[LOADS]->(ImageLoaded) from Sysmon Event ID 7 baseline | MONITOR for new, unseen edges | ALERT on anomalous edges like ('wscript.exe' -> 'System.Management.Automation.dll')
- question: Is PowerShell being executed with command-line arguments designed to bypass security policies, hide the execution window, or run non-interactively?
  context: Legitimate administrators may use these arguments, but they are also heavily favored by adversaries to run their scripts silently and without restriction. This question creates a high-fidelity alert for the use of these suspicious flags, especially when used by non-administrative users, as it's a strong sign of malicious intent.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4104
  - Windows Event ID 4105
  - All Windows Endpoints and Servers
  - Domain Controllers
  - Tier 0 assets
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Event ID 4688 for process 'powershell.exe' | REGEX command line for '-ep bypass', '-w hidden', '-noni', '-enc' | ALERT on match, raise severity if user is non-admin
- question: Has a user executed a PowerShell command with a suspicious argument (e.g., `-EncodedCommand`, `-Bypass`) for the very first time?
  context: This question focuses on changes in individual user behavior. A system administrator might regularly use `-Bypass`, but if a user from the marketing department uses it for the first time, it's highly suspicious. This 'first use' detection can pinpoint a compromised account or insider threat deviating from their normal activity profile.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: MAINTAIN a set of historical arguments per user from Event ID 4688 | FOR each new execution with suspicious args ('-enc', '-Bypass') | CHECK if arg is new for that user | IF new, ALERT
- question: Has a user's PowerShell usage pattern anomalously shifted from a low-activity profile to a high-activity or complex-command profile?
  context: This question uses unsupervised machine learning to automatically group users by their PowerShell behavior. It can distinguish between "power users," "administrators," and "non-users." The system can then alert when a user's account suddenly starts behaving like a different group (e.g., a standard user suddenly executing complex, obfuscated commands like a power user), which could indicate account takeover.
  answer_sources:
  - Windows Event ID 4688
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: FEATURIZE user command-line history | CLUSTER users into behavior groups (e.g., using DBSCAN) | MONITOR for users shifting between clusters (e.g., from 'low-use' to 'high-use') | ALERT on anomalous shift
- question: Does a PowerShell script contain an embedded Windows executable (PE file) or shellcode?
  context: Adversaries sometimes embed their entire malicious tool (like a RAT or keylogger) directly inside a PowerShell script as a large encoded string. This question looks for this specific technique by identifying large scripts, decoding any Base64 content, and searching for the 'MZ' magic bytes that mark the beginning of a Windows executable file.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Event ID 4104 where script block size > 4KB | DECODE any Base64 strings | SEARCH decoded content for 'MZ' magic bytes or shellcode patterns | ALERT on match
- question: Does a PowerShell script show a distinct, large region of high entropy, suggesting an embedded encrypted or compressed payload?
  context: A normal script has relatively uniform low entropy. A script carrying an encrypted payload will have two distinct parts, the low-entropy PowerShell code that decrypts and runs the payload, and the high-entropy block of the payload itself. This question uses a sliding window to analyze entropy across the script, looking for this bimodal distribution, which is a strong fingerprint of an embedded payload.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: FOR each Event ID 4104 | CALCULATE entropy using a sliding window | IDENTIFY scripts with a bimodal entropy distribution (low-entropy region + high-entropy region > 7.0) | ALERT on match
- question: Does the syntactic structure (Abstract Syntax Tree) of a PowerShell script deviate significantly from the structure of normal, benign scripts?
  context: An Abstract Syntax Tree (AST) represents the grammatical structure of code. A script with a large, embedded payload will have a very unusual AST, often dominated by a single giant string literal node. This question uses an autoencoder, a type of neural network, to learn the structure of normal ASTs. When it fails to accurately reconstruct the AST of a new script (i.e., has a high reconstruction error), it signals that the script's structure is abnormal and likely malicious.
  answer_sources:
  - Windows Event ID 4104
  - All Windows Endpoints and Servers
  range: Last 90 days
  queries:
  - pseudocode: FOR each Event ID 4104 | GENERATE Abstract Syntax Tree (AST) | INPUT AST into pre-trained autoencoder model | IF reconstruction error > 99th percentile, ALERT