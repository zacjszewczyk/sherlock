name: T1059.005: Visual Basic
id: 6a392e2b-8b1e-4363-8a9d-1950d83151b7
description: This playbook helps determine if an adversary is leveraging Visual Basic for code execution. It focuses on detecting suspicious activities such as Windows Script Host processes (wscript.exe, cscript.exe) making outbound connections to known malicious sites, executing with obfuscated or unusual command-line arguments, being spawned by Microsoft Office applications, executing from non-standard file locations shortly after being created, and the loading of the vbscript.dll module by unexpected processes.
type: technique
related:
- TA0002: Execution
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Has a Windows Script Host process (wscript.exe or cscript.exe) made a network connection to a destination known to be malicious based on threat intelligence feeds?
  context: This question aims to detect a common attack pattern where a Visual Basic script, executed by wscript.exe or cscript.exe, acts as a downloader or beacon for command-and-control (C2) infrastructure. A match against a reliable C2 threat intelligence feed is a high-confidence indicator of compromise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: SIEM Pseudocode
    query: |
      JOIN (process_events WHERE process_name IN ('wscript.exe', 'cscript.exe')) AS p
      ON p.process_guid
      WITH (network_events) AS n
      WHERE n.destination_ip IN threat_intel_feed OR n.destination_hostname IN threat_intel_feed
      RETURN p.hostname, n.destination_ip, n.destination_hostname
- question: Has a Windows Script Host process communicated with a rare, high-entropy domain that could indicate the use of a Domain Generation Algorithm (DGA)?
  context: Adversaries often use DGAs to create a large number of potential C2 domains, making blocklisting difficult. These domains typically appear random (high entropy) and are rarely visited by others in the organization (low prevalence). Identifying network traffic from script hosts to such domains can uncover DGA-based C2 channels.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: Network Analysis Pseudocode
    query: |
      FIND network_connections FROM hosts with recent ('wscript.exe', 'cscript.exe') executions
      FOR EACH connection
        CALCULATE domain_prevalence AND domain_entropy
        IF domain_prevalence < 5th_percentile AND domain_entropy > 95th_percentile
          ALERT on host, domain
- question: Can machine learning classify any network connections from Windows Script Host processes as malicious based on their network characteristics?
  context: This question uses a machine learning model to proactively identify malicious connections that might not be caught by signature-based or simple heuristic methods. The model analyzes various features of the network connection (port, protocol, data volume, reputation) to score its likelihood of being malicious, providing a more nuanced detection capability.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - User Workstations
  - Application Servers
  - Network Egress Points
  range: last 90 days
  queries:
  - technology: ML Model Pseudocode
    query: |
      FOR EACH network_connection FROM ('wscript.exe', 'cscript.exe')
        EXTRACT features (port, protocol, bytes_sent, bytes_received, duration, ip_reputation, domain_age)
        SCORE connection with pre-trained_classifier
        IF score > 0.90
          ALERT on connection details
- question: Has a Windows Script Host been executed with command-line arguments containing suspicious flags, COM object instantiation, or download cradle keywords?
  context: Adversaries frequently use specific command-line patterns to control script execution. Batch mode ('//B') suppresses errors, while keywords like 'CreateObject', 'MSXML2.XMLHTTP', and 'ADODB.Stream' are hallmarks of scripts designed to run other commands, download payloads, or manipulate files, making them key indicators of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Web Servers
  range: last 90 days
  queries:
  - technology: SIEM Pseudocode
    query: |
      SEARCH process_events WHERE process_name IN ('wscript.exe', 'cscript.exe')
      AND command_line MATCHES REGEX ('//B', '//E:VBScript', 'CreateObject', 'MSXML2.XMLHTTP', 'ADODB.Stream')
      RETURN hostname, command_line
- question: Is there evidence of a Windows Script Host being executed with an unusually long or high-entropy command line, suggesting obfuscation?
  context: To evade simple keyword-based detection, attackers often obfuscate their scripts or embed them directly into the command line. This results in command lines that are significantly longer and more random (higher entropy) than benign script executions. Baselining normal activity and alerting on deviations can effectively uncover this technique.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Web Servers
  range: last 90 days
  queries:
  - technology: Anomaly Detection Pseudocode
    query: |
      FOR EACH wscript/cscript execution event
        CALCULATE command_line_entropy and command_line_length
        COMPARE to historical baseline
        IF entropy > 95th_percentile OR length > (mean + 3*std_dev)
          ALERT on hostname, command_line
- question: Can a Natural Language Processing (NLP) model classify any Windows Script Host command lines as malicious?
  context: This question applies machine learning, specifically NLP, to analyze the content of command lines. Unlike simple regex or length checks, an NLP model can learn the complex patterns, n-grams, and semantic structures indicative of malicious scripts, allowing it to detect novel or sophisticated obfuscation techniques that other methods might miss.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Domain Controllers
  - Web Servers
  range: last 90 days
  queries:
  - technology: ML Model Pseudocode
    query: |
      FOR EACH wscript/cscript execution event
        EXTRACT text features (n-grams, keywords) from command_line
        SCORE command_line with pre-trained_NLP_classifier
        IF score > 0.85
          ALERT on hostname, command_line
- question: Has a Microsoft Office application (e.g., Word, Excel, Outlook) spawned a Windows Script Host process?
  context: It is extremely rare and highly suspicious for a standard Microsoft Office application to launch a script host like wscript.exe or cscript.exe. This behavior is a classic indicator of a malicious macro within a document executing a script to perform further actions, such as downloading malware or establishing persistence.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Email Gateways
  - File Servers
  range: last 90 days
  queries:
  - technology: SIEM Pseudocode
    query: |
      SEARCH process_events WHERE parent_process IN ('winword.exe', 'excel.exe', 'powerpnt.exe', 'outlook.exe', 'msaccess.exe')
      AND process_name IN ('wscript.exe', 'cscript.exe')
      RETURN hostname, parent_process, process_name
- question: Has the parent-child process relationship of 'Office Application -> Script Host' occurred for the first time for a user or exceeded a low frequency threshold on a host?
  context: This question focuses on detecting the 'Office spawns script host' behavior as a rare or first-time event. Even if some legitimate (though unusual) administrative task creates this pattern, it would be infrequent. Alerting on the first occurrence for a user or a small number of occurrences on a host helps distinguish malicious activity from any potential, rare administrative functions.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Email Gateways
  - File Servers
  range: last 90 days
  queries:
  - technology: Anomaly Detection Pseudocode
    query: |
      FOR EACH user/host
        TRACK frequency of ('Office App' -> 'Script Host') process chain
        IF chain is new for user OR count > 1 in 24h for host
          ALERT on user, host, process chain
- question: Does a process tree anomaly detection model flag the creation of a script host by an Office application as a high-scoring anomaly?
  context: This approach uses a machine learning model trained on normal process creation sequences (process trees). The model learns legitimate parent-child relationships. Because an Office application spawning a script host is so far outside the norm, the model will assign a high anomaly score to this event, providing a robust, context-aware detection method.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Email Gateways
  - File Servers
  range: last 90 days
  queries:
  - technology: ML Model Pseudocode
    query: |
      FOR EACH process creation event
        BUILD process tree context (parent, user, command_line)
        SCORE tree with anomaly_detection_model (e.g., isolation forest)
        IF score indicates high anomaly AND chain is ('Office App' -> 'Script Host')
          ALERT on process tree details
- question: Has a Visual Basic script (.vbs, .vbe) been created in a user-writable directory and then executed within a short time frame?
  context: This is a common attack sequence where a payload (the VBS script) is dropped onto the system (e.g., via an email attachment or browser download) into a temporary or user-specific folder and is then immediately executed. Correlating the file creation with the subsequent process execution within a tight time window (e.g., under 2 minutes) is a strong indicator of malicious activity.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Temporary File Directories
  - User Profile Directories
  range: last 90 days
  queries:
  - technology: SIEM Pseudocode
    query: |
      JOIN (file_create_events WHERE filename ENDS WITH ('.vbs', '.vbe') AND path IN ('C:\\Users\\*', '%TEMP%')) AS f
      ON f.filename, f.hostname
      WITH (process_create_events) AS p
      WHERE p.timestamp - f.timestamp < 2_minutes
      ALERT on f.filename, f.path, p.process_name
- question: Has a Visual Basic script been executed from a directory that is an uncommon location for script execution?
  context: Legitimate scripts are typically run from specific, predictable application or system directories. Adversaries, however, often drop and run scripts from transient or user-specific locations like Downloads, AppData, or Temp directories. By identifying execution paths that are statistically rare across the enterprise, we can uncover these non-standard and likely malicious executions.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Temporary File Directories
  - User Profile Directories
  range: last 90 days
  queries:
  - technology: Anomaly Detection Pseudocode
    query: |
      BUILD frequency map of script execution parent directories over 30 days
      FOR EACH new script execution
        GET parent_directory
        IF frequency(parent_directory) < 1st_percentile
          ALERT on hostname, full_script_path
- question: Does a sequence analysis model consider the chain of events 'process drops VBS file -> VBS file is executed' to be a low-probability, anomalous sequence?
  context: This question leverages a sophisticated model (like a Hidden Markov Model) that learns normal sequences of events on an endpoint. The specific sequence of an application like Outlook writing a VBS file, which is then immediately executed by wscript.exe, is a classic phishing attack pattern. The model, having been trained on normal behavior, would flag this sequence as highly improbable and therefore suspicious.
  answer_sources:
  - Windows Event ID 4663
  - Sysmon Event ID 11
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - User Workstations
  - Temporary File Directories
  - User Profile Directories
  range: last 90 days
  queries:
  - technology: ML Model Pseudocode
    query: |
      INPUT event stream (process_create, file_create) to sequence_analysis_model
      IF model assigns low probability to sequence: (Process A -> FileCreate B.vbs -> ProcessCreate wscript.exe B.vbs)
        ALERT on the anomalous event sequence
- question: Has the VBScript engine DLL (vbscript.dll) been loaded by a process not on the explicit allow-list of standard script interpreters?
  context: The vbscript.dll module provides the core functionality for executing VBScript. It is normally only loaded by designated Microsoft script hosts (wscript.exe, cscript.exe, mshta.exe). When another process loads this DLL, it strongly suggests an attempt to execute VBScript in a custom or stealthy manner, a technique used by malware to evade detections focused only on standard script hosts.
  answer_sources:
  - Sysmon Event ID 7
  - User Workstations
  - Application Servers
  - System32 Directory
  range: last 90 days
  queries:
  - technology: SIEM Pseudocode
    query: |
      SEARCH image_load_events WHERE loaded_image ENDS WITH 'vbscript.dll'
      AND loading_process NOT IN ('wscript.exe', 'cscript.exe', 'mshta.exe', 'iexplore.exe')
      RETURN hostname, loading_process
- question: Has vbscript.dll been loaded by a process that has rarely or never been observed loading it before across the enterprise?
  context: This question uses historical data to spot anomalies. By baselining which processes normally load vbscript.dll, we can easily detect outliers. A process loading this DLL for the first time, or a process that is itself rare on the network loading it, is a significant deviation from the norm and warrants investigation for custom script hosting or code injection.
  answer_sources:
  - Sysmon Event ID 7
  - User Workstations
  - Application Servers
  - System32 Directory
  range: last 90 days
  queries:
  - technology: Anomaly Detection Pseudocode
    query: |
      MAINTAIN baseline of processes that load 'vbscript.dll'
      FOR EACH new 'vbscript.dll' load event
        GET loading_process
        IF loading_process is new to baseline OR is rare across enterprise
          ALERT on hostname, loading_process
- question: Can an unsupervised clustering model identify the loading of vbscript.dll by an unusual process as a statistical outlier?
  context: This uses an unsupervised machine learning approach (like DBSCAN) to group similar events. Normal, legitimate loads of vbscript.dll (e.g., by wscript.exe under a user's context) will form dense clusters. A malicious event, such as a custom malware executable loading the DLL, will not fit into any of these clusters and will be flagged as a "noise point" or outlier, effectively detecting the anomalous behavior without pre-defined rules.
  answer_sources:
  - Sysmon Event ID 7
  - User Workstations
  - Application Servers
  - System32 Directory
  range: last 90 days
  queries:
  - technology: ML Model Pseudocode
    query: |
      CLUSTER image_load_events using features (process_name, parent_process, user, loaded_module)
      FOR 'vbscript.dll' load events
        IF event is classified as 'noise' or 'outlier' by the model
          ALERT on event details