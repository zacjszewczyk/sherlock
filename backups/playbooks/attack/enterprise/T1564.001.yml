name: T1564.001: Hidden Files and Directories
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: >-
  This playbook is designed to investigate whether an adversary is attempting to evade defenses by hiding files or directories. This can include using the 'attrib.exe' utility to set the hidden attribute, leveraging PowerShell to modify file properties, creating Unix-style hidden 'dot-files' on Windows systems, or executing malicious processes from hidden locations that initiate outbound network connections.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events for 'attrib.exe' with the '+h' argument, indicating a file is being hidden?
    context: >-
      This question aims to find direct evidence of the 'attrib.exe' utility being used to set the hidden attribute on files or directories. Detecting this command can be a strong indicator of defense evasion. To manage noise, it's important to filter out legitimate administrative activities, such as software deployments by tools like SCCM ('ccmexec.exe'), by whitelisting known parent processes or exact command lines.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH ProcessCreationEvents (EID: 4688) WHERE process_name = 'attrib.exe' AND command_line CONTAINS '+h' AND parent_process NOT IN (whitelist).
  - question: Is there an abnormal frequency of 'attrib.exe +h' executions on any given host compared to its historical baseline?
    context: >-
      This question moves beyond single detections to identify statistical anomalies. A sudden spike in the number of files being hidden on a single host can indicate malicious activity, such as a ransomware preparator hiding staging files. By comparing daily counts against a 30-day rolling 99th percentile, we can detect unusual bursts of activity.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE count of 'attrib.exe +h' events by host, per day. COMPARE daily count against pre-calculated 99th percentile baseline. ALERT if count > baseline.
  - question: Can we predict whether an 'attrib.exe +h' execution is malicious based on contextual features like parent process, user, time, and target directory?
    context: >-
      This question applies machine learning to automate the classification of 'attrib.exe +h' events. By training a model on features like the parent process, the user account involved, the time of execution, and the location of the file being hidden, we can develop a more nuanced detection capability that learns from past incidents to identify subtle indicators of maliciousness.
    answer_sources:
      - Windows Event ID 4688
      - User workstations, Application Servers, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features (parent_process, user, time_of_day, target_path) from 'attrib.exe +h' events. APPLY trained classification model. ALERT on malicious prediction.
  - question: Has PowerShell been used to hide a file or directory by modifying its attributes?
    context: >-
      This question targets the use of PowerShell to hide files. It looks for specific script patterns in PowerShell logs (Event ID 4104) that either set the 'IsHidden' property to true or manipulate the file's attributes directly. To avoid false positives from administrative scripts, it is crucial to maintain a suppression list of known-good script hashes.
    answer_sources:
      - Windows Event ID 4104
      - User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH ScriptBlockLogs (EID: 4104) FOR REGEX '(\.Attributes.*\+|Set-ItemProperty.*-Name IsHidden -Value \$true)' WHERE script_hash NOT IN (suppression_list).
  - question: Is any user executing unusually obfuscated PowerShell scripts to hide files, compared to the general user population?
    context: >-
      Adversaries often obfuscate their PowerShell scripts to evade keyword-based detections. This question seeks to identify such obfuscation by measuring the Shannon entropy of the scripts used to hide files. A user whose scripts have a significantly higher average entropy than their peers is a strong candidate for investigation, as it suggests they are not using standard, human-readable administrative scripts.
    answer_sources:
      - Windows Event ID 4104
      - User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE entropy for each file-hiding PS script. GROUP by user, average entropy over 7 days. COMPARE user_avg_entropy to population_mean + 3*stdev. ALERT on deviation.
  - question: Are there unusual or outlier clusters of PowerShell scripts being used to hide files, suggesting a unique or uncommon toolset?
    context: >-
      This question uses unsupervised machine learning to group similar PowerShell scripts together. Legitimate administrative scripts tend to form large, dense clusters. Malicious or custom adversary tools, however, may appear as small, distinct clusters or as outliers that do not fit with any known group. By analyzing the content and metadata of these scripts, we can identify novel attack patterns.
    answer_sources:
      - Windows Event ID 4104
      - User workstations, Exchange Servers, Web Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE file-hiding PS scripts using TF-IDF and metadata. APPLY clustering algorithm (e.g., DBSCAN). INVESTIGATE outlier scripts and small clusters.
  - question: Have any files or directories been created with a leading period (dot-file), a common *nix convention for hidden files, on a Windows system?
    context: >-
      This question looks for behavior that is native to Unix-like systems but highly anomalous on Windows: the creation of 'dot-files' (e.g., '.config'). Adversaries may use this technique assuming it will go unnoticed. Any such creation, especially outside of common developer tools like Git, is suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH FileCreationEvents (EID: 4663) or ProcessCreationEvents (EID: 4688) for path/commandline with REGEX '\\\.[^\\]+'. EXCLUDE events where parent_process is in (git.exe, ssh.exe, etc.).
  - question: Is an uncommon or rare process creating dot-files on Windows systems?
    context: >-
      This question builds on the detection of dot-files by focusing on the parent process. While some legitimate tools create dot-files, they are few. By baselining which processes normally perform this action, we can quickly spot anomalies. If a process like 'powershell.exe', 'cmd.exe', or an unknown executable is observed creating dot-files, it is highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT parent processes creating dot-files. COMPARE against a baseline of common processes. ALERT on any process not in the top 95% of the frequency baseline.
  - question: Is there a statistically anomalous spike in the creation of dot-files across the entire enterprise over time?
    context: >-
      This question aims to detect a widespread, coordinated campaign involving the creation of dot-files. A sudden, enterprise-wide increase in this rare activity could signal a malware outbreak or a synchronized adversary action. A time-series anomaly detection model can automatically identify these spikes while accounting for normal business rhythms.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - User profile directories (e.g., 'C:\Users\<username>\'), temporary directories ('%TEMP%'), web server root directories
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE dot-file creation events per hour. APPLY time-series anomaly detection model. ALERT on anomalous time intervals.
  - question: Is a process executing from a known hidden location making an external network connection?
    context: >-
      This question connects two suspicious events: execution from a hidden file and external network communication. Adversaries often hide their malware or tools and then use them to establish command and control. By correlating process execution logs with network logs and a continuously updated list of hidden files, we can detect this high-fidelity indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MAINTAIN state table of hidden files. CORRELATE ProcessEvents with NetworkEvents. ALERT if process_path is in hidden_files_table AND destination_ip is external.
  - question: Are processes running from hidden locations communicating with rare or newly observed domains?
    context: >-
      Adversaries often use new or obscure domains for command and control to evade reputation-based blacklists. This question focuses on the domains being contacted by processes running from hidden files. By identifying domains that are rarely visited by anyone in the organization, we can pinpoint likely C2 infrastructure.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FILTER for network connections from hidden processes. ANALYZE requested domains. IDENTIFY domains with low frequency (bottom 5th percentile). ALERT on connections to rare domains.
  - question: Can we use graph-based analysis to identify complex, multi-hop relationships indicative of malicious activity involving hidden files?
    context: >-
      This question proposes an advanced detection method using graph analytics. By modeling entities (processes, files, IPs) as nodes and their interactions as edges, we can analyze complex attack chains. A Graph Neural Network can learn the patterns of malicious subgraphs—for example, a process executing from a hidden file and connecting to a low-reputation domain—to identify threats that are invisible to simpler, rule-based systems.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (Firewall, Proxy), DNS servers, endpoint devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BUILD graph of (process, file, IP, domain) nodes and their relationships. ENRICH nodes with features (isHidden, threat_intel). APPLY GNN model to classify subgraphs as malicious.