name: T1036.008: Masquerade File Type
id: 5a81e3a9-2545-4299-a6a2-61875323e20e
description: This playbook helps investigate if an adversary is attempting to evade defenses by masquerading file types. This can involve several methods, such as giving a malicious file a non-executable extension (.jpg, .txt) while its hash matches a known threat; ensuring the file's extension is inconsistent with its actual MIME type (e.g., a .jpg that is really an executable); executing interpreters like rundll32.exe or mshta.exe with arguments pointing to files with non-executable extensions; observing common document handlers (mspaint.exe, notepad.exe) spawning shell processes (cmd.exe, powershell.exe); or seeing a file with a non-executable extension being written to a sensitive staging directory and then executed by an interpreter shortly after.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are known malicious files being saved with non-executable extensions to avoid detection?
    context: This question aims to identify a common evasion technique where adversaries rename malicious executables with benign extensions like '.jpg' or '.txt'. By matching file hashes against a threat intelligence feed and checking the file extension, analysts can uncover attempts to smuggle malicious code past basic, extension-based security controls.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Network egress points (e.g., proxies, firewalls)
      - User workstations
      - Critical file servers
      - Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH file_events (network_transfer OR disk_write)
          WHERE file_hash IN (threat_intel_hashes)
          AND file_extension IN (non_executable_list)
          ALERT on findings
  - question: Are known malicious tools masquerading with statistically rare file extensions?
    context: Adversaries may use common malware (e.g., Mimikatz) but rename it with an unusual extension to bypass signature-based rules. This question focuses on identifying outliers by tracking the historical distribution of file extensions for known malicious hashes. A rare extension for a common tool is highly suspicious.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Network egress points (e.g., proxies, firewalls)
      - User workstations
      - Critical file servers
      - Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOREACH detected_malicious_hash
          CALCULATE frequency distribution of associated file extensions over 90 days
          CALCULATE percentile rank of the current observed extension
          ALERT if percentile < 5
  - question: Can we prioritize alerts for masqueraded files using a machine learning model?
    context: To reduce alert fatigue, this question proposes using a classification model to score the likelihood of a file being maliciously masqueraded. By combining features like file hash reputation, extension, source process, and network reputation, analysts can focus their attention on the highest-probability events first.
    answer_sources:
      - Zeek files.log
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - Network egress points (e.g., proxies, firewalls)
      - User workstations
      - Critical file servers
      - Email gateways
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          INPUT features (hash_rep, extension, source_process, network_rep) into classification_model
          GENERATE probability_score
          PRIORITIZE alerts where score > high_threshold
  - question: Are executable files being transferred over the network disguised with non-executable extensions?
    context: This question addresses the detection of executables that are mislabeled with benign extensions like '.txt' or '.jpg'. By inspecting the file's 'magic bytes' to determine its true MIME type (e.g., 'application/x-dosexec'), we can flag mismatches between the claimed extension and the actual file content, revealing a common delivery tactic.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network egress points (e.g., proxies, firewalls)
      - Internal network segments
      - Web servers
      - Mail servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH Zeek:files.log
          WHERE (mime_type == 'application/x-dosexec' OR mime_type == 'application/octet-stream')
          AND filename_extension IN (non_executable_list)
          ALERT on findings
  - question: Are there file transfers with statistically rare extension-MIME type pairings?
    context: Beyond simple mismatches, this question seeks to identify anomalous pairings of file extensions and MIME types. By baselining normal traffic, we can calculate the probability of seeing a specific MIME type given a file extension. A very low probability suggests an unusual and potentially malicious file transfer that warrants investigation.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network egress points (e.g., proxies, firewalls)
      - Internal network segments
      - Web servers
      - Mail servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          BASELINE (extension, mime_type) pairs over 30 days
          CALCULATE P(mime_type | extension) for all transfers
          ALERT if P < 1st_percentile OR pair is unseen
  - question: Can we identify masqueraded executables by finding outlier clusters in file transfer data?
    context: This question proposes using an unsupervised clustering algorithm to find anomalous file transfers without relying on predefined rules. By grouping transfers based on features like file size, entropy, IP reputation, extension, and MIME type, we can isolate outlier clusters that may represent sophisticated masquerading attempts.
    answer_sources:
      - Zeek files.log
      - Zeek conn.log
      - Network egress points (e.g., proxies, firewalls)
      - Internal network segments
      - Web servers
      - Mail servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          APPLY DBSCAN clustering on file transfer features (size, entropy, IP_rep, extension, MIME_type)
          INVESTIGATE outlier clusters identified by the algorithm
  - question: Are legitimate Windows interpreters being used to execute scripts or code hidden in non-executable files?
    context: Adversaries abuse trusted system utilities (e.g., rundll32.exe, mshta.exe) to execute malicious code stored in seemingly harmless files like .log or .jpg. This question helps detect this 'living-off-the-land' technique by monitoring process creation events for known interpreters being launched with arguments pointing to non-standard file types.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - Domain controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH process_creation_events
          WHERE process_name IN (known_interpreters_list)
          AND command_line contains file WITH extension IN (non_executable_list)
          ALERT on findings
  - question: Is a specific interpreter process being used with a statistically rare file extension in its command line?
    context: This question aims to find anomalous usage of interpreters by baselining their behavior. For each interpreter like 'rundll32.exe', we establish what file extensions are normally seen in its command-line arguments. An execution involving a rare extension (e.g., a .dat file when .dll is expected) is a strong indicator of potential misuse.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - Domain controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOREACH interpreter_process
          BASELINE frequency of file extensions in command line over 30 days
          CALCULATE percentile rank for current observed extension
          ALERT if percentile < 5th_percentile
  - question: Are there anomalous spikes in the frequency of specific interpreter-and-extension pairings on any host?
    context: This question uses time-series analysis to detect sudden changes in host behavior. By modeling the normal frequency of an interpreter/extension pair (e.g., 'rundll32.exe executing .dat'), we can automatically flag significant deviations. A sudden spike could indicate the start of a targeted attack or lateral movement activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Application servers
      - Domain controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          MODEL time-series frequency of (interpreter, extension) pairs per host
          DETECT spikes > 3 standard deviations from forecast
          ALERT on detected anomalies
  - question: Are benign-looking applications spawning command shells or script interpreters?
    context: A strong indicator of compromise is when a standard application, like a PDF reader or image viewer, spawns a child process like 'cmd.exe' or 'powershell.exe'. This behavior is highly irregular and often indicates that an exploit was successful within the parent application, leading to code execution.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Terminal servers
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          SEARCH process_creation_events
          WHERE parent_process_name IN (doc_handlers_list)
          AND child_process_name IN (shells_interpreters_list)
          ALERT on findings
  - question: Are there any statistically rare parent-child process relationships occurring in the environment?
    context: This question moves beyond a fixed list of suspicious pairs to find any anomalous parent-child process relationship. By building a graph of all process creations over time, we can flag relationships that are extremely infrequent across the enterprise, such as 'mspaint.exe' spawning 'powershell.exe', which could be a novel attack technique.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Terminal servers
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          BUILD parent-child process graph over 90 days
          CALCULATE frequency of each unique (parent -> child) pair
          ALERT on pairs with frequency < 1st_percentile OR < 10 occurrences
  - question: Can we use a machine learning model to assign a risk score to parent-child process chains?
    context: To improve detection and prioritization, this question suggests training a classifier to identify high-risk process chains. By analyzing features like process names, paths, command lines, and user context, the model can learn to distinguish between benign and malicious activity, helping analysts focus on the most critical threats.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User workstations
      - Terminal servers
      - Application servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          INPUT features (parent_name, child_name, cmd_line, user) into Random Forest model
          ASSIGN risk score to each new process chain
          PRIORITIZE investigation of high-risk chains
  - question: Is a non-executable file being written to a sensitive directory and then executed by an interpreter shortly after?
    context: This question looks for a specific attack chain: staging and execution. An adversary might use a browser to download a file with a .jpg extension into a temp or startup folder, then use an interpreter like 'rundll32.exe' to execute it. Correlating file creation and process creation events within a short time window can detect this behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - User workstations
      - Servers with web browsers
      - Shared network drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          CORRELATE file_creation (Sysmon 11) and process_creation (Sysmon 1) events
          ALERT IF file with non-exec extension is created in sensitive_dir
          AND that same file is used in a process command_line by an interpreter
          WITHIN 5 minutes
  - question: Are there anomalous distributions of file extensions being written to sensitive directories by certain processes?
    context: This question seeks to detect unusual file writing activity in staging locations like 'C:\Windows\Temp'. By profiling the normal distribution of file extensions written by each process (e.g., 'powershell.exe' usually writes .ps1, .log), we can use statistical tests to flag significant deviations, such as a sudden surge in '.jpg' files being written by PowerShell.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - User workstations
      - Servers with web browsers
      - Shared network drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          PROFILE distribution of file extensions per (process, directory) over 30 days
          USE chi-squared test to detect significant deviations from baseline
          ALERT on anomalous distributions (e.g., powershell.exe writing many .jpg files to C:\Windows\Temp)
  - question: Can we detect low-probability event sequences that indicate a masquerade and execution attack chain?
    context: This question proposes using a sequence analysis model to learn common, benign chains of events (e.g., write -> read -> execute). The model can then identify and flag event sequences that have a very low probability of occurring naturally. This can uncover novel or complex attack chains that might otherwise be missed by rule-based detections.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Sysmon Event ID 11
      - Sysmon Event ID 1
      - User workstations
      - Servers with web browsers
      - Shared network drives
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          TRAIN sequence model (HMM or LSTM) on event chains (ProcessA writes file -> ProcessB reads file -> ...)
          CALCULATE probability of new, observed sequences
          ALERT on sequences with very low probability under the model