name: 'T1645: Compromise Client Software Binary'
id: 'f9d8e5a2-8c7b-4f6e-9a1d-3b4c5e6f7a8b'
description: This playbook helps investigate if an adversary has achieved persistence by modifying a client software binary on a mobile device. This is typically observed through three main indicators: 1) A managed mobile device failing a remote integrity check from an attestation service like Google Play Integrity or Samsung Knox, which suggests the device's bootloader or system has been tampered with. 2) The device exhibiting anomalous network behavior, such as connecting to known C2 servers, using DGA-like domains, or showing unusual data exfiltration patterns. 3) A statistically significant increase in crash rates for normally stable system or corporate applications, indicating instability caused by unauthorized binary modification.
type: technique
related:
  - 'TA0028: Persistence'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Is a managed mobile device failing its remote integrity check?
    context: This question seeks to identify definitive evidence of device compromise through remote attestation services. A failure verdict from a service like Google Play Integrity (e.g., a response other than 'MEETS_DEVICE_INTEGRITY' or 'MEETS_STRONG_INTEGRITY') or a similar failure from another provider confirms that the device's software environment has been modified from its factory state. This is a strong indicator that a client software binary may have been compromised and warrants an immediate, high-severity alert.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - Cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: Pseudocode SIEM Rule
        query: |
          SEARCH attestation_logs 
          WHERE (provider="google_play_integrity" AND verdict NOT IN ("MEETS_DEVICE_INTEGRITY", "MEETS_STRONG_INTEGRITY")) 
             OR (provider="samsung_knox" AND result="failed") 
          | ALERT high_severity
  - question: Is there an anomalous increase in the attestation failure rate for a specific segment of the mobile device fleet?
    context: This question aims to detect broader or targeted campaigns by looking for statistical trends rather than single failures. By periodically calculating the attestation failure rate (failed checks / total checks) and segmenting it by device model, OS version, and region, we can identify unusual spikes. An alert is triggered if a segment's failure rate exceeds the 99th percentile of its 30-day historical baseline, suggesting a potential model-specific vulnerability or a geographically focused attack.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - Cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: Pseudocode Scheduled Query
        query: |
          SCHEDULE every 4h 
          | SEARCH attestation_logs 
          | CALCULATE failure_rate = (count(failed) / count(total)) BY device_model, os_version, region 
          | COMPARE failure_rate to 30-day_baseline 
          | ALERT medium_severity if failure_rate > 99th_percentile
  - question: Following an attestation failure, has the compromised device communicated with a high-risk destination?
    context: This question serves as an automated enrichment and escalation step after a device has been confirmed as compromised. Once a high-severity attestation failure alert is triggered, this action immediately analyzes the device's network traffic from the past 72 hours. A machine learning model scores each destination based on risk factors like domain entropy, SSL certificate rarity, and threat intelligence. If any destination scores above a high-risk threshold (e.g., > 0.9), the incident is automatically escalated to critical, signifying likely communication with malicious infrastructure.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Google Play Integrity API logs
      - Samsung Knox Attestation logs
      - Zeek conn.log
      - Zeek ssl.log
      - Managed mobile device fleet
      - Mobile Device Management (MDM) Platform
      - Cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: Pseudocode SOAR Playbook
        query: |
          ON attestation_failure_alert 
          | GET device_id 
          | SEARCH network_logs(conn, ssl) for device_id in last 72h 
          | FOR each destination 
          | SCORE destination using ML_model(entropy, cert_rarity, ja3, threat_intel) 
          | IF score > 0.9 THEN ESCALATE to critical_incident
  - question: Is a mobile device communicating with known command-and-control (C2) infrastructure?
    context: This question looks for direct evidence of compromise by matching outbound network traffic against known malicious destinations. By continuously monitoring network logs (like Zeek's conn.log and ssl.log) and comparing destination IPs and domains against a high-fidelity threat intelligence feed of C2 servers, we can detect active malware communication. A successful match is a high-confidence indicator of compromise and should generate a high-severity alert.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - search_technology: Pseudocode SIEM Rule
        query: |
          SEARCH network_logs(conn, ssl) 
          | JOIN destination_ip, destination_domain with threat_intel_feed(c2_servers) 
          | ON match 
          | ALERT high_severity
  - question: Is a mobile device exhibiting network behavior indicative of data exfiltration or algorithmically generated domains (DGA)?
    context: This question seeks to identify more subtle indicators of malicious activity. It involves two checks. First, it analyzes DNS queries for high Shannon entropy scores, which are characteristic of Domain Generation Algorithms (DGAs) used by malware to locate C2 servers. Second, it monitors for lopsided data flows where outbound data significantly exceeds inbound data (e.g., >10:1 ratio) over a sustained period, a common sign of data exfiltration. Either finding would trigger a medium-severity alert for analyst investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - search_technology: Pseudocode SIEM Rule
        query: |
          SEARCH dns_logs | CALCULATE entropy(query_domain) | IF entropy > baseline_98th_percentile THEN ALERT medium_severity;
          SEARCH conn_logs | WHERE duration > 60s AND (outbound_bytes / inbound_bytes) > 10 | ALERT medium_severity
  - question: Does a mobile device's current network activity deviate significantly from its established historical baseline?
    context: This question uses unsupervised machine learning to spot anomalies in a device's network behavior without relying on known signatures. An isolation forest model is trained on each device's typical network patterns (data volume, unique destinations, port usage, etc.) over a 30-day baseline. The model then scores daily activity; a score indicating a statistical outlier suggests the device is acting abnormally. This could be due to a new compromise and should generate a medium-severity alert for review.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways
      - VPN terminators
      - Cloud Access Security Brokers (CASB)
    range: last 90 days
    queries:
      - search_technology: Pseudocode ML Detection
        query: |
          FOR each device 
          | TRAIN isolation_forest_model on 30-day_network_behavior(data_volume, unique_ips, port_dist, conn_duration) 
          | SCORE daily_activity against model 
          | IF anomaly_score is outlier THEN ALERT medium_severity
  - question: Has a critical, highly stable system application crashed on a managed device?
    context: This question is based on the premise that core system applications (e.g., Android Settings) are engineered for extreme stability and should rarely, if ever, crash. Therefore, any reported crash for an application on a critical allow-list is a significant anomaly. Such an event could be caused by instability from an unauthorized modification of the application binary and should trigger an immediate, high-severity alert.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - Cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - search_technology: Pseudocode Monitoring Alert
        query: |
          SEARCH crash_logs 
          | WHERE app_name IN (critical_system_apps_allowlist) 
          | ALERT high_severity
  - question: Is a specific managed corporate application crashing on a particular device at an anomalously high rate?
    context: This question focuses on identifying device-specific issues by comparing one device's stability against the fleet. While some application crashes are expected, if a single device shows a much higher crash rate for a specific corporate app than its peers, it points to a problem localized to that device. This could indicate that its version of the app binary has been compromised. An alert is generated if a device's crash rate for an app exceeds the 99.5th percentile of the fleet's 30-day baseline.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - Cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - search_technology: Pseudocode Scheduled Query
        query: |
          SCHEDULE daily 
          | SEARCH crash_logs 
          | CALCULATE crash_rate_per_device_per_app 
          | COMPARE device_crash_rate to 30-day_fleet_baseline 
          | IF device_crash_rate > 99.5th_percentile THEN ALERT medium_severity
  - question: Is there a fleet-wide, statistically significant increase in the crash count for a critical application?
    context: This question is designed to detect a widespread compromise. By using a time series model (like ARIMA) to forecast the expected daily crash count for a critical application across the entire fleet, we can detect when the actual number of crashes significantly exceeds the predicted range. A major deviation suggests a systemic issue, such as a compromised version of an application being distributed widely through a malicious update, affecting a large number of users at once.
    answer_sources:
      - Mobile Device Management (MDM) logs
      - Mobile Application Management (MAM) logs
      - Application crash reporting logs
      - Centralized MDM/MAM platform
      - Cloud-based application performance monitoring (APM) or crash reporting services
    range: last 90 days
    queries:
      - search_technology: Pseudocode Time-Series Model
        query: |
          TRAIN ARIMA_model on historical_daily_crash_counts_for_app 
          | FORECAST expected_crashes_with_confidence_interval 
          | COMPARE actual_daily_crashes to forecast 
          | IF actual > upper_confidence_bound THEN ALERT medium_severity