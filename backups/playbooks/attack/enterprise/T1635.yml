name: "T1635: Steal Application Access Token"
id: "a3f5b7c1-2d9e-4a8b-9f6c-7e0d1a2b3c4d"
description: |
  This playbook is designed to detect if an adversary is stealing application access tokens from mobile devices. The primary methods of detection involve analyzing network traffic for suspicious OAuth 2.0 authorization flows, such as those with unapproved or algorithmically generated redirect URIs. It also correlates communication with known malicious domains to subsequent OAuth flows to identify attack chains. Finally, it inspects mobile device application inventories for apps that hijack legitimate URI schemes or masquerade as trusted applications, which could be used to intercept access tokens.
type: "technique"
related:
  - "TA0031: Credential Access"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any outbound OAuth 2.0 authorization flows from mobile devices where the redirect URI points to an unapproved domain?"
    context: |
      This question aims to identify potential 'man-in-the-middle' attacks or credential theft attempts using rogue OAuth applications. An adversary might trick a user into authorizing an application that uses a malicious `redirect_uri`. This allows the adversary to intercept the authorization code or access token. By checking the `redirect_uri` against a corporate allowlist of approved OAuth partners, we can detect suspicious authorization flows that could lead to unauthorized access.
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices; Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)."
    range: "last 90 days"
    queries:
      - "Pseudocode: `SEARCH Zeek http.log WHERE source_ip IN mobile_subnets AND uri CONTAINS 'redirect_uri' AND uri CONTAINS 'client_id' | EXTRACT redirect_uri | URL_DECODE redirect_uri | EXTRACT domain FROM redirect_uri | IF domain NOT IN allowlist THEN ALERT`"
  - question: "Among the unapproved OAuth redirect domains, are any of them likely generated by a Domain Generation Algorithm (DGA)?"
    context: |
      This question helps prioritize alerts from the previous question. DGAs are often used by malware to create a large number of domain names for command and control servers, making them difficult to block. A high Shannon entropy score for a domain name suggests a high degree of randomness, which is a characteristic of DGA-generated domains. Comparing the entropy against a baseline of legitimate domains helps to statistically identify and prioritize the most suspicious ones, such as those exceeding the 95th percentile ($$ P_{95} $$), for immediate investigation.
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices; Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM alerted_domains | CALCULATE shannon_entropy(domain) | IF shannon_entropy > P95_threshold THEN FLAG for priority investigation`"
  - question: "Can we use a machine learning model to predict the maliciousness of an OAuth authorization flow with high confidence?"
    context: |
      This question seeks to automate the detection of malicious OAuth flows by using a logistic regression model. The model considers multiple features beyond just the redirect URI, such as domain age, TLD reputation, and client fingerprinting (JA3/JA3S). This provides a more holistic assessment of the request's risk. A high probability score from the model (e.g., $$ p(\\text{malicious}) > 0.90 $$) indicates a strong signal of malicious activity, justifying an immediate, automated response like device isolation to contain a potential breach.
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Zeek ssl.log"
      - "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices; Cloud-native network sensors (e.g., VPC Flow Logs, cloud firewalls)."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM http_request | EXTRACT features (domain_entropy, domain_age, TLD_rep, state_param, uri_depth, ja3_hash) | PREDICT malicious_probability using logistic_regression_model | IF probability > 0.90 THEN ESCALATE ALERT`"
  - question: "Has a mobile device initiated a new OAuth authorization flow shortly after communicating with a known malicious domain?"
    context: |
      This question tries to link suspicious behavior (visiting a malicious site) with a potentially risky action (initiating an OAuth flow). An adversary might first lure a user to a malicious site to compromise the device or browser, and then immediately redirect them to a legitimate service to steal an access token. Correlating these two events from the same source IP within a short time window (e.g., 60 seconds) provides strong evidence of a targeted attack.
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway; SIEM platform with integrated threat intelligence feeds."
    range: "last 90 days"
    queries:
      - "Pseudocode: `CORRELATE (dns/conn log WHERE dest_domain IN threat_intel_feed) AND (http.log WHERE uri CONTAINS 'response_type' AND 'client_id') ON source_ip WITHIN 60s | IF correlated THEN ALERT`"
  - question: "Is the OAuth provider involved in the correlated alert statistically anomalous for the user or the organization?"
    context: |
      This question adds context to the previous alert by evaluating the novelty of the OAuth service being accessed. If a user who has never used a particular service suddenly initiates an OAuth flow to it right after visiting a malicious site, it's highly suspicious. This baselining approach helps distinguish legitimate, albeit rare, user behavior from statistically improbable events that are more likely to be part of an attack chain. It helps to significantly increase the confidence in an alert.
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway; SIEM platform with integrated threat intelligence feeds."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM alerted_oauth_domain | CHECK if domain in user_90day_baseline | CHECK if domain in <1%_org_90day_baseline | IF both true THEN INCREASE risk_score`"
  - question: "Does the user's browsing sequence, specifically transitioning from a malicious domain to an OAuth provider, deviate from their normal behavior pattern?"
    context: |
      This question employs advanced anomaly detection to identify attack patterns that might otherwise look like normal browsing. By modeling typical user navigation sequences with a time-series model like an LSTM autoencoder, we can establish a baseline of 'normal' behavior. When a sequence like `['malicious' -> 'oauth_provider']` occurs, the model's inability to reconstruct it accurately (high reconstruction error) serves as a strong mathematical indicator of a behavioral anomaly, warranting critical review.
    answer_sources:
      - "Zeek http.log"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Threat Intelligence Platform Feed"
      - "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway; SIEM platform with integrated threat intelligence feeds."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM user_browsing_sequence (domain_categories) | IF sequence CONTAINS ['malicious' -> 'oauth_provider'] | CALCULATE reconstruction_error with LSTM_autoencoder | IF error > dynamic_threshold THEN ESCALATE`"
  - question: "Are any installed mobile applications improperly registering a custom URI scheme that belongs to a legitimate application?"
    context: |
      This question addresses a technique where a malicious app intercepts sensitive data by 'hijacking' a URI scheme (e.g., `ms-auth://`). When a user tries to authenticate, the OS might launch the malicious app instead of the legitimate one. By periodically auditing the URI schemes registered by all installed apps and comparing them against an allowlist of legitimate app bundle IDs and their corresponding signing certificates, we can detect such hijacks and identify malicious applications.
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms; Application security testing (AST) reports for in-house developed apps; Mobile Threat Protection (MTP) solution consoles and log repositories."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM mdm_app_inventory | FOR each app, PARSE manifest for URI_schemes | IF registered_scheme IN protected_schemes AND (app_bundle_id NOT IN allowlist OR app_cert_hash NOT IN allowlist) THEN ALERT`"
  - question: "Are there any newly installed applications that appear to be typosquatted versions of legitimate apps and are also registering URI schemes?"
    context: |
      This question aims to detect malicious apps that masquerade as legitimate ones through 'typosquatting' (e.g., 'Faceboook' instead of 'Facebook'). By calculating the Levenshtein distance—a measure of string similarity—between a new app's name and the names of known, trusted apps, we can identify potential impostors. If such a visually deceptive app also registers URI schemes, it's a strong indicator of malicious intent and should be prioritized for manual review.
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms; Application security testing (AST) reports for in-house developed apps; Mobile Threat Protection (MTP) solution consoles and log repositories."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM new_app_install_log | CALCULATE levenshtein_distance(new_app_name, known_app_names) | IF distance < 3 AND app_registers_uri_schemes THEN FLAG for review`"
  - question: "Can we use a machine learning model to automatically classify the risk level of an installed mobile application based on its characteristics?"
    context: |
      This question seeks to automate the assessment of mobile applications using a Random Forest classifier. The model synthesizes multiple data points from the MDM/UEM platform—such as the app's source, permissions requested, developer reputation, and whether the device is rooted—to generate a maliciousness score. A high probability score (e.g., $$ p(\\text{malicious}) > 0.85 $$) provides a data-driven basis for triggering an automated response, like quarantining the device, to prevent potential data theft.
    answer_sources:
      - "UEM Application Manifest Data"
      - "MDM Application Inventory Log"
      - "Mobile Threat Protection (MTP) Event Log"
      - "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms; Application security testing (AST) reports for in-house developed apps; Mobile Threat Protection (MTP) solution consoles and log repositories."
    range: "last 90 days"
    queries:
      - "Pseudocode: `FROM mdm_app_data | EXTRACT features (app_source, permissions, cert_rep, levenshtein_score, is_rooted) | PREDICT malicious_probability using random_forest_model | IF probability > 0.85 THEN QUARANTINE device`"