name: T1098.001: Additional Cloud Credentials
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries who add credentials to cloud accounts to establish persistence or escalate privileges. Adversaries may create new access keys (AWS), update applications with new secrets (Azure), or generate service account keys (GCP). Detections are designed to identify anomalous credential modifications, such as those originating from malicious IP addresses, executed by unauthorized users or from unusual process trees, occurring outside normal working hours, or involving impossible travel scenarios. The playbook also addresses specific privilege escalation patterns, including chaining API calls to elevate permissions, using lower-privileged accounts to modify higher-privileged ones, and leveraging temporary credentials to create permanent access.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a cloud credential modification event originated from a known malicious IP address, anonymizing proxy, or TOR exit node?
    context: Adversaries often use compromised infrastructure or anonymizing services to hide their true location when performing malicious actions. Correlating the source IP address of a credential modification event with threat intelligence feeds can quickly identify suspicious activity that warrants immediate investigation, as legitimate administrative actions rarely originate from such sources.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service Endpoints
      - Internet Gateway
      - Threat Intelligence Platform
      - Cloud audit log aggregation platform
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH cloud_audit_logs
          WHERE event_name IN ["CreateAccessKey", "updateApplication", "CreateServiceAccountKey"]
          JOIN threat_intelligence_feed ON sourceIPAddress = malicious_ip
          RETURN user, sourceIPAddress, event_name, timestamp
  - question: Has a user performed a cloud credential modification from a new or statistically unusual Autonomous System Number (ASN)?
    context: Legitimate users typically perform administrative actions from a limited and predictable set of network locations (ASNs), such as corporate or home networks. An adversary operating from a different location will introduce a new or rare ASN. Tracking the historical ASNs for each user and alerting on new or high-entropy additions helps detect potential account takeovers.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service Endpoints
      - Internet Gateway
      - Threat Intelligence Platform
      - Cloud audit log aggregation platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Historical Profile Building
          CREATE user_asn_profile AS (
            SELECT user, historical_asns FROM cloud_audit_logs
            WHERE event_name IN [credential_modification_events]
            GROUP BY user
          )
          // Real-time Check
          ON new_credential_modification_event:
            current_asn = event.sourceASN
            user_profile = GET user_asn_profile FOR event.user
            IF current_asn NOT IN user_profile.historical_asns:
              ALERT "New ASN detected"
            ELSE:
              new_entropy = CALCULATE_ENTROPY(user_profile.historical_asns + current_asn)
              IF new_entropy > user_profile.historical_entropy_95th_percentile:
                ALERT "High ASN entropy detected"
  - question: Did a credential modification event for a high-privilege user deviate significantly from their established behavioral patterns regarding frequency, source country, or time-of-day?
    context: High-privilege users often have predictable work patterns. A machine learning model can learn these normal patterns (e.g., modifications happen during work hours, from specific countries, at a certain frequency). An event that deviates from the model's forecast across several features simultaneously is a strong indicator of an anomaly, such as an account takeover or insider threat.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service Endpoints
      - Internet Gateway
      - Threat Intelligence Platform
      - Cloud audit log aggregation platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline)
          MODEL = TRAIN_LSTM_FORECASTER on historical_data(user, event_frequency, source_country, time_of_day)
          // Real-time Prediction
          ON new_credential_modification_event:
            features = EXTRACT_FEATURES(event)
            prediction = MODEL.predict()
            residual = CALCULATE_DIFFERENCE(features, prediction)
            IF residual > threshold:
              ALERT "Anomalous credential modification detected by time-series model"
  - question: Was a cloud CLI tool executed by an unauthorized user or on a non-administrative workstation?
    context: The use of powerful cloud command-line interface (CLI) tools should be restricted to authorized administrators and specific, hardened workstations. An alert for CLI execution by a non-administrative user or on a standard user endpoint could indicate a compromised account or host being used to pivot to the cloud environment.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Administrative Workstations
      - Cloud-connected Application Servers
      - Endpoint Detection and Response (EDR) platform
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH windows_event_logs
          WHERE event_id == 4688 AND process_name IN ["aws.exe", "az.exe", "gcloud.exe"]
          AND (user NOT IN 'Cloud Admins' OR hostname NOT IN 'Admin Workstations')
          ALERT "Unauthorized cloud CLI tool execution"
  - question: Was a cloud CLI tool spawned by an unusual parent process?
    context: Legitimate administrative use of cloud CLI tools typically follows predictable process chains, such as being launched from PowerShell or a terminal window. An adversary might launch these tools from a compromised application like a web server or a document editor (e.g., winword.exe). Identifying statistically rare parent-child process relationships involving cloud CLIs can uncover such malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Administrative Workstations
      - Cloud-connected Application Servers
      - Endpoint Detection and Response (EDR) platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline)
          PROFILE parent_child_chains from historical process events.
          CALCULATE frequency for each chain.
          // Real-time Check
          ON new_process_creation_event for cloud_cli:
            chain = GET_PROCESS_CHAIN(event)
            chain_frequency = GET_FREQUENCY(chain)
            IF chain_frequency < 1st_percentile_threshold:
              ALERT "Anomalous process chain detected for cloud CLI tool"
  - question: Does the execution of a cloud CLI tool exhibit characteristics of known malicious activity?
    context: Malicious use of cloud CLI tools often differs from benign use in subtle ways, such as having unusually long or obfuscated command-line arguments, being run by a different user, or originating from a non-standard parent process. A machine learning classifier, like a Random Forest, can be trained to recognize these complex patterns and flag new executions as malicious with a high degree of confidence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Administrative Workstations
      - Cloud-connected Application Servers
      - Endpoint Detection and Response (EDR) platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline)
          MODEL = TRAIN_RANDOM_FOREST on labeled_process_data(features: parent_process, cmd_length, cmd_entropy, user, host)
          // Real-time Prediction
          ON new_cloud_cli_execution:
            features = EXTRACT_FEATURES(event)
            prediction, confidence = MODEL.predict(features)
            IF prediction == 'malicious' AND confidence > 0.9:
              ALERT "ML model classified cloud CLI execution as malicious"
  - question: Was a credential modification performed by a service principal not explicitly authorized for identity management?
    context: In a well-architected environment, only a small, designated set of service principals (like those for CI/CD pipelines or identity management tools) should have permissions to modify credentials. A credential modification initiated by any other service principal is highly suspicious and could indicate that it has been compromised and is being used for privilege escalation or persistence.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Identity Provider (IdP) Systems
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH cloud_audit_logs
          WHERE event_name IN [credential_modification_events]
          AND actor_type == 'ServicePrincipal'
          AND actor_name NOT IN 'Authorized Identity Management Service Principals'
          ALERT "Unauthorized service principal performed credential modification"
  - question: Did an administrator modify a credential at an unusual time of day compared to their normal behavior?
    context: Most administrative work occurs during standard business hours. An adversary who has compromised an administrator's account may not be aware of their typical working hours and might perform actions at odd times. Baselining the normal activity times for each admin and alerting on deviations can help detect account misuse.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Identity Provider (IdP) Systems
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline)
          FOR each admin:
            PROFILE historical distribution of event hour-of-day.
            CALCULATE 5th and 95th percentile hours.
          // Real-time Check
          ON new_credential_modification_event:
            admin = event.user
            hour = event.timestamp.hour
            IF hour < admin.profile.5th_percentile OR hour > admin.profile.95th_percentile:
              ALERT "Credential modification outside of normal working hours"
  - question: Does a credential modification event represent a statistical outlier when compared to clusters of normal activity?
    context: Normal administrative activities tend to form clusters based on various attributes (e.g., admins with role 'X' typically modify credentials for principals with role 'Y' from corporate ASNs during business hours). An unsupervised learning algorithm like DBSCAN can identify these clusters automatically. Events that do not fit into any cluster ('noise points') are anomalous by definition and warrant investigation.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Identity Provider (IdP) Systems
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Application (batch or streaming)
          DATA = GET credential_modification_events (features: ASN, time, actor_role, target_role)
          MODEL = DBSCAN.fit(DATA)
          NOISE_POINTS = GET points classified as noise by MODEL
          FOR each point in NOISE_POINTS:
            ALERT "Anomalous credential modification detected as a cluster outlier"
  - question: Was a newly created credential used from a geographic location that would require impossible travel from its creation point?
    context: This is a classic "impossible travel" scenario. If a credential is created in one location (e.g., a corporate office in New York) and then used almost immediately from another distant location (e.g., a server in Eastern Europe), it's physically impossible for the legitimate user to have traveled that distance. This strongly indicates that the creator and the user are different entities, and the account is likely compromised.
    answer_sources:
      - AWS CloudTrail
      - AzureAD SignIn Logs
      - Google Cloud Audit Logs (data_access)
      - Zeek conn.log
      - VPN Concentrators
      - Cloud Authentication Endpoints
      - Internet Gateway
      - Geolocation IP Database
    range: Last 90 days
    queries:
      - pseudocode: |
          ON credential_creation_event:
            STORE creation_time, creation_ip, credential_id
          ON first_use_of_credential_id:
            use_time = event.timestamp
            use_ip = event.source_ip
            creation_data = GET_STORED_DATA(credential_id)
            distance = GEOLOCATE_AND_CALCULATE_DISTANCE(creation_data.creation_ip, use_ip)
            time_delta = use_time - creation_data.creation_time
            speed = distance / time_delta
            IF speed > 800 km/h:
              ALERT "Impossible travel detected for new credential"
  - question: Was a new credential used for the first time from a country that is unusual for both the user and the organization?
    context: This analytic layers two behavioral checks. First, it identifies a login from a country never before seen for that specific user, which is suspicious. Second, it elevates the severity if that country is also rare for the entire organization, making it much less likely to be a legitimate case of business travel and more likely to be an adversary operating from an uncommon location.
    answer_sources:
      - AWS CloudTrail
      - AzureAD SignIn Logs
      - Google Cloud Audit Logs (data_access)
      - Zeek conn.log
      - VPN Concentrators
      - Cloud Authentication Endpoints
      - Internet Gateway
      - Geolocation IP Database
    range: Last 90 days
    queries:
      - pseudocode: |
          ON first_use_of_new_credential:
            user = event.user
            country = GEOLOCATE(event.source_ip).country
            is_new_for_user = country NOT IN user.historical_login_countries
            is_rare_for_org = GET_COUNTRY_FREQUENCY(country) < 1st_percentile
            IF is_new_for_user:
              IF is_rare_for_org:
                ALERT "New credential used from rare country (High Severity)"
              ELSE:
                ALERT "New credential used from new country for user (Medium Severity)"
  - question: Did the first login with a new credential exhibit anomalous characteristics according to the user's historical login behavior?
    context: A One-Class SVM is an anomaly detection algorithm that learns a boundary around "normal" data points. By training it on a user's typical login patterns (country, network, device, time), it can effectively identify a first login with a new credential that falls outside this normal boundary. This is a powerful way to detect account takeover, as an adversary's login attributes are unlikely to perfectly match the legitimate user's.
    answer_sources:
      - AWS CloudTrail
      - AzureAD SignIn Logs
      - Google Cloud Audit Logs (data_access)
      - Zeek conn.log
      - VPN Concentrators
      - Cloud Authentication Endpoints
      - Internet Gateway
      - Geolocation IP Database
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline per user)
          MODEL = TRAIN_ONE_CLASS_SVM on user.historical_login_data(features: country, ASN, user_agent, time)
          // Real-time Prediction
          ON first_use_of_new_credential:
            user = event.user
            login_features = EXTRACT_FEATURES(event)
            prediction = user.MODEL.predict(login_features)
            IF prediction == 'outlier':
              ALERT "Anomalous first login with new credential detected"
  - question: Has a user performed a sequence of actions known to be a privilege escalation pattern involving policy modification and credential creation?
    context: This analytic looks for a specific, well-known AWS privilege escalation technique where an attacker with permissions to modify IAM policies creates a new, more permissive version of a policy, makes it the active version, and then creates new credentials for a principal governed by that policy to inherit the new permissions. Detecting this exact sequence in a short time frame is a high-fidelity indicator of malicious activity.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH cloud_audit_logs within 10_minute_window by user_session
          MATCH_SEQUENCE(
            [event_name == "CreatePolicyVersion"],
            [event_name == "SetDefaultPolicyVersion"],
            [event_name IN ["CreateAccessKey", "UpdateApplication"]]
          )
          ALERT "Potential privilege escalation via policy modification sequence"
  - question: Did a credential modification occur as part of a statistically rare sequence of API calls?
    context: This analytic takes a broad, data-driven approach by identifying all short sequences of API calls (n-grams) to learn what's common. A sequence that includes a credential modification but is statistically very rare is suspicious because it deviates from all established workflows, benign or otherwise. This can uncover novel attack patterns.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline)
          PROFILE all 3-gram API call sequences from historical logs.
          CALCULATE probability for each sequence.
          // Real-time Check
          ON new_api_call:
            current_sequence = GET_LAST_3_API_CALLS_IN_SESSION()
            IF 'credential_modification' in current_sequence:
              seq_probability = GET_PROBABILITY(current_sequence)
              IF seq_probability < 1st_percentile_threshold:
                ALERT "Credential modification occurred in a rare API sequence"
  - question: Did a session involving a credential modification deviate from the learned patterns of normal API call sequences?
    context: An LSTM autoencoder is a sophisticated machine learning model that can learn the "grammar" of normal sequences of API calls. It tries to compress and then reconstruct a given session's API sequence. If the session contains an unusual or malicious sequence, the model will struggle to reconstruct it, resulting in a high error. This method is effective at detecting novel or complex attack chains that simple rules would miss.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud IAM Service
      - Cloud Audit Log Aggregation Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline)
          MODEL = TRAIN_LSTM_AUTOENCODER on sequences of API calls from benign sessions.
          // Real-time Prediction
          ON session_end:
            IF 'credential_modification' in session.api_calls:
              reconstruction_error = MODEL.get_reconstruction_error(session.api_calls)
              IF reconstruction_error > threshold:
                ALERT "Anomalous API sequence involving credential modification detected by LSTM"
  - question: Did a principal with lower privileges modify the credentials of a principal with higher privileges?
    context: This is a direct and clear-cut sign of privilege escalation. In a properly configured environment, a less-privileged user or service (e.g., a 'Contributor') should never be able to modify the credentials of a more-privileged one (e.g., a 'Global Admin'). This rule requires pre-defining a privilege hierarchy but provides very high-fidelity alerts for a critical misconfiguration or active attack.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Identity Governance and Administration (IGA) Platform Data
      - Cloud IAM Service
      - Identity Governance and Administration (IGA) Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          DEFINE role_scores = {"Global Admin": 10, "Contributor": 5, "Reader": 1}
          ON credential_modification_event:
            actor_role = GET_ROLE(event.actor)
            target_role = GET_ROLE(event.target)
            actor_score = role_scores[actor_role]
            target_score = role_scores[target_role]
            IF actor_score < target_score:
              ALERT "Direct privilege escalation: lower-privilege actor modified higher-privilege principal"
  - question: Was there a statistically significant jump in privilege level during a credential modification event compared to historical norms?
    context: This analytic baselines the normal privilege difference in modification events. An event where the actor's privilege is significantly lower than the target's (a large positive difference) and this difference is a statistical outlier compared to past events, is a strong signal of abuse.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Identity Governance and Administration (IGA) Platform Data
      - Cloud IAM Service
      - Identity Governance and Administration (IGA) Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline)
          CALCULATE mean and std_dev of (target_privilege - actor_privilege) from historical events.
          // Real-time Check
          ON credential_modification_event:
            privilege_diff = GET_PRIVILEGE(event.target) - GET_PRIVILEGE(event.actor)
            IF privilege_diff > (historical_mean + 3 * historical_std_dev):
              ALERT "Anomalous privilege increase in credential modification"
  - question: Did a credential modification create a new relationship in the identity graph that is structurally anomalous?
    context: IAM environments can be modeled as graphs where users and roles are nodes and permissions are edges. A Graph Neural Network (GNN) can learn the complex structural properties of a "normal" graph. When a credential modification occurs, it creates a new potential edge. If the GNN flags this new edge as a structural anomaly, it likely represents a malicious privilege escalation attempt.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Google Cloud Audit Logs
      - Identity Governance and Administration (IGA) Platform Data
      - Cloud IAM Service
      - Identity Governance and Administration (IGA) Platform
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline)
          IAM_GRAPH = BUILD_GRAPH_from_iam_data()
          MODEL = TRAIN_GNN_on_IAM_GRAPH
          // Real-time Prediction
          ON credential_modification_event:
            NEW_EDGE = CREATE_EDGE_from_event(event)
            is_anomaly = MODEL.predict_anomaly(IAM_GRAPH, NEW_EDGE)
            IF is_anomaly:
              ALERT "GNN detected structurally anomalous permission grant"
  - question: Was a high-impact, sensitive action performed shortly after new credentials were created for an identity?
    context: Adversaries who create new credentials for persistence or privilege escalation often use them quickly to achieve their objectives, such as exfiltrating data, disabling security controls, or deleting resources. This rule directly connects the credential creation event with subsequent high-impact activity, providing a strong, time-bound signal that the credential creation was likely malicious.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service
      - Sensitive Data Repositories (e.g., S3 Buckets, Databases)
      - Cloud Administration Endpoints
    range: Last 90 days
    queries:
      - pseudocode: |
          ON credential_modification_event:
            STORE event.identity, event.timestamp
          ON any_api_call:
            IF event.api_call in 'High Impact API List':
              credential_mod_event = GET_STORED_EVENT(event.identity)
              IF event.timestamp - credential_mod_event.timestamp < 60 minutes:
                ALERT "High-impact action performed soon after credential modification"
  - question: Was there a statistically unusual spike in sensitive API calls from an identity immediately following a credential modification?
    context: This is a statistical version of the previous rule. Instead of a static list of high-impact calls, it baselines the normal frequency of sensitive actions for each privileged user. A sudden, anomalous burst of such activity right after a credential modification is a strong indicator of abuse, suggesting an adversary is rapidly exploiting their new access.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service
      - Sensitive Data Repositories (e.g., S3 Buckets, Databases)
      - Cloud Administration Endpoints
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline per identity)
          CALCULATE baseline hourly rate of sensitive API calls (and 99th percentile).
          // Real-time Check
          ON credential_modification_event:
            MONITOR sensitive API calls for that identity for 1 hour.
            IF count > identity.profile.99th_percentile_rate:
              ALERT "Anomalous spike in sensitive API calls after credential modification"
  - question: After a credential modification, did the identity interact with a type of resource it has never used before?
    context: Users, especially privileged ones, typically have well-defined roles and interact with a predictable set of resource types. If, immediately after a credential modification, a database admin starts modifying IAM policies, it represents a significant behavioral deviation. This "first time" activity is a strong indicator that an attacker is exploring and exploiting newly gained permissions.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Zeek conn.log
      - Cloud IAM Service
      - Sensitive Data Repositories (e.g., S3 Buckets, Databases)
      - Cloud Administration Endpoints
    range: Last 90 days
    queries:
      - pseudocode: |
          // Profile Building (offline per identity)
          STORE set of historical (action, resource_type) tuples.
          // Real-time Check
          ON credential_modification_event:
            MONITOR API calls for that identity.
            FOR each call:
              tuple = (call.action, call.resource_type)
              IF tuple NOT IN identity.historical_tuples:
                ALERT "Identity accessed new resource type after credential modification"
  - question: Was a temporary or federated identity used to modify the credentials of a permanent, cloud-native principal?
    context: Adversaries who gain temporary access (e.g., by assuming a role) may try to create a more permanent foothold by using their temporary session to add new, permanent credentials to a cloud-native IAM user. This action should be extremely rare in legitimate operations and should be treated as highly suspicious.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Identity Federation Service (e.g., ADFS)
      - Cloud STS Endpoints
      - Cloud IAM Service
    range: Last 90 days
    queries:
      - pseudocode: |
          SEARCH cloud_audit_logs
          WHERE actor_type IN ["AssumedRole", "FederatedUser", "ExternalIdP"]
          AND event_name IN [credential_modification_events]
          AND target_identity_type == "PermanentCloudPrincipal"
          ALERT "Temporary identity used to modify permanent credentials"
  - question: Are temporary or federated identities, as a group, performing credential modifications at a disproportionately high rate compared to permanent identities?
    context: This analytic looks for systemic abuse patterns. If attackers are consistently using compromised federated accounts to create persistence, the overall rate of credential modifications from these temporary identity types will be statistically higher than the rate from permanent, cloud-native identities. A significant difference in these ratios can point to a widespread campaign.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Identity Federation Service (e.g., ADFS)
      - Cloud STS Endpoints
      - Cloud IAM Service
    range: Last 90 days
    queries:
      - pseudocode: |
          // Run as a periodic batch job
          perm_ratio = COUNT(cred_mod_events WHERE actor_type=permanent) / COUNT(all_events WHERE actor_type=permanent)
          temp_ratio = COUNT(cred_mod_events WHERE actor_type=temporary) / COUNT(all_events WHERE actor_type=temporary)
          p_value = Z_TEST(perm_ratio, temp_ratio)
          IF p_value < 0.01 AND temp_ratio > perm_ratio:
            ALERT "Temporary identities show a statistically significant higher rate of credential modification"
  - question: Did a temporary session that performed a credential modification have characteristics that a model predicts as high-risk?
    context: This analytic uses a supervised machine learning model to score the risk of a session. The model learns which combinations of features (e.g., a temporary session from a residential ASN with a short duration) are most associated with credential modification events in the past. When a new temporary session modifies a credential, it can be scored by the model. If the score is in the top percentile, it means the session's characteristics closely match those of past high-risk sessions, warranting an alert.
    answer_sources:
      - AWS CloudTrail
      - AzureAD Audit Logs
      - Zeek conn.log
      - Identity Federation Service (e.g., ADFS)
      - Cloud STS Endpoints
      - Cloud IAM Service
    range: Last 90 days
    queries:
      - pseudocode: |
          // Model Training (offline)
          MODEL = TRAIN_LOGISTIC_REGRESSION to predict 'is_credential_modification_session'
          // Real-time Prediction
          ON session_end:
            IF session.actor_type == 'temporary' AND session.had_credential_modification:
              features = EXTRACT_FEATURES(session)
              probability = MODEL.predict_proba(features)
              IF probability > 95th_percentile_of_scores:
                ALERT "High-risk temporary session performed credential modification"