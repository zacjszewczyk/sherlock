name: T1546: Event Triggered Execution
id: 3f9a8b1e-7c4d-4f6a-8d2b-9c0e1f3a4b5d
description: >
  This playbook investigates whether an adversary is establishing persistence or elevating privileges using event-triggered execution (T1546). Adversaries configure scripts or binaries to run in response to system events, such as user logon or time-based triggers. This is achieved by manipulating legitimate Windows features like Registry Run Keys, Startup Folders, WMI event subscriptions, Image File Execution Options (IFEO), and Winlogon helper DLLs. The investigation focuses on identifying the creation or modification of these event triggers, especially when they point to malicious executables, non-standard file paths (e.g., %APPDATA%, %TEMP%), or contain obfuscated command-line payloads. It also looks for processes launched by these triggers that run with elevated privileges (e.g., NT AUTHORITY\SYSTEM), initiate suspicious network connections, or spawn unexpected child processes like command-line interpreters.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Have any new or modified event triggers (e.g., Registry Run Keys, Startup Folders) been created where the associated executable is a known malicious file or uses suspicious command-line arguments?
    context: Adversaries establish persistence by placing malicious executables in locations that automatically run on system startup or user logon. This question aims to detect this technique by monitoring common autorun registry keys and startup folders for changes. If a newly added program matches a known malicious hash from threat intelligence or its command line contains strings associated with hacking tools (like 'mimikatz'), it is a strong indicator of a persistence attempt.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (Sysmon 13 WHERE RegistryKey CONTAINS 'CurrentVersion\Run') OR (Sysmon 11 WHERE TargetFile IN ('Startup')) | JOIN (Sysmon 1) | LOOKUP hash against threat_intel | WHERE threat_intel_match=true OR command_line CONTAINS ('mimikatz', 'invoke-expression')
  - question: Has a process launched from a common persistence location exhibited anomalous characteristics, such as being a rare process for that host, having an unusual parent, or using obfuscated command-line arguments?
    context: Sophisticated adversaries may use custom or unknown tools that won't be flagged by hash-based lookups. This question uses behavioral analysis to find them. By baselining normal startup processes on each host, we can identify outliers. A process that rarely appears in a startup context, has an unexpected parent process, or has a high-entropy command line (a sign of obfuscation) is suspicious and warrants investigation for a stealthy persistence mechanism.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH startup_processes | FREQUENCY_ANALYSIS by hostname, process_name, parent_process | CALCULATE entropy(command_line) | WHERE frequency < 5th_percentile OR entropy > baseline_mean + 2*stdev
  - question: Does a machine learning model classify any newly created persistence entries as likely malicious based on a combination of features?
    context: This question leverages a machine learning model to provide a high-fidelity signal by combining multiple weak indicators into a single, stronger one. The model is trained to recognize the patterns of malicious persistence by analyzing features like the rarity of the process path, command-line characteristics, whether the executable is signed, and its parent process. A high probability score from the classifier suggests a high likelihood of a malicious persistence attempt, even if no single feature is definitive on its own.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH new_persistence_entries | EXTRACT_FEATURES (path_rarity, cmd_entropy, keywords, parent_process, is_signed) | APPLY_ML_MODEL (persistence_classifier) | WHERE prediction_score > threshold
  - question: Has a sensitive registry key that triggers execution (e.g., IFEO, Winlogon) been modified by an untrusted process to point to an executable in a non-standard, user-writable directory?
    context: Adversaries can hijack execution flow by modifying registry keys like Image File Execution Options (IFEO) to launch a malicious program instead of a legitimate one. This question focuses on detecting modifications to these critical keys. An alert is triggered if the change is made by an unexpected process (not a standard installer) and the new value points to a file in a suspicious location like %APPDATA% or C:\PerfLogs, which are common staging grounds for malware.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 13 on critical_registry_keys | WHERE (modifying_process NOT IN trusted_installers) AND (new_value CONTAINS ('%APPDATA%', 'C:\PerfLogs'))
  - question: Has a modification to a critical execution-triggering registry key introduced a file path that is structurally anomalous compared to historical baselines for that key?
    context: This question aims to detect subtle or novel attacks by focusing on the structure of the file path itself, rather than just its location. By baselining what normal file paths look like for a specific critical registry key, we can spot outliers. An anomalous path might have an unusual directory depth, a rare parent folder, or not end in a known system binary. This method can catch malware placed in cleverly disguised but non-standard locations that might otherwise be overlooked.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 13 on critical_registry_keys | PARSE path from new_value | FREQUENCY_ANALYSIS by path_components | WHERE path_structure is outlier
  - question: Does an anomaly detection model identify any modifications to sensitive registry locations as being a significant deviation from normal administrative activity?
    context: This question employs an unsupervised machine learning model (like an Isolation Forest) that learns the characteristics of legitimate modifications to sensitive registry keys. The model considers multiple features at once, including the modifying process, parent process, user context, and time of day. Any activity that the model flags as an anomaly—a deviation from the learned pattern of 'normal'—is highly suspicious and likely represents an unauthorized or malicious change.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 13, Windows Event ID 4657, Windows Event ID 4688 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 13 on critical_registry_keys | EXTRACT_FEATURES (process, parent, path, time, user) | APPLY_ML_MODEL (isolation_forest) | WHERE anomaly_score > threshold
  - question: Has a process that was executed shortly after user logon initiated a network connection to a known malicious IP address or domain?
    context: Adversaries often configure malware to run at logon to establish persistence and immediately call back to a command and control (C2) server. This question seeks to detect this specific behavior by correlating process execution events that occur within two minutes of a user logon with network traffic. If a newly started process makes an outbound connection to an IP or domain on a threat intelligence blocklist, it is a strong indicator of a malicious C2 channel being established.
    answer_sources: Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Logon_Events (Type 2, 10) | JOIN (within 2m) Process_Events | JOIN Network_Events | LOOKUP dest_ip, dest_domain against threat_intel | WHERE threat_intel_match=true
  - question: Has an unusual startup process (an outlier) exhibited anomalous network behavior, such as connecting to a rare port or transferring an unusually large amount of data?
    context: This question uses behavioral baselining to find malicious startup activity that evades signature-based detection. It first identifies processes that are not part of the normal startup routine for a given host. Then, it scrutinizes the network behavior of these outlier processes. A connection to an uncommon port or a data transfer volume that is statistically unusual compared to normal startup processes can indicate a C2 channel or data exfiltration, warranting further investigation.
    answer_sources: Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH startup_processes | IDENTIFY outlier_processes | JOIN network_logs | WHERE dest_port_frequency < 1st_percentile OR data_volume > avg_volume + 3*stdev
  - question: Does a time series analysis model detect a statistically significant anomaly in the volume or pattern of process creations and network connections immediately following logon events?
    context: This question applies advanced time series analysis to model the normal rhythm of system activity right after a user logs on. The model learns the expected temporal pattern and volume of new processes and network connections. An alert is triggered when the observed activity deviates significantly from the model's prediction. This can catch sophisticated attacks that involve a burst of unusual activity, such as a dropper executing, establishing persistence, and then calling back to its C2 server.
    answer_sources: Windows Event ID 4688, Windows Event ID 4624, Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Workstations, Windows Servers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE process_counts, network_counts per minute after logon | APPLY_ML_MODEL (time_series_anomaly_detection) | WHERE anomaly_score > threshold
  - question: Have a WMI Event Filter and a WMI Event Consumer been created in a short time window where the consumer's payload contains suspicious keywords or script interpreters?
    context: A common and stealthy persistence technique involves creating a permanent WMI event subscription. This consists of a filter (the trigger) and a consumer (the action). This question looks for the rapid creation of both components, which is characteristic of an adversary setting up the mechanism. The query specifically looks for payloads in the consumer that contain keywords like 'powershell', '-enc', or 'IEX', which are frequently used to execute malicious code.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 19, Sysmon Event ID 20, Sysmon Event ID 21 on Windows Workstations, Windows Servers, especially those with management roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 19 AND Sysmon 21 on same host within 5m | WHERE consumer_payload CONTAINS ('powershell', '-enc', 'IEX', 'vbscript')
  - question: Has a new WMI Event Consumer been created with a command-line or script payload that has an unusually high entropy score?
    context: To evade simple keyword-based detection, adversaries often obfuscate the scripts or commands used in their WMI persistence mechanisms. This question aims to detect that obfuscation. Shannon entropy is a measure of randomness or complexity in data. A high entropy score in a command or script payload is a strong indicator that it has been encoded or compressed, a common tactic to hide its true purpose. Alerting on high-entropy payloads can uncover hidden malicious activity.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 19, Sysmon Event ID 20, Sysmon Event ID 21 on Windows Workstations, Windows Servers, especially those with management roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 21 (CommandLine or ActiveScript consumer) | CALCULATE entropy(payload) | WHERE entropy > 95th_percentile_of_baseline
  - question: Does a machine learning model classify any newly created WMI event subscriptions as likely malicious based on their collective features?
    context: This question uses a supervised machine learning model to provide a more accurate assessment of WMI subscriptions. The model considers a variety of features together, such as the time between filter and consumer creation, the process that created them, the type of consumer, and the payload's length and entropy. By learning from past examples of good and bad subscriptions, the model can identify malicious persistence attempts with higher fidelity than single-indicator rules.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 19, Sysmon Event ID 20, Sysmon Event ID 21 on Windows Workstations, Windows Servers, especially those with management roles.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH new_WMI_subscriptions | EXTRACT_FEATURES (time_delta, creator_process, consumer_type, payload_entropy) | APPLY_ML_MODEL (wmi_classifier) | WHERE prediction=malicious
  - question: Has a process been executed as NT AUTHORITY\SYSTEM whose file hash matches a known malicious hash from a threat intelligence feed?
    context: Adversaries who have successfully used an event-triggered mechanism to escalate privileges will often execute code in the context of the highly privileged 'NT AUTHORITY\SYSTEM' account. This is a simple but effective check that looks for any process running as SYSTEM and compares its hash against a list of known malware and privilege escalation tools. A match is a high-confidence indicator of compromise.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 1 WHERE user='NT AUTHORITY\SYSTEM' | LOOKUP hash against threat_intel | WHERE threat_intel_match=true
  - question: Has a process been executed as NT AUTHORITY\SYSTEM from an unusual file path or with a rare parent process?
    context: Beyond known malware, adversaries may use custom tools or legitimate system utilities in malicious ways. This question helps detect such activity by baselining normal behavior for SYSTEM-level processes. A process running as SYSTEM from a user-writable directory like %APPDATA% or %TEMP%, or being spawned by an unexpected parent process (like explorer.exe), is highly anomalous and a strong indicator of successful privilege escalation.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 1 WHERE user='NT AUTHORITY\SYSTEM' | FREQUENCY_ANALYSIS by image_path, parent_process | WHERE image_path_frequency < 1st_percentile OR parent_process_is_rare
  - question: Does a machine learning model classify any process running as NT AUTHORITY\SYSTEM as likely malicious based on its combined attributes?
    context: This question employs a machine learning model to holistically evaluate whether a process running as SYSTEM is malicious. The model analyzes a rich set of features, including the process path, its parent, command-line arguments, its digital signature status, and its integrity level. By combining these signals, the model can provide a risk score, allowing analysts to focus on the most suspicious high-privilege executions.
    answer_sources: Windows Event ID 4688, Sysmon Event ID 1 on Windows Workstations, Windows Servers, Domain Controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 1 WHERE user='NT AUTHORITY\SYSTEM' | EXTRACT_FEATURES (path, parent, cmdline, is_signed, integrity_level) | APPLY_ML_MODEL (system_process_classifier) | WHERE risk_score > threshold
  - question: Has a process been launched by the service manager (services.exe) that exploits an unquoted service path vulnerability?
    context: An "unquoted service path" is a common misconfiguration where the path to a service's executable contains spaces and is not enclosed in quotes. An adversary can exploit this by placing a malicious executable in a higher-level directory (e.g., C:\Program.exe to hijack C:\Program Files\...). This question detects such an attack by monitoring for processes spawned by services.exe where the executed path is a partial match to a known vulnerable service path.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 1 WHERE parent='services.exe' | COMPARE image_path against list_of_unquoted_service_paths | WHERE image_path is a partial match and not the full intended path
  - question: Has a process associated with a known vulnerable service (unquoted path or weak permissions) been executed from a path that deviates from its established baseline?
    context: This is a behavioral approach to detecting path-interception exploits. After identifying services with exploitable path vulnerabilities, a baseline is established for their legitimate execution path. This question then monitors for any execution related to that service that deviates from the normal path. An alert on a different directory depth or parent directory indicates a likely attempt to hijack the service's execution flow.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH vulnerable_service_executions | COMPARE image_path to baseline_path | WHERE image_path_structure != baseline_path_structure
  - question: Does a graph-based anomaly detection model show a new, anomalous relationship, such as services.exe launching a process from a previously unseen path associated with a vulnerable service?
    context: This question models process relationships as a graph to detect sophisticated path-interception attacks. Legitimate service executions form a stable, predictable pattern in the graph (e.g., services.exe -> C:\Path\To\Service.exe). An adversary exploiting a vulnerability creates a new, anomalous edge in this graph (e.g., services.exe -> C:\Malicious.exe). The model learns the normal graph structure and alerts when these new, suspicious connections appear.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL process_relationships as graph | TRAIN on legitimate service execution subgraphs | DETECT new anomalous edges originating from 'services.exe'
  - question: Has a non-administrative user modified an event trigger configuration, which was followed shortly by a process executing as NT AUTHORITY\SYSTEM?
    context: This question looks for a classic privilege escalation chain. A standard user should not be able to modify a system-wide persistence mechanism. If a non-privileged user modifies a Run key, scheduled task, or service configuration, and this action is quickly followed by a process launching with SYSTEM privileges, it strongly implies that the user exploited a vulnerability to set up a trigger that would execute their code in an elevated context.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (Sysmon 11 or 13 on persistence_locations by non_admin_user) | JOIN (within 5m) (Sysmon 1 WHERE user='NT AUTHORITY\SYSTEM')
  - question: Has a statistically rare event occurred, such as an unusual user modifying a specific event trigger, followed by a rapid, privileged execution?
    context: This question uses behavioral analytics to find subtle privilege escalation attempts. It establishes a baseline of who normally modifies what. An alert is triggered for a chain of events: 1) a user who rarely (or never) touches a particular persistence key makes a modification, and 2) this is followed by a privileged process execution within a short time frame. This flags a statistically unlikely and therefore suspicious sequence of events.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH (Sysmon 11 or 13) | FREQUENCY_ANALYSIS by user, target_object | WHERE user_object_pair_is_rare | JOIN (within 5m) (Sysmon 1 WHERE is_privileged)
  - question: Does a sequence classification model (e.g., RNN/LSTM) identify a sequence of events as a malicious privilege escalation chain?
    context: This question applies advanced machine learning to recognize the temporal patterns of an attack. An entire sequence of events—[user privilege, modification type, target object, time delta, execution event, resulting privilege]—is fed into a model like an RNN or LSTM. The model is trained to distinguish between benign sequences (like a software update) and malicious ones (an exploit chain). This allows for highly accurate detection of complex, multi-step privilege escalation attacks.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 13 on Windows Workstations, Windows Servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CREATE event_sequences [mod_user_priv, mod_event, target, delta, exec_event, exec_priv] | APPLY_ML_MODEL (sequence_classifier_rnn) | WHERE prediction=malicious
  - question: Has a privileged process launched by an event trigger (e.g., Task Scheduler) spawned a suspicious child process (like cmd.exe) or connected to a known malicious IP?
    context: Once an adversary gains privileged execution via an event trigger, their next step is often to open an interactive shell (cmd.exe, powershell.exe) for further action or to establish a C2 connection. This question detects this post-exploitation activity by monitoring the children and network connections of privileged processes that were started by common trigger mechanisms like the Task Scheduler (taskeng.exe). Spawning a shell or contacting a CTI-flagged IP is a strong indicator of malicious intent.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Sysmon 1 WHERE user='SYSTEM' AND parent IN ('taskeng.exe', 'svchost.exe') | LOOKUP for child_process IN ('cmd.exe', 'powershell.exe') OR network_connection to CTI_blocklist
  - question: Has a privileged, event-triggered process exhibited anomalous behavior, such as spawning a rare child process or connecting to a low-prevalence domain?
    context: This question uses baselining to detect novel or custom tools used after a privilege escalation event. It learns the normal behavior (child processes, network destinations) of legitimate privileged processes launched by triggers. It then flags deviations from this norm. A SYSTEM process spawning a child that has never been seen before in that context, or connecting to a domain that very few other hosts in the enterprise have ever contacted, is highly suspicious and warrants immediate investigation.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH triggered_system_processes | BASELINE child_processes, network_destinations | WHERE child_process is outlier OR domain_prevalence < 5 hosts
  - question: Does a graph-based model detect an anomalous process execution chain originating from a privileged, event-triggered process?
    context: This question applies graph analysis to detect complex post-exploitation behavior. The model learns the normal structure of process trees that originate from legitimate event-triggered SYSTEM processes. An attack often creates an unusual chain of processes (e.g., svchost.exe spawning powershell.exe which in turn spawns rundll32.exe to load a malicious library). The model would flag this new, anomalous subgraph as a deviation from the learned baseline, indicating a likely compromise.
    answer_sources: Sysmon Event ID 1, Sysmon Event ID 3, Zeek conn.log, Zeek dns.log on Windows Servers, Domain Controllers, Core Network Switches, DNS Servers, Internet Gateway.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL process_trees as graph | TRAIN on legitimate triggered_system_process_subgraphs | DETECT anomalous subgraphs (e.g., svchost -> powershell -> rundll32)