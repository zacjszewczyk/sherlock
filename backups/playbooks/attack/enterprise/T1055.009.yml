name: T1055.009: Proc Memory
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook focuses on detecting adversaries manipulating process memory using the /proc filesystem on Linux for privilege escalation and defense evasion. An adversary may inject code into a higher-privilege process by writing to `/proc/[pid]/mem` or `/proc/[pid]/maps` to gain elevated permissions. This is often followed by the compromised process spawning a shell or making a network connection. Alternatively, for defense evasion, an adversary might use the same technique to execute malicious code within the memory space of a legitimate process. Key indicators include the use of the `dd` utility with `/proc` file paths, or a process exhibiting anomalous behavior (e.g., spawning unusual children, opening new listening ports, reading sensitive files) after its memory has been modified.
type: technique
related:
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a non-root process written to the memory of a root-owned process, and did that root process then spawn a shell or networking tool?
  context: This question looks for a classic privilege escalation pattern. An attacker with low-privilege access might inject malicious code into a process running as root. A common outcome of successful injection is the creation of a new, high-privilege shell (`/bin/sh`, `/bin/bash`) or a networking utility (`nc`) for command and control or data exfiltration. Detecting this sequence of events is a strong indicator of a successful privilege escalation attempt via process memory manipulation.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - 'NAI: Critical Linux servers (e.g., database servers, web servers), Crown Jewel application hosts, Kubernetes nodes'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH Linux Auditd logs for write syscall to /proc/[pid]/mem or /proc/[pid]/maps WHERE source_process_euid != 0 AND target_process_owner == 'root'. CORRELATE with Sysmon logs for process creation of /bin/sh, /bin/bash, or nc by target_pid within 60 seconds.
- question: Has a process performed a statistically rare write to another process's memory, followed by the target process spawning an unusual child process?
  context: This question uses anomaly detection to find malicious activity. Most legitimate processes have predictable behavior. Writing directly to another process's memory via `/proc/[pid]/mem` is extremely rare. Similarly, a web server spawning a bash shell is highly anomalous. By baselining normal file write paths and parent-child process relationships, we can identify these outliers, which strongly suggest a process injection attack for privilege escalation.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - 'NAI: Critical Linux servers (e.g., database servers, web servers), Crown Jewel application hosts, Kubernetes nodes'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for rare file writes (>99th percentile) to /proc/[pid]/mem in Auditd logs. CORRELATE with rare child process creation events (>99th percentile) from the target PID in Sysmon logs.
- question: Have any processes exhibited a sequence of system calls indicative of memory injection that deviates from their normal, modeled behavior?
  context: This question leverages machine learning to detect sophisticated injection attacks by analyzing the sequence of system calls (syscalls). Benign processes follow predictable syscall patterns. An attacker injecting code will generate an anomalous sequence, such as opening the target's memory map, seeking a specific location, writing to memory, and then the target process making a network connection. A sequence analysis model trained on normal behavior can flag these low-probability sequences as highly suspicious.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - 'NAI: Critical Linux servers (e.g., database servers, web servers), Crown Jewel application hosts, Kubernetes nodes'
  range: Last 90 days
  queries:
  - pseudocode: APPLY trained sequence analysis model to real-time syscall data. SEARCH for anomalous sequences like open(/proc/[pid]/maps) -> lseek -> write(/proc/[pid]/mem) followed by connect() from target PID.
- question: Was the `dd` utility used to interact with a process's memory, and did the host then communicate with a known malicious IP address?
  context: This question targets a specific, high-fidelity indicator of defense evasion. The `dd` utility is a powerful tool for copying data, but its use with `/proc/[pid]/mem` or `/proc/[pid]/maps` is almost always malicious, intended to dump or overwrite a process's memory. Correlating this rare event with subsequent network traffic to a known command-and-control (C2) server provides strong evidence that an attacker injected code and established a C2 channel.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'NAI: All Linux endpoints and servers, especially those running custom or sensitive applications, DNS resolvers'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for process creation of 'dd' with '/proc/' and ('mem' or 'maps') in command line. CORRELATE with outbound network connections from the same host to a C2 threat intel IP list within 5 minutes.
- question: Has the `dd` utility been executed with statistically rare arguments pointing to process memory, and did the targeted process then make an anomalous network connection?
  context: This is an anomaly-based approach to the previous question. Even without a C2 threat intelligence list, this behavior is highly suspicious. Using `dd` to access `/proc` memory is an extremely rare event. If the process whose memory was targeted then communicates with a network destination that is also rare for that host, it strongly suggests a successful injection and subsequent C2 activity. This method helps detect new or unknown C2 infrastructure.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'NAI: All Linux endpoints and servers, especially those running custom or sensitive applications, DNS resolvers'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for rare executions (>99.9th percentile) of 'dd' with '/proc/' in arguments. CORRELATE with subsequent network traffic from the target PID to a rare destination IP (>99th percentile for that host).
- question: Following a suspicious use of `dd` to modify process memory, did the host generate network traffic that falls outside of its normal communication patterns?
  context: This question uses unsupervised machine learning to identify anomalous network behavior post-injection. By clustering normal network traffic, we can create a profile of what's "normal" for a host. When a suspicious event like `dd` writing to process memory occurs, any subsequent network traffic from that host that doesn't fit into a known cluster (an outlier) is a prime candidate for being malicious C2 traffic. This is effective for detecting novel C2 channels that don't rely on known indicators.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Zeek conn.log
  - Zeek dns.log
  - 'NAI: All Linux endpoints and servers, especially those running custom or sensitive applications, DNS resolvers'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for 'dd' execution targeting /proc memory. ANALYZE subsequent network traffic from the host using a clustering model. FLAG traffic identified as a noise outlier by the model.
- question: After a process's memory was written to, did it spawn a known reverse shell or connect to an external IP address?
  context: This question looks for the direct and immediate outcome of a successful code injection. After an attacker writes their malicious payload into a process's memory, that payload needs to execute. Common actions include spawning an interactive shell (`bash -i`) for direct control or establishing a network connection to an external (non-private) IP address for command and control. This rule provides a high-confidence alert for process injection leading to active compromise.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - 'NAI: Application servers, developer workstations, systems with access to sensitive data repositories'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for write to /proc/[pid]/mem in Auditd logs. CORRELATE with subsequent process creation of known reverse shell commands OR network connection to a non-RFC1918 address by the target PID.
- question: Following a write to its memory, did a critical process deviate from its established behavioral baseline, such as by reading sensitive files or spawning unusual child processes?
  context: This question focuses on detecting post-injection activity by profiling critical, long-running daemons. Processes like `sshd` or `nginx` have very predictable behavior. If, after its memory is tampered with, such a process suddenly attempts to read the shadow password file (`/etc/shadow`) or spawn a debugger (`gdb`), it is a clear and significant deviation from its normal function. Scoring these deviations helps prioritize alerts for the most critical and anomalous events.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - 'NAI: Application servers, developer workstations, systems with access to sensitive data repositories'
  range: Last 90 days
  queries:
  - pseudocode: SEARCH for write to /proc/[pid]/mem targeting a critical process. CALCULATE anomaly score based on subsequent file reads and child processes compared to the process's historical baseline.
- question: Did a critical process exhibit a sequence of system calls classified as anomalous by a machine learning model, especially after its memory was written to?
  context: This question applies advanced anomaly detection at the system call level for high-value assets. By training a model like a One-Class SVM on what constitutes normal syscall activity for a specific process (e.g., a database service), we can detect any deviation. An outlier detected by the model, especially when temporally correlated with a write to the process's memory space, is a strong indicator that injected code is now executing and performing actions outside the process's normal operational parameters.
  answer_sources:
  - Linux Auditd logs
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - 'NAI: Application servers, developer workstations, systems with access to sensitive data repositories'
  range: Last 90 days
  queries:
  - pseudocode: APPLY trained one-class SVM model to real-time syscall data for critical processes. FLAG outliers, especially if they occur after a write to the process's /proc memory space.