name: 'T1568.002: Domain Generation Algorithms'
id: 'd4b8e2f0-a1b9-4d6c-8a7e-f9b3c1d0e8f6'
description: 'This playbook addresses the question: Is the adversary communicating with command and control infrastructure using Domain Generation Algorithms? It provides investigative steps to detect DGA-based C2 communication by analyzing DNS queries and network connections. The detection strategies include: matching network activity against known DGA indicators from threat intelligence feeds; identifying suspicious domain string characteristics (e.g., length, character ratio, TLDs) that are consistent with fingerprinted DGA families; measuring linguistic randomness via entropy or n-gram analysis to find algorithmically generated domains; analyzing domain metadata for suspicious signals such as recent WHOIS registration dates, low DNS TTL values, or low query prevalence across internal hosts; detecting high volumes of NXDOMAIN responses originating from a single host; and correlating suspicious DNS activity with anomalous process execution on the endpoint.'
type: technique
related:
  - 'TA0011: Command And Control'
contributors:
  - 'Zachary Szewczyk'
created: '2025-10-01'
modified: '2025-10-01'
version: '1.0'
tags: none
questions:
  - question: 'Are any DNS queries or outbound network connections matching known DGA domains or IP addresses from our threat intelligence feeds?'
    context: 'This question is crucial for leveraging external threat intelligence to detect known threats. By ingesting lists of confirmed DGA domains and associated IP addresses into a watchlist, we can quickly identify communication with malicious infrastructure. A match provides a high-confidence signal that a host may be compromised and is attempting to contact a command-and-control server.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, Enterprise DNS Resolvers, Network Egress Points (e.g., Firewalls, Proxies), Threat Intelligence Platforms'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WATCHLIST = load_dga_threat_intel()
          FOR each dns_log IN zeek_dns_logs:
            IF dns_log.query IN WATCHLIST:
              ALERT(dns_log)
          FOR each conn_log IN zeek_conn_logs:
            IF conn_log.destination_ip IN WATCHLIST:
              ALERT(conn_log)
  - question: 'How can we prioritize alerts from different threat intelligence feeds based on their historical accuracy?'
    context: 'Not all threat intelligence feeds are equal; some have higher accuracy and lower false positive rates. This question aims to refine our detection strategy by scoring and weighting feeds based on their performance over a 30-day rolling window. By calculating a feed''s hit rate and true-to-false positive ratio, we can create a risk scoring model that assigns higher priority to alerts from more reliable sources, allowing analysts to focus on the most credible threats.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, Enterprise DNS Resolvers, Network Egress Points (e.g., Firewalls, Proxies), Threat Intelligence Platforms'
    range: last 30 days
    queries:
      - technology: pseudocode
        query: |
          FOR each feed IN threat_intel_feeds:
            feed.hit_rate = calculate_hit_rate(feed, last_30_days)
            feed.tp_fp_ratio = calculate_tp_fp_ratio(feed, last_30_days)
            feed.weight = calculate_weight(feed.hit_rate, feed.tp_fp_ratio)
          FOR each alert:
            alert.risk_score = base_score * alert.source_feed.weight
  - question: 'Can we automatically adjust the weighting of threat intelligence feeds using machine learning based on their ongoing performance and analyst feedback?'
    context: 'This question seeks to automate and improve the process of evaluating threat intelligence feed effectiveness. A supervised machine learning model, like Logistic Regression, can learn from historical data, including hit rates and direct feedback from analysts on alert validity. This allows for dynamic and continuous re-calibration of feed weightings, ensuring the scoring model adapts over time to changes in feed quality and the threat landscape.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, Enterprise DNS Resolvers, Network Egress Points (e.g., Firewalls, Proxies), Threat Intelligence Platforms'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_logistic_regression(features=['hit_rate', 'analyst_feedback'], label='feed_effectiveness')
          FOR each feed IN threat_intel_feeds:
            effectiveness_class = MODEL.predict(feed.performance_data)
            feed.weight = get_weight_for_class(effectiveness_class)
  - question: 'Are there any DNS queries for domains with structural patterns matching known DGA families?'
    context: 'This question focuses on identifying DGAs by their structural characteristics rather than exact-match intelligence. Many DGA families generate domains with predictable patterns, such as a specific length, character set, or top-level domain (TLD). By applying a library of regular expressions to DNS query logs, we can detect these patterns and identify potential DGA activity even for previously unseen domains.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          REGEX_LIBRARY = load_dga_family_regex()
          FOR each dns_log IN zeek_dns_logs:
            FOR each regex IN REGEX_LIBRARY:
              IF regex.matches(dns_log.query):
                ALERT(dns_log, reason="Structural match for DGA family")
  - question: 'How can we increase the fidelity of alerts for domains that match structural DGA patterns?'
    context: 'While regular expressions are effective, they can sometimes trigger on benign domains. This question aims to reduce false positives by adding a statistical context. By calculating the prevalence of a domain within the enterprise over the last 90 days, we can identify domains that are not only structurally suspicious but also extremely rare. Combining a rule match with a rarity score significantly increases alert confidence and helps prioritize investigations on the most anomalous events.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each domain in structurally_suspicious_domains:
            prevalence = calculate_domain_prevalence(domain, last_90_days)
            IF prevalence < 1st_percentile:
              INCREASE_ALERT_PRIORITY(domain, reason="Structurally suspicious and rare")
  - question: 'Can we use machine learning to detect DGA variants that evade rigid pattern matching rules?'
    context: 'Adversaries can create DGA variants that subtly alter domain structures to evade specific regular expressions. This question explores using a machine learning classification model to provide more flexible detection. By training a model (e.g., a Decision Tree) on a variety of features like domain length, digit ratio, TLD, and n-gram score, we can identify characteristics of DGA families more broadly, enabling the detection of novel variants that would otherwise be missed.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL = train_decision_tree(features=['length', 'digit_ratio', 'tld', 'ngram_score'], label='is_dga')
          FOR each dns_log IN zeek_dns_logs:
            features = extract_features(dns_log.query)
            prediction = MODEL.predict(features)
            IF prediction == 'DGA':
              ALERT(dns_log, reason="ML classification as DGA")
  - question: 'Are any DNS queries being made for high-entropy domains that are not on an established whitelist?'
    context: 'Algorithmically generated domains often appear random and have high linguistic entropy compared to human-readable domains. This question focuses on using Shannon entropy as a primary indicator of DGA activity. By first whitelisting known-good high-entropy domains (like those for CDNs), we can then calculate the entropy for all other queried domains and alert when it exceeds a high-confidence threshold, indicating a likely machine-generated name.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          WHITELIST = load_high_entropy_whitelist()
          FOR each dns_log IN zeek_dns_logs:
            domain = dns_log.query
            IF domain NOT IN WHITELIST:
              entropy = calculate_shannon_entropy(domain)
              IF entropy > 4.2:
                ALERT(domain, reason="High entropy score")
  - question: 'Can we identify suspicious domains by combining entropy scores with n-gram frequency analysis?'
    context: 'This question seeks to improve the accuracy of randomness-based detection. While high entropy is a good indicator, combining it with another metric can increase confidence. N-grams (sequences of characters) in legitimate domains follow predictable patterns, whereas they are often rare in DGA domains. By flagging domains that have both high entropy (top 5th percentile) and low-frequency n-grams (bottom 5th percentile), we can more reliably distinguish DGA domains from unusual but legitimate ones.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_domain IN zeek_dns_logs:
            entropy_score = calculate_shannon_entropy(new_domain)
            ngram_freq = calculate_ngram_frequency(new_domain)
            IF entropy_score > 95th_percentile AND ngram_freq < 5th_percentile:
              ALERT(new_domain, reason="High entropy and low n-gram frequency")
  - question: 'Can a machine learning model provide a probabilistic score to identify DGA-generated domains?'
    context: 'This question aims to move beyond simple thresholds and towards a more nuanced, probability-based detection method. A pre-trained machine learning classifier, such as a Random Forest, can analyze multiple domain string features (entropy, length, n-gram score, vowel-consonant ratio) simultaneously. The model outputs a probability score indicating the likelihood of a domain being DGA-generated, allowing analysts to set a precise alerting threshold (e.g., > 0.85) and prioritize domains with the highest probability scores.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Internal host endpoints'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ML_MODEL = load_pre-trained_random_forest()
          FOR each dns_log IN zeek_dns_logs:
            features = extract_features(dns_log.query)
            dga_probability = ML_MODEL.predict_proba(features)
            IF dga_probability > 0.85:
              ALERT(dns_log, score=dga_probability)
  - question: 'Are any domains being queried that were registered within the last 30 days or have a very low DNS Time-To-Live (TTL)?'
    context: 'DGA-based malware often uses newly registered domains for C2 infrastructure, which are discarded quickly. This question uses domain metadata as an indicator of suspiciousness. By enriching DNS logs with WHOIS data, we can check the domain''s creation date. An alert on a recently created domain (e.g., < 30 days) or one with a very low TTL (e.g., < 300 seconds), which allows for rapid IP changes, can uncover this ephemeral infrastructure.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, External WHOIS Data, Enterprise DNS Resolvers, Network Egress Points, Passive DNS and WHOIS databases'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each resolved_domain IN zeek_dns_logs:
            whois_data = get_whois(resolved_domain)
            dns_ttl = resolved_domain.ttl
            IF whois_data.creation_date < 30_days_ago OR dns_ttl < 300:
              ALERT(resolved_domain, reason="Newly registered or low TTL")
  - question: 'Are there any domains being queried by an unusually small number of hosts in the network?'
    context: 'Legitimate domains are typically accessed by a large number of hosts, whereas a DGA-infected host may be one of only a few (or the only one) contacting a specific malicious domain. This question uses domain prevalence as a key indicator. By counting the unique source IPs querying each domain over a 24-hour period, we can flag domains that are statistical outliers (e.g., queried by a number of hosts in the bottom 1st percentile). Combining this rarity with other flags, like recent registration, creates a high-confidence alert.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, External WHOIS Data, Enterprise DNS Resolvers, Network Egress Points, Passive DNS and WHOIS databases'
    range: last 24 hours
    queries:
      - technology: pseudocode
        query: |
          FOR each domain IN daily_domains:
            unique_hosts = count_unique_source_ips(domain, last_24_hours)
            IF unique_hosts < 1st_percentile_of_host_counts:
              FLAG(domain, reason="Anomalously low prevalence")
  - question: 'Can we detect the start of a new DGA campaign by analyzing trends in queries to newly registered domains?'
    context: 'The start of a malware campaign using DGAs may manifest as a sudden, anomalous spike in queries to newly registered domains across the enterprise. This question focuses on using time-series analysis to detect such campaign kick-offs. By monitoring a metric like "count of queries to domains registered in the last 7 days," we can apply anomaly detection algorithms to identify unusual increases that deviate from the established baseline, signaling a potential widespread infection event.'
    answer_sources: 'Zeek dns.log, Zeek conn.log, External WHOIS Data, Enterprise DNS Resolvers, Network Egress Points, Passive DNS and WHOIS databases'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          METRIC = "count of queries to newly registered domains per hour"
          MODEL = train_timeseries_anomaly_detector(METRIC, historical_data)
          FOR each hour:
            current_value = get_current_value(METRIC)
            IF MODEL.is_anomaly(current_value):
              ALERT(reason="Anomalous spike in queries to new domains")
  - question: 'Is any single host generating a high volume of DNS queries for non-existent domains (NXDOMAIN)?'
    context: 'A common DGA behavior involves the malware iterating through a list of potential domains until it finds one that is active. This process generates a large number of DNS queries for domains that do not exist, resulting in NXDOMAIN responses. This question aims to detect this "NXDOMAIN storm" by counting the number of unique failed lookups from a single source host over a short time window (e.g., 5 minutes). Exceeding a static threshold (e.g., 50) is a strong indicator of an infected host.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Endpoint Devices'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host in network:
            nxdomain_count = count_unique_nxdomains(host, last_5_minutes)
            IF nxdomain_count > 50:
              ALERT(host, reason="High volume of NXDOMAIN responses")
  - question: 'Is any host generating an anomalous number of NXDOMAIN responses compared to its own baseline?'
    context: 'While a static threshold for NXDOMAINs is useful, a more robust method is to compare a host''s activity against its own normal behavior. This question involves establishing a baseline of unique NXDOMAIN counts for each host and alerting when the current count significantly deviates (e.g., by more than 3 standard deviations). This statistical approach adapts to different host roles and reduces false positives. Further increasing alert severity based on the entropy of the failed domains helps prioritize hosts generating random-looking queries.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Endpoint Devices'
    range: last 14 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host in network:
            baseline_mean, baseline_stddev = calculate_nxdomain_baseline(host, last_14_days)
            current_count = count_unique_nxdomains(host, last_5_minutes)
            IF current_count > (baseline_mean + 3 * baseline_stddev):
              ALERT(host, reason="Anomalous NXDOMAIN count vs. baseline")
  - question: 'Can we use time-series forecasting to predict and detect anomalous NXDOMAIN activity for each host?'
    context: 'This question proposes a more advanced, predictive approach to detecting NXDOMAIN storms. By using a time-series forecasting model (like SARIMA) for each host''s unique NXDOMAIN count, we can create a prediction interval for what its "normal" activity should be in the next time window. An actual observation that falls significantly outside this 95% prediction interval represents a statistically significant anomaly, providing a high-confidence signal for investigation.'
    answer_sources: 'Zeek dns.log, Enterprise DNS Resolvers, Endpoint Devices'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host in network:
            MODEL = train_sarima_model(host.nxdomain_history)
            prediction_interval = MODEL.forecast(next_5_minutes)
            current_count = count_unique_nxdomains(host, last_5_minutes)
            IF current_count is not in prediction_interval:
              ALERT(host, reason="NXDOMAIN count outside of forecast model")
  - question: 'When DGA-like network activity is detected, is there a corresponding suspicious process execution on the source host?'
    context: 'Detecting DGA network traffic is valuable, but linking it to a specific process on the host provides crucial context for remediation. This question focuses on correlating network-based DGA alerts (e.g., high entropy, NXDOMAIN storm) with host-based process execution logs within a tight time window (+/- 60 seconds). The goal is to find the process responsible, looking for tell-tale signs like an unsigned binary, execution from a non-standard directory, or a suspicious command line.'
    answer_sources: 'Zeek dns.log, Windows Event ID 4688, Sysmon Event ID 1, Endpoint Devices, Domain Controllers, Application Servers, Enterprise DNS Resolvers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON DGA_network_alert(host, timestamp):
            process_events = get_process_events(host, time_range=[timestamp-60s, timestamp+60s])
            FOR each event in process_events:
              IF event.is_unsigned OR event.path is non_standard:
                ALERT(host, process=event.process_name)
  - question: 'Can we identify the process behind a DGA alert by finding statistically rare parent-child process relationships?'
    context: 'Malware often creates anomalous parent-child process relationships (e.g., Microsoft Word spawning PowerShell). This question aims to use this behavior for correlation. After a DGA network alert is triggered for a host, we can analyze its process creation events to see if any represent a statistically rare relationship (e.g., one that occurs less than 0.01% of the time in the environment). This helps pinpoint the malicious process chain that initiated the DGA communication.'
    answer_sources: 'Zeek dns.log, Windows Event ID 4688, Sysmon Event ID 1, Endpoint Devices, Domain Controllers, Application Servers, Enterprise DNS Resolvers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ON DGA_network_alert(host, timestamp):
            process_events = get_process_events(host, time_range=[timestamp-60s, timestamp+60s])
            FOR each event in process_events:
              relationship = (event.parent_process, event.child_process)
              IF relationship_prevalence(relationship) < 0.01%:
                ALERT(host, reason="Rare parent-child process relationship")
  - question: 'Can we create a composite risk score by combining network-based DGA scores with host-based process anomaly scores?'
    context: 'This question seeks to create a unified view of risk by combining signals from both the network and the endpoint. An unsupervised machine learning model (e.g., Isolation Forest) can be used to score processes based on their features (path, name, parent process) to identify anomalies on the host. By correlating these host-based anomaly scores in near real-time with network-based DGA scores, we can generate a composite risk score for a host''s activity, greatly improving detection confidence and prioritizing the most critical threats.'
    answer_sources: 'Zeek dns.log, Windows Event ID 4688, Sysmon Event ID 1, Endpoint Devices, Domain Controllers, Application Servers, Enterprise DNS Resolvers'
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          HOST_MODEL = train_isolation_forest(process_features)
          FOR each host:
            network_dga_score = get_network_dga_score(host)
            process_anomaly_score = HOST_MODEL.predict(host.current_processes)
            composite_risk_score = (network_dga_score * weight_A) + (process_anomaly_score * weight_B)
            IF composite_risk_score > THRESHOLD:
              ALERT(host, score=composite_risk_score)