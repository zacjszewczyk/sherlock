name: T1546.006: LC_LOAD_DYLIB Addition
id: 5a81a7b8-6b2c-4e8f-9d3a-1b2c3d4e5f6a
description: This playbook helps investigate whether an adversary is establishing persistence
  or escalating privileges by modifying a Mach-O binary's load commands to inject
  a malicious dynamic library (dylib). This technique, known as LC_LOAD_DYLIB Addition,
  involves an adversary altering a legitimate, trusted application to load and execute
  their code whenever the application is launched. Investigations should focus on
  identifying the use of binary modification tools (e.g., optool, install_name_tool),
  unauthorized changes to system or signed application binaries, dylib loads from
  unusual or user-writable locations (e.g., /tmp, /Users/Shared), and subsequent
  suspicious activity such as shell spawning or anomalous network connections. This
  can be detected by monitoring for modifications to binaries (especially those with
  setuid/setgid bits), analyzing module load events for rare or suspiciously located
  dylibs, and correlating these events with threat intelligence and process lineage.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are binary modification tools being used to inject dylibs that are known
    to be malicious based on threat intelligence?
  context: This question aims to detect the direct use of known malicious dylibs.
    Adversaries may modify a legitimate Mach-O binary to load a malicious dynamic
    library for persistence. By cross-referencing the dylib path or name used in
    modification tool commands against a threat intelligence feed, we can identify
    this specific technique with high confidence.
  answer_sources:
  - macOS ESF Process Events
  - File Integrity Monitoring Logs
  - EDR Module Load Events
  - Threat Intelligence Feeds
  - macOS endpoints (laptops, desktops), macOS-based servers (e.g., build servers,
    web servers), and threat intelligence platforms.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: SEARCH process_events WHERE process_name IN ('optool', 'install_name_tool',
      'yololib') AND command_line CONTAINS dylib_from_threat_feed
- question: Are any rarely seen dynamic libraries being loaded across the enterprise,
    potentially indicating a custom or targeted malicious implant?
  context: This question uses statistical analysis to find outliers. Malicious dylibs
    used for persistence are often not widespread. By identifying dylibs that are
    loaded on only a very small number of hosts (low prevalence), we can uncover
    suspicious activity that might otherwise be missed, especially when the dylib
    is not yet known to threat intelligence.
  answer_sources:
  - macOS ESF Process Events
  - File Integrity Monitoring Logs
  - EDR Module Load Events
  - Threat Intelligence Feeds
  - macOS endpoints (laptops, desktops), macOS-based servers (e.g., build servers,
    web servers), and threat intelligence platforms.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: AGGREGATE dylib_loads BY dylib_path, COUNT(DISTINCT host) AS prevalence.
      ALERT WHERE prevalence < 1st_percentile AND dylib_path NOT IN known_good_list
- question: Can we use machine learning to predict and identify malicious dylib load
    events based on their contextual features?
  context: This question proposes a more advanced, predictive approach. By training
    a machine learning model on various features associated with dylib load events—such
    as the parent process, user, command-line complexity, dylib path, and signing
    status—we can create a system that automatically scores the risk of a load event
    and alerts on those that are highly likely to be malicious.
  answer_sources:
  - macOS ESF Process Events
  - File Integrity Monitoring Logs
  - EDR Module Load Events
  - Threat Intelligence Feeds
  - macOS endpoints (laptops, desktops), macOS-based servers (e.g., build servers,
    web servers), and threat intelligence platforms.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: PREDICT is_malicious FROM dylib_load_events USING ML_Model(features=[parent_process,
      user, cmd_entropy, path, signing_status, prevalence]). ALERT on high_confidence_predictions
- question: Is a binary modification tool being used to add a dylib from a suspicious,
    user-writable location like /tmp or /Users/Shared?
  context: This question focuses on the location of the injected dylib. Legitimate
    dylibs are typically located in protected system directories. Adversaries often
    place their malicious payloads in user-writable locations. Correlating the use
    of a modification tool with a dylib from a non-standard path is a strong indicator
    of malicious persistence.
  answer_sources:
  - macOS Process Execution Logs (with command-line arguments and user context)
  - macOS ESF File Modification Events
  - User home directories on macOS endpoints, shared and temporary directories (`/tmp`,
    `/Users/Shared`) on all macOS systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: CORRELATE process_exec(name IN ['optool', 'install_name_tool']) WITH file_mod_event
      WHERE dylib_path IN command_line AND dylib_path MATCHES ('/tmp/*', '~/.*', '/Users/Shared/*')
- question: Can a risk score be calculated for newly added dylibs to identify potentially
    malicious modifications?
  context: This question suggests a quantitative approach to risk assessment. Instead
    of relying on a simple blocklist of paths, we can calculate a risk score based
    on factors like path location rarity and filename entropy. This allows for a
    more nuanced detection that can adapt to novel adversary TTPs and reduce false
    positives from legitimate but unusual software.
  answer_sources:
  - macOS Process Execution Logs (with command-line arguments and user context)
  - macOS ESF File Modification Events
  - User home directories on macOS endpoints, shared and temporary directories (`/tmp`,
    `/Users/Shared`) on all macOS systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR EACH binary_modification_event, CALCULATE risk_score(dylib_path, filename_entropy).
      ALERT on risk_score > 95th_percentile_threshold
- question: Do binary modification events deviate from normal software installation
    and update sequences?
  context: This question aims to identify malicious modifications by modeling legitimate
    behavior. Normal software updates follow predictable sequences of events. By
    training a sequence analysis model on these legitimate patterns, we can detect
    when a binary modification occurs in a context that is anomalous, such as outside
    of a known installer process, indicating a potential threat.
  answer_sources:
  - macOS Process Execution Logs (with command-line arguments and user context)
  - macOS ESF File Modification Events
  - User home directories on macOS endpoints, shared and temporary directories (`/tmp`,
    `/Users/Shared`) on all macOS systems.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT process_and_file_event_sequence INTO sequence_model. ALERT on low_probability_score
- question: Has a trusted system binary been modified without authorization from a
    corresponding patch or change request?
  context: This question seeks to find unauthorized changes by correlating file integrity
    data with change management records. Any modification to a critical binary that
    cannot be tied to a legitimate, documented patching or deployment process is
    highly suspicious and could indicate tampering for persistence.
  answer_sources:
  - File Integrity Monitoring Logs (file hash, signature status, modifying process)
  - Change Management System Logs (patch IDs, deployment times, target hosts)
  - Software Deployment Logs
  - Directories containing critical system binaries (`/bin`, `/sbin`, `/usr/bin`),
    application bundles (`/Applications`), framework directories (`/System/Library/Frameworks`),
    and change management log repositories.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: JOIN fim_logs WITH patch_logs ON hostname, timestamp. ALERT WHERE fim_log.binary_changed
      AND patch_log.record IS NULL for a 24-hour window
- question: Has a binary been modified at a time that is statistically unusual compared
    to its historical update cycle?
  context: This question uses time-series analysis to detect anomalies in patching
    cadence. System binaries are typically updated on a predictable schedule. A modification
    that occurs far outside this expected cycle (e.g., a few days after a major OS
    update) is an outlier that warrants investigation for malicious activity.
  answer_sources:
  - File Integrity Monitoring Logs (file hash, signature status, modifying process)
  - Change Management System Logs (patch IDs, deployment times, target hosts)
  - Software Deployment Logs
  - Directories containing critical system binaries (`/bin`, `/sbin`, `/usr/bin`),
    application bundles (`/Applications`), framework directories (`/System/Library/Frameworks`),
    and change management log repositories.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FOR EACH binary, MODEL update_intervals FROM historical_patch_data. ALERT
      on new_modification_time > 3_std_dev from mean_interval
- question: Can we use an anomaly detection model to distinguish between legitimate
    and potentially malicious file modifications?
  context: This question leverages machine learning to baseline normal file modification
    behavior. By training a model like a one-class SVM on the features of legitimate
    changes (e.g., initiated by 'installer' process, user is 'system'), any new modification
    that the model flags as an anomaly is a strong candidate for a malicious event.
  answer_sources:
  - File Integrity Monitoring Logs (file hash, signature status, modifying process)
  - Change Management System Logs (patch IDs, deployment times, target hosts)
  - Software Deployment Logs
  - Directories containing critical system binaries (`/bin`, `/sbin`, `/usr/bin`),
    application bundles (`/Applications`), framework directories (`/System/Library/Frameworks`),
    and change management log repositories.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: INPUT file_modification_event_features INTO anomaly_detection_model. ALERT
      if classified as anomaly
- question: Is a process loading an unsigned dylib from a suspicious, user-writable
    location?
  context: This question combines two strong indicators of malicious activity: the
    location of a dylib and its signing status. Legitimate dylibs are usually signed
    by Apple or a trusted developer. An unsigned dylib loading from a temporary or
    user-controlled directory is a high-fidelity signal of a potential threat.
  answer_sources:
  - macOS ESF Module Load Events (`ES_EVENT_TYPE_NOTIFY_LOADER_OPEN`)
  - Process Execution Logs
  - All macOS endpoints and servers, focusing on processes that run with high privilege
    or handle sensitive data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ALERT on module_load_event WHERE module_path IN ('/tmp/*', '~/Downloads/*')
      AND module_signature IS NOT trusted
- question: Has a process loaded a dylib from a path that has never been observed
    for that process before?
  context: This question focuses on baselining normal process behavior to detect
    first-time occurrences. By maintaining a baseline of all legitimate process-to-dylib
    load pairs, any new pair where the dylib is in a user-writable directory can
    be flagged as a potential threat, indicating a deviation from established patterns.
  answer_sources:
  - macOS ESF Module Load Events (`ES_EVENT_TYPE_NOTIFY_LOADER_OPEN`)
  - Process Execution Logs
  - All macOS endpoints and servers, focusing on processes that run with high privilege
    or handle sensitive data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BASELINE process_dylib_pairs over 30 days. ALERT on new pair WHERE dylib_path
      is user-writable
- question: Can graph-based analysis detect anomalous connections between processes
    and the dylibs they load?
  context: This question proposes using a graph model to represent relationships
    between system entities. In this model, processes and dylibs are nodes, and a
    load event is an edge. An anomalous edge, such as a high-privilege process like
    `sshd` suddenly loading a dylib from a user's Downloads folder, would be structurally
    unusual and indicate a potential compromise.
  answer_sources:
  - macOS ESF Module Load Events (`ES_EVENT_TYPE_NOTIFY_LOADER_OPEN`)
  - Process Execution Logs
  - All macOS endpoints and servers, focusing on processes that run with high privilege
    or handle sensitive data.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: MODEL process-dylib loads as a graph. ALERT on new edge creation that
      connects unusual clusters or is a structural anomaly
- question: Does a process initiate suspicious network activity shortly after loading
    a dylib from a risky path?
  context: This question correlates module loading with subsequent network behavior
    to identify command-and-control (C2) activity. If a process loads a suspicious
    dylib and then, within minutes, connects to a known-bad IP address, it strongly
    suggests the dylib contains a malicious C2 payload.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - macOS ESF Module Load Events
  - macOS Process Execution Logs
  - Network egress points (monitored by Zeek), macOS endpoints and servers (for process/module
    context).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: CORRELATE module_load(suspicious_path) with network_connection(dest_ip
      on threat_feed) within 5 minutes
- question: Is a process exhibiting automated network beaconing behavior after loading
    a suspicious dylib?
  context: This question seeks to identify C2 communication by its regularity. Automated
    malware often 'beacons' out to its C2 server at very regular intervals. By analyzing
    the time between network connections after a suspicious dylib load, a very low
    variance in these time deltas can reveal this automated, non-human behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - macOS ESF Module Load Events
  - macOS Process Execution Logs
  - Network egress points (monitored by Zeek), macOS endpoints and servers (for process/module
    context).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: AFTER suspicious_dylib_load, ANALYZE subsequent network traffic. ALERT
      if time_delta_variance between connections is below 10th_percentile
- question: Is a process exfiltrating data after loading a suspicious dylib?
  context: This question uses time-series forecasting to detect abnormal data transfer
    volumes. By modeling the expected outbound network traffic for a given process,
    a significant spike in data volume that exceeds the prediction shortly after
    loading a suspicious dylib could indicate data exfiltration or the download of
    a larger second-stage payload.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - macOS ESF Module Load Events
  - macOS Process Execution Logs
  - Network egress points (monitored by Zeek), macOS endpoints and servers (for process/module
    context).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: FORECAST expected_data_volume for process. AFTER suspicious_dylib_load,
      ALERT if actual_volume significantly exceeds forecast
- question: Is a binary modification tool being used to inject a known privilege
    escalation payload into a setuid/setgid binary?
  context: This is a high-severity question targeting a specific privilege escalation
    path. Adversaries may modify a binary that runs with root privileges (via setuid/setgid
    bits) to load their malicious dylib. This alert triggers when a tool is used
    to modify such a binary and the dylib is already known to be a privilege escalation
    tool.
  answer_sources:
  - File Integrity Monitoring Logs (with file permission attributes)
  - macOS Process Execution Logs (with command-line arguments)
  - Threat Intelligence Feeds
  - Directories containing setuid/setgid binaries on macOS endpoints and servers
    (e.g., `/sbin`, `/usr/bin`).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ALERT on process_exec('optool') WHERE target_file.is_suid=true AND dylib_hash
      IN privesc_payload_watchlist
- question: Has a rarely modified setuid/setgid binary been altered?
  context: This question uses statistical rarity to find suspicious modifications.
    System binaries with elevated permissions are rarely modified outside of official
    patches. Any modification to a setuid/setgid binary that has a history of being
    static is a significant statistical outlier and a strong indicator of a privilege
    escalation attempt.
  answer_sources:
  - File Integrity Monitoring Logs (with file permission attributes)
  - macOS Process Execution Logs (with command-line arguments)
  - Threat Intelligence Feeds
  - Directories containing setuid/setgid binaries on macOS endpoints and servers
    (e.g., `/sbin`, `/usr/bin`).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: BASELINE modification frequency for all suid/sgid binaries. ALERT on modification
      to any binary in the 1st percentile of frequency.
- question: Can we predict if a file modification is a privilege escalation attempt
    using a machine learning model?
  context: This question proposes a predictive model to identify privilege escalation
    attempts. By training a classifier on features like whether the target file is
    setuid/setgid, if the modifying user is root, and command-line entropy, the model
    can learn to distinguish between benign software updates and malicious tampering,
    alerting on high-probability events.
  answer_sources:
  - File Integrity Monitoring Logs (with file permission attributes)
  - macOS Process Execution Logs (with command-line arguments)
  - Threat Intelligence Feeds
  - Directories containing setuid/setgid binaries on macOS endpoints and servers
    (e.g., `/sbin`, `/usr/bin`).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: PREDICT is_privesc FROM file_modification_events USING ML_Model(features=[is_suid,
      is_root_user, cmd_entropy]). ALERT on high_probability_predictions
- question: Has a non-root user modified a setuid/setgid binary, which was then executed
    to gain root privileges?
  context: This question looks for a specific, high-confidence sequence of events
    that indicates privilege escalation. A non-privileged user modifying a root-privileged
    binary and then immediately executing it to get an effective user ID of 0 is
    a classic privilege escalation pattern. A stateful rule can detect this entire
    chain of activity.
  answer_sources:
  - macOS Process Execution Logs (with UID, EUID, command line, and parent process
    ID)
  - macOS ESF File Modification Events
  - All macOS endpoints and servers, correlating user activity logs with modifications
    to privileged system files.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: CORRELATE within 10min (Process_Exec(user!=0, name='optool') -> File_Modify(target.is_suid)
      -> Process_Exec(path=target.path, euid=0)). ALERT if sequence completes.
- question: Has a root-privileged process loaded a dylib from a non-standard or user-writable
    directory?
  context: This question focuses on the behavior of processes already running as
    root. A root process (EUID=0) should only load libraries from protected system
    directories. If it loads a dylib from a path like `/tmp` or `/Users/Shared`,
    it indicates that the privileged process has been compromised or coerced into
    loading malicious code.
  answer_sources:
  - macOS ESF Module Load Events (must include loading process EUID and module path)
  - All macOS endpoints, specifically monitoring module loads for processes running
    as root.
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: ALERT on module_load_event WHERE process_euid == 0 AND module_path MATCHES
      ('/tmp/*', '/Users/Shared/*', '~/.*') AND module_path NOT IN exception_list
- question: After a privileged process loads a suspicious dylib, does it spawn a
    shell or make an unusual network connection?
  context: This question looks for post-exploitation behavior following a successful
    privilege escalation. After hijacking a privileged process with a malicious dylib,
    an adversary will often spawn a root shell for interactive access or initiate
    a C2 connection. Detecting this follow-on activity is critical for confirming
    a compromise.
  answer_sources:
  - macOS Process Execution Logs
  - macOS ESF Module Load Events
  - Zeek conn.log
  - Zeek dns.log
  - macOS endpoints (for process ancestry), network gateways (for Zeek logs), DNS
    servers (for Zeek DNS logs).
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: IF priv_proc loads suspicious_dylib, THEN ALERT if same process spawns_child('bash',
      'nc', etc.) OR makes_connection(dest_ip NOT IN allowlist)