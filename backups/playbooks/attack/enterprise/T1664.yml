name: T1664: Exploitation for Initial Access
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate whether an adversary has exploited a software vulnerability to gain initial access to a mobile device. It focuses on detecting evidence of exploitation by analyzing network traffic for connections to malicious indicators or significant behavioral deviations; inspecting file transfers for known malware, sideloaded applications, or obfuscated payloads; and identifying network patterns characteristic of zero-click exploits, such as immediate outbound connections following push notifications.
type: technique
related:
- TA0027: Initial Access
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are mobile devices communicating with known malicious IPs, domains, or SSL/TLS fingerprints?
  context: This question aims to detect direct communication with known malicious infrastructure. By monitoring all network connections (TCP/UDP, DNS, SSL/TLS) from mobile devices and comparing them against up-to-date threat intelligence feeds, an analyst can identify a confirmed compromise or an active attack. A match is a high-fidelity indicator that a device is infected or is being targeted.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network segments
  - Guest Wi-Fi network
  - VPN concentrators
  - Internet gateway proxy/firewall logs
  - MDM/UEM servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each connection in (conn.log, dns.log, ssl.log) from mobile_IP_range:
        IF connection.destination_ip in malicious_ip_list
        OR connection.dns_query in malicious_domain_list
        OR connection.ja3_hash in malicious_ja3_list
        THEN ALERT high_severity
- question: Has any mobile device's network behavior significantly deviated from its established baseline in terms of data volume, port usage, or SSL/TLS hash diversity?
  context: This question focuses on detecting anomalous network activity that may not involve known malicious indicators. By establishing a historical baseline of normal behavior for each mobile device (e.g., typical data transfer amounts, common destination ports), analysts can spot significant deviations. A sudden spike in data usage, connections to a wide array of unusual ports, or the appearance of many new SSL/TLS fingerprints can indicate C2 communication, data exfiltration, or scanning activity triggered by an exploit.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network segments
  - Guest Wi-Fi network
  - VPN concentrators
  - Internet gateway proxy/firewall logs
  - MDM/UEM servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_device:
        baseline = calculate_30day_rolling_aggregates(bytes, port_entropy, unique_ja3_hashes)
        current = calculate_hourly_aggregates(bytes, port_entropy, unique_ja3_hashes)
        IF current.metric > 98th_percentile(baseline.metric)
        THEN ALERT medium_severity
- question: Does a mobile device's sequence of network connections exhibit patterns that are statistically improbable based on its own learned history?
  context: This question uses advanced machine learning to detect subtle, sequence-based anomalies. An LSTM Autoencoder is trained on the normal sequences of a device's network connections. When a new sequence of connections cannot be accurately reconstructed by the model, it generates a high error score. This indicates that the current pattern of network activity (e.g., the order, duration, and type of connections) is fundamentally different from anything seen before, suggesting a potential compromise that has altered the device's communication behavior.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network segments
  - Guest Wi-Fi network
  - VPN concentrators
  - Internet gateway proxy/firewall logs
  - MDM/UEM servers
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_device:
        model = train_lstm_autoencoder(device.historical_connection_sequences)
        FOR each new_connection_sequence:
          reconstruction_error = model.evaluate(new_connection_sequence)
          IF reconstruction_error > 99th_percentile(training_data_errors)
          THEN ALERT medium_severity
- question: Have any mobile devices downloaded known malware or applications from unapproved, non-store sources (sideloading)?
  context: This question targets two common malware delivery vectors on mobile devices. First, it checks the hashes of all downloaded files against a database of known mobile malware signatures for a direct match. Second, it identifies when a mobile application package (.apk for Android, .ipa for iOS) is downloaded from a website that is not an approved, official app store. Sideloading apps from untrusted sources is a primary method for adversaries to install malicious software.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Internet gateway
  - Web Proxy
  - Guest Wi-Fi network
  - Corporate Wi-Fi network segments
  - Content Delivery Network (CDN) logs
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      // Rule 1: Malware Hash Matching
      FOR each file in files.log:
        IF file.md5_hash in mobile_malware_hash_list
        THEN ALERT high_severity

      // Rule 2: Sideloading Detection
      FOR each download in http.log where URI ends with '.apk' or '.ipa':
        IF download.host NOT IN official_app_store_list
        THEN ALERT high_severity
- question: Is a mobile device downloading an unusual number of files with mismatched MIME types, potentially indicating obfuscation?
  context: This question seeks to identify when an adversary is attempting to disguise malicious files. It compares the MIME type declared by the web server in the HTTP headers (e.g., 'image/gif') with the actual file type as determined by deep packet inspection (e.g., 'application/x-msdownload'). A sudden increase in the rate of these mismatches for a specific device suggests that it may be downloading executable content disguised as benign files to evade simpler detection methods.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Internet gateway
  - Web Proxy
  - Guest Wi-Fi network
  - Corporate Wi-Fi network segments
  - Content Delivery Network (CDN) logs
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_device:
        baseline_mismatch_rate = calculate_30day_avg(mismatches)
        fleet_baseline_rate = calculate_fleet_avg(mismatches)
        current_daily_rate = calculate_daily_mismatches(device)
        IF current_daily_rate > 3_std_dev(baseline_mismatch_rate)
        THEN ALERT medium_severity
- question: Are mobile devices downloading files from URLs that are predicted to be malicious based on their structural and reputational features?
  context: This question aims to proactively identify novel threats by scoring the maliciousness of a URL, even if it's not on a known blocklist. By using a machine learning model that analyzes features like URL length, character entropy, subdomain count, and domain age, analysts can assign a risk score to each file download. This allows for the detection of algorithmically generated domains and other suspicious URL patterns commonly used by attackers to host malware.
  answer_sources:
  - Zeek http.log
  - Zeek files.log
  - Zeek dns.log
  - Internet gateway
  - Web Proxy
  - Guest Wi-Fi network
  - Corporate Wi-Fi network segments
  - Content Delivery Network (CDN) logs
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each file_download_event in http.log:
        url_features = extract_features(event.url)
        malicious_score = classification_model.predict(url_features)
        IF malicious_score > 0.9
        THEN ALERT medium_severity
- question: Has a mobile device received a push notification and immediately made an outbound connection to a known malicious command-and-control (C2) server?
  context: This question looks for a very specific and high-confidence pattern associated with zero-click exploits. The detection logic identifies a sequence where an inbound connection from a legitimate push notification service (like Apple's or Google's) is immediately followed by an outbound connection from the same device to a known malicious IP or domain. This sequence strongly suggests the notification delivered a payload that executed automatically and initiated C2 communication.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network
  - Guest Wi-Fi network
  - Internet Gateway
  - VPN termination points
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      WATCH for connections from mobile_device_ip:
        IF (inbound_conn.source_ip in push_notification_ips)
        AND (outbound_conn.destination_ip in malicious_c2_ips occurs within 60 seconds)
        THEN ALERT critical_severity
- question: Following a push notification, did a mobile device make an unusually fast outbound connection to a new, previously unvisited domain?
  context: This question provides a behavioral approach to detecting zero-click exploits. It works by learning the normal time delay between a device receiving a push notification and the user taking an action that results in an outbound connection. An event where this delay is a statistical outlier (i.e., extremely short) and the destination is a domain the device has never visited before suggests automated, non-user activity. This combination is a strong indicator of a potential exploit.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network
  - Guest Wi-Fi network
  - Internet Gateway
  - VPN termination points
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_device:
        baseline_delta_dist = calculate_historical_distribution(time_delta between push_notification and next_outbound_conn)
        WHEN new push_notification event occurs:
          time_delta = calculate_time_to_next_outbound
          IF time_delta < 5th_percentile(baseline_delta_dist) AND outbound_conn.destination is a new_domain
          THEN ALERT high_severity
- question: Has a mobile device's sequence of network states (e.g., from 'receiving push notification' to 'beaconing to new domain') transitioned in a way that is highly improbable based on its learned normal behavior?
  context: This question uses a Hidden Markov Model (HMM) to model the normal sequence of a device's network activities as a series of states. The model learns the normal probabilities of transitioning from one state to another (e.g., from 'Idle' to 'Web Browsing'). A transition with a very low probability under the model, such as directly from 'Inbound Push Notification' to an 'Outbound Beaconing' state, indicates a severe deviation from learned behavior and is a strong signal of a compromise.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Corporate Wi-Fi network
  - Guest Wi-Fi network
  - Internet Gateway
  - VPN termination points
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_device:
        model = train_hmm(device.historical_event_sequences)
        FOR each new_state_transition:
          transition_probability = model.evaluate(new_transition)
          IF transition_probability is extremely low
          THEN ALERT high_confidence_anomaly