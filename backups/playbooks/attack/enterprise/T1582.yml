name: 'T1582: SMS Control'
id: 'a8e9b0c1-3d2f-4a6b-8c7d-9e0f1a2b3c4d'
description: 'This playbook helps investigate whether an adversary is manipulating SMS messages on mobile devices. This can be achieved by setting a malicious application as the default SMS handler, which might be an unapproved or low-prevalence app, to intercept, modify, or delete messages. Adversaries may also use applications with unjustified or statistically outlier SMS permissions (`SEND_SMS`, `RECEIVE_SMS`) to carry out malicious activities. Furthermore, compromise may be indicated by devices sending SMS messages to known malicious phone numbers or exhibiting anomalous sending patterns, such as unusual volume, frequency, or destinations, which could be signs of C2 communication, malware propagation, or fraud [1][2].'
type: 'technique'
related:
  - 'TA0034: Impact'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: "Is the device's default SMS handler an application that is not on the approved allowlist?"
    context: "Adversaries can set a malicious app as the default SMS handler to intercept, modify, or delete messages. By maintaining an allowlist of known-good SMS applications (e.g., the device's native messaging app), an organization can quickly identify unauthorized or potentially malicious applications that have been set as the default handler. An alert for a non-allowlisted handler is a strong indicator of potential compromise [1][2]."
    answer_sources:
      - 'MDM device_settings.log'
      - 'MDM app_inventory.log'
      - 'Centralized Mobile Device Management (MDM) and Mobile Threat Defense (MTD) Platforms; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          DEFINE allowlist = ["com.google.android.apps.messaging", "com.samsung.android.messaging"]
          SEARCH MDM device_settings.log
          WHERE setting_name = "default_sms_handler"
          AND setting_value NOT IN allowlist
          RETURN device_id, user_id, setting_value
  - question: "Is the device's default SMS handler an application with an unusually low prevalence across the entire mobile device fleet?"
    context: "Malicious applications used in targeted attacks are often not widespread. By calculating the prevalence of each application package used as a default SMS handler, analysts can identify outliers. An application present on a very small percentage of devices (e.g., less than 1%) is suspicious and warrants investigation, as it may be a custom malicious tool rather than a legitimate, popular messaging app [1][2]."
    answer_sources:
      - 'MDM device_settings.log'
      - 'MDM app_inventory.log'
      - 'Centralized Mobile Device Management (MDM) and Mobile Threat Defense (MTD) Platforms; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          total_devices = COUNT(DISTINCT device_id FROM MDM_inventory)
          handler_counts = AGGREGATE COUNT(device_id) BY default_sms_handler FROM MDM_settings
          handler_prevalence = CALCULATE (handler_counts / total_devices) * 100
          low_prevalence_handlers = SELECT default_sms_handler FROM handler_prevalence WHERE prevalence < 1.0
          SEARCH MDM_settings WHERE default_sms_handler IN low_prevalence_handlers
          RETURN device_id, user_id, default_sms_handler
  - question: "Has a machine learning model classified the device's default SMS handler as a potentially illegitimate or malicious application?"
    context: "This question leverages a machine learning model to proactively identify suspicious SMS handlers. The model analyzes various application features (permissions, developer signature, install source, etc.) to determine the likelihood of an app being malicious. An alert from this model, especially with a high confidence score ($$ > 0.9 $$), indicates that the application exhibits characteristics strongly associated with malware, even if it's not on a known blocklist."
    answer_sources:
      - 'MDM device_settings.log'
      - 'MDM app_inventory.log'
      - 'Centralized Mobile Device Management (MDM) and Mobile Threat Defense (MTD) Platforms; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          SEARCH app_scoring_results
          WHERE app_is_default_sms_handler = true
          AND prediction_label = "not_legitimate"
          AND confidence_score > 0.9
          RETURN device_id, user_id, app_package_name, confidence_score
  - question: "Does an application have SMS permissions (`SEND_SMS` or `RECEIVE_SMS`) when its functional category does not justify such access?"
    context: "Applications should only request permissions necessary for their core function. For example, a game or calculator app has no legitimate reason to read or send SMS messages. Identifying applications with these permissions that fall into unexpected categories (like 'Games', 'Utilities') is a critical step in detecting over-permissioned and potentially malicious apps designed for SMS control [1]."
    answer_sources:
      - 'MDM app_permissions.log'
      - 'MDM app_inventory.log'
      - 'Application Risk Intelligence Feed'
      - 'Centralized Mobile Device Management (MDM) Platform; Application Risk Intelligence Feeds; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          DEFINE unexpected_categories = ["Games", "Utilities", "Photo Editor"]
          SEARCH MDM app_permissions.log
          WHERE permission IN ["android.permission.SEND_SMS", "android.permission.RECEIVE_SMS"]
          JOIN with MDM app_inventory.log on package_name
          WHERE app_category IN unexpected_categories
          RETURN device_id, user_id, package_name, app_category
  - question: "Does an application with SMS permissions have a set of total requested permissions that is a statistical outlier compared to other legitimate apps in the same category?"
    context: "The combination of all permissions an app requests can be revealing. A malicious app might request an unusual combination of permissions. By comparing an app's permission set to a baseline for its category using a similarity metric like Jaccard index, we can flag apps with abnormal permission profiles. A low similarity score, such as $$ J(A, B) < 0.5 $$, suggests a significant deviation from the norm and is potentially risky [1]."
    answer_sources:
      - 'MDM app_permissions.log'
      - 'MDM app_inventory.log'
      - 'Application Risk Intelligence Feed'
      - 'Centralized Mobile Device Management (MDM) Platform; Application Risk Intelligence Feeds; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          FOR app in (SELECT * FROM MDM_inventory)
            baseline_vector = GET_BASELINE_VECTOR(app.category)
            app_vector = GET_PERMISSIONS(app.package_name)
            similarity = JACCARD_SIMILARITY(app_vector, baseline_vector)
            IF similarity < 0.5 AND "SMS_PERMISSION" in app_vector
              ALERT on app.package_name, app.device_id, similarity
  - question: "Has an unsupervised clustering algorithm identified an application with SMS permissions as having a rare or unique combination of permissions across the entire fleet?"
    context: "This question employs an unsupervised machine learning approach (like DBSCAN) to find anomalies without pre-defined rules. By representing each app's permissions as a vector, the algorithm can group apps with similar permission sets. Apps that don't fit into any cluster ('noise points') or form very small, isolated clusters are, by definition, rare. These outliers are highly suspicious as they may represent novel malware with unique permission requirements [1]."
    answer_sources:
      - 'MDM app_permissions.log'
      - 'MDM app_inventory.log'
      - 'Application Risk Intelligence Feed'
      - 'Centralized Mobile Device Management (MDM) Platform; Application Risk Intelligence Feeds; SIEM Log Aggregation Layer'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          SEARCH app_clustering_results
          WHERE cluster_id = "noise" OR cluster_size < 5
          AND app_has_sms_permission = true
          RETURN device_id, package_name, cluster_id, cluster_size
  - question: "Has a device sent an SMS message to a phone number that is on a threat intelligence list of known malicious indicators?"
    context: "This is a high-fidelity detection method. Adversaries often use specific phone numbers for C2 servers or smishing. By comparing outgoing SMS destination numbers from carrier records against a continuously updated feed of known malicious phone numbers (Indicators of Compromise), analysts can detect direct communication with adversary infrastructure with a high degree of confidence."
    answer_sources:
      - 'Carrier SMS Detail Records'
      - 'Threat Intelligence Phone Number IOC Feed'
      - 'MDM app_inventory.log'
      - 'MDM device_state.log'
      - 'Carrier Billing and Usage Portals; Threat Intelligence Platform (TIP); Mobile Device Management (MDM) Platform; SIEM Log Storage'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          DEFINE malicious_numbers = GET_IOC_FEED("phone_numbers")
          SEARCH Carrier_SMS_Records
          WHERE direction = "outgoing"
          AND destination_number IN malicious_numbers
          RETURN source_device_id, destination_number, timestamp, IOC_source
  - question: "Is a user's SMS activity (volume, destination uniqueness, or destination country) deviating significantly from their established historical baseline?"
    context: "A sudden, drastic change in a user's SMS pattern can indicate compromise. This question aims to detect such anomalies by profiling user behavior over a 90-day period. An alert could be triggered by a sudden spike in the number of messages sent, messages sent to an unusual number of unique recipients, or messages sent to a foreign country for the first time, which could indicate C2 communication or fraud."
    answer_sources:
      - 'Carrier SMS Detail Records'
      - 'Threat Intelligence Phone Number IOC Feed'
      - 'MDM app_inventory.log'
      - 'MDM device_state.log'
      - 'Carrier Billing and Usage Portals; Threat Intelligence Platform (TIP); Mobile Device Management (MDM) Platform; SIEM Log Storage'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          FOR each new SMS_event:
            user_baseline = GET_USER_BASELINE(sms_event.user_id)
            IF daily_sms_count(user_id) > user_baseline.volume_98th_percentile
              ALERT "High volume SMS anomaly"
            IF sms_event.destination_country_code NOT IN user_baseline.country_codes
              ALERT "New destination country anomaly"
  - question: "Has a time-series machine learning model detected an anomaly in the rhythm or pattern of a user's SMS sending activity?"
    context: "This question applies a sophisticated anomaly detection method, like an LSTM autoencoder, which learns the complex temporal patterns of a user's SMS activity. When current activity deviates from this learned 'normal rhythm,' the model's reconstruction error will be high. This can detect subtle but significant changes indicative of compromise that simple volume counts might miss. Enriching this alert with recent device changes provides immediate context for investigation."
    answer_sources:
      - 'Carrier SMS Detail Records'
      - 'Threat Intelligence Phone Number IOC Feed'
      - 'MDM app_inventory.log'
      - 'MDM device_state.log'
      - 'Carrier Billing and Usage Portals; Threat Intelligence Platform (TIP); Mobile Device Management (MDM) Platform; SIEM Log Storage'
    range: 'last 90 days'
    queries:
      - search_technology: 'pseudocode'
        query: |
          SEARCH sms_anomaly_model_alerts
          WHERE reconstruction_error > dynamic_threshold
          device_id = GET_DEVICE_ID(alert.user_id)
          recent_app_installs = SEARCH MDM_logs WHERE device_id = device_id AND event_time > (alert.time - 24h)
          device_status = GET_DEVICE_STATE(device_id)
          RETURN alert, recent_app_installs, device_status