name: T1053: Scheduled Task/Job
id: f8a5b6c0-1d2e-4f3a-8b9c-0a1b2c3d4e5f
description: This playbook focuses on detecting malicious use of the Scheduled Task/Job
  technique (T1053). Adversaries leverage scheduled tasks for execution, persistence,
  and privilege escalation. This playbook provides investigative questions to identify
  suspicious scheduled task activities, such as tasks initiating network connections
  to malicious or rare destinations, using obfuscated commands, executing from non-standard
  locations, or being created and deleted in a short timeframe. It also helps uncover
  persistence mechanisms like tasks triggered on logon or startup, and privilege
  escalation attempts by creating high-privilege tasks from standard user accounts
  or exploiting UAC bypasses.
type: technique
related:
- TA0002: Execution
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are processes launched by the Task Scheduler making outbound network connections
    to known malicious indicators?
  context: Adversaries often use scheduled tasks for command and control (C2) or data
    exfiltration. This question aims to identify this behavior by joining process
    creation events from the Task Scheduler with network logs. A match against a
    high-confidence threat intelligence feed is a strong indicator of compromise.
  answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Critical Windows
    Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network
    Egress Points.
  range: last 90 days
  queries:
  - 'SEARCH process_events (parent=''taskeng.exe'' or (parent=''svchost.exe'' and
    cmdline contains ''netsvcs'')) | JOIN network_logs on host, time_window=5s | LOOKUP
    dest_ip, dest_domain in threat_intel_feed | RETURN events where threat_intel_match=true'
- question: Are scheduled tasks initiating network connections to destinations that
    are statistically rare for the enterprise?
  context: Beyond known bad indicators, adversaries may use new or unique infrastructure.
    This question helps uncover these by baselining all network destinations contacted
    by scheduled tasks. Connections to destinations that are very infrequent (e.g.,
    bottom 5th percentile) are anomalous and warrant investigation as they may represent
    new C2 channels.
  answer_sources: Windows Event ID 4688, Zeek conn.log, Zeek dns.log. Critical Windows
    Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network
    Egress Points.
  range: last 30-90 days
  queries:
  - SEARCH network_logs from processes_spawned_by_scheduler | AGGREGATE frequency
    of dest_ip, dest_domain, dest_asn over 90d | FILTER events where frequency_percentile
    <= 5
- question: Is there an anomalous spike in outbound data transfer from a host immediately
    following a scheduled task execution?
  context: Data exfiltration is a key adversary objective. This question uses a time-series
    model to detect unusual spikes in outbound data volume. By correlating these
    spikes with the execution of a scheduled task, an analyst can pinpoint potential
    data theft activities that might otherwise be missed.
  answer_sources: Windows Event ID 4688, Zeek conn.log. Critical Windows Servers (e.g.,
    Domain Controllers, Application Servers), User Endpoints, and Network Egress Points.
  range: last 90 days
  queries:
  - MODEL time_series on outbound_bytes per host | DETECT anomaly_spike | CORRELATE
    spike_time with scheduled_task_execution_time on same host within 5m window |
    ALERT on correlation
- question: Are newly created or executed scheduled tasks using known malicious or
    obfuscated commands and scripts?
  context: Adversaries often hide their commands using encoding (Base64) or by invoking
    scripting engines to download and execute code. This question uses regular expressions
    to scan task commands and arguments for known suspicious patterns like 'powershell
    -e', 'IEX', and 'rundll32 javascript:', providing a direct way to find malicious
    activity.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    and Servers, especially those with PowerShell v5+ logging and command-line process
    auditing enabled.
  range: last 90 days
  queries:
  - SEARCH task_creation_events (4698) or schtasks_execution_events (4688) | REGEX
    command_line_or_xml_args for patterns ('powershell -e', '-enc', 'IEX', 'DownloadString',
    'rundll32 javascript:') | ALERT on match
- question: Do the command arguments of a new scheduled task have an unusually high
    entropy, suggesting obfuscation?
  context: Encoded or encrypted commands have a higher degree of randomness (entropy)
    than plain text commands. By calculating the entropy of a task's command line
    and comparing it to a baseline for its system role, this question can detect likely
    obfuscation, even if the specific pattern is unknown.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    and Servers, especially those with PowerShell v5+ logging and command-line process
    auditing enabled.
  range: last 90 days
  queries:
  - FOR each new_task_event | CALCULATE shannon_entropy of command_arguments | GET
    baseline_entropy for host_role | IF new_task_entropy > 95th_percentile_of_baseline,
    ALERT
- question: Can a machine learning model classify the command line of a scheduled
    task as malicious?
  context: To combat novel obfuscation techniques, this question proposes using a
    Natural Language Processing (NLP) model trained on large datasets of malicious
    and benign commands. This approach can identify suspicious characteristics and
    semantics in the command line that would evade static regex and simple entropy
    checks.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    and Servers, especially those with PowerShell v5+ logging and command-line process
    auditing enabled.
  range: last 90 days
  queries:
  - FOR each new_task_event | INPUT command_arguments into NLP_classifier_model |
    IF model_prediction == 'malicious', ALERT
- question: Is a scheduled task attempting to execute a binary from a non-standard,
    user-writable location?
  context: Adversaries place their tools in user-writable directories like AppData
    or Temp to avoid requiring administrative privileges. This question seeks to detect
    tasks that execute binaries from these suspicious locations, which is a strong
    deviation from normal software behavior.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - SEARCH task_creation_or_execution_events | WHERE executable_path IN ('C:\Users\*\AppData\',
    'C:\ProgramData\', 'C:\Windows\Temp\') | ALERT on match
- question: Is the Task Scheduler launching a process that is statistically rare for
    it to launch?
  context: Legitimate scheduled tasks typically execute a predictable set of processes.
    This question aims to find anomalies by building a baseline of all processes launched
    by the Task Scheduler and flagging any process-path combinations that are very
    infrequent in the environment, indicating a likely unauthorized or malicious task.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - BUILD baseline of (process_name, process_path) tuples from task_scheduler_executions
    | FOR each new_execution | IF tuple_frequency < 1%, ALERT
- question: Does a new scheduled task deviate significantly from the baseline of normal
    task behavior?
  context: This question uses an unsupervised machine learning model (Isolation Forest)
    to perform broad anomaly detection. By training on features of legitimate tasks
    (path, signature status, arguments), the model can identify and score new tasks
    that are outliers, catching suspicious activities that do not fit any specific
    pre-defined rule.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - TRAIN isolation_forest_model on features of legitimate_tasks | FOR each new_task
    | SCORE task with model | IF anomaly_score is high, ALERT
- question: Has a scheduled task been created and then deleted within a very short
    timeframe?
  context: To evade detection and forensic analysis, adversaries may create a 'one-shot'
    scheduled task to execute a command and then immediately delete it. This question
    looks for this specific 'hit-and-run' pattern by correlating task creation (4698)
    and deletion (4702) events for the same task name occurring within a few minutes.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - CORRELATE task_creation (4698) and task_deletion (4702) by task_name, host | IF
    time_delta < 5 minutes, ALERT
- question: Has a scheduled task been identified with an unusually short lifetime?
  context: Similar to the symbolic rule, this question identifies ephemeral tasks
    by analyzing the statistical distribution of task lifetimes (time between creation
    and deletion). Tasks with a lifetime in the bottom 1st percentile are highly anomalous
    and likely represent adversary attempts to execute code and clean up their tracks.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - FOR all tasks | CALCULATE lifetime = deletion_time(4702) - creation_time(4698)
    | BUILD distribution of lifetimes | IF task_lifetime is in bottom 1st_percentile,
    ALERT
- question: Do short-lived tasks cluster together based on user account type or process
    executed?
  context: This question uses clustering to find groups of related malicious activity.
    A small, dense cluster of short-lived tasks created by non-administrative accounts
    and executing similar processes could indicate a widespread campaign using a specific
    adversary toolset.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - CLUSTER tasks using features (lifetime, user_account_type, process_name) | IDENTIFY
    small, dense clusters of short-lived tasks as suspicious
- question: Is a persistent scheduled task executing a command that contains a known
    malicious file, domain, or IP?
  context: Adversaries establish persistence by creating tasks that run automatically
    (e.g., on logon or a schedule). This question targets this technique by monitoring
    the creation of persistent tasks and checking their commands/arguments for any
    indicators that match a threat intelligence feed.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, particularly
    Domain Controllers and other Tier 0 assets.
  range: last 90 days
  queries:
  - SEARCH task_creation_events (4698) with persistence triggers (Logon, Boot, Calendar)
    | EXTRACT file_paths, domains, IPs from command/arguments | LOOKUP extracted artifacts
    in threat_intel_feed | ALERT on match
- question: Is a persistent scheduled task using a domain or executable name that
    is statistically rare across the enterprise?
  context: Adversaries may use unique domains or custom tool names for their persistent
    tasks. This question helps detect such anomalies by calculating the frequency
    of domains and executables used in all persistent tasks. A domain or file that
    appears on only a handful of hosts is suspicious and should be investigated.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, particularly
    Domain Controllers and other Tier 0 assets.
  range: last 90 days
  queries:
  - SEARCH persistent_tasks | CALCULATE frequency of domain_names, executable_names
    across all hosts | IF frequency < 5 hosts, ALERT
- question: Does a machine learning model classify a new task as a suspicious persistence
    mechanism?
  context: This question employs a machine learning classifier to proactively identify
    persistence attempts. By training a model on features of known benign and malicious
    persistent tasks, it can flag new tasks that have a high probability of being
    malicious, especially if they also use rare or unseen features.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, particularly
    Domain Controllers and other Tier 0 assets.
  range: last 90 days
  queries:
  - TRAIN classifier on task_features to predict 'persistence' | FOR each new_task
    | IF model_predicts == 'persistent' AND task_has_low_prevalence_features, ALERT
- question: Is a persistent scheduled task using a Living-off-the-Land Binary (LOLBin)
    to execute a remote payload?
  context: Adversaries abuse legitimate Windows binaries (LOLBins) like powershell.exe
    or mshta.exe to evade defenses. This question looks for the creation of persistent
    tasks (e.g., triggered on logon) that invoke a known LOLBin with command-line
    arguments indicating remote file download or script execution.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - SEARCH persistent_task_creation (4698) | WHERE command contains LOLBin ('powershell.exe',
    'mshta.exe') AND arguments indicate remote execution ('-nop -c IEX', 'http://')
    | ALERT on match
- question: Does the command line of a persistent LOLBin task contain statistically
    rare arguments?
  context: While the use of a LOLBin might be common, the specific arguments used
    by an adversary may be unique. This question uses TF-IDF analysis to identify
    command-line arguments that are rare across the environment. A high score for
    an argument (like a unique URL) in a new task indicates a statistical anomaly.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - FOR all LOLBin tasks | CALCULATE TF-IDF for all command-line arguments | FOR new_task
    | IF argument_tfidf_score is high, ALERT
- question: Does the argument sequence for a LOLBin in a persistent task deviate from
    normal patterns?
  context: Adversaries may construct novel command lines that do not match known
    patterns. This question uses a machine learning model to learn the normal sequence
    and structure of arguments for LOLBins. It can then flag new tasks where the argument
    pattern is anomalous, indicating a potential new attack variation.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - TRAIN anomaly_detection_model on legitimate LOLBin argument sequences | FOR new_task
    | IF model identifies argument_sequence as anomalous, ALERT
- question: Has a new persistent task been created that masquerades as a legitimate
    task?
  context: To blend in, adversaries may create tasks with names that are misspellings
    of legitimate tasks (e.g., 'Microsft Update'). This question detects such masquerading
    by alerting on new persistent tasks whose names are very similar to known good
    tasks but are not an exact match, or use a legitimate name but execute from a
    non-standard path.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, with baselines
    established per server role and workstation image.
  range: last 90 days
  queries:
  - SEARCH new_persistent_tasks | IF task_name is misspelled version of legitimate_task_name
    OR task_name is legitimate but executable_path is wrong, ALERT
- question: Does a new persistent task have a name or path that is statistically
    anomalous?
  context: This question uses string distance (Levenshtein) and entropy to find masquerading
    tasks. A task with a name very close to a known good one but with a different
    path is highly suspicious. Additionally, a task name with high entropy suggests
    randomization, a common tactic for malware.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, with baselines
    established per server role and workstation image.
  range: last 90 days
  queries:
  - FOR new_persistent_task | CALCULATE levenshtein_distance of name/path to baseline
    | CALCULATE entropy of name | IF distance is low but path is different OR entropy
    is high, ALERT
- question: Does a new persistent task fall outside the established clusters of normal
    tasks?
  context: This question uses clustering (e.g., K-Means) to group all scheduled tasks
    based on their features. Legitimate tasks will form large, dense clusters. A new
    task that does not belong to any existing cluster, or forms a new, small cluster,
    is a significant outlier that warrants investigation.
  answer_sources: Windows Event ID 4698. All Windows Endpoints and Servers, with baselines
    established per server role and workstation image.
  range: last 90 days
  queries:
  - CLUSTER all tasks by features (name_ngrams, path, trigger) | FOR new_task | IF
    task is not in existing_cluster or is in new_small_cluster, ALERT
- question: Has a scheduled task been modified to remove its Security Descriptor?
  context: A known defense evasion technique involves deleting the Security Descriptor
    (SD) from a task's XML definition. This makes the task invisible to standard tools
    like the Task Scheduler GUI and `schtasks /query`. This question generates a high-severity
    alert when this specific modification is detected.
  answer_sources: Windows Event ID 4701, Windows Event ID 4698. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - SEARCH task_update_events (4701) or task_creation_events (4698) | IF event_xml_data
    shows '<SecurityDescriptor>' field is null or removed, ALERT
- question: Is a task with a null Security Descriptor masquerading as a legitimate
    task?
  context: This question combines the detection of a null Security Descriptor with
    name analysis. An adversary might try to hide a malicious task by giving it a
    name very similar to a legitimate one. This query flags tasks that have a null
    SD and also have a name that appears to be a close variation of a known good task
    name.
  answer_sources: Windows Event ID 4701, Windows Event ID 4698. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - SEARCH tasks with null_Security_Descriptor | ANALYZE task_name for n-gram similarity
    to legitimate task names | IF name is very similar to legitimate_name, ALERT
- question: Does the event sequence for a task indicate tampering, such as removing
    the Security Descriptor?
  context: Administrative actions on tasks follow a normal workflow. An unusual sequence,
    such as creating a task and then immediately updating it to remove its Security
    Descriptor, is highly indicative of tampering. This question uses a sequence model
    to detect these anomalous workflows.
  answer_sources: Windows Event ID 4701, Windows Event ID 4698. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - MODEL event sequences for tasks (Create, Disable, Update, Enable) | FOR new_sequence
    | IF sequence matches anomalous pattern (e.g., Create -> Update(Remove SD)), ALERT
- question: Is a high-privilege scheduled task executing a file associated with a
    known exploit tool?
  context: Adversaries may use a scheduled task to execute a known privilege escalation
    tool with SYSTEM privileges. This question identifies this by monitoring for tasks
    created to run as SYSTEM, and then checking the file hash of the executed binary
    against a threat intelligence database of malware and exploit tools.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers, especially multi-user systems like terminal servers.
  range: last 90 days
  queries:
  - SEARCH task_creation_events (4698) where user is SYSTEM | ON execution (4688),
    get file_hash | LOOKUP file_hash in malware_exploit_db | ALERT on match
- question: Is a new SYSTEM-level task executing a binary that is not on the established
    baseline for the environment?
  context: Most legitimate tasks that run as SYSTEM are predictable and part of the
    OS or legitimate software. This question establishes a baseline of these legitimate
    executables. Any new task running as SYSTEM that executes a binary not on this
    list, especially if it's unsigned or in a temp folder, is a high-confidence anomaly.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers, especially multi-user systems like terminal servers.
  range: last 90 days
  queries:
  - BUILD baseline of legitimate executables run as SYSTEM by tasks | FOR new_task
    running as SYSTEM | IF executable not in baseline, ALERT
- question: Does a machine learning model assign a high risk score to a newly created
    task?
  context: This question uses a supervised model to proactively score the risk of
    a scheduled task based on its properties. Features like 'runs as SYSTEM', 'is
    unsigned', and 'path rarity' are fed into the model. A high risk score indicates
    the task has multiple suspicious attributes and requires analyst review.
  answer_sources: Windows Event ID 4698, Windows Event ID 4688. All Windows Endpoints
    and Servers, especially multi-user systems like terminal servers.
  range: last 90 days
  queries:
  - TRAIN risk_model on task_features (runs_as_system, is_signed, path_rarity) | FOR
    new_task | CALCULATE risk_score | IF risk_score is high, ALERT
- question: Is a scheduled task being created with 'highest privileges' to perform
    a known UAC bypass?
  context: Adversaries use the 'Run with highest privileges' setting on a scheduled
    task to bypass User Account Control (UAC). This question detects this by looking
    for the creation of such a task, and correlating it with an action that invokes
    a process commonly used in UAC bypass techniques, like fodhelper.exe or eventvwr.exe.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    (e.g., Windows 10, Windows 11).
  range: last 90 days
  queries:
  - SEARCH for task_creation with 'HighestAvailable=true' OR schtasks.exe with '/RL
    HIGHEST' | IF task_action targets known UAC_bypass_binary (fodhelper.exe, etc.),
    ALERT
- question: Is there a statistical anomaly in the usage of the 'Run with highest
    privileges' setting?
  context: Most legitimate tasks do not require the 'highest privileges' setting.
    Therefore, its use is inherently interesting. This question establishes a baseline
    for its usage and flags any sudden increase or its use by a non-standard user
    or with a rare process as a statistical anomaly worth investigating.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    (e.g., Windows 10, Windows 11).
  range: last 90 days
  queries:
  - BASELINE usage of 'HighestAvailable=true' | ALERT on sudden increase in usage
    OR use by non-standard_user
- question: Is a low-privilege process creating a high-privilege scheduled task?
  context: A key indicator of privilege escalation is a process with standard user
    rights creating a task that will run with elevated (SYSTEM) rights. This question
    uses a sequence model to detect this anomalous transition from a low-integrity
    to a high-integrity context, which often signals an exploit.
  answer_sources: Windows Event ID 4688, Windows Event ID 4698. All Windows Endpoints
    (e.g., Windows 10, Windows 11).
  range: last 90 days
  queries:
  - MODEL process_creation sequences | DETECT anomalous sequence where low_privilege_process
    creates high_privilege_task | ALERT on detection
- question: Has a standard user account created a scheduled task that runs as a high-privilege
    account?
  context: This is a critical detection for privilege escalation. A standard user
    should never be able to create a task that runs as SYSTEM or Administrator. This
    is a deterministic rule; if an event occurs where the creating user is non-administrative
    but the task is configured to run as SYSTEM (S-1-5-18), it indicates a successful
    exploit of a vulnerability.
  answer_sources: Windows Event ID 4698, Windows Event ID 4701. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - SEARCH task_creation/update_events (4698, 4701) | WHERE creating_user is standard_user
    AND task_runas_user is SYSTEM/Administrator | ALERT with high severity
- question: Has any event been found where a standard user created a SYSTEM task?
  context: This is a verification question based on a deterministic security principle.
    In a properly configured and secure environment, a query for tasks created by
    a standard user but set to run as SYSTEM should return zero results. Any result
    is a high-confidence indicator of compromise and a serious security failure.
  answer_sources: Windows Event ID 4698, Windows Event ID 4701. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - SEARCH task_creation_events | WHERE creating_user_privilege == 'standard' AND
    task_runas_privilege == 'system' | EXPECT 0 results; any result is an IOC
- question: Can a machine learning model automatically identify the malicious tuple
    of a standard user creating a SYSTEM task?
  context: While a symbolic rule is best for this specific case, a machine learning
    classifier can be trained to recognize privilege levels of the creator and the
    task. The model would learn that the combination of a 'standard' creator and a
    'system' task is malicious and can automatically assign a maximum risk score,
    integrating this logic into a broader risk-based alerting framework.
  answer_sources: Windows Event ID 4698, Windows Event ID 4701. All Windows Endpoints
    and Servers.
  range: last 90 days
  queries:
  - TRAIN classification_model on (creating_user_privilege, task_runas_privilege)
    tuples | IF model classifies tuple as ('standard', 'system'), assign max_risk_score
- question: Has a 'hit-and-run' privilege escalation occurred via a temporary scheduled
    task?
  context: This question identifies a specific attack chain where a standard user process
    creates a high-privilege task and then quickly deletes it to cover its tracks.
    It requires correlating multiple events in a short sequence: a user process creation,
    followed by a SYSTEM task creation from that user's session, and finally the
    deletion of that same task.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - CORRELATE event sequence on host: [Process A created by standard user] -> [Task
    B created by Process A's session to run as SYSTEM] -> [Task B deleted] | IF sequence
    occurs within 2 minutes, ALERT
- question: Was a new SYSTEM-level task created immediately after a suspicious user-level
    process execution?
  context: This question looks for a statistical link between two events to imply
    causality. By analyzing the time difference between a suspicious user-level event
    (like PowerShell downloading a file) and the creation of a SYSTEM task, a very
    short delay suggests the former triggered the latter as part of an exploit chain.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - FOR each suspicious_user_process_event | FIND next SYSTEM_task_creation_event
    on same host | CALCULATE time_delta | IF time_delta < 30 seconds, ALERT
- question: Can a graph-based analysis detect a privilege escalation path involving
    a temporary task?
  context: This question models system activity as a graph where processes, users,
    and tasks are nodes. An attack path, such as a user process creating and then
    deleting a short-lived SYSTEM task, can be automatically detected by graph algorithms
    that identify and score high-risk paths between low-privilege and high-privilege
    nodes.
  answer_sources: Windows Event ID 4698, Windows Event ID 4702, Windows Event ID 4688.
    All Windows Endpoints and Servers.
  range: last 90 days
  queries:
  - BUILD graph of (user -> process -> task) relationships | IDENTIFY paths where
    user_node is 'standard' and task_node is 'SYSTEM' and task_node has 'short-lived'
    property | SCORE and ALERT on high-risk paths