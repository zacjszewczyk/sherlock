name: T1542.002: Component Firmware
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversaries who have modified component firmware to establish persistence or evade defenses. It provides investigative steps to detect this activity by analyzing network traffic for signs of command and control (C2) communication, such as connections to known malicious infrastructure, Domain Generation Algorithm (DGA) patterns, and other statistical anomalies. It also details how to monitor for the anomalous execution of firmware update utilities, identify network traffic without a corresponding host process, track recurring hardware errors that persist after OS re-imaging, and detect attempts to disable or interfere with security tools.
type: technique
related:
  - TA0003: Persistence
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any internal hosts communicating with known malicious C2 infrastructure associated with firmware implants?
    context: This question aims to identify high-confidence indicators of compromise. Firmware implants like LoJax or CosmicStrand often use hardcoded C2 domains and IPs. By comparing outbound network and DNS logs against a specialized threat intelligence feed for these threats, we can detect active implants with high fidelity. A match is a strong signal of a firmware compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points (e.g., firewalls, internet gateways), DNS resolvers, network security monitoring sensor grid
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Join network and DNS logs with a threat intel feed of firmware C2 IOCs
          IOC_FEED = load_firmware_c2_iocs()
          MATCHED_CONNS = SEARCH zeek_conn_logs WHERE destination_ip IN IOC_FEED.ips
          MATCHED_DNS = SEARCH zeek_dns_logs WHERE query_domain IN IOC_FEED.domains
          ALERT if count(MATCHED_CONNS) > 0 OR count(MATCHED_DNS) > 0
  - question: Are any hosts exhibiting DNS query patterns indicative of Domain Generation Algorithms (DGA)?
    context: Firmware implants may use DGAs to dynamically generate domain names to find C2 servers, evading blocklists. These domains often appear random and have high character entropy. By calculating the Shannon entropy of DNS queries and flagging statistical outliers, we can uncover hosts likely running DGA-based malware.
    answer_sources:
      - Zeek dns.log
      - DNS resolvers, network security monitoring sensor grid
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Calculate rolling average of DNS query entropy per host and flag outliers
          DNS_LOGS = SEARCH zeek_dns_logs for last 1 hour
          AGGREGATE avg(shannon_entropy(query_name)) as avg_entropy BY host
          GLOBAL_THRESHOLD = percentile(all_host_avg_entropy, 99)
          ALERT on hosts WHERE avg_entropy > GLOBAL_THRESHOLD OR avg_entropy > 4.0
  - question: Do any hosts show anomalous network behavior patterns that could indicate implant activity?
    context: A firmware implant's network activity may deviate from a host's normal behavior. A multivariate anomaly detection model can learn a host's baseline network profile (e.g., data volume, protocols, connection counts) and flag significant deviations that lack a legitimate business reason, potentially indicating an implant's activation or C2 communication.
    answer_sources:
      - Zeek conn.log
      - Network egress points (e.g., firewalls, internet gateways), DNS resolvers, network security monitoring sensor grid
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Apply a pre-trained time-series anomaly detection model to host network features
          FOR each host:
            FEATURES = extract_features(zeek_conn_logs, ['total_bytes', 'unique_dst_ips', 'conn_duration'])
            ANOMALY_SCORE = model.predict(FEATURES)
            ALERT if ANOMALY_SCORE > threshold AND not has_known_business_reason()
  - question: Are any firmware update utilities being executed in an anomalous context?
    context: Adversaries may use legitimate firmware flashing tools to install malicious firmware. This question seeks to identify such abuse by looking for anomalous execution context, such as the use of risky command-line flags (e.g., forcing an update), execution from an unusual directory, or being launched by an unexpected parent process (e.g., a web browser instead of an admin tool).
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Critical servers (e.g., domain controllers, database servers), executive workstations, administrator workstations, endpoint detection and response (EDR) logs
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Alert on suspicious firmware utility executions
          FLASH_TOOLS = ['fwupd.exe', 'AFUWIN.exe', ...]
          RISKY_FLAGS = ['/force', '/p /b /n /k', ...]
          NORMAL_PARENTS = ['explorer.exe', 'services.exe', 'cmd.exe', ...]
          SEARCH windows_events(ID=4688) WHERE ProcessName IN FLASH_TOOLS AND (CommandLine CONTAINS RISKY_FLAGS OR ParentProcessName NOT IN NORMAL_PARENTS)
  - question: Are firmware utilities being launched by historically rare parent processes?
    context: Legitimate use of firmware flashing utilities typically follows predictable execution chains. By building a historical baseline of which processes normally launch these utilities, we can identify anomalies. An execution by a parent process that is statistically rare (e.g., in the bottom 5% of historical frequency) is highly suspicious and warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Critical servers (e.g., domain controllers, database servers), executive workstations, administrator workstations, endpoint detection and response (EDR) logs
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag firmware utility executions from rare parent processes
          PARENT_FREQ = build_frequency_table(ProcessName, ParentProcessName)
          SEARCH windows_events(ID=4688) WHERE ProcessName IN FLASH_TOOLS
          FOR each event:
            ALERT if PARENT_FREQ[event.ParentProcessName] < 5th_percentile
  - question: Can we predictively identify malicious firmware utility executions using a machine learning model?
    context: This question moves from single-indicator rules to a holistic, model-based approach. By training a classification model on a rich set of features (process name, parent, command-line entropy, user context, etc.), we can create a more robust and nuanced detector for malicious activity that might evade simpler rules.
    answer_sources:
      - Windows Event ID 4688
      - Critical servers (e.g., domain controllers, database servers), executive workstations, administrator workstations, endpoint detection and response (EDR) logs
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Classify new firmware utility executions as suspicious or benign
          FOR each new event(ID=4688) WHERE ProcessName IN FLASH_TOOLS:
            FEATURES = extract_features(event)
            PREDICTION = classification_model.predict(FEATURES)
            ALERT if PREDICTION == 'suspicious'
  - question: Is there outbound network traffic from a host that has no corresponding process creating the connection?
    context: Firmware-level implants can initiate network connections directly from hardware, bypassing the host operating system's kernel. This results in "ghost" traffic: network flow logs will show the connection, but endpoint logs (like Windows Filtering Platform) will have no record of a process creating it. Finding such discrepancies is a strong indicator of a low-level implant.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network egress points, endpoint Windows Filtering Platform (WFP) logs on all servers and workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Find network connections that do not have a corresponding host-level event
          NETWORK_CONNS = SEARCH zeek_conn_logs within last 5 minutes
          HOST_CONNS = SEARCH windows_events(ID=5156) within last 5 minutes
          UNATTRIBUTED = LEFT_JOIN NETWORK_CONNS to HOST_CONNS on (src_ip, dst_ip, dst_port, timestamp +/- 2s)
          ALERT on records in UNATTRIBUTED where HOST_CONNS.ProcessID is NULL
  - question: Are any hosts showing a significant increase in the ratio of unattributed network traffic?
    context: While some unattributed traffic can be benign noise, a sudden increase for a specific host is anomalous. By tracking the daily ratio of unattributed-to-attributed connections for each host, we can establish a baseline. An alert on a host whose ratio dramatically exceeds its own historical average can signal the activation of a firmware implant.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network egress points, endpoint Windows Filtering Platform (WFP) logs on all servers and workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag hosts where the ratio of unattributed traffic spikes
          FOR each host:
            DAILY_RATIO = count(unattributed_conns) / count(attributed_conns)
            ROLLING_AVG_30D = calculate_rolling_average(DAILY_RATIO, 30 days)
            ROLLING_STDDEV_30D = calculate_rolling_stddev(DAILY_RATIO, 30 days)
            ALERT if DAILY_RATIO > ROLLING_AVG_30D + (3 * ROLLING_STDDEV_30D)
  - question: Are there unexpected spikes in the volume of unattributed network connections on any host?
    context: This question uses time-series forecasting to model the expected rhythm of unattributed network connections for each host. A forecasting model (like Prophet) can predict the normal hourly count. When the actual count of unattributed connections falls far outside the model's prediction (e.g., outside a 99% confidence interval), it signals a statistically significant anomaly that could be a firmware implant's C2 activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - Network egress points, endpoint Windows Filtering Platform (WFP) logs on all servers and workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Use a forecasting model to detect anomalous counts of unattributed connections
          FOR each host:
            MODEL = train_forecasting_model(historical_unattributed_counts)
            PREDICTION, CONFIDENCE_INTERVAL = MODEL.predict(current_hour)
            ACTUAL_COUNT = count_unattributed_connections(current_hour)
            ALERT if ACTUAL_COUNT is not within CONFIDENCE_INTERVAL
  - question: Are any hosts generating critical hardware errors that persist immediately after an OS re-image?
    context: A common remediation for a compromised host is to re-image the OS. However, if the compromise is in the firmware, the malicious behavior and resulting instability may persist. This question looks for the powerful indicator of a host that continues to log many critical disk or driver errors shortly after being re-imaged, suggesting the problem lies beneath the OS.
    answer_sources:
      - Windows Event ID 7000
      - Windows Event ID 7026
      - Windows Event ID 7
      - Windows Event ID 11
      - Windows Event ID 55
      - Endpoint and server system event logs, IT service management/ticketing system for re-imaging history, asset management database
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Alert on high error counts for recently re-imaged hosts
          ERROR_EVENTS = SEARCH windows_events(ID IN [7, 11, 55, 7000, 7026]) in last 24 hours
          AGGREGATE count(*) as error_count BY host
          FOR each host where error_count > 10:
            REIMAGE_DATE = query_asset_db(host)
            if (today - REIMAGE_DATE) < 7 days:
              ESCALATE_ALERT
  - question: Are any hosts generating hardware errors at a rate that is anomalous for their specific hardware model?
    context: Different hardware models have different reliability profiles and baseline error rates. A simple enterprise-wide threshold for errors can be noisy. This approach creates a more accurate baseline by comparing a host's error rate only to other hosts of the same model. A host that is an outlier within its peer group is a much stronger candidate for investigation.
    answer_sources:
      - Windows Event ID 7000
      - Windows Event ID 7026
      - Windows Event ID 7
      - Windows Event ID 11
      - Windows Event ID 55
      - Endpoint and server system event logs, IT service management/ticketing system for re-imaging history, asset management database
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag hosts with error rates exceeding the 98th percentile for their hardware model
          FOR each hardware_model:
            MODEL_THRESHOLD = calculate_percentile(daily_error_counts, 98)
            FOR each host in hardware_model:
              ALERT if host.daily_error_count > MODEL_THRESHOLD
  - question: Do any hosts remain in a cluster of 'unhealthy' machines even after being re-imaged?
    context: This question uses unsupervised machine learning to group hosts based on their error profiles. This can automatically identify clusters of 'unhealthy' hosts. The key insight is to track hosts over time. If a host is re-imaged but then reappears in the same unhealthy cluster, it strongly implies the root cause is at the hardware or firmware level, not the OS.
    answer_sources:
      - Windows Event ID 7
      - Windows Event ID 11
      - Windows Event ID 55
      - Endpoint and server system event logs, IT service management/ticketing system for re-imaging history, asset management database
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Use clustering to find persistently unhealthy hosts
          FEATURES = create_feature_vectors_from_error_counts()
          CLUSTERS = DBSCAN(FEATURES)
          IDENTIFY unhealthy_cluster
          FOR each host in unhealthy_cluster:
            if host was re-imaged and is now back in unhealthy_cluster:
              ALERT
  - question: Is any network traffic matching known signatures or cryptographic fingerprints of firmware implant C2 protocols?
    context: This question focuses on signature-based detection within network traffic. By deploying rules (in Zeek or Suricata) that look for specific byte patterns, protocol anomalies, or known TLS fingerprints (JA3/JA3S hashes) associated with firmware implants, we can catch known threats as they communicate over the network.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek files.log
      - Zeek weird.log
      - Zeek ssl.log
      - Network taps at key aggregation points, network security monitoring (NSM) sensor grid, internet gateways
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Match traffic against known firmware implant C2 signatures
          ALERT on suricata_alerts with signature matching 'firmware_implant_c2'
          JA3_IOCS = load_firmware_ja3_hashes()
          ALERT on zeek_ssl_logs where ja3 or ja3s in JA3_IOCS
          ALERT on zeek_weird_logs where name contains 'protocol_anomaly'
  - question: Are any hosts using DNS in a manner suggestive of C2 or data exfiltration?
    context: Adversaries can abuse the DNS protocol for C2 by hiding data in different record types. Legitimate traffic is dominated by A/AAAA (address) queries. A host making an unusually high number of TXT, NULL, or CNAME queries relative to its A/AAAA queries may be using DNS for covert communication, a technique sometimes used by firmware implants to evade network firewalls.
    answer_sources:
      - Zeek dns.log
      - DNS resolvers, network security monitoring sensor grid
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag hosts with an anomalous ratio of DNS query types
          DNS_LOGS = SEARCH zeek_dns_logs for last 1 hour
          AGGREGATE count(qtype) BY host
          CALCULATE ratio = (count(TXT)+count(NULL)+count(CNAME)) / (count(A)+count(AAAA))
          THRESHOLD = percentile(all_host_ratios, 99)
          ALERT on hosts where ratio > THRESHOLD
  - question: Are there any structurally anomalous DNS or ICMP packets that could indicate a covert channel?
    context: This question uses machine learning to find unknown covert channels that lack a clear signature. An autoencoder model can be trained on the raw byte payloads of normal DNS and ICMP packets. When live traffic is fed through the model, any packet that the model cannot reconstruct accurately (i.e., has a high reconstruction error) is structurally anomalous and could be carrying a malicious payload.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network taps at key aggregation points, network security monitoring (NSM) sensor grid, internet gateways
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Use a deep learning model to find anomalous packet payloads
          MODEL = load_trained_autoencoder_model()
          FOR each dns_packet, icmp_packet:
            RECONSTRUCTION_ERROR = MODEL.evaluate(packet.payload)
            ALERT if RECONSTRUCTION_ERROR > threshold
  - question: Are security tools being disabled immediately before a firmware utility is run?
    context: To modify firmware, an adversary may first need to disable endpoint security products (AV, EDR) that could block the action. This question looks for a classic attack sequence: a security service being stopped, followed within minutes on the same host by the execution of a firmware flashing utility or the installation of a suspicious new service. This correlation is a strong red flag.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Endpoint and server security and system event logs, SIEM correlation engine, EDR platform alerts
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Correlate security agent stop with suspicious follow-on activity
          SEARCH for event(ID=7036, ServiceName='security_agent', State='Stopped') as A
          WITHIN 5 minutes on same host:
            SEARCH for event(ID=4688, ProcessName IN FLASH_TOOLS) as B
            OR SEARCH for event(ID=4697) as C
          ALERT if A is followed by B or C
  - question: Are security agents being stopped for an abnormally long duration during a firmware utility execution?
    context: Even legitimate updates can sometimes stop a security service briefly. This analytic distinguishes malicious activity by focusing on duration. It establishes a baseline for how long a security service is normally stopped during approved update cycles. If a service stop event is followed by a firmware utility execution, and the service remains stopped for a duration far exceeding the normal baseline, it suggests foul play.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Endpoint and server security and system event logs, SIEM correlation engine, EDR platform alerts
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag long security service outages that co-occur with firmware utility execution
          NORMAL_DOWNTIME = percentile(security_agent_downtimes, 95)
          SEARCH for event(ID=7036, State='Stopped') as A
          FOLLOWED BY event(ID=4688, ProcessName IN FLASH_TOOLS) as B
          FOLLOWED BY event(ID=7036, State='Running') as C
          DOWNTIME = C.timestamp - A.timestamp
          ALERT if DOWNTIME > NORMAL_DOWNTIME
  - question: Are hosts exhibiting a highly improbable sequence of security-related events?
    context: This question models the "grammar" of normal host activity using a Hidden Markov Model (HMM). The model learns the normal transition probabilities between states like 'Nominal Operation', 'Security Service Disabled', and 'Suspicious Utility Executed'. An observed sequence of events that the model deems to have a very low probability is flagged as a potential multi-stage attack that deviates from normal behavior.
    answer_sources:
      - Windows Event ID 7036
      - Windows Event ID 4688
      - Windows Event ID 4697
      - Endpoint and server security and system event logs, SIEM correlation engine, EDR platform alerts
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Use an HMM to find low-probability event sequences
          HMM_MODEL = load_trained_hmm()
          EVENT_SEQUENCE = get_recent_events_for_host()
          PROBABILITY = HMM_MODEL.score(EVENT_SEQUENCE)
          ALERT if PROBABILITY < low_probability_threshold
  - question: Are security scanners crashing in conjunction with disk corruption events?
    context: A firmware implant that controls the storage controller can interfere with security tools that try to scan the disk. This question looks for this specific interference pattern: an application error for a known security scanner (like the Windows Defender engine or chkdsk) that is preceded by disk corruption errors on the same host, suggesting the implant is causing errors to prevent a successful scan.
    answer_sources:
      - Windows Event ID 55
      - Windows Event ID 137
      - Windows Event ID 1001
      - Endpoint and server system and application event logs, hosts with high-value data, EDR/AV management consoles
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Correlate security scanner crashes with preceding disk errors
          SEARCH for event(ID IN [55, 137]) as A
          WITHIN 1 hour on same host:
            SEARCH for event(ID=1001, ProcessName IN ['MsMpEng.exe', 'chkdsk.exe']) as B
          ALERT if A is followed by B
  - question: Are any hosts consistently failing to complete scheduled security scans?
    context: While a single failed scan might not be significant, a pattern of failures on a specific host is. This analytic tracks the scan completion rates for all endpoints from a central EDR or AV console. It flags hosts whose completion rate falls significantly below the average for their peer group (same hardware/OS), indicating a persistent, targeted issue that might be caused by firmware-level interference.
    answer_sources:
      - Windows Event ID 1001
      - Endpoint and server system and application event logs, hosts with high-value data, EDR/AV management consoles
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Flag hosts with anomalously low security scan completion rates
          FOR each hardware_os_group:
            GROUP_AVG = avg(scan_completion_rate)
            GROUP_STDDEV = stddev(scan_completion_rate)
            FOR each host in group:
              ALERT if host.rate < GROUP_AVG - (3 * GROUP_STDDEV)
  - question: Are security scans failing on hosts that are otherwise predicted to be healthy?
    context: This question uses a model to predict the likelihood of a scan failure based on benign factors like host age and hardware model. The goal is to find scan failures that the model *doesn't* expect. A scan failure on a host that the model predicted had a very low probability of failure suggests that an unmodeled, and therefore potentially malicious, factor is the cause.
    answer_sources:
      - Windows Event ID 1001
      - Endpoint and server system and application event logs, hosts with high-value data, EDR/AV management consoles
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Find scan failures that a predictive model did not expect
          MODEL = train_logistic_regression_model_for_scan_failure()
          FOR each host_with_failed_scan:
            FEATURES = get_host_features(host)
            PROBABILITY_OF_FAILURE = MODEL.predict_proba(FEATURES)
            if PROBABILITY_OF_FAILURE < 0.05:
              ALERT
  - question: Is any outbound traffic showing signs of covert channel techniques like DNS or ICMP tunneling?
    context: Firmware implants may use covert channels to exfiltrate data or receive commands, bypassing traditional firewalls. This question looks for specific artifacts of these techniques, such as DNS queries where the subdomain is a long, encoded string (data hidden in the query name) or ICMP echo packets with unusually large and consistent payloads.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network traffic captures at internet gateways, internal network core, and DMZ segments
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Detect specific covert channel artifacts
          SEARCH zeek_dns_logs WHERE is_hex_encoded(subdomain(query)) AND len(subdomain(query)) > 50
          SEARCH zeek_conn_logs WHERE proto == 'icmp' AND payload_size > 128
          ALERT on matches
  - question: Are any network connections exhibiting highly regular, low-jitter beaconing behavior?
    context: C2 communication from malware often involves regular "beacon" connections back to the C2 server. This activity is machine-generated and thus has very low "jitter" (variation in the time between connections). This question analyzes the time deltas between connections for each source-destination pair. A pair with highly periodic connections (e.g., standard deviation < 1 second) is a strong indicator of automated beaconing.
    answer_sources:
      - Zeek conn.log
      - Network traffic captures at internet gateways, internal network core, and DMZ segments
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Find connections with low jitter, indicating automated beaconing
          GROUP zeek_conn_logs by src_ip, dst_ip
          CALCULATE time_deltas between connections
          CALCULATE stddev(time_deltas) as jitter
          ALERT if jitter < 1.0 AND count(connections) > 10
  - question: Can we identify anomalous network sessions that could be covert C2 channels using unsupervised learning?
    context: This question uses an anomaly detection model like an isolation forest to find covert C2 channels that don't have a known signature or perfectly regular beaconing. By creating a feature vector for each network session (duration, bytes transferred, protocol, etc.), the model can learn what normal sessions look like and identify sessions that are strong statistical outliers, which are candidates for investigation.
    answer_sources:
      - Zeek conn.log
      - Network traffic captures at internet gateways, internal network core, and DMZ segments
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: |
          // Use an isolation forest to find anomalous network sessions
          FEATURES = extract_features_from(zeek_conn_log)
          MODEL = train_isolation_forest(FEATURES)
          ANOMALY_SCORES = MODEL.predict(live_features)
          ALERT on sessions with high anomaly scores