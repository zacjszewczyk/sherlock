name: T1625.001: System Runtime API Hijacking
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary is maintaining persistence on mobile devices by hijacking system runtime APIs. Indicators of this technique include structured log events from MDM or MTD platforms that show compliance check failures related to OS integrity or file hash mismatches, suggesting core system files have been tampered with. Further indicators involve observing concurrent network anomalies from a single mobile device, such as connections to low-reputation endpoints, periodic beaconing, high entropy in DNS queries, and the use of rare JA3 hashes, all of which can point to malicious command and control communication.
type: technique
related:
- TA0028: Persistence
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a device failed a compliance check due to an OS integrity or file hash mismatch?
  context: This question seeks to identify individual devices with strong evidence of file system tampering. A failure in OS integrity or a mismatch in a critical file's hash, as reported by Mobile Device Management (MDM) or Mobile Threat Defense (MTD) systems, is a high-fidelity indicator that a core component of the operating system has been modified. This could be an attempt by malware to hijack system runtime APIs for persistence. The prescribed action is to create a high-severity alert, enrich it with threat intelligence on the file hash and asset information for the device, and escalate for immediate device isolation if the file is confirmed to be malicious.
  answer_sources:
  - MDM event logs
  - MTD alert logs
  - Device Asset Inventory
  - Centralized log aggregator (SIEM) containing ingested MDM/MTD platform logs. The organization's master device asset inventory database. The population of corporate-managed Android devices.
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH MDM/MTD logs where (compliance_status = 'failed') AND (failure_reason = 'os_integrity_mismatch' OR failure_reason = 'file_hash_mismatch')
      ON_MATCH:
        EXTRACT device_id, file_path, file_hash
        ENRICH by querying threat intelligence API with file_hash
        ENRICH by querying asset inventory with device_id
        IF threat_intel_hit:
          ESCALATE for device isolation
- question: Is there a statistically significant increase in file integrity failures for a specific device model or OS version?
  context: This question aims to detect widespread campaigns or issues affecting a particular subset of devices, rather than just a single compromised device. By aggregating file integrity failure events by device model and OS version and comparing them to a historical baseline, we can identify anomalous spikes. An alert is triggered if the current failure count for any group exceeds its historical average by a significant margin (e.g., more than three standard deviations). This statistical approach helps to surface slower, broader attacks or vulnerabilities that might otherwise be lost in the noise of individual alerts.
  answer_sources:
  - MDM event logs
  - MTD alert logs
  - Device Asset Inventory
  - Centralized log aggregator (SIEM) containing ingested MDM/MTD platform logs. The organization's master device asset inventory database. The population of corporate-managed Android devices.
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      AGGREGATE hourly counts of file integrity failures, grouped by device_model, os_version
      CALCULATE 30-day rolling baseline (mean, stddev) for each group
      FOR each group:
        IF current_hour_count > (mean + 3 * stddev):
          GENERATE medium-severity alert for anomalous increase in a specific device group
- question: Is the overall fleet-wide rate of file integrity failures anomalously high compared to forecasted trends?
  context: This question uses a more sophisticated time-series forecasting model to detect subtle, anomalous increases in device tampering across the entire fleet. This method accounts for normal periodic fluctuations in failure rates (e.g., daily or weekly seasonality). An alert is triggered if the actual number of observed failures significantly exceeds the model's predicted upper confidence bound for a sustained period. This is valuable for detecting stealthy, large-scale events that might not be confined to a specific device model and do not cause a sudden, massive spike in alerts.
  answer_sources:
  - MDM event logs
  - MTD alert logs
  - Device Asset Inventory
  - Centralized log aggregator (SIEM) containing ingested MDM/MTD platform logs. The organization's master device asset inventory database. The population of corporate-managed Android devices.
  range: Last 90 days
  queries:
  - searchtechnology: Pseudocode
    query: |
      TRAIN time-series model (e.g., SARIMA) on historical hourly counts of all file integrity failures
      PREDICT next hour's expected count and 99% confidence interval
      IF actual_count > predicted_upper_bound for 2 consecutive hours:
        GENERATE medium-severity alert for anomalous fleet-wide increase
- question: Is a mobile device communicating with known malicious IP addresses or domains?
  context: This question focuses on identifying high-confidence network indicators of compromise. Hijacked APIs are frequently used by malware to establish command and control (C2) channels. This analytic action involves creating a rule to cross-reference network traffic from mobile devices (both destination IPs and DNS queries) against a high-confidence threat intelligence feed. A match is a strong signal of compromise, triggering an immediate workflow to correlate the offending internal IP with a specific device and user via DHCP and VPN logs to enable rapid investigation.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Threat Intelligence Feeds
  - Network traffic sensor grids (e.g., Zeek clusters) monitoring all corporate Wi-Fi and guest Wi-Fi access points, VPN termination points, and internet egress gateways.
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      SEARCH conn.log and dns.log from mobile_device_ip_ranges
      MATCH id.resp_h or query against threat_intelligence_feed
      ON_MATCH:
        EXTRACT id.orig_h
        CORRELATE id.orig_h with DHCP/VPN logs to find device_id and user
        GENERATE high-severity alert
- question: Is a mobile device exhibiting signs of algorithmic C2 communication, such as high DNS entropy and regular network beaconing?
  context: This question seeks to identify behavioral patterns in network traffic that are characteristic of automated malware activity, without relying on known malicious signatures. The analytic combines two powerful indicators within a 15-minute window: 1) High Shannon entropy in DNS queries, which is common for Domain Generation Algorithms (DGAs), and 2) Highly periodic, regular outbound connections (beaconing), identified by a low standard deviation of time between connections to a single destination. A device exhibiting both of these behaviors is highly suspect, as this combination is a classic sign of C2 communication.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Threat Intelligence Feeds
  - Network traffic sensor grids (e.g., Zeek clusters) monitoring all corporate Wi-Fi and guest Wi-Fi access points, VPN termination points, and internet egress gateways.
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      FOR each mobile_source_ip in 15-minute windows:
        CALCULATE shannon_entropy of DNS queries
        FOR each destination_ip:
          CALCULATE stddev of connection inter-arrival_times
        IF shannon_entropy > 98th_percentile_fleet AND any connection_stddev < 2nd_percentile_fleet:
          GENERATE medium-severity alert for beaconing and DGA-like activity
- question: Is a mobile device generating network connections that are anomalous compared to a learned baseline of normal behavior?
  context: This question leverages unsupervised machine learning to detect novel or unusual network behaviors. A model, such as an Isolation Forest, is trained on a baseline of normal connection data, using features like protocol, port, data volume, and the TLS client fingerprint (JA3 hash). In real-time, every new connection is scored for its anomaly level. An alert is triggered if a single device produces a burst of connections that the model flags as anomalous, exceeding a dynamically determined threshold. This approach is effective at catching previously unseen threats or C2 techniques that do not conform to predefined rules.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - Threat Intelligence Feeds
  - Network traffic sensor grids (e.g., Zeek clusters) monitoring all corporate Wi-Fi and guest Wi-Fi access points, VPN termination points, and internet egress gateways.
  range: Last 90 days
  queries:
  - search_technology: Pseudocode
    query: |
      TRAIN Isolation Forest model on baseline of connection vectors (proto, port, bytes, ja3, etc.)
      SCORE new connections in real-time
      COUNT anomalous scores per device in 5-minute windows
      IF anomaly_count > 99th_percentile of baseline_per_device_anomaly_rate:
        GENERATE medium-severity alert for anomalous connection activity