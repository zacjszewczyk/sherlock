name: T1059.004: Unix Shell
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps investigate if an adversary is leveraging Unix shell environments for command execution. It covers multiple scenarios, including the use of interactive SSH sessions followed by connections to C2 infrastructure, execution of remote payloads via the Windows Subsystem for Linux (WSL) using tools like curl or wget, spawning of shell processes from anomalous parents like Microsoft Office applications, post-compromise network scanning or beaconing, and the creation of malicious scripts in persistence locations like cron directories or user profiles.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are successful interactive SSH logins being followed by network connections to known malicious C2 infrastructure?
    context: This question seeks to identify a common attack pattern where an adversary gains interactive access to a host and immediately establishes a connection to their command-and-control (C2) server. Correlating a successful login with a subsequent connection to a destination on a high-confidence threat intelligence feed within a short time window (e.g., 5 minutes) is a strong indicator of compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - Zeek http.log
      - Zeek dns.log
      - DMZ Web Servers
      - Internal Linux Application Servers
      - SSH Jump Boxes
      - VPN Concentrators
      - Crown Jewel Asset Subnets
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each successful SSH login in ssh.log
            GET source_host and timestamp
            WITHIN 5 minutes after timestamp
              SEARCH conn.log, dns.log, http.log for outbound traffic from source_host
              IF destination_ip OR dns_query OR http_host IN threat_intel_feed
                ALERT
  - question: Following a successful SSH login, is the host exhibiting anomalous outbound network behavior, such as connecting to an unusual number of ports or destination IPs?
    context: This question aims to detect malicious activity like network scanning or C2 communication without relying on threat intelligence. By establishing a baseline of normal outbound connection patterns for each host, we can identify statistically significant deviations that occur after a login. An attacker scanning the network or using non-standard ports for C2 will likely trigger such an anomaly.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - DMZ Web Servers
      - Internal Linux Application Servers
      - SSH Jump Boxes
      - VPN Concentrators
      - Crown Jewel Asset Subnets
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE outbound connections per host over 30 days (port count, IP entropy)
          FOR each successful SSH login
            GET source_host
            MONITOR source_host for 1 hour
            CALCULATE distinct destination ports and IP entropy
            IF port_count > 95th_percentile_baseline OR ip_entropy > 3_std_dev_baseline
              ALERT
  - question: Is a host exhibiting an unusual spike in outbound data volume for a sustained period after a successful SSH login, potentially indicating data exfiltration?
    context: This question focuses on detecting data exfiltration. After gaining access, an adversary might stage and exfiltrate large amounts of data. A time-series forecasting model can predict the expected data flow for a host, and a significant, sustained deviation from this prediction following an SSH login is a strong indicator that data is being stolen.
    answer_sources:
      - Zeek conn.log
      - Zeek ssh.log
      - DMZ Web Servers
      - Internal Linux Application Servers
      - SSH Jump Boxes
      - VPN Concentrators
      - Crown Jewel Asset Subnets
      - Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN time-series model on outbound data volume per host
          FOR each successful SSH login
            GET source_host
            MONITOR source_host's outbound data volume
            IF observed_volume > model_prediction_interval for > 10 minutes
              ALERT
  - question: Is a Unix shell process being launched on a Windows host with command-line arguments that attempt to download and execute a remote payload?
    context: This question targets the common 'living off the land' technique where attackers use legitimate tools like `curl` or `wget` within a Windows Subsystem for Linux (WSL) environment. Patterns like 'curl ... | bash' download and execute malicious scripts directly in memory, often bypassing traditional disk-based antivirus scanning.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Developer Workstations
      - Administrator Workstations
      - Windows Servers with WSL enabled
      - Build and CI/CD Servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH process creation events
          WHERE process_name ends with 'wsl.exe' OR 'bash.exe'
          AND command_line matches regex 'curl .* | bash' OR 'wget .* | sh' OR 'bash -c .*base64'
          IF match
            ALERT
  - question: Are Unix shell processes on Windows being executed with unusually long or complex (high-entropy) command lines, suggesting obfuscation?
    context: Attackers often obfuscate their commands using methods like Base64 encoding to hide their intent from security products and analysts. These obfuscated commands are typically much longer and have higher character entropy (more random-looking) than normal commands. This question aims to find these statistical outliers as indicators of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Developer Workstations
      - Administrator Workstations
      - Windows Servers with WSL enabled
      - Build and CI/CD Servers
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE command line length and entropy for shell processes
          FOR each new shell process creation event
            CALCULATE command line length and entropy
            IF length > 98th_percentile_baseline OR entropy > 98th_percentile_baseline
              ALERT
  - question: Can we use a machine learning model to automatically classify Unix shell command lines on Windows as benign or malicious?
    context: This question proposes a proactive, machine learning-based approach to detection. By training a classification model on a labeled dataset of known benign and malicious commands, the system can learn the distinct features of each. This allows it to score new, unseen commands in real-time and alert on those that are predicted to be malicious with high confidence.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Developer Workstations
      - Administrator Workstations
      - Windows Servers with WSL enabled
      - Build and CI/CD Servers
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN classification model on labeled shell command data
          FOR each new shell process creation event
            EXTRACT features from command line
            SCORE command using model
            IF score > 0.9
              ALERT
  - question: Is a Unix shell process being spawned by an unusual parent process on a Windows host, such as an Office application or a web browser?
    context: Legitimate shell processes are typically launched by a predictable set of parent processes (e.g., explorer.exe, cmd.exe). When a shell is launched by an application like WINWORD.EXE or chrome.exe, it is a strong indicator of compromise, often resulting from a user opening a malicious document or clicking a malicious link. This question seeks to detect these anomalous parent-child relationships.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - User Workstations (Windows)
      - Virtual Desktop Infrastructure (VDI)
      - Microsoft Office and Web Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: |
          DEFINE allowlist of (parent_process, child_shell_process)
          SEARCH process creation events
          WHERE child_process is a shell
          AND (parent_process, child_process) NOT IN allowlist
          IF match
            ALERT
  - question: Are we observing statistically rare parent-child process relationships involving a Unix shell, which might indicate malicious activity?
    context: This is a data-driven alternative to a manual allowlist. By profiling all parent-child process pairs across the environment over time, we can establish a frequency distribution. A Unix shell being spawned by a parent that has rarely or never done so before is a statistical anomaly and highly suspicious. This approach helps find novel attack vectors that an explicit allowlist might miss.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations (Windows)
      - Virtual Desktop Infrastructure (VDI)
      - Microsoft Office and Web Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE frequency of all parent-child process pairs over 30 days
          FOR each new shell process creation event
            GET parent_process
            CHECK frequency of (parent_process, child_shell_process)
            IF frequency < 1st_percentile_baseline
              ALERT
  - question: Can we use unsupervised machine learning to automatically discover anomalous process execution chains that involve a Unix shell?
    context: This question explores using clustering algorithms like DBSCAN to group similar process creation events based on features like parent process, child process, and user context. Normal, everyday operations will form large, dense clusters. Malicious or anomalous activity, which deviates from these norms, will appear as small, isolated clusters or noise points, making them easier to identify for investigation.
    answer_sources:
      - Sysmon Event ID 1
      - User Workstations (Windows)
      - Virtual Desktop Infrastructure (VDI)
      - Microsoft Office and Web Servers
      - Terminal Servers
    range: last 90 days
    queries:
      - pseudocode: |
          COLLECT process creation events (parent, child, user)
          APPLY clustering algorithm (e.g., DBSCAN)
          INVESTIGATE small, isolated clusters containing shell processes
  - question: Is an anomalous SSH login (e.g., from an unexpected geographic location) being followed by suspicious DNS activity?
    context: This question links multiple suspicious events to increase detection confidence. An interactive SSH login from a country where the organization has no business presence is a red flag. If that login is immediately followed by the compromised host making DNS queries for dynamic DNS domains (commonly used by attackers for C2 infrastructure), it strongly suggests a compromise is in progress.
    answer_sources:
      - Zeek ssh.log
      - Zeek conn.log
      - Zeek dns.log
      - Critical Linux/Unix Servers
      - Network Egress Points
      - Authentication Servers
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each successful SSH login
            ENRICH source IP with GeoIP data
            IF source_country IS NOT IN business_presence_list
              MONITOR host for DNS queries to dynamic DNS domains
              IF match
                ALERT
  - question: Following an SSH login that is anomalous for a specific user (based on time or location), is the host initiating a large number of failed connection attempts, indicative of network scanning?
    context: This question aims to detect internal network reconnaissance. Attackers often scan the local network after compromising a host. By first identifying an anomalous login for a specific user (e.g., unusual time of day or source network) and then correlating it with a spike in connection attempts that receive no reply (a 'S0' connection state in Zeek), we can detect this scanning activity.
    answer_sources:
      - Zeek ssh.log
      - Zeek conn.log
      - Critical Linux/Unix Servers
      - Network Egress Points
      - Authentication Servers
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE login hours and source ASNs per user
          FOR each successful SSH login
            IF login_hour OR source_ASN is anomalous for user
              MONITOR host for Zeek 'S0' connection ratio
              IF 'S0' ratio spikes
                ALERT
  - question: Can we detect periodic, 'heartbeat' network traffic (beaconing) that begins after an anomalous SSH login?
    context: Command-and-control (C2) traffic is often periodic, as the implant 'beacons' or 'heartbeats' back to the C2 server on a regular schedule. This regularity is unnatural for human-generated traffic. Using a mathematical technique like a Fast Fourier Transform (FFT) on the timestamps of network connections can reveal this periodicity as a sharp peak, providing a powerful way to detect automated C2 communication.
    answer_sources:
      - Zeek ssh.log
      - Zeek conn.log
      - Critical Linux/Unix Servers
      - Network Egress Points
      - Authentication Servers
      - Internal Network Segments
    range: last 90 days
    queries:
      - pseudocode: |
          FOR each source-destination pair after an anomalous SSH login
            GET time series of connection start times
            APPLY FFT to the time series
            IF a sharp peak is detected in the frequency spectrum
              ALERT
  - question: Is a host downloading a script via curl/wget and then immediately making a new connection to a known-bad destination?
    context: This question targets the 'curl-pipe-shell' attack pattern using network data. The detection logic looks for the initial download via `curl` or `wget`, identifies the file as a script using its MIME type, and then checks if the same host quickly initiates a new connection to an IP on a threat intelligence list. This follow-on connection could be the script 'calling home' to its C2 server.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek files.log
      - Zeek dns.log
      - Network Egress Points
      - Internal network segments containing Linux/Unix systems
      - Developer and DevOps Subnets
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH http.log for User-Agent 'curl' or 'wget'
          CORRELATE with files.log for script mime_type
          IF file is a script
            WITHIN 60 seconds
              SEARCH conn.log for new outbound connection from same source
              IF destination IN threat_intel_feed
                ALERT
  - question: Is a host downloading a file over HTTP and then, almost instantaneously, making a new outbound connection, which is characteristic of an automated script execution?
    context: This question uses behavioral analysis to find the `curl | bash` pattern. A human downloading and then running a file will have a noticeable delay. An automated script execution via a pipe (`|`) will cause a new network connection almost immediately. By baselining the time delta between downloads and subsequent connections, near-instantaneous follow-on connections become highly suspicious anomalies.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Network Egress Points
      - Internal network segments containing Linux/Unix systems
      - Developer and DevOps Subnets
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE time delta between HTTP download and new outbound connection per host
          FOR each HTTP download
            MEASURE time to next new outbound connection
            IF delta < 1st_percentile_baseline OR http_host is raw_ip
              ALERT
  - question: Can we use a sequence analysis model to detect the full chain of events associated with a 'curl-pipe-shell' attack?
    context: This proposes a sophisticated detection by modeling the entire attack sequence. A Hidden Markov Model (HMM) or similar sequence analysis model can be trained to recognize the specific progression of events (e.g., DNS query for a new domain -> HTTP GET with a `curl` user agent -> small script file download -> new outbound connection from the same host) as a single, high-confidence malicious pattern.
    answer_sources:
      - Zeek http.log
      - Zeek conn.log
      - Zeek files.log
      - Zeek dns.log
      - Network Egress Points
      - Internal network segments containing Linux/Unix systems
      - Developer and DevOps Subnets
      - Cloud VPC Flow Logs
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN sequence model (e.g., HMM) on the event chain:
            1. DNS query for new/uncategorized domain
            2. HTTP GET with 'curl' agent
            3. Small script-like file download
            4. New outbound connection
          APPLY model to real-time event streams and ALERT on sequence match
  - question: Are new scripts or executables being created in common Linux persistence locations without proper authorization (e.g., not by a package manager)?
    context: Attackers establish persistence by placing malicious scripts or binaries in locations that ensure automatic execution, such as cron directories, systemd service paths, or profile scripts. This question aims to detect this activity by alerting on any file creation or modification in these sensitive locations that is not performed by a legitimate package manager (like yum or apt) or other authorized process.
    answer_sources:
      - auditd logs
      - Sysmon for Linux Event ID 11
      - Sysmon for Linux Event ID 1
      - System-level persistence locations on critical Linux servers
      - User-specific persistence locations
    range: last 90 days
    queries:
      - pseudocode: |
          MONITOR file/process creation in persistence directories
          IF event_source_process NOT IN ('yum', 'apt', etc.)
            ALERT
  - question: Do newly created scripts in persistence locations have unusually high entropy, suggesting they are obfuscated or packed to hide their malicious content?
    context: Similar to command-line entropy, file content entropy can reveal obfuscation. Normal administrative scripts are plain text and have low entropy. A packed or encrypted payload will appear much more random, resulting in high entropy. This provides a way to flag suspicious scripts for analysis even if their function is not immediately obvious from the filename or metadata.
    answer_sources:
      - auditd logs
      - Sysmon for Linux Event ID 11
      - System-level persistence locations on critical Linux servers
      - User-specific persistence locations
    range: last 90 days
    queries:
      - pseudocode: |
          BASELINE entropy for benign scripts
          FOR each new script in persistence location
            CALCULATE file content entropy
            IF entropy > 3_std_dev_above_mean_baseline
              ALERT
  - question: Can we use a natural language processing model to analyze the content of new scripts in persistence locations and classify them as malicious?
    context: This question suggests using NLP techniques to 'read' and understand a shell script's purpose. By training a model on a large corpus of known-good (administrative) and known-bad (malicious) scripts, it can learn to identify patterns, keywords (like `nc`, `base64 -d`), and structures commonly associated with malware, providing an automated classification of a script's intent.
    answer_sources:
      - auditd logs
      - Sysmon for Linux Event ID 11
      - System-level persistence locations on critical Linux servers
      - User-specific persistence locations
    range: last 90 days
    queries:
      - pseudocode: |
          TRAIN NLP model on known-good and known-bad shell scripts
          FOR each new script in persistence location
            ANALYZE script content with model
            IF classified as malicious
              ALERT