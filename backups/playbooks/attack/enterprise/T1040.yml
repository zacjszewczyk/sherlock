name: T1040: Network Sniffing
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the threat of network sniffing (T1040), a technique used by adversaries to capture data in transit across a network, often for credential access or discovery. It helps investigators determine if an adversary is trying to capture credentials or gather network information by detecting evidence such as the execution of known malicious sniffing tools, the misuse of legitimate utilities like tcpdump or Wireshark with suspicious arguments, network behavior indicative of man-in-the-middle attacks (e.g., ARP spoofing, LLMNR/NBT-NS poisoning), network interfaces entering promiscuous mode on unauthorized hosts, passive OS/service fingerprinting, sniffing of Layer 2 discovery protocols (CDP/LLDP), and the malicious use of cloud traffic mirroring services for data exfiltration.
type: technique
related:
  - TA0006: Credential Access
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a process been created from an executable whose file hash matches a known malicious packet sniffing tool?
    context: This is a high-fidelity indicator of compromise. Adversaries often use known malicious tools like Cain & Abel or Ettercap for network sniffing. Detecting the execution of these tools by their file hash provides strong evidence of an adversary's presence and intent to capture network traffic.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - Zeek software.log
      - Domain Controllers, Application Servers, User Workstations, Privileged Access Workstations, and other high-value systems.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH process_creation_events | LOOKUP file_hash against threat_intel_feed_of_sniffing_tools | WHERE match_is_found
  - question: Is a rare or uncommon process executing on the network that could be an unknown sniffing tool?
    context: Adversaries may use custom or unknown sniffing tools to evade hash-based detection. Identifying processes that are statistically rare across the environment (e.g., running on only a few machines) can help uncover these custom tools. A low prevalence suggests the software is not part of a standard corporate build and requires investigation.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - Zeek software.log
      - Domain Controllers, Application Servers, User Workstations, Privileged Access Workstations, and other high-value systems.
    range: last 90 days
    queries:
      - type: pseudocode
        query: GET all process_hashes from process_creation_events | CALCULATE prevalence (count of unique hosts) for each hash | ALERT on hashes with prevalence < 1st percentile
  - question: Has a machine learning model classified a newly executed process as a potential sniffing tool?
    context: A machine learning model can generalize beyond known hashes and statistical rarity. By analyzing features like the parent process, user context, command-line arguments, and file path, a model can identify suspicious process executions that fit the pattern of a sniffing tool, even if the tool itself has never been seen before. A high-confidence classification warrants immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - Zeek software.log
      - Domain Controllers, Application Servers, User Workstations, Privileged Access Workstations, and other high-value systems.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each new process_creation_event | EXTRACT features (parent_process, user, cmd_line, etc.) | INPUT features into classification_model | ALERT if classification is 'malicious_sniffer' with high_confidence
  - question: Has a legitimate network utility (e.g., tcpdump, Wireshark) been executed with suspicious command-line arguments?
    context: Adversaries often "live off the land" by misusing legitimate tools already present on a system. Executing a tool like `tcpdump` or `tshark` with arguments to write captured traffic to a file (`-w`) or filter for cleartext credential protocols (e.g., FTP, Telnet, IMAP) on a standard user workstation is highly suspicious and could indicate an attempt to capture credentials.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User Workstations, IT Administrator Workstations, Servers hosting diagnostic tools, and any endpoint not explicitly authorized for network analysis.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH process_creation_events WHERE process_name IN (tcpdump.exe, tshark.exe, etc.) | PARSE command_line | ALERT if command_line contains '-w' or filters for ports (21, 23, 110, 143)
  - question: Has a user executed a network utility with command-line arguments that are statistically unusual for them?
    context: Even if command-line arguments are not overtly malicious, they may be anomalous for a specific user or system. By baselining normal command-line patterns for each user, it's possible to detect deviations. A sudden spike in argument complexity (entropy) or the use of a filter for a port never before analyzed by that user could indicate that their account or machine is being used for abnormal reconnaissance or sniffing.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User Workstations, IT Administrator Workstations, Servers hosting diagnostic tools, and any endpoint not explicitly authorized for network analysis.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each user | BASELINE command_line_patterns for diagnostic_tools | ON new execution, CALCULATE argument_entropy or identify rare_arguments | ALERT on significant deviation from baseline
  - question: Does the command-line usage of a network sniffing tool fall outside of normal, established patterns of administrative activity?
    context: Machine learning can identify clusters of "normal" usage for network utilities based on their command-line arguments. For example, one cluster might represent DNS troubleshooting, while another represents HTTP analysis. A command-line execution that does not fit into any of these established clusters is an anomaly and could represent malicious use of the tool.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User Workstations, IT Administrator Workstations, Servers hosting diagnostic tools, and any endpoint not explicitly authorized for network analysis.
    range: last 90 days
    queries:
      - type: pseudocode
        query: CLUSTER all historical command_lines for sniffing_tools | FOR each new command_line, check if it belongs to an established cluster | ALERT if it is an outlier
  - question: Is a host exhibiting behavior consistent with a man-in-the-middle attack, such as ARP spoofing or LLMNR/NBT-NS poisoning?
    context: To intercept traffic between other hosts, an adversary will often perform a man-in-the-middle attack. This can be detected on the network by observing symptoms like a single MAC address claiming to own multiple IP addresses (ARP spoofing) or a host that is not a DNS server responding to a large number of name resolution queries (LLMNR/NBT-NS poisoning).
    answer_sources:
      - Zeek arp.log
      - Zeek dns.log
      - Zeek conn.log
      - Core network switch mirror ports, network tap data from VLANs containing user workstations and servers, network traffic at aggregation points.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH arp_logs WHERE a single MAC_address is associated with multiple IP_addresses in a short time window | OR SEARCH dns_logs WHERE a non-DNS_server_host responds to many unique name_queries
  - question: Is a host sending an anomalously high rate of gratuitous ARP packets?
    context: A high rate of gratuitous ARP packets from a single host can be an indicator of an ARP poisoning or spoofing attempt, which is a common technique for man-in-the-middle attacks. By establishing a baseline for normal ARP traffic rates across the network, it's possible to detect hosts that are exceeding this baseline, warranting further investigation.
    answer_sources:
      - Zeek arp.log
      - Zeek dns.log
      - Zeek conn.log
      - Core network switch mirror ports, network tap data from VLANs containing user workstations and servers, network traffic at aggregation points.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each host, track rate of gratuitous_ARP_packets per minute | BASELINE this rate across all hosts | ALERT if a host's rate exceeds the 99th percentile for a sustained period
  - question: Has a time-series model detected an anomalous spike in LLMNR/NBT-NS responses from a single host?
    context: LLMNR/NBT-NS poisoning is a common method for capturing credentials on a local network. An adversary's tool will respond to many name resolution requests for which it is not authoritative. A time-series anomaly detection model can learn the normal pattern of these responses for each host and detect a sudden, unpredicted spike, which is a strong indicator of a poisoning attack.
    answer_sources:
      - Zeek arp.log
      - Zeek dns.log
      - Zeek conn.log
      - Core network switch mirror ports, network tap data from VLANs containing user workstations and servers, network traffic at aggregation points.
    range: last 90 days
    queries:
      - type: pseudocode
        query: MODEL the time-series of LLMNR/NBT-NS response volume per host | ALERT on significant, unpredicted spikes in volume from a single host
  - question: Has a network interface entered promiscuous mode on a host that is not authorized for this activity?
    context: Promiscuous mode allows a network interface to capture all traffic on its network segment, not just traffic addressed to it. This is essential for network sniffing. While necessary for legitimate network monitoring tools, it is highly suspicious on any other system, such as a standard user workstation or application server. Maintaining a strict whitelist of authorized hosts and alerting on all others is a critical detection.
    answer_sources:
      - Windows System Event Log
      - Linux /var/log/syslog
      - Endpoint detection and response (EDR) agent logs
      - All endpoint and server hosts (physical and virtual), Virtualization hosts (Hyper-V/ESXi), Container orchestration nodes.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH system_logs for 'promiscuous mode enabled' | GET hostname for the event | CHECK if hostname is in the promiscuous_mode_whitelist | ALERT if not in whitelist
  - question: Has there been a statistically significant increase in the number of interfaces in promiscuous mode across the enterprise?
    context: Tracking the total count of interfaces in promiscuous mode over time can reveal broad changes in network activity. A sudden, unexplained increase in this count, or the first-time appearance of promiscuous mode on a specific class of assets (e.g., finance department workstations), is a statistical anomaly that may indicate a widespread campaign or a new attack vector.
    answer_sources:
      - Windows System Event Log
      - Linux /var/log/syslog
      - Endpoint detection and response (EDR) agent logs
      - All endpoint and server hosts (physical and virtual), Virtualization hosts (Hyper-V/ESXi), Container orchestration nodes.
    range: last 90 days
    queries:
      - type: pseudocode
        query: PERIODICALLY query all hosts for interface status | COUNT total interfaces in promiscuous mode | ALERT on sudden, anomalous increase in this count
  - question: Has a host that enabled promiscuous mode been classified as not matching the profile of an authorized monitoring system?
    context: This question uses machine learning to add context to a promiscuous mode event. Instead of a simple whitelist, a model can learn the typical profile of an authorized monitoring host (e.g., hostname conventions, installed software, typical users). When promiscuous mode is enabled on a host, this model can classify whether the host fits the authorized profile. A mismatch provides a higher-confidence alert than a simple whitelist check.
    answer_sources:
      - Windows System Event Log
      - Linux /var/log/syslog
      - Endpoint detection and response (EDR) agent logs
      - All endpoint and server hosts (physical and virtual), Virtualization hosts (Hyper-V/ESXi), Container orchestration nodes.
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON promiscuous_mode_event, get host features (hostname, software, etc.) | INPUT features into one-class_SVM_classifier | ALERT if host is not classified as 'authorized'
  - question: Has an Intrusion Detection System (IDS) generated an alert for passive OS or service fingerprinting?
    context: Before launching an attack, adversaries often perform reconnaissance to map the network and identify vulnerable systems. Passive fingerprinting tools like p0f analyze normal network traffic to identify operating systems and services without sending any packets themselves. Specific IDS signatures can detect the subtle traffic patterns generated by these tools, providing an early warning of discovery activity.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - IDS/IPS Alert Logs
      - Network egress points, Core network switches, Server farm segments, Inter-VLAN routing points, Internet gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: MONITOR IDS_alert_logs or Zeek_notice.log for signatures related to passive_discovery_tools (e.g., p0f) | LOG source and destination IPs on alert
  - question: Is an internal host exhibiting a high ratio of connection attempts to successfully established connections?
    context: A host performing a passive scan may send out many SYN packets across different ports and destinations to gauge what is available. Many of these connection attempts will fail (i.e., not receive a SYN-ACK). A statistically high ratio of attempts to successful connections for a single host, especially when compared to its baseline, can indicate this type of scanning activity.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - IDS/IPS Alert Logs
      - Network egress points, Core network switches, Server farm segments, Inter-VLAN routing points, Internet gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each internal host, analyze conn_log | CALCULATE ratio of SYN_packets to established_connections | ALERT if ratio exceeds baseline by 3 standard deviations
  - question: Has a host suddenly started contacting a much wider variety of services (destination ports) than is normal for its behavior?
    context: Most hosts have a relatively stable pattern of network behavior, contacting the same set of services regularly. A sudden, sharp increase in the diversity of destination ports contacted by a single host is anomalous and suggests discovery activity. A time-series model can track this diversity and flag any uncharacteristic spikes for investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - IDS/IPS Alert Logs
      - Network egress points, Core network switches, Server farm segments, Inter-VLAN routing points, Internet gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each host, create time-series of unique_destination_ports_contacted per hour | USE anomaly_detection_model to find uncharacteristic spikes in diversity | ALERT on spike
  - question: Has a network utility been executed on an unauthorized host with command-line filters for Layer 2 discovery protocols like CDP or LLDP?
    context: Protocols like Cisco Discovery Protocol (CDP) and Link Layer Discovery Protocol (LLDP) are used by network devices to advertise their identity and capabilities. An adversary can sniff this traffic to map the physical network topology. The use of sniffing tools with filters for these protocols is legitimate for a network administrator, but highly suspicious on any other host.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User workstations, Non-network-administrator servers, Critical application servers, and any host not part of the network operations team.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH process_creation_events for 'tcpdump' or 'tshark' | PARSE command_line for BPF filters like 'ether proto 0x2000' or 'ether proto 0x88cc' | ALERT if host is not on network_admin_workstation_list
  - question: Has a host started capturing traffic for a protocol that is statistically rare for it, such as CDP or LLDP?
    context: This is a behavioral approach to detecting the misuse of sniffing tools. By baselining the types of protocols each host typically analyzes (by parsing command-line arguments), it is possible to spot deviations. If a user's workstation, which normally only analyzes HTTP traffic, suddenly starts capturing LLDP, this is a statistical anomaly that warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User workstations, Non-network-administrator servers, Critical application servers, and any host not part of the network operations team.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each host, BASELINE captured_protocols from command_line_history | ON new execution, check if captured protocol is rare for that host | ALERT if new rare protocol (e.g., CDP, LLDP) is captured
  - question: Does the command-line usage of a sniffing tool represent a new, anomalous "topic" of activity, such as network discovery?
    context: Topic modeling can be applied to the entire collection of command-line arguments to identify common usage patterns (topics). For example, the model might identify a "DNS analysis" topic and a "Web debugging" topic. If a new command appears that doesn't fit these topics but instead forms a new, small topic centered on discovery protocols, it is a strong indicator of anomalous, and potentially malicious, activity.
    answer_sources:
      - Windows Event ID 4688
      - Linux auditd logs
      - User workstations, Non-network-administrator servers, Critical application servers, and any host not part of the network operations team.
    range: last 90 days
    queries:
      - type: pseudocode
        query: APPLY topic_modeling (e.g., LDA) to corpus of command_line_arguments | IDENTIFY established topics of usage | ALERT on new commands that do not fit existing topics or form a new, small topic around discovery protocols
  - question: Is a non-network device, such as a user workstation, receiving infrastructure protocol traffic like OSPF or EIGRP?
    context: Routing protocols like OSPF and EIGRP, and first-hop redundancy protocols like HSRP, are typically confined to network infrastructure devices. A standard workstation or server has no reason to receive this traffic. If such a host is observed receiving this traffic, it's a strong sign that its network interface is in promiscuous mode and an adversary is sniffing the network to map its architecture.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Access layer switch SPAN/mirror ports, VLANs containing standard endpoints, and network taps between distribution and access layers.
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH conn_log WHERE destination_IP is in a 'user workstation' range AND protocol is OSPF, EIGRP, HSRP, etc. | ALERT if source host is not on a pre-approved whitelist
  - question: Is a workstation receiving a statistically anomalous volume of traffic from infrastructure protocol multicast groups?
    context: Building on the previous question, this uses a quantitative approach. The normal volume of infrastructure protocol traffic received by a workstation should be zero or near-zero. By establishing a baseline for peer groups, any workstation whose received traffic volume for these protocols exceeds the 99th percentile is a clear statistical outlier and likely indicates network sniffing.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Access layer switch SPAN/mirror ports, VLANs containing standard endpoints, and network taps between distribution and access layers.
    range: last 90 days
    queries:
      - type: pseudocode
        query: FOR each workstation, CALCULATE daily volume of received traffic from infrastructure_multicast_groups | ESTABLISH baseline for peer group | ALERT if volume exceeds 99th percentile
  - question: Has a host's network traffic profile changed to resemble that of a network device rather than a workstation?
    context: Machine learning can be used to cluster hosts based on the types and volumes of broadcast/multicast traffic they receive. This will naturally separate workstations, servers, and network devices. If a host that was previously in the 'workstation' cluster suddenly migrates to a cluster with characteristics of a 'network device' (e.g., receiving high volumes of infrastructure traffic), it is a strong anomaly indicating its role has changed, likely due to sniffing.
    answer_sources:
      - Zeek conn.log
      - Zeek weird.log
      - Access layer switch SPAN/mirror ports, VLANs containing standard endpoints, and network taps between distribution and access layers.
    range: last 90 days
    queries:
      - type: pseudocode
        query: CLUSTER hosts based on received broadcast/multicast traffic profile | TRACK cluster membership over time | ALERT if a 'workstation' host migrates to a 'network device' cluster
  - question: Was a cloud traffic mirroring session created shortly before a large data transfer to an untrusted external IP or storage account?
    context: Cloud traffic mirroring is a powerful diagnostic tool, but it can be abused by adversaries to exfiltrate data. A common pattern of abuse is to create a traffic mirror session, direct the mirrored traffic to a virtual machine, and then exfiltrate the captured data from that machine. Correlating the creation of a mirror session with a subsequent large egress event to a non-corporate destination is a high-confidence indicator of this attack.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - VPC Flow Logs
      - Cloud provider management consoles and APIs (AWS, Azure, GCP), Virtual Private Cloud (VPC) flow logs, Cloud storage services (S3, Blob Storage), Cloud network gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: MONITOR cloud_audit_logs for 'CreateTrafficMirrorSession' API calls | CORRELATE timestamp with network_flow_logs | ALERT if large_data_transfer to untrusted_IP or new_storage_account occurs within 1 hour
  - question: Did the volume of data egress from the cloud environment significantly exceed the forecasted amount after a traffic mirror session was created?
    context: This question uses time-series forecasting to detect anomalous data egress. By modeling the expected volume of outbound data transfer, the system can detect when the actual volume significantly deviates from the forecast. If this deviation occurs immediately after a traffic mirror session is created, it provides strong statistical evidence of data exfiltration via sniffing.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - VPC Flow Logs
      - Cloud provider management consoles and APIs (AWS, Azure, GCP), Virtual Private Cloud (VPC) flow logs, Cloud storage services (S3, Blob Storage), Cloud network gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON 'CreateTrafficMirrorSession' event, monitor egress data volume | COMPARE actual volume to forecasted baseline | ALERT if actual volume exceeds forecast by >3 standard deviations
  - question: Has a sequence of cloud API calls matched a known malicious pattern involving traffic mirroring and data exfiltration?
    context: Adversaries often follow a predictable sequence of actions when abusing cloud services. A pattern like creating a mirror session, creating a new public storage bucket, and then transferring large amounts of data is highly indicative of malicious intent. A machine learning model trained on sequences of API calls can learn what normal administrative behavior looks like and flag these rare, suspicious sequences as outliers.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - VPC Flow Logs
      - Cloud provider management consoles and APIs (AWS, Azure, GCP), Virtual Private Cloud (VPC) flow logs, Cloud storage services (S3, Blob Storage), Cloud network gateways.
    range: last 90 days
    queries:
      - type: pseudocode
        query: TRAIN a sequence classifier on cloud API call history | ANALYZE new sequences of API calls in real-time | ALERT if a sequence matches a known malicious pattern (e.g., CreateMirror -> CreatePublicBucket -> LargePutObject)