name: 'T1644: Out of Band Data'
id: 'a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d'
description: This playbook focuses on detecting adversaries using out-of-band channels for command and control (C2) on mobile devices. It addresses the central information requirement: "Is an adversary using out-of-band channels for command and control on mobile devices?". The playbook provides investigative steps for three primary scenarios. First, it looks for Android applications that, after gaining 'Notification Access' permissions, exhibit suspicious network activity like communicating with malicious or high-entropy domains, or exfiltrating large data volumes. Second, it analyzes inbound SMS/MMS messages for links to malicious or newly registered domains and checks for obfuscated or machine-generated message content by measuring text entropy. Third, it monitors for managed mobile devices connecting to unauthorized Bluetooth or NFC peripherals within sensitive geofenced areas, especially when followed by unusually large data transfers.
type: technique
related:
  - 'TA0037: Command and Control'
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
  - question: Has a device with a newly installed, non-whitelisted application granted 'Notification Access' begun communicating with known malicious domains?
    context: This question aims to identify potentially malicious applications that abuse 'Notification Access' for command and control. By correlating the permission grant with subsequent network connections to domains flagged by threat intelligence, we can detect an early-stage compromise. 'Notification Access' can be used to exfiltrate data or receive commands hidden within push notifications.
    answer_sources:
      - MDM application inventory logs
      - Android OS security logs
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Corporate-managed and BYOD Android devices
      - Mobile Device Management (MDM) servers
      - Network egress points
      - DNS resolvers
      - VPN concentrators
    range: last 90 days for permission grant; 24 hours post-grant for network activity
    queries:
      - search: Pseudocode
        query: |
          FOR each 'Notification Access' grant event:
            IF application_package_name IS NOT on the approved whitelist:
              device = event.device_identifier
              event_time = event.timestamp
              connections = SEARCH network logs for device WITHIN 24 hours of event_time
              FOR each connection in connections:
                IF connection.destination_domain IS IN threat_intelligence_feed:
                  ALERT (Malicious C2 Communication Suspected)

  - question: Following a 'Notification Access' grant by a non-whitelisted app, is the device exhibiting signs of algorithmic domain generation (DGA) or anomalous data exfiltration?
    context: This question looks for secondary indicators of C2 activity. High-entropy domain names are a hallmark of Domain Generation Algorithms (DGA) used by malware to locate C2 servers. Simultaneously, a sudden spike in outbound data volume can indicate data exfiltration. Combining these two analytics provides a strong signal of malicious behavior.
    answer_sources:
      - MDM application inventory logs
      - Android OS security logs
      - Zeek conn.log
      - Zeek dns.log
      - Corporate-managed and BYOD Android devices
      - Mobile Device Management (MDM) servers
      - Network egress points
      - DNS resolvers
      - VPN concentrators
    range: last 90 days, with baselines over 7 and 30 days
    queries:
      - search: Pseudocode
        query: |
          FOR each 'Notification Access' grant event WHERE app IS NOT on whitelist:
            device = event.device_identifier
            // DGA Check
            dns_queries = SEARCH DNS logs for device post-event
            FOR each query in dns_queries:
              entropy = CALCULATE_SHANNON_ENTROPY(query.domain)
              IF entropy > 98th_percentile_of_7day_baseline:
                ALERT (Potential DGA Activity)
            // Data Exfil Check
            outbound_volume = SUM outbound bytes from device post-event
            IF outbound_volume > 95th_percentile_of_30day_device_baseline:
              ALERT (Anomalous Data Exfiltration)

  - question: Is there a statistically significant increase in the rate of new outbound network connections from a device after a non-whitelisted app was granted 'Notification Access'?
    context: This question uses machine learning to establish a normal baseline for a device's network behavior. A sudden, sustained deviation from this baseline, specifically an increase in the number of new connections (a "beaconing" pattern), is a strong indicator of C2 activity. This method is effective at detecting novel threats that may not use known malicious domains.
    answer_sources:
      - MDM application inventory logs
      - Android OS security logs
      - Zeek conn.log
      - Corporate-managed and BYOD Android devices
      - Mobile Device Management (MDM) servers
      - Network egress points
      - DNS resolvers
      - VPN concentrators
    range: last 90 days, with model trained on historical data
    queries:
      - search: Pseudocode
        query: |
          // Model is pre-trained on historical hourly connection counts per device
          FOR each 'Notification Access' grant event WHERE app IS NOT on whitelist:
            device = event.device_identifier
            MONITOR hourly connection count for device
            actual_count = GET current hourly connection count
            forecast_upper_bound = PREDICT from time-series model for device
            IF actual_count > forecast_upper_bound for 2 consecutive hours:
              ALERT (Anomalous Beaconing Behavior Detected)

  - question: Did a user receive an SMS/MMS message with a link to a known malicious or newly registered domain and subsequently connect to it?
    context: This is a classic smishing (SMS phishing) detection. Adversaries use SMS to deliver malicious links. By checking links against threat intelligence and lists of newly registered domains, and then correlating with network traffic, we can confirm a user clicked the link and initiated a connection to a potentially malicious server.
    answer_sources:
      - MDM security event logs
      - Carrier SMS/MMS detail records
      - Threat Intelligence Feeds
      - Zeek dns.log
      - Zeek http.log
      - Zeek conn.log
      - Telecommunication provider gateways for corporate mobile accounts
      - Corporate mobile devices
      - SIEM/Log aggregator
      - Threat Intelligence Platform
    range: last 90 days, with a correlation window of 10 minutes
    queries:
      - search: Pseudocode
        query: |
          FOR each inbound SMS/MMS log:
            EXTRACT all URLs from message body
            FOR each url:
              domain = GET_DOMAIN(url)
              IF domain IS IN threat_intel_feed OR domain_registration_age < 30 days:
                message_receipt_time = log.timestamp
                recipient_device = log.recipient
                SEARCH network logs for recipient_device connecting to domain
                WITHIN 10 minutes of message_receipt_time
                IF connection found:
                  ALERT (Confirmed Smishing Link Click)

  - question: Have any devices received SMS/MMS messages with unusually high text entropy, suggesting obfuscated or machine-generated content?
    context: Adversaries may obfuscate message content to evade simple keyword-based filters, resulting in text with high character-level entropy. By establishing a baseline of normal message entropy and looking for significant statistical deviations (e.g., >3 standard deviations), we can flag messages that are likely machine-generated or obfuscated.
    answer_sources:
      - MDM security event logs
      - Carrier SMS/MMS detail records
      - Telecommunication provider gateways for corporate mobile accounts
      - Corporate mobile devices
      - SIEM/Log aggregator
    range: last 90 days, with a 30-day rolling baseline
    queries:
      - search: Pseudocode
        query: |
          // Baseline is continuously calculated from last 30 days of all messages
          baseline_mean, baseline_stddev = GET_SMS_ENTROPY_BASELINE()
          FOR each inbound SMS/MMS log:
            entropy = CALCULATE_SHANNON_ENTROPY(message_body)
            IF entropy > (baseline_mean + 3 * baseline_stddev):
              ALERT (Suspicious High-Entropy SMS/MMS Received)

  - question: Are we observing inbound SMS/MMS messages that a machine learning model classifies with high confidence as smishing attempts?
    context: This question leverages a content-aware approach to detecting malicious messages. By training a text classification model on known smishing and legitimate messages, the system can learn the nuanced features that distinguish them, allowing for the detection of novel smishing campaigns that might evade simpler rule-based systems.
    answer_sources:
      - MDM security event logs
      - Carrier SMS/MMS detail records
      - Telecommunication provider gateways for corporate mobile accounts
      - Corporate mobile devices
      - SIEM/Log aggregator
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          // Model is pre-trained on a labeled dataset of smishing/benign messages
          FOR each inbound SMS/MMS log:
            features = EXTRACT_TEXT_FEATURES(message_body)
            malicious_probability = PREDICT from text classification model
            IF malicious_probability > 0.95:
              ALERT (High-Confidence Smishing Attempt Detected by ML Model)

  - question: Has a corporate mobile device paired with an unauthorized Bluetooth/NFC peripheral while physically located in a sensitive, geofenced area?
    context: This question focuses on detecting potential physical-layer C2 or data exfiltration. By combining location data (geofencing) with device pairing information and a whitelist of approved peripherals, we can precisely identify high-risk events where an unauthorized device is connected in a secure environment.
    answer_sources:
      - MDM security logs
      - Mobile OS Bluetooth/NFC logs
      - Physically controlled spaces (e.g., executive suites, R&D labs)
      - Corporate-managed mobile devices with Bluetooth/NFC enabled
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |
          FOR each Bluetooth/NFC pairing log:
            paired_mac = log.peripheral_mac_address
            device_location = log.gps_coordinates
            IF paired_mac IS NOT IN approved_peripheral_whitelist AND IS_WITHIN_GEOFENCE(device_location, sensitive_areas):
              ALERT (Unauthorized Peripheral Connection in Sensitive Area)

  - question: Following a connection to an unauthorized peripheral, did the device transfer an anomalously large amount of data via Bluetooth/NFC?
    context: This question seeks to quantify the impact of an unauthorized pairing. A simple pairing might be benign, but a pairing followed by a massive data transfer is highly suspicious and indicative of data exfiltration. By baselining normal data transfer volumes for each user, we can detect significant outliers.
    answer_sources:
      - MDM security logs
      - Mobile OS Bluetooth/NFC logs
      - Physically controlled spaces (e.g., executive suites, R&D labs)
      - Corporate-managed mobile devices with Bluetooth/NFC enabled
    range: last 90 days, with a 30-day rolling baseline
    queries:
      - search: Pseudocode
        query: |
          FOR each pairing log WHERE paired_mac IS NOT IN whitelist:
            user = log.user
            user_baseline_99th_percentile = GET_USER_DATA_TRANSFER_BASELINE(user, 30_days)
            transfer_size = log.data_transfer_bytes
            IF transfer_size > user_baseline_99th_percentile:
              ALERT (Anomalous Data Transfer to Unauthorized Peripheral)

  - question: Are there any users exhibiting anomalous Bluetooth/NFC pairing behaviors, such as connecting to an unusual number of unique devices in a short time or in a sensitive location?
    context: This question uses unsupervised machine learning to find "unknown unknowns" in pairing behavior. An attacker might connect to multiple devices quickly to find a target. A clustering algorithm can identify these outlier behaviors that don't fit the typical pattern of a user pairing with their usual peripherals.
    answer_sources:
      - MDM security logs
      - Mobile OS Bluetooth/NFC logs
      - Physically controlled spaces (e.g., executive suites, R&D labs)
      - Corporate-managed mobile devices with Bluetooth/NFC enabled
    range: last 90 days
    queries:
      - search-type: Pseudocode
        query: |
          // Run periodically on aggregated logs from the last 90 days
          pairing_events = GET all Bluetooth/NFC pairing logs
          features = EXTRACT features like pairing_frequency, unique_devices_per_hour, location
          outliers = APPLY DBSCAN clustering algorithm to features
          FOR each event identified as an outlier:
            ALERT (Anomalous Pairing Behavior Cluster Detected)