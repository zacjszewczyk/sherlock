name: T1518: Software Discovery
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the threat of an adversary performing reconnaissance of installed software on a network. It focuses on detecting the use of known discovery tools, the execution of built-in software discovery commands (like 'wmic product get'), high-volume read attempts to software-related registry keys, and subsequent anomalous network activity that could indicate data exfiltration or lateral movement.
type: technique
related:
- TA0007: Discovery
contributors:
- Zachary Szewczyk
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: none
questions:
- question: Has a known malicious software discovery tool been executed on any endpoint?
  context: This question seeks to identify the execution of specific, known-bad discovery tools or scripts by matching their file hashes against a curated threat intelligence list. Adversaries often use publicly available or custom tools like Seatbelt or SharpHound for enumeration. Detecting their execution provides a high-confidence indicator of active reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH process_creation_logs WHERE process_hash IN (malicious_discovery_tool_hashes)
- question: Has a rare or previously unseen process, potentially a discovery tool, been executed?
  context: This question focuses on identifying statistically rare processes. Adversary tools are often not widely distributed across an enterprise. By calculating the prevalence of every executed process hash and flagging those running on a very small percentage of hosts (e.g., <1%), we can uncover potentially malicious or unauthorized software, including discovery tools, that would otherwise be missed.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CALCULATE prevalence for each process_hash in process_creation_logs over last 30 days
      RETURN process_hash, host_count WHERE prevalence < 1% AND process_hash NOT IN (approved_software_hashes)
- question: Has a machine learning model identified any process execution as suspicious or indicative of software discovery?
  context: This question leverages a machine learning model to analyze process execution events. The model uses multiple features (parent process, user, command line, hash prevalence) to classify behavior. A 'malicious' or 'suspicious' classification, especially for a rare process, serves as a high-confidence, automated detection of potential reconnaissance activity that warrants immediate investigation.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Endpoint devices (workstations and servers), Domain Controllers, and Critical Application Servers where process creation logging is enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      INPUT process_creation_events INTO ML_classification_model
      RETURN events WHERE model_prediction IN ('malicious', 'suspicious')
- question: Have built-in software discovery commands been executed by an unauthorized user or process?
  context: This question aims to detect the misuse of legitimate, built-in system utilities for software discovery. Adversaries 'live off the land' by using commands like 'wmic product get' or 'Get-Package'. This query looks for the execution of these commands, filtering out legitimate use by IT administrators or known management tools to reduce false positives and focus on suspicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH (process_creation_logs OR powershell_script_block_logs) WHERE (command_line MATCHES (discovery_command_regex)) AND (user NOT IN (admin_group)) AND (parent_process NOT IN (management_tools))
- question: Is a user executing software discovery commands more frequently or with more complexity than their normal behavior?
  context: This question focuses on behavioral anomaly detection at the user level. It establishes a baseline of normal activity for each user regarding discovery commands. An alert is triggered if a user suddenly starts running these commands far more often than usual (exceeding their 95th percentile) or with unusual variations, which can indicate an adversary has compromised the account and is performing reconnaissance.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each user, CALCULATE baseline of discovery_command_frequency and entropy over 30 days. ALERT if daily_count > 95th_percentile_baseline OR daily_entropy > baseline_entropy_threshold.
- question: Has a time-series model detected an anomalous spike in software discovery command usage for any host or user?
  context: This question uses a time-series anomaly detection model to identify unusual patterns in the execution of discovery commands over time. The model learns the normal rhythm of activity for each host and user and flags any significant deviation from this forecasted pattern. This is effective for catching sudden bursts of reconnaissance activity that stand out from normal operational noise.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 4104
  - All Windows endpoints and servers with command-line process auditing and PowerShell Script Block Logging enabled.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT discovery_command_counts_per_hour INTO time_series_model. ALERT if observed_count deviates significantly from forecasted_pattern.
- question: Has an unauthorized process rapidly read a large number of software-related registry keys?
  context: This question seeks to detect aggressive registry enumeration, a common method for software discovery. It sets a threshold for the number of read events to the 'Uninstall' registry key within a short time frame. By allowlisting known legitimate processes, this query can pinpoint unauthorized or custom tools that are scraping the registry for information on installed applications.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: last 90 days
  queries:
  - technology: pseudocode
    query: SEARCH registry_audit_logs (EventID 4663) for object_name under '...\\Uninstall'. COUNT events by process_name, host within 1 minute. ALERT if count > 100 AND process_name NOT IN (allowlist).
- question: Is any process reading software-related registry keys at a rate that is anomalous for that specific process?
  context: This question uses a behavioral baseline for each individual process to detect anomalies. It understands that some processes legitimately read the registry, but an adversary's tool might do so at a much faster rate. By calculating a normal read rate (mean and standard deviation) for each process, it can flag when a process's activity becomes statistically unusual, indicating potential misuse or compromise.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: last 90 days
  queries:
  - technology: pseudocode
    query: FOR each process, CALCULATE baseline (mean, stddev) of registry_read_rate. ALERT if current_rate > (mean + 3 * stddev).
- question: Has a machine learning clustering model identified any processes with anomalous registry reading behavior?
  context: This question employs an unsupervised machine learning approach (clustering) to find outlier processes. It groups processes based on their registry interaction behavior (volume, path entropy, parent process). Processes that don't fit into common clusters—especially those forming small, isolated clusters characterized by rapid, high-volume reads to software keys—are flagged as anomalous and potentially malicious.
  answer_sources:
  - Windows Event ID 4663
  - Windows Registry on high-value assets and standard endpoints, requiring SACLs configured to audit read access on specific software-related registry hives (e.g., 'HKLM\SOFTWARE').
  range: last 90 days
  queries:
  - technology: pseudocode
    query: INPUT process_behavior_features (registry_read_volume, path_entropy, parent_process) INTO DBSCAN_model. ALERT on processes classified as noise/outliers.
- question: Did a host initiate suspicious external network communication shortly after performing software discovery?
  context: This question correlates endpoint discovery activity with subsequent network behavior to detect potential data exfiltration. An adversary often collects information and then sends it to a command-and-control server. This rule looks for a host that just performed discovery actions and then immediately connects to a low-reputation or newly seen external destination, which is a strong indicator of a successful reconnaissance and exfiltration sequence.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: CORRELATE software_discovery_alert with network_logs within 30 minutes. ALERT if source_ip from alert connects to external_ip with (low_reputation OR newly_seen_domain).
- question: Did a host begin anomalous internal network scanning after performing local software discovery?
  context: This question aims to identify the next stage after local discovery: internal reconnaissance. After an adversary learns about the local machine, they often scan the internal network to find other targets. This query establishes a baseline for a host's normal internal connection patterns and flags a significant increase in the number of unique internal systems it contacts shortly after a discovery event, suggesting lateral movement or scanning.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON software_discovery_alert, MONITOR source_host's internal network connections for 1 hour. CALCULATE unique_destinations. ALERT if unique_destinations > 99th_percentile_baseline.
- question: Has a graph analysis model detected a change in a host's network communication patterns following a software discovery event?
  context: This question uses advanced graph analytics to detect changes in a host's role within the network. A compromised host that begins scanning will change its communication 'shape'—it will connect to many new devices and its importance (centrality) in the network graph will shift. This query detects such topological changes in the network graph for hosts that recently performed discovery, flagging them as engaging in post-reconnaissance scanning.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Zeek files.log
  - Zeek dns.log
  - Network egress points and internal network segments monitored by Zeek sensors, endpoint process logs, and DNS resolvers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: ON software_discovery_alert, ANALYZE host_node in communication_graph. ALERT if node's community or centrality_score changes significantly due to new, short-lived connections.