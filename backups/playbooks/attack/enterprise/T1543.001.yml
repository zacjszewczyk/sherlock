name: T1543.001: Launch Agent
id: f8d9e0c1-b2a3-4f5e-8d9c-0a1b2c3d4e5f
description: This playbook helps analysts investigate whether adversaries are abusing macOS Launch Agents for persistence or privilege escalation. It provides questions and queries to detect the creation of malicious .plist files, suspicious process execution chains originating from `launchd`, anomalous network activity from new agents, and failed attempts to modify protected Launch Agent directories. The goal is to identify unauthorized persistence mechanisms and privilege escalation attempts by correlating file system events, process activity, and network logs.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a new Launch Agent process making network connections to known malicious infrastructure?
  context: Adversaries often use Launch Agents to establish persistence. The agent's process, executed by `launchd`, may initiate a connection to a command-and-control (C2) server. Correlating the execution of a new agent with network connections that match threat intelligence is a high-confidence indicator of a compromise.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek conn.log
  - Zeek dns.log
  - Threat intelligence feeds
  - NAI: All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH macos_exec_events WHERE parent_process_name == 'launchd'
      EXTRACT host, process_path, timestamp
      JOIN with network_logs ON host within same time window
      LOOKUP destination_ip, destination_domain in threat_intel_feed
      RETURN alert if match found
- question: Is a new Launch Agent process using domain generation algorithms (DGA) for C2 communication?
  context: To evade blocklists, malware may use DGAs to generate a large number of domain names for C2 communication. These algorithmically generated domains often have a high character randomness, which can be measured by Shannon entropy. Detecting high-entropy DNS queries from a new Launch Agent process can uncover covert C2 channels.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek dns.log
  - NAI: All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH macos_exec_events WHERE parent_process_name == 'launchd'
      EXTRACT host, process_path
      JOIN with dns_logs ON host
      CALCULATE shannon_entropy(query_domain)
      COMPARE entropy score to enterprise baseline
      RETURN alert if entropy > 98th_percentile
- question: Does a machine learning model classify a new Launch Agent's process and network behavior as malicious?
  context: A supervised machine learning model, like a Random Forest, can be trained to recognize complex patterns of malicious behavior that are difficult to define with simple rules. By using features like process path entropy, code signature status, and network traffic characteristics, the model can identify suspicious Launch Agent activity with a high degree of accuracy, even if the specific indicators are not previously known.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - Zeek conn.log
  - Zeek dns.log
  - Code signature information
  - IP reputation services
  - NAI: All macOS endpoints, Network egress points/gateways, DNS resolvers
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new launch_agent_process:
        GATHER features (path_entropy, signature_validity, parent_process, dest_port, data_volume, ip_reputation)
        APPLY pre-trained Random Forest model
        RETURN alert if classification is 'malicious' with high confidence
- question: Has a suspicious process created a Launch Agent .plist file that points to an executable in a non-standard, world-writable location?
  context: Adversaries often drop their persistence executables in world-writable directories like `/tmp/` or `/Users/Shared/` to ensure they can write the file regardless of the user context. They then create a `.plist` file in a Launch Agent directory to execute it. Detecting `.plist` files created by unusual processes (like `curl` or `python`) or those pointing to executables in these temporary locations is a strong indicator of malicious persistence.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events
  - File content analysis of .plist files
  - NAI: All macOS endpoints, User home directories on macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_creation_events WHERE directory IN ('/Library/LaunchAgents/', '~/Library/LaunchAgents/') AND file_extension == '.plist'
      IF creating_process IN ('bash', 'curl', 'python', 'osascript') THEN ALERT
      PARSE .plist file content
      IF ProgramArguments path starts with ('/tmp/', '/Users/Shared/') THEN ALERT
- question: Is a new Launch Agent .plist file being created by a statistically rare process or pointing to a high-entropy path?
  context: Legitimate software installations and updates typically create `.plist` files using a predictable set of parent processes. An adversary might use a less common process to create their persistence mechanism. By baselining normal activity, we can identify `.plist` creations by rare parent processes. Similarly, high-entropy executable paths can indicate an attempt to obfuscate the malware's location.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - File content analysis of .plist files
  - NAI: All macOS endpoints, User home directories on macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE frequency of processes creating .plist files in Launch Agent directories
      FOR each new .plist creation event:
        IF creating_process is statistically rare (e.g., not in top 99%) THEN ALERT
      CALCULATE entropy of ProgramArguments path in .plist
      IF path_entropy > baseline_threshold THEN ALERT
- question: Does a new Launch Agent .plist creation event appear as an outlier when compared to clusters of normal activity?
  context: Unsupervised learning, such as density-based clustering (DBSCAN), can group routine `.plist` creation events into clusters representing normal system behavior (e.g., software updates). An event that does not fit into any existing cluster is considered an outlier or noise. These anomalous events are highly suspicious, as they represent a deviation from established patterns and could signal malicious activity.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - NAI: All macOS endpoints, User home directories on macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      APPLY pre-trained DBSCAN model to features of new .plist creation event (parent_process, hour_of_day, target_dir)
      IF model classifies event as 'noise' or 'outlier' THEN ALERT
- question: Is there a sequence of events where an unapproved process writes an executable, creates a Launch Agent .plist to point to it, and that executable then runs and connects to the network?
  context: This question looks for a specific chain of behaviors that strongly indicates a "dropper" installing a persistent backdoor. The sequence—writing an executable, creating the persistence mechanism (.plist), and then the executable running and phoning home—all within a short time window, is a classic malware installation pattern. Correlating these steps provides a very high-fidelity detection.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - Zeek conn.log
  - NAI: All macOS endpoints, Network egress points/gateways, Web content filters
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE stateful rule with 5-min window on hostname
      STEP A: file_write with execute permissions by process NOT on 'installer' allowlist
      STEP B: .plist creation in Launch Agent dir by same process, pointing to file from A
      STEP C: execution of file from A, followed by outbound network connection
      IF A -> B -> C occurs, THEN ALERT
- question: Is the process that initiated a suspicious behavioral chain creating an anomalous number of executable files?
  context: A legitimate process, like a web browser, might occasionally download an executable. However, a compromised browser or a malicious script running through it might drop multiple malicious tools in a short period. By baselining the normal rate of executable file creation per process, we can detect a sudden burst of activity that exceeds a statistical threshold (e.g., 3 standard deviations above the mean), indicating the start of a potentially malicious sequence.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process, CALCULATE moving average and std dev of executables created per hour
      FOR each new executable creation:
        IF count > (moving_average + 3 * std_dev) THEN ALERT
- question: Does the graph representation of a process/file/network event sequence deviate from the learned model of normal behavior?
  context: Advanced threats can exhibit complex behavioral chains. By modeling these sequences as graphs (where processes and files are nodes, and actions are edges), we can use Graph Neural Networks (GNNs) to learn what "normal" installation and execution graphs look like. A new sequence that produces a graph significantly different from the learned norms is a strong anomaly, potentially indicating a novel or sophisticated attack pattern that rule-based systems would miss.
  answer_sources:
  - macOS ESF process execution events
  - macOS ESF file creation events
  - macOS ESF file permission modification events
  - Zeek conn.log
  - NAI: All macOS endpoints, Network egress points/gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each event sequence:
        GENERATE graph (nodes=entities, edges=actions)
        COMPUTE graph embedding using pre-trained GNN
        CALCULATE anomaly score based on distance from normal embeddings
        IF score is high THEN ALERT
- question: Is a recently created Launch Agent executable spawning suspicious child processes like shells or scripting interpreters?
  context: A legitimate Launch Agent typically performs a specific task. An adversary's agent, however, might be a simple loader that then spawns a shell or scripting interpreter (`python`, `osascript`) to execute more complex, obfuscated commands. Monitoring for this behavior from executables associated with recently created `.plist` files can uncover the second stage of an attack.
  answer_sources:
  - macOS ESF process execution events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN watchlist of executables from .plists created in last 7 days
      SEARCH process_execution_events WHERE parent_process_path IN watchlist
      IF child_process_name IN ('sh', 'bash', 'zsh', 'python', 'osascript') THEN ALERT
- question: Is a recently created Launch Agent executable exhibiting anomalous network behavior, such as a sudden spike in data exfiltration or C2 connections?
  context: After establishing persistence, an adversary's agent may begin exfiltrating data or beaconing to a C2 server. This activity can manifest as a statistical anomaly in network traffic. By monitoring the volume of data sent and the number of connections for new agents, and comparing it to a moving baseline, we can detect sudden changes that exceed normal thresholds (e.g., 3 standard deviations), which may indicate malicious activity.
  answer_sources:
  - macOS ESF process execution events
  - Zeek conn.log
  - NAI: All macOS endpoints, Network egress points/gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process on 7-day watchlist:
        CALCULATE moving average and std dev for bytes_sent and connection_count
        IF current_interval_value > (moving_average + 3 * std_dev) THEN ALERT
- question: Does the time series of a new Launch Agent's network traffic contain unpredictable anomalies after removing normal patterns?
  context: Sophisticated adversaries may try to blend their network traffic with normal patterns. Time-series decomposition can separate a signal into trend (long-term progression), seasonality (predictable cycles), and residual (random noise) components. By applying an anomaly detection model like Isolation Forest to the residual component, we can find unpredictable spikes or changes in behavior that are not explained by normal patterns, pointing to potentially malicious actions.
  answer_sources:
  - macOS ESF process execution events
  - Zeek conn.log
  - NAI: All macOS endpoints, Network egress points/gateways
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each process on watchlist:
        CREATE time series of outbound data volume
        DECOMPOSE time series into trend, seasonal, and residual components
        APPLY Isolation Forest model to residual component
        IF model flags a data point as an anomaly THEN ALERT
- question: Is a non-root process attempting to write to protected system-level Launch Agent directories and failing?
  context: The `/System/Library/LaunchAgents/` and `/Library/LaunchAgents/` directories are protected and require root privileges to modify. An adversary's malware, running as a standard user, might attempt to write a `.plist` file to these locations to gain persistence that runs in a higher-privileged context. Monitoring for failed write attempts from non-root (UID > 0) processes is a direct indicator of a privilege escalation attempt.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - macOS ESF process execution events
  - NAI: System-wide directories on all macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_events WHERE directory IN ('/System/Library/LaunchAgents/', '/Library/LaunchAgents/')
      FILTER for events where result == 'permission denied'
      IF process_euid > 0 THEN ALERT
- question: Is a user or process generating a statistically unusual number of failed write attempts to protected Launch Agent directories?
  context: While an occasional failed write might be benign (e.g., a misconfigured application), a sudden burst of failed attempts from a single user or process is highly suspicious. This can indicate a script or malware repeatedly trying to gain privileged access. By baselining the normal rate of these failures and alerting on significant deviations (e.g., exceeding the 95th percentile), we can detect these persistent attempts.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - NAI: System-wide directories on all macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE rate of failed writes to protected Launch Agent dirs per user/process
      AGGREGATE failed writes over 1-hour windows
      IF failure_count > 95th_percentile_of_baseline THEN ALERT
- question: Does a machine learning model classify a failed write attempt to a protected Launch Agent directory as suspicious?
  context: Not all failed writes are malicious. A supervised machine learning model (e.g., Logistic Regression) can be trained to distinguish between benign failures and suspicious ones. By using features like the process name, its parent, command-line arguments, and code signature status, the model can learn the context of the event and assign a probability score, allowing analysts to focus on the highest-risk attempts.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events
  - macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events
  - macOS ESF process execution events
  - Code signature status
  - NAI: System-wide directories on all macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each failed_write_event to protected Launch Agent dir:
        GATHER features (process_name, parent_process, cmd_line, signature_status)
        APPLY pre-trained Logistic Regression model
        RETURN alert if score indicates high probability of being malicious
- question: Is the `launchctl` command being used to load a .plist file from an insecure, world-writable directory?
  context: The `launchctl load` command is the standard way to load a Launch Agent or Daemon. However, it should typically load `.plist` files from trusted system or user library locations. An adversary might place a malicious `.plist` in a world-writable directory like `/tmp/` or `/Users/Shared/` and then use `launchctl` to load it. This action bypasses restrictions on writing to protected directories and is a strong indicator of malicious activity.
  answer_sources:
  - macOS ESF process execution events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_execution_events WHERE process_name == 'launchctl' AND command_line contains 'load'
      EXTRACT .plist file path from command line
      IF .plist_path starts with ('/tmp/', '/Users/Shared/') THEN ALERT
- question: Is a user using `launchctl load` to load a .plist from a statistically rare or previously unseen directory?
  context: Users and system processes typically load `.plist` files from a predictable set of directories. By creating a historical profile for each user of the directories they load from, we can detect anomalous behavior. When a user suddenly loads a `.plist` from a directory they've never used before, or one that is very rare in their history, it could indicate that a malicious script or payload is running in their context.
  answer_sources:
  - macOS ESF process execution events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      CREATE profile of .plist parent directories loaded per user
      FOR each 'launchctl load' event:
        IF .plist_parent_directory is not in user's historical profile THEN ALERT
- question: Does a `launchctl load` event appear as an outlier when analyzed by a One-Class SVM model trained on normal activity?
  context: A One-Class SVM is an unsupervised learning algorithm that is excellent for anomaly detection. By training it on a large dataset of known-good `launchctl load` events, it learns a boundary that encompasses "normal" behavior. Any new event that falls outside this boundary is classified as an outlier. This technique can detect novel attack variations that don't match specific rules, based on features like the parent process and the location of the `.plist` file.
  answer_sources:
  - macOS ESF process execution events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 'launchctl load' event:
        GATHER features (parent_process_name, plist_parent_dir)
        APPLY pre-trained One-Class SVM model
        IF event is classified as an outlier THEN ALERT
- question: Did a non-standard process escalate to root privileges and then immediately write a .plist file to a system Launch Agent directory?
  context: This is a classic privilege escalation and persistence pattern. An exploit or malicious script gains root privileges (e.g., via `setuid(0)`) and then, to make that access permanent, it immediately writes a Launch Agent or Daemon to a protected system directory. Correlating a privilege escalation event with a subsequent write to a Launch Agent directory by the same process within a short time window is a very high-confidence indicator of compromise.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF process execution events
  - macOS ESF file creation events
  - NAI: All macOS endpoints, Authentication logs
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE stateful rule with 60-sec window on process ID
      STEP A: process escalates to root (e.g., setuid(0)) AND process_name NOT in admin_tool_allowlist
      STEP B: same process writes file to ('/Library/LaunchAgents/', '/System/Library/LaunchAgents/')
      IF A -> B occurs, THEN ALERT
- question: Is the time between a process gaining root and writing a .plist file unusually short, suggesting automated activity?
  context: Legitimate administrative actions involving privilege escalation and file modification might have some delay due to user interaction. Malicious scripts, however, execute these steps almost instantaneously. By measuring the time delta for these sequences, we can establish a baseline for normal admin activity. A sequence with an extremely short time delta (e.g., in the bottom 5th percentile) is likely automated and malicious.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF file creation events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE time delta between priv-esc and .plist write for legitimate sequences
      FOR each new sequence:
        CALCULATE time_delta
        IF time_delta < 5th_percentile_of_baseline THEN ALERT
- question: Does a sequence of user-level execution, privilege escalation, and system file modification have a low probability of being legitimate according to a Hidden Markov Model (HMM)?
  context: Legitimate administrative workflows follow predictable state transitions (e.g., a user runs `sudo`, enters a password, then the command runs as root). A Hidden Markov Model (HMM) can be trained to learn the probabilities of these state transitions. An attack sequence may involve different or unlikely transitions. By scoring new event sequences against the HMM, we can flag those with a low probability, indicating they deviate from normal, learned administrative patterns.
  answer_sources:
  - macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events
  - macOS ESF process execution events
  - macOS ESF file creation events
  - NAI: All macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL event sequences as state transitions (user_exec -> root_exec -> file_write)
      SCORE new sequence probability using a pre-trained HMM on legitimate workflows
      IF probability is very low THEN ALERT
- question: Is a process with an invalid, missing, or ad-hoc code signature writing a .plist file to a protected Launch Agent directory?
  context: Legitimate software that modifies system directories is almost always signed by a trusted developer. Adversaries often use unsigned, ad-hoc signed, or invalidly signed code. Therefore, if a process writes to a protected directory like `/Library/LaunchAgents/` and its code signature is not valid and from a trusted developer (e.g., not on an organizational allowlist of Team IDs), it is highly suspicious and warrants immediate investigation.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events
  - macOS code signing information logs
  - NAI: System-wide directories on all macOS endpoints, Certificate and code signing infrastructure, Software/asset inventory database
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH file_write_events in ('/Library/LaunchAgents/', '/System/Library/LaunchAgents/')
      ENRICH creating process with code_signing_info
      IF signature_status IN ('invalid', 'unsigned', 'ad-hoc') THEN ALERT
      IF signature_team_id NOT IN allowlist THEN ALERT
- question: Is a .plist file in a protected directory being written by a process signed by a new or statistically rare developer Team ID?
  context: An organization's systems are typically modified by a relatively stable set of software vendors. By baselining the developer Team IDs of processes that legitimately write to Launch Agent directories, we can spot anomalies. A write from a process signed by a Team ID that has never been seen before, or one that is extremely rare, is a strong signal that new, potentially unauthorized software is attempting to establish persistence.
  answer_sources:
  - macOS ESF file creation events
  - macOS code signing information logs
  - NAI: System-wide directories on all macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE frequency of signing Team IDs for processes writing to protected Launch Agent dirs
      FOR each new write event:
        IF signing_team_id is new or statistically rare (<0.1% frequency) THEN ALERT
- question: Does a machine learning classifier predict that a write to a protected Launch Agent directory is malicious based on its code signing characteristics?
  context: This approach uses a supervised model, like a Decision Tree, to formalize the logic of trusting certain code signatures. By training the model on labeled data, it can learn the combinations of features (e.g., `is_signed`, `is_valid`, `team_id`, `process_name`) that are predictive of malicious writes. This automates the analysis of code signing information and can flag suspicious events, especially those involving unsigned or ad-hoc signed processes, for analyst review.
  answer_sources:
  - macOS ESF file creation events
  - macOS ESF process execution events
  - macOS code signing information logs
  - NAI: System-wide directories on all macOS endpoints
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each write event to a protected Launch Agent dir:
        GATHER features (is_signed, is_valid, team_id, process_name)
        APPLY pre-trained Decision Tree/Random Forest model
        IF classification is 'malicious_write' THEN ALERT