name: T1564.009: Resource Forking
id: 3c1b6a8e-0f4d-4b9e-b2d1-9f6a7b8c9d0e
description: This playbook addresses the defense evasion technique of using macOS resource forks to hide malicious payloads or executables. Adversaries abuse this feature to store data in a separate, less-inspected part of a file, evading detection. The investigation focuses on identifying when a file's resource fork contains malicious content (identified by hash or high entropy), when an unauthorized process writes to a resource fork, when an executable file has a non-zero resource fork, and when a sequence of events (download, fork write, execute) indicates a malicious delivery chain.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are file resource forks matching known malicious hashes?
    context: This question seeks to identify if a file write or creation event results in a resource fork whose content is a known malicious payload. By calculating the SHA256 hash of the resource fork and comparing it against threat intelligence feeds, analysts can directly detect the presence of known malware hidden using this technique. A match provides a high-confidence indicator of compromise.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - File system audit logs
      - User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file_write or file_create event: GET resource_fork_content; COMPUTE sha256_hash; IF sha256_hash IN known_malicious_hashes_feed: ALERT
  - question: Do any file resource forks exhibit high entropy suggesting packing or encryption?
    context: This question aims to detect potentially malicious content hidden in resource forks that isn't yet known to threat intelligence. Malicious code is often packed or encrypted to evade signature-based detection, which results in high entropy (randomness). By calculating the Shannon entropy of a resource fork and comparing it to a baseline of normal applications, analysts can identify outliers that warrant further investigation for hidden malicious payloads.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - File system audit logs
      - User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file with non-zero resource_fork: COMPUTE entropy of resource_fork; IF entropy > baseline_95th_percentile: FLAG for analysis
  - question: Can a machine learning model identify file modifications likely to involve a malicious resource fork?
    context: This question explores using a binary classification model to proactively identify malicious resource fork activity. By training a model on features like resource fork size, entropy, parent process, and file permissions, the system can score file modification events in real-time. This provides a more nuanced and adaptive detection method than static rules, capable of identifying novel threats based on learned characteristics of malicious behavior.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - File system audit logs
      - User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: ON file_modification_event: EXTRACT features (fork_size, entropy, parent_process, etc.); SCORE with classification_model; IF score > high_probability_threshold: FLAG as malicious-fork
  - question: Are suspicious processes like curl, wget, or python writing to file resource forks?
    context: This question focuses on the origin of the write operation. Legitimate system utilities like Finder commonly interact with resource forks. However, when command-line utilities (curl, wget), scripting interpreters (python, bash), or office applications are observed writing to a resource fork, it is highly suspicious. This action often indicates a script or macro is being used to hide a payload, and a detection rule can quickly flag this anomalous behavior.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_FORK process fork events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Development environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: ON file_write_event to resource_fork: IF process_name IN suspicious_writer_watchlist: ALERT
  - question: Are there rare or infrequent processes writing to resource forks?
    context: This question leverages frequency analysis to spot anomalies. Adversaries often use custom or uncommon tools that will appear infrequently in system logs. By aggregating all processes that write to resource forks over a period and identifying those that are both not on an allowlist and are statistically rare (e.g., in the lowest 5th percentile of activity), analysts can uncover novel or bespoke tools used for defense evasion.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_FORK process fork events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Development environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: AGGREGATE process_names from resource_fork_writes over 30 days; CALCULATE frequency; FOR each process: IF process NOT IN allowlist AND frequency < 5th_percentile: ALERT
  - question: Can anomalous process execution chains that lead to resource fork writes be identified?
    context: This question applies graph analysis to model process behavior. Normal activity, like Finder managing resource forks, forms predictable, dense clusters in a process lineage graph. An attack, such as a browser downloading a file and a script subsequently writing to its resource fork, would create a process chain that falls outside these normal clusters. Using clustering algorithms like DBSCAN can automatically identify these outlier chains as suspicious.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_FORK process fork events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Development environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: BUILD process lineage graph with 'write_to_resource_fork' actions; APPLY DBSCAN clustering; FLAG process chains outside of dense clusters as outliers
  - question: Are there any executable files with non-zero resource forks?
    context: This question looks for a direct and suspicious combination: a file that is executable and also contains data in its resource fork. While some legacy applications might use this, it's an uncommon and suspicious characteristic for modern software. A rule can detect this combination at file creation or when permissions change, providing a strong signal of a hidden payload, especially if the file is unsigned or not on an allowlist.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: ON file_create or file_attribute_change: IF file is executable AND resource_fork_size > 0 AND file is not allowlisted: ALERT
  - question: Are there any executable files with an unusually large resource fork size?
    context: This question uses statistical analysis to find outliers based on size. By monitoring the average size and standard deviation of resource forks for all executable files, a baseline for normal behavior can be established. An executable file whose resource fork is significantly larger than the norm (e.g., more than 3 standard deviations above average) is a statistical anomaly and could indicate that a large payload has been hidden within it.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR all executables: CALCULATE moving_average and std_dev of resource_fork_size; IF executable.resource_fork_size > (moving_average + 3 * std_dev): ALERT
  - question: Is there a sudden spike in the number of new executable files with non-zero resource forks on a host?
    context: This question focuses on detecting large-scale or automated activity through time-series analysis. A single instance might be missed, but a sudden increase in the creation of executables with hidden payloads on a single host is a strong indicator of a mass deployment, such as a worm or a dropper script. Anomaly detection algorithms can automatically flag such spikes against a learned baseline of normal activity for that host.
    answer_sources:
      - ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events
      - ES_EVENT_TYPE_NOTIFY_CREATE file creation events
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: AGGREGATE count of new executables with non-zero resource forks per host per hour; APPLY time-series anomaly detection; IF model flags a spike as an anomaly: ALERT
  - question: Is there evidence of a 'download-fork-execute' sequence on a host?
    context: This question seeks to identify a common attack chain by correlating network and endpoint events. An adversary downloads a file, hides a payload in its resource fork, and then executes it. By creating a stateful rule that looks for this specific sequence (network download, resource fork write, process execution) on the same host within a short time window (e.g., 5 minutes), analysts can detect this entire payload delivery tactic with high confidence.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - Network egress points, User workstations (macOS), User download folders
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CORRELATE network and endpoint logs; IF on same host within 5 mins: (1) file_download event, (2) write to same file's resource_fork, (3) execution related to same file: ALERT
  - question: Do any 'download-fork-execute' sequences occur with an extremely short time delay, suggesting automation?
    context: This question refines the 'download-fork-execute' detection by analyzing the timing. A human user typically has a noticeable delay between downloading, modifying, and running a file. An automated script, however, will perform these actions almost instantaneously. By analyzing the time delta between download and execution, sequences that are unusually fast (e.g., in the lowest 5th percentile of all observed timings) can be flagged as highly suspicious and likely malicious automation.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - Network egress points, User workstations (macOS), User download folders
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each 'download-fork-execute' sequence: CALCULATE time_delta(execution - download); IF time_delta < historical_5th_percentile: ALERT as automated execution
  - question: Can a sequence analysis model detect anomalous event streams indicative of resource fork abuse?
    context: This question proposes using advanced machine learning, like an LSTM or Hidden Markov Model, to understand normal sequences of system events. The model learns what constitutes typical behavior (e.g., a user opening a browser, downloading a document, and opening it in a reader). An attack sequence like 'network_download -> resource_fork_write -> process_exec' would have a very low probability under this model and would be automatically flagged as a high-risk anomaly, allowing for detection of novel attack patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - ES_EVENT_TYPE_NOTIFY_WRITE file write events
      - ES_EVENT_TYPE_NOTIFY_EXEC process execution events
      - Network egress points, User workstations (macOS), User download folders
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: INPUT event stream (network, file, process) to sequence_analysis_model; IF model flags 'download -> fork_write -> exec' sequence as low-probability anomaly: ALERT