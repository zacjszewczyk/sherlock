name: "T1632: Subvert Trust Controls"
id: "c1b9b2a8-1b9b-4b0c-8c1a-9b1b9b2a8c1a"
description: "This playbook helps investigate whether an adversary is attempting to subvert trust controls on mobile devices to execute untrusted code or intercept communications. This involves detecting the installation of malicious Certificate Authorities (CAs) used for traffic interception, identifying unauthorized application sideloading on Android devices by monitoring for the 'Install unknown apps' permission, and spotting the deployment of malicious iOS configuration profiles that may alter device settings for nefarious purposes."
type: "technique"
related:
  - "TA0030: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are any installed mobile device certificates unauthorized or self-signed?"
    context: "Adversaries may install a malicious root Certificate Authority (CA) on a device to perform man-in-the-middle attacks, allowing them to decrypt and intercept otherwise secure TLS/SSL traffic. This question aims to identify such activity by comparing the SHA-256 hashes of all certificates installed on managed mobile devices against a curated allowlist of organizationally approved CAs. It also flags any certificate that is self-signed, a common attribute of malicious or unauthorized certificates."
    answer_sources:
      - "MDM logs"
      - "Zeek x509.log"
      - "Zeek ssl.log"
      - "Zeek conn.log"
      - "Corporate-managed mobile devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS Resolvers"
      - "SIEM"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each device in MDM_logs:
            FOR each certificate on device:
              IF certificate.sha256_hash NOT IN approved_ca_hash_allowlist:
                ALERT("Unauthorized CA installed", device, certificate)
              IF certificate.is_self_signed == TRUE:
                ALERT("Self-signed certificate installed", device, certificate)
  - question: "Is a mobile device communicating using a certificate from a statistically rare issuer?"
    context: "Legitimate TLS certificates are typically issued by a limited number of well-known and frequently observed CAs. An adversary might use a custom or obscure CA for their malicious activities. This question seeks to identify these outliers by analyzing network traffic logs (e.g., Zeek) to establish a baseline of common certificate issuers. It then alerts on new TLS sessions that use a certificate from an issuer whose frequency of appearance across the enterprise is in the bottom 1st percentile over a 30-day period, indicating a high likelihood of suspicious activity."
    answer_sources:
      - "MDM logs"
      - "Zeek x509.log"
      - "Zeek ssl.log"
      - "Zeek conn.log"
      - "Corporate-managed mobile devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS Resolvers"
      - "SIEM"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          issuer_counts = AGGREGATE issuer from zeek_x509_logs over last 30 days
          frequency_threshold = CALCULATE 1st_percentile(issuer_counts)
          FOR each new_tls_session in zeek_ssl_logs from mobile_ip_range:
            IF new_tls_session.issuer_frequency < frequency_threshold:
              ALERT("TLS session with rare certificate issuer", new_tls_session.device_ip, new_tls_session.issuer)
  - question: "Does a new TLS session from a mobile device exhibit characteristics of a malicious certificate based on a machine learning model?"
    context: "Sophisticated attackers may craft malicious certificates that evade simple checks. This question leverages a machine learning approach, such as a Random Forest classifier, to provide a more robust detection capability. The model is trained on a variety of features extracted from TLS sessions and certificate data (e.g., validity period, key length, issuer rarity, self-signed status). It scores new sessions in real-time, generating an alert when a session is highly likely to be malicious, allowing for the detection of subtle and complex threats."
    answer_sources:
      - "MDM logs"
      - "Zeek x509.log"
      - "Zeek ssl.log"
      - "Zeek conn.log"
      - "Corporate-managed mobile devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS Resolvers"
      - "SIEM"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each new_tls_session in zeek_ssl_logs from mobile_ip_range:
            features = EXTRACT_FEATURES(new_tls_session.certificate)
            malicious_score = random_forest_model.predict(features)
            IF malicious_score > 0.90:
              IF is_certificate_installed(new_tls_session.certificate, mdm_logs):
                ALERT("High-probability malicious TLS session detected", new_tls_session.device_ip, malicious_score)
  - question: "Has the 'Install unknown apps' permission been enabled on an Android device without an authorized change request?"
    context: "The 'Install unknown apps' permission on Android is a critical security setting that, when enabled, allows applications to be installed from outside the official Google Play Store (sideloading). Adversaries exploit this to install malware. This question verifies the legitimacy of this permission change by cross-referencing MDM logs with the change management system. An alert is triggered if the permission is enabled for a non-approved application without a corresponding, authorized change ticket, indicating a potential security breach."
    answer_sources:
      - "MDM logs"
      - "Mobile endpoint security agent logs"
      - "Change management system logs"
      - "Corporate-managed Android devices"
      - "Mobile Device Management (MDM) server"
      - "SIEM"
      - "Change Management Database (CMDB)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each config_change in mdm_logs where setting == 'install_unknown_apps' and value == 'enabled':
            IF config_change.app_package NOT IN app_exception_list:
              has_ticket = QUERY change_management_system for device=config_change.device, user=config_change.user in last 24 hours
              IF has_ticket == FALSE:
                ALERT("Unauthorized 'Install unknown apps' permission enabled", config_change.device, config_change.app_package)
  - question: "Is there a statistically significant increase in the number of devices allowing a specific application to install other unknown apps?"
    context: "While a single instance of enabling sideloading might be an isolated incident, a sudden increase in many devices granting this permission to the same application could signal a coordinated attack or a trojanized application spreading across the enterprise. This question uses statistical analysis to detect such trends. It establishes a historical baseline (mean and standard deviation) for the count of devices enabling this permission per app and alerts if the daily count exceeds a defined threshold (e.g., three standard deviations), highlighting a potential widespread campaign."
    answer_sources:
      - "MDM logs"
      - "Mobile endpoint security agent logs"
      - "Change management system logs"
      - "Corporate-managed Android devices"
      - "Mobile Device Management (MDM) server"
      - "SIEM"
      - "Change Management Database (CMDB)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each app_package in mdm_logs:
            baseline = CALCULATE 90-day mean and stddev of device_count with 'install_unknown_apps' for app_package
            today_count = GET current_day_count for app_package
            IF today_count > (baseline.mean + 3 * baseline.stddev):
              ALERT("Anomalous spike in 'Install unknown apps' permission for app", app_package, today_count)
  - question: "Does a device's configuration profile appear anomalous, with the 'Install unknown apps' permission being a key contributing factor?"
    context: "Adversaries often change multiple device settings in conjunction to facilitate their attack. For example, they might enable developer mode, ADB debugging, and 'Install unknown apps' simultaneously. This question uses an anomaly detection model like Isolation Forest to identify devices with an unusual combination of settings compared to the fleet's baseline. An alert is generated when a device is flagged as an outlier and the model identifies the 'Install unknown apps' permission as a primary reason for its high anomaly score, pointing to a likely compromised device."
    answer_sources:
      - "MDM logs"
      - "Mobile endpoint security agent logs"
      - "Change management system logs"
      - "Corporate-managed Android devices"
      - "Mobile Device Management (MDM) server"
      - "SIEM"
      - "Change Management Database (CMDB)"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each device in mdm_logs:
            features = EXTRACT_FEATURES(device.configuration)
            anomaly_score, contributing_factors = isolation_forest_model.predict(features)
            IF anomaly_score > threshold AND 'install_unknown_apps' IN contributing_factors:
              ALERT("Anomalous device configuration detected", device, anomaly_score)
  - question: "Is an unsigned or unapproved iOS configuration profile installed on a managed device?"
    context: "iOS configuration profiles (.mobileconfig) can be used to manage settings like Wi-Fi, VPN, email, and certificate trust policies. An adversary can deploy a malicious profile to redirect network traffic, install rogue CAs, or exfiltrate data. This question identifies this threat by querying MDM logs for all installed profiles and comparing their identifiers against an allowlist of approved profiles. It also specifically alerts on any profile that is unsigned, as this is a strong indicator of a malicious or unauthorized profile."
    answer_sources:
      - "MDM logs"
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Corporate-managed iOS devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each device in mdm_logs:
            FOR each profile on device:
              IF profile.identifier NOT IN approved_profile_allowlist:
                ALERT("Unapproved iOS profile installed", device, profile.identifier)
              IF profile.is_signed == FALSE:
                ALERT("Unsigned iOS profile installed", device, profile.identifier)
  - question: "Has an iOS configuration profile been downloaded from a suspicious domain (newly observed or high entropy)?"
    context: "Adversaries frequently use newly registered domains (NRDs) or algorithmically generated domains (DGA) to host malicious payloads like configuration profiles, as these domains are less likely to be on blocklists. This question analyzes network logs to detect downloads of '.mobileconfig' files from suspicious sources. It alerts when the source domain is either newly observed (e.g., seen for the first time in 30 days) or has a high Shannon entropy score, which is characteristic of machine-generated domain names."
    answer_sources:
      - "MDM logs"
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Corporate-managed iOS devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          FOR each file_download in network_logs where file_extension == '.mobileconfig':
            domain = file_download.source_domain
            IF is_domain_new(domain, 30_days) == TRUE:
              ALERT("iOS profile downloaded from newly observed domain", domain, file_download.destination_ip)
            IF shannon_entropy(domain) > 3.5:
              ALERT("iOS profile downloaded from high-entropy domain", domain, file_download.destination_ip)
  - question: "Has there been an anomalous spike in the number of iOS configuration profile downloads across the network?"
    context: "A mass-distribution campaign of a malicious configuration profile would likely result in a sudden, abnormal increase in '.mobileconfig' file downloads across the network. This question employs time-series forecasting models (like SARIMA or Prophet) to learn the normal daily and weekly patterns of these downloads. An anomaly alert is triggered if the observed download count in a given hour significantly exceeds the model's predicted upper bound (e.g., the 99% prediction interval), indicating a potential widespread attack in progress."
    answer_sources:
      - "MDM logs"
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Zeek conn.log"
      - "Corporate-managed iOS devices"
      - "Mobile Device Management (MDM) server"
      - "Network egress points/Internet Gateway"
      - "DNS servers"
    range: "last 90 days"
    queries:
      - search_technology: "Pseudocode"
        query: |
          hourly_counts = AGGREGATE count of '.mobileconfig' downloads per hour from network_logs
          prediction_interval = time_series_model.predict_upper_bound(current_hour)
          current_hour_count = hourly_counts[current_hour]
          IF current_hour_count > prediction_interval:
            ALERT("Anomalous spike in .mobileconfig downloads", current_hour_count)