name: T1574.012: COR_PROFILER
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook investigates the abuse of the COR_PROFILER environment variable, a mechanism in the .NET Framework that allows a profiler DLL to be loaded into a process. Adversaries exploit this for various malicious purposes, including establishing persistence, escalating privileges, and evading defenses. The investigation focuses on detecting suspicious registry modifications that set the profiler, analyzing the creation of .NET processes with unexpected profilers, monitoring for subsequent malicious activity like C2 communication, and identifying attempts to hijack security tools or bypass User Account Control (UAC).
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has a COR_PROFILER registry key been modified to point to a known malicious DLL or CLSID?
    context: This question uses a symbolic detection approach to find direct evidence of persistence. Adversaries modify `COR_PROFILER` registry keys to load a malicious DLL into .NET processes. This query searches for these specific registry modifications and cross-references the specified DLL's hash or the profiler's CLSID with threat intelligence feeds. A match is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH RegistryEvents WHERE (TargetObject CONTAINS 'COR_PROFILER' OR TargetObject CONTAINS 'COR_PROFILER_PATH') | EXTRACT DllPath, CLSID | ENRICH DllPathHash, CLSIDReputation | FILTER DllPathHash='malicious' OR CLSIDReputation='bad'
  - question: Have any statistically rare profiler DLLs been registered via COR_PROFILER modifications?
    context: This question uses a statistical approach to find anomalies. It involves baselining all legitimate profiler DLLs and their locations in the environment. The query then flags any newly registered profiler DLL that is statistically uncommon (e.g., present on very few endpoints), is located in an unusual directory (like Temp or Public folders), or has a high-entropy file path, which can indicate obfuscation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH RegistryEvents WHERE TargetObject CONTAINS 'COR_PROFILER' | STATS count BY DllPath, Host | JOIN with baseline_profilers | FILTER isRare=true OR isInUnusualPath=true
  - question: Has a machine learning model identified a COR_PROFILER registry modification as likely malicious?
    context: This question leverages a machine learning model to score the risk of COR_PROFILER registry changes. The model is trained on features from registry events, such as the parent process that made the change (e.g., powershell.exe), the user context, and characteristics of the DLL path. A high score from the model indicates that the modification strongly resembles known malicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from Domain Controllers, Application Servers, Developer Workstations, Critical Windows Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH RegistryEvents WHERE TargetObject CONTAINS 'COR_PROFILER' | EXTRACT features | INVOKE MLModel:COR_Profiler_Abuse | FILTER score > 0.8
  - question: Was a .NET process created with a profiler DLL that is not on the established allowlist?
    context: This question aims to detect the unauthorized loading of profilers. It triggers on process creation events where profiling is enabled (`COR_ENABLE_PROFILING=1`) and a `COR_PROFILER` is set. The specified profiler DLL is then checked against a curated allowlist of legitimate, expected profilers. An alert is generated for any DLL not on this list.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sourced from All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreationEvents WHERE (EnvironmentVars CONTAINS 'COR_ENABLE_PROFILING=1' AND EnvironmentVars CONTAINS 'COR_PROFILER') | EXTRACT ProfilerDLL | FILTER ProfilerDLL NOT IN (allowlist_profilers)
  - question: Has a .NET process with profiling enabled shown anomalous characteristics, such as high command-line entropy or a rare parent process?
    context: This question uses statistical analysis to spot suspicious profiled processes. For all processes launched with profiling enabled, it calculates the entropy of the command line and profiler path to detect obfuscation. It also analyzes parent-child process relationships, flagging instances where a common application (e.g., Microsoft Word) unexpectedly spawns a .NET process with a profiler.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sourced from All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreationEvents WHERE (EnvironmentVars CONTAINS 'COR_PROFILER') | CALCULATE CommandLineEntropy, ProfilerPathEntropy | PROFILE ParentChildRelationships | FILTER CommandLineEntropy > 4.5 OR isRareParent=true
  - question: Has an unsupervised machine learning model detected an anomalous .NET process creation event involving COR_PROFILER?
    context: This question uses an unsupervised learning model (like an autoencoder) to find novel or evasive threats. The model is trained on the features of legitimate process creation events. When a new event involving COR_PROFILER occurs, the model attempts to reconstruct it. A high reconstruction error signifies a major deviation from normal behavior, suggesting the process is anomalous and potentially malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sourced from All Windows Endpoints and Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreationEvents WHERE (EnvironmentVars CONTAINS 'COR_PROFILER') | EXTRACT features | INVOKE ML_Autoencoder:Process_Anomaly | FILTER reconstruction_error > threshold
  - question: Did a profiled .NET process initiate network connections to a known command-and-control server?
    context: This question directly links the use of a profiler to malicious network activity. It correlates process creation events where profiling is enabled with subsequent network connections made by that same process. The destination IP address or domain is then checked against threat intelligence feeds for known C2 infrastructure.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sourced from Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreationEvents(Sysmon EID 1) WHERE Env CONTAINS 'COR_PROFILER' | JOIN PID with NetworkEvents(Sysmon EID 3) | ENRICH DestinationIP, DestinationDomain | FILTER Reputation='malicious_c2'
  - question: Is a profiled .NET process exhibiting network beaconing behavior or using a rare TLS fingerprint?
    context: This question seeks to identify C2 communications through statistical analysis of network traffic. For connections from profiled processes, it looks for low standard deviation in packet timing and size, which indicates periodic beaconing. For encrypted traffic, it compares the TLS (JA3/JA3S) fingerprint against a baseline, flagging fingerprints that are rare or associated with known malware.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sourced from Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH NetworkEvents FROM profiled_processes | STATS stdev(inter_arrival_time), stdev(bytes) BY SrcIP, DstIP | FILTER stdev < low_threshold | OR | SEARCH TLSEvents(Zeek ssl.log) FROM profiled_processes | FILTER isRare(JA3) OR isKnownBad(JA3)
  - question: Has a time-series or clustering model detected anomalous network patterns from a profiled .NET process?
    context: This question applies machine learning to network data to find C2 activity that might evade simpler checks. A time-series model can detect sudden deviations in traffic volume from a profiled process. Alternatively, a clustering algorithm can group connections by their features, isolating clusters of C2-like behavior (e.g., long duration, small periodic transfers) from benign traffic.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Sourced from Network Egress Points (Firewalls, Proxies), DNS Servers, All Windows Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH NetworkTraffic FROM profiled_processes | INVOKE ML_TimeSeries:Traffic_Volume_Anomaly | FILTER isAnomaly=true | OR | INVOKE ML_DBSCAN:Connection_Clustering | FILTER cluster='C2-like'
  - question: Was a COR_PROFILER key set to a DLL in a user-writable directory, followed shortly by a high-integrity .NET process launch?
    context: This question looks for a common UAC bypass pattern. An adversary first sets a profiler registry key to point to a malicious DLL placed in an uncontrolled location (like `%APPDATA%`). Then, they trigger a legitimate, auto-elevating .NET application. This sequence causes the high-integrity process to load the malicious DLL, effectively escalating privileges.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations, Terminal Servers, Citrix/VDI Environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEQUENCE [SEARCH RegistrySet WHERE TargetObject CONTAINS 'COR_PROFILER' AND Value CONTAINS user_writable_path] by Host, User within 5m [SEARCH ProcessCreate WHERE Integrity='High' AND isDotNet=true]
  - question: Did a process with an unexpectedly low integrity level modify a COR_PROFILER registry key?
    context: This question uses statistical baselining to find anomalous behavior. Typically, COR_PROFILER keys are modified by trusted installers running with SYSTEM integrity. An alert is triggered if a process with a lower integrity level, such as 'Medium' (the default for a standard user), performs this modification, as it may be a precursor to a privilege escalation attack.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations, Terminal Servers, Citrix/VDI Environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH RegistrySet WHERE TargetObject CONTAINS 'COR_PROFILER' | JOIN with process_integrity_baseline | FILTER IntegrityLevel < expected_level
  - question: Has a sequence-based machine learning model detected a pattern indicative of a COR_PROFILER UAC bypass?
    context: This question uses a sophisticated ML model (like an RNN) trained to recognize normal sequences of user and system events. The model can flag a sequence as anomalous if it matches the UAC bypass pattern: a low-privilege process modifies a user-scope profiler key, immediately followed by the execution of a high-privilege .NET application by the same user.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations, Terminal Servers, Citrix/VDI Environments
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH EventStreams by User | INVOKE ML_RNN:Event_Sequence_Analysis | FILTER prediction='UAC_Bypass_via_COR_PROFILER'
  - question: Has a Medium-integrity process set the HKCU COR_PROFILER key, immediately followed by a High-integrity .NET process launch by the same user?
    context: This question looks for a very specific, high-confidence event chain for privilege escalation. It uses a correlation rule to detect, for the same user logon session and within a tight 60-second window, a registry set event (Sysmon EID 13) from a Medium-integrity process on `HKCU\\Environment\\COR_PROFILER`, followed by a process creation event (Sysmon EID 1) for a High-integrity .NET process.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations with UAC enabled
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEQUENCE by LogonId within 60s [SEARCH RegistrySet(EID 13) WHERE TargetObject='HKCU\\Environment\\COR_PROFILER' AND Integrity='Medium'] [SEARCH ProcessCreate(EID 1) WHERE isDotNet=true AND Integrity='High']
  - question: Is there a statistically anomalous short time delay between an HKCU COR_PROFILER modification and a high-integrity process launch?
    context: This question uses statistical timing analysis to detect automated exploits. It profiles the normal time delay between user registry modifications and high-integrity process launches. An event where this time delta is extremely short (e.g., under a second) is a statistical outlier, falling into a low percentile of the baseline distribution and strongly suggesting an automated attack script rather than normal user activity.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations with UAC enabled
    range: last 90 days
    queries:
      - type: pseudocode
        query: CORRELATE RegistrySet(HKCU) and ProcessCreate(High-Integrity) by User | CALCULATE time_delta | JOIN with time_delta_baseline | FILTER percentile(time_delta) < 5
  - question: Has a graph-based analysis detected a privilege escalation attack path involving COR_PROFILER?
    context: This question models system activity as a graph to discover complex attack paths. Processes, users, and registry keys are nodes, and their interactions are edges. A known malicious pattern for privilege escalation (e.g., Medium-integrity process modifies HKCU key, which is then inherited by a High-integrity process) can be defined as a specific subgraph. This query actively searches for this malicious pattern in the activity graph.
    answer_sources:
      - Sysmon Event ID 1
      - Sysmon Event ID 13
      - Sourced from User Workstations with UAC enabled
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH GraphDB for pattern: (MediumProcess)-[:MODIFIES]->(COR_PROFILER_Key)<-[:INHERITS]-(HighProcess) WHERE MediumProcess.user == HighProcess.user
  - question: Did an elevated, profiled .NET process spawn a suspicious child process or perform a privileged action like creating a user?
    context: This question looks for post-escalation activity. After an adversary has escalated privileges using a profiled .NET process, they will often spawn a shell (cmd.exe, powershell.exe) or perform administrative actions. This query monitors for these specific child processes or for security events like user creation (Event ID 4720) or group modification (Event ID 4732) originating from a profiled process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4704
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Sourced from Active Directory Domain Controllers, Member Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreate where ParentImage IN profiled_processes AND (Image CONTAINS 'cmd.exe' OR Image CONTAINS 'powershell.exe') OR SEARCH SecurityEvents (4720, 4732) where SubjectProcessName IN profiled_processes
  - question: Has a profiled .NET application spawned a statistically rare child process?
    context: This question uses behavioral baselining to detect anomalies. For each major .NET application (like mmc.exe), a profile of its normal child processes is created. The query then flags any instance where a profiled version of that application spawns a child process that is a statistical outlier (e.g., never seen before or seen in <1% of historical instances), indicating a deviation from normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4704
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Sourced from Active Directory Domain Controllers, Member Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreate where ParentImage IN profiled_processes | JOIN with parent_child_baseline | FILTER isRareChild=true
  - question: Has a machine learning classifier identified a suspicious parent-child process relationship originating from a profiled .NET process?
    context: This question uses a supervised ML model to identify malicious process lineage. The model is trained on features of known benign and malicious parent-child relationships (parent image, child image, command line, etc.). When a profiled, high-privilege .NET process spawns a child, the model classifies the relationship. A 'suspicious' classification is a strong indicator of post-privilege escalation activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4720
      - Windows Event ID 4732
      - Windows Event ID 4704
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Sourced from Active Directory Domain Controllers, Member Servers, Privileged Access Workstations
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessCreate where ParentImage IN profiled_processes | EXTRACT features | INVOKE MLModel:Parent_Child_Classifier | FILTER prediction='suspicious'
  - question: Has a known security tool process loaded a profiler DLL that is not digitally signed by the vendor?
    context: This question looks for direct evidence of defense evasion by hijacking security tools. It triggers when a DLL is loaded (Sysmon EID 7) into a process known to be a security agent (e.g., MsMpEng.exe). The query then checks if this loaded DLL is a profiler and if its digital signature is invalid or does not belong to the security vendor or Microsoft, which would be highly indicative of tampering.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sourced from All endpoints with EDR/AV installed, Security Management Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ImageLoad(EID 7) WHERE Image IN (security_tools_list) AND isProfiler(LoadedImage) | VALIDATE Signature(LoadedImage) | FILTER Signature.Status != 'Valid' OR Signature.Issuer NOT IN (vendor_list)
  - question: Has a security tool process loaded a statistically rare profiler DLL?
    context: This question aims to find defense evasion by identifying anomalous DLL loads in security products. It establishes a baseline of all DLLs normally loaded by each security tool across the enterprise. An alert is generated if a profiler DLL is loaded by a security tool and that specific DLL is statistically rare (e.g., loaded on only one endpoint) or is loaded from a non-standard file path.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sourced from All endpoints with EDR/AV installed, Security Management Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ImageLoad WHERE Image IN (security_tools_list) AND isProfiler(LoadedImage) | JOIN with dll_load_baseline | FILTER isRare=true OR isNonStandardPath=true
  - question: Has a machine learning model classified a profiler DLL loaded by a security tool as malicious?
    context: This question uses a file-based ML classifier to assess the risk of a DLL used for profiling a security tool. When a profiler DLL is loaded, its features (entropy, PE header data, imported functions, signature, etc.) are extracted and fed to a model trained to distinguish between benign and malicious files. A high maliciousness score is a strong signal of a defense evasion attempt.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 7
      - Sourced from All endpoints with EDR/AV installed, Security Management Servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ImageLoad WHERE Image IN (security_tools_list) AND isProfiler(LoadedImage) | EXTRACT features from LoadedImage | INVOKE MLModel:DLL_Classifier | FILTER score > 0.9
  - question: After a COR_PROFILER registry modification, did the affected endpoint fail a synthetic security test?
    context: This question provides a functional test to confirm if defenses have been impaired. After a suspicious COR_PROFILER registry modification is detected on a host, an automated test is triggered (e.g., simulating an EICAR file download). If the security tool on that endpoint fails to generate the expected alert in the SIEM, it serves as high-confidence confirmation that the defense tool has been successfully disabled or bypassed.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event Logs
      - Zeek logs
      - Sourced from SIEM/Log Aggregator, All Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON DETECTION of RegistrySet(COR_PROFILER) on Host | TRIGGER synthetic_test on Host | MONITOR for expected_alert from Host in SIEM within 5m | IF no_alert THEN ALERT 'Defense Impaired'
  - question: Was there a statistically significant drop in security telemetry from an endpoint after a COR_PROFILER modification?
    context: This question uses log volume as a proxy for security tool health. It monitors the event rate (events per minute) for each host in the SIEM. If a host has a COR_PROFILER modification event, this query calculates the Z-score of its log volume in the following hours compared to its 30-day baseline. A large negative Z-score (e.g., < -3) indicates a significant, anomalous drop in telemetry, suggesting the security agent was disabled.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event Logs
      - Zeek logs
      - Sourced from SIEM/Log Aggregator, All Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON DETECTION of RegistrySet(COR_PROFILER) on Host | CALCULATE z_score(log_volume_per_minute) for Host against 30d_baseline | FILTER z_score < -3
  - question: Did a time-series model forecast a significant deviation in log volume from an endpoint following a COR_PROFILER event?
    context: This question uses a predictive model to detect security tool tampering. A time-series model (like Prophet or LSTM) learns the normal daily and weekly logging cycles for each host. After a suspicious COR_PROFILER event occurs on a host, this query compares the actual incoming log volume to the model's forecast. A large, unexpected drop between the forecast and actual volume triggers an alert.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event Logs
      - Zeek logs
      - Sourced from SIEM/Log Aggregator, All Endpoints
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON DETECTION of RegistrySet(COR_PROFILER) on Host | FETCH actual_log_volume and predicted_log_volume from MLModel:Host_Telemetry_Forecast | IF actual_log_volume << predicted_log_volume THEN ALERT 'Anomalous Log Drop'
  - question: Did a security tool process terminate unexpectedly or its service stop after being profiled?
    context: This question looks for evidence of a security tool being crashed or stopped by a malicious profiler. A correlation rule is used to first identify a security tool process launched with profiling enabled. It then monitors for a subsequent termination event (Sysmon EID 5) with an error code, a service control manager event (ID 7034) indicating a crash, or an access event (Sysmon EID 10) where another process attempts to terminate it.
    answer_sources:
      - Windows Event ID 4689
      - Windows System Event Log Event ID 7034
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 10
      - Sourced from All endpoints with EDR/AV installed
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEQUENCE [SEARCH ProcessCreate(EID 1) WHERE Image IN security_tools AND Env CONTAINS 'COR_PROFILER'] by PID within 1h [SEARCH ProcessTerminate(EID 5) OR SEARCH ServiceCrash(EID 7034) OR SEARCH ProcessAccess(EID 10) with Terminate]
  - question: Did a profiled security tool process exhibit a statistically short uptime before terminating?
    context: This question uses statistical analysis of process lifetime to detect induced crashes. It calculates the mean time to failure (MTTF) or average uptime for security tool processes across the environment. If an instance of a security tool that was launched with a profiler terminates in a time frame that is a statistical outlier (e.g., in the bottom 5th percentile of all historical uptimes), it is flagged as a potential crash caused by a malicious profiler.
    answer_sources:
      - Windows Event ID 4689
      - Windows System Event Log Event ID 7034
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 10
      - Sourced from All endpoints with EDR/AV installed
    range: last 90 days
    queries:
      - type: pseudocode
        query: SEARCH ProcessTerminate for security_tools that were profiled | CALCULATE uptime | JOIN with uptime_baseline | FILTER percentile(uptime) < 5
  - question: Has a Markov Chain model detected an anomalous state transition for a security process after being profiled?
    context: This question uses a state transition model to detect abnormal behavior in security tools. A Markov Chain model is trained on the normal probabilities of a process transitioning between states (e.g., 'running' to 'scanning', 'running' to 'stopped'). An alert is triggered if, after a profiling event, the process makes an anomalous transition, such as 'running' directly to 'crashed', which has a very low probability in the model.
    answer_sources:
      - Windows Event ID 4689
      - Windows System Event Log Event ID 7034
      - Sysmon Event ID 1
      - Sysmon Event ID 5
      - Sysmon Event ID 10
      - Sourced from All endpoints with EDR/AV installed
    range: last 90 days
    queries:
      - type: pseudocode
        query: ON DETECTION of profiling_event for security_tool | MONITOR for next state_change | INVOKE MLModel:Markov_Chain_Security_Process | IF transition_probability < low_threshold THEN ALERT 'Anomalous State Transition'