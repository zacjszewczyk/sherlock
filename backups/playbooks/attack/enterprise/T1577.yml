name: T1577: Compromise Application Executable
id: e4b3c2d1-0f8e-4a7b-9c6d-5e2f1a8b0c9a
description: |-
  Has an adversary established persistence by modifying a legitimate application executable on a mobile device? This playbook helps investigate this by looking for several key indicators. First, it checks if the cryptographic hash of an installed application package mismatches the known-good hash from an official manifest, which suggests unauthorized modification [2]. Second, it looks for static analysis artifacts within Android Application Packages (APKs) that are characteristic of the Janus vulnerability (CVE-2017-13156), where data is appended after the ZIP central directory but before the DEX file [1]. Third, it analyzes network traffic from trusted applications for behavior inconsistent with their established profiles, such as communicating with malicious domains, using high-entropy DNS queries indicative of DGA, or exhibiting anomalous data transfer volumes.
type: technique
related:
  - TA0028: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any installed applications on managed mobile devices showing a file hash that mismatches the approved hash in the organizational application manifest?
    context: This question aims to detect unauthorized modifications to legitimate applications. An adversary might compromise an application by rebuilding it with malicious code, which would alter its cryptographic hash. By comparing the hash of installed applications against a known-good manifest, we can identify these potentially compromised executables, a key indicator of persistence [2].
    answer_sources:
      - MDM application inventory report
      - Mobile EDR agent logs
      - Organizational Application Manifest
      - Managed mobile device fleet (iOS, Android)
      - Mobile Device Management (MDM) or Unified Endpoint Management (UEM) server
      - Organizational application manifest repository.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each device in MDM/EDR logs:
            FOR each application on device:
              manifest_hash = LOOKUP hash in app_manifest WHERE app_id = current_app_id AND app_version = current_app_version
              IF current_app_hash != manifest_hash:
                ALERT on device, application, and hashes
  - question: Are any devices running rare or non-standard versions of applications compared to the rest of the fleet?
    context: This question identifies outliers in application versions across the organization. An adversary might patch an application to introduce a vulnerability or backdoor, resulting in a unique version number or build. By flagging versions with very low installation counts, we can uncover these potentially compromised, non-standard application instances that might otherwise go unnoticed [2].
    answer_sources:
      - MDM application inventory report
      - Mobile EDR agent logs
      - Organizational Application Manifest
      - Managed mobile device fleet (iOS, Android)
      - Mobile Device Management (MDM) or Unified Endpoint Management (UEM) server
      - Organizational application manifest repository.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          app_counts = COUNT installations of each app_version GROUP BY app_id
          total_devices = COUNT all devices
          FOR each app_id, app_version in app_counts:
            prevalence = app_counts[app_id, app_version] / total_devices
            IF prevalence < threshold (e.g., 0.005):
              ALERT on app_id, app_version, and devices with this version
  - question: Do any devices have an unusual combination of installed applications compared to the baseline of the entire fleet?
    context: This question uses unsupervised machine learning to detect anomalous software profiles. Adversaries might install a combination of tools or modified apps that, while individually legitimate, are unusual when found together. By modeling the normal combinations of applications across all devices, we can identify devices with statistically improbable software sets, which could indicate compromise [2].
    answer_sources:
      - MDM application inventory report
      - Mobile EDR agent logs
      - Organizational Application Manifest
      - Managed mobile device fleet (iOS, Android)
      - Mobile Device Management (MDM) or Unified Endpoint Management (UEM) server
      - Organizational application manifest repository.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          device_profiles = CREATE feature vector of installed apps for each device
          model = TRAIN IsolationForest on device_profiles
          FOR each device:
            anomaly_score = model.PREDICT(device_profile)
            IF anomaly_score > threshold:
              ALERT on device and its unusual app profile
  - question: Are any scanned Android Application Package (APK) files structured in a way that indicates exploitation of the Janus vulnerability (CVE-2017-13156)?
    context: This question seeks to identify a specific technique used to compromise APKs. The Janus vulnerability allows an attacker to inject malicious code into a legitimate application without breaking its signature. This is achieved by adding data between the ZIP central directory and the DEX file. A static analysis rule can detect this structural anomaly, directly pointing to a likely compromise [1].
    answer_sources:
      - Raw APK files from endpoints
      - Mobile App Vetting (MAV) static analysis reports
      - Digital forensic image of device storage
      - Managed Android device fleet
      - Application sandbox environment
      - Mobile security analysis platforms.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each APK file:
            extra_data = PARSE bytes between end_of_central_directory and start_of_dex_file
            IF size(extra_data) > 0:
              ALERT on APK for potential Janus exploit
  - question: Do any APK files show a statistically significant amount of unexpected data appended to the file?
    context: This question looks for anomalous file structures in APKs. By calculating the difference ($$ \Delta $$) between the file's on-disk size and its expected size based on ZIP metadata, we can quantify unexpected appended data. An APK with a $$ \Delta $$ value that is a statistical outlier compared to a historical baseline of all scanned apps may have been tampered with, for instance via the Janus vulnerability [1].
    answer_sources:
      - Raw APK files from endpoints
      - Mobile App Vetting (MAV) static analysis reports
      - Digital forensic image of device storage
      - Managed Android device fleet
      - Application sandbox environment
      - Mobile security analysis platforms.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          historical_deltas = GET historical distribution of (FileSize - (Offset_CD + Size_CD)) for all APKs
          FOR each new APK:
            delta = APK.FileSize - (APK.Offset_CentralDirectory + APK.Size_CentralDirectory)
            IF delta > 99.9th_percentile(historical_deltas):
              ALERT on APK with outlier delta value
  - question: Can we classify any APKs as malicious based on their binary structure and features?
    context: This question proposes using a supervised machine learning model to proactively identify malicious APKs, including those compromised via file structure manipulation. By training a model on features like header flags, section counts, file size discrepancies, and entropy from a labeled dataset of benign and malicious APKs (including Janus-exploited samples), we can automatically classify and score new applications for risk [1].
    answer_sources:
      - Raw APK files from endpoints
      - Mobile App Vetting (MAV) static analysis reports
      - Digital forensic image of device storage
      - Managed Android device fleet
      - Application sandbox environment
      - Mobile security analysis platforms.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          labeled_dataset = CREATE feature set from known benign and malicious APKs
          model = TRAIN classification model (e.g., RandomForest) on labeled_dataset
          FOR each new APK:
            features = EXTRACT feature set from APK
            risk_score, classification = model.PREDICT(features)
            IF classification == 'malicious' or risk_score > threshold:
              ALERT on APK
  - question: Is a trusted, whitelisted mobile application communicating with a known malicious domain or IP address?
    context: This question aims to detect when a compromised application communicates with adversary infrastructure. Even if an application is on an allowlist, if it has been modified, it may initiate connections to command-and-control (C2) servers. Correlating network logs with threat intelligence feeds allows us to identify this suspicious behavior, indicating the trusted app is no longer behaving as expected.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - CASB logs
      - Mobile EDR network logs
      - Threat Intelligence Feed
      - Corporate Wi-Fi network gateways
      - VPN egress points
      - DNS resolvers
      - Cloud Access Security Broker (CASB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each network_connection in logs:
            IF network_connection.source_app is 'trusted':
              is_malicious = CHECK threat_intel_feed for network_connection.destination_ip or network_connection.destination_domain
              IF is_malicious:
                ALERT on device, application, and malicious destination
  - question: Is any trusted mobile application exhibiting anomalous network behavior, such as unusual data volumes or potential DGA activity?
    context: This question establishes a baseline of normal network activity for each application to detect deviations that could signal a compromise. Adversaries may use a compromised app to exfiltrate data (causing high data transfer volumes) or communicate with C2 servers using Domain Generation Algorithms (DGAs), which produce high-entropy DNS queries. Alerting on statistical deviations from the norm helps uncover these covert activities.
    answersources:
      - Zeek conn.log
      - Zeek dns.log
      - CASB logs
      - Mobile EDR network logs
      - Threat Intelligence Feed
      - Corporate Wi-Fi network gateways
      - VPN egress points
      - DNS resolvers
      - Cloud Access Security Broker (CASB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          // Baseline and check data volume
          baseline_bytes = GET 95th_percentile of total_bytes per session for each app over last 30 days
          IF new_session.total_bytes > baseline_bytes[new_session.app]:
            ALERT on anomalous data volume
          // Baseline and check DNS entropy
          baseline_entropy = GET avg + 3*stddev of DNS query entropy for each app over last 30 days
          IF new_dns_query.entropy > baseline_entropy[new_dns_query.app]:
            ALERT on potential DGA activity
  - question: Does the time-series pattern of an application's network activity deviate significantly from its learned normal behavior?
    context: This question uses an LSTM Autoencoder, a type of recurrent neural network, to model the complex temporal patterns of an application's network traffic. This approach can detect subtle anomalies in the sequence and volume of network activity over time that simpler statistical methods might miss. A high reconstruction error from the model indicates the current behavior is unlike anything seen in its training data, suggesting a potential compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - CASB logs
      - Mobile EDR network logs
      - Threat Intelligence Feed
      - Corporate Wi-Fi network gateways
      - VPN egress points
      - DNS resolvers
      - Cloud Access Security Broker (CASB).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |-
          FOR each device-app pair:
            model = TRAIN LSTM Autoencoder on historical time-series network data (bytes_in, bytes_out, connections_per_minute)
            live_data = GET current time-series network data
            reconstruction = model.PREDICT(live_data)
            reconstruction_error = CALCULATE difference between live_data and reconstruction
            IF reconstruction_error > dynamic_threshold:
              ALERT on anomalous network behavior pattern