name: T1222: File and Directory Permissions Modification
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify when an adversary modifies file or directory permissions to evade defenses and access protected resources. This can manifest as known malicious processes spawning command-line utilities (e.g., icacls, chmod), the use of arguments that grant overly broad permissions (e.g., Everyone:F), direct modification of Discretionary Access Control Lists (DACLs) on critical system files, or a rapid sequence of events where a permission change is immediately followed by the file's modification or execution.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a known malicious process or a process flagged by security tools spawning command-line utilities (icacls.exe, cacls.exe, takeown.exe, chmod, fsutil.exe) to modify file or directory permissions?
    context: This action aims to find direct evidence of a malicious actor using standard system tools for defense evasion. By correlating process creation events with security alerts or threat intelligence, we can identify when a compromised process attempts to alter permissions, a common step to access sensitive data or establish persistence.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Windows Defender Event ID 1116. This data should be collected from Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), and endpoint devices of privileged users (e.g., Domain Admins, Developers).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          JOIN process_creation_events ON hostname WITH security_alerts ON hostname 
          WHERE (process_creation_events.timestamp - security_alerts.timestamp) < 5_minutes 
          AND process_creation_events.process_name IN ('icacls.exe', 'cacls.exe', 'takeown.exe', 'chmod', 'fsutil.exe') 
          AND (process_creation_events.parent_hash IN known_bad_hashes OR process_creation_events.parent_name == security_alerts.process_name).
  - question: Are file permission modification utilities being executed by uncommon or rare parent processes?
    context: This question helps identify anomalous behavior by baselining normal administrative activity. Legitimate use of tools like icacls.exe is often initiated by predictable parent processes (e.g., explorer.exe, cmd.exe). An adversary might use a custom script or a different, less common process to launch these tools, which would appear as a statistical outlier.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1. This data should be collected from Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), and endpoint devices of privileged users (e.g., Domain Admins, Developers).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SELECT parent_process, COUNT(*) FROM process_creation_events 
          WHERE process_name IN ('icacls.exe', 'cacls.exe', 'takeown.exe', 'chmod', 'fsutil.exe') GROUP BY parent_process. 
          Calculate frequency distribution and ALERT if parent_process_frequency < 5th_percentile.
  - question: Can machine learning models identify malicious file permission modifications based on contextual features of the execution event?
    context: This question explores a more advanced, proactive detection method. By training a model on features like parent process, command-line characteristics, user context, and time of day, we can create a system that scores the likelihood of malicious intent for each permission change event, potentially catching novel or obfuscated attacks that simpler rules might miss.
    answer_sources:
      - Sysmon Event ID 1. This data should be collected from Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), and endpoint devices of privileged users (e.g., Domain Admins, Developers).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          EXTRACT features (parent_process, cmd_length, cmd_entropy, user, hour) from process_creation_events. 
          INPUT features into trained_classification_model. 
          ALERT if model_score > 0.9.
  - question: Are command-line utilities being used with specific arguments that grant broad, insecure permissions (e.g., 'Everyone:F', 'chmod 777') to sensitive files or directories?
    context: This question focuses on the specific commands used by an adversary. Attackers often grant overly permissive access to files or directories to ensure their malware can execute or that they can access protected data. Searching for these specific, high-risk command-line patterns is a direct way to detect this technique.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1. This data should be collected from system configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares, and persistence locations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH process_creation_events.command_line FOR REGEX `/(icacls|cacls).*(Everyone|Authenticated Users|Users):(F|M|W)/i` OR `/chmod\s+(777|a\+rwx)/` OR `/takeown\s+\/f/`. 
          INCREASE severity if target_path is in critical_directory_list.
  - question: Is there evidence of file permission utilities targeting files or directories with unusually complex or randomized paths?
    context: Adversaries may place malicious files in directories with randomized names to avoid detection based on static paths. This question aims to identify such behavior by analyzing the complexity (entropy) of the target file paths. A high entropy score compared to a historical baseline can indicate an attempt at obfuscation.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1. This data should be collected from system configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares, and persistence locations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each permission_utility_event, CALCULATE entropy of target_path. 
          BUILD baseline distribution of entropy scores. 
          ALERT if new_event.path_entropy > 95th_percentile of baseline.
  - question: Do permission modification commands appear in unusual sequences within a user's command history, suggesting scripted or automated malicious activity?
    context: This question analyzes the context of a command's execution relative to other commands. A legitimate administrator's command sequence might differ significantly from an attacker's. For example, a permission change immediately following a download from an unknown source (wget/curl) is highly suspicious. This approach helps find malicious intent by looking at the "story" of the user's actions.
    answer_sources:
      - PowerShell logs, bash history. This data should be collected from system configuration directories (e.g., C:\Windows\System32, /etc/), application installation directories, user profile directories, network file shares, and persistence locations.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          MODEL command sequences from terminal_history_logs to establish normal transitions. 
          SCORE new command sequences in real-time. 
          ALERT if a permission_modification_command occurs in a low-probability sequence (e.g., after `curl` from uncategorized domain).
  - question: Are permissions being changed on critical, monitored assets (e.g., sethc.exe, GPOs, key registry hives) by unauthorized users?
    context: This is a high-fidelity detection method focused on protecting crown-jewel assets. By pre-defining a list of critical files and authorized users, any deviation from this policy becomes a high-severity alert. This helps security teams immediately focus on changes that pose a direct threat to system integrity or security controls.
    answer_sources:
      - Windows Event ID 4670. This data should be collected from Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs), directories with security tool binaries, and system binary directories (C:\Windows\System32).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          SEARCH permission_change_events (EventID 4670) 
          WHERE object_name IN critical_asset_watchlist AND user_name NOT IN authorized_admin_list. 
          TRIGGER high-severity alert.
  - question: Are there 'first-seen' or rare combinations of users, processes, and objects involved in permission change events?
    context: This question focuses on detecting novelty. Over time, an environment develops patterns of normal administrative activity. A permission change performed by a user, with a specific process, on a particular object for the very first time is inherently suspicious and warrants investigation as it deviates from established norms.
    answer_sources:
      - Windows Event ID 4670, Windows Event ID 4688, Sysmon Event ID 1, Zeek smb_files.log. This data should be collected from Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs), directories with security tool binaries, and system binary directories (C:\Windows\System32).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CREATE baseline of unique (user, process, object) tuples from EventID 4670 logs over 30 days. 
          ALERT on any new event where the (user, process, object) tuple is not in the baseline.
  - question: Can unsupervised machine learning identify anomalous permission change events that do not fit into normal patterns of activity?
    context: This approach seeks to find outliers without pre-defined rules. By clustering events based on features like the user, process, and object, the algorithm can define "normal" behavior. Any event that falls outside these clusters is flagged as an anomaly, providing a way to detect unexpected or novel attacker techniques.
    answer_sources:
      - Windows Event ID 4670. This data should be collected from Windows Registry (HKLM\Software, HKCU\Software), Group Policy Objects (GPOs), directories with security tool binaries, and system binary directories (C:\Windows\System32).
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          VECTORIZE EventID 4670 events using features (user, process, object_parent_dir, logonID). 
          APPLY clustering algorithm (e.g., DBSCAN) to define normal clusters. 
          ALERT on any event classified as an outlier/noise.
  - question: Is a file's permission change immediately followed by its modification or execution by the same user or process?
    context: This question looks for a classic attacker pattern "take ownership, then modify/execute." An adversary might change permissions on a system binary or script specifically to replace it with a malicious version or to execute it with different privileges. Detecting this rapid sequence of events is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4670, Windows Event ID 4663, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11. This data should be collected from persistence locations (e.g., Startup folders, Run keys), security software directories, and user profile directories.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CORRELATE EventID 4670 (permission change on Object X by User Y) 
          WITH EventID 11/4688 (modify/execute Object X by User Y) 
          within a 60-second window on the same host. ALERT on match.
  - question: Are 'modify-then-use' sequences happening at an unusually fast, likely automated, pace?
    context: This question adds a statistical dimension to the previous one. While a manual administrative task might involve a delay between changing permissions and using a file, a malicious script will perform these actions almost instantaneously. By baselining the time difference for these sequences, we can flag events that happen too quickly to be normal human behavior.
    answer_sources:
      - Windows Event ID 4670, Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11. This data should be collected from persistence locations (e.g., Startup folders, Run keys), security software directories, and user profile directories.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each 'modify-then-use' sequence, CALCULATE time_delta. 
          BUILD baseline distribution of time_deltas. 
          ALERT if new_sequence.time_delta < 5th_percentile of baseline.
  - question: Is there a sudden, anomalous spike in the volume of permission change events on a particular host?
    context: This question aims to detect "mass" permission change events. An attacker preparing to deploy ransomware or exfiltrate data might recursively change permissions on a large number of files. This would cause a significant spike in Event ID 4670 logs. A time-series forecasting model can learn the normal "heartbeat" of a system and alert when this activity level deviates significantly from the forecast.
    answer_sources:
      - Windows Event ID 4670. This data should be collected from persistence locations (e.g., Startup folders, Run keys), security software directories, and user profile directories.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          For each host, MODEL time-series of EventID 4670 counts in 10-minute intervals. 
          FORECAST expected count and confidence band. 
          ALERT if actual_count > upper_confidence_bound.