name: T1134.003: Make and Impersonate Token
id: 3c5d6e8a-9f0b-4a1c-8d7e-6f5a4b3c2d1e
description: |
  Investigates whether an adversary has escalated privileges or bypassed defenses on the enterprise network using token manipulation. This involves looking for process creation events from malicious indicators followed by privileged logon sessions, anomalous logon impersonations by unusual parent processes (like web servers or document apps), or the use of tools like 'runas.exe' with '/netonly' or '/savecred' flags to operate under a different user's context. It also covers post-impersonation activity, such as a non-privileged user accessing sensitive processes like LSASS, clearing security logs, or initiating suspicious outbound network connections after impersonating a privileged account.
type: technique
related:
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I detect if a process from a known malicious file hash creates a new, higher-privileged logon session?
    context: This question addresses a classic privilege escalation pattern where malware, once executed, uses token impersonation to gain elevated rights. Detecting this chain of events—a malicious hash followed by a privileged logon (Type 9) within a short timeframe—is critical for catching active threats early in the attack lifecycle.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Domain Controllers, Member Servers, Administrative Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation (EID 4688) WHERE hash IN threat_intel_list | JOIN (hostname, time_window=60s) logon_events (EID 4624, LogonType=9) WHERE logon_user_privilege > process_user_privilege | ALERT
  - question: How can I statistically identify anomalous logon impersonations based on historical process-user pairings?
    context: Adversaries often use legitimate processes to perform malicious actions to blend in. This question aims to find these "living off the land" attacks by baselining normal impersonation behavior (Logon Type 9). A process impersonating a user it has never or rarely impersonated before is a strong statistical anomaly indicating potential misuse.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Domain Controllers, Member Servers, Administrative Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH logon_events (EID 4624, LogonType=9) | GET parent_process_name, target_user | BASELINE frequency of (parent_process, target_user) pairs | ALERT on pairs with frequency < 1st_percentile
  - question: Can a machine learning model be trained to predict if a new logon session is part of a malicious privilege escalation chain?
    context: This question explores a more advanced, proactive detection method. By training a model on features from both the process creation and the logon event (e.g., process command line entropy, rarity of the user/process pair, privilege increase), we can generate a probability score for maliciousness, allowing for more nuanced and context-rich alerting than simple rule-based methods.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Domain Controllers, Member Servers, Administrative Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: TRAIN classifier ON labeled_logon_events (EID 4624, Type 9) | FEATURES = [parent_cmd_entropy, process_rarity, user_rarity, time_delta, privilege_increase] | PREDICT probability_malicious FOR new_logon_events
  - question: How can I detect if an unusual process (like a web server or document application) is creating a new logon session?
    context: Legitimate logon impersonations are typically performed by a small set of administrative tools. When a process like WINWORD.EXE, w3wp.exe, or wscript.exe creates a new logon session, it's highly suspicious and often indicates a compromised application is being used as a foothold for privilege escalation or lateral movement.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Application Servers, Web Servers, User Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH logon_events (EID 4624, LogonType=9) | GET parent_process_name | ALERT IF parent_process_name IN [suspicious_list] OR parent_process_name NOT IN [allow_list]
  - question: Can I statistically detect when a process begins impersonating a wider and more anomalous set of users?
    context: This question aims to identify a change in an adversary's behavior. A process that normally impersonates a small, consistent set of users but suddenly starts creating sessions for a diverse and unusual range of accounts may indicate that it has been compromised and is being used to explore the network or escalate privileges.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Application Servers, Web Servers, User Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: FOR each parent_process | CALCULATE entropy of target_user_set over 30_days | ALERT when new logon causes significant increase in entropy_score
  - question: Can an unsupervised machine learning model identify anomalous clusters of logon impersonation activity?
    context: This question seeks to find novel or unknown attack patterns without relying on predefined rules or labels. By clustering logon and parent process events based on features like process name, user SID, and command line length, we can isolate small, distinct clusters that represent anomalous activity deviating from the large clusters of normal administrative behavior.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Application Servers, Web Servers, User Workstations, SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: CLUSTER logon_events (EID 4624, Type 9) and parent_process (EID 4688) pairs using DBSCAN | FEATURES = [vector(process_name), vector(user_name), cmd_length, user_sid_type] | INVESTIGATE noise_points and small_clusters
  - question: How can I detect when an impersonated logon session is used to perform sensitive actions like accessing LSASS memory?
    context: This question focuses on the actions taken *after* a successful token impersonation. Chaining a low-to-high privilege logon event with subsequent access to the LSASS process is a very high-fidelity indicator of a credential dumping attack, such as those performed by Mimikatz.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Domain Controllers, High-Value Asset Servers, Tier 0 Administrator Workstations, Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: TRIGGER on logon_event (EID 4624, Type 9) where subject_privilege < target_privilege | CORRELATE TargetLogonId with object_access_event (EID 4656) where object_name = 'lsass.exe' within 5_minutes | ALERT
  - question: Can I statistically identify when a user performs an impersonation with an unusually high privilege gap?
    context: This question helps to baseline user behavior. While some administrators may legitimately impersonate other accounts, a standard user suddenly impersonating a Domain Admin account is a major anomaly. By scoring the "privilege gap" between the original user and the impersonated user, we can alert on statistical outliers that represent a significant and suspicious jump in permissions.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Domain Controllers, High-Value Asset Servers, Tier 0 Administrator Workstations, Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: FOR each user | PROFILE historical privilege_gap_score for impersonations (Logon Type 9) | ALERT if new impersonation has a score > 99th_percentile for that user
  - question: Can a time-series model detect anomalous sequences of actions following a token impersonation event?
    context: This question treats the actions of a logon session as a sequence. By modeling the normal sequence of events that follow a logon, an anomaly detection model can flag sequences that are improbable or match known attack patterns (e.g., a new logon followed by reconnaissance commands, then registry modification). This provides a holistic view of the session's intent.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4657
      - Domain Controllers, High-Value Asset Servers, Tier 0 Administrator Workstations, Certificate Authorities
    range: last 90 days
    queries:
      - pseudocode: MODEL sequence of event_IDs per TargetLogonId | TRIGGER on logon_event (EID 4624, Type 9) | MONITOR subsequent event sequence for that TargetLogonId | ALERT if sequence is a statistical anomaly
  - question: How can I detect 'runas.exe /netonly' being used by a web shell for lateral movement?
    context: This question targets a specific defense evasion technique. An adversary who has compromised a web server can use 'runas /netonly' to authenticate to other internal machines as a different user, without the credentials being valid on the compromised web server itself. Detecting this command when spawned by a web server process is a strong indicator of attempted lateral movement.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Internal-facing Servers, Staging Servers, User Workstations, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation (EID 4688) for 'runas.exe' with '/netonly' | ALERT if parent_process is ['w3wp.exe', 'tomcat.exe'] | CORRELATE with outbound network connections from same host
  - question: Can I statistically identify anomalous usage of 'runas.exe /netonly'?
    context: Since 'runas.exe /netonly' can be a legitimate administrative tool, this question focuses on finding deviations from the norm. By baselining which users, source workstations, and destination assets are involved in normal usage, we can alert when a new or rare combination appears, such as a service account using it for the first time.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Internal-facing Servers, Staging Servers, User Workstations, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: BASELINE (user, source_host, destination_host) for 'runas.exe /netonly' usage | ALERT on new or rare combinations, e.g., destination_rarity > 99th_percentile
  - question: Can a graph-based model detect an anomalous chain of events involving 'runas.exe /netonly'?
    context: This question models system activity as a graph to find suspicious paths. A path like 'w3wp.exe -> cmd.exe -> runas.exe /netonly -> CRITICAL_DB_SERVER' would form an anomalous subgraph if that sequence of interactions is rare or has never been seen before, providing a high-confidence alert for a web shell performing lateral movement.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4624
      - Zeek conn.log
      - Internal-facing Servers, Staging Servers, User Workstations, Network Egress Points
    range: last 90 days
    queries:
      - pseudocode: CREATE graph of (user, process, host) interactions | SEARCH for anomalous paths like 'web_process -> shell -> runas_netonly -> internal_asset'
  - question: How can I detect 'runas.exe /savecred' being used maliciously by a non-interactive process or from a suspicious file path?
    context: The '/savecred' flag is dangerous because it caches credentials for future use. Its execution by a non-interactive process (like a Windows Service) or from a temporary user-writable directory is highly anomalous and suggests an adversary is trying to establish persistence or steal credentials.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Multi-user Servers (e.g., Citrix, RDS), SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: SEARCH process_creation (EID 4688) for 'runas.exe' with '/savecred' | ALERT if SubjectLogonId is non-interactive OR parent_process_path is in ['%TEMP%', '%PUBLIC%']
  - question: Can I statistically identify 'runas.exe /savecred' being run from an unusual file path?
    context: This question aims to detect malware or scripts that drop and execute 'runas /savecred' from an uncommon location. By calculating the rarity or entropy of the parent process path, we can flag executions from locations that are statistical outliers, such as a randomly named executable in a user's download folder.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Multi-user Servers (e.g., Citrix, RDS), SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: FOR 'runas.exe /savecred' events | CALCULATE rarity and entropy of parent_process_path | ALERT if path_rarity < 5th_percentile or path_entropy > 95th_percentile
  - question: Can a machine learning model distinguish between legitimate and malicious 'runas.exe /savecred' executions?
    context: This question seeks to build a specific classifier to reduce false positives from legitimate administrative use of '/savecred'. By training a model on features like the user context, parent process, and path characteristics, the model can learn the patterns of benign use and more accurately identify malicious deviations.
    answer_sources:
      - Windows Event ID 4688
      - User Workstations, Multi-user Servers (e.g., Citrix, RDS), SIEM/Log Aggregator
    range: last 90 days
    queries:
      - pseudocode: TRAIN classifier ON labeled 'runas.exe /savecred' events | FEATURES = [parent_process, user_context, path_entropy, time_of_day] | PREDICT maliciousness for new executions
  - question: How can I detect if a new logon session is immediately followed by suspicious network C2 activity?
    context: This question links token impersonation directly to network-based defense evasion. An adversary might impersonate a user with different network permissions to bypass egress filtering. Correlating a Logon Type 9 event with immediate connections to known C2 domains or newly registered domains is a strong signal of this tactic.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, DNS Servers, Critical Asset Subnets, Proxy Logs
    range: last 90 days
    queries:
      - pseudocode: TRIGGER on logon_event (EID 4624, Type 9) | CORRELATE ProcessId with DNS/network logs within 60s | ALERT if destination_IP/FQDN is on blocklist OR domain_age is new
  - question: Can I statistically detect when an impersonated user's network behavior deviates from their normal baseline?
    context: This question aims to find anomalies by profiling what is normal for a specific user. If a user is impersonated and the new session begins connecting to different countries, using rare ports, or accessing domains with unusual character patterns, it deviates from that user's established network baseline and may indicate a compromise.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, DNS Servers, Critical Asset Subnets, Proxy Logs
    range: last 90 days
    queries:
      - pseudocode: FOR each user, BASELINE network behavior (dest_country, dest_port, JA3, domain_entropy) | AFTER Logon Type 9, monitor traffic | ALERT if traffic deviates significantly from baseline
  - question: Can a time-series forecasting model detect anomalous spikes in network traffic following a token impersonation?
    context: This question focuses on the volume and rate of network activity. A forecasting model can predict the expected network traffic for a host. A sudden, unpredicted spike in outbound data or connection counts immediately following a Logon Type 9 event is a strong anomaly, suggesting data exfiltration or C2 activity under the guise of an impersonated user.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Zeek conn.log
      - Zeek dns.log
      - Network Egress Points, DNS Servers, Critical Asset Subnets, Proxy Logs
    range: last 90 days
    queries:
      - pseudocode: FORECAST network_metrics (bytes_out, conn_count) per host | TRIGGER on logon_event (EID 4624, Type 9) | ALERT if subsequent traffic significantly exceeds forecast
  - question: How can I create a high-fidelity alert for an impersonated SYSTEM account being used to clear security logs?
    context: This question describes a critical defense evasion sequence. An adversary impersonating the all-powerful SYSTEM account and then immediately clearing the audit log is a blatant attempt to cover their tracks. A chained rule that detects this specific sequence ('Logon Type 9 for SYSTEM' -> 'wevtutil clear-log' or Event 1102) provides a very high-confidence alert.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 1102
      - Windows Event ID 4663
      - Log Aggregation Servers, Domain Controllers, Security Appliance Management Interfaces, EDR servers
    range: last 90 days
    queries:
      - pseudocode: TRIGGER on logon_event (EID 4624, Type 9) where TargetUserName='SYSTEM' | CORRELATE with process_creation of 'wevtutil.exe cl' OR event_ID 1102 on same host within 2_minutes | ALERT
  - question: Can I statistically detect anomalous log clearing events that follow privileged impersonations?
    context: This question looks for unusual patterns in log clearing activity. A log clear event (Event ID 1102) on a critical server where it has never occurred before, or a log clear that happens suspiciously quickly after a privileged account is impersonated, is a statistical outlier that warrants investigation.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 1102
      - Windows Event ID 4663
      - Log Aggregation Servers, Domain Controllers, Security Appliance Management Interfaces, EDR servers
    range: last 90 days
    queries:
      - pseudocode: BASELINE frequency of log_clear (EID 1102) per host | ALERT if log_clear occurs on new host, or if time_delta between privileged_logon and log_clear < 1st_percentile
  - question: Can a Hidden Markov Model be used to detect a sequence of events indicating defense evasion?
    context: This question applies a state-based model to detect a logical attack progression. The model learns normal state transitions (e.g., from 'Normal' to 'Admin Logon'). A sequence like 'Privileged Logon' -> 'Access Security Tool Process' -> 'Terminate Process' -> 'Clear Log' would be a low-probability path through the model, indicating a likely attack chain from privilege escalation to defense evasion.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4688
      - Windows Event ID 1102
      - Windows Event ID 4663
      - Log Aggregation Servers, Domain Controllers, Security Appliance Management Interfaces, EDR servers
    range: last 90 days
    queries:
      - pseudocode: TRAIN HMM on sequences of security events | IDENTIFY low-probability state transitions, e.g., 'Privilege Escalation' -> 'Defense Evasion' | ALERT on sequences like 'Logon Type 9' -> 'Terminate EDR' -> 'Clear Log'