name: "T1406: Obfuscated Files or Information"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: |
  This playbook helps determine if an adversary is using obfuscated files or information to evade defenses on mobile devices. It provides investigative steps to detect various obfuscation techniques, including the use of files with high Shannon entropy or mismatched file signatures, the transfer of multiple small file fragments indicative of a split archive, the use of encoding utilities on developer hosts followed by network activity to mobile devices, and the download of executable code from unauthorized, non-app store sources. The goal is to identify payloads that have been intentionally disguised to bypass security controls.
type: "technique"
related:
  - "TA0030: Defense Evasion"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are files being transferred to mobile devices with mismatched MIME types and file extensions, such as a mobile executable disguised as an image or document?"
    context: |
      Adversaries may rename executable files (like Android APKs or iOS IPAs) with benign extensions (e.g., .jpg, .pdf) to bypass simple file-type filters. This question aims to identify such attempts by comparing the actual file type identified by network monitoring tools (like Zeek's `mime_type`) with the user-facing filename extension. A mismatch is a strong indicator of an evasion attempt.
    answer_sources:
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators."
    range: "last 90 days"
    queries:
      - "SEARCH Zeek files.log WHERE (mime_type IS 'application/vnd.android.package-archive' OR mime_type IS 'application/x-itunes-ipa') AND (filename ENDS WITH '.png' OR filename ENDS WITH '.jpg' OR filename ENDS WITH '.pdf' OR filename ENDS WITH '.docx') | GROUP BY source_ip, dest_ip, filename"
  - question: "Are files being transferred to mobile devices that exhibit unusually high entropy, suggesting they are encrypted or packed to hide their true content?"
    context: |
      High Shannon entropy is a mathematical indicator of randomness. Encrypted or compressed data is nearly indistinguishable from random data and thus has high entropy ($$ E > 7.5 $$ is a common threshold). Adversaries use packers and encryption to obfuscate malicious payloads. This question seeks to detect such files by calculating their entropy and comparing it against established baselines for their file type or against an absolute threshold for encryption.
    answer_sources:
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators."
    range: "last 90 days"
    queries:
      - "CALCULATE Shannon entropy for each file in Zeek files.log | COMPARE entropy against baseline for mime_type OR against threshold (E > 7.5) | ALERT on deviation"
  - question: "Can a machine learning model identify file downloads to mobile devices that are suspiciously obfuscated based on a combination of network and file attributes?"
    context: |
      While individual indicators like high entropy or mismatched file types are useful, a machine learning model can combine multiple weak signals into a stronger, more accurate prediction. This question involves using a classifier (like a random forest) trained on features such as file entropy, size, type, source reputation, and user-agent to automatically flag downloads that have a high probability of being obfuscated, reducing false positives and helping analysts focus on the most likely threats.
    answer_sources:
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Corporate Wi-Fi access points, Mobile Device Management (MDM) servers, network gateways, and VPN concentrators."
    range: "last 90 days"
    queries:
      - "RUN trained random forest model on new file download events | INPUT features: entropy, file_size, mime_type, file_extension, user_agent, source_ip_reputation | ALERT on 'suspiciously obfuscated' classification with high confidence score"
  - question: "Is a mobile device receiving multiple small, sequentially-named file parts from a single source, suggesting a split archive is being transferred to evade detection?"
    context: |
      To avoid detection by size-based or signature-based security controls, adversaries may split a large malicious payload into several smaller archive files (e.g., `payload.z01`, `payload.z02`, etc.). This question aims to detect this pattern by looking for a high frequency of file transfers with names matching common archive splitting conventions from a single source to a single mobile device in a short time frame.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients."
    range: "last 90 days"
    queries:
      - "SEARCH Zeek files.log for filenames matching regex '.*\\.(part[0-9]+|z[0-9]+|r[0-9]+|[0-9]{3})$' | COUNT files by source_ip, dest_ip over 5-minute window | ALERT if count > 3"
  - question: "Are any mobile devices exhibiting an anomalously high 'file velocity'—downloading an unusual number of files from a single source in a short period—compared to their peers?"
    context: |
      Split payload delivery often manifests as a burst of small file downloads. This question focuses on creating a behavioral baseline for 'file velocity' (files per minute from one source) across all mobile devices. By using statistical methods (mean and standard deviation), we can automatically flag any device that deviates significantly from the norm, which could indicate a split file transfer or other suspicious activity. Enriching this with domain age data can further prioritize alerts from newly created, potentially malicious domains.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients."
    range: "last 90 days"
    queries:
      - "CALCULATE file count per source_ip, dest_ip per minute | COMPARE against 30-day historical baseline (mean + 3*std_dev) for all mobile devices | ALERT on deviation | ENRICH with source domain age from DNS/WHOIS"
  - question: "Can unsupervised machine learning (clustering) identify groups of network connections that are characteristic of split payload delivery, even without predefined rules?"
    context: |
      This question applies an unsupervised learning approach (DBSCAN) to group network connections based on their inherent similarities (IPs, port, protocol, size, timing). Split payload delivery creates a unique pattern—a dense micro-cluster of many small, quick connections between two hosts—that will be identified as an anomaly or a distinct cluster by the algorithm. This method can uncover novel or unexpected delivery techniques that rule-based systems might miss.
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Network egress points, corporate Wi-Fi segments, and DNS resolvers servicing mobile device clients."
    range: "last 90 days"
    queries:
      - "RUN DBSCAN clustering on connection logs | INPUT features: src_ip, dest_ip, protocol, port, bytes, inter-arrival_time | INVESTIGATE outlier clusters or dense micro-clusters of small connections | CORRELATE IPs with threat intelligence"
  - question: "Are developers or build servers using known encoding or packing tools and then immediately transferring a file to a mobile device or file-sharing service?"
    context: |
      Adversaries, or insiders, might use legitimate developer tools on a trusted host to obfuscate a payload before transferring it. This question seeks to connect two distinct events: the use of a packing/encoding utility on a host (e.g., a developer workstation) and a subsequent network connection from that same host to a mobile device or staging location. This 'chaining' of events provides strong, contextual evidence of a payload being prepared and moved.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Developer workstations, CI/CD build servers, code repositories, and artifact management systems."
    range: "last 90 days"
    queries:
      - "SEARCH for process creation (WinEvent 4688) with command line containing 'certutil -encode', 'base64', 'ProGuard', etc. | IF found, SEARCH for network connection from same host to mobile IP range or file-sharing domain within 10 minutes"
  - question: "Are legitimate developer processes being executed with unusually high-entropy command-line arguments, suggesting the presence of an embedded or encoded script?"
    context: |
      Adversaries may abuse legitimate tools by passing an obfuscated script or payload directly on the command line, a technique known as 'living off the land.' This activity can be detected by analyzing the entropy of the command-line arguments themselves. A command line with high entropy is abnormal and suggests it contains encoded data rather than simple flags and filenames. This question focuses on baselining normal command-line entropy for developer tools and alerting on significant deviations.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Developer workstations, CI/CD build servers, code repositories, and artifact management systems."
    range: "last 90 days"
    queries:
      - "CALCULATE Shannon entropy of command-line arguments in WinEvent 4688 logs | COMPARE against 30-day rolling baseline entropy for that process name | ALERT if entropy exceeds 98th percentile"
  - question: "Are there anomalous sequences of process executions on developer hosts that deviate from normal build and development workflows, potentially indicating malicious activity?"
    context: |
      Legitimate software development follows predictable patterns of process execution (e.g., a build server calls a compiler, which then calls a linker). An LSTM model, which excels at learning sequences, can be trained on these normal workflows. This question aims to use such a model to detect when an unexpected or illogical sequence occurs (e.g., a compiler suddenly launching an encoding tool and then a network utility), which is a strong indicator of compromise or abuse.
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Developer workstations, CI/CD build servers, code repositories, and artifact management systems."
    range: "last 90 days"
    queries:
      - "RUN trained LSTM model on new parent-child process sequences from WinEvent 4688 | INPUT features: process names, execution order | ALERT on sequences with high anomaly scores | CORRELATE with subsequent network activity from the host"
  - question: "Are mobile devices downloading executable files (e.g., .ipa, .dex, .so) from domains that are not approved app stores or known software repositories?"
    context: |
      Mobile operating systems are designed to download applications and code from trusted, centralized app stores. A mobile device downloading executable code from an arbitrary, non-allowlisted domain is a major red flag for side-loading or the delivery of a malicious payload. This question aims to create a high-fidelity alert by combining the file type with the reputation of the source domain.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Corporate Wi-Fi access points, DNS resolvers, and network egress points."
    range: "last 90 days"
    queries:
      - "SEARCH Zeek files.log for downloads with extensions '.dex', '.so', '.jar', '.ipa' | JOIN with Zeek http.log on UID | ALERT if http.host is NOT in allowlist of app stores/CDNs"
  - question: "Is a specific mobile application, identified by its User-Agent, downloading a file type that is statistically rare or anomalous for that particular app?"
    context: |
      Most mobile apps have a predictable pattern of network behavior and download specific types of content (e.g., a social media app downloads images, a news app downloads text). This question involves baselining the normal download behavior for each application. An alert is triggered when an app deviates from its profile by downloading an unusual file type, especially an executable or generic binary (`application/octet-stream`), which could indicate that a vulnerability in the app is being exploited to download a malicious payload.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Corporate Wi-Fi access points, DNS resolvers, and network egress points."
    range: "last 90 days"
    queries:
      - "PROFILE download file types (mime_type, extension) per User-Agent over 30 days | For new downloads, CHECK if file type is rare (e.g., <1% frequency) for that User-Agent | ALERT on rare executable file types"
  - question: "Can an anomaly detection model (Isolation Forest) identify unusual file downloads to mobile devices that deviate from the fleet's collective normal behavior?"
    context: |
      An Isolation Forest is an unsupervised learning algorithm effective at identifying outliers in data. This question proposes using it to find anomalous downloads without relying on predefined rules or signatures. By feeding the model a rich set of features (HTTP method, user agent, file type, domain age, etc.), it can learn what 'normal' download activity looks like for the entire mobile fleet and flag any download that significantly deviates from this collective norm. This is a powerful way to detect novel attack techniques.
    answer_sources:
      - "Zeek http.log"
      - "Zeek files.log"
      - "Zeek dns.log"
      - "Corporate Wi-Fi access points, DNS resolvers, and network egress points."
    range: "last 90 days"
    queries:
      - "RUN trained Isolation Forest model on new download events | INPUT features: http_method, user_agent, mime_type, file_size, source_ip_rep, domain_age | ALERT on events with high anomaly scores"