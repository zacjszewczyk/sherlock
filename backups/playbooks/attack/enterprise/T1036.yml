name: T1036: Masquerading
id: d9e1f5a0-5b7c-4d3e-9f8a-1c2b3d4e5f6a
description: This playbook helps determine if an adversary is using masquerading techniques for defense evasion. It provides investigative questions to detect various forms of masquerading, such as: legitimate process names being used by known malware hashes; filenames with deceptive patterns like Right-to-Left-Override (RTLO) characters or double extensions; legitimate processes running from non-standard directories; mismatches between a process's on-disk filename and its internal PE metadata; atypical parent-child process relationships (e.g., winword.exe spawning cmd.exe); legitimate process names used by binaries with invalid or non-Microsoft signatures; and the use of system utilities with obfuscated or anomalously long command-line arguments.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there process creation events where a file hash matches a known malicious indicator, but the filename is on a watchlist of commonly masqueraded system binaries?
    context: This identifies a common masquerading technique where malware is named after a legitimate system file (e.g., svchost.exe) to blend in. By checking the file's hash against threat intelligence, we can confirm its true malicious identity despite the deceptive name.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
      - Certificate Authorities
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          JOIN file_hash with threat_intelligence_feed
          WHERE process_name IN (common_masqueraded_binaries_list) AND is_malicious
          RETURN hostname, process_name, file_hash
  - question: Have any critical system binaries (e.g., lsass.exe) executed with a file hash that is not on the established known-good list for that binary?
    context: This question helps detect when a critical system file has been replaced or tampered with. By maintaining a baseline of all legitimate, known-good hashes for each critical binary (from a golden image or software inventory), any execution with a new or unrecognized hash is a strong indicator of a potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
      - Certificate Authorities
      - Golden Image Hash Sets
      - Software Inventory
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs FOR critical_system_binaries
          WHERE file_hash NOT IN (known_good_hashes_for_process_name)
          RETURN hostname, process_name, file_hash
  - question: Can a machine learning model identify process executions that are likely malicious masquerading, based on features like process name, parent process, command line length, and hash prevalence?
    context: This leverages a classification model to score the risk of a process being masqueraded malware. The model analyzes a combination of features, including whether the hash is rare or known-bad, to identify subtle patterns of maliciousness that might be missed by simple rules. It is effective at finding unknown threats that mimic legitimate processes.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
      - Certificate Authorities
      - Threat Intelligence Feeds
      - Enterprise-wide Hash Prevalence Data
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT process_creation_events
          FEATURE_ENGINEER [process_name, parent_process, cmd_line_length, hash_prevalence, hash_in_ti]
          APPLY classification_model
          RETURN events with high_malicious_score
  - question: Are there any executed process filenames that contain deceptive patterns, such as the Right-to-Left-Override (RTLO) character, multiple file extensions, or a trailing space?
    context: This question aims to find files named to trick users into running them. The RTLO character can reverse the order of text (e.g., report_cod.exe appears as report_exe.doc), multiple extensions hide the true executable type (e.g., invoice.pdf.exe), and trailing spaces can bypass some filters. Detecting these patterns in process logs is a strong signal of malicious intent.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - email gateways
      - web proxies
      - file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE process_name MATCHES REGEX ('\u202E' OR '\.(pdf|docx|txt|jpg)\.exe$' OR '\s$')
          RETURN hostname, process_name, command_line
  - question: Have any processes executed with a filename that is a close misspelling of a critical system process (e.g., svch0st.exe instead of svchost.exe)?
    context: This question detects typosquatting, where an attacker gives malware a name very similar to a legitimate binary. By calculating the string similarity (e.g., Levenshtein distance) between a new process name and a list of critical process names, we can flag suspicious similarities that are not exact matches, which often indicate an attempt to masquerade.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - email gateways
      - web proxies
      - file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          FOREACH event
            CALCULATE string_distance(process_name, critical_system_binaries_list)
            IF distance_is_high_similarity_but_not_exact_match
              RETURN hostname, process_name
  - question: Can a character-level neural network model classify any new filenames as 'suspicious' based on subtle character patterns indicative of maliciousness?
    context: This approach uses a sophisticated model (like a CNN) to learn the typical and atypical structures of filenames. It can detect malicious patterns that are too complex for regular expressions, such as unusual character combinations or sequences that are common in malware but not in benign software. This helps find novel or cleverly crafted malicious filenames.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - email gateways
      - web proxies
      - file shares
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT process_creation_events
          EXTRACT process_filenames
          APPLY character_level_cnn_model
          RETURN filenames classified as 'suspicious'
  - question: Has a critical system binary executed from a file path that is not on its approved allowlist of standard locations?
    context: This question seeks to identify when a system utility, which should only run from a protected directory like C:\Windows\System32, is executed from an unusual location (e.g., a user's Downloads folder). This is a strong indicator that a malicious file has been dropped and named to look like a system file.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - User-writable directories (e.g., C:\Users\*, C:\ProgramData, C:\Temp, C:\Perflogs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE process_name IN (critical_binaries_list)
          AND process_path NOT IN (allowed_paths_for_that_process)
          RETURN hostname, process_name, process_path
  - question: Has a critical system process executed from a file path that is statistically rare (e.g., in the bottom 1% of frequency) for that specific process across the enterprise?
    context: This question uses historical data to define "normal" execution locations for each system process. By establishing a baseline of common paths, any execution from a location that is rarely or never seen before is flagged as an anomaly. This is effective for detecting malware dropped in uncommon but writable directories.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - User-writable directories (e.g., C:\Users\*, C:\ProgramData, C:\Temp, C:\Perflogs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs over last 30 days
          CALCULATE frequency distribution of paths for each critical_process
          SEARCH process_creation_logs in real-time
          IF path_frequency for process_name is < 1st_percentile
            RETURN hostname, process_name, process_path
  - question: Can a clustering algorithm identify small, anomalous groups of system binaries running from unusual locations, distinct from the large clusters of normal activity?
    context: This question uses unsupervised machine learning to group process executions based on file path characteristics. Normal activity (e.g., rundll32.exe from System32) will form large, dense clusters. The model can then automatically identify small, isolated clusters (e.g., a few instances of rundll32.exe running from C:\Users\Public\Music) as anomalies that require investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - User-writable directories (e.g., C:\Users\*, C:\ProgramData, C:\Temp, C:\Perflogs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT process_creation_events
          FEATURE_ENGINEER from file_path [directory_depth, contains_user_name, etc.]
          APPLY DBSCAN clustering algorithm
          RETURN small, dense clusters as anomalies
  - question: Are there any process creation events where the on-disk filename does not match the 'OriginalFileName' embedded in the file's PE metadata?
    context: This question targets a specific masquerading technique where an attacker renames a malicious executable (e.g., malware.exe) to a benign name (e.g., svchost.exe). However, the original filename is often still stored inside the file's metadata. A mismatch between the external filename and the internal 'OriginalFileName' is a high-fidelity indicator of such tampering.
    answer_sources:
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH sysmon_event_id_1
          WHERE basename(Image) != OriginalFileName AND basename(Image) NOT IN (exception_list)
          RETURN hostname, Image, OriginalFileName
  - question: Have any new or rare combinations of (Image basename, OriginalFileName, InternalName) been observed across the enterprise?
    context: This question establishes a baseline of all known-valid triplets of filenames (on-disk, original, internal). Any newly observed triplet, or one that occurs with very low frequency, is flagged as anomalous. This can catch not only direct mismatches but also instances where an attacker uses a less common but still valid-looking combination to evade simple mismatch rules.
    answer_sources:
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH sysmon_event_id_1 over last 30 days
          CALCULATE frequency of all (Image, OriginalFileName, InternalName) triplets
          SEARCH sysmon_event_id_1 in real-time
          IF triplet_frequency is below_threshold OR triplet_is_new
            RETURN hostname, Image, OriginalFileName, InternalName
  - question: Can a decision tree model, trained on PE header and process data, score the likelihood that a process execution is an instance of masquerading?
    context: This question uses a model that learns the rules associated with legitimate and masqueraded processes. By feeding it features like filename mismatches, signer information, and file path, the model can provide a risk score for each execution. This is useful for prioritizing alerts and finding complex cases that don't violate a single, simple rule.
    answer_sources:
      - Sysmon Event ID 1
      - All enterprise endpoints (workstations, servers)
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT sysmon_event_id_1
          FEATURE_ENGINEER [is_name_mismatch, signature_info, path_info]
          APPLY decision_tree_model
          RETURN events with high_masquerading_score
  - question: Have any forbidden or highly suspicious parent-child process relationships been observed, such as Microsoft Word spawning PowerShell?
    context: This question looks for known-bad process lineage patterns. Certain relationships, like an Office application spawning a command shell or lsass.exe being created by anything other than wininit.exe, are almost always malicious. A predefined list of these forbidden pairs provides a high-confidence way to detect lateral movement or execution stages.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - User workstations
      - Application servers (Microsoft Office, Adobe Reader)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE (parent_process, child_process) IN (forbidden_pairs_list)
          RETURN hostname, parent_process, child_process, command_line
  - question: Has any parent-child process relationship occurred that is statistically rare or has never been seen before in the environment?
    context: This question moves beyond a static list of bad pairs and instead uses historical data to define normal process lineage. By calculating the probability of each parent-child combination, it can flag any relationship that is extremely uncommon (e.g., has a <0.01% chance of occurring). This is excellent for discovering novel attack techniques.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - User workstations
      - Application servers (Microsoft Office, Adobe Reader)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs over last 30 days
          CALCULATE conditional probability P(Child | Parent) for all pairs
          SEARCH process_creation_logs in real-time
          IF P(Child | Parent) is below_threshold OR pair_is_new
            RETURN hostname, parent_process, child_process
  - question: Can a graph-based anomaly detection algorithm identify unusual process lineage, such as a process from the 'Office Application' community spawning a process in the 'System Tool' community?
    context: This question models the entire enterprise's process activity as a large graph, where nodes are processes and edges are parent-child relationships. The algorithm groups related processes into "communities" (e.g., Office apps, browsers, system tools). An anomalous edge is one that connects two otherwise disconnected communities, representing a highly unusual and suspicious event.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All enterprise endpoints
      - User workstations
      - Application servers (Microsoft Office, Adobe Reader)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT process_creation_logs
          BUILD process_lineage_graph
          APPLY graph_anomaly_detection
          RETURN anomalous_edges (parent-child pairs)
  - question: Has a process with the name of a critical Microsoft binary executed, but the file was unsigned, had an invalid signature, or was not signed by an authorized Microsoft publisher?
    context: This question verifies the authenticity of critical system files at runtime. Microsoft binaries should always have a valid signature from a trusted Microsoft entity. Any deviation—an invalid signature, a missing signature, or a signature from a different publisher—is a major red flag indicating the file has been replaced or tampered with.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - All enterprise endpoints (workstations, servers)
      - code signing servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH sysmon_event_id_1
          WHERE process_name IN (critical_microsoft_binaries)
          AND (SignatureStatus != 'Valid' OR Signature NOT LIKE 'Microsoft%')
          RETURN hostname, process_name, Signature, SignatureStatus
  - question: Has a process that is almost always signed by Microsoft been observed with a new, non-Microsoft signer or as an unsigned binary?
    context: This question builds a profile of which signers are associated with which processes. For a process like explorer.exe that is signed by Microsoft in >99.9% of cases, an instance where it is suddenly unsigned or signed by a different entity is a statistically significant anomaly that warrants immediate investigation.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - All enterprise endpoints (workstations, servers)
      - code signing servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH sysmon_event_id_1 over last 30 days
          CALCULATE baseline of (Process Name, Signer) pairs
          SEARCH sysmon_event_id_1 in real-time
          IF (Process Name, Signer) pair is anomalous for a high-prevalence MS process
            RETURN hostname, process_name, Signer
  - question: Can a Naive Bayes classifier identify anomalous combinations of process name, signature status, and signer prevalence?
    context: This question uses a probabilistic model to determine if a set of features related to a process execution is normal or not. The model can learn, for example, that while a valid signature from "Some Corp" is normal for somecorp.exe, it is highly anomalous for lsass.exe. This allows it to flag suspicious combinations that might not be caught by simple rules.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 4688
      - All enterprise endpoints (workstations, servers)
      - code signing servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT sysmon_event_id_1
          FEATURE_ENGINEER [process_name, is_signed, signature_status, signer_name, signer_prevalence]
          APPLY Naive_Bayes_classifier
          RETURN events flagged as anomalous
  - question: Have any common system utilities been executed with command-line arguments containing known obfuscation indicators (e.g., -encodedcommand, FromBase64String) or suspicious LOLBAS usage patterns?
    context: This question searches for tell-tale signs of "living off the land" attacks, where adversaries use legitimate system tools for malicious purposes. By searching command lines for specific keywords, flags, and patterns associated with obfuscation (like PowerShell's -enc) or known misuse (like certutil -urlcache), we can quickly identify malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek http.log
      - All enterprise endpoints (workstations, servers)
      - DMZ servers
      - Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs
          WHERE command_line MATCHES REGEX ('-enc|-encoded|FromBase64String|certutil -urlcache')
          RETURN hostname, process_name, command_line
  - question: Has a system utility like powershell.exe or cmd.exe been executed with a command line that is unusually long or has significantly higher entropy than its established baseline?
    context: This question profiles the normal usage of common command-line tools. Benign administrative commands tend to have a typical length and complexity (entropy). A command that is significantly longer or has much higher entropy than the 98th percentile for that tool often indicates an obfuscated or complex malicious payload, warranting investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek http.log
      - All enterprise endpoints (workstations, servers)
      - DMZ servers
      - Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_logs for key_utilities
          CALCULATE baseline for command_line_length and command_line_entropy per utility
          SEARCH process_creation_logs in real-time
          IF length OR entropy > 98th_percentile for that utility
            RETURN hostname, process_name, command_line
  - question: Can a clustering algorithm, applied to vectorized command-line arguments, identify small, outlier clusters that represent anomalous usage patterns?
    context: This question groups similar commands together to find the odd ones out. By converting command-line text into numerical vectors (using TF-IDF), a clustering algorithm can identify large groups of common, benign commands. Small, isolated clusters that don't fit with the main groups often represent unique and potentially malicious command usage that needs to be reviewed.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek http.log
      - All enterprise endpoints (workstations, servers)
      - DMZ servers
      - Domain Controllers
      - Web Proxies
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT process_creation_logs for key_utilities
          VECTORIZE command_lines using TF-IDF
          APPLY K-Means clustering
          RETURN small, outlier clusters for investigation