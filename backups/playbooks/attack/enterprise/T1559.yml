name: T1559: Inter-Process Communication
id: 5e9d3b1a-8c7f-4b6e-9a2d-1f3c4d5e6f7a
description: |
  This playbook helps investigate whether an adversary is executing code using various inter-process communication (IPC) mechanisms. This technique covers several methods an adversary might use to facilitate execution, often for lateral movement or defense evasion. Investigative context includes looking for suspicious named pipe creation or access, where pipe names may appear on threat intelligence lists, have high entropy indicating randomness, or are handled by unusual processes. It also covers the spawning of command interpreters (like cmd.exe or powershell.exe) from parent processes that should not be creating them, such as Microsoft Office applications, which is a common sign of Dynamic Data Exchange (DDE) abuse. Further investigation involves monitoring for anomalously high numbers of DCOM/RPC connections (TCP port 135) from a single host, which can indicate lateral movement, as well as the instantiation of specific malicious or unusual COM objects. Finally, it addresses the detection of potential custom C2 channels by identifying long-lived, low-volume TCP connections on non-standard ports between internal hosts.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are named pipes being created or accessed with names that appear on threat intelligence lists?
    context: |
      Adversaries, particularly those using malware like Cobalt Strike or Metasploit, often use named pipes for communication between components or for lateral movement. These tools frequently use default or recognizable pipe names. This question aims to directly detect the presence of these known malicious tools by matching observed pipe names against a curated list of indicators. A match is a high-confidence signal of malicious activity.
    answer_sources:
      - Windows Sysmon Event ID 17
      - Windows Sysmon Event ID 18
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon events WHERE (EventID=17 OR EventID=18)
          MATCH PipeName against threat_intel_pipe_list
          RETURN host, process, PipeName
  - question: Are named pipes being created with unusually high entropy names, especially by non-system processes?
    context: |
      To evade simple signature-based detection, adversaries may use randomly generated named pipes. These random names often exhibit higher Shannon entropy compared to legitimate, human-readable pipe names. This question focuses on baselining the normal entropy of pipe names in the environment and then flagging outliers. A high-entropy pipe name created by a non-standard process (e.g., not svchost.exe) is a strong indicator of potentially evasive malware.
    answer_sources:
      - Windows Sysmon Event ID 17
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Sysmon events WHERE EventID=17
          CALCULATE entropy for PipeName
          COMPARE entropy against pre-computed_baseline_95th_percentile
          WHERE entropy > baseline AND process NOT IN (svchost.exe, lsass.exe, ...)
          RETURN host, process, PipeName, entropy_score
  - question: Can a machine learning model identify suspicious named pipe creation events based on features like process context and name entropy?
    context: |
      While rules based on threat intelligence or entropy are effective, they can be brittle or produce false positives. A machine learning model can provide more robust detection by considering multiple features simultaneously (e.g., creating process, parent process, user context, pipe name entropy). This question explores using a trained classifier to synthesize these weak signals into a high-confidence alert, thereby improving detection accuracy and reducing analyst fatigue.
    answer_sources:
      - Windows Sysmon Event ID 17
      - User Workstations
      - Application Servers
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH Sysmon event WHERE EventID=17
          EXTRACT features (process_name, parent_process, user, pipe_name_entropy)
          INPUT features into trained_classification_model
          IF model_output == 'malicious'
          ALERT on event
  - question: Are office applications or PDF readers spawning command-line interpreters, potentially indicating DDE abuse?
    context: |
      Legitimate user applications like Microsoft Word, Excel, or Adobe Reader should not normally spawn command shells (cmd.exe, powershell.exe). This behavior is a classic indicator of compromise, often resulting from a user opening a malicious document that exploits features like macros or Dynamic Data Exchange (DDE) to execute arbitrary code. This question seeks to directly detect these highly suspicious process execution chains.
    answer_sources:
      - Windows Event ID 4688
      - Windows Sysmon Event ID 1
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Remote Desktop Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events
          WHERE ParentProcessName IN (WINWORD.EXE, EXCEL.EXE, POWERPNT.EXE, AcroRd32.exe)
          AND NewProcessName IN (cmd.exe, powershell.exe, wscript.exe, cscript.exe, mshta.exe)
          RETURN host, ParentProcessName, NewProcessName, command_line
  - question: Are there statistically rare parent-child process relationships occurring in the environment?
    context: |
      Beyond well-known suspicious parent-child relationships, adversaries may create novel execution chains to evade detection. By analyzing all parent-child process pairs across the environment and calculating their frequency, we can identify statistically rare occurrences. A process pair that has never or rarely been seen before is anomalous by definition and warrants investigation, as it may represent a new or unusual attacker technique.
    answer_sources:
      - Windows Event ID 4688
      - Windows Sysmon Event ID 1
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Remote Desktop Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          AGGREGATE all process_creation_events by ParentProcessName and NewProcessName over 30 days
          CALCULATE frequency for each pair
          IDENTIFY pairs in the bottom 1st percentile of frequency
          ALERT on new occurrences of these rare pairs
  - question: Is there an anomalous spike in the number of shell processes being spawned by a specific parent process?
    context: |
      This question uses time-series analysis to detect changes in the behavior of parent processes. While a parent process like Excel might occasionally (though suspiciously) spawn a shell, a sudden spike in the volume of these events from a baseline of zero or near-zero is a strong anomaly. This approach can detect attacks that trigger a large number of executions, which would be flagged as a significant deviation from the established norm for that parent process.
    answer_sources:
      - Windows Event ID 4688
      - Windows Sysmon Event ID 1
      - User Workstations
      - Virtual Desktop Infrastructure (VDI) fleet
      - Remote Desktop Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH ParentProcessName
          CREATE time_series of shell_process_creation_count (e.g., daily)
          APPLY anomaly detection model (e.g., LOESS decomposition)
          ALERT on any significant positive anomaly (spike)
  - question: Is a single host performing a DCOM/RPC 'fan-out' by connecting to an unusually large number of destinations on port 135?
    context: |
      Adversaries often use DCOM or RPC for lateral movement, allowing them to execute code on remote systems. When an attacker compromises a host, they may use it to scan or connect to many other hosts in the network via port 135. This question aims to detect this "fan-out" behavior by setting a threshold for the number of unique destinations a single source connects to in a short time window. This is a strong indicator of automated lateral movement activity.
    answer_sources:
      - Zeek conn.log
      - Windows Security Event ID 5156
      - East-West traffic between workstations
      - Server-to-workstation traffic lanes
      - Network egress points monitoring port 135
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network_logs WHERE destination_port=135
          GROUP BY source_ip over 10-minute windows
          COUNT unique destination_ips
          WHERE unique_destination_count > 20 AND source_ip NOT IN (known_scanners)
          ALERT on source_ip
  - question: Is any host exhibiting a statistically significant increase in its DCOM/RPC connection fan-out compared to its own baseline?
    context: |
      This question refines the previous fan-out detection. Instead of a single static threshold for all hosts, it establishes a unique behavioral baseline for each host's RPC activity. Some systems, like management servers, may legitimately connect to many hosts. This approach learns that normal behavior and only alerts when a host's activity significantly deviates (e.g., exceeds 3 standard deviations) from its own historical pattern, resulting in higher fidelity alerts.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Windows Security Event ID 5156
      - East-West traffic between workstations
      - Server-to-workstation traffic lanes
      - Network egress points monitoring port 135
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH source_host
          PROFILE hourly count of unique RPC destinations to create a baseline (mean, stddev)
          MONITOR new hourly counts
          ALERT if current_count > (mean + 3 * stddev)
  - question: Is the overall volume of RPC traffic between network zones significantly deviating from forecasted levels?
    context: |
      This question provides a high-level, "big picture" view of RPC activity. It's designed to detect large-scale lateral movement campaigns that might not be noticeable at the single-host level but create a significant increase in the aggregate volume of RPC traffic between network segments (e.g., workstation-to-workstation). By forecasting the expected traffic volume, we can detect anomalous spikes that deviate from this prediction, indicating a potential widespread event.
    answer_sources:
      - Zeek conn.log
      - Zeek dce_rpc.log
      - Windows Security Event ID 5156
      - East-West traffic between workstations
      - Server-to-workstation traffic lanes
      - Network egress points monitoring port 135
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL historical RPC traffic volume between zones using ARIMA
          FORECAST expected traffic volume and confidence interval
          COMPARE observed volume against forecast
          ALERT if observed_volume > upper_confidence_bound
  - question: Are processes invoking COM objects via command line or scripts using CLSIDs or DLLs known to be malicious?
    context: |
      Component Object Model (COM) is a legitimate Windows feature, but it can be hijacked by adversaries for execution. This is often done by invoking a specific COM object's CLSID using tools like `rundll32.exe` or PowerShell's `New-Object -ComObject`. This question focuses on finding these explicit invocations in command-line arguments and matching the CLSID or associated DLL against a threat intelligence list of abusable COM objects.
    answer_sources:
      - Windows Sysmon Event ID 1
      - Windows Event ID 4688
      - User Workstations
      - Application Servers
      - Windows Registry hives (HKCR\CLSID)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process_creation_events for command_lines containing 'rundll32.exe', 'New-Object -ComObject'
          EXTRACT CLSID or DLL from command_line
          MATCH extracted_value against known_malicious_COM_list
          ALERT on match
  - question: Are execution-related COM objects being instantiated by unusual parent processes or at an anomalous frequency?
    context: |
      Certain COM objects, like `ShellBrowserWindow`, are used for execution but are typically only instantiated by a small set of legitimate parent processes (e.g., `explorer.exe`). This question focuses on identifying when these COM objects are created by an anomalous parent (e.g., `services.exe`, `winword.exe`). By baselining the legitimate parent-child relationships for COM object instantiation, we can flag rare or unexpected pairings as highly suspicious.
    answer_sources:
      - Windows Sysmon Event ID 10
      - Windows Sysmon Event ID 13
      - User Workstations
      - Application Servers
      - Windows Registry hives (HKCR\CLSID)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for COM instantiation events (e.g., Sysmon Event 10) for specific execution-related CLSIDs
          BASELINE the frequency of parent processes for these events
          ALERT when a rare parent process is observed or frequency from a common parent exceeds 99th percentile
  - question: Can a machine learning model be used to classify COM instantiation events as benign or malicious?
    context: |
      COM abuse can be subtle. A machine learning model can improve detection by analyzing a combination of features associated with the instantiation event. Factors like the parent process, target CLSID, user context, and command-line arguments can be used to train a model to distinguish between the vast amount of benign COM activity and the specific patterns of malicious use, providing a more accurate and context-rich detection.
    answer_sources:
      - Windows Sysmon Event ID 1
      - Windows Event ID 4688
      - Windows Sysmon Event ID 10
      - Windows Sysmon Event ID 13
      - User Workstations
      - Application Servers
      - Windows Registry hives (HKCR\CLSID)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH COM instantiation event
          EXTRACT features (parent_process, CLSID, user, command_line)
          INPUT features into trained_gradient_boosting_model
          IF model_output == 'malicious'
          ALERT on event
  - question: Are there any long-lived, low-throughput TCP connections on non-standard ports, suggesting a covert C2 channel?
    context: |
      To maintain persistence and control, adversaries may establish custom command-and-control (C2) channels using simple TCP sockets. These channels are often characterized as "long and slow": they remain connected for extended periods (hours or days) but transmit very little data, just enough for beaconing and commands. This question aims to find these covert channels by searching for connections with this specific signature on ports that are not approved for normal application traffic.
    answer_sources:
      - Zeek conn.log
      - Internal network segments (workstation-to-workstation, server-to-server)
      - DMZ-to-internal traffic
      - VPN user subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH network_logs WHERE connection_state = 'successful' AND destination_port NOT IN (allow_list)
          WHERE duration > 24_hours AND (sent_bytes + received_bytes) < 1MB
          ALERT on source_ip, destination_ip, destination_port
  - question: Are there internal TCP connections with a statistically anomalous ratio of data transferred to connection duration?
    context: |
      This question provides a more dynamic way to detect "long and slow" connections. Instead of using fixed thresholds for duration and data volume, it calculates a 'data-to-duration' ratio for every connection. By analyzing the statistical distribution of this ratio across all traffic, we can identify connections that fall into the lowest percentile. These are the connections that transfer an anomalously small amount of data for the time they are open, making them prime candidates for covert C2 channels.
    answer_sources:
      - Zeek conn.log
      - Internal network segments (workstation-to-workstation, server-to-server)
      - DMZ-to-internal traffic
      - VPN user subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH connection in network_logs
          CALCULATE ratio = (sent_bytes + received_bytes) / duration
          ANALYZE distribution of all ratio values
          FLAG connections with a ratio in the lowest 1st percentile
  - question: Can unsupervised machine learning (clustering) identify anomalous network connections that may represent custom IPC or C2 channels?
    context: |
      This question applies an unsupervised machine learning approach to find anomalous network traffic without pre-defined rules. A clustering algorithm like DBSCAN can group connections based on multiple features (duration, port, data volume, etc.). Connections that represent normal, high-volume traffic will form dense clusters. Any connection that does not fit into these clusters is considered an outlier or "noise." These outliers are, by definition, anomalous and should be investigated as potential custom IPC or C2 activity.
    answer_sources:
      - Zeek conn.log
      - Internal network segments (workstation-to-workstation, server-to-server)
      - DMZ-to-internal traffic
      - VPN user subnets
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (duration, bytes, port, etc.) for all connections
          APPLY DBSCAN clustering algorithm to the feature set
          IDENTIFY and ALERT on all points classified as 'noise' (outliers)