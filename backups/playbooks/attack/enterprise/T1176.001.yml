name: "T1176.001: Browser Extensions"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps determine if an adversary is maintaining persistence using malicious browser extensions. It provides investigative questions to detect this activity by looking for several key indicators: browser processes connecting to known command and control (C2) servers; non-browser processes, like command shells, installing or modifying extension files; browsers spawning anomalous child processes such as PowerShell; significant deviations in a browser's normal network behavior (e.g., data volume, connection frequency); and browsers initiating connections to internal network services on non-standard ports like SMB or RDP."
type: "technique"
related:
  - "TA0003: Persistence"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "How can I detect if a browser process is connecting to a known command and control server by correlating network and DNS logs with threat intelligence?"
    context: "This question aims to identify definitive malicious activity. By joining network flow logs with DNS logs and comparing them against a high-confidence list of known C2 indicators, analysts can quickly find high-fidelity signals of compromise from a malicious browser extension. A match strongly suggests that an endpoint is communicating with an adversary's infrastructure."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 5156"
      - "Threat Intelligence Feed"
      - "Egress points to the internet (e.g., firewalls, proxies)"
      - "DNS resolvers"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          JOIN (
            SELECT timestamp, source_ip, dest_ip, dest_port FROM network_flow_logs
          ) AS netflow
          ON netflow.dest_ip = dns.resolved_ip
          JOIN (
            SELECT timestamp, query, resolved_ip FROM dns_logs
          ) AS dns
          WHERE netflow.dest_ip IN c2_ip_feed OR dns.query IN c2_domain_feed
          ALERT on match
  - question: "How can I identify potential C2 connections from browsers by flagging connections to statistically rare domains across the enterprise?"
    context: "Adversaries often use unique or low-prevalence domains for their C2 infrastructure to avoid detection based on known indicators. This question focuses on finding these outliers. By calculating the prevalence of every domain visited across the enterprise, connections to the rarest domains can be surfaced for review, as they are more likely to be malicious than popular, high-traffic sites."
    answer_sources:
      - "Zeek dns.log"
      - "DNS resolvers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Calculate domain prevalence over 30 days
          DEFINE domain_counts = COUNT(query) FROM dns_logs GROUP BY query OVER 30d
          // Step 2: Identify domains in the bottom 1st percentile
          DEFINE rare_domains = GET_PERCENTILE(domain_counts, 1)
          // Step 3: Find connections to these rare domains and flag for review
          SELECT * FROM network_flow_logs WHERE destination_domain IN rare_domains
  - question: "Can I use a time-series model to detect anomalous outbound network traffic volume from a user's browser that might indicate C2 activity?"
    context: "Malicious browser extensions can exfiltrate data or maintain a C2 heartbeat, leading to deviations in a user's normal network traffic patterns. This question leverages a time-series forecasting model to establish a baseline of expected outbound connection volume and data transfer. An alert is triggered when observed activity significantly exceeds the predicted norm, providing a behavioral approach to detecting unknown threats."
    answer_sources:
      - "Zeek conn.log"
      - "Egress points to the internet (e.g., firewalls, proxies)"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // For each user
          MODEL arima_model = TRAIN on (outbound_bytes, connection_count) FROM network_flow_logs OVER 30d
          PREDICT upper_bound = arima_model.forecast(next_hour)
          OBSERVED current_volume = GET current (outbound_bytes, connection_count)
          IF OBSERVED > upper_bound + 3 * std_dev
          THEN ALERT "Anomalous traffic volume"
  - question: "How can I detect if a non-browser process is suspiciously modifying browser extension files or registry keys?"
    context: "Legitimate browser extensions are typically installed through the browser itself. This question aims to detect when an unauthorized process, like a script or command shell, directly writes to extension directories or uses registry keys to force-install an extension. This is a strong indicator of an adversary attempting to sideload a malicious extension for persistence."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "User workstations"
      - "Domain Controllers (for Group Policy Objects)"
      - "Configuration management servers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          SELECT * FROM endpoint_logs
          WHERE (
            event_id == 4663 AND target_path CONTAINS "\\Extensions\\" AND source_process NOT IN (browser_list, whitelist)
          ) OR (
            event_id == 4657 AND target_key CONTAINS "ExtensionInstallForcelist" AND source_process NOT IN (whitelist)
          )
          ALERT on match
  - question: "How can I use statistical analysis to find rare or first-seen processes writing to browser extension directories?"
    context: "While some legitimate non-browser processes might interact with extension directories (e.g., software installers), these are typically common and widespread. This question focuses on identifying statistically unusual processes performing this action. By baselining which processes normally write to these locations, any new or rare process can be flagged as a potential indicator of malicious sideloading."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4688"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Baseline processes writing to extension dirs
          DEFINE process_frequency = COUNT(source_process) FROM endpoint_logs
          WHERE event_id IN (4663, 4688) AND (target_path OR command_line) CONTAINS "\\Extensions\\"
          GROUP BY source_process OVER 30d
          // Step 2: Find rare processes (e.g., < 1% of hosts)
          DEFINE rare_processes = GET_PROCESSES_WITH_FREQUENCY < 1%
          // Step 3: Alert on new events from rare processes
          ALERT when new event matches criteria AND source_process IN rare_processes
  - question: "Can a machine learning model be used to classify file or registry modifications related to browser extensions as either benign or suspicious?"
    context: "Differentiating between a legitimate software installer updating an extension and a malicious script sideloading one can be complex. This question proposes using a classification model trained on process execution data (parent process, command line, etc.) to make this distinction automatically. The model learns the characteristics of benign installations and flags any activity that deviates from this pattern as a 'suspicious sideload'."
    answer_sources:
      - "Windows Event ID 4688"
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // For each file/registry write event related to extensions
          FEATURES = EXTRACT (parent_process, command_line, user, target_path) FROM event
          PREDICTION = classification_model.predict(FEATURES)
          IF PREDICTION == "suspicious sideload"
          THEN ALERT "ML detected suspicious extension installation"
  - question: "How can I create a high-priority alert when a browser process spawns a command shell or scripting engine?"
    context: "Browsers should not, under normal circumstances, launch processes like PowerShell, Command Prompt, or scripting hosts. This parent-child relationship is a classic indicator of code execution, often stemming from a malicious extension or an exploited browser vulnerability. This question focuses on creating a high-fidelity rule to detect this highly anomalous and suspicious behavior."
    answer_sources:
      - "Windows Event ID 4688"
      - "User workstations"
      - "Terminal servers / VDI environments"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          SELECT * FROM process_creation_logs
          WHERE event_id == 4688
          AND parent_process IN ("chrome.exe", "firefox.exe", "msedge.exe")
          AND child_process IN ("cmd.exe", "powershell.exe", "wscript.exe", "cscript.exe", "rundll32.exe")
          ALERT on match with high priority
  - question: "Can I statistically baseline normal parent-child process relationships for browsers to detect anomalous new child processes?"
    context: "While spawning a command shell is clearly bad, an adversary might use a less obvious process. This question addresses that by building a historical baseline of all child processes normally launched by browsers in the environment. An alert is triggered when a new child process appears that has a very low or zero historical probability, indicating a deviation from normal browser behavior."
    answer_sources:
      - "Windows Event ID 4688"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Calculate historical probability of each browser child process
          DEFINE child_probabilities = PROBABILITY(child_process) FROM process_creation_logs
          WHERE parent_process IN (browser_list) OVER 90d
          // Step 2: Alert on new events with low probability children
          ALERT when event_id == 4688 AND parent_process IN (browser_list) AND PROBABILITY(child_process) < 0.001
  - question: "How can a graph-based anomaly detection model identify malicious process chains originating from a browser?"
    context: "Malicious activity can involve a complex chain of processes, not just a single parent-child relationship. This question proposes modeling all process activity as a graph. By training a model on benign process graphs, it can learn normal patterns. Any new or rare subgraph originating from a browser node (e.g., chrome.exe -> powershell.exe -> rundll32.exe) would be flagged as a significant anomaly."
    answer_sources:
      - "Windows Event ID 4688"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Build process graphs from event logs
          GRAPH process_graph = BUILD_GRAPH from process_creation_logs
          // Step 2: Use graph model to find anomalous subgraphs
          ANOMALIES = graph_model.find_anomalous_subgraphs(process_graph)
          // Step 3: Alert if anomaly originates from a browser process
          IF any ANOMALY starts_with_node IN (browser_list)
          THEN ALERT "ML detected anomalous process graph from browser"
  - question: "How can I detect suspicious browser network activity by looking for malformed User-Agent strings or connections to newly registered domains?"
    context: "A malicious extension's C2 communication might use a missing or non-standard User-Agent string, which is a strong indicator. This question focuses on finding such requests, especially when they are directed to domains that were registered very recently, as these are less likely to be legitimate and are often used in new campaigns."
    answer_sources:
      - "Zeek http.log"
      - "Zeek dns.log"
      - "Egress points to the internet"
      - "Network taps/sensors providing Zeek data"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          SELECT * FROM http_logs
          JOIN domain_registration_data ON domain
          WHERE (user_agent IS NULL OR user_agent NOT MATCHES standard_patterns)
          AND domain_registration_date > NOW() - 30d
          ALERT on match
  - question: "How can I use statistical methods to detect anomalous browser network behavior based on data volume, connection frequency, or domain name entropy?"
    context: "This question provides multiple statistical avenues for detection. By creating a baseline of a host's normal outbound traffic volume, any significant spike can be flagged. Additionally, calculating the Shannon entropy of domain names can help detect Domain Generation Algorithms (DGAs), as algorithmically generated names have a character distribution different from human-readable names."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Egress points to the internet"
      - "Network taps/sensors providing Zeek data"
      - "User workstations"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Query 1: Volume/Frequency Anomaly
          BASELINE = CALC_PERCENTILE(outbound_bytes, connection_count) FROM network_flow_logs PER host OVER 30d
          ALERT IF current_hourly_volume > BASELINE.99th_percentile
          // Query 2: DGA Detection
          ALERT IF SHANNON_ENTROPY(dns_query) > threshold FROM dns_logs PER host
  - question: "Can machine learning models, like LSTMs or clustering, identify anomalous browser network connections that deviate from forecasted or normal patterns?"
    context: "This question explores advanced, model-driven detection. A time-series model (LSTM) can forecast expected network behavior with greater accuracy than simple statistical baselines. Separately, a clustering algorithm can group all network connections based on their features (duration, bytes, etc.) and automatically identify outlier connections that do not fit into any 'normal' cluster."
    answer_sources:
      - "Zeek conn.log"
      - "Egress points to the internet"
      - "Network taps/sensors providing Zeek data"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Query 1: Time-series forecast
          FORECAST = lstm_model.predict(next_hour) FROM host_traffic_history
          ALERT IF observed_traffic DEVIATES_SIGNIFICANTLY from FORECAST
          // Query 2: Clustering
          CLUSTERS = KMEANS(features) FROM network_flow_logs
          ALERT ON connections IN outlier_cluster
  - question: "How can I detect when a browser process attempts to connect to internal servers on non-web ports like SMB, RDP, or SSH?"
    context: "A connection from a browser to an internal file server on port 445 (SMB) or a domain controller on port 3389 (RDP) is extremely suspicious. This behavior suggests a malicious extension is being used as a beachhead to perform internal reconnaissance or lateral movement, and this question aims to detect it with a high-fidelity rule."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "User network segments"
      - "Server network segments"
      - "Internal network taps/sensors"
      - "Domain Controllers"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          SELECT * FROM network_flow_logs
          WHERE source_ip IN user_vlan AND dest_ip IS_RFC1918 AND dest_ip NOT IN user_vlan
          AND dest_port NOT IN (80, 443)
          AND (SELECT initiating_process) IN (browser_list)
          ALERT on match
  - question: "Can I use frequency analysis to identify rare and potentially malicious internal connections originating from user workstations' browsers?"
    context: "This question focuses on identifying anomalous internal connections by baselining what is 'normal'. By analyzing all internal connections, the system can learn which users/workstations typically connect to which internal services. A new, never-before-seen connection from a browser process would be flagged as statistically rare and highly suspicious."
    answer_sources:
      - "Zeek conn.log"
      - "User network segments"
      - "Server network segments"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Baseline normal internal connections
          DEFINE connection_frequency = COUNT(*) FROM network_flow_logs
          WHERE dest_ip IS_RFC1918
          GROUP BY source_ip, dest_ip, dest_port OVER 90d
          // Step 2: Alert on new, rare connections from a browser process
          ALERT on new connection WHERE connection_frequency for that tuple is 0
  - question: "How can a graph-based community detection model identify when a browser process creates an anomalous connection that bridges distinct internal network segments?"
    context: "Modern networks are often segmented into communities (e.g., user VLANs, server VLANs). This question suggests modeling the network as a graph and using algorithms to automatically identify these communities based on normal traffic flows. An alert is triggered when a browser process creates a connection (an edge) that violates this community structure."
    answer_sources:
      - "Zeek conn.log"
      - "User network segments"
      - "Server network segments"
    range: "last 90 days"
    queries:
      - search_technology: "pseudocode"
        query: |
          // Step 1: Model network as a graph and detect communities
          GRAPH network_graph = BUILD_GRAPH from network_flow_logs
          COMMUNITIES = community_detection_algorithm(network_graph)
          // Step 2: Alert on edges that bridge communities in an unexpected way
          ALERT on new connection from browser_process
          WHERE source_node.community != dest_node.community
          AND this_bridge_type IS_ANOMALOUS