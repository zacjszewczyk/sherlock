name: "T1592: Gather Victim Host Information"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps determine if an external adversary is actively gathering information about enterprise hosts. It provides investigative questions to detect various reconnaissance techniques, such as network and port scanning from threat-intelligence-flagged IPs, connections to known reconnaissance frameworks, use of scanning tool signatures, anomalous User-Agent strings, and probing for information disclosure vulnerabilities. The goal is to identify these precursor activities before a more significant compromise occurs."
type: "technique"
related: 
  - "TA0043: Reconnaissance"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Are there any connection attempts from source IPs that are present on our Cyber Threat Intelligence (CTI) watch lists?"
    context: "This question uses a symbolic approach to detect known threats. By ingesting CTI feeds of malicious IPs into a watch list, we can create a high-fidelity alert whenever a source IP from our network logs matches an entry. This allows for early detection of reconnaissance from known bad actors."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "External-facing web servers"
      - "VPN concentrators"
      - "Firewall and network gateway logs"
      - "Domain controllers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH (sourcetype=zeek:conn OR EventCode=5156)
          WHERE source_ip IN cti_watchlist
          RETURN count BY source_ip, destination_ip, destination_port
  - question: "Have any external source IPs exhibited anomalous scanning behavior by connecting to an unusually high number of unique hosts or ports?"
    context: "This question uses a statistical approach to identify scanning behavior without relying on known indicators. By establishing a baseline for normal external traffic, we can detect deviations that suggest a sweep (many hosts, one port) or a scan (one host, many ports). An alert is triggered if an IP's activity exceeds the 99th percentile, indicating a high probability of reconnaissance."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "External-facing web servers"
      - "VPN concentrators"
      - "Firewall and network gateway logs"
      - "Domain controllers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each external_source_ip in conn_logs over 5min_window:
            CALCULATE unique_dest_hosts
            CALCULATE unique_dest_ports
            IF unique_dest_hosts > baseline_99th_percentile OR unique_dest_ports > baseline_99th_percentile:
              ALERT
  - question: "Can we classify network traffic from external IPs as reconnaissance using a machine learning model?"
    context: "This question applies a Random Forest classification model to proactively identify reconnaissance. The model is trained on features like CTI list membership, distinct port/host counts, and connection states. By classifying new connection data, it can detect complex patterns of reconnaissance that symbolic or simple statistical rules might miss, alerting when an IP's activity is classified as 'reconnaissance' with high confidence."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "External-facing web servers"
      - "VPN concentrators"
      - "Firewall and network gateway logs"
      - "Domain controllers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each new_connection_event:
            EXTRACT features (is_on_cti, distinct_ports_5min, distinct_hosts_5min, etc.)
            PREDICT activity_class = recon_model.predict(features)
            IF activity_class == 'reconnaissance' AND confidence > 0.9:
              ALERT
  - question: "Have any internal hosts connected to external domains or IPs associated with known reconnaissance frameworks?"
    context: "This question aims to detect the use of client-side reconnaissance frameworks (e.g., ScanBox) by internal systems. By maintaining a CTI watch list of domains/IPs for these frameworks, we can correlate DNS and HTTP logs to find compromised internal hosts that are being used to gather information. A successful connection to a watchlisted entity is a strong indicator of a breach."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DNS resolvers"
      - "Network egress points and web proxies"
      - "User workstations"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH (sourcetype=zeek:dns OR sourcetype=zeek:http)
          WHERE query_or_host IN recon_framework_watchlist
          RETURN internal_ip, query_or_host
  - question: "Are there any outbound HTTP POST requests containing data with unusually high entropy?"
    context: "This question seeks to detect potential data exfiltration associated with reconnaissance. After a framework gathers host information, it often sends it back to a C2 server. This data is frequently obfuscated or compressed, resulting in high entropy. By calculating the Shannon entropy of POST request bodies and comparing it to a baseline, we can identify requests that are likely carrying exfiltrated, non-standard data."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DNS resolvers"
      - "Network egress points and web proxies"
      - "User workstations"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each outbound_http_post in http_logs:
            CALCULATE entropy_score = shannon_entropy(post_body)
            IF entropy_score > baseline_98th_percentile:
              ALERT
  - question: "Have any outbound HTTP requests been classified as browser profiling by a machine learning model?"
    context: "This question uses a supervised classification model (e.g., Gradient Boosting) to detect sophisticated browser profiling attempts. The model is trained on features like User-Agent, request body length, and URI entropy to distinguish legitimate browsing from automated information gathering. This helps find stealthy reconnaissance that might not trigger other rules."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek http.log"
      - "Zeek dns.log"
      - "DNS resolvers"
      - "Network egress points and web proxies"
      - "User workstations"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each new_outbound_http_request:
            EXTRACT features (user_agent, request_len, uri_entropy, etc.)
            PREDICT request_class = profiling_model.predict(features)
            IF request_class == 'profiling' AND confidence > high_threshold:
              ALERT
  - question: "Are there any inbound HTTP requests with User-Agent strings or URIs matching signatures of common scanning tools?"
    context: "This question uses a symbolic approach to detect unsophisticated, automated scanning. Many common security tools (e.g., nmap, sqlmap, nikto) use default User-Agent strings or probe for specific, well-known sensitive files. By applying regular expressions to HTTP logs, we can quickly identify and alert on any requests that match these known malicious signatures."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "API gateways"
      - "Load balancers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH sourcetype=zeek:http
          WHERE user_agent MATCHES (nmap|nikto|sqlmap) OR uri MATCHES (/.git/config|/.env)
          RETURN source_ip, user_agent, uri
  - question: "Have any external IPs generated an abnormally high ratio of HTTP error responses (4xx/5xx)?"
    context: "This question helps identify forceful browsing or resource enumeration. When a scanner tries to find hidden directories or files, it often generates a large number of requests that result in 'Not Found' (404) or other error codes. By calculating the ratio of error responses to success responses for each IP and comparing it to a baseline, we can flag IPs that are likely performing enumeration scans."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "API gateways"
      - "Load balancers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each external_source_ip in http_logs over 10min_window:
            CALCULATE error_ratio = (count(status>=400) / count(status<400))
            IF error_ratio > baseline_95th_percentile:
              ALERT
  - question: "Have any external user sessions exhibited highly improbable URI navigation paths?"
    context: "This question uses a Long Short-Term Memory (LSTM) sequence model to detect anomalous navigation behavior indicative of automated scanning. The model is trained on legitimate user URI paths. When a new session's path is fed to the model, it receives a perplexity score. A very high score suggests the path is non-human and likely generated by a scanner, triggering an alert."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "API gateways"
      - "Load balancers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each user_session (sequence_of_uris):
            CALCULATE perplexity = lstm_model.score(sequence_of_uris)
            IF perplexity > anomaly_threshold:
              ALERT on session
  - question: "Has any single external IP initiated a high-volume port scan or network sweep within a short time frame?"
    context: "This question uses a symbolic rule with fixed thresholds to detect clear and aggressive scanning activity. It specifically looks for an external IP connecting to over 100 unique ports on one host (port scan) or one port on over 50 unique hosts (network sweep) within a minute. This is a strong, unambiguous indicator of active reconnaissance."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "Firewall and network gateway logs"
      - "DMZ subnets"
      - "Externally-facing servers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH (sourcetype=zeek:conn OR EventCode=5156) in last 60s by source_ip
          WHERE (unique_dest_port_count > 100 AND unique_dest_ip_count == 1)
             OR (unique_dest_ip_count > 50 AND unique_dest_port_count == 1)
          ALERT
  - question: "Are there external IPs connecting to an unusually wide or random distribution of destination ports?"
    context: "This question provides a statistical method to detect more subtle or non-sequential port scans. Instead of fixed counts, it calculates the standard deviation and entropy of destination ports for each source IP. A high value for either metric, relative to a baseline, suggests the IP is not connecting to standard services but is instead scanning a wide range of ports, which is characteristic of reconnaissance."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "Firewall and network gateway logs"
      - "DMZ subnets"
      - "Externally-facing servers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each external_source_ip in conn_logs over 5min_window:
            CALCULATE port_stddev = stdev(destination_ports)
            CALCULATE port_entropy = entropy(destination_ports)
            IF port_stddev > (mean_stddev + 3*stdev_of_stddev) OR port_entropy > entropy_baseline:
              ALERT
  - question: "Can we identify clusters of anomalous network scanning activity using a density-based algorithm?"
    context: "This question applies an unsupervised machine learning algorithm, DBSCAN, to network connection data. By clustering connections based on features like source/destination IP and port, legitimate traffic will form a large, dense cluster. Scanning activity, however, will appear as smaller, distinct, and dense clusters. This method can programmatically identify these anomalous clusters and the scanning IPs within them without prior labeling."
    answer_sources:
      - "Zeek conn.log"
      - "Windows Event ID 5156"
      - "Firewall and network gateway logs"
      - "DMZ subnets"
      - "Externally-facing servers"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          EXTRACT features (src_ip, dst_ip, dst_port) from conn_logs
          RUN dbscan_model on features to generate clusters
          FOR each cluster identified as anomalous:
            ALERT on core_point_ips in cluster
  - question: "Are there any inbound HTTP requests containing User-Agent strings from a known malicious tool blocklist?"
    context: "This question uses a simple and effective symbolic approach. By maintaining a blocklist of User-Agent strings associated with known malicious scanning and exploitation tools (e.g., 'masscan', 'zgrab'), we can generate a high-fidelity alert on any inbound request that matches. This is a quick way to identify low-effort attack attempts."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "Content Delivery Networks (CDNs)"
      - "Reverse proxies"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH sourcetype=zeek:http
          WHERE user_agent IN malicious_ua_blocklist
          RETURN source_ip, user_agent
  - question: "Have we observed any inbound HTTP requests with User-Agent strings that are new, extremely rare, or appear randomized?"
    context: "This question uses statistical properties to find suspicious User-Agent strings. Attackers often use non-standard, randomized, or unique User-Agents to evade simple signature-based detection. This query identifies such agents by checking if they are new (never seen), rare (in the bottom percentile of frequency), or have high entropy (suggesting randomization), all of which are indicators of potentially malicious activity."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "Content Delivery Networks (CDNs)"
      - "Reverse proxies"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each inbound_http_request:
            CALCULATE ua_entropy = shannon_entropy(user_agent)
            CHECK ua_frequency in last 30 days
            IF ua_frequency == 0 OR ua_frequency < 0.1_percentile OR ua_entropy > 3.5:
              ALERT
  - question: "Can we detect fabricated or malicious User-Agent strings using an autoencoder neural network?"
    context: "This question applies a more advanced machine learning technique to identify anomalous User-Agent strings. An autoencoder is trained on a large corpus of legitimate User-Agents to learn their normal structure. When a new, potentially fabricated User-Agent is passed through the model, it will have a high reconstruction error because it doesn't fit the learned patterns. This allows for the detection of novel and sophisticated malicious User-Agents."
    answer_sources:
      - "Zeek http.log"
      - "Public-facing web applications"
      - "Content Delivery Networks (CDNs)"
      - "Reverse proxies"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each new_inbound_request:
            CALCULATE reconstruction_error = autoencoder_model.evaluate(user_agent)
            IF reconstruction_error > error_99.9th_percentile:
              ALERT
  - question: "Has any external IP made requests for known sensitive files or information-leaking API endpoints?"
    context: "This question uses a symbolic approach to detect targeted probing for information disclosure vulnerabilities. By creating a list of regular expression patterns for known sensitive files (e.g., '/.git/config', '/.env') or API endpoints (e.g., '/actuator/heapdump'), we can generate a high-severity alert on any match. A single hit is significant as it shows specific, malicious intent."
    answer_sources:
      - "Zeek http.log"
      - "Public web servers"
      - "API endpoints"
      - "Cloud service management consoles"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          SEARCH sourcetype=zeek:http from external_ip
          WHERE uri MATCHES sensitive_uri_patterns
          ALERT on any match
  - question: "Has any single external IP been observed probing for multiple different information disclosure vulnerabilities?"
    context: "This question builds on the symbolic pattern matching by adding a statistical count. While a single probe is suspicious, an actor probing for multiple different known vulnerabilities from the same IP address within a short time window is a much stronger indicator of targeted reconnaissance. This query counts unique URI patterns that match the sensitive list and alerts if the count exceeds a low threshold (e.g., 3)."
    answer_sources:
      - "Zeek http.log"
      - "Public web servers"
      - "API endpoints"
      - "Cloud service management consoles"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each external_source_ip in http_logs over 5min_window:
            COUNT unique_matching_uris from sensitive_uri_patterns
            IF count > 3:
              ALERT
  - question: "Are there any user sessions that a one-class SVM model identifies as anomalous outliers?"
    context: "This question uses a one-class SVM, an anomaly detection algorithm, to identify entire user sessions that deviate from normal behavior. The model is trained on features of benign sessions (e.g., duration, request count, error ratios). It can then classify new sessions that are outliers, which could represent automated reconnaissance activity that might not trigger individual request-based rules but looks highly anomalous when viewed as a whole session."
    answer_sources:
      - "Zeek http.log"
      - "Public web servers"
      - "API endpoints"
      - "Cloud service management consoles"
    range: "last 90 days"
    queries:
      - technology: "Pseudocode"
        query: |
          FOR each user_session:
            EXTRACT session_features (duration, req_count, error_ratio, etc.)
            PREDICT session_class = one_class_svm.predict(session_features)
            IF session_class == 'outlier':
              ALERT on session