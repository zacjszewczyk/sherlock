name: T1588.001: Malware
id: 9e3c1b0a-7d6f-4c5e-8b1a-2d3c4f5e6a7b
description: This playbook helps determine if an adversary has acquired and deployed malware within the environment. It provides investigative questions to detect malware through various means, including matching file hashes against threat intelligence, identifying network connections to known malicious infrastructure, analyzing suspicious process creation patterns and command-line arguments, correlating anomalous process and network behaviors, detecting C2 beaconing, and identifying files with evasive characteristics like mismatched extensions or high entropy.
type: technique
related:
  - TA0042: Resource Development
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are files with cryptographic hashes matching known malicious indicators being observed on the network or endpoints?
    context: This question aims to detect known malware by comparing file hashes (MD5, SHA1, SHA256) from file creation, process creation, or network file transfer logs against integrated threat intelligence feeds. A match provides a high-confidence signal that a malicious file is present in the environment.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points, Internal file servers, Web content filters, User endpoints
    range: last 90 days
    queries:
      - symbolic: SEARCH (file_creation_logs OR process_creation_logs OR network_file_logs) | JOIN file_hash WITH threat_intelligence_watchlist ON file_hash | WHERE match_found
  - question: Are there files with a very low prevalence across the enterprise, suggesting they might be unique or targeted malicious tools?
    context: This question seeks to identify potentially malicious files by their rarity. Adversaries often use custom or newly deployed tools that will only appear on a small number of systems. By calculating the prevalence (stack counting) of all file hashes, those seen on very few endpoints (e.g., < 5) can be flagged as suspicious.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points, Internal file servers, Web content filters, User endpoints
    range: last 90 days
    queries:
      - statistical: SEARCH all_file_hashes in last 24h | GROUP BY file_hash | COUNT endpoints | WHERE endpoint_count < 5
  - question: Can a machine learning model predict if a newly observed file is malicious based on its metadata and threat intelligence labels?
    context: This question uses a predictive approach. A classification model, trained on features like file metadata (MIME type, size, entropy) and historical labels (benign/malicious), can score new files. This helps identify novel malware that may not have a known hash but exhibits malicious characteristics.
    answer_sources:
      - Zeek file.log
      - Windows Event ID 4663
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Network egress points, Internal file servers, Web content filters, User endpoints
    range: last 90 days
    queries:
      - machine_learning: INPUT new_file_event | APPLY classification_model(file_metadata) | WHERE prediction_score > high_confidence_threshold
  - question: Are endpoints initiating network connections to external IP addresses, domains, or URLs known to be malicious C2 servers or distribution points?
    context: This question aims to detect malware communications by checking network logs (DNS, connection, HTTP/SSL) against threat intelligence watchlists of known malicious infrastructure. A connection to a blacklisted IP, domain, or URL is a strong indicator of a compromise.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points, DNS resolvers, Web proxies, User endpoints
    range: last 90 days
    queries:
      - symbolic: SEARCH (dns_logs OR connection_logs OR http_logs) | JOIN destination WITH threat_intel_watchlist ON (domain OR ip_address) | WHERE match_found
  - question: Are endpoints communicating with domains that are both newly registered and infrequently queried within the organization?
    context: This question identifies suspicious domains based on temporal and prevalence characteristics. Adversaries frequently use newly registered domains for their campaigns, which will also have a low query count across the enterprise. Flagging this combination helps uncover emergent C2 infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points, DNS resolvers, Web proxies, User endpoints
    range: last 90 days
    queries:
      - statistical: SEARCH dns_logs | CALCULATE domain_age AND query_prevalence | WHERE domain_age < 30_days AND query_prevalence < 0.1%
  - question: Can a machine learning model detect algorithmically generated domains (DGAs) used by malware for C2 communications?
    context: This question addresses a specific C2 technique where malware generates a large number of domains to find one that is active. A DGA detection model analyzes domain name features (length, entropy, character patterns) to identify and score these suspicious domains, which are difficult to block with static watchlists.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Zeek ssl.log
      - Sysmon Event ID 3
      - Network egress points, DNS resolvers, Web proxies, User endpoints
    range: last 90 days
    queries:
      - machine_learning: INPUT dns_query_log | APPLY dga_detection_model(domain_name) | WHERE dga_score > high_confidence_threshold
  - question: Are processes being created with command lines or parent-child relationships that match known malware or offensive tool execution patterns?
    context: This question uses signature-based detection on process execution data. By applying rules (like Sigma or YARA-L) to command-line arguments and process lineage, it's possible to find exact matches for known malicious activities, such as the execution of Mimikatz, Cobalt Strike, or specific malware droppers.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers), User endpoints, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - symbolic: SEARCH process_creation_logs | APPLY (Sigma OR YARA-L rules for known malware command lines) | WHERE rule_match_found
  - question: Are parent processes spawning statistically rare or unusual child processes?
    context: This question focuses on anomaly detection in process relationships. By baselining normal parent-child process pairs (e.g., explorer.exe spawning cmd.exe), it can alert on deviations, such as Microsoft Word (winword.exe) spawning PowerShell (powershell.exe), which is a rare and highly suspicious event.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers), User endpoints, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - statistical: SEARCH process_creation_logs | BASELINE parent_child_process_frequency | ALERT on rare_combinations (e.g., < 5th percentile)
  - question: Can a machine learning model detect anomalous and potentially malicious command-line arguments?
    context: This question uses a sequence-based model to learn the structure of normal command lines for common processes (like powershell.exe). The model can then identify new command lines that deviate significantly from this learned structure (high reconstruction error), flagging them as anomalous and potentially malicious, even if they don't match a known signature.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Critical servers (e.g., Domain Controllers, database servers), User endpoints, Virtual Desktop Infrastructure (VDI) fleet
    range: last 90 days
    queries:
      - machine_learning: INPUT new_command_line | APPLY autoencoder_model(tokenized_command_line) | WHERE reconstruction_error > threshold
  - question: Are unsigned processes or processes masquerading as system binaries making external network connections?
    context: This question links process characteristics to network behavior. Malware often runs unsigned or from non-standard locations while masquerading as a legitimate process (e.g., svchost.exe in a user directory). Alerting when such a process makes an outbound network connection is a powerful heuristic for detecting malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints, Public-facing web servers, Network egress points
    range: last 90 days
    queries:
      - symbolic: SEARCH network_connection_logs | FILTER process_is_unsigned OR process_path_is_anomalous | WHERE destination_is_external AND NOT in_allowlist
  - question: Are processes being executed from file paths with unusually high character entropy?
    context: This question identifies malware attempting to hide by using randomized file paths. By calculating the Shannon entropy of the executable path, it's possible to flag processes running from locations with high randomness (e.g., C:\Windows\Temp\asdfwernxcv.exe), which deviates significantly from the structured paths of legitimate software.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints, Public-facing web servers, Network egress points
    range: last 90 days
    queries:
      - statistical: SEARCH process_execution_logs | CALCULATE entropy(file_path) | WHERE entropy_score > 3_std_dev_from_baseline
  - question: Can a machine learning model identify anomalous clusters of correlated process and network activity?
    context: This question uses unsupervised learning to find outliers in combined process and network data. By clustering events based on a feature set (process path entropy, digital signature status, parent process, destination IP prevalence), the model can isolate small, distinct clusters that represent anomalous behaviors deviating from the norm, indicating potential malware.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - User endpoints, Public-facing web servers, Network egress points
    range: last 90 days
    queries:
      - machine_learning: INPUT correlated_process_network_events | APPLY clustering_model(features) | IDENTIFY small_outlier_clusters
  - question: Are there SSL connections using non-standard ports or self-signed certificates?
    context: This question looks for common C2 evasion techniques. Malware may use SSL/TLS to encrypt its traffic but run it over a non-standard port (not 443) to bypass simple port-based firewalls. It also frequently uses self-signed certificates. Detecting this combination is a strong indicator of malicious C2 communication.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points, VPN concentrators, Server subnets
    range: last 90 days
    queries:
      - symbolic: SEARCH connection_logs WHERE protocol is 'ssl' AND destination_port is NOT 443 | CORRELATE with ssl_logs WHERE certificate is self-signed
  - question: Is there evidence of periodic, fixed-interval network connections (beaconing) from any internal host?
    context: This question aims to detect the 'heartbeat' of malware C2 communication. By analyzing the time between connections from a source to a destination, a very low standard deviation indicates a machine-generated, automated pattern, which is characteristic of beaconing. This helps find active C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points, VPN concentrators, Server subnets
    range: last 90 days
    queries:
      - statistical: SEARCH connection_logs over 24h | GROUP BY src_ip, dst_ip | CALCULATE std_dev(time_delta_between_connections) | WHERE std_dev < 1_second AND connection_count > 10
  - question: Can a time-series analysis model detect automated C2 beaconing patterns in a host's outbound data volume?
    context: This question applies a more advanced statistical method to find beaconing. By decomposing a host's outbound traffic volume over time, it's possible to isolate a strong, repeating seasonal component. If this component has a short, regular period (e.g., every 5 minutes), it points to automated C2 activity that is distinct from normal, bursty user traffic.
    answer_sources:
      - Zeek conn.log
      - Zeek ssl.log
      - Network egress points, VPN concentrators, Server subnets
    range: last 90 days
    queries:
      - machine_learning: INPUT host_outbound_traffic_timeseries | APPLY time_series_decomposition | IDENTIFY strong_short_period_seasonal_component
  - question: Are files being observed with evasive characteristics like double extensions or a mismatch between file extension and true file type?
    context: This question identifies files that are disguised to trick users or security controls. Detections include searching for double extensions (e.g., 'file.pdf.exe') or finding files where the apparent type (from the extension) does not match the actual type (identified by its MIME type or magic number), like an executable file named 'report.doc'.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways, Web proxies, Internal file servers, User endpoints
    range: last 90 days
    queries:
      - symbolic: SEARCH file_logs | WHERE filename MATCHES '.*\\.[a-z]{3,4}\\.exe$' OR (mime_type is 'application/x-dosexec' AND extension is NOT '.exe')
  - question: Are there files with filenames that have an unusually high character entropy?
    context: This question flags files with randomized names, a common tactic used by malware to avoid signature-based blocking and make analysis more difficult. By calculating the Shannon entropy of filenames, those in the top percentile can be identified as suspicious and worthy of investigation.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways, Web proxies, Internal file servers, User endpoints
    range: last 90 days
    queries:
      - statistical: SEARCH file_logs | CALCULATE entropy(filename) | WHERE entropy_score > 99th_percentile
  - question: Can an unsupervised anomaly detection model identify files with anomalous combinations of features?
    context: This question uses a model to learn what 'normal' files look like based on a combination of features (filename entropy, size, MIME type, etc.). The model can then score new files, and those that are 'easy to isolate' or different from the norm are flagged as anomalous, potentially indicating a novel or evasive malicious file.
    answer_sources:
      - Zeek file.log
      - Sysmon Event ID 11
      - Email gateways, Web proxies, Internal file servers, User endpoints
    range: last 90 days
    queries:
      - machine_learning: INPUT file_event_features | APPLY isolation_forest_model | WHERE anomaly_score is high