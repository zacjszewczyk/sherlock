name: "T1003: OS Credential Dumping"
id: "f3c939e7-8d3f-4e0d-8b84-47b711201948"
description: "This playbook helps determine if an adversary has attempted to dump credentials from compromised systems. It covers various techniques, including the use of known dumping tools (e.g., Mimikatz), malicious PowerShell scripts, and leveraging Volume Shadow Copies to access locked files like NTDS.dit or the SAM hive. It also addresses Linux-based credential theft, direct memory access to the LSASS process, replication attacks like DCSync, direct access to the SAM file and LSA registry secrets, and the disabling of security features like LSA Protection (RunAsPPL)."
type: "technique"
related:
  - "TA0006: Credential Access"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
investigative_questions:
  - question: "Are there any process creation events that match a watchlist of known credential dumping tools, or any file transfers that match known malicious tool hashes?"
    context: "This question aims to detect the direct execution or transfer of well-known credential dumping utilities. Adversaries often use publicly available tools like Mimikatz or Procdump. Monitoring for the execution of these specific process names or the transfer of files with their known hashes provides a high-fidelity signal of a credential dumping attempt. Correlating process execution with file transfers can help identify the initial introduction of the tool onto the network."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH process_creation_events (event_id=4688) WHERE process_name IN (mimikatz.exe, procdump.exe, pwdump.exe, ...)"
      - tech: "pseudocode"
        query: "SEARCH file_transfer_logs (zeek_files) WHERE file_hash IN (malicious_hash_feed)"
  - question: "Have there been any statistically rare file transfers, such as executables or scripts being transferred over non-standard ports?"
    context: "This question helps uncover attempts to smuggle credential dumping tools onto the network by evading simple signature-based detections. Adversaries may rename tools or use uncommon ports for transfer. By establishing a baseline of normal file transfer activity, we can identify outliers. A rare combination of file type and extension, or the transfer of an executable file over a port not typically used for that purpose, is highly suspicious and warrants investigation."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH file_transfer_logs | CALCULATE rarity(mime_type, file_extension) | FILTER rarity > 99th_percentile"
      - tech: "pseudocode"
        query: "SEARCH network_connections JOIN file_transfers WHERE file_extension IN (.exe, .ps1) AND port NOT IN (standard_ports) | PROFILE frequency"
  - question: "Can machine learning models predict if a process creation or file transfer event is associated with a credential dumping tool based on its behavioral features?"
    context: "This question explores a more advanced, behavioral approach to detection. Instead of relying on specific names or hashes, a machine learning model can learn the general characteristics of malicious activity. Features like the parent process, high command-line entropy (indicating obfuscation), and unusual user contexts can collectively point to credential dumping, even if the specific tool is unknown or has been modified."
    answer_sources:
      - "Windows Event ID 4688"
      - "Zeek files.log"
      - "Zeek conn.log"
      - "Domain Controllers, Member Servers, Privileged Access Workstations (PAWs), Network Egress Points"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL predict_credential_dumping ON process_events, file_events USING features(parent_process, cmd_entropy, file_size, user_context)"
  - question: "Are there any PowerShell script block logs containing keywords or regular expressions associated with known credential dumping tools?"
    context: "This question focuses on detecting the use of PowerShell-based credential dumping tools. Adversaries frequently use frameworks like PowerSploit or custom scripts to perform these actions. Searching for specific function names (e.g., `Invoke-Mimikatz`), commands (`sekurlsa::logonpasswords`), or API calls (`MiniDumpWriteDump`) within PowerShell logs can directly identify this activity. Using regular expressions helps find obfuscated or encoded variations of these commands."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Active Directory Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH powershell_script_logs (event_id=4104) WHERE script_block CONTAINS ('Invoke-Mimikatz', 'LsaSecrets', 'DumpCreds', ...)"
  - question: "Have any PowerShell scripts with abnormally high entropy been executed?"
    context: "This question helps to identify obfuscated PowerShell scripts, a common tactic used by adversaries to hide their intentions. Malicious scripts are often heavily obfuscated to bypass simple keyword-based detection. By calculating the entropy (a measure of randomness) of all executed script blocks and establishing a baseline, we can flag scripts that are statistical outliers. A high entropy score is a strong indicator of obfuscation and potential malicious activity."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Active Directory Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH powershell_script_logs | CALCULATE entropy(script_block) | FILTER entropy > (baseline_mean + 3 * baseline_stddev)"
  - question: "Has an anomalous spike in the frequency or average entropy of PowerShell scripts on a single host been detected?"
    context: "This question aims to identify the deployment of a malicious PowerShell framework through time-series analysis. An adversary deploying a tool often results in a sudden burst of activity involving multiple, high-entropy scripts on a compromised host. By modeling the normal frequency and entropy of script executions per host over time, we can detect anomalous spikes that deviate significantly from established patterns, indicating a potential compromise."
    answer_sources:
      - "Windows Event ID 4104"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Active Directory Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL detect_anomaly ON powershell_script_logs_timeseries(frequency, avg_entropy) PER host"
  - question: "Has a command been executed to create a volume shadow copy, immediately followed by a command to copy NTDS.dit, SAM, or SYSTEM files from that shadow copy?"
    context: "This question looks for a specific, high-fidelity sequence of commands used to steal credential databases. Files like NTDS.dit (on Domain Controllers) and SAM are locked by the operating system. Adversaries bypass this by creating a shadow copy of the volume and then copying the file from the copy. Correlating the creation of a shadow copy (`vssadmin`, `wmic`) with a subsequent copy operation from the shadow path within a short time window is a strong indicator of this technique."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "CORRELATE process_events (vssadmin, wmic shadowcopy) with process_events (copy from \\\\?\\GLOBALROOT\\...) WITHIN 10 minutes ON same_host"
  - question: "Has there been an abnormally high frequency of commands like 'reg.exe save', 'vssadmin.exe', or 'ntdsutil.exe' executed by a single user or on a single host?"
    context: "This question seeks to identify anomalous usage of legitimate administrative tools that can be abused for credential dumping. While these tools have valid uses, their repeated or unusual execution by a specific user or on a non-standard host (e.g., `ntdsutil` on a workstation) can be suspicious. By profiling the normal frequency of these commands, we can flag executions that exceed a historical baseline for a given entity, suggesting potential misuse."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH process_events WHERE process_name IN (reg.exe, vssadmin.exe, ntdsutil.exe) | PROFILE frequency by user, host | FILTER frequency > 99th_percentile_of_baseline"
  - question: "Can a sequence analysis model detect the specific chain of commands associated with credential harvesting from a shadow copy?"
    context: "This question proposes using a more advanced model to recognize the entire attack chain, reducing false positives from legitimate, isolated uses of tools like `vssadmin`. A sequence model, such as a Hidden Markov Model (HMM), can be trained to recognize the specific order of operations (`vssadmin create` -> `copy from shadow copy` -> `vssadmin delete`). This allows the system to distinguish between a known malicious pattern and benign administrative command sequences."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Domain Controllers (for NTDS.dit), All Windows Systems (for SAM/SYSTEM hives)"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL detect_sequence ON process_events USING HMM for pattern ('vssadmin create', 'copy', 'vssadmin delete')"
  - question: "Have any files been transferred with names commonly associated with Linux credentials, such as 'shadow', 'id_rsa', or 'authorized_keys'?"
    context: "This question focuses on detecting the theft of critical credential files from Linux systems. Adversaries who compromise a Linux host will often attempt to exfiltrate files like `/etc/shadow` (containing hashed passwords) or SSH private keys (`id_rsa`). Monitoring network file transfers for these specific filenames, especially if transferred over unencrypted protocols or to external destinations, can provide a clear signal of credential theft."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek ssh.log"
      - "Network segments containing critical Linux servers, Network egress points, VPN concentrators"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH file_transfer_logs (zeek_files) WHERE filename CONTAINS ('shadow', 'passwd', 'id_rsa') AND (protocol IN ('ftp', 'http') OR destination_ip = external)"
  - question: "Have any SSH sessions exhibited an anomalously high ratio of server-to-client data transfer?"
    context: "This question aims to detect bulk file exfiltration over an established SSH session. While the content of the SSH session is encrypted, the volume of data transferred is not. An adversary exfiltrating a large credential file will cause a high ratio of data sent from the server compared to the data sent from the client. By calculating this ratio for all SSH sessions and flagging statistical outliers, we can identify sessions that may involve credential exfiltration."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek ssh.log"
      - "Network segments containing critical Linux servers, Network egress points, VPN concentrators"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH network_connections (protocol=ssh) | CALCULATE ratio = server_bytes / client_bytes | FILTER ratio > (baseline_mean + 3 * baseline_stddev)"
  - question: "Has graph-based analysis revealed anomalous communication patterns, such as a web server initiating an SSH connection to a database server?"
    context: "This question uses a holistic, relationship-based approach to find suspicious activity. By modeling the entire network's communication patterns as a graph, we can identify connections that violate normal, expected behavior. For example, a web server should not typically initiate an SSH connection. Such an anomalous edge in the communication graph could represent lateral movement or a compromised host being used to pivot and steal credentials from another system."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek files.log"
      - "Zeek ssh.log"
      - "Network segments containing critical Linux servers, Network egress points, VPN concentrators"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL detect_anomalous_edges ON network_graph | IDENTIFY new or rare connections (e.g., web_server -> ssh -> db_server)"
  - question: "Has any process not on an established allowlist accessed the lsass.exe process with high-risk permissions like PROCESS_VM_READ?"
    context: "This is a high-fidelity question for detecting memory-based credential dumping on Windows. The LSASS process stores credentials in memory. Adversaries use tools to read this memory. Sysmon Event ID 10 can log these access attempts. By creating a strict allowlist of legitimate processes that are allowed to access LSASS (e.g., system processes, security tools), any access from an unapproved process, especially with memory-reading rights (`GrantedAccess` codes like `0x1010` or `0x1410`), is a strong indicator of an attack."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH process_access_events (sysmon_event_id=10) WHERE target_process = 'lsass.exe' AND granted_access IN (0x1010, 0x1410) AND source_process NOT IN (allowlist)"
  - question: "Has there been a spike in access to lsass.exe from a process that has never or rarely accessed it before?"
    context: "This question provides a behavioral method for detecting suspicious LSASS access without relying on a static allowlist. By first building a baseline of which processes normally access LSASS and how often, we can detect anomalies. A process that has never been seen accessing LSASS before, or a common process that suddenly starts accessing it frequently with high-privilege rights, is highly suspicious and could indicate that a legitimate process has been compromised or is being abused."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH process_access_events (target_process = 'lsass.exe') | PROFILE frequency by source_process | FLAG new processes or those with anomalous frequency spikes"
  - question: "Can a machine learning model classify an LSASS access event as malicious based on its context?"
    context: "This question proposes a sophisticated detection method that considers multiple features of an LSASS access event to determine its intent. A classification model can be trained on labeled data to recognize malicious patterns. Features for the model could include the source process name, its parent process, the user context under which it's running, the specific access rights requested, and whether the source process is digitally signed. This provides a robust way to score and prioritize LSASS access events for investigation."
    answer_sources:
      - "Sysmon Event ID 10"
      - "Windows Event ID 4688"
      - "All Windows Endpoints, Windows Servers, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL predict_malicious_lsass_access ON process_access_events USING features(source_process, parent_process, user_context, access_mask, is_signed)"
  - question: "Has a directory replication (DCSync) request been observed originating from a non-Domain Controller computer account or IP address?"
    context: "This question is designed to detect a DCSync attack, where an adversary impersonates a Domain Controller (DC) to request password hashes from another DC. Legitimate replication only occurs between DCs. Therefore, a Windows Event ID 4662 (`Replicating Directory Changes`) on a DC where the `Account Name` is not a DC computer account (which ends in '$'), or network traffic showing a replication request (`drsuapi`) from a non-DC IP address, is a definitive indicator of a DCSync attack."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dce_rpc.log"
      - "Windows Event ID 4662"
      - "Domain Controllers, Network links between domain member segments and the DC segment"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH object_access_events (event_id=4662) WHERE access_type = 'Replicating Directory Changes' AND account_name NOT LIKE '%$'"
      - tech: "pseudocode"
        query: "SEARCH rpc_logs (zeek_dce_rpc) WHERE operation IN ('drsuapi', 'MS-DRSR') AND source_ip NOT IN (dc_ip_list)"
  - question: "Have there been any statistical anomalies in the volume or frequency of directory replication traffic between hosts?"
    context: "This question uses baselining to detect DCSync attacks. Legitimate replication traffic between Domain Controllers is typically regular and predictable. An adversary performing a DCSync attack may cause a sudden increase in replication requests or generate traffic from an unexpected source. By establishing a baseline of normal replication traffic volume and patterns, any significant deviation can be flagged as a statistical anomaly worthy of investigation."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dce_rpc.log"
      - "Windows Event ID 4662"
      - "Domain Controllers, Network links between domain member segments and the DC segment"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL detect_anomaly ON replication_traffic_timeseries(bytes, connections) PER source_host, dest_host"
  - question: "Does peer group analysis show any host initiating replication requests that behaves differently from the primary cluster of Domain Controllers?"
    context: "This question applies machine learning to identify rogue hosts performing DCSync. All legitimate Domain Controllers should exhibit similar behavior when it comes to replication (e.g., protocols used, request frequency, time of day). By clustering all hosts that initiate replication requests based on these behavioral features, the legitimate DCs should form a tight, primary cluster. Any host that falls outside this cluster is an outlier and a strong candidate for a malicious actor conducting a DCSync attack."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dce_rpc.log"
      - "Windows Event ID 4662"
      - "Domain Controllers, Network links between domain member segments and the DC segment"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "CLUSTER hosts based on replication_behavior_features | IDENTIFY hosts outside the main 'DC' cluster"
  - question: "Has the SAM file or a sensitive LSA registry key been accessed by a process not on a strict allowlist of system processes?"
    context: "This question aims to detect direct access to credential stores on disk or in the registry. With proper object access auditing enabled, Windows can log every access attempt to the SAM file or critical registry keys like `HKLM\\SECURITY\\Policy\\Secrets`. By creating a very strict allowlist of processes that are permitted to touch these objects (e.g., `lsass.exe`, `System`, approved backup agents), any access event from a process not on the list is highly suspicious and a strong indicator of a credential dumping attempt."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Windows Event ID 4656"
      - "All Windows Systems, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH object_access_events (event_id IN (4663, 4657, 4656)) WHERE (object_name = 'SAM' OR object_name = 'Policy\\Secrets') AND process_name NOT IN (allowlist)"
  - question: "Has the SAM file or sensitive LSA registry keys been accessed at an anomalous time of day?"
    context: "This question uses time-based analysis to spot suspicious access to credential stores. Legitimate access to the SAM file or LSA secrets typically occurs at predictable times, such as during system boot-up or scheduled patching windows. By profiling the time-of-day for all legitimate access events, a baseline of normal behavior can be established. Any access that occurs far outside of these normal time windows should be flagged as anomalous and investigated."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Windows Event ID 4656"
      - "All Windows Systems, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "PROFILE access_events_to_sam_lsa by hour_of_day | FLAG events occurring in statistically rare time slots"
  - question: "Can a one-class SVM model, trained on legitimate access patterns, detect anomalous access to the SAM file or LSA registry keys?"
    context: "This question proposes an advanced machine learning approach for detecting illicit access to credential stores. A one-class Support Vector Machine (SVM) is an anomaly detection algorithm that can be trained exclusively on data from 'normal' events. By training the model on the features of legitimate access events to the SAM and LSA keys, it learns a boundary that defines normal behavior. Any new access event that falls outside this learned boundary is automatically classified as an anomaly, requiring investigation."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Windows Event ID 4656"
      - "All Windows Systems, Domain Controllers"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL one_class_svm ON legitimate_sam_lsa_access_events | PREDICT anomaly_score for new_access_events"
  - question: "Has an event been logged indicating that LSA Protection was disabled, or has the 'RunAsPPL' registry key been modified?"
    context: "This question targets a specific defense evasion technique related to credential dumping. LSA Protection (also known as RunAsPPL) is a security feature that prevents non-privileged processes from accessing LSASS memory. Adversaries may try to disable it by modifying the `RunAsPPL` registry key. A high-priority alert should be triggered for any modification to this key (Event ID 4657) or for the system event (Event ID 12) that explicitly states 'LSA was not started as a protected process', as this is a clear sign of tampering."
    answer_sources:
      - "Windows Event ID 12"
      - "Windows Event ID 4657"
      - "All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH system_events (event_id=12, source=Wininit) WHERE message CONTAINS 'LSA was not started as a protected process'"
      - tech: "pseudocode"
        query: "SEARCH registry_events (event_id=4657) WHERE key_name = '...\\Control\\Lsa\\RunAsPPL'"
  - question: "Has there been an unusual frequency of modifications to the parent LSA registry key?"
    context: "While direct modification of the `RunAsPPL` key is a smoking gun, monitoring the surrounding area can also reveal suspicious activity. An adversary attempting to tamper with LSA Protection might probe or alter other values within the `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa` registry key. By monitoring the frequency of any modifications in this sensitive area and comparing it to a host's baseline or its peer group, we can detect a statistically significant increase in activity that warrants investigation for tampering."
    answer_sources:
      - "Windows Event ID 12"
      - "Windows Event ID 4657"
      - "All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "SEARCH registry_events WHERE key_name CONTAINS '...\\Control\\Lsa' | PROFILE frequency by host | FLAG hosts with anomalous modification counts"
  - question: "Has a configuration drift detection model identified an unauthorized change to the LSA Protection registry key?"
    context: "This question proposes using a model to automatically detect unauthorized changes from a known-good state. An autoencoder can be trained on the 'golden image' configuration of critical security registry keys, including `RunAsPPL`. This model learns the normal configuration. By periodically feeding the current configuration of hosts into the model, it can calculate a 'reconstruction error'. A high error for a given host signifies a significant and potentially unauthorized deviation from the secure baseline, indicating configuration drift or tampering."
    answer_sources:
      - "Windows Event ID 12"
      - "Windows Event ID 4657"
      - "All Windows 8.1/Server 2012 R2 and newer systems, especially Domain Controllers and PAWs"
    range: "last 90 days"
    queries:
      - tech: "pseudocode"
        query: "MODEL autoencoder ON golden_image_registry_config | CALCULATE reconstruction_error for current_host_config | FLAG hosts with high error"