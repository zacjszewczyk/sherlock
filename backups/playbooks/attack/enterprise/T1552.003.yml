name: T1552.003: Bash History
id: 05c7b39a-9e1d-4f8a-8b3c-9a4f1d7e2b8a
description: This playbook aims to identify adversarial attempts to harvest credentials from shell history files. This involves detecting processes that view or search history files (like .bash_history) for keywords such as 'password' or 'token'. It also looks for signs of tampering, like anomalous processes modifying history files or commands being used to clear, disable, or redirect history logging. Additionally, it monitors for the exfiltration of history files over the network and correlated event sequences, such as directory enumeration followed by history file access and a subsequent outbound network connection.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process searching a shell history file for credential-related keywords using a symbolic rule?
    context: This question seeks to identify direct attempts to harvest credentials. Adversaries often search through command history files for hardcoded passwords, API keys, or connection strings. This symbolic detection rule looks for the explicit co-occurrence of commands used for file inspection (`cat`, `grep`, etc.), a reference to a history file (`.bash_history`, etc.), and common credential keywords (`password`, `apikey`, etc.) within a single command line execution. A positive finding is a strong indicator of credential harvesting.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Endpoint Detection and Response (EDR) Logs, Linux Auditd Logs from Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, and Critical infrastructure management hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE (command_line CONTAINS ('cat' OR 'less' OR 'more' OR 'grep' OR 'strings' OR 'awk' OR 'sed') AND command_line CONTAINS ('.bash_history' OR '.zsh_history' OR '*.history') AND command_line CONTAINS ('password' OR 'apikey' OR 'token' OR 'secret' OR 'access_key' OR 'conn_str'))
  - question: Is a command accessing a history file exhibiting unusually high argument entropy, suggesting the presence of a key or token?
    context: This question uses a statistical approach to find credential harvesting that might not use obvious keywords. High-entropy strings (random-looking text) are characteristic of cryptographic keys and tokens. By baselining the normal command-line entropy for each user and host, we can detect statistical outliers. An alert would signify that a command accessing a history file also contains a string with much higher complexity than usual for that context, which could be an API key or secret being displayed or searched for.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Endpoint Detection and Response (EDR) Logs, Linux Auditd Logs from Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, and Critical infrastructure management hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each user, host, CALCULATE baseline_entropy for command_line arguments. SEARCH process_creation_events WHERE command_line CONTAINS history_file_pattern. CALCULATE argument_entropy for the event. IF argument_entropy > 95th_percentile(baseline_entropy), THEN ALERT.
  - question: Can a machine learning model classify a command-line execution as a suspicious access of a shell history file?
    context: This question leverages a machine learning model to provide a more nuanced and robust detection than simple rules. By training a classifier on various features—such as the process involved, its parent, command length, entropy, and keyword counts—the model can learn complex patterns that distinguish malicious history file access from benign administrative activity. This approach can reduce false positives and detect novel variations of the technique.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Endpoint Detection and Response (EDR) Logs, Linux Auditd Logs from Linux-based servers (Web, Database, Application), Developer Workstations with WSL enabled, and Critical infrastructure management hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features (process_name, parent_process, cmd_length, cmd_entropy, has_history_file, keyword_count) from process_creation_events. INPUT features into trained_classifier_model. IF model_prediction == 'suspicious history access', THEN ALERT.
  - question: Has an adversary attempted to disable, clear, or tamper with shell history logging using known commands?
    context: This question looks for explicit attempts to cover tracks by destroying or disabling shell history. Commands like `unset HISTFILE`, `history -c`, or redirecting to `/dev/null` are common tradecraft for adversaries to prevent their command-line activity from being recorded. Detecting these specific commands is a high-fidelity indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 23, Linux Auditd Logs from User home directories on multi-user systems, Linux-based servers (Web, Database, Application), and Developer Workstations with WSL enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE command_line MATCHES ('unset HISTFILE', 'export HISTSIZE=0', 'history -c', 'ln -s /dev/null', 'rm ~/.bash_history', '> ~/.bash_history')
  - question: Has a statistically rare process pair, such as a web server spawning a shell, accessed a history file?
    context: This question aims to detect anomalous processes accessing history files. Normally, user shells access their own history. An unusual parent-child process relationship, like a web service (e.g., apache2) spawning a shell (e.g., /bin/bash) that then interacts with a history file, is highly suspicious and could indicate a compromised service is being used for privilege escalation or reconnaissance.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 23, Linux Auditd Logs from User home directories on multi-user systems, Linux-based servers (Web, Database, Application), and Developer Workstations with WSL enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: BASELINE frequency of (parent_process, child_process) pairs. SEARCH process_creation_events WHERE command_line CONTAINS history_file_pattern. IF (parent_process, child_process) is rare (< 5 times in 30 days), THEN ALERT.
  - question: Does time-series analysis of a shell history file's size show a significant negative anomaly, indicating deletion or tampering?
    context: This question uses a machine learning approach to detect history tampering by monitoring file size over time. A sudden, significant drop in a history file's size that deviates from its historical growth pattern can indicate that an adversary has cleared the file (e.g., `> .bash_history`) or selectively removed entries. This is particularly useful for detecting tampering on critical user accounts.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 11, Sysmon Event ID 23, Linux Auditd Logs from User home directories on multi-user systems, Linux-based servers (Web, Database, Application), and Developer Workstations with WSL enabled.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR history_file_size over time. TRAIN time-series model (e.g., ARIMA) on historical file sizes. IF observed_size is a significant negative outlier from model_forecast, THEN ALERT.
  - question: Has a shell history file been detected in network traffic being transferred to an external, non-organizational IP address?
    context: This question directly targets the exfiltration phase of credential harvesting. By monitoring network file transfers, we can detect when a file matching the name pattern of a shell history file (e.g., .bash_history) is sent outside the corporate network. This is a critical and high-confidence indicator that an adversary has collected and is now stealing sensitive information.
    answer_sources:
      - Zeek conn.log, Zeek files.log from Network egress points (Internet gateways), Internal network segments connecting development environments to production, and VPN termination points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH Zeek_files_log WHERE filename MATCHES regex '(^\\..*_history$)' AND corresponding conn_log.destination_ip IS NOT in internal/registered_IP_space, THEN ALERT.
  - question: Was a shell history file transferred to a destination country or Autonomous System (ASN) that is anomalous for the source host?
    context: This question adds a layer of statistical analysis to network exfiltration detection. Instead of just looking for any external transfer, it profiles the normal outbound destinations for each host. A transfer of a sensitive file like a shell history to a country or network (ASN) that the host has never or rarely communicated with before is highly suspicious and helps prioritize alerts for investigation.
    answer_sources:
      - Zeek conn.log, Zeek files.log from Network egress points (Internet gateways), Internal network segments connecting development environments to production, and VPN termination points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host, PROFILE baseline of destination countries/ASNs for file transfers. SEARCH Zeek_files_log WHERE filename MATCHES history_file_pattern. IF conn_log.destination_country/ASN is NOT in host's baseline, THEN ALERT.
  - question: Can machine learning identify clusters of anomalous network connections that correlate with the transfer of shell history files?
    context: This question uses unsupervised machine learning to find subtle exfiltration patterns. Adversaries may use low-and-slow techniques or non-standard ports to exfiltrate data. A density-based clustering algorithm like DBSCAN can group network connections based on features like destination, port, and data volume. When a cluster of anomalous connections is correlated with a history file transfer event, it can uncover sophisticated exfiltration attempts that might otherwise be missed.
    answer_sources:
      - Zeek conn.log, Zeek files.log from Network egress points (Internet gateways), Internal network segments connecting development environments to production, and VPN termination points.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CLUSTER Zeek_conn_log data using DBSCAN on features (src_ip, dest_ip, port, bytes, duration). IDENTIFY anomalous clusters. CORRELATE clusters with Zeek_files_log events involving history files. IF correlation exists, THEN ALERT.
  - question: Has a correlated sequence of events occurred on a single host within a short time window directory enumeration, followed by history file access, and then an outbound network connection?
    context: This question seeks to identify the entire attack chain on a host in near real-time. Adversaries often follow a predictable pattern first, they explore the user's home directory (`ls -la`), then they access the history file (`cat .bash_history`), and finally, they exfiltrate the findings. A stateful correlation rule that detects this specific sequence of events on the same host within minutes provides a very strong signal of an active compromise.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Zeek conn.log, Windows Event ID 4624 from Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), and Network choke points (for observing outbound connections).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CREATE stateful rule for a single HostName within 5 minutes. IF (EVENT 1 process_exec of 'ls' or 'dir' in home directory) FOLLOWED BY (EVENT 2 process_exec of 'cat' or 'grep' on a history file) FOLLOWED BY (EVENT 3 outbound_connection OR remote_logon), THEN ALERT.
  - question: Has a host's risk score, based on a weighted sum of suspicious activities like history file access and new outbound connections, exceeded a critical threshold?
    context: This question uses a statistical scoring model to aggregate weak signals into a stronger alert. Individual events like a directory listing might not be malicious on their own. However, when several of these events, weighted by their potential risk, occur on the same host in a short time frame, their cumulative score can breach a threshold, indicating a likely compromise that warrants investigation.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Zeek conn.log, Windows Event ID 4624 from Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), and Network choke points (for observing outbound connections).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host, over 15-minute window, CALCULATE score (history_access=+15, dir_listing=+5, outbound_ssh=+10, new_external_IP=+5). IF cumulative_score > threshold (e.g., 99th percentile), THEN ALERT.
  - question: Has a sequence-based machine learning model (like an RNN/LSTM) detected an anomalous sequence of user actions, such as reading a history file followed by an outbound network connection?
    context: This question employs a sophisticated machine learning model to understand the normal "grammar" of user actions. A Recurrent Neural Network can learn typical sequences of events for a user. When an unusual sequence occurs—one that the model finds highly improbable, like reading the .bash_history file and immediately making a network connection to a new IP—it can be flagged as an anomaly. This is powerful for detecting novel attack patterns.
    answer_sources:
      - Windows Event ID 4688, Sysmon Event ID 1, Zeek conn.log, Windows Event ID 4624 from Domain Controllers (for authentication events), Critical servers and developer workstations (for process and network events), and Network choke points (for observing outbound connections).
    range: last 90 days
    queries:
      - technology: pseudocode
        query: TRAIN RNN/LSTM model on normal sequences of event types per user. FEED real-time event stream into model. IF model flags an event sequence (e.g., 'file_read of .bash_history' -> 'network_outbound') as low-probability, THEN ALERT.