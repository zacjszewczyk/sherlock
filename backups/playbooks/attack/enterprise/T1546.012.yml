name: T1546.012: Image File Execution Options Injection
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting the malicious use of Image File Execution Options (IFEO) for persistence and privilege escalation. Adversaries abuse the `Debugger` value within the `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\` registry key to hijack the execution of legitimate applications. When a targeted application is launched, the specified malicious 'debugger' runs instead. This can be used to maintain persistence by targeting commonly used applications, or to escalate privileges by targeting high-integrity system processes (e.g., `lsass.exe`) or accessibility features (`sethc.exe`, `utilman.exe`). This playbook also covers detection of `gflags.exe` and `SilentProcessExit` registry modifications, which are alternative methods for achieving the same goal.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a registry modification to an IFEO 'Debugger' value pointing to a known malicious executable?
    context: This question aims to detect a common persistence technique where an adversary hijacks the execution of a legitimate program. By setting the 'Debugger' value for a program like 'notepad.exe' to a malicious executable, the adversary ensures their malware is run whenever the user tries to open the legitimate program. This query looks for modifications to the IFEO registry key and cross-references the new debugger path with threat intelligence to find known malicious file hashes. A match is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR events FROM (Windows Event 4657 OR Sysmon Event 13)
          WHERE event.target_object MATCHES 'HKLM\\SOFTWARE\\*\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*\\Debugger'
          EXTRACT event.new_value AS debugger_path
          GET_HASH for debugger_path
          COMPARE hash against threat_intelligence_feed
          IF match THEN ALERT 'High-Severity: Malicious IFEO Debugger Set'
  - question: Is a newly modified IFEO 'Debugger' executable path statistically anomalous compared to historical data?
    context: Adversaries often place their malicious payloads in unusual locations (e.g., %TEMP%, %APPDATA%) or use randomly generated filenames. This question helps detect such outliers by establishing a baseline of normal debugger paths and their characteristics. It analyzes new modifications for anomalies in filename entropy (randomness) and directory path frequency. A high entropy filename or a path in a rarely used directory for debuggers suggests the executable may not be a legitimate tool and could be part of a persistence mechanism.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE all debugger paths and filename entropy from historical IFEO modifications.
          FOR each new IFEO modification event
          CALCULATE entropy of new debugger filename.
          CALCULATE frequency of new debugger directory path.
          IF filename_entropy > 95th_percentile_baseline OR directory_path_frequency < 1%
          THEN ALERT 'Suspicious IFEO Path Anomaly'
  - question: Can a machine learning model classify an IFEO registry modification as malicious based on its execution context and properties?
    context: To reduce false positives from legitimate software installers or debuggers, this question applies a classification model. The model learns the patterns of both benign and malicious IFEO modifications by considering a rich set of features. These include the process that made the change, the executable being targeted, and properties of the debugger itself (path, signature). A high probability score from the model provides a more nuanced and context-aware detection than a simple rule, indicating a likely malicious persistence attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new IFEO modification event
          EXTRACT features: modifying_process, parent_process, target_exe, debugger_path_properties, debugger_signature_status
          INPUT features into pre-trained Random Forest model.
          IF model_output_score > high_confidence_threshold
          THEN ALERT 'ML Detection: High-Probability Malicious IFEO Modification'
  - question: Has the IFEO 'Debugger' for a common application like notepad.exe or calc.exe been changed to an executable in a user-writable or temporary directory?
    context: Adversaries frequently target common, non-critical applications for IFEO hijacking because their execution is frequent and less likely to be scrutinized. This question focuses on detecting when the debugger for one of these common applications is pointed to a non-standard, user-writable location like `C:\Users\*` or `C:\Windows\Temp\*`. Legitimate debuggers are almost never placed in these locations, making this a high-fidelity indicator of a persistence attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE watchlist_exe = ['notepad.exe', 'mspaint.exe', 'calc.exe', ...]
          DEFINE suspicious_paths = ['C:\\Users\\*', 'C:\\ProgramData\\*', '*\\Temp\\*']
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\Image File Execution Options\\<watchlist_exe>\\Debugger'
          AND event.new_value MATCHES any suspicious_paths
          THEN ALERT 'Suspicious IFEO Debugger Location for Common App'
  - question: Is the path of a new IFEO 'Debugger' significantly different from all known-good debugger paths for that application?
    context: This question uses string similarity to detect anomalous debugger paths. For any given application, there is a set of legitimate, known-good debugger paths (which may be an empty set). By calculating the Levenshtein distance (a measure of string difference) between a new debugger path and this known-good set, we can quantify how dissimilar it is. A path that is very different from any legitimate path is highly suspect, pointing to a potential adversary tool rather than a standard debugger.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each application, BASELINE known_good_debugger_paths.
          FOR each new IFEO modification event for an application
          CALCULATE Levenshtein distance between new_path and all known_good_paths.
          IF min_distance > 99th_percentile_of_historical_distances
          THEN ALERT 'Anomalous IFEO Debugger Path by String Dissimilarity'
  - question: Is there anomalous process activity occurring shortly after an IFEO registry modification?
    context: An adversary's goal in setting an IFEO debugger is to have their malicious code executed. This question seeks to detect that subsequent execution. It uses an anomaly detection model (Isolation Forest) to monitor for unusual process creation events that happen right after an IFEO registry key is changed. The model looks for deviations from normal process behavior, such as a strange parent-child relationship or unusual command-line arguments, which would indicate the malicious IFEO was triggered.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Windows System Registry Hives on all User Workstations and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          TRIGGER on any IFEO registry modification event.
          MONITOR process creation events (Sysmon Event 1) on the same host for the next 5 minutes.
          EXTRACT features: parent_process, child_process, command_line, user, integrity_level.
          INPUT features into pre-trained Isolation Forest model.
          IF model flags event as an anomaly
          THEN ALERT 'ML Detection: Anomalous Process Chain Following IFEO Modification'
  - question: Is the GFlags tool being used to set a process debugger, especially by an unusual parent process?
    context: `gflags.exe` is a legitimate Windows debugging tool, but it can be abused by adversaries to programmatically set IFEO debuggers. This is a stealthier alternative to directly modifying the registry. This question looks for specific command-line patterns (`/i` and `/p /enable`) that indicate this abuse. It adds context by checking the parent process; if `gflags.exe` is launched by an office application or a non-admin tool instead of a developer or system process, it is highly suspicious and likely malicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR process creation events (Sysmon Event 1)
          WHERE process_name == 'gflags.exe'
          AND command_line CONTAINS '/i' AND command_line CONTAINS '/p /enable'
          IF parent_process IS NOT a trusted admin/developer tool (e.g., 'winword.exe')
          THEN ALERT 'Critical: Suspicious GFlags Execution by Non-Admin Process'
  - question: Is the execution of `gflags.exe` statistically rare based on the user, parent process, or command-line arguments?
    context: In most enterprise environments, `gflags.exe` is used infrequently and by a small set of users or processes. This question leverages this rarity. It establishes a baseline of normal `gflags.exe` usage and flags any execution that deviates from this pattern. An execution by a user who has never run it before, spawned by a process that has never spawned it before, or with a novel combination of arguments is a statistical outlier that warrants investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE historical frequency of gflags.exe executions by user, parent_process, and command_line.
          FOR each new gflags.exe execution event
          IF user_frequency < 1% OR parent_process_frequency < 1% OR command_line_combo is new
          THEN ALERT 'Statistical Anomaly: Rare GFlags Execution Detected'
  - question: Can a machine learning model assess the risk of a `gflags.exe` execution based on its context?
    context: This question uses a classification model to provide a risk score for each `gflags.exe` execution, helping to prioritize alerts. The model considers who is running the command (user context), what is running it (parent process), and what is being targeted (image file name). By learning from historical data, the model can distinguish between a developer debugging a new build and an adversary setting a malicious persistence hook, providing a more intelligent and actionable signal.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new gflags.exe execution event
          EXTRACT features: parent_process, user_context, target_image_file, argument_flags.
          INPUT features into pre-trained Logistic Regression model.
          IF model_output_risk_score > high_threshold
          THEN ALERT 'ML Detection: High-Risk GFlags Execution'
  - question: Has a common application like notepad.exe spawned a command shell or an executable from a suspicious location, which then made a network connection?
    context: This question detects the result of a successful IFEO hijack. When a user runs a hijacked application (e.g., `notepad.exe`), the adversary's payload is executed instead. This payload often takes the form of a command shell (`cmd.exe`, `powershell.exe`) or another executable used to establish a command-and-control channel. This query looks for this anomalous parent-child relationship and correlates it with subsequent network traffic to identify potential C2 activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE parent_watchlist = ['notepad.exe', 'mspaint.exe', ...]
          DEFINE child_watchlist = ['cmd.exe', 'powershell.exe', ...]
          FOR process creation events (Sysmon Event 1)
          WHERE parent_process IN parent_watchlist AND (child_process IN child_watchlist OR child_path IS suspicious)
          CORRELATE with network logs (Zeek) for connections from child_process_pid.
          IF network connection to new/uncategorized IP exists
          THEN ALERT 'Anomalous Process Chain with C2 Network Activity'
  - question: Has a parent-child process relationship been observed that is historically very rare or has never been seen before?
    context: Process execution patterns are often predictable. For example, `winword.exe` rarely, if ever, spawns `powershell.exe`. This question leverages this predictability by building a statistical model of all parent-child process relationships in the environment. It then flags any new relationship that is extremely improbable (e.g., a probability of less than 0.001%) or has never occurred before. This is a powerful way to detect novel execution chains that could be indicative of an IFEO hijack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE probability of all (Parent, Child) process pairs from historical data.
          FOR each new process creation event (Parent, Child)
          CALCULATE P(Child | Parent).
          IF P(Child | Parent) < 0.00001 OR pair is previously unseen
          THEN ALERT 'Statistically Rare Parent-Child Process Relationship Observed'
  - question: Can a graph-based anomaly detection model identify a malicious process execution chain indicative of an IFEO trigger?
    context: Adversary execution chains can be more complex than a single parent-child relationship (e.g., `notepad.exe` -> `powershell.exe` -> `rundll32.exe`). This question uses a sophisticated graph-based model to analyze entire process trees. By representing processes as nodes in a graph, the model learns the normal structures of process lineage. It can then identify anomalous subgraphs that deviate from these learned patterns, providing a robust method for detecting complex, multi-stage execution following an IFEO hijack.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          CONTINUOUSLY build a process lineage graph from Sysmon Event 1 data.
          APPLY pre-trained Graph Neural Network anomaly detection model to the graph.
          IF model flags a subgraph as anomalous (e.g., mspaint.exe -> powershell.exe -> rundll32.exe)
          THEN ALERT 'ML Detection: Anomalous Process Subgraph Detected'
  - question: Has a 'MonitorProcess' value been set under a SilentProcessExit registry key, pointing to a known malicious executable or a script interpreter?
    context: The SilentProcessExit feature allows a "monitor" process to be launched when another process exits. Adversaries can abuse this for persistence by configuring their malware to launch whenever a specific application closes. This question creates a rule to detect the creation of the `MonitorProcess` registry value. It specifically looks for cases where the monitor process is a known malicious tool (checked via hash) or a script interpreter like PowerShell, which is a common choice for attackers.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\SilentProcessExit\\*\\MonitorProcess'
          EXTRACT event.new_value AS monitor_path
          GET_HASH for monitor_path
          COMPARE hash against threat_intelligence_feed
          IF match OR monitor_path CONTAINS 'powershell.exe' OR monitor_path CONTAINS 'wscript.exe'
          THEN ALERT 'Suspicious SilentProcessExit Monitor Configured'
  - question: Is Silent Process Exit monitoring being configured for a statistically unusual application or with a rare monitoring tool?
    context: Legitimate use of SilentProcessExit is typically confined to specific services or applications for crash reporting. This question identifies abuse by looking for statistical outliers. It flags cases where monitoring is set up for a common user application (which is unusual) or where the monitoring executable itself is rare in the environment. For example, if `werfault.exe` is the common monitor process, seeing `C:\Users\Public\monitor.exe` used would be a significant anomaly.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE executables with legitimate SilentProcessExit monitoring.
          BASELINE prevalence of all 'MonitorProcess' executables across the enterprise.
          FOR each new SilentProcessExit modification
          IF target_executable is not in baseline OR prevalence of monitor_executable < 5 hosts
          THEN ALERT 'Statistical Anomaly in SilentProcessExit Configuration'
  - question: Can a machine learning model distinguish between legitimate and malicious Silent Process Exit configurations?
    context: This question applies a classification model to add context to SilentProcessExit modifications. The model evaluates features such as which process made the registry change, which application is being monitored (e.g., a critical service vs. a web browser), and properties of the monitoring executable itself (path, signature). This allows the system to learn the difference between a legitimate crash handler being installed and an adversary setting a persistence hook, leading to higher-fidelity alerts.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all endpoints and servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each new SilentProcessExit modification event
          EXTRACT features: modifying_process, target_executable, monitor_executable_properties, reporting_mode_value
          INPUT features into pre-trained classification model.
          IF model_output_score > high_confidence_threshold
          THEN ALERT 'ML Detection: Malicious SilentProcessExit Configuration Suspected'
  - question: Has the IFEO 'Debugger' for a high-integrity system process like lsass.exe been modified to a known privilege escalation tool?
    context: This is a direct and high-impact privilege escalation technique. By hijacking a process that runs with high privileges (e.g., `services.exe`, `lsass.exe`), an adversary can execute their own code with the same elevated permissions. This query specifically monitors the IFEO keys for a watchlist of these critical processes and checks if the new debugger path points to a known malicious tool like Mimikatz or Juicy Potato. A match is a critical alert indicating an active privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE high_integrity_procs = ['services.exe', 'lsass.exe', 'winlogon.exe', 'consent.exe']
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\Image File Execution Options\\<high_integrity_procs>\\Debugger'
          EXTRACT event.new_value AS debugger_path
          GET_HASH for debugger_path
          COMPARE hash against privesc_tool_threat_feed
          IF match THEN ALERT 'Critical: Privilege Escalation Attempt via IFEO on System Process'
  - question: When an IFEO 'Debugger' is set for a high-integrity process, is the new debugger executable unsigned or signed by a rare publisher?
    context: Legitimate debuggers for system processes should be digitally signed by trusted publishers like Microsoft. This question identifies suspicious debuggers by examining their digital signatures. It flags any debugger executable that is unsigned or is signed by a publisher that is not widely trusted or rarely seen in the environment. A low certificate prevalence (e.g., signer seen on <0.1% of files) is a strong statistical indicator that the debugger is not a legitimate tool and may be part of a privilege escalation attack.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE prevalence of all code-signing certificate thumbprints.
          FOR each IFEO modification on a high-integrity process
          GET signature status and signer_thumbprint for the new debugger executable.
          IF signature is 'Unsigned' OR signer_thumbprint_prevalence < 0.1%
          THEN ALERT 'Suspicious Unsigned or Rarely-Signed Debugger for System Process'
  - question: Can a machine learning model predict the likelihood of a privilege escalation attempt based on an IFEO modification?
    context: This question uses a predictive model to score the risk of an IFEO modification. The model is trained to recognize patterns associated with privilege escalation, considering features like the specific system process being targeted, the user context of the process making the change, and properties of the debugger executable. A high probability score from the model provides a strong, context-aware signal of a likely privilege escalation attempt that requires immediate attention.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each IFEO modification event
          EXTRACT features: target_process_name, modifying_user_context, debugger_properties, target_process_typical_integrity
          INPUT features into pre-trained Gradient Boosting model.
          IF model_output_score > high_privesc_probability
          THEN ALERT 'ML Detection: High-Probability Privilege Escalation via IFEO'
  - question: Has the IFEO 'Debugger' for an accessibility application like sethc.exe or utilman.exe been changed to cmd.exe or powershell.exe?
    context: This is a classic "sticky keys" or accessibility feature backdoor. These applications can be launched from the logon screen before a user logs in, and they run with SYSTEM privileges. By setting the debugger for `sethc.exe` to `cmd.exe`, an adversary can get a SYSTEM-level command prompt on the logon screen by pressing Shift five times. This is a definitive indicator of a backdoor, so this question uses a zero-tolerance rule to generate a critical alert on any such modification.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE accessibility_apps = ['sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe']
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\Image File Execution Options\\<accessibility_apps>\\Debugger'
          AND event.new_value CONTAINS 'cmd.exe' OR event.new_value CONTAINS 'powershell.exe'
          THEN ALERT 'Critical: Accessibility Feature Backdoor (IFEO) Detected'
  - question: Has a statistically rare modification occurred to an accessibility application's IFEO key?
    context: In a secure environment, the IFEO registry keys for accessibility features should almost never be modified after initial setup. This question treats any modification as a severe statistical anomaly. The rarity of the event itself (frequency near zero) is the primary indicator. This can be strengthened by analyzing the process that made the change; if it wasn't a trusted system installer, the confidence in the alert increases.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\Image File Execution Options\\<accessibility_apps>\\Debugger'
          ALERT 'Statistical Anomaly: Highly Infrequent Modification to Accessibility IFEO Key'
          ENRICH alert with modifying process information.
  - question: Can a machine learning model identify an unauthorized process that is modifying an accessibility feature's IFEO key?
    context: While any modification to these keys is suspicious, legitimate system updates could potentially cause a change. This question uses a model to distinguish between a legitimate installer (`TrustedInstaller.exe`) and an unauthorized process (`reg.exe` run by a standard user). The model analyzes the full context of the process that made the registry change to help an analyst quickly differentiate between a false positive from a patch and a true positive from an attacker.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR events FROM Sysmon Event 13
          WHERE event.target_object MATCHES '*\\Image File Execution Options\\<accessibility_apps>\\Debugger'
          EXTRACT features of modifying process: process_name, parent_process, command_line, user, session_id
          INPUT features into pre-trained classification model.
          IF model classifies process as 'unauthorized'
          THEN ALERT 'ML Detection: Unauthorized Modification of Accessibility IFEO Key'
  - question: Has an accessibility application like utilman.exe, running as SYSTEM, spawned a command shell?
    context: This question detects the *use* of an accessibility feature backdoor, which is the step after the registry has been modified. When an adversary triggers the backdoor (e.g., by clicking the Ease of Access button on the logon screen), the hijacked accessibility application will spawn a command shell (`cmd.exe` or `powershell.exe`) with SYSTEM privileges. This query looks for this specific, high-confidence parent-child process relationship and is a direct indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE accessibility_apps = ['utilman.exe', 'sethc.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe']
          DEFINE shells = ['cmd.exe', 'powershell.exe']
          FOR process creation events (Sysmon Event 1)
          WHERE parent_process IN accessibility_apps
          AND child_process IN shells
          AND parent_integrity_level == 'NT AUTHORITY\\SYSTEM'
          THEN ALERT 'Critical: Accessibility Feature Backdoor Abuse Detected'
  - question: Has any child process been spawned by an accessibility application?
    context: Under normal circumstances, accessibility applications like `sethc.exe` or `utilman.exe` do not spawn child processes. Their function is self-contained. Therefore, the observation of *any* child process is a statistical anomaly with a near-zero probability. This question uses this fact to create a simple but effective detection. The alert can be further correlated with logon events to confirm the activity occurred at the logon screen, increasing confidence that a backdoor was used.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          DEFINE accessibility_apps = ['utilman.exe', 'sethc.exe', 'osk.exe', 'Magnify.exe', 'Narrator.exe']
          FOR process creation events (Sysmon Event 1)
          WHERE parent_process IN accessibility_apps
          ALERT 'Statistical Anomaly: Child Process Spawned from Accessibility Application'
          CORRELATE with recent logon events (Type 2, 3, 10) on the same host.
  - question: Is there anomalous network activity on a host immediately following a suspected accessibility feature abuse event?
    context: After gaining a SYSTEM shell, an adversary's next step is often to establish command and control or exfiltrate data. This question uses a time-series anomaly detection model to look for this follow-on network activity. It monitors network metrics like outbound bytes, unique destination IPs, and DNS query patterns. A sudden, anomalous spike in this traffic right after a suspected accessibility backdoor is used provides strong corroborating evidence of post-exploitation activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek conn.log
      - Zeek dns.log
      - Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          TRIGGER on alert for accessibility feature abuse.
          MONITOR network logs (Zeek conn.log, dns.log) from the host for the next 15 minutes.
          EXTRACT time-series features: bytes_out, unique_dest_ips, dns_query_entropy.
          INPUT features into pre-trained time-series anomaly detection model.
          IF model detects an anomaly
          THEN ALERT 'ML Detection: Anomalous Network Traffic Following Backdoor Abuse'
  - question: Has the IFEO 'Debugger' for a high-integrity process been set to an executable that is unsigned or located in a user-writable directory?
    context: Legitimate debuggers for system processes must be trusted. This query enforces two key trust criteria: the debugger must be digitally signed, and it must reside in a protected system directory. By joining registry modification events with image load events, this query checks the signature status and path of any newly set debugger for a high-integrity process. An alert is triggered if the debugger is unsigned or if it's located in a risky, user-writable directory like `C:\Users\*`, indicating a likely privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          JOIN (Sysmon Event 13 WHERE target is IFEO debugger) WITH (Sysmon Event 7 Image Load) on debugger_path
          WHERE IFEO target is a high-integrity process
          AND (image_load.Signed == 'false' OR image_load.SignatureStatus != 'Valid' OR debugger_path MATCHES 'C:\\Users\\*')
          THEN ALERT 'Privilege Escalation Attempt: Untrusted Debugger for System Process'
  - question: Is a debugger for a high-integrity process located in a directory that is statistically rare for debuggers?
    context: This question identifies suspicious debugger locations by baselining all paths used for debuggers across the enterprise. Legitimate debuggers are typically found in a few common locations, such as `C:\Program Files`. If a new debugger for a critical system process is placed in a directory that has a very low frequency of use (e.g., seen on less than 1% of systems), it is a statistical outlier. This rarity suggests the path was chosen by an adversary for evasion and warrants investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          BASELINE frequency of all directory paths used for IFEO debuggers.
          FOR each new IFEO modification for a high-integrity process
          EXTRACT debugger_directory_path
          IF frequency of debugger_directory_path < 1%
          THEN ALERT 'Statistical Anomaly: Rare Directory Used for High-Integrity Debugger'
  - question: Can a clustering algorithm identify endpoints with anomalous IFEO configurations?
    context: Instead of looking at single events, this question takes a host-centric view. It uses a clustering algorithm like DBSCAN to group systems with similar IFEO configurations. A host's configuration is represented by a feature vector describing which programs have debuggers set, where those debuggers are located, and their signature status. Hosts that do not fit into any cluster ("noise" points) are outliers. These outlier systems have unique and therefore suspicious configurations that could indicate compromise and should be prioritized for manual investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 7
      - Windows System Registry Hives, file systems of critical servers and workstations, and image load logs
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: |
          FOR each host, create a feature vector of its IFEO configuration (target_exes, debugger_paths, signature_statuses).
          INPUT all host vectors into a DBSCAN clustering model.
          FOR each host identified as a 'noise' point or outlier by the model
          THEN ALERT 'ML Detection: Host with Anomalous IFEO Configuration Identified'