name: T1137: Office Application Startup
id: c4a1b2d3-e4f5-4a6b-8c7d-9e0f1a2b3c4d
description: This playbook helps investigate if an adversary is maintaining persistence by leveraging Office application startup mechanisms. This includes detecting malicious files written to Office startup paths, suspicious registry modifications for add-ins, Office applications spawning anomalous child processes (such as those with obfuscated command lines or rare executables), non-standard processes writing to Office directories, and the creation of malicious Outlook rules designed to execute code.
type: technique
related:
  - TA0003: Persistence
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Are there any files being written to Office startup paths that match known malicious hashes, or are there any registry modifications for Office add-ins that match a watchlist of malicious indicators?
    context: This question aims to detect persistence established through malicious files or add-ins placed in Office startup locations. Adversaries use these locations because files or add-ins stored there are automatically executed when the corresponding Office application starts. By checking created files against threat intelligence feeds and registry modifications against known malicious add-in names or CLSIDs, we can identify known threats using this technique.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
      - File servers hosting shared Office templates
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file creation events (EID 4663) in Office startup paths
          FOR EACH file:
            CALCULATE file hash
            QUERY threat intel feed for hash
            IF match THEN ALERT

          SEARCH registry modification events (EID 4657) in Office add-in paths
          FOR EACH modification:
            COMPARE ValueName or Data to malicious add-in watchlist
            IF match THEN ALERT
  - question: Are there files with unusually high-entropy names being written to Office startup paths, or are there Office add-ins being installed from low-prevalence paths?
    context: This question seeks to identify novel or obfuscated malware. High-entropy filenames can indicate an attempt by an adversary to avoid signature-based detection. Similarly, an add-in loading from a path that is unique or rare across the enterprise is highly suspicious. This statistical approach helps find threats that are not yet known to threat intelligence feeds.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
      - File servers hosting shared Office templates
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH file creation events in Office startup paths
          FOR EACH file:
            CALCULATE file name entropy
            IF entropy > 99th percentile THEN ALERT

          SEARCH registry modifications for Office add-ins
          CALCULATE prevalence of add-in DLL paths across all endpoints
          FOR EACH add-in installation:
            IF path prevalence < 1% THEN ALERT
  - question: Is any user exhibiting an anomalous volume of file or registry modifications in sensitive Office startup locations?
    context: This question helps detect unusual setup activity by a user, which could indicate a compromised account being used to establish persistence. By modeling the normal rate of file and registry changes for each user in these specific locations, a machine learning model can flag sudden spikes in activity that deviate from the user's established baseline.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
      - File servers hosting shared Office templates
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT: Time-series data of file/registry modifications in Office startup locations per user
          MODEL: Train ARIMA model on historical volume for each user
          PREDICT: Expected volume of modifications
          IF observed volume > prediction confidence interval THEN ALERT
  - question: Are Office applications spawning child processes with command lines containing known obfuscation or download cradle patterns?
    context: Adversaries often embed scripts or commands within Office macros that, when executed, spawn child processes like PowerShell to download and run further payloads. This question uses symbolic analysis (regular expressions) to look for common, high-confidence indicators of malicious activity in the command lines of these child processes, such as encoding flags, download commands, or base64 patterns.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations
      - Terminal servers
      - Internet gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (EID 4688) where parent is an Office app
          FOR EACH event:
            APPLY regex for patterns like '-enc', 'IEX', 'DownloadString', base64
            IF match THEN ALERT
  - question: Are Office applications spawning child processes with command lines that have anomalously high length or entropy compared to their baseline?
    context: Malicious command lines are often much longer and more complex (higher entropy) than benign ones due to embedded scripts, encoded payloads, and obfuscation. By establishing a statistical baseline for the length and entropy of command lines for normal parent-child process pairs (e.g., winword.exe -> cmd.exe), we can flag significant deviations that may indicate malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations
      - Terminal servers
      - Internet gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR EACH parent-child pair (e.g., winword.exe -> powershell.exe):
            CALCULATE baseline mean and std dev for command line length and entropy
          SEARCH for new process creation events from Office parents
          IF length or entropy > 3 std dev from mean THEN ALERT
  - question: Can we classify command lines from Office application child processes as malicious using a trained model?
    context: This question leverages a machine learning classifier to move beyond simple statistical measures and make a more holistic judgment about a command line's maliciousness. By training a model on features like keyword presence, character distribution (n-grams), and entropy, the system can learn the complex patterns of malicious commands and assign a probability score, allowing for more nuanced and accurate alerting.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations
      - Terminal servers
      - Internet gateway
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT: Labeled dataset of malicious and benign command lines
          MODEL: Train a Random Forest classifier on command line features
          FOR EACH new command line from an Office child process:
            PREDICT probability of maliciousness
            IF probability > threshold THEN ALERT
  - question: Are Office applications spawning child processes that are on a denylist of high-risk executables?
    context: Legitimate use of Office applications rarely involves spawning system or network utilities like 'net.exe', 'whoami.exe', or 'regsvr32.exe'. Such activity is a strong indicator of an adversary using a macro to perform reconnaissance or execute code. This question uses a simple but effective denylist to flag these high-confidence malicious events.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE denylist of child processes (e.g., net.exe, whoami.exe, powershell.exe)
          SEARCH process creation events (EID 4688) where parent is an Office app
          IF child process is in denylist THEN ALERT
  - question: Are Office applications spawning child processes that represent a new or very rare parent-child relationship in the environment?
    context: This question aims to detect novel or unusual adversary behavior by focusing on the rarity of a process relationship. While a denylist is effective for known risks, adversaries may use other tools. By baselining all parent-child process relationships across the enterprise, we can flag any pairing involving an Office application that is entirely new or has occurred on a statistically insignificant number of hosts, indicating a potential anomaly.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD frequency table of all parent-child process relationships over 30 days
          SEARCH for new process creation events from Office parents
          IF relationship is new or prevalence < 0.1% THEN ALERT
  - question: Are there any process creation events involving Office applications that are anomalous outliers compared to established clusters of normal activity?
    context: This question uses unsupervised machine learning to identify anomalous process events without relying on predefined rules or signatures. By clustering events based on features like parent process, child process, user, and host, the model learns what "normal" activity looks like. Any new event that doesn't fit into an existing cluster is flagged as an outlier, potentially representing a new or evasive malicious technique.
    answer_sources:
      - Windows Event ID 4688
      - User workstations
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT: Process creation events with features (parent, child, user, host)
          MODEL: Use DBSCAN to identify clusters of normal behavior
          FOR EACH new event from an Office parent:
            IF event does not fit into an existing cluster THEN ALERT
  - question: Is a process from a denylist (e.g., cmd.exe, powershell.exe) writing a file with an executable or script extension to an Office startup or template directory?
    context: Office startup paths are meant for Office-related templates and add-ins, typically placed there by the Office application itself or a trusted installer. When a command-line utility like 'powershell.exe' or 'cmd.exe' writes a script or executable file to these locations, it is highly indicative of an adversary attempting to establish persistence. This question checks for this specific, high-risk behavior.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User workstations
      - File servers hosting shared templates
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE denylist of writing processes (e.g., powershell.exe, cmd.exe)
          SEARCH file write events (EID 4663) in Office startup paths
          CORRELATE ProcessID with process logs (EID 4688)
          IF writing process is on denylist AND file is script/executable THEN ALERT
  - question: Is a process that has never been seen writing to Office startup/template directories doing so now, or is a file with a rare extension being written there?
    context: This statistical question helps to identify anomalous activity by baselining normal behavior. By identifying the set of processes that typically write to Office startup paths (e.g., WINWORD.EXE, msiexec.exe), any deviation from this set can be flagged. Similarly, flagging rare file extensions (.exe, .dll) being written to these paths can uncover attempts to place malicious payloads where they are not expected.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User workstations
      - File servers hosting shared templates
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE set of normal processes writing to Office startup paths
          SEARCH for file write events in these paths
          IF writing process is not in the baseline set THEN ALERT

          BASELINE prevalence of file extensions in these paths
          IF written file extension is statistically rare THEN ALERT
  - question: Are there suspicious sequences of events (e.g., network connection -> powershell -> file write) leading to a file being placed in an Office startup path?
    context: Malicious actions are often part of a larger sequence of events. This question uses a machine learning model to analyze these sequences. A typical benign sequence might be a user launching Word, which then saves a template. A malicious sequence might involve a network connection from a rare IP, followed by a PowerShell process launch, which then writes a file to the startup path. By modeling normal sequences, the system can flag those that deviate significantly.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - Zeek conn.log
      - User workstations
      - File servers hosting shared templates
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT: Sequences of events (network, process, file) per user
          MODEL: Train a Hidden Markov Model on normal event sequences
          FOR EACH new sequence ending in a file write to a startup path:
            IF sequence deviates significantly from learned models THEN ALERT
  - question: Is a process from a denylist modifying a registry key related to Office add-ins?
    context: Registry keys for Office add-ins are typically modified by trusted installers (msiexec.exe) or the Office applications themselves during configuration. When a command-line tool like 'reg.exe' or a scripting engine like 'powershell.exe' modifies these keys, it's a strong red flag that an adversary is attempting to programmatically install a malicious add-in for persistence.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Domain Controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE denylist of modifying processes (e.g., cmd.exe, powershell.exe, reg.exe)
          SEARCH registry modification events (EID 4657) to Office add-in keys
          CORRELATE ProcessID with process logs (EID 4688)
          IF modifying process is on denylist THEN ALERT
  - question: Is a newly installed Office add-in extremely rare (low prevalence) across the enterprise?
    context: Legitimate software, including Office add-ins, is typically deployed to a significant portion of an enterprise fleet. An add-in that is installed on only one or a very small number of endpoints is statistically anomalous. This question leverages this fact by calculating the prevalence of every add-in across the environment and flagging those that are new or have a very low installation count, as they may be targeted malicious implants.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Domain Controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD enterprise-wide baseline of all Office add-in names and DLL paths
          CALCULATE prevalence (e.g., % of hosts) for each add-in
          SEARCH for new add-in installations
          IF add-in is new or prevalence < 1% THEN ALERT
  - question: Can we detect anomalous registry modifications for Office add-ins using an outlier detection model?
    context: This question applies an unsupervised machine learning model to find suspicious add-in installations that might be missed by rule-based or simple statistical methods. By considering a combination of features—such as the process performing the modification, the user, the time of day, and the rarity of the add-in—an Isolation Forest model can identify modifications that are outliers from the normal software installation and configuration profiles learned from the environment.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - User workstations
      - Domain Controllers
      - Terminal servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          INPUT: Registry modification events with features (process, user, time, add-in prevalence)
          MODEL: Train an Isolation Forest model on event features
          FOR EACH new add-in modification event:
            CALCULATE anomaly score
            IF score indicates a significant outlier THEN ALERT
  - question: Has a new Outlook rule been created that is configured to run an application or contains scripting keywords?
    context: A classic persistence technique involves creating an Outlook rule that automatically triggers on incoming email and runs a script or application. This allows an adversary to maintain access and execute code. This question looks for the creation of such rules by monitoring both M365 audit logs for the 'RunAnApplication' parameter and endpoint registry data for keywords indicating application execution.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Microsoft 365 Unified Audit Log
      - User workstations
      - Microsoft Exchange servers
      - Office 365 tenant
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH M365 audit logs for 'New-InboxRule' where 'RunAnApplication' is used
          IF match THEN ALERT

          SEARCH registry modifications for Outlook rules
          SCAN rule content for application/script keywords
          IF match THEN ALERT
  - question: Have any new Outlook rules been created with high-entropy names, or is any user creating rules at an anomalously high rate?
    context: Adversaries may try to hide malicious Outlook rules by giving them obfuscated names (e.g., '..'). This question looks for such rules by flagging names with high character entropy or those consisting only of non-alphanumeric characters. Additionally, a sudden spike in the number of rules created by a single user can be anomalous and may indicate automated script-based activity, which this question also seeks to detect.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Microsoft 365 Unified Audit Log
      - User workstations
      - Microsoft Exchange servers
      - Office 365 tenant
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for new Outlook rule creation events
          FOR EACH new rule:
            CALCULATE entropy of rule name
            IF entropy > 99th percentile or name is non-alphanumeric THEN ALERT

          TRACK rule creation rate per user over 30 days
          IF rate > 3 std dev above user's baseline THEN ALERT
  - question: Are there anomalous spikes in Outlook rule creation/modification activity, or can we classify a rule as malicious based on its features?
    context: This question uses machine learning to provide a more advanced layer of detection for malicious Outlook rules. A time-series model can detect organization-wide spikes in rule modification activity that could signal a widespread campaign. Separately, a classification model can be trained on rule features (name, action type, condition complexity) to predict the likelihood that any individual new rule is malicious, catching threats that may not be obvious from a single indicator.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4663
      - Microsoft 365 Unified Audit Log
      - User workstations
      - Microsoft Exchange servers
      - Office 365 tenant
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL: Time-series anomaly detection on volume of 'New-InboxRule'/'Set-InboxRule' events
          IF anomalous spike in volume is detected THEN ALERT

          MODEL: Classification model trained on rule features
          FOR EACH new rule:
            PREDICT probability of maliciousness
            IF probability > threshold THEN ALERT