name: T1564.002: Hidden Users
id: e4b3c2a1-f6d5-4e7a-9b8c-1d2e3f4a5b6c
description: >-
  This playbook addresses the question: Is the adversary attempting to evade
  defenses by creating hidden user accounts? It focuses on detecting the
  creation of user accounts with non-standard or high-entropy names, registry
  modifications to hide accounts from the login screen (specifically via the
  SpecialAccounts\UserList key), the use of command-line tools like reg.exe to
  perform this hiding action, the temporal correlation of account creation
  followed immediately by a hiding action, and any subsequent authentication or
  network activity from an account confirmed to be hidden.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: >-
      Is a newly created user account on a threat intelligence watchlist or
      does it match patterns of known malicious tool-generated names?
    context: >-
      Adversaries often reuse known malicious account names or employ tools that
      generate usernames with predictable patterns. This question aims to catch
      these low-hanging fruits by comparing new usernames against a watchlist of
      known-bad names and regular expressions designed to match tool-generated
      names. A match provides a high-confidence indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4720
      - Domain Controllers, Member Servers, Endpoint Devices
    range: last 90 days
    queries:
      - >-
        pseudocode: SEARCH user_creation_events (EventID 4720) | WHERE username
        IN (threat_intel_watchlist) OR username MATCHES
        (regex_pattern_for_tools)
  - question: >-
      Does the username of a newly created account exhibit unusually high
      entropy compared to established legitimate usernames?
    context: >-
      To avoid using predictable names, adversaries may generate random
      usernames. These random strings typically have higher Shannon entropy than
      human-created names (e.g., 'x7z9p1q3' vs. 'jsmith'). By establishing a
      baseline entropy score for all legitimate usernames, this question helps
      identify statistical outliers that may represent randomly generated
      malicious accounts.
    answer_sources:
      - Windows Event ID 4720
      - Domain Controllers, Member Servers, Endpoint Devices
    range: last 90 days
    queries:
      - >-
        pseudocode: FOREACH new_user_event (EventID 4720) | CALCULATE
        entropy(username) | IF entropy > baseline_98th_percentile THEN ALERT
  - question: >-
      Is a newly created username classified as an outlier by a machine
      learning model trained on legitimate username characteristics?
    context: >-
      This question uses a more advanced analytical method to detect anomalous
      usernames. A model (like a one-class SVM) is trained on the character
      patterns (n-grams) of all known-good usernames. The model learns what
      'normal' looks like. Any new username that deviates significantly from this
      learned pattern is flagged as an outlier, allowing for the detection of
      subtle or novel malicious naming schemes that simple regex or entropy
      calculations might miss.
    answer_sources:
      - Windows Event ID 4720
      - Domain Controllers, Member Servers, Endpoint Devices
    range: last 90 days
    queries:
      - >-
        pseudocode: FOREACH new_user_event (EventID 4720) | EXTRACT
        n-gram_features(username) | PREDICT classification using trained_model |
        IF classification == 'outlier' THEN ALERT
  - question: >-
      Has the registry been modified to hide a user account from the login
      screen?
    context: >-
      This is a direct detection for the 'Hidden Users' technique. The registry
      key `HKLM\...\Winlogon\SpecialAccounts\UserList` is explicitly used by
      Windows to determine which users to display on the logon screen. Setting
      a value to '0' for a user under this key hides them. Monitoring for this
      specific modification is a high-fidelity way to detect an adversary's
      attempt to conceal an account.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Endpoint and Server Registries
    range: last 90 days
    queries:
      - >-
        pseudocode: SEARCH registry_modification_events (EventID 4657) | WHERE
        object_name CONTAINS '\Winlogon\SpecialAccounts\UserList\' AND
        value_data == 0 | ALERT
  - question: >-
      Was the registry key for hiding user accounts modified by an unusual or
      unexpected parent process?
    context: >-
      While an administrator might legitimately modify the
      `SpecialAccounts\UserList` key, they would typically use standard admin
      tools (like `regedit.exe` from an admin `cmd.exe`). If the process that
      modifies this key is an office application, web browser, or a script running
      from a user directory, it is highly suspicious. This indicates a potential
      compromise, such as a malicious macro or script execution, using that
      process to hide its tracks.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Endpoint and Server Registries
    range: last 90 days
    queries:
      - >-
        pseudocode: SEARCH registry_mod_events for 'SpecialAccounts\UserList' |
        GET parent_process_name | IF parent_process_name IS RARE or NOT IN
        (admin_tool_allowlist) THEN ALERT
  - question: >-
      Is there an anomalous spike in the frequency of modifications to the user
      account hiding registry key on a specific host?
    context: >-
      Legitimate modifications to the `SpecialAccounts\UserList` key are extremely
      rare. An adversary using a script to hide one or more accounts may cause a
      burst of these modification events in a short period. This question uses a
      time-series model to learn the normal rate of modification (which is
      likely zero) and alerts on any statistically significant spike, indicating
      potential automated malicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Endpoint and Server Registries
    range: last 90 days
    queries:
      - >-
        pseudocode: FOR EACH host | TRACK count_of('SpecialAccounts\UserList'
        mods) per hour | IF count > forecasted_value + confidence_interval THEN
        ALERT
  - question: Has the `reg.exe` command-line utility been used to hide a user account?
    context: >-
      A common way for adversaries to script registry modifications is by using
      the built-in `reg.exe` utility. This question looks for the exact command
      line syntax used to add or modify the `SpecialAccounts\UserList` key to
      hide a user. Capturing this command in process creation logs (Event ID
      4688) is a direct and high-confidence detection of the technique in action.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Command-Line Logs, Server Command-Line Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: SEARCH process_creation_events (EventID 4688) | WHERE
        process_name == 'reg.exe' AND command_line MATCHES
        (regex_for_hiding_user) | ALERT
  - question: >-
      Was the `reg.exe` command to hide a user account spawned by a
      low-probability or suspicious parent process?
    context: >-
      This question adds context to the execution of `reg.exe` for hiding users.
      While an admin might run this command from `cmd.exe`, it's highly unlikely
      to be spawned by `winword.exe` or `chrome.exe`. By analyzing the
      parent-child process relationship and flagging low-probability pairs, we
      can distinguish likely malicious executions from potentially benign
      administrative activity.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Command-Line Logs, Server Command-Line Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: SEARCH process_creation_events (EventID 4688) for 'reg.exe'
        modifying 'SpecialAccounts\UserList' | CALCULATE
        probability(parent_process -> 'reg.exe') | IF probability IS LOW THEN
        ALERT
  - question: >-
      Does a machine learning model classify a specific `reg.exe` execution as
      malicious hiding activity based on its features?
    context: >-
      To reduce false positives from legitimate `reg.exe` usage, this question
      proposes a classification model. The model would analyze multiple features
      of the process event—such as command-line entropy, argument length, parent
      process, and keywords—to make a holistic judgment on whether the execution
      is benign or malicious. This is more robust than looking at any single
      feature in isolation.
    answer_sources:
      - Windows Event ID 4688
      - Endpoint Command-Line Logs, Server Command-Line Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: FOREACH 'reg.exe' execution (EventID 4688) | EXTRACT
        features (cmd_entropy, parent, etc.) | PREDICT classification using
        trained_model | IF classification == 'malicious' THEN ALERT
  - question: Was a user account created and then immediately hidden on the same system?
    context: >-
      This question identifies a classic adversary tradecraft sequence. An
      attacker creates a user for persistence and immediately hides it to evade
      detection. Legitimate user provisioning workflows rarely, if ever, involve
      hiding an account within minutes of creation. A stateful correlation rule
      that links a user creation event (4720) with a hide event (4657/4688) for
      the same user on the same host in a short time window is a powerful
      detection.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers, Endpoint Device Event Logs, Server Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: CORRELATE user_creation_event (4720) with
        registry_hide_event (4657/4688) | WHERE username AND hostname ARE THE
        SAME | AND time_difference < 5 minutes | ALERT
  - question: >-
      Is the time between user creation and user hiding statistically unusual
      compared to the environmental baseline?
    context: >-
      This question applies statistical analysis to the 'create-then-hide'
      sequence. By measuring the time delta between creation and hiding for a
      user, we can identify outliers. An extremely short delta (e.g., sub-second
      or a few seconds) is a strong indicator of an automated script, which is
      characteristic of an adversary's toolchain, as opposed to manual
      administrative action.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers, Endpoint Device Event Logs, Server Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: FOR EACH instance of (create -> hide) for a user | CALCULATE
        time_delta | IF time_delta < 5th_percentile_of_baseline THEN ALERT
  - question: >-
      Did a sequence of security events related to a user deviate from normal,
      learned patterns, specifically showing a 'create -> hide' transition?
    context: >-
      This question uses a sequence analysis model (like an HMM) to understand
      the normal 'story' of user-related events (e.g., create -> login -> use
      resources -> logoff). The model learns which event transitions are common.
      An anomalous sequence, such as 'Create User' immediately followed by 'Hide
      User' without an intervening login, represents a low-probability state
      transition that the model would flag as suspicious.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Domain Controllers, Endpoint Device Event Logs, Server Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: INPUT sequence of user events (4720, 4657, etc.) into HMM |
        IF model flags '4720 -> 4657' as a low-probability transition THEN ALERT
  - question: >-
      Is a known hidden user account attempting to authenticate or actively
      using the network?
    context: >-
      This is a critical investigative question. Once an account is identified as
      hidden, it should have zero activity. Any authentication event (Logon Type
      2, 3, 10) or network traffic attributed to that user is an immediate,
      high-confidence sign of compromise. This requires maintaining a watchlist
      of known hidden accounts and alerting on any activity from them.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek dns.log
      - Authentication Servers, Network Gateway, DNS Servers, Endpoint Device Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: GET list_of_hidden_users from registries | SEARCH for
        authentication_events (4624) or network_connections (Zeek) | WHERE
        username IN (list_of_hidden_users) | CRITICAL ALERT
  - question: Did a hidden user account log in from a geographically anomalous location?
    context: >-
      This question adds geographic context to logins from hidden accounts. A
      login from a hidden account is already a critical alert. If that login also
      originates from an unexpected country or region where the organization has
      no presence, it provides even stronger evidence of an external adversary and
      can help focus the incident response effort.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek dns.log
      - Authentication Servers, Network Gateway, DNS Servers, Endpoint Device Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: ON login_event from hidden_user | GET source_ip | ENRICH with
        geolocation | IF country NOT IN (allowlist_of_countries) THEN ALERT
  - question: >-
      Is a hidden user account exhibiting anomalous behavior within a
      user-entity behavior analytics (UEBA) graph?
    context: >-
      This question applies advanced graph analytics to detect malicious hidden
      user activity. A graph database models relationships between users, hosts,
      and resources. By flagging user nodes as 'is_hidden', an anomaly detection
      algorithm can immediately spot when a supposedly inactive, hidden account
      starts accessing sensitive assets, connecting to unusual hosts, or
      otherwise behaving in a way that deviates from its expected baseline of
      zero activity.
    answer_sources:
      - Windows Event ID 4624
      - Zeek conn.log
      - Zeek dns.log
      - Authentication Servers, Network Gateway, DNS Servers, Endpoint Device Event Logs
    range: last 90 days
    queries:
      - >-
        pseudocode: BUILD user-entity graph with 'is_hidden' attribute | RUN
        graph anomaly detection algorithm | IF hidden_user_node shows anomalous
        activity (centrality, new connections) THEN ALERT