name: T1059.002: AppleScript
id: c7a6e4d2-f8b1-4c9d-a1e0-3d8b4f6c7a9e
description: This playbook helps investigate whether adversaries are using AppleScript for malicious execution on macOS endpoints. It focuses on detecting suspicious 'osascript' process executions, such as those involving scripts with known malicious hashes, connections to low-reputation network destinations, or anomalous parent processes. It also looks for inline scripts with high entropy or suspicious keywords, execution chains originating from productivity applications that lead to rare network activity, and the creation or modification of files in common macOS persistence locations like LaunchAgents or LaunchDaemons.
type: technique
related:
- TA0002: Execution
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is an 'osascript' process executing a script with a known malicious hash, or is it connecting to a low-reputation destination?
  context: This question aims to identify overtly malicious AppleScript execution by cross-referencing script hashes and network destinations against threat intelligence. A match provides a high-confidence signal that an 'osascript' process is part of a malicious activity, such as downloader or backdoor deployment.
  answer_sources:
  - macOS Process Execution Log
  - macOS File Access Log
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, particularly user workstations that handle external files; Network egress points and DNS resolvers; Threat intelligence platform API.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 'osascript' process event:
        GET script_path from process arguments
        CALCULATE sha256_hash of script_file
        QUERY threat_intel_api for sha256_hash
        IF match THEN ALERT

        CORRELATE process_id with network_logs within 60 seconds
        FOR each outbound connection:
          GET destination_ip, destination_fqdn
          QUERY threat_intel_api for destination_ip and destination_fqdn
          IF match or reputation is low THEN ALERT
- question: Is 'osascript' being spawned by an unusual parent process?
  context: This question focuses on detecting anomalous execution chains. Legitimate 'osascript' usage is often initiated by a limited set of parent processes (e.g., Terminal, Automator). When a common application like Microsoft Word or a browser spawns 'osascript', it is highly suspicious and could indicate macro-based execution or exploitation of a vulnerability. Identifying statistically rare parent-child relationships helps uncover these covert execution methods.
  answer_sources:
  - macOS Process Execution Log
  - macOS File Access Log
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, particularly user workstations that handle external files; Network egress points and DNS resolvers; Threat intelligence platform API.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN 30-day frequency table of parent_process -> 'osascript'
      FOR each new 'osascript' execution:
        GET parent_process_name
        CALCULATE frequency of parent_process_name
        IF frequency is in bottom 5th percentile THEN ALERT
- question: Does the behavior of an 'osascript' execution, including its parent process and network activity, match a machine learning model for malicious activity?
  context: This question leverages a machine learning model to perform a holistic assessment of an 'osascript' execution. By considering multiple features simultaneously—such as the parent process, command-line arguments, and network behavior—the model can identify complex patterns that are indicative of malicious activity, even if no single feature is overtly suspicious on its own. This is useful for detecting novel or obfuscated threats.
  answer_sources:
  - macOS Process Execution Log
  - macOS File Access Log
  - Zeek conn.log
  - Zeek dns.log
  - All macOS endpoints, particularly user workstations that handle external files; Network egress points and DNS resolvers; Threat intelligence platform API.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 'osascript' execution event:
        EXTRACT features (parent_process, cmd_args, script_entropy, has_network_conn, dest_ip_rep)
        INPUT features into classification_model (e.g., XGBoost)
        GET malicious_probability_score
        IF score > 0.85 THEN ALERT
- question: Is an inline 'osascript' command using suspicious keywords like 'do shell script' or 'curl'?
  context: This question targets a common technique where adversaries embed malicious scripts directly into the command line using the '-e' flag. This avoids dropping a separate script file to disk. Searching for keywords associated with shell command execution ('do shell script'), networking ('curl', 'nc'), or other scripting languages ('python', 'bash') within these inline scripts is an effective way to detect attempts to download and run second-stage payloads or perform other malicious actions.
  answer_sources:
  - macOS Process Execution Log with command-line auditing
  - All macOS endpoints; Centralized log management system capable of command-line capture and analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH process_execution_logs where process_name is 'osascript'
      FILTER for events where command_line contains '-e'
      APPLY regex to command_line for keywords ('do shell script', 'python', 'curl', 'base64', 'nc', 'bash', 'zsh')
      IF match THEN ALERT
- question: Is an inline 'osascript' command exhibiting unusually high entropy, suggesting obfuscation?
  context: This question aims to identify obfuscated or packed payloads passed directly on the command line. Adversaries often encode their scripts (e.g., using Base64) to evade simple keyword-based detection. These encoded scripts have a much higher Shannon entropy (a measure of randomness) than plain text scripts. By baselining normal entropy levels for inline scripts in the environment and alerting on outliers, analysts can detect potentially obfuscated malicious code.
  answer_sources:
  - macOS Process Execution Log with command-line auditing
  - All macOS endpoints; Centralized log management system capable of command-line capture and analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ESTABLISH 95th percentile baseline for inline script entropy over last 30 days.
      FOR each 'osascript' event with '-e' flag:
        EXTRACT inline_script_string from command_line
        CALCULATE shannon_entropy of script_string
        IF entropy > baseline_95th_percentile THEN ALERT
- question: Does an NLP model classify an inline 'osascript' command as malicious?
  context: This question uses a sophisticated Natural Language Processing (NLP) model to analyze the content of an inline AppleScript command. Unlike simple keyword matching or entropy calculation, an NLP model can understand the structure, syntax, and semantics of the script. This allows it to detect malicious intent even in novel or cleverly disguised scripts that might evade other detection methods, providing a more robust and context-aware analysis.
  answer_sources:
  - macOS Process Execution Log with command-line auditing
  - All macOS endpoints; Centralized log management system capable of command-line capture and analysis.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each 'osascript' event with '-e' flag:
        EXTRACT inline_script_content
        INPUT script_content into pre-trained NLP model (e.g., DistilBERT)
        GET malicious_confidence_score
        IF score > 0.90 THEN ALERT
- question: Did an 'osascript' process, spawned by a productivity app, make a network connection involving a known-bad indicator (IP, FQDN, or JA3/JA3S hash)?
  context: This question seeks to identify a specific, high-confidence attack chain a user-facing document (handled by Word, Adobe Reader, etc.) triggers an AppleScript that communicates with a malicious server. By correlating the anomalous process chain with network indicators from threat intelligence (including TLS fingerprinting via JA3/JA3S), analysts can quickly pinpoint C2 communications or payload downloads originating from a compromised document.
  answer_sources:
  - macOS Process Execution Log
  - macOS Network Connection Log
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - macOS endpoints for user groups with high exposure to external documents (e.g., HR, Finance, Sales); Network egress points instrumented with Zeek; DNS and SSL/TLS traffic inspection points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH for 'osascript' process where parent is ('Microsoft Word', 'Adobe Reader', etc.)
      CORRELATE process_id with network logs
      FOR each outbound connection:
        GET dest_ip, dest_fqdn, ja3_hash, ja3s_hash
        QUERY threat_intel for ip, fqdn, ja3_hash, ja3s_hash
        IF match THEN ALERT
- question: Did an 'osascript' process make a network connection to a statistically rare destination FQDN or use a rare JA3/JA3S hash?
  context: This question helps uncover potential C2 channels by focusing on the rarity of network artifacts. Adversaries often use newly registered domains or custom client software, resulting in FQDNs and TLS fingerprints (JA3/JA3S) that are uncommon across the enterprise. By baselining normal network activity and flagging connections with rare indicators, analysts can detect potential C2 traffic that isn't yet present in threat intelligence feeds.
  answer_sources:
  - macOS Process Execution Log
  - macOS Network Connection Log
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - macOS endpoints for user groups with high exposure to external documents (e.g., HR, Finance, Sales); Network egress points instrumented with Zeek; DNS and SSL/TLS traffic inspection points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN 30-day baseline of all FQDNs and JA3/JA3S hashes.
      FOR each network connection from 'osascript' or its children:
        GET dest_fqdn, ja3_hash, ja3s_hash
        CALCULATE risk_score based on rarity of FQDN and hashes
        IF risk_score > threshold THEN ALERT
- question: Does an anomaly detection model flag a network connection from 'osascript' as a deviation from normal behavior?
  context: This question uses an unsupervised machine learning model to identify suspicious network connections without relying on predefined rules or signatures. The model learns the characteristics of 'normal' network traffic from 'osascript' (e.g., typical ports, data volumes, destinations) and flags any activity that deviates significantly. This is particularly effective for detecting novel C2 techniques or data exfiltration that doesn't conform to known patterns.
  answer_sources:
  - macOS Process Execution Log
  - macOS Network Connection Log
  - Zeek conn.log
  - Zeek dns.log
  - Zeek ssl.log
  - macOS endpoints for user groups with high exposure to external documents (e.g., HR, Finance, Sales); Network egress points instrumented with Zeek; DNS and SSL/TLS traffic inspection points.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each network connection from 'osascript':
        EXTRACT features (parent_process, dest_port, bytes_sent, ja3_rarity, fqdn_rarity)
        INPUT features into anomaly_detection_model (e.g., Isolation Forest)
        IF model flags event as anomaly THEN ALERT
- question: Did 'osascript' or its child process create or modify a .plist file or executable in a known persistence directory?
  context: This question directly targets attempts by an AppleScript to establish persistence. Adversaries use LaunchAgents and LaunchDaemons (configured via .plist files) to ensure their malware runs automatically on system startup or user login. Monitoring these critical directories for write/modify operations by 'osascript' provides a high-fidelity alert for this specific persistence technique.
  answer_sources:
  - macOS File Creation Log
  - macOS File Modification Log
  - macOS Process Execution Log
  - System-wide and user-specific macOS persistence locations, including /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and /Library/ScriptingAdditions on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MONITOR file events in persistence directories ('/Library/LaunchAgents', etc.)
      ALERT if process_name is 'osascript' or its child
      AND event_type is 'write' or 'modify'
      AND (target_file_extension is '.plist' OR target_file has execute permissions)
- question: Is there a statistical anomaly in the rate of file modifications in persistence locations by 'osascript' on a specific endpoint?
  context: This question looks for unusual bursts of file system activity related to persistence. While a single file modification might be legitimate, a sudden, high volume of such activity from 'osascript' on one machine is abnormal and could indicate an automated script attempting to install multiple persistence mechanisms. Using a time-series analysis to detect deviations from a baseline rate helps identify this suspicious behavior.
  answer_sources:
  - macOS File Creation Log
  - macOS File Modification Log
  - macOS Process Execution Log
  - System-wide and user-specific macOS persistence locations, including /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and /Library/ScriptingAdditions on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ESTABLISH 99th percentile baseline for file modification rate (files/hour) by 'osascript' in persistence dirs per host.
      FOR each host:
        CALCULATE current modification rate by 'osascript'
        IF current_rate > baseline_99th_percentile THEN ALERT
- question: Does a clustering model identify a file modification by 'osascript' in a persistence location as anomalous behavior?
  context: This question uses clustering to define 'normal' file system activity and identify outliers. The model groups together routine administrative tasks that might involve 'osascript' and persistence directories. Any file modification event by 'osascript' that does not fit into these established clusters is flagged as a 'noise' point, or an anomaly. This is effective for detecting novel persistence techniques that don't match any predefined rule or statistical pattern.
  answer_sources:
  - macOS File Creation Log
  - macOS File Modification Log
  - macOS Process Execution Log
  - System-wide and user-specific macOS persistence locations, including /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and /Library/ScriptingAdditions on all macOS endpoints.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each file event by 'osascript' in a persistence directory:
        EXTRACT features (target_dir, file_ext, permissions)
        INPUT features into clustering_model (e.g., DBSCAN)
        IF model classifies event as a 'noise' point THEN ALERT