name: T1053.007: Container Orchestration Job
id: 9a8b7c6d-5e4f-4a3b-2c1d-0e9f8a7b6c5d
description: This playbook helps identify malicious use of container orchestration jobs for execution, persistence, and privilege escalation. It focuses on detecting jobs that use malicious container images or commands, establish connections to known command-and-control servers, run reconnaissance tools, or contain cryptocurrency miners. It also covers techniques for maintaining persistence through high-frequency or unattributed cron jobs and methods for escalating privileges by creating jobs with insecure, high-privilege settings to enable container escapes or unauthorized access to host resources and Kubernetes APIs.
type: technique
related:
  - TA0002: Execution
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a container orchestration job making outbound network connections to known malicious destinations or executing processes with known malicious hashes?
    context: This question seeks to identify high-confidence threats by correlating container activity with threat intelligence. It cross-references network logs for connections to known bad IPs/domains and host-level process logs for executions of known malicious files. A match provides strong evidence of a compromised container job.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Kubernetes API Server
      - Container Registries
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH (Zeek conn.log OR Zeek dns.log)
          WHERE source_ip IN container_ip_ranges
          AND (destination_ip IN threat_feed_ips OR query IN threat_feed_domains)
          CORRELATE with (Windows Event ID 4688)
          WHERE parent_process_name IN container_runtimes
          AND process_hash IN threat_feed_hashes
  - question: Does a new container job exhibit anomalous network communication patterns compared to its historical baseline?
    context: This question aims to detect subtle C2 activity by analyzing communication patterns. It calculates the Jaccard similarity between the set of domains contacted by a new job and the historical norm for that application. A low similarity score suggests the job is communicating with new, unexpected domains, which could indicate malicious activity.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Kubernetes API Server
      - Container Registries
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_container_job:
            current_domains = GET domains from Zeek dns.log for job_pod_ip
            baseline_domains = GET historical domains for job_application_profile
            jaccard_index = JACCARD(current_domains, baseline_domains)
            IF jaccard_index < threshold:
              ALERT "Anomalous FQDN communication"
  - question: Can process execution events originating from container jobs be classified as malicious by a machine learning model?
    context: This question uses a machine learning approach to proactively identify malicious process behavior that may not match known signatures. By training a Random Forest model on features like command-line length and entropy, it can classify new, unseen processes spawned by container jobs as malicious or benign, detecting novel threats.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 4688
      - Kubernetes API Server
      - Container Registries
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_process_event from container (Event ID 4688):
            features = EXTRACT (cmd_length, cmd_entropy, parent_process, etc.)
            prediction = random_forest_model.PREDICT(features)
            IF prediction == 'malicious':
              ALERT "ML detected malicious process execution"
  - question: Is a container job executing commands that match patterns of known reconnaissance tools, C2 frameworks, or cryptominers?
    context: This question uses regular expressions to find "low-hanging fruit" evidence of malicious activity within process command lines. It specifically looks for patterns associated with initial enumeration (e.g., `net user`), code execution stagers (e.g., `powershell -enc`), and common cryptominer process names, providing a quick way to spot common attack tools.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Windows Event ID 4688
          WHERE parent_process_name IN container_runtimes
          AND command_line MATCHES REGEX (`ipconfig`, `hostname`, `powershell -enc`, `kinsing`, `xmrig`)
  - question: Is a container job executing commands with unusually high character entropy, suggesting obfuscation?
    context: This question aims to detect obfuscated or packed malicious commands that attackers use to evade signature-based detection. By calculating the Shannon entropy of process command lines and flagging those that exceed a baseline for their application profile, this method can identify suspicious commands even if the specific tool is unknown.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_process_event from container (Event ID 4688):
            entropy = CALCULATE_SHANNON_ENTROPY(command_line)
            baseline_entropy = GET 99th_percentile_entropy for process_application_profile
            IF entropy > baseline_entropy:
              ALERT "High entropy command line detected"
  - question: Can the intent of commands executed by a container job be classified as malicious by a Natural Language Processing (NLP) model?
    context: This question applies advanced NLP to understand the *purpose* of a command, rather than just matching its syntax. By fine-tuning a model like BERT on shell commands, it can classify the intent (e.g., 'C2-Communication', 'Reconnaissance') of commands executed by container jobs, allowing for the detection of malicious actions even if they use novel syntax.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_process_event from container (Event ID 4688):
            intent = nlp_model.CLASSIFY(command_line)
            IF intent IN ('C2-Communication', 'Reconnaissance', 'Payload-Execution'):
              ALERT "NLP model classified malicious command intent"
  - question: Shortly after a container job starts, does its pod connect to a known suspicious network entity like a TOR exit node?
    context: This question focuses on time-sensitive correlation to detect immediate post-execution C2 or data exfiltration. It links the creation of a container job to subsequent network connections from its pod to high-risk destinations (e.g., TOR nodes, suspicious ASNs) within a short time window (5 minutes), indicating a likely malicious payload.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Node Performance Metrics
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Monitoring and Metrics Platform
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Kubernetes audit logs for new job creation at time T
          SEARCH Zeek conn.log for connection from job_pod_ip
          WHERE connection_time between T and T+5min
          AND destination_ip IN (suspicious_ASN_list OR tor_exit_node_list)
  - question: Does a worker node experience a significant spike in resource usage or make connections to rare geographic locations immediately after a new container job starts?
    context: This question uses statistical baselining to detect anomalous behavior indicative of malicious activity like cryptomining or data staging. It monitors for deviations from normal CPU/memory usage on a worker node and unusual network connections (to new countries/ASNs) that are temporally correlated with a new container job's execution.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Node Performance Metrics
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Monitoring and Metrics Platform
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_container_job on worker_node:
            cpu_spike = CHECK node performance metrics for CPU > (mean + 3*std_dev) post-job_start
            mem_spike = CHECK node performance metrics for MEM > (mean + 3*std_dev) post-job_start
            rare_geo = CHECK Zeek conn.log for connections to new geo-locations from job_pod_ip
            IF cpu_spike OR mem_spike OR rare_geo:
              ALERT "Anomalous resource usage or network connection post-job start"
  - question: Does the outbound data volume from a new container job's pod show a time-series anomaly, such as a sudden spike?
    context: This question uses a machine learning model (e.g., LSTM) to detect uncharacteristic network behavior, such as data exfiltration. By modeling the normal time-series of outbound data volume for a pod, it can flag sharp, unexpected spikes that coincide with a new job's execution, which could represent the theft of sensitive data.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Node Performance Metrics
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Monitoring and Metrics Platform
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR time-series of outbound_bytes from pod_ips using LSTM/ARIMA model
          IF anomaly_detected (e.g., sudden spike)
          AND anomaly_time CORRELATES with new_job_execution_time:
            ALERT "Time-series anomaly in outbound data volume detected for new job"
  - question: Is a process spawned by a container job attempting to access sensitive system files without authorization?
    context: This question looks for direct evidence of an attack progressing towards privilege escalation or information gathering. It creates a specific rule to detect when a process originating from a container context tries to access critical host or Kubernetes configuration files (e.g., `kubelet.conf`) that it should not have access to.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Internal Network Segments
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Windows Event ID 4663 (File Access)
          WHERE object_name IN ('kubelet.conf', 'admin.conf', '/path/to/credentials')
          CORRELATE with process information from Windows Event ID 4688
          WHERE parent_process_name IN container_runtimes
          AND source_process_name NOT IN allowlist
  - question: Is a new container job's pod establishing an unusually high number of new internal network connections?
    context: This question aims to detect lateral movement or internal network scanning. By baselining the normal pod-to-pod communication graph for an application, it can flag a new job as anomalous if its pod starts making connections to many other internal services that it has never communicated with before, indicating potential reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Internal Network Segments
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_job:
            baseline_graph = GET historical communication graph for job_application_profile
            current_connections = GET internal connections from Zeek conn.log for job_pod
            new_edges = COUNT connections in current_connections not in baseline_graph
            IF new_edges > 95th_percentile_for_profile:
              ALERT "Anomalous number of new internal connections"
  - question: Do the internal network flows from a container job's pod fall outside of normal behavioral clusters?
    context: This question uses unsupervised machine learning (DBSCAN) to identify anomalous internal network activity without pre-defined rules. By clustering pods based on their communication behavior (ports, protocols, data volume), any pod from a new job that is marked as an outlier or forms a new, small cluster is flagged as suspicious, as its behavior does not conform to any known legitimate profile.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Internal Network Segments
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          EXTRACT features (dest_port, protocol, data_volume) from internal flows (Zeek conn.log)
          APPLY DBSCAN clustering algorithm to features
          FOR each new_job:
            IF job_pod is classified as 'noise' or 'outlier':
              ALERT "Pod communication pattern is a behavioral outlier"
  - question: Is a container job making recurring connections using a TLS fingerprint (JA3/JA4) associated with known malware?
    context: This question identifies specific C2 frameworks by their unique TLS handshake implementation, which is captured by JA3/JA4 hashes. An alert on a recurring connection from a container that matches a malicious fingerprint from threat intelligence is a high-fidelity indicator of a specific malware family being used for persistence.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Network Egress Points
      - Kubernetes Worker Nodes
      - Internal DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek ssl.log
          WHERE source_ip IN container_ip_ranges
          AND (ja3_hash IN malicious_ja3_feed OR ja4_hash IN malicious_ja4_feed)
          AND connection is recurring
  - question: Is a container making outbound connections with a very low, consistent time interval, indicative of automated beaconing?
    context: This question detects C2 persistence by analyzing the timing of network connections. Human-generated traffic is typically random, while automated malware beacons are highly periodic. By calculating the standard deviation of time between connections from a pod to a destination, a very low deviation (e.g., every 60 +/- 2 seconds) strongly suggests automated C2 communication.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Network Egress Points
      - Kubernetes Worker Nodes
      - Internal DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source_ip, destination_ip pair in Zeek conn.log:
            timestamps = GET all connection timestamps
            intervals = CALCULATE time differences between consecutive timestamps
            std_dev = CALCULATE standard deviation of intervals
            IF std_dev < 5_seconds:
              ALERT "Potential beaconing activity detected due to low-variance interval"
  - question: Does a time-series analysis of network traffic from a container reveal a strong periodic signal not tied to a legitimate job?
    context: This question uses time-series decomposition to mathematically uncover hidden periodic C2 communication. By isolating the periodic component of a container's network activity, it can identify beaconing behavior even if it's mixed with legitimate traffic. If this detected period does not match any known, scheduled CronJob, it is a strong indicator of a malicious persistence mechanism.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Windows Event ID 4688
      - Network Egress Points
      - Kubernetes Worker Nodes
      - Internal DNS Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container_ip:
            time_series = GET connection counts per minute to external IPs
            decomposed_series = STL_DECOMPOSE(time_series)
            IF decomposed_series.periodic_component is strong
            AND period NOT IN known_cronjob_schedules:
              ALERT "Unattributed periodic network signal detected"
  - question: Has a Kubernetes CronJob been created or modified with a high-frequency schedule or a command containing suspicious strings?
    context: This question provides a direct way to find potentially malicious CronJobs by inspecting their configuration. It looks for two red flags: an unusually frequent schedule (e.g., every minute), which is common for persistence, or the presence of commands associated with downloading/executing payloads (e.g., `curl`, `wget`, `nc`), which could indicate the job's malicious intent.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Kubernetes audit logs for 'Create CronJob' or 'Update CronJob'
          WHERE schedule MATCHES REGEX ('*/1 * * * *', '*/5 * * * *')
          OR container_command CONTAINS ('curl', 'wget', 'nc', 'bash -c')
  - question: Has a new CronJob been created with a schedule that is statistically rare (e.g., top 1% most frequent) or a name that is very similar to a legitimate job (typosquatting)?
    context: This question uses statistical analysis to find anomalous CronJobs that might be missed by simple pattern matching. It flags jobs that are scheduled to run far more frequently than is normal for the environment, or jobs that use names deceptively similar to legitimate ones (e.g., 'kube-healtcheck' vs 'kube-healthcheck') to evade detection.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Query 1: Frequency
          all_schedules = GET all CronJob schedules
          frequency_percentile = CALCULATE percentile for new_job_schedule
          IF frequency_percentile > 99:
            ALERT "CronJob with statistically high frequency detected"
          // Query 2: Typosquatting
          lev_dist = LEVENSHTEIN(new_job_name, all_legitimate_job_names)
          IF min(lev_dist) < 2:
            ALERT "Potential CronJob typosquatting detected"
  - question: Can a machine learning model classify a new or modified CronJob configuration as likely malicious?
    context: This question uses a supervised ML model to score the risk of a CronJob configuration. By training on features like schedule frequency, the image source (public vs. private registry), and whether it requests privileged access, the model can provide a holistic risk assessment and flag CronJobs that have a combination of suspicious attributes, indicating a likely persistence mechanism.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_or_modified_cronjob:
            features = EXTRACT (schedule_freq, image_registry, has_priv_context, etc.)
            risk_score = ml_classifier.PREDICT_PROBA(features)
            IF risk_score > threshold:
              ALERT "ML model classified CronJob as high-risk for persistence"
  - question: Is there periodic network activity from a container that cannot be attributed to any configured CronJob?
    context: This question aims to find "hidden" persistence mechanisms that are not scheduled via Kubernetes CronJobs (e.g., a `sleep` loop inside a container). It first identifies a periodic network signal, then attempts to correlate it with a known CronJob. If no matching CronJob can be found, the activity is flagged as unattributed and highly suspicious.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          IDENTIFY recurring connection (same src_ip, dst_ip, dst_port) in Zeek conn.log
          GET source pod for src_ip
          QUERY K8s audit logs for a CronJob that could be responsible for the pod
          IF no_correlating_cronjob_found:
            ALERT "Unattributed periodic network activity detected"
  - question: Is there periodic process execution on a worker node that does not match the schedule of any known CronJob?
    context: This question uses autocorrelation to detect periodic process execution directly on a worker node, which could indicate a persistence mechanism running outside of the Kubernetes scheduler. By identifying a repeating process and then failing to match its periodicity to a known CronJob, it can uncover hidden malicious tasks.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE time-series of process creation events (Event ID 4688) for a specific process_name/hash
          CALCULATE autocorrelation on the time-series
          IF high_autocorrelation_peak at lag T:
            IF T not in known_cronjob_schedules:
              ALERT "Unattributed periodic process execution detected"
  - question: Are there clusters of periodic network activity that cannot be attributed to any known application or CronJob?
    context: This question uses unsupervised learning to find and flag unknown sources of periodic traffic. It clusters all container network flows and identifies those representing regular, beacon-like activity. Each of these "periodic" clusters is then checked against a list of known applications and CronJobs. Any cluster that cannot be attributed is flagged as a potential hidden persistence mechanism.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Network Egress Points
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CLUSTER container network flows (from Zeek conn.log) using K-Means
          IDENTIFY clusters with low intra-cluster variance (periodic behavior)
          FOR each periodic_cluster:
            ATTEMPT to attribute cluster to a known application or CronJob
            IF attribution_fails:
              ALERT "Unattributed cluster of periodic network activity found"
  - question: Is a container job configured to restart many times on failure and also connecting to known malicious IPs?
    context: This question identifies a common attacker pattern: creating a malicious job that might be killed by security software, but is automatically restarted by Kubernetes. It looks for the combination of a high `backoffLimit` in the job spec (allowing many restarts) and network connections to IOCs, indicating a persistent, malicious job.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH K8s audit logs for Job creation
          WHERE spec.backoffLimit > 10 AND spec.template.spec.restartPolicy == 'OnFailure'
          CORRELATE with Zeek conn.log
          WHERE job_pod_ip connects to IP in threat_feed
  - question: Is a pod associated with a job restarting at a statistically anomalous rate while also executing suspicious processes?
    context: This question uses statistical anomaly detection to find jobs that are failing and restarting suspiciously. It flags any pod whose restart rate is in the 99th percentile for the environment and cross-references this with host logs to see if the pod is executing high-entropy or otherwise suspicious commands before it crashes or is terminated.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE pod restart rate for all pods over 1 hour
          IDENTIFY pods where restart_rate > 99th_percentile
          IF pod is managed by a Job object:
            CHECK Windows Event ID 4688 from that pod for suspicious processes (e.g., high-entropy commands)
            IF found:
              ALERT "High-restarting job pod with suspicious process execution"
  - question: Is a pod that is predicted to be stable by a machine learning model exhibiting a high restart rate?
    context: This question identifies a logical contradiction to find malicious jobs. A machine learning model predicts pod stability based on its configuration. If a pod that the model predicts *should* be stable is actually restarting frequently, it suggests an external factor (like a security agent terminating a malicious process) is causing the restarts, which are then handled by the job controller, creating a persistence loop.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each pod with a high restart rate:
            features = EXTRACT pod configuration (image, resources, etc.)
            prediction = stability_model.PREDICT(features)
            IF prediction == 'stable':
              ALERT "Pod predicted to be stable is exhibiting high restart rate"
  - question: Is a container job running with privileged settings and executing a known privilege escalation tool?
    context: This question looks for a clear and dangerous combination of configuration and action. A job running with high privileges (`privileged: true`) is already a risk. If a process from that job is then seen executing a known privilege escalation exploit or tool, it is a high-confidence indicator of an active attempt to break out of the container and compromise the host node.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH K8s audit logs for Job creation with `securityContext.privileged: true`
          CORRELATE with Windows Event ID 4688 from resulting pod
          WHERE process_hash IN known_privesc_tool_hashes
          OR command_line MATCHES known_exploit_patterns
  - question: Is a privileged container job using a container image that is rare or has never been seen running in a privileged context before?
    context: This question uses rarity and baselining to detect suspicious privileged workloads. Attackers often introduce custom or new images to carry out attacks. By maintaining a baseline of images approved to run with high privileges, this check can immediately flag any job that uses a new, unvetted image in a privileged context, which is a significant security risk.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH K8s audit logs for Job creation with privileged settings
          GET container_image from job spec
          IF container_image NOT IN approved_privileged_image_list:
            ALERT "Privileged job running with unapproved/rare image"
  - question: Does a graph-based anomaly detection model flag a job as high-risk due to its connection to both privileged settings and a rare image?
    context: This question uses graph analytics to formalize the detection of risky combinations. By modeling Kubernetes objects as a graph, an anomaly detection algorithm can assign a high anomaly score to a 'Job' node that is linked to both a 'Privileged Security Context' node and a 'Rare Image' node. This automates the process of finding dangerous configurations.
    answer_sources:
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4688
      - Zeek conn.log
      - Kubernetes API Server
      - Kubernetes Worker Nodes
      - Network Egress Points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BUILD graph of K8s objects (Jobs, Pods, Images, SecurityContexts)
          APPLY graph anomaly detection algorithm
          IF Job node has high anomaly score due to links to 'Privileged' and 'Rare Image' nodes:
            ALERT "Graph model detected high-risk privileged job configuration"
  - question: Is a container job executing commands indicative of an attempt to escape the container, such as accessing the Docker socket or using nsenter?
    context: This question looks for command-line evidence of well-known container escape techniques. By using regular expressions to search for strings like `/var/run/docker.sock` (to control the Docker daemon) or `nsenter -t 1` (to enter the host's namespaces), it provides a direct method for detecting active breakout attempts from within a container job.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Windows Event ID 4688 on worker nodes
          WHERE parent_process_name IN container_runtimes
          AND command_line MATCHES REGEX ('/var/run/docker.sock', 'nsenter -t 1', 'mount /proc/1/root')
  - question: Is a container job accessing an unusual number of host paths mounted into the container?
    context: This question detects anomalous file system interaction as a proxy for container escape or host reconnaissance. After establishing a baseline of normal host path access for an application, it flags any new job that starts accessing a statistically significant number of new or different host paths, suggesting it is improperly exploring the host's file system.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new_job:
            baseline_paths = GET normal hostPath access patterns for job_application_profile
            current_paths = GET accessed hostPaths from Event ID 4663 for job_pod
            new_paths_count = COUNT paths in current_paths not in baseline_paths
            IF new_paths_count > 99th_percentile_for_profile:
              ALERT "Anomalous access to host paths from container job"
  - question: Does a command sequence from a container job have a high reconstruction error when processed by an autoencoder, indicating a novel or obfuscated command?
    context: This question uses an autoencoder, a type of neural network, to detect novel and obfuscated container escape techniques that may not match known patterns. The model is trained on benign command sequences. Malicious or unusual sequences will be poorly reconstructed by the model, resulting in a high "reconstruction error" that flags the command as anomalous.
    answer_sources:
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Windows Event ID 4663
      - Kubernetes Worker Nodes
      - Kubernetes API Server
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each command_sequence from a container job:
            reconstruction_error = autoencoder_model.EVALUATE(command_sequence)
            IF reconstruction_error > anomaly_threshold:
              ALERT "Autoencoder detected anomalous command sequence"
  - question: Is a pod from a container job connecting to a privileged service on its host node, like the Kubelet API, in violation of network policies?
    context: This question detects a critical step in many Kubernetes attacks: a compromised pod communicating with the Kubelet API on the node to create new, privileged pods. It specifically looks for network connections from a pod to its own node's IP on sensitive ports (e.g., 10250) where that traffic is not explicitly permitted by a NetworkPolicy.
    answer_sources:
      - Zeek conn.log
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes Control Plane Network
      - Internal Administrative Networks
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH Zeek conn.log
          WHERE source_ip is a pod_ip
          AND destination_ip is the pod's host_node_ip
          AND destination_port IN (10250, 2379)
          AND no corresponding NetworkPolicy allows this traffic
  - question: Is a container job's pod connecting to a statistically unusual number of ports on its host node?
    context: This question aims to detect port scanning or reconnaissance against the host node from within a compromised pod. By baselining the normal pod-to-node communication, it can flag a pod that suddenly starts connecting to a large number of unique ports on its host, which is a strong indicator of an attacker trying to find open, vulnerable services.
    answer_sources:
      - Zeek conn.log
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes Control Plane Network
      - Internal Administrative Networks
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each pod:
            baseline_port_count = GET mean and std_dev of unique node ports connected to by app_profile
            current_port_count = COUNT unique node ports connected to by pod from Zeek conn.log
            IF current_port_count > (baseline_port_count.mean + 3*baseline_port_count.std_dev):
              ALERT "Pod connecting to anomalous number of node ports"
  - question: Is a machine learning model classifying a pod's communication with its host node as an outlier?
    context: This question uses a One-Class SVM, an algorithm designed for outlier detection, to identify any unusual network connections from a pod to its host or other internal services. The model learns what "normal" communication looks like, and any flow that deviates significantly (e.g., to a new port, with a different protocol) is flagged as an outlier, potentially representing an unauthorized access attempt.
    answer_sources:
      - Zeek conn.log
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes
      - Kubernetes Control Plane Network
      - Internal Administrative Networks
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN One-Class SVM on features from legitimate pod-to-host network flows
          FOR each new_network_flow:
            prediction = one_class_svm_model.PREDICT(flow_features)
            IF prediction == 'outlier':
              ALERT "ML model detected outlier network communication from pod"
  - question: Shortly after a container job runs, is a new local user account created on the same worker node?
    context: This question looks for post-privilege-escalation activity on a host. A common attacker goal after escaping a container is to create a local user account for persistence. This query correlates the execution of a container job with the nearly simultaneous creation of a new user account (Windows Event ID 4720) on the same node, which is highly indicative of a successful compromise.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes (Authentication Logs)
      - Kubernetes API Server
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for container job process execution (Event ID 4688) on worker_node at time T
          SEARCH for new user creation (Event ID 4720) on same worker_node
          WHERE creation_time is between T and T+1min
          AND source of creation is not a known admin tool
  - question: Is there a sudden spike in the creation of high-privilege Kubernetes objects that correlates with a recently executed container job?
    context: This question detects an attacker leveraging a compromised container to create powerful resources within the cluster itself. It monitors the rate of creation for objects like ClusterRoleBindings. A sudden, statistically significant spike in the creation of these objects, occurring shortly after a container job ran, suggests the job was used to escalate privileges within Kubernetes.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes (Authentication Logs)
      - Kubernetes API Server
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR rate of ClusterRoleBinding creation in K8s audit logs
          IF rate > (moving_avg + 3*std_dev):
            CORRELATE timing of spike with recently executed container jobs
            IF correlation exists:
              ALERT "Spike in privileged object creation correlated with container job"
  - question: Is an anomalous sequence of events observed, such as a container job being created, followed immediately by the creation of a new ClusterRoleBinding?
    context: This question uses sequence analysis to detect logical attack progressions. A legitimate sequence is typically `job create -> pod running -> pod success`. A model like a Hidden Markov Model can be trained on these normal sequences. An anomalous sequence, like `job create -> pod running -> new ClusterRoleBinding`, violates the expected workflow and strongly indicates that the job was a precursor to a privilege escalation action.
    answer_sources:
      - Windows Event ID 4720
      - Windows Event ID 4688
      - Kubernetes API Server Audit Logs
      - Kubernetes Worker Nodes (Authentication Logs)
      - Kubernetes API Server
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN Hidden Markov Model on legitimate event sequences (job create, pod run, etc.)
          FOR each new_event_sequence:
            likelihood = hmm_model.SCORE(sequence)
            IF likelihood is low AND sequence contains ('job create', 'new ClusterRoleBinding'):
              ALERT "Anomalous event sequence indicating post-job privilege escalation"