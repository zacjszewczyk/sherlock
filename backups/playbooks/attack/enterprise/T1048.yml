name: T1048: Exfiltration Over Alternative Protocol
id: e5b72e1c-5a67-4e0d-b84e-8d601b6c7a2b
description: >
  This playbook helps determine if an adversary is exfiltrating data using a protocol other than the primary C2 channel (T1048). It focuses on identifying indicators such as outbound connections to known malicious infrastructure, anomalous data upload volumes, the use of command-line transfer utilities followed by network connections, unusual DNS or ICMP traffic patterns indicative of tunneling, significant deviations from baseline outbound data volumes, and application protocol mismatches on well-known ports.
type: technique
related:
  - TA0010: Exfiltration
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are internal assets communicating with external destinations known to be malicious based on threat intelligence?
    context: >
      This question aims to identify direct communication with known command and control (C2), malware, or exfiltration infrastructure. By cross-referencing outbound network connection logs (both IP-based and DNS queries) with up-to-date threat intelligence feeds, we can detect high-confidence indicators of compromise. A match strongly suggests that a host is compromised and is either being controlled by or is sending data to an adversary.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Internet Gateway, Egress Firewall, Corporate DNS Resolvers, Cloud Egress Points (e.g., NAT Gateways), Proxy Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each event in (Zeek conn.log, Zeek dns.log):
            LET destination = event.destination_ip OR event.dns_query
            IF destination IN threat_intelligence_feed:
              ALERT(high, "Connection to known malicious destination", event)
  - question: Are internal hosts exhibiting anomalously high data upload volumes to newly observed domains or IP addresses?
    context: >
      This question helps detect potential data exfiltration to new or temporary adversary infrastructure that may not yet be in threat intelligence feeds. A high ratio of sent-to-received bytes ($$ orig_bytes >> resp_bytes $$) is a classic indicator of data being uploaded. By focusing on connections to destinations not seen recently and combining this with a large volume of uploaded data, we can identify suspicious data staging or exfiltration activities that deviate from normal traffic patterns.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Internet Gateway, Egress Firewall, Corporate DNS Resolvers, Cloud Egress Points (e.g., NAT Gateways), Proxy Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new connection in Zeek conn.log:
            IF destination NOT SEEN in last 30 days:
              LET ratio = connection.orig_bytes / connection.resp_bytes
              LET subnet_percentile = 99th_percentile_ratio(connection.source_subnet)
              IF connection.orig_bytes > 1MB AND ratio > subnet_percentile:
                ALERT(medium, "Anomalous upload ratio to new destination", connection)
  - question: Can machine learning models predict the probability of malicious exfiltration for network connections to uncategorized destinations?
    context: >
      This question explores a proactive detection method using supervised machine learning. By training a model on the characteristics of known good and known bad network traffic (e.g., connection duration, byte counts, protocol, JA3 hash, domain age), we can identify subtle patterns that are difficult to capture with simple rules. The model can score new connections to unknown destinations, allowing analysts to prioritize investigation on those with the highest probability of being malicious.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Internet Gateway, Egress Firewall, Corporate DNS Resolvers, Cloud Egress Points (e.g., NAT Gateways), Proxy Servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new connection to uncategorized_destination:
            LET features = EXTRACT_FEATURES(connection, domain_info)
            LET probability = ML_MODEL.predict_proba(features)
            IF probability > high_threshold:
              ALERT(medium, "High probability of malicious exfiltration predicted", connection)
  - question: Are known data transfer utilities being executed and immediately followed by an outbound network connection to a non-corporate destination?
    context: >
      Adversaries often use legitimate system utilities ('living off the land') like certutil, bitsadmin, or PowerShell to exfiltrate data. This question focuses on correlating the execution of these tools (via Windows Event ID 4688) with subsequent network traffic from the same host. A tight temporal link (e.g., within 60 seconds) between the tool's execution and an outbound connection to an external, non-corporate IP is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations, Application Servers, Domain Controllers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE suspicious_processes = ["certutil.exe -urlcache", "bitsadmin.exe /transfer", "powershell.exe Invoke-WebRequest"]
          FOR each process_creation_event (EID 4688):
            IF process_name AND command_line MATCHES suspicious_processes:
              SEARCH Zeek conn.log for outbound connection from event.host within 60 seconds to non-corporate_IP:
                IF found:
                  ALERT(high, "Suspicious utility execution followed by outbound connection", event)
  - question: Are command-line arguments for data transfer utilities showing unusually high entropy, suggesting obfuscation?
    context: >
      To evade simple signature-based detections, adversaries may encode or obfuscate data within the command-line arguments of utilities like curl.exe or powershell.exe. This question proposes baselining the normal complexity (Shannon entropy) of command lines for these processes across the enterprise. An execution with a command-line entropy that is a significant statistical outlier (e.g., >3 standard deviations from the mean) suggests the presence of encoded data or randomized arguments, warranting investigation.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations, Application Servers, Domain Controllers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process_name in ["curl.exe", "certutil.exe", "powershell.exe"]:
            CALCULATE historical_mean_entropy and std_dev_entropy of command_line
          FOR each new process_creation_event (EID 4688):
            LET current_entropy = CALCULATE_ENTROPY(event.command_line)
            IF current_entropy > (historical_mean_entropy + 3 * std_dev_entropy):
              ALERT(medium, "Anomalous command-line entropy detected", event)
  - question: Are there anomalous sequences of process executions that lead to network activity indicative of exfiltration?
    context: >
      Normal user activity follows predictable patterns (e.g., user opens Outlook, which makes MAPI connections). Adversaries often deviate from these patterns, for example, by having a Microsoft Office application spawn a command shell (cmd.exe), which in turn launches PowerShell to upload data. This question aims to use sequence mining to learn common, legitimate process chains and their network behaviors, thereby flagging rare and suspicious sequences as potential threats.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - User Workstations, Application Servers, Domain Controllers, Virtual Desktop Infrastructure (VDI)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL legitimate_process_sequences from historical data
          FOR each new process_chain (parent -> child -> grandchild):
            IF sequence IS NOT IN legitimate_sequences_model:
              CORRELATE with network behavior (e.g., large HTTP POST)
              IF correlated:
                ALERT(medium, "Anomalous process sequence with suspicious network activity", process_chain)
  - question: Is a host generating an unusually high volume of DNS TXT queries or ICMP packets with large payloads?
    context: >
      This question targets DNS and ICMP tunneling, two common methods for exfiltration over alternative protocols. Adversaries encode data into DNS TXT queries or the payloads of ICMP packets. This activity can be detected by looking for a high rate of TXT queries from one host to a single domain or by identifying ICMP packets with payloads significantly larger than the standard size used for network diagnostics (e.g., >128 bytes), as these are not typical behaviors.
    answer_sources:
      - Zeek dns.log
      - Zeek icmp.log
      - Internal DNS Servers, Internet Gateway, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          COUNT DNS TXT queries by source_ip and domain over 5 minutes.
          IF count > 50:
            ALERT(medium, "High volume of DNS TXT queries detected", event)
          FOR each ICMP packet in Zeek icmp.log:
            IF payload_size > 128 bytes:
              ALERT(medium, "ICMP packet with anomalously large payload detected", event)
  - question: Is a host's DNS query behavior anomalous in terms of query type distribution or subdomain entropy?
    context: >
      Beyond just volume, the nature of DNS queries can reveal tunneling. This question looks for two indicators. First, it establishes a baseline of normal DNS query type distribution (A, AAAA, TXT, etc.) for each host and flags days where TXT or NULL queries are statistical outliers. Second, it measures the character randomness (entropy) of requested subdomains. High entropy suggests machine-generated names (e.g., 'data-chunk-1a2b3c.exfil.com'), a hallmark of DNS tunneling tools.
    answer_sources:
      - Zeek dns.log
      - Zeek icmp.log
      - Internal DNS Servers, Internet Gateway, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          BASELINE daily DNS query type percentage per host.
          IF today_txt_percentage > 99th_percentile:
            ALERT(low, "Anomalous ratio of DNS TXT queries", event)
          FOR each DNS query:
            CALCULATE entropy of subdomain.
            IF entropy > 3.5:
              ALERT(medium, "High entropy DNS query detected", event)
  - question: Can clustering algorithms identify groups of suspicious DNS activity that represent tunneling?
    context: >
      This question proposes using an unsupervised machine learning approach to find DNS tunneling without pre-existing rules. By grouping (clustering) DNS requests based on features like query length, subdomain count, character entropy, and the ratio of query types, we can isolate outliers. A clustering algorithm like DBSCAN can automatically identify small, dense clusters of anomalous activity that do not conform to the larger patterns of legitimate DNS traffic, pointing analysts toward likely tunneling.
    answer_sources:
      - Zeek dns.log
      - Zeek icmp.log
      - Internal DNS Servers, Internet Gateway, Network Egress Points, Domain Controllers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each source-destination-domain tuple:
            EXTRACT features (query_length, subdomain_count, entropy, txt_ratio)
          RUN DBSCAN clustering algorithm on feature set.
          FOR each outlier_cluster identified:
            ALERT(medium, "Anomalous DNS cluster detected, potential tunneling", cluster_members)
  - question: Has a client workstation initiated a single, large data upload to an external, non-corporate service?
    context: >
      This question provides a simple, high-confidence rule for detecting bulk data exfiltration. It focuses on a single connection where a large amount of data is sent ($$ orig\_bytes > 100MB $$) and very little is received ($$ resp\_bytes < 1MB $$). By filtering out connections to known corporate cloud services (like backups or sanctioned file sharing), an alert from this rule strongly indicates that a user's machine is uploading a large volume of data to an unauthorized location.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek smb_files.log
      - Internet Gateway, Core Network Switches, Servers Hosting Sensitive Data (e.g., file shares, databases)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each connection in Zeek conn.log from client_workstation:
            IF connection.orig_bytes > 100MB AND connection.resp_bytes < 1MB:
              IF destination_ip NOT IN known_corporate_cloud_services:
                ALERT(high, "Large anomalous upload from workstation", connection)
  - question: Has the total daily outbound data volume for any host, segmented by protocol, significantly exceeded its historical baseline?
    context: >
      Rather than looking at a single connection, this question analyzes the aggregate outbound traffic from a host over a 24-hour period. It establishes a dynamic baseline (e.g., 30-day rolling average and standard deviation) for the total bytes sent per service (HTTP, DNS, SMB, etc.). An alert is triggered if the daily total for any service exceeds the baseline by a significant margin (e.g., >3 standard deviations), which can detect slower, more prolonged exfiltration attempts that might be missed by single-session analytics.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek smb_files.log
      - Internet Gateway, Core Network Switches, Servers Hosting Sensitive Data (e.g., file shares, databases)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each host and service:
            CALCULATE 30-day rolling average and std_dev of daily_outbound_bytes.
          FOR each host and service at end of day:
            IF daily_total > (average + 3 * std_dev):
              ALERT(medium, "Daily outbound data volume exceeds baseline", event)
  - question: Is the hourly outbound data volume from a high-value asset significantly higher than forecasted by a time-series model?
    context: >
      This question applies advanced time-series analysis for critical systems where early detection is paramount. By training a model (like ARIMA) on the historical pattern of outbound data per hour, we can forecast the expected volume for the next hour. If the actual observed data volume significantly exceeds the model's prediction (i.e., it's outside the upper confidence interval), it provides a high-fidelity alert that a potential bulk data transfer is happening in near-real-time.
    answer_sources:
      - Zeek conn.log
      - Zeek files.log
      - Zeek smb_files.log
      - Internet Gateway, Core Network Switches, Servers Hosting Sensitive Data (e.g., file shares, databases)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each high_value_asset:
            TRAIN ARIMA model on hourly outbound bytes.
          FOR each hour:
            LET forecast, upper_bound = model.predict()
            LET actual_volume = GET_actual_volume()
            IF actual_volume > upper_bound:
              ALERT(high, "Outbound data from critical asset exceeds forecast", event)
  - question: Is there network traffic on a standard port that is not the expected protocol?
    context: >
      Adversaries may tunnel non-standard protocols over common ports like 53 (DNS) or 443 (HTTPS) to bypass firewall rules. This question uses Zeek's Dynamic Protocol Detection (DPD) to identify these mismatches. It generates alerts when Zeek's `dpd.log` flags a violation or when traffic is seen on TCP/443 in `conn.log` but has no corresponding entry in `ssl.log`, which strongly implies the traffic is not TLS/SSL as expected.
    answer_sources:
      - Zeek conn.log
      - Zeek dpd.log
      - Zeek ssl.log
      - Network Taps/Sensors in the DMZ, Internet Gateway, Perimeter Firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each event in Zeek dpd.log:
            IF event.proto != event.analyzer:
              ALERT(high, "Protocol violation detected on standard port", event)
          FOR each conn on TCP/443 in conn.log:
            IF conn.uid NOT IN ssl.log:
              ALERT(high, "Non-TLS traffic detected on TCP/443", conn)
  - question: Are there rare or previously unseen application protocols being used on standard ports?
    context: >
      This question provides an alternative method for detecting protocol-port mismatches by baselining normal behavior. It builds a frequency table of all application-layer services (from Zeek's `service` field) seen on standard ports (21, 53, 443, etc.) over a 30-day period. If a new connection uses a service on a port where it has historically been extremely rare (e.g., <0.01% of traffic), it flags a deviation from the established norm, which could indicate a tunneling attempt.
    answer_sources:
      - Zeek conn.log
      - Zeek dpd.log
      - Zeek ssl.log
      - Network Taps/Sensors in the DMZ, Internet Gateway, Perimeter Firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each standard_port:
            CREATE frequency table of services from Zeek conn.log over 30 days.
          FOR each new connection:
            LET service_frequency = LOOKUP_FREQUENCY(connection.port, connection.service)
            IF service_frequency < 0.01%:
              ALERT(low, "Rare service detected on standard port", connection)
  - question: Can a machine learning model distinguish legitimate traffic from anomalous traffic on a specific port like TCP/443?
    context: >
      This question proposes using a one-class SVM, an anomaly detection algorithm, to identify malicious traffic hiding on encrypted channels. The model is trained exclusively on features from known, legitimate TLS traffic (e.g., connection duration, packet counts, TLS version, cipher suite). When the model encounters a new connection on TCP/443, it classifies it as either 'normal' (an inlier) or 'anomalous' (an outlier). This can effectively detect non-TLS C2 channels or exfiltration using raw TCP sockets over port 443.
    answer_sources:
      - Zeek conn.log
      - Zeek dpd.log
      - Zeek ssl.log
      - Network Taps/Sensors in the DMZ, Internet Gateway, Perimeter Firewalls
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN One-Class SVM model on features from legitimate TCP/443 traffic.
          FOR each new connection on TCP/443:
            EXTRACT features from conn.log and ssl.log.
            LET classification = model.predict(features)
            IF classification == 'anomalous':
              ALERT(medium, "Anomalous connection on TCP/443 detected by ML model", connection)