name: T1205.001: Port Knocking
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps identify adversarial use of Port Knocking (T1205.001) for persistence, defense evasion, and command and control. It focuses on detecting sequences of failed connection attempts that precede the opening of a firewall port or the establishment of a connection, process execution patterns related to port knocking daemons, and network traffic patterns indicative of C2 communication established via port knocking.
type: technique
related:
- TA0003: Persistence
- TA0005: Defense Evasion
- TA0011: Command And Control
contributors: [Zachary Szewczyk]
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Are there any source IPs from high-confidence threat intelligence feeds making 3-10 failed connection attempts to distinct, closed ports on a single host within 30 seconds?
  context: This question aims to detect the most basic form of port knocking. An adversary attempts to connect to a specific sequence of closed ports. If the source IP is a known malicious actor, this sequence is highly indicative of an attempt to trigger a pre-configured rule on the target's firewall to open a port for subsequent access.
  answer_sources: [Zeek conn.log, Threat Intelligence Feed, Internet Gateway Firewall, DMZ Network Segments, Cloud VPC Flow Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      SEARCH Zeek conn.log WHERE conn_state IN ('REJ', 'RSTO', 'S0')
      GROUP BY source_ip, destination_ip OVER 30s_window
      WHERE DISTINCT_COUNT(destination_port) BETWEEN 3 AND 10
      JOIN source_ip WITH threat_intelligence_feed
      RETURN source_ip, destination_ip, count
- question: Are there any external IPs exhibiting a high frequency of failed connection sequences combined with high entropy in the destination port sequence, suggesting targeted port knocking rather than random scanning?
  context: This question seeks to identify sophisticated or unknown adversaries not present on threat intelligence feeds. It uses statistical analysis to find outliers. A high 'knock score' indicates frequent knocking behavior, while high Shannon entropy in the port sequence suggests a deliberate, non-sequential pattern, differentiating it from simple port scanning. This combination points to a likely port knocking attempt.
  answer_sources: [Zeek conn.log, Threat Intelligence Feed, Internet Gateway Firewall, DMZ Network Segments, Cloud VPC Flow Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE knock_sequence = (source_ip with 3-10 failed connections to distinct ports in < 30s)
      CALCULATE knock_score = FREQUENCY(knock_sequence) per source_ip
      CALCULATE port_entropy = SHANNON_ENTROPY(destination_ports) for each knock_sequence
      RETURN source_ip WHERE knock_score > 99th_percentile AND port_entropy > 2.0
- question: Can a machine learning model classify any sequences of connection events from external IPs as malicious port knocking with high confidence?
  context: This question leverages machine learning to detect complex or obfuscated port knocking patterns that rule-based or simple statistical methods might miss. An RNN or LSTM model is well-suited for analyzing sequential data like connection logs. By training it on known malicious and benign traffic, it can learn the temporal characteristics of a knock and classify new, unseen sequences in near-real-time.
  answer_sources: [Zeek conn.log, Threat Intelligence Feed, Internet Gateway Firewall, DMZ Network Segments, Cloud VPC Flow Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each external source_ip:
        CREATE sequence_vector from (timestamp_delta, destination_port, tcp_flag)
        INPUT sequence_vector into trained_RNN_model
        IF model.predict(sequence_vector) == 'malicious_port_knock' AND model.confidence > 0.9:
          ALERT source_ip
- question: Has a known port knocking daemon process been executed on any monitored endpoints?
  context: This question aims to detect the installation or execution of software specifically designed to listen for and act upon port knocks. By monitoring process creation events for known executable names, file hashes, or configuration file names associated with tools like 'knockd' or 'fwknopd', we can identify a host that has been configured to allow persistence via port knocking.
  answer_sources: [Windows Event ID 4688, Sysmon Event ID 1, Critical Server Subnets, Domain Controllers, User Workstation VLANs, Endpoint Detection and Response (EDR) platform logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE watchlist = ['knockd.exe', 'fwknopd.exe', 'knockd.conf', <hashes...>]
      SEARCH (ProcessCreationEvents)
      WHERE process_name IN watchlist OR command_line CONTAINS watchlist OR file_hash IN watchlist
      RETURN hostname, process_name, command_line
- question: Have any processes been created with unusually rare command-line arguments containing keywords related to port knocking or firewall manipulation?
  context: Adversaries may rename common port knocking tools to avoid simple watchlist detection. This question uses anomaly detection to find suspicious commands. By baselining all command lines across the environment, we can identify statistically rare commands. If a rare command also includes keywords like 'knock', 'port', or 'firewall-cmd', it warrants investigation as a potential custom or obfuscated port knocking tool.
  answer_sources: [Windows Event ID 4688, Sysmon Event ID 1, Critical Server Subnets, Domain Controllers, User Workstation VLANs, Endpoint Detection and Response (EDR) platform logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE keywords = ['knock', 'fwknop', 'port', 'firewall-cmd']
      FOR each new ProcessCreationEvent:
        CALCULATE rarity_score for event.command_line based on 30-day baseline
        IF rarity_score > 99.9th_percentile AND event.command_line CONTAINS any(keywords):
          ALERT hostname, process_name, command_line
- question: Has a machine learning model identified any anomalous process command lines that also contain features associated with network configuration, suggesting a port knocking daemon?
  context: This question applies an unsupervised machine learning model (One-Class SVM) to detect novel or unknown port knocking tools. The model is trained only on legitimate command lines and learns to identify anything that deviates from that norm. When an anomalous command is detected, it is further scrutinized for network-related features (IPs, ports, protocols) to increase confidence that it is a malicious tool rather than a benign, rare command.
  answer_sources: [Windows Event ID 4688, Sysmon Event ID 1, Critical Server Subnets, Domain Controllers, User Workstation VLANs, Endpoint Detection and Response (EDR) platform logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE network_features = [IP_address, port_number, protocol_name]
      FOR each new ProcessCreationEvent:
        SCORE event.command_line using one_class_SVM_model
        IF score is 'anomaly' AND event.command_line CONTAINS any(network_features):
          ALERT hostname, command_line
- question: Has a firewall rule change or a new network listener process occurred on a host within 5 seconds of a suspected inbound port knocking sequence targeting that same host?
  context: This question seeks to directly correlate a suspected port knock with its intended effect: opening a port. By creating a tight time-based correlation rule, we can link the network-level knocking event with the host-level response (a firewall change or a new process listening on a port). A match provides high-confidence evidence that the port knock was successful.
  answer_sources: [Zeek conn.log, Windows Event ID 5154, Windows Event ID 4946, Windows Event ID 4950, Sysmon Event ID 3, Firewall Management Interfaces, Critical Application Servers, Endpoint Devices]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      WHEN 'suspected_port_knock' event is detected for destination_host:
        SEARCH for (FirewallChangeEvent OR NewNetworkListenerEvent) on destination_host
        WHERE event_time is within 5 seconds of knock_event_time
        IF match, ALERT with high confidence
- question: Following a suspected port knocking sequence, did a firewall change or new network listener event occur at a statistically anomalous time on the target host?
  context: This question adds a layer of statistical validation to the correlation between a knock and a host-level change. Instead of just looking for a change, it checks if the change happened at an unusual time (e.g., outside of business hours, at a time with historically low change rates for that host). This helps filter out false positives from legitimate, but coincidentally timed, administrative actions.
  answer_sources: [Zeek conn.log, Windows Event ID 5154, Windows Event ID 4946, Windows Event ID 4950, Sysmon Event ID 3, Firewall Management Interfaces, Critical Application Servers, Endpoint Devices]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE hourly counts of (FirewallChange, NewNetworkListener) events per host
      WHEN 'suspected_port_knock' event is detected for destination_host:
        CHECK for (FirewallChangeEvent OR NewNetworkListenerEvent) on host within short window
        IF event occurs AND event_hour_count > (mean + 3 * stdev) for that host:
          ELEVATE alert priority
- question: Can a graph-based model find a path from a knocking source IP to a firewall change or new listener on the target host within a short time window?
  context: This question models the attack as a sequence of connected events in a graph. Nodes represent entities like IPs and hosts, while edges represent events like 'knock_attempt'. This approach allows for discovering complex relationships. Finding a path from a knocking IP to a firewall change on the target host within a small time frame programmatically confirms the attack chain and validates the alert.
  answer_sources: [Zeek conn.log, Windows Event ID 5154, Windows Event ID 4946, Windows Event ID 4950, Sysmon Event ID 3, Firewall Management Interfaces, Critical Application Servers, Endpoint Devices]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MODEL events as a graph: nodes=(hosts, ips), edges=(events with timestamps)
      WHEN 'knock_attempt' edge is added from source_ip to destination_host:
        SEARCH for path from source_ip to destination_host
        WHERE path includes a subsequent ('firewall_change' OR 'listen_start') edge
        AND time_delta is small
        IF path exists, ALERT
- question: Are there port knocking sequences originating from IP addresses associated with anonymization services like TOR, public proxies, or VPNs?
  context: This question aims to identify adversaries attempting to hide their origin while performing port knocking. By cross-referencing the source IP of a knocking sequence with a threat intelligence feed of known anonymizer services, we can increase the suspicion level of the activity. It indicates a deliberate attempt at defense evasion.
  answer_sources: [Zeek conn.log, Threat Intelligence Feed, Internet Gateway, Egress Network Filters, Proxy Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IDENTIFY port_knocking_sequences
      INGEST CTI feed of anonymizer_ips
      JOIN knocking_sequence.source_ip with anonymizer_ips
      ALERT on match
- question: Do any port knocking sequences originate from a rare geolocation or ASN, based on a baseline of normal inbound traffic?
  context: This is another method for detecting suspicious origins without relying solely on CTI feeds. By profiling the normal geographic and network (ASN) origins of inbound traffic, we can flag port knocking attempts that come from statistically rare sources. A knock from an unusual country or service provider for your organization is a strong indicator of targeted, non-standard activity.
  answer_sources: [Zeek conn.log, Threat Intelligence Feed, Internet Gateway, Egress Network Filters, Proxy Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      BASELINE ASN/Country pair frequency for all inbound traffic over 30 days
      IDENTIFY port_knocking_sequences
      FOR each sequence, get source_ip ASN/Country
      CALCULATE rarity score for the pair
      IF score > 99th_percentile, ALERT as high-risk
- question: Has a successful connection been made to a historically unused port on a host, immediately following a series of failed connection attempts from the same source?
  context: This question focuses on identifying the successful outcome of a port knock. It looks for a specific two-part pattern: a series of failed connections (the knock) followed by a successful connection to a port that is not normally open (the door). This stateful analysis, which compares current activity to a 30-day baseline of open ports, provides strong evidence of a successful port knock.
  answer_sources: [Zeek conn.log, DMZ Servers, Externally-facing Application Gateways, Network Taps]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      MAINTAIN baseline of (host, port) pairs with successful connections in last 30 days
      FOR each new successful connection to (host, port):
        IF (host, port) is NOT in baseline:
          CHECK for 3+ failed connections from same source_ip to same host in last 30s
          IF true, ALERT
- question: Has an internal host performed a 'reverse knock' to an external IP, followed by a successful inbound connection from that same external IP?
  context: This question seeks to detect C2 behavior where an infected internal host "knocks" on an external C2 server to signal it is ready. The C2 server then connects back in. This "reverse knock" pattern is highly indicative of a C2 callback mechanism designed to bypass perimeter firewalls that block unsolicited inbound connections.
  answer_sources: [Zeek conn.log, Zeek dns.log, Egress points of the network, DNS Resolvers, Core Network Switches]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DETECT internal_host making >3 failed outbound connections to distinct ports on external_ip in < 10s
      THEN, LOOK for successful inbound connection from external_ip to internal_host within 30s
      IF match, CROSS-REFERENCE external_ip with C2 threat feed and ALERT
- question: Is there a periodic pattern of an inbound port knock followed by a short-lived outbound beacon from the target host back to the knocking IP?
  context: This question aims to uncover C2 communications that are activated by a port knock. It looks for a repeating sequence of events: an external knock, followed by an internal beacon back to the knocker. If this pattern repeats at a regular interval (e.g., every hour with low jitter), it is strong evidence of automated C2 beaconing triggered by a port knock.
  answer_sources: [Zeek conn.log, Network Egress Points, Internal Network Segments, Firewall Logs]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      DEFINE knock_beacon_event = (inbound_knock followed by outbound_connection to source_ip within 60s)
      STORE knock_beacon_events by (source_ip, dest_ip) pair
      CALCULATE time delta between sequential events for each pair
      IF time delta is highly consistent (low jitter) for 3+ events, ALERT
- question: Following a successful port knock, has a long-lived, low-data-volume connection been established, consistent with an interactive C2 session?
  context: This question looks for evidence of an active, hands-on-keyboard C2 session established after a port knock. Unlike automated beacons, an interactive session is characterized by a long duration, intermittent data transfer in both directions, but a low overall byte count. Identifying a connection with these features immediately after a knock suggests an attacker has gained an interactive shell.
  answer_sources: [Zeek conn.log, Critical Server Subnets, Developer Workstations, Network Security Monitoring Sensors]
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      IDENTIFY successful port_knock_event resulting in a connection
      FOR that connection, CHECK if:
        1. duration > 5 minutes
        2. bidirectional data transfer exists
        3. total_bytes < 10KB
      IF all conditions met, ALERT for potential interactive C2