name: T1546.010: AppInit DLLs
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook is designed to help analysts investigate whether an adversary is maintaining persistence or elevating privileges by loading a malicious DLL via the AppInit_DLLs registry key. The investigation focuses on detecting modifications to the HKLM\Software\Microsoft\Windows NT\CurrentVersion\Windows\AppInit_DLLs registry value, which can cause a DLL to be loaded into most user-mode processes. Key investigative paths include checking if the referenced DLL has a known malicious hash, is unsigned or signed by a rare entity, is located in a non-standard directory (e.g., C:\Users, C:\Windows\Temp), or is a known privilege escalation tool. The playbook also guides the analysis of follow-on activity, such as a GUI process spawning a command shell or making new network connections, and looks for evidence of security control tampering, like disabling the 'RequireSignedAppInit_DLLs' setting. Finally, it addresses privilege escalation by looking for integrity level jumps in processes following the registry modification.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has the AppInit_DLLs registry value been modified to include a DLL with a known malicious hash?
    context: |
      This question investigates a high-confidence indicator of compromise. Adversaries may use AppInit DLLs for persistence. By modifying the `AppInit_DLLs` registry key to point to their malicious DLL, their code will be loaded into every process that loads `user32.dll`. This question checks if a DLL added to this key matches a known malicious signature from threat intelligence feeds, which strongly suggests a compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Registry hives on all Windows workstations and servers; Threat Intelligence Platform data
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH for registry modifications (WinEvent 4657, Sysmon 13) to 'AppInit_DLLs'.
          EXTRACT DLL path.
          HASH DLL file (Sysmon 11).
          QUERY threat intelligence feed with hash.
          ALERT on match.
  - question: Has a DLL with a rare or untrusted digital signature been added to the AppInit_DLLs registry value?
    context: |
      This question aims to detect potentially malicious DLLs that are not yet on threat intelligence feeds. Legitimate software is typically signed by well-known, reputable publishers. An adversary might use an unsigned DLL or one signed by a newly created or rarely seen certificate. By baselining common signers and alerting on outliers (e.g., bottom 5th percentile of prevalence), analysts can identify suspicious DLLs that warrant further investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Registry hives on all Windows workstations and servers; Threat Intelligence Platform data
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH for registry modifications to 'AppInit_DLLs'.
          EXTRACT DLL signer information.
          COMPARE signer against historical baseline of signers in the environment.
          ALERT on unsigned DLLs or signers with low prevalence.
  - question: Does a machine learning model classify a newly added AppInit DLL as malicious based on its features?
    context: |
      This question leverages a machine learning model to provide a probabilistic assessment of a DLL's maliciousness. The model considers multiple features simultaneously, such as file path characteristics (entropy, rarity), digital signature reputation, and threat intelligence lookups. By flagging DLLs with a high probability score (e.g., >0.8), this approach can automate the initial triage process and surface sophisticated threats that might evade simpler rule-based detections.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - Registry hives on all Windows workstations and servers; Threat Intelligence Platform data
    range: last 90 days
    queries:
      - pseudocode: |
          ON registry modification to 'AppInit_DLLs', EXTRACT features (path entropy, directory rarity, signature status, CTI match).
          INPUT features into trained random forest model.
          ALERT if predicted 'malicious' probability > 0.8.
  - question: Has the AppInit_DLLs registry value been modified to point to a DLL in a non-standard or suspicious directory?
    context: |
      This question checks for a common adversary tactic of placing malicious files in locations that are less scrutinized or user-writable. Legitimate applications typically install DLLs in protected directories like `C:\Program Files`. An adversary might place their DLL in a user's profile, a temporary folder, or a public directory to achieve persistence. Detecting modifications that point to paths like `C:\Users\`, `C:\Windows\Temp\`, or `C:\ProgramData\` is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows endpoints, specifically user profile directories, temporary file system locations, and public-writable folders
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH for registry modifications (WinEvent 4657, Sysmon 13) to 'AppInit_DLLs'.
          ANALYZE the new file path string.
          ALERT if path contains 'C:\Users\', 'C:\Windows\Temp\', '\AppData\', 'C:\ProgramData\', or is a UNC path.
  - question: Is the directory path depth of a new AppInit DLL a statistical outlier compared to legitimate DLLs?
    context: |
      This question uses statistical analysis to identify anomalous file paths. Legitimate DLLs are often located at a predictable directory depth (e.g., `C:\Program Files\Vendor\App\file.dll`). Adversaries may drop files in unusually shallow or deep locations. By establishing a baseline for normal path depths and alerting on significant deviations, analysts can uncover malware placed in unconventional locations to evade detection.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows endpoints, specifically user profile directories, temporary file system locations, and public-writable folders
    range: last 90 days
    queries:
      - pseudocode: |
          ON registry modification to 'AppInit_DLLs', CALCULATE path depth of new DLL.
          COMPARE depth to a baseline distribution of legitimate AppInit DLL paths.
          ALERT if depth is a statistical outlier (e.g., > 2 standard deviations from mean).
  - question: Does a clustering model identify the file path of a new AppInit DLL as anomalous?
    context: |
      This question applies unsupervised machine learning to group similar, legitimate file paths together and isolate outliers. By creating feature vectors from path characteristics (depth, entropy, keywords), a clustering algorithm like DBSCAN can identify paths that do not conform to any established pattern. These 'noise' points or members of very small clusters represent unusual file locations that warrant investigation as potentially malicious.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - All Windows endpoints, specifically user profile directories, temporary file system locations, and public-writable folders
    range: last 90 days
    queries:
      - pseudocode: |
          ON registry modification to 'AppInit_DLLs', CREATE feature vector from path (depth, entropy, keyword flags).
          APPLY DBSCAN clustering algorithm.
          ALERT on paths classified as noise or belonging to small clusters.
  - question: Following an AppInit_DLLs modification, did a common GUI process spawn a command shell or make a suspicious network connection?
    context: |
      This question looks for post-exploitation behavior immediately following the establishment of persistence. After a malicious AppInit DLL is loaded into a legitimate process like `explorer.exe`, it may be used to launch command shells (`cmd.exe`, `powershell.exe`) for further execution or initiate command-and-control (C2) communications. Correlating the registry modification with these subsequent suspicious actions within a short time window provides strong evidence of a compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows endpoints, Network Gateway, DNS servers
    range: last 90 days
    queries:
      - pseudocode: |
          CORRELATE 'AppInit_DLLs' registry modification (Sysmon 13) with subsequent (within 5 mins) process creation (Sysmon 1) from a GUI process (explorer.exe) to a shell (cmd.exe, powershell.exe) OR a network connection (Sysmon 3) to a low-reputation IP on the same host.
          ALERT on match.
  - question: Did a host's DNS query patterns change significantly after an AppInit_DLLs modification?
    context: |
      This question seeks to detect C2 activity by analyzing changes in DNS behavior. A compromised host will often start resolving new, malicious domains. By comparing the set of domains queried in the 24 hours after an AppInit_DLLs modification to the set from the previous 30 days, a low Jaccard similarity score indicates a drastic shift in DNS activity. This change suggests the host is communicating with new infrastructure, likely controlled by an adversary.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows endpoints, Network Gateway, DNS servers
    range: last 90 days
    queries:
      - pseudocode: |
          ON 'AppInit_DLLs' modification, CAPTURE set of DNS queries from host for 24 hours post-event.
          COMPARE with set of DNS queries from 30 days pre-event using Jaccard similarity.
          ALERT if similarity score is below a threshold (e.g., 0.1).
  - question: Does a time-series anomaly detection model flag a host's behavior as abnormal following an AppInit_DLLs modification?
    context: |
      This question uses a machine learning model to detect subtle deviations from a host's normal behavior. An LSTM autoencoder can learn the baseline patterns of a host's process creation rates, network traffic, and other telemetry. After a potentially malicious DLL is loaded via AppInit, it may cause behavioral changes that are too subtle for simple rules. A high reconstruction error from the model indicates the new behavior does not match the learned baseline, signaling a potential compromise.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - All Windows endpoints, Network Gateway, DNS servers
    range: last 90 days
    queries:
      - pseudocode: |
          ON 'AppInit_DLLs' modification, FEED subsequent host telemetry (process rate, network rate, DNS rate) into a trained LSTM autoencoder model.
          ALERT if the model's reconstruction error is high, indicating anomalous behavior.
  - question: Was the 'RequireSignedAppInit_DLLs' registry setting disabled?
    context: |
      This question identifies a direct attempt to weaken a critical security control. On modern Windows systems, the `RequireSignedAppInit_DLLs` setting can be enabled to prevent unsigned DLLs from being loaded via this mechanism. An adversary may disable this setting (set the value to 0) to allow their unsigned malicious DLL to be loaded. This action is inherently suspicious and is a high-confidence indicator of malicious intent.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows endpoints and servers, particularly those running Windows 8 or newer with Secure Boot enabled
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH for registry modifications (Sysmon 13) to 'RequireSignedAppInit_DLLs' where the new value is 0.
          GENERATE a critical alert.
  - question: Has the 'RequireSignedAppInit_DLLs' registry value been modified on a host where it is expected to be static?
    context: |
      This question treats any change to a critical security setting as a statistical anomaly. The `RequireSignedAppInit_DLLs` value is typically set by group policy and should not change during normal operations. Therefore, any modification event is an outlier. Tracking the count of modifications and alerting if the count is greater than zero (and not tied to an authorized change) provides a simple yet effective way to detect tampering.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows endpoints and servers, particularly those running Windows 8 or newer with Secure Boot enabled
    range: last 90 days
    queries:
      - pseudocode: |
          COUNT modifications to 'RequireSignedAppInit_DLLs' per host over 90 days.
          ALERT if count > 0 and not correlated with a change request.
  - question: Has a sequence mining algorithm detected the pattern of 'RequireSignedAppInit_DLLs' being disabled, followed shortly by a modification to 'AppInit_DLLs'?
    context: |
      This question looks for a specific, high-confidence attack chain. Adversaries often perform a sequence of actions: first, they weaken a defense, then they exploit it. A sequence mining model can be trained to recognize this pattern: disabling the signed DLL requirement, then immediately registering a new (likely unsigned) DLL. Detecting this specific two-step sequence is a powerful indicator of a deliberate attack.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Registry hives on all Windows endpoints and servers, particularly those running Windows 8 or newer with Secure Boot enabled
    range: last 90 days
    queries:
      - pseudocode: |
          USE a sequence mining model to detect the pattern: (Event: 'RequireSignedAppInit_DLLs' set to 0) followed by (Event: 'AppInit_DLLs' modified) on the same host within a 1-hour window.
          ALERT on pattern match.
  - question: Is a new DLL added to AppInit_DLLs identified as a known privilege escalation tool?
    context: |
      This question checks if the persistence mechanism is being used to load a known offensive security tool. After adding a DLL to AppInit_DLLs, the DLL's hash or filename can be cross-referenced with threat intelligence feeds that are specifically tagged for privilege escalation tools like Mimikatz. A match provides a clear, high-confidence alert that an adversary is attempting to elevate their privileges on the system.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks for privilege escalation malware
    range: last 90 days
    queries:
      - pseudocode: |
          ON 'AppInit_DLLs' modification (Sysmon 13), HASH the new DLL (Sysmon 11).
          QUERY threat intelligence feed for the hash/filename against a 'privilege-escalation' toolset.
          GENERATE critical alert on match.
  - question: Has a DLL been added to AppInit_DLLs on a host that has never been seen in any AppInit_DLLs key across the entire enterprise before?
    context: |
      This question uses the statistical rarity of a DLL's appearance in AppInit keys as an indicator of anomaly. In a managed environment, the set of legitimate AppInit DLLs is often small and consistent. A DLL appearing in this registry key for the very first time across the entire organization is highly unusual and suggests it was not deployed through standard processes. This 'first-seen' event is a strong signal for investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks for privilege escalation malware
    range: last 90 days
    queries:
      - pseudocode: |
          ON 'AppInit_DLLs' modification, check if the DLL hash has ever been seen in an 'AppInit_DLLs' key across the enterprise.
          ALERT if it is the first occurrence.
  - question: Does a machine learning model classify a new AppInit DLL as a probable privilege escalation tool based on its portable executable (PE) characteristics?
    context: |
      This question uses a machine learning classifier to proactively identify privilege escalation tools even if their specific hash is unknown. The model is trained on features indicative of such tools, like the PE import hash (imphash) and the presence of specific Windows API functions used for credential access or token manipulation. This allows for the detection of new or modified variants of known tools based on their functional characteristics.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 11
      - All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks for privilege escalation malware
    range: last 90 days
    queries:
      - pseudocode: |
          ON 'AppInit_DLLs' modification, analyze the new DLL.
          EXTRACT features (imphash, imported functions like LsaEnumerateLogonSessions, file entropy, size).
          INPUT features into a trained gradient boosting model.
          ALERT if 'privesc-tool' probability is high.
  - question: After a standard user process modified AppInit_DLLs, was a new high-integrity process created on the system?
    context: |
      This question looks for a specific privilege escalation sequence. The AppInit DLLs mechanism can be abused for UAC bypass. An adversary might have a medium-integrity process (standard user) modify the key. When a new GUI process is launched (which loads user32.dll and thus the malicious AppInit DLL), the malicious code may exploit a vulnerability to spawn a new process with high or system integrity. Detecting this sequence is a strong indicator of a successful privilege escalation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially multi-user systems like terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          CORRELATE 'AppInit_DLLs' modification (Sysmon 13) from a Medium integrity process with a subsequent (within 5 mins) process creation (Sysmon 1) of a high/system integrity process on the same host.
          ALERT on match.
  - question: Following an AppInit_DLLs modification by a user process, was there a statistically significant spike in the rate of elevated process creation for that user?
    context: |
      This question establishes a behavioral baseline for each user regarding how often they legitimately cause elevated processes to be created. For most users, this rate is zero or very low. A sudden, sharp increase in this rate after an AppInit_DLLs modification strongly suggests that the user's account is being used to perform privilege escalation, deviating significantly from their normal activity profile.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially multi-user systems like terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER 'AppInit_DLLs' modification by a user, monitor the rate of process creations where child integrity > parent integrity.
          COMPARE rate to the user's historical baseline.
          ALERT on a statistically significant spike.
  - question: Does a graph-based anomaly detection model identify a high-risk path representing privilege escalation via AppInit_DLLs?
    context: |
      This question models system activity as a graph to uncover complex attack paths. A node representing a medium-integrity process that modifies the AppInit_DLLs registry key, leading to the creation of a new high-integrity process node, forms a path. Graph algorithms can score the risk of such paths, identifying the multi-step process of privilege escalation that might be missed by analyzing individual events in isolation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers, especially multi-user systems like terminal servers
    range: last 90 days
    queries:
      - pseudocode: |
          MODEL host activity as a process/action graph.
          SEARCH for paths where a Medium integrity process node modifies 'AppInit_DLLs' and subsequently creates a High integrity process node.
          SCORE the risk of this path and alert if high.
  - question: After an AppInit_DLLs modification, did a newly launched SYSTEM-level process perform suspicious actions like accessing LSASS or making external network connections?
    context: |
      This question focuses on the behavior of privileged processes after a potential compromise. Once a malicious DLL is loaded into a SYSTEM-level process via AppInit, the adversary can use that process's privileges to perform sensitive actions. This includes dumping credentials by accessing LSASS memory, launching command shells for further actions, or establishing C2 channels. Detecting these inherently suspicious actions from a privileged process shortly after an AppInit modification is a critical detection.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Zeek conn.log
      - Domain Controllers, Core Windows Servers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER 'AppInit_DLLs' modification, ALERT if a SYSTEM process on the host accesses LSASS memory (Sysmon 10), spawns a shell (Sysmon 1), or connects to a non-allowlisted external IP (Zeek conn.log).
  - question: Following an AppInit_DLLs modification, did a newly started privileged process deviate from its established behavioral baseline?
    context: |
      This question uses behavioral baselining to spot anomalies in critical system processes. Processes like `lsass.exe` have very predictable behavior. After a malicious AppInit DLL is loaded, these processes might start exhibiting abnormal activity, such as spawning rare child processes or generating unusual network traffic. By comparing post-modification behavior to a pre-established baseline and scoring deviations, analysts can detect the subtle impact of code injection.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Zeek conn.log
      - Domain Controllers, Core Windows Servers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER 'AppInit_DLLs' modification, compare behavior of new privileged processes (child processes, network traffic) against a historical baseline for that process name.
          ALERT if a calculated risk score based on deviations is high.
  - question: Does an autoencoder model detect anomalous behavior in a privileged process that was started after an AppInit_DLLs modification?
    context: |
      This question uses an autoencoder to learn the complex patterns of normal behavior for privileged processes. When a process is compromised by a malicious AppInit DLL, its actions (new DLLs loaded, network connections, child processes) will likely not match the learned benign patterns. The autoencoder will fail to reconstruct this new, anomalous telemetry accurately, resulting in a high reconstruction error that serves as a high-fidelity alert for investigation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - Sysmon Event ID 10
      - Zeek conn.log
      - Domain Controllers, Core Windows Servers, Network Gateway
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER 'AppInit_DLLs' modification, feed telemetry from new privileged processes into a trained autoencoder.
          ALERT if reconstruction error is high, indicating behavior doesn't match the benign model.
  - question: Was a process created with a higher integrity level than its parent, and does this correlate with a recent AppInit_DLLs modification?
    context: |
      This question directly targets the most visible evidence of a UAC bypass or privilege escalation: a process spawning a child with greater privileges (e.g., a Medium integrity process creating a High integrity one). While this can sometimes happen legitimately, correlating it with a recent AppInit_DLLs modification on the same host significantly increases the likelihood that it is part of a malicious attack chain, where the AppInit DLL facilitated the escalation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - pseudocode: |
          SEARCH for process creation (Sysmon 1) where ParentIntegrityLevel is Medium and IntegrityLevel is High/System.
          INCREASE severity if an 'AppInit_DLLs' modification (Sysmon 13) occurred on the same host within the last hour.
  - question: Following an AppInit_DLLs modification, did a parent process spawn a child with a statistically rare integrity level for that parent?
    context: |
      This question adds statistical context to integrity level jumps. By creating a frequency distribution of child process integrity levels for each parent process name (e.g., `explorer.exe` rarely spawns `System` integrity children), we can identify anomalous escalations. An integrity jump that is statistically rare for that specific parent-child relationship, especially after an AppInit_DLLs change, is a strong indicator of a UAC bypass technique.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - pseudocode: |
          AFTER 'AppInit_DLLs' modification, if a process spawns a child with a higher integrity level, check the historical frequency of this integrity jump for that parent process name.
          ALERT if the jump is statistically rare (e.g., in the 0.01th percentile).
  - question: Does a classification model predict a high probability of a malicious integrity level jump, given a recent AppInit_DLLs modification?
    context: |
      This question uses a predictive model to assess the risk of an observed integrity level jump. The model considers context, such as the parent and child process names and whether a recent AppInit_DLLs modification occurred. If an integrity jump happens and the model had predicted a high probability of it being part of a malicious sequence, this provides a confident signal for an analyst to investigate a likely privilege escalation.
    answer_sources:
      - Windows Event ID 4657
      - Sysmon Event ID 13
      - Sysmon Event ID 1
      - All Windows endpoints and servers
    range: last 90 days
    queries:
      - pseudocode: |
          WHEN an integrity level jump occurs, use a classification model with features (parent/child name, recent AppInit_DLLs mod flag) to predict probability of maliciousness.
          ALERT if an actual jump occurs when the predicted probability was high.