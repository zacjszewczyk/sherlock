name: T1568.003: DNS Calculation
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps investigate whether an adversary has established command and control by calculating C2 endpoints from DNS query responses. It focuses on detecting several key indicators: internal hosts connecting to ports derived from the octets of a resolved IP; connections to non-standard ports following queries to suspicious domains (newly registered, high entropy); DNS queries for algorithmically generated domains (DGAs); a significant increase in NXDOMAIN responses from a host; and C2 beaconing activity characterized by regular, low-jitter connections following a suspicious DNS query.
type: technique
related:
  - TA0011: Command and Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Can we detect DNS calculation by simulating known algorithms on resolved IPs and checking for subsequent connections to the calculated port?
    context: |
      This question addresses the core of the DNS Calculation technique. Adversaries may use malware that resolves a seemingly benign domain to get an IP address, then applies a mathematical function to the octets of that IP to determine the true C2 communication port. This method attempts to proactively find such activity by replicating common algorithms (e.g., summing or XORing octets) on every resolved IP and looking for a connection from the same source host to that IP on the calculated port within a short time frame.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS Resolvers
      - Egress Network Gateways
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each DNS_RESPONSE in DNS_LOGS:
            ip = DNS_RESPONSE.resolved_ip
            source = DNS_RESPONSE.source_host
            calculated_ports = SIMULATE_ALGORITHMS(ip)
            FOR port in calculated_ports:
              SEARCH CONN_LOGS within 60s of DNS_RESPONSE.timestamp:
                IF conn.source_host == source AND conn.dest_ip == ip AND conn.dest_port == port:
                  ALERT("Potential DNS Calculation")
  - question: Can we identify a fixed calculation algorithm by analyzing the mathematical relationship between destination ports and recently resolved IP addresses for a given host?
    context: |
      This is a reverse approach to the first question. Instead of simulating algorithms, it starts with a suspicious connection (to a high port) and works backward. By calculating the difference between the port and various combinations of the IP octets from a preceding DNS query, we can look for consistency. If the result of `port - (some_function(IP_octets))` is consistently zero or another small integer across multiple connections from the same host, it strongly implies a fixed, predictable algorithm is being used to determine the C2 port.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS Resolvers
      - Egress Network Gateways
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each CONNECTION in CONN_LOGS where dest_port > 1024:
            source = CONNECTION.source_host
            dest_ip = CONNECTION.dest_ip
            FIND most recent DNS_RESPONSE for dest_ip from source
            IF DNS_RESPONSE exists:
              delta = CONNECTION.dest_port - (function of dest_ip.octets)
              TRACK delta per host over time
              IF delta is consistently low/zero for host:
                ALERT("Consistent port calculation delta found")
  - question: Can an unsupervised machine learning model identify anomalous correlations between destination ports and calculated values from resolved IP octets?
    context: |
      This question proposes a more advanced, data-driven approach. By feeding a machine learning model (like Isolation Forest) with features from both DNS and network traffic, we can let the model find what is 'normal' and 'abnormal'. The features are specifically engineered to expose DNS Calculation: domain entropy, IP reputation, the destination port, and a set of pre-calculated values from the IP octets. Outliers identified by the model would represent events where these features have an unusual relationship, such as a high destination port that strongly correlates with one of the calculated IP values, which is a powerful signal of this C2 technique.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Internal DNS Resolvers
      - Egress Network Gateways
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each CONNECTION correlated with a recent DNS_RESPONSE:
            feature_vector = [entropy(domain), reputation(ip), dest_port, sum_octets(ip), xor_octets(ip)]
            score = ISOLATION_FOREST_MODEL.predict(feature_vector)
            IF score indicates an outlier:
              ALERT("ML model detected anomalous DNS/connection correlation")
  - question: Is an internal host connecting to a high, non-standard port within 60 seconds of resolving a domain known to be malicious?
    context: |
      This question focuses on a high-fidelity indicator where multiple suspicious attributes align. It combines a temporal correlation (connection within 60 seconds of DNS query), a policy violation (use of a non-standard, unapproved port), and threat intelligence (the domain is on a blocklist). An alert triggered by this rule is a strong signal of compromise, as it indicates a host is communicating with a known C2 infrastructure using a non-standard port, a common tactic for evading simple firewalls.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Egress Firewalls/Proxies
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          JOIN DNS_LOGS and CONN_LOGS on source_host_ip
          WHERE DNS_LOG.timestamp is within 60s of CONN_LOG.timestamp
          AND CONN_LOG.dest_port > 1024
          AND CONN_LOG.dest_port NOT IN (approved_ports)
          AND DNS_LOG.domain IN (threat_intel_feed)
          ALERT("Connection to high port after query to known C2 domain")
  - question: Are hosts connecting to statistically unusual high ports immediately after resolving suspicious domains?
    context: |
      This question uses statistical baselining to find anomalous behavior. Instead of a fixed list of "bad" ports, it defines "unusual" based on the organization's own traffic, specifically the 99th percentile of port numbers used. When a host connects to a port that is exceptionally high for the environment, and this action immediately follows a query for a suspicious domain (one with low reputation or high entropy), it suggests an attempt to hide C2 traffic on an obscure, calculated port.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Egress Firewalls/Proxies
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          port_baseline = CALCULATE_99TH_PERCENTILE(all_dest_ports)
          FOR each CONNECTION correlated with a recent DNS_RESPONSE:
            IF CONNECTION.dest_port > port_baseline
            AND (reputation(DNS_RESPONSE.domain) == 'low' OR entropy(DNS_RESPONSE.domain) > 3.5):
              ALERT("Connection to statistically high port after suspicious DNS query")
  - question: Can a time-series model detect abnormal spikes in connections to high ports that are correlated with suspicious DNS queries?
    context: |
      This question applies time-series analysis to detect changes in behavior over time. A model like Prophet can learn the normal rhythm of a host's network activity, including its rate of connecting to high ports. By enriching this model with data about preceding DNS queries (like domain age or entropy), the model can learn to distinguish between benign and malicious spikes. An alert is triggered when a host's activity significantly deviates from its predicted "normal" pattern, especially if that deviation is linked to suspicious DNS lookups, indicating a potential C2 channel becoming active.
    answer_sources:
      - Zeek dns.log
      - Zeek conn.log
      - Egress Firewalls/Proxies
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each HOST:
            MODEL = TRAIN Prophet model on (timestamp, count_high_port_connections)
            FORECAST expected behavior.
            IF actual_behavior deviates significantly from FORECAST AND is preceded by suspicious DNS:
              ALERT("Time-series anomaly in high-port connections detected")
  - question: Are hosts querying for domains that are not on the corporate allowlist and are present in threat intelligence feeds as known DGA patterns?
    context: |
      This question describes a fundamental and effective detection strategy. By maintaining an allowlist of approved domains, any query for a domain not on this list is inherently suspicious. These unknown domains are then checked against threat intelligence sources that specialize in identifying domains generated by Domain Generation Algorithms (DGAs). A match provides a high-confidence alert that a compromised host is attempting to locate its C2 server.
    answer_sources:
      - Zeek dns.log
      - Microsoft-Windows-DNS-Client/Operational Event ID 3008
      - Internal DNS Resolvers
      - Domain Controllers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each DNS_QUERY in DNS_LOGS:
            IF DNS_QUERY.domain NOT IN (enterprise_allowlist):
              IF DNS_QUERY.domain MATCHES (dga_threat_intel_feed):
                ALERT("Query for known DGA domain detected")
  - question: Are hosts querying for unknown domains that have a statistically high character randomness (Shannon entropy)?
    context: |
      This question focuses on identifying DGA domains without relying solely on threat intelligence. DGAs often produce domains that look random (e.g., a7b2ks8fde9.com). Shannon entropy is a mathematical measure of this randomness. By first establishing a baseline entropy score from legitimate, allowlisted domains, we can then flag any new, unknown domain whose entropy score is statistically unusual (e.g., in the top 2% percentile). This is a strong indicator that the domain was not created by a human and is likely part of a DGA scheme.
    answer_sources:
      - Zeek dns.log
      - Microsoft-Windows-DNS-Client/Operational Event ID 3008
      - Internal DNS Resolvers
      - Domain Controllers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          entropy_baseline = CALCULATE_98TH_PERCENTILE_ENTROPY(allowlist_domains)
          FOR each DNS_QUERY in DNS_LOGS:
            IF DNS_QUERY.domain NOT IN (enterprise_allowlist):
              IF entropy(DNS_QUERY.domain) > entropy_baseline:
                ALERT("High entropy domain query detected")
  - question: Can a machine learning classifier accurately identify Algorithmically Generated Domains based on their linguistic and structural features?
    context: |
      This question proposes using a supervised machine learning model to automate DGA detection. A model like Random Forest can be trained on a large dataset of both legitimate and known DGA domains. It learns to distinguish between them based on a variety of features, such as the domain's length, its character randomness (entropy), the frequency of character pairs (n-grams), and the ratio of vowels to consonants. Once trained, this model can classify new, unseen domains with a high degree of accuracy, flagging those with a high probability of being a DGA for further investigation.
    answer_sources:
      - Zeek dns.log
      - Microsoft-Windows-DNS-Client/Operational Event ID 3008
      - Internal DNS Resolvers
      - Domain Controllers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each DNS_QUERY in DNS_LOGS:
            features = EXTRACT_FEATURES(DNS_QUERY.domain)
            prediction = DGA_CLASSIFIER_MODEL.predict(features)
            IF prediction.class == 'DGA' AND prediction.confidence > 0.9:
              ALERT("ML model classified domain as DGA with high confidence")
  - question: Is any host generating a high volume and high ratio of DNS queries that result in a 'Non-Existent Domain' (NXDOMAIN) response?
    context: |
      This question targets a common side effect of DGA-based C2. Malware may rapidly cycle through a long list of potential DGA domains, trying to find one that has been registered by the adversary. The vast majority of these queries will fail, resulting in an NXDOMAIN response from the DNS server. This rule looks for this specific pattern: a burst of failed DNS lookups from a single host in a short time window. A high count (e.g., >50) and a high ratio (e.g., >80% failures) are strong indicators of an infected machine attempting to phone home.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each 5-minute window, GROUP DNS_LOGS by source_host:
            nxdomain_count = COUNT where response_code == 'NXDOMAIN'
            total_count = COUNT all queries
            ratio = nxdomain_count / total_count
            IF nxdomain_count > 50 AND ratio > 0.8:
              ALERT("High rate of NXDOMAIN responses from host")
  - question: Has a host's rate of NXDOMAIN responses become statistically significant compared to its own historical baseline?
    context: |
      This question refines the previous one by using personalized, statistical baselining. Instead of a fixed threshold for everyone, it compares a host's current behavior to its own past behavior. The z-score measures how many standard deviations an observation is from the mean. A z-score greater than 3 indicates a very rare event. Alerting on a high z-score for the NXDOMAIN ratio means the host is behaving in a way that is highly abnormal for itself, which is a more robust way to detect DGA activity while reducing false positives.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each HOST:
            baseline_avg = ROLLING_30_DAY_AVG(nxdomain_ratio)
            baseline_stddev = ROLLING_30_DAY_STDDEV(nxdomain_ratio)
            current_ratio = CURRENT_1_HOUR_AVG(nxdomain_ratio)
            z_score = (current_ratio - baseline_avg) / baseline_stddev
            IF z_score > 3 AND current_nxdomain_count > 20:
              ALERT("Statistically significant increase in host's NXDOMAIN ratio")
  - question: Can we detect infected hosts by observing them moving from a 'normal' peer group to an 'abnormal' one based on their DNS response patterns?
    context: |
      This question proposes an advanced peer group analysis using machine learning. Time-series clustering algorithms like k-shape can group hosts that exhibit similar patterns of DNS activity over time. If a host becomes infected, its DNS response profile will change dramatically, characterized by a spike in NXDOMAINs. The clustering algorithm would detect this shift, causing the host to "move" from the large, stable "normal" cluster to a small, outlier cluster. This transition is a strong signal of a behavioral change worth investigating.
    answer_sources:
      - Zeek dns.log
      - Internal DNS Resolvers
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each DAY:
            FOR each HOST:
              profile_vector = [COUNT(NOERROR), COUNT(NXDOMAIN), ...]
            CLUSTERS = K_SHAPE_CLUSTERING(all_host_profiles)
          TRACK cluster membership for each host over time.
          IF a host moves from a large, stable cluster to a small, high-NXDOMAIN cluster:
            ALERT("Host migrated to anomalous peer group for DNS activity")
  - question: Is a host making connections to a suspicious IP address at highly regular, machine-like intervals?
    context: |
      This question aims to detect C2 beaconing. Once a C2 channel is established, the infected host will periodically "check in" with the C2 server. This check-in, or beacon, often occurs at a fixed interval (e.g., exactly every 5 minutes). This rule looks for this precise timing. By analyzing the time delta between consecutive connections to a suspicious IP, we can identify this machine-like regularity (low jitter). Consistent timing over an extended period is a classic indicator of automated C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Egress Network Gateways
      - Core Network Switches
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each DEST_IP flagged as suspicious:
            FIND all connections from a single SOURCE_HOST to DEST_IP.
            CALCULATE time deltas between consecutive connections.
            IF deltas are consistent (e.g., 300s +/- 5s) for > 1 hour:
              ALERT("Potential C2 beaconing detected due to regular connection interval")
  - question: Can we identify C2 beaconing by finding communication patterns that are statistically the most regular in the entire network?
    context: |
      This question uses statistical analysis across the entire network to find the most "robotic" communications. It calculates two key metrics for every conversation: the consistency of the time between connections and the consistency of the amount of data sent. C2 beacons are often extremely consistent in both timing and size. By flagging the conversations that are in the bottom 1% for both of these metrics (i.e., the most regular), we can surface likely C2 beaconing without needing prior indicators.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Egress Network Gateways
      - Core Network Switches
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each SRC_IP, DST_IP pair:
            time_delta_stddev = STDEV(time between connections)
            byte_count_stddev = STDEV(bytes sent per connection)
          FIND pairs in the lowest 1st percentile for BOTH stddev values.
          ALERT("Statistically robotic communication detected")
  - question: Can a sequence analysis model (like an LSTM) be used to detect the specific sequence of events corresponding to C2 beaconing?
    context: |
      This question describes a sophisticated machine learning approach that understands the order of events. An LSTM autoencoder can be trained to learn what normal sequences of network activity look like for a host. It can then identify sequences that don't fit the learned patterns. A classic C2 beaconing sequence—a DNS query, followed by a series of small, periodic connections—is a distinct pattern that would have a high reconstruction error in the autoencoder, flagging it as an anomaly. This method is powerful because it considers the entire attack chain as a single anomalous event.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Egress Network Gateways
      - Core Network Switches
      - Endpoint Devices
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN LSTM Autoencoder on sequences of normal network events per host.
          FOR each new sequence of events for a host:
            reconstruction_error = LSTM_MODEL.evaluate(sequence)
          IF reconstruction_error is high AND sequence matches (DNS_Query -> repeated_small_connections):
            ALERT("Anomalous network event sequence detected, indicative of beaconing")