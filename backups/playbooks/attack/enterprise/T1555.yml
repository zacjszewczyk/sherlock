name: T1555: Credentials from Password Stores
id: a3b1c2d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps to determine if an adversary is attempting to obtain credentials from password stores. It provides investigative questions and queries to detect various methods, including the use of known credential dumping tools, suspicious command-line arguments, unauthorized processes reading credential files, direct memory access to the LSASS process, and the correlation of credential access with network exfiltration activity.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process being created that matches the hash of a known credential dumping tool?
    context: This question aims to identify the execution of known malicious credential dumping utilities like Mimikatz, LaZagne, or SafetyKatz. By comparing the SHA256 hash of every new process against a curated threat intelligence feed of known bad hashes, security analysts can achieve high-fidelity detection of these tools. A match provides a strong signal that an adversary is actively attempting to harvest credentials on the endpoint.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process_creation_event (Sysmon 1, Win 4688): IF process_hash IN known_credential_dumper_hash_list: ALERT
  - question: Is a rare or unsigned process being executed across the enterprise?
    context: This question helps uncover potentially malicious tools that are not yet in threat intelligence feeds by focusing on their rarity. Adversary tools are often not widely distributed like legitimate software. By calculating the prevalence of each process hash across the organization, analysts can flag executables that are running on a very small number of machines (e.g., less than 1%) and are not digitally signed by a trusted publisher. This statistical approach identifies outliers that warrant further investigation as potential credential dumping tools.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 30 days
    queries:
      - technology: pseudocode
        query: CALCULATE prevalence for all process_hashes over 30 days. FOR each process: IF prevalence < 1% AND is_signed == false: FLAG for review.
  - question: Does a new process exhibit characteristics similar to known credential dumping tools based on a machine learning model?
    context: This question leverages machine learning to detect novel or obfuscated credential dumpers that may evade hash-based or statistical methods. A classification model is trained on various features from process creation events, such as the parent process, command-line complexity, and PE header data. This allows the model to learn the fundamental characteristics of malicious executables. By scoring all new processes, analysts can be alerted to activity that the model identifies as highly probable to be malicious, even if the specific tool has never been seen before.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: EXTRACT features from new_process_event. SCORE process with trained_ML_model. IF score > confidence_threshold: ALERT.
  - question: Is a process being executed with command-line arguments indicative of credential dumping?
    context: This question seeks to identify credential dumping activity by inspecting the command-line arguments of executed processes. Many credential dumping tools and scripts use specific keywords, commands, or target paths. By using regular expressions to scan command lines for patterns like `sekurlsa::logonpasswords`, `lsadump::sam`, `vault::cred`, or paths to browser credential stores, analysts can detect known malicious techniques. [1]
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR each process_creation_event: IF command_line MATCHES regex_for_cred_dump_commands: ALERT.
  - question: Is a process being run with an unusually long or complex command line?
    context: Adversaries often use obfuscation to hide malicious commands within legitimate processes like PowerShell or cmd.exe. This question aims to detect such behavior by establishing a baseline of normal command-line length and complexity (entropy) for common interpreters on a per-user or per-host basis. An execution where the command line's length or Shannon entropy ($$ H(X) = -\sum_{i=1}^{n} p(x_i) \log_2 p(x_i) $$) significantly deviates from the norm (e.g., by more than 3 standard deviations) is a strong indicator of anomalous or malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR common_interpreters: CALCULATE baseline_entropy and baseline_length. FOR each new_command: IF entropy > baseline + 3*std_dev OR length > baseline + 3*std_dev: FLAG for review.
  - question: Does a process command line appear malicious according to a trained language model?
    context: This question uses advanced machine learning to identify malicious intent within command lines, even for novel or heavily obfuscated attacks. By fine-tuning a pre-trained language model on a vast dataset of both benign and malicious command lines, the system can learn the subtle patterns and structures of malicious commands. New command lines are scored in real-time, and those exceeding a certain anomaly threshold are flagged, providing a powerful defense against evolving threats that bypass static signature-based methods.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoints (workstations, servers)
      - Tier 0 assets (Domain Controllers, ADFS, PAWs)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SCORE new_command_line with trained_language_model. IF anomaly_score > threshold: ALERT.
  - question: Is an unapproved process attempting to read a known credential store file?
    context: This question focuses on protecting sensitive credential files (e.g., browser `Login Data`, KeePass `.kdbx` databases, Windows Credential Manager files) from unauthorized access. By enabling auditing (SACLs) on these specific file paths, a log event is generated for every read attempt. This allows analysts to alert whenever a process that is not on a pre-defined allowlist of legitimate applications (like `chrome.exe`, `firefox.exe`, `keepass.exe`) tries to access these files, indicating a likely theft attempt.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User profile directories on workstations
      - Server directories with credential files
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR file_read_events (Win 4663) on credential_store_paths. IF process_name NOT IN approved_process_list: ALERT.
  - question: Is a statistically rare process attempting to access a credential store file?
    context: This question provides a method for detecting anomalous access to credential stores without relying on a static allowlist. By analyzing file access logs over time, a frequency profile is created for each critical credential file, showing which processes normally access it. An alert is then generated if a process that has never been seen before, or one that is in the bottom percentile of access frequency, attempts to read the file. This statistical approach helps identify novel or unexpected tools being used to steal credentials.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User profile directories on workstations
      - Server directories with credential files
    range: last 30 days
    queries:
      - technology: pseudocode
        query: BUILD frequency_profile of processes accessing credential_store. FOR each new_access_event: IF accessing_process is statistically_rare: ALERT.
  - question: Is a user's pattern of accessing credential store files deviating from their normal behavior?
    context: This question aims to detect credential theft by modeling the typical behavior of each user. A machine learning model (like an RNN or LSTM) is trained on the sequence of file access events for each user to learn their normal patterns (e.g., `chrome.exe` reads `Login Data` after logon). When a new sequence of events occurs that deviates significantly from this learned pattern (resulting in a high reconstruction error), it is flagged as an anomaly. This can detect sophisticated attacks where an adversary might use a legitimate-looking process but at an unusual time or in an unusual sequence.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 11
      - User profile directories on workstations
      - Server directories with credential files
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL user_file_access_sequences with RNN/LSTM. FOR each new_sequence: CALCULATE reconstruction_error. IF error > threshold: ALERT.
  - question: Is an unauthorized process attempting to read the memory of the LSASS process?
    context: The LSASS process memory on Windows systems contains a wealth of credentials, making it a prime target for adversaries. This question detects attempts to dump this memory by monitoring for process access events (Sysmon Event ID 10) where the target is `lsass.exe` and the access requested includes memory read permissions (`0x1010`). An alert is generated if the process requesting access (`SourceImage`) is not on a very strict allowlist of known-good system and security tools (e.g., EDR agents, Windows Defender), providing a high-fidelity alert for credential dumping. [2]
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - All Windows endpoints
      - Tier 0 assets (Domain Controllers, ADFS)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR process_access_events (Sysmon 10). IF target_process == 'lsass.exe' AND access_mask includes '0x1010' AND source_process NOT IN allowlist: ALERT.
  - question: Is a rare or unsigned process attempting to read the memory of the LSASS process?
    context: This question provides a statistical method to detect potentially malicious LSASS access without relying solely on a static allowlist. By analyzing all LSASS memory access events across the enterprise, the system can determine the prevalence of each source process. Any access attempt from a process that is very rare (e.g., seen on less than 1% of hosts) or is not digitally signed by a trusted publisher is flagged for investigation. This helps identify custom or lesser-known adversary tools designed for credential dumping.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - All Windows endpoints
      - Tier 0 assets (Domain Controllers, ADFS)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CALCULATE prevalence for all source_images accessing lsass.exe. IF source_image_prevalence < 1% OR is_signed == false: FLAG for review.
  - question: Is an access event to LSASS memory an outlier compared to normal access patterns?
    context: This question applies unsupervised machine learning to identify anomalous LSASS memory access. By clustering LSASS access events based on features like the source process, parent process, user, and access type, the system can learn what normal access looks like (e.g., frequent access by an EDR tool will form a dense cluster). Any access event that does not fit into a known cluster and is classified as an outlier (or "noise") by the algorithm is treated as a high-priority anomaly, indicating a likely credential dumping attempt.
    answer_sources:
      - Sysmon Event ID 10
      - Windows Event ID 4656
      - All Windows endpoints
      - Tier 0 assets (Domain Controllers, ADFS)
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CLUSTER LSASS_access_events using DBSCAN. IF new_event is classified as 'noise' (outlier): ALERT.
  - question: Did a process read a credential store file and then immediately make a network connection to a known malicious IP address?
    context: This question seeks to detect the full "theft and exfiltration" chain of events. It correlates two distinct event types: a host-based file read on a known credential store (from Windows Event ID 4663) and a subsequent network connection from that same host (from Zeek conn.log). If the network connection occurs within a short time window (e.g., 5 minutes) of the file read and the destination IP is found on a threat intelligence blocklist, it provides strong, contextual evidence of credential theft.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - SIEM/Data Lake for correlation
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE file_read_on_cred_store WITH network_connection within 5 mins. IF destination_ip IN threat_intel_blocklist: ALERT.
  - question: Following a credential store file read, did the host make a network connection to a rare destination or exfiltrate an unusually large amount of data?
    context: This question provides a statistical method to detect potential exfiltration after a credential theft event. When a read on a credential store is observed, the host's network activity is monitored for the next few minutes. The system alerts if the host makes an outbound connection to a destination IP that is statistically rare for the organization and/or the amount of data sent (`orig_bytes`) is anomalously large compared to that host's typical outbound connection size. This can catch exfiltration to novel command-and-control servers.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - SIEM/Data Lake for correlation
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON credential_store_read: MONITOR host_network_activity for 5 mins. IF destination_ip is rare OR outbound_bytes > 95th_percentile: ALERT.
  - question: Does the sequence of 'credential file read followed by network connection' deviate from the host's normal learned behavior?
    context: This question uses a sophisticated machine learning approach to detect the credential theft and exfiltration sequence. A model (e.g., a Hidden Markov Model or GRU network) is trained on correlated streams of host and network events for each entity to learn its normal sequences of activity. The model can then identify and alert on specific, malicious sequences, such as a read from a credential store followed immediately by a network connection involving a high-entropy DNS query or a connection to a low-prevalence IP address, as this pattern deviates strongly from learned benign behavior.
    answer_sources:
      - Windows Event ID 4663
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - SIEM/Data Lake for correlation
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MODEL host_and_network_event_sequences. IF new_sequence matches '[cred_read] -> [anomalous_network_out]' and has high_anomaly_score: ALERT.