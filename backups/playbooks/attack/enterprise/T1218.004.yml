name: T1218.004: InstallUtil
id: 9c1b7a2d-463e-4a6f-8d7b-9e0c1a3b5d4e
description: |
  This playbook helps identify if an adversary is using the signed Microsoft utility InstallUtil.exe to execute malicious code as a method of defense evasion (TA0005). The investigation focuses on detecting several key indicators: the execution of .NET assemblies with known-malicious file hashes; the use of InstallUtil with uninstall flags pointing to suspicious file paths (e.g., user-writable directories); InstallUtil being launched by non-standard parent processes like Office applications or web browsers; suspicious outbound network activity immediately following an InstallUtil execution; and the rapid execution of a .NET assembly immediately after it was written to disk from a network source. These indicators collectively help uncover attempts to bypass application control and other defenses by proxying execution through a trusted utility.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is an instance of InstallUtil.exe executing a .NET assembly with a file hash that matches a known-malicious hash in our threat intelligence database?
    context: |
      This is a high-fidelity indicator of compromise. Matching a known-bad hash confirms that a recognized malicious tool or payload is active in the environment. This allows for rapid validation of a threat and immediate incident response, bypassing the need for more complex behavioral analysis for initial detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - File systems and process logs on all Windows endpoints and servers, with heightened monitoring on developer workstations, build servers, and application servers where .NET is prevalent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (Windows Event ID 4688, Sysmon Event ID 1)
          WHERE process_name = "InstallUtil.exe"
          EXTRACT file path from command line
          GET SHA256 hash for the file
          LOOKUP hash in threat intelligence database
          IF match is found, GENERATE high-severity alert.
  - question: Is InstallUtil.exe executing a .NET assembly with a file hash that is new or statistically rare within the environment?
    context: |
      Adversaries often use custom or newly compiled tools that will not have pre-existing signatures. Identifying assemblies that have never been seen before or have only run on a single host is a powerful way to detect novel malicious software. This technique, known as rarity analysis, helps uncover tools used in targeted attacks that might otherwise go unnoticed.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - File systems and process logs on all Windows endpoints and servers, with heightened monitoring on developer workstations, build servers, and application servers where .NET is prevalent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN baseline of all assembly hashes executed by InstallUtil.exe
          FOR each new execution:
            GET assembly file hash
            CALCULATE prevalence (total count) and rarity (unique host count) for the hash
            IF hash is new OR rarity = 1, FLAG for investigation.
  - question: Does a .NET assembly executed by InstallUtil.exe, which is not found in threat intelligence, receive a high maliciousness score from a static binary analysis model?
    context: |
      Since attackers can easily modify malware to change its hash, hash-based detection alone is insufficient. A machine learning model can analyze static properties of the .NET assembly file (such as its entropy, imported functions, and embedded strings) to predict its likelihood of being malicious. This provides a scalable way to flag suspicious, unknown binaries for deeper analysis by a reverse engineer.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - File systems and process logs on all Windows endpoints and servers, with heightened monitoring on developer workstations, build servers, and application servers where .NET is prevalent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new assembly executed by InstallUtil.exe:
            GET file hash
            IF hash is NOT in threat intelligence:
              EXTRACT binary features (entropy, PDB path, imports, strings)
              SCORE assembly using trained classification model (e.g., Gradient Boosting)
              IF score > malicious_threshold, ISOLATE assembly and ALERT.
  - question: Is InstallUtil.exe being run with an uninstall switch ('/u' or '/uninstall') against a file located in a non-standard or user-writable directory?
    context: |
      Legitimate software installations and uninstallations typically occur in protected system directories like 'Program Files'. Adversaries often drop their payloads into temporary or user-specific locations ('C:\Users', 'C:\Temp', etc.) to bypass administrative privilege requirements. Detecting InstallUtil.exe targeting files in these suspicious locations, especially with the uninstall flag (a common abuse pattern), is a strong indicator of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on all Windows endpoints and servers, particularly those of non-developer users where software installation is infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH process creation events (Windows Event ID 4688, Sysmon Event ID 1)
          WHERE process_name = "InstallUtil.exe"
          AND command_line CONTAINS ("/u" OR "/uninstall")
          AND target_path MATCHES ('C:\Users\*', 'C:\ProgramData\*', 'C:\Windows\Temp\*', etc.)
          GENERATE alert.
  - question: Does the file path of the assembly executed by InstallUtil.exe have unusually high string entropy or a directory depth that deviates from the established baseline?
    context: |
      Attackers may use randomized directory or file names to evade simple signature-based detections. High string entropy in a file path can indicate such randomization. Similarly, legitimate installations follow predictable path structures, whereas malware might be dropped in unusually deep or shallow directories. Deviations from the established norm for path depth and entropy can be a statistical signal of an anomaly worth investigating.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on all Windows endpoints and servers, particularly those of non-developer users where software installation is infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          ESTABLISH baseline for path entropy and depth for legitimate InstallUtil executions.
          FOR each new InstallUtil execution:
            PARSE target file path
            CALCULATE string entropy and directory depth
            IF entropy is in top 95th percentile OR depth deviates > 2 standard deviations from baseline, FLAG for investigation.
  - question: Does a logistic regression model, trained on process event features, assign a high-risk score to an InstallUtil.exe execution?
    context: |
      Instead of relying on a single indicator, a machine learning model can consider multiple features simultaneously—such as the presence of the '/u' switch, the file path location, the parent process, and the user account—to make a more robust and context-aware decision. This approach helps reduce false positives by learning the complex patterns that differentiate benign and malicious executions, assigning a risk score that can be used for alerting.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process execution logs on all Windows endpoints and servers, particularly those of non-developer users where software installation is infrequent.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each InstallUtil execution event:
            EXTRACT features (has '/u' switch, path location type, parent process, user context)
            SCORE the event using a trained logistic regression classifier
            IF risk_score > threshold, GENERATE alert.
  - question: Is InstallUtil.exe being launched by a parent process not typically associated with software installation, such as a Microsoft Office application, browser, or script interpreter?
    context: |
      Legitimate use of InstallUtil.exe is typically initiated by a developer, a setup executable (setup.exe), or a system management tool. When it is launched by a common user application like Word, Excel, PowerShell, or a web browser, it is highly indicative of a malicious execution chain, such as a user opening a weaponized document or a script delivered via a phishing link. This is a classic sign of process injection or living-off-the-land techniques.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process lineage data from all Windows endpoints and servers, with a focus on user workstations running common productivity software.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE a list of non-standard parent processes ('winword.exe', 'excel.exe', 'powershell.exe', etc.)
          SEARCH process creation events
          WHERE process_name = "InstallUtil.exe"
          AND parent_process_name IN non-standard_list
          GENERATE alert.
  - question: Is the parent process of an InstallUtil.exe execution one that has never been seen before in the environment or is extremely rare?
    context: |
      Beyond a static list of suspicious parents, this question uses environmental baselining to detect anomalies. By tracking all parent-child relationships for InstallUtil.exe over time, the system can learn what is normal for the specific environment. An execution spawned by a parent process that has never been observed before, or is seen very infrequently, is a statistical anomaly that warrants investigation, as it could represent a new or targeted attack vector.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process lineage data from all Windows endpoints and servers, with a focus on user workstations running common productivity software.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN a 30-day rolling baseline of parent processes for InstallUtil.exe.
          CALCULATE frequency of each parent process.
          FOR each new InstallUtil execution:
            GET parent process name
            IF parent process is not in baseline OR its frequency < 1%, GENERATE alert.
  - question: Does a clustering algorithm classify an InstallUtil.exe execution event as an outlier based on its process lineage and command-line features?
    context: |
      This technique models "normal" execution behavior by grouping similar events into clusters. An event is defined by a combination of its features, such as the parent process, grandparent process, and command-line arguments. An execution that does not fit into any of the established clusters of normal behavior is flagged as a "noise point" or outlier. This unsupervised machine learning approach is effective at finding novel attack patterns that don't match any predefined rules.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Process lineage data from all Windows endpoints and servers, with a focus on user workstations running common productivity software.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          COLLECT features for InstallUtil executions (parent process, grandparent, cmd line, user).
          APPLY clustering algorithm (e.g., DBSCAN) to group events into normal clusters.
          IF a new execution event is classified as a noise point (outlier), FLAG as an anomaly.
  - question: Shortly after InstallUtil.exe is run, does the host make a network connection to a known malicious IP or domain?
    context: |
      A common pattern for malware is execution followed by command and control (C2) beaconing. This question correlates the execution of a potentially suspicious process (InstallUtil.exe) with subsequent outbound network connections within a short time window (e.g., 60 seconds). If the destination is found on a threat intelligence blocklist, it provides strong, correlated evidence that the execution was malicious and has established a C2 channel.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network traffic logs from network security monitoring sensors (e.g., Zeek) at egress points, DNS server query logs, and process/network event logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CORRELATE process creation events (InstallUtil.exe) with network connection events from the same host within a 60-second window.
          EXTRACT destination IP/domain from network events.
          QUERY destination against threat intelligence feed.
          IF destination is known malicious, GENERATE alert.
  - question: Following an InstallUtil.exe execution, does the host initiate a network connection to a destination IP, port, or domain that is statistically rare for the enterprise?
    context: |
      Attackers often use C2 infrastructure that is unique to their campaign. By calculating the enterprise-wide rarity of network artifacts (like destination IPs, ports, and domains), we can identify connections that are abnormal. A connection to an IP address seen for the first time, on a non-standard port, following a suspicious process execution, can be assigned a high-risk score even without prior threat intelligence, enabling the detection of new C2 channels.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network traffic logs from network security monitoring sensors (e.g., Zeek) at egress points, DNS server query logs, and process/network event logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network connection following an InstallUtil.exe execution:
            CALCULATE enterprise-wide rarity of destination IP, port, and domain.
            ASSIGN risk scores based on rarity (e.g., new IP, rare port).
            IF cumulative risk score > threshold, GENERATE alert.
  - question: Does a time-series anomaly detection model detect a significant deviation in a host's network behavior baseline immediately after an InstallUtil.exe execution?
    context: |
      Every host has a typical pattern of network activity (its "rhythm"). A time-series model (like ARIMA or LSTM) can learn this baseline. After a potentially malicious execution, a change in this pattern—such as a sudden increase in outbound data, a new beaconing frequency, or connections at unusual times—can be detected as a statistical anomaly. This helps catch C2 activity that might not use rare indicators but still deviates from the host's normal behavior.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Network traffic logs from network security monitoring sensors (e.g., Zeek) at egress points, DNS server query logs, and process/network event logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MONITOR host network metrics (outbound bytes, connection frequency) using a time-series model (e.g., LSTM).
          AFTER an InstallUtil.exe execution event on the host:
          IF the model flags a statistically significant deviation from the baseline, GENERATE alert.
  - question: Was a .NET assembly executed by InstallUtil.exe within a few minutes of being created on disk, especially if it originated from a browser or email client?
    context: |
      This sequence of events—file creation followed immediately by execution—is a classic indicator of a "drive-by download" or a malicious attachment being run. Correlating file creation events (Sysmon Event ID 11) with process creation events (Sysmon Event ID 1) within a short time window (e.g., 5 minutes) provides strong evidence of an external payload being activated. The context is even stronger if the process that wrote the file was a browser or email client.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek files.log
      - Network file transfer logs from network security monitoring sensors (e.g., Zeek) and file system/process creation logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          SEARCH for file creation events (Sysmon Event ID 11) correlated with process creation events (Sysmon Event ID 1) on the same host.
          IF file is executed by "InstallUtil.exe" within 5 minutes of creation,
          AND IF the process that wrote the file was a browser or email client,
          GENERATE alert.
  - question: Is the time delta between a .NET assembly being written to disk and its execution by InstallUtil.exe unusually short compared to the environmental baseline?
    context: |
      Legitimate software installations might involve a user downloading a file and then manually running it minutes or hours later. Malicious scripts or droppers, however, often execute the payload automatically and immediately. By analyzing the distribution of time deltas between file-write and process-execute events, we can identify automated, scripted behavior. Executions that happen in the bottom 5th percentile of time deltas are highly suspicious.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek files.log
      - Network file transfer logs from network security monitoring sensors (e.g., Zeek) and file system/process creation logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE baseline distribution of time deltas between file-write and InstallUtil.exe-execute events.
          FOR each new download-then-execute sequence:
            CALCULATE the time delta.
            IF the delta is in the bottom 5th percentile of the distribution, FLAG as highly suspicious.
  - question: Does a graph-based anomaly detection algorithm identify a rare or high-risk event chain leading to the execution of a file by InstallUtil.exe?
    context: |
      Modern attacks are not single events but a chain of actions. By modeling system activity as a graph (where processes, files, and network connections are nodes), we can analyze these entire chains. An algorithm can then score the rarity of a full sequence, such as 'browser downloads file' -> 'file is written' -> 'PowerShell reads file' -> 'PowerShell launches InstallUtil.exe'. This graph-based approach provides a holistic view and can detect sophisticated attack paths that would be missed by looking at individual events in isolation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Sysmon Event ID 11
      - Zeek files.log
      - Network file transfer logs from network security monitoring sensors (e.g., Zeek) and file system/process creation logs from all Windows endpoints and servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL process, file, and network events as a directed graph.
          USE a graph anomaly detection algorithm to score event chains.
          IDENTIFY rare sequences leading to InstallUtil.exe execution (e.g., 'powershell.exe' -> 'downloads' -> 'evil.dll' -> 'executed_by' -> 'InstallUtil.exe').
          IF sequence has a high anomaly score, GENERATE alert.