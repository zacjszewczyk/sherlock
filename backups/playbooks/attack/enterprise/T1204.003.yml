name: T1204.003: Malicious Image
id: a6b1e8d9-3c7f-4b0a-8e6d-9f1c2b3a4d5e
description: This playbook helps determine if an adversary has achieved execution by using a malicious container or virtual machine image. It provides investigative questions to detect malicious images by checking against threat intelligence, analyzing for behavioral anomalies such as unusual child processes or network activity, identifying the use of excessive permissions or risky runtime flags, and detecting pulls from unapproved or typosquatted image registries.
type: technique
related:
  - TA0002: Execution
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a container being created from an image known to be malicious based on threat intelligence feeds?
    context: This question aims to identify the most direct evidence of a malicious image execution by checking if a container is created from an image whose identifier (name, tag, or digest) matches an entry in a known-malicious threat intelligence feed. A match is a high-confidence indicator of compromise.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
      - Threat Intelligence Feeds
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each process creation event
          IF process is a container runtime (e.g., `docker run`)
            EXTRACT image_identifier (name, tag, digest)
            IF image_identifier IN known_malicious_image_feed
              ALERT
  - question: Has a new and rare container image been deployed from an untrusted registry?
    context: Adversaries often use custom or single-use images that will not be present in the environment. This question uses a statistical approach to find these outliers. By identifying images that are new, rarely deployed, and not from a trusted corporate registry, analysts can uncover potentially malicious activity that has not yet been identified by threat intelligence.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CALCULATE deployment frequency for each image_name over last 90 days
          FOR each new container deployment
            IF image_registry NOT IN trusted_registries AND deployment_frequency < 5th_percentile
              ALERT
  - question: Does a newly deployed container image exhibit metadata characteristics similar to known malicious images?
    context: This question applies a machine learning approach to proactively identify suspicious images. By training a model on metadata features (e.g., name length/entropy, source registry, image layers) of both known-good and known-bad images, it becomes possible to score new images for their likelihood of being malicious, even without a direct threat intelligence match.
    answer_sources:
      - Windows Event ID 4688
      - Image Metadata
      - Container host servers
      - Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS)
      - Corporate image registries
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new image deployment
            EXTRACT metadata_features (name_entropy, registry_info, etc.)
            APPLY classification_model to features
            IF model_score > malicious_threshold
              ALERT
  - question: Is a running container spawning child processes associated with malicious tools or activities?
    context: Containerized applications typically execute a predictable set of processes. This question seeks to detect deviations by scanning for child processes whose command lines match signatures (keywords or regular expressions) of known malicious tools like reverse shells, credential dumpers, or crypto miners. A match is a strong indicator of post-exploitation activity within the container.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each new process event
            IF parent_process is container_runtime
              SCAN child_process.command_line for malicious_keywords_regex
              IF match
                ALERT
  - question: Is a running container executing processes that significantly deviate from its established behavioral baseline?
    context: This question focuses on detecting novel or unknown malicious activity through behavioral anomaly detection. By first learning the 'normal' set of child processes and arguments for a given container image, this method can then flag any new process activity that is statistically different (e.g., using Jaccard distance) from the established baseline, indicating a potential compromise.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          CREATE baseline of legitimate child processes for each image
          FOR each new child process event
            CALCULATE Jaccard distance from new_process to image_baseline
            IF distance > threshold (e.g., 0.8)
              ALERT
  - question: Is a container exhibiting an anomalous rate of process creation?
    context: Malicious scripts or malware within a container may execute in a loop or trigger a rapid succession of commands, causing a detectable spike in process creation activity. This question applies time-series analysis to the rate of process creation per container to learn its normal rhythm and alert when a sudden, sustained burst deviates significantly from the forecast.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Critical application servers
      - Application servers running containerized workloads
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MODEL rate of process creation per container using time-series algorithm (e.g., ARIMA)
          FOR each time interval
            IF actual_process_rate > forecasted_rate + deviation_threshold
              ALERT
  - question: Has a container been deployed with unauthorized high-risk permissions?
    context: Adversaries frequently attempt to deploy containers with elevated privileges (e.g., `--privileged`, host mounts) to escape the container sandbox and access the underlying host. This question aims to detect the use of these high-risk flags by parsing container runtime commands and comparing them against an allow-list of approved use cases, preventing a critical escalation path.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container creation event
            PARSE runtime command for flags (e.g., '--privileged', '-v /:/host')
            IF risky_flag_found AND usage NOT IN approved_allow_list
              ALERT
  - question: Does the combination of runtime flags for a new container deployment represent an unusually high level of risk?
    context: Rather than checking for single risky flags, this question quantifies the cumulative risk of all runtime flags used in a deployment. By assigning weights to flags and summing them into a risk score, it establishes a baseline for each application or user and alerts when a new deployment's score is a statistical outlier, catching unusually permissive configurations.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          DEFINE risk weights for all runtime flags
          CALCULATE historical risk score baseline per application
          FOR each new container deployment
            CALCULATE total_risk_score from flags used
            IF total_risk_score > 99th_percentile_of_baseline
              ALERT
  - question: Is a container being deployed with an anomalous or unusual combination of runtime flags?
    context: This question uses unsupervised machine learning (e.g., Isolation Forest) to find unusual combinations of runtime flags. While individual flags in a combination may be safe, their co-occurrence could be rare and indicative of a misconfiguration or a malicious attempt to create a uniquely permissive environment. The model learns common patterns and flags any deployment that deviates.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - CI/CD pipeline runners
      - Kubernetes API servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          TRAIN Isolation Forest model on feature vectors of flag combinations
          FOR each new container deployment
            CREATE feature vector from flags
            IF model.predict(vector) is outlier
              ALERT
  - question: Is a container communicating with known malicious command-and-control (C2) servers, cryptomining pools, or other malicious destinations?
    context: This question seeks to find high-confidence indicators of compromise by monitoring a container's outbound network connections. By correlating destination IPs and domains from network logs (e.g., Zeek) against threat intelligence feeds, any match provides strong evidence that the container has been compromised and is communicating with an adversary's infrastructure.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek http.log
      - Threat Intelligence Feeds
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each network connection from a container
            EXTRACT destination_ip, destination_domain
            IF destination_ip OR destination_domain IN CTI_feeds
              ALERT
  - question: Is a container exhibiting network behavior indicative of beaconing or Domain Generation Algorithms (DGA)?
    context: To evade static indicators, adversaries use techniques like C2 beaconing (periodic, low-volume callbacks) and DGA (algorithmically generated domains). This question looks for the statistical traces of this behavior by analyzing connection intervals for beaconing and DNS query entropy for DGA, allowing detection of advanced C2 channels.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each container
            CALCULATE entropy of DNS queries over time window -> Check for high entropy (DGA)
            PROFILE connection intervals and data volume -> Check for periodic, low-volume patterns (beaconing)
            IF DGA or beaconing pattern detected
              ALERT
  - question: Is a container generating network traffic that is anomalous compared to its normal activity profile?
    context: This question uses unsupervised machine learning (e.g., DBSCAN) to discover any network activity that deviates from a container's established norm. By clustering network flows based on features like port, protocol, and data volume, the model can identify any connection that doesn't fit into a 'normal' cluster. These outliers represent anomalies that warrant investigation.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Network egress points
      - Container overlay network segments
      - DNS resolvers
      - Cloud VPCs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each application, CLUSTER historical network flows using DBSCAN
          FOR each new network flow
            IF DBSCAN model classifies flow as a noise point (outlier)
              ALERT
  - question: Is a container image being pulled from an unapproved or unauthorized registry?
    context: To maintain a secure software supply chain, organizations should only use images from trusted, vetted registries. This question enforces this policy by monitoring network logs for any image pull activity from a registry not on an explicit company allow-list. This prevents the introduction of untrusted and potentially malicious images into the environment.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN allow-list of approved_registry_domains
          MONITOR DNS and connection logs for image pull activity
          IF destination_domain NOT IN approved_registry_domains
            ALERT
  - question: Is a container being deployed using an image name that appears to be a typosquatted version of a legitimate image?
    context: Adversaries often publish malicious images to public registries with names that are slight misspellings of popular, legitimate images (e.g., 'reds' instead of 'redis'). This question aims to detect these typosquatting attempts by calculating the string similarity (e.g., Levenshtein distance) between a deployed image's name and a list of known, approved image names.
    answer_sources:
      - Windows Event ID 4688
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          MAINTAIN list of approved_image_names
          FOR each new image deployment
            EXTRACT image_name
            CALCULATE Levenshtein distance between image_name and all approved_image_names
            IF minimum_distance is 1 or 2
              ALERT
  - question: Is a container image being pulled from a registry that has suspicious characteristics?
    context: This question provides a dynamic method for evaluating the trustworthiness of a container registry. It uses a machine learning model to score a registry based on features like its domain age, SSL certificate details, and public reputation. This can flag image pulls from newly created or low-reputation registries that might be operated by an adversary.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Domain/SSL Certificate data
      - Container host servers
      - Corporate image registries
      - DNS resolvers
      - Developer workstations
    range: last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each image pull from a new registry
            GATHER features (domain age, SSL issuer, etc.)
            APPLY classification model to score registry trust
            IF trust_score < threshold
              ALERT