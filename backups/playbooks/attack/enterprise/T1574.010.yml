name: T1574.010: Services File Permissions Weakness
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook focuses on detecting adversaries exploiting weak file permissions on Windows service executables. An adversary may modify or replace a legitimate service binary with a malicious one to achieve persistence, as the service will execute the malicious code upon start or restart. This technique can also be used for privilege escalation if the service runs under a high-privilege account like SYSTEM, or for defense evasion if the targeted service belongs to a security product. The investigation involves analyzing file write events, process creation, permission changes, and network connections related to service binaries to identify unauthorized modifications, suspicious executing processes, and anomalous behavior indicative of a compromise.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has a known service binary been modified, and does the new file's hash match a known malicious signature?
  context: This question aims to detect the most direct form of service hijacking, where an adversary replaces a legitimate service executable with a known malicious file. A match against a threat intelligence feed provides high-confidence evidence of a compromise. The detection rule would monitor file access events (Event ID 4663) on service binary paths, hash the modified file, and check it against a threat feed of known-malicious hashes.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Windows Security Event ID 4657
  - Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers
  - File systems on all Windows hosts, particularly in System32 and Program Files directories.
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH for EventID 4663 where ObjectName is in [List of Service Binary Paths]
      FOR EACH result:
        GET file hash of ObjectName
        CHECK hash against [Threat Intelligence Feed]
        IF match, ALERT
- question: Has a rarely-modified service binary been changed outside of a normal maintenance window?
  context: This question focuses on detecting anomalous changes. Legitimate service binaries are typically updated only during scheduled patching cycles. A modification to a file that has been stable for a long time and occurs outside a defined maintenance window is highly suspicious, even if the new file is not yet known to be malicious. This helps find zero-day or custom malware by focusing on the abnormality of the change itself.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Windows Security Event ID 4657
  - Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers
  - File systems on all Windows hosts, particularly in System32 and Program Files directories.
  range: last 180 days
  queries:
  - pseudocode: |
      FOR EACH ServiceBinary:
        BASELINE hash and last_modified_timestamp over 180 days
      SEARCH for EventID 4663 on ServiceBinary
      IF new hash is different AND time since last_modified > 95th_percentile AND current_time is NOT in [Maintenance Windows], ALERT
- question: Is there an unusual spike in file write activity for service executable directories, inconsistent with normal patching cycles?
  context: This question uses a time-series model to understand the normal rhythm of software updates. An adversary attempting to modify multiple services or trying different payloads might create a burst of file write activity that deviates significantly from the learned baseline of hourly write counts. This can detect broader or noisier tampering attempts that stand out from the typical, infrequent patch activity.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Windows Security Event ID 4657
  - Windows Service Control Manager Registry (HKLM\SYSTEM\CurrentControlSet\Services\*\ImagePath) on all endpoints and servers
  - File systems on all Windows hosts, particularly in System32 and Program Files directories.
  range: last 90 days
  queries:
  - pseudocode: |
      AGGREGATE EventID 4663 counts for service directories into hourly buckets
      TRAIN a time-series model (e.g., SARIMA) on historical data
      FORECAST expected count for current hour
      IF observed_count > forecast + confidence_interval, ALERT
- question: Was a service executable modified by a process that is unsigned, running from a temporary directory, or not an approved installer?
  context: Legitimate service modifications are almost always performed by trusted, signed installer processes (e.g., 'msiexec.exe', 'TrustedInstaller.exe') running from standard locations. This question seeks to identify modifications made by suspicious processes, such as an unsigned binary, a script running from a user's AppData folder, or any tool not on a strict allowlist of patch management software.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH for EventID 4663 on service binary paths
      JOIN with EventID 4688 on process info to get Creator Process
      IF CreatorProcess is unsigned OR its path is in [Temp/User Dirs] OR CreatorProcess not in [Allowlist of Installers], ALERT
- question: Was a service binary modified by a process that has rarely or never modified it before?
  context: This question baselines the relationship between services and the processes that update them. For any given service, there is a small, predictable set of processes responsible for its updates. A modification by a process that is a statistical outlier (e.g., in the bottom 5th percentile of frequency) for that specific service is a strong indicator of unauthorized activity.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH ServiceBinary:
        PROFILE frequency of CreatorProcessNames that write to it over 90 days
      ON new write event (EventID 4663):
        GET CreatorProcessName from correlated EventID 4688
        IF CreatorProcessName frequency < 5th_percentile for this ServiceBinary, ALERT
- question: Does a machine learning model classify the process that modified a service binary as 'suspicious'?
  context: This question applies a classification model to assess the legitimacy of a file write event. The model considers various features of the writing process, such as its signature status, path entropy, parent process, and command-line arguments, to make a holistic judgment. This can catch sophisticated attackers using masquerading techniques that might evade simpler symbolic or statistical checks.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.
  range: last 90 days
  queries:
  - pseudocode: |
      ON EventID 4663 to service binary:
        EXTRACT features from writing process (EventID 4688): signature, path_entropy, parent_process, cmd_line_args
        INPUT features into pre-trained classifier (e.g., Random Forest)
        IF prediction is 'suspicious' with high confidence, ALERT
- question: Did a permission change, file write, and service start occur in a short sequence by a non-administrative user?
  context: This question looks for a specific, high-confidence attack chain. An adversary first needs to gain permissions to modify the service file (Event ID 4670), then writes their malicious payload to it (Event ID 4663), and finally, the service is started to execute the code (Event ID 7036). Detecting this exact sequence by a non-privileged user within a short time window is a strong indicator of a service hijack for persistence.
  answer_sources:
  - Windows Security Event ID 4670
  - Windows Security Event ID 4663
  - Windows System Event ID 7036
  - Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
  range: last 90 days
  queries:
  - pseudocode: |
      DEFINE stateful rule for a 15-minute window
      TRIGGER on EventID 4670 for a service binary path by User not in [Privileged Groups]
      LOOK FOR subsequent EventID 4663 (Write Access) by same User and path
      LOOK FOR subsequent EventID 7036 for same service
      IF sequence completes, ALERT
- question: Has a service binary's permissions been changed by a statistically rare account, followed by a file write from that same account?
  context: This question identifies suspicious activity by focusing on the rarity of the actor. System administrators or automated systems typically perform permission changes. If an account that rarely or never performs such actions (Event ID 4670) suddenly does so on a service binary and then immediately writes to that file (Event ID 4663), the low probability of this sequence of events suggests malicious intent.
  answer_sources:
  - Windows Security Event ID 4670
  - Windows Security Event ID 4663
  - Windows System Event ID 7036
  - Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
  range: last 90 days
  queries:
  - pseudocode: |
      BASELINE frequency of accounts performing permission changes (EventID 4670) on service directories
      ON EventID 4670, calculate risk_score based on account rarity
      IF subsequent EventID 4663 by same rare account, escalate risk_score
      IF cumulative_score > threshold (e.g., 3 * stdev), ALERT
- question: Does a sequence analysis model detect an anomalous pattern of permission changes, file writes, and service starts?
  context: This question uses a sequence analysis model (like an HMM) to learn normal administrative workflows. The model understands valid sequences of events (permission changes, writes, service starts) and the user contexts associated with them. It can then flag a sequence as anomalous if it deviates from learned 'Benign Maintenance' patterns, such as a non-admin user performing the actions, indicating a potential hijack.
  answer_sources:
  - Windows Security Event ID 4670
  - Windows Security Event ID 4663
  - Windows System Event ID 7036
  - Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.
  range: last 90 days
  queries:
  - pseudocode: |
      TRAIN HMM with states ('Benign', 'Suspicious', 'Hijack') on sequences of (EventID, UserContext, ObjectName)
      FEED live event stream into the trained HMM
      IF model transitions to 'Hijack' state with high probability, ALERT
- question: Was a SYSTEM-level service binary modified, and does its new hash match a known privilege escalation tool?
  context: This question targets a high-impact privilege escalation scenario. An adversary who can modify a service running as 'NT AUTHORITY\SYSTEM' can execute code with the highest level of local privilege. This query specifically looks for writes to these critical service binaries and checks if the new file is a known privilege escalation tool (e.g., Mimikatz, Juicy Potato), indicating a direct and successful attempt to gain SYSTEM access.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Multi-user systems like Remote Desktop Session Hosts and Citrix servers
  - Endpoints used by developers, system administrators, and other privileged roles.
  range: last 90 days
  queries:
  - pseudocode: |
      MAINTAIN list of service binaries running as SYSTEM
      MONITOR these paths for write events (EventID 4663)
      ON write, hash the new file
      CHECK hash against CTI feed of [Privilege Escalation Tools]
      IF match, ALERT
- question: Was a SYSTEM-level service binary modified by any account other than 'SYSTEM' or 'TrustedInstaller'?
  context: This is a high-fidelity statistical question based on expected system behavior. Binaries for services running as SYSTEM should only ever be modified by the operating system itself ('SYSTEM' or 'TrustedInstaller') during legitimate patch cycles. Any file write to these binaries initiated by any other user account is an extreme statistical anomaly and should be treated as a critical security event, likely indicating a privilege escalation attempt.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Multi-user systems like Remote Desktop Session Hosts and Citrix servers
  - Endpoints used by developers, system administrators, and other privileged roles.
  range: last 90 days
  queries:
  - pseudocode: |
      MAINTAIN list of service binaries running as SYSTEM
      SEARCH for EventID 4663 on these paths
      JOIN with EventID 4688 to get user account
      IF user account is NOT IN ('SYSTEM', 'TrustedInstaller'), ALERT
- question: Did the process that wrote to a SYSTEM-level service binary have command-line arguments associated with privilege escalation?
  context: This question uses machine learning to analyze the intent of a process that modifies a critical service file. Rather than just looking at the file itself, it inspects the command line of the process that performed the write. A model trained to recognize commands used in privilege escalation can flag a write as malicious even if the payload is novel, providing an extra layer of detection.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Multi-user systems like Remote Desktop Session Hosts and Citrix servers
  - Endpoints used by developers, system administrators, and other privileged roles.
  range: last 90 days
  queries:
  - pseudocode: |
      ON file write (EventID 4663) to a SYSTEM service binary:
        GET command line of the writing process (from EventID 4688)
        INPUT command line into a trained classification model
        IF model classifies as 'privilege-escalation-related' with high confidence, ALERT
- question: Did a high-privilege service spawn a shell with commands for user creation, group modification, or credential access?
  context: This question looks for post-exploitation activity following a successful service hijack. Once an adversary controls a SYSTEM-level service, a common next step is to create new accounts, add users to administrative groups, or dump credentials. This query detects when a high-privilege service process spawns a child (like cmd.exe or powershell.exe) containing command-line keywords for these malicious actions (e.g., 'net user /add', 'lsass').
  answer_sources:
  - Windows Security Event ID 4688
  - Windows System Event ID 7036
  - Zeek conn.log
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.
  range: last 90 days
  queries:
  - pseudocode: |
      SEARCH for EventID 4688 where ParentProcess is a known SYSTEM service
      AND NewProcess is in ('cmd.exe', 'powershell.exe')
      AND CommandLine contains keywords like ('net user /add', 'net localgroup', 'lsass')
      IF match, ALERT
- question: Has a high-privilege service spawned a statistically rare child process or a child with unusually high command-line entropy?
  context: This question establishes a behavioral baseline for high-privilege services and their child processes. A service that normally never spawns child processes suddenly spawning powershell.exe is a major anomaly. Similarly, a service that normally runs simple commands via a child process suddenly running a long, complex, or obfuscated command (indicated by high entropy) is also highly suspicious.
  answer_sources:
  - Windows Security Event ID 4688
  - Windows System Event ID 7036
  - Zeek conn.log
  - Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.
  range: last 90 days
  queries:
  - pseudocode: |
      FOR EACH high-privilege service:
        BASELINE child processes and command-line entropy distribution
      ON new process creation (EventID 4688):
        IF child is rare for this parent OR command-line entropy > 98th percentile, ALERT
- question: Was a file permission change on a SYSTEM service binary by a non-admin user immediately followed by a file write from that same user?
  context: This question identifies a clear, step-by-step privilege escalation attempt. An attacker with limited rights first needs to grant themselves permission to write to a SYSTEM service's executable file. This query creates a stateful rule to detect this specific sequence: a non-administrative user changing permissions (Event ID 4670) and then immediately writing to the file (Event ID 4663), which is an unambiguous attack pattern.
  answer_sources:
  - Windows Security Event ID 4670
  - Windows Security Event ID 4663
  - File servers hosting application binaries
  - Standard end-user workstations where local administrative rights are restricted.
  range: last 90 days
  queries:
  - pseudocode: |
      DEFINE stateful rule for a 5-minute window
      TRIGGER on EventID 4670 on a SYSTEM service path by User NOT IN [Admin Groups]
      LOOK FOR subsequent EventID 4663 (file write) by same User and path
      IF sequence completes, ALERT
- question: Was a security product's service binary modified, and is the new file's digital signature invalid or from an untrusted publisher?
  context: This question targets defense evasion by directly tampering with security tools. An adversary may try to disable an EDR or AV agent by replacing its service binary. This query maintains a list of critical security service binaries and their trusted code-signing publishers. Any modification that results in an invalid, missing, or untrusted signature is a critical indicator of a defense evasion attempt.
  answer_sources:
  - Windows Security Event ID 4663
  - Windows Security Event ID 4688
  - Autoruns/Sysinternals Data
  - All endpoints and servers, with a focus on monitoring directories containing security software agents.
  range: last 90 days
  queries:
  - pseudocode: |
      MAINTAIN list of security service paths and their trusted publishers
      ON file write (EventID 4663) to these paths:
        VALIDATE digital signature of new file
        IF signature is invalid OR publisher is NOT in [Trusted Publisher Allowlist], ALERT
- question: Has a legitimate service process initiated an outbound network connection to a known C2 destination or with anomalous characteristics?
  context: This question aims to detect a hijacked service being used for command and control (C2). After replacing a service binary, an adversary's implant will call back to their server. This query correlates service processes with network logs to find connections to known malicious IPs/domains. It also looks for other C2 indicators like specific JA3/S hashes or User-Agents that are uncharacteristic for the legitimate service.
  answer_sources:
  - Windows Security Event ID 4688
  - Zeek conn.log
  - Zeek ssl.log
  - Zeek http.log
  - Zeek dns.log
  - Network egress points (Firewalls, Proxies), DNS resolvers, and host-level network logs.
  range: last 90 days
  queries:
  - pseudocode: |
      CORRELATE process events (EventID 4688) with network logs (Zeek)
      FOR connections from service processes:
        CHECK destination IP/domain against [C2 Threat Feed]
        CHECK JA3/S hash and User-Agent against [Malware IOC Feed]
        IF match, ALERT
- question: Has a service process spawned a known Living-off-the-Land Binary (LoLBin) that is not part of its normal function?
  context: Adversaries often use legitimate system tools, known as LoLBins, to carry out malicious actions and evade simple detection. This question focuses on identifying when a service process, which typically has a very predictable set of child processes, spawns a LoLBin that is out of place (e.g., spoolsv.exe spawning certutil.exe). Such a parent-child relationship is highly suspicious and indicative of defense evasion.
  answer_sources:
  - Windows Security Event ID 4688
  - Process creation logs from all Windows workstations and servers, particularly critical application servers and domain controllers.
  range: last 90 days
  queries:
  - pseudocode: |
      MONITOR process creation (EventID 4688)
      IF ParentProcess is a known service AND NewProcess is in [LoLBin Watchlist]:
        ALERT as highly suspicious parent-child relationship