name: T1497.001: System Checks
id: 3e1a0b5c-6d8e-4f7a-9b1c-0d2e3f4a5b6d
description: This playbook focuses on detecting adversary attempts to perform system checks as part of defense evasion and discovery. It addresses the challenge of identifying when malware or an attacker is trying to determine if they are operating within a virtualized or sandboxed environment, or if they are gathering information about the host system. The playbook provides investigative questions and queries to detect specific evasion techniques, such as checking for known VM artifacts (MAC addresses, registry keys, files), using specific command-line arguments, executing a rapid succession of system queries, and identifying processes that terminate prematurely after failing environment checks. It also covers discovery actions like probing for VM backdoor ports, using known reconnaissance tools, and enumerating files related to security analysis.
type: technique
related:
  - TA0005: Defense Evasion
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a process or PowerShell script being executed with command-line arguments or content that match a known list of sandbox detection strings?
    context: This question aims to identify the most direct and high-fidelity indicator of sandbox evasion: the use of specific, hardcoded strings, commands, or regular expressions that are characteristic of well-known evasion tools like Pafish or Al-Khaser. By monitoring process creation and PowerShell script block logs for these specific patterns, analysts can catch adversaries using publicly available or common evasion techniques. A direct match is a strong signal that a process is actively checking if it's running inside a controlled analysis environment.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_logs (EventID 4688) OR powershell_script_logs (EventID 4104) WHERE command_line CONTAINS any_of(watchlist_of_evasion_strings) OR script_block CONTAINS any_of(watchlist_of_evasion_strings)
  - question: Is a PowerShell script exhibiting an unusually high level of entropy, potentially indicating obfuscation of evasion logic?
    context: Adversaries often obfuscate their scripts to hide malicious logic, including sandbox detection checks. High Shannon entropy (a measure of randomness or complexity) in a script is a common byproduct of obfuscation techniques. This question focuses on establishing a baseline for normal script entropy within the environment and then flagging statistical outliers. It helps detect novel or heavily modified evasion scripts that might not match known string signatures.
    answer_sources:
      - Windows Event ID 4104
      - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH powershell_script_logs (EventID 4104) | CALCULATE entropy(script_block) | COMPARE entropy to established_baseline_99th_percentile | RETURN scripts where entropy > baseline
  - question: Is a system process like wmic.exe or reg.exe being executed with command-line arguments that are anomalous compared to its normal usage?
    context: System utilities are often abused by adversaries for 'living-off-the-land' techniques. This question uses a machine learning model (One-Class SVM or Isolation Forest) to learn the normal command-line patterns for these legitimate processes. Any execution that the model flags as an outlier is highly suspicious, as it may represent a malicious system check disguised as normal administrative activity.
    answer_sources:
      - Windows Event ID 4688
      - All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: STREAM process_creation_logs (EventID 4688) | FOR_EACH_EVENT, SCORE command_line with outlier_detection_model | RETURN events with high_anomaly_score
  - question: Has a single process rapidly accessed multiple distinct files, registry keys, or services known to be associated with virtualized environments?
    context: This question seeks to identify a common sandbox evasion behavior where malware quickly checks for a list of known VM-specific artifacts. By creating a correlation rule that looks for a single process accessing several of these indicators (like VBoxGuest.sys or vmtoolsd) in a short time frame, analysts can detect this coordinated discovery sequence with high confidence.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 7036
      - All corporate endpoints, especially developer workstations and security analysis sandbox systems.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CORRELATE process_access_events (EventIDs 4663, 4656, 7036) by ProcessGUID | WHERE object_name MATCHES vm_artifact_watchlist | COUNT distinct object_names > 3 within 60s | RETURN ProcessGUID and accessed_objects
  - question: Is any process accessing known VM-related artifacts at a rate that is statistically abnormal for the environment?
    context: While a single access to a VM-related artifact might be benign, a burst of such accesses from a single process is highly suspicious. This question establishes a baseline for how often these artifacts are accessed across the environment (which should be close to zero) and alerts on any process that significantly deviates from this norm, indicating a potential discovery sweep.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 7036
      - All corporate endpoints, especially developer workstations and security analysis sandbox systems.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_access_events (EventIDs 4663, 4656, 7036) WHERE object_name MATCHES vm_artifact_watchlist | AGGREGATE count by ProcessGUID per minute | COMPARE count to environment_baseline_99.9th_percentile | RETURN anomalous processes
  - question: Does a process exhibit a tightly clustered pattern of access to multiple VM-related artifacts, separating it from normal system activity?
    context: This question uses graph-based analysis to visualize relationships between processes and the system artifacts they access. Normal activity appears as sparse connections, while a malicious discovery process will form a small, dense cluster by connecting to many different VM-artifact nodes. This machine learning approach helps to visually and algorithmically separate coordinated, malicious discovery from benign, isolated system interactions.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4656
      - Windows Event ID 7036
      - All corporate endpoints, especially developer workstations and security analysis sandbox systems.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MODEL process-artifact access as a graph | APPLY clustering algorithm (e.g., DBSCAN) | IDENTIFY small, dense clusters with a single process and multiple VM-artifact nodes | RETURN suspicious clusters
  - question: Did a process, originating from a temporary directory, perform a VM check, terminate quickly, generate no network traffic, and was its source file deleted?
    context: This question identifies a classic evasive payload behavior sequence. The malware runs, checks the environment, and if it detects a sandbox, it aborts its mission cleanly by terminating, not making any network connections, and deleting itself to cover its tracks. A stateful correlation rule that matches this entire sequence provides very strong evidence of an attempted intrusion that was thwarted by its own evasion logic.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, particularly for phishing targets, and internet-facing servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CORRELATE events where: 1. Process (PID) created from temp dir (4688), 2. PID performs VM check, 3. PID terminates < 2min (4689), 4. No network traffic from host IP during PID lifetime (Zeek), 5. Source executable deleted (4663) | RETURN correlated event sequence
  - question: Is a short-lived process showing a statistically anomalous ratio of system interactions to network activity?
    context: Normal programs typically interact with the system to some degree and then perform a function, which often involves network communication. An evasive process that only performs system checks and then terminates will have a very high (or infinite) ratio of system queries to network connections. This question models this ratio and flags statistical outliers, catching processes whose behavior is abnormally introspective and non-communicative.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, particularly for phishing targets, and internet-facing servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR processes with lifetime < 5min, CALCULATE ratio = (system_queries + file_checks) / (network_connections + 1) | COMPARE ratio to baseline distribution (mean + 3*std_dev) | RETURN processes with outlier ratios
  - question: Has a process followed a sequence of events that deviates from the learned normal process behavior, specifically by lacking an expected network activity phase?
    context: This question uses a time-series model (like an HMM or LSTM) to learn the 'grammar' of normal process behavior (e.g., create -> read files -> network -> terminate). An evasive process that terminates after system checks but before initiating network traffic violates this learned grammar. The model will flag this sequence as highly anomalous, allowing detection of this specific evasive pattern without relying on fixed signatures or thresholds.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4689
      - Windows Event ID 4663
      - Zeek conn.log
      - User workstations, particularly for phishing targets, and internet-facing servers.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: STREAM process event sequence (4688, 4663, Zeek, 4689) into time-series_anomaly_model | RETURN sequences with a high anomaly score indicating deviation from normal state transitions
  - question: Is an endpoint attempting to connect to a known VM host-guest communication port?
    context: Some virtualization platforms use specific, non-standard network ports for communication between the host and guest machines (e.g., for backdoor I/O). Malware can attempt to connect to these ports to confirm it is inside a VM. This question looks for these highly specific and unusual connection attempts in network logs. A successful or attempted connection is a high-confidence indicator of a VM-aware threat.
    answer_sources:
      - Zeek conn.log
      - Network egress points, core switches, VDI host-only networks, and intra-VM traffic monitors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_logs (Zeek conn.log) WHERE destination_port IS_IN (vm_backdoor_port_watchlist) | RETURN connection details
  - question: Is a host generating a statistically significant spike in failed network connection attempts?
    context: When malware is probing for a sandbox's network listeners or control channels, it may generate a large number of connection attempts to various non-standard ports, most of which will fail. This question establishes a baseline for the normal rate of failed connections (e.g., TCP resets) for each host and flags any sudden, anomalous spike, which could indicate this type of network-based discovery scanning.
    answer_sources:
      - Zeek conn.log
      - Network egress points, core switches, VDI host-only networks, and intra-VM traffic monitors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_logs (Zeek conn.log) WHERE conn_state IS 'REJ' or 'RSTO' | AGGREGATE count of failed connections per host per hour | COMPARE to baseline rate for each host | RETURN hosts with statistically significant spikes
  - question: Are there anomalous network connections that a trained autoencoder model identifies as having a high reconstruction error?
    context: This question uses an autoencoder, a type of neural network, to learn the characteristics of all normal network connections (source/destination IP, port, protocol) in the environment. Any new connection that deviates significantly from this learned normality—such as one to an unusual port or an internal IP that isn't a server—will have a high 'reconstruction error' when passed through the model. This provides a way to flag novel and suspicious network activity, including potential VM detection probes.
    answer_sources:
      - Zeek conn.log
      - Network egress points, core switches, VDI host-only networks, and intra-VM traffic monitors.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: STREAM network_connection_tuples into trained_autoencoder_model | CALCULATE reconstruction_error for each connection | RETURN connections with high reconstruction_error
  - question: Is a process or PowerShell script being executed that matches the known invocation patterns of open-source discovery tools like Seatbelt or Invoke-VMEvasion?
    context: Adversaries frequently use publicly available post-exploitation tools for discovery. This question focuses on detecting the use of these tools by monitoring process command lines and PowerShell scripts for their unique execution signatures (e.g., `Seatbelt.exe -group=all`) or characteristic function names. A match provides a direct link to a known malicious or reconnaissance tool.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - All corporate endpoints and servers, particularly those managed by IT and security teams.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_logs (4688) OR powershell_script_logs (4104) WHERE command_line OR script_block MATCHES regex_library_of_discovery_tools | RETURN matching events
  - question: Is a regular user account exhibiting a pattern of discovery-related PowerShell cmdlet usage that is statistically similar to a system administrator's?
    context: System administrators frequently use discovery cmdlets (`Get-WmiObject`, etc.), while regular users do not. This question establishes distinct profiles of cmdlet usage for different user roles. It then flags as anomalous any regular user account whose activity profile suddenly starts to resemble that of a sysadmin, which could indicate a compromised account being used for reconnaissance.
    answer_sources:
      - Windows Event ID 4104
      - All corporate endpoints and servers, particularly those managed by IT and security teams.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each user, CREATE vector of discovery_cmdlet_frequencies from powershell_logs (4104) | CALCULATE similarity (e.g., cosine similarity) between user_vector and sysadmin_profile_vector | RETURN users with high similarity scores
  - question: Can a new PowerShell script be classified as 'Reconnaissance' by a machine learning model trained on script features?
    context: This question leverages a supervised machine learning model (e.g., Naive Bayes) to automate the classification of PowerShell scripts. The model is trained on a labeled dataset of benign and malicious/recon scripts, using features like cmdlet frequency, script length, and entropy. This allows for the real-time scoring and classification of new scripts, automatically flagging those that are likely intended for system discovery.
    answer_sources:
      - Windows Event ID 4104
      - All corporate endpoints and servers, particularly those managed by IT and security teams.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: STREAM powershell_script_blocks (4104) | EXTRACT features (cmdlet_freq, length, entropy) | CLASSIFY script with trained_model (e.g., Logistic Regression) | RETURN scripts classified as 'Reconnaissance'
  - question: Has an unsigned process from a temporary directory executed an excessive number of system information utilities in a short time?
    context: This question combines several suspicious indicators into a single high-confidence rule. A legitimate process is typically signed and runs from a standard location. An unsigned process, running from a user-writable directory like `%TEMP%`, that rapidly executes utilities like `wmic.exe` or `systeminfo.exe` is highly likely to be a malicious payload performing initial system reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4104
      - All endpoints and servers, with a focus on monitoring newly created processes.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_logs (4688) WHERE process_is_unsigned AND path is in (%APPDATA%, %TEMP%) | CORRELATE child process creations (wmic.exe, systeminfo.exe) by parent_PID | RETURN parent_PID if child_process_count > 5 within 60s
  - question: Is a new process querying a wide and varied set of WMI classes or registry hives, resulting in high entropy?
    context: A normal process usually queries a few specific, related parts of the system. A discovery script, however, often probes many different and unrelated areas to build a comprehensive picture of the host. This question measures the Shannon entropy of the set of queries made by a process. A high entropy score indicates this broad, unfocused querying behavior, which is a statistical marker for reconnaissance.
    answer_sources:
      - Windows Event ID 4656
      - Windows Event ID 4104
      - All endpoints and servers, with a focus on monitoring newly created processes.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each new process, COLLECT set of WMI classes or registry hives queried within 60s | CALCULATE entropy of the set | COMPARE entropy to baseline_99th_percentile | RETURN processes with high entropy
  - question: Does a newly created process belong to a small, distinct cluster of anomalous behavior based on its initial system interactions?
    context: This question uses unsupervised clustering algorithms (like K-Means or DBSCAN) to group new processes based on their initial behavior (e.g., number of child processes, WMI queries, registry queries). Most processes will fall into a large cluster representing normal behavior. Malicious processes engaged in intense discovery will form their own small, separate clusters due to their unique behavioral features. Investigating these outlier clusters is an effective way to find anomalous activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4656
      - Windows Event ID 4104
      - All endpoints and servers, with a focus on monitoring newly created processes.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each new process, CREATE feature vector (child_process_count, wmi_query_count, etc.) | APPLY clustering algorithm (e.g., DBSCAN) to all vectors | IDENTIFY and investigate small outlier clusters
  - question: Is a process attempting to access files or directories with names related to security analysis tools or malware research?
    context: Malware sometimes checks for the presence of security tools (like Wireshark, Process Monitor) or artifacts of analysis (like folders named 'malware' or 'samples') to determine if it's on an analyst's machine. This question involves monitoring file system access logs for attempts to touch any file or directory whose name appears on a watchlist of these security-related keywords. A match is a strong indicator of environment-aware malware.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User profile directories (Desktop, Downloads), temporary file locations, and dedicated security analysis VM environments.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH file_access_logs (4663) WHERE object_name CONTAINS any_of(security_tool_keyword_watchlist) | RETURN matching access events
  - question: Is a process suddenly accessing file paths that are historically rare for that user or host?
    context: Users and systems exhibit routine behavior, accessing a predictable set of file paths. A malicious process, however, will often explore the file system, accessing paths that are unusual for that context. This question establishes a baseline of normal file path access and calculates a rarity score for each new access. A process that generates a series of high-rarity access events is statistically anomalous and may be conducting file system reconnaissance.
    answer_sources:
      - Windows Event ID 4663
      - User profile directories (Desktop, Downloads), temporary file locations, and dedicated security analysis VM environments.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file_access_event (4663), CALCULATE rarity_score based on historical access frequency for that user/host | FOR each process, CALCULATE moving average of rarity_scores | RETURN processes with a spike in average rarity
  - question: Does a file access event receive a high 'suspicious' score from a machine learning classifier?
    context: This question uses a supervised classification model to provide a consolidated risk score for each file access event. The model considers multiple features simultaneously (Is the process unsigned? Is it running from %TEMP%? Is the path rare? Does it contain a keyword?). This holistic approach is more robust than any single rule and allows analysts to prioritize alerts based on a model-driven assessment of risk for each individual file access.
    answer_sources:
      - Windows Event ID 4663
      - Windows Event ID 4688
      - User profile directories (Desktop, Downloads), temporary file locations, and dedicated security analysis VM environments.
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file_access_event (4663), CREATE feature vector (is_unsigned, is_temp_path, is_rare, etc.) | SCORE the event with a trained_classifier (e.g., Random Forest) | RETURN events with a high 'suspicious' score