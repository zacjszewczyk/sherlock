name: T1505.001: SQL Stored Procedures
id: 8d3e6f9a-5b1c-4e8f-9a2d-7c6b5a4d3e2f
description: |
  This playbook helps determine if an adversary has established persistence using SQL stored procedures. Investigative focus is placed on detecting anomalous behaviors originating from the primary SQL server process (sqlservr.exe), which could indicate malicious stored procedure execution. Key indicators include sqlservr.exe initiating outbound network connections to known command and control (C2) servers or geographically suspicious locations; spawning unusual child processes like command shells; writing executable files to non-standard locations; or modifying server configurations to enable high-risk features like xp_cmdshell.
type: technique
related:
  - TA0003: Persistence
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is the SQL Server process (sqlservr.exe) making outbound network connections to known command and control (C2) servers?
    context: |
      This question aims to detect a common persistence mechanism where a compromised SQL server, via a stored procedure, initiates a connection back to an adversary's infrastructure. By filtering for network connections from 'sqlservr.exe' and comparing the destination against a high-confidence threat intelligence feed, analysts can identify direct C2 communication channels.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - SQL server hosts
      - Enterprise edge firewalls
      - Network sensor appliances (e.g., Zeek)
      - Threat intelligence platform feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH network_connection_logs 
          WHERE source_process = 'sqlservr.exe' 
          AND destination_ip IN threat_intel_feed(C2_servers)
  - question: Are there any statistically rare outbound network connections from the SQL Server process (sqlservr.exe)?
    context: |
      Adversaries may use novel or infrequently contacted domains for C2 to evade signature-based detection. This question focuses on identifying anomalous connections by calculating the historical rarity of destination IP, domain, and port combinations for each SQL server. A connection to a destination that is very infrequent (e.g., in the bottom 5th percentile) for that specific server could indicate a newly established C2 channel.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - SQL server hosts
      - Enterprise edge firewalls
      - Network sensor appliances (e.g., Zeek)
      - Threat intelligence platform feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH network_connection_logs WHERE source_process = 'sqlservr.exe' 
          CALCULATE frequency(destination_ip, destination_port) over last 90 days 
          FILTER frequency < 5th_percentile
  - question: Can we predict if a new network connection from the SQL Server process (sqlservr.exe) is malicious using a machine learning model?
    context: |
      This question leverages a machine learning classification model to proactively identify malicious connections that may not be caught by symbolic or simple statistical rules. By training a model on features like connection duration, data volume, destination port, and threat intelligence matches, analysts can assign a risk score to new connections from 'sqlservr.exe', allowing for the detection of more subtle or complex C2 patterns.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 5156
      - SQL server hosts
      - Enterprise edge firewalls
      - Network sensor appliances (e.g., Zeek)
      - Threat intelligence platform feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          INPUT new_connection_from_sqlservr 
          EXTRACT features(duration, bytes_sent, port, ja3_hash, cti_match) 
          PREDICT is_malicious with classification_model
  - question: Is the SQL Server process (sqlservr.exe) spawning suspicious child processes like command shells or scripting engines?
    context: |
      A compromised SQL stored procedure, such as one using 'xp_cmdshell', can be used to execute arbitrary commands on the host system. This question looks for direct evidence of this activity by monitoring for process creation events where 'sqlservr.exe' is the parent. Alerting on the creation of command shells (cmd.exe, powershell.exe) or processes with suspicious command-line arguments (e.g., 'IEX', '-enc') can uncover attempts to move laterally or execute further payloads.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) agents on SQL servers
      - Windows Security Event Logs on SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_logs 
          WHERE parent_process = 'sqlservr.exe' 
          AND (child_process IN ('cmd.exe', 'powershell.exe', 'pwsh.exe', 'rundll32.exe') OR command_line CONTAINS ('IEX', '-enc'))
  - question: Is the SQL Server process (sqlservr.exe) spawning statistically rare child processes or processes with unusually complex command lines?
    context: |
      To evade simple process name watchlists, adversaries might use custom or renamed tools. This question applies statistical analysis to detect such evasions. By baselining normal child process activity for 'sqlservr.exe', analysts can flag any process that is a 'first seen' occurrence or has a command line with high entropy (a measure of randomness), which often indicates obfuscation or encoding.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) agents on SQL servers
      - Windows Security Event Logs on SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH process_creation_logs WHERE parent_process = 'sqlservr.exe' 
          GROUP BY child_process, command_line 
          FILTER is_first_seen OR shannon_entropy(command_line) > 95th_percentile
  - question: Can an anomaly detection model identify suspicious child processes spawned by the SQL Server process (sqlservr.exe)?
    context: |
      This question uses an unsupervised machine learning model (like a one-class SVM or isolation forest) to identify anomalous process creation events without relying on pre-defined rules. The model is trained on the features of legitimate child processes spawned by 'sqlservr.exe'. Any new process that significantly deviates from this learned 'normal' profile is flagged as an outlier, potentially indicating malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) agents on SQL servers
      - Windows Security Event Logs on SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          INPUT new_process_from_sqlservr 
          EXTRACT features(process_name, command_line_length, argument_structure) 
          PREDICT is_anomaly with one_class_svm_model
  - question: Is the SQL Server process (sqlservr.exe) connecting to IP addresses in countries not associated with normal business operations?
    context: |
      This question helps identify potential C2 or data exfiltration channels by focusing on the geographic location of the destination IP. By maintaining an allowlist of countries where the business operates, any connection from 'sqlservr.exe' to a destination outside this list can be flagged as suspicious, providing a strong signal of unauthorized activity.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Network sensor appliances (e.g., Zeek)
      - SQL server hosts
      - Internal DNS server logs
      - Geolocation intelligence feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH network_connection_logs WHERE source_process = 'sqlservr.exe' 
          ENRICH with_geolocation(destination_ip) 
          FILTER destination_country NOT IN business_country_allowlist
  - question: Are there outbound connections from the SQL Server process (sqlservr.exe) with statistically abnormal data volumes or durations?
    context: |
      Data exfiltration or long-running interactive C2 sessions can manifest as statistical outliers in network connection metrics. This question involves baselining normal connection behavior (bytes sent/received, duration) for each SQL server. An alert is triggered if a new connection's metrics exceed a statistical threshold (e.g., 3 standard deviations from the mean), pointing to activity that is significantly different from the norm.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Network sensor appliances (e.g., Zeek)
      - SQL server hosts
      - Internal DNS server logs
      - Geolocation intelligence feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH network_connection_logs WHERE source_process = 'sqlservr.exe' 
          CALCULATE baseline_stats(bytes_sent, duration) over last 30 days 
          FILTER current_connection > (mean + 3*std_dev)
  - question: Does the daily volume of outbound data or the number of unique destination IPs from the SQL Server process (sqlservr.exe) deviate from forecasted trends?
    context: |
      This question uses time-series forecasting to detect anomalies at a macro level. By modeling the expected daily data volume and unique IP count from 'sqlservr.exe', the system can identify days where activity significantly deviates from the predicted range. Such deviations could indicate a large-scale data exfiltration event or a new wave of C2 beaconing.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Windows Event ID 5156
      - Network sensor appliances (e.g., Zeek)
      - SQL server hosts
      - Internal DNS server logs
      - Geolocation intelligence feeds
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          INPUT daily_aggregate_data_from_sqlservr 
          PREDICT expected_volume, expected_unique_ips with time_series_model 
          FILTER actual_value outside confidence_interval
  - question: Is the SQL Server process (sqlservr.exe) creating executable files in non-standard directories?
    context: |
      Adversaries may use a compromised SQL server to drop tools or payloads onto the file system. This question seeks to detect this behavior by monitoring for file creation events initiated by 'sqlservr.exe'. An alert is generated if 'sqlservr.exe' writes a file with a potentially executable extension (like .exe, .dll, .ps1) to a location outside of its expected database, log, or backup paths, such as C:\Windows\Temp.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - EDR File Creation Logs
      - File systems of SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH file_creation_logs 
          WHERE process = 'sqlservr.exe' 
          AND file_extension IN ('.exe', '.dll', '.ps1', '.bat', '.vbs') 
          AND target_path NOT IN (sql_data_paths, sql_log_paths)
  - question: Is the SQL Server process (sqlservr.exe) creating files with unusually random-looking names?
    context: |
      To avoid static filename-based detections, adversaries often use randomized names for their dropped payloads. This question uses the Shannon entropy of filenames to spot this. By establishing a baseline for the entropy of normal filenames created by 'sqlservr.exe' (e.g., log files), an alert can be triggered for any new file whose name has an unusually high entropy, suggesting a randomized, potentially malicious payload.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - EDR File Creation Logs
      - File systems of SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH file_creation_logs WHERE process = 'sqlservr.exe' 
          CALCULATE shannon_entropy(filename) 
          FILTER entropy > 95th_percentile_of_baseline
  - question: Can a machine learning model classify file creation events by the SQL Server process (sqlservr.exe) as benign or suspicious?
    context: |
      This question employs a supervised classification model to distinguish between legitimate and malicious file write activities. By training a model on features like file path, extension, and filename entropy, it can learn the characteristics of normal behavior. The model can then predict the likelihood that a new file creation event by 'sqlservr.exe' is suspicious, catching complex cases that rules might miss.
    answer_sources:
      - Sysmon Event ID 11
      - Windows Event ID 4663
      - EDR File Creation Logs
      - File systems of SQL servers
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          INPUT new_file_creation_event 
          EXTRACT features(file_path, extension, entropy, path_depth) 
          PREDICT is_suspicious with classification_model
  - question: Has a high-risk SQL Server configuration option, like 'xp_cmdshell' or 'clr enabled', been enabled?
    context: |
      Enabling powerful but risky features like 'xp_cmdshell' (which allows command execution) or CLR integration is a key step for an adversary to establish persistence or execute code. This question directly monitors for changes to these specific configuration settings, typically in the Windows Registry. An immediate alert upon enabling these features, especially if not correlated with a valid change ticket, is a high-fidelity indicator of compromise.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - SQL Server Audit Logs
      - Windows Registry on SQL Servers
      - SQL Server's internal audit logging system
      - Change management ticket database
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH registry_modification_logs 
          WHERE (registry_key = '...\\Configuration\\xp_cmdshell' AND value = 1) OR (registry_key = '...\\Configuration\\clr enabled' AND value = 1) 
          CORRELATE with change_management_system
  - question: Has there been a statistically unusual number of configuration changes on any SQL server?
    context: |
      While a single configuration change might be malicious, a burst of changes could indicate an adversary exploring or altering the environment. This question establishes a baseline for the normal frequency of configuration changes on each server. An alert is triggered if the number of changes in a given period (e.g., 24 hours) significantly exceeds this baseline, flagging the host for investigation.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - SQL Server Audit Logs
      - Windows Registry on SQL Servers
      - SQL Server's internal audit logging system
      - Change management ticket database
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          SEARCH config_change_logs 
          AGGREGATE count by host, 24h_window 
          CALCULATE baseline_stats(count) 
          FILTER current_count > (mean + 3*std_dev)
  - question: Can a machine learning model predict if a SQL Server configuration change is unauthorized?
    context: |
      This question uses a classification model to assess the legitimacy of a configuration change. By training the model on contextual features—such as the user account making the change, the time of day, and whether it falls within a planned maintenance window—it can learn to distinguish between routine administrative tasks and unauthorized modifications. This provides a more nuanced risk assessment than simple rule-based alerts.
    answer_sources:
      - Sysmon Event ID 13
      - Windows Event ID 4657
      - SQL Server Audit Logs
      - Windows Registry on SQL Servers
      - SQL Server's internal audit logging system
      - Change management ticket database
    range: last 90 days
    queries:
      - type: pseudocode
        query: |
          INPUT new_config_change_event 
          EXTRACT features(user, time_of_day, in_maintenance_window, config_option) 
          PREDICT is_unauthorized with classification_model