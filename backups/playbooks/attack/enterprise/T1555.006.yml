name: T1555.006: Cloud Secrets Management Stores
id: a4e8c1f0-5d6b-4b9c-8e7f-1a2b3c4d5e6f
description: This playbook helps determine if an adversary has accessed credentials stored in cloud secrets management services like AWS Secrets Manager, Azure Key Vault, or GCP Secret Manager. It provides investigative questions to detect various indicators of compromise, including secret access from known malicious IP addresses or by unauthorized principals, command-line activity showing secret enumeration and scripted retrieval, statistically unusual access patterns such as a principal accessing a secret for the first time, high-volume retrieval indicative of bulk credential dumping, and secret access events immediately followed by suspicious outbound network connections suggesting data exfiltration.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are cloud secrets being accessed from known malicious IP addresses or by principals not explicitly authorized for that secret?
    context: This question aims to detect straightforward credential abuse. Adversaries often use compromised infrastructure (listed on threat intelligence feeds) or stolen credentials. Cross-referencing access events with a list of known malicious IPs provides a high-fidelity signal of external threats. Simultaneously, checking against a strict allow-list of which principals are permitted to access specific secrets can detect internal misuse or compromised accounts operating outside of their expected behavior.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane API endpoints
      - Network egress points
      - Virtual Private Cloud (VPC) flow logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH cloud_audit_logs WHERE event='secret_retrieval' | JOIN source_ip WITH threat_intel_feed | JOIN (principal, secret) WITH allow_list | ALERT IF threat_intel_match=true OR allow_list_match=false
  - question: Is a principal accessing secrets from a network (ASN) that is statistically rare for them?
    context: This question helps identify access from unusual locations. Principals, especially automated service roles, typically operate from a predictable set of networks (ASNs). An adversary using compromised credentials from a different geographic or network location will likely generate an access event from an ASN that is rare or has never been seen for that principal. Flagging low-frequency ASNs serves as a strong indicator of a potential account takeover.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane API endpoints
      - Network egress points
      - Virtual Private Cloud (VPC) flow logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH secret_access_event | GET historical_ASN_distribution for principal | CALCULATE frequency of current_ASN in distribution | ALERT IF frequency < 5th_percentile
  - question: Does a secret access event exhibit a combination of characteristics that a machine learning model flags as suspicious?
    context: This question moves beyond single indicators to a holistic risk assessment. A single anomaly might be benign, but a combination of several—such as an unusual time, a rare network origin, and a new user-agent—is highly suspicious. A machine learning model can learn these complex patterns from historical data and assign a suspicion score to new events, allowing for the detection of sophisticated attacks that might otherwise evade simpler rule-based alerts.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane API endpoints
      - Network egress points
      - Virtual Private Cloud (VPC) flow logs
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH secret_access_event | EXTRACT features (time, ASN_rarity, user_agent_rarity, etc.) | PREDICT suspicion_score with ML_model | ALERT IF suspicion_score > 0.9
  - question: Is there evidence of command-line usage for secret enumeration or scripted retrieval?
    context: This question looks for direct evidence of an adversary interacting with cloud secret stores via command-line interface (CLI) tools. Adversaries often use enumeration commands (like 'list-secrets') to discover available credentials before attempting to access them. They may also use scripting features within their commands to automate the retrieval of many secrets at once. Detecting these specific command patterns in process creation logs is a strong indicator of active, hands-on-keyboard credential access activity.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Container orchestration platforms
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_logs WHERE process_name IN ('aws.exe', 'az', 'gcloud') AND command_line MATCHES ('list-secrets', '--query', '| jq') | ALERT on match
  - question: Is there an abnormally high ratio of secret retrieval to secret enumeration for any given host and user?
    context: This question establishes a behavioral baseline to detect unusual follow-up activity. Normally, enumeration (listing secrets) might be followed by retrieval of one or two needed secrets. An adversary, however, after discovering a trove of secrets via enumeration, may attempt to retrieve a large number of them. This would cause a spike in the ratio of retrieval calls to enumeration calls. Monitoring this ratio and alerting on statistical deviations (e.g., a high Z-score) can catch this reconnaissance-to-collection pattern.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Container orchestration platforms
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH 1-hour_window, (host, user) | CALCULATE ratio = count(GetSecretValue) / count(ListSecrets) | GET historical_baseline_ratio (avg, stddev) | CALCULATE z_score | ALERT IF z_score > 3
  - question: Has a sequence of command-line executions occurred that is statistically improbable or matches a known malicious pattern?
    context: This question applies advanced sequence analysis to detect malicious workflows. Legitimate users and processes tend to execute commands in predictable sequences. An adversary's actions—such as listing secrets, retrieving them in a loop, and then exfiltrating them with a tool like 'curl'—create a command sequence that is highly anomalous. An LSTM or Transformer model trained on normal command histories can detect these novel, low-probability sequences, providing a powerful method for identifying sophisticated, multi-step attacks.
    answer_sources:
      - Windows Event ID 4688
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Container orchestration platforms
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH new_command_event | UPDATE user_command_sequence | CALCULATE probability of sequence with ML_model | ALERT IF probability < threshold
  - question: Has a principal (user or role) accessed a specific secret for the very first time?
    context: This question is designed to catch the initial moment of a potential credential compromise. Service accounts and users typically access a consistent, predictable set of secrets required for their function. When a principal suddenly accesses a secret it has never touched before, it can be a critical red flag. This could indicate that an attacker has compromised the account and is now exploring the environment to escalate privileges or access sensitive data. Tracking and alerting on this "first-time access" is a simple but highly effective detection strategy.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Cloud provider control plane
      - Authentication logs
      - Developer workstations
      - CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH secret_access_event (principal, secret) | LOOKUP (principal, secret) in historical_access_table | IF NOT found, ALERT 'First Time Access' and ADD to table
  - question: Is a principal accessing a secret with an unusual context, such as from a new country or at an odd time?
    context: This question focuses on contextual anomalies to identify account misuse. Even if a principal is authorized to access a secret, the context of that access matters. An employee who always works from the US during business hours suddenly accessing a secret from an Eastern European IP address at 3 AM is highly suspicious. By profiling normal access patterns (geography, user-agent, time-of-day) for each principal and scoring deviations, this method can effectively flag compromised accounts being used by an adversary.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Cloud provider control plane
      - Authentication logs
      - Developer workstations
      - CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH secret_access_event | COMPARE access_attributes (country, user_agent, hour) with principal's historical_profile | CALCULATE risk_score based on deviations | ALERT IF risk_score > threshold
  - question: Does a secret access event appear as an outlier according to an unsupervised anomaly detection model?
    context: This question leverages machine learning to find "unknown unknowns" in secret access patterns. While rule-based methods look for specific known-bad indicators, an unsupervised model like an Isolation Forest learns the multi-dimensional signature of "normal" access. It can then flag any event that doesn't conform to this learned normality, even if the reason for the deviation isn't immediately obvious. This is useful for detecting novel attack techniques that don't match any pre-defined rules.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Cloud provider control plane
      - Authentication logs
      - Developer workstations
      - CI/CD servers
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH secret_access_event | FEED features to Isolation_Forest_model | ALERT IF model_output is 'anomaly'
  - question: Is a single principal or source IP address retrieving an unusually high volume of secrets in a short time?
    context: This question aims to detect bulk credential dumping. Legitimate applications and users typically access only the few secrets they need at a given time. An adversary who has gained access, however, will often try to exfiltrate as many credentials as possible, as quickly as possible. This results in a high-volume burst of secret retrieval API calls from a single source. A simple sliding-window counter that alerts on a static threshold of events (e.g., >20 retrievals in 10 minutes) is an effective way to catch this brute-force behavior.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane
      - VPC flow logs
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: COUNT secret_retrieval_events by (principal, source_ip) in 10-minute sliding_window | ALERT IF count > 20
  - question: Is a principal accessing a number of distinct secrets that is statistically anomalous compared to their own baseline?
    context: This question provides a more tailored approach to detecting bulk credential access. A static threshold might be too noisy for a busy service account but not sensitive enough for a human user. By establishing a personalized baseline (average and standard deviation) for each principal, we can detect when their behavior deviates significantly from their own norm. If a user who normally accesses 2 distinct secrets per hour suddenly accesses 15, this would trigger a high Z-score alert, indicating a likely compromise, regardless of any static, global threshold.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane
      - VPC flow logs
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH hour, principal | COUNT distinct secrets accessed | GET historical baseline (avg, stddev) for principal | CALCULATE z_score for current count | ALERT IF z_score > 3
  - question: Is the rate of secret access for a principal significantly higher than the forecasted rate from a time-series model?
    context: This question applies sophisticated time-series analysis to detect subtle spikes in activity for high-volume principals where simple baselines are insufficient. For a CI/CD service account with complex but regular daily and weekly patterns of secret access, a time-series model (like Prophet) can learn this seasonality. The model can then forecast the expected range of activity for any given minute. An alert is generated only if the actual activity exceeds the model's predicted upper bound, providing a highly accurate method for detecting anomalous spikes while filtering out predictable, benign fluctuations.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Zeek conn.log
      - Cloud provider control plane
      - VPC flow logs
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH minute | GET actual_access_count for principal | GET forecasted_count_and_confidence_interval from Prophet_model | ALERT IF actual_access_count > forecasted_upper_bound
  - question: After a secret was retrieved, did the source host make a network connection to a known malicious destination?
    context: This question directly links credential access to potential data exfiltration by correlating cloud and network logs. An adversary's goal after obtaining a secret is often to use it or send it to a command-and-control server. This correlation search looks for that specific pattern: a secret retrieval event from a host, followed shortly by an outbound connection from that same host to an IP address on a threat intelligence list. A positive match is a very strong signal of an active compromise and data exfiltration.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: JOIN secret_retrieval_logs with network_logs ON source_ip within 5 minutes | LOOKUP destination_ip in threat_intel_feed | ALERT IF match_found
  - question: After a secret was retrieved, did the source host connect to a destination it has never connected to before?
    context: This question hunts for data exfiltration to novel destinations. Instead of relying solely on threat intelligence, this method establishes a historical baseline of "normal" outbound network destinations for each host. When a secret access event occurs, the host's subsequent network activity is monitored. If it makes a connection to a domain or IP address that it has never been seen contacting before, it raises an alert. This can detect exfiltration to newly stood-up adversary infrastructure that is not yet on any blocklist.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: ON secret_retrieval(host) | MONITOR outbound connections from host for 10 mins | FOR EACH connection(dest_ip) | LOOKUP dest_ip in host's historical_connections_baseline | ALERT IF dest_ip is not found
  - question: Does a secret access event form part of a larger, anomalous sequence of interactions between users, hosts, and network destinations?
    context: This question uses graph-based analysis to see the "big picture" of an attack. Individual events can be viewed as nodes (user, host, secret, destination IP) and interactions as edges in a graph. Legitimate activity forms common, recurring subgraphs. An attack, such as a user accessing a host, retrieving a secret, and connecting to a pastebin site, creates a rare or entirely new subgraph pattern. Graph-based anomaly detection models can learn the normal graph structures and alert when these anomalous interaction chains appear, revealing the entire attack path rather than just isolated events.
    answer_sources:
      - AWS CloudTrail
      - Azure Activity Logs
      - GCP Audit Logs
      - Windows Event ID 4688
      - Windows Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer workstations
      - CI/CD servers
      - Cloud-hosted virtual machines
      - Network egress points
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FOR EACH new_event (user, host, secret, dest_ip) | ADD nodes and edges to interaction_graph | ANALYZE recent subgraphs for rarity using graph_ML_model | ALERT IF rare_pattern_detected