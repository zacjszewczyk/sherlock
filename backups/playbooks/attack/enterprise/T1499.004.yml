name: T1499.004: Application or System Exploitation
id: 7e5a1b3c-9d6f-4e8a-b1c3-d4e5f6a7b8c9
description: This playbook focuses on detecting an adversary's attempts to impact service availability by exploiting applications or systems. It covers various methods, including network-based Denial-of-Service (DoS) attacks using known exploit payloads, resource exhaustion techniques like 'fork bombs' or 'zip bombs' leading to application crashes, overwhelming system resources to cause crashes or restarts, and generating anomalous network traffic patterns to render services unavailable. The playbook also addresses identifying widespread, coordinated crashes across a fleet of similar assets.
type: technique
related:
  - TA0040: Impact
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are IDS signatures for known DoS tools or CVE exploit payloads being triggered in network monitoring logs?
    context: This question seeks to find direct evidence of a DoS attack by looking for alerts from an Intrusion Detection System (IDS). Signatures for tools like Slowloris or R.U.D.Y., or for specific Common Vulnerabilities and Exposures (CVEs), provide high-confidence indicators that an attacker is using a known method to disrupt service.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek http.log
      - Windows Event ID 1000
      - Windows Event ID 1001
      - DMZ network segment
      - Public-facing web servers
      - Internet gateways
      - Load balancers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH Zeek notice.log
          WHERE notice_type IN (known_dos_tool_signatures) OR payload_cve IN (known_dos_cve_exploits)
          TRIGGER ALERT
  - question: For services targeted by potential DoS activity, is there a statistically significant increase in connection duration?
    context: This question investigates a common side effect of certain DoS attacks, where connections are held open for an abnormally long time to exhaust server resources. By comparing the current 95th percentile of connection duration to a historical baseline, we can statistically identify anomalous behavior that may indicate a resource-based DoS attack, even without a specific signature match.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek http.log
      - Windows Event ID 1000
      - Windows Event ID 1001
      - DMZ network segment
      - Public-facing web servers
      - Internet gateways
      - Load balancers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each destination_service flagged by DoS notice:
            CALCULATE current_95p_duration from conn.log over last 1 hour
            CALCULATE baseline_mean, baseline_stddev of 95p_duration over last 30 days
            IF current_95p_duration > (baseline_mean + 3 * baseline_stddev)
            THEN TRIGGER ALERT
  - question: Is there an anomalous spike in the frequency of DoS-related alerts that deviates from forecasted normal patterns?
    context: This question uses time series forecasting to establish a baseline of 'normal' DoS alert activity. An observed count of alerts that significantly exceeds the model's predicted upper bound suggests an unusual and potentially coordinated attack campaign, helping to distinguish a real incident from random background noise or false positives.
    answer_sources:
      - Zeek conn.log
      - Zeek notice.log
      - Zeek http.log
      - Windows Event ID 1000
      - Windows Event ID 1001
      - DMZ network segment
      - Public-facing web servers
      - Internet gateways
      - Load balancers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MODEL DoS_notice_counts_per_minute with ARIMA/Prophet
          FORECAST expected_count and upper_confidence_bound
          IF current_count > upper_confidence_bound
          THEN TRIGGER ALERT
  - question: Has a file with an extremely high compression ratio, indicative of a 'zip bomb', been transferred over the network?
    context: This question looks for 'zip bombs,' which are malicious archive files designed to crash or disable the program or system reading them by consuming excessive resources during decompression. Detecting a file where the uncompressed size is orders of magnitude larger than its transferred size is a strong, symbolic indicator of this type of resource exhaustion attack.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1000
      - Critical application servers
      - User workstations
      - File servers
      - Web servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH Zeek files.log
          WHERE mime_type IN ('application/zip', 'application/gzip')
          AND total_bytes > (seen_bytes * 1000)
          TRIGGER ALERT
  - question: Has any host experienced a statistically unusual burst of child process creation, suggesting a 'fork bomb'?
    context: This question aims to detect 'fork bombs,' a classic denial-of-service attack where a process rapidly replicates itself to deplete available system resources, leading to a system crash or freeze. By establishing a historical baseline for process creation and alerting on significant deviations, we can identify this anomalous behavior on a per-host basis.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1000
      - Critical application servers
      - User workstations
      - File servers
      - Web servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each host, parent_process_name:
            CALCULATE 30-day baseline distribution of child_processes per 1-second window
            MONITOR current child_process count from Event ID 4688
            IF current_count > 99th_percentile_of_baseline
            THEN TRIGGER ALERT
  - question: Can we predict which newly transferred files are likely to cause an application crash based on their characteristics?
    context: This question uses a machine learning classifier to proactively identify potentially malicious files that could induce a crash. By training a model on features of files that were historically associated with crashes (e.g., compression ratio, file size), the system can learn to flag new, suspicious files before they are processed, providing an early warning of an impending availability impact.
    answer_sources:
      - Windows Event ID 4688
      - Zeek files.log
      - Windows Event ID 1000
      - Critical application servers
      - User workstations
      - File servers
      - Web servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          TRAIN classifier on historical file_log features (size, ratio) and crash data (Event ID 1000)
          APPLY model to new files observed in files.log
          IF model_prediction == 'crash-inducing'
          THEN TRIGGER ALERT
  - question: Have any critical assets logged a 'Resource-Exhaustion-Detector' event (Windows Event ID 2004)?
    context: This question focuses on a high-fidelity, explicit indicator of resource depletion from the Windows operating system itself. Event ID 2004 signifies that the system is running low on virtual memory. An alert on this event, especially on a critical server, is a direct warning of a potential availability issue that requires immediate investigation.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 2004
      - Windows Event ID 6006
      - Windows Event ID 41
      - Database servers
      - Virtualization hosts
      - Terminal servers
      - Domain Controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH Windows Event Logs
          WHERE EventID == 2004 AND hostname IN (critical_asset_list)
          TRIGGER ALERT
  - question: Is there a statistically significant increase in the rate of resource exhaustion events on any critical host?
    context: This question moves beyond a single event to look for a trend. A sudden, statistically significant spike in the rate of resource exhaustion events (Event ID 2004) compared to its historical baseline indicates a sustained problem, rather than a transient blip. This can help identify an ongoing attack or a severe performance degradation issue.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 2004
      - Windows Event ID 6006
      - Windows Event ID 41
      - Database servers
      - Virtualization hosts
      - Terminal servers
      - Domain Controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each critical_host:
            CALCULATE historical_mean, historical_stddev of EventID 2004 rate per 5-min interval
            CALCULATE current_rate
            IF current_rate > (historical_mean + 3 * historical_stddev)
            THEN TRIGGER ALERT
  - question: Is there a predictive correlation between spikes in resource exhaustion events and subsequent system crashes?
    context: This question uses time series analysis to determine if resource exhaustion events (Event ID 2004) are a reliable leading indicator for system crashes (Event ID 41/6006) on a given host. If a strong correlation is found with a consistent time lag, it can be used to build a predictive model that alerts on resource spikes to preemptively warn of an impending crash.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 2004
      - Windows Event ID 6006
      - Windows Event ID 41
      - Database servers
      - Virtualization hosts
      - Terminal servers
      - Domain Controllers
      - Critical application servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each host:
            ANALYZE time series cross-correlation between EventID 2004 count and crash events (41/6006)
            IF strong positive correlation exists at a consistent time lag (e.g., 1-5 mins)
            THEN CREATE PREDICTIVE ALERT based on that lag
  - question: Is any single source IP generating an excessive number of requests per second to a specific service?
    context: This question looks for a simple, brute-force application-layer DoS attack. A single client overwhelming a service with a high volume of requests is a classic attack pattern. Setting a hard threshold for request rates provides a straightforward method to detect this type of unsophisticated but potentially effective attack.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateways
      - Load balancers
      - Public-facing API endpoints
      - DNS servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH Zeek http.log
          GROUP BY source_ip, destination_uri
          COUNT requests per second
          IF count > 100
          THEN TRIGGER ALERT
  - question: Has the diversity of source IP addresses connecting to a public service dropped to a statistically anomalous low?
    context: This question aims to detect DoS or DDoS attacks by analyzing the distribution of source IP addresses. Normal traffic to a public service comes from many different sources. In many DoS scenarios, traffic becomes dominated by one or a few sources. A sharp drop in Shannon entropy, which measures this diversity, is a strong statistical indicator of such an attack.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateways
      - Load balancers
      - Public-facing API endpoints
      - DNS servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each public_service:
            CALCULATE 7-day baseline distribution of source_ip_entropy per 1-minute window
            CALCULATE current_entropy
            IF current_entropy < 5th_percentile_of_baseline
            THEN TRIGGER ALERT
  - question: Does network connection data contain a new, dense cluster of anomalous connections indicative of a DoS attack?
    context: This question uses unsupervised machine learning to find 'unusual' patterns in network traffic without pre-defined signatures. A DoS attack often creates a large volume of connections with similar, atypical characteristics (e.g., very short duration, no data transferred). A clustering algorithm like DBSCAN can automatically group these connections into a new, dense cluster or flag them as anomalies, revealing the attack pattern.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek dns.log
      - Internet gateways
      - Load balancers
      - Public-facing API endpoints
      - DNS servers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          APPLY DBSCAN clustering to conn.log features (duration, bytes, protocol, state)
          IF new dense cluster is identified OR significant number of anomalies appear
          THEN TRIGGER INVESTIGATION
  - question: Has a significant percentage of assets in a defined group experienced an unexpected restart within a short time frame?
    context: This question seeks to identify a widespread impact event, such as the exploitation of a vulnerability common to a fleet of assets (e.g., all Domain Controllers). An alert based on a percentage threshold (e.g., >10%) of a group restarting unexpectedly helps to quickly flag a coordinated or systemic issue, distinguishing it from isolated, random failures.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 6005
      - Windows Event ID 6006
      - Windows Event ID 41
      - All enterprise servers
      - All user workstations
      - Virtual Desktop Infrastructure (VDI) pools
      - Kubernetes nodes
      - Change management database
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each asset_group:
            COUNT hosts with unexpected restart (EventID 41 or 6005 without preceding 6006) in last 15 mins
            CALCULATE percentage_of_group = count / total_hosts_in_group
            IF percentage_of_group > 0.10
            THEN TRIGGER ALERT
  - question: Is the hourly count of application crashes for an asset group statistically higher than its historical baseline, excluding planned maintenance?
    context: This question provides a statistical method for detecting widespread issues affecting a specific application or asset fleet. By comparing the current crash rate to a historical norm and filtering out events during known maintenance windows, this approach can effectively identify a systemic problem, like a bad patch or a new exploit being actively used.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 6005
      - Windows Event ID 6006
      - Windows Event ID 41
      - All enterprise servers
      - All user workstations
      - Virtual Desktop Infrastructure (VDI) pools
      - Kubernetes nodes
      - Change management database
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CHECK change_management_db for current maintenance window
          IF no_maintenance:
            FOR each asset_group:
              CALCULATE 30-day historical_mean, historical_stddev of hourly crash count (EventID 1000)
              CALCULATE current_hourly_count
              IF current_hourly_count > (historical_mean + 3 * historical_stddev)
              THEN TRIGGER ALERT
  - question: Has a change point detection algorithm identified an abrupt and sustained increase in the aggregate crash rate for an application fleet?
    context: This question uses a more advanced statistical technique to automatically detect shifts in the underlying crash rate. Unlike a simple threshold, a change point algorithm can identify a persistent new 'state' of higher crash frequency, which is a strong signal of a systemic issue like a newly introduced exploit, distinguishing it from temporary spikes or random noise.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Windows Event ID 6005
      - Windows Event ID 6006
      - Windows Event ID 41
      - All enterprise servers
      - All user workstations
      - Virtual Desktop Infrastructure (VDI) pools
      - Kubernetes nodes
      - Change management database
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each application_fleet:
            CREATE time series of aggregate crash events (EventID 1000)
            APPLY Bayesian Change Point or CUSUM algorithm
            IF an abrupt, sustained increase in rate is detected
            THEN TRIGGER ALERT