name: T1474.001: Compromise Software Dependencies and Development Tools
id: 3e8b52f1-4a16-4a57-9d7a-21115b9c2e0f
description: This playbook helps investigate whether an adversary has compromised mobile applications or development environments by injecting malicious code into their software dependencies or development tools. It focuses on identifying anomalous network behavior from mobile devices, such as communication with known malicious infrastructure or statistical outliers in traffic patterns, and suspicious actions on developer workstations or CI/CD servers, such as development tools spawning unexpected processes or connecting to newly registered domains.
type: technique
related:
  - TA0027: Initial Access
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are any mobile devices communicating with known malicious infrastructure or using suspicious User-Agent strings?
    context: This question helps detect direct communication with command-and-control (C2) servers or other malicious endpoints identified by threat intelligence. Malicious actors often hardcode IP addresses, domains, or specific SSL/TLS fingerprints into compromised dependencies. Monitoring for these known bad indicators is a high-fidelity way to spot an active compromise. Additionally, compromised libraries might use unusual or known-malicious User-Agent strings, providing another signal.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Zeek http.log
      - Mobile Device Management (MDM) logs
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH Zeek logs (conn, dns, ssl) AND http logs | JOIN threat_intelligence_feed ON (destination_ip, destination_domain, ssl_serial, ja3_hash) | WHERE match_found OR http_user_agent IN (malicious_user_agents)
  - question: Is any managed mobile application exhibiting anomalous network behavior based on its historical baseline?
    context: This question focuses on detecting subtle, anomalous behaviors that might not be caught by signature-based threat intelligence. By establishing a baseline of normal activity for each application (e.g., data egress, domain name patterns, SSL certificate usage), we can identify statistical deviations. A sudden spike in data sent, communication with algorithmically generated domains (DGA), or the use of rare SSL certificates can indicate that a dependency has been compromised and is performing malicious activities under the guise of the legitimate application.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each_app | CALCULATE baseline (data_egress_95th_percentile, shannon_entropy_mean, ja3_hash_prevalence, cert_issuer_prevalence) over 30 days | COMPARE current_activity to baseline | ALERT if risk_score > threshold
  - question: Can we identify statistically outlier network sessions from mobile devices that may represent malicious C2 channels?
    context: This question aims to find the 'unknown unknowns' by using machine learning. Unsupervised models like Isolation Forests can learn the characteristics of normal network traffic without prior labeling. They can then identify connections that are outliers across multiple dimensions (e.g., connection duration, bytes transferred, protocol state, certificate validity). These outliers often represent novel or evasive C2 channels that don't match known patterns or signatures, making this a powerful technique for discovering advanced threats.
    answer_sources:
      - Zeek conn.log
      - Zeek dns.log
      - Zeek ssl.log
      - Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: TRAIN unsupervised_model (e.g., Isolation Forest) on feature_engineered_zeek_data (conn_state, protocol, duration, bytes, etc.) | APPLY model to new network sessions | ALERT on sessions with high anomaly_score
  - question: Are development tools on workstations or build servers spawning scripting interpreters with suspicious or encoded commands?
    context: This is a classic indicator of a supply chain attack. Legitimate development tools should not typically spawn shells to execute obfuscated or download-related commands. An adversary who has compromised a dependency might use this technique to execute a secondary payload. Monitoring for a signed, trusted development tool spawning an unsigned child process or using suspicious command-line arguments is a critical defense.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Windows Sysmon Event ID 1
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: SEARCH Sysmon Event ID 1 | WHERE parent_process IN (dev_tools_list) AND child_process IN (scripting_interpreters) AND (command_line CONTAINS ('-enc', 'IEX', 'DownloadString') OR child_process_is_unsigned) | CORRELATE with Event ID 4104 for script content
  - question: Are development processes exhibiting anomalous process creation or connecting to newly registered domains?
    context: This question uses behavioral baselining on developer endpoints. Attackers often use newly registered domains (NRDs) for C2 infrastructure to evade reputation-based blocking. A development tool connecting to an NRD is highly suspicious. Similarly, if a development process spawns a child process it has never spawned before, or if its command-line arguments are unusually long or complex (high entropy), it could indicate a malicious component has been injected into the build process.
    answer_sources:
      - Windows Sysmon Event ID 1
      - Windows Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: FOR each_dev_host | BASELINE process relationships and command-line metrics | ALERT on new parent-child relationships OR high deviation from baseline | CHECK network logs for connections from dev_tools to domains registered < 30 days ago
  - question: Can a machine learning model be trained to automatically classify sequences of process, network, and file activity as potential supply chain attacks?
    context: This question proposes a more advanced, holistic detection method. Instead of looking at single events in isolation, a supervised ML model can learn the complex patterns of an attack. By creating features that describe a "session" (e.g., a parent process and all its activity within a short time window), the model can identify combinations of events (like a build tool spawning a shell, modifying a project file, and making a network connection) that are strongly indicative of a compromise.
    answer_sources:
      - Windows Sysmon Event ID 1
      - Windows Sysmon Event ID 3
      - Windows Sysmon Event ID 11
      - Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: CREATE session_feature_vectors from Sysmon events (parent_process, child_count, cmd_entropy, net_conn_count, file_mod_count) | TRAIN supervised_classifier on labeled historical data | APPLY trained model to new sessions | ALERT on 'suspicious' classification