name: 'T1547.008: LSASS Driver'
id: '9d1c5c6e-8d3f-4e0a-9d7e-9f3e4e9a4e8d'
description: 'This playbook focuses on detecting adversaries who are attempting to achieve persistence or escalate privileges by modifying or adding malicious LSASS (Local Security Authority Subsystem Service) drivers. This technique involves manipulating the LSA Security Packages registry key (`HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages`) to load a malicious DLL into the `lsass.exe` process. The playbook provides investigative questions to identify evidence such as known malicious DLLs being added, the addition of new or anomalous DLLs (e.g., unsigned, low prevalence, non-standard path), `lsass.exe` loading unexpected modules, suspicious command-line or script activity related to LSA manipulation, and specific event sequences indicative of an attack, such as a rapid file creation, registry modification, and module load.'
type: 'technique'
related:
  - 'TA0003: Persistence'
  - 'TA0004: Privilege Escalation'
contributors:
  - 'Zachary Szewczyk'
  - 'Ask Sage'
created: '2025-10-01'
modified: '2025-10-01'
version: 1.0
tags: 'none'
questions:
  - question: 'Is a known malicious LSASS driver being added to the LSA Security Packages registry key?'
    context: 'This question aims to detect the most direct evidence of this technique: the use of a known-malicious LSA driver. By monitoring modifications to the LSA Security Packages registry key and file creation events, analysts can compare the DLL name and file hash against threat intelligence feeds. A match provides a high-confidence indicator that an adversary is attempting to establish persistence by loading a malicious driver into the LSASS process.'
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers (e.g., AD CS, ADFS)'
      - 'Standard Enterprise Workstations'
      - 'Threat Intelligence Platforms'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Sysmon Event ID 13 OR Windows Event ID 4657) WHERE registry_key = 'HKLM\\...\\Lsa\\Security Packages' OR (Sysmon Event ID 11) WHERE file_extension = '.dll'. COMPARE file_hash and file_name against Threat Intelligence. ALERT on match."
  - question: 'Has an unusually rare DLL been added to the LSA Security Packages, or is a host modifying this key more frequently than normal?'
    context: 'This question uses statistical analysis to find outliers that may indicate malicious activity. Adversaries often use custom or rare tools. A DLL added to the LSA Security Packages that is present on very few other machines in the enterprise is highly suspicious. Similarly, an unusual frequency of modifications to this critical registry key on a single host can signal an attacker''s repeated attempts or tool execution.'
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers (e.g., AD CS, ADFS)'
      - 'Standard Enterprise Workstations'
      - 'Threat Intelligence Platforms'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Sysmon Event ID 13) WHERE registry_key = 'HKLM\\...\\Lsa\\Security Packages'. CALCULATE prevalence of added DLL name across all hosts. ALERT if prevalence < 1%. TRACK modification rate per host. ALERT if rate > 3 standard deviations from baseline."
  - question: 'Does a DLL added to the LSA Security Packages exhibit characteristics of malware according to a machine learning model?'
    context: 'This question leverages machine learning to identify suspicious DLLs based on a combination of their intrinsic properties and environmental context. By training a model on features like file entropy, signature status, and prevalence, it''s possible to detect novel or obfuscated malicious drivers that might evade signature-based or simple statistical methods. A ''suspicious'' classification from the model warrants a deeper investigation.'
    answer_sources:
      - 'Windows Event ID 4657'
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers (e.g., AD CS, ADFS)'
      - 'Standard Enterprise Workstations'
      - 'Threat Intelligence Platforms'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "FOR each new DLL added to 'HKLM\\...\\Lsa\\Security Packages', EXTRACT features (entropy, signature, prevalence, etc.). INPUT features into classification model. ALERT if classification is 'suspicious' or 'malicious'."
  - question: 'Has a DLL that is unsigned, invalidly signed, or located outside of the System32 directory been added to the LSA Security Packages?'
    context: 'Legitimate LSA security packages are typically located in the `C:\Windows\System32` directory and are digitally signed by trusted vendors. This question helps identify deviations from this norm, which are strong indicators of malicious activity. An adversary may place their malicious DLL in a different directory to avoid detection or may use an unsigned driver. An exception list is crucial to reduce false positives from legitimate third-party software.'
    answer_sources:
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 7'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'File Systems on Endpoints and Servers'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Sysmon Event ID 13) WHERE registry_key = 'HKLM\\...\\Lsa\\Security Packages' AND DLL_path is not 'C:\\Windows\\System32\\'. CORRELATE with (Sysmon Event ID 7) for the same DLL. ALERT if DLL is unsigned or signature is invalid, excluding known good packages."
  - question: 'Has a DLL with a statistically rare file path or high path entropy been added to the LSA Security Packages?'
    context: 'This question seeks to identify outliers based on file path characteristics. Adversaries may use randomized or unusual directory names to store their payloads. A DLL with a very low prevalence across the enterprise or a file path with high string entropy (suggesting randomness) is suspicious and should be investigated as a potential malicious LSA driver.'
    answer_sources:
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 7'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'File Systems on Endpoints and Servers'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "FOR each DLL added to 'HKLM\\...\\Lsa\\Security Packages', CALCULATE enterprise prevalence of file_name and file_path. CALCULATE entropy of file_path string. ALERT if prevalence is in bottom 5th percentile OR path entropy is high."
  - question: 'Does a newly added LSA package fall outside the clusters of normal, legitimate packages based on its features?'
    context: 'This question uses unsupervised machine learning to find anomalous LSA packages without prior labeling. By clustering packages based on features like prevalence, location, and signature status, the algorithm can identify normal behavior. Any package that doesn''t fit into a large, dense cluster (i.e., is identified as noise or a small outlier cluster) is considered an anomaly and a candidate for malicious activity.'
    answer_sources:
      - 'Sysmon Event ID 1'
      - 'Sysmon Event ID 7'
      - 'Sysmon Event ID 13'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'File Systems on Endpoints and Servers'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'FOR each new LSA package, CREATE feature vector (prevalence, in_system32, is_signed, path_entropy). APPLY clustering algorithm (DBSCAN). ALERT if package is classified as noise or belongs to a very small cluster.'
  - question: 'Has the LSASS process loaded a DLL module that is not part of a pre-defined ''golden baseline'' for the host''s specific role and OS?'
    context: 'This question focuses on detecting deviations from a known-good state. The set of DLLs loaded by `lsass.exe` is typically stable and predictable for a given OS build and server role. By establishing a ''golden baseline'' of legitimate DLL hashes, any new or unexpected module loaded by LSASS can be immediately flagged as a high-fidelity indicator of a potential compromise.'
    answer_sources:
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'Golden Images/Configuration Management Database (CMDB)'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Sysmon Event ID 7) WHERE process_name = 'lsass.exe'. COMPARE loaded module hash against the golden baseline for that host's OS/role. ALERT if hash is not in the baseline."
  - question: 'Is the number or composition of DLLs loaded by LSASS on a host statistically different from its own baseline or its peer group?'
    context: 'This question uses statistical measures to detect anomalies in LSASS module loading. A sudden increase in the number of loaded DLLs, or a change in the set of loaded DLLs (measured by a low Jaccard similarity to a baseline), can indicate that a malicious module has been injected. This approach can detect unknown threats that would be missed by hash-based lookups.'
    answer_sources:
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'Golden Images/Configuration Management Database (CMDB)'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'FOR each host, TRACK count of DLLs loaded by lsass.exe. ALERT if count deviates >2 std dev from historical or peer baseline. CALCULATE Jaccard similarity of loaded DLL set against golden baseline. ALERT if score < 0.98.'
  - question: 'Has an anomalous sequence or timing of module load events occurred within the LSASS process?'
    context: 'This question leverages a time-series model to understand not just *what* modules are loaded, but *when* and in what *order*. The LSASS process often loads its modules in a predictable sequence during startup and operation. A machine learning model can learn this normal pattern. Any deviation, such as a module loading out of order or at an unusual time, can be flagged as anomalous, potentially indicating a hijack attempt.'
    answer_sources:
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'Golden Images/Configuration Management Database (CMDB)'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "ON critical hosts, FEED sequence of lsass.exe module load events (name, time) into a trained LSTM autoencoder. MONITOR the model's reconstruction error. ALERT if error exceeds dynamic threshold."
  - question: 'Are there any command-line or PowerShell script executions that contain patterns known to be used for installing malicious LSA drivers?'
    context: 'This question aims to detect the attacker''s actions *before* or *during* the modification of the LSA configuration. Adversaries often use command-line tools (`reg.exe`) or PowerShell scripts to add their malicious drivers. By searching for specific command strings and patterns (e.g., modifying the ''Security Packages'' registry key, referencing known malicious tools like Mimikatz), analysts can detect the attempt to compromise LSASS.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4104'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'PowerShell Script Log Aggregators'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Windows EID 4688, Sysmon EID 1, Windows EID 4104) for regex patterns like 'reg add HKLM\\\\...\\\\Security Packages', 'Install-Mimikatz', etc. ALERT on match."
  - question: 'Have any statistically unusual commands or highly obfuscated PowerShell scripts related to LSA been executed?'
    context: 'This question focuses on identifying malicious commands and scripts that are designed to evade simple signature-based detection. High entropy in a PowerShell script often indicates obfuscation, a common technique used by attackers. A rare command-line argument that also references LSA components is also highly suspicious. Correlating these statistical anomalies with LSA-related keywords helps to pinpoint potential privilege escalation attempts.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4104'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'PowerShell Script Log Aggregators'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "SEARCH (Windows EID 4104) WHERE entropy is in top 5th percentile AND script contains 'Lsa' or 'Security Packages'. SEARCH (Windows EID 4688, Sysmon EID 1) for statistically rare command lines containing 'Lsa' keywords. ALERT on findings."
  - question: 'Do any executed commands or PowerShell scripts get classified as malicious or suspicious by an NLP model?'
    context: 'This question applies advanced machine learning to understand the *intent* of a script or command, rather than just matching keywords. A fine-tuned NLP model can analyze the structure, functions, and arguments within PowerShell scripts and command-line executions to determine if they are malicious. This is particularly effective against novel or heavily obfuscated attack techniques that other methods might miss.'
    answer_sources:
      - 'Windows Event ID 4688'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4104'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
      - 'PowerShell Script Log Aggregators'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "FEED content from (Windows EID 4104, Windows EID 4688) into a fine-tuned NLP transformer model. ALERT if classification is 'malicious' or 'suspicious'."
  - question: 'Has the specific event sequence of DLL creation, LSA registry modification, and LSASS module load occurred on a host in a short time window?'
    context: 'This question looks for a high-confidence ''chain of events'' that strongly indicates an LSA driver hijack. A legitimate software installation is unlikely to perform these three specific actions in rapid succession. By correlating these events (file creation, registry modification, and module load by `lsass.exe`) within a short timeframe (e.g., 60 seconds), analysts can detect the core actions of the attack technique with a low false-positive rate.'
    answer_sources:
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'CREATE correlation rule: ALERT if on a single host within 60 seconds: (1) Sysmon EID 11 (DLL creation) is followed by (2) Sysmon EID 13 (LSA registry modification with new DLL name) is followed by (3) Sysmon EID 7 (lsass.exe loads new DLL).'
  - question: 'Is there a correlated statistical spike in file creations, LSA registry modifications, and LSASS module loads on a single host?'
    context: 'This question uses time-series analysis to find anomalous bursts of activity related to the LSA hijack technique. Instead of a strict sequence, it looks for a statistically significant and simultaneous increase in the rates of the three key event types. A sudden, correlated spike across these streams is abnormal and suggests that the related activities are part of a single, potentially malicious operation.'
    answer_sources:
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'FOR each host, TRACK time-series for EID 11, EID 13 (LSA), and EID 7 (lsass.exe). ALERT if a correlated spike (>3 std dev above moving average) occurs across all three streams in a short window.'
  - question: 'Based on the sequence of system events, what is the probability that the system is in an ''LSASS Hijack in Progress'' state?'
    context: 'This question uses a probabilistic model (HMM) to infer the hidden state of a system based on a sequence of observable events. The model learns the typical transitions between events during normal operation. When an unusual sequence occurs (like the file create -> regmod -> module load pattern), the model transitions to the ''LSASS Hijack'' state with a high probability, allowing for the detection of the attack as it unfolds.'
    answer_sources:
      - 'Sysmon Event ID 11'
      - 'Sysmon Event ID 13'
      - 'Sysmon Event ID 7'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'Standard Enterprise Workstations'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: "FEED stream of Sysmon events (1, 7, 11, 13) into a trained HMM. CALCULATE probability of being in 'LSASS Hijack in Progress' state. ALERT if probability > 0.85."
  - question: 'Has a failed LSA plugin load occurred immediately after a suspicious process was executed?'
    context: 'This question focuses on detecting failed attack attempts, which can be just as valuable as successful ones. An LSA plugin load failure (Event ID 3033 or 3063) is a significant event. By correlating this failure with a recently executed process—especially one that is unsigned, located in a temp directory, or spawned from a shell—analysts can identify a likely malicious attempt to install a faulty or incompatible LSA driver.'
    answer_sources:
      - 'Windows Event ID 3033'
      - 'Windows Event ID 3063'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4688'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'System Event Log Aggregators'
      - 'Endpoint Process Execution Logs'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'SEARCH for (Windows EID 3033 OR 3063). ENRICH with process creation events from previous 60 seconds on the same host. PRIORITIZE alert if preceding process was unsigned, ran from user-writable path, or from interactive shell.'
  - question: 'Is a host experiencing a statistically anomalous rate of LSA plugin load failures?'
    context: 'While occasional LSA errors can occur due to system misconfigurations, a sudden spike in these errors on a single host is abnormal. This question uses time-series analysis to detect when a host''s rate of LSA load failures (Event IDs 3033, 3063) deviates significantly from its historical norm. Such a statistical anomaly suggests repeated, failed attempts by an attacker or a tool to install a malicious LSA driver.'
    answer_sources:
      - 'Windows Event ID 3033'
      - 'Windows Event ID 3063'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4688'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'System Event Log Aggregators'
      - 'Endpoint Process Execution Logs'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'FOR each host, TRACK time-series of LSA error events (3033, 3063). ESTABLISH dynamic baseline. ALERT if event rate exceeds 99th percentile of historical rate.'
  - question: 'Did an anomalous system state, as identified by a machine learning model, precede an LSA plugin load failure?'
    context: 'This question uses machine learning to distinguish between benign system issues and malicious attempts that cause LSA errors. By analyzing the system state (recent processes, user context, activity counts) just before an LSA error, an anomaly detection model like Isolation Forest can identify patterns that are inconsistent with normal operations. This helps prioritize LSA errors that are likely caused by an adversary.'
    answer_sources:
      - 'Windows Event ID 3033'
      - 'Windows Event ID 3063'
      - 'Sysmon Event ID 1'
      - 'Windows Event ID 4688'
      - 'Domain Controllers'
      - 'Tier 0 Servers'
      - 'System Event Log Aggregators'
      - 'Endpoint Process Execution Logs'
    range: 'Last 90 days'
    queries:
      - search_technology: 'Pseudocode'
        query: 'ON LSA error event (3033, 3063), CAPTURE feature set of preceding system state (last process, parent, user, activity counts). INPUT features into Isolation Forest model. ALERT if state is classified as an anomaly.'