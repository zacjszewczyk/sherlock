name: T1564.007: VBA Stomping
id: 3b1a8f9e-7d6c-4c0b-9a1d-5e8f6a2b3c4d
description: This playbook helps identify if an adversary is using VBA stomping to execute malicious code while evading static analysis. Indicators of this activity include static analysis tools reporting a structural discrepancy between VBA source code and compiled p-code; an MS Office parent process spawning a child process associated with command execution or reconnaissance; an MS Office process initiating an outbound network connection with anomalous characteristics (e.g., non-standard port, high-entropy domain, large payload); or an MS Office process connecting to a destination matching a threat intelligence feed.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: Are MS Office documents being automatically analyzed for VBA stomping signatures?
    context: This question seeks to determine if a symbolic detection is in place. By automatically extracting and analyzing MS Office files from network traffic and email attachments using tools like `olevba`, we can identify files where the VBA source code has been removed or obfuscated, leaving only the compiled p-code. A positive match for 'VBA Stomping' is a strong indicator of malicious intent to evade static analysis.
    answer_sources:
      - File analysis tool logs (e.g., Olevba JSON output)
      - Zeek files.log
      - Email security gateway logs
      - Automated file analysis sandbox
      - Network file shares
      - Email gateway quarantine
      - Endpoint devices
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each file in (network_traffic, email_attachments): IF file_type is MS_Office: RUN `olevba --decode` on file. IF output contains 'VBA Stomping': ALERT.
  - question: Are there any MS Office documents with a statistically anomalous ratio of VBA source code lines to p-code instructions?
    context: This question aims to identify VBA stomping through statistical analysis. A significant discrepancy, such as a zero or extremely low ratio of source code to p-code, suggests the original source code was removed post-compilation. By baselining normal documents and alerting on outliers (e.g., >3 standard deviations below the mean), we can detect this evasion technique even without a specific 'VBA Stomping' signature.
    answer_sources:
      - File analysis tool logs (e.g., Olevba JSON output)
      - Zeek files.log
      - Email security gateway logs
      - Automated file analysis sandbox
      - Network file shares
      - Email gateway quarantine
      - Endpoint devices
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: CALCULATE baseline_ratio_mean, baseline_ratio_stddev for (source_lines / pcode_instructions) on benign documents. FOR each new document: CALCULATE document_ratio. IF document_ratio is 0 OR document_ratio < (baseline_ratio_mean - 3 * baseline_ratio_stddev): ALERT.
  - question: Can a machine learning model identify high-risk MS Office documents indicative of VBA stomping?
    context: This question explores using a machine learning classifier to detect VBA stomping. By training a model on features like the presence/absence of source code, auto-executing function names, keyword analysis, and output from other tools, we can create a sophisticated detection mechanism. This approach can identify complex patterns and assign a risk score, allowing for more nuanced and accurate alerting on potentially malicious documents.
    answer_sources:
      - File analysis tool logs (e.g., Olevba JSON output)
      - Zeek files.log
      - Email security gateway logs
      - Automated file analysis sandbox
      - Network file shares
      - Email gateway quarantine
      - Endpoint devices
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each new document: EXTRACT features (source_code_present, auto_exec_count, keyword_ratio, olevba_flag). INPUT features into trained_classifier. IF risk_score > threshold: ALERT.
  - question: Has an MS Office application (Word, Excel, PowerPoint) spawned a suspicious child process like PowerShell or cmd.exe?
    context: This question looks for a common post-exploitation behavior where a malicious macro within an Office document executes a secondary payload. Spawning processes like 'powershell.exe', 'cmd.exe', or 'wscript.exe' from a parent like 'winword.exe' is highly indicative of malicious activity, as this is not normal user behavior.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Security Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI)
      - Remote Desktop Session Hosts
      - Corporate servers with MS Office installed
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH process_creation_events WHERE parent_process in ('winword.exe', 'excel.exe', 'powerpnt.exe') AND child_process in ('powershell.exe', 'cmd.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe', 'rundll32.exe', 'certutil.exe', 'regsvr32.exe'): ALERT.
  - question: Has an MS Office application spawned a child process that is rare or has unusually complex command-line arguments?
    context: This question uses statistical methods to find anomalies in process creation events. By baselining normal parent-child process relationships and command-line argument patterns, we can detect 'first-seen' process chains or command lines with high entropy, which often points to obfuscated or packed commands used by attackers to hide their actions.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Security Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI)
      - Remote Desktop Session Hosts
      - Corporate servers with MS Office installed
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: BASELINE frequency of parent-child pairs from Office apps. BASELINE entropy of command lines. SEARCH process_creation_events WHERE parent is Office_app: IF parent-child_pair is 'first-seen' OR command_line_entropy is outlier: ALERT.
  - question: Does an unsupervised machine learning model flag any process creation events from Office applications as anomalous?
    context: This question leverages an unsupervised anomaly detection model (like Isolation Forest) to identify suspicious process creation events without relying on predefined rules. By training on features like process names, command-line characteristics, and other metadata from benign activity, the model can flag any new event that deviates significantly from the learned normal profile, potentially catching novel attack variations.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Security Event ID 4688
      - User workstations
      - Virtual Desktop Infrastructure (VDI)
      - Remote Desktop Session Hosts
      - Corporate servers with MS Office installed
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each new Office_process_creation_event: EXTRACT features (parent_name, child_name, cmd_line_length, cmd_line_entropy). INPUT features into anomaly_detection_model. IF model_output is 'anomaly': ALERT.
  - question: Has an MS Office application made a direct-to-IP network connection on a non-standard web port?
    context: This question seeks to identify potential command-and-control (C2) communication. Malicious macros often instruct Office applications to make outbound connections. Connections going directly to an IP address (bypassing DNS) and using non-standard ports (not 80 or 443) are highly suspicious and often used to evade simple network filtering.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 22
      - Endpoint devices
      - DNS resolvers
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_connection_events WHERE process_name in ('winword.exe', 'excel.exe', 'powerpnt.exe') AND destination_port NOT in (80, 443, 53) AND destination is IP_address: ALERT.
  - question: Has an MS Office application generated an anomalous amount of outbound network traffic or requested a domain name with high entropy?
    context: This question uses statistical measures to detect C2 activity. A sudden spike in outbound data volume from an Office application can indicate data exfiltration. Additionally, high-entropy domain names are a hallmark of Domain Generation Algorithms (DGAs) used by malware to locate C2 servers. Alerting on traffic volume outliers or domains with high character randomness (entropy > 3.5) can effectively uncover these patterns.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 22
      - Endpoint devices
      - DNS resolvers
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: BASELINE daily_traffic_volume from Office apps. IF current_volume > (mean + 4 * stddev): ALERT. SEARCH dns_requests from Office apps: IF domain_entropy > 3.5: ALERT.
  - question: Does a time-series anomaly detection model detect an abnormal pattern of network connections from an Office application?
    context: This question applies time-series analysis to detect C2 beaconing. Malware often communicates with its C2 server at regular intervals. A time-series model can learn the normal 'rhythm' of network activity for a host's Office applications. An alert is triggered when the observed connection pattern significantly deviates from the model's forecast, indicating a periodic, machine-like behavior inconsistent with normal user activity.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Sysmon Event ID 22
      - Endpoint devices
      - DNS resolvers
      - Network egress points
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: MODEL hourly_connection_count from Office apps per host using time-series (e.g., ARIMA). FOR each hour: IF observed_count significantly deviates from forecast: ALERT.
  - question: Has an MS Office application connected to a known malicious IP/domain, or has a downloaded Office file matched a known malicious hash?
    context: This question focuses on matching endpoint and network activity against known threat intelligence. By cross-referencing network connections from Office applications and hashes of downloaded Office files with feeds of malicious indicators (IPs, domains, hashes), we can quickly identify confirmed malicious activity with high confidence.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek files.log
      - Threat Intelligence Feed
      - Endpoint devices
      - DNS resolvers
      - Network egress points (e.g., Firewalls, Web Proxies)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH network_events from Office apps: IF destination in threat_intel_feed: ALERT. SEARCH file_events for Office docs: IF file_hash in threat_intel_feed: ALERT.
  - question: Has an MS Office application connected to a rare or unusual Autonomous System Number (ASN)?
    context: This question provides a way to identify suspicious network destinations by analyzing them at a higher level. Most organizations' network traffic goes to a predictable set of ASNs (e.g., major cloud providers, content delivery networks). A connection from an Office application to an ASN that is rarely, if ever, contacted by the organization is an anomaly worth investigating, as it could indicate a connection to a less reputable or purpose-built malicious infrastructure.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek files.log
      - Threat Intelligence Feed
      - Endpoint devices
      - DNS resolvers
      - Network egress points (e.g., Firewalls, Web Proxies)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: BASELINE frequency of destination_ASN for Office app connections. FOR each new connection: IF destination_ASN is in bottom_5th_percentile_of_frequency: ALERT.
  - question: Does a supervised machine learning model classify any network connections from Office applications as malicious?
    context: This question involves using a supervised classification model, trained on labeled examples of both benign and malicious connections, to score new network activity in real-time. By using a rich feature set (port, data volume, duration, JA3/JA3S hashes, domain entropy), the model can learn the subtle characteristics that distinguish malicious C2 traffic from legitimate updates or web requests, enabling high-confidence alerts.
    answer_sources:
      - Sysmon Event ID 3
      - Zeek conn.log
      - Zeek dns.log
      - Zeek files.log
      - Threat Intelligence Feed
      - Endpoint devices
      - DNS resolvers
      - Network egress points (e.g., Firewalls, Web Proxies)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: FOR each new network_connection from Office app: EXTRACT features (port, bytes, duration, JA3, entropy). INPUT features into classification_model. IF model_prediction is 'malicious' with high_confidence: ALERT.