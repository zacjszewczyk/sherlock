name: T1629.002: Device Lockout
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook helps identify adversarial attempts to evade defenses by locking users out of their mobile devices. This involves detecting when mobile applications are granted 'Device Administrator' privileges, especially when the application is from an untrusted source, is rare, or appears on a threat intelligence blocklist. It also focuses on identifying suspicious network traffic originating from applications with 'Device Administrator' or 'SYSTEM_ALERT_WINDOW' permissions, such as communication with blocklisted destinations, use of high-entropy domain names indicative of DGAs, or anomalous data transfer volumes. Finally, it addresses the abuse of the 'SYSTEM_ALERT_WINDOW' permission, looking for applications that maintain an unusually long foreground presence without user interaction, which is a common tactic in overlay attacks designed to lock the device screen.
type: technique
related:
- TA0030: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an application been granted 'Device Administrator' privileges that is a known malicious indicator?
  context: This question seeks to identify high-confidence threats by cross-referencing applications that have been granted powerful 'Device Administrator' rights against threat intelligence feeds. A match indicates that a known malicious application has gained significant control over a device, which could be a precursor to a device lockout or other malicious actions.
  answer_sources:
  - MDM application inventory and event logs
  - Mobile EDR process and permission grant logs
  - Android Logcat
  - Corporate-managed mobile devices; Mobile Device Management (MDM) servers; Application Vetting and Sandboxing Environments; Enterprise Application Stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each 'Device Administrator Enabled' event in MDM/EDR logs:
        GET application package name and signing certificate hash
        QUERY threat intelligence feed with package name and hash
        IF a match is found:
          GENERATE high-severity alert
- question: Has an application been granted 'Device Administrator' privileges that exhibits multiple risk factors, such as being unapproved, sideloaded, or rare?
  context: This question aims to uncover potentially unwanted or malicious applications that are not yet on a known blocklist. By assigning a risk score based on several suspicious characteristics (not on the corporate allowlist, installed from an 'unknown source', or having a very low installation count), analysts can proactively identify and investigate high-risk applications that have gained elevated privileges.
  answer_sources:
  - MDM application inventory and event logs
  - Mobile EDR process and permission grant logs
  - Android Logcat
  - Corporate-managed mobile devices; Mobile Device Management (MDM) servers; Application Vetting and Sandboxing Environments; Enterprise Application Stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each 'Device Administrator Enabled' event:
        INITIALIZE risk_score = 0
        IF app not in corporate allowlist: INCREMENT risk_score
        IF app installed from 'unknown source': INCREMENT risk_score
        IF app installation count < 5th percentile: INCREMENT risk_score
        IF risk_score > 1:
          GENERATE alert for analyst review
- question: Can a machine learning model identify applications requesting 'Device Administrator' rights that are likely to be malicious based on their characteristics?
  context: This question proposes using a predictive logistic regression model to proactively identify malicious applications. By analyzing a combination of features—such as how the app was installed, the time between installation and the privilege grant, and the number of other permissions requested—the model can calculate a probability of malice. This allows analysts to focus on the most statistically likely threats, even without prior indicators.
  answer_sources:
  - MDM application inventory and event logs
  - Mobile EDR process and permission grant logs
  - Android Logcat
  - Corporate-managed mobile devices; Mobile Device Management (MDM) servers; Application Vetting and Sandboxing Environments; Enterprise Application Stores
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each application requesting 'Device Administrator' rights:
        EXTRACT features (install source, time delta, permission count, app age, cert type)
        APPLY pre-trained logistic regression model
        GET malice_probability_score
        IF malice_probability_score > 0.85:
          FLAG application for analyst review
- question: Is an application with 'Device Administrator' or 'SYSTEM_ALERT_WINDOW' permissions communicating with a known malicious IP address or domain?
  context: This question correlates privileged application activity on a device with network-level indicators of compromise. An application that possesses high-level permissions and is also communicating with a destination on a threat intelligence blocklist is a very strong signal that the device is compromised and being controlled by an adversary, possibly in preparation for a lockout.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Mobile EDR Network Flow Logs
  - MDM Application Inventory Logs
  - Our organization's internet gateway; Corporate DNS resolvers; Network proxies; VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      GET list of devices with privileged apps from MDM logs
      FOR each device in the list:
        QUERY network logs (e.g., Zeek conn.log) for traffic from the device's IP
        JOIN network destination IP/domain against threat intelligence blocklist
        IF a match is found:
          GENERATE high-severity alert
- question: Is a privileged application making DNS requests for domains with unusually high character entropy, suggesting the use of a Domain Generation Algorithm (DGA)?
  context: This question helps detect malware C2 communications that try to evade simple blocklists. DGAs create pseudo-random domain names, which often have high character-level entropy. By baselining normal DNS query entropy for an application and alerting on significant deviations, analysts can spot potential DGA activity, especially when it originates from an app with elevated permissions.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Mobile EDR Network Flow Logs
  - MDM Application Inventory Logs
  - Our organization's internet gateway; Corporate DNS resolvers; Network proxies; VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each privileged application:
        CALCULATE baseline of DNS query entropy scores over 30 days from Zeek dns.log
      FOR each new DNS query from a privileged app:
        CALCULATE entropy of the query domain
        IF entropy > 98th percentile of the app's baseline:
          GENERATE alert for potential DGA activity
- question: Is a privileged application exhibiting anomalous outbound data transfer volumes, potentially indicating C2 communication or data exfiltration?
  context: This question uses time-series anomaly detection to identify unusual network behavior that might otherwise be missed. A sudden, large spike in outbound data from an application, when compared to its own historical baseline, could indicate malicious activity like data staging, exfiltration, or extensive C2 heartbeat traffic, all of which could precede a device lockout event.
  answer_sources:
  - Zeek conn.log
  - Zeek dns.log
  - Mobile EDR Network Flow Logs
  - MDM Application Inventory Logs
  - Our organization's internet gateway; Corporate DNS resolvers; Network proxies; VPN Concentrators
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each application/user pair:
        TRAIN time-series model (e.g., Seasonal-ARIMA) on 30 days of hourly outbound data volume
      FOR each new hour of data:
        PREDICT expected data volume using the model
        IF actual data volume is a significant anomaly:
          FLAG for analyst review
- question: Has an application been installed from an 'unknown source' that also requests the `SYSTEM_ALERT_WINDOW` (overlay) permission?
  context: This question provides a simple yet powerful heuristic for identifying high-risk applications. Sideloading an app (installing from an 'unknown source') bypasses app store security checks, and the `SYSTEM_ALERT_WINDOW` permission can be abused to create screen overlays for ransomware or phishing. The combination of these two factors is highly indicative of malicious intent.
  answer_sources:
  - Mobile Application Vetting Scans
  - Mobile EDR Process and Activity Logs
  - Android Logcat
  - MDM Application Installation Logs
  - Application sandboxing environments; Corporate-managed mobile devices; Enterprise app stores and repositories; Mobile Endpoint Detection and Response (EDR) platform
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      QUERY MDM logs for apps installed from 'unknown source'
      QUERY app vetting scans for apps with `SYSTEM_ALERT_WINDOW` permission
      JOIN results on application name/ID
      IF a match is found:
        GENERATE high-priority alert
- question: Is an application with overlay permissions running in the foreground for an anomalously long time without any user interaction?
  context: This question aims to detect an active overlay attack in progress. A malicious application might lock the screen by displaying a persistent overlay. While a legitimate app can be in the foreground, it typically receives user input. An extended foreground session without any corresponding taps or swipes is anomalous and strongly suggests a malicious overlay is active.
  answer_sources:
  - Mobile Application Vetting Scans
  - Mobile EDR Process and Activity Logs
  - Android Logcat
  - MDM Application Installation Logs
  - Application sandboxing environments; Corporate-managed mobile devices; Enterprise app stores and repositories; Mobile Endpoint Detection and Response (EDR) platform
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each app with `SYSTEM_ALERT_WINDOW` permission:
        CALCULATE 30-day baseline of foreground session durations per user
      FOR each new foreground session:
        IF session_duration > 98th percentile of baseline AND user_input_events == 0:
          GENERATE alert for potential overlay attack
- question: Can an unsupervised machine learning model detect anomalous application sessions that are indicative of an overlay-based device lockout attack?
  context: This question proposes a sophisticated, multi-faceted detection method using an Isolation Forest model. By analyzing several features of an application session at once (duration, CPU/memory usage, network activity, user input), the model can identify complex, abnormal patterns that might indicate a device lockout attack, which would be difficult to define with simple rules.
  answer_sources:
  - Mobile Application Vetting Scans
  - Mobile EDR Process and Activity Logs
  - Android Logcat
  - MDM Application Installation Logs
  - Application sandboxing environments; Corporate-managed mobile devices; Enterprise app stores and repositories; Mobile Endpoint Detection and Response (EDR) platform
  range: last 90 days
  queries:
  - search_technology: pseudocode
    query: |
      FOR each application session from Mobile EDR logs:
        EXTRACT features (duration, CPU, memory, network I/O, user input count)
        APPLY pre-trained Isolation Forest model to get an anomaly score
        IF anomaly score is in the top 1%:
          FLAG session for analyst review as potential lockout attack