name: T1564.014: Extended Attributes
id: a4f8c1b2-3d4e-4f5a-a6b7-c8d9e0f1a2b3
description: This playbook helps identify if an adversary is hiding malicious payloads or data in file or directory extended attributes (xattrs) to evade detection. This involves detecting anomalous execution of command-line utilities used for manipulating extended attributes (`xattr`, `setfattr`, `getfattr`), the creation of attributes with non-standard names or high-entropy data, and processes that read an attribute before initiating suspicious network activity or child process execution.
type: technique
related:
- TA0005: Defense Evasion
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Has an xattr utility ('xattr', 'setfattr', 'getfattr') been executed by an unusual parent process like a web server or shell, and was it followed by the execution of a scripting interpreter?
  context: This question aims to detect a common pattern where an attacker gains initial access (e.g., via a web shell) and then uses extended attribute utilities to write a malicious payload, which is then executed by a scripting engine. Correlating the utility execution with the subsequent script execution by the same user on the same host provides a high-fidelity signal for this defense evasion technique.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (type=SYSCALL, key=proc_exec)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_EXEC)
  - Windows Event ID 4688
  - Linux servers (web, database, application), macOS developer workstations, CI/CD pipeline runners, and Windows hosts with WSL enabled.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH process_creation_events WHERE process_name IN ('xattr', 'setfattr', 'getfattr') AND command_line CONTAINS ('-w', 'setfattr -n user.', 'getfattr --only-values')
      CORRELATE by host and user with subsequent process_creation_events within 5 minutes
      WHERE parent_process_name IN ('httpd', 'nginx', 'sh', 'bash') AND process_name IN ('python', 'perl', 'osascript')
      ALERT on correlation.
- question: Is a user or host exhibiting an anomalous volume of extended attribute modification activity, and are the attribute values themselves suggestive of encrypted or compressed data?
  context: This question focuses on statistical anomaly detection. A sudden spike in the usage of `xattr` or `setfattr` by a specific user or on a host can indicate malicious scripting or payload staging. Analyzing the Shannon entropy of the data being written can further distinguish legitimate metadata from obfuscated code or payloads, as high entropy often indicates compression or encryption.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (type=SYSCALL, key=proc_exec)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_EXEC)
  - Windows Event ID 4688
  - Linux servers (web, database, application), macOS developer workstations, CI/CD pipeline runners, and Windows hosts with WSL enabled.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH process_audit_logs for 'xattr', 'setfattr'
      AGGREGATE daily counts by host, user over 30 days to build baseline
      COMPARE current daily count to 99th percentile baseline
      IF count > threshold, CALCULATE Shannon entropy of command-line value argument
      ALERT if entropy > 6.0.
- question: Can machine learning be used to classify executions of 'xattr' and 'setfattr' as malicious based on features like parent process, user context, and command line arguments?
  context: This question proposes a more advanced, machine learning-based approach. By training a model on known benign and malicious execution patterns (e.g., parent process, user, argument patterns), it's possible to create a sophisticated detection that can identify novel or subtle variations of the technique that might evade simpler rule-based logic.
  answer_sources:
  - Sysmon for Linux Event ID 1
  - Linux Auditd logs (type=SYSCALL, key=proc_exec)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_EXEC)
  - Windows Event ID 4688
  - Linux servers (web, database, application), macOS developer workstations, CI/CD pipeline runners, and Windows hosts with WSL enabled.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MODEL_TRAINING: GATHER features (parent_process, grandparent_process, user, command_args) for 'xattr'/'setfattr' events
      LABEL data as benign/malicious
      TRAIN classifier (e.g., Random Forest)
      DEPLOYMENT: SCORE new events with model in real-time
      ALERT on 'malicious' classification with high confidence.
- question: Has an extended attribute been created with a suspicious name or a value that appears to be a known executable file type?
  context: This question targets the content and naming of the extended attribute itself. Attackers may use generic names (e.g., 'user.data' with base64 content) or non-standard namespaces to avoid scrutiny. Checking the attribute's value for file headers (like 'MZ' for Windows PE, 'ELF' for Linux, or '#!/bin/bash' for shell scripts) is a direct way to identify if an executable payload is being hidden.
  answer_sources:
  - Linux Auditd logs (syscall=setxattr)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_SETXATTR)
  - osquery (file_extended_attributes table)
  - Zeek files.log
  - Critical system directories (/bin, /usr/bin, /etc), user home directories, and web-accessible directories (/var/www/html) on Linux and macOS hosts.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH syscall_logs for 'setxattr' or ESF SETXATTR events
      CHECK attribute_name for suspicious patterns (e.g., 'user.*<base64_string>', non-standard macOS prefix)
      DECODE attribute_value
      CHECK decoded_value for file headers ('MZ', 'ELF', '#!/bin/bash')
      ALERT on match.
- question: Are there any extended attributes on the system with unusually high entropy, suggesting they contain obfuscated or encrypted data rather than plain text metadata?
  context: This question uses periodic endpoint scanning to find dormant threats. An attacker might place a payload in an extended attribute and leave it for later use. By proactively scanning for high-entropy attributes and comparing them to a baseline for that attribute type, defenders can uncover these hidden payloads before they are activated.
  answer_sources:
  - Linux Auditd logs (syscall=setxattr)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_SETXATTR)
  - osquery (file_extended_attributes table)
  - Zeek files.log
  - Critical system directories (/bin, /usr/bin, /etc), user home directories, and web-accessible directories (/var/www/html) on Linux and macOS hosts.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SCHEDULE osquery 'SELECT path, key, value FROM file_extended_attributes'
      FOR each result, CALCULATE Shannon entropy of the value
      COMPARE entropy to historical baseline for that attribute key/filetype
      ALERT if entropy > (mean + 3 * stdev).
- question: Is there an anomalous spike in the rate of extended attribute creation on a host, and does this spike correlate with recent file download activity?
  context: This question seeks to identify the "staging" phase of an attack. A common TTP is to download a tool or payload and then hide it using extended attributes. A time-series model can detect an unusual burst of xattr creation, and correlating it with a recent download to the same host significantly increases the confidence that this activity is malicious.
  answer_sources:
  - Linux Auditd logs (syscall=setxattr)
  - macOS Endpoint Security Framework (ESF_EVENT_TYPE_NOTIFY_SETXATTR)
  - osquery (file_extended_attributes table)
  - Zeek files.log
  - Critical system directories (/bin, /usr/bin, /etc), user home directories, and web-accessible directories (/var/www/html) on Linux and macOS hosts.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      MODEL_TRAINING: GATHER time-series data of xattr creation rate per host over 60 days
      TRAIN anomaly detection model (e.g., Prophet, LSTM)
      DEPLOYMENT: DETECT anomalous spikes in xattr creation rate
      CORRELATE spike with network_download_events on same host within last 5 minutes
      ALERT on correlation.
- question: Has a process read data from an extended attribute and then immediately initiated a network connection to a known malicious or low-reputation destination?
  context: This question focuses on the "activation" phase, where a payload hidden in an xattr is read and used. A strong indicator of compromise is when a process reads from an xattr and then makes a network call to a destination flagged by threat intelligence. This suggests the process loaded configuration or code from the xattr to establish a command-and-control channel.
  answer_sources:
  - Linux Auditd logs (syscall=getxattr)
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateway, DNS servers, and endpoint devices of privileged users (e.g., developers, system administrators) with direct internet access.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH for 'getxattr' syscalls or 'getfattr' process events
      CORRELATE by PID with network_connection or DNS_query events within 60 seconds
      CHECK if destination_IP is in threat_intel_feed OR domain_reputation is low
      ALERT on match.
- question: After reading an extended attribute, is a process making network connections that are anomalous for the host in terms of geography, network neighborhood (ASN), or data volume?
  context: This question uses behavioral analysis to detect suspicious C2 activity without relying solely on threat intelligence feeds. A process on a host suddenly connecting to an IP in a country it has never communicated with before, right after reading an xattr, is highly suspicious. Scoring and thresholding this rarity helps to surface novel threats.
  answer_sources:
  - Linux Auditd logs (syscall=getxattr)
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateway, DNS servers, and endpoint devices of privileged users (e.g., developers, system administrators) with direct internet access.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      SEARCH for 'getxattr' events
      FOR subsequent network connections by same PID:
      ENRICH with GeoIP, ASN, domain age
      SCORE connection based on rarity (new country, new ASN, high data volume) vs 90-day host baseline
      ALERT if cumulative risk score > threshold.
- question: Can graph analysis reveal suspicious activity clusters involving a process reading an extended attribute and then connecting to a rare network destination?
  context: This question applies graph analytics to uncover the entire attack chain as a single entity. By modeling system activity as a graph, analysts can see how a process, a file with a suspicious xattr, and a network connection are all linked. Small, isolated subgraphs of activity are often indicative of external tools or malware, as they don't link into the larger graph of normal system behavior.
  answer_sources:
  - Linux Auditd logs (syscall=getxattr)
  - Sysmon for Linux Event ID 1
  - Sysmon for Linux Event ID 3
  - Zeek conn.log
  - Zeek dns.log
  - Internet gateway, DNS servers, and endpoint devices of privileged users (e.g., developers, system administrators) with direct internet access.
  range: last 90 days
  queries:
  - technology: Pseudocode
    query: |
      CONSTRUCT graph from process, file, and network events
      IDENTIFY subgraphs containing a 'reads_xattr_from' edge and a 'connects_to' edge
      SCORE subgraph based on features (node count, network node rarity)
      ALERT on high-scoring suspicious subgraphs.