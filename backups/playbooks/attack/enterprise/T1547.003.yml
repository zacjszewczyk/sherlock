name: T1547.003: Time Providers
id: f8a0b1c2-d3e4-4f5a-6b7c-8d9e0f1a2b3c
description: This playbook helps investigate whether an adversary is abusing the Windows Time service provider for persistence or privilege escalation. Adversaries can modify the 'DllName' registry value under 'HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\' to point to a malicious DLL. This DLL is then loaded by 'svchost.exe' with SYSTEM privileges. Detections focus on monitoring for suspicious registry modifications, anomalous executions of 'w32tm.exe', unexpected network traffic from the Time service process, and exploit chains where low-privilege users drop a DLL that is subsequently registered by a high-privilege process.
type: technique
related:
- TA0003: Persistence
- TA0004: Privilege Escalation
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
- question: Has a Time Provider registry key been modified to point to a DLL with a known malicious hash?
  context: Adversaries can achieve persistence by hijacking the Windows Time service. They modify the 'DllName' registry value under a Time Provider key to point to their malicious DLL. This DLL is then loaded by the 'svchost.exe' process with SYSTEM privileges when the Time service starts. This question aims to directly detect this behavior by checking if the registered DLL's hash matches known malicious indicators from threat intelligence feeds, providing a high-fidelity signal of compromise.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: SEARCH registry_events (ID 4657 or 13) WHERE target_object CONTAINS "\\W32Time\\TimeProviders\\" AND value_name="DllName" | EXTRACT file_path | JOIN file_events (ID 11) ON file_path | GET file_hash | LOOKUP file_hash in threat_intel | ALERT on match
- question: Are there any rarely used or suspiciously located DLLs registered as Time Providers across the environment?
  context: Legitimate Time Provider DLLs are typically standard system files located in 'System32' and are present across most systems. Adversaries often place their custom DLLs in non-standard locations (like 'Temp' folders). This question aims to find anomalies by building a baseline of all registered Time Provider DLLs and flagging those that are statistically rare (low prevalence) or located in unusual directories.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: SCHEDULED_SEARCH all_endpoints | GET all_time_provider_dll_paths | CALCULATE prevalence and path_entropy for each path | ALERT on path_prevalence < 0.5% OR path_entropy > threshold OR path NOT IN standard_locations
- question: Does a new Time Provider registration exhibit characteristics of maliciousness based on a machine learning model?
  context: A machine learning model can be trained to recognize the subtle characteristics of malicious Time Provider registrations. It analyzes features from both the DLL file itself (PE headers, imports/exports, signature) and the context of the registry event (the user and process making the change). This allows for the detection of novel or unknown malware that might not have a known hash but behaves suspiciously.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Sysmon Event ID 11
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: ON new_time_provider_registration | EXTRACT file_features (PE header, imports, entropy) AND event_features (process, user) | INPUT features into ML_model (XGBoost/RandomForest) | IF score > threshold THEN ALERT
- question: Has the Time Provider configuration been modified using 'w32tm.exe' immediately followed by a service restart?
  context: After registering a malicious DLL, an adversary needs the Time service to load it. A common way to do this is to use the legitimate 'w32tm.exe' utility with '/register' or '/config' flags, and then restart the service. This question looks for this specific, suspicious sequence of events on the same machine to distinguish malicious activity from benign administrative tasks.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: CORRELATE process_events (ID 4688 or 1) AND service_events (ID 7036) on same host | TRIGGER on process_name="w32tm.exe" AND command_line CONTAINS ("/register" OR "/config") | LOOK for service_name="w32time" AND state="running" within 5 minutes | ALERT on sequence match
- question: Was 'w32tm.exe' executed by an uncommon parent process?
  context: The 'w32tm.exe' utility is typically run by administrators from an interactive command prompt ('cmd.exe') or legitimately spawned by 'services.exe'. Adversaries might execute it from a different context, such as a script running via 'powershell.exe' or a compromised application. This question aims to identify these anomalous executions by profiling all parent processes of 'w32tm.exe' and alerting when it is spawned by a statistically rare parent.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: SEARCH process_events (ID 4688 or 1) WHERE process_name="w32tm.exe" | GROUP_BY parent_process over 30 days | CALCULATE frequency of each parent_process | ALERT if parent_process_frequency is in bottom 5th percentile
- question: Did a sequence of events involving 'w32tm.exe' deviate from learned normal system behavior?
  context: Normal administrative tasks follow predictable patterns. A machine learning model (like an LSTM) can be trained on vast amounts of system event data to learn these normal sequences. When an adversary uses 'w32tm.exe' as part of their attack chain, the sequence of events will likely be flagged by the model as a low-probability, anomalous occurrence, indicating a potential threat.
  answer_sources:
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7036
  - Domain Controllers
  - Member Servers
  - Critical Workstations
  range: last 90 days
  queries:
  - search: pseudocode
    query: STREAM host_events (process, service, registry) into sequence_model (LSTM) | MODEL calculates probability of observed event sequence | IF sequence_probability < learned_normal_threshold AND sequence CONTAINS "w32tm.exe" THEN ALERT
- question: Is the Time service process ('svchost.exe') making network connections to unauthorized NTP servers or using non-standard protocols/ports?
  context: A compromised Time Provider DLL, loaded into the 'svchost.exe' process, may be used for command and control (C2) communication. This question aims to detect this by checking all network connections made by the 'W32Time' service. Any connection that is not using UDP port 123 or is directed to an IP address not on the organization's approved list of NTP servers is highly suspicious.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points
  - Internet Gateway
  - Domain Controllers
  range: last 90 days
  queries:
  - search: pseudocode
    query: JOIN network_events (Sysmon ID 3 or Win ID 5156) with process_info | FILTER for process_name="svchost.exe" AND service="W32Time" | JOIN with flow_logs (Zeek) | ALERT IF protocol != "udp" OR dest_port != 123 OR dest_ip NOT IN approved_ntp_list
- question: Is the Time service exhibiting anomalous network traffic patterns (e.g., unusually large data transfers)?
  context: Legitimate NTP traffic is typically very small and consistent. A hijacked Time Provider used for C2 might involve larger data transfers. This question focuses on detecting statistical anomalies in the network behavior of the 'W32Time' service. By creating a baseline of normal metrics (like bytes sent/received) over a rolling window, we can alert on any new connection that deviates significantly from the established norm.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points
  - Internet Gateway
  - Domain Controllers
  range: last 90 days
  queries:
  - search: pseudocode
    query: BASELINE network traffic for W32Time service over 30 days (mean, stddev of bytes_sent, duration, etc.) | FOR each new connection | CALCULATE deviation from baseline | ALERT IF deviation > 3 * stddev
- question: Does a network connection from the Time service have a high reconstruction error from an autoencoder model?
  context: An autoencoder neural network, trained on legitimate 'W32Time' network connections, becomes very good at recreating them. If a new connection is anomalous (e.g., C2 traffic), the model will struggle to reconstruct it, resulting in a high 'reconstruction error.' This provides a powerful way to detect novel C2 channels that don't match simple rules.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 5156
  - Sysmon Event ID 3
  - Network Egress Points
  - Internet Gateway
  - Domain Controllers
  range: last 90 days
  queries:
  - search: pseudocode
    query: TRAIN autoencoder_model on legitimate W32Time network connection features | FOR each new W32Time connection | INPUT features into model | CALCULATE reconstruction_error | IF reconstruction_error > dynamic_threshold THEN ALERT
- question: Has a Time Provider DLL been registered from a user-writable or non-standard directory?
  context: This is a key indicator of a privilege escalation attempt. Legitimate Time Provider DLLs reside in protected system directories. If an adversary places a malicious DLL in a world-writable location (e.g., 'C:\ProgramData') and registers it, they can get their code executed with SYSTEM privileges. This question uses a regular expression to specifically look for DLL paths in these insecure locations.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations
  - Terminal Servers
  - Member Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: SEARCH registry_events (ID 4657 or 13) WHERE target_object CONTAINS "\\W32Time\\TimeProviders\\" AND value_name="DllName" | USE regex on details_field to check if path matches "^C:\\\\(Users|ProgramData|PerfLogs|Windows\\\\Temp)\\\\.*" | ALERT on match
- question: Is a newly registered Time Provider DLL located in an exceptionally rare directory path?
  context: The vast majority of legitimate Time Provider DLLs will be in '%SystemRoot%\System32'. Any deviation is suspicious. By calculating the frequency of each DLL's parent directory across the entire enterprise, we can assign a risk score based on rarity. A path seen on only one machine is a high-confidence indicator of an anomaly.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations
  - Terminal Servers
  - Member Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: SCHEDULED_SEARCH all_endpoints | GET all_time_provider_dll_paths | GROUP_BY parent_directory | CALCULATE frequency | ALERT if directory != "%SystemRoot%\\System32" and frequency is low
- question: Does the file path of a new Time Provider DLL deviate from the paths learned by a one-class SVM model?
  context: A one-class SVM model can be trained on a set of known-good data—the file paths of legitimate Time Provider DLLs from a 'golden image'. Once trained, it can classify any new path as either 'normal' or an 'outlier.' This question uses such a model to automatically flag any Time Provider registration pointing to a DLL in a path that the model considers anomalous.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Multi-user Workstations
  - Terminal Servers
  - Member Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: TRAIN one_class_svm_model on legitimate_dll_paths | ON new_time_provider_registration | EXTRACT dll_path | INPUT path into model | IF model_classifies as "outlier" THEN ALERT
- question: Was a Time Provider registry key modified by a non-administrative or unauthorized user account?
  context: Modifications to 'HKEY_LOCAL_MACHINE' for critical services like W32Time should only be performed by the 'SYSTEM' account or highly privileged administrators. This question aims to detect privilege escalation by checking the user account that performed the registry modification against a strict allowlist of authorized accounts.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: SEARCH registry_events (ID 4657 or 13) WHERE target_object CONTAINS "\\W32Time\\TimeProviders\\" | EXTRACT user_account from event | ALERT IF user_account NOT IN ("SYSTEM", "Domain Admins Group", etc.)
- question: Has a Time Provider registry key been modified by a user/process combination that is statistically anomalous?
  context: A very small and predictable set of user/process pairs (e.g., 'SYSTEM'/'services.exe') will legitimately modify Time Provider keys. This question involves baselining these legitimate modification pairs. Any new modification made by a user/process pair that has never been seen before, or is extremely rare, is a statistical anomaly and should be investigated.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: BASELINE (user, process) tuples that modify Time Provider keys over 90 days | ON new_registry_write to Time Provider key | EXTRACT (user, process) tuple | IF tuple is new or has very low frequency THEN ALERT
- question: Does a modification to a Time Provider registry key receive a high anomaly score from an Isolation Forest model?
  context: An Isolation Forest model is effective at identifying anomalies. This question applies it to registry modification events. The model is trained on features of legitimate events, including user name, process name, and time of day. An event that is easily 'isolated' from the normal cluster receives a high anomaly score, triggering an alert.
  answer_sources:
  - Windows Event ID 4657
  - Sysmon Event ID 13
  - Domain Controllers
  - All Windows Endpoints and Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: TRAIN isolation_forest_model on features (user, process, time_of_day) of legitimate registry writes | ON new_registry_write | EXTRACT features | INPUT to model | IF anomaly_score > threshold THEN ALERT
- question: Was a DLL created by a low-integrity process and then immediately registered as a Time Provider by a high-integrity process?
  context: This question targets a specific privilege escalation exploit chain. An adversary with a low-integrity foothold drops a malicious DLL, then tricks a high-integrity process into registering it. This stateful rule correlates the file creation by the low-privilege process with the registry write by the high-privilege process to detect the full attack sequence.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled
  - Terminal Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: CORRELATE file_creation (Sysmon ID 11) and registry_write (Sysmon ID 13) on same host | TRIGGER on file_creation where process_integrity is "Low" or "Medium" | STORE filename | LOOK for registry_write to Time Provider key within 10 minutes where details_field matches stored filename | ALERT on sequence match
- question: Was a Time Provider DLL registered within minutes of its creation on disk?
  context: Legitimate system DLLs exist on disk for a long time before being registered. In an attack, the adversary's DLL is often dropped and registered almost immediately. This question calculates the time delta between a DLL's file creation timestamp and its registration as a Time Provider. A very short delta (e.g., under 5 minutes) is a powerful statistical anomaly.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled
  - Terminal Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: ON Time Provider registration event (Sysmon ID 13) | GET registration_timestamp and dll_path | LOOKUP file_creation_event (Sysmon ID 11) for dll_path | GET file_creation_timestamp | CALCULATE delta = registration_timestamp - file_creation_timestamp | ALERT if delta < 5 minutes
- question: Does the event graph show a pattern where a low-privilege process creates a file that is then registered as a Time Provider by a high-privilege process?
  context: This question applies graph-based analytics. System events are modeled as a graph where nodes are entities (processes, files) and edges are actions. A Graph Neural Network (GNN) can be trained to learn normal interaction patterns. A specific malicious subgraph—a medium-integrity process creating a DLL, which is then referenced in a registry write by a high-integrity process—can be defined as a template to scan for.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 4657
  - Sysmon Event ID 1
  - Sysmon Event ID 11
  - Sysmon Event ID 13
  - Endpoints with UAC enabled
  - Terminal Servers
  range: last 90 days
  queries:
  - search: pseudocode
    query: CONSTRUCT event_graph where nodes={processes, files, reg_keys} and edges={actions} | DEFINE malicious_subgraph_template: (MediumIntegrityProcess)-[creates]->(File.dll), (HighIntegrityProcess)-[writes_reg_value]->(File.dll) | SCAN graph for instances of template using GNN | ALERT on match