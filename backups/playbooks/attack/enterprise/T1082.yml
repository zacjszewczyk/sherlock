name: T1082: System Information Discovery
id: 4e9d7f1a-8c0b-4b6a-9f8d-7e6c5a4b3d2e
description: >
  This playbook helps analysts investigate whether an adversary has performed system information discovery on managed assets. This involves detecting the execution of malicious or dual-use discovery tools (like WinPEAS, Seatbelt), identifying suspicious command-line strings or PowerShell scripts (`systeminfo`, `Get-ComputerInfo`), observing discovery commands run by unusual parent processes or non-interactive accounts, spotting high-frequency command execution, identifying remote discovery sweeps across the network, and detecting anomalous cloud API calls related to infrastructure discovery (e.g., AWS DescribeInstances, Azure VirtualMachines - Get).
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there any process creation events where the file hash matches a known malicious discovery tool from our threat intelligence feeds?
    context: This question aims to identify the execution of known malicious or dual-use discovery tools by comparing process file hashes against a curated threat intelligence list. A match is a high-confidence indicator of compromise, as it directly points to the use of a tool favored by adversaries for reconnaissance.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | JOIN file_hashes with threat_intel_feed on hash | WHERE match_found | ALERT
  - question: Have any rare, unsigned executables been observed running across the enterprise?
    context: This question seeks to uncover potentially malicious tools that are not yet on known threat lists by identifying executables with a low prevalence across the organization. Adversary tools are often not widespread. Combining this rarity with a lack of a trusted digital signature helps filter out legitimate, low-prevalence software and focus on suspicious binaries.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | CALCULATE prevalence of file_hash across endpoints | FILTER prevalence < 1% AND is_signed = false | REVIEW
  - question: Has a machine learning model identified any process creation events as high-risk for being malicious discovery activity?
    context: This question leverages a machine learning model to score process creation events based on a combination of features like the parent process, command line characteristics, and user context. It aims to detect novel or obfuscated discovery techniques that might evade simpler signature- or statistics-based rules by looking at the holistic behavior of the process execution.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | APPLY ML_model(features) to get risk_score | FILTER risk_score > threshold | ALERT
  - question: Have any command lines or PowerShell scripts been executed containing strings or patterns associated with system information discovery commands?
    context: This question aims to detect explicit system discovery activity by searching for well-known commands (e.g., `systeminfo`, `Get-WmiObject`) and patterns (e.g., command chaining, output redirection) in command-line and script block logs. This is a direct way to find evidence of an adversary enumerating system details.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH command_line_logs OR powershell_script_logs | FILTER content MATCHES regex('systeminfo|hostname|ipconfig /all|&&|>') | ALERT
  - question: Are there any instances of command-line executions with unusually high entropy, suggesting obfuscation?
    context: This question attempts to identify obfuscated or complex, scripted commands that might be used for discovery. Malicious commands are often encoded or heavily scripted, leading to higher character randomness (entropy) than typical user-typed commands. Flagging high-entropy commands that deviate from a host's or process's baseline can uncover hidden malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH command_line_logs | CALCULATE entropy for command_line | COMPARE to baseline_entropy for host/process | FILTER entropy > 99th_percentile | ALERT
  - question: Has the volume of discovery-related commands on any host or from any user significantly exceeded the predicted normal levels?
    context: This question uses a time-series model to learn the normal rhythm of discovery command usage for each user and host. It aims to detect automated or scripted reconnaissance, which often manifests as a sudden burst of activity that deviates significantly from the forecasted, normal behavior. This can catch 'low-and-slow' attacks that might not trigger simple threshold rules.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: AGGREGATE discovery_command_events over time by user/host | APPLY forecasting_model to get predicted_volume | FILTER observed_volume >> predicted_volume | ALERT
  - question: Have any system discovery commands been executed by an unusual parent process (e.g., an Office application) or by a service account?
    context: This question focuses on the context of execution. Discovery commands are normal for administrators running them from a shell, but highly suspicious if spawned by a program like Microsoft Word or a web browser, or if run by a service account. This helps detect execution as part of a phishing payload or web exploit.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events where child_process is discovery_command | FILTER parent_process NOT IN (approved_list) OR user_account_type is 'service' | ALERT
  - question: Have any statistically rare combinations of parent process, child process, and user account type been observed involving a discovery command?
    context: This question uses frequency analysis (stack counting) to baseline all process execution relationships in the environment. It aims to automatically identify anomalous behavior by flagging process chains that are extremely uncommon globally, such as a specific web service process spawning `whoami.exe`. This can uncover novel attack paths without pre-defined rules.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | GROUP BY parent_process, child_process, user_account_type | COUNT occurrences | FILTER child_process is discovery_command AND count < 5 | REVIEW
  - question: Has a graph-based anomaly detection model identified any unusual process execution chains involving discovery tools?
    context: This question models the entire system's process activity as a large graph to understand normal relationships. By applying graph analysis algorithms like PageRank, it can identify unusual execution pathways, such as a process with a poor reputation spawning a discovery tool, which would stand out as an anomaly within the graph structure. This approach is powerful for visualizing and detecting complex, multi-stage execution chains.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: BUILD process_graph from process_creation_events | RUN graph_anomaly_detection_algorithm | FILTER nodes with high_anomaly_score and involve_discovery_tool | ALERT
  - question: Has any host or user executed an excessive number of distinct discovery commands within a short time frame?
    context: This question uses a simple, fixed threshold to detect a burst of discovery activity. Executing more than 15 different discovery commands in 5 minutes is highly indicative of an automated script gathering a wide range of system information quickly, which is a common adversary behavior.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH discovery_command_events | GROUP BY host, user in 5-minute windows | COUNT distinct commands | FILTER count > 15 | ALERT
  - question: Has the frequency of discovery commands from any host or user shown a statistically significant spike compared to their own baseline?
    context: This question seeks to identify anomalous spikes in discovery activity by comparing current behavior to the historical norm for each specific user and host. Using a standard deviation-based threshold ($$ > \mu + 3\sigma $$) provides a more dynamic and tailored approach than a fixed number, reducing false positives from administrators who regularly run scripts while still catching unusual bursts of activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: FOR each host/user, CALCULATE baseline (mean, stddev) of discovery_command counts in 10-min intervals | SEARCH current discovery_command counts | FILTER count > (mean + 3 * stddev) | ALERT
  - question: Has an ML model detected anomalous spikes in discovery command activity that are not explained by normal trends or seasonality?
    context: This question uses a more advanced statistical technique to find anomalies. It first deconstructs the time series of discovery command events into its normal patterns (trend, seasonality) and its unexplained remainder (residual). By applying an anomaly detection algorithm to only the residual, it can pinpoint unusual spikes that are not part of normal, predictable fluctuations, providing a highly accurate method for detecting abnormal activity.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4104
      - Sysmon Event ID 1
      - Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: FOR each host, DECOMPOSE discovery_command time_series into trend, seasonality, residual | APPLY anomaly_detection_model to residual | FILTER anomalous_points | ALERT
  - question: Has any single host attempted to connect to an excessive number of other hosts on remote administration ports in a short time window?
    context: This question aims to detect a network 'sweep' or horizontal discovery, where an adversary uses one compromised machine to scan for other potential targets. A single host connecting to over 20 unique destinations on ports like SMB, RPC, or WinRM within 10 minutes is a strong indicator of automated, widespread reconnaissance.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points (e.g., core switches, data center and cloud VPC ingress/egress). Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH network_connection_logs where port IN (135, 445, 5985, 5986) | GROUP BY source_ip in 10-minute windows | COUNT distinct destination_ip | FILTER count > 20 | ALERT
  - question: Has any host connected to a statistically outlying number of unique destinations on discovery-related ports compared to its normal behavior?
    context: This question uses a statistical method (IQR) to define 'normal' connection behavior for each host individually. It then flags any host that significantly deviates by connecting to an unusually high number of unique destinations. This is more robust than a fixed threshold, as it can identify a server that normally connects to 2 hosts suddenly connecting to 10, which would be an anomaly for that server even if it's below a global threshold of 20.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points (e.g., core switches, data center and cloud VPC ingress/egress). Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: FOR each source_host, CALCULATE hourly unique destination count and IQR baseline | FILTER current_hourly_count > (Q3 + 1.5 * IQR) | ALERT
  - question: Has a graph-based ML model detected any hosts connecting to systems outside of their normal 'community' or cluster of activity?
    context: This question models the network as a social graph, where servers that frequently communicate form communities (e.g., web servers talking to specific databases). Anomaly is detected when a host suddenly starts 'talking' to many other hosts outside of its established community. This is a powerful way to detect lateral movement and discovery, as the compromised host's behavior fundamentally changes from its normal role.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4624
      - Windows Event ID 5156
      - Network taps/SPAN ports feeding Zeek sensors at network choke points (e.g., core switches, data center and cloud VPC ingress/egress). Windows Firewall logs and Security Event Logs from all servers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: BUILD network_graph from connection_logs | RUN community_detection_algorithm to find normal_clusters | IDENTIFY hosts making connections outside their cluster | ALERT
  - question: Have any non-administrative users or roles made cloud API calls related to infrastructure discovery?
    context: This question focuses on unauthorized discovery in cloud environments. While administrators are expected to make calls like `DescribeInstances`, it is highly anomalous for a developer user, a web application's role, or any other non-privileged principal to do so. This rule uses an allow-list to precisely detect when a principal performs actions outside its expected duties.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services (AWS CloudTrail, Azure Monitor, Google Cloud's operations suite) aggregating logs from all production and development subscriptions/accounts.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH cloud_audit_logs for discovery_api_calls | FILTER principal NOT IN (admin_allow_list) | ALERT
  - question: Has any cloud user or role exhibited a statistically significant increase in discovery API calls or used a discovery API for the first time?
    context: This question establishes a behavioral baseline for every cloud principal (user or role). It detects anomalies in two ways a sudden spike in the volume of discovery calls (e.g., a script running amok) or the use of a sensitive discovery API for the very first time. This 'first-use' detection is highly effective for spotting a compromised account being repurposed for reconnaissance.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services (AWS CloudTrail, Azure Monitor, Google Cloud's operations suite) aggregating logs from all production and development subscriptions/accounts.
    range: Last 30 days
    queries:
      - technology: pseudocode
        query: FOR each principal, CALCULATE baseline of API call frequency | FILTER current_frequency > 98th_percentile OR api_call is 'first_time_use' | ALERT
  - question: Has an ML clustering model detected any cloud principal whose behavior has shifted to resemble that of an administrator or reconnaissance tool?
    context: This question uses unsupervised machine learning to group principals into behavioral 'personas' (e.g., 'developer', 'CI/CD pipeline', 'database admin') based on their typical API usage. An alert is generated when a principal's behavior changes so drastically that it moves from its normal cluster to a different one, such as a developer account suddenly acting like a global administrator. This detects fundamental changes in an identity's role or intent.
    answer_sources:
      - AWS CloudTrail logs
      - Azure Activity Logs
      - Google Cloud Audit Logs
      - Cloud provider logging services (AWS CloudTrail, Azure Monitor, Google Cloud's operations suite) aggregating logs from all production and development subscriptions/accounts.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: VECTORIZE API calls for each principal | RUN clustering algorithm to group principals into personas | MONITOR for principals that change clusters | ALERT on anomalous cluster change