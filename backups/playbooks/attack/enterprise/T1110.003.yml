name: T1110.003: Password Spraying
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: |
  This playbook is designed to help determine if an adversary is attempting to gain account credentials using password spraying. This technique involves an attacker choosing one or a few common passwords and attempting to use them against many different user accounts. Indicators of this activity include authentication failures or connection attempts from IPs listed on threat intelligence feeds, or the use of User-Agent strings associated with known password spraying tools. It is also characterized by a high number of Kerberos pre-authentication failures (Event ID 4771, Code '0x18') or NTLM/Kerberos failures (Event ID 4625/4771) from a single source IP across numerous distinct accounts, often with a high ratio of unique failed accounts to total attempts. A critical indicator is a successful authentication (Event ID 4624) from an IP that was recently the source of many failures against other accounts. A large, statistically significant increase in the overall volume of authentication failures across the network can also signify a large-scale password spraying attack.
type: technique
related:
  - TA0006: Credential Access
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are authentication failures or connection attempts originating from IPs on threat intelligence feeds, or do they contain User-Agent strings associated with known password spraying tools?
    context: |
      This question aims to identify obvious signs of password spraying by correlating authentication logs with known indicators of compromise. Matching source IPs from authentication failure logs (Windows Event IDs 4625, 4771) or general connection logs (Zeek conn.log) against a high-confidence threat intelligence feed can directly pinpoint malicious actors. Similarly, scanning web logs (Zeek http.log) for specific User-Agent strings of tools commonly used for password spraying (like 'ruler', 'ms-office', 'kerbrute') provides a strong, tool-specific signal of an attack.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Threat Intelligence Feed
      - Internet gateway
      - Externally-facing web applications
      - Domain Controllers
      - VPN concentrators
      - Cloud Authentication Services (e.g., Azure AD, Okta)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          JOIN (authentication_failures_log, connection_log) WITH threat_intelligence_feed ON source_ip
          ALERT on any match
          
          SEARCH web_log for user_agent in ('ruler', 'ms-office', 'kerbrute')
          ALERT on any match
  - question: For a source IP matched against a CTI feed, is there an unusually diverse set of target usernames being attempted, as measured by Shannon entropy?
    context: |
      After identifying a suspicious IP from a threat feed, this question seeks to confirm the password spraying behavior. Password spraying targets many different user accounts with a single password, resulting in a high diversity of attempted usernames. By calculating the Shannon entropy of the unique usernames targeted by the suspicious IP within a short window (e.g., 15 minutes), we can quantify this diversity. If the entropy score is anomalously high compared to a baseline of normal external traffic, it strongly suggests a password spraying attack rather than a targeted brute-force attack on a single account.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Threat Intelligence Feed
      - Internet gateway
      - Externally-facing web applications
      - Domain Controllers
      - VPN concentrators
      - Cloud Authentication Services (e.g., Azure AD, Okta)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each suspicious_ip from CTI match:
            GET unique usernames from auth_logs in last 15 minutes
            CALCULATE shannon_entropy of username set
            IF shannon_entropy > baseline_95th_percentile:
              ALERT
  - question: Can a machine learning model, trained on features like IP reputation, ASN, geolocation, and User-Agent, classify external authentication attempts as malicious password spraying?
    context: |
      This question proposes a proactive, advanced detection method using machine learning. Rather than relying on static rules or single indicators, a classification model (like Logistic Regression or Random Forest) can be trained to score every external authentication attempt. By engineering a rich feature set for each attempt—including the source IP's CTI score, its ASN and geolocation, time of day, historical success/failure ratio, and User-Agent rarity—the model can learn the subtle, combined patterns of a password spraying attack. An attempt that the model classifies as 'malicious' with high confidence would trigger an alert, enabling detection of novel or more sophisticated attacks.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Threat Intelligence Feed
      - Internet gateway
      - Externally-facing web applications
      - Domain Controllers
      - VPN concentrators
      - Cloud Authentication Services (e.g., Azure AD, Okta)
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each external_authentication_attempt:
            EXTRACT features (ip_reputation, asn, geo, user_agent, etc.)
            PREDICT probability = ml_model.predict(features)
            IF probability > high_confidence_threshold:
              ALERT
  - question: Has a single source IP generated Kerberos pre-authentication failures (Event ID 4771, Code '0x18') for more than 10 distinct user accounts in a 5-minute window?
    context: |
      This question employs a straightforward, threshold-based rule to detect a clear password spraying pattern against Kerberos. Windows Event ID 4771 with Failure Code '0x18' indicates that a valid account name was used, but the password was incorrect during the pre-authentication step. When a single attacker IP generates these specific failures for many different accounts (e.g., >10) in a very short time frame (e.g., 5 minutes), it is a high-confidence indicator of a password spraying attack.
    answer_sources:
      - Windows Event ID 4771
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH auth_logs for event_id=4771 and failure_code='0x18'
          GROUP BY source_ip over 5_minute_window
          COUNT distinct target_user
          IF distinct_target_user_count > 10:
            ALERT
  - question: Is any single source IP address responsible for a statistically anomalous number of distinct accounts with Kerberos pre-authentication failures (Event 4771, Code '0x18') compared to a historical baseline?
    context: |
      This question advances beyond a static threshold to a more adaptive, statistical detection method. It involves continuously monitoring Kerberos pre-authentication failures (Event ID 4771, Code '0x18') and, for each source IP, counting the number of distinct accounts it fails to authenticate as over a sliding window (e.g., 10 minutes). This count is then compared against a dynamically calculated baseline distribution for all source IPs. An alert is triggered when an IP's count exceeds a high percentile (e.g., the 99th percentile) of this baseline, indicating its behavior is a statistical outlier and highly suspicious.
    answer_sources:
      - Windows Event ID 4771
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each source_ip in a 10_minute_window:
            COUNT distinct target_users where event_id=4771 and failure_code='0x18'
            IF count > baseline_99th_percentile_for_all_ips:
              ALERT
  - question: Can unsupervised machine learning (clustering) identify dense groups of Kerberos pre-authentication failures that indicate a coordinated password spraying attack from a single source?
    context: |
      This question explores an unsupervised machine learning approach to find password spraying attacks without predefined rules. By streaming Kerberos failure events (Event ID 4771, Code '0x18') into a clustering algorithm like DBSCAN, we can group events based on their features (source IP, timestamp, target account). A password spraying attack will naturally form a dense cluster: many events in a short time, all from the same source IP, but with a high number of different target accounts. The algorithm can automatically identify these clusters as anomalies, representing a likely attack.
    answer_sources:
      - Windows Event ID 4771
      - Domain Controllers
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          STREAM events where event_id=4771 and failure_code='0x18'
          VECTORIZE features (source_ip, timestamp, hashed_target_account)
          APPLY DBSCAN clustering algorithm
          IF cluster is dense AND has single source_ip AND high cardinality of target_accounts:
            ALERT
  - question: Has a single source IP address generated NTLM authentication failures (Event ID 4625) for more than 20 unique user accounts within a 15-minute window?
    context: |
      This question provides a simple but effective rule for detecting less stealthy password spraying attacks targeting NTLM or other protocols that log Event ID 4625. The logic is straightforward: if a single source IP address is seen generating failed logon attempts for a large number of unique user accounts (e.g., >20) in a short time frame (e.g., 15 minutes), it strongly indicates a password spraying attempt. This serves as a valuable, easy-to-implement detection for this common technique.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Any server accepting network logons
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SEARCH auth_logs for event_id=4625
          GROUP BY source_ip over 15_minute_window
          COUNT distinct target_user
          IF distinct_target_user_count > 20:
            ALERT
  - question: Is any source IP exhibiting both a statistically high number of distinct failed accounts and a high ratio of distinct accounts to total attempts, compared to a historical baseline?
    context: |
      This question refines detection by using two complementary statistical metrics. For each source IP, we calculate both the count of distinct failed accounts and the ratio of distinct accounts to total attempts over a rolling window (e.g., 30 minutes). A password spray (one password, many users) will have a high distinct account count and a high ratio (near 1.0). A brute-force attack (many passwords, one user) will have a low distinct account count and a very low ratio. Alerting only when an IP exceeds the baseline percentile (e.g., 98th) for distinct accounts AND has a high ratio (e.g., >0.8) significantly improves detection accuracy and reduces false positives.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Any server accepting network logons
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each source_ip over 30_minute_window:
            CALCULATE distinct_account_count
            CALCULATE total_attempt_count
            CALCULATE ratio = distinct_account_count / total_attempt_count
            IF distinct_account_count > baseline_98th_percentile AND ratio > 0.8:
              ALERT
  - question: Can an anomaly detection model identify source IPs whose authentication behavior (counts of failures, unique accounts, timing) deviates significantly from normal traffic patterns?
    context: |
      This question proposes using a multi-featured anomaly detection model, such as an Isolation Forest, to spot password spraying. For each source IP, a feature vector is created over a 15-minute window, capturing behavior like the count of NTLM failures (4625), count of unique accounts in those failures, count of Kerberos failures (4771), count of unique accounts in those failures, and the standard deviation of time between attempts. The model, trained on normal network patterns, assigns an anomaly score to each IP's behavior. A score exceeding a set threshold indicates a deviation from the norm that is highly likely to be a password spraying attack.
    answer_sources:
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Any server accepting network logons
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each source_ip over 15_minute_window:
            CREATE feature_vector (count_4625, unique_4625, count_4771, unique_4771, time_std_dev)
            CALCULATE anomaly_score = anomaly_model.predict(feature_vector)
            IF anomaly_score > threshold:
              ALERT
  - question: Has a source IP that caused numerous authentication failures across distinct accounts recently had a successful login, indicating a successful password spray?
    context: |
      This is a critical question focused on identifying a confirmed account compromise. It requires a stateful rule that looks for a specific sequence of events: first, a source IP generates a high number of failed logins (Event IDs 4625/4771) across more than 10 different accounts; second, that same source IP has a successful login (Event ID 4624) within a short time frame (e.g., 30 minutes). A match for this sequence is a high-severity alert because it directly links the spraying activity to a successful breach, identifying the compromised account and the attacker's IP.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Zeek conn.log
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Endpoints
      - Externally-facing web applications
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FIND source_ip where (count(distinct user) from failures) > 10 in 30 mins
          THEN, within the same 30 mins, for the same source_ip:
            LOOK FOR successful_login_event
            IF found:
              ALERT (compromised_account, source_ip)
  - question: Has a successful authentication occurred from a source IP that is currently on a 'watchlist' for suspicious, high-volume failure activity?
    context: |
      This question describes a more dynamic method for detecting successful sprays. Instead of a single, rigid rule, this approach maintains a 'watchlist' or state table of source IPs that are currently exhibiting anomalous behavior (e.g., their failure count exceeds the 95th percentile of the baseline). This list is updated in near real-time. When any successful authentication (Event ID 4624) occurs, the system checks if the source IP is on this watchlist. A match immediately escalates the event as a high-confidence successful password spray, allowing for flexible, statistically-driven detection of compromise.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Zeek conn.log
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Endpoints
      - Externally-facing web applications
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          MAINTAIN watchlist_ips by adding any source_ip with failure_count > baseline_95th_percentile
          
          ON successful_login_event:
            GET source_ip
            IF source_ip is in watchlist_ips:
              ALERT (successful_spray, compromised_account)
  - question: Can a sequence-aware machine learning model identify an entire authentication sequence (many failures followed by a success) as anomalous compared to benign login patterns?
    context: |
      This question proposes using sophisticated sequence-aware models like Hidden Markov Models (HMM) or LSTM-based autoencoders to detect successful sprays. These models are trained on vast amounts of benign authentication sequences (which might include a few failures before a success). They learn the probability of normal sequences. An attacker's sequence—dozens of failures across many accounts followed by a single success—is vastly different from this learned norm. The model would flag this sequence as having a very low probability, thus identifying it as a highly anomalous and malicious event.
    answer_sources:
      - Windows Event ID 4624
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Zeek conn.log
      - Domain Controllers
      - Member Servers
      - VPN concentrators
      - Endpoints
      - Externally-facing web applications
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          FOR each source_ip:
            CREATE sequence of auth_events (failure, failure, ..., success)
            CALCULATE probability = sequence_model.predict(sequence)
            IF probability < anomaly_threshold:
              ALERT
  - question: Has the aggregate number of authentication failures across the entire environment exceeded a high, pre-defined 'tripwire' threshold, indicating a large-scale, noisy attack?
    context: |
      This question serves as a safety net to catch massive, unsophisticated password spraying attacks. It involves setting a high, fixed threshold for the total number of authentication failures (Event IDs 4625 and 4771) across all domain controllers within a given time frame (e.g., 5000 events in 1 hour). This 'tripwire' is designed to be well above any conceivable level of normal business activity. While not subtle, it is effective for detecting a large-scale, brute-force style of attack that generates a significant amount of noise.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Internet gateway
      - Domain Controllers
      - VPN concentrators
      - Network backbone sensors
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          SUM event_count where event_id in (4625, 4771) over 1_hour_window
          IF event_count > 5000:
            ALERT (Massive attack detected)
  - question: Is the current hourly volume of authentication failures statistically significantly higher than the expected volume, based on a historical baseline that accounts for time-of-day and day-of-week seasonality?
    context: |
      This question improves on the simple tripwire by using a statistical baseline that adapts to the network's normal rhythms. Authentication failures naturally fluctuate based on time of day and day of the week. This method models that seasonality. It aggregates failure counts into hourly bins and compares the current hour's count to the expected count for that specific hour and day. If the observed count exceeds the forecast by a significant amount (e.g., by more than 3 standard deviations of the model's error), it triggers an alert, providing a more accurate detection of anomalous spikes in activity.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Internet gateway
      - Domain Controllers
      - VPN concentrators
      - Network backbone sensors
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          CALCULATE hourly_failure_count
          GET expected_count and std_dev from seasonal_baseline for current_hour_and_day
          IF hourly_failure_count > (expected_count + 3 * std_dev):
            ALERT
  - question: Does the observed volume of authentication failures fall outside the prediction interval of a sophisticated time-series forecasting model?
    context: |
      This question proposes the most robust method for aggregate anomaly detection by using a formal time-series forecasting model like Prophet or SARIMA. After training on at least 90 days of historical data, the model can accurately forecast the expected volume of authentication failures for the next time interval (e.g., 15 minutes), complete with a prediction interval (e.g., a 99% confidence interval). If the actual, observed volume of failures falls outside this high-confidence interval, it signifies a statistically significant deviation from the norm and triggers an alert. This method is highly effective at catching widespread attacks while minimizing false positives.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4625
      - Windows Event ID 4771
      - Internet gateway
      - Domain Controllers
      - VPN concentrators
      - Network backbone sensors
    range: last 90 days
    queries:
      - technology: Pseudocode
        query: |
          TRAIN forecasting_model on 90+ days of failure_counts
          FORECAST next_15_min_interval to get prediction_interval (lower_bound, upper_bound)
          GET observed_count for current_15_min_interval
          IF observed_count > upper_bound:
            ALERT