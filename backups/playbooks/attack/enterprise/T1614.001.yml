name: T1614.001: System Language Discovery
id: e1f8a4e2-5b1c-4b1a-8c9d-0a7f6e3d2b1a
description: 'This playbook helps answer the question: Is an adversary performing system language discovery to tailor their attack or evade detection? It provides investigative steps to detect this technique through various means, including the execution of specific commands (e.g., `systeminfo`, `wmic`, `locale`), analysis of PowerShell script blocks (`Get-Culture`), monitoring read operations on language-related Registry keys, and correlating discovery actions with suspicious process origins or as part of a larger sequence of reconnaissance activities on both Windows and Linux/macOS systems.'
type: technique
related:
  - TA0007: Discovery
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: How can I use a symbolic logic rule to detect system language discovery commands in process creation logs?
    context: This question focuses on creating a high-fidelity detection by monitoring process creation events (like Windows Event ID 4688 or Sysmon Event ID 1) for exact command-line matches to a known list of system language discovery commands. This is an effective method for catching common, undisguised techniques, such as an adversary running `systeminfo | findstr /B /C:\"System Locale\"` or `wmic os get locale`. An alert on an exact match is a strong indicator of reconnaissance.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH process_creation_events WHERE command_line IN ('systeminfo | findstr /B /C:\"System Locale\"', 'wmic os get locale', ...)
  - question: How can I use statistical analysis to identify anomalous parent processes executing system language discovery commands?
    context: This question addresses the challenge of attackers using legitimate tools for discovery. By analyzing the frequency of parent processes that spawn discovery commands (like `systeminfo`), we can establish a baseline of normal behavior (e.g., spawned by `explorer.exe`). An alert is triggered when the parent process is a statistical outlier, such as an Office application (`winword.exe`) or a web server process, which is highly unusual and suspicious.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH process_creation_events WITH discovery_patterns | STATS frequency(parent_process) | FILTER frequency < 1st_percentile
  - question: How can a machine learning model be used to classify command-line executions as malicious language discovery?
    context: This question proposes a more advanced, predictive approach. By training a supervised classification model on labeled data, it can learn the subtle characteristics of malicious command-line activity beyond simple string matches. Features like process name, parent process, command length, and n-grams allow the model to score new events and identify suspicious discovery attempts that might otherwise be missed.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, on Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SCORE process_creation_events WITH classification_model | FILTER probability(malicious) > 0.9
  - question: How can I use symbolic logic to detect language discovery cmdlets in PowerShell script block logs?
    context: This question targets discovery performed through PowerShell. By monitoring PowerShell script block logs (Windows Event ID 4104) for specific keywords like `Get-Culture` or `[System.Globalization.CultureInfo]`, we can directly identify when an attacker is using PowerShell's native capabilities for reconnaissance. It is particularly important to prioritize alerts from obfuscated or non-interactive scripts.
    answer_sources:
      - 'Windows Event ID 4104, Windows Event ID 4688, on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH powershell_script_block_logs WHERE script_text CONTAINS ('Get-Culture', 'Get-UICulture', '[System.Globalization.CultureInfo]')
  - question: How can I use statistical methods to detect obfuscated PowerShell scripts used for language discovery?
    context: This question addresses the common attacker tactic of obfuscating PowerShell code. By calculating the Shannon entropy of a script block, we can quantify its randomness. Malicious, obfuscated scripts often have a significantly higher entropy than legitimate scripts. Alerting on scripts that contain discovery keywords and also have an unusually high entropy score provides a robust way to find hidden threats.
    answer_sources:
      - 'Windows Event ID 4104, Windows Event ID 4688, on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH powershell_script_block_logs WITH discovery_keywords | CALCULATE shannon_entropy(script_text) | FILTER entropy > 95th_percentile
  - question: How can a machine learning model help detect bursts of PowerShell-based language discovery activity?
    context: This question focuses on identifying automated or large-scale reconnaissance. A time-series analysis model can learn the normal baseline rate of PowerShell-based language discovery events for a given host. When a sudden spike in this activity occurs, significantly deviating from the forecast, the model generates an alert. This is effective for detecting the initial stages of an automated attack.
    answer_sources:
      - 'Windows Event ID 4104, Windows Event ID 4688, on All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled'
    range: last 90 days
    queries:
      - search: pseudocode
        query: MONITOR powershell_language_discovery_events per_host | APPLY time_series_forecast | ALERT on deviation from baseline
  - question: How can I use symbolic logic to detect unauthorized process access to language-related registry keys?
    context: This question focuses on monitoring direct access to the Windows Registry. By enabling auditing (via SACL or Sysmon) on specific keys like `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language`, we can log every read attempt. An alert is triggered if the process accessing these keys is not on a pre-defined allowlist of known-good system processes, effectively filtering out noise and highlighting suspicious activity.
    answer_sources:
      - 'Windows Event ID 4663, Sysmon Event ID 13, on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH registry_access_events FOR language_keys WHERE process_name NOT IN (allowlist)
  - question: How can statistical analysis identify rare processes accessing language-related registry keys?
    context: This question helps find custom malware or living-off-the-land binaries (LOLbins). By performing a frequency analysis on all processes that access the monitored language-related registry keys across the enterprise, we can identify processes that are exceptionally rare. A process that appears on very few endpoints but performs this specific action is highly suspect and warrants investigation.
    answer_sources:
      - 'Windows Event ID 4663, Sysmon Event ID 13, on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH registry_access_to_language_keys | STATS frequency(process_image_path) | FILTER frequency < 5th_percentile
  - question: How can an anomaly detection model be used to identify abnormal access to language-related registry keys?
    context: This question proposes using an unsupervised machine learning model to find unusual access patterns. An Isolation Forest model can be trained on features of normal access events (process name, path, parent, user). It learns what 'normal' looks like and can then score new events in real-time. Any event that the model flags as an anomaly is a strong candidate for a malicious action.
    answer_sources:
      - 'Windows Event ID 4663, Sysmon Event ID 13, on Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SCORE registry_access_events WITH isolation_forest_model | FILTER event is anomaly
  - question: How can a correlation rule detect language discovery actions immediately following process creation from a suspicious parent?
    context: This question focuses on detecting a common attack chain where a malicious document spawns a process that immediately begins reconnaissance. A correlation rule can connect a process creation event from an untrusted parent (like an Office app) with a subsequent language discovery action by that same new process within a short time window (e.g., 60 seconds). This sequence is a high-confidence indicator of compromise.
    answer_sources:
      - 'Windows Event ID 4688, Windows Event ID 4104, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators'
    range: last 90 days
    queries:
      - search: pseudocode
        query: CORRELATE process_creation from untrusted_parent WITH subsequent_language_discovery by same_process_guid within 60s
  - question: How can a risk scoring system be used to prioritize suspicious processes that perform language discovery?
    context: This question proposes a method for aggregating multiple weak signals into a stronger one. A risk scoring system assigns points for suspicious attributes (e.g., unsigned binary, executing from a temp path, parent is a browser) and adds more points if the process performs language discovery. An alert is generated when a process's cumulative score crosses a pre-defined threshold, allowing analysts to focus on the highest-risk events.
    answer_sources:
      - 'Windows Event ID 4688, Windows Event ID 4104, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators'
    range: last 90 days
    queries:
      - search: pseudocode
        query: CALCULATE risk_score for processes (points for unsigned, temp_path, parent_process) | ADD points for language_discovery | ALERT if score > 40
  - question: How can a graph-based model detect complex attack paths involving language discovery?
    context: This question addresses sophisticated attacks that involve multiple steps. By representing system entities (processes, files, network connections) as nodes in a graph, graph algorithms can find suspicious paths. For example, a path showing a process spawned from an email attachment, which then performs language discovery and makes a network connection to a rare domain, can be surfaced as a high-risk subgraph.
    answer_sources:
      - 'Windows Event ID 4688, Windows Event ID 4104, Sysmon Event ID 1, Sysmon Event ID 13, Zeek conn.log, on User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators'
    range: last 90 days
    queries:
      - search: pseudocode
        query: BUILD graph of system_events | SEARCH for path: email_attachment -> process_spawn -> language_discovery -> new_domain_connection
  - question: How can I use a correlation rule to detect a sequence of multiple reconnaissance activities including language discovery?
    context: This question aims to detect an adversary actively performing broad reconnaissance. A single discovery command might be benign, but a cluster is suspicious. A correlation rule can look for three or more distinct reconnaissance TTPs (e.g., `whoami`, `ipconfig`, `net user`, language discovery) executed by the same process or user session in a short time window (e.g., 10 minutes). This aggregation provides context and raises alert confidence.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 13, Sysmon Event ID 22, on Entire enterprise network, with a focus on lateral movement paths between workstations and servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: CORRELATE events by ProcessGUID or LogonID | TRIGGER if count(distinct recon_ttps) >= 3 within 10 minutes
  - question: How can statistical analysis of user sessions identify a disproportionate focus on reconnaissance?
    context: This question provides a way to profile user session behavior. By grouping commands executed within a user session, we can calculate the ratio of reconnaissance commands to total commands. We can then establish a baseline for this ratio based on user roles. An alert is triggered when a session's recon ratio is a statistical outlier (e.g., in the 99th percentile), indicating a session abnormally focused on discovery.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 13, Sysmon Event ID 22, on Entire enterprise network, with a focus on lateral movement paths between workstations and servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: GROUP commands by user_session | CALCULATE ratio(recon_commands / total_commands) | ALERT if ratio > 99th_percentile for user_role
  - question: How can a sequence analysis model be used to identify malicious reconnaissance patterns?
    context: This question proposes using a model that understands the order of events. A sequence analysis model, like a Hidden Markov Model, can be trained on known attack sequences to learn the probable transitions between states (e.g., initial execution -> language discovery -> network enumeration). It can then identify when a live sequence of events has a high probability of matching a learned malicious pattern.
    answer_sources:
      - 'Windows Event ID 4688, Sysmon Event ID 1, Sysmon Event ID 3, Sysmon Event ID 13, Sysmon Event ID 22, on Entire enterprise network, with a focus on lateral movement paths between workstations and servers'
    range: last 90 days
    queries:
      - search: pseudocode
        query: FEED event_stream to HMM | ALERT if sequence_probability matches malicious_pattern
  - question: How can I use symbolic logic to detect suspicious use of the 'locale' command on Linux or macOS?
    context: This question extends discovery detection to non-Windows platforms. By monitoring process execution logs for the `locale` command or scripts accessing language environment variables (`$LANG`), we can spot reconnaissance. The key is to add context, alerting when the command is run by a non-standard user (like a web service account) or in a non-interactive shell.
    answer_sources:
      - 'Sysmon for Linux Event ID 1, Linux Auditd logs, macOS Endpoint Security Framework events, on Linux/macOS servers (web servers, database servers), Developer workstations'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH process_events WHERE command='locale' AND user='www-data' AND shell='non-interactive'
  - question: How can statistical analysis of parent-child process relationships find anomalous executions of 'locale'?
    context: This question focuses on identifying when `locale` is executed by an unusual parent process on Linux/macOS. We can establish a baseline of normal parent processes (e.g., `bash`, `sshd`). By analyzing process relationships across the enterprise, we can alert when `locale` is spawned by a parent that is a statistical outlier (e.g., a web server binary), which suggests post-exploitation activity.
    answer_sources:
      - 'Sysmon for Linux Event ID 1, Linux Auditd logs, macOS Endpoint Security Framework events, on Linux/macOS servers (web servers, database servers), Developer workstations'
    range: last 90 days
    queries:
      - search: pseudocode
        query: SEARCH process_events where child_process='locale' | STATS frequency(parent_process) | ALERT if frequency < 1st_percentile
  - question: How can a clustering model identify outlier command-line executions related to language discovery on Linux/macOS?
    context: This question proposes an unsupervised learning approach for non-Windows systems. By vectorizing command-line data and using a clustering algorithm like DBSCAN, we can automatically group 'normal' command executions. Any command that doesn't fit into a cluster is flagged as an outlier. If an outlier command contains 'locale', it is highly suspicious as it represents a deviation from established patterns.
    answer_sources:
      - 'Sysmon for Linux Event ID 1, Linux Auditd logs, macOS Endpoint Security Framework events, on Linux/macOS servers (web servers, database servers), Developer workstations'
    range: last 90 days
    queries:
      - search: pseudocode
        query: VECTORIZE command_lines with TF-IDF | CLUSTER with DBSCAN | ALERT on 'locale' commands classified as noise/outlier