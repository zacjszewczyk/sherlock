name: T1574.011: Services Registry Permissions Weakness
id: 1e9a8b7c-4d3e-4f6a-9b1d-0c8e7f5a2b1d
description: This playbook focuses on detecting adversaries manipulating service registry entries to achieve persistence, escalate privileges, or evade defenses. This involves monitoring for modifications to service executable paths (ImagePath, binPath), the creation of new services with suspicious names or paths, changes to service failure commands, alterations to service DLLs, and tampering with security service configurations. The goal is to identify unauthorized changes that indicate a compromise, such as redirecting a service to a malicious payload, creating a backdoor, or disabling security tools.
type: technique
related:
  - TA0003: Persistence
  - TA0004: Privilege Escalation
  - TA0005: Defense Evasion
contributors: Zachary Szewczyk, Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are service 'ImagePath' or 'binPath' registry values being modified to point to executables that match known threat intelligence?
    context: This question aims to detect a common persistence technique where an adversary hijacks a legitimate service by changing its executable path to their own malicious payload. By monitoring for modifications to 'ImagePath' or 'binPath' values and comparing the new executable's hash and path against threat intelligence, analysts can identify known malware or tools being implanted for long-term access.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Threat Intelligence Feeds
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE (Object_Name ENDS_WITH '\\ImagePath' OR Object_Name ENDS_WITH '\\binPath') | FOR_EACH_EVENT GET New_Value (Executable_Path) | GET_HASH(Executable_Path) | LOOKUP Threat_Intel(Hash, Executable_Path) | RETURN Events_With_Match
  - question: Are processes with a low historical frequency of modifying service registry keys making changes, or are services being modified to use entirely new executable paths?
    context: This question uses statistical analysis to find anomalies that symbolic checks might miss. Adversaries often use novel processes to make changes. By baselining normal modification behavior, we can flag modifications made by statistically rare processes. Similarly, baselining all known legitimate executable paths for each service allows us to detect when a service is pointed to a path it has never used before, indicating a potential hijack.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE (Object_Name ENDS_WITH '\\ImagePath') | CALCULATE historical frequency of modifying process | ALERT if process frequency is in bottom 5% | ALSO, for each service, BUILD baseline of known ImagePath values | ALERT if new ImagePath is not in baseline for that service
  - question: Can a machine learning model identify malicious modifications to service registry paths based on event features?
    context: This question leverages machine learning to provide a more nuanced detection capability. A model can be trained to recognize the subtle characteristics of malicious changes, such as suspicious string patterns in the path, the context of the parent process, unusual timing, or the user account making the change. This allows for the detection of novel or sophisticated attacks that evade simpler rule-based and statistical methods.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON Registry_Modification_Event (EventID=4657, Object_Name ENDS_WITH '\\ImagePath') | EXTRACT features (path_strings, parent_process, time_of_day, service_name, user) | INPUT features into classification model | ALERT if model prediction is 'malicious' with high probability
  - question: Are new services being installed that match signatures of known malware or malicious tools?
    context: This question focuses on detecting the installation of malicious services by comparing their properties against known bad patterns. Adversaries frequently use specific naming conventions or file paths for their persistence tools. By using a curated list of regular expressions, analysts can quickly identify new services that match the characteristics of known malware families.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Service_Installation_Events (EventID=4697) | FOR_EACH_EVENT GET Service_Name, ImagePath | MATCH Service_Name, ImagePath against regex list of known malware | ALERT on match
  - question: Are newly installed services exhibiting statistically anomalous names or executable paths?
    context: This question seeks to identify malicious services by spotting statistical outliers. Adversaries may use randomly generated service names (high entropy) to avoid signature-based detection, or place their executables in uncommon directories. By calculating the entropy of new service names and the rarity of their executable paths against a baseline of the environment, we can flag suspicious installations that deviate from normal behavior.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Service_Installation_Events (EventID=4697) | CALCULATE Shannon entropy of Service_Name | ALERT if entropy > 95th percentile of baseline | SEPARATELY, calculate rarity of ImagePath directory | ALERT if directory prevalence is in bottom 5%
  - question: Can machine learning clustering identify newly installed services that are anomalous?
    context: This question applies unsupervised machine learning to group newly installed services based on their characteristics. Legitimate software installations tend to form large, dense clusters. Malicious or unwanted software often appears as small, distinct clusters or as outliers (noise). This approach helps identify suspicious new services without prior knowledge of their signatures.
    answer_sources:
      - Windows Event ID 4697
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON Service_Installation_Event (EventID=4697) | EXTRACT features (name_length, entropy, ImagePath_directory, character_set) | APPLY clustering algorithm (DBSCAN) | INVESTIGATE services in small clusters or classified as noise
  - question: Has a service's executable path been changed to a non-standard or user-writable location?
    context: This question is designed to detect a common adversary tactic of placing malware in directories where executables are not expected. Legitimate service executables are almost always located in protected system directories like 'C:\Windows\System32'. By checking if a service's 'ImagePath' is modified to point to a user profile, temp folder, or other unauthorized location, we can identify likely malicious activity.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE (Object_Name ENDS_WITH '\\ImagePath' OR Object_Name ENDS_WITH '\\binPath') | GET New_Value (Executable_Path) | CHECK if Executable_Path is in non-standard directory (e.g., C:\\Users\\*, C:\\Temp\\) | ALERT if true
  - question: Has a service's executable path been modified to a directory that is statistically rare for that specific service?
    context: This question adds a layer of statistical context to the detection of unusual service paths. While some services might legitimately have executables in less common locations, a change to a directory that has a very low historical probability for that particular service across the entire enterprise is highly suspicious. This helps reduce false positives from generically looking at "unauthorized" directories.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE (Object_Name ENDS_WITH '\\ImagePath') | FOR_EACH event, get Service_Name and New_ImagePath_Directory | LOOKUP historical probability of (Service_Name, New_ImagePath_Directory) pair | ALERT if probability < 1%
  - question: Can a machine learning model detect anomalous service and image path directory pairs?
    context: This question uses one-class machine learning models to establish a profile of normalcy. By training a model like an Isolation Forest on legitimate pairs of (service name, image path directory), the system can learn what is normal. It can then flag any new or modified pair that deviates significantly from this learned norm, effectively detecting novel attacker techniques.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: TRAIN one-class SVM or isolation forest on legitimate (service_name, image_path_directory) pairs | ON Registry_Modification_Event, get new pair | USE model to score anomaly level | ALERT if score exceeds threshold
  - question: Has a 'Performance' or 'Parameters' subkey, or a 'ServiceDll' value, been added or modified for a service, pointing to a DLL that matches threat intelligence?
    context: This question targets a specific persistence mechanism where adversaries hijack services by forcing them to load a malicious DLL. By monitoring for the creation or modification of these specific registry keys and values, and then checking the associated DLL against threat intelligence, analysts can detect this form of DLL hijacking.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Threat Intelligence Feeds
      - Relevant on Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Events (EventID=4657) WHERE (Object_Name MATCHES 'HKLM\\SYSTEM\\...\\Services\\*\\(Performance|Parameters|ServiceDll)') | IF ServiceDll is modified, GET DLL_Path | GET_HASH(DLL_Path) | LOOKUP Threat_Intel(Hash, DLL_Path) | ALERT on match
  - question: Has a 'Performance', 'Parameters', or 'ServiceDll' key been added to a service that does not normally use one, or does the 'ServiceDll' path have a low prevalence?
    context: This question uses statistical baselining to detect the abuse of service DLL loading. Most services do not use these specific keys. By creating a baseline of services that legitimately use them, we can alert on any deviation. Additionally, even for services that do use a 'ServiceDll', the path to that DLL is usually consistent. A DLL path that is statistically rare across the environment is a strong indicator of a malicious implant.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: MAINTAIN baseline of services that use Performance/Parameters/ServiceDll keys | ALERT on creation of these keys for any service not in baseline | SEPARATELY, calculate frequency of all ServiceDll paths | ALERT on paths in bottom 5% of rarity
  - question: Can a machine learning model assess the risk of a 'ServiceDll' or related key modification?
    context: This question leverages a machine learning classifier to score the risk of a service DLL modification. The model can consider multiple features in concert—such as the service's history, the rarity of the DLL path, path entropy, and the reputation of the process making the change—to make a more accurate determination of malicious intent than any single rule could.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Domain Controllers, Application Servers, Critical Workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON Registry_Event for ServiceDll/Performance/Parameters | EXTRACT features (service_history, DLL_path_rarity, path_entropy, modifying_process_reputation) | INPUT features to classification model | ALERT if risk score is high
  - question: Are processes started by services.exe communicating with known malicious destinations?
    context: This question aims to detect command-and-control (C2) communication originating from a compromised service. Since services.exe is the parent of all services, we can trace network connections from its child processes and compare the destination IPs against threat intelligence feeds to find connections to known C2 servers.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Threat Intelligence Feeds
      - Relevant on Network Egress Points, DNS Servers, All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Process_Creation_Events (EventID=4688) WHERE ParentProcessName = 'services.exe' | CORRELATE with Network_Connection_Logs by HostIP and Timestamp | GET DestinationIP | LOOKUP Threat_Intel(DestinationIP) | ALERT on match
  - question: Are processes started by services.exe exhibiting statistically regular, machine-like network beaconing?
    context: This question is designed to find C2 beaconing behavior that may not use known malicious IPs. Malicious implants often communicate back to their C2 server on a regular, fixed interval. By analyzing the time between connections from a service-spawned process to a specific destination, a very low variance in this timing (i.e., highly regular) is a strong indicator of automated beaconing.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Relevant on Network Egress Points, DNS Servers, All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: FOR_EACH service-spawned process, ANALYZE its network connections | CALCULATE standard deviation of time delta between connections to the same destination | ALERT if standard deviation is in the lowest 5th percentile of variance
  - question: Is the network traffic from a service-spawned process significantly deviating from its forecasted baseline?
    context: This question uses time-series forecasting to model the normal network behavior for each service. A machine learning model (like LSTM or ARIMA) can learn the expected patterns of data volume, connection counts, and protocols. When the actual observed traffic significantly deviates from what the model predicted, it signals an anomaly that could be C2 activity or data exfiltration.
    answer_sources:
      - Windows Event ID 4688
      - Zeek conn.log
      - Zeek dns.log
      - Relevant on Network Egress Points, DNS Servers, All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: TRAIN time-series model on legitimate network traffic patterns for each service | CONTINUOUSLY monitor live traffic from service-spawned processes | ALERT when observed traffic significantly deviates from the forecasted model
  - question: Has a service's 'FailureCommand' been set to execute a known privilege escalation tool?
    context: This question targets a specific privilege escalation technique where an adversary configures a high-privilege service to execute their command upon failure. By monitoring for modifications to the 'FailureCommand' registry value and comparing the specified command against a list of known privilege escalation tools (like Juicy Potato), we can detect this attempt.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Threat Intelligence Feeds
      - Relevant on Standard User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE Object_Name ENDS_WITH '\\FailureCommand' | EXTRACT command from New_Value | GET hash of command executable | LOOKUP Threat_Intel(Hash, command_arguments) for privesc tools | ALERT on match
  - question: Has a service's 'FailureCommand' registry value been modified?
    context: This question uses a simple but effective statistical anomaly detection method. Legitimate configuration of a 'FailureCommand' is extremely rare in most environments. Therefore, any modification to this value, regardless of the command, should be treated as a high-severity anomaly and trigger an immediate alert for investigation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Standard User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Registry_Modification_Events (EventID=4657) WHERE Object_Name ENDS_WITH '\\FailureCommand' | TRIGGER high-severity alert
  - question: Can a machine learning model distinguish between benign and malicious 'FailureCommand' values?
    context: This question applies text classification to analyze the command set in the 'FailureCommand' value. A model can be trained to recognize features of malicious commands, such as the presence of keywords like 'powershell', 'whoami', or 'net user', suspicious path locations, or encoded commands. This helps automate the analysis of any 'FailureCommand' modification to quickly identify privilege escalation attempts.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on Standard User Workstations, Multi-user Servers, All Endpoints
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON 'FailureCommand' modification | EXTRACT command string | INPUT command into text classification model | ALERT if model classifies as 'malicious'
  - question: Is a non-administrative user using system utilities like sc.exe, reg.exe, or PowerShell to modify a service's configuration?
    context: This question focuses on the unauthorized use of legitimate system tools for malicious purposes. Service configurations should only be modified by administrators or automated system management tools. An alert on a non-privileged user attempting to use these utilities to alter a service is a strong indicator of a privilege escalation attempt.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH Process_Creation_Events (EventID=4688) for 'sc.exe', 'reg.exe', 'powershell.exe' with service modification arguments | CHECK if executing user is in a non-privileged group | ALERT if true
  - question: Are unusual parent processes (like browsers or office apps) spawning system utilities to modify service configurations?
    context: This question hunts for process chain anomalies. Legitimate service modifications are typically initiated by system processes or admin consoles, not by user applications like Outlook or Chrome. When a common user application spawns a process like 'sc.exe' or 'reg.exe' to modify a service, it's a major red flag for code execution from a compromised application.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: PROFILE parent processes of 'sc.exe', 'reg.exe', 'powershell.exe' when modifying services | FLAG executions by statistically rare parents (e.g., 'outlook.exe', 'chrome.exe') as outliers | ALERT on outlier
  - question: Can a machine learning model detect anomalous event sequences indicative of service modification for privilege escalation?
    context: This question uses sequence analysis to detect a chain of actions that collectively point to a privilege escalation attempt. An adversary might first exploit a vulnerability to spawn PowerShell from a browser, which then modifies a service registry key. A model trained on benign sequences can flag this anomalous chain of events as high-risk, even if each individual event seems plausible in isolation.
    answer_sources:
      - Windows Event ID 4688
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: USE sequence analysis model to monitor event chains (e.g., browser -> powershell -> service registry modification) | TRAIN model on benign sequences | ALERT on anomalous sequences
  - question: Is an adversary changing a service registry key's permissions and then immediately modifying the service's configuration?
    context: This question detects a classic privilege escalation attack chain. The adversary first grants themselves permission to a service's registry key (Event 4670) and then immediately modifies a value like 'ImagePath' (Event 4657) to point to their payload. Correlating these two events on the same object by the same user in a short time window is a high-fidelity indicator of this attack.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Relevant on Domain Controllers, Member Servers, Administrative Workstations
    range: last 10 minutes
    queries:
      - query_tech: pseudocode
        query: TRIGGER on EventID=4670 for service registry object | WITHIN 10 minutes, SEARCH for EventID=4657 on same object name by same user | ALERT if sequence is found
  - question: Is there a statistically short time delta between a service registry key permission change and a subsequent modification?
    context: This question adds a statistical measure to the correlation of permission changes and modifications. Automated exploits perform this sequence of actions almost instantaneously. By measuring the time delta between the 4670 and 4657 events, a very short duration (e.g., under 5 minutes) can be flagged as a statistical anomaly, strongly indicating an automated attack chain rather than manual administrative action.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Relevant on Domain Controllers, Member Servers, Administrative Workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: CORRELATE EventID=4670 and EventID=4657 on same service registry key | MEASURE time delta | ALERT if delta is below a statistically determined threshold (e.g., 1st percentile)
  - question: Can a graph-based model detect anomalous paths representing service modification attack chains?
    context: This question proposes using graph analytics to model event sequences. Legitimate administrative workflows (like a software deployment) have recognizable event graphs. An attack, such as a user gaining permissions, changing a path, and the service restarting, creates a different, anomalous graph. A model trained to recognize legitimate graphs can alert on these deviations.
    answer_sources:
      - Windows Event ID 4670
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Windows Event ID 7036
      - Relevant on Domain Controllers, Member Servers, Administrative Workstations
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: MODEL event sequences as paths in a graph | TRAIN model on legitimate administrative workflow graphs | ALERT on paths that deviate from the trained model
  - question: Has a service's 'ImagePath' been modified to a Living Off the Land Binary (LOLBAS) with suspicious command-line arguments?
    context: This question targets a defense evasion technique where adversaries use legitimate, signed Microsoft binaries (LOLBAS) to execute malicious code. By monitoring for service paths pointing to LOLBAS like 'rundll32.exe' or 'powershell.exe' and then inspecting their command-line arguments for encoded payloads, download cradles, or script references, we can uncover this behavior.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: SEARCH for 'ImagePath' modifications (EventID=4657) to known LOLBAS | ON service start, inspect process command line (EventID=4688) for suspicious patterns (e.g., '-enc', 'IEX', '.ps1') | ALERT on match
  - question: Are LOLBAS executions spawned by services using command-line arguments with unusually high entropy or length?
    context: This question uses statistical analysis of command lines to detect malicious LOLBAS usage. Adversaries often use long, complex, and obfuscated (high entropy) command-line arguments to hide their payloads. By baselining the normal command-line length and entropy for each LOLBAS when used by a service, we can flag significant outliers as suspicious.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: FOR LOLBAS processes spawned by services, calculate entropy and length of command-line arguments | ALERT if values exceed the 98th percentile of the established baseline for that LOLBAS
  - question: Can a machine learning model classify LOLBAS command-line usage as benign or malicious?
    context: This question proposes using a supervised machine learning model to distinguish between legitimate and malicious use of LOLBAS. By training a classifier on features like argument counts, the presence of URLs, Base64 strings, and specific flags, the model can learn to detect novel and complex malicious command lines that might evade static signatures and simple statistical checks.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: TRAIN classifier on LOLBAS command lines with features (arg_count, has_url, has_base64) | ON LOLBAS execution from service, feed command line to model | ALERT if classified as malicious
  - question: Has a service's 'DisplayName' or 'Description' been modified to masquerade as a legitimate service via misspelling?
    context: This question aims to detect service masquerading. Adversaries create malicious services with names that are minor misspellings of legitimate ones (e.g., 'WinDefend' instead of 'WinDefend') to blend in. By calculating the string similarity (Levenshtein distance) between a new or modified service name and a list of real service names, we can flag close matches, especially if their 'ImagePath' is incorrect.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON service creation/modification, compare DisplayName to list of legitimate service names using Levenshtein distance | IF distance is low (1-2) AND ImagePath is incorrect for that service, ALERT
  - question: Has a service been modified to use a known 'DisplayName' but with a statistically rare 'ImagePath'?
    context: This question identifies masquerading by focusing on the relationship between a service's display name and its executable path. In a healthy environment, there is a strong and consistent correlation between them. By creating a baseline map of legitimate (DisplayName, ImagePath) pairs, we can alert on any modification that pairs a known, legitimate name with a new or statistically rare executable path.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: CREATE baseline map of (DisplayName, ImagePath) pairs from healthy systems | ALERT on any modification that creates a known DisplayName with a rare or never-before-seen ImagePath
  - question: Can machine learning clustering identify masquerading services?
    context: This question uses unsupervised machine learning to find services that are trying to blend in. By clustering all services based on features of their name (like character n-grams) and path, legitimate services will form large groups. A malicious service masquerading with a slightly misspelled name will likely form its own small, distinct cluster, making it easy to spot for investigation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4697
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: CLUSTER all services based on features of their name (n-grams) and path | INVESTIGATE services that form small, distinct clusters
  - question: Has a critical security service (like an EDR or antivirus) been disabled or had its executable path altered?
    context: This question is a high-priority check for direct tampering with security controls. Adversaries will often attempt to disable security software to operate undetected. This is a high-fidelity alert that monitors specific, critical registry keys for any modification, especially changing the 'Start' type to disabled (value 4) or altering the 'ImagePath' to an invalid location.
    answer_sources:
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: MONITOR a list of critical security service registry keys | TRIGGER high-priority alert on any modification to these keys, especially if 'Start' value is set to 4 or 'ImagePath' is changed
  - question: Is there a sudden, environment-wide increase in modifications to security service registry keys?
    context: This question looks for broader campaign activity rather than a single event. While a single modification might be missed, a sudden spike in modification events across many endpoints targeting various security services is a strong statistical indicator of a coordinated, automated attack attempting to disable defenses across the enterprise.
    answer_sources:
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: MONITOR the rate of modifications to security service registry keys across the environment | ALERT if the rate suddenly increases beyond a statistical threshold
  - question: Can an anomaly detection model identify illegitimate modifications to security service registry keys?
    context: This question uses machine learning to distinguish between legitimate and malicious changes to security tools. Legitimate changes, like updates, happen under specific contexts (e.g., initiated by a patch management system during a maintenance window). An anomaly detection model can learn this context and alert on any modification that is an outlier based on its timing, the user account, or the process that made the change.
    answer_sources:
      - Windows Event ID 4657
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: TRAIN anomaly detection model on legitimate modification events for security services | USE model to score new modifications based on context (time, process, user) | ALERT on anomalous modifications
  - question: Has a process not typically associated with system administration modified a service registry key?
    context: This question is based on identifying anomalous process behavior. Service registry keys should only be modified by a small, predictable set of system and administrative processes. By maintaining an allow-list of these processes, we can generate a high-fidelity alert whenever a process not on the list (e.g., winword.exe, chrome.exe) performs such a modification, which is a strong sign of compromise.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: ON service registry modification (EventID=4657), identify modifying process name (via EventID=4688) | MAINTAIN allow-list of authorized processes (svchost.exe, sc.exe, etc.) | ALERT if modifying process is not on the list
  - question: Has a statistically rare process modified a service registry key?
    context: This question provides a dynamic way to find suspicious processes without a static allow-list. By calculating the frequency of all processes that modify service registry keys across the enterprise, we can identify outliers. A modification made by a process that very rarely, if ever, performs this action is statistically anomalous and warrants investigation.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: CALCULATE prevalence of all processes that modify service registry keys | FLAG modifications made by processes in the bottom 5th percentile of frequency | ALERT on flagged modifications
  - question: Can a machine learning model predict if a (Modifying_Process, Target_Service) pair is malicious?
    context: This question uses a classification model to assess the risk of a service modification based on the relationship between the actor (modifying process) and the target (service). The model can learn which pairings are legitimate (e.g., TrustedInstaller.exe modifying Windows Update service) and flag those that are suspicious (e.g., outlook.exe modifying a remote access service), even if the process itself is sometimes legitimate.
    answer_sources:
      - Windows Event ID 4657
      - Windows Event ID 4688
      - Relevant on All Endpoints and Servers
    range: last 90 days
    queries:
      - query_tech: pseudocode
        query: TRAIN classification model on (Modifying_Process_Name, Target_Service_Name) pairs | SCORE new modification events using the model | ALERT if the pair is predicted to be malicious