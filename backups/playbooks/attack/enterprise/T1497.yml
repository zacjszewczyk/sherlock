name: "T1497: Virtualization-Sandbox Evasion"
id: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
description: "This playbook helps analysts investigate whether an adversary is attempting to evade defenses or discover analysis environments by detecting virtualization or sandboxing. This involves checking for processes that match known evasion tool hashes, query for VM-specific artifacts (e.g., files, registry keys, WMI objects), terminate unusually quickly after these checks, or employ time-based evasion by delaying execution. The playbook also covers discovery techniques where malware checks for analysis tools via command-line strings, pipes enumeration commands to find security processes, performs 'humanity checks' (e.g., mouse movement, CPU count, uptime) to determine if a real user is present, or makes a simple, low-volume network call to verify internet connectivity before proceeding with malicious activity."
type: "technique"
related:
  - "TA0005: Defense Evasion"
  - "TA0007: Discovery"
contributors:
  - "Zachary Szewczyk"
created: "2025-10-01"
modified: "2025-10-01"
version: "1.0"
tags: "none"
questions:
  - question: "Are any newly executed processes identified as known virtualization or sandbox evasion tools based on their file hash?"
    context: "This question aims to detect the most straightforward evasion attempts where an adversary uses a well-known tool or malware with sandbox-evasion capabilities. By comparing the hash of every new process against a curated list of malicious hashes from threat intelligence, analysts can quickly identify known threats. A match provides a high-confidence indicator that an adversary is actively attempting to determine if they are running in an analysis environment."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events
          WHERE event_id IN (1, 4688)
          JOIN threat_intelligence_feed ON process_hash = feed_hash
          WHERE feed_category = 'sandbox-evasion'
          RETURN hostname, process_name, process_hash, timestamp

  - question: "Has a known evasion tool hash appeared on an unusually high number of hosts in a short period?"
    context: "This question helps differentiate a targeted, isolated incident from a widespread campaign. By performing frequency analysis on matched hashes, analysts can identify if a specific evasion tool is being deployed at scale. A sudden spike in the prevalence of a hash across many distinct hosts can indicate an automated attack and should be prioritized for incident response."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events
          WHERE process_hash IN (known_evasion_tool_hashes)
          AGGREGATE distinct_host_count by process_hash over 1_hour_windows
          WHERE distinct_host_count > 95th_percentile_baseline
          ALERT on process_hash, distinct_host_count

  - question: "Can process metadata, combined with a hash match, be used to classify a process execution as a malicious evasion attempt?"
    context: "This question seeks to improve detection fidelity by using machine learning. While a hash match is a strong indicator, a binary classification model can add context by analyzing other features like the parent process, user context, and command-line arguments. This helps distinguish a true malicious event from a potential false positive (e.g., a security researcher running a tool) and automates the classification of suspicious events."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI)."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          INPUT process_event_features (parent_process, user, cmd_line, hash_is_known_evasion_tool)
          APPLY pre-trained_binary_classifier
          RETURN process_guid, classification_result ('malicious-evasive' or 'benign'), confidence_score

  - question: "Is a single process rapidly querying for multiple system artifacts known to indicate a virtualized or sandbox environment?"
    context: "This question targets a common evasion behavior where malware probes the system for specific evidence of virtualization, such as unique registry keys, files, or WMI objects associated with VMware, VirtualBox, or other hypervisors. Correlating multiple such checks from a single process within a short time window provides strong evidence of a deliberate evasion attempt, as benign applications rarely perform such a diverse set of queries."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Sysmon Event ID 19"
      - "Sysmon Event ID 20"
      - "Sysmon Event ID 21"
      - "Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events from all managed endpoints."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH file_access, registry_access, wmi_events
          WHERE target_object IN (list_of_vm_artifacts)
          GROUP by process_guid over 10_second_windows
          WHERE distinct_target_object_count > 3
          ALERT on process_guid, hostname, list_of_queried_artifacts

  - question: "Is a process generating an anomalously high 'Sandbox-Awareness Score' by querying for weighted virtualization artifacts?"
    context: "This question moves beyond simple counts to a more nuanced, risk-based approach. By assigning different weights to various sandbox artifacts (e.g., a generic VM driver is less suspicious than a specific debugger key), a 'Sandbox-Awareness Score' can be calculated for each process. This allows analysts to prioritize alerts, focusing on processes that query high-value, high-confidence indicators of an analysis environment, and helps reduce noise from legitimate software that may incidentally query a low-value artifact."
    answer_sources:
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Sysmon Event ID 19"
      - "Sysmon Event ID 20"
      - "Sysmon Event ID 21"
      - "Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each process_event:
            IF event.target_object in weighted_artifact_list:
              process.score += artifact.weight
          SEARCH processes
          WHERE process.score > (mean_score_for_executable + 3 * std_dev)
          ALERT on process_guid, process.score

  - question: "Does the sequence of system events (file, registry, WMI access) from a new process match the known ordered logic of an evasion framework?"
    context: "This question addresses the sophisticated nature of modern evasion tools, which often perform checks in a specific, logical order. A simple correlation rule might miss this. By using a sequence analysis model (like an LSTM), analysts can detect the characteristic 'fingerprint' of an evasion script's execution flow, distinguishing it from the more random system interactions of benign applications. This technique is powerful for identifying not just known tools but also new variants that follow a similar logical pattern."
    answer_sources:
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Sysmon Event ID 19"
      - "Sysmon Event ID 20"
      - "Sysmon Event ID 21"
      - "Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          INPUT sequence_of_system_events for new_process_guid
          APPLY pre-trained_sequence_analysis_model (e.g., LSTM)
          IF model_output == 'evasion_pattern_match':
            ALERT on process_guid, matched_pattern

  - question: "Did a process terminate abnormally quickly after performing a known sandbox check, without performing any other significant actions?"
    context: "This question targets malware designed to halt execution immediately upon detecting a sandbox. A stateful rule can identify this behavior by first flagging a process that queries for sandbox artifacts and then observing its termination shortly thereafter, without any intervening file creation, network connections, or child process events. This 'quick exit' is a strong indicator that the malware has successfully identified the analysis environment and is aborting its mission to avoid detection."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 5"
      - "Sysmon Event ID 11"
      - "Zeek conn.log"
      - "SIEM or data lake platform capable of correlating process lifecycle events, file system modifications, and network connection logs."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for process_guid where (event_type = 'Artifact Query') as T1
          FOLLOWED BY process_guid where (event_type = 'Process Terminate') as T2
          WITHIN 5 seconds
          WHERE NO (event_type IN ('File Create', 'Network Connection', 'Child Process')) for same process_guid between T1 and T2
          ALERT on process_guid, hostname

  - question: "Is a process that performed a sandbox check exhibiting an anomalously short lifespan and low resource usage compared to its historical behavior?"
    context: "This question uses historical baselining to spot abnormal process terminations. For any given executable (e.g., 'svchost.exe'), there is a normal range for its lifespan and resource consumption. If an instance of that process performs a sandbox check and then terminates with a lifespan and I/O usage in an extremely low percentile (e.g., < 5th percentile) compared to its peers, it is highly anomalous and likely an evasive termination."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 5"
      - "Sysmon Event ID 11"
      - "Zeek conn.log"
      - "SIEM or data lake platform with process lifecycle and resource usage data."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_sessions
          WHERE process performed sandbox_check
          AND process.lifespan < 5th_percentile_for_executable_name
          AND process.network_io < 10th_percentile_for_executable_name
          ALERT on process_guid, process_name, lifespan

  - question: "Can a process session be classified as an 'evasive-termination' based on its lifecycle features like lifespan, I/O, and whether it performed a sandbox check?"
    context: "This question operationalizes the concept of evasive termination using a supervised machine learning model. By training a classifier on a set of features from completed process sessions (lifespan, CPU, I/O, child processes, etc.) and including a boolean flag for whether a sandbox check was performed, the model can learn to automatically distinguish between normal and evasive terminations. This automates the analysis and can uncover more subtle instances of this behavior."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 5"
      - "Sysmon Event ID 11"
      - "Zeek conn.log"
      - "SIEM or data lake platform capable of creating feature sets from process sessions."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each terminated_process_session:
            EXTRACT features (lifespan, cpu, io, children, sandbox_check_performed)
            APPLY pre-trained_classifier (e.g., Decision Tree)
            IF classification == 'evasive-termination':
              ALERT on process_guid, hostname

  - question: "Has a process remained dormant for an unusually long time (e.g., >15 minutes) before making its first outbound network connection?"
    context: "This question addresses time-based evasion, where malware 'sleeps' for a prolonged period to outlast the typical runtime of an automated sandbox. A simple rule that correlates a process start time with its first network connection can catch this behavior. An alert is triggered if the delay exceeds a long, fixed threshold, indicating a potential attempt to evade automated analysis by waiting it out."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Correlated endpoint and network log sources within a SIEM or data lake."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_start_events as T1
          JOIN first_network_connection_events as T2 ON T1.process_guid = T2.process_guid
          WHERE T1.process_name NOT IN (allowlist)
          AND (T2.timestamp - T1.timestamp) > 15 minutes
          ALERT on process_guid, process_name, delay_duration

  - question: "Is a process exhibiting a statistically significant delay before its first network connection compared to its own historical baseline or the baseline of all other processes?"
    context: "This question refines the time-based evasion detection by using statistical analysis instead of a fixed threshold. By calculating the normal 'time-to-first-network-connection' for each executable, the system can flag any new instance that is a statistical outlier (e.g., its delay is in the 99th percentile). This approach is more adaptive and reduces false positives from applications that are legitimately slow to start, focusing only on true deviations from normal behavior."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Correlated endpoint and network log sources within a SIEM or data lake."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CALCULATE delay = first_network_connection_time - process_start_time
          SEARCH processes
          WHERE delay > 99th_percentile_delay_for_executable_name
          ALERT on process_guid, process_name, delay

  - question: "Can processes be clustered into a 'delayed-action' group based on their resource utilization patterns over time?"
    context: "This question uses unsupervised machine learning to find 'sleeper' malware without relying on network connections. By applying time-series clustering to resource usage data (CPU, disk, network), processes can be grouped by their behavior patterns. A cluster characterized by a short burst of initial activity, a long period of dormancy, and then a second burst of activity is highly indicative of time-based evasion and warrants investigation."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 3"
      - "Zeek conn.log"
      - "Correlated endpoint and network log sources within a SIEM or data lake."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR all processes, CREATE time-series vector of (CPU, Network, Disk) usage
          APPLY time-series clustering (e.g., k-Shape)
          INVESTIGATE clusters that exhibit a [low_activity -> zero_activity -> high_activity] pattern
          
  - question: "Are there any process command lines or PowerShell scripts containing strings or patterns unique to known sandbox discovery and evasion tools?"
    context: "This question focuses on detecting evasion tools through their command-line arguments or script content. Many open-source and private evasion tools have unique strings, function names, or argument patterns. Using regular expressions to search for these high-fidelity indicators in command-line and PowerShell script block logs provides a direct and reliable way to detect their use in the environment."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows PowerShell Event ID 4104"
      - "Centralized log platforms that capture and store full process command-line arguments and decoded PowerShell script block logs."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_events, powershell_script_blocks
          WHERE command_line MATCHES REGEX('pafish|al-khaser|Find-AVSignature')
          OR script_content MATCHES REGEX('pafish|al-khaser|Find-AVSignature')
          ALERT on hostname, process_name, command_line

  - question: "Are processes being executed with command-line arguments or script tokens that are statistically rare across the enterprise and associated with public evasion tools?"
    context: "This question aims to find unknown or modified evasion tools by looking for statistical anomalies. Instead of exact string matches, this method calculates the rarity of each word or 'token' in a command line. A command containing multiple rare tokens that are also found in public repositories of evasion tools is highly suspicious. This technique helps uncover novel threats that avoid simple signature-based detection."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows PowerShell Event ID 4104"
      - "Centralized log platforms with full command-line and script block logging."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          CALCULATE rarity_score for each token in command_line/script
          CALCULATE total_score for each event by summing token scores
          WHERE total_score > threshold
          AND tokens INTERSECT with known_evasion_tool_tokens
          ALERT on event, total_score

  - question: "Can a text classification model identify new or unknown evasion tools based on the semantic and syntactic features of their command lines and script content?"
    context: "This question leverages advanced machine learning to proactively hunt for new evasion techniques. By training a text classification model (like a CNN or transformer) on a large dataset of both benign and malicious scripts/commands, the system can learn the underlying patterns of evasive code. It can then score new, unseen commands and scripts in real-time, flagging those that 'look like' an evasion attempt, even if they don't use any known strings."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows PowerShell Event ID 4104"
      - "Centralized log platforms with full command-line and script block logging."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          INPUT new_command_line or new_script_block
          APPLY pre-trained_text_classification_model
          IF classification == 'evasion-tool' AND confidence > 0.9:
            ALERT on event, confidence_score

  - question: "Are processes using piped commands to enumerate system processes or services and filter for keywords related to security and analysis tools?"
    context: "This question targets a common discovery technique where an adversary uses built-in command-line tools to search for evidence of security monitoring. A typical pattern is running a command like 'tasklist' and piping (|) the output to 'findstr' to search for 'sysmon' or 'wireshark'. A rule that detects this specific chain of enumeration piped to a filter with security-related keywords is highly effective at catching active, hands-on-keyboard discovery."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint log aggregators collecting full process command-line arguments."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH process_creation_events
          WHERE command_line MATCHES REGEX('(tasklist|sc query) \\| (findstr|grep) (wireshark|sysmon|procmon)')
          ALERT on hostname, full_command_line, parent_process

  - question: "Is a user or host executing an anomalous number of chained enumeration-and-filter commands compared to their established baseline?"
    context: "This question builds on the previous one by adding behavioral baselining. While a single piped command might be legitimate for a power user, a sudden increase in this activity is suspicious. By profiling the normal frequency of such commands for each user and host, the system can flag any account whose activity exceeds its baseline by a significant margin (e.g., 3 standard deviations), indicating a potential compromise or malicious insider."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint log aggregators collecting full process command-line arguments."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          COUNT piped_enumeration_commands per user per day
          CALCULATE 30-day moving average and standard deviation for each user
          IF today_count > (average + 3 * std_dev):
            ALERT on user, today_count

  - question: "Can graph-based analysis of parent-child process chains identify abnormal execution flows, such as an Office application spawning a shell to search for security tools?"
    context: "This question uses graph analysis to detect suspicious process lineage. Normal system activity follows predictable patterns (e.g., 'explorer.exe' starts 'cmd.exe'). A graph model can learn these patterns and then flag deviations. An execution chain like 'winword.exe -> cmd.exe -> tasklist | findstr sysmon' is a significant anomaly, as Office applications should not be spawning shells to hunt for security tools. This approach is excellent for detecting fileless attacks and initial access through phishing."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Endpoint log aggregators collecting full process command-line arguments and parent-child relationships."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          MODEL process execution chains as graphs
          LEARN common/benign graph structures
          IDENTIFY anomalous graphs, e.g., (parent='winword.exe', child='cmd.exe', child_cmd_contains='tasklist | findstr')
          ALERT on anomalous_graph, hostname, user

  - question: "Is a single process performing a combination of distinct 'humanity checks' (e.g., checking screen resolution, recent files, system uptime) within seconds of starting?"
    context: "This question targets malware that tries to determine if it's running on a real user's machine versus a bare sandbox. It does this by checking for signs of human interaction or typical user-system configurations. A rule that triggers when a single process performs several of these disparate checks (querying screen resolution, accessing recent documents, checking system uptime) in a short window is a strong indicator of this evasion technique."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Endpoint log aggregators collecting a high volume of diverse event types."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH for events related to 'humanity checks' (e.g., query HKCU\\Control Panel\\Desktop, access 'Recent' folder, run 'systeminfo')
          GROUP by process_guid over 10_second_windows
          WHERE distinct_check_count >= 3
          ALERT on process_guid, hostname, checks_performed

  - question: "Does a new process exhibit unusually high event-type entropy (e.g., touching registry, files, and WMI in rapid succession) during its initial execution phase?"
    context: "This question provides a behavioral heuristic to find processes performing diverse system checks. The Shannon entropy of the event types generated by a process can quantify its behavioral complexity. A benign process usually has a focused purpose (e.g., mostly network events or mostly file events), resulting in low entropy. A malware sample performing broad reconnaissance will touch many different system components (registry, files, WMI, network) in a short time, resulting in high entropy, which can be flagged as anomalous."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Endpoint log aggregators collecting a high volume of diverse event types."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new process_guid, within first 30 seconds:
            CALCULATE shannon_entropy of its generated event_types (e.g., RegRead, FileRead, WMIQuery)
          SEARCH processes
          WHERE event_entropy_score > 99th_percentile_of_all_processes
          ALERT on process_guid, entropy_score

  - question: "Can an unsupervised anomaly detection model (like an autoencoder) identify abnormal process startup behavior indicative of diverse humanity checks?"
    context: "This question proposes an advanced, self-learning approach to detect abnormal startup behavior. An autoencoder model is trained on sequences of system events from thousands of benign application startups, learning what 'normal' looks like. When a new process executes, its event sequence is fed to the model. If the process is performing a wide range of humanity checks, its behavior will deviate from the norm, and the model will fail to reconstruct it accurately. This high 'reconstruction error' flags the process as a behavioral anomaly for investigation."
    answer_sources:
      - "Sysmon Event ID 1"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "Endpoint log aggregators collecting a high volume of diverse event types."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          INPUT sequence_of_startup_events for new_process
          APPLY pre-trained_autoencoder_model
          CALCULATE reconstruction_error
          IF reconstruction_error > anomaly_threshold:
            ALERT on process_guid, reconstruction_error

  - question: "Is a process making a single, minimal-data network connection to a public service and then ceasing all network activity, indicative of a connectivity check?"
    context: "This question targets a simple evasion technique where malware checks for internet access before revealing its C2 infrastructure. The malware makes a single, harmless-looking connection (e.g., a DNS query to 8.8.8.8) and, if successful, proceeds. An alert that looks for this pattern—a single connection with very few bytes transferred, followed by no other network activity from that process—can effectively detect these 'canary' connections."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Sysmon Event ID 3"
      - "Sysmon Event ID 22"
      - "Network sensor logs (e.g., Zeek) from internet egress points and core DNS servers, correlated with endpoint network connection events."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH network_logs
          WHERE destination_ip IN (public_dns_servers)
          AND total_bytes < 256
          AND connection_state IN ('S0', 'REJ')
          AND process makes no other connections in the next 60 seconds
          ALERT on process_guid, destination_ip

  - question: "Are there outbound 'micro-connections' with anomalously low byte counts that can be attributed to a process performing an internet connectivity check?"
    context: "This question uses statistical analysis to find 'canary' connections across the entire enterprise network. By analyzing the distribution of all outbound connection sizes, analysts can identify a threshold for 'micro-connections' (e.g., connections in the 1st percentile of data transferred). When these tiny connections are attributed back to the source process on the endpoint, a process whose only network activity consists of one or more such connections becomes a strong suspect for performing an evasion check."
    answer_sources:
      - "Zeek conn.log"
      - "Sysmon Event ID 3"
      - "Network sensor logs and endpoint network events."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          SEARCH network_connections
          WHERE total_bytes < 1st_percentile_of_all_connections
          AND destination_ip_reputation = 'high'
          GROUP by process_guid
          WHERE count(other_connections) == 0
          ALERT on process_guid, list_of_micro_connections

  - question: "Can a one-class anomaly detection model trained on benign network flows identify outlier connections with extremely low duration and byte counts as 'canary' evasion checks?"
    context: "This question applies unsupervised machine learning directly to network traffic to find evasion checks. A one-class model (like an Isolation Forest) is trained on features of millions of benign network flows, creating a complex boundary of what constitutes 'normal' network behavior. Any flow that falls far outside this boundary—especially those with characteristics like extremely short duration, minimal byte count, and a high-reputation destination—is flagged as an anomaly, providing a powerful way to detect these subtle evasion checks without prior signatures."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Network sensor logs from internet egress points and core DNS servers."
    range: "last 90 days"
    queries:
      - technology: "pseudocode"
        query: |
          FOR each new_network_flow:
            EXTRACT features (duration, total_bytes, dest_port, dest_ip_rep)
            APPLY pre-trained_one_class_svm_model
            IF model_output == 'anomaly':
              ALERT on flow_details, src_ip