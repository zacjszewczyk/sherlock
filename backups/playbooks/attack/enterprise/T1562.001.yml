name: T1562.001: Disable or Modify Tools
id: f47ac10b-58cc-4372-a567-0e02b2c3d479
description: This playbook addresses the information requirement "Has an adversary attempted to disable or modify security tools (e.g., antivirus, EDR, Sysmon) to evade detection?". It provides investigative steps to identify this behavior by searching for various indicators of compromise. These indicators include: the execution of known disabler tools identified via threat intelligence; the use of command-line utilities like 'net stop', 'sc config', or PowerShell cmdlets to halt or reconfigure security services; the temporal correlation of suspicious process execution (e.g., unsigned binaries) with security service stop events; direct modification of critical registry keys that control security tool configuration; and attempts to cover tracks by clearing Windows Event Logs or causing a significant, anomalous drop in log volume from key sensors.
type: technique
related:
  - TA0005: Defense Evasion
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
investigative_questions:
  - question: Has a process been created that matches the hash or name of a known security tool disabler from our threat intelligence feed?
    context: This question aims to detect the most direct evidence of an adversary using a known malicious tool to disable security software. Matching against a curated threat intelligence (CTI) feed provides a high-fidelity signal that a malicious binary is present and active. An alert from this detection is a strong indicator of compromise and requires immediate investigation.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - Zeek software.log
      - CTI feed of known security tool disablers
      - NAI: All enterprise workstations and servers, with heightened monitoring on administrative jump boxes, domain controllers, and security infrastructure servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE (process_hash IN cti_feed OR process_name IN cti_feed)
  - question: For a process identified as a potential security tool disabler, was it launched by an unusual or statistically rare parent process?
    context: This question helps to add context and reduce false positives. Legitimate software might occasionally be flagged, but it will typically be launched by a standard parent process (e.g., explorer.exe, a software updater). A malicious tool, however, is often launched from an unusual parent, like cmd.exe, powershell.exe in a non-interactive session, or another malicious process. Identifying a statistically rare parent-child relationship significantly increases the likelihood of malicious activity.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: All enterprise workstations and servers, with heightened monitoring on administrative jump boxes, domain controllers, and security infrastructure servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE (process_name IN cti_feed) | STATS count(parent_process) BY process_name | IDENTIFY parent_process with low frequency
  - question: Can we identify previously unknown security tool disablers by scoring new process executions based on their characteristics like parent process, command-line entropy, and user context?
    context: This question addresses the detection of zero-day or unknown disabler tools that are not yet in CTI feeds. By using a machine learning model trained on features of known malicious and benign processes, we can proactively identify suspicious activity based on its behavior and context rather than a static signature. A high probability score from the model indicates a process that warrants analyst review even without a known-bad hash.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: All enterprise workstations and servers, with heightened monitoring on administrative jump boxes, domain controllers, and security infrastructure servers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM process_creation_events | APPLY ML_model(features: parent_process, cmd_entropy, user, file_path) | ALERT WHERE score > threshold
  - question: Has a process been executed with command-line arguments that attempt to stop, disable, or reconfigure known security services or tools?
    context: This question focuses on detecting "living-off-the-land" techniques, where adversaries use legitimate system utilities (like net.exe, sc.exe, taskkill.exe, or powershell.exe) to disable defenses. By searching for specific command-line patterns targeting security tools, we can identify malicious intent even when the tools used are themselves benign. This is a common defense evasion tactic.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Command-line and script block logs from all enterprise workstations and servers, especially domain controllers and administrative hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events WHERE command_line MATCHES regex_patterns('net stop WinDefend', 'sc config Sysmon start= disabled', 'taskkill /IM msmpeng.exe', 'Set-MpPreference -DisableRealtimeMonitoring $true')
  - question: Has a command targeting a security tool been executed with an unusually high command-line entropy, suggesting obfuscation?
    context: This question helps detect obfuscated commands. Adversaries often encode or obfuscate their PowerShell or command-line scripts to evade simple keyword-based detections. High Shannon entropy is a strong indicator of this obfuscation. Alerting on high-entropy commands that also target security tools allows for the detection of advanced evasion techniques that would otherwise be missed.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Command-line and script block logs from all enterprise workstations and servers, especially domain controllers and administrative hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH process_creation_events | CALCULATE entropy(command_line) | ALERT WHERE (command_line contains 'security_tool_name' AND entropy > baseline_95th_percentile)
  - question: Does a sequence of commands within a single user session match a known malicious pattern, such as reconnaissance followed by disabling a security tool?
    context: This question moves beyond single-event detection to analyze the broader context of an attacker's session. A single command might appear benign in isolation, but when viewed as part of a sequence (e.g., whoami -> net group "Domain Admins" -> sc config WinDefend start= disabled), it becomes clearly malicious. Using a sequence model helps identify the logical flow of an attack, providing earlier and more confident detection.
    answer_sources:
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Command-line and script block logs from all enterprise workstations and servers, especially domain controllers and administrative hosts.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GROUP events by user_session | APPLY sequence_model(command_list) | ALERT WHERE session_score > malicious_threshold
  - question: Has a security service been stopped shortly after a suspicious process (unsigned or running from a non-standard location) was executed on the same host?
    context: This question aims to correlate two suspicious events that, together, strongly indicate malicious activity. An unsigned binary or a process running from a temp directory is suspicious on its own. A security service stopping is also suspicious. When these two events happen in close succession on the same host, it is highly probable that the suspicious process is responsible for disabling the security tool.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 7036
      - Sysmon Event ID 5
      - NAI: Process, service control manager, and process termination logs from all enterprise workstations, servers, and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: CORRELATE process_creation (WHERE IsSigned=false OR path IN non_standard_dirs) with service_stop (WHERE service_name IN security_services) ON host WITHIN 5 minutes
  - question: Is there a statistically significant increase in the rate of security service stop events on any given host compared to its normal baseline?
    context: This question provides a way to detect anomalous behavior without a specific preceding event. Security services should not be stopping and starting frequently. By establishing a baseline of normal behavior (which should be near zero), any deviation, such as multiple stop events in a short period, can be flagged as an anomaly worth investigating, potentially indicating a persistent adversary or a failing tool.
    answer_sources:
      - Windows Event ID 7036
      - NAI: Process, service control manager, and process termination logs from all enterprise workstations, servers, and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH service_stop_events | TIMECHART count by host | ALERT WHERE count > (3 * stdev(historical_count))
  - question: Can we detect a hidden 'Tampering Activity' state on a host by analyzing the sequence of process creations, service state changes, and process terminations?
    context: This question applies a more advanced analytical model to infer an adversary's underlying intent (the "hidden state") from a series of observable system events. An HMM is well-suited for this because it can model systems that transition between states (e.g., 'Benign' to 'Tampering'). By training the model on known good and bad sequences, it can flag new sequences of events that are highly probable to be part of an attack, even if individual events seem minor.
    answer_sources:
      - Sysmon Event ID 1
      - Windows Event ID 7036
      - Sysmon Event ID 5
      - NAI: Process, service control manager, and process termination logs from all enterprise workstations, servers, and domain controllers.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: GROUP events by host | APPLY HMM_model(event_sequence) | ALERT WHERE probability(state='Tampering Activity') > threshold
  - question: Has a critical registry key controlling a security tool's configuration been modified or deleted by a process not on the approved allowlist?
    context: This is a high-fidelity detection method. Security tools' configurations are stored in specific registry keys, and modifications to these keys (e.g., changing a service's start type to 'disabled') are a common way for malware to disable them. By monitoring a specific list of these critical keys and alerting on any change made by an unauthorized process, we can quickly detect direct tampering attempts.
    answer_sources:
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - Sysmon Event ID 14
      - NAI: Windows Registry modification logs from all enterprise workstations and servers, with a focus on keys related to security product configuration.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE (target_key IN critical_key_watchlist) AND (process_name NOT IN approved_process_allowlist)
  - question: Has a critical security registry key been modified by a statistically rare process that has not been observed modifying it before?
    context: This question adds a layer of behavioral analysis to registry monitoring. While an allowlist is effective, it might not be exhaustive. By baselining which processes normally modify these keys (e.g., msiexec.exe during an upgrade), we can flag any deviation from this norm. If a process like svchost.exe or a randomly named executable modifies a key, it is highly anomalous and suspicious, even if that process wasn't explicitly on a blocklist.
    answer_sources:
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - Sysmon Event ID 14
      - NAI: Windows Registry modification logs from all enterprise workstations and servers, with a focus on keys related to security product configuration.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH registry_events WHERE (target_key IN critical_key_watchlist) | STATS count(process_name) by target_key | IDENTIFY process_name with low frequency
  - question: Can we use an anomaly detection model to identify unusual combinations of process, user, and target key involved in a registry modification event?
    context: This question aims to find the "unknown unknowns" in registry tampering. An adversary might use a trusted process under a compromised user account to make a subtle change. An Isolation Forest or similar model can detect such anomalies by learning the normal combinations of features (process, parent process, user, key path) and flagging any event that deviates significantly from this multi-dimensional baseline, indicating a potentially novel or sophisticated evasion technique.
    answer_sources:
      - Sysmon Event ID 12
      - Sysmon Event ID 13
      - Sysmon Event ID 14
      - NAI: Windows Registry modification logs from all enterprise workstations and servers, with a focus on keys related to security product configuration.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: STREAM registry_events | APPLY anomaly_model(features: process, parent_process, user, target_key) | ALERT WHERE anomaly_score > threshold
  - question: Has a Windows Event Log been cleared, and if so, by which user and process was this action performed?
    context: This question targets a classic and blatant anti-forensics technique. The clearing of a security log (which generates Event ID 1102) is almost always a malicious action intended to cover an adversary's tracks. This event should always be treated as a high-severity incident, and identifying the user and process responsible is the first step in the investigation.
    answer_sources:
      - Windows Event ID 1102
      - Windows Event ID 4688
      - Sysmon Event ID 1
      - NAI: Log aggregation platform (SIEM), Windows Security/System event logs on endpoints.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: SEARCH event_id=1102 | ENRICH with process_creation_event for 'wevtutil.exe' or similar process
  - question: Has there been a statistically significant and sustained drop in log volume from a critical source, suggesting that logging has been stopped or a sensor is offline?
    context: This question helps detect tampering that doesn't generate a specific alert, such as an adversary simply killing a logging agent's process or firewalling it off. By monitoring the volume of logs, we can infer the health of the logging pipeline. A sudden, unexplained drop in volume is a strong indicator that a security tool has been disabled or is malfunctioning, which requires immediate investigation to restore visibility.
    answer_sources:
      - Log aggregation platform (SIEM)
      - Zeek conn.log
      - Sysmon logs
      - NAI: Log aggregation platform (SIEM) and network traffic logs from network sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: MONITOR log_source_volume per minute | ALERT WHERE current_volume < (rolling_avg - 3 * rolling_stdev) for >10 minutes
  - question: Is the current log volume from a key source significantly below the volume predicted by a time series forecasting model that accounts for seasonality?
    context: This question represents a more sophisticated version of the previous one. Simple statistical thresholds can be noisy, as log volumes naturally fluctuate (e.g., less activity at night or on weekends). A time series model like SARIMA or Prophet can account for this seasonality, creating a much more accurate prediction of expected volume. When the observed volume falls below this model's confidence interval, it provides a higher-fidelity alert that logging has been unexpectedly interrupted.
    answer_sources:
      - Log aggregation platform (SIEM)
      - Zeek conn.log
      - Sysmon logs
      - NAI: Log aggregation platform (SIEM) and network traffic logs from network sensors.
    range: last 90 days
    queries:
      - technology: pseudocode
        query: FORECAST log_volume using time_series_model | ALERT WHERE actual_volume < predicted_lower_bound