name: T0830: Adversary-in-the-Middle
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps determine if an adversary has established an Adversary-in-the-Middle (AiTM) position to intercept or manipulate ICS network communications. This is investigated by looking for evidence of anomalous ARP activity, such as unlisted MAC addresses claiming critical IPs or static ARP cache modifications; rerouted network flows where traffic is funneled through an unauthorized intermediary device; and anomalies in TLS/SSL certificates, including validation errors, fingerprint mismatches, or the use of suspicious, newly observed certificates.
type: technique
related:
  - TA0100: Collection
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Has anomalous ARP activity been observed, such as IP-MAC pairs deviating from an established allowlist or static ARP entries being maliciously modified on workstations?
    context: This question aims to detect the initial stages of an ARP spoofing attack. Adversaries may send forged ARP messages to associate their MAC address with a legitimate IP address, or they might directly modify the ARP cache on a host to redirect traffic. Detecting deviations from a known-good hardware allowlist or identifying unauthorized modifications to the ARP cache are critical for early detection.
    answer_sources:
      - Zeek arp.log
      - Windows Event ID 4688
      - Windows Security Event ID 4703
      - Process Control Network (PCN) switches
      - managed industrial switches
      - network taps/sensors within the PCN
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - SCADA servers
      - Domain Controllers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH Zeek arp.log WHERE op == 'reply' OR is_gratuitous == true
          COMPARE sender_ip, sender_mac against allowlist of critical assets
          ALERT if sender_ip_mac_pair NOT IN allowlist
      - tech: pseudocode
        query: |
          SEARCH Windows Event ID 4688 WHERE (process_name == 'arp.exe' AND command_line CONTAINS '-s') OR (process_name == 'netsh.exe' AND command_line CONTAINS 'add neighbors')
          FILTER for command lines targeting critical asset IPs
          ALERT on any match
  - question: Is there evidence of MAC address flapping, where a critical asset's IP address rapidly changes its associated MAC address?
    context: MAC address flapping occurs when a switch receives ARP packets for the same IP address but with different MAC addresses in quick succession. This is a strong indicator of an ARP spoofing battle, where an attacker and a legitimate device are both claiming ownership of an IP. Monitoring the frequency of IP-to-MAC mapping changes can reveal this contention.
    answer_sources:
      - Zeek arp.log
      - Process Control Network (PCN) switches
      - managed industrial switches
      - network taps/sensors within the PCN
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - SCADA servers
      - Domain Controllers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          SEARCH Zeek arp.log over a 5-minute sliding window
          GROUP BY critical_ip_address
          COUNT distinct mac_addresses associated with the IP
          ALERT if count > 3
  - question: Has an anomalous spike in the volume of gratuitous ARP packets been detected, potentially indicating a network-wide ARP poisoning attempt?
    context: A gratuitous ARP is a broadcast packet used to announce a device's IP-to-MAC mapping without a specific request. While normal on occasion (e.g., device startup), a sudden, large-scale flood of these packets across the network is highly suspicious. It can indicate an adversary's attempt to poison the ARP caches of many devices simultaneously. A time-series anomaly detection model can distinguish this malicious burst from normal background traffic.
    answer_sources:
      - Zeek arp.log
      - Process Control Network (PCN) switches
      - managed industrial switches
      - network taps/sensors within the PCN
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - SCADA servers
      - Domain Controllers
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          AGGREGATE count of gratuitous ARP packets per minute per network segment
          INPUT resulting time-series into an anomaly detection model (e.g., LSTM Autoencoder)
          ALERT on any data points with a high reconstruction error or anomaly score
  - question: Are network flows from critical ICS assets being rerouted through unauthorized intermediary devices?
    context: In an AiTM attack, an adversary inserts their machine into an existing communication path. This question looks for the tell-tale pattern of this insertion: a connection from a source (A) to the attacker (B), immediately followed by a connection from the attacker (B) to the original destination (C). Identifying such patterns requires comparing observed traffic flows against a pre-defined map of legitimate paths and approved gateways.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network backbone switches within the PCN
      - firewalls/routers at PCN-DMZ/Enterprise boundaries
      - SCADA servers
      - Historian servers
      - network taps/sensors deployed at critical communication choke points
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          DEFINE legitimate_paths as (source_A, destination_C) and approved_intermediaries
          SEARCH Zeek conn.log for connections where source_A -> intermediary_B
          WHERE intermediary_B is NOT an approved_intermediary
          CORRELATE with connections from intermediary_B -> destination_C within 1 second
          ALERT on match
  - question: Have there been anomalous increases in network latency (RTT) or significant changes in the byte distribution for critical communication paths?
    context: The process of intercepting, inspecting, and forwarding traffic introduces latency. An AiTM attacker sitting between two endpoints will increase the round-trip time (RTT) of their communications. Similarly, if the adversary is manipulating data, the ratio of bytes sent versus received may change. Baselining these metrics and alerting on significant deviations can uncover an otherwise invisible intermediary.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network backbone switches within the PCN
      - firewalls/routers at PCN-DMZ/Enterprise boundaries
      - SCADA servers
      - Historian servers
      - network taps/sensors deployed at critical communication choke points
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each established critical communication path:
          CALCULATE rolling 30-day baseline mean and standard deviation for RTT from Zeek conn.log
          ALERT if current RTT > (baseline_mean + 3 * baseline_stddev)
  - question: Can graph-based analysis of network flows reveal structural anomalies, such as the insertion of a new intermediary node into an established communication path?
    context: The network topology of an ICS environment is typically static and predictable. By modeling this topology as a graph (where devices are nodes and connections are edges), we can train a machine learning model to understand what "normal" looks like. An AiTM attack, which introduces a new node into a path, would alter the graph's structure, creating an anomaly that a graph-based detection algorithm can identify.
    answer_sources:
      - Zeek conn.log
      - Zeek http.log
      - Zeek ssl.log
      - Network backbone switches within the PCN
      - firewalls/routers at PCN-DMZ/Enterprise boundaries
      - SCADA servers
      - Historian servers
      - network taps/sensors deployed at critical communication choke points
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          BUILD network graph from Zeek conn.log (nodes=IPs, edges=connections)
          INPUT graph into a trained anomaly detection model (e.g., GraphSAGE)
          ALERT on structural anomalies identified by the model, especially new nodes inserted into previously direct paths
  - question: Have any encrypted sessions involving critical assets used certificates that deviate from a known-good baseline, are self-signed, or have validation errors?
    context: To intercept encrypted traffic, an AiTM attacker must present a fake certificate to the client. This question seeks to identify these fake certificates by comparing them against a pre-established baseline of legitimate certificate fingerprints, issuers, and subjects. Any mismatch, unexpected self-signed certificate, or validation error (like 'expired') is a strong indicator of an AiTM attack.
    answer_sources:
      - Zeek ssl.log
      - Zeek x509.log
      - Network taps/sensors at the perimeter of the PCN
      - network gateways
      - SCADA servers
      - Historian servers
      - remote access VPN concentrators
      - Engineering Workstations (EWS) that establish encrypted sessions
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          DEFINE baseline of certificate fingerprints, issuers, subjects for critical services
          SEARCH Zeek ssl.log and x509.log for TLS sessions to critical assets
          ALERT IF certificate_fingerprint NOT IN baseline
          OR validation_status != 'ok'
          OR (self_signed == true AND service should not be self-signed)
  - question: Have any newly observed TLS certificates exhibited suspicious characteristics, such as high-entropy subject/issuer names or an unusual rate of associated TLS errors?
    context: Attackers often use tools that algorithmically generate fake certificates. This can result in certificate fields, like the subject or issuer name, containing random-looking, high-entropy strings instead of human-readable names. Calculating the entropy of these fields can flag such machine-generated certificates. Additionally, a spike in TLS errors associated with a particular asset can indicate clients are rejecting a newly introduced malicious certificate.
    answer_sources:
      - Zeek ssl.log
      - Zeek x509.log
      - Network taps/sensors at the perimeter of the PCN
      - network gateways
      - SCADA servers
      - Historian servers
      - remote access VPN concentrators
      - Engineering Workstations (EWS) that establish encrypted sessions
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each new certificate in Zeek x509.log:
          CALCULATE Shannon entropy of the certificate's subject and issuer fields
          ALERT if entropy score exceeds the 99th percentile of historical scores
      - tech: pseudocode
        query: |
          CALCULATE the rate of TLS errors (validation_status != 'ok') per critical asset over time
          ALERT if the rate exceeds 3 standard deviations from the 30-day rolling average
  - question: Can a machine learning model trained on known-good certificates identify outlier certificates that may be malicious?
    context: This question proposes using an anomaly detection model, like a One-Class SVM, to learn the characteristics of legitimate certificates used in the environment. Features like key length, signature algorithm, and validity period can create a profile of "normal." When a new certificate is observed, it can be passed to the model. If the model flags it as an outlier, it indicates the certificate's properties do not conform to the established norm and could be part of an AiTM attack.
    answer_sources:
      - Zeek ssl.log
      - Zeek x509.log
      - Network taps/sensors at the perimeter of the PCN
      - network gateways
      - SCADA servers
      - Historian servers
      - remote access VPN concentrators
      - Engineering Workstations (EWS) that establish encrypted sessions
    range: last 90 days
    queries:
      - tech: pseudocode
        query: |
          FOR each new certificate in Zeek x509.log:
          EXTRACT feature vector (key_length, sig_algo, validity_period, etc.)
          INPUT vector into a trained model (e.g., One-Class SVM, Autoencoder)
          ALERT if model classifies the certificate as an outlier or if it has a high reconstruction error