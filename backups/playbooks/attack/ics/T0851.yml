name: T0851: Rootkit
id: 8f5a2b1c-7d3e-4f8a-9b6c-0e5d1a3b2c4d
description: This playbook helps detect the use of rootkits on ICS assets. It focuses on two main scenarios: evasion and inhibiting response functions. For evasion, it identifies rootkits that hide their presence by creating discrepancies between network traffic logs and host-level process logs, or by installing suspicious Windows services with non-standard attributes. For inhibiting response functions, it detects rootkits that disrupt critical ICS network communications by causing excessive connection failures or that induce crashes in essential HMI/SCADA applications by interfering with low-level system I/O.
type: technique
related:
  - TA0103: Evasion
  - TA0107: Inhibit Response Function
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Are there outbound network connections from ICS assets that have no corresponding host-level process or network event?
    context: This question aims to identify network traffic that is "invisible" to the host operating system's logging mechanisms. A discrepancy where network sensors (like Zeek) see traffic, but the source host's logs (like Sysmon or Windows Security Auditing) show no process creating that connection, is a strong indicator of a kernel-level rootkit. Such rootkits can bypass standard OS APIs to hide their network activity from monitoring and forensic tools. Alerting on unattributed connections to malicious or non-whitelisted external IPs is a high-fidelity way to detect potential command-and-control (C2) or data exfiltration channels.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          FOR each event IN zeek_conn_logs:
            SET has_host_event = FALSE
            FOR each event IN (sysmon_3_logs, windows_5156_logs):
              IF zeek_event.source_ip == host_event.source_ip AND
                 ABS(zeek_event.timestamp - host_event.timestamp) <= 5_seconds:
                SET has_host_event = TRUE
                BREAK
            IF has_host_event == FALSE:
              FLAG zeek_event as 'unattributed'
              IF zeek_event.dest_ip IN (threat_intel_feed, NOT egress_whitelist):
                CREATE high_severity_alert
  - question: Is there a statistically significant increase in the volume or proportion of unattributed network traffic from a critical host?
    context: This question moves beyond single unattributed connections to detect subtle, low-and-slow activity. By establishing a baseline of "normal" unattributed traffic (which may exist due to logging gaps or benign OS behavior), we can use statistical methods to spot anomalies. A sudden spike in the count of these connections or a change in the ratio of unattributed data sent versus total data sent can indicate that a hidden malicious process has become active, potentially starting a data exfiltration phase. This approach helps detect adversaries trying to blend in over time.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation (run periodically)
          CALCULATE hourly_mean, hourly_std_dev of 'unattributed' connections per host over last 30 days.
          CALCULATE 7-day_moving_avg of (unattributed_bytes / total_bytes) ratio per host.

          // Real-time Check
          FOR each hour:
            CALCULATE current_hourly_count of 'unattributed' connections.
            IF current_hourly_count > (hourly_mean + 3 * hourly_std_dev):
              CREATE medium_severity_alert
            CALCULATE current_hourly_ratio of (unattributed_bytes / total_bytes).
            IF current_hourly_ratio > (1.5 * 7-day_moving_avg):
              CREATE medium_severity_alert
  - question: Can a machine learning model identify and assign a risk score to network flows that are likely associated with rootkit activity?
    context: This question seeks to automate and enhance the detection process using machine learning. While the previous questions rely on explicit rules and statistics, a supervised model can learn complex, non-linear patterns from various data features (protocol, port, byte counts, geolocation, etc.) to distinguish malicious unattributed traffic from benign unattributed traffic. By training on a labeled dataset, the model can provide a real-time risk score for every network flow, enabling analysts to prioritize the most suspicious activities and reduce alert fatigue from simpler rule-based systems.
    answer_sources:
      - Zeek conn.log
      - Windows Event ID 4688
      - Windows Event ID 5156
      - Sysmon Event ID 3
      - ICS network security monitoring points (e.g., SPAN ports on switches in Level 2/3), firewalls segmenting OT zones, and logs from critical endpoints such as Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, and OT Domain Controllers.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training (offline)
          features = [protocol, port, duration, bytes, conn_state, is_unattributed, geo_ip, ASN]
          TRAIN classification_model on labeled_dataset with features.

          // Real-time Scoring
          FOR each new network_flow:
            EXTRACT features from flow.
            CALCULATE risk_score = classification_model.predict(features).
            IF risk_score > high_confidence_threshold:
              CREATE alert "unattributed-suspicious"
  - question: Has a new service been created on an ICS asset with suspicious characteristics, such as a non-standard file path or an unsigned executable?
    context: This question focuses on detecting rootkits that establish persistence through malicious Windows services. Adversaries often place their executables in unusual directories (like user temp folders) to avoid scrutiny and then register them as services to ensure they run automatically with high privileges. This query checks for these red flags: an executable path outside of standard system/program directories, a service name matching known malware, and an executable that lacks a valid digital signature. A combination of these is a strong indicator of a malicious service installation.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7040
      - Sysmon Event ID 1
      - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
      - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          approved_dirs = ["C:\Windows\system32", "C:\Program Files"]
          FOR each event IN windows_7045_logs:
            IF event.ImagePath NOT IN approved_dirs:
              CREATE alert "Service with non-standard path"
            IF event.ServiceName IN malware_service_names_blocklist:
              CREATE alert "Known malicious service name"
            QUERY sysmon_1_logs for event.ImagePath:
              IF corresponding_sysmon_event.Signed == "false":
                CREATE alert "Service with unsigned executable"
  - question: Is there a statistical anomaly in the naming convention or modification frequency of Windows services on an ICS asset?
    context: This question aims to detect malware that uses randomization to evade signature-based detection. Adversaries often generate random-looking service names and filenames to make each infection unique. By calculating the Shannon entropy (a measure of randomness), we can spot names that are unusually complex compared to a baseline of legitimate services. A high entropy score suggests machine-generated text rather than a human-chosen name. Additionally, monitoring for an abnormal rate of service modifications (Event ID 7040) can catch attempts by malware to reconfigure or repair itself.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7040
      - Sysmon Event ID 1
      - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
      - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation
          CALCULATE 95th_percentile_entropy for service names and filenames from last 90 days.
          CALCULATE 99th_percentile of daily service modifications per host.

          // Real-time Check
          FOR each event IN windows_7045_logs:
            IF entropy(event.ServiceName) > 95th_percentile_entropy:
              CREATE alert "High entropy service name"
            IF entropy(filename_from(event.ImagePath)) > 95th_percentile_entropy:
              CREATE alert "High entropy service filename"
          FOR each host, per day:
            IF count(windows_7040_logs) > 99th_percentile:
              CREATE alert "Anomalous rate of service modifications"
  - question: Can a machine learning model automatically identify newly created services that are outliers compared to a baseline of normal, legitimate services?
    context: This question proposes using an unsupervised machine learning model to find "unknown unknowns." Instead of relying on predefined rules (like path or signature), an Isolation Forest or similar model learns the multi-dimensional profile of what a "normal" service creation looks like on your network. It considers features like name length/entropy, path depth, the creating user account, and start type. Any new service that doesn't fit this learned profile is flagged as an anomaly. This is powerful for detecting novel malware or attacker techniques that don't match existing patterns.
    answer_sources:
      - Windows Event ID 7045
      - Windows Event ID 7040
      - Sysmon Event ID 1
      - Windows Registry HKLM\SYSTEM\CurrentControlSet\Services\
      - Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training (offline)
          features = [name_length, name_entropy, path_depth, path_entropy, user_account, start_type, is_in_user_dir]
          TRAIN anomaly_detection_model on historical legitimate service creation events.

          // Real-time Scoring
          FOR each new event IN windows_7045_logs:
            EXTRACT features from event.
            CALCULATE anomaly_score = anomaly_detection_model.predict(features).
            IF anomaly_score indicates an outlier:
              CREATE alert "Anomalous service creation detected"
  - question: Are there an excessive number of failed or rejected connection attempts on critical ICS protocol ports between control systems and field devices?
    context: This question looks for direct evidence of network communication disruption, a key tactic for inhibiting response functions. A sudden burst of rejected ('REJ'), reset ('RSTO'), or incomplete ('S1') connections on vital ICS ports (like Modbus, S7, EtherNet/IP) is highly abnormal. It suggests something is actively interfering with the network stack, potentially a rootkit, to block legitimate control commands or status reports. The rule sets a simple threshold to flag this behavior, especially when one side sends data but gets no response, which is a strong sign of selective packet dropping.
    answer_sources:
      - Zeek conn.log
      - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          critical_ports = [502, 102, 44818, 20000, 47808]
          failed_states = ['REJ', 'RSTO', 'S1']
          WITHIN each 60-second window:
            COUNT failed connections by (source_ip, dest_ip)
            WHERE dest_port IN critical_ports AND conn_state IN failed_states
            IF count > 10:
              CREATE alert "Excessive failed connections on ICS port"
              IF orig_bytes > 0 AND resp_bytes == 0:
                ESCALATE alert priority
  - question: Has the statistical profile of connection states for a critical HMI-to-PLC communication link deviated significantly from its normal baseline?
    context: This question applies statistical analysis to detect more subtle forms of network disruption. Healthy, stable ICS communications are predictable and have very low entropy (dominated by successful 'SF' states). A rootkit causing intermittent interference will introduce a mix of failed, reset, and incomplete states, increasing the randomness and thus the entropy of the connection state distribution. By baselining the normal entropy for a given communication channel, we can alert when it becomes significantly more chaotic, indicating instability that could be caused by malicious manipulation.
    answer_sources:
      - Zeek conn.log
      - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation (per HMI-PLC pair)
          CALCULATE mean_entropy, std_dev_entropy of conn_state distribution in 5-min intervals over 30 days.

          // Real-time Check
          WITHIN each 5-minute interval:
            CALCULATE current_entropy of conn_state distribution.
            IF current_entropy > (mean_entropy + 3 * std_dev_entropy):
              CREATE alert "Anomalous connection state distribution"
  - question: Can a time-series machine learning model detect abnormal 'rhythms' in the communication patterns between an HMI and a PLC?
    context: This question leverages advanced machine learning to understand the temporal dynamics of ICS communication. An LSTM autoencoder can learn the normal sequence and interplay of various network metrics over time (e.g., how byte counts, packet counts, and connection states evolve from one minute to the next). When a rootkit disrupts this flow, it breaks the learned pattern. The model will fail to "reconstruct" the observed abnormal traffic accurately, resulting in a high reconstruction error. This triggers an alert, catching deviations that are too complex for simple statistical baselines.
    answer_sources:
      - Zeek conn.log
      - Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training (offline, per channel)
          features = [counts_of_each_conn_state, total_bytes, total_packets, avg_duration]
          AGGREGATE features into 1-minute time-series vectors.
          TRAIN LSTM_autoencoder_model on historical time-series data.

          // Real-time Scoring
          FOR each new 1-minute vector of live traffic:
            CALCULATE reconstruction_error = LSTM_model.evaluate(vector).
            IF reconstruction_error > learned_threshold:
              CREATE alert "Abnormal communication rhythm detected"
  - question: Are critical HMI or SCADA applications crashing immediately after communicating with a field device, with the crash implicating a core system driver?
    context: This question seeks to connect application instability directly to network activity, a strong sign of a rootkit interfering with I/O operations. The logic is specific: a critical process crashes (Event ID 1000), the fault is in a low-level driver (like `tcpip.sys`), AND this happens right after network communication on an ICS port. This combination is highly indicative of a rootkit hooking or manipulating system calls related to networking, causing the legitimate application to become unstable and crash when it tries to perform its normal function.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Zeek conn.log
      - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          critical_apps = ['HMI_App.exe', ...]
          system_drivers = ['tcpip.sys', 'afd.sys', ...]
          FOR each event IN windows_1000_logs:
            IF event.ApplicationName IN critical_apps AND event.FaultingModuleName IN system_drivers:
              QUERY zeek_conn_logs for traffic from event.HostIP on ICS_ports
              WHERE ABS(zeek_event.timestamp - event.timestamp) <= 10_seconds
              IF correlation_found:
                CREATE critical_alert "App crash correlated with ICS traffic"
  - question: Is a critical ICS application crashing with a historically rare or novel exception code, especially when correlated with network activity?
    context: This question adds a layer of statistical rarity to crash analysis. Applications may have common, known bugs that cause crashes with predictable exception codes. A rootkit interfering with the system in a new way is likely to cause a crash with an unusual or never-before-seen exception code. By tracking the historical frequency of these codes, we can flag a new crash as highly suspicious if its code is statistically rare. Combining this rarity with the time-based correlation to network traffic (from the previous question) significantly increases the confidence that the crash is malicious.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Zeek conn.log
      - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Baseline Calculation
          CALCULATE frequency distribution of ExceptionCodes for each critical app over last 90 days.
          DETERMINE 5th percentile threshold (rare codes).

          // Real-time Check
          FOR each event IN windows_1000_logs:
            IF event.ExceptionCode is in the rare category:
              CREATE alert "Rare exception code detected"
              // Optionally, increase severity if correlated with network traffic
  - question: Can a machine learning model distinguish between benign, known application crashes and anomalous crashes that may be caused by a rootkit?
    context: This question aims to build a smart system that understands "normal" failures. By training an unsupervised model on the characteristics of historical, benign crashes (e.g., common exception codes, known faulting modules), the system learns a profile of expected behavior. When a new crash occurs, the model scores it. If the crash's features (exception code, faulting module, correlated network data) make it an outlier from the "benign" profile, it's flagged as an anomaly. This helps analysts focus on truly novel and suspicious crashes rather than chasing down known software bugs.
    answer_sources:
      - Windows Event ID 1000
      - Windows Event ID 1001
      - Zeek conn.log
      - Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.
    range: Last 90 days
    queries:
      - technology: pseudocode
        query: |
          // Model Training (offline)
          features = [ExceptionCode, FaultingModuleName, correlated_network_features]
          TRAIN anomaly_detection_model on historical benign crash events.

          // Real-time Scoring
          FOR each new event in windows_1000_logs:
            EXTRACT features from event (and correlated network data).
            CALCULATE anomaly_score = anomaly_detection_model.predict(features).
            IF anomaly_score indicates an outlier:
              CREATE alert "Anomalous application crash detected"