name: T0802: Automated Collection
id: f1a9b8e0-c7d6-4f5a-b3e2-1d9c8b7a6f54
description: This playbook helps identify adversarial automated collection of data from an ICS/OT environment. It looks for indicators such as a single source connecting to an unusually high number of unique devices on ICS-specific ports, a suspicious process creation on an ICS asset immediately followed by a burst of network connections, or an anomalously high number of successful network logons to critical servers. The goal is to detect reconnaissance and data gathering activities that often precede more disruptive attacks.
type: technique
related:
- TA0100: Collection
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: Is a known malicious IP or an unauthorized host scanning the ICS network for common industrial ports?
  context: This question aims to detect initial reconnaissance or collection attempts by checking for scanning behavior from two specific sources, IPs already identified as malicious and internal hosts that are not authorized to perform network scanning. This helps separate legitimate administrative activity from potential threats.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network taps/SPAN ports on ICS network segments (Control Network, Process Network, DMZ), specifically monitoring traffic to/from PLCs, RTUs, and HMIs.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // Query 1: Check against malicious IP watchlist
      SEARCH Zeek conn.log
      WHERE source_ip IN malicious_ip_watchlist
      AND destination_port IN [502, 102, 44818, 20000, 47808]
      GENERATE high_priority_alert

      // Query 2: Check for unauthorized scanning
      SEARCH Zeek conn.log
      WHERE source_ip NOT IN authorized_scanner_list
      AND destination_port IN [502, 102, 44818, 20000, 47808]
      AGGREGATE unique_destination_count BY source_ip OVER 5_minutes
      WHERE unique_destination_count > 20
      GENERATE medium_priority_alert
- question: Is any host exhibiting network scanning behavior that deviates from its own established baseline of normal activity?
  context: This question uses a statistical, baselining approach to detect anomalous scanning. Instead of relying on static lists, it learns what is normal for each host and alerts on deviations. This can uncover new or unknown threats and internal misconfigurations. Enriching with destination port entropy helps confirm if the activity is widespread scanning or targeted communication.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network taps/SPAN ports on ICS network segments (Control Network, Process Network, DMZ), specifically monitoring traffic to/from PLCs, RTUs, and HMIs.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // For each source_ip, calculate its 99th percentile baseline of unique destination IPs per 5-minute window over the last 30 days.
      // In real-time:
      SEARCH Zeek conn.log
      CALCULATE current_unique_dest_count BY source_ip OVER last_5_minutes
      IF current_unique_dest_count > baseline_99th_percentile[source_ip]
        CALCULATE shannon_entropy of destination_ports for source_ip
        GENERATE medium_priority_alert with source_ip, current_count, baseline_value, and port_entropy
- question: Can an unsupervised machine learning model identify network behavior consistent with automated collection that might be missed by rule-based or statistical methods?
  context: This question leverages machine learning to find complex patterns of anomalous behavior. By creating a feature vector that includes connection counts, data volume, and protocol distribution, the model can identify subtle deviations from normal network traffic that indicate automated collection, providing a more advanced layer of detection.
  answer_sources:
  - Zeek conn.log
  - Zeek notice.log
  - Network taps/SPAN ports on ICS network segments (Control Network, Process Network, DMZ), specifically monitoring traffic to/from PLCs, RTUs, and HMIs.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // Train Isolation Forest model on 30-day baseline of network traffic features.
      // In real-time, for each source_ip per 5-minute window:
      CREATE feature_vector [
        unique_dest_ip_count,
        unique_dest_port_count,
        total_connection_count,
        sum_of_bytes_sent,
        protocol_distribution
      ]
      SCORE feature_vector with trained_model
      IF score is anomalous
        GENERATE alert for anomalous source IP
- question: Has a non-allowlisted or suspicious process (like a scripting interpreter) been executed on a critical ICS asset?
  context: This question focuses on the initial execution phase of a potential collection tool. By maintaining a strict allowlist of approved processes on critical assets like Engineering Workstations and HMIs, any deviation, especially the launch of powerful scripting tools, can be immediately flagged as a high-risk event requiring investigation.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Host logging agents on Engineering Workstations (EWS), Operator Stations / HMIs, and ICS Application Servers; Network taps/SPAN ports positioned to capture traffic originating from these assets.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      SEARCH Windows Event Logs
      WHERE EventID == 4688
      AND (
        NewProcessName NOT IN process_allowlist
        OR CommandLine CONTAINS ["powershell.exe", "python.exe", "wscript.exe", "nmap.exe", "masscan.exe"]
      )
      GENERATE high_priority_alert
- question: Following the execution of a suspicious process, did the host immediately initiate an anomalous number of network connections to other ICS devices?
  context: This question directly links a suspicious host event (process creation) with a suspicious network event (connection burst). Correlating these two activities within a short time window (60 seconds) provides strong evidence that the process was executed specifically to perform automated collection or reconnaissance across the network.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Host logging agents on Engineering Workstations (EWS), Operator Stations / HMIs, and ICS Application Servers; Network taps/SPAN ports positioned to capture traffic originating from these assets.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      ON suspicious_process_alert(hostname, timestamp)
      SEARCH Zeek conn.log
      WHERE source_ip == ip_of(hostname)
      AND connection_time BETWEEN timestamp AND timestamp + 60_seconds
      AGGREGATE unique_destination_count
      // Compare to host-specific baseline of post-process-creation network activity
      IF unique_destination_count > baseline_99th_percentile[hostname]
        ESCALATE initial_alert to CRITICAL
- question: Can a combination of machine learning models, one analyzing command line maliciousness and another detecting network anomalies, identify a high-confidence automated collection event?
  context: This question describes a sophisticated, high-fidelity detection strategy. It uses two separate ML modelsâ€”one for host-based command line analysis and one for network time-series analysis. An alert is only generated when both models flag suspicious activity from the same host in a tight time window, significantly reducing false positives and creating a very strong signal of malicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Zeek conn.log
  - Host logging agents on Engineering Workstations (EWS), Operator Stations / HMIs, and ICS Application Servers; Network taps/SPAN ports positioned to capture traffic originating from these assets.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // Model 1: Scores command lines from Event ID 4688
      // Model 2: Detects connection spikes in Zeek conn.log
      CORRELATE alerts from Model 1 and Model 2
      WHERE Model1.hostname == Model2.hostname
      AND Model2.timestamp is within 60_seconds of Model1.timestamp
      GENERATE high_confidence_alert
- question: Has a successful network logon (Logon Type 3) occurred on a critical ICS server from a suspicious account, an unauthorized account, or outside of normal business hours?
  context: This question seeks to identify unauthorized access by scrutinizing successful network logons. It uses several rule-based checks: matching against known suspicious accounts, verifying the user is in an approved group for that server, and ensuring non-service accounts are logging in during expected hours. A failure of any of these checks could indicate a compromised account being used for collection.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Host logging agents on OPC Servers, Data Historians, and Domain Controllers servicing the ICS environment; Network taps/SPAN ports near these servers to correlate logon events with protocol-level traffic.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      SEARCH Windows Event Logs on critical_servers
      WHERE EventID == 4624 AND LogonType == 3
      AND (
        AccountName IN suspicious_account_watchlist
        OR IpAddress IN suspicious_ip_watchlist
        OR AccountName NOT IN approved_ad_group[server_name]
        OR (is_not_service_account(AccountName) AND logon_time is outside_business_hours)
      )
      GENERATE alert
- question: Is any user or source IP generating a statistically anomalous number of successful network logons to a specific ICS server?
  context: This question employs a statistical method to detect unusual logon frequency. By establishing a baseline (mean and standard deviation) for each source-destination pair, it can automatically flag a sudden, high-volume burst of successful logons, which is a strong indicator of an adversary using a script to authenticate to multiple services as part of an automated collection campaign.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Host logging agents on OPC Servers, Data Historians, and Domain Controllers servicing the ICS environment; Network taps/SPAN ports near these servers to correlate logon events with protocol-level traffic.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // For each source_ip-to-destination_server pair, establish a 30-day baseline (mean, std dev) of logon counts per 10-minute window.
      // In real-time:
      SEARCH Windows Event Logs WHERE EventID == 4624 AND LogonType == 3
      AGGREGATE logon_count BY source_ip, destination_server OVER last_10_minutes
      IF logon_count > (baseline_mean + 3 * baseline_std_dev)
        GENERATE alert
- question: Can a time-series forecasting model detect an abnormal spike in successful logons, and can this be correlated with an increase in ICS protocol traffic to confirm data collection?
  context: This question outlines an advanced detection and enrichment workflow. A forecasting model predicts the expected number of logons, and an alert is triggered if the actual number is significantly higher. This alert is then automatically enriched by checking network data for a corresponding increase in industrial protocol traffic (like OPC or Modbus), providing strong confirmation that the anomalous logons are being used for their intended purpose, data collection.
  answer_sources:
  - Windows Event ID 4624
  - Zeek conn.log
  - Host logging agents on OPC Servers, Data Historians, and Domain Controllers servicing the ICS environment; Network taps/SPAN ports near these servers to correlate logon events with protocol-level traffic.
  range: last 90 days
  queries:
  - search_technology: Pseudocode
    query: |-
      // Train ARIMA model on logon counts per 10-min interval for each server.
      // In real-time:
      IF observed_logon_count > forecasted_logon_count_upper_bound
        GENERATE potential_logon_spike_alert(source_ip, destination_server)
        // Enrichment step:
        SEARCH Zeek conn.log for ICS protocol traffic (OPC, Modbus, S7)
        WHERE source == source_ip AND destination == destination_server
        AND time is near alert_time
        IF traffic_found
          CONFIRM alert and increase severity