name: T0806: Brute Force I-O
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps investigate if an adversary is attempting to impair process control by manipulating I/O points. This can manifest as high-frequency bursts of write commands to a single I/O point, scanning behavior across multiple I/O addresses (either sequentially or with a high error rate), or rapid, repeated state changes (toggling) of a specific I/O point. These activities often originate from unauthorized sources or from authorized assets behaving anomalously.
type: technique
related:
  - TA0106: Impair Process Control
contributors:
  - Zachary Szewczyk
  - Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags:
  - none
questions:
  - question: How can I determine if a high-frequency write event is an unauthorized attempt by checking against an asset inventory and correlated process execution?
    context: This question aims to differentiate between legitimate and malicious high-frequency write commands. By cross-referencing the source IP with an authorized asset inventory and then checking for corresponding legitimate control application processes on authorized systems, analysts can identify unauthorized write attempts or legitimate systems being used for malicious purposes without proper operator-initiated actions. This helps to confirm if an adversary is trying to brute force an I/O point.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - Programmable Logic Controllers (PLCs)
      - OT network traffic monitoring points (e.g., SPAN ports on OT switches)
      - Data Historians
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For a high-frequency write event from SOURCE_IP:
          IF SOURCE_IP NOT IN authorized_asset_inventory:
            ALERT "Unauthorized Write Attempt"
          ELSE:
            QUERY endpoint_logs ON SOURCE_IP for process_creation (Event ID 4688) within 5 mins of event
            IF new_process_name NOT IN scada_allow_list:
              ALERT "Anomalous Process on Authorized Host"
  - question: How can I statistically identify anomalous high-frequency write commands to an I/O point?
    context: This question focuses on establishing a statistical baseline for normal operational behavior. By calculating the 99th percentile and standard deviation of write command counts over a 30-day period for each source-destination-I/O tuple, we can create a dynamic threshold. An event exceeding both the percentile and the standard deviation threshold is highly likely to be an anomaly, effectively filtering out noise from legitimate but infrequent operations and flagging potential brute-force attempts.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - Programmable Logic Controllers (PLCs)
      - OT network traffic monitoring points (e.g., SPAN ports on OT switches)
      - Data Historians
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For each (source_ip, dest_plc, io_address) tuple:
          CALCULATE 30-day baseline (mean, std_dev, 99th_percentile) of write_counts per minute
          // For new 1-minute window:
          IF current_write_count > 99th_percentile AND current_write_count > (mean + 3*std_dev):
            ALERT "Statistical High-Frequency Write Anomaly"
  - question: Can a machine learning model be used to detect anomalous write patterns to critical I/O points that indicate a brute force attempt?
    context: This question explores the use of advanced time-series anomaly detection, like an LSTM Autoencoder, to identify subtle deviations from normal operational rhythms that statistical methods might miss. By training a model on features like write count, time of day, and function codes, it learns the complex patterns of normal activity. When a brute-force attempt occurs, its pattern will differ significantly, resulting in a high reconstruction error and triggering a high-fidelity alert. This is particularly useful for critical I/O points where any deviation is significant.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4688
      - Asset inventory/allow-list database
      - Control Network segments
      - Human-Machine Interfaces (HMIs)
      - Engineering Workstations (EWS)
      - Programmable Logic Controllers (PLCs)
      - OT network traffic monitoring points (e.g., SPAN ports on OT switches)
      - Data Historians
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For critical I/O points:
          TRAIN LSTM autoencoder on 90-day history of (write_count, time_of_day, function_code)
          // In production:
          FEED live data into model
          CALCULATE reconstruction_error
          IF reconstruction_error > threshold:
            ALERT "ML Detected Write Pattern Anomaly"
  - question: How can I use symbolic logic to detect I/O address scanning behavior based on invalid address ratios or sequential access patterns?
    context: This question provides a rule-based method to identify an adversary scanning for valid I/O points. An attacker unfamiliar with the system will likely try a range of addresses, leading to a high percentage of invalid targets, or attempt a sequential scan. By comparing targeted addresses against a known-valid configuration and checking for arithmetic progressions, we can create high-confidence alerts for this specific reconnaissance behavior.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - ICS protocol gateways
      - centralized PLC configuration management databases
      - network security monitoring sensors
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // In 30-second window for a source_ip:
          COLLECT targeted_io_addresses
          CALCULATE invalid_ratio = (count(invalid_addresses) / count(total_addresses))
          CHECK FOR sequential_progression in valid_addresses (sequence_length >= 5)
          IF invalid_ratio > 0.75 OR sequential_progression_found:
            ALERT "I/O Address Scanning Detected"
  - question: How can Shannon entropy be used as a statistical measure to detect I/O address scanning?
    context: This question leverages information theory to detect a shift in targeting behavior. Normal operations typically involve writes to a small, consistent set of I/O addresses, resulting in low entropy. Scanning, however, involves targeting a wide and often random set of addresses, which dramatically increases the entropy. By baselining the normal entropy for a given communication pair and alerting on significant deviations (e.g., >2 standard deviations), we can effectively detect this change from targeted operation to broad scanning.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - ICS protocol gateways
      - centralized PLC configuration management databases
      - network security monitoring sensors
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For each (source_ip, dest_plc) pair:
          CALCULATE 30-day baseline (mean, std_dev) of Shannon entropy for I/O addresses in 5-min windows
          // For new 5-minute window:
          CALCULATE current_entropy
          IF current_entropy > (mean + 2*std_dev):
            ALERT "Anomalous I/O Address Entropy - Possible Scanning"
  - question: Can a clustering algorithm like DBSCAN identify anomalous I/O scanning behavior as noise?
    context: This question proposes using an unsupervised machine learning model to identify novel scanning patterns. By creating feature vectors that describe the breadth of communication (e.g., count of unique PLCs/I-O points, address entropy), a clustering algorithm like DBSCAN can group normal, routine operational patterns together. Scanning behavior, which is inherently different, will not fit into these normal clusters and will be flagged as 'noise' or an outlier, providing a powerful way to detect previously unseen or complex scanning techniques.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - PLC configuration files or asset inventory
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - ICS protocol gateways
      - centralized PLC configuration management databases
      - network security monitoring sensors
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // Aggregate 1-min windows for each source_ip into feature vectors (unique_plcs, unique_ios, io_entropy)
          TRAIN DBSCAN model on historical data to define 'normal' clusters
          // In production:
          CLASSIFY new feature vectors
          IF vector is classified as 'noise':
            ALERT "ML Detected Scanning Behavior (Outlier)"
  - question: How can I confirm if a rapid toggling event is malicious by correlating it with anomalous user logon activity?
    context: This question focuses on adding crucial context to a detected physical anomaly. A high toggle frequency on its own could be a malfunction. However, by linking it to a preceding anomalous logon event on the source machine (e.g., from a strange location, at an odd time, by a user who has never touched that I/O point), we can significantly increase our confidence that the toggling is a deliberate, malicious act. This multi-layered check helps to reduce false positives and prioritize truly threatening events.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - critical field devices (actuators, valves, breakers)
      - HMIs
      - Active Directory domain controllers
      - Identity and Access Management (IAM) log repositories
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // On toggle frequency alert from SOURCE_IP:
          IF SOURCE_IP NOT IN plc_write_allow_list:
            ALERT "Unauthorized Toggling"
          ELSE:
            CORRELATE with logon events (Event ID 4624) on SOURCE_IP
            COUNT anomalous logon traits (e.g., rare_geo, off_hours, first_time_io_interaction)
            IF anomalous_trait_count >= 2:
              ALERT "Suspicious Toggling Correlated with Anomalous Logon"
  - question: How can I statistically detect when an I/O point is being toggled at an unsafe or anomalous rate?
    context: This question addresses the detection of rapid state changes that could damage equipment or disrupt a physical process. The method uses a two-pronged statistical approach. First, it checks against a hard, engineering-defined safety limit (e.g., a valve should not be toggled more than 5 times a minute). Second, it compares the current toggle frequency against its own historical baseline. This dual-thresholding catches both violations of known safety parameters and deviations from normal operational patterns, providing comprehensive coverage against toggling attacks.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - critical field devices (actuators, valves, breakers)
      - HMIs
      - Active Directory domain controllers
      - Identity and Access Management (IAM) log repositories
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For critical discrete I/O points:
          CALCULATE toggle_frequency (state changes per minute)
          DEFINE engineering_safety_limit
          CALCULATE 30-day baseline (98th_percentile) of toggle_frequency
          IF toggle_frequency > engineering_safety_limit OR toggle_frequency > 98th_percentile:
            ALERT "Anomalous I/O Point Toggling Detected"
  - question: Can an ML model like Isolation Forest distinguish between normal operational changes and malicious I/O point toggling?
    context: This question aims to use machine learning to build a sophisticated behavioral profile for each critical I/O point. By considering multiple features like the value written, time between writes, source IP, and function code, an Isolation Forest model can learn the complex 'rhythm' of normal operations. A malicious toggling attack, with its rapid, repetitive, and often simplistic pattern, will stand out as a sequence of anomalous data points with a high anomaly score, allowing for precise detection that is difficult to achieve with simple statistical thresholds.
    answer_sources:
      - Zeek modbus.log
      - Zeek dnp3.log
      - Zeek s7comm.log
      - Zeek conn.log
      - Windows Event ID 4624
      - User activity baselines
      - IP geolocation database
      - Control Network segments
      - Programmable Logic Controllers (PLCs)
      - critical field devices (actuators, valves, breakers)
      - HMIs
      - Active Directory domain controllers
      - Identity and Access Management (IAM) log repositories
    range: last 90 days
    queries:
      - search: Pseudocode
        query: |-
          // For each critical I/O point:
          CREATE feature vectors from writes (value, time_since_last, source_ip, func_code)
          TRAIN Isolation Forest model on historical data
          // In production:
          CALCULATE anomaly_score for new feature vectors
          IF anomaly_score is high:
            ALERT "ML Detected Behavioral Anomaly - Possible Toggling"