name: T0874: Hooking
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: |
  This playbook helps investigate whether an adversary is executing unauthorized code on critical ICS components (e.g., EWS, HMI) by manipulating legitimate industrial processes, or escalating privileges on ICS hosts to gain deeper control. The primary technique is Hooking (T0874), where an adversary intercepts function calls or messages. Evidence of this can be found when a critical ICS process loads a suspicious DLL (unsigned, from a strange path, or statistically rare), initiates anomalous network connections (to unlisted IPs/ports, using unusual protocols), spawns unexpected child processes (like cmd.exe or powershell.exe), or loads DLLs into high-privilege processes. This playbook provides questions to detect these activities through rule-based, statistical, and machine-learning approaches.
type: technique
related:
  - TA0104: Execution
  - TA0111: Privilege Escalation
contributors:
  - Zachary Szewczyk
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
  - question: Is a critical ICS process loading a suspicious DLL based on signature status, path allowlists/blocklists, or known-bad hashes?
    context: This question helps detect hooking attempts where an adversary injects malicious code by forcing a legitimate process to load an unauthorized DLL. By checking for unsigned modules, modules from unusual locations, or those matching threat intelligence, analysts can identify the initial stages of code execution within a trusted process.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - Operator Stations
      - Process Control Servers (e.g., Historians, Domain Controllers in the PCN)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH Sysmon Event ID 7 WHERE parent_process IN [critical_ics_processes] AND (dll_signature_status != 'valid' OR dll_path NOT IN [allowlist] OR dll_path IN [blocklist] OR dll_hash IN [threat_intel_hashes])
  - question: Is a critical ICS process loading a DLL that is statistically anomalous based on its hash prevalence, path entropy, or file size?
    context: This question aims to find sophisticated hooking attempts that might evade simple signature or path checks. Adversaries may use custom or polymorphic DLLs that are rare in the environment. Analyzing the statistical properties of a loaded module—such as how common its hash is, how complex its file path is, or if its size has changed—can reveal subtle deviations from normal behavior.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - Operator Stations
      - Process Control Servers (e.g., Historians, Domain Controllers in the PCN)
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: SEARCH Sysmon Event ID 7 FROM last 30d | STATS prevalence(dll_hash), stdev(path_entropy), avg(file_size) BY parent_process | COMPARE to new event | ALERT if prevalence < 1% OR entropy > 3*stdev OR file_size_delta > 10%
  - question: Has an unsupervised machine learning model detected an anomalous module loading event for a critical ICS process?
    context: This question leverages machine learning to establish a comprehensive baseline of normal DLL loading behavior for critical processes. By considering multiple features simultaneously (signature status, path characteristics, file rarity), an anomaly detection model can identify complex, multi-faceted deviations that would be difficult to define with manual rules, indicating a potential hooking attempt.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Human-Machine Interfaces (HMIs)
      - Operator Stations
      - Process Control Servers (e.g., Historians, Domain Controllers in the PCN)
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: INPUT Sysmon Event ID 7 data INTO anomaly_detection_model | EXTRACT features (signature, path_entropy, hash_rarity) | ALERT on high anomaly_score
  - question: Has a critical ICS process initiated a network connection to a destination, port, or with a protocol that violates a pre-defined allowlist or matches a threat intelligence feed?
    context: This question seeks to identify potential command and control (C2) or data exfiltration channels established after a successful hooking attack. A compromised process may attempt to communicate with an attacker-controlled server. By checking connections against strict allowlists and known-bad domain lists, analysts can quickly spot unauthorized network activity.
    answer_sources:
      - Windows Event ID 3 (Sysmon - Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Process Control Network (PCN) Segments
      - EWS
      - HMIs
      - Historian Servers
      - Network Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH (Sysmon Event ID 3 OR Zeek logs) WHERE process_name IN [critical_ics_processes] | ALERT if (dest_ip OR dest_port NOT IN [allowlist]) OR (dns_query IN [threat_intel_domains]) OR (protocol NOT IN [allowlist])
  - question: Is a critical ICS process exhibiting statistically anomalous network behavior based on the rarity of the destination or the volume of data transferred?
    context: This question aims to detect covert C2 or exfiltration activity that might use legitimate ports but to unusual destinations or transfer abnormal amounts of data. By baselining normal network patterns and alerting on statistical outliers—like connections to rarely-contacted IPs or unusually large data transfers—analysts can uncover subtle indicators of compromise.
    answer_sources:
      - Windows Event ID 3 (Sysmon - Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Process Control Network (PCN) Segments
      - EWS
      - HMIs
      - Historian Servers
      - Network Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH (Sysmon Event ID 3 OR Zeek logs) FROM last 90d | STATS frequency(dest_ip, dest_port), percentile(data_volume) BY process_name | COMPARE to new connection | ALERT if frequency < 1% OR data_volume > 99%
  - question: Has an unsupervised machine learning model detected an anomalous network transaction originating from a critical ICS process?
    context: This question uses an autoencoder model to learn the complex, multi-dimensional patterns of normal network communications for a given process. The model can identify when a combination of features (e.g., destination, port, protocol, data size) deviates from the established norm, even if each individual feature seems benign. A high reconstruction error signals a novel or suspicious transaction that warrants investigation.
    answer_sources:
      - Windows Event ID 3 (Sysmon - Network Connection)
      - Zeek conn.log
      - Zeek dns.log
      - Process Control Network (PCN) Segments
      - EWS
      - HMIs
      - Historian Servers
      - Network Gateways
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: INPUT (Sysmon Event ID 3 AND Zeek logs) INTO autoencoder_model | EXTRACT features (dest_ip, dest_port, protocol, byte_counts) | ALERT on high reconstruction_error
  - question: Has a high-privilege ICS process loaded a DLL that is not on a strict, pre-defined allowlist?
    context: This question focuses on protecting the most sensitive processes from hooking-based privilege escalation. Processes running as 'High' or 'System' have extensive permissions, so any unauthorized code execution within them is critical. A strict allowlist is the most effective way to prevent this, as it flags any deviation from a known-good state.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Domain Controllers
      - Application Servers within the PCN
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH Sysmon Event ID 7 WHERE process_integrity_level IN ['High', 'System'] AND (dll_hash NOT IN [allowlist_hashes] OR dll_path NOT IN [allowlist_paths])
  - question: Has a privileged ICS process loaded a DLL that is statistically unusual based on its hash rarity, compile time, or path entropy?
    context: This question provides a secondary detection layer for privilege escalation attempts, catching what a static allowlist might miss. It looks for indicators of a newly introduced or obfuscated DLL. A very rare hash, a compile time that doesn't align with system updates, or a convoluted file path can all be signs that a malicious module is being loaded into a privileged process.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Domain Controllers
      - Application Servers within the PCN
    range: last 30 days
    queries:
      - search_technology: pseudocode
        query: SEARCH Sysmon Event ID 7 FROM last 30d WHERE process_integrity_level IN ['High', 'System'] | STATS prevalence(dll_hash), stdev(path_entropy) | COMPARE to new event | ALERT if prevalence < 0.5% OR compile_time > parent_compile_time OR path_entropy > 3*stdev
  - question: Has a machine learning model (One-Class SVM) identified a module loading event into a privileged process as a high-confidence anomaly?
    context: This question applies a specialized machine learning model to create a strict boundary around normal module loading behavior for privileged processes. The One-Class SVM is particularly good at identifying outliers. Any event falling outside the learned "normal" boundary is flagged, providing a robust method for detecting novel or sophisticated hooking attempts aimed at privilege escalation.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Engineering Workstations (EWS)
      - Domain Controllers
      - Application Servers within the PCN
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: INPUT Sysmon Event ID 7 for privileged processes INTO one_class_svm_model | EXTRACT features (signature, path_entropy, hash_prevalence) | ALERT if event is outlier
  - question: Following a suspicious module load, did a critical ICS process spawn a blocked child process (like cmd.exe) or a process with a suspicious command line?
    context: This question directly links a potential hooking event (suspicious DLL load) to its subsequent action (spawning a new process). This chain of events is a strong indicator of compromise, as it shows the injected code being used to execute further commands, often by launching a shell or a script with encoded commands to evade detection.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Windows Event ID 4688 (Security - A process has been created)
      - Windows Event ID 1 (Sysmon - Process Create)
      - Engineering Workstations (EWS)
      - HMIs
      - Historian Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: JOIN (SEARCH Sysmon Event ID 7 WHERE dll is suspicious) with (SEARCH Sysmon Event ID 1) on ProcessGuid where time_delta < 60s | ALERT if child_process IN [blocklist] OR command_line CONTAINS [suspicious_strings]
  - question: Has a critical ICS process spawned a child process that is either novel for that parent or has a command line that is structurally dissimilar to historical examples?
    context: This question aims to detect post-hooking activity by baselining normal process creation behavior. Legitimate ICS processes typically spawn a predictable set of child processes with consistent command-line arguments. An alert on a new child process or a significantly different command-line structure can reveal an adversary using the compromised process to launch tools or scripts.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Windows Event ID 4688 (Security - A process has been created)
      - Windows Event ID 1 (Sysmon - Process Create)
      - Engineering Workstations (EWS)
      - HMIs
      - Historian Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: SEARCH Sysmon Event ID 1 FROM last 90d | BASELINE child_process, command_line_tokens by parent_process | COMPARE to new event | ALERT if child_process is new OR jaccard_distance(command_line_tokens) > 0.8
  - question: Has a graph-based anomaly detection model identified a structurally rare process creation event, such as an unexpected parent-child relationship involving a critical ICS process?
    context: This question applies advanced graph analytics to model the entire chain of process creations on a host. By representing parent-child relationships as a graph, algorithms can identify system-wide structural anomalies that are invisible when looking at single events in isolation. For example, a historian process, which normally never spawns a shell, creating `powershell.exe` would be a highly anomalous and suspicious edge in the graph.
    answer_sources:
      - Windows Event ID 7 (Sysmon - Image Loaded)
      - Windows Event ID 4688 (Security - A process has been created)
      - Windows Event ID 1 (Sysmon - Process Create)
      - Engineering Workstations (EWS)
      - HMIs
      - Historian Servers
    range: last 90 days
    queries:
      - search_technology: pseudocode
        query: INPUT Sysmon Event ID 1 data INTO graph_model | CREATE nodes (process_hash) and edges (parent-child) | ENRICH nodes/edges with features | ALERT on structurally anomalous edges/paths