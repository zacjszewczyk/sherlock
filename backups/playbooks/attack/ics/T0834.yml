name: "T0834: Native API"
id: "a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"
description: "This playbook helps identify if an adversary is executing unauthorized code on critical ICS assets (e.g., HMI, EWS) by directly interacting with the operating system's native API. The investigation focuses on three key areas of evidence: 1) A whitelisted, critical ICS process spawning an anomalous child process (e.g., an interpreter like cmd.exe, an unsigned binary, or from a temp directory). 2) A critical ICS application initiating anomalous network connections that violate established baselines, such as using IT protocols on OT segments or connecting to external IPs. 3) A whitelisted ICS process performing unusual write or delete operations on files or registry keys outside of its normal operational baseline, such as modifying startup keys or its own binary."
type: "technique"
related:
  - "TA0104: Execution"
contributors:
  - "Zachary Szewczyk"
  - "Ask Sage"
created: "2025-10-01"
modified: "2025-10-01"
version: 1.0
tags: "none"
questions:
  - question: "Is a critical ICS process creating an unauthorized child process or attempting to inject into another process?"
    context: "Adversaries often leverage trusted and whitelisted ICS processes to launch malicious tools like command shells (cmd.exe) or PowerShell. This technique, known as masquerading or parent-child process spoofing, helps them evade simple detection rules. This question seeks to identify these events by implementing specific rules that look for a known critical process spawning a command interpreter, an unsigned binary, or a process from a user-writable/temporary directory. It also checks for precursor activity to process injection, where a critical process requests write access to another process's memory, indicating a potential attempt to inject malicious code."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows Event ID 4656"
      - "Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          SEARCH process_creation_events (Sysmon_ID=1 OR WinEvent_ID=4688)
          WHERE parent_process_name IN critical_ics_process_list
          AND (
            child_process_name IN interpreter_denylist OR
            child_process_signature = 'untrusted' OR
            child_process_path CONTAINS 'temp_or_user_writable_dirs'
          )
          UNION
          SEARCH memory_access_events (WinEvent_ID=4656)
          WHERE source_process_name IN critical_ics_process_list
          AND access_mask CONTAINS 'process_write_access'"
  - question: "Is a critical ICS process exhibiting statistically rare parent-child process relationships or command-line obfuscation?"
    context: "Beyond simple, static rules, adversaries may use novel child processes not on a denylist or employ command-line obfuscation to hide their activity. This question aims to uncover such evasive techniques by applying statistical analysis. It involves building a historical baseline of normal parent-child process relationships for each critical ICS application. An alert is generated when a new relationship occurs that is statistically rare (e.g., 99th percentile of rarity). Furthermore, it baselines the normal complexity (Shannon entropy) of command-line arguments and flags significant deviations, which can indicate obfuscated or packed commands."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows Event ID 4656"
      - "Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Baseline historical data
          BASELINE process_creation_events over last 30 days
          GROUP BY parent_process_name
          CALCULATE frequency of each child_process_name
          CALCULATE mean and std_dev of command_line_entropy

          // Step 2: Detect anomalies in real-time
          SEARCH process_creation_events
          WHERE parent_process_name IN critical_ics_process_list
          COMPARE current parent-child pair to baseline frequency
          IF frequency < 1st_percentile THEN ALERT (medium)
          COMPARE command_line_entropy to baseline
          IF entropy > (mean + 3 * std_dev) THEN ALERT (high)"
  - question: "Does a new process creation event from a critical ICS asset appear anomalous based on a machine learning model?"
    context: "To detect novel or highly sophisticated attacks, a more advanced anomaly detection approach is needed. This question leverages an unsupervised machine learning model, such as an Isolation Forest, which excels at identifying outliers in data. The model is trained on a variety of features from historical process creation events, including parent and child process names, command line length and entropy, and whether the binary is signed or in a system directory. By scoring new events in real-time, this model can flag complex anomalies that do not fit predefined rules or simple statistical thresholds, providing a powerful layer of defense."
    answer_sources:
      - "Windows Event ID 4688"
      - "Sysmon Event ID 1"
      - "Windows Event ID 4656"
      - "Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Train model on historical data
          FEATURES = [ParentProcessName, NewProcessName, command_line_length, command_line_entropy, is_signed, is_in_system_dir]
          MODEL = train_isolation_forest(historical_process_events, FEATURES)

          // Step 2: Score new events
          FOREACH new_process_event:
            anomaly_score = MODEL.predict(new_process_event)
            IF anomaly_score > 98th_percentile_threshold:
              ALERT (analyst_review)"
  - question: "Is a critical ICS application initiating network connections using unauthorized protocols or connecting to untrusted external destinations?"
    context: "Critical ICS applications typically have highly predictable and restricted network behavior, communicating only with specific devices using industrial protocols. An adversary who has compromised an ICS application may use it to communicate with a command-and-control (C2) server or exfiltrate data using standard IT protocols like HTTP, RDP, or SMB. This question aims to detect such violations by correlating process data with network logs. It triggers an alert if a trusted ICS process initiates a connection using a non-standard protocol for its environment or connects to an IP address outside the approved OT network, including making DNS requests for non-whitelisted domains."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          SEARCH network_connection_events (Sysmon_ID=3 OR WinEvent_ID=5156 OR zeek_conn)
          WHERE process_name IN critical_ics_process_list
          AND (
            (destination_port IN common_it_ports AND destination_ip NOT IN ot_address_space)
            OR
            (dns_query_name NOT IN ics_domain_whitelist)
          )
          ALERT (high)"
  - question: "Is a critical ICS application exhibiting statistically anomalous network behavior, such as connecting to new ports or transferring unusual amounts of data?"
    context: "Adversaries may attempt to blend in by using allowed protocols but in subtly anomalous ways. This question focuses on detecting these statistical deviations from an established baseline. For each critical ICS application, a 30-day rolling baseline of its network behavior is maintained. This includes the set of destination ports it normally connects to and the typical volume of data it transfers. An alert is generated if the application connects to a port it has never used before or if the daily data volume transferred suddenly spikes beyond its historical norm (e.g., exceeding the 95th percentile), which could indicate data exfiltration."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Baseline historical data
          BASELINE network_events over last 30 days
          GROUP BY process_name
          CALCULATE set of unique destination_ports
          CALCULATE daily_data_volume_percentiles

          // Step 2: Detect anomalies in real-time
          SEARCH network_events
          WHERE process_name IN critical_ics_process_list
          IF destination_port NOT IN baseline_port_set THEN ALERT (medium)
          IF daily_data_volume > 95th_percentile THEN ALERT (high)"
  - question: "Does a network connection from a critical ICS application appear anomalous based on a machine learning model?"
    context: "To capture complex patterns of anomalous network behavior that rules and simple statistics might miss, this question proposes using a One-Class Support Vector Machine (OC-SVM). This machine learning model is trained on a baseline of normal network connections, learning the multi-dimensional boundary of 'normal' based on features like connection duration, bytes transferred, protocol, and connection state. Any new connection that falls outside this learned boundary is classified as an outlier. This is effective for detecting novel C2 communication channels or unusual data transfer patterns that are not explicitly defined by rules."
    answer_sources:
      - "Zeek conn.log"
      - "Zeek dns.log"
      - "Windows Event ID 5156"
      - "Sysmon Event ID 3"
      - "Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Train model on historical data
          FEATURES = [duration, orig_bytes, resp_bytes, resp_p, proto, conn_state]
          MODEL = train_oc_svm(historical_network_connections, FEATURES)

          // Step 2: Score new connections
          FOREACH new_network_connection:
            classification = MODEL.predict(new_network_connection)
            IF classification == 'outlier':
              ALERT (analyst_review)"
  - question: "Is a critical ICS process attempting to write to or delete a protected system file or registry key?"
    context: "A common objective for an adversary is to establish persistence or disable security controls. They can achieve this by using native API calls to modify system files or registry keys. This question focuses on detecting this activity through a rule-based approach. By enabling auditing (SACLs) on critical files, directories (e.g., C:\\Windows\\System32), and registry hives (e.g., Run keys), we can generate high-priority alerts when a whitelisted ICS process attempts a write or delete operation on these protected resources. This is a strong indicator of compromise, as these applications should not be modifying such sensitive locations during normal operation."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers. Specifically monitor critical directories ('C:\\Windows\\System32', application installation folders) and registry hives ('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run')."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          SEARCH file_or_registry_events (Sysmon_ID IN [11,12,13] OR WinEvent_ID IN [4663, 4657])
          WHERE process_name IN critical_ics_process_list
          AND event_type IN ['write', 'delete']
          AND target_path IN protected_resource_list
          ALERT (high)"
  - question: "Is a critical ICS process writing to a statistically rare file or registry path?"
    context: "Instead of only monitoring known sensitive locations, this question aims to detect when a critical process interacts with any unusual location. Adversaries may drop payloads or configuration files in non-standard but seemingly innocuous directories to avoid detection. By building a 30-day baseline of all file and registry paths that each critical ICS application normally writes to, we can calculate a rarity score for each path. An alert is then generated for any write operation to a path that is statistically very rare (e.g., in the 99th percentile of rarity), indicating a deviation from normal behavior that warrants investigation."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers. Specifically monitor critical directories ('C:\\Windows\\System32', application installation folders) and registry hives ('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run')."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Baseline historical data
          BASELINE file_or_registry_write_events over last 30 days
          GROUP BY process_name
          CALCULATE frequency of each target_path

          // Step 2: Detect anomalies in real-time
          SEARCH file_or_registry_write_events
          WHERE process_name IN critical_ics_process_list
          COMPARE current target_path to baseline frequency
          IF frequency < 1st_percentile THEN ALERT (medium)"
  - question: "Is a critical ICS process writing to a file or registry path that is syntactically anomalous?"
    context: "Advanced adversaries may use algorithmically generated names for their payloads or configuration files to evade signature-based and list-based detections. This question addresses this by using a machine learning model, such as a character-level autoencoder, to learn the normal syntactic structure of file and registry paths. The model is trained on the corpus of paths normally accessed by an application. When a new write event occurs, the path is fed to the model. If the model has difficulty reconstructing the path (resulting in a high reconstruction error), it suggests the path is syntactically unusual (e.g., random-looking) and potentially malicious."
    answer_sources:
      - "Windows Event ID 4663"
      - "Windows Event ID 4657"
      - "Sysmon Event ID 11"
      - "Sysmon Event ID 12"
      - "Sysmon Event ID 13"
      - "File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers. Specifically monitor critical directories ('C:\\Windows\\System32', application installation folders) and registry hives ('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run')."
    range: "Last 90 days"
    queries:
      - "search_technology: pseudocode"
      - "query: |
          // Step 1: Train model on historical data
          MODEL = train_autoencoder(corpus_of_normal_paths for each critical_app)

          // Step 2: Score new paths
          FOREACH new_write_event:
            path = new_write_event.target_path
            reconstruction_error = MODEL.evaluate(path)
            IF reconstruction_error > anomaly_threshold:
              ALERT (analyst_review)"