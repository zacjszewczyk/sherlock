name: T0881: Service Stop
id: a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d
description: This playbook helps answer if an adversary is attempting to inhibit critical ICS processes or response functions by stopping services. It provides investigative steps to detect this activity by identifying explicit service stop commands correlated with service stop events, correlating service stops with preceding anomalous inbound network connections, or finding 'spontaneous' service stops that lack a corresponding stop command or crash event, which may indicate a non-standard termination method like a direct API call from a malicious process.
type: technique
related:
- TA0107: Inhibit Response Function
contributors:
- Zachary Szewczyk
- Ask Sage
created: 2025-10-01
modified: 2025-10-01
version: 1.0
tags: none
questions:
- question: How can I detect if a service stop utility was used to stop a critical ICS service shortly after the command was issued?
  context: This question aims to identify direct, command-line based attempts to stop a critical service. By correlating a process creation event for a known service utility (like 'sc.exe' or 'net.exe') with a subsequent service stop event for the same service, analysts can pinpoint explicit malicious actions. The logic filters for non-approved users or actions outside of maintenance windows to reduce false positives and focus on suspicious activity.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 7036
  - Sysmon Event ID 1
  - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      JOIN (process_creation_events WHERE process_name IN ['sc.exe', 'net.exe', 'powershell.exe', 'taskkill.exe'] AND command_line CONTAINS 'stop') AS A
      WITH (service_status_events WHERE event_type = 'stopped') AS B
      ON A.hostname = B.hostname AND A.target_service = B.service_name
      WHERE B.timestamp - A.timestamp BETWEEN 0 AND 15 seconds
      AND A.user NOT IN (approved_admin_list)
      AND B.service_name IN (critical_ics_service_list)
- question: How can I identify anomalous service stop events by baselining historical user and parent process behavior?
  context: This question helps detect service stops that deviate from established normal behavior, even if initiated by an otherwise legitimate-looking process. By creating a baseline of which users and parent processes normally stop a given service, this method can flag novel or unusual combinations. A risk score is used to quantify the deviation, alerting when a stop is initiated by a user or parent process for the first time, or occurs at an unusual time of day.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 7036
  - Sysmon Event ID 1
  - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      FOR each new service_stop_event:
        risk_score = 0
        // Check historical data (90-day baseline) for the specific service
        IF event.user NOT IN (historical_users_for_service):
          risk_score += 1
        IF event.parent_process NOT IN (historical_parent_processes_for_service):
          risk_score += 1

        IF risk_score >= 2:
          ALERT "Anomalous service stop based on user/process history."
        
        // Check time of day against historical distribution
        IF event.hour_of_day IN (bottom 5th percentile of historical stop times):
          ALERT "Anomalous service stop time."
- question: How can I use machine learning to detect unusual or obfuscated service stop commands?
  context: This question applies machine learning to detect sophisticated attempts to stop services that might evade simple signature-based rules. An Isolation Forest model is trained on legitimate command-line arguments and parent processes. This allows the system to identify highly unusual patterns, such as obfuscated commands or service stops initiated by unexpected parent processes, which are then flagged as anomalies.
  answer_sources:
  - Windows Event ID 4688
  - Windows Event ID 7036
  - Sysmon Event ID 1
  - Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Training Phase (offline)
      features = extract_features(historical_legit_service_stop_commands) // TF-IDF on command line, one-hot on parent process
      model = train_isolation_forest(features)
      
      // Real-time Inference
      FOR each new service_stop_command_event:
        event_features = extract_features(event)
        anomaly_score = model.predict(event_features)
        
        IF anomaly_score > (99th percentile threshold):
          ALERT "High-confidence anomalous service stop command detected."
- question: How can I investigate if a critical service stop was preceded by suspicious remote network activity?
  context: This question seeks to link an internal service disruption to a potential external entry point. By querying network logs (like Zeek) for connections occurring just before a service stop, analysts can identify suspicious remote access. The query specifically looks for connections from untrusted IP spaces, use of remote admin ports from non-admin hosts, or remote procedure calls associated with service management, providing strong evidence of remote compromise leading to service termination.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 7036
  - Zeek dce_rpc.log
  - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON service_stop_event (Event ID 7036):
        target_host_ip = event.host_ip
        event_time = event.timestamp
        
        QUERY network_logs WHERE
          destination_ip = target_host_ip
          AND timestamp BETWEEN (event_time - 5 minutes) AND event_time
        
        FOR each network_connection:
          IF source_ip IN (untrusted_ip_list)
          OR (destination_port IN [3389, 5985, 445] AND source_ip NOT IN (admin_jump_hosts))
          OR (connection has related dce_rpc_log with 'scmr' operation):
            ALERT "Service stop correlated with suspicious inbound network connection."
- question: How can I detect if a service stop was preceded by network connections that are anomalous in terms of source IP rarity or data volume?
  context: This question uses statistical baselining of network traffic to find subtle indicators of compromise. It establishes what's 'normal' for a host in terms of which IPs connect to it and how much data is transferred. When a service stops, this method checks the preceding network connections against this baseline. An alert is triggered if a connection came from a very rare source IP or involved an unusually large amount of data, suggesting a reconnaissance or staging activity prior to the service disruption.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 7036
  - Zeek dce_rpc.log
  - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Baseline (30-day rolling)
      source_ip_freq = calculate_frequency(conn_log.source_ip per host)
      data_volume_95p = calculate_95th_percentile(conn_log.total_bytes per host)
      
      // On service_stop_event (Event ID 7036):
      target_host_ip = event.host_ip
      event_time = event.timestamp
      
      QUERY network_logs WHERE
        destination_ip = target_host_ip
        AND timestamp BETWEEN (event_time - 5 minutes) AND event_time
        
      FOR each network_connection:
        IF frequency(connection.source_ip) < 5th_percentile_freq
        OR (connection.total_bytes) > data_volume_95p:
          ALERT "Service stop preceded by statistically anomalous network connection."
- question: How can I use an autoencoder to detect highly anomalous network connections preceding a service stop?
  context: This question leverages an autoencoder, a type of neural network, to build a deep understanding of 'normal' network behavior for a specific host. The model is trained on various features of historical connection data. When a service stop occurs, preceding connections are passed through the model. If the model has a high 'reconstruction error' for a connection, it means the connection is very different from what the model learned as normal, indicating a high-probability anomaly.
  answer_sources:
  - Zeek conn.log
  - Windows Event ID 7036
  - Zeek dce_rpc.log
  - Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Training Phase (offline on 60 days of data per host)
      features = extract_features(historical_conn_logs) // protocol, duration, bytes, etc.
      model = train_autoencoder(features)
      
      // Real-time Inference on service_stop_event (Event ID 7036)
      target_host_ip = event.host_ip
      event_time = event.timestamp
      
      QUERY network_logs WHERE
        destination_ip = target_host_ip
        AND timestamp BETWEEN (event_time - 5 minutes) AND event_time
      
      FOR each network_connection:
        connection_features = extract_features(connection)
        reconstruction_error = model.evaluate(connection_features)
        
        IF reconstruction_error > (99th percentile threshold):
          ALERT "Service stop preceded by ML-detected highly anomalous network connection."
- question: How can I detect when a critical ICS service stops without any corresponding standard stop command or known crash event?
  context: This question is designed to find stealthy service terminations. Adversaries may use methods other than standard command-line utilities to stop a service, such as direct API calls from a malicious implant, to evade simple logging. By triggering an alert when a service stop event (Event ID 7036) occurs *without* a preceding stop command (Event ID 4688/Sysmon 1) or a service crash (Event ID 7034), this logic specifically targets these non-standard, and therefore highly suspicious, termination methods.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7034
  - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      ON service_stop_event (Event ID 7036 for critical service):
        target_host = event.host
        target_service = event.service_name
        event_time = event.timestamp
        
        LOOKBEHIND 60 seconds on target_host FOR
          (process_creation_event with 'stop' command for target_service)
          OR (service_crash_event (Event ID 7034) for target_service)
        
        IF no preceding event found:
          ALERT "Unexplained service stop detected (no stop command or crash)."
- question: How can I use statistical analysis to detect an abnormal increase in 'spontaneous' or unexplained service stops?
  context: This question addresses the possibility of a low-and-slow attack or a widespread issue causing services to fail. It first identifies 'spontaneous' stops (those without a command or crash) and then tracks their frequency over time. By calculating the mean and standard deviation of these events per hour, it can detect a sudden, statistically significant spike (e.g., Z-score > 3), which indicates an abnormal burst of unexplained terminations that warrants investigation.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7034
  - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Baseline (30-day)
      FOR each critical service:
        hourly_counts = count 'spontaneous' stops per hour
        mean, std_dev = calculate_stats(hourly_counts)
        
      // Real-time Check
      current_hour_count = count 'spontaneous' stops in the last hour
      z_score = (current_hour_count - mean) / std_dev
      
      IF z_score > 3:
        ALERT "Abnormal hourly spike in unexplained service stops detected."
- question: How can I use a time-series model to detect a statistically significant deviation in the rate of unexplained service stops?
  context: This question provides a more sophisticated method for detecting abnormal rates of unexplained service stops by accounting for seasonality (e.g., daily or weekly patterns). A time-series model like SARIMA learns the normal rhythm of these events. It then forecasts the expected number of 'spontaneous' stops for a given time period. An alert is generated if the actual count falls significantly outside the model's 99% confidence interval, indicating a deviation that is highly unlikely to be part of normal operations.
  answer_sources:
  - Windows Event ID 7036
  - Windows Event ID 4688
  - Sysmon Event ID 1
  - Windows Event ID 7034
  - Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.
  range: last 90 days
  queries:
  - technology: pseudocode
    query: |
      // Training Phase (offline)
      FOR each critical service:
        time_series_data = hourly count of 'spontaneous' stops
        model = train_sarima_model(time_series_data)
        
      // Real-time Check
      current_hour_count = count 'spontaneous' stops in the last hour
      forecast, confidence_interval = model.predict(next_hour)
      
      IF current_hour_count NOT IN confidence_interval:
        ALERT "Time-series anomaly detected in rate of unexplained service stops."