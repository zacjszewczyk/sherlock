[
  {
    "information_requirement": "Is an adversary using a rootkit to hide their presence on ICS assets? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A statistically significant number of outbound network connections originating from an ICS host, identified in Zeek conn.log, for which there is no corresponding process creation event (Windows Event ID 4688) or network filtering platform event (Windows Event ID 5156) recorded on that host within a 5-second window. This mismatch specifically targets connections to external IP addresses, known blacklisted IPs, or unauthorized internal network segments.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Gateways/Firewalls segmenting OT networks, SCADA Servers, Process Control Servers, Domain Controllers in OT, Level 2/Level 3 Network Zones.",
            "action": "1. Symbolic Logic: For each unique ICS host's IP address (id.orig_h) observed in Zeek conn.log, identify all outbound network connections where id.resp_h is an external IP address, a known malicious IP from a threat intelligence feed, or an IP address outside of authorized internal ICS segments. For each such Zeek connection, attempt to correlate it with a corresponding Windows Event ID 4688 (process creation) or Windows Event ID 5156 (network filtering platform event) on the same host within a +/- 5-second timestamp window based on id.orig_p, id.resp_p, and id.resp_h. If no matching host-side event is found, tag this as 'unattributed_network_flow'.\n2. Statistical Method: Establish a 7-day rolling baseline for each critical ICS host (id.orig_h) of the average daily count of 'unattributed_network_flow' events, categorized by id.resp_h (external/internal unauthorized). Calculate the standard deviation for this baseline. Generate a high-priority alert if the current 1-hour count of 'unattributed_network_flow' events for a host exceeds 3 standard deviations from its rolling baseline average for that hour, or if the number of unique 'unattributed_network_flow' events to external IPs exceeds a static threshold of 5 within a 15-minute window.\n3. Machine Learning: Train a supervised classification model (e.g., Random Forest or SVM) using historical Zeek conn.log and Windows event data to identify legitimate network flows with corresponding process/firewall events versus flows lacking attribution. Features would include connection duration, byte counts, protocol, destination IP reputation, and presence/absence of host-side events. Deploy the model to score new network flows, generating a high-priority alert for flows exceeding a predefined anomaly score threshold (e.g., top 1st percentile of anomaly scores)."
          },
          {
            "description": "Detection of a new Windows service installation (Windows Event ID 7045) or unauthorized modification to an existing service (Windows Event ID 7040) on an ICS asset, where the Service Name, Image Path, or Account Name deviates from an established baseline of approved services or is identified as suspicious (e.g., hidden path, common malware names, unsigned binaries).",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7040"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.",
            "action": "1. Symbolic Logic: Establish and regularly update a whitelist of approved Windows services, including Service Name, Image Path, Start Type, and Account Name for each critical ICS asset type (e.g., EWS, HMI, Historian). For every Windows Event ID 7045 (service creation) or Windows Event ID 7040 (service modification), compare the event's Service Name, Image Path, Start Type, and Account Name against the host-specific whitelist. Generate a high-priority alert if any of these attributes do not match an approved entry, or if the Image Path points to a non-standard location (e.g., C:\\Users\\ or C:\\ProgramData\\) or contains known obfuscation techniques (e.g., excessively long paths, non-ASCII characters).\n2. Statistical Method: For each ICS host, calculate the daily count of unique Image Path values observed in Windows Event ID 7045 and 7040. Establish a 14-day rolling average and standard deviation for this count. Generate a medium-priority alert if the current daily count of unique Image Path values exceeds 2 standard deviations above the rolling average, indicating an unusual volume of service modifications or installations. Additionally, calculate the Shannon entropy of Image Path strings for newly observed services; flag services with entropy scores exceeding the 95th percentile of known legitimate service paths.\n3. Machine Learning: Develop a supervised classification model (e.g., Gradient Boosting) trained on historical service event data (Event IDs 7045, 7040) to distinguish between legitimate and malicious service installations/modifications. Features would include Service Name (hashed), Image Path (hashed, directory depth, entropy), Start Type, Account Name, and whether the binary is signed. Deploy the model to score new service events, generating a high-priority alert for events classified as malicious or exhibiting a high anomaly score (e.g., top 1% by probability of being anomalous)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary using a rootkit to inhibit the response function of an ICS device? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A statistically significant and sustained increase (e.g., 3-sigma deviation from baseline) in failed TCP connection states ('REJ', 'RSTO', 'RSTR') observed in Zeek conn.log between critical ICS supervisory control hosts (e.g., HMIs, SCADA servers) and specific field devices (e.g., PLCs, RTUs) on known ICS protocol ports (e.g., Modbus TCP 502/TCP, Siemens S7Comm 102/TCP, EtherNet/IP 44818/TCP), indicating impaired communication or device responsiveness.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.",
            "action": "1. Symbolic Logic: Monitor Zeek conn.log for connections involving known ICS supervisory control hosts (id.orig_h or id.resp_h) and field devices (id.orig_h or id.resp_h) on designated ICS protocol ports. Filter for connections with conn_state values of 'REJ', 'RSTO', or 'RSTR'. Generate a medium-priority alert if any unique id.orig_h-id.resp_h pair experiences 5 or more such failed connections within a 30-second sliding window, particularly if the destination port is a critical ICS protocol port.\n2. Statistical Method: For each ICS supervisory control host-to-field device pair and specific ICS protocol port, establish a 7-day rolling baseline of the average hourly rate of 'REJ', 'RSTO', and 'RSTR' conn_state events. Calculate the standard deviation for this rate. Generate a high-priority alert if the current hourly rate of failed connections for any pair exceeds 3 standard deviations above its historical baseline, indicating a statistically significant increase in communication failures.\n3. Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA or Prophet with anomaly detection) on the aggregated count of failed connection states ('REJ', 'RSTO', 'RSTR') per ICS host-device pair and protocol port over 5-minute intervals. Train the model on historical data to learn normal communication patterns. Deploy the model to continuously monitor real-time data, generating a high-priority alert when a significant deviation from the predicted normal range (e.g., exceeding the 99th percentile of prediction intervals) is detected, indicating an anomalous disruption in communication."
          },
          {
            "description": "Repeated occurrences (e.g., 3 or more within 15 minutes) of critical HMI or SCADA application crashes (Windows Event ID 1000 - Application Error, Windows Event ID 1001 - Application Crashing Events) on operator workstations or HMI servers, specifically when these crashes are correlated within a 10-second window with inbound or outbound communications to/from specific field devices (PLCs/RTUs) on ICS protocol ports, as identified in Zeek conn.log, suggesting a potential denial of view or control.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.",
            "action": "1. Symbolic Logic: Monitor HMI/operator workstations and HMI servers for Windows Event ID 1000 (Application Error) and Windows Event ID 1001 (Application Crashing Events). Filter for Faulting application name matching known critical HMI/SCADA software executables. For each such crash event, correlate the Computer's IP address and TimeCreated with Zeek conn.log entries from that IP within a +/- 10-second window, specifically looking for active connections (conn_state other than 'S0' or 'SF') to known field device IP addresses (PLCs/RTUs) on designated ICS protocol ports. Generate a high-priority alert if a critical HMI/SCADA application crash is directly preceded by or concurrent with communication to a field device.\n2. Statistical Method: Establish a 14-day rolling baseline for each HMI/SCADA application on each workstation/server, tracking the average hourly frequency of Windows Event ID 1000/1001 crashes that are correlated with ICS network activity (as per symbolic logic). Calculate the standard deviation of this frequency. Generate a high-priority alert if the current hourly frequency of such correlated crashes exceeds 2 standard deviations above the baseline, indicating an abnormal surge in application instability during ICS communication. Additionally, calculate the percentile rank of the Exception Code for correlated crashes; flag crashes with Exception Code values in the top 5th percentile of observed malicious exceptions.\n3. Machine Learning: Develop an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) to identify unusual patterns in HMI/SCADA application crash events (Event IDs 1000/1001) combined with network communication metadata from Zeek (e.g., orig_bytes, resp_bytes, duration, conn_state, service, id.resp_p). Train the model on normal operational data. Deploy the model to continuously score new event correlations, generating a high-priority alert for event groups (e.g., multiple crashes within a short period, or crashes with unusual network traffic patterns) that exhibit an anomaly score above a predefined threshold (e.g., top 2% of scores)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]