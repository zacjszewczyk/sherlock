[
  {
    "information_requirement": "Is an adversary using a compromised ICS host as a proxy for Command and Control communications?",
    "tactic_id": "TA0101",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T0884",
        "name": "Connection Proxy",
        "evidence": [
          {
            "description": "An ICS host (e.g., Engineering Workstation, HMI, Jump Server) exhibits a 'fan-out' network pattern: it receives an initial inbound connection from an external IP address (not belonging to any defined internal IT or OT network ranges), and then, within a 5-minute window, initiates new outbound connections to 5 or more distinct internal ICS assets (e.g., PLCs, RTUs, data historians) that it has not communicated with in the preceding 30 days. This abrupt change in behavior signifies a deviation from the host's established communication baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeters between IT and OT zones, IT/OT firewalls, ICS DMZ/Jump Servers, Engineering Workstations, HMIs, Data Historians, and critical control servers (e.g., SCADA servers).",
            "action": "1. Symbolic Logic:\n    *   Identify inbound connections in Zeek conn.log to any ICS host (id.resp_h) where the source IP (id.orig_h) is not within any defined internal IT or OT network ranges. This requires a defined list of internal IT/OT network ranges.\n    *   For each identified inbound connection, within a 5-minute time window, search Zeek conn.log for subsequent outbound connections originating from that same ICS host (id.orig_h) to internal ICS assets (e.g., IP addresses in PLC, RTU, or historian subnets).\n    *   From these outbound connections, count the number of unique internal ICS assets contacted.\n    *   Compare this list of unique internal ICS assets against a 30-day historical baseline for the ICS host to identify which of these assets have not been communicated with by this specific host in the preceding 30 days.\n    *   If the count of unique, historically unobserved internal ICS assets exceeds 5, generate a high-severity alert.\n    *   Enrich the alert by correlating with Windows Event ID 4688 on the ICS host to identify the process initiating the outbound connections and Windows Event ID 5156 for specific Windows Filtering Platform connection details.\n2. Statistical Method:\n    *   For each ICS host, continuously calculate a 30-day rolling average and standard deviation of the daily count of unique internal ICS destination IP addresses (id.resp_h where id.orig_h is the ICS host and id.resp_h is an internal ICS asset from Zeek conn.log).\n    *   Daily, compute the Z-score for the current unique internal destination IP count relative to its 30-day baseline. Generate a medium-severity alert if the Z-score exceeds 3.0.\n    *   Additionally, determine the 99th percentile of unique internal destination IP counts over the 30-day baseline. If the current day's count exceeds this percentile, trigger an investigation.\n    *   Prioritize alerts where this statistically anomalous increase in unique destinations is observed immediately following an external inbound connection (id.orig_h not internal) in Zeek conn.log, and where Windows Event ID 4688 on the ICS host indicates an unusual process initiated the connections.\n3. Machine Learning:\n    *   Implement a graph-based anomaly detection model (e.g., Graph Neural Networks, Node2Vec with clustering) using Zeek conn.log data, representing IPs as nodes and connections as edges.\n    *   Train the model on 90 days of historical ICS network traffic to establish a baseline of normal communication patterns and communities within the ICS environment.\n    *   Deploy the trained model to continuously analyze live Zeek conn.log data.\n    *   Alert on any ICS host identified by the model as suddenly becoming a central node, exhibiting connections to a high number of previously unobserved or rarely observed (e.g., <0.1% historical frequency) internal ICS assets.\n    *   Generate an alert when the model outputs an anomaly score exceeding a learned threshold (e.g., the top 1% of historical anomaly scores), particularly if this behavior is preceded by an external inbound connection to the ICS host."
          },
          {
            "description": "A designated intermediary host (e.g., Jump Server, OT DMZ host) receives an inbound connection from an IP address outside of defined internal IT or OT network ranges, and subsequently, within 30 seconds, initiates one or more outbound connections to internal ICS assets (e.g., PLCs, RTUs) utilizing known ICS-native protocols (e.g., Modbus/TCP on port 502, DNP3 on port 20000, S7 on port 102/TCP, EtherNet/IP on port 44818/TCP).",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT DMZ hosts, Jump Servers, SCADA servers, and network segments containing PLCs, RTUs, and other field devices.",
            "action": "1. Symbolic Logic:\n    *   Monitor Zeek conn.log for inbound connections to designated OT DMZ or Jump Server hosts where the source IP (id.orig_h) is not within any defined internal IT or OT network ranges.\n    *   For each such inbound event, immediately query Zeek conn.log for outbound connections from the same destination host (id.resp_h, which is the DMZ/Jump Server) to internal ICS assets within a 30-second window.\n    *   Filter these outbound connections to specifically match known ICS protocol destination ports (e.g., 502/TCP, 20000/TCP, 102/TCP, 44818/TCP).\n    *   If a match is found (inbound from external followed by outbound to ICS asset via ICS protocol within 30 seconds), trigger a critical alert.\n    *   Additionally, query Windows Event ID 4624 on the DMZ/Jump Server for Logon Type 3 (network logon) or 10 (remote interactive) events within 1 minute prior to the network activity, and Windows Event ID 4688 for the process responsible for the network connections.\n2. Statistical Method:\n    *   For each OT DMZ or Jump Server host, calculate the daily count of unique (external_IP, internal_ICS_IP, ICS_Protocol) triplets observed from Zeek conn.log, where external_IP is the inbound source (id.orig_h), internal_ICS_IP is the outbound destination (id.resp_h to an ICS asset), and ICS_Protocol is derived from the port.\n    *   Establish a 14-day rolling average and standard deviation for this triplet count metric.\n    *   Generate an alert if the current day's count exceeds the average by 3 standard deviations, or if it falls into the top 99.9th percentile of historical observations. Prioritize alerts where the internal ICS IP is categorized as a high-value asset.\n    *   This method identifies statistically anomalous relaying behavior.\n3. Machine Learning:\n    *   Develop a sequence prediction model (e.g., Hidden Markov Model or Recurrent Neural Network) trained on 60 days of historical Zeek conn.log data specifically for OT DMZ and Jump Server hosts.\n    *   The model should learn typical inbound-outbound connection sequences, associated protocols, and timing patterns.\n    *   Deploy the model to continuously analyze live connection sequences.\n    *   Alert on sequences that deviate significantly from learned normal patterns, specifically flagging instances where an external inbound connection is immediately followed by an unexpected ICS protocol connection to an internal asset (e.g., a protocol not previously observed in such a sequence or connection to an asset rarely contacted by the DMZ host), indicating a novel or malicious relay with a high anomaly score."
          },
          {
            "description": "A host exhibits network traffic consistent with C2 protocol tunneling, evidenced by specific anomalies within legitimate protocols (DNS, HTTP, ICMP), followed by subsequent new connections from that host to other internal ICS assets within 60 seconds. Anomalies include: DNS queries with length exceeding 64 characters or Shannon entropy > 4.0 bits/character, or unusually high byte counts for DNS queries/responses; HTTP traffic with non-standard methods, unusual user-agents (e.g., base64 encoded), or 'orig_bytes' for GET requests exceeding the 99th percentile of historical activity; or ICMP packets with unusually large 'uid' field values or 'orig_bytes' values deviating significantly from standard sizes.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek icmp.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS servers, hosts with direct or proxied internet access from the OT environment (e.g., Historians, Engineering Workstations), perimeter firewalls/proxies, and network segments where ICMP traffic is prevalent.",
            "action": "1. Symbolic Logic:\n    *   Create SIEM rules to flag Zeek dns.log entries where the 'query' field has a length exceeding 64 characters or an entropy score (calculated as Shannon entropy per character) above 4.0 bits/character, or matches known C2 domain generation algorithm (DGA) patterns.\n    *   For HTTP tunneling, monitor Zeek http.log for non-standard user-agents (e.g., base64 encoded strings), unusual HTTP methods (e.g., CONNECT to non-proxy ports), or 'orig_bytes' for GET requests exceeding the 99th percentile of historical activity.\n    *   For ICMP tunneling, monitor Zeek icmp.log for unusually large 'uid' field values or 'orig_bytes' values that deviate significantly from standard ICMP packet sizes.\n    *   Upon detection of any of these anomalies, immediately search Zeek conn.log for any new or unusual connections originating from the same source host (id.orig_h) to internal ICS assets within 60 seconds.\n    *   Additionally, query Windows Event ID 4688 on the source host for processes like powershell.exe, cmd.exe, rundll32.exe interacting with network resources around the same time.\n2. Statistical Method:\n    *   For each host, compute a 30-day rolling average and standard deviation for the daily total byte count of DNS queries and responses ('orig_bytes', 'resp_bytes' in dns.log). Alert if a host's daily total DNS bytes exceeds its average by 3 standard deviations, or if it falls into the top 99.9th percentile.\n    *   Concurrently, calculate the daily average Shannon entropy of DNS 'query' fields and alert if it exceeds the 99.5th percentile of the 30-day baseline.\n    *   For HTTP, calculate the entropy of 'uri' and 'user_agent' fields in http.log and alert on similar percentile deviations (e.g., >99.5th percentile).\n    *   For ICMP, calculate the 99th percentile of 'orig_bytes' and 'resp_bytes' in icmp.log and alert on values exceeding this threshold.\n    *   Correlate these anomalous events with subsequent internal connections from Zeek conn.log within a 60-second window to identify proxying behavior.\n3. Machine Learning:\n    *   Train a supervised machine learning classifier (e.g., Random Forest or XGBoost) on Zeek dns.log, http.log, and icmp.log features such as query/URI length, entropy, TLD distribution, presence of numeric/special characters, HTTP method/status codes, ICMP type/code, and packet sizes.\n    *   Label a diverse dataset including known C2 samples as 'normal' or 'tunneled/DGA'.\n    *   Deploy the trained model to continuously score live DNS, HTTP, and ICMP traffic.\n    *   When a high-confidence prediction for tunneling (e.g., model score > 0.95) is made for a host, immediately analyze Zeek conn.log for any new or unusual connections from that host to internal ICS assets that follow within 60 seconds, indicative of C2 un-tunneling and proxying.\n    *   The model should also provide feature importance to aid analyst investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]