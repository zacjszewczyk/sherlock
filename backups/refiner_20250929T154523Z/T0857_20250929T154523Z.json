[
  {
    "information_requirement": "Is an adversary attempting to inhibit response functions by modifying system firmware? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file transfer, with a size exceeding 2 standard deviations from the device-specific baseline firmware size (typically 5MB-50MB for ICS devices), identified as a firmware image (based on specific file extensions like .bin, .hex, .img, .fw, .pkg, recognized MIME types such as application/octet-stream or application/x-firmware, or magic bytes signature analysis for common firmware headers), is sent to a critical ICS device (e.g., PLC, RTU) over an unauthorized protocol (e.g., HTTP, SMB) or an expected protocol (e.g., FTP/21, TFTP/69, vendor-specific ports like 102 for Siemens or 44818 for Rockwell) from a source IP address not present in the authorized firmware update source list, or occurring outside of the predefined maintenance window (e.g., 08:00-17:00 M-F) for that device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek ftp.log",
              "Zeek tftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments hosting PLCs/RTUs, Network segments containing Engineering Workstations (EWS), Industrial Demilitarized Zone (IDMZ) for vendor remote access, Enterprise/ICS network boundary points.",
            "action": "1. Symbolic Logic (IOC): Identify all Zeek conn.log entries where the destination IP (id.resp_h) is a known critical ICS device and the destination port (id.resp_p) is a common firmware update port (e.g., 21, 69) or a vendor-specific port. Cross-reference the source IP (id.orig_h) with a predefined, approved list of EWS IPs, vendor jump box IPs, and authorized firmware update server IPs. Generate a high-priority alert if the source IP is not found on the approved list. Also, check Zeek files.log for file transfers to these ICS devices where the file extension or MIME type indicates a firmware file, and the protocol (proto in conn.log) is not an expected firmware update protocol. 2. Statistical Method: For each critical ICS device, establish a 90-day baseline of historical firmware update file sizes (seen_bytes in files.log) and transfer times (ts in conn.log). Calculate the mean and standard deviation for 'seen_bytes' and 'ts' for each device. For any detected firmware transfer, calculate the Z-score for 'seen_bytes' and 'ts'. Alert if the 'seen_bytes' Z-score exceeds 3 standard deviations or if the transfer time falls outside the 95th percentile of normal operational hours for that specific device. 3. Machine Learning: Train a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on the frequency and aggregated volume (bytes_orig + bytes_resp from conn.log) of firmware-like file transfers (identified by mime_type, file_extension, or magic bytes from files.log) to critical ICS devices. Use features like transfer duration, source-destination pairs, and time of day. Alert when the model identifies a significant deviation from the learned normal pattern, such as transfer volume spikes or transfers during previously inactive periods for that device, indicating an anomaly score exceeding the 99th percentile. This score should trigger an alert for analyst investigation."
          },
          {
            "description": "Execution of a known ICS vendor firmware update utility (e.g., 'Siemens_Tia_Updater.exe', 'Rockwell_Firmware_Tool.exe', 'Schneider_UnityPro_Loader.exe'), identified by its filename, cryptographic hash (MD5/SHA256 from file metadata), or valid digital signature status, on an Engineering Workstation (EWS) or Human-Machine Interface (HMI) by a user account not explicitly authorized for firmware maintenance (e.g., not a member of a 'Firmware Admins' Active Directory group), or occurring outside of a predefined, scheduled maintenance window (e.g., not between 08:00-17:00 M-F) for that specific device, or with command-line arguments indicating an unusual target or update type.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Active Directory security logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the PCN, Human-Machine Interfaces (HMIs) in the PCN, Active Directory domain controllers, Identity Management servers.",
            "action": "1. Symbolic Logic (IOC): Maintain a centralized watchlist of known ICS vendor firmware update executable names, their corresponding MD5/SHA256 hashes, and expected digital publisher names. Monitor Windows Event ID 4688 (Process Creation) on all EWS and HMIs for matches in 'New Process Name', 'New Process Command Line', 'Process Hash', or 'Signature Information'. Immediately alert on any match where the executable's hash is not on the approved list or its digital signature is invalid. Additionally, correlate the 'TargetUserName' from Windows Event ID 4624 (Logon) with the user account executing the process in Event ID 4688, then check if this user is a member of an authorized 'Firmware Admins' or similar Active Directory group. 2. Statistical Method: For each EWS/HMI and user, establish a 180-day baseline of typical execution times (Event Creation Time) and frequency for firmware update utilities using historical Windows Event ID 4688 data. Calculate the 95th percentile for execution times and the mean frequency. Flag any execution occurring outside this percentile. Additionally, calculate the historical frequency of update utility usage per user (Security ID in Event 4688). Flag executions by users who are in the lowest 5th percentile of historical usage for that utility, have no prior history of executing it, or if the execution frequency for a given user/device significantly deviates (e.g., >3 standard deviations) from their baseline. 3. Machine Learning: Implement a User and Entity Behavior Analytics (UEBA) model (e.g., using clustering or classification algorithms like K-Means or Random Forest) that profiles normal process execution patterns for each EWS/HMI and user account. This model should consider factors like process parent-child relationships (ParentProcessName, ProcessName in Event 4688), command-line arguments (CommandLine in Event 4688), execution frequency, and typical execution duration. Alert when the model identifies an execution of a firmware update utility that significantly deviates from the established behavioral baseline for that specific user or workstation, indicating an anomalous activity score (e.g., exceeding the 99th percentile of historical anomaly scores), prompting further investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary establishing persistence by implanting malicious system firmware? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A critical ICS device (PLC, RTU) exhibits a statistically significant change in communication patterns (e.g., a >30% increase/decrease in data volume (bytes_orig/bytes_resp), appearance of a new destination IP (id.resp_h) not seen in the last 90 days, observation of a new protocol (proto) or service (service) not typically associated with the device, or a change in connection frequency (number of connections per minute) by >2 standard deviations) within 60 minutes following a detected or suspected firmware transfer event to that device. This includes new or unusual DNS queries (query in dns.log) or HTTP requests (uri, host in http.log).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments containing critical controllers (PLCs/RTUs), Network egress points from the Process Control Network (PCN), Industrial Demilitarized Zone (IDMZ) gateways, Enterprise network proxy servers.",
            "action": "1. Symbolic Logic (IOC): After a detected or suspected firmware update event for a specific ICS device (identified by id.resp_h from conn.log or the target of a file transfer), monitor Zeek conn.log, dns.log, and http.log for that device for new outbound connections to known malicious C2 IP addresses or domains from current threat intelligence feeds within the subsequent 60 minutes. Alert immediately if a match is found. Additionally, check for connections to non-standard or unexpected ports (id.resp_p) for that device that are not on an approved port list. 2. Statistical Method: For each critical ICS asset, establish a 90-day baseline of its normal communication patterns from Zeek conn.log, including destination IPs, ports/protocols, connection duration, and data volume (bytes_orig, bytes_resp) aggregated hourly. After a detected firmware update, calculate the Z-score for the subsequent 60 minutes of communication metrics. Alert if any metric (e.g., unique destination IPs, total bytes, connection count) exceeds 3 standard deviations from its baseline. Additionally, calculate the Shannon entropy of destination ports and protocols used by the device; alert on a significant increase (e.g., >25%) in entropy compared to the device's historical baseline, which could indicate new, varied communication. 3. Machine Learning: Deploy a time-series anomaly detection model (e.g., LSTM autoencoder or ARIMA) on the aggregated communication metrics (e.g., bytes_orig/second, connections/second, unique destination IPs/second, unique protocols/second) for each critical ICS device. This model should be trained on historical Zeek conn.log, dns.log, and http.log data. After a firmware update, run the real-time communication data through the model and alert on any significant anomaly scores (e.g., exceeding the 99th percentile of historical anomaly scores) within the post-update observation window, indicating a potential compromise."
          },
          {
            "description": "A file identified as a firmware image (based on specific file extensions like .bin, .hex, .img, .fw, .pkg, recognized MIME types such as application/octet-stream or application/x-firmware, or magic bytes signature analysis) is transferred over the network, and its cryptographic hash (MD5, SHA256 from files.log) does not exactly match any known-good, approved firmware versions for the target device maintained in the central firmware repository, or it matches a hash on a known-malicious firmware blacklist. This includes firmware images found on network file shares or host endpoints (via file integrity monitoring logs).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, Engineering Workstations (EWS), Centralized firmware management servers/repositories, Network File Shares in the PCN, File integrity monitoring systems.",
            "action": "1. Symbolic Logic (IOC): Maintain a central database of cryptographic hashes (MD5/SHA256) for all approved firmware versions for every ICS device, meticulously linked to the device model, firmware version, and manufacturer. When Zeek files.log identifies a file transfer with a MIME type or extension associated with firmware, extract its hash (md5 or sha256 field). Perform an exact match lookup against the approved firmware database for the specific target device's model. Generate a high-severity alert if the hash is not found or if it matches an entry on a known-malicious firmware hash blacklist. 2. Statistical Method: For each ICS device type and model, establish a baseline of the typical frequency of firmware updates over the last year. Use Zeek files.log to track firmware transfers to specific target devices (fuid and tx_hosts fields). If an unknown firmware hash is detected for a device, calculate the current update frequency for that device over the past 30 days. If the current frequency is significantly higher (e.g., >95th percentile for that device type and model) than the baseline, escalate the alert severity, as this might indicate repeated attempts or malicious re-flashing. 3. Machine Learning: Develop a binary classification model (e.g., Random Forest or SVM) trained on metadata from Zeek files.log (e.g., total_bytes, mime_type, file_extension, source_port, destination_port from conn.log via fuid, and transfer duration) to classify files as 'likely legitimate firmware' or 'potentially malicious/unauthorized firmware'. For files classified as 'potentially malicious/unauthorized firmware,' extract the hash and automatically compare it against the approved/blacklisted hash databases. This model helps catch obfuscated or unknown firmware formats that bypass simple rule-based identification by analyzing file characteristics and transfer anomalies."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]