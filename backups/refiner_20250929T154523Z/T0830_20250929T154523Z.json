[
  {
    "information_requirement": "Has the adversary established an Adversary-in-the-Middle (AiTM) position to intercept or manipulate ICS network communications? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0830",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "Detection of multiple distinct IP addresses (e.g., three or more) being associated with a single MAC address within a 60-second period, as recorded in Zeek arp.log or Zeek conn.log. Alternatively, the IP address of a critical ICS asset (e.g., PLC, HMI, EWS, SCADA server) is observed resolving to an unexpected MAC address that is not part of its established, known-good IP-to-MAC baseline. Further, rapid and repeated changes (e.g., exceeding five changes within a five-minute interval) in the MAC address associated with a critical ICS IP are observed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek arp.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) switches, managed industrial switches, network taps/sensors within the PCN, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Domain Controllers (if part of PCN authentication).",
            "action": "1. Baseline Creation: From Zeek arp.log and Zeek conn.log, establish a baseline of expected IP-to-MAC address mappings for all critical ICS assets (e.g., PLCs, HMIs, EWS, SCADA servers) over a 7-day period. Store these as known-good mappings, including the associated network segment. For Windows Event ID 4688, identify and baseline typical command-line activity on EWS and HMIs. 2. Symbolic Logic (Rule-based): Continuously monitor Zeek arp.log and Zeek conn.log for any observed IP-to-MAC mapping for a critical ICS asset that deviates from its established baseline, generating a high-priority alert. Specifically, alert if an ARP reply or connection log entry indicates a critical ICS IP resolving to a MAC address not previously baselined for that IP. Additionally, monitor Windows Event ID 4688 on EWS and HMIs for command-line executions containing 'arp -s', 'arp -d', 'netsh interface ip add neighbors', or 'netsh interface ip delete neighbors' followed by a critical ICS IP address, and alert on detection of these commands not aligned with scheduled maintenance. 3. Statistical Method (Anomaly/Threshold): For Zeek arp.log entries, calculate the number of unique IP addresses associated with each MAC address over a rolling 5-minute window. Alert if any single MAC address is associated with more than 3 unique IP addresses, or if this count exceeds the 99th percentile of normal network behavior observed in the ICS segment. For critical ICS assets, track the rate of MAC address changes associated with their static IP. Alert if a critical IP's MAC address changes more than 3 times within a 5-minute period, or if the change rate exceeds 3 standard deviations from the historical average for that specific asset. 4. Machine Learning (Clustering/Time-Series Anomaly): Apply a clustering algorithm (e.g., K-means or DBSCAN) to Zeek arp.log and Zeek conn.log entries, using features such as source/destination MAC, IP, ARP opcode (request/reply), and network segment to identify clusters representing known good communication patterns and asset affiliations. Flag connections or ARP events that fall outside these clusters as anomalous. Utilize a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on the rate of ARP requests and gratuitous ARP messages for critical ICS IPs, specifically looking for sudden, significant spikes (e.g., exceeding the 99th percentile of historical rates) indicative of poisoning attempts."
          },
          {
            "description": "Network flow records (Zeek conn.log) reveal a communication session originating from a critical ICS asset (e.g., PLC, RTU, HMI, SCADA server) where traffic is routed through an unexpected intermediate IP address. This intermediate IP acts as an unauthorized proxy, forwarding traffic between the critical ICS source and its intended destination, where a direct connection is expected. Specifically, a connection sequence of 'source_ip -> intermediate_ip' immediately followed by 'intermediate_ip -> destination_ip' is observed, where 'destination_ip' was the anticipated direct peer of 'source_ip', and 'intermediate_ip' is not part of the established baseline of direct communication paths or explicitly permitted proxies for that source-destination pair.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network backbone switches within the PCN, firewalls/routers at PCN-DMZ/Enterprise boundaries, SCADA servers, Historian servers, network taps/sensors deployed at critical communication choke points.",
            "action": "1. Baseline Creation: For all critical ICS communication pairs (e.g., PLC-to-HMI, EWS-to-PLC, SCADA-to-Historian), establish a baseline of expected direct 'src_ip -> dst_ip' paths from Zeek conn.log over a 30-day period. This baseline should identify all legitimate direct communication peers. Additionally, identify and baseline any legitimate proxies or gateways within the ICS network. 2. Symbolic Logic (Rule-based): Continuously analyze Zeek conn.log for sequences of connections where a 'src_ip_A -> intermediate_ip' connection is immediately followed by 'intermediate_ip -> dst_ip_B', and 'src_ip_A' was expected to communicate directly with 'dst_ip_B'. Generate a high-priority alert if 'intermediate_ip' is not present in the established baseline of direct communication paths or known legitimate proxies for the 'src_ip_A' to 'dst_ip_B' pair. Additionally, monitor Zeek http.log and Zeek ssl.log for connections originating from critical ICS assets where the 'proxy_host' or 'server_name' fields indicate an unexpected proxy or server that is not part of the baselined legitimate proxy list. 3. Statistical Method (Threshold/Percentile): For each critical ICS source-destination pair, calculate the number of unique intermediate IP addresses observed in their communication paths (as defined by the sequential connection analysis) over a 1-hour rolling window. Alert if this count is greater than zero for pairs expected to have direct communication, or if the count exceeds the 99th percentile of historical intermediary counts for that specific pair. Furthermore, calculate the percentage of total traffic volume (e.g., bytes or connections) between a critical source-destination pair that flows through a newly detected intermediate IP. Alert if this percentage exceeds a predefined threshold (e.g., 5% of total volume) within a 15-minute window or if it deviates by more than 3 standard deviations from the historical average for that specific communication channel. 4. Machine Learning (Graph Anomaly): Construct a dynamic graph of ICS network communications from Zeek conn.log where nodes represent IP addresses and edges represent connections. Utilize a graph neural network (GNN) or a graph-based anomaly detection algorithm (e.g., NetWalk, Node2vec with anomaly detection) to identify sudden structural changes, such as the insertion of new intermediary nodes in established direct communication paths for critical ICS assets. Train the model on baselined direct communication patterns and legitimate proxies to detect deviations indicative of AiTM."
          },
          {
            "description": "Observed Zeek ssl.log and Zeek x509.log entries for encrypted communication involving critical ICS assets (e.g., SCADA servers, HMIs, EWS, Historian servers) reveal anomalies in TLS/SSL certificates. These anomalies include a 'validation_status' other than 'ok' (e.g., 'self_signed', 'expired', 'revoked', 'unknown CA'), the 'self_signed' field being true when a trusted CA-signed certificate is expected, or a certificate 'fingerprint', 'subject', 'issuer', or 'serial' number that does not match the established baseline of known-good certificates for that specific communication channel or critical asset.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/sensors at the perimeter of the PCN, network gateways, SCADA servers, Historian servers, remote access VPN concentrators, Engineering Workstations (EWS) that establish encrypted sessions.",
            "action": "1. Baseline Creation: Over a 30-day period, establish a comprehensive baseline of 'certificate_fingerprint', 'subject', 'issuer', 'serial', 'validation_status', 'key_type', 'key_length', and 'basic_constraints_ca' for all encrypted traffic involving critical ICS assets from Zeek x509.log and Zeek ssl.log. Store these as known-good certificate profiles for specific source-destination pairs or critical assets. This baseline should distinguish between legitimately self-signed certificates (e.g., for internal devices) and those expected to be CA-signed. 2. Symbolic Logic (Rule-based): Continuously monitor Zeek x509.log and Zeek ssl.log. Generate a high-priority alert for any certificate used in critical ICS communications where the 'validation_status' is not 'ok' (e.g., 'expired', 'revoked', 'unknown'). Alert immediately if 'self_signed' is true for any certificate used by a critical ICS asset where a trusted CA-signed certificate is expected based on the baseline. Additionally, alert if a 'certificate_fingerprint', 'subject', 'issuer', or 'serial' for a critical ICS communication path deviates from its established baseline, indicating an unexpected certificate. 3. Statistical Method (Entropy/Frequency): Calculate the Shannon entropy of the 'subject' and 'issuer' fields for all certificates observed in ICS traffic within a rolling 24-hour window. Alert if the entropy score for a certificate exceeds the 99th percentile of historically observed entropy scores for that communication channel, which may indicate randomly generated or highly variable malicious certificate data. Track the frequency of 'validation_status' errors (non-'ok' statuses); alert if the number of such errors for a specific critical communication channel exceeds a threshold (e.g., 5 events in 1 hour) or if this count significantly deviates (e.g., more than 3 standard deviations) from its historical average for that channel. 4. Machine Learning (Classification/Anomaly): Train a supervised classification model (e.g., Random Forest or XGBoost) using features from Zeek x509.log (e.g., 'key_type', 'key_length', 'exponent', 'basic_constraints_ca', 'ext_key_usage', 'validation_status') to classify certificates as 'benign' or 'malicious/anomalous'. Flag newly observed certificates that are classified as 'malicious' with high confidence. Alternatively, apply an unsupervised anomaly detection algorithm (e.g., One-Class SVM or Autoencoder) to the vectorized features of certificates observed in ICS traffic, specifically looking for certificates identified as outliers that represent previously unseen or subtly altered malicious certificates, especially those appearing in critical ICS communication paths."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]