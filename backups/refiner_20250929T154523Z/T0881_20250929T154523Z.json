[
  {
    "information_requirement": "Is the adversary attempting to inhibit our response functions by stopping critical ICS services? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0881",
        "name": "Service Stop",
        "evidence": [
          {
            "description": "A Windows Event ID 4688 (Process Creation) record where the CommandLine field contains 'sc stop', 'net stop', or 'Stop-Service', explicitly targeting a service identified as critical to ICS operations. This event is observed on the same host, within a 15-second window, prior to a corresponding Windows Event ID 7036 (Service Status Change) indicating the targeted service has transitioned to a 'stopped' state.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Domain Controllers, Jump Servers in OT/DMZ",
            "action": "1. Symbolic Logic:\na. Establish a watchlist of ICS_CRITICAL_SERVICES containing exact service names (e.g., 'Rockwell FactoryTalk Linx', 'OSIsoft PI Data Archive', 'Wonderware Historian').\nb. Search for Windows Event ID 4688 (Process Creation) where the CommandLine field contains 'sc stop', 'net stop', or 'Stop-Service' and explicitly references a service name present in ICS_CRITICAL_SERVICES.\nc. On the same host where step 'b' occurred, search for Windows Event ID 7036 (Service Status Change) within 15 seconds after the Event ID 4688, where Service_Name matches the service from ICS_CRITICAL_SERVICES and Service_Status is 'stopped'.\nd. If a correlated sequence of events (Event ID 4688 followed by Event ID 7036) is found without an associated, approved change management ticket, generate a high-severity alert. The alert should include Host_ID, Service_Name, Initiating_User, CommandLine from Event ID 4688, and Timestamp of both events.\n2. Statistical Method:\na. For each critical OT host, establish a 90-day historical baseline of Windows Event ID 7036 (Service Status Change) events for services in ICS_CRITICAL_SERVICES where Service_Status is 'stopped'. Record Service_Name, TimeCreated, and Host_ID.\nb. Calculate the mean and standard deviation of service stop occurrences for each service, aggregated by Host_ID, Service_Name, Time_of_Day (e.g., hourly buckets), and Day_of_Week.\nc. For new Event ID 7036 records indicating a service stop, compare the Time_of_Day and Day_of_Week against the established baseline. Flag events where the occurrence count for that specific service, host, time, and day exceeds the mean by 2.5 standard deviations.\nd. Additionally, correlate Event ID 4688 (Process Creation) events containing service stop commands (as in step 1b) with subsequent Event ID 7036 on the same host, within a 60-second window. Apply the same statistical deviation analysis (2.5 standard deviations from the mean for frequency/timing) to these correlated sequences.\ne. Generate a medium-severity alert for any flagged event or correlated sequence, including the deviation score and relevant event details.\n3. Machine Learning Application:\na. Train an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) on 180 days of historical Windows Event ID 7036 (Service Status Change) data for critical ICS services on each host, focusing on Service_Name, Service_Status (specifically 'stopped'), Host_ID, Time_of_Day, and Day_of_Week.\nb. The model should learn normal patterns of service stop events, including expected frequencies and timing.\nc. For each new Event ID 7036 indicating a service stop, feed relevant features into the trained model to generate an anomaly score.\nd. Simultaneously, train a text classification model (e.g., TF-IDF with Logistic Regression or Naive Bayes) on historical CommandLine arguments from Windows Event ID 4688 events related to service control. This model should identify CommandLine arguments that are anomalous or indicative of service manipulation.\ne. Generate a high-severity alert when a service stop event (Event ID 7036) receives an anomaly score exceeding the 99th percentile of historical scores, OR when an Event ID 4688 containing a service stop command is classified as anomalous by the text classification model. Alerts should include the anomaly score, Host_ID, Service_Name, CommandLine (if applicable), and TimeCreated."
          },
          {
            "description": "A critical ICS service enters a 'stopped' state (Windows Event ID 7036) on a host, preceded within a 5-minute window by one or more inbound network connections (Zeek conn.log) to that same host. These preceding network connections exhibit attributes (e.g., id.orig_h, id.resp_p, proto, orig_bytes, resp_bytes) that significantly deviate from the host's established historical network communication profile.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT Network Segments, DMZ between IT/OT, Critical Control System Hosts (e.g., EWS, HMIs), Network Intrusion Detection Systems (NIDS) deployed in OT",
            "action": "1. Symbolic Logic:\na. Establish a watchlist of ICS_CRITICAL_SERVICES and a list of UNTRUSTED_NETWORK_SEGMENTS (e.g., IT network, external IPs, non-ICS subnets) and RESTRICTED_OT_PORTS (e.g., 3389/RDP, 445/SMB, 5985/WinRM).\nb. Search for Windows Event ID 7036 (Service Status Change) where Service_Name is in ICS_CRITICAL_SERVICES and Service_Status is 'stopped'.\nc. For each such service stop event, query Zeek conn.log for inbound conn records (id.resp_h matches the affected host's IP) within the 5 minutes preceding the service stop TimeCreated.\nd. Filter these Zeek conn records where id.orig_h falls within UNTRUSTED_NETWORK_SEGMENTS OR id.resp_p is present in RESTRICTED_OT_PORTS.\ne. If such a correlated network connection and service stop event sequence is identified, generate a high-severity alert. The alert should include Host_ID, Service_Name, Source_IP (id.orig_h), Destination_Port (id.resp_p), Protocol (proto), and Timestamp of both events.\n2. Statistical Method:\na. For each critical OT host, establish a 30-day statistical baseline of inbound Zeek conn.log attributes: id.orig_h (source IP), id.resp_p (destination port), proto (protocol), orig_bytes, and resp_bytes.\nb. Calculate the frequency distribution for id.orig_h, id.resp_p, and proto. For orig_bytes and resp_bytes, calculate the 95th and 99th percentiles.\nc. When a critical service stop (Windows Event ID 7036) occurs, retrieve all inbound Zeek conn.log entries for the affected host within the preceding 5 minutes.\nd. For each retrieved connection, calculate a 'deviation score' based on the baseline:\ni. Assign points if id.orig_h is new (not seen in the last 30 days) or has a very low frequency (e.g., bottom 1% of historical id.orig_h frequencies).\nii. Assign points if id.resp_p is unusual (not in the top 10 most frequent ports) or has a very low frequency.\niii. Assign points if proto is unusual (not in the top 5 most frequent protocols).\niv. Assign points if orig_bytes or resp_bytes exceed the 99th percentile.\ne. Sum the points for each connection. If the cumulative deviation score for any single connection or a cluster of connections exceeds a predefined threshold (e.g., a score indicating 3 or more metrics are highly anomalous), generate a medium-severity alert. The alert should include Host_ID, Service_Name, Source_IP, Destination_Port, Protocol, Deviation_Score, and Timestamp.\n3. Machine Learning Application:\na. Train an unsupervised anomaly detection model (e.g., Isolation Forest, Autoencoder) on 60 days of historical Zeek conn.log data for each critical OT host, using features such as id.orig_h, id.resp_p, proto, orig_bytes, resp_bytes, and duration.\nb. The model should learn the 'normal' patterns of inbound network connections to the host, identifying deviations from these patterns as anomalous.\nc. When a critical service stop (Windows Event ID 7036) is detected, retrieve all inbound Zeek conn.log records to the affected host within the preceding 5 minutes.\nd. For each of these preceding connection records, use the trained anomaly detection model to generate an anomaly score.\ne. If any of these preceding connections receive an anomaly score exceeding a predefined threshold (e.g., the 99.5th percentile of anomaly scores observed during training), generate a high-severity alert. This suggests a potentially malicious network connection preceding the service stop. The alert should include Host_ID, Service_Name, Source_IP, Destination_Port, Protocol, Anomaly_Score, and Timestamp of the network connection and service stop."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]