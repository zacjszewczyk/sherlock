[
  {
    "information_requirement": "Is an adversary using trusted host or application binaries to execute malicious commands or payloads on ICS systems? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0894",
        "name": "System Binary Proxy Execution",
        "evidence": [
          {
            "description": "Execution of a whitelisted ICS application binary or a standard Windows system binary (e.g., `svchost.exe`, `rundll32.exe`, `wscript.exe`, `cscript.exe`) with command-line arguments (from Windows Event ID 4688 `CommandLine` field) that contain specific suspicious keywords (e.g., 'powershell', 'cmd.exe /c', 'mshta', 'regsvr32'), base64 encoded strings, unexpected network paths (e.g., `\\\\unc\\path` to external/untrusted shares, `http://` or `https://` URLs), or exhibit a Shannon entropy score greater than 4.5 bits/character, indicating obfuscation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the Control Network, Human-Machine Interfaces (HMIs) directly connected to PLCs, SCADA Servers, Historian Servers, Data Gateways within the OT network, and Jump Hosts for remote OT access.",
            "action": "1. Symbolic Logic (IOC Match & Whitelist): Create a dynamic watchlist of known suspicious command-line keywords (e.g., 'powershell.exe -enc', 'cmd.exe /c', 'mshta.exe', 'regsvr32.exe /s /i:', 'rundll32.exe javascript:') and untrusted network path patterns (`\\\\<external_ip>`, `http://`, `https://`) specifically tailored for ICS environments. Query all Windows Event ID 4688 logs from identified OT assets. Filter these logs to focus on whitelisted ICS application binaries and common system utilities (e.g., `svchost.exe`, `rundll32.exe`, `wscript.exe`, `cscript.exe`). Generate an alert if the `CommandLine` field for any of these whitelisted processes contains a match from the suspicious keyword or pattern watchlist.\n2. Statistical Method (Percentile/Entropy): For each unique whitelisted trusted ICS application binary or system utility (e.g., `svchost.exe`, `rundll32.exe`), establish a baseline of command-line argument length and Shannon entropy (bits/character) over a 30-day period using Windows Event ID 4688 data. Calculate the 99th percentile for both metrics for each unique process. For all new process creations, calculate the current command-line length and entropy. Generate an alert if either the command-line length or the entropy for a process exceeds its respective 99th percentile threshold, particularly for processes historically exhibiting low entropy or short command lines (e.g., `svchost.exe` spawning with a high-entropy command line).\n3. Machine Learning (Classification/Anomaly Detection): Develop and train a text classification model (e.g., using TF-IDF or word embeddings with a Logistic Regression or SVM classifier) on a dataset of known benign and malicious ICS command-line arguments. Apply this model to the `CommandLine` field of new Windows Event ID 4688 entries from trusted binaries. Alert on classifications indicating a high probability of maliciousness. Alternatively, implement a time-series anomaly detection algorithm (e.g., Isolation Forest or ARIMA) on the daily count of unique command-line arguments or the average entropy for specific trusted binaries, and alert on statistically significant anomalies."
          },
          {
            "description": "A whitelisted ICS application binary or a standard Windows system binary (e.g., `services.exe`, `svchost.exe`, `WmiPrvSE.exe`) establishes an outbound network connection. This connection is identified by correlating `ProcessId` from Windows Event ID 4688 with `id.orig_h` (source IP) and `ts` (timestamp) from Zeek conn.log. The connection targets an IP address external to the OT/IT network, a known malicious IP (IOC), or utilizes an unexpected application-layer protocol (e.g., HTTP/S, FTP, SMB, DNS tunneling) for that specific process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (e.g., Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), SCADA Firewalls, Internet Gateway Proxies, and Historian Network Zones.",
            "action": "1. Symbolic Logic (IOC Match & Whitelist): Maintain a whitelist of approved destination IP ranges and expected application-layer protocols for critical ICS application binaries and essential Windows system services. Correlate `ProcessId` from Windows Event ID 4688 (Process Creation) with `id.orig_h` (source IP) and `ts` (timestamp) from Zeek conn.log entries to attribute network connections to specific processes. Generate an immediate alert on any connection initiated by a whitelisted ICS process to an IP address outside the approved ranges or using a protocol not on its whitelist (e.g., `HMI.exe` connecting to an external IP on port 80/443, or `PLC_Config.exe` using SMB). Additionally, cross-reference destination IPs and domains from Zeek conn.log and dns.log against active threat intelligence feeds for known malicious IPs/domains and alert on matches.\n2. Statistical Method (Frequency/Percentile): For each critical ICS application process, establish a baseline of its normal network connection count, unique destination IPs, and data volume (bytes_orig, bytes_resp) over a 30-day period using Zeek conn.log data. Calculate the 99th percentile for these metrics. Monitor for instances where an ICS process's network activity (e.g., number of connections, data volume) significantly exceeds its historical 99th percentile, indicating unusual data exfiltration or command and control activity. Utilize Zeek dns.log to identify DNS queries originating from ICS hosts to domains with low reputation scores or domains that are newly observed (e.g., less than 30 days old) within the environment, flagging these for further investigation.\n3. Machine Learning (Anomaly Detection/Classification): Train an unsupervised network traffic anomaly detection model (e.g., an Isolation Forest or a one-class SVM) on Zeek conn.log data, specifically focusing on source-destination IP pairs, destination ports, and protocol distributions for traffic originating from ICS hosts. Apply this model to real-time network flow data to identify significant deviations from established normal communication patterns. Alternatively, develop a supervised classification model to categorize DNS queries (from Zeek dns.log) as benign or malicious based on features like domain name length, TLD, Shannon entropy of the domain name, and historical query frequency, alerting on high-confidence malicious classifications."
          },
          {
            "description": "A whitelisted parent process, specifically a trusted ICS application binary or a critical Windows system binary (e.g., `services.exe`, `svchost.exe`, `lsass.exe`), creates a child process that is not part of its established legitimate execution chain. This anomaly is identified via Windows Event ID 4688 where the `ParentProcessName` and `NewProcessName` fields indicate an unexpected relationship, such as spawning command shells (e.g., `cmd.exe`, `powershell.exe`), script interpreters (e.g., `wscript.exe`, `cscript.exe`), or other known suspicious executables (e.g., `mshta.exe`, `bitsadmin.exe`, `PsExec.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts, and Domain Controllers within the OT network.",
            "action": "1. Symbolic Logic (Whitelist & Blacklist): Establish a comprehensive whitelist of approved parent-child process relationships for all critical ICS application binaries and key Windows system processes (e.g., `services.exe`, `svchost.exe`) based on known good system behavior within the OT environment. Concurrently, create a blacklist of highly suspicious child processes (e.g., `cmd.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`, `mshta.exe`, `bitsadmin.exe`, `PsExec.exe`) when spawned by non-standard or unexpected parent processes. Query Windows Event ID 4688 (Process Creation) logs and generate an immediate alert when a whitelisted ICS parent process spawns a child process that is on the blacklist, or when an unapproved child process is created by a trusted parent.\n2. Statistical Method (Frequency/Rarity): Over a 60-day period, calculate the frequency of all unique parent-child process combinations using the `ParentProcessName` and `NewProcessName` fields from Windows Event ID 4688 logs across the ICS environment. Identify the least common (e.g., bottom 5th percentile) parent-child relationships. For any new process creation event, compare its parent-child pair against this baseline. Generate an alert if a trusted ICS binary or system process spawns a child process combination that falls into the lowest percentile of observed frequency, or if a completely new, previously unobserved parent-child relationship emerges, especially if the child is an executable typically associated with malicious activity.\n3. Machine Learning (Graph Anomaly Detection): Construct a dynamic graph representing parent-child process relationships from Windows Event ID 4688 data, where nodes are processes and directed edges represent spawning events. Apply a graph-based anomaly detection algorithm (e.g., a Graph Neural Network or PageRank with anomaly scoring) to identify unusual patterns or deviations in the process execution graph for trusted binaries. For example, detect sudden expansions in a process tree from a single trusted parent, or a trusted binary becoming a parent to an unusually high number of diverse child processes, which could indicate a compromised execution chain or proxy execution."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]