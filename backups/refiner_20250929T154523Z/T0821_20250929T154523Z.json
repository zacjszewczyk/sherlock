[
  {
    "information_requirement": "Has an adversary modified the execution flow or tasking of an ICS controller? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0821",
        "name": "Modify Controller Tasking",
        "evidence": [
          {
            "description": "The presence of specific ICS protocol function codes (e.g., S7comm 'Download block' (0x1A), 'Start/Stop program' (0x1C); Modbus 'Write Multiple Registers' (0x10); EtherNet/IP 'Write Tag' (0x4B)) within Zeek s7comm.log, modbus.log, or enip.log, where the initiating source IP address is not present on an authorized Engineering Workstation (EWS) whitelist, or the activity occurs outside of documented operational schedules or maintenance windows.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments within the Process Control Network (PCN) where Engineering Workstations communicate directly with Programmable Logic Controllers (PLCs) and Distributed Control Systems (DCS).",
            "action": "1. Symbolic Logic (IOC Match): Configure SIEM rules to detect specific function codes within Zeek ICS protocol logs (e.g., s7comm.log for S7comm 'Download block' (0x1A), 'Start/Stop program' (0x1C), 'Write variable' (0x1D); modbus.log for 'Write Multiple Registers' (0x10), 'Write Multiple Coils' (0x0F); enip.log for 'Write Tag' (0x4B)). Establish a whitelist of authorized source IP addresses for Engineering Workstations (EWS) and authorized destination controller IP addresses. Generate an alert if any of these function codes are observed originating from an IP not on the EWS whitelist, or if the destination controller IP is not typically associated with programming activity (e.g., a critical production PLC without recent change management approval). Enrich alerts with Zeek conn.log for source/destination ports and service details.\n2. Statistical Method (Frequency Anomaly): Establish a 90-day historical baseline for the count of ICS program modification function codes (as defined in Symbolic Logic) per source EWS IP address and destination controller IP address, segmented by hour of day and day of week. Calculate the mean (\u03bc) and standard deviation (\u03c3) for the frequency of these commands during specific operational shifts or maintenance windows. Implement a detection that flags any instance where the observed frequency of these commands for a given EWS-controller pair, in a specific time window, exceeds \u03bc + (3 * \u03c3). This identifies statistically significant deviations from normal programming activity. Correlate with Zeek conn.log to identify unusual connection durations or byte transfers.\n3. Machine Learning (Time-Series Anomaly Detection): Deploy a time-series anomaly detection model (e.g., ARIMA, Prophet, or Isolation Forest) on aggregated counts of ICS program modification function codes (from s7comm.log, modbus.log, enip.log) per controller over 15-minute intervals. Train the model on 60-90 days of historical data representing normal operational and maintenance periods. Configure the model to generate an anomaly score. Trigger an alert when the anomaly score for a specific controller exceeds the 99th percentile of historical anomaly scores, indicating an unexpected surge or change in program modification activity. Enrich alerts by correlating with Zeek conn.log to identify the source IP and Zeek notice.log for any related policy violations, and reference change management records."
          },
          {
            "description": "A Windows Event ID 4688 (Process Creation) record on an Engineering Workstation (EWS) indicating the execution of a known ICS engineering software executable (e.g., TIA Portal.exe, Studio 5000.exe), where the initiating user account is not on an authorized whitelist, the execution timestamp falls outside established operational hours, or the parent process is suspicious (e.g., cmd.exe, powershell.exe). This is corroborated by anomalous Windows Event ID 4624 (Successful Logon) patterns or Zeek conn.log entries showing outbound connections from the EWS to ICS controller IP addresses within a short timeframe.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Dedicated Engineering Workstations (EWS) within the ICS network.",
            "action": "1. Symbolic Logic (Whitelist/Blacklist): Configure SIEM rules to monitor Windows Event ID 4688 (Process Creation) on EWS for specific ICS engineering software executables (e.g., TIA Portal.exe, Studio 5000.exe, Unity Pro.exe, Step7.exe). Create a whitelist of authorized user SIDs (from Windows Event ID 4624 and 4672) permitted to execute these applications on each EWS. Additionally, create a blacklist of suspicious parent processes (e.g., cmd.exe, powershell.exe, mshta.exe). Generate an alert if an ICS engineering software process is executed by a user not on the whitelist, or if its parent process is on the blacklist. Enrich alerts with Zeek conn.log for any immediate outbound connections to ICS controller IPs.\n2. Statistical Method (Time-Based Anomaly): For each authorized user on each EWS, establish a 60-day historical baseline of their typical login times (Windows Event ID 4624) and ICS engineering software execution times (Windows Event ID 4688). Calculate the 5th and 95th percentiles for the start and end times of these activities. Generate an alert if an ICS engineering software process is executed by an authorized user, but the execution time falls outside their established 5th-95th percentile window (e.g., a user who normally works 08:00-17:00 executes TIA Portal.exe at 02:00). Prioritize alerts where this temporal anomaly correlates with Zeek conn.log showing new or unusual connections to ICS controller IPs within a 5-minute window.\n3. Machine Learning (User Behavior Analytics - UBA): Implement a UBA model (e.g., Isolation Forest or K-Means Clustering on feature vectors) that profiles normal activity for each authorized user on each EWS, using features derived from Windows Event ID 4624 (login patterns, source workstations), Windows Event ID 4688 (frequently executed applications, process lineage), and Zeek conn.log (typical network destinations, data volume). Train the model on 90 days of historical data. The model should calculate a deviation score from the user's established baseline. Generate an alert when a user's activity (e.g., executing Studio 5000.exe from an unusual workstation, followed by an outbound connection to a critical PLC at an atypical time) results in a deviation score exceeding a predefined threshold (e.g., top 1% of historical scores), indicating a potential compromised account or insider threat."
          },
          {
            "description": "A verifiable discrepancy between the current configuration of an ICS controller and its established baseline, specifically the addition of new tasks, modification of task properties (interval, frequency, priority), or altered program associations. This discrepancy is identified via: 1) A mismatch in cryptographic hashes between polled controller configuration data and a known-good baseline. 2) The presence of explicit configuration change messages (e.g., S7comm 'Write block' (0x19), 'Download block' (0x1A), 'Write System Data' (0x28)) within Zeek s7comm.log, modbus.log, or enip.log, indicating modifications to controller task lists or program organization unit (POU) associations.",
            "data_sources": [
              "Zeek s7comm.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Controller internal logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directly on Programmable Logic Controllers (PLCs) and Distributed Control Systems (DCS) themselves, or the network segments facilitating their communication for configuration polling.",
            "action": "1. Symbolic Logic (Baseline Deviation): Implement a script or configuration management tool to periodically (e.g., hourly) query critical ICS controllers (PLCs, DCS) via their native protocols (e.g., S7comm 'Read Block' (0x18), Modbus 'Read Holding Registers' (0x03) for configuration areas) to retrieve active task lists, program associations, and task priorities. For each controller, maintain a known-good baseline configuration file and its cryptographic hash (e.g., SHA-256) in a secure configuration repository. Upon each query, calculate the hash of the retrieved configuration. Generate an immediate alert if the newly calculated hash does not match the stored baseline hash, indicating an unauthorized or unexpected configuration change. Enrich the alert with details from Zeek s7comm.log or other ICS logs if a corresponding write operation was observed.\n2. Statistical Method (Rate Anomaly): For controllers that log configuration changes via network messages (detectable in Zeek s7comm.log for S7comm 'Write block' (0x19), 'Download block' (0x1A), 'Write system data' (0x28)), establish a 30-day baseline of the typical frequency of these configuration modification messages per controller, segmented by hour of day. Calculate the moving average (MA) and standard deviation (SD) of these event counts over a 24-hour window. Generate an alert if the count of configuration modification messages for a specific controller within a 15-minute interval exceeds MA + (2 * SD), indicating an unusually high or unexpected rate of configuration changes that could point to malicious activity.\n3. Machine Learning (Configuration Change Classification): Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) trained on historical controller configuration change events. Label historical events as 'normal maintenance' (e.g., approved changes, scheduled updates) or 'anomalous' (e.g., unapproved changes, known malicious patterns). Features for the model should include: type of change (e.g., task added, priority modified, POU association changed), affected controller ID, time of day, day of week, originating EWS IP, and presence of corresponding Windows Event ID 4688 (engineering software execution) and Zeek conn.log entries (EWS to controller communication). The model should classify new configuration changes. Trigger an alert for any 'anomalous' classification, providing a high-fidelity detection of malicious tasking modifications. Further enrich by correlating with change management tickets to reduce false positives."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]