[
  {
    "information_requirement": "Is an adversary attempting to inhibit our ability to respond to a process disruption or failure? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0878",
        "name": "Alarm Suppression",
        "evidence": [
          {
            "description": "Detection of unauthorized file modifications (write/delete operations) or access attempts on specific critical alarm configuration files (e.g., C:\\ProgramData\\SCADA_App\\Alarms.xml, D:\\HMI_Config\\AlarmDB.sqlite, C:\\Program Files\\Vendor\\SCADA\\bin\\alarm_service.exe) or associated scripts, executed by non-whitelisted user accounts or processes on HMI, EWS, or SCADA servers, verifiable through file system access logs indicating specific file paths and operation types.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4660"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Historian Servers",
            "action": "1. Symbolic Logic: Maintain a dynamic inventory of critical alarm configuration files (e.g., *.xml, *.db, *.ini within known HMI/SCADA application directories like C:\\Program Files\\Vendor\\HMI\\Config\\ or D:\\SCADA_Data\\) and their associated executable binaries (e.g., alarm_service.exe). Define a whitelist of authorized users and processes expected to modify these files (e.g., SCADA_Admin_Group, HMI_Config_Tool.exe). Create SIEM alerts for Windows Event ID 4663 (File System Object Access) where Accesses includes 'WriteData' or 'Delete' and the SubjectUserName or ProcessName is NOT in the whitelist and targets a critical alarm file. Additionally, alert on Windows Event ID 4688 (Process Creation) where a parent process like cmd.exe, powershell.exe, or wscript.exe (indicating scripting activity) is spawned by a non-whitelisted application and its CommandLine arguments indicate interaction (e.g., copy, del, move, ren, edit) with a critical alarm configuration file. Alert on Windows Event ID 4656 (Object Access Attempt) for 'Access Denied' events on these files originating from non-whitelisted processes or users. 2. Statistical Method: For each critical HMI/EWS, baseline the hourly count of Windows Event ID 4663 events targeting identified critical alarm configuration files. Using historical data (e.g., last 30 days), calculate the 99th percentile for this hourly count. Generate an alert if the current hourly count for any host or file significantly exceeds this 99th percentile. For processes identified by Windows Event ID 4688 interacting with alarm configurations, calculate the Shannon entropy of their command-line arguments over a rolling 1-hour window. Establish a baseline for the entropy values of legitimate processes. Alert if the observed entropy for a process falls below the 5th percentile or 3 standard deviations from its historical mean, indicating highly uniform, repetitive, or targeted commands potentially used for automation of malicious changes. 3. Machine Learning Application: Develop a time-series anomaly detection model (e.g., using a Prophet model or an Exponentially Weighted Moving Average (EWMA) control chart) on the aggregated hourly count of Windows Event ID 4663 events specifically targeting critical alarm configuration files across all monitored HMI/EWS hosts. Train the model on at least 90 days of historical data. Configure the model to detect sustained deviations from the predicted normal range (e.g., 3 consecutive data points falling outside the 95% prediction interval or exceeding 3 standard deviations from the EWMA mean). Flag such sustained deviations as anomalies, indicating potentially coordinated or persistent attempts to modify alarm configurations."
          },
          {
            "description": "Detection of unauthorized or anomalous ICS protocol write commands (e.g., Modbus Function Codes 5 (Write Single Coil), 6 (Write Single Register), 15 (Write Multiple Coils), 16 (Write Multiple Registers); S7Comm write requests like Write Var) targeting specific controller registers, coils, or memory locations that directly control alarm states, thresholds, or suppression flags (e.g., Holding Register 40001 for a temperature setpoint, Coil 00010 for an alarm enable/disable bit), observed in network traffic logs.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control), DMZ for remote access to OT, Safety Instrumented System (SIS) network zones",
            "action": "1. Symbolic Logic: Maintain a whitelist of authorized source IP addresses (e.g., HMI, SCADA server IPs), destination controller IPs (e.g., PLC IPs), and specific ICS protocol function codes (e.g., Modbus FC 5, 6, 15, 16; S7Comm Write Var requests) permitted for write operations. Additionally, identify a blacklist of critical register/coil addresses (e.g., Modbus Holding Register 40001, Coil 00010) that, if written to, would suppress alarms or alter thresholds. Create SIEM alerts for any entry in Zeek modbus.log or Zeek s7comm.log where a write command originates from a source IP not in the whitelist, targets a destination IP not in the whitelist, uses a function code not explicitly whitelisted for write operations, or attempts to write to a blacklisted critical alarm register/coil. 2. Statistical Method: For each unique source IP-destination IP-function code pair observed in Zeek modbus.log or Zeek s7comm.log, baseline the hourly frequency of write operations. Calculate the 99th percentile of this frequency based on the last 30 days of historical data. Generate an alert if the current hourly frequency for any pair exceeds this 99th percentile. Additionally, for each source IP, calculate the Shannon entropy of the register_address field over a rolling 30-minute window. Establish a baseline for normal entropy values (e.g., 10th percentile). Alert if the observed entropy drops below this baseline or falls by 3 standard deviations from the historical mean, indicating a sudden focus on a limited set of registers which could be alarm-related. 3. Machine Learning Application: Implement an unsupervised anomaly detection model (e.g., Isolation Forest or K-Means clustering with anomaly scoring) on a feature vector derived from Zeek modbus.log and Zeek s7comm.log entries. The feature vector should include attributes like id.orig_h, id.resp_h, modbus.func_code (or equivalent S7Comm field), modbus.reg_addr (or equivalent S7Comm field), and modbus.value (or equivalent S7Comm field) over a rolling 5-minute window. Train the model on 60 days of historical 'normal' ICS write traffic. Configure the model to flag individual write commands or short sequences of commands that are identified as outliers (e.g., anomaly score above a dynamic threshold or belonging to a low-density cluster), indicating unusual write patterns to critical devices or registers that could signify alarm suppression attempts."
          },
          {
            "description": "Absence of expected alarm generation events (e.g., specific log entries in Windows Event Log (Application) or Custom Application Logs on alarm servers) despite critical process variables, observed in ICS network traffic (Zeek modbus.log, Zeek s7comm.log), consistently exceeding their predefined operational safety or alarm thresholds (e.g., high temperature, low pressure) for a sustained duration (e.g., >30 seconds).",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Windows Event Log (Application)",
              "Custom Application Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian Servers, Alarm & Event Servers, SCADA Servers, OT Network segments monitoring Level 1 (Basic Control) process data",
            "action": "1. Symbolic Logic: Identify critical process variables (e.g., Modbus Holding Register 30001 for tank level, S7Comm DB1.DBW2 for motor temperature) and their corresponding alarm thresholds (e.g., Tank Level > 80%, Motor Temp > 90C). Define expected alarm log patterns (e.g., Alarm ID 001 - Tank Overfill in Custom Application Logs, Event ID 1001 - High Temp Warning in Windows Event Log (Application)). Implement a stateful correlation rule: If Zeek modbus.log or Zeek s7comm.log shows a critical process variable exceeding its alarm threshold for a sustained duration (e.g., 3 consecutive readings over 15 seconds), AND no corresponding alarm log entry is observed in the Windows Event Log (Application) or Custom Application Logs on the alarm server within 30 seconds of the threshold breach, generate a 'Missing Alarm' alert. This rule requires a lookup table of process variable addresses, thresholds, and expected alarm log patterns. 2. Statistical Method: For each critical process variable, establish a baseline for the typical delay between the process variable exceeding its threshold (from Zeek modbus.log or Zeek s7comm.log) and the appearance of a corresponding alarm event in the alarm server logs. Calculate the mean and 99th percentile of this delay over the last 90 days. Generate an alert if an observed alarm generation delay for a given event (where the threshold is breached but an alarm eventually appears) exceeds the 99th percentile or 3 standard deviations from the historical mean. Additionally, apply a statistical process control (SPC) chart (e.g., CUSUM or EWMA) to the values of critical process variables from Zeek modbus.log or Zeek s7comm.log. Flag as anomalous if the process values exhibit an unusually flat distribution, values consistently just below a threshold, or a sudden, sustained lack of variance, particularly when expected alarms are absent. 3. Machine Learning Application: Develop a supervised classification model (e.g., Random Forest or Gradient Boosting Classifier) that predicts the likelihood of an alarm event given a set of historical process variable readings (e.g., 5-minute average, min, max of a specific Modbus register from Zeek modbus.log) and environmental factors. Train the model using historical data where process variable states are correlated with alarm events from Windows Event Log (Application) or Custom Application Logs. During real-time monitoring, if the model predicts a high probability of an alarm (e.g., >0.95) based on current process data, but no corresponding alarm event is observed in the alarm server logs within 60 seconds, generate a 'Predicted Alarm Missed' anomaly alert. The model should be retrained monthly to adapt to normal system changes and avoid concept drift."
          },
          {
            "description": "Detection of explicit termination, unexpected stoppage, or disabling of critical alarm management services or processes (e.g., HMI_Alarm_Display_Service, SCADA_Notifier.exe, AlarmHistorianService) via system commands (taskkill, net stop, sc stop), Group Policy modifications, or direct GUI manipulation on HMI, EWS, or dedicated alarm servers, verifiable by system event logs indicating service state changes or process termination events, leading to a cessation of alarm generation, logging, or display.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 7034",
              "Windows Event ID 4697",
              "Windows Event ID 4700",
              "Windows Event ID 4701"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Alarm & Event Servers, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Domain Controllers (for Group Policy changes affecting services)",
            "action": "1. Symbolic Logic: Maintain a whitelist of critical alarm-related service names (e.g., HMI_Alarm_Service, SCADA_Notifier, AlarmLogger.exe) and their expected running state. Create immediate SIEM alerts for Windows Event ID 7036 (Service Control Manager) indicating a whitelisted service has transitioned to a 'stopped' state or Windows Event ID 7034 (Service Control Manager) indicating a whitelisted service terminated unexpectedly. Additionally, alert on Windows Event ID 4688 (Process Creation) where the CommandLine contains taskkill, net stop, sc stop, Set-Service -Status Stopped, or similar commands explicitly targeting a whitelisted service or its associated process. Furthermore, monitor for Windows Event ID 4701 (A service was disabled) or Windows Event ID 4700 (A service was enabled) on whitelisted services, especially if followed by a stop event, indicating deliberate disabling. 2. Statistical Method: For each critical alarm service on its respective host, baseline the typical duration it remains in a 'stopped' state (downtime) by analyzing Windows Event ID 7036 and 7034 over the last 60 days. Calculate the 99th percentile of this downtime duration. Generate an alert if a service's current downtime exceeds this 99th percentile, indicating an unusually prolonged outage. Additionally, baseline the hourly frequency of service stoppages. Alert if the observed hourly stoppage frequency for any critical service exceeds its 99th percentile, suggesting an abnormal rate of service interruptions. 3. Machine Learning Application: Develop a time-series anomaly detection model (e.g., Hidden Markov Model or a simple state-based clustering) that learns the normal operational state transitions (running, stopped, starting, pending) and durations for each critical alarm service using Windows Event ID 7036 and 7034. Train the model on at least 90 days of historical service lifecycle data, including known maintenance windows. Configure the model to flag as anomalous any unexpected or prolonged 'stopped' states that deviate significantly from learned normal patterns (e.g., a service remaining stopped for longer than the 99th percentile of its historical downtime, or a stop event occurring outside of known maintenance windows without a corresponding system reboot or administrative action), indicating a potential malicious service interruption."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]