[
  {
    "information_requirement": "Is an adversary attempting to disrupt operator visibility of the industrial process? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0815",
        "name": "Denial of View",
        "evidence": [
          {
            "description": "A complete absence of expected periodic Modbus (e.g., Read Holding Registers), EtherNet/IP (e.g., Explicit Messaging), or DNP3 (e.g., Integrity Polls) status updates or keep-alive messages, or a sustained >90% reduction in average packet volume, observed in Zeek ICS protocol logs from a specific Level 1 field device IP (e.g., PLC/RTU) to a specific Level 2 HMI/SCADA server IP, lasting for a duration exceeding 2x the established normal polling interval (e.g., 30 seconds to 5 minutes), and occurring outside of documented maintenance windows.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) network segment, specifically between HMI/SCADA servers and Level 1 (Basic Control) PLCs/RTUs.",
            "action": "1. Symbolic Logic: For each established critical HMI-to-PLC/RTU communication pair, define expected ICS protocol (e.g., Modbus, EtherNet/IP, DNP3) and polling intervals. Query Zeek <ics_protocol>.log files for the absence of expected periodic function codes (e.g., Modbus Read Holding Registers, EtherNet/IP Explicit Messages with specific service codes, DNP3 Integrity Polls) from the PLC IP to the HMI IP. Generate an alert if no such traffic is observed for a duration exceeding 2x the normal poll interval. Concurrently, monitor for a sustained increase (e.g., >5 standard deviations above baseline) in specific ICS protocol error codes (e.g., Modbus exception responses, EtherNet/IP General Status errors) from a known PLC IP to a known HMI IP over a 60-second window. 2. Statistical Method: For each critical HMI-to-PLC communication pair, establish a 7-day moving average baseline for the number of packets and bytes *from* the PLC/RTU IP *to* the HMI IP, aggregated in 30-second windows using Zeek conn.log or specific protocol logs. Calculate the 1st percentile of this historical baseline. Trigger an alert if the current 30-second window's traffic volume (packets or bytes) drops below this 1st percentile for three consecutive windows (i.e., 90 seconds total). 3. Machine Learning: Deploy a time-series anomaly detection model (e.g., an LSTM autoencoder or Prophet) trained on historical aggregate packet counts per minute *from* PLC/RTU IPs *to* HMI IPs. Continuously feed real-time packet counts into the model. Flag any data points with an anomaly score exceeding a predefined threshold (e.g., 0.95) as a potential Denial of View event, particularly when the observed packet count approaches zero and is combined with a lack of specific ICS protocol messages."
          },
          {
            "description": "An unscheduled or unexpected termination (e.g., Windows Event ID 4689 with a non-zero exit code not associated with normal shutdown, or Sysmon Event ID 5) of a critical HMI application process (e.g., ftview.exe, cimplicity.exe, rsview32.exe, wonderware.exe) on an operator or engineering workstation, where the ParentProcessName or InitiatingProcessName (from Sysmon Event ID 1 or Windows Event ID 4688) is not a whitelisted HMI component, OS utility, or known administrator-initiated process, and the SubjectUserName is not a whitelisted administrative account or SYSTEM.",
            "data_sources": [
              "Windows Event ID 4689",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon Process Create)",
              "Windows Event ID 5 (Sysmon Process Terminate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) HMI Workstations and Engineering Workstations.",
            "action": "1. Symbolic Logic: On critical HMI and engineering workstations, create a whitelist of expected HMI application processes (e.g., ftview.exe, cimplicity.exe, rsview32.exe, wonderware.exe). Monitor for Windows Event ID 4689 (A process has exited) or Sysmon Event ID 5 (Process terminated) targeting these whitelisted processes. Correlate with Windows Event ID 4688 or Sysmon Event ID 1 (Process Create) to identify the parent process and user. Alert if the parent process is not a whitelisted HMI component, a standard OS utility (e.g., explorer.exe, services.exe), or a known administrative tool, OR if the SubjectUserName is not a whitelisted administrator or SYSTEM account. 2. Statistical Method: Establish a 30-day baseline for the hourly count of unexpected terminations (Windows Event ID 4689 / Sysmon Event ID 5) for each critical HMI process on each workstation. Calculate the 99th percentile for this count. Trigger an alert if the current hourly termination count for a specific HMI process on a workstation exceeds this 99th percentile. Additionally, calculate the 95th percentile for normal operational hours for each process; alert if a termination occurs outside these hours. 3. Machine Learning: Train a classification model (e.g., Random Forest or Gradient Boosting) on historical process termination events (Windows Event ID 4689, Sysmon Event ID 5) from HMI workstations. Features for the model should include process name, parent process name, command-line arguments, user, time of day, and exit code. The model classifies terminations as 'normal' or 'anomalous'. Flag terminations with a high 'anomalous' score (e.g., >0.9) for immediate review, especially those involving unusual parent-child relationships or command-line arguments not seen in normal operations."
          }
        ]
      },
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A sustained and sudden increase (e.g., >10x the 99th percentile of baseline) in inbound TCP SYN packets or UDP connection attempts directed towards critical ICS assets (e.g., HMI/SCADA server IPs, Historian IPs, OPC server IPs) from a single or multiple unusual source IPs (e.g., IPs not within known ICS network segments or whitelisted ranges), resulting in a high ratio of incomplete TCP connections (Zeek conn_state 'S0' or 'RSTO') or UDP connection rejections (e.g., high ICMP Port Unreachable responses).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 3 (Manufacturing Operations) and Level 2 (Control System) network boundaries, Data Historian servers, HMI Workstations.",
            "action": "1. Symbolic Logic: Define a whitelist of internal source IPs allowed to connect to critical HMI/Historian/OPC server IPs. Monitor Zeek conn.log for any source IP that is *not* on this whitelist initiating >1000 TCP SYN packets per minute towards a critical ICS asset. Additionally, identify sustained periods (e.g., >60 seconds) where connections to critical ICS assets in Zeek conn.log show a conn_state predominantly 'S0' (SYN sent, no reply), 'RSTO' (Responder timed out), or 'REJ' (Connection rejected) from multiple distinct source IPs, indicating connection saturation or rejection. 2. Statistical Method: For each critical HMI/Historian/OPC server IP, calculate a 7-day moving average baseline for the rate of new TCP connections (SYN packets) and UDP packets per minute. Determine the 99th percentile for these rates. Trigger an alert if the current rate for either metric exceeds its respective 99th percentile for more than 60 consecutive seconds. Additionally, calculate the Shannon entropy of source IP addresses connecting to critical ICS assets over 5-minute windows; a sudden drop in entropy (e.g., falling below the 5th percentile of its historical baseline) indicates a concentration of traffic from fewer sources, potentially a targeted DoS. 3. Machine Learning: Implement a real-time unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) on network flow data (Zeek conn.log) targeting critical ICS assets. Use features such as source IP, destination IP, destination port, number of SYN packets, and total packet count within 1-minute windows. Train the model on historical normal traffic. Flag new observations that fall outside the learned normal distribution with a high anomaly score (e.g., >0.9) as potential Denial of Service events, especially when characterized by high connection attempts or traffic volume to ICS destinations."
          },
          {
            "description": "An unscheduled or unexpected termination (Windows Event ID 7034) of a critical ICS-related Windows service (e.g., OPC Data Access Server, SCADA Runtime Service, Historian Collector Service, Modbus Gateway Service) on an HMI, SCADA server, or Historian server, identified by its Service Name or ImagePath, not immediately followed by a successful restart (Windows Event ID 7036) within 30 seconds, and not correlated with a system shutdown or documented administrator-initiated maintenance.",
            "data_sources": [
              "Windows Event ID 7034",
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) HMI Workstations, Engineering Workstations, and SCADA/Historian Servers.",
            "action": "1. Symbolic Logic: Maintain a whitelist of critical ICS service names (e.g., OpcEnum, RsLinxService, ModbusGatewayService, HistorianCollectorService) on HMI, engineering, and SCADA/Historian servers. Monitor for Windows Event ID 7034 (Service Control Manager: A service terminated unexpectedly) for any whitelisted service. Generate an alert if the termination is not immediately followed by a corresponding Windows Event ID 7036 (Service Control Manager: The service entered the running state) within 30 seconds. Additionally, correlate with Windows Event ID 4688 or Sysmon Event ID 1 (Process Create) to identify the process initiating the service termination (e.g., sc.exe, net.exe); alert if the initiating process or user is not whitelisted for service management. 2. Statistical Method: For each critical ICS service, establish a 30-day moving average baseline for its average uptime and the hourly count of unexpected terminations (Windows Event ID 7034). Calculate the 95th percentile for normal operating hours and the 99th percentile for hourly termination counts. Trigger an alert if a service terminates outside of its 95th percentile of normal operating hours, or if the number of terminations for a service within an hour exceeds the 99th percentile of its historical hourly average. 3. Machine Learning: Develop a supervised classification model (e.g., XGBoost) trained on historical Windows Event IDs 7034 and 7036, along with contextual host logs (Event ID 4688, Sysmon Event ID 1, 4624/4625 for logins). Features for the model should include service name, termination time, initiating process, user, preceding login events, and service dependencies. Label historical events as 'normal' (e.g., planned restart, system shutdown) or 'anomalous'. Use the model to predict the likelihood of new service terminations being anomalous, flagging events with a high anomaly score (e.g., >0.9) for immediate investigation by analysts."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]