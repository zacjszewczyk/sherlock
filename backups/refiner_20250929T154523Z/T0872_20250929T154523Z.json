[
  {
    "information_requirement": "Is an adversary attempting to hide their presence on critical ICS hosts? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0872",
        "name": "Indicator Removal on Host",
        "evidence": [
          {
            "description": "Detection of Windows Event ID 1102 ('The audit log was cleared') on an ICS host, specifically when not initiated by a pre-approved, privileged account or outside of a documented maintenance window, indicating an unauthorized attempt to erase forensic evidence.",
            "data_sources": [
              "Windows Event ID 1102",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, and OT Domain Controllers.",
            "action": "1. Symbolic Logic: Generate a critical alert for any instance of Windows Event ID 1102 on an ICS host. Immediately correlate with the preceding Windows Event ID 4624 (successful logon) to identify the initiating user. Cross-reference the user and the timestamp against a documented list of authorized administrative accounts and a schedule of approved maintenance windows. If the event is initiated by an unauthorized user or occurs outside an approved window, trigger an immediate high-priority alert. Additionally, check for associated Zeek conn.log entries for inbound network connections (e.g., RDP, SMB) preceding the event, especially from unusual source IPs. 2. Statistical Method: Establish a 90-day rolling baseline for the count of Windows Event ID 1102 occurrences per ICS host. Since legitimate occurrences should be zero or extremely rare, any detection of Event ID 1102 immediately triggers an alert, as it represents an extreme deviation (e.g., exceeding the 99.9th percentile) from expected activity. Calculate the time difference (in seconds) between the Windows Event ID 1102 and the last interactive logon (Windows Event ID 4624, Logon Type 2 or 10) for the same host; a difference less than 300 seconds (5 minutes) should significantly increase the alert's priority. 3. Machine Learning: Deploy a UEBA model trained on historical user and process activity on ICS hosts to profile normal administrative actions. The model should analyze patterns of log clearing (e.g., frequency, user, time of day). A sudden occurrence of Windows Event ID 1102 from an account or process lacking historical precedent for such actions, or at an anomalous time (identified by a time-series anomaly detection model like Isolation Forest or ARIMA), should be flagged as a high-risk anomaly, triggering an alert with a confidence score based on the model's classification output."
          },
          {
            "description": "Anomalous volume and pattern of file deletion events (Windows Event ID 4663 with 'DELETE' access mask 0x00010000) or process executions (Windows Event ID 4688) specifically targeting system log directories (e.g., C:\\Windows\\System32\\winevt\\Logs\\, C:\\ProgramData\\<Vendor>\\<Product>\\Logs\\), temporary files, or user profile directories on an ICS host, originating from a single user account or process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek fileinfo.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on Engineering Workstations, HMIs, Process Control Servers, and Historian Servers, specifically directories containing logs (e.g., C:\\Windows\\System32\\winevt\\Logs\\), temporary files, and user profiles.",
            "action": "1. Symbolic Logic: Generate a high-severity alert for Windows Event ID 4688 where CommandLine contains known log clearing utilities or commands such as `wevtutil.exe cl`, `del /s /q`, `sdelete.exe -z`, `rm -rf`, or `fsutil usn deletejournal`, specifically when executed against sensitive log directories (e.g., `C:\\Windows\\System32\\winevt\\Logs\\*`, `C:\\ProgramData\\*\\Logs\\*`, `C:\\Users\\*\\AppData\\Local\\Temp\\*`). Prioritize alerts if the process is not whitelisted or the user account is not an authorized administrator. Additionally, monitor for Windows Event ID 4663 (Object Access - Handle Closed) where AccessMask includes 0x00010000 (DELETE) and the ObjectName path matches these sensitive log directories. 2. Statistical Method: For Windows Event ID 4663 events with 'DELETE' access, establish a 7-day rolling baseline for the count of unique file deletions per user and per process on each ICS host, focusing on files within log or temporary directories. Generate an alert if the number of deletions within any 15-minute window exceeds the 99th percentile or three standard deviations above the average for that user/process/host combination. Calculate the Shannon entropy of deleted file names (e.g., `filename.extension`) within a 5-minute window; a sudden drop in entropy (e.g., below the 1st percentile of historical entropy) suggests programmatic deletion of similar files, triggering an alert. 3. Machine Learning: Apply a time-series anomaly detection model (e.g., Isolation Forest or Prophet) to the rate of file deletion events (Windows Event ID 4663) per ICS host. Anomalous spikes or sustained high rates of deletion, particularly when correlated with process reputation (e.g., low-reputation PE hash from Zeek pe.log) or unusual user activity (e.g., identified by a UEBA model), should trigger a high-fidelity alert. Use a clustering algorithm (e.g., K-Means) to group hosts/users exhibiting similar anomalous deletion patterns, helping to identify coordinated activity."
          },
          {
            "description": "Execution of commands (identified via Windows Event ID 4688, specifically CommandLine field) or file deletion events (Windows Event ID 4663 with DELETE access) targeting known command-line history files (e.g., PowerShell_transcript.*.txt, ConsoleHost_history.txt, .bash_history, .zsh_history, psreadline.log, history.log) within user profile directories on ICS hosts.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) and other ICS hosts where operators or administrators might use command-line interfaces, specifically user profile directories containing history files.",
            "action": "1. Symbolic Logic: Generate a high-severity alert for Windows Event ID 4688 where the CommandLine contains deletion keywords (`del`, `erase`, `rm`, `shred`, `sdelete`) and targets known history file paths (e.g., `*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt`, `*\\Users\\*\\.bash_history`, `*\\Users\\*\\.zsh_history`, `*\\Users\\*\\AppData\\Roaming\\PowerShell\\PSReadline\\psreadline.log`). Prioritize alerts where the executing process is uncommon, the ParentProcessName is suspicious (e.g., not a shell), or the user account is not typically authorized for such actions. Additionally, monitor for Windows Event ID 4663 with DELETE access targeting these specific history file paths. 2. Statistical Method: Establish a 30-day rolling baseline for the count of deletion or modification events (Windows Event ID 4688 or 4663) targeting command history files per user and per ICS host. Since legitimate deletions should be extremely rare, any occurrence exceeding the 99th percentile (or any occurrence if the baseline is zero) should trigger an alert. Calculate the time elapsed between a user's successful logon (Windows Event ID 4624) and the deletion of their history file; a duration less than 120 seconds (2 minutes) for a non-whitelisted process suggests highly suspicious activity and warrants an elevated alert severity. 3. Machine Learning: Implement a classification model (e.g., Random Forest or XGBoost) trained to distinguish between legitimate and anomalous CommandLine executions (Windows Event ID 4688). Features for the model should include process name, parent process, user, command line arguments (bag-of-words or embeddings), execution time, and targeted file path. A high anomaly score for an event targeting a history file, especially when combined with other low-confidence indicators (e.g., unusual network activity from Zeek conn.log), should trigger a high-fidelity alert for analyst review."
          },
          {
            "description": "Detection of a critical service state change (Windows Event ID 7036, where ServiceName is 'EventLog' and ServiceState is 'stopped') or a service configuration modification (Windows Event ID 7040, where ServiceName is 'EventLog' and NewStartType is 'Disabled') on an ICS host, specifically when not initiated by a pre-approved, privileged account or outside of a documented maintenance window.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 7040",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Services running on critical ICS hosts like EWS, HMIs, Historians, and OT Domain Controllers.",
            "action": "1. Symbolic Logic: Generate a critical alert for any Windows Event ID 7036 where ServiceName is 'EventLog' and ServiceState is 'stopped'. Similarly, alert for Windows Event ID 7040 where ServiceName is 'EventLog' and NewStartType is 'Disabled'. For each alert, correlate with preceding successful logons (Windows Event ID 4624) to identify the user and cross-reference against a whitelist of authorized accounts and documented maintenance windows. Additionally, check Zeek conn.log for any unusual inbound network connections (e.g., RDP, SMB) to the affected host immediately preceding the event. Any event not matching a whitelist entry or an approved maintenance window triggers an immediate high-priority alert. 2. Statistical Method: Establish a 90-day rolling baseline for the count of Windows Event ID 7036 (EventLog stopped) and 7040 (EventLog disabled) per ICS host. Since these events should be extremely rare or non-existent in a stable ICS environment, any single occurrence (exceeding the 99.9th percentile or any non-zero count) should immediately trigger a critical alert. Calculate the time difference between the EventLog service change and the last interactive logon (Windows Event ID 4624, Type 2 or 10) for the same host; a difference under 60 seconds is highly suspicious and warrants an elevated alert severity. 3. Machine Learning: Implement a host-based anomaly detection model (e.g., a supervised classifier like Logistic Regression or an unsupervised model like One-Class SVM) trained on historical service state changes and configurations for the 'EventLog' service. The model should consider features such as ServiceName, ServiceState, NewStartType, User, ProcessName, and TimeOfDay. A sudden, unapproved stop or disablement of the 'EventLog' service, especially from an unusual user context (identified by a UEBA model) or at an anomalous time (identified by a time-series model like ARIMA), should be flagged with a high-confidence anomaly score, triggering a high-priority alert for immediate investigation."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]