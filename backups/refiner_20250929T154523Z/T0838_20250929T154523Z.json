[
  {
    "information_requirement": "Is an adversary attempting to modify or suppress critical process alarms? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0838",
        "name": "Modify Alarm Settings",
        "evidence": [
          {
            "description": "An unauthorized modification (write, delete, or permission change) to a critical alarm configuration file on a key ICS asset, identified by the process, user, or time of the event being outside of established baselines or whitelists.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 5145"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian servers, Data Gateways/OPC Servers",
            "action": "1. Symbolic Logic (Rule-based Correlation): Define a watchlist of critical alarm configuration file paths and extensions (e.g., C:\\SCADA\\Projects\\*.ALM, D:\\HMI_Config\\*.XML). Monitor for Windows Event ID 4663 (Object Access) with write or delete access masks, or Windows Event ID 5145 (Detailed File Share) for remote modifications. Correlate the Process ID from these events with Windows Event ID 4688 (Process Creation) to identify the responsible user and process name. Alert if the modifying process (e.g., powershell.exe, cmd.exe) or user is not on a pre-defined whitelist of authorized administrative tools and accounts, or if the modification occurs outside a scheduled maintenance window. 2. Statistical Method (Baseline Deviation): For each monitored file path, establish a baseline of modification activity. Collect the hourly count of modification events (Event ID 4663/5145). Calculate the 95th percentile for modification counts for each hour of the day and day of the week over a 30-day period. Alert when the count of modifications in a given hour exceeds this established percentile, indicating an unusual burst of activity. Additionally, calculate the Shannon entropy of the parent process name modifying these files; a sudden spike in entropy may indicate the use of randomized or obfuscated executable names. 3. Machine Learning (Classification Model): Train a supervised classification model (e.g., Random Forest) to predict if a file modification is malicious. Engineer features from Event IDs 4663 and 4688, including: process name, parent process name, user account, user's group memberships, time of day, day of week, file extension, and boolean flags for 'is_scripting_engine' and 'is_outside_maintenance_window'. Label historical data based on incident response findings and known-good administrative activities. Deploy the model to score new events in real-time, generating a high-priority alert for events classified as 'malicious' with a confidence score > 0.85."
          },
          {
            "description": "A network transfer of a file matching the name, extension, or content characteristics of a critical alarm configuration file to an ICS asset from an unauthorized source, over an unexpected protocol, or with a hash/size that deviates from known-good versions.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek smb_files.log",
              "Zeek ftp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT boundary firewalls, Industrial Demilitarized Zones (IDMZ), Control Network segments (Process Control, Safety Instrumented Systems), Wireless Industrial Networks",
            "action": "1. Symbolic Logic (Whitelist/Watchlist): Create a watchlist of critical alarm configuration file names and extensions (e.g., *.alm, *.prj, *.xml). Monitor Zeek's files.log for transfers where the filename matches the watchlist and the destination IP (rx_hosts) is a critical ICS asset. Join this with the unique ID (uid) in conn.log. Alert if the source IP (id.orig_h), protocol (proto), or port (id.resp_p) are not on a strict whitelist of approved engineering stations and protocols (e.g., FTP, SMB from specific EWS). Further refine by alerting if the 'sha1' hash in files.log does not match a known-good hash for the specific configuration file. 2. Statistical Method (Volume and Ratio Anomaly): For each ICS asset, establish a baseline of configuration file transfers from Zeek logs. Calculate the 30-day moving average and standard deviation for the daily volume (sum of 'total_bytes' from files.log) and count of watchlisted file types transferred. Alert if the daily volume or count exceeds 3 standard deviations above the moving average. Also, track the ratio of config file transfers to total file transfers; a sudden spike in this ratio can indicate targeted activity even if overall volume is low. 3. Machine Learning (Unsupervised Anomaly Detection): Develop a time-series anomaly detection model (e.g., Isolation Forest, Autoencoder) using features aggregated hourly from Zeek's conn.log and files.log for traffic to critical ICS assets. Features should include: total byte count, packet count, count of unique protocols, count of file transfers, and average file size. Train the model on at least 90 days of data to learn normal network behavior, including scheduled project downloads. Alert when the model flags a time window with a high anomaly score, indicating a deviation from the established pattern of network and file activity."
          },
          {
            "description": "A critical ICS application service (e.g., alarm manager, HMI runtime, OPC server) enters a 'stopped' state, and the event is not correlated with a scheduled maintenance window, an authorized administrative action, or a planned system shutdown.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 1074",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator Stations, Human-Machine Interfaces (HMIs), Alarm management servers, SCADA Servers, Data Historian Servers",
            "action": "1. Symbolic Logic (Contextual Correlation): Create a watchlist of critical ICS service names (e.g., 'CitectAlarm', 'FTAEAlarms', 'OPCService'). Monitor for Windows Event ID 7036 where a watchlisted service enters the 'stopped' state. Suppress the alert if the event occurs within a 5-minute window of a Windows Event ID 1074 (System Shutdown/Restart) on the same host. Correlate the Process ID that initiated the stop (if available, often via Event ID 4688 logs for processes like 'net.exe' or 'sc.exe') to check against a whitelist of authorized administrative users and scripts. Alert for any un-correlated or unauthorized stop event. 2. Statistical Method (Uptime and Frequency Analysis): For each critical service, track its uptime between 'started' and 'stopped' states (from Event ID 7036). Calculate the historical mean time between failures (MTBF) over a 90-day period. Alert if a service's uptime drops below the 10th percentile of its historical distribution, indicating premature or frequent crashes/stops. Also, track the daily count of unauthorized stops (events not suppressed by the symbolic logic) and alert if this count exceeds the 99th percentile of its historical daily counts. 3. Machine Learning (Event Classification): Train a supervised classification model (e.g., LightGBM) to determine the legitimacy of a service stop event. Use features from Event ID 7036 and correlated logs, such as: service name, time of day, day of week, host criticality, a boolean flag for correlation with Event ID 1074, and the name of the user/process that initiated the stop (if available). Train the model on historical data labeled as 'legitimate' (e.g., during patching) or 'suspicious'. Deploy the model to score new stop events, alerting on those classified as 'suspicious' with high confidence (>0.90)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]