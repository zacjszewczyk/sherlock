[
  {
    "information_requirement": "Has an adversary gained unauthorized access to or is manipulating the view of the industrial process? (TA0105 - Impact)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0831",
        "name": "Man in the Middle",
        "evidence": [
          {
            "description": "Detection of duplicate MAC addresses on the same network segment, gratuitous ARP requests not initiated by a device reboot, or significant deviations in expected IP-to-MAC address mappings for critical ICS assets (PLCs, HMIs, engineering workstations) observed on the process control network.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek arp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting PLCs, HMIs, and other critical control system devices within the Operational Technology (OT) network.",
            "action": "1. Symbolic Logic (Whitelist/IOC Match): Monitor Zeek `notice.log` for specific `note` types indicating ARP anomalies (e.g., `ARP::Spoofing`, `ARP::Duplicate_IP_Detected`). Create and maintain a strict whitelist of static IP-to-MAC address pairings for all critical ICS assets. Alert on any observed deviation in `Zeek arp.log` or `Zeek conn.log` that is not part of a pre-approved change, specifically focusing on `id.orig_h`, `id.resp_h`, `orig_l2_addr`, `resp_l2_addr` fields. 2. Statistical Method (Baseline Deviation): For each unique `id.orig_h` (source IP) or `id.resp_h` (destination IP) on critical control network segments, calculate the frequency and distribution of associated `orig_l2_addr` or `resp_l2_addr` (MAC addresses) from `Zeek arp.log` and `Zeek conn.log` over a 24-hour rolling window. Alert if a single IP address is observed with more than one MAC address within a 5-minute interval, or if the MAC address associated with a critical asset changes more than once in a 24-hour period (excluding planned maintenance windows), exceeding the 99th percentile of historical changes. 3. Machine Learning (Time Series/Graph Analysis): Apply a time-series anomaly detection model (e.g., Isolation Forest) to the rate of new MAC address detections per IP from `Zeek arp.log` on critical network segments to flag anomalous spikes. Additionally, use a graph-based machine learning model (e.g., Node2Vec for embedding, then clustering or anomaly detection) to analyze communication patterns in `Zeek conn.log` between ICS assets (using `id.orig_h`, `id.resp_h`, `orig_l2_addr`, `resp_l2_addr` fields), flagging new or unusual peer-to-peer connections or changes in MAC-to-IP relationships that deviate from established operational graphs."
          }
        ]
      },
      {
        "technique_id": "T0867",
        "name": "Standard Application Layer Protocol",
        "evidence": [
          {
            "description": "Detection of write commands (e.g., Modbus FC 0x06, 0x10; DNP3 FC 0x0C, 0x0D; S7COMM write operations) from an HMI or engineering workstation to a PLC that exhibit a statistically significant increase in frequency, originate from an unauthorized source IP, or attempt to set process variable values outside of their pre-defined safe operational ranges or historical norms.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of PLCs, HMIs, and associated engineering workstations within the control network zones, especially those connected to critical process segments.",
            "action": "1. Symbolic Logic (IOC Match/Whitelist): Create rules to flag any write command (e.g., `modbus.log` `function_code` = `0x06` or `0x10`, `dnp3.log` `function_code` = `0x0C` or `0x0D`, `s7comm.log` `function_code` indicating write) where the `id.orig_h` (originator IP address) is not on a whitelist of authorized HMIs/engineering workstations for the target PLC's `id.resp_h`. Additionally, maintain a lookup table of critical process variables and their safe operational ranges; alert on any write operation where the `value` field (from respective protocol logs) falls outside these pre-defined bounds. 2. Statistical Method (Percentile/Standard Deviation): For each HMI-to-PLC communication pair, establish a 7-day rolling baseline for the average number of write commands per hour (counting `function_code` indicative of writes in `modbus.log`, `dnp3.log`, `s7comm.log`) and the 95th percentile of `value` field for specific process variables. Alert when the current hourly write command count exceeds 3 standard deviations from the baseline mean, or when any write command `value` is outside the 1st and 99th percentile of historical values for that specific variable for that HMI-PLC pair. 3. Machine Learning (Classification/Time Series): Train a supervised classification model (e.g., Random Forest or XGBoost) using historical ICS protocol logs (e.g., `modbus.log`, `dnp3.log`, `s7comm.log`), labeling normal and known anomalous write patterns (if available). The model should classify new write commands based on features like `id.orig_h`, `id.resp_h`, `function_code`, `value`, and frequency. Additionally, apply a time-series anomaly detection model (e.g., ARIMA or Prophet) to the volume of write commands from each HMI to each PLC, flagging sudden, sustained increases that deviate from normal operational patterns."
          }
        ]
      },
      {
        "technique_id": "T0848",
        "name": "Modify Program",
        "evidence": [
          {
            "description": "Detection of unauthorized or atypical modification, creation, or deletion events impacting critical HMI application executables, dynamic link libraries (DLLs), or configuration files (e.g., `.ini`, `.xml`, `.json` files defining HMI views or control logic) on HMI servers or engineering workstations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI application servers, engineering workstations, and historian servers within the control network, particularly their operating system and application directories.",
            "action": "1. Symbolic Logic (Whitelist/IOC Match): Identify critical HMI application directories and files (e.g., `C:\\Program Files\\SCADA_HMI\\*.exe`, `*.dll`, `*.config`). Create a strict whitelist of legitimate `ProcessHash` values (from `Windows Event ID 4688`) and `SubjectUserSid` values authorized to modify these files. Alert on `Windows Event ID 4663` (File Write) or `4656` (Handle Request) for these critical files if the `SubjectProcessName` or `SubjectUserSid` is not on the whitelist, and the `ProcessHash` from `Windows Event ID 4688` (correlated by `ProcessId`) does not match an approved hash. 2. Statistical Method (Percentile/Frequency Analysis): For each critical HMI file, establish a baseline frequency of modification events (`Windows Event ID 4663`) and the typical `ProcessName` (from `Windows Event ID 4688` correlated by `ProcessId`) associated with these modifications over a 30-day period. Alert if the number of modifications for a specific file exceeds the 99th percentile of its historical rate within a 1-hour window, or if a `ProcessName` not seen in the top 95th percentile of historical modifiers attempts a modification. 3. Machine Learning (Anomaly Detection/Sequence Analysis): Train a supervised anomaly detection model (e.g., One-Class SVM or Isolation Forest) on `Windows Event ID 4663` and `4688` data from HMI systems. Features for the model could include `ProcessName`, `ProcessId`, `SubjectUserSid`, `ObjectName` (file path), `AccessMask`, `ProcessHash`, and `timestamp` (for time-based features). The model should learn normal file modification patterns by authorized processes and users, flagging deviations as potential malicious activity. Additionally, a sequence-based ML model (e.g., Hidden Markov Model or T-DBSCAN) could detect unusual sequences of process execution followed by file modifications on HMI systems (e.g., an unexpected process creating or modifying an HMI executable)."
          }
        ]
      },
      {
        "technique_id": "T0832",
        "name": "Manipulation of View",
        "evidence": [
          {
            "description": "Detection of a quantitative deviation (e.g., exceeding a specific percentage or absolute difference) or qualitative mismatch between a critical process variable's value as observed directly from a PLC's network communication (e.g., Modbus read response) versus the value displayed by an HMI (inferred from HMI-initiated read requests or HMI write operations to historian, as captured in Zeek logs) or recorded by a historian system. Additionally, evidence includes unauthorized modifications (file creation, deletion, write) to HMI visualization files (e.g., `.xml`, `.json`, `.grf`) or data source configuration files, and observation of ICS protocol messages with altered payload data values that deviate from expected operational ranges or historical baselines, particularly when originating from or destined for an HMI or historian.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log",
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI servers, Historian servers, engineering workstations, and network segments connecting PLCs to HMIs and Historians within the control network zones, including any data gateways or visualization platforms.",
            "action": "1. Symbolic Logic (Cross-Source Validation/IOC Match): Identify critical process variables (tags) where values are expected to be consistent across PLC network logs (e.g., `zeek modbus.log` `value` field from PLC responses where `is_response` is true) and HMI interactions (e.g., `zeek modbus.log` `value` field from HMI-initiated read requests where `is_response` is false, and subsequent PLC responses). Create rules to flag any instance where the `value` for a specific tag from a PLC's response deviates by more than a 2% threshold for numeric values, or is a direct mismatch for boolean/enumerated values, compared to the `value` observed in a corresponding HMI-initiated read request or a value written by an HMI to a historian (if captured in Zeek ICS logs) within a 5-second window. Maintain a whitelist of authorized `SubjectProcessName` and `SubjectUserSid` values allowed to modify HMI display configuration files (e.g., `*.xml`, `*.json`, `*.grf` files in HMI application directories). Alert on `Windows Event ID 4663` (File Write) or `Windows Event ID 4688` (Process Creation followed by file modification) for these critical HMI configuration files if the `SubjectProcessName` or `SubjectUserSid` is not on the whitelist, and the `ProcessHash` from `Windows Event ID 4688` (correlated by `ProcessId`) does not match an approved hash. 2. Statistical Method (Baseline Deviation/Correlation Analysis): For each critical process variable, establish a 7-day rolling baseline for the Pearson correlation coefficient between the `value` fields observed from PLC network responses (e.g., `zeek modbus.log` from PLC IP, `is_response`=true) and HMI-initiated reads/writes (e.g., `zeek modbus.log` from HMI IP, `is_response`=false, and subsequent responses) over 1-minute intervals. Alert if the correlation coefficient drops below the 1st percentile of its historical range for more than 5 consecutive minutes. For HMI display configuration files, establish a baseline for the typical frequency and average size of modification events (`Windows Event ID 4663`) and associated `ProcessName` (`Windows Event ID 4688` correlated by `ProcessId`) over a 30-day period. Alert if the number of modifications or the total bytes written to these files exceeds the 99th percentile of historical activity within a 1-hour period, or if a `ProcessName` not seen in the top 95th percentile of historical modifiers attempts a modification. Separately, monitor for sudden, sustained shifts in reported process values (e.g., `value` field in `zeek modbus.log` from an HMI-initiated read) that do not correspond to changes in PLC output values (from `zeek modbus.log` PLC responses), where the new HMI-reported value remains within the 'normal' operating range but deviates from the 95th percentile of recent historical HMI-reported values without a corresponding change in the PLC's actual output or a legitimate control action logged in Zeek ICS logs. 3. Machine Learning (Time Series Anomaly Detection/Graph Anomaly): Train a multivariate time-series anomaly detection model (e.g., LSTM Autoencoder or Isolation Forest) on synchronized `value` fields of critical process variables from different sources. Features for the model should include `value` fields from PLC network responses (e.g., `zeek modbus.log` from PLC IP, `is_response`=true), HMI-initiated read requests (e.g., `zeek modbus.log` from HMI IP, `is_response`=false), and HMI application process activity (`Windows Event ID 4688` for HMI application processes). The model should learn the normal relationships, time lags, and temporal dynamics between these values, flagging significant divergences, unexpected value plateaus, or sudden changes without corresponding inputs as anomalies. Apply a graph-based anomaly detection model (e.g., utilizing Graph Neural Networks or spectral clustering) to analyze `Zeek conn.log` and ICS protocol logs (e.g., `modbus.log`, `dnp3.log`, `s7comm.log`) to map expected data flows and `value` field propagation between PLCs, HMIs, and Historians. The model should identify anomalous data flow paths (e.g., an HMI communicating with an unexpected PLC) or detect unexpected changes in the `value` fields of ICS protocol messages along established paths that deviate from the learned normal graph structure, indicating potential manipulation of data in transit or at endpoints."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]