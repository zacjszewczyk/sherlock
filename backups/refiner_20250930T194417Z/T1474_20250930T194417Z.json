[
  {
    "information_requirement": "Has a corporate mobile application been compromised through its supply chain? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474",
        "name": "Supply Chain Compromise",
        "evidence": [
          {
            "description": "A managed mobile application, within 24 hours of an MDM-pushed update, initiates network connections that exhibit one or more anomalous characteristics: (1) DNS queries (Zeek dns.log) for domains not seen in the application's 90-day baseline; (2) TLS connections (Zeek ssl.log) with a self-signed certificate, a certificate issuer not on a pre-approved list, or a JA3/JA3S hash with an organizational rarity below 1%; (3) Direct-to-IP connections (Zeek conn.log) where the destination is not part of the established application infrastructure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "MDM Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, corporate Wi-Fi segments for mobile devices, VPN concentrators, and forward/recursive DNS resolvers.",
            "action": "SYMBOLIC: Ingest MDM logs to identify application update events and affected device groups. Correlate device IPs with network logs from the 24-hour period post-update. Compare destination domains (from Zeek dns.log) and IPs (from Zeek conn.log) against threat intelligence feeds for mobile malware C2s. Alert immediately on any match. STATISTICAL: For each managed app, maintain a 90-day rolling baseline of known-good (1) destination domains, (2) TLS certificate issuers, and (3) JA3/JA3S hashes. After an update, generate a medium-severity alert if the application contacts a new domain. Escalate to high-severity if the new domain's TLS certificate is self-signed, issued by an untrusted CA, or if the connection's JA3/JA3S hash is present on less than 1% of monitored devices. MACHINE LEARNING: Train an autoencoder neural network on feature vectors representing normal connections for each application (features: destination port, protocol, JA3S hash as a categorical variable, connection duration, bytes_in, bytes_out). After an update, process new connections through the model. A high reconstruction error indicates a deviation from the learned normal behavior, flagging a potential C2 channel or other malicious activity."
          },
          {
            "description": "During a mobile app build cycle, a process on a developer workstation or CI/CD server (e.g., a compiler or build script) spawns a child process (Windows Event ID 4688) that initiates a network connection (Windows Event ID 5156 and Zeek conn.log) to an external IP address not on a pre-approved allowlist of code repositories, package managers, or update services. The child process may exhibit high-entropy command-line arguments or be an unusual child for its parent process (e.g., MSBuild.exe spawning bitsadmin.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint logging on developer workstations, virtual desktop infrastructure (VDI) used for development, and continuous integration/continuous delivery (CI/CD) pipeline servers. Network traffic from the development subnet.",
            "action": "SYMBOLIC: On build systems, monitor for process creation events (Event ID 4688) where a build tool (e.g., xcodebuild, gradle, MSBuild.exe) spawns a networking utility (curl.exe, powershell.exe -enc, wget.exe). Use the Process ID from 4688 to correlate with a network connection event (Event ID 5156) and Zeek conn.log data. If the destination IP is on a known C2 threat intelligence list or is not on the corporate allowlist for development tools, generate a critical alert. STATISTICAL: Create a baseline of all parent-child process relationships on build servers over 30 days. Calculate the frequency of each pair; alert on any new or rare pair (e.g., bottom 0.5% frequency). For processes like powershell.exe or cmd.exe, calculate the Shannon entropy of the command line arguments; flag any instance with an entropy score > 4.5 as potentially obfuscated. Also, analyze command-line arguments for substrings indicative of base64 encoding or download cradles. MACHINE LEARNING: Train a gradient boosting classifier (e.g., XGBoost) to predict if a process chain is malicious. Features should include parent process name, child process name, command-line argument length, command-line entropy, presence of IP addresses in arguments, and correlated network connection data (destination port, bytes out, protocol). A classification of 'malicious' with high confidence triggers an automated host quarantine for investigation."
          },
          {
            "description": "In the 24 hours following an MDM-pushed update, the aggregate network traffic profile for the updated application version deviates significantly from its historical baseline. Specific indicators include: (1) a sustained increase in data egress (total orig_bytes in Zeek conn.log) that exceeds the 99th percentile of the pre-update 30-day baseline; (2) a sharp increase in the rate of new, unique destination IP addresses contacted per hour; or (3) a statistically significant change in the distribution of connection protocols or destination ports.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM platform logs, network flow data from internet gateways, traffic mirrored from corporate Wi-Fi controllers, and logs from cloud access security brokers (CASBs) or secure web gateways (SWGs) that proxy mobile traffic.",
            "action": "SYMBOLIC: Using MDM logs to define the application version, device set, and update time, create a watch list. Query Zeek logs for all connections from this watch list post-update. Compare all destination domains and IPs against a threat intelligence feed of known malicious mobile infrastructure. Generate a high-priority alert on any match. STATISTICAL: For each application, maintain a 30-day rolling baseline of hourly network metrics, including the 99th percentile for total orig_bytes and the count of unique destination IPs. Alert if the post-update application traffic exceeds these percentile thresholds for more than two consecutive hours. Additionally, use a two-sample Kolmogorov-Smirnov (K-S) test to compare the distribution of connection durations from the 24-hour pre-update period with the 24-hour post-update period. A p-value below 0.01 indicates a statistically significant change in traffic patterns warranting investigation. MACHINE LEARNING: For each application, train a time-series forecasting model (e.g., Prophet or LSTM) on key aggregate metrics (e.g., total data volume, DNS query rate, unique IP count). After an update, feed the actual observed metrics into the model. If the observed values consistently fall outside the model's predicted confidence interval (e.g., 99% interval), it signals an anomaly. This can detect subtle, sustained changes characteristic of low-and-slow data exfiltration or periodic C2 beaconing."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]