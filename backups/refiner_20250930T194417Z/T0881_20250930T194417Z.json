[
  {
    "information_requirement": "Is the adversary attempting to inhibit critical ICS processes or response functions by stopping services? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0881",
        "name": "Service Stop",
        "evidence": [
          {
            "description": "A process creation event (Windows Event ID 4688 or Sysmon Event ID 1) is recorded, where the command line explicitly invokes a service stop utility (e.g., 'sc.exe stop', 'net.exe stop', 'Stop-Service', 'taskkill.exe'). This command targets a service designated as critical for ICS operations. The process creation event is immediately followed, within a 15-second window on the same host, by a Windows Event ID 7036 confirming the service has entered a 'stopped' state.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Application Servers, Domain Controllers, and Jump Servers within the Process Control Network (PCN) or OT DMZ.",
            "action": "1. Symbolic Logic:\na. Maintain a watchlist of critical ICS service names (ICS_CRITICAL_SERVICES) and a list of approved administrative accounts (ADMIN_ACCOUNTS).\nb. Create a detection rule that triggers when a Windows Event ID 4688 or Sysmon Event ID 1 is observed with a ProcessName of 'sc.exe', 'net.exe', 'powershell.exe', or 'taskkill.exe' AND a CommandLine argument containing 'stop' or '/F' targeting a service in ICS_CRITICAL_SERVICES.\nc. Correlate this event with a subsequent Windows Event ID 7036 on the same host for the same service name, with a status of 'stopped', occurring within 15 seconds.\nd. Generate a high-severity alert if the initiating user is NOT in ADMIN_ACCOUNTS or if the event occurs outside of a scheduled maintenance window. The alert must contain: Hostname, Service Name, Initiating User, Full Command Line, and timestamps for both events.\n2. Statistical Method:\na. For each host and critical service, establish a 90-day baseline of service stop events (Event ID 7036) initiated by command-line utilities (correlated with Event ID 4688/Sysmon 1). Profile the baseline by User, Parent Process, time of day, and day of week.\nb. For each new correlated service stop event, calculate a Z-score for its timing against the historical distribution for that day of the week. Also, flag if the User or Parent Process has never initiated a stop for this service before.\nc. Generate a medium-severity alert if the Z-score for the event time exceeds 3.0 or if the stop is initiated by a novel user/parent process combination. The alert should include the Z-score and the specific anomalous attribute (time, user, parent).\n3. Machine Learning Application:\na. Train an Isolation Forest model on historical (180 days) command-line arguments from service stop events (Sysmon Event ID 1). Features should be derived from the text using TF-IDF vectorization to learn the structure of normal commands.\nb. Deploy the model to score new command-line arguments in real-time. A score indicating a high degree of anomaly (e.g., in the top 1% of anomaly scores) suggests obfuscation or unusual parameter usage.\nc. Concurrently, train a One-Class SVM on features from the correlated event pair (4688/7036): user, parent process name, hour of day (cyclical), day of week (one-hot encoded).\nd. Generate a high-severity alert if the command-line model flags the command as anomalous OR the One-Class SVM flags the overall event context as an outlier. Include the anomaly score from the triggering model."
          },
          {
            "description": "A critical ICS service stops (Windows Event ID 7036) within 5 minutes of one or more inbound network connections (Zeek conn.log) to the host. The preceding network activity is anomalous, characterized by connections from previously unseen source IPs, use of non-standard ports for remote administration, or data transfer volumes that are statistical outliers compared to the host's 30-day historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 7036",
              "Zeek dce_rpc.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at key ingress/egress points of OT network segments, OT DMZ, and span ports monitoring traffic to critical control system hosts (e.g., EWS, HMIs, Historians).",
            "action": "1. Symbolic Logic:\na. For each Windows Event ID 7036 'stopped' event on a critical host, query Zeek conn.log and dce_rpc.log for records in the 5 minutes prior where the destination IP matches the host.\nb. Search for connections where the source IP is from a non-corporate or untrusted subnet, OR the destination port is a remote administration port (e.g., 3389, 5985, 445) not originating from a designated jump server or administrative subnet.\nc. Specifically check dce_rpc.log for operations related to the Service Control Manager (e.g., 'scmr') that coincide with the connection.\nd. Generate a high-severity alert if a service stop is preceded by a connection matching these criteria, including: Hostname, Service Name, Source IP, Destination Port, Protocol, and DCE/RPC operation (if available).\n2. Statistical Method:\na. For each critical host, establish a 30-day baseline of inbound network connection properties from Zeek conn.log, including: frequency distribution of source IPs, destination ports, and protocols; and the 95th percentile for 'orig_bytes' and 'resp_bytes'.\nb. When a critical service stop (Event ID 7036) occurs, analyze all inbound connections to that host from the preceding 5 minutes. For each connection, assign an anomaly score: +1 if source IP is in the bottom 5% of frequency, +1 if destination port is in the bottom 10% of frequency, +2 if 'orig_bytes' or 'resp_bytes' exceeds the 95th percentile.\nc. In parallel, calculate the Shannon entropy of source IPs connecting to the host in the 5-minute window. A significant drop in entropy compared to the historical baseline may indicate a single anomalous actor.\nd. Generate a medium-severity alert if any single connection's score exceeds a threshold of 3, or if the source IP entropy drops by more than 50% from its baseline. Include the score and contributing factors.\n3. Machine Learning Application:\na. For each critical host, train an autoencoder neural network on 60 days of historical Zeek conn.log data. Use features like source IP (embedded), destination port, protocol, duration, orig_bytes, resp_bytes, and conn_state.\nb. When a service stop (Event ID 7036) occurs, process all preceding 5 minutes of connection logs through the trained autoencoder to get a reconstruction error for each connection.\nc. A high reconstruction error indicates the connection is anomalous compared to the learned normal patterns. Generate a high-severity alert if any connection's reconstruction error is in the 99.5th percentile of historical errors. The alert should detail the connection parameters and its anomaly score, linking it to the subsequent service stop."
          },
          {
            "description": "A critical ICS service transitions to a 'stopped' state (Windows Event ID 7036), but this event is not preceded within a 60-second window by any corresponding process creation event (Windows Event ID 4688 or Sysmon Event ID 1) for known service control utilities. The absence of a legitimate initiating command and a corresponding crash event (Windows Event ID 7034) suggests a direct API call, potentially from a malicious implant or script.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 7034"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint logging on critical ICS assets including Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers and other critical application servers.",
            "action": "1. Symbolic Logic:\na. Create a rule that triggers on Windows Event ID 7036 where the service name is in the ICS_CRITICAL_SERVICES list and the new status is 'stopped'.\nb. Upon trigger, perform a negative search on the same host for any Windows Event ID 4688 or Sysmon Event ID 1 in the preceding 60 seconds where the command line contains 'sc stop', 'net stop', 'Stop-Service', etc. for the same service.\nc. Also perform a negative search for Windows Event ID 7034 (service crash) for the same service in the preceding 60 seconds.\nd. If a service stop occurs with no associated command-line invocation and no crash event, generate a high-severity alert for a 'spontaneous' service stop, potentially indicating API-level manipulation.\n2. Statistical Method:\na. For each host and critical service, establish a 90-day baseline of 'spontaneous' stops (as defined by the symbolic logic). Calculate the mean and standard deviation of these events per hour.\nb. Monitor the hourly count of spontaneous stops. Generate a medium-severity alert if the count for any given hour exceeds the mean by more than 3 standard deviations (a Z-score > 3).\nc. The alert should contain the hostname, service name, the count of unexplained stops in the last hour, and the calculated Z-score.\n3. Machine Learning Application:\na. For each critical service, train a time-series forecasting model (e.g., SARIMA or Prophet) on the historical hourly count of 'spontaneous' stops to learn its normal rhythm, including any daily or weekly seasonality.\nb. In real-time, compare the actual count of spontaneous stops per hour against the model's forecast.\nc. Generate a high-severity alert if the actual count falls outside the model's 99% confidence interval for the forecast. This method is more robust than a simple standard deviation approach as it accounts for trends and seasonality in normal operations. The alert should include the forecast value, the actual value, and the confidence interval bounds."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]