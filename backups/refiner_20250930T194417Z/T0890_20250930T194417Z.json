[
  {
    "information_requirement": "Is an adversary exploiting vulnerabilities to escalate privileges on critical ICS assets like Engineering Workstations or HMIs? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0890",
        "name": "Exploitation for Privilege Escalation",
        "evidence": [
          {
            "description": "An anomalous child process (e.g., cmd.exe, powershell.exe, whoami.exe) is spawned by a legitimate, high-privilege ICS application process (e.g., HMIServer.exe, OPCServer.exe) on a critical asset. This parent-child relationship is absent from a historical baseline, and the parent process is confirmed to be running with elevated privileges (e.g., SYSTEM integrity level).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, and OPC Servers within the Process Control Network (PCN) and Manufacturing Zone (MZ).",
            "action": "1. Symbolic Logic: Create a SIEM rule that triggers when a Windows Event ID 4688 or Sysmon Event ID 1 is generated where: (ParentProcessName IN [ics_app_allowlist]) AND (NewProcessName IN [suspicious_utility_watchlist]) AND (TokenElevationType is '%%1936' OR IntegrityLevel is 'System'). The ics_app_allowlist contains executables for approved ICS applications. The suspicious_utility_watchlist includes command shells, scripting engines, and known hacking tools (e.g., cmd.exe, powershell.exe, pwsh.exe, whoami.exe, net.exe, psexec.exe). Alert on any match, including hostname, user, parent process, child process, and command line. 2. Statistical Method: For each ICS asset, build and maintain a 90-day rolling baseline of unique (ParentProcessName, NewProcessName) tuples from all process creation logs. For each new event, check if the tuple exists in the host's baseline. If the tuple is new for that host, calculate its global rarity across all ICS assets. Generate a medium-priority alert if a new tuple appears. Escalate to high priority if the child process is also globally rare (e.g., seen on less than 5% of assets in the last 90 days). 3. Machine Learning: Deploy a pre-trained Isolation Forest or One-Class SVM model that has learned the normal patterns of process creation events (parent, child, command line arguments) from a clean 90-day baseline of ICS asset logs. Continuously score new process creation events in real-time. An event receiving an anomaly score in the top 1st percentile should automatically generate a high-priority alert for immediate investigation."
          },
          {
            "description": "A new service is installed (Windows Event ID 4697 or 7045) on an ICS asset, and the service's executable path points to a non-standard, user-writable directory (e.g., C:\\ProgramData\\, C:\\Users\\Public\\, C:\\Windows\\Temp\\). Alternatively, the service name appears randomly generated, and it is configured to run with high privileges (e.g., LocalSystem account).",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers, OPC Servers, and other critical Windows-based ICS infrastructure components within the PCN/MZ.",
            "action": "1. Symbolic Logic: Create a SIEM rule that triggers on Windows Event ID 4697 or 7045 where: (ServiceAccount is 'LocalSystem' OR ServiceAccount is 'NT AUTHORITY\\SYSTEM') AND ( (ServiceFileName path matches regex for user-writable locations like '^C:\\\\(Users\\\\.*|ProgramData|Windows\\\\Temp)') OR (ServiceFileName is NOT IN [approved_service_exe_allowlist]) ). Alert on any match, including hostname, service name, service executable path, and user account. 2. Statistical Method: For every new service creation event, calculate the Shannon entropy of the ServiceName and the executable filename from the ServiceFileName path. Compare these values against a pre-computed baseline distribution of entropy scores from all known-good services in the ICS environment. Generate a medium-priority alert if the entropy of either the name or filename exceeds the 95th percentile of the baseline, indicating probable randomization used to evade detection. 3. Machine Learning: Train a Random Forest or Gradient Boosting classifier using features extracted from service creation events (4697, 7045, Sysmon 13), including: path depth of ServiceFileName, entropy of ServiceName, character distribution of ServiceFileName, ServiceType, ServiceStartType, and ServiceAccount. Use a labeled dataset of 'benign' and 'malicious' service installations from threat intelligence and sandboxing. Deploy the model to score new service creations in real-time. A prediction probability for the 'malicious' class greater than a tuned threshold (e.g., 0.90) should generate a high-priority alert."
          },
          {
            "description": "A network connection from a critical ICS asset to a rare external destination (IP or domain) or an internal file transfer of an executable is observed, followed within a 2-minute window by a host-based indicator of privilege escalation on the same asset. The host-based indicator can be an anomalous process creation or a suspicious new service installation.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek smb_files.log",
              "Zeek files.log",
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 7045",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting EWS, HMIs, and servers within the PCN/MZ; industrial demilitarized zones (IDMZ) and network gateways connecting the PCN to enterprise IT networks.",
            "action": "1. Symbolic Logic: Create a correlation rule that joins network and host logs by IP address and a 120-second time window. The rule triggers when: (Event A: Zeek conn.log shows a connection from an ICS asset to a non-RFC1918 IP not on a domain/IP allowlist OR Zeek files.log/smb_files.log shows an executable file transfer to an ICS asset) is followed by (Event B: A high-priority alert for anomalous process creation or suspicious service installation fires for the same ICS asset). Escalate the combined findings as a critical incident. 2. Statistical Method: Maintain a 90-day rolling baseline of (destination_ip, destination_port) tuples from Zeek conn.log and a baseline of queried domains from Zeek dns.log for each critical ICS asset. Flag any new connection or DNS query whose tuple/domain is not in its respective baseline as a 'rare network event'. If a 'rare network event' occurs, initiate a 2-minute monitoring window for the source host. If any medium or high-priority host-based alert is generated for that host within the window, correlate the events and escalate to a high-priority investigation. 3. Machine Learning: Implement a risk-based alerting (RBA) framework. Ingest alerts from all detection sources (process anomaly model, service anomaly model, rare network event model) as individual risk events. For a given entity (e.g., a specific HMI or EWS), aggregate the risk scores of all associated events over a rolling 5-minute window. Use a formula like $$ TotalRisk = \\sum(EventScore * EventWeight) $$. If the aggregated $$ TotalRisk $$ for an entity crosses a critical threshold, generate a single, high-fidelity composite alert that presents all the correlated evidence to the analyst."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]