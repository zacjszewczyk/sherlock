[
  {
    "information_requirement": "Is an adversary attempting to impact our industrial process by denying operator control? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0813",
        "name": "Denial of Control",
        "evidence": [
          {
            "description": "A sudden, sustained increase (e.g., 5x the 99th percentile of a 5-minute rolling average) in connection attempts or byte volume (orig_bytes, resp_bytes) to a critical ICS device IP (e.g., PLC, RTU), as observed in Zeek conn.log. This increase is accompanied by a concurrent spike in connection states indicative of resource exhaustion ('S0', 'REJ', 'RSTO'), a drop in source IP entropy (indicating a low-number-of-sources flood), and targets known ICS protocol ports (e.g., 502/TCP for Modbus, 20000/TCP for DNP3, 102/TCP for S7Comm).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary points of Level 1 (Control) and Level 2 (Supervisory) ICS network segments, including firewalls and network taps monitoring traffic to PLCs, RTUs, HMIs, and SCADA servers.",
            "action": "1. Symbolic Logic: Define a list of critical ICS device IPs (`Critical_ICS_Assets`) and a whitelist of authorized external IPs (`External_Comms_Whitelist`). Create a rule that triggers if an IP not in `External_Comms_Whitelist` initiates more than 100 connections with a `conn_state` of 'S0', 'REJ', or 'RSTO' to a single IP in `Critical_ICS_Assets` within a 60-second window. The rule should also check if the `id.resp_p` matches common ICS ports (e.g., 502, 20000, 102, 44818 for EtherNet/IP). 2. Statistical Method: For each IP in `Critical_ICS_Assets`, establish a 30-day baseline of 5-minute rolling averages for `connection_count`, `sum(orig_bytes)`, and the Shannon entropy of source IPs ($$ entropy(id.orig_h) $$). Generate an alert if, for a given asset, the `connection_count` or `sum(orig_bytes)` exceeds its 99th percentile by a factor of 5, AND the $$ entropy(id.orig_h) $$ drops below its 10th percentile simultaneously for at least two consecutive 5-minute intervals. This indicates a high-volume flood from a small number of sources. 3. Machine Learning: Train a time-series anomaly detection model (e.g., LSTM-based autoencoder) on a feature set aggregated per minute for each critical ICS asset. Features should include: $$ log_{10}(sum(orig\\_bytes)) $$, $$ log_{10}(connection\\_count) $$, $$ entropy(id.orig\\_h) $$, $$ entropy(id.orig\\_p) $$, $$ ratio\\_S0\\_conns $$, $$ ratio\\_REJ\\_conns $$. Train the model on at least 30 days of normal operational data. Alert when the model's reconstruction error (anomaly score) for a given asset exceeds a threshold (e.g., 3 standard deviations above the mean error) for more than 3 consecutive minutes."
          },
          {
            "description": "Observation of high-risk ICS control commands (e.g., Modbus 'Write' functions, S7Comm 'Stop CPU', DNP3 'Operate') targeting critical PLC/RTU IPs. The activity is considered anomalous if it originates from an unauthorized source (user, workstation, or process), occurs at an unusual time, or follows an atypical command sequence. For example, a 'Stop CPU' command sent from a workstation not on the authorized EWS list, or by a user account that has never issued such a command before.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek dnp3.log",
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, and network taps monitoring Level 2 (Supervisory) to Level 1 (Control) network traffic, as well as Active Directory/Identity Management systems for user authentication.",
            "action": "1. Symbolic Logic: Maintain a dynamic whitelist of (Authorized_User, Authorized_Workstation_IP, Authorized_Process_Name, Target_PLC_IP, Allowed_Command_Type) tuples. Create a rule that queries Zeek protocol logs (modbus.log, s7comm.log) for high-risk commands (e.g., Modbus function codes 5, 6, 15, 16; S7Comm PDU type 'Job' with function 'CPU Functions' and subfunction 'STOP'). Correlate the `id.orig_h` with Windows logon (EID 4624) and process creation (EID 4688) events to identify the user and process. Alert immediately if a high-risk command is issued by a combination of user, workstation, and process not found in the authorized whitelist. 2. Statistical Method: For each authorized (User, Workstation, Target_PLC) triplet, baseline the frequency and n-gram (n=3) sequences of issued commands over the past 90 days. Calculate the probability of each 3-command sequence. Also, baseline the typical time-of-day and day-of-week for command issuance. Alert if a user issues a command sequence with a probability below the 1st percentile of their historical activity, or if a high-risk command is issued more than 2 standard deviations outside their typical operational hours. 3. Machine Learning: Implement a UEBA model using unsupervised clustering (e.g., DBSCAN) to group historical ICS command sessions. A session is a sequence of commands from a single user/workstation to a single PLC within a defined time window (e.g., 15 minutes). Features for each session should include: `count_of_commands`, `ratio_of_read_vs_write_commands`, `entropy_of_command_types`, `mean_inter_command_time`, and a categorical feature for the user/workstation pair. Alert when a new command session is classified as an outlier (noise point) by the DBSCAN model, indicating a significant deviation from all previously established normal behavior clusters."
          },
          {
            "description": "Repeated crashes (Windows Event ID 1000) or hangs (Windows Event ID 1002) of HMI/SCADA client software on an operator workstation, temporally correlated with anomalous network activity. The preceding network traffic (within 60 seconds of the crash/hang) exhibits characteristics of a targeted exploit or fuzzing attempt, such as a high rate of connections from a single source, traffic with high payload entropy, or receipt of unexpected file types (e.g., executables, scripts) on the HMI workstation.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Operator workstations (Level 2), Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), and network taps monitoring traffic to and from these critical endpoints within the ICS network.",
            "action": "1. Symbolic Logic: Create a rule that triggers on Windows Event ID 1000 or 1002 where the `Faulting_Application_Name` is in a defined list of HMI/SCADA executables. Upon trigger, perform a retroactive query on Zeek logs for the 5 minutes preceding the event timestamp, targeting the affected workstation's IP. Generate a high-severity alert if the query finds: (1) an inbound connection from an IP on a threat intelligence blocklist; (2) an entry in `files.log` showing an executable (`.exe`, `.dll`, `.ps1`) being transferred to the workstation from an untrusted source; or (3) `dce_rpc.log` or `rdp.log` activity from an unauthorized source IP. 2. Statistical Method: When an HMI software crash (EID 1000/1002) is detected, analyze the preceding 5 minutes of network traffic to that host from Zeek's `conn.log`. For each source IP (`id.orig_h`), calculate the Shannon entropy of the `orig_bytes` field for its connections and the rate of new connections. Compare these values to a 30-day rolling baseline for that specific source-destination pair. Alert if the payload entropy for a source IP exceeds its 99th percentile, or if the connection rate exceeds its 99th percentile by a factor of 10, indicating potential fuzzing or a rapid connection-based attack. 3. Machine Learning: Train a supervised classification model (e.g., Gradient Boosting) to predict the likelihood that a given 60-second window of network traffic will cause an HMI crash. Label historical data by identifying HMI crash events and tagging the preceding 60 seconds of network traffic to that host as 'malicious' (1) and random 60-second windows during normal operation as 'benign' (0). Features should include statistics derived from `conn.log` for that window: `total_bytes`, `connection_count`, `avg_duration`, `entropy_of_source_ips`, `entropy_of_destination_ports`, `ratio_of_rejected_connections`. Deploy the model to score live traffic to HMIs in real-time and alert when the predicted probability of a crash exceeds a high threshold (e.g., 0.90)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]