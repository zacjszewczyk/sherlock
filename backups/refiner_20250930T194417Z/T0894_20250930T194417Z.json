[
  {
    "information_requirement": "Is an adversary using trusted host or application binaries to execute malicious commands or payloads on ICS systems? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0894",
        "name": "System Binary Proxy Execution",
        "evidence": [
          {
            "description": "The command-line arguments of a process creation event (Windows Event ID 4688) for a whitelisted ICS application or a standard Windows binary (e.g., `rundll32.exe`, `wscript.exe`, `cscript.exe`) contain one or more of the following: base64 encoded strings, references to remote file hosting (http://, https://), UNC paths to untrusted shares, or have a Shannon entropy score exceeding a baseline threshold (e.g., > 4.5), indicating obfuscation or non-standard execution.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Data Gateways within the OT network, and Jump Hosts used for remote OT access.",
            "action": "1. Symbolic Logic (Keyword & Pattern Matching): Create and maintain a watchlist of suspicious command-line keywords (e.g., 'powershell -enc', 'cmd /c', 'mshta', 'regsvr32 /s /i:', 'javascript:') and untrusted network path patterns (e.g., `http://`, `\\\\<untrusted_ip>`). Continuously query Windows Event ID 4688 logs from designated NAIs. Generate an alert when the `CommandLine` field for a trusted process (e.g., `HMI_App.exe`, `rundll32.exe`) matches an entry on the watchlist.\n2. Statistical Method (Entropy & Length Analysis): For each unique trusted process name, establish a 30-day rolling baseline for its command-line argument length and Shannon entropy using Windows Event ID 4688 data. Calculate the 99th percentile for both metrics. For each new process creation, calculate the entropy and length of its command-line arguments. Generate an alert if either metric for a trusted process exceeds its established 99th percentile, indicating an anomalously complex or long command.\n3. Machine Learning (Classification Model): Develop a text classification model (e.g., Logistic Regression using TF-IDF features) trained on a labeled dataset of benign and malicious command-line arguments specific to the ICS environment. For each new process creation event (Windows Event ID 4688), extract the `CommandLine` text and apply the model. Alert on any command line classified with a high probability of being malicious, especially for processes that typically have simple or no arguments."
          },
          {
            "description": "A whitelisted ICS application or a standard Windows system binary (e.g., `svchost.exe`, `WmiPrvSE.exe`) initiates an outbound network connection, observed by correlating the Process ID from Windows Event ID 4688 with a network flow in Zeek conn.log. The connection is anomalous if it targets an IP address external to the defined OT/IT network address space, uses a protocol inconsistent with the process's function (e.g., an HMI application using FTP), or communicates with a domain whose name has high entropy or is newly observed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (e.g., Control Network, Process Network), Industrial Demilitarized Zone (IDMZ), SCADA Firewalls, and network taps at key egress/ingress points.",
            "action": "1. Symbolic Logic (Network Whitelisting & IOCs): Maintain a strict whitelist of approved destination IP addresses/subnets and required protocols for each critical ICS application. Correlate Windows Event ID 4688 with Zeek conn.log data by Process ID, source IP, and timestamp. Generate an alert if a whitelisted process communicates with a destination IP or uses a destination port/protocol not on its explicit whitelist. Concurrently, compare destination IPs and DNS query names (from Zeek dns.log) against a threat intelligence feed of known malicious indicators.\n2. Statistical Method (Rarity & Frequency Analysis): For each trusted process, profile its typical network behavior using Zeek logs over a 30-day baseline period. Calculate the frequency of destination ports, protocols, and JA3 TLS fingerprints (from Zeek ssl.log). Alert when a trusted process initiates a connection using a port, protocol, or JA3 hash that is new or falls within the bottom 5th percentile of rarity for that process. Additionally, monitor DNS queries (Zeek dns.log) and alert on queries for domains that are newly registered (e.g., via WHOIS lookup) or have a high Shannon entropy score, suggesting algorithmic generation.\n3. Machine Learning (Anomaly Detection): Train an unsupervised anomaly detection model (e.g., Isolation Forest or Autoencoder) on a baseline of normal network flows from Zeek conn.log. Features should include source/destination IP, port, protocol, connection duration, and bytes transferred. Apply the model to live network traffic attributed to trusted processes. Alert when the model flags a connection as a significant outlier from the established normal communication patterns, indicating potential C2 or data exfiltration."
          },
          {
            "description": "A parent-child process relationship is recorded in Windows Event ID 4688 where the parent process is a whitelisted ICS application or a critical Windows binary (e.g., `services.exe`, `lsass.exe`), and the child process is an unexpected or unauthorized executable, such as a command shell (`cmd.exe`, `powershell.exe`), script interpreter (`wscript.exe`), or a known dual-use tool (`psexec.exe`, `bitsadmin.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Historian Servers, Jump Hosts, and Domain Controllers within the OT network.",
            "action": "1. Symbolic Logic (Parent-Child Whitelisting): Develop and maintain a strict whitelist of all legitimate parent-child process relationships observed in the stable ICS environment. Query all new process creation events (Windows Event ID 4688). Generate an immediate alert if a `ParentProcessName` and `NewProcessName` pair is observed that is not on the established whitelist. For example, alert if `HMI_App.exe` spawns `powershell.exe` when its only legitimate child is `error_reporter.exe`.\n2. Statistical Method (Frequency Analysis): Over a 60-day period, build a frequency table of all unique parent-child process pairs from Windows Event ID 4688 logs. For each new process creation event, identify its parent-child pair. Generate an alert if the pair is either entirely new to the environment or is extremely rare (e.g., in the bottom 1st percentile of observed frequency), especially if the child process is a command-line interpreter or administrative tool.\n3. Machine Learning (Graph-Based Anomaly Detection): Model process execution activity as a directed graph where nodes are processes and edges represent parent-child relationships. Enrich nodes with features like process name and user context. Use a graph-based anomaly detection algorithm (e.g., GNN or PageRank-based scoring) to learn the normal topology of process execution trees. Alert on structural anomalies, such as a trusted ICS application suddenly spawning an abnormally deep or wide process tree, or becoming the parent of a node type (e.g., `cmd.exe`) it has never spawned before."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]