[
  {
    "information_requirement": "Is an adversary attempting to steal credentials on corporate mobile devices via GUI impersonation? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application's manifest, obtained from MDM scans, contains the 'android.permission.SYSTEM_ALERT_WINDOW' permission, and the application's package name and developer signing certificate hash do not match any entry in the corporate application allowlist.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile EDR Agent Application Logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Configuration Database, Mobile EDR Data Lake, and Application Inventory Store",
            "action": "1. (Symbolic) Define a high-severity alert in the SIEM that triggers when MDM logs show an application with the 'android.permission.SYSTEM_ALERT_WINDOW' permission whose package name or signing certificate hash is found on a mobile threat intelligence feed. The rule should join the MDM inventory data with the threat feed data on package name or certificate hash. 2. (Statistical) On a daily basis, execute a query against the MDM application inventory to generate a list of all applications with the 'SYSTEM_ALERT_WINDOW' permission. For each application, calculate its prevalence across the device fleet (number of installs / total devices). Flag any application not on the corporate allowlist that falls below a 5th percentile prevalence threshold for manual review as a potentially malicious, rare application. 3. (Machine Learning) For each new application installation event from the MDM, extract a feature vector from its manifest, including: count of permissions, presence of other risky permissions (e.g., BIND_ACCESSIBILITY_SERVICE, READ_SMS), number of exported activities, and presence of a receiver for BOOT_COMPLETED. Feed this vector into a pre-trained Random Forest classifier model tuned to identify mobile malware. If the model output is a 'malicious' classification with a confidence score > 0.85, automatically generate a high-priority incident ticket and trigger device isolation via the MDM."
          },
          {
            "description": "A newly installed application's display name has a Levenshtein distance of 2 or less compared to a high-value corporate or financial application (e.g., 'Okta Verify', 'Microsoft Authenticator'), while its package name and developer signing certificate hash are a mismatch with the legitimate application's known values.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "App Vetting Service Report"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Application Inventory Database and the organization's repository of vetted/approved application metadata (package names, signatures).",
            "action": "1. (Symbolic) Create and maintain a dictionary of critical applications, mapping their display names to official package names and signing certificate hashes. Deploy a SIEM rule that, on new application installation events, calculates the Levenshtein distance between the new app's display name and all names in the dictionary. If the distance is <= 2 AND the package name or certificate hash does not match the dictionary entry, trigger a critical alert for immediate investigation of suspected typosquatting. 2. (Statistical) On a scheduled basis, query the MDM inventory. For each application, calculate the Jaro-Winkler similarity of its display name against a curated list of commonly targeted app names. Flag any application with a similarity score > 0.95 whose package name is not on an allowlist for that name. Track the daily count of newly flagged applications to identify spikes that could indicate a widespread campaign. 3. (Machine Learning) Vectorize application metadata using character n-grams (n=3) from the display name, package name, and developer name. Apply a DBSCAN clustering algorithm to this feature space across all installed applications. Manually investigate any resulting cluster that has a small number of members (e.g., < 5 devices) and does not contain any pre-vetted, allowlisted applications. These small, isolated clusters may represent emerging families of malicious apps using similar naming conventions."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to collect sensitive data from users on corporate mobile devices using deceptive GUI overlays? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A sequence of events is observed on a single device within a 5-second window: 1) A Mobile EDR log indicates a sensitive application (e.g., banking, corporate SSO) is in the foreground, immediately followed by 2) an EDR log showing a non-allowlisted application with overlay permissions becoming the foreground process. This is followed within 60 seconds by 3) a Zeek conn.log entry showing a network connection from the device to an IP with a low reputation score or a DNS request in Zeek dns.log for a domain younger than 30 days.",
            "data_sources": [
              "Mobile EDR Agent Logs (Foreground App Events)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feed",
              "Passive DNS Database"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR agent data lake, Corporate VPN concentrators, Network Security Monitoring sensors (e.g., Zeek cluster at internet gateway), Threat Intelligence Platform API, and Passive DNS provider API.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that joins Mobile EDR logs with Zeek logs on the device's IP address and a rolling time window. The logic is: IF (EDR log shows app_A in foreground, where app_A is in 'sensitive_app_list') THEN trigger IF (within 5 seconds, EDR log shows app_B in foreground, where app_B has overlay permissions AND is NOT in 'allowlist') THEN trigger IF (within 60 seconds, Zeek conn.log shows connection to IP_C where IP_C is in 'threat_intel_feed' OR Zeek dns.log shows request for domain_D where domain_D registration age < 30 days). A positive result generates a critical alert. 2. (Statistical) Build a state transition matrix for foreground applications per user to establish normal app switching behavior. Identify any transition from a sensitive app to an app with overlay permissions that has a transition probability below the 1st percentile for that user. For the timestamp of such a rare transition, analyze the device's network activity in Zeek logs. Calculate the entropy of requested FQDNs in the subsequent 1-minute window. A spike in entropy > 3 standard deviations above the device's 30-day rolling average, or a DNS request to a domain in the 99.9th percentile of rarity across the enterprise, should be flagged. 3. (Machine Learning) Continuously feed a time-series of network features per device (e.g., bytes out, connection count per minute, protocol mix) into a trained LSTM autoencoder model. When a high-risk application transition (as defined in the statistical method) is detected, query the LSTM model for that device's reconstruction error at the event's timestamp. An error score exceeding the 99th percentile of the device's historical error scores indicates a significant anomaly, warranting an automated host isolation action and a high-priority SOC alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]