[
  {
    "information_requirement": "Has an adversary gained initial access by pushing a malicious update to a previously benign mobile application? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "A mobile application, within 24 hours of an update, initiates network connections to destinations that are anomalous when compared to a 30-day baseline, flagged by threat intelligence, or exhibit suspicious domain characteristics (e.g., age, name entropy, TLS fingerprint).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Mobile EDR/MDM Network Flow Logs",
              "Whois Data",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi Networks, VPN Concentrators, Cloud Access Security Broker (CASB), Managed Mobile Devices",
            "action": "1. (Correlate) For each mobile application update event from MDM/EDR logs, join with network logs (Zeek conn.log, dns.log, ssl.log) on device ID and timestamp to create a dataset of all network activity within 24 hours post-update. 2. (Symbolic) Query the destination FQDN/IP of each new connection against all available threat intelligence feeds and generate a high-severity alert on any match. Enrich destinations with Whois data and flag any domain registered within the last 90 days. 3. (Statistical) For each new DNS query in dns.log, calculate the Shannon entropy of the queried domain; alert if the score exceeds a threshold of 4.0. For each new TLS connection in ssl.log, compare its JA3 and JA3S hash against a historical set for the application; alert if a new hash appears and its prevalence across the enterprise is below the 1st percentile. 4. (Machine Learning) Apply a pre-trained time-series anomaly detection model (e.g., LSTM) to the application's egress data volume (bytes_out from conn.log). Generate an alert if observed traffic post-update falls outside the model's 95% confidence interval, indicating a statistically significant deviation from the established baseline."
          },
          {
            "description": "Following an update, a mobile application is granted a new set of permissions that either appear on a high-risk list, represent a statistically significant deviation from the previous version, or are rare for its app store category.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "MDM Compliance Logs",
              "Mobile OS permission logs",
              "App Store Category Baselines"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "1. (Extract) For each application update event identified in MDM logs, extract the pre-update and post-update permission manifests for the application. 2. (Symbolic) Compare newly added permissions against a predefined list of high-risk permissions (e.g., `android.permission.BIND_DEVICE_ADMIN`, `com.apple.developer.kernel.extended-memory-access`). Generate a high-severity alert on any match. 3. (Statistical) Calculate the Jaccard similarity index between the pre- and post-update permission sets; alert if the score is below 0.8, indicating a significant change. For each new permission, query a pre-computed baseline of permission prevalence by app store category and flag any permission found in less than 2% of apps in that category. 4. (Machine Learning) Represent the application's permission set as a one-hot encoded vector. Use a pre-trained Random Forest classifier to categorize the permission set as 'benign' or 'suspicious'. Trigger an alert if an update causes the classification to change from 'benign' to 'suspicious'."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by hiding malicious code within a legitimate application update? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "An application update is signed with a developer certificate whose thumbprint differs from all previous versions, or the certificate is newly issued, has a low-prevalence issuer, or is linked to known suspicious applications.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Application Manifest Data",
              "Certificate Transparency Logs",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "1. (Extract) For each application update event from MDM logs, extract the code signing certificate's details, including its thumbprint, subject, issuer, and validity period. 2. (Symbolic) Compare the new certificate's thumbprint against a historical database of all thumbprints used for that application ID; alert immediately on any mismatch. Concurrently, query the thumbprint against threat intelligence feeds for known malicious certificates. 3. (Statistical) Calculate a risk score for the new certificate: add points if the 'valid from' date is less than 90 days old; add points if the issuer's prevalence across all managed devices is in the bottom 5th percentile; add points if the subject name has a high Levenshtein distance from previous versions. Alert if the cumulative score exceeds a predefined threshold. 4. (Machine Learning) Apply a graph-based model where nodes represent applications, certificates, and developers. If an update connects a trusted application node to a known malicious community (e.g., via a shared certificate), flag the application as high-risk."
          },
          {
            "description": "Post-update, an application's network traffic exhibits C2 characteristics, including periodic beaconing, anomalous data egress volumes, non-standard port usage, or encrypted traffic patterns that deviate from its established 30-day baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek files.log",
              "Mobile EDR/MDM Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi Networks, VPN Concentrators, CASB, Managed Mobile Devices",
            "action": "1. (Baseline) For every managed mobile application, continuously create and update a 30-day rolling baseline of its network behavior, including common ports, protocols, destination domains, JA3/S hashes, data volume, and connection frequency. 2. (Symbolic) Use Zeek's protocol analyzer to identify and alert on non-TLS traffic over TCP/443. Use regular expressions to match the `server_name` field in ssl.log against known C2 FQDN patterns. Alert on any matches. 3. (Statistical) To detect beaconing, calculate the standard deviation of inter-arrival times for outbound connections from the app over a 1-hour window; a value near zero indicates periodicity and should be flagged. To detect DGA, calculate the entropy of the TLS `server_name` in ssl.log; a high entropy value (e.g., > 4.5) should be flagged. Alert if either metric exceeds the 95th percentile for that specific application's baseline. 4. (Machine Learning) Train an autoencoder on feature vectors representing normal network sessions (e.g., duration, orig_bytes, resp_bytes, proto, port). After an update, feed new session vectors into the model. A session with a high reconstruction error indicates it is anomalous and potentially C2 communication, triggering an alert."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]