[
  {
    "information_requirement": "Is an adversary collecting sensitive project files or configuration data from our ICS assets? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0807",
        "name": "Command-Line Interface",
        "evidence": [
          {
            "description": "Execution of file system enumeration or data exfiltration commands (`dir`, `copy`, `type`, `xcopy`, `robocopy`, `findstr`, `certutil -decodehex`, `bitsadmin`) by `cmd.exe` or `powershell.exe` that targets critical ICS directories (e.g., project files, configuration backups, SCADA application data) or files with sensitive extensions (e.g., `.ACD`, `.L5K`, `.SCX`, `.HMI`, `.XML`, `.INI`, `.CSV`, `.DB`). This activity is considered anomalous if the count of unique sensitive files accessed by a user or process within a rolling 5-minute window exceeds the 99th percentile of established benign baseline activity, if archiving tools (`tar`, `zip`, `7z`) are invoked via the command line, or if the parent process is unexpected for such activity (e.g., a web server process, a Microsoft Office application, or a process not on an approved administrative whitelist).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5145",
              "Zeek conn.log",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers, File Shares hosting ICS project files (e.g., .ACD, .L5K, .SCX, .HMI), and Jump Servers providing access to the OT network.",
            "action": "1. Symbolic Logic: Configure a SIEM alert for Windows Event ID 4688 (Process Creation) where `NewProcessName` is `cmd.exe` or `powershell.exe`. The `CommandLine` field must contain any of the file access keywords (`dir`, `copy`, `type`, `xcopy`, `robocopy`, `findstr`, `certutil -decodehex`, `bitsadmin`) AND target a file path ending with a sensitive ICS extension (e.g., `.ACD`, `.L5K`, `.SCX`, `.HMI`, `.XML`, `.INI`, `.CSV`, `.DB`) or a path within a pre-defined list of sensitive ICS directories. Elevate alert severity if the `ParentProcessName` is not `explorer.exe`, a whitelisted administrative tool, or if the process ancestry originates from a network-facing application (e.g., IIS w3wp.exe, Apache httpd.exe).\n2. Statistical Method: For each Engineering Workstation, HMI, and Server (NAIs), ingest Windows Event ID 4688 (Process Creation) and 5145 (File Share Access) logs. Establish a rolling 30-day baseline for each user's hourly count of unique sensitive files accessed via command-line interpreters. Calculate the 99th percentile of this baseline. Generate an alert when a user's hourly unique sensitive file access count exceeds this 99th percentile. Concurrently, monitor total data volume read from file shares (using Zeek `smb_files.log` and Windows Event ID 5145). For each user, calculate their 30-day moving average and standard deviation of hourly data transfer volume. Flag any user whose current hourly data transfer volume deviates more than 3 standard deviations from their moving average.\n3. Machine Learning: For each Windows Event ID 4688 (Process Creation) where `NewProcessName` is `cmd.exe` or `powershell.exe`, extract a feature vector including `CommandLine` length, number of arguments, character entropy of the command line, and boolean flags for the presence of known sensitive file extensions or file access keywords. Apply a clustering algorithm (e.g., DBSCAN or K-Means) to these feature vectors to identify commands that fall outside established clusters of normal administrative activity, indicating potential outliers. For time-series anomaly detection, ingest process creation logs (Event ID 4688) and apply an Isolation Forest model to the frequency of file access commands per hour, incorporating temporal features such as hour-of-day, day-of-week, and day-type (weekday/weekend) to detect statistically significant spikes."
          }
        ]
      },
      {
        "technique_id": "T0853",
        "name": "Scripting",
        "evidence": [
          {
            "description": "Execution of a script (`powershell.exe`, `python.exe`, `wscript.exe`, `cscript.exe`) that performs enumeration or reads multiple files from pre-defined sensitive ICS directories or specifically targets files with critical ICS extensions (e.g., `.ACD`, `.L5K`, `.SCX`, `.HMI`). This activity is considered highly anomalous if the script's command line or `ScriptBlockText` (for PowerShell) exhibits a character entropy score exceeding the 99th percentile of typical benign scripts, contains cmdlets or functions for data compression (`Compress-Archive`, `System.IO.Compression`), data encoding (`[Convert]::ToBase64String`), or data exfiltration, and is executed by a parent process that is not typically associated with script execution (e.g., `svchost.exe`, a web server process, or an application not on an approved whitelist).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4103",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek smb_mapping.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Process Control Servers, Configuration Management Servers, and File Servers/Shares containing ICS project or configuration files.",
            "action": "1. Symbolic Logic: Configure a SIEM rule to correlate Windows Event ID 4688 (Process Creation) for scripting engines (`powershell.exe`, `python.exe`, `wscript.exe`, `cscript.exe`) with associated Windows Event ID 4104 (PowerShell Script Block Logging) within a 5-second window. Trigger an alert if the `ScriptBlockText` (from Event ID 4104) contains known file access cmdlets (`Get-ChildItem`, `Get-Content`, `Get-Item`) AND targets file paths or extensions from a pre-defined list of sensitive ICS assets or project files. Elevate alert severity if the `ScriptBlockText` additionally contains data compression (`Compress-Archive`, `tar`, `7z`) or encoding (`[Convert]::ToBase64String`, `certutil -encode`) functions.\n2. Statistical Method: For each scripting engine process (e.g., `powershell.exe`), calculate a rolling 30-day baseline of the character entropy for the `CommandLine` field (from Event ID 4688) and the `ScriptBlockText` field (from Event ID 4104). Trigger an alert when a newly observed script's entropy score exceeds the 99.5th percentile of its respective baseline, suggesting obfuscation or packed content. Additionally, profile the daily frequency of sensitive file access cmdlet usage (e.g., `Get-ChildItem`, `Get-Content`) per user. Calculate a 30-day moving average and standard deviation for this frequency. Flag any user whose daily count of sensitive file access cmdlets deviates more than 3 standard deviations from their historical moving average.\n3. Machine Learning: Develop a supervised classification model (e.g., Random Forest or XGBoost) by training on a dataset of labeled benign and malicious script executions. Extract features from Windows Event ID 4104 (Script Block Logging) and 4688 (Process Creation), including but not limited to script block length, character entropy of the script content, presence of known malicious or sensitive cmdlets (e.g., `Invoke-Expression`, `IEX`), parent process name, and specific command-line arguments. Deploy this model to classify new script executions in near real-time, generating alerts for high-confidence malicious classifications. For advanced relationship analysis, construct a dynamic graph where nodes represent users, processes, and sensitive files, and edges denote interactions (e.g., process execution, file access). Apply a graph-based anomaly detection algorithm (e.g., PageRank-based anomaly detection, community detection) to identify unusual subgraphs, such as a user executing a script that accesses an unusually large number of sensitive project files, followed by a new external network connection (correlated with Zeek `conn.log`), indicating potential exfiltration."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]