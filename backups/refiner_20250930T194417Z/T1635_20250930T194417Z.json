[
  {
    "information_requirement": "Is an adversary stealing application access tokens from our mobile devices to gain unauthorized credential access? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1635",
        "name": "Steal Application Access Token",
        "evidence": [
          {
            "description": "An outbound HTTP GET request from a mobile device IP address contains a URI with standard OAuth authorization parameters (`response_type`, `client_id`, `redirect_uri`), and the URL-decoded `redirect_uri` parameter value specifies a domain or URI that is not on the pre-approved corporate allowlist of OAuth callback URIs.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network egress points, including firewalls, VPN concentrators, and Cloud Access Security Brokers (CASBs) inspecting traffic from corporate Wi-Fi and VPN-connected mobile devices.",
            "action": "Step 1 (Symbolic Logic): In your SIEM, query `Zeek http.log` for traffic originating from mobile IP subnets where the `uri` field contains `redirect_uri`. For each event, extract and URL-decode the `redirect_uri` value. Generate a medium-severity alert if the domain of the `redirect_uri` is not present in the corporate allowlist of approved OAuth partners. Step 2 (Statistical Analysis): For each alerted domain from Step 1, calculate the Shannon entropy of its FQDN. Compare this value to a pre-computed baseline distribution of entropy scores for all legitimate `redirect_uri` domains observed in the last 90 days. If the score exceeds the 95th percentile ($$ P_{95} $$), escalate the alert to high, as this may indicate DGA-based redirection. Step 3 (Machine Learning): Feed features from the full HTTP request into a pre-trained logistic regression classifier to assess maliciousness. Key features include: (1) `redirect_uri` domain entropy, (2) domain age from `Zeek dns.log` or passive DNS enrichment, (3) TLD popularity, (4) URI length, and (5) number of query parameters. If the model's output probability $$ p(malicious) > 0.90 $$, escalate the alert to critical for immediate analyst investigation."
          },
          {
            "description": "A single mobile device IP address generates a DNS query or connection to a domain categorized as 'phishing,' 'malicious,' or having a low reputation score, immediately followed within a 60-second window by an HTTP request to a separate domain that initiates an OAuth authorization flow.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web proxy logs and network sensor data (e.g., Zeek) at the internet gateway; Threat intelligence platform feeds integrated with network sensors and SIEM.",
            "action": "Step 1 (Symbolic Logic): Create a SIEM correlation rule that triggers when two conditions are met by the same source IP in the mobile subnet range within 60 seconds. Condition A: A `Zeek dns.log` query or `Zeek conn.log` connection to a destination enriched by threat intelligence as malicious. Condition B: A `Zeek http.log` event where the URI contains OAuth initiation parameters (e.g., `response_type=code` or `response_type=token`). A successful correlation generates a high-severity alert. Step 2 (Statistical Analysis): For each alert from Step 1, identify the destination domain of the OAuth request. Establish a baseline of OAuth provider domains accessed per user over the last 90 days. If the alerted OAuth domain is new for that specific user and is also rare across the organization (e.g., requested by fewer than 1% of all users in the same period), increase the alert's risk score by 50%. Step 3 (Machine Learning): Employ a time-series anomaly detection model, such as an LSTM autoencoder, trained on sequences of domain category transitions from user browsing sessions. For an alerted event, create a feature vector representing the sequence (e.g., `['malicious' -> 'oauth_provider']`). If the model's reconstruction error for this sequence exceeds a dynamic threshold (e.g., 3 standard deviations above the mean error), it signifies a highly anomalous behavioral pattern. Escalate the alert to critical and trigger an automated MDM action to quarantine the device."
          },
          {
            "description": "An application installed on a corporate mobile device registers a custom URI scheme handler that conflicts with, or is confusingly similar to, a legitimate URI scheme used for authentication or other high-value services (e.g., a non-Microsoft app registering `ms-auth://`).",
            "data_sources": [
              "MDM Application Inventory Log",
              "Mobile Threat Protection (MTP) Event Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) / Unified Endpoint Management (UEM) platforms; Mobile Threat Protection (MTP) solution consoles and log repositories.",
            "action": "Step 1 (Symbolic Logic): Using your UEM/MDM platform, periodically export the application inventory for all managed devices, including the registered URI schemes for each app. Compare this list against a curated allowlist mapping legitimate URI schemes (e.g., `ms-auth://`, `fbauth2://`) to their official application bundle IDs and signing certificates. Generate a high-severity alert for any application that registers a protected scheme but does not match the official bundle ID and certificate. Step 2 (Statistical Analysis): For each newly installed application, calculate the Levenshtein distance between its display name and the names of all applications on the allowlist. A low distance (e.g., < 3) indicates high similarity. If an app has a name highly similar to a legitimate app but registers an unexpected or non-standard URI scheme, flag it for review. Step 3 (Machine Learning): Utilize a classification model (e.g., Random Forest) to classify newly installed applications as benign or malicious. Features should include: (1) application source (official app store vs. sideloaded), (2) number and type of registered URI schemes, (3) requested permissions, (4) age and reputation of the developer's signing certificate, and (5) name similarity scores from Step 2. An application classified with $$ p(malicious) > 0.85 $$ should trigger an automated MDM action to uninstall the app and block its signature."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]