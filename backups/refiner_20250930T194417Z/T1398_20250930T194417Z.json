[
  {
    "information_requirement": "Has an adversary established persistence on corporate mobile devices by modifying boot or logon initialization scripts? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1398",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A managed mobile device generates a remote attestation result where the integrity check fails. For Android devices, this is indicated by the Android SafetyNet API returning 'ctsProfileMatch: false' or 'basicIntegrity: false'. For supported Samsung devices, this is indicated by a failed attestation from the Samsung Knox Attestation API.",
            "data_sources": [
              "MDM Logs (Attestation Events)",
              "Google SafetyNet API Logs",
              "Samsung Knox Attestation Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors.",
            "action": "1. (Symbolic) Ingest MDM attestation logs into the SIEM. Create a high-severity alert that triggers immediately for any device reporting an attestation result where the 'ctsProfileMatch' field is 'false' or the 'basicIntegrity' field is 'false'. The automated alert response should place the device into a quarantined network segment via the MDM. 2. (Statistical) Using a SIEM query, group attestation failures by hour over the last 30 days to compute a baseline distribution. Generate a medium-severity alert if the count of failures for the current hour exceeds the 99th percentile of this historical data, as this could indicate a coordinated attack or a widespread platform issue. 3. (Machine Learning) For each device, enrich the attestation result with network behavior features derived from its IP address in Zeek logs over the past 24 hours: (a) Shannon entropy of requested DNS domains (dns.log), (b) ratio of failed to successful TCP connections (conn.log), (c) count of connections to IPs on a threat intelligence list, and (d) connection to a historically unseen Autonomous System Number (ASN). A logistic regression model, trained on historical incidents, can use these features to predict a probability of compromise and generate a risk score for analyst prioritization."
          },
          {
            "description": "A managed Android device reports a non-passing Android Verified Boot state during an MDM-polled health check. A 'Red' state indicates the system partition is corrupt, while a 'Yellow' state warns that a non-system partition has been modified [1].",
            "data_sources": [
              "MDM Logs (Device Health Check)",
              "MDM Logs (Policy Compliance Status)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform.",
            "action": "1. (Symbolic) Configure the MDM platform to periodically poll and log the Verified Boot status from all managed devices. In the SIEM, create a critical-severity alert that triggers for any log entry where the 'verified_boot_state' field is 'Red'. The automated response should immediately trigger an MDM action to wipe the device. 2. (Statistical) In the SIEM, plot a daily time series of the count of devices reporting a 'Yellow' state. Apply a Seasonal-Trend-Loess (STL) decomposition to the last 90 days of data to separate the trend from seasonality. Alert if the trend component shows a statistically significant increase over a 14-day period, indicating a potential systemic issue or a low-and-slow attack campaign. 3. (Machine Learning) Ingest MDM health telemetry into an Isolation Forest model to detect anomalous devices. Features should include: (a) Verified Boot state (one-hot encoded), (b) days since last OS patch was applied, (c) hours since last successful MDM check-in, (d) count of installed applications with 'sideloaded' status, and (e) a flag for 'developer mode enabled'. The model will assign an anomaly score, and devices with scores exceeding a dynamically adjusted threshold are flagged for manual review."
          },
          {
            "description": "A post-compromise forensic analysis of a mobile device's file system image reveals unauthorized or modified files within critical boot partitions. Specific paths to inspect include /system/etc/init/, /system/bin/, /vendor/etc/init/, and the contents of init.rc files.",
            "data_sources": [
              "Mobile Device Forensic Image",
              "File system metadata from forensic image",
              "Internal known-good file hash database (e.g., from NSRL)",
              "Threat intelligence feeds (e.g., VirusTotal)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage.",
            "action": "1. (Symbolic) Step 1: Acquire a physical or logical file system image from the suspect device. Step 2: Calculate SHA-256 hashes for all files in /system/etc/init/, /system/bin/, /vendor/etc/init/, and init.rc files. Step 3: Compare hashes against an internal baseline for the same device model/OS version and against external threat intelligence feeds. Any mismatch or known-bad hash is a strong indicator of compromise requiring escalation. 2. (Statistical) For all script and executable files within the target directories, calculate the Shannon entropy. Compare each file's entropy score to a pre-computed baseline distribution from known-good firmware images. Flag files with entropy scores greater than 3 standard deviations from the mean for their file type (e.g., ELF binary, shell script), as high entropy often indicates packing or encryption used to obfuscate malicious code. 3. (Machine Learning) For any non-standard or modified script files, use a pre-trained script classifier (e.g., Random Forest or Gradient Boosting). Extract features such as: (a) n-gram frequency of suspicious system calls or commands ('chmod 777', 'setenforce 0', 'pm install'), (b) presence and length of base64 or hex-encoded strings, (c) ratio of alphanumeric to total characters, and (d) file permissions. The model output provides a classification (benign, suspicious, malicious) to guide the forensic investigation."
          }
        ]
      }
    ],
    "references": [
      {
        "id": 1,
        "citation": "Android Open Source Project. (n.d.). Verified Boot. Retrieved September 29, 2025, from https://source.android.com/docs/security/features/verifiedboot"
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]