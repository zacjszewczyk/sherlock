[
  {
    "information_requirement": "Is an adversary establishing persistence on control system devices via unauthorized firmware modifications? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Zeek conn.log entries showing 'service' fields matching known firmware update protocols (e.g., 'tftp' on UDP 69, 'ftp' on TCP 21, 'ssh' for SCP/SFTP on TCP 22) where the 'id.orig_h' (source IP) is not present in the authorized Engineering Workstation (EWS) IP whitelist, OR the connection 'ts' (timestamp) falls outside of the defined maintenance schedule. This must be correlated with Zeek files.log entries indicating a file transfer to an ICS device IP ('id.resp_h') with a 'file_size' greater than 0.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek ftp.log",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) perimeter firewalls, Engineering Workstations (EWS) network segments, network switches connecting PLCs/RTUs, Demilitarized Zone (DMZ) firewalls.",
            "action": "1. Symbolic Logic: Define and maintain a reference list of authorized Engineering Workstation (EWS) IP addresses and a calendar of approved ICS maintenance windows. Configure a SIEM rule to alert on Zeek conn.log entries where the 'service' field is one of ['tftp', 'ftp', 'ssh', 'scp', 'sftp'] AND 'id.orig_h' is NOT in the authorized EWS IP list AND 'id.resp_h' is a known ICS device IP. Correlate these suspicious connections with Zeek files.log entries where 'tx_hosts' or 'rx_hosts' includes the suspicious 'id.resp_h' (ICS device IP) and 'file_size' > 0. Add a condition to the rule to trigger if the 'ts' (timestamp) of the connection or file transfer falls outside of the defined maintenance windows. Alert with high severity. 2. Statistical Method: For each known ICS device model, establish a baseline of typical 'file_size' for legitimate firmware updates from historical Zeek files.log data over the last 90 days, calculating the mean and standard deviation. For any identified file transfer to an ICS device (Zeek files.log), calculate the Z-score of its 'file_size' compared to the baseline for that device model. Alert if the 'file_size' Z-score exceeds 3 standard deviations from the historical mean, indicating an unusually large or small firmware image transfer. Additionally, calculate the inter-quartile range (IQR) of 'file_size' for legitimate updates and flag transfers where 'file_size' falls outside 1.5 * IQR from the median. 3. Machine Learning: Collect historical Zeek conn.log data for all ICS devices, focusing on 'ts', 'id.orig_h', 'id.resp_h', 'service', and 'orig_bytes'/'resp_bytes'. Develop a time-series anomaly detection model (e.g., Prophet or LSTM autoencoder) to learn normal patterns of firmware-related traffic (services: 'tftp', 'ftp', 'ssh') to and from ICS devices. Features for the model could include daily/hourly counts of connections, total bytes transferred, and unique source/destination IPs for these services. Train the model on at least 6-12 months of historical data, including known scheduled maintenance windows. Implement real-time scoring where deviations from the predicted normal range (e.g., prediction interval outside the 99th percentile) trigger an alert, indicating unscheduled or unusually high/low volume of firmware-related traffic."
          },
          {
            "description": "A sudden cessation of expected periodic network communications (e.g., Modbus/TCP, EtherNet/IP heartbeats) from a critical ICS device, identified by a gap exceeding 2 times the normal communication interval in Zeek conn.log entries, occurring within 10 minutes of a detected firmware-related file transfer or anomalous connection to that device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek enip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments where critical PLCs and RTUs reside, network taps near critical ICS assets, ICS data historian network segments.",
            "action": "1. Symbolic Logic: For each critical ICS device, define its expected periodic communication interval (e.g., 5-10 seconds for Modbus/TCP heartbeats) based on historical Zeek logs (conn.log, modbus.log, enip.log, dnp3.log). Create a SIEM rule to identify a 'communication cessation' event: no Zeek conn.log (or specific protocol log) entries for a critical ICS device for a duration exceeding 2 times its expected communication interval. Correlate this 'communication cessation' event with a preceding 'firmware-related activity' event (e.g., an alert from the previous evidence block, or a Zeek files.log entry showing a file transfer to the ICS device) within a 10-minute window. Trigger a high-severity alert if both conditions are met, indicating a potential device reboot or failure post-firmware modification. 2. Statistical Method: For each critical ICS device, calculate the 1-minute sum of 'orig_bytes' + 'resp_bytes' from Zeek conn.log over the last 30 days. Establish a baseline for each device by calculating the mean and standard deviation of these 1-minute byte volumes. Continuously monitor the current 1-minute byte volume. Alert if the current volume drops below the mean minus 3 standard deviations, indicating a significant and sudden reduction in network communication. Additionally, calculate the 99th percentile of connection 'duration' for each device over a 7-day rolling window. Alert if a new connection from that device exceeds this 99th percentile, which could indicate a hung or unstable connection. 3. Machine Learning: Prepare a dataset of historical Zeek conn.log entries for critical ICS devices, including features like 'duration', 'orig_bytes', 'resp_bytes', 'state', 'service', and 'proto'. Label instances where communication cessation or device reboot occurred shortly after a known or suspected firmware modification (using change management records or prior alerts) as anomalous. Train a supervised classification model (e.g., Random Forest or XGBoost) to predict communication cessation/instability based on these features. Deploy the model to continuously analyze real-time Zeek conn.log data. Alert if the model predicts a high probability (e.g., >0.8) of communication instability or cessation, especially when correlated with recent firmware-related activity, indicating a potential adverse outcome of malicious firmware."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to impair process control by manipulating module firmware on critical PLCs or RTUs? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Windows Event ID 4688 (Process Creation) records showing the 'New Process Name' field matching known ICS firmware update utility executables (e.g., 'SiemensFirmwareUpdate.exe', 'RockwellFlashUtility.exe') where the 'Computer' field (source hostname) is not present in the authorized EWS hostname whitelist, OR the 'CommandLine' field contains an IP address of an ICS device not typically managed by that specific EWS.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) within the Process Control Network (PCN), management servers with access to the PCN, Jump Servers/Bastion Hosts.",
            "action": "1. Symbolic Logic: Define and maintain a whitelist of authorized Engineering Workstation (EWS) hostnames and a list of known legitimate firmware update utility executable names (e.g., 'SiemensFirmwareUpdate.exe', 'RockwellFlashUtility.exe') and their typical command-line parameters. Configure a SIEM rule to alert on Windows Event ID 4688 where 'New Process Name' matches a known firmware utility executable AND 'Computer' (hostname) is NOT in the authorized EWS whitelist. Additionally, for any such process creation on an EWS, examine the 'CommandLine' field for IP addresses of critical ICS devices that are not typically managed by that specific EWS, or for unusual parameters/flags. Trigger a high-severity alert if these conditions are met, indicating an unauthorized firmware update attempt. 2. Statistical Method: For each authorized EWS and known firmware utility executable, establish a baseline of normal execution frequency (e.g., daily count) and associated user accounts from historical Windows Event ID 4688 data over the last 90 days. For each execution of a firmware utility, calculate the percentile rank of the executing user's historical frequency of running that utility on that specific EWS. Alert if a user attempts to execute a firmware utility where their historical execution frequency is below the 5th percentile for that utility on that EWS, or if the EWS itself has a historical execution frequency for that utility below its 5th percentile. Additionally, use the Chi-squared test to compare the observed distribution of user accounts executing firmware utilities against the expected distribution from the baseline; a significant p-value (e.g., <0.01) indicates an anomalous shift in user behavior. 3. Machine Learning: Collect historical Windows Event ID 4688 data, extracting features such as 'Process Name', 'Parent Process Name', 'User', 'Computer', 'CommandLine arguments', and 'Process Hash'. Train an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) on this data, creating behavioral profiles for each user-host pair regarding process execution, specifically for firmware-related utilities. Deploy the model to score real-time process creation events. Alert if a firmware utility execution event receives an anomaly score exceeding a predefined threshold (e.g., top 1% of historical anomaly scores), indicating a significant deviation from the normal behavior of that user or host, even if the host is an authorized EWS."
          },
          {
            "description": "Zeek conn.log entries for critical ICS devices containing 'id.orig_h', 'id.resp_h', 'id.resp_p', 'proto', or 'service' tuples that have not been observed within the preceding 30 days of historical baseline data for that specific device, and for which no corresponding change management record exists.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) core network switches, network taps at the PCN boundary and between zones, ICS network intrusion detection systems (NIDS).",
            "action": "1. Symbolic Logic: For each critical ICS device, create and maintain a strict baseline of approved communication tuples (e.g., 'id.orig_h', 'id.resp_h', 'id.resp_p', 'proto', 'service') observed in Zeek conn.log over a 90-day period. Configure a SIEM rule to alert on any Zeek conn.log entry where the observed communication tuple for a critical ICS device is NOT present in its established whitelist. Cross-reference any such alerts with change management records to determine if the new communication is authorized. Trigger a high-severity alert if a new, unauthorized communication tuple is observed, indicating potential compromise or misconfiguration, which could be related to malicious firmware introducing new network behavior. 2. Statistical Method: For each critical ICS device, continuously monitor Zeek conn.log for unique combinations of 'id.orig_h', 'id.resp_h', 'id.resp_p', 'proto', 'service'. Over a 1-hour rolling window, calculate the count of 'new' unique communication tuples (those not seen in the preceding 30 days). Establish a baseline of this 'new tuple count' for each device, calculating the mean and standard deviation. Alert if the current 1-hour 'new tuple count' exceeds the mean plus 3 standard deviations, indicating a sudden and unusual proliferation of novel communication patterns. Additionally, calculate the Shannon entropy of the 'id.resp_p' (destination port) field for each device within 5-minute windows. Alert if the entropy score increases by more than 2 standard deviations from its 7-day rolling average, suggesting a shift towards more diverse or random port usage, potentially indicative of malicious activity or scanning. 3. Machine Learning: Collect historical Zeek conn.log data for critical ICS devices, extracting features such as 'duration', 'orig_bytes', 'resp_bytes', 'proto', 'service', 'id.resp_p', 'id.orig_h', and 'id.resp_h'. Train an unsupervised anomaly detection model (e.g., Isolation Forest, Autoencoder, or DBSCAN) on this historical data to learn the 'normal' communication patterns for each critical ICS device. Deploy the model to continuously analyze real-time Zeek conn.log entries. Flag connections with an anomaly score exceeding the 99th percentile of historical scores as highly suspicious, indicating a significant deviation from expected communication behavior, which could be a symptom of compromised firmware introducing new or malicious network traffic."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]