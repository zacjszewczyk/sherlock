[
  {
    "information_requirement": "Is an adversary leveraging standard application layer protocols (e.g., DNP3, Modbus, HTTP) for command and control within the ICS network? (PIR)",
    "tactic_id": "TA0101",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T0869",
        "name": "Standard Application Layer Protocol",
        "evidence": [
          {
            "description": "An established network connection (e.g., TCP state 'SF' or 'S1' in Zeek conn.log) using a known ICS or enterprise protocol (e.g., DNP3, Modbus, RDP, HTTP) where the destination port is not the IANA-assigned standard port for that protocol, nor an organization-approved alternate. For example, DNP3 traffic not on TCP/20000 or Modbus not on TCP/502. This is high-fidelity evidence when the connection crosses a defined IT/OT network segmentation boundary or involves an external IP address (non-RFC1918).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "IT/OT Demarcation Points (e.g., firewalls, DMZ), ICS Zone Gateways, Enterprise Network Perimeter, Internet Proxies, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, PLCs, RTUs, Jump Servers.",
            "action": "1. Symbolic Logic: Step 1: Create and maintain a lookup file (e.g., a CSV or dictionary) mapping Zeek service names to a list of approved ports (e.g., {'dnp3': [20000], 'rdp': [3389], 'modbus': [502]}). Step 2: Implement a SIEM query to process Zeek conn.log records in real-time. Step 3: Generate an alert if a connection's `service` field is in the lookup file AND its `id.resp_p` is NOT in the corresponding list of approved ports. Step 4: Escalate alert priority if `id.orig_h` or `id.resp_h` is a non-RFC1918 address or if the source and destination IPs are in different, pre-defined network zones (e.g., source in 'IT_Zone', destination in 'OT_Zone'). 2. Statistical Method: Step 1: Execute a daily query to analyze the past 30 days of Zeek conn.log. Step 2: For each unique `service`, group by `id.resp_p` and calculate the frequency count for each port used. Step 3: Identify and compile a list of statistically rare ports for each service, defined as any port falling below the 5th percentile of usage frequency. Step 4: Implement a detection rule that cross-references live connection events against this generated list of rare service-port pairings. Step 5: Trigger an alert when a new connection uses a protocol on a port identified as statistically rare, particularly if the connection involves external IP addresses. 3. Machine Learning: Step 1: Train an unsupervised anomaly detection model, such as an Isolation Forest or a One-Class SVM, on a baseline of at least 30 days of historical Zeek conn.log data. Step 2: Engineer features for the model, including: `proto` (one-hot encoded), `service` (one-hot encoded), `id.resp_p`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state` (one-hot encoded), and categorical labels for source/destination subnets. Step 3: Deploy the trained model to score new connection events in real-time or near-real-time batches. Step 4: Generate an alert when a connection receives an anomaly score exceeding a tuned threshold, indicating it is a significant outlier compared to the learned normal behavior."
          },
          {
            "description": "A measurable deviation from a learned behavioral baseline of application-layer protocol traffic. This includes: a data volume (`orig_bytes` or `resp_bytes`) exceeding the 99th percentile for a given flow; the use of anomalous DNP3 function codes not on a pre-defined allowlist for a specific master-outstation pair; or metadata, such as a URI or HTTP User-Agent, with a Shannon entropy score greater than 3 standard deviations from the mean for the source host.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), SCADA Servers, Historian Servers, Human-Machine Interfaces (HMIs), DMZ Web Servers, Process Control Networks (PCN) Segments, Enterprise Proxies, Internet Gateways, Domain Controllers, Jump Servers.",
            "action": "1. Symbolic Logic: Step 1: For each critical DNP3 master-outstation communication path (identified by source/destination IP pair), define a strict allowlist of expected `function_code` values (e.g., 'READ', 'WRITE') in Zeek dnp3.log. Step 2: Implement a SIEM rule to alert when a DNP3 transaction is logged with a `function_code` not on the allowlist for that specific communication path. Step 3: Correlate this alert by querying for process creation events (Windows Event ID 4688) on the source or destination host within a 5-minute window. Step 4: Escalate the alert if a suspicious process (e.g., powershell.exe, cmd.exe, whoami.exe) is launched by an unexpected parent process (e.g., the HMI software executable). 2. Statistical Method: Step 1: For outbound HTTP traffic from the ICS network (Zeek http.log), establish a 30-day rolling baseline for each source host (`id.orig_h`) of the 95th percentile for request body size (`orig_bytes`). Alert when a new request's size exceeds this baseline by more than 50%. Step 2: For the same traffic, calculate a rolling 30-day baseline of the mean and standard deviation of Shannon entropy for the `uri` and `user_agent` fields for each source host. Step 3: Generate an alert if a new request's URI or user-agent entropy score exceeds 3 standard deviations from that host's established mean, suggesting potential DGA or randomized C2 communications. 3. Machine Learning: Step 1: Implement a multivariate time-series anomaly detection model, such as an LSTM Autoencoder, on aggregated Zeek log data for critical ICS protocols (e.g., DNP3, Modbus). Step 2: For each master-outstation pair, create time-series vectors by aggregating metrics into 15-minute windows: count of messages, frequency distribution of function codes, average transaction duration, and total bytes transferred. Step 3: Train the model on at least 60 days of this time-series data to learn the normal operational rhythm. Step 4: Deploy the model to analyze new time windows and generate an alert when the model's reconstruction error exceeds a dynamically adjusted threshold, indicating a significant deviation from the learned process behavior."
          },
          {
            "description": "A successful remote interactive logon (Windows Event ID 4624 with Logon Type 10, indicating RDP) to an ICS asset that is anomalous based on a measurable criterion. Examples include: the 'Source Network Address' is an external IP not on an explicit allowlist; the logon occurs at a time that is more than 3 standard deviations from the user's mean logon time; or the RDP session duration exceeds the 99th percentile for that user-asset pair.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4634",
              "Zeek conn.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA Servers, Jump Servers/Bastion Hosts, Domain Controllers, Remote Access VPN Concentrators, IT/OT Demarcation Points, Active Directory Servers.",
            "action": "1. Symbolic Logic: Step 1: Maintain an explicit allowlist of authorized external source IP addresses/subnets for RDP access to the ICS environment. Step 2: Implement a high-severity SIEM alert for any successful logon (Windows Event ID 4624, Logon Type 10) where the `Source Network Address` is external (not RFC1918) and is NOT on the allowlist. Step 3: For internal RDP, maintain a baseline of authorized user-to-asset RDP connections. Alert if a user account successfully logs on via RDP to an asset they have not historically or are not explicitly approved to access. 2. Statistical Method: Step 1: For each unique user-asset pair, profile RDP logon hours using Windows Event ID 4624 from the last 90 days to establish a baseline mean and standard deviation. Alert when a new logon occurs at an hour that is more than 3 standard deviations from the mean for that pair. Step 2: Correlate logon events (Event ID 4624) with logoff events (Event ID 4634) using the `Logon ID` to calculate RDP session durations. Baseline the 95th percentile of session duration for each user-asset pair. Alert if a new session's duration exceeds this established percentile. 3. Machine Learning: Step 1: Construct a graph where nodes represent users and ICS assets. Create directed edges between nodes for each historical RDP session (from Windows Event ID 4624 and Zeek rdp.log), weighting edges with features like time-of-day, duration, and total bytes transferred. Step 2: Generate node embeddings using an algorithm like Node2Vec or GraphSAGE to capture the topological role of each user and asset. Step 3: Apply a graph-based anomaly detection algorithm (e.g., Local Outlier Factor on embeddings, or an edge-prediction model) to identify anomalous connections. Step 4: Generate an alert for new edges that are highly improbable based on the model (e.g., an HMI RDPing to a PLC controller for the first time) or existing edges with highly anomalous features (e.g., a session at 3 AM with 10x the normal data transfer)."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]