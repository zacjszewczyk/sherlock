[
  {
    "information_requirement": "Has the adversary stolen operational information from the ICS environment, such as design documents, schedules, or process data, to inform future operations or for direct mission outcomes? (Context: In the Bowman Dam incident, adversaries probed systems for operational data [1] [2])",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0882",
        "name": "Theft of Operational Information",
        "evidence": [
          {
            "description": "A single connection or aggregate of connections over one hour, originating from a critical ICS asset (e.g., Engineering Workstation, Data Historian), transfers an anomalously large volume of data (e.g., >100MB, or exceeding the 99th percentile of the historic hourly baseline) to an external or unusual internal destination. This is often accompanied by connections to newly registered domains (last 30 days), domains with high Shannon entropy (>3.5), or use of non-standard protocols for exfiltration like DNS or ICMP.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log",
              "Zeek tunnel.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT-to-IT network gateways, ICS firewalls, Engineering Workstations, Data Historians, DMZ segments, internal network segments hosting critical ICS servers, Internet egress points, SCADA network segments.",
            "action": "1. Symbolic Logic (IOC/Keyword): From network logs (Zeek conn.log), create a watch list of critical ICS asset IP addresses. Continuously query for connections where `id.orig_h` is on the watch list and `id.resp_h` matches a known malicious IP/domain from a threat intelligence feed. Separately, query Zeek dns.log for requests from the watch list to domains with a calculated Shannon entropy > 3.5 or whose registration date (via WHOIS lookup) is less than 30 days old. Also, search Zeek tunnel.log for any activity originating from the watch list, indicating potential data tunneling. 2. Statistical Method (Percentile/Std Dev): For each critical ICS asset IP, establish a 30-day rolling baseline of total outbound bytes (`orig_bytes` from Zeek conn.log) aggregated per hour. Calculate the 99th percentile for this hourly volume. Generate an alert when any hour's data transfer volume from an asset exceeds its established 99th percentile. Concurrently, baseline the count of unique destination ports per hour for each asset and alert when the count exceeds 3 standard deviations from the mean, which may indicate port scanning or unusual service usage prior to exfiltration. 3. Machine Learning (Time Series Anomaly Detection): Train a time series anomaly detection model (e.g., Isolation Forest, Seasonal-Trend decomposition using Loess) on historical network data from Zeek conn.log. Use features for each critical asset such as hourly `orig_bytes`, `resp_bytes`, `duration`, count of unique destination IPs, and protocol distribution (`proto`). Train the model on at least 60 days of data from NAIs like 'OT-to-IT network gateways'. An alert is generated when the model flags a time window with a high anomaly score, indicating a significant deviation from normal network traffic patterns indicative of bulk data transfer."
          },
          {
            "description": "The execution of an archiving or compression utility (e.g., 7z.exe, rar.exe, tar, powershell Compress-Archive) on a critical ICS asset (e.g., Engineering Workstation, HMI), where the command line includes multiple sensitive operational files (e.g., .L5K, .ACD, .ap16, .XVM) or entire project directories. The event is anomalous if initiated by a user who has never used the utility before on that asset, or if it occurs outside of scheduled maintenance windows.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, ICS Application Servers, File servers hosting project data, SCADA/HMI servers, Historian servers, PLC programming stations.",
            "action": "1. Symbolic Logic (IOC/Keyword): Query Windows Event ID 4688 (Process Creation) and PowerShell Event ID 4104 (Script Block Logging) on critical ICS assets (as defined in NAI). Search for `NewProcessName` or script content matching a list of archiving utilities (e.g., 7z.exe, rar.exe, zip.exe, tar.exe, WinRAR.exe, Compress-Archive). For any match, inspect the `CommandLine` or script block text for keywords and file extensions related to ICS projects (e.g., .L5K, .ACD, .ap16, .XVM, .hmi, .gpx, .csv, .bak, config, project, recipe, design). Trigger an alert on any match. 2. Statistical Method (Frequency/First-Seen): For each tuple of (user, hostname, process_name), establish a 90-day baseline of execution frequency from Windows Event ID 4688. Generate an alert if an archiving utility is executed by a user on a host for the first time ('first-seen' logic). Additionally, calculate the daily execution count and alert if the count for any tuple exceeds 3 standard deviations above its historical mean, indicating unusual staging activity. 3. Machine Learning (Behavioral Anomaly Detection): Develop a classification model (e.g., One-Class SVM) trained on historical Windows Event ID 4688 data from critical ICS assets. Engineer features from the events, including: parent process name, user context, time of day, day of week, and tokenized `CommandLine` arguments (e.g., count of arguments, presence of path traversal, presence of file extensions). The model learns normal process execution patterns. Generate an alert when a new archiving process execution receives a high anomaly score, indicating it does not conform to learned legitimate behavior."
          },
          {
            "description": "A single user account or process accesses an unusually high number (e.g., >50) of distinct, sensitive operational files (e.g., .L5K, .ACD, config.xml) within a 10-minute window. This behavior is considered highly anomalous if it involves a diverse set of file types (Shannon entropy of file extensions > 3.0) and deviates more than 3 standard deviations from the user's or asset's established file access baseline.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers containing operational design documents, PLC/HMI project repositories, Engineering Workstations, Historian file shares, SCADA client machines, central configuration management servers.",
            "action": "1. Symbolic Logic (IOC/Keyword): On critical file servers and workstations (see NAI), create a continuous query for Windows Event ID 4663 (An attempt was made to access an object). Filter for events where `ObjectName` matches a list of sensitive file paths or extensions (e.g., *\\\\projects\\\\*.L5K, *\\\\configs\\\\*.ACD, *recipe.json) and the `AccessList` contains read permissions (e.g., `%%4416` or `ReadData`). Correlate these events by `SubjectUserName` and `SubjectLogonId`. Alert if an account not on an 'authorized engineers' list accesses these files. 2. Statistical Method (Std Dev/Entropy): For each user on each critical asset, aggregate Windows Event ID 4663 data into 10-minute windows. Establish a 30-day baseline for two metrics: (a) the count of unique `ObjectName`s accessed, and (b) the Shannon entropy of the file extensions of those objects. Calculate the mean and standard deviation for both metrics. Generate an alert if a user's activity in any 10-minute window exceeds 3 standard deviations above the mean for either metric, indicating a 'smash and grab' collection attempt. 3. Machine Learning (User and Entity Behavior Analytics - UEBA): Implement a UEBA model that profiles normal file access patterns for each user and automated process on critical ICS assets. Use Windows Event IDs 4656 and 4663 as input. Engineer features such as file access rate (events/minute), sequence of directories traversed, distribution of access types (read/write/delete), and time of day. Train a sequence model (e.g., Hidden Markov Model or LSTM) to learn normal sequences of file access. An alert is generated when a sequence of accesses has a low probability under the model, indicating a significant deviation from learned behavior."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]