[
  {
    "information_requirement": "Is an adversary executing unauthorized code on critical ICS assets (e.g., HMI, EWS) by directly interacting with the operating system's native API? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0834",
        "name": "Native API",
        "evidence": [
          {
            "description": "Indirect evidence of native API abuse observed through anomalous process creation events on critical ICS assets. This evidence consists of a whitelisted, critical ICS application (e.g., 'HMI_Runtime.exe', 'Vendor_SCADA.exe') spawning a child process that violates a pre-defined baseline. Specific violations include: 1) The child process is an unauthorized command interpreter or scripting engine (e.g., 'cmd.exe', 'powershell.exe', 'wscript.exe'). 2) The parent-child relationship is not on an approved list (e.g., an HMI application spawning 'ftp.exe'). 3) The child process executable is unsigned, has a bad signature, or is signed by an untrusted publisher. 4) The child process is executed from a non-standard, user-writable, or ephemeral directory (e.g., '%TEMP%', 'C:\\Users\\Public\\').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMI), ICS Application Servers (SCADA/DCS), Data Historian Servers, Domain Controllers within the Process Control Network.",
            "action": "1. Symbolic Logic: On critical ICS assets, create a rule that alerts if a process event (Windows Event ID 4688) has a 'ParentProcessName' from a 'Critical ICS Application Whitelist' AND ('NewProcessName' is in {'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'ftp.exe', 'net.exe'} OR 'SignatureStatus' is not 'Valid' OR 'NewProcessPath' contains '%TEMP%' or '\\Users\\'). Additionally, monitor for Windows Event ID 4656 where a critical ICS process ('ProcessName') requests high-risk access rights (e.g., 'AccessMask' contains '0x40' for PROCESS_VM_WRITE) to another running process ('ObjectName'), which is a precursor to process injection. \n2. Statistical Method: For each 'ParentProcessName' on critical assets, establish a 30-day baseline of its child processes ('NewProcessName') and the Shannon entropy of their command lines ('NewProcessCommandLine'). Calculate the rarity of each observed parent-child pair based on its historical frequency. Generate a medium-priority alert if a parent-child pair's rarity score is in the top 1% (i.e., a statistically rare or novel event). Generate a high-priority alert if the command-line entropy for a given process deviates by more than 3 standard deviations from its historical mean, suggesting obfuscation or randomized arguments.\n3. Machine Learning: Train an Isolation Forest anomaly detection model on historical Windows Event ID 4688 data from ICS assets. Engineer features including 'ParentProcessName', 'NewProcessName', 'command_line_length', 'command_line_entropy', 'is_signed' (boolean), and 'is_in_system32' (boolean). Continuously score new process creation events. An event with an anomaly score in the 98th percentile or higher should be flagged for immediate investigation as it represents a significant deviation from normal process behavior."
          },
          {
            "description": "Indirect evidence of native API abuse observed through anomalous network communications originating from critical ICS applications. This evidence is defined as a critical ICS process, identified by correlating Windows Event ID 5156 ('Application Name') with network logs, initiating a connection that deviates from its established network baseline. Specific deviations include: 1) Using a non-industrial protocol (e.g., HTTP, HTTPS, RDP, SMB) on a network segment where only industrial protocols (e.g., Modbus, DNP3, OPC) are expected. 2) Connecting to a destination IP address ('id.resp_h') outside of the approved ICS/OT subnets or to a known malicious IP. 3) Performing a DNS query ('query') for a domain not on the organizational or ICS-specific whitelist.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at the perimeter of ICS Network Segments (Purdue Levels 2/3), Industrial Demilitarized Zone (IDMZ) egress points, DNS resolvers serving the OT environment, Internet gateway proxies.",
            "action": "1. Symbolic Logic: Correlate Windows Event ID 5156 'Application Name' with Zeek logs using the source IP and timestamp. Generate a high-priority alert if a whitelisted ICS application (e.g., 'SCADA_Server.exe') is the source of a connection where ('id.resp_p' is in {80, 443, 3389, 445} AND 'id.resp_h' is not in the internal OT subnet range) OR ('query' from dns.log is not in the 'ICS Domain Whitelist').\n2. Statistical Method: For each critical ICS application, create a 30-day rolling baseline of its network behavior. Calculate the daily count of connections, total bytes transferred ('orig_bytes' + 'resp_bytes'), and the set of unique destination ports and protocols. Use a percentile-based approach: generate an alert if an application initiates a connection using a destination port or protocol that has not been observed in its baseline history (0th percentile frequency). Also, alert if the daily data volume for an application exceeds the 95th percentile of its historical daily volumes.\n3. Machine Learning: Develop a One-Class Support Vector Machine (OC-SVM) model for each critical ICS application or application group. Train the model on a baseline of normal network traffic features from Zeek conn.log, including 'duration', 'orig_bytes', 'resp_bytes', 'id.resp_p', and a categorical representation of 'proto' and 'conn_state'. New connections from that application are then scored by the model. Connections that fall outside the learned boundary of 'normal' are flagged as anomalous, indicating potentially malicious C2 or data exfiltration activity resulting from API abuse."
          },
          {
            "description": "Indirect evidence of native API abuse observed through unauthorized file or registry modifications by a critical ICS application. This evidence is the creation, modification, or deletion of a file or registry key by a whitelisted ICS process that is outside its known operational baseline. Examples include an HMI application writing a new executable to 'C:\\Windows\\System32\\', a SCADA server modifying a Windows startup registry key ('HKLM\\...\\Run'), or a historian process altering its own binary on disk.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems and registries of critical ICS assets, including Engineering Workstations (EWS), Human-Machine Interfaces (HMI), and Application Servers. Specifically monitor critical directories ('C:\\Windows\\System32', application installation folders) and registry hives ('HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run').",
            "action": "1. Symbolic Logic: Configure SACLs and monitor Windows Event ID 4663 (Object Access Attempt) and 4657 (Registry Value Modified). Generate a high-priority alert if 'ProcessName' is a critical ICS application AND 'ObjectName' matches a sensitive target (e.g., ends with '.exe' in 'C:\\Windows\\', or key path contains '\\CurrentVersion\\Run') AND 'Accesses' includes write or delete permissions ('WriteData', 'DELETE').\n2. Statistical Method: For each critical ICS application, establish a 30-day baseline of all file paths and registry keys it accesses for write operations. For each new write event, calculate a rarity score based on the historical access frequency of the target path. For example, a path accessed thousands of times per day has a low score, while a path never seen before has a high score. Alert on any write operation where the path's rarity score exceeds the 99th percentile, indicating the process is interacting with an unusual part of the file system or registry.\n3. Machine Learning: Train a character-level Convolutional Neural Network (CNN) or an autoencoder on the file and registry paths normally accessed by each critical ICS application. The model learns the typical structure and patterns of these paths. Feed new access paths from events 4663 and 4657 into the model. Paths that result in a high reconstruction error (from an autoencoder) or are classified as anomalous (by the CNN) are flagged. This approach can detect generated or obfuscated paths that deviate syntactically from the norm."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]