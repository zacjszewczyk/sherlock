[
  {
    "information_requirement": "Is an adversary disrupting our communications by blocking or redirecting legitimate phone calls?",
    "tactic_id": "TA0034",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application manifest, for an application not on the approved communications app allowlist, contains one or more of the following high-risk permissions: `ANSWER_PHONE_CALLS`, `PROCESS_OUTGOING_CALLS`, or `MANAGE_OWN_CALLS`.",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifests (.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform managing the corporate mobile fleet.",
            "action": "1. (Symbolic) Construct and execute a query against the UEM application inventory for all installed applications. Join this data with a pre-defined allowlist of approved communication apps (e.g., native dialer, Microsoft Teams). Generate an alert for any application not on the allowlist that possesses the `PROCESS_OUTGOING_CALLS` or `ANSWER_PHONE_CALLS` permission. 2. (Statistical) Define a permission risk score where `PROCESS_OUTGOING_CALLS`=10, `ANSWER_PHONE_CALLS`=10, and `MANAGE_OWN_CALLS`=8. For each app, calculate this score based on its manifest. Within each App Store category (e.g., 'Productivity'), calculate the mean and standard deviation of these scores. Flag any application with a Z-score greater than 3.0. 3. (Machine Learning) Train a Random Forest classifier on a labeled dataset of benign and malicious application manifests. Engineer features including a binary vector of all requested permissions, the total count of permissions, the count of high-risk permissions, and categorical features for declared services, receivers, and providers in the manifest. Deploy the model to scan newly installed applications and flag any classified as 'malicious' with a confidence score above 0.8."
          },
          {
            "description": "Android Logcat events from a single device show a sequence where a `NEW_OUTGOING_CALL` intent is immediately followed by an `abortBroadcast()` call from a non-system, third-party application package within a 1-second window.",
            "data_sources": [
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregator (SIEM) collecting real-time Logcat streams from managed devices.",
            "action": "1. (Symbolic) Deploy a correlation rule in the SIEM that triggers when an `ACTION_NEW_OUTGOING_CALL` intent event is followed within 1 second by an `abortBroadcast()` event. The rule should only fire if the source package name of the abort event is not on an allowlist of system or approved telephony packages. 2. (Statistical) For each managed device, calculate a daily ratio of `abortBroadcast` calls to `ACTION_NEW_OUTGOING_CALL` intents. Maintain a 30-day rolling average and standard deviation of this ratio for each device. Alert if a device's daily ratio exceeds its own historical baseline by 3 standard deviations or the 95th percentile of the entire device fleet's ratio for that day. 3. (Machine Learning) Apply a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) to the fleet-wide count of `abortBroadcast()` events per minute. A sudden spike that the model flags as a significant anomaly, outside of normal business patterns, should trigger an investigation into the top devices contributing to the spike."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary performing audio surveillance by programmatically answering or initiating calls?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "An application's manifest contains a combination of permissions enabling surveillance, specifically: (`CALL_PHONE` or `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` or `READ_CALL_LOG`).",
            "data_sources": [
              "MDM application inventory logs",
              "Android application manifests (.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) platform and its application inventory database.",
            "action": "1. (Symbolic) Configure a high-priority alert in the UEM/MDM to trigger upon any application installation where the manifest contains the permission set (`CALL_PHONE` OR `ANSWER_PHONE_CALLS`) AND `RECORD_AUDIO` AND (`WRITE_CALL_LOG` OR `READ_CALL_LOG`). Maintain an exception list for pre-vetted applications like compliant enterprise voice recorders. 2. (Statistical) Implement a 'Spyware Potential Score' for each application. Assign weights to risky permissions (e.g., `RECORD_AUDIO`=10, `CALL_PHONE`=8, `WRITE_CALL_LOG`=5, `READ_CALL_LOG`=5). Sum the weights for each application based on its manifest. Calculate the 99th percentile score for each application category (e.g., 'Productivity', 'Social'). Alert on any application that exceeds the 99th percentile for its category. 3. (Machine Learning) Represent each application as a multi-hot encoded vector of its permissions. Apply a DBSCAN clustering algorithm to this vector space. Investigate any small, dense clusters (e.g., min_samples=3) that are not associated with known, legitimate application types. These clusters represent apps with rare and potentially malicious permission combinations."
          },
          {
            "description": "A mismatch is identified where call records present in carrier-provided Call Detail Records (CDRs) are absent from the corresponding device's call log, indicating potential call log tampering via the `WRITE_CALL_LOG` permission.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "MDM-retrieved device call logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data warehouse or SIEM containing both ingested telecom provider CDR feeds and UEM-polled device call logs.",
            "action": "1. (Symbolic) Schedule a daily automated query that performs a `LEFT JOIN` from the CDR table to the device call log table, using `device_identifier`, `call_timestamp` (with a +/- 5-second tolerance), and `destination_number` as keys. Alert on any record that exists in the CDRs but is null in the device logs. 2. (Statistical) For each device, create two sets of call records for a rolling 24-hour window: Set A from CDRs and Set B from device logs. Each record should be a tuple of (`normalized_destination_number`, `timestamp_rounded_to_minute`). Calculate the Jaccard similarity coefficient $$ J(A,B) = |A \\cap B| / |A \\cup B| $$. Alert if this coefficient drops below a threshold of 0.95 for any device. 3. (Machine Learning) Train a Poisson regression model to predict the number of device log entries (dependent variable) for a user in a 24-hour period. Use features like the number of CDR entries, the user's department, role, and historical call volume. Flag any user where the actual count of device log entries falls below the 5th percentile of the model's prediction interval, indicating potential log deletion."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using phone calls as a C2 channel?",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1616",
        "name": "Call Control",
        "evidence": [
          {
            "description": "Call Detail Records (CDRs) for a single device show a repetitive pattern of outgoing calls with a duration of less than 5 seconds, directed to a small set of destination numbers, and occurring at regular intervals (beaconing).",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Telecom provider data feeds ingested into a central SIEM or data lake.",
            "action": "1. (Symbolic) Create a real-time SIEM rule to alert on any single device that makes more than 5 outgoing calls with a duration of less than 5 seconds to the same destination number within a 1-hour period. Exclude known service numbers (e.g., voicemail, bank hotlines) from the alert logic. 2. (Statistical) For each device, ingest CDRs and filter for calls with a duration less than 5 seconds. Over a 24-hour window, calculate the Shannon entropy of the set of unique destination numbers for these short calls using the formula $$ H(X) = -\\sum_{i=1}^{n} p(x_i) \\log_2 p(x_i) $$. A low entropy score indicates low randomness. Alert on devices that are simultaneously in the top 5% for the count of short calls and the bottom 5% for destination number entropy. 3. (Machine Learning) For each device, create a dataset of calls including features `call_duration` and `time_since_last_call_to_same_number`. Apply the DBSCAN algorithm to find clusters of call events. A dense cluster (e.g., min_samples=5, eps=small value) in the region of low duration and low, consistent time-since-last-call indicates a C2 beacon."
          },
          {
            "description": "A temporal correlation is observed where a short-duration outgoing call from a device (from CDRs) is immediately followed by network traffic, such as a DNS query or TCP connection, from that same device's IP address (from Zeek logs), suggesting a call-initiated C2 callback.",
            "data_sources": [
              "Carrier Call Detail Records (CDRs)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data correlation engine (SIEM) ingesting logs from telecom providers (CDRs) and network traffic from corporate Wi-Fi access point controllers, VPN concentrators, and internet gateway Zeek sensors.",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers on a CDR entry with a call duration < 5 seconds. The rule then searches for any `Zeek dns.log` or `Zeek conn.log` entry from the device's last known IP address occurring within 10 seconds of the call's end time. Alert if the destination IP or resolved domain is on a threat intelligence feed of known C2 servers. 2. (Statistical) For each device, create two binary time series with 1-second resolution over a 24-hour period. Series A has a '1' at timestamps corresponding to the end of a short call (<5s) from CDRs. Series B has a '1' at timestamps of new outbound connections from `Zeek conn.log`. Calculate the cross-correlation function between A and B. A high correlation value at a small positive lag (e.g., 1-10 seconds) suggests calls are triggering network activity. Alert on devices with a peak correlation value exceeding a statistically significant threshold (e.g., > 0.5). 3. (Machine Learning) Ingest CDR and Zeek logs as a unified stream of time-ordered events for each device. Use a sequential pattern mining algorithm like PrefixSpan to find frequently occurring patterns within a 30-second window. Specifically search for the pattern `(event='short_call_end') -> (event='dns_query') -> (event='tcp_connection_start')`. Rank the discovered patterns by their 'lift' and investigate high-lift patterns involving domains with low prevalence across the organization."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]