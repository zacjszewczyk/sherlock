[
  {
    "information_requirement": "Is an adversary collecting call log data from our managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.002",
        "name": "Call Log",
        "evidence": [
          {
            "description": "An Android application's manifest contains the 'android.permission.READ_CALL_LOG' permission, and the application's package name and signing certificate do not match an entry on a pre-approved application allowlist, indicating an unauthorized attempt to gain access to call logs.",
            "data_sources": [
              "MDM/UEM Application Inventory Log",
              "AndroidManifest.xml",
              "Application Allowlist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) console, Cloud-based application sandbox, Corporate application store",
            "action": "1. (Symbolic) For each new application undergoing vetting: a) Parse its AndroidManifest.xml to extract all requested permissions. b) If the 'android.permission.READ_CALL_LOG' permission is present, compare the application's package name and signing certificate against the established corporate application allowlist. c) Generate a high-severity alert for SOC review if the permission is present and the application is not on the allowlist. 2. (Statistical) On a weekly basis, query the UEM application inventory to: a) Calculate the occurrence frequency of every permission across all installed applications. b) Identify permissions that fall into the 99th percentile of rarity (i.e., are requested by less than 1% of applications). c) Generate a medium-severity alert for any application that possesses a rare permission like 'android.permission.READ_CALL_LOG' for further investigation into its business justification. 3. (Machine Learning) Using a pre-trained classifier model (e.g., Random Forest) within an automated application vetting sandbox: a) Input application features including its manifest permissions, intents, services, package name structure, and app store metadata. b) If the model classifies an application requesting 'READ_CALL_LOG' as 'malicious' or 'Potentially Unwanted Application (PUA)' with a confidence score greater than 0.85, automatically block the installation and create a ticket for reverse engineering."
          },
          {
            "description": "A process on a managed Android device makes a runtime API call to the 'content://call_log/calls' URI, and the process's SHA256 hash does not match a pre-approved allowlist of executables known to require this access (e.g., the native dialer app).",
            "data_sources": [
              "Mobile EDR Process and API monitoring logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android endpoints, Unified Endpoint Management (UEM) console, SIEM platform",
            "action": "1. (Symbolic) Using a mobile EDR agent configured to monitor API access: a) Continuously monitor for runtime access to the 'content://call_log/calls' URI. b) For each access event, compare the SHA256 hash of the calling process executable against an allowlist of legitimate applications (e.g., com.android.dialer). c) Generate a high-severity alert in the SIEM if a non-allowlisted process hash attempts access. 2. (Statistical) In the SIEM, for each application on each device: a) Establish a 24-hour rolling baseline of API call frequency to the call log provider by counting access events per hour. b) Calculate the mean and standard deviation of these hourly counts. c) Generate a medium-severity alert if an application's call frequency in any given hour exceeds three standard deviations above its historical baseline, indicating abnormally frequent access. 3. (Machine Learning) Deploy a sequence analysis model (e.g., HMM or LSTM-based autoencoder) on the mobile EDR agent or in the SIEM: a) Train the model on legitimate sequences of API calls and system events for common applications. b) Analyze new event sequences in real-time. c) Flag any sequence as anomalous if a call to the call log provider is immediately followed by suspicious actions like creating a network socket, writing to external storage, or accessing encryption APIs, as this pattern has a high probability of indicating data staging and exfiltration."
          },
          {
            "description": "A managed mobile device's outbound network traffic volume exceeds its 30-day statistical baseline (e.g., 98th percentile) within 24 hours of installing an application that has the 'android.permission.READ_CALL_LOG' permission, suggesting collection followed by exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM/UEM Application Installation Event Logs",
              "Threat Intelligence Platform Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi network gateways, VPN concentrators, DNS resolvers",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when: a) An MDM/UEM log shows an application with 'READ_CALL_LOG' permission was installed on a device. b) Within the next 24 hours, a Zeek conn.log event from that same device's IP shows a connection to a destination IP listed in the integrated threat intelligence feed of known C2 servers. c) If both conditions are met, generate a critical-severity alert. 2. (Statistical) Create a scheduled SIEM query to run hourly for each device: a) Calculate the 98th percentile of hourly data upload volume (sum of orig_bytes from Zeek conn.log where id.orig_h is the device IP) over the past 30 days. b) Check if an application with 'READ_CALL_LOG' permission was installed on the device within the last 24 hours. c) If the current hour's upload volume exceeds the 98th percentile baseline and the preceding condition is true, generate a high-severity alert. d) As a secondary check, calculate the Shannon entropy of requested second-level domains in Zeek dns.log for the same device; a sharp increase in entropy post-installation strengthens the alert. 3. (Machine Learning) For each device, deploy a time-series anomaly detection model (e.g., ARIMA or Prophet) to: a) Continuously forecast the expected outbound traffic volume based on historical conn.log data. b) Generate an alert if the actual traffic volume significantly deviates from the forecasted volume (exceeds the prediction interval) following the installation of an app with 'READ_CALL_LOG' permission. c) Concurrently, use a clustering algorithm (e.g., DBSCAN) on connection metadata (destination IP/port, protocol, JA3 hash, duration, bytes sent) to identify and alert on outlier network flows that do not conform to the device's established behavior profile."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]