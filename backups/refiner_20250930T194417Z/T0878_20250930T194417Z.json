[
  {
    "information_requirement": "Is an adversary attempting to inhibit our ability to respond to a process disruption or failure? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0878",
        "name": "Alarm Suppression",
        "evidence": [
          {
            "description": "An unauthorized user or process performs a write, modify, or delete operation on a critical alarm configuration file or executable on an HMI, EWS, or SCADA server. Verification is through file system auditing logs showing the specific file path, process, user, and operation type.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4660"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Historian Servers",
            "action": "1. Symbolic Logic: 1. Define a list of critical alarm file paths (e.g., C:\\ProgramData\\SCADA\\Alarms.xml, *.db, alarm_service.exe) and a whitelist of authorized user accounts and processes. 2. Create a SIEM rule to alert on Windows Event ID 4663 (File System Access) where Object Name matches a critical file, Accesses includes 'WriteData' or 'DELETE', and SubjectUserName or ProcessName is NOT on the whitelist. 3. Create a SIEM rule to alert on Windows Event ID 4688 (Process Creation) where ParentProcessName is a command-line interpreter (e.g., cmd.exe, powershell.exe) and CommandLine contains keywords like del, move, ren, echo > targeting a critical file. 2. Statistical Method: 1. For each critical host (HMI, EWS), establish a baseline of hourly file modification counts (Event ID 4663) on the defined critical alarm files. 2. Calculate the 99th percentile of this count over a 30-day period. 3. Trigger an alert if the current hourly count exceeds this statistical threshold. 4. For processes interacting with these files (from Event ID 4688), calculate the Shannon entropy of their command-line arguments over a 1-hour window. An entropy score falling more than 2 standard deviations below the established baseline for that process suggests low-complexity, repetitive, and potentially malicious automated commands. 3. Machine Learning Application: 1. Aggregate hourly counts of Windows Event ID 4663 (modifications to critical alarm files) across all monitored ICS hosts. 2. Train a time-series anomaly detection model (e.g., Prophet, EWMA) on at least 90 days of historical data to learn normal patterns, including maintenance windows. 3. Deploy the model to identify sustained deviations from the predicted normal range (e.g., 3 consecutive data points outside the 95% confidence interval). Such anomalies indicate a potential coordinated campaign to alter alarm configurations."
          },
          {
            "description": "An anomalous or unauthorized ICS network write command (e.g., Modbus Function Codes 5, 6, 15, 16; S7Comm Write Var) is sent to a controller's specific memory address, coil, or register that controls an alarm state, threshold, or suppression flag. This is observed directly in network traffic logs.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control), DMZ for remote access to OT, Safety Instrumented System (SIS) network zones",
            "action": "1. Symbolic Logic: 1. Maintain an inventory of OT assets, mapping critical alarm-related registers/coils (e.g., Modbus Holding Register 40108 for a high-level alarm setpoint) to their respective PLCs. 2. Create a whitelist of authorized source IPs (e.g., HMIs) allowed to issue write commands to these PLCs. 3. Deploy a SIEM rule on Zeek logs (modbus.log, s7comm.log) to alert when a write function code (e.g., func_code 6, 16) originates from a non-whitelisted id.orig_h or targets a known critical alarm register. 2. Statistical Method: 1. For each unique source-destination-function code tuple, baseline the hourly frequency of write operations using 30 days of Zeek log data. 2. Alert if the current hourly frequency exceeds the 99th percentile of the baseline. 3. Separately, for each source IP, calculate the Shannon entropy of the register_address field in modbus.log over a 30-minute rolling window. A significant drop in entropy (e.g., below the 10th percentile) indicates a suspicious focus on a small set of registers. 3. Machine Learning Application: 1. Create a feature set from Zeek modbus.log and s7comm.log entries, including id.orig_h, id.resp_h, func_code, reg_addr, and the numerical value being written. 2. Train an unsupervised anomaly detection model, such as an Isolation Forest, on historical 'normal' write traffic. 3. In real-time, score each new write command. Flag commands with anomaly scores exceeding a predefined threshold, as they represent statistically rare and potentially malicious write patterns."
          },
          {
            "description": "A critical process variable (e.g., temperature, pressure), monitored via ICS network traffic, exceeds its defined alarm threshold for a sustained period, but the expected corresponding alarm event is not generated in the alarm server's application logs.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Windows Event Log (Application)",
              "Custom Application Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian Servers, Alarm & Event Servers, SCADA Servers, OT Network segments monitoring Level 1 (Basic Control) process data",
            "action": "1. Symbolic Logic: 1. Create a correlation map between process variables (e.g., Modbus Register 30001 from zeek modbus.log), their alarm thresholds (e.g., value > 80), and the expected alarm log signature (e.g., Event ID 1001 in Windows Application Log). 2. Implement a stateful SIEM correlation rule that triggers an alert if: (a) a process variable reading from Zeek logs exceeds its threshold for a defined duration (e.g., >30 seconds), AND (b) the corresponding alarm log signature is NOT found on the alarm server within a grace period (e.g., 60 seconds). 2. Statistical Method: 1. For each critical process variable, baseline the typical time delta between a threshold breach (seen in Zeek logs) and the corresponding alarm log generation. 2. Calculate the mean and standard deviation of this delay. 3. Trigger an alert if an observed delay exceeds 3 standard deviations from the mean or the 99th percentile. 4. Separately, apply a statistical process control (SPC) chart to critical process variable values. Alert on abnormally flat or static readings just below an alarm threshold. 3. Machine Learning Application: 1. Train a supervised classification model (e.g., Random Forest) to predict the probability of an alarm event based on a feature vector of recent process variable readings (e.g., 5-minute average, min, max from zeek modbus.log). 2. In real-time, if the model predicts an alarm with high confidence (e.g., >0.95) but no alarm event appears in the logs within a set timeframe, generate a 'Predicted Alarm Missed' alert."
          },
          {
            "description": "A critical alarm management service or process on an HMI, EWS, or alarm server is explicitly terminated, disabled, or crashes unexpectedly, resulting in the cessation of alarm display, logging, or notification. This is verifiable through service and process logs on the host.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 7034",
              "Windows Event ID 4697",
              "Windows Event ID 4700",
              "Windows Event ID 4701"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Alarm & Event Servers, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Domain Controllers (for Group Policy changes affecting services)",
            "action": "1. Symbolic Logic: 1. Maintain a whitelist of critical alarm-related service names (e.g., HMI_Alarm_Service.exe, SCADA_Notifier). 2. Create a high-priority SIEM alert for Windows Event ID 7036 (service stopped), 7034 (service terminated unexpectedly), or 4701 (service disabled) where the ServiceName is on the whitelist. 3. Create a rule to detect the installation of a similarly named malicious service (Event ID 4697) followed by the stoppage of the legitimate one. 4. Alert on Windows Event ID 4688 where a CommandLine contains 'taskkill', 'net stop', or 'sc stop' targeting a whitelisted service. 2. Statistical Method: 1. For each whitelisted alarm service, analyze logs (Event IDs 7036, 7034) over 60 days to baseline its normal downtime duration. 2. Calculate the 99th percentile of this downtime. 3. Trigger an alert if a service's current stopped duration exceeds this statistical threshold, indicating an abnormal outage. 4. Also, baseline the hourly frequency of stop/crash events and alert if the current frequency exceeds its 99th percentile. 3. Machine Learning Application: 1. Model the lifecycle of each critical alarm service using its state transitions (running, stopped) from Windows Event ID 7036. 2. Train a time-series anomaly detection model (e.g., a Hidden Markov Model) on at least 90 days of this state data to learn the normal sequence and duration of states. 3. Deploy the model to detect anomalous transitions, such as an unexpected 'stopped' state outside a maintenance window or a prolonged downtime that deviates from the learned pattern."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]