[
  {
    "information_requirement": "Is an adversary attempting to evade detection by masquerading malicious files as legitimate ICS software or processes? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0849",
        "name": "Masquerading",
        "evidence": [
          {
            "description": "A process creation event (Windows Event ID 4688) shows a known ICS application name (e.g., 'RSLinx.exe', 'FTView.exe') executing from a command line path that is either absent from an established whitelist of approved execution directories for that application, or originates from a directory commonly used for staging malicious files (e.g., C:\\Users\\*, C:\\Temp\\, C:\\Windows\\Temp\\, network shares).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), ICS Application Servers, Data Historians, Jump Servers within the ICS network.",
            "action": "Method 1 (Symbolic Logic): Define and maintain a strict whitelist mapping each critical ICS process name to its legitimate, full command line path(s). Ingest Windows Event ID 4688 logs from NAIs. Generate an alert if a process name from the whitelist is executed from a path not on its approved list or from a generic suspicious directory (e.g., 'C:\\Temp\\', 'C:\\Perflogs\\'). Method 2 (Statistical Analysis): For each unique process name, build a historical frequency distribution of its execution paths from the last 90 days of Event ID 4688 data. Calculate the occurrence frequency for each path. Generate an alert if a known ICS application process name executes from a path that falls below the 5th percentile of historical frequency, indicating a statistically rare execution pattern. Method 3 (Machine Learning): Train a one-class anomaly detection model (e.g., Isolation Forest) on the command line paths associated with legitimate ICS applications from historical Event ID 4688 logs. Deploy the model to score new process creation events in real-time. Investigate any event where an ICS application's execution path is flagged as an anomaly or outlier by the model."
          },
          {
            "description": "A file creation or write event (Windows Event ID 4663 with Access Mask 0x2 or 0x4) occurs within a designated critical ICS directory (e.g., project file shares, application folders), and the filename exhibits suspicious characteristics such as multiple file extensions (e.g., 'firmware.zip.exe') or a single, non-standard extension for that environment (e.g., '.vbs', '.scr', '.ps1').",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) local drives, Shared Network Drives (e.g., for project files, backups), ICS Application Servers, Data Historians.",
            "action": "Method 1 (Symbolic Logic): Enable object access auditing for write/append actions (Event ID 4663) on critical ICS file directories. Apply a rule that uses regular expressions to detect filenames with two or more extensions (e.g., '.*\\..{2,5}\\..{2,5}$'). Also, maintain a blacklist of file extensions not expected in an ICS environment (e.g., .bat, .scr, .js). Generate an alert on any match. Method 2 (Statistical Analysis): For each monitored directory, profile the file extensions from Event ID 4663 logs to establish a baseline of normal extension frequency. Calculate the Shannon entropy of all new filenames (excluding the path). Trigger an alert if a file is created with an extension that is statistically rare (e.g., <1% occurrence) for that directory or has a filename entropy score that exceeds the 95th percentile of the established baseline. Method 3 (Machine Learning): Develop a classification model trained on features extracted from filenames (e.g., n-grams, length, special characters, extension) from historical Event ID 4663 logs, labeled as 'benign' or 'malicious-like'. Deploy the model to classify new filenames in real-time within protected directories. Generate an alert for any filename classified as 'malicious-like'."
          },
          {
            "description": "A process masquerading as a common Windows system service (e.g., 'svchost.exe', 'lsass.exe') on an ICS asset initiates an outbound network connection that deviates from its established baseline. This is evidenced by correlating a Windows process permission check event (Event ID 5156) with network connection logs (Zeek conn.log) showing a connection to an unusual destination IP, port, or a domain (Zeek dns.log) that is either on a threat intelligence feed or has not been previously associated with that system process.",
            "data_sources": [
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments (Control/Process LAN, DMZ), Corporate-to-ICS DMZ, Internet Gateway (for outbound connections from ICS assets), Firewalls logging connection attempts.",
            "action": "Method 1 (Symbolic Logic): Correlate Windows Event ID 5156 (Process Name) with Zeek conn.log (id.orig_h, id.resp_h, id.resp_p) and dns.log (query). Maintain a whitelist of expected destination IPs, domains, and ports for core system processes. Generate a high-priority alert if a process like 'svchost.exe' connects to a destination not on the whitelist or a destination present on an active threat intelligence blacklist. Method 2 (Statistical Analysis): For each core system process name, establish a 30-day rolling baseline of its network behavior, including the set of unique destination IPs, destination ports, connection duration, and total bytes transferred (orig_bytes + resp_bytes from conn.log). Alert if a new connection from one of these processes involves a destination IP never seen before for that process, or if the connection's duration or data volume exceeds the 95th percentile of its historical baseline. Method 3 (Machine Learning): Train a multivariate anomaly detection model (e.g., Autoencoder) on a feature set from correlated Windows and Zeek logs (Process Name, Destination IP, Port, Protocol, Bytes, Duration, DNS Query). The model should learn the normal 'process-to-network' behavior on critical ICS assets. Deploy the model to score new connections. Flag any connection scored as a high-level anomaly for immediate investigation, especially if initiated by a common system process."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]