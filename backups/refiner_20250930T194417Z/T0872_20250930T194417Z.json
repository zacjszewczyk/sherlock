[
  {
    "information_requirement": "Is an adversary attempting to hide their presence on critical ICS hosts? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0872",
        "name": "Indicator Removal on Host",
        "evidence": [
          {
            "description": "An occurrence of Windows Event ID 1102 ('The audit log was cleared') on a critical ICS host, where the initiating user account is not on a pre-approved list of administrators or the event occurs outside a scheduled maintenance window. This indicates a probable unauthorized attempt to erase forensic evidence.",
            "data_sources": [
              "Windows Event ID 1102",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, and OT Domain Controllers.",
            "action": "1. Symbolic Logic: Create a rule that generates a critical alert for any Windows Event ID 1102 on a host tagged as 'ICS'. The rule must automatically enrich the alert by correlating the timestamp with the preceding successful logon event (Windows Event ID 4624) to identify the initiating user and session. Cross-reference the user account and timestamp against a maintained list of authorized administrative accounts and a schedule of approved maintenance windows. If the event is from an unauthorized user or occurs outside an approved window, escalate the alert priority. Further enrich with Zeek conn.log data to identify the source IP of the session, flagging connections from non-corporate or unexpected network segments. 2. Statistical Method: Establish a 90-day rolling baseline for the count of Windows Event ID 1102 per ICS host. As legitimate occurrences are exceptionally rare, any detection of this event ID constitutes a statistical anomaly exceeding the 99.9th percentile and must trigger an alert. Calculate the time difference in seconds between the Windows Event ID 1102 and the last interactive logon (Windows Event ID 4624, Logon Type 2 or 10) on the same host; a time delta of less than 300 seconds (5 minutes) significantly increases the alert's risk score. 3. Machine Learning: Deploy a User and Entity Behavior Analytics (UEBA) model trained on user, process, and host activity within the ICS environment. The model should profile normal administrative actions, including typical logon times, source IPs, and commands executed. A sudden occurrence of Windows Event ID 1102 from an account with no history of such actions, or at an anomalous time (identified by a time-series model like Isolation Forest), should be flagged as a high-risk anomaly. The alert should include a confidence score based on the model's classification output and the number of anomalous features detected."
          },
          {
            "description": "An anomalously high volume of file deletion events (Windows Event ID 4663 with 'DELETE' access mask 0x00010000) or execution of file wiping utilities (Windows Event ID 4688) targeting system log directories (e.g., C:\\Windows\\System32\\winevt\\Logs\\), ICS application log directories (e.g., C:\\ProgramData\\Wonderware\\Logs\\), or user temporary directories on an ICS host, originating from a single user account or process within a short time frame.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek fileinfo.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on Engineering Workstations, HMIs, Process Control Servers, and Historian Servers, specifically directories containing system logs (e.g., C:\\Windows\\System32\\winevt\\Logs\\), ICS vendor-specific application logs, and user profiles.",
            "action": "1. Symbolic Logic: Create a rule that generates a high-severity alert for Windows Event ID 4688 where the CommandLine field contains known log clearing or file wiping utilities or commands, such as `wevtutil.exe cl`, `del /s /q`, `sdelete.exe -z`, `cipher.exe /w`, or `fsutil usn deletejournal`, when executed against sensitive log or temporary directories. Correlate with Windows Event ID 4663 (Object Access) where the AccessMask includes 0x00010000 (DELETE) and the ObjectName path matches these sensitive directories. Escalate priority if the executing process hash has a low reputation score (e.g., from Zeek pe.log). 2. Statistical Method: For each ICS host, establish a 7-day rolling baseline for the count of file deletions (Windows Event ID 4663 with DELETE access) per user and per process, specifically within log or temporary directories. Generate an alert if the number of deletions in any 15-minute window exceeds the 99th percentile or three standard deviations above the mean for that entity. Separately, calculate the Shannon entropy of file extensions (e.g., `.log`, `.txt`, `.tmp`) deleted by a single process in a 60-second window. A sudden drop in entropy below the 5th percentile of the historical distribution suggests programmatic deletion of similar files and should trigger a correlated alert. 3. Machine Learning: Apply a time-series anomaly detection model (e.g., Prophet or LSTM) to the rate of file deletion events (Windows Event ID 4663) per ICS host. Flag anomalous spikes or sustained high rates of deletion as potential indicator removal activity. Use a clustering algorithm (e.g., K-Means or DBSCAN) to group hosts or users exhibiting similar anomalous deletion patterns, using features like deletion rate, target directory path, parent process, and time of day, to help identify coordinated campaigns."
          },
          {
            "description": "The execution of commands (Windows Event ID 4688) or file deletion events (Windows Event ID 4663) that specifically target and remove command-line history files (e.g., ConsoleHost_history.txt, .bash_history) from user profile directories on ICS hosts, particularly Engineering Workstations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories on Engineering Workstations (EWS) and other ICS hosts where operators or administrators use command-line interfaces (e.g., C:\\Users\\<user>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\).",
            "action": "1. Symbolic Logic: Create a rule that generates a high-severity alert for `(event_id=4663 AND access_mask=0x10000 AND object_name LIKE '%ConsoleHost_history.txt')` or `(event_id=4688 AND command_line CONTAINS 'del' AND command_line CONTAINS 'ConsoleHost_history.txt')`. The rule should apply to all known shell history file names. Escalate the alert's priority if the parent process is not a standard shell (e.g., powershell.exe, cmd.exe) or if the user account is not a whitelisted administrator. 2. Statistical Method: Establish a 30-day rolling baseline for the count of deletion events targeting command history files per user on each ICS host. Since legitimate deletions are extremely rare, any occurrence should trigger an alert as it exceeds the 99th percentile. Calculate the time delta between the user's most recent interactive logon (Windows Event ID 4624, Logon Type 2 or 10) and the history file deletion event. A delta of less than 120 seconds for a non-whitelisted process is a high-confidence indicator of malicious activity. 3. Machine Learning: Implement a command-line classifier (e.g., Random Forest or a deep learning model on embeddings) trained to distinguish malicious from benign commands. Features should include command line arguments (bag-of-words), command line length, entropy, parent process name, and user context. A high anomaly score for a command that deletes a history file, especially when temporally correlated with other low-confidence indicators (e.g., unusual network activity in Zeek conn.log), should trigger a high-fidelity alert for analyst review."
          },
          {
            "description": "The Windows 'EventLog' service state changes to 'stopped' (Windows Event ID 7036) or its startup type is modified to 'Disabled' (Windows Event ID 7040) on an ICS host, where the action is not correlated with a scheduled maintenance window or an authorized administrative account.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 7040",
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Service Control Manager and system services on critical ICS hosts, including EWS, HMIs, Historians, and OT Domain Controllers.",
            "action": "1. Symbolic Logic: Create a rule that generates a critical alert for `(event_id=7036 AND service_name='EventLog' AND state='stopped')` or `(event_id=7040 AND service_name='EventLog' AND new_start_type='Disabled')`. Automatically query for preceding `event_id=4688` events to find the command used (e.g., `sc.exe stop eventlog`) and `event_id=4624` to find the user. If the user is not a whitelisted administrator performing the action within a documented maintenance window, escalate the alert for immediate response. 2. Statistical Method: Establish a 1-year baseline for the count of Event ID 7036 ('EventLog' stopped) and 7040 ('EventLog' disabled) per ICS host. Any occurrence of these events outside a change-controlled maintenance window is a severe statistical anomaly (exceeding the 99.9th percentile) and must be alerted on. Calculate the time difference between the service change event and the last interactive logon (Windows Event ID 4624, Type 2 or 10); a difference of less than 60 seconds is highly suspicious. 3. Machine Learning: Implement a sequence-based anomaly detection model (e.g., an LSTM autoencoder) trained on normal sequences of service control events for the 'EventLog' service. A legitimate sequence might be 'stop -> reconfigure -> start' within a short time frame. An anomalous sequence, such as a 'stop' event not followed by a 'start' within a typical maintenance duration, or a 'disable' event with no preceding authorized activity, would be flagged with a high anomaly score, triggering a critical alert."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]