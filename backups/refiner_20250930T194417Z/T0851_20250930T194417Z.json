[
  {
    "information_requirement": "Is an adversary using a rootkit to hide their presence on ICS assets? (PIR)",
    "tactic_id": "TA0103",
    "tactic_name": "Evasion",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "Outbound network connections from an ICS host observed in network logs (Zeek conn.log) that have no corresponding process creation (Windows Event ID 4688), network connection (Sysmon Event ID 3), or network packet filtering event (Windows Event ID 5156) on the source host within a 5-second window. This unattributed network activity is a strong indicator of a process-hiding rootkit.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Historian Servers, Data Gateways/Firewalls segmenting OT networks, SCADA Servers, Process Control Servers, Domain Controllers in OT, Level 2/Level 3 Network Zones.",
            "action": "1. Symbolic Logic: For each outbound connection in Zeek conn.log, create a composite key of (timestamp, source_ip, source_port, dest_ip, dest_port). Query host logs (Sysmon Event ID 3, Windows Event ID 5156) from the source_ip for an event with the same key parameters within a +/- 5-second window. If no correlating host event is found, flag the Zeek connection as 'unattributed_network_activity'. Alert if any unattributed activity is directed to a known-bad IP address or an external destination for the first time.\n2. Statistical Method: For each critical ICS host, establish a 14-day rolling baseline of the hourly count of 'unattributed_network_activity' events. Calculate the mean and standard deviation. Generate a high-priority alert if the current hourly count exceeds 3 standard deviations above the mean. Additionally, track the set of unique destination ports for unattributed activity; alert if a port outside the 95th percentile of historically observed ports appears.\n3. Machine Learning: Train a supervised classification model (e.g., Random Forest) on a labeled dataset of correlated (legitimate) and uncorrelated (suspicious) network flows. Features should include source/destination IP, destination port, protocol, connection duration, byte counts, and a binary feature for the presence/absence of a correlating host event. Deploy the model to score new network flows in real-time, generating an alert for flows classified as 'unattributed' with high confidence."
          },
          {
            "description": "A new Windows service is created (Windows Event ID 7045) or an existing one is modified (Windows Event ID 7040) on an ICS asset with suspicious characteristics, such as a null or randomly generated service name, a binary path pointing to a temporary or user-writable directory, a missing or forged digital signature, or a service description that does not match established enterprise standards.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7040",
              "Windows Registry HKLM\\SYSTEM\\CurrentControlSet\\Services\\"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers in the OT network, Historian Servers, SCADA Servers, OPC Servers, HMI Servers, Remote Terminal Units (RTUs) with Windows OS, Programmable Logic Controllers (PLCs) with embedded Windows OS.",
            "action": "1. Symbolic Logic: Create and maintain a whitelist of approved service configurations (Service Name, Image Path, Account Name, Start Type) for each class of ICS asset. Monitor for Windows Event IDs 7045 and 7040. Generate a high-priority alert if a new or modified service's configuration does not match the whitelist. Also, alert if the 'ImagePath' points to a non-standard location (e.g., %TEMP%, %APPDATA%) or if the 'Service Name' or 'DisplayName' contains random-looking character sequences.\n2. Statistical Method: For each ICS host, calculate the Shannon entropy of the 'Service Name' and 'ImagePath' strings for all new service creation events (7045). Establish a baseline of entropy scores for legitimate services. Alert if a new service's name or path has an entropy score that falls in the top 5th percentile (i.e., is more random than 95% of legitimate services). Also, track the frequency of service modifications (7040) per host and alert if the daily count exceeds the 99th percentile of its 30-day historical distribution.\n3. Machine Learning: Develop an unsupervised anomaly detection model (e.g., Isolation Forest) trained on features extracted from legitimate service events. Features should include path depth, path entropy, service name length, service name entropy, start type (encoded), and the account used (e.g., LocalSystem, NetworkService). The model will learn a profile of normal service configurations. Score all new service creation and modification events and alert on any that are identified as strong outliers (e.g., top 1% of anomaly scores)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary using a rootkit to inhibit the response function of an ICS device? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0851",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A statistically significant increase in failed or incomplete TCP connection states ('REJ', 'RSTO', 'RSTR', 'S1', 'S2', 'S3') between supervisory control hosts (e.g., HMIs, SCADA servers) and field devices (e.g., PLCs, RTUs) on critical ICS protocol ports (e.g., 502/TCP, 102/TCP, 44818/TCP). This pattern, especially if unidirectional, suggests a rootkit is manipulating the network stack to drop or reject legitimate control packets.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting Level 2 (Supervisory Control) and Level 1 (Basic Control) devices, DMZ between IT and OT networks, Process Control Networks (PCN), Industrial Demilitarized Zones (IDMZ), Field Device Networks.",
            "action": "1. Symbolic Logic: Continuously monitor Zeek conn.log for connections on key ICS ports. Generate a medium-priority alert if a unique source-destination pair between a supervisory host and a field device accumulates more than 10 connections with a state of 'REJ', 'RSTO', or 'RSTR' within a 60-second window. Escalate to high priority if connections show orig_bytes > 0 but resp_bytes = 0 and the state is 'RSTO' or 'S1', indicating the target is unresponsive.\n2. Statistical Method: For each critical host-device pair and protocol, establish a 30-day baseline of the distribution of Zeek 'conn_state' values in 5-minute windows. Calculate the Shannon entropy of this distribution. A healthy, stable connection should have very low entropy (dominated by 'SF' state). Generate a high-priority alert if the connection state entropy for a given pair increases by more than 2 standard deviations from its baseline, indicating an abnormal mix of failed, reset, or incomplete connections.\n3. Machine Learning: Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) that processes sequences of connection metrics between specific host-device pairs. Features for each time step (e.g., 1 minute) should include the count of each connection state ('SF', 'REJ', 'S0', etc.), total bytes, and total packets. The model learns the normal 'rhythm' of communication. Alert when the model's reconstruction error for the live traffic exceeds a dynamically adjusted threshold, indicating the current communication pattern is anomalous and potentially disrupted."
          },
          {
            "description": "Repeated crashes (Windows Event ID 1000) of a critical HMI or SCADA application on an operator workstation, where the 'Faulting module path' points to a low-level system driver (e.g., tcpip.sys, afd.sys) and the crash time correlates within a 10-second window to network communications with a specific field device (PLC/RTU) on an ICS protocol port, as seen in Zeek conn.log. This suggests a rootkit is corrupting data or I/O operations, leading to application instability.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Operator Workstations, SCADA Engineering Workstations, Process Control Workstations, Remote Access Jump Hosts for OT.",
            "action": "1. Symbolic Logic: Monitor for Windows Event ID 1000 where the 'Faulting application name' is a known HMI/SCADA process. If the 'Faulting module path' points to a file in C:\\Windows\\System32\\drivers\\, immediately correlate the host's IP and timestamp with Zeek conn.log data. Generate a critical alert if the crash occurred within 10 seconds of an active connection to a field device on an ICS port, listing the crashing application, faulting module, and the associated field device IP.\n2. Statistical Method: Create a historical baseline of all 'ExceptionCode' values from Event ID 1000 for critical HMI/SCADA applications. Calculate the frequency of each code. Generate a high-priority alert if a crash occurs with an exception code that is historically rare (e.g., in the bottom 5th percentile of frequency), especially codes related to memory access violations or hardware errors, as these are more likely to be induced by low-level manipulation than common application bugs.\n3. Machine Learning: Train an unsupervised anomaly detection model (e.g., One-Class SVM) on a dataset of correlated HMI crash events and network traffic. Features should include a categorical hash of the 'Faulting module name', the 'ExceptionCode', and numerical features from the correlated Zeek log (e.g., duration, orig_bytes, resp_bytes, connection state). The model learns the profile of 'normal' crashes (e.g., common application bugs). Alert when a crash event, combined with its associated network context, is flagged as a significant outlier by the model."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]