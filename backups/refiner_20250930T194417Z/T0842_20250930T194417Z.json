[
  {
    "information_requirement": "Is an adversary attempting to discover information about the ICS network topology, protocols, or credentials by sniffing network traffic? (PIR)",
    "tactic_id": "TA0102",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T0842",
        "name": "Network Sniffing",
        "evidence": [
          {
            "description": "A process creation event (Windows Event ID 4688, Sysmon Event ID 1) or service installation event (Windows Event ID 7045) is observed on a critical ICS asset where the process name, service name, command-line arguments, or associated file hash matches a known network sniffing tool or packet capture driver (e.g., 'wireshark.exe', 'tcpdump.exe', 'npf.sys'). Alternatively, a running process loads a known packet capture library (e.g., 'wpcap.dll') as seen in Sysmon Event ID 7.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7045",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Data Historians, and other Windows-based systems within the Process Control Network (PCN) and Manufacturing Zone.",
            "action": "1. Symbolic Logic (IOC Match): Continuously monitor Windows Event ID 4688/Sysmon Event ID 1 (Process Creation), Windows Event ID 7045 (Service Installation), and Sysmon Event ID 7 (Image Loaded) on critical ICS assets. Maintain an allowlist of legitimate processes and a watchlist of known network sniffing tool executables (e.g., 'wireshark.exe', 'tcpdump.exe', 'tshark.exe'), drivers ('npf.sys', 'ndiscap.sys'), and libraries ('wpcap.dll'). Generate a high-priority alert upon detection of a process, service, or loaded image matching the watchlist, or a process executing with command-line arguments indicative of promiscuous mode (e.g., '-p', '-i any'). 2. Statistical Method: For each critical ICS asset, establish a 14-day rolling baseline for the daily count of unique, non-allowlisted processes (from Windows Event ID 4688/Sysmon Event ID 1). Calculate the 98th percentile for this daily count. Trigger an alert if the daily count of unique new processes on an asset exceeds this threshold, indicating an unusual surge in software activity. Additionally, baseline the set of DLLs loaded by critical applications; alert on any new, unexpected DLLs being loaded (from Sysmon Event ID 7), especially those related to networking or packet capture. 3. Machine Learning Application: Develop a machine learning classification model (e.g., Gradient Boosting or Random Forest) trained on historical Sysmon Event ID 1 data from ICS assets. Features should include process name entropy, parent process name, parent-child process relationship frequency, command-line argument length and entropy, user context, and whether the process loads network capture drivers (a feature enriched from Sysmon Event ID 7). Deploy the model to score new process creation events, flagging those with a high anomaly score or classifying them as 'suspicious sniffing tool' for analyst review."
          },
          {
            "description": "An ICS host's hourly count of unique destination IP addresses or subnets contacted exceeds its 99th percentile baseline, or it communicates with IP addresses outside its designated operational allowlist of known communication partners. This indicates abnormal network discovery or scanning behavior.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting PLCs, RTUs, and SCADA servers; network choke points between the IT and OT networks; switch port mirror/SPAN sessions on critical ICS segments.",
            "action": "1. Statistical Method: Using Zeek conn.log, for each critical ICS host (e.g., EWS, HMI, SCADA server), establish a 30-day rolling baseline of its hourly 'network fan-out' (count of unique destination IP addresses) and the Shannon entropy of its destination ports. Calculate the 99th percentile for both metrics. Trigger an alert if a host's hourly unique destination IP count or port entropy consistently exceeds its baseline for more than one hour, suggesting a port scan or network sweep. 2. Symbolic Logic (Rule-based): Maintain a strict asset-based communication allowlist defining which source hosts can talk to which destination hosts over specific ports/protocols. Ingest this allowlist into a SIEM. Generate a high-priority alert for any connection in Zeek conn.log that violates this policy, especially connections from an EWS or HMI to an IP address outside the established OT network boundaries (e.g., internal IT network, external internet IP) that is not explicitly defined in the communication matrix. 3. Machine Learning Application: Implement a time-series anomaly detection model (e.g., an LSTM Autoencoder) on vectors representing each host's network activity per hour. The vector should include features from Zeek conn.log such as: total connections, unique destination IPs, unique destination ports, distribution of protocols (e.g., % Modbus, % DNP3, % TCP), and distribution of connection states (e.g., % SF, % REJ). Train the model on several weeks of baseline data. Generate an alert when the model's reconstruction error for a host's activity vector exceeds a dynamic threshold, indicating a significant deviation from its normal communication profile."
          },
          {
            "description": "Anomalous or unauthorized use of unencrypted protocols (e.g., Telnet, FTP, HTTP, Modbus TCP, DNP3) known to transmit credentials or sensitive operational commands in cleartext, identified by deviations in session volume, duration, or source/destination pairing from an established baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek ftp.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data historians, SCADA servers, and network segments carrying administrative or industrial protocol traffic; DMZ segments for external ICS access.",
            "action": "1. Symbolic Logic (Rule-based): Configure Zeek to parse and log specific unencrypted ICS protocols (e.g., Modbus, DNP3, S7comm) and administrative protocols (e.g., FTP, Telnet). Establish a strict allowlist of source-destination-port combinations and, for ICS protocols, the specific function codes allowed between device pairs (e.g., HMI can only send 'Read Coil' to PLC-A). Generate a high-priority alert for any flow in Zeek conn.log, modbus.log, or dnp3.log that deviates from this allowlist, indicating unauthorized use. Log new or unallowlisted protocol usage in Zeek notice.log. 2. Statistical Method: For all established unencrypted protocol sessions identified in Zeek conn.log, calculate the 30-day rolling average and standard deviation for session duration and total byte count (orig_bytes + resp_bytes) for each unique source-destination-protocol-port tuple. Alert if any single session's duration or byte count exceeds the average by more than 3 standard deviations. This could indicate an adversary holding a connection open for sniffing or exfiltrating large amounts of captured data. 3. Machine Learning Application: Employ an unsupervised machine learning clustering algorithm (e.g., DBSCAN) on connection features extracted from Zeek conn.log and protocol-specific logs (e.g., zeek ftp.log), focusing on unencrypted protocols. Features should include source/destination IP/port, protocol, service, duration, byte counts, and specific commands (e.g., FTP command, Modbus function code). Train the model to group similar connection patterns. Flag any sessions classified as outliers or belonging to a new, small cluster, as these represent anomalous unencrypted communication potentially related to sniffing or unauthorized data access."
          },
          {
            "description": "Detection of anomalous ARP traffic, such as gratuitous ARP packets that re-assign a critical IP address (like the default gateway or a SCADA server) to a new MAC address, or suspicious DNS responses that redirect an ICS host to an adversary-controlled IP address.",
            "data_sources": [
              "Zeek arp.log",
              "Zeek dns.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Local network segments within the Process Control Network (PCN), especially those containing EWS, HMIs, and PLCs; DNS servers and resolvers serving the OT environment.",
            "action": "1. Symbolic Logic (Rule-based): Monitor Zeek arp.log for events where a single IP address becomes associated with a new MAC address, particularly if the IP belongs to a critical asset like a gateway, domain controller, or data historian. Create an alert for any such ARP mapping change that is not part of a scheduled maintenance activity. Monitor Zeek notice.log for 'ARP_Spoofing' or similar weirds. For DNS, alert on any response in dns.log that resolves an internal hostname to an IP address outside of the defined OT network space. 2. Statistical Method: Establish a baseline of all known IP-to-MAC address pairings on the network from Zeek arp.log over a 30-day period to create a 'static ARP table'. Alert on any new pairing not in this table. For DNS, baseline the set of Top-Level Domains (TLDs) and specific domains queried by each host. Calculate the daily count of NXDOMAIN responses per host. An alert should trigger if a host suddenly starts querying unusual TLDs or if its NXDOMAIN count exceeds its 99th percentile baseline, which could indicate probing or command-and-control activity associated with a compromised host. 3. Machine Learning Application: Develop a graph-based anomaly detection model where nodes represent hosts (IPs, MACs) and domains, and edges represent communications (ARP mappings, DNS queries, TCP/UDP connections). Train the model on the normal graph structure and traffic flow. An anomaly, such as an ARP spoof, would appear as a new, high-centrality edge connecting a malicious MAC to a critical IP node. A DNS-based attack might appear as a host suddenly communicating with a new, previously unlinked sub-graph of domains. The model would flag structural changes in the graph that have a high anomaly score."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]