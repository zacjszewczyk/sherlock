[
  {
    "information_requirement": "Is an adversary using masquerading techniques on corporate mobile devices to evade detection? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1655.001",
        "name": "Match Legitimate Name or Location",
        "evidence": [
          {
            "description": "An installed mobile application has a display name, package name, or icon that is an exact or near-match (e.g., low Levenshtein distance) to a known legitimate application, but its cryptographic signer certificate does not match the allowlisted certificate for that application. Alternately, the application's package name or signer certificate hash is present on a threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) server database; Corporate-managed iOS and Android devices.",
            "action": "First, for IOC matching, continuously query MDM application inventory logs for installed package names and signer certificate hashes. Compare these against a threat intelligence feed of known-malicious or typosquatted application identifiers and certificates. Generate a high-severity alert for any match. Second, for a statistical approach, build and maintain an organizational allowlist of (display_name, package_name, signer_certificate_thumbprint, icon_hash) tuples for all approved applications. Periodically group all installed applications by display name (e.g., 'Settings') or icon hash. Generate a medium-severity alert if any group contains more than one unique (package_name, signer_certificate_thumbprint) combination. Additionally, calculate the Levenshtein distance between all installed package names and the package names on the allowlist; flag any application with a distance score > 0 and < 3 for manual review as potential typosquatting. Third, for a machine learning approach, train a classification model (e.g., Random Forest, Gradient Boosting) using features extracted from application manifests (e.g., permission count, high-risk permissions, exported components) and package name characteristics (e.g., length, n-gram frequency, character entropy, number of dots). Use the model to score all newly installed applications, flagging those classified as 'potential masquerade' with a confidence score above 0.85 for analyst investigation."
          },
          {
            "description": "A mobile application, previously identified as potentially masquerading, generates network traffic that deviates from the established baseline of the legitimate application it mimics. This is observed through connections to known malicious domains, domains with high-entropy names, unusual destination ports, or client TLS fingerprints (JA3) associated with malware.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Mobile Device Management (MDM) Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), Corporate WiFi network segments, and VPN concentrators",
            "action": "First, for IOC matching, use the device IP from MDM logs to filter network logs (Zeek dns.log, ssl.log, conn.log) for traffic from devices with a suspected masquerading app. Join DNS queries against a threat intelligence feed of known C2 domains and join TLS JA3 hashes from ssl.log against a feed of known malicious fingerprints. Generate a high-severity alert on any match. Second, for statistical analysis, calculate the Shannon entropy for each queried domain name (from Zeek dns.log) from the suspect device. Flag domains with an entropy score exceeding the 98th percentile of the 30-day organizational baseline. Concurrently, from Zeek conn.log, establish a baseline profile for the legitimate application's network behavior (e.g., set of common destination ports, protocol distribution, mean/stddev of data sent/received). Alert if the suspected application's behavior deviates by more than 3 standard deviations on key metrics or uses ports/protocols outside the established baseline set. Third, for a machine learning approach, apply a time-series anomaly detection model (e.g., LSTM Autoencoder) to a multivariate vector of network features aggregated in 5-minute intervals (e.g., orig_bytes, resp_bytes, connection count, unique destination IPs). Train the model on historical data from the legitimate application. Flag any time window where the reconstruction error for the suspected application's traffic is identified as a significant anomaly, indicating behavior inconsistent with the legitimate application."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]