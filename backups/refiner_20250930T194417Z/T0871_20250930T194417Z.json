[
  {
    "information_requirement": "Is an adversary leveraging native ICS APIs for unauthorized execution on control system devices? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0871",
        "name": "Execution through API",
        "evidence": [
          {
            "description": "A network connection to a known ICS protocol port (e.g., Modbus/502, DNP3/20000, S7/102) on a control device (PLC, RTU, IED) from a source IP address not present on a pre-defined allowlist for that specific device and port.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network ingress/egress points between the Enterprise Network (Level 4/5) and Process Control Network (Level 3), and network segments within the PCN containing Engineering Workstations (EWs), Human-Machine Interfaces (HMIs), and critical control devices (PLCs, RTUs).",
            "action": "1. (Symbolic Logic) Create and maintain an asset-based allowlist of authorized source IPs (e.g., specific EWs, HMIs) for each destination control device IP and its designated ICS port. Using Zeek `conn.log`, create a SIEM rule to alert on any connection where `id.orig_h` is not on the allowlist for the corresponding `id.resp_h` and `id.resp_p`. 2. (Statistical Method) For each control device (`id.resp_h`), establish a 30-day rolling baseline of unique source IPs (`id.orig_h`) observed per hour. Alert if the count of unique sources in a given hour exceeds the 99th percentile for that device, which could signal a reconnaissance scan or an unauthorized device attempting connections. 3. (Machine Learning) Train an Isolation Forest model on historical Zeek `conn.log` data using features like source/destination IP, destination port, protocol, connection duration, and bytes transferred. Flag connections identified as anomalies by the model for analyst review, prioritizing those involving known ICS ports and devices. 4. (Correlation) For any alert, correlate the source IP and timestamp with Windows Event ID 5156 (Network Connection Permitted) and Windows Event ID 4688 (Process Creation) on the source host to identify the originating process responsible for the unauthorized connection attempt."
          },
          {
            "description": "The use of a high-risk or write-capable ICS function code (e.g., Modbus 'Write Single/Multiple Coil/Register', S7comm 'PLC Stop/Program Download', DNP3 'Control Operate') observed in network traffic, especially when originating from an unexpected source or outside a scheduled maintenance window.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps or SPAN ports deployed at critical choke points within the Process Control Network (Level 2), such as in front of safety PLCs, between HMI/EWS and control devices, and on links to Historian servers.",
            "action": "1. (Symbolic Logic) Define a list of critical function codes (e.g., Modbus FC 5, 6, 15, 16; S7comm 'Stop', 'Start'). Create a SIEM rule to generate a high-severity alert whenever these codes appear in Zeek protocol logs (`modbus.log`, `s7comm.log`), enriching the alert with asset data for the source/destination and cross-referencing against a maintenance schedule calendar. 2. (Statistical Method) For each source-destination pair, establish a 60-day baseline of function code usage frequency from Zeek protocol logs. Calculate the entropy of the function code distribution within a rolling 10-minute window. Alert if the entropy drops below the 5th percentile, indicating a potential repetitive, automated attack, or if the Z-score for any single function code's frequency exceeds 3.0. 3. (Machine Learning) Develop a Hidden Markov Model (HMM) for each critical industrial process, trained on the typical sequences of function codes observed between the controlling HMI/EWS and the PLC/RTU. The model learns the 'states' of the process (e.g., 'idle', 'running'). Alert when an observed sequence of function codes has a very low probability under the trained model, indicating a deviation from normal operational logic."
          },
          {
            "description": "An authorized source-destination pair (e.g., HMI-to-PLC) exhibits a communication pattern with anomalous volume, timing, or sequencing of API calls, suggesting the authorized host may be compromised and used for malicious execution.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments within the Process Control Network (Level 2) that connect authorized Engineering Workstations (EWs) and Human-Machine Interfaces (HMIs) to their respective control devices (PLCs, RTUs).",
            "action": "1. (Symbolic Logic) Based on operator knowledge, define and alert on specific 'anti-patterns' or forbidden sequences of commands within a short time window (e.g., a 'PLC Stop' command immediately followed by a 'Program Download' from a non-EWS source). This rule detects logically inconsistent or high-risk command chains that deviate from safe operational procedures. 2. (Statistical Method) For each authorized source-destination ICS communication pair, baseline the inter-arrival time of requests using Zeek `conn.log` or protocol logs. Alert if the mean inter-arrival time in a 5-minute window drops below the 1st percentile of the historical baseline, suggesting an automated script or tool is issuing commands much faster than a human operator could. 3. (Machine Learning) Train an LSTM (Long Short-Term Memory) autoencoder on time-series data representing normal communication volume (e.g., bytes transferred per second) between authorized asset pairs. The model learns to reconstruct the normal 'rhythm' of communication. Alert when the reconstruction error for the live traffic exceeds a dynamically learned threshold, indicating the current communication pattern does not match any known normal behavior."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]