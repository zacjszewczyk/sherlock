[
  {
    "information_requirement": "Is an adversary attempting to discover installed applications on our managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1418",
        "name": "Software Discovery",
        "evidence": [
          {
            "description": "A process creation event is observed on a host system where adb.exe is executed with command-line arguments consistent with enumerating installed packages on a connected Android device, such as 'shell pm list packages'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices of developers, IT support staff, and security analysts with mobile device management responsibilities.",
            "action": "1. (Symbolic) Create a detection rule that triggers on process creation events (Windows Event ID 4688 or Sysmon Event ID 1) where the process image path ends in '\\adb.exe' AND the command line contains the substrings 'shell', 'pm', 'list', and 'packages'. Generate a high-severity alert if the hostname is not a member of a pre-defined 'Mobile-Dev-Hosts' asset group. 2. (Statistical) For each host, build a statistical baseline of adb.exe command-line activity. For each new execution, calculate the Shannon entropy of the command-line arguments. Flag any execution where the entropy score exceeds the 98th percentile of all historical adb.exe executions on that specific host over a 30-day window. Additionally, monitor the daily frequency of these specific package listing commands per user; alert if the count exceeds 3 standard deviations above the user's daily average. 3. (Machine Learning) Develop and deploy a supervised classification model (e.g., Random Forest) to score the maliciousness of adb.exe executions. Engineer features from process creation logs, including: (1) command-line argument entropy, (2) presence of keywords ('list', 'packages', 'pm', 'dump'), (3) a binary feature indicating if execution occurs outside of standard business hours (e.g., 9 AM - 5 PM local time), (4) a binary feature indicating if the parent process is unusual (e.g., not cmd.exe or powershell.exe). Train the model on labeled data and generate an alert for executions with a predicted probability score above 0.90."
          },
          {
            "description": "A network connection originating from a managed mobile device exhibits characteristics of application list exfiltration, specifically an outbound data transfer between 1KB and 50KB to a destination that is either newly observed or has a low reputation score.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network egress points, wireless network segments, VPN concentrators, and DNS resolvers.",
            "action": "1. (Symbolic) Create a detection rule that triggers on network logs for traffic from the mobile device IP address space. Alert if: (a) An HTTP POST request in Zeek http.log has a 'request_body_len' between 1024 and 51200 bytes AND the destination domain is less than 30 days old or appears on a threat intelligence feed; OR (b) A DNS query in Zeek dns.log has a query length greater than 100 characters, suggesting DNS tunneling, and is directed to a low-reputation domain. 2. (Statistical) From Zeek conn.log, profile outbound connections from mobile devices. For each connection, calculate a data exfiltration ratio: Score = orig_bytes / (orig_bytes + resp_bytes + 1). Establish a baseline distribution of this score for each device. Alert if a device has a connection where the score exceeds the 99th percentile of its own 30-day historical scores, especially when combined with a low-prevalence destination IP address (e.g., an IP seen by fewer than 5 other devices in the last week). 3. (Machine Learning) Implement a two-stage ML detection. Stage 1: Use an unsupervised anomaly detection model (e.g., Isolation Forest) on features from Zeek conn.log for each mobile device session. Features include: orig_bytes, resp_bytes, duration, and service. Stage 2: If a session is flagged as an anomaly, pass the destination FQDN from Zeek dns.log or http.log to a pre-trained DGA detection classifier (e.g., an LSTM model trained on n-gram character sequences). Escalate for analyst review if an anomalous network session is directed to a domain with a high DGA probability score (>0.85)."
          },
          {
            "description": "An application installed on a managed mobile device is identified by the Mobile Device Management (MDM) or Mobile Threat Defense (MTD) platform as either requesting the 'android.permission.QUERY_ALL_PACKAGES' permission (Android) or utilizing private APIs associated with application enumeration, such as 'LSApplicationWorkspace' (iOS).",
            "data_sources": [
              "MDM/MTD Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate MDM/MTD platform and Application Vetting Systems.",
            "action": "1. (Symbolic) Configure the MDM/MTD platform to generate a high-priority alert for any new application installation that requests the 'android.permission.QUERY_ALL_PACKAGES' permission or is flagged for using the 'LSApplicationWorkspace' API. Suppress alerts for applications present on a pre-approved 'allowlist' of legitimate business and system applications. 2. (Statistical) Continuously ingest application inventory data from the MDM/MTD platform. Calculate a permission risk score for each application by assigning weights to requested permissions (e.g., QUERY_ALL_PACKAGES = 10, ACCESS_FINE_LOCATION = 5, etc.). Track the distribution of these scores across the device fleet. Alert on any application whose score is in the top 1% (99th percentile) of all installed applications. Additionally, generate a trending alert if the total count of applications with the 'QUERY_ALL_PACKAGES' permission increases by more than 5% within a 7-day period. 3. (Machine Learning) Train a classification model (e.g., XGBoost) to predict if an Android application is Potentially Unwanted or Malicious. Use features extracted from MDM/MTD application scans, including: (1) a one-hot encoded vector of all requested permissions, (2) the application's install source (e.g., Google Play, sideloaded), (3) the number of activities, services, and receivers declared in the manifest, and (4) a binary feature for the presence of 'QUERY_ALL_PACKAGES'. Deploy this model within the app vetting process and automatically quarantine or flag applications that receive a malicious probability score greater than 0.95."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]