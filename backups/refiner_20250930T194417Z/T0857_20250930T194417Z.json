[
  {
    "information_requirement": "Is an adversary attempting to inhibit response functions by modifying system firmware? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file transfer to a critical ICS device (e.g., PLC, RTU) is identified as a firmware image (via file extension, MIME type 'application/octet-stream', or magic byte signature) and exhibits a composite anomaly score based on one or more of the following conditions: the transfer occurs outside a pre-approved maintenance window; the source IP is not on the authorized list of Engineering Workstations or vendor update servers; the protocol used (e.g., HTTP, SMB) is not the designated protocol for firmware updates (e.g., FTP, TFTP, proprietary vendor protocol); or the file size deviates by more than 2 standard deviations from the historical baseline for that specific device model's firmware.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek ftp.log",
              "Zeek tftp.log",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments hosting PLCs/RTUs, Network segments containing Engineering Workstations (EWS), Industrial Demilitarized Zone (IDMZ) for vendor remote access, Enterprise/ICS network boundary points.",
            "action": "1. Symbolic Logic (IOC): 1. Create and maintain an asset inventory of critical ICS devices and their IP addresses. 2. Create and maintain an allowlist of authorized source IPs (EWS, vendor jump boxes) and designated protocols/ports (e.g., FTP/21, TFTP/69, Siemens/102) for firmware updates per device. 3. Monitor Zeek files.log for transfers to critical ICS device IPs where mime_type is 'application/octet-stream' or filename matches firmware patterns (e.g., *.bin, *.fw). 4. For each matching transfer, retrieve the uid and query Zeek conn.log. 5. Alert with high severity if id.orig_h (source IP) is not on the allowlist OR proto or id.resp_p (protocol/port) is not on the allowlist for that destination device. 2. Statistical Method: 1. For each ICS device model, establish a 90-day baseline of legitimate firmware update file sizes from files.log (seen_bytes) to calculate the mean and standard deviation. 2. Establish a baseline of update times (e.g., time of day, day of week) from conn.log (ts). 3. For any detected firmware file transfer, calculate the Z-score of its size (seen_bytes). 4. Assign anomaly points if the Z-score > 3, if the transfer time falls outside the 95th percentile of the established update window, or if the source IP is new in the last 30 days for that destination. 5. Alert if the cumulative anomaly score exceeds a defined threshold, indicating a multi-faceted deviation from normal behavior. 3. Machine Learning: 1. Train an anomaly detection model (e.g., Isolation Forest) on historical conn.log and files.log data. 2. Create a feature vector for each firmware transfer event, including: file_size (from files.log.seen_bytes), transfer_duration (from files.log.duration), protocol (from conn.log.proto), is_source_ip_known (binary feature), is_weekend (binary), hour_of_day, and file_entropy (calculated from file content if available). 3. The model will learn the multi-dimensional boundary of normal firmware update activity. 4. Generate an alert for any new firmware transfer that is flagged as an outlier by the model, as its combination of features is uncharacteristic of past legitimate updates."
          },
          {
            "description": "An ICS vendor firmware update utility (identified by process name, command-line, or a hash not on the approved list) is executed on an Engineering Workstation (EWS) or HMI, and the execution is anomalous based on at least one of the following: the executing user account is not a member of the authorized 'ICS Firmware Admins' Active Directory group; the process is spawned by an unusual parent process (e.g., a web browser or document reader instead of 'explorer.exe'); the command-line arguments specify a target device IP that is not in the asset inventory or is inconsistent with the utility's purpose; or the execution occurs outside of a scheduled maintenance window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Active Directory security logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the PCN, Human-Machine Interfaces (HMIs) in the PCN, Active Directory domain controllers, Identity Management servers.",
            "action": "1. Symbolic Logic (IOC): 1. Maintain a watchlist of approved firmware utility process names, SHA256 hashes, and valid digital signer subjects. 2. Monitor Windows Event ID 4688 on EWS/HMIs. 3. Alert if a process matches a name on the list but its hash or signer subject does not match the approved values. 4. Correlate the SubjectUserSid from the 4688 event with Active Directory to verify membership in an authorized group. Alert if the user is not authorized. 5. Parse the CommandLine field to extract target IP addresses and alert if the target is not a known, valid ICS device. 2. Statistical Method: 1. For each EWS and authorized user, baseline the typical execution frequency and time-of-day for each firmware utility using 180 days of Windows Event ID 4688 data. 2. Calculate the 95th percentile for execution times. 3. For each new execution, score it based on deviations: add points if it occurs outside the 95th percentile of time, if the daily execution count for that user/host pair exceeds 3 standard deviations of its baseline, or if the parent process (ParentProcessName) is rare (in the bottom 5% of historical parent processes for that utility). 4. Alert if the cumulative score passes a threshold. 3. Machine Learning: 1. Implement a User and Entity Behavior Analytics (UEBA) model that learns a profile for each authorized user and EWS. 2. Features for the model should include: process name, parent process name, command-line argument patterns (e.g., using tokenization and frequency analysis), time of day, and logon type (e.g., LogonType from correlated Event ID 4624). 3. Train a one-class SVM or other classification model to distinguish normal vs. abnormal execution sessions. 4. Alert when an execution of a firmware utility is part of a session that the model classifies as a high-scoring anomaly, indicating a significant break from the user's or host's established behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary establishing persistence by implanting malicious system firmware? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "Within 60 minutes following a confirmed or suspected firmware transfer to a critical ICS device, the device's network behavior changes significantly. This is evidenced by: the initiation of connections to new, previously unseen external or internal IP addresses; the use of new network protocols or services (e.g., DNS, HTTP) not on the device's baseline communication profile; a change in ICS protocol traffic, such as the appearance of rare function codes (e.g., Modbus Write Single/Multiple Coil/Register); or a statistically significant increase (e.g., >3 standard deviations) in data volume or connection frequency.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments containing critical controllers (PLCs/RTUs), Network egress points from the Process Control Network (PCN), Industrial Demilitarized Zone (IDMZ) gateways, Enterprise network proxy servers.",
            "action": "1. Symbolic Logic (IOC): 1. Upon alert of a suspicious firmware update to a device IP, initiate a 60-minute monitoring period for that IP. 2. During this period, query conn.log and dns.log for any outbound connections from the device IP to destinations on a threat intelligence feed of known C2 servers. Alert immediately on a match. 3. Query ICS-specific logs (e.g., modbus.log) for any 'write' function codes (write_single_coil, write_multiple_registers) or diagnostic/stop commands originating from or targeting the device. Alert if these are not part of a planned action. 2. Statistical Method: 1. For each critical ICS device, maintain a 90-day rolling baseline of its communication profile from Zeek logs, including: set of destination IPs, set of destination ports/protocols, hourly connection count, and hourly data volume (bytes_orig + bytes_resp). 2. After a firmware update, compare the device's traffic in the next hour against its baseline. 3. Alert if new destination IPs or ports appear that were not in the 90-day baseline. 4. Calculate the Z-score for connection count and data volume; alert if Z-score > 3. 5. Calculate the Shannon entropy of the destination ports used in the hour; alert if it increases by more than 50% from the baseline entropy, indicating probing or new C2 channels. 3. Machine Learning: 1. Train a time-series anomaly detection model (e.g., LSTM Autoencoder) for each critical device on its multivariate network traffic data (e.g., bytes per second, connections per second, unique destination IPs per minute). 2. Feed the post-update traffic data into the trained model. 3. The model will generate a reconstruction error. 4. Alert if the reconstruction error for the post-update period spikes significantly (e.g., exceeds the 99th percentile of historical reconstruction errors), indicating the new behavior does not conform to any previously observed legitimate pattern."
          },
          {
            "description": "A file transferred to or found on a key system (EWS, file share) is identified as a firmware image (by name, MIME type, or magic bytes), and its SHA256 hash does not match any entry in the curated allowlist of approved firmware versions for the intended target device model. Alternatively, the hash matches a known-malicious hash from a threat intelligence feed.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, Engineering Workstations (EWS), Centralized firmware management servers/repositories, Network File Shares in the PCN, File integrity monitoring systems.",
            "action": "1. Symbolic Logic (IOC): 1. Maintain a central database mapping device models to a list of approved firmware versions and their corresponding SHA256 hashes. Also subscribe to a threat feed of malicious firmware hashes. 2. For every file identified as firmware by Zeek files.log or a file integrity monitor, compute its SHA256 hash. 3. Query conn.log to identify the destination IP (the target device). 4. Look up the device model for the destination IP in the asset inventory. 5. Alert with high severity if the file's hash is not in the approved list for that model OR if the hash is on the malicious blacklist. 2. Statistical Method: 1. For firmware files whose hashes are unknown (not on the allowlist or denylist), perform a comparative statistical analysis. 2. For the target device model, create a statistical profile of all known-good firmware files, including file size and byte-level entropy. 3. Calculate the file size and entropy of the unknown firmware file. 4. Calculate the Z-score for both a) the size and b) the entropy of the unknown file against the distribution of known-good files. 5. Escalate the alert for analyst review if either Z-score is greater than 3, suggesting the file is abnormally large, small, packed, or encrypted compared to legitimate versions. 3. Machine Learning: 1. Train a binary classification model (e.g., Gradient Boosting) to predict if a firmware file is 'suspicious' or 'benign' based on metadata, without relying solely on the hash. 2. Extract features for each firmware file, including: file_size, file_entropy, has_digital_signature (from file analysis), transfer_protocol, source_ip_reputation, and transfer_duration. 3. Benign samples are taken from the approved firmware repository; suspicious samples can be from malware feeds or synthetically generated. 4. Use this model to score all unknown firmware files. A high 'suspicious' score (e.g., > 0.9) triggers an alert for a file that may be a novel or polymorphic malicious firmware, even if its hash is not yet on a blacklist."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]