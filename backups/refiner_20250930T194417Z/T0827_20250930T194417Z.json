[
  {
    "information_requirement": "Has an adversary caused a sustained loss of control over a critical industrial process? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0827",
        "name": "Loss of Control",
        "evidence": [
          {
            "description": "A specific HMI workstation generates application errors (Windows Event ID 1000) indicating communication failures (e.g., 'Modbus communication error') concurrently with an absence of corresponding successful Modbus 'Write' commands (Function Codes 0x05, 0x06, 0x0F, 0x10) from its IP address in Zeek modbus.log. Alternatively, an increase in Modbus Exception Responses from a PLC to an HMI, exceeding the 99th percentile of the historical baseline, indicates a potential loss of control.",
            "data_sources": [
              "Windows Event ID 1000",
              "Zeek modbus.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI hosts in the control room, PCN network taps monitoring traffic to critical PLCs (e.g., Boiler Control PLC, Turbine Governor PLC), Engineering Workstation subnets.",
            "action": "1. Symbolic Logic: Step 1: Ingest Windows Event ID 1000 from all HMI hosts. Step 2: Create a rule to trigger on events where the faulting application is the HMI software and the log message contains error strings like 'Modbus communication error', 'DNP3 link failure', or 'PLC connection lost'. Step 3: For each trigger, query Zeek modbus.log for the HMI's source IP over the same 1-minute window. Step 4: Alert if NO successful 'Write' commands (Modbus function codes 0x05, 0x06, 0x0F, 0x10) are found in the query from Step 3. 2. Statistical Method: Step 1: For each HMI-PLC pair, establish a 30-day baseline of Modbus Exception Response codes seen in Zeek modbus.log, calculating the 99th percentile for the count per 5-minute interval. Step 2: In real-time, count exception responses per HMI-PLC pair over a 5-minute sliding window. Step 3: Alert if the count exceeds the pre-calculated 99th percentile. Step 4: Separately, for each HMI, baseline the rate of application communication errors (from Windows Event ID 1000). Alert if the rate in a 10-minute window exceeds 3 standard deviations above the mean of the 30-day baseline. 3. Machine Learning Application: Step 1: For each HMI, create a feature vector including: count of communication errors (Event ID 1000), count of Modbus exception responses received, and a binary flag for the absence of successful 'Write' commands in a 5-minute window. Step 2: Train an Isolation Forest or similar unsupervised anomaly detection model on at least 30 days of historical feature data to learn normal operating patterns. Step 3: Apply the model to real-time data streams. Step 4: Alert when the model assigns an anomaly score greater than a tuned threshold (e.g., > 0.75), indicating a pattern of failures that significantly deviates from the norm."
          },
          {
            "description": "A critical process variable (e.g., boiler pressure) from the Process Historian deviates beyond its normal operating range (e.g., > 99th percentile of 30-day values) for a sustained period (e.g., > 5 minutes), while Zeek logs (modbus.log, dnp3.log) show no corresponding authorized 'Write' commands from a whitelisted HMI or Engineering Workstation IP address to the relevant PLC registers that would explain the deviation.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Process Historian Data",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian database servers, Network taps capturing traffic between Level 1 (PLCs/RTUs) and Level 2 (Supervisory Control), specific PLCs controlling critical physical processes.",
            "action": "1. Symbolic Logic: Step 1: Maintain a whitelist of authorized HMI/EWS IP addresses and the specific PLC registers they are allowed to write to. Step 2: Monitor Zeek modbus.log and dnp3.log for all 'Write' commands. Step 3: Alert immediately if a 'Write' command originates from a non-whitelisted IP or targets a register not authorized for that source IP. 2. Statistical Method: Step 1: For each critical process variable (PV) in the Historian, calculate a 30-day rolling baseline, establishing the 1st and 99th percentile values for 1-minute averages. Step 2: Continuously monitor PVs. If a PV remains outside its 1st-99th percentile band for 5 consecutive minutes, trigger a secondary check. Step 3: The secondary check queries Zeek logs for authorized 'Write' commands to the associated PLC register within that 5-minute window. Step 4: Alert if the PV deviation occurs with NO corresponding authorized 'Write' command. Additionally, calculate the Shannon entropy of DNP3 object variations or Modbus register addresses being written to per source IP over 1-hour windows. Alert if entropy drops below the 5th percentile, indicating potentially fixated, repetitive commands. 3. Machine Learning Application: Step 1: Develop a multi-variate time-series prediction model (e.g., VAR - Vector Autoregression) that learns the relationships between multiple related process variables (e.g., temperature, pressure, flow rate) and legitimate control actions ('Write' commands). Step 2: Feed real-time PV data and control commands into the model to generate a forecast with a 95% prediction interval for each PV. Step 3: Alert if any actual PV value consistently falls outside its prediction interval for more than 3 minutes, suggesting the system is behaving in a way not explained by legitimate control inputs."
          },
          {
            "description": "The Safety Instrumented System (SIS) triggers an emergency shutdown or trip, but this event is not preceded by either a legitimate process condition (i.e., no critical process variables in the Historian exceeded their safety limits) or an authorized, logged operator action (i.e., no corresponding command from a whitelisted SIS workstation or recent login from an authorized user).",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek s7comm.log",
              "Zeek enip.log",
              "SIS System Logs",
              "Process Historian Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIS Logic Solver hardware, SIS Engineering Workstations, Network segments dedicated to the Safety Instrumented Network (SIN), Firewalls or Data Diodes separating the SIN from the PCN.",
            "action": "1. Symbolic Logic: Step 1: Upon detection of an SIS trip alarm from SIS System Logs, automatically trigger a lookback query. Step 2: The query checks Process Historian data for the 5 minutes prior to the trip to see if any PV exceeded its defined safety trip point. Step 3: The query also checks Windows Event ID 4624 and SIS command logs for an authorized manual trip command from a whitelisted user/workstation in the 5 minutes prior. Step 4: Alert if the SIS trip occurred with NEITHER a preceding safety limit excursion NOR an authorized manual command. 2. Statistical Method: Step 1: Baseline all network traffic to and from the SIS network segment using Zeek conn.log, establishing normal patterns (source/destination IPs, ports, protocols, connection duration, bytes transferred). Step 2: Following an SIS trip event, analyze the network traffic from the preceding 30 minutes. Step 3: Calculate the statistical rarity (e.g., z-score or percentile rank < 1%) of any observed connections compared to the baseline. Alert if the SIS trip is correlated with statistically rare network activity, such as a new IP communicating with the SIS logic solver or use of a non-standard port. 3. Machine Learning Application: Step 1: Train a supervised classification model (e.g., Random Forest) on historical SIS trip events. Label each event as 'Legitimate' (preceded by PV excursion or manual command) or 'Anomalous'. Step 2: Use features for the model such as: a binary flag for PV excursion, a binary flag for manual command, source IP of login to SIS workstation (Event ID 4624), and the calculated rarity of network connections to the SIS controller (from Zeek conn.log). Step 3: Deploy the trained model to automatically classify every new SIS trip event in real-time, alerting on any event classified as 'Anomalous' with high confidence (e.g., probability > 0.9)."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]