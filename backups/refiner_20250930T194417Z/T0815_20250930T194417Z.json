[
  {
    "information_requirement": "Is an adversary attempting to disrupt operator visibility of the industrial process? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0815",
        "name": "Denial of View",
        "evidence": [
          {
            "description": "A complete absence of expected periodic ICS protocol messages (e.g., Modbus Read Holding Registers, EtherNet/IP Explicit Messaging, DNP3 Integrity Polls) or a sustained reduction in packet volume (e.g., >95% below baseline) observed in network logs from a specific Level 1 field device (e.g., PLC/RTU) to a Level 2 SCADA/HMI server. This silence must persist for a duration exceeding 2.5 times the established normal polling interval (e.g., 2-5 minutes) and occur outside of documented maintenance windows.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) network segment, specifically between HMI/SCADA servers and Level 1 (Basic Control) PLCs/RTUs.",
            "action": "1. Symbolic Logic: For each critical HMI-to-PLC/RTU communication pair, define the expected ICS protocol (e.g., Modbus, EtherNet/IP, DNP3), polling interval, and specific function codes/service codes. Continuously query Zeek protocol logs (e.g., modbus.log, enip.log, dnp3.log) for the absence of these expected periodic messages from the PLC IP to the HMI IP. Generate a high-severity alert if no such message is observed for a duration exceeding 2.5x the normal poll interval. Concurrently, monitor for a sudden burst (e.g., >5 events in 60 seconds) of specific ICS protocol error codes (e.g., Modbus exception responses 0x01, 0x02, 0x0B; EtherNet/IP General Status errors) between the same pair, which could indicate a malfunction causing the view loss. 2. Statistical Method: For each critical PLC-to-HMI communication pair, establish a 14-day rolling baseline of packet and byte counts per 60-second window using Zeek conn.log. Calculate the 1st percentile of this baseline. Trigger a medium-severity alert if the current 60-second window's traffic volume drops below this 1st percentile for three consecutive windows (180 seconds). Additionally, calculate the inter-arrival time (jitter) between expected polling messages. Alert if the current jitter exceeds 3 standard deviations from its historical mean, as this indicates communication degradation. 3. Machine Learning: Deploy a time-series anomaly detection model (e.g., an LSTM autoencoder or Prophet) trained on historical aggregate packet counts per minute from PLC/RTU IPs to HMI IPs. Continuously feed real-time packet counts into the model. Flag any data points with an anomaly score exceeding a predefined threshold (e.g., 0.95) as a potential Denial of View event, particularly when the observed packet count approaches zero and is combined with a lack of specific ICS protocol messages."
          },
          {
            "description": "An unscheduled termination of a critical HMI application process (e.g., ftview.exe, cimplicity.exe, iFIX.exe) on an operator workstation, identified by Windows Event ID 4689 or Sysmon Event ID 5. The termination is considered anomalous if the exit code is non-zero (indicating a crash) or if the parent process (identified via Sysmon Event ID 1 or Windows Event ID 4688) is not a whitelisted HMI component (e.g., explorer.exe) or an authorized administrative tool (e.g., taskmgr.exe) initiated by a privileged user.",
            "data_sources": [
              "Windows Event ID 4689",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon Process Create)",
              "Windows Event ID 5 (Sysmon Process Terminate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) HMI Workstations and Engineering Workstations.",
            "action": "1. Symbolic Logic: On critical HMI workstations, maintain a whitelist of HMI process names (e.g., `ftview.exe`, `cimplicity.exe`) and their expected parent processes (e.g., `explorer.exe`, `services.exe`). Monitor for Sysmon Event ID 5 (Process terminated) or Windows Event ID 4689 targeting these processes. Correlate with the parent process information from Sysmon Event ID 1 or Windows Event ID 4688. Generate a high-severity alert if the parent process is not on the whitelist OR if the terminating user is not an authorized administrator OR if the termination event has a non-zero exit code, indicating a crash rather than a clean exit. 2. Statistical Method: Establish a 30-day baseline for the hourly count of unexpected terminations (Sysmon Event ID 5) for each critical HMI process. Calculate the 99th percentile for this count. Trigger a medium-severity alert if the current hourly termination count exceeds this percentile. Additionally, profile the typical exit codes for each process; an exit code that is statistically rare (e.g., not seen in the last 30 days) for a given process should also trigger an alert. 3. Machine Learning: Train a classification model (e.g., Random Forest or Gradient Boosting) on historical process termination events (Windows Event ID 4689, Sysmon Event ID 5) from HMI workstations. Features for the model should include process name, parent process name, command-line arguments, user, time of day, and exit code. The model classifies terminations as 'normal' or 'anomalous'. Flag terminations with a high 'anomalous' score (e.g., >0.9) for immediate review, especially those involving unusual parent-child relationships or command-line arguments not seen in normal operations."
          }
        ]
      },
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A sudden, high-volume flood of network traffic (e.g., >10x the 99th percentile of the baseline packet rate) directed at a critical ICS asset (HMI, Historian, OPC server). This is characterized by a high ratio of incomplete TCP connections (Zeek conn.log state 'S0', 'RSTO', 'REJ') or a massive volume of UDP packets from source IPs not belonging to whitelisted ICS network segments. This results in resource exhaustion and prevents legitimate connections.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 3 (Manufacturing Operations) and Level 2 (Control System) network boundaries, Data Historian servers, HMI Workstations.",
            "action": "1. Symbolic Logic: Define a whitelist of internal network segments allowed to communicate with critical ICS assets (HMI, Historian). Monitor Zeek conn.log for any source IP outside this whitelist initiating an excessive number of connections (e.g., >500 connections in 60 seconds) to a single asset. Alert if the ratio of connections with state 'S0', 'RSTO', or 'REJ' to total connections from that source exceeds 90% over a 2-minute window. Also, monitor Zeek notice.log for `Scan::Address_Scan` or similar notices targeting the asset. 2. Statistical Method: For each critical ICS asset, establish a 14-day rolling baseline for the rate of new connections and total bytes per minute. Calculate the 99.9th percentile. Trigger a high-severity alert if the current rate exceeds this threshold for 3 consecutive minutes. Concurrently, calculate the Shannon entropy of source IP addresses connecting to the asset over 5-minute windows. A sudden drop in entropy (e.g., below the 5th percentile of its historical baseline) combined with a high connection rate indicates a targeted flood from a few sources. 3. Machine Learning: Implement a real-time unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) on network flow data (Zeek conn.log) targeting critical ICS assets. Use features such as source IP, destination IP, destination port, number of SYN packets, and total packet count within 1-minute windows. Train the model on historical normal traffic. Flag new observations that fall outside the learned normal distribution with a high anomaly score (e.g., >0.9) as potential Denial of Service events, especially when characterized by high connection attempts or traffic volume to ICS destinations."
          },
          {
            "description": "An unexpected termination of a critical ICS-related Windows service (e.g., OPC server, Historian collector, communication driver) on a server or workstation, identified by Windows Event ID 7034 ('Service terminated unexpectedly'). The event is anomalous if it is not immediately followed by a successful restart (Windows Event ID 7036) within a standard service recovery window (e.g., 60 seconds) and is not correlated with a planned system shutdown (Event ID 1074) or administrator-initiated action.",
            "data_sources": [
              "Windows Event ID 7034",
              "Windows Event ID 7036",
              "Windows Event ID 7024",
              "Windows Event ID 1074",
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Level 2 (Control System) HMI Workstations, Engineering Workstations, and SCADA/Historian Servers.",
            "action": "1. Symbolic Logic: Maintain a whitelist of critical ICS service names (e.g., OpcEnum, RsLinxService, ModbusGatewayService) on key servers and workstations. Monitor for Windows Event ID 7034 or 7024 involving a whitelisted service. Trigger a high-severity alert if a corresponding Windows Event ID 7036 (service started) does not appear for the same service within 60 seconds. Suppress the alert if a Windows Event ID 1074 (system shutdown) was logged by an authorized user just prior to the service termination. 2. Statistical Method: For each critical ICS service, establish a 30-day baseline for its mean time between failures (MTBF) using historical Event ID 7034/7024 data. Trigger a medium-severity alert if a service fails and its time since the last failure is less than 50% of its historical MTBF. Additionally, profile the frequency of specific error codes logged in Event ID 7024; an error code that is statistically rare (e.g., not seen in 90 days) should be flagged for investigation. 3. Machine Learning: Develop a supervised classification model (e.g., XGBoost) trained on historical Windows Event IDs 7034 and 7036, along with contextual host logs (Event ID 4688, Sysmon Event ID 1, 4624/4625 for logins). Features for the model should include service name, termination time, initiating process, user, preceding login events, and service dependencies. Label historical events as 'normal' (e.g., planned restart, system shutdown) or 'anomalous'. Use the model to predict the likelihood of new service terminations being anomalous, flagging events with a high anomaly score (e.g., >0.9) for immediate investigation by analysts."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]