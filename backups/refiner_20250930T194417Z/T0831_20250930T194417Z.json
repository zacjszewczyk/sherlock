[
  {
    "information_requirement": "Is an adversary manipulating physical control processes to cause an impact? (PIR)",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0831",
        "name": "Manipulation of Control",
        "evidence": [
          {
            "description": "An ICS 'write' command (e.g., Modbus function code 0x06, DNP3 function code 0x03, EtherNet/IP CIP Write) targeting a critical process setpoint is observed, and one of the following conditions is met: (a) the command's source IP is not in the 'Authorized_HMI_EWS_IPs' allowlist for the target asset, (b) the initiating user principal (correlated via Windows Event ID 4624) is not a member of the 'ICS_Engineers' or 'ICS_Operators' Active Directory security groups, OR (c) the command's timestamp occurs outside a pre-defined operational or maintenance window for that specific asset (e.g., a write command at 03:00 local time for a system with a documented 07:00-19:00 operational schedule).",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log",
              "Data Historian Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) on the Process Control Network (PCN), Human-Machine Interfaces (HMIs) on the PCN, Level 1 & 2 Network Segments (e.g., containing PLCs, RTUs, IEDs), Data Historian Servers, Active Directory Domain Controllers",
            "action": "1. Symbolic Logic: Create a query to identify all ICS 'write' commands in Zeek protocol logs (modbus.log, dnp3.log, enip.log, s7comm.log) targeting known critical setpoint registers. For each write event, extract the source IP from the associated Zeek conn.log entry. Correlate the source IP and timestamp with Windows Event ID 4624 (successful logon) on the source host to identify the user account SID. Check if the source IP is in the asset's allowlist and if the user SID is a member of the 'ICS_Engineers' or 'ICS_Operators' AD groups. Trigger an alert if the source IP is not on the allowlist, the user is not in an authorized group, or the command timestamp is outside the documented operational hours for the target asset. 2. Statistical Method: For each critical setpoint tag, ingest historian data and ICS protocol logs into a time-series database. Calculate a 90-day rolling baseline for the rate of change (value delta per minute) and modification frequency (writes per hour). Compute the 99th percentile for both metrics. Trigger an alert if a new write command causes a rate of change that exceeds its 99th percentile threshold, or if the number of writes in a given hour exceeds its 99th percentile. 3. Machine Learning: Train a multivariate time-series anomaly detection model (e.g., Isolation Forest or Variational Autoencoder) on historical data historian logs for critical setpoints. The feature set should include: setpoint value, time of day, day of week, source IP of modification, and user account. An anomaly score exceeding a dynamically adjusted threshold (e.g., > 0.9) for a new write event triggers an alert for analyst review, indicating a deviation from learned normal operational patterns."
          },
          {
            "description": "An ICS protocol 'write' or 'control' command (e.g., Modbus function code 0x0F, DNP3 function code 0x04) is detected where the source IP address and MAC address are not present in the asset inventory database for that specific Layer 1 or Layer 2 network segment, OR the asset inventory entry for the source device explicitly designates its role as 'read-only' or 'non-control' (e.g., a data historian collector).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network switches and routers within Level 1 (Basic Control) and Level 2 (Supervisory Control) of the Purdue Model, Industrial DMZ (IDMZ) gateways, Firewalls between IT and OT networks, SCADA Servers, Management Workstations",
            "action": "1. Symbolic Logic: Maintain a real-time asset inventory that maps authorized IP/MAC addresses to specific PCN segments and their designated roles (e.g., HMI, PLC). Monitor Zeek protocol logs for any 'write' or 'control' commands. For each command, extract the source IP and MAC address (via correlation with ARP data or switch logs). Query the asset inventory where `ip_address == [source_ip]` AND `mac_address == [source_mac]`. Trigger an alert if no record is found OR if the record's `role` attribute is designated as 'read-only'. 2. Statistical Method: For each critical ICS device (PLC, RTU), establish a baseline of unique source IP addresses that initiate 'write' commands over a 30-day period. Calculate the Shannon entropy of the source IP distribution communicating with each device over a rolling 1-hour window using the formula $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$. Trigger an alert if the entropy score for a given device increases by more than 3 standard deviations from its historical mean, indicating a suspicious diversification of control sources. 3. Machine Learning: Apply a graph-based anomaly detection algorithm to network flows from Zeek conn.log. Model the PCN as a graph where nodes are devices (IPs) and edges represent connections, with features like protocol and port. Train the model on 90 days of data to learn normal communication subgraphs. An alert is triggered if the model detects a new, anomalous edge representing an ICS 'write' command originating from a node that is not part of the learned 'authorized control' subgraph."
          },
          {
            "description": "A process creation event (Windows Event ID 4688) is observed on a designated HMI or EWS for an executable known to interact with ICS protocols (e.g., Modscan.exe, plccmd.exe) or a generic command-line utility (e.g. powershell.exe), AND one of the following conditions is met: (a) the parent process is not 'explorer.exe' or another whitelisted process, (b) the executable's file hash does not match a value in the known-good software inventory, OR (c) the process is created in a non-interactive session (e.g., Logon Type 3) by an account not designated for remote administration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4648"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs) on the PCN, Engineering Workstations (EWS) on the PCN, SCADA Servers, Remote Access Servers (RAS) providing access to the OT network",
            "action": "1. Symbolic Logic: On HMI/EWS endpoints, monitor for Windows Event ID 4688. For each event where `NewProcessName` matches a list of high-risk utilities (e.g., `plctool.exe`, `ncat.exe`, `powershell.exe`), verify the `ParentProcessName` against a per-executable whitelist. Concurrently, check the logon session type by correlating with Windows Event ID 4624. Trigger an alert if a high-risk process is spawned by an unauthorized parent (e.g., `winword.exe`) OR if it is spawned in a network logon session (Logon Type 3) not associated with a legitimate administrative tool. 2. Statistical Method: For each HMI/EWS, establish a 30-day baseline of parent-child process relationships, stored as a frequency map. For each new process creation (Event ID 4688), calculate the rarity of the observed parent-child pair. Trigger an alert if the pair's frequency is in the bottom 1st percentile (i.e., it is extremely rare), especially if the child process is a known ICS tool or command-line interpreter. 3. Machine Learning: Deploy a pre-trained classification model (e.g., a Gradient Boosted Tree) on endpoints, trained on Windows Event ID 4688 logs. Features should include: process name, parent process name, command-line argument length and entropy, user context, and session ID. The model classifies each execution as 'benign' or 'suspicious'. An event classified as 'suspicious' with a confidence score > 0.9, especially involving command-line arguments with ICS-related keywords (e.g., 'modbus', 'write', 'register'), triggers a high-severity alert."
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]