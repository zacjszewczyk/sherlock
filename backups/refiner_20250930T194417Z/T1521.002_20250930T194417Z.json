[
  {
    "information_requirement": "Is an adversary using non-standard or suspicious asymmetric cryptography for command and control on mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1521.002",
        "name": "Asymmetric Cryptography",
        "evidence": [
          {
            "description": "A TLS session originating from a mobile device IP range exhibits one or more suspicious certificate attributes: 1) the 'validation_status' field in Zeek ssl.log contains 'self-signed', 2) the certificate's validity duration ('not_valid_after' - 'not_valid_before') is in the bottom 5th percentile of all observed durations, or 3) the certificate's 'issuer' or 'subject' fields match a known malicious indicator.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek ja3.log",
              "Zeek ja3s.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi access points, VPN concentrators, MDM (Mobile Device Management) proxy servers, Cloud Access Security Brokers (CASB), Cellular network gateways (for corporate-liable devices backhauling traffic)",
            "action": "1) Symbolic Search: Query Zeek ssl.log where the 'issuer' or 'subject' field matches an entry in a threat intelligence feed of malicious certificate CAs and subjects. Generate an alert for each match. 2) Statistical Analysis: For all TLS sessions in Zeek ssl.log, calculate the validity duration in days. Establish a 30-day rolling baseline of these durations. Generate an alert for any session where 'validation_status' contains 'self-signed' OR the duration falls below the 5th percentile of the baseline. Use the 'uid' to correlate with Zeek conn.log and prioritize alerts for sessions with total bytes ('orig_bytes' + 'resp_bytes') above the 95th percentile. 3) Machine Learning Classification: Develop a Random Forest classification model to identify malicious TLS sessions. Engineer features from Zeek logs including: certificate validity duration, cipher suite, TLS version ('version' from ssl.log), connection duration, total bytes transferred ('orig_bytes' + 'resp_bytes' from conn.log), and the client/server TLS fingerprints ('ja3' and 'ja3s' from ja3.log/ja3s.log). Train the model on labeled data. Apply the model to new sessions and use the output probability score to rank connections for analyst investigation."
          },
          {
            "description": "Encrypted network connections from a mobile device IP to a single external destination IP and port exhibit periodic 'heartbeat' behavior, characterized by a low coefficient of variation for both inter-arrival times and connection byte sizes, or the destination IP is a known C2 server.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VPN concentrators, MDM (Mobile Device Management) proxy servers, Corporate Wi-Fi gateways, Cellular network gateways (for corporate-liable devices backhauling traffic)",
            "action": "1) Symbolic Search: Continuously query Zeek conn.log where the destination IP ('id.resp_h') matches a threat intelligence feed of known C2 servers and the source IP ('id.orig_h') is within a defined mobile device IP range. Generate a high-priority alert for any match. 2) Statistical Analysis: For each 1-hour window, group Zeek conn.log records by source IP, destination IP, and destination port. For each group with >10 connections, calculate two series: 1) the time difference between consecutive connection timestamps, and 2) the total bytes ('orig_bytes' + 'resp_bytes') for each connection. Compute the coefficient of variation (Standard Deviation / Mean) for both series. Flag groups where both coefficients are below the 1st percentile of their respective historical distributions, indicating highly regular, automated traffic. 3) Machine Learning Anomaly Detection: Implement a time-series anomaly detection model using an LSTM (Long Short-Term Memory) autoencoder. For each unique source-destination-port tuple, create a multivariate time series using features like inter-arrival time, connection duration, and total bytes. Train the autoencoder on a baseline of known benign traffic. In production, feed new connection data into the model; a high reconstruction error score indicates a significant deviation from normal patterns, flagging a potential C2 beacon for investigation."
          },
          {
            "description": "Data with a Shannon entropy value exceeding the 99th percentile of a historical baseline is found within DNS query names or HTTP User-Agent strings originating from mobile devices, suggesting the use of these channels for C2 communication.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Forward web proxies, Reverse proxies, Cloud Access Security Brokers (CASB)",
            "action": "1) Symbolic Search: Query Zeek dns.log where the 'query' field matches a regex-based ruleset for known DGA (Domain Generation Algorithm) patterns or a threat intelligence feed of malicious domains. Separately, query Zeek http.log where the 'user_agent' field matches a list of known malicious or non-standard user agents. Alert on any match. 2) Statistical Analysis: For every DNS query in Zeek dns.log, calculate the Shannon entropy of the longest subdomain label. For every request in Zeek http.log, calculate the Shannon entropy of the 'user_agent' string. Maintain a 30-day rolling baseline of entropy values for each field. Flag any value that exceeds the 99th percentile of its baseline. As a secondary check, perform a Chi-squared goodness-of-fit test on the character frequency distribution of the flagged string against a baseline distribution of benign strings; a p-value < 0.01 strengthens the alert. 3) Unsupervised Anomaly Detection: Use a density-based clustering algorithm like DBSCAN for outlier detection. Engineer features from Zeek dns.log (query length, subdomain count, entropy, percentage of numeric characters) and Zeek http.log (user_agent length, entropy). Apply DBSCAN to the feature space. Data points that the algorithm classifies as noise are anomalous and should be investigated as potential covert C2 channels."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]