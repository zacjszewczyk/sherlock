[
  {
    "information_requirement": "Has the adversary gained initial access to critical ICS components like Engineering Workstations or HMIs via malicious code execution? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "Observation of a critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') loading a dynamic-link library (DLL) where the 'Signed' field is 'false', the 'SignatureStatus' field is 'invalid', the 'ImageLoadedHash' value is in the lowest 1st percentile of prevalence across all ICS endpoints over the last 30 days, or the 'ImageLoaded' path originates from a non-standard or user-writable directory (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp).",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), Operator Stations, Process Control Servers (e.g., Historians, Domain Controllers in the PCN)",
            "action": "1. Symbolic Logic (Allowlist & Blocklist Filtering): Query for Windows Event ID 7 (Sysmon - Image Loaded) events where the 'Image' field matches known critical ICS processes (e.g., 'HMIRuntime.exe', 'RSLogix.exe'). For these events, apply the following filters: a) 'Signed' is 'false' OR 'SignatureStatus' is 'invalid'. b) 'ImageLoaded' path is NOT in an established allowlist of known legitimate DLL paths for that process. c) 'ImageLoaded' path IS in a blocklist of suspicious or user-writable directories (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp, C:\\ProgramData\\*). Alert on any event matching these criteria, including the full event details and the specific matching rule.\n2. Statistical (Prevalence & Entropy Analysis): For Windows Event ID 7 (Sysmon - Image Loaded) events involving critical ICS processes, calculate the 30-day rolling prevalence of each unique 'ImageLoadedHash' across all ICS assets. Alert when a module loaded by a critical process has an 'ImageLoadedHash' prevalence below the 1st percentile for that specific process. Concurrently, compute the Shannon entropy of the 'ImageLoaded' file path string. Alert if the path entropy exceeds a dynamic threshold, such as 3 standard deviations above the mean entropy for legitimate DLLs loaded by that process, or a static threshold like 4.0, indicating a potentially obfuscated or dynamically generated path.\n3. Machine Learning (Behavioral Anomaly Detection for Module Loads): Apply an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) to Windows Event ID 7 (Sysmon - Image Loaded) events for critical ICS processes. Train the model on 90 days of historical data, using features such as 'ImageLoaded' path (vectorized), 'ImageLoadedHash' (categorical/embedding), 'Signed' status, 'SignatureStatus', and time-of-day. The model should establish a baseline of normal module loading behavior for each critical process. Generate an alert for new 'ImageLoaded' events that the model scores as highly anomalous, indicating significant deviations from the learned baseline, such as previously unseen module paths, unusual loading times, or unexpected signature statuses for a given process."
          },
          {
            "description": "A critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') initiates an outbound network connection where the 'DestinationIp' or 'DestinationPort' is not present in its historical baseline of observed communications, or the resolved domain ('query' in Zeek dns.log) has not been previously observed for that specific process.",
            "data_sources": [
              "Windows Event ID 3 (Sysmon - Network Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) Segments, EWS, HMIs, Historian Servers",
            "action": "1. Symbolic Logic (Allowlist & Threat Intelligence Matching): For critical ICS processes, establish an allowlist of expected 'DestinationIp', 'DestinationPort', and 'Protocol' pairs for outbound network connections. Query and correlate 'Windows Event ID 3 (Sysmon - Network Connection)' and 'Zeek conn.log' events where the 'Image' field (Sysmon) or 'process_name' (correlated) matches a critical ICS process. Alert if a connection's 'DestinationIp' or 'DestinationPort' is not on the established allowlist. Additionally, for 'Zeek dns.log' events originating from critical ICS assets, cross-reference the 'query' field against continuously updated threat intelligence feeds for known malicious domains. Alert on any DNS query that matches a malicious domain entry.\n2. Statistical (Rare Destination & Port Detection): For critical ICS processes, calculate the 90-day rolling frequency of each unique 'DestinationIp' and 'DestinationPort' from correlated 'Zeek conn.log' and 'Windows Event ID 3 (Sysmon - Network Connection)' events. Alert when a critical process initiates a connection where either the 'DestinationIp' or 'DestinationPort' falls below the 1st percentile of observed frequency for that specific process. Prioritize alerts where the 'DestinationIp' is external to the PCN or the 'DestinationPort' is not a standard port for the application's typical communication.\n3. Machine Learning (Network Behavioral Anomaly Detection): Implement an unsupervised anomaly detection model (e.g., Isolation Forest, Autoencoder) to profile network communication from critical ICS processes. Train the model on 90 days of correlated 'Zeek conn.log' and 'Windows Event ID 3 (Sysmon - Network Connection)' data. Use features including 'DestinationIp' (vectorized), 'DestinationPort', 'Protocol', 'duration', 'orig_bytes', 'resp_bytes', and entropy of 'query' (from 'Zeek dns.log'). The model should establish a baseline of normal network activity for each critical process. Generate an alert for new network connections that the model scores as highly anomalous, indicating significant deviations from the learned normal communication patterns (e.g., unusual destination, port, or traffic volume)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary escalating privileges on ICS hosts to gain deeper control over critical industrial processes? (PIR)",
    "tactic_id": "TA0111",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T0874",
        "name": "Hooking",
        "evidence": [
          {
            "description": "A critical ICS process executing with elevated privileges (e.g., 'IntegrityLevel' field indicating 'System' or 'High' in Windows logs) loads a dynamic-link library (DLL) where the 'Signed' field is 'false', the 'SignatureStatus' field is 'invalid', the 'ImageLoadedHash' value is in the lowest 0.5th percentile of prevalence across all ICS endpoints over the last 30 days, or the 'ImageLoaded' path originates from a non-standard or user-writable directory (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp, C:\\Users\\*\\Downloads).",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Domain Controllers, Application Servers within the PCN",
            "action": "1. Symbolic Logic (Privileged Process DLL Allowlisting & Blocklisting): Query for Windows Event ID 7 (Sysmon - Image Loaded) events where the 'Image' field matches critical ICS processes AND the process is running with elevated privileges (e.g., 'IntegrityLevel' is 'System' or 'High', or 'User' field indicates a privileged account). Establish an allowlist for loaded modules based on 'ImageLoaded' path, 'ImageLoadedHash', and 'Signed' status for these privileged processes. Generate an alert if 'Signed' is 'false' OR 'SignatureStatus' is 'invalid' OR the 'ImageLoaded' path is NOT on the established allowlist OR the 'ImageLoaded' path IS in a blocklist of suspicious or user-writable directories (e.g., C:\\Windows\\Temp, C:\\Users\\*\\AppData\\Local\\Temp, C:\\Users\\*\\Downloads).\n2. Statistical (Entropy & Low Prevalence Module Detection for Privileged Processes): For Windows Event ID 7 (Sysmon - Image Loaded) events from critical ICS processes running with elevated privileges, calculate the Shannon entropy of the 'ImageLoaded' file path. Alert if this entropy exceeds a threshold (e.g., 4.5) or is 3 standard deviations above the mean entropy for legitimate DLLs loaded by that process. Simultaneously, calculate the 30-day rolling global prevalence of each 'ImageLoadedHash' across all monitored ICS assets. Alert if a module loaded by a privileged critical process has an 'ImageLoadedHash' prevalence below the 0.5th percentile.\n3. Machine Learning (Privileged Process Module Load Anomaly Detection): Apply an unsupervised anomaly detection model (e.g., One-Class SVM, Isolation Forest) to Windows Event ID 7 (Sysmon - Image Loaded) events where critical ICS processes are running with elevated privileges. Train the model on 90 days of historical data using features such as 'ImageLoadedSize', 'ImageLoadedHash' (categorical/embedding), 'Signed' status, 'SignatureStatus', and vectorized characteristics of the 'ImageLoaded' path (e.g., path depth, entropy). The model should establish a normal profile for module loads by these privileged processes. Generate an alert for new module load events that the model scores as significant outliers, indicating potential malicious injection or hooking attempts."
          },
          {
            "description": "A critical ICS process (e.g., 'HMIRuntime.exe', 'RSLogix.exe') spawns a child process ('NewProcessName' from Windows Event ID 1 or 4688) that is not part of its established normal execution patterns, particularly if the child process is a command shell (e.g., 'cmd.exe', 'powershell.exe'), a scripting interpreter, or an administrative utility (e.g., 'net.exe', 'wmic.exe', 'sc.exe'), especially when preceded by a suspicious DLL load (Windows Event ID 7).",
            "data_sources": [
              "Windows Event ID 7 (Sysmon - Image Loaded)",
              "Windows Event ID 4688 (Security - A process has been created)",
              "Windows Event ID 1 (Sysmon - Process Create)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), HMIs, Historian Servers",
            "action": "1. Symbolic Logic (Correlated Suspicious DLL Load and Child Process Spawn): Construct a correlation rule: IF a 'Windows Event ID 7 (Sysmon - Image Loaded)' event for a critical ICS process ('Image') indicates a suspicious module load (e.g., 'Signed' is 'false' OR 'SignatureStatus' is 'invalid' OR 'ImageLoaded' path is from a known suspicious directory) AND THEN, within 60 seconds, a 'Windows Event ID 1 (Sysmon - Process Create)' or 'Windows Event ID 4688 (Security - A process has been created)' event occurs where the 'ParentProcessName' matches the critical ICS process AND the 'NewProcessName' (child process) is on a blocklist of administrative tools, command shells, or scripting interpreters (e.g., 'cmd.exe', 'powershell.exe', 'net.exe', 'wmic.exe', 'sc.exe', 'psexec.exe', 'bitsadmin.exe'). Generate an alert for such chained events, providing full context from both the DLL load and process creation events.\n2. Statistical (Child Process Deviation Scoring): For each critical ICS process, establish a 90-day baseline of its normal child process execution patterns using 'Windows Event ID 1 (Sysmon - Process Create)' and 'Windows Event ID 4688 (Security - A process has been created)'. Baseline features should include the frequency of 'NewProcessName', typical 'ProcessCommandLine' arguments (e.g., keywords, argument count), 'ProcessCommandLine' length, and user context. For each new child process spawn, calculate a deviation score based on how much it deviates from the established baseline (e.g., 'NewProcessName' is rare, 'ProcessCommandLine' contains unseen keywords, 'ProcessCommandLine' length is outside 3 standard deviations of the mean). Trigger an alert if this deviation score exceeds a predefined threshold (e.g., 70 on a scale of 0-100), indicating highly anomalous child process activity.\n3. Machine Learning (Parent-Child Process Relationship Anomaly Detection): Apply a graph-based or sequence prediction anomaly detection model (e.g., using Graph Neural Networks or LSTM) to model normal parent-child process relationships for critical ICS applications. Train the model on 90 days of 'Windows Event ID 1 (Sysmon - Process Create)' and 'Windows Event ID 4688 (Security - A process has been created)' data, mapping 'ParentProcessName' to 'NewProcessName' and incorporating 'ProcessCommandLine' details. The model should learn expected child process types, sequences, and command-line arguments for each parent. Integrate context from any preceding 'Windows Event ID 7 (Sysmon - Image Loaded)' alerts. Generate an alert when a critical ICS process spawns a child process that significantly deviates from the learned normal relationship or sequence, especially if it occurs shortly after a suspicious DLL load alert, indicating potential privilege escalation via code injection."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]