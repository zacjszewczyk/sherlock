[
  {
    "information_requirement": "Has an adversary achieved persistence by modifying a client software binary on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1645",
        "name": "Compromise Client Software Binary",
        "evidence": [
          {
            "description": "A managed mobile device fails a remote integrity check, indicated by an explicit failure verdict in attestation logs. Observable artifacts include Google Play Integrity API responses where the `deviceIntegrity` verdict does not include `MEETS_DEVICE_INTEGRITY`, or a failed result from the Samsung Knox Attestation API, directly indicating a compromised system partition or bootloader [1].",
            "data_sources": [
              "Mobile Device Management (MDM) logs",
              "Google Play Integrity API logs",
              "Samsung Knox Attestation logs",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Mobile Device Management (MDM) Platform, and Cloud-based attestation service endpoints (e.g., Google Cloud Platform, Samsung Knox services)",
            "action": "1. (Symbolic) Create a high-severity alert that triggers immediately upon the ingestion of any attestation log where the Google Play Integrity `deviceIntegrity` verdict is not `MEETS_DEVICE_INTEGRITY` or `MEETS_STRONG_INTEGRITY`, or a comparable failure status is received from a Samsung Knox attestation. 2. (Statistical) On a 6-hour rolling window, calculate the attestation failure rate as a percentage of total checks, segmented by device model, OS version, and geographic region. Generate a medium-severity alert if the failure rate for any segment exceeds the 99th percentile of its 30-day historical baseline. 3. (Machine Learning) Upon a high-severity attestation failure alert, automatically trigger a playbook to query and enrich all network connection logs (Zeek conn.log, ssl.log) from the failed device for the preceding 72 hours. Use a pre-trained gradient boosting classifier to score each destination FQDN/IP based on features including domain entropy, SSL certificate issuer rarity, JA3/JA3S hash prevalence, and threat intelligence reputation. Escalate the incident to critical if the device communicated with any destination having a model score greater than 0.9."
          },
          {
            "description": "A mobile device exhibits anomalous network behavior inconsistent with its established baseline. This is evidenced by connections to known malicious C2 infrastructure, DNS queries for domains with high entropy characteristic of Domain Generation Algorithms (DGAs), or statistically significant deviations in data transfer volumes or protocol distributions.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN terminators, and Cloud Access Security Brokers (CASB)",
            "action": "1. (Symbolic) Continuously match destination IP addresses (`id.resp_h` in conn.log) and Server Name Indication (`server_name` in ssl.log) against a high-fidelity threat intelligence feed of known C2 servers. Generate a high-severity alert on any match. 2. (Statistical) For each DNS query in Zeek dns.log, calculate the Shannon entropy of the queried domain name. Establish a baseline entropy distribution for the mobile device fleet. Generate a medium-severity alert for any device that queries a domain with an entropy score above the 98th percentile of the fleet baseline. Additionally, monitor the ratio of outbound to inbound bytes (`orig_bytes` / `resp_bytes`) in Zeek conn.log; alert if this ratio exceeds 10:1 for connections lasting more than 60 seconds. 3. (Machine Learning) For each mobile device, train a one-class SVM or isolation forest model on a feature set derived from its typical network behavior over a 30-day period. Features must include daily outbound data volume, count of unique destination IPs, distribution of destination ports, and average connection duration from Zeek conn.log. Score daily activity against the model; an anomaly score indicating an outlier should generate a medium-severity alert for analyst review."
          },
          {
            "description": "A legitimate, high-privilege system or managed corporate application exhibits an anomalously high crash rate or generates unexpected error logs on a specific device, suggesting instability caused by unauthorized modification.",
            "data_sources": [
              "Mobile Device Management (MDM) logs",
              "Mobile Application Management (MAM) logs",
              "Application crash reporting logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized MDM/MAM platform, Cloud-based application performance monitoring (APM) or crash reporting services.",
            "action": "1. (Symbolic) Configure a high-severity alert to trigger if any crash is reported for a critical, allow-listed system application (e.g., `com.android.settings`, `com.android.phone`) on any managed device, as these should be exceptionally stable. 2. (Statistical) On a daily basis, calculate the crash rate (crashes per 1000 sessions) for each managed corporate application, segmented by app version and device model. Generate a medium-severity alert if an individual device's crash rate for a specific app exceeds the 99.5th percentile of the fleet's 30-day historical baseline for that same app and version. 3. (Machine Learning) Implement a time series anomaly detection model (e.g., ARIMA) to forecast the expected daily crash count for critical applications across the device fleet. Generate a medium-severity alert when the actual crash count significantly exceeds the model's forecasted upper confidence interval, indicating a statistically significant deviation from normal behavior that could signify a widespread issue from a compromised binary."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]