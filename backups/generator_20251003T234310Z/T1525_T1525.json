[
  {
    "information_requirement": "Is the adversary maintaining persistence by implanting internal images? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1525",
        "name": "Implant Internal Image",
        "evidence": [
          {
            "description": "A container, deployed from a recently modified internal image, initiates a network connection to a destination IP address or fully qualified domain name (FQDN) present on a threat intelligence feed of known command and control (C2) servers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host nodes, network egress points, internal DNS resolvers",
            "action": [
              "Continuously filter Zeek conn.log and dns.log for all traffic originating from container host IP address space. Join the destination IP addresses and resolved FQDNs against a high-confidence C2 threat intelligence feed. Generate an alert upon any match, including the source container, destination, and the matched C2 indicator.",
              "For each unique container image name and version, profile the set of observed JA3 and JA3S TLS hashes from Zeek ssl.log to establish a baseline of legitimate cryptographic fingerprints. Alert on the appearance of any hash that is not in the established baseline for that specific image, as this may indicate the use of non-standard libraries common in C2 frameworks.",
              "For each container instance, train a time-series forecasting model (e.g., Prophet, ARIMA) on the total byte count (orig_bytes + resp_bytes in Zeek conn.log) and connection count, aggregated into 5-minute intervals. Generate an alert if the observed traffic volume or connection count for a container significantly exceeds the forecasted value and its confidence interval for a sustained period, suggesting anomalous C2 beaconing or data exfiltration."
            ]
          },
          {
            "description": "A process is created within a container that executes a command line containing syntax associated with reverse shells, remote file download/execution, or known cryptomining tools.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host nodes (Windows Servers)",
            "action": [
              "On container hosts, monitor Windows Event ID 4688 (Process Creation) events. Scan the 'CommandLine' field using a library of regular expressions to detect high-fidelity patterns of malicious activity, such as 'powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient...\"', 'certutil -urlcache -f', or process names like 'xmrig' and 'kinsing'.",
              "For each distinct image name and version, create a baseline of all normally executed process names and their parent-child relationships. Calculate the Shannon entropy of the command-line arguments for each process. Alert if a newly deployed container spawns a process not present in the baseline ('first seen' process), or if an existing process is spawned with command-line entropy exceeding the 99th percentile of its historical baseline.",
              "Fine-tune a large language model (LLM) or train a classification model (e.g., Logistic Regression, Random Forest) on a labeled dataset of command-line strings specific to containerized Windows environments. Feed the 'CommandLine' data from new Event ID 4688 events into the model to classify them as benign or malicious. A 'malicious' classification with a confidence score above a set threshold (e.g., 0.90) generates an alert, providing the model's feature importance for explainability."
            ]
          },
          {
            "description": "An image is pushed to the internal container registry from a source IP not associated with CI/CD systems, by a user account outside of the authorized developer/admin group, or at a time outside of standard business/deployment hours.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 4624",
              "Container Registry Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal container image registry, CI/CD pipeline servers, authentication servers",
            "action": [
              "Create and maintain explicit allowlists of source IP addresses for CI/CD servers and user accounts for authorized administrators. Correlate registry API calls indicating image pushes (e.g., HTTP POST to '/v2/.../blobs/uploads/' in Zeek http.log) with authentication logs (e.g., Windows Event ID 4624). Alert if an image push originates from an IP or user account not on the respective allowlist.",
              "Establish a baseline of normal image push activity, profiling source IPs, user accounts, time-of-day, and image sizes (from 'Content-Length' header in Zeek http.log). Develop a composite risk score for each push event. Increment the score for factors like: source IP not in top 95% of frequent pushers; user not in top 95% of frequent pushers; push occurs outside of 9am-7pm local time; image size is > 2 standard deviations from the mean for that repository. Alert on events exceeding a defined risk score threshold.",
              "Develop a multi-feature unsupervised anomaly detection model (e.g., Isolation Forest) using features such as source IP geolocation, user agent from HTTP headers, time of day, day of week, image size, and the ratio of API discovery calls to push calls from the source IP. Train the model on historical registry log data. Feed new image push events into the model to identify anomalous combinations of features that are collectively suspicious, as this model excels at finding 'unknown unknowns' without prior labeling."
            ]
          },
          {
            "description": "A newly deployed container, after an image update, exhibits a significant deviation in network or process behavior compared to its own historical baseline, such as creating novel network connections or executing unexpected processes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host nodes, internal network segments, network egress points",
            "action": [
              "For each critical application image, define a strict profile of allowed network connections (destination IP/subnet and port) and allowed process execution trees (parent/child processes). After a container is deployed from an updated image, monitor for any network connection (Zeek conn.log) or process execution (Windows Event ID 4688) that violates this profile. Note: This requires active maintenance of profiles with each legitimate application update.",
              "For each container instance, create a rolling 24-hour baseline of network behavior, including the set of destination ports, the distribution of destination subnets, and the Shannon entropy of destination IPs. After an image update, compare the new behavior to the pre-update baseline. Alert on a significant change, such as a connection to a destination port never seen before for that application, or if the destination IP entropy increases by more than two standard deviations from its baseline, suggesting scanning or C2.",
              "Use K-Means clustering to group containers based on runtime behavior profiles. Create a feature vector for each container including: a multi-hot encoded vector of process names executed, a vector of destination port counts, and average network traffic volume. After an image update, if a container instance is assigned to a different cluster than its pre-update version, or to a new, sparsely populated cluster, it indicates a significant behavioral change warranting investigation. Track the distance of each point from its cluster centroid as an anomaly score."
            ]
          },
          {
            "description": "An entity performs a high volume of discovery-related API calls against the image registry (e.g., listing all repositories or tags) without subsequently pulling or pushing an image, indicative of reconnaissance.",
            "data_sources": [
              "Zeek http.log",
              "Container Registry Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal container image registry, user workstation network segments",
            "action": [
              "Monitor registry access logs (e.g., from Zeek http.log) for a high count (e.g., > 50) of discovery API calls ('GET /v2/_catalog', 'GET /v2/.../tags/list') from a single source IP within a 10-minute window. Suppress alerts for known CI/CD or monitoring systems. Generate an alert if this discovery activity is not followed by a corresponding image pull or push from the same source IP within the next 30 minutes.",
              "Establish a baseline for the ratio of discovery API calls to pull/push calls per source IP over a 24-hour period. A source IP whose ratio dramatically exceeds the 99th percentile of all sources indicates reconnaissance activity. For example, a normal build server might have a 1:10 ratio, while a scanning tool might have a 50:1 ratio.",
              "Train a sequence analysis model (e.g., a Hidden Markov Model) on typical user session workflows with the registry API. An alert is triggered when a user's sequence of API calls has a very low probability of occurring based on the learned 'normal' sequences, such as a long, repetitive sequence of only 'list tags' calls."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]