[
  {
    "information_requirement": "Has an adversary impacted the integrity of our external-facing web applications through defacement? (PIR)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1491.002",
        "name": "External Defacement",
        "evidence": [
          {
            "description": "A file written to a web server directory, or an HTTP response body served from it, contains content that matches a known defacement signature or is statistically dissimilar to its previous version.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of public-facing web servers (e.g., C:\\inetpub\\wwwroot), network traffic egress points capturing HTTP responses, and file integrity monitoring agent logs.",
            "action": [
              "1. (Symbolic) For each file write event (Windows Event ID 4663) in a monitored web directory, extract the file hash and compare it against a threat intelligence feed of known defacement-related image and script hashes. Additionally, scan the file content or HTTP response body (from Zeek http.log) for known defacement-related text strings or malicious script signatures. Alert on any match. 2. (Statistical) For existing web pages, maintain a content baseline. Upon modification (Windows Event ID 4663), calculate the Jaccard similarity score between the new and previous versions. Alert if the score falls below a tuned threshold (e.g., less than 0.5), indicating a major, unexpected change. Also, monitor the rate of change; a modification outside a normal deployment window with a low similarity score is a high-confidence alert. 3. (ML) Use a pre-trained Naive Bayes or similar text classification model to analyze the text content of new or modified web pages. Classify content as 'Defacement', 'Legitimate', or 'Suspicious' based on a corpus of known defaced and legitimate pages to detect novel attacks that do not match known signatures."
            ]
          },
          {
            "description": "An inbound HTTP request targeting an external web application contains URI parameters, headers, or a body matching patterns of common web application exploits (SQLi, XSS, Command Injection) that often precede defacement.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors monitoring the DMZ, logs from Web Application Firewalls (WAFs), and reverse proxy server logs.",
            "action": [
              "1. (Symbolic) Search the 'uri' and POST body fields in Zeek http.log records using regular expressions for common SQL injection (`'|--|;`), command injection (`|id|whoami`), and XSS (`<script>`) patterns. Correlate findings with a 2xx response code to identify potentially successful exploitation attempts. 2. (Statistical) For each source IP and target URI parameter, establish a baseline for the Shannon entropy of the parameter value. A sudden spike in entropy for a given parameter, exceeding the 95th percentile of its historical distribution, can indicate obfuscated exploit strings or encoded payloads. 3. (ML) Train a supervised classification model (e.g., Logistic Regression or Random Forest) on labeled datasets of malicious and benign HTTP requests. Use features such as request length, parameter count, frequency of special characters, and entropy scores to classify each inbound request as 'Attack' or 'Benign' in near-real-time."
            ]
          },
          {
            "description": "Web content files (HTML, JS, CSS, etc.) are modified on a public-facing web server by a non-standard user account, at an anomalous time, or via a suspicious parent process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of public-facing web servers, especially web root directories such as C:\\inetpub\\wwwroot or /var/www/html.",
            "action": [
              "1. (Symbolic) Create an alert that triggers when Windows Event ID 4663 (Object Access) shows a write operation within a web root directory and the associated user account is not on an approved allowlist of administrative or deployment accounts. Correlate this with the parent process from Windows Event ID 4688; if the parent is not a legitimate deployment tool or administrative shell, escalate the alert. 2. (Statistical) For each web server, establish a baseline of file modification activity (Windows Event ID 4663) by user, process, hour of day, and day of week. Alert on spikes in modification volume that exceed 3 standard deviations from the mean for a given time window or on modifications by statistically rare user-process pairs. 3. (ML) Use an anomaly detection algorithm, such as Isolation Forest, on features extracted from file modification events. Model features should include time of day, day of week, user account name, parent process name (from EID 4688), and file extension. The model can learn the pattern of 'normal' deployment activity and flag modifications that deviate significantly from this multi-dimensional baseline."
            ]
          },
          {
            "description": "A command shell or scripting interpreter process is spawned on a web server by the web server's own process (e.g., w3wp.exe, apache2), indicating a potential web shell.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs (Sysmon, Windows Security) on public-facing web servers, and network connection logs from sensors monitoring traffic to and from these servers.",
            "action": [
              "1. (Symbolic) Create a high-severity alert for any instance where a web server process (e.g., `w3wp.exe`, `httpd.exe`, `nginx.exe`) is the parent process for a child process such as `cmd.exe`, `powershell.exe`, `bash`, `whoami.exe`, or `ipconfig.exe`, as seen in Windows Event ID 4688. 2. (Statistical) Analyze command-line arguments in Windows Event ID 4688 for statistical rarity. Calculate a baseline of common process executions and their arguments on web servers. Use a TF-IDF (Term Frequency-Inverse Document Frequency) approach to score the rarity of command-line arguments. A high score, especially for commands spawned by a web server process, indicates a likely web shell command. 3. (ML) Develop a sequence analysis model, like a Hidden Markov Model (HMM), to model normal sequences of events. A sequence such as 'inbound connection from rare IP (Zeek conn.log) -> web server process spawns cmd.exe (EID 4688) -> file write to web root (EID 4663)' would be flagged as a highly anomalous and malicious sequence."
            ]
          },
          {
            "description": "An HTTP POST request to a web server involves the upload of a script file (.php, .aspx) to a static content directory, an unusually large request body for a given URI, or a high frequency of POSTs from a single source IP.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DMZ network segments, reverse proxy logs, load balancer logs, and web server logs.",
            "action": [
              "1. (Symbolic) Create a rule to detect HTTP POST requests (from Zeek http.log) where the `filename` in the `Content-Disposition` header or the file magic number (from Zeek files.log) indicates a script (e.g., .php, .jsp, .aspx) and the target URI path is an uploads or images directory not intended for executable content. 2. (Statistical) For each unique URI on the web server, baseline the distribution of POST request body lengths over the last 30 days. Alert when a new POST request's body length exceeds the 99th percentile for that specific URI, which could indicate an attacker uploading a large defacement page or tool. 3. (ML) Use a clustering algorithm like DBSCAN on features extracted from HTTP POST requests: source IP, user-agent, request body length, and URI. This can automatically group 'normal' user upload behavior and identify outliers that do not fit any cluster, which could represent the upload of a web shell or defacement tool."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]