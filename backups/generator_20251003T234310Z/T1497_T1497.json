[
  {
    "information_requirement": "Is the adversary attempting to evade defenses related to virtualization or sandboxing?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A process creation event is observed where the file hash (e.g., SHA256) of the executable image matches a known indicator of compromise for tools or malware documented to use T1497.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log platform (e.g., SIEM) ingesting endpoint process creation events (with file hashes) from all enterprise workstations, servers, and virtual desktop infrastructure (VDI).",
            "action": [
              "Implement a detection rule that continuously compares the SHA256 hash of every new process executable (from Sysmon Event ID 1 or Windows Event ID 4688) against a threat intelligence feed of known sandbox evasion tools (e.g., Pafish, Al-Khaser) and malware families that employ T1497. Generate a high-severity alert upon a match.",
              "Perform frequency analysis on all matched evasion tool hashes across the environment. Establish a baseline for hash prevalence and alert if a specific hash appears on a statistically significant number of distinct hosts in a short timeframe (e.g., count exceeds the 95th percentile of new hash sightings per hour), indicating a possible widespread campaign.",
              "Deploy a pre-trained binary classification model (e.g., Gradient Boosting, Random Forest) that uses process metadata as features (e.g., parent process name, user context, command-line arguments, file path). Use the binary result of a hash match against an evasion tool list as a high-weight feature to help the model classify the process execution event as 'malicious-evasive' or 'benign'."
            ]
          },
          {
            "description": "A process executes one or more queries for specific file system, registry, or WMI artifacts that are indicative of a virtualized environment (e.g., VMware, VirtualBox) or the presence of common analysis tools (e.g., Wireshark, Sysinternals Process Monitor).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13",
              "Sysmon Event ID 19",
              "Sysmon Event ID 20",
              "Sysmon Event ID 21"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint log aggregator collecting high-fidelity process, file system, registry, and WMI monitoring events from all managed endpoints, with particular focus on developer workstations and designated analysis sandboxes.",
            "action": [
              "Create a correlation rule that triggers when a single process (identified by its ProcessGUID in Sysmon) accesses multiple items from a curated list of virtualization/sandbox artifacts within a short time window (e.g., 10 seconds). The list should include registry keys (HKLM\\SOFTWARE\\Oracle\\VirtualBox), file paths (C:\\windows\\System32\\Drivers\\VBoxGuest.sys), and WMI queries ('SELECT * FROM Win32_PortConnector WHERE ExternalReferenceDesignator LIKE \"%VMware%\"').",
              "For each process, calculate a 'Sandbox-Awareness Score' by summing weights assigned to each queried artifact (e.g., a common VM driver gets 1 point, a specific debugger registry key gets 5 points). Establish a baseline score for legitimate software (e.g., IT asset tools). Flag any process whose score exceeds a dynamic threshold, such as 3 standard deviations above the mean score for its executable name or for all processes in a 24-hour period.",
              "Utilize a sequence analysis model (e.g., Long Short-Term Memory network, LSTM) trained on ordered sequences of system events (registry reads, file accesses, WMI queries) generated by known evasion frameworks (e.g., Pafish). Apply the model to event streams from new processes to identify and classify execution patterns that match the specific, ordered logic of an evasion attempt, distinguishing it from random system queries by benign applications."
            ]
          },
          {
            "description": "A process, after performing queries indicative of an analysis environment, terminates in an unusually short amount of time with minimal system interaction, such as creating no child processes, writing no files, and initiating no network connections.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 5",
              "Sysmon Event ID 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake platform capable of correlating process lifecycle events (start/stop), file system modifications, and network connection logs from endpoints and network sensors for a single process execution.",
            "action": [
              "Create a stateful detection rule that triggers when a process (Sysmon ProcessGUID) generates an alert for 'Artifact Query' (from Evidence 2) and is then followed by a process termination event (Sysmon Event ID 5) within 5 seconds, without any intervening File Create (ID 11), Network Connection (ID 3), or Child Process (ID 1) events associated with that same ProcessGUID.",
              "For each executable name, establish a baseline distribution of process lifespans and resource consumption (CPU time, I/O bytes). For any process that performs a known sandbox check, flag it as anomalous if its lifespan falls in a low percentile (e.g., < 5th percentile) and its network/file I/O metrics are also anomalously low (e.g., < 10th percentile) compared to its historical peers.",
              "Train a supervised classifier (e.g., Decision Tree, SVM) on features extracted from completed process sessions. Features should include: lifespan, CPU time, bytes sent/received, files written, child processes spawned, and a boolean flag for 'sandbox_check_performed'. The model's objective is to classify sessions as 'evasive-termination' or 'normal-execution'. Deploy to score newly terminated processes."
            ]
          },
          {
            "description": "A process executes, performs initial system checks, and then remains dormant for a prolonged period (e.g., minutes or hours) before initiating primary malicious activity, such as establishing a command-and-control connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Correlated endpoint and network log sources within a SIEM or data lake, specifically linking process creation and DNS/network connection events over extended time windows (e.g., > 1 hour).",
            "action": [
              "For any process not on a pre-defined allowlist, create a rule that correlates its start time (Sysmon Event ID 1) with its first outbound network connection (Sysmon Event ID 3 or Zeek conn.log). Generate an alert if the time delta between process start and the first network connection exceeds a long, fixed threshold (e.g., 15 minutes).",
              "For each unique process executable, calculate the baseline distribution for its 'time-to-first-network-connection'. Flag any new instance of a process where this delay is a statistical outlier (e.g., > 99th percentile for that executable, or > 99.9th percentile for all processes if no baseline exists). This method is effective for detecting deviations from normal application startup behavior.",
              "Apply time-series clustering (e.g., k-Shape or Dynamic Time Warping) to group processes based on their resource utilization patterns over their lifetime (e.g., a vector of CPU/Network/Disk usage per minute). Identify and investigate clusters that universally exhibit a 'delayed-action' profile: a short burst of initial activity, a long period of near-zero activity, followed by a second burst of network or CPU activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary conducting discovery to identify virtualization or analysis environments?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497",
        "name": "Virtualization-Sandbox Evasion",
        "evidence": [
          {
            "description": "A process command line or decoded script content (e.g., PowerShell) contains high-fidelity strings, function names, or argument patterns that are unique to known open-source or private sandbox evasion and discovery tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log platforms that capture and store full process command-line arguments (from Sysmon Event ID 1) and decoded PowerShell script block logs (from Event ID 4104) from all enterprise endpoints.",
            "action": [
              "Deploy regular expressions to search all process command lines and PowerShell script block content for unique strings and patterns associated with discovery tools (e.g., 'pafish', 'al-khaser', 'Find-AVSignature.ps1', 'Get-Sandbox-Status'). A direct match should generate a high-priority alert.",
              "Calculate the enterprise-wide rarity (inverse document frequency) of command-line arguments and script n-grams. An execution event containing statistically rare tokens that are also found in public evasion tool repositories is highly suspicious. Score commands based on the sum of the rarity of their tokens and alert on high scores.",
              "Train a text classification model (e.g., a convolutional neural network for text or a transformer-based model) on a labeled dataset of benign and malicious (specifically, evasion-focused) scripts and command lines. Deploy the model to score all new command lines and script blocks in real-time to identify novel evasion tools that share syntactic or semantic features with known samples."
            ]
          },
          {
            "description": "A process, typically a command shell, executes a system enumeration command (e.g., 'tasklist', 'Get-Process') and pipes the output to a filtering utility (e.g., 'findstr', 'Select-String') to actively search for keywords associated with security, analysis, or debugging tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint log aggregators collecting full process command-line arguments, with a focus on parent-child process relationships originating from interactive shells (cmd.exe, powershell.exe) or office applications.",
            "action": [
              "Create a detection rule that looks for process command lines (Sysmon Event ID 1) containing a known enumeration command (e.g., 'tasklist', 'sc query') followed by a pipe character ('|') and a filter command (e.g., 'findstr', 'grep') with arguments matching a list of security tool process names or keywords (e.g., 'wireshark', 'sysmon', 'procmon', 'x64dbg', 'fiddler').",
              "Profile the frequency and complexity of command-line piping by each user and host. A user or system account executing chained enumeration-and-filter commands is anomalous if it deviates from its established baseline. Flag users whose daily count of such chained commands exceeds 3 standard deviations above their 30-day moving average.",
              "Model parent-child process chains and their associated command lines using a graph-based anomaly detection algorithm. The model learns common execution graphs (e.g., 'explorer.exe' -> 'cmd.exe' -> 'ipconfig'). It will then flag abnormal graphs, such as 'winword.exe' -> 'cmd.exe' -> 'tasklist | findstr sysmon', as high-risk anomalies indicative of malicious discovery."
            ]
          },
          {
            "description": "A single process, shortly after creation, rapidly performs a diverse set of system queries unrelated to its apparent function. These queries check for signs of human interaction (e.g., mouse movement, recent documents), specific hardware configurations (e.g., low CPU core count), or system properties (e.g., short uptime) common to sandboxes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint log aggregators collecting a high volume of diverse event types, including API calls for user input, registry queries, and file system access, primarily from user workstations and VDI environments.",
            "action": [
              "Create a rule that triggers if a single process (by ProcessGUID) performs a combination of 3 or more distinct 'humanity checks' within its first 10 seconds of execution. Checks include: querying registry for screen resolution (HKCU\\Control Panel\\Desktop), accessing the user's 'Recent' items folder, and executing commands like 'systeminfo' to check uptime or hardware.",
              "For each process, calculate the Shannon entropy of the event types (e.g., registry read, file read, WMI query, network connect) it generates within the first 30 seconds of execution. A process with an unusually high entropy score, indicating it is touching many different parts of the system in a non-linear fashion, is suspicious. Flag processes with an event entropy score in the top 1% relative to all other new processes.",
              "Train an unsupervised anomaly detection model, such as an autoencoder, on sequences of system events from thousands of benign application startups. The model learns to reconstruct 'normal' startup behavior with low error. A process performing diverse humanity checks will produce a high reconstruction error when processed by the model, thus flagging it as a behavioral anomaly."
            ]
          },
          {
            "description": "A process makes a single, low-volume network connection to a high-reputation public service (e.g., Google DNS at 8.8.8.8) immediately after launch. The connection involves a minimal data exchange (e.g., a DNS query and response, a TCP handshake) with no follow-on data transfer, which is indicative of a simple internet connectivity check.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Sysmon Event ID 3",
              "Sysmon Event ID 22"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensor logs (e.g., Zeek) from internet egress points and core DNS servers, correlated within a SIEM with endpoint-based network connection events (Sysmon Event ID 3/22) to attribute network traffic to a specific source process.",
            "action": [
              "Alert when a process initiates a DNS query (Zeek dns.log) for a common domain (e.g., 'google.com') and a subsequent TCP/UDP connection (Zeek conn.log) where the total bytes transferred ('orig_bytes' + 'resp_bytes') is less than a small threshold (e.g., 256 bytes) and the connection state is 'S0', 'SF' but with no payload, or 'REJ'. The alert should only fire if the process makes no other network connections in the following minute.",
              "For all outbound connections from the environment, calculate the distribution of total session bytes. Identify connections that fall below a very low percentile (e.g., the 1st percentile) and are directed to high-reputation IP addresses. Correlate these 'micro-connections' with the initiating process on the endpoint. A process whose only network activity consists of one or more of these micro-connections is a strong candidate for an evasion check.",
              "Train a one-class SVM or Isolation Forest model on a feature set describing benign network flows (e.g., duration, total bytes, destination port, server IP reputation). This model creates a boundary defining 'normal' network behavior. Flows that fall far outside this boundary, especially those with extremely low duration and byte counts to common destinations, can be flagged as anomalous 'canary' checks used for evasion."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]