[
  {
    "information_requirement": "Is the adversary maintaining persistence using pre-OS boot mechanisms?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1542",
        "name": "Pre-OS Boot",
        "evidence": [
          {
            "description": "A host establishes one or more outbound TCP/UDP connections to an IP address or fully qualified domain name (FQDN) that is a confirmed indicator of compromise (IOC) associated with known bootkit or UEFI implant command and control (C2) infrastructure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Gateway, DNS Resolvers",
            "action": [
              "Join network connection logs (Zeek conn.log) with DNS query logs (Zeek dns.log) on the unique connection ID (UID). Correlate the destination IP addresses and queried domain names against a high-confidence threat intelligence feed of known bootkit/UEFI implant C2 infrastructure. Generate a high-severity alert for any match.",
              "For all outbound connections, calculate the entropy of the requested FQDNs in Zeek dns.log. Establish a baseline of FQDN entropy per host. Alert on hosts exhibiting a sudden, sustained increase in DNS entropy above the 95th percentile of its historical values, which can indicate use of Domain Generation Algorithms (DGAs).",
              "Use an unsupervised learning model (e.g., Isolation Forest) on Zeek conn.log features (duration, protocol, service, bytes sent/received, connection state) to identify anomalous network connections. Flag connections that are strong outliers, prioritizing those to low-prevalence IP addresses or ASNs not previously associated with the host."
            ]
          },
          {
            "description": "An unauthorized process or user context executes a known utility (e.g., bcdedit.exe, bootsect.exe) with command-line arguments that modify the boot configuration, Master Boot Record (MBR), or UEFI variables.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers, Endpoint Workstations, Domain Controllers, IT Administrator Workstations",
            "action": [
              "Create a detection rule to monitor for process creation events (Windows Event ID 4688) where the process name is `bcdedit.exe`, `bootsect.exe`, or `reagentc.exe` and the command line contains modification arguments like `/set`, `/nt60 /mbr`, or `/enable`. Alert if the parent process is not `explorer.exe`, `cmd.exe` run by an authorized administrator, or a known IT management tool.",
              "For each host, establish a baseline frequency of execution for boot-related utilities (`bcdedit.exe`, `bootsect.exe`, etc.). Calculate the 99th percentile for the daily execution count of these tools per user. Alert when the daily count for any host or user exceeds this statistical threshold, indicating unusually frequent modification attempts.",
              "Train a classification model (e.g., Logistic Regression, Random Forest) on the parent-child process relationship, user context, and command-line arguments for Event ID 4688. Label known-good administrative activity (e.g., from change management tickets). Use the model to score new executions of boot utilities; a high probability score of being malicious triggers an alert for analyst review."
            ]
          },
          {
            "description": "A process performs write operations to a physical disk's raw sectors (e.g., \\\\.\\PhysicalDrive0) or system-reserved partitions outside of a scheduled maintenance or OS-installation window.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint and Server System Disks, System Reserved Partitions",
            "action": [
              "Monitor for Windows Event ID 4663 ('An attempt was made to access an object') where the Object Name matches a physical drive pattern (e.g., `\\\\Device\\\\Harddisk*` or `\\\\.\\\\PhysicalDrive*`) and the Accesses field includes `WriteData` or `AppendData`. Maintain an allowlist of legitimate processes (e.g., backup software, disk management tools) and alert on any access from an unapproved process.",
              "Profile the hourly volume of Event ID 4663 events related to raw disk write access for each host. Use a moving average and standard deviation to define a normal range of activity. Alert when the event volume on a host exceeds 3 standard deviations above its moving average, especially outside of business hours or approved maintenance windows.",
              "Develop a time-series anomaly detection model (e.g., SARIMA) for the rate of raw disk access events (Event ID 4663) per host. Correlate detected anomalies with other host-based events, such as the execution of suspicious binaries (Windows Event ID 4688) within the same time window, to create a composite risk score. A high score indicates a likely MBR/VBR modification attempt."
            ]
          },
          {
            "description": "A system experiences a sequence of unexpected shutdowns or boot failures, followed by a successful startup, without logged administrative intervention, indicating a potentially unstable bootkit attempting to load.",
            "data_sources": [
              "Windows Event ID 6008",
              "Windows Event ID 6005"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System Event Logs on Endpoints and Servers",
            "action": [
              "Create a correlation rule that triggers when a sequence of events [Unexpected Shutdown (Event ID 6008) -> Event Log Service Started (Event ID 6005)] occurs for the same host within a short time window (e.g., 15 minutes). Escalate the alert if this pattern repeats multiple times in 24 hours.",
              "Calculate the mean time between failure (MTBF) for system boots across the enterprise and for individual critical assets based on sequences of shutdown (6006, 6008) and startup (6005) events. Alert if a specific host's MTBF drops significantly (e.g., below the 5th percentile of the fleet-wide baseline) without a corresponding change ticket or hardware diagnostic.",
              "Use a sequence-based classification model (e.g., a Recurrent Neural Network) trained on sequences of system event log IDs. Label sequences corresponding to normal reboots, crashes, and maintenance. The model can then classify new, unseen event sequences, flagging those that resemble known-bad or highly anomalous boot patterns associated with instability."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using pre-OS boot mechanisms?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1542",
        "name": "Pre-OS Boot",
        "evidence": [
          {
            "description": "A new service or driver is installed on the system, and the associated file hash is a known indicator of compromise for a malicious bootkit or rootkit component.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry (Services), System32\\drivers directory",
            "action": [
              "Upon detection of a new service installation (Windows Event ID 7045), extract the 'Service File Name'. If the file hash is available in enriched logs, match it against a CTI feed of known malicious bootkit components. If no hash is available, trigger an endpoint-agent-based hash lookup. Alert on any match.",
              "Analyze the prevalence of service executable names and file paths across the environment. Alert on the installation of a service (Event ID 7045) where the service name or path is statistically rare (e.g., seen on <0.1% of endpoints) and is not part of a known, scheduled software deployment.",
              "Train a classification model on the attributes of a new service installation event (Event ID 7045), including service name entropy, file path depth and rarity, start type, and service account. Use the model to predict the likelihood of a new service being malicious. A high-risk score should trigger an automated file hash lookup and sandbox analysis."
            ]
          },
          {
            "description": "The boot configuration is modified using a utility like `bcdedit.exe` to disable a host-based security control (e.g., Data Execution Prevention, driver signature enforcement) or to configure the system to boot into a diagnostic mode like Safe Boot.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint and Server Boot Configuration Data stores",
            "action": [
              "Create a high-priority alert for any process creation event (Windows Event ID 4688) where `ProcessName` is `bcdedit.exe` and `CommandLine` contains strings such as `/set nx AlwaysOff`, `/set testsigning on`, or `/set safeboot minimal`. These are explicit attempts to weaken security posture.",
              "Establish a baseline of `bcdedit.exe` command-line argument usage across the environment. Calculate the frequency of each argument combination. Alert when a rare or never-before-seen argument combination is used, particularly if it relates to security policy modification (e.g., arguments containing 'nx', 'testsigning', 'integritychecks', 'safeboot').",
              "Use Natural Language Processing (NLP) techniques to parse and classify the intent of `bcdedit.exe` command lines (Event ID 4688). Train a model to categorize commands as 'Benign Info-Gathering', 'Standard Configuration', or 'Suspicious Security-Degradation'. Flag any command classified as the latter for immediate investigation."
            ]
          },
          {
            "description": "A core security service (e.g., EDR agent, antivirus) enters a stopped state or fails to start following a system reboot, and this state change is not correlated with a logged administrative action or authorized software update.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 7000",
              "Windows Event ID 7024"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Service Control Manager logs on Endpoints and Servers",
            "action": [
              "Define a list of critical security service names. Create a correlation rule that alerts if a 'service has stopped' event (Event ID 7036) or 'service failed to start' event (e.g., 7000, 7024) for a critical service is NOT preceded by an authorized change-management log or a 'service is starting' event from a legitimate patch-management user context within a 1-hour window.",
              "For each critical security service, calculate the baseline rate of failure-to-start or crash events per 1000 endpoints per day. Alert if the observed rate for any service spikes more than 3 standard deviations above this baseline, indicating a potential widespread issue or targeted attack.",
              "Train a state-transition model on the sequence of Service Control Manager events for security products. The model learns the probabilities of transitioning between states (e.g., Running -> Stopped). An improbable state transition, such as 'Running' to 'Stopped' without a preceding 'Stopping' event, can be flagged as an anomaly indicative of a forceful termination."
            ]
          },
          {
            "description": "An endpoint is observed generating significant outbound network traffic, but its corresponding host-based security logs (e.g., EDR telemetry) are absent from the central log aggregator for an anomalous period of time.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "SIEM log ingestion data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Gateway, SIEM/Log Aggregator Ingestion Point",
            "action": [
              "For every host IP with active network connections in Zeek conn.log over the last hour, query the SIEM to ensure at least one event has been received from that host's EDR/logging agent in the same time period. If a host is active on the network but has sent zero logs, generate an alert for a 'ghost asset'.",
              "For each host, calculate the ratio of network data transmitted (in MB, from Zeek conn.log) to the volume of security logs generated (in event count or KB). Establish a baseline for this ratio. Alert if a host's ratio deviates by more than 3 standard deviations from its own historical norm, suggesting network activity is occurring without commensurate security logging.",
              "Use a time-series regression model to predict the expected log volume from each host based on its historical network traffic patterns (e.g., bytes, connections, protocols from Zeek logs). Continuously compare the predicted log volume against the actual ingested volume. A large, sustained negative error (actual << predicted) signals a high-probability telemetry gap that requires investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]