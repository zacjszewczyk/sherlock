[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using time-based methods? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497.003",
        "name": "Time Based Evasion",
        "evidence": [
          {
            "description": "A process executes an encoded PowerShell command (e.g., using -e, -en, -enc) which, when decoded, contains functions or cmdlets used for programmatic delays, such as 'Start-Sleep' or .NET methods like '[System.Threading.Thread]::Sleep'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with PowerShell v5+ script block logging enabled and systems with security monitoring agents.",
            "action": [
              "For each Windows Event ID 4688 with a process name of 'powershell.exe' and command line arguments containing '-e', '-en', or '-enc', extract and decode the Base64 string. Concurrently, inspect Windows Event ID 4104 script block logs for the deobfuscated script content. Search the decoded or deobfuscated content for strings like 'Start-Sleep', 'GetTickCount', 'Measure-Command', or '[System.Threading.Thread]::Sleep'. Alert if a match is found.",
              "For all decoded PowerShell script blocks from Event ID 4104, calculate the Shannon entropy. Establish a baseline entropy score for legitimate administrative scripts by analyzing a 30-day window of activity. Flag any script whose entropy score exceeds the 95th percentile of the established baseline, as high entropy is a strong indicator of obfuscation or packing.",
              "Develop and apply a logistic regression classification model trained on a labeled dataset of command lines. Engineer features such as command length, special character frequency, character distribution, n-grams, and the presence/absence of known evasion keywords. Use the trained model to score new, unseen command lines from Event ID 4688 and 4104, flagging those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A process executes 'timeout.exe' or 'ping.exe' with arguments specifying a delay that significantly exceeds typical interactive or script usage, suggesting an attempt to wait out automated analysis environments.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially critical servers or those where interactive command-line usage is rare (e.g., production web servers, database servers).",
            "action": [
              "Create a detection rule to trigger on process creation events (Windows Event ID 4688) where the process name is 'timeout.exe' and the command line contains '/t [number]' where the number is greater than 300, or where the process name is 'ping.exe' and the command line includes '-n [number]' with a number greater than 300 and the target IP is a loopback or local address (e.g., '127.0.0.1').",
              "For all executions of 'timeout.exe' and 'ping.exe' captured in Event ID 4688, parse the numerical argument for the delay or ping count. Over a 30-day rolling window, calculate the 99th percentile for these values across the enterprise to define a dynamic baseline for long delays. Generate an alert for any execution where the delay value exceeds this calculated threshold.",
              "For each host, model the frequency and magnitude of delay commands ('timeout.exe', 'ping.exe' with long counts) as a time series. Apply a forecasting model like SARIMA or an LSTM-based autoencoder. Flag any host where the observed activity significantly deviates from the model's forecast, indicating an anomalous spike in delay-inducing behavior."
            ]
          },
          {
            "description": "A process, upon creation, remains dormant for an unusually long period (e.g., > 10 minutes) before initiating its first network connection, file modification, or registry write, indicating a 'sleeper' payload.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, servers, and Domain Controllers, in conjunction with network choke points (e.g., internet gateways, VPN concentrators) monitored by Zeek sensors.",
            "action": [
              "Implement a stateful correlation rule that tracks new processes from Windows Event ID 4688. For each process, monitor for subsequent events with the same Process ID: network connections (Zeek conn.log), file writes (Windows Event ID 4663), or registry modifications (Windows Event ID 4657). If a process shows no such activity within the first 60 seconds but then initiates one of these actions after more than 10 minutes have elapsed since its creation, trigger an alert.",
              "For each unique process name (e.g., 'svchost.exe', 'chrome.exe'), calculate the distribution of time deltas between process creation (Event ID 4688) and its first outbound network connection (Zeek conn.log). Establish a baseline mean and standard deviation for these deltas. Flag any individual process instance whose delay-to-first-network-activity exceeds three standard deviations from the mean for its process name.",
              "Apply a clustering algorithm like DBSCAN to a dataset of process lifecycle features. For each process, engineer features such as [time_to_first_network_connection, time_to_first_file_write, time_to_first_registry_write, process_name_rarity, parent_process_name]. Flag processes identified as outliers or noise, especially those characterized by high values in the time-delay features, as they represent anomalous 'sleeper' processes."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to discover the environment using time-based methods? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497.003",
        "name": "Time Based Evasion",
        "evidence": [
          {
            "description": "A process or thread queries the system time, requests a sleep or delay for a specific duration, and then queries the time again. The measured elapsed wall-clock time is significantly shorter than the requested delay duration, indicating time acceleration in a sandbox or virtual environment.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on virtualized environments, sandboxes, and developer workstations.",
            "action": [
              "Create a stateful correlation rule that tracks process activity by Process ID. The rule must identify a sequence of events from the same PID within a 60-second window: [time query command like 'time /t' or 'Get-Date'] -> [sleep command like 'timeout /t X' or 'Start-Sleep -s X'] -> [second time query command]. The rule must parse the sleep duration 'X' and calculate the actual time elapsed between the two time query events. Trigger a high-confidence alert if the actual elapsed time is less than 50% of the requested sleep duration 'X'.",
              "For each process lifetime, count the number of time-query commands executed ('time /t', 'date /t'). Calculate a Z-score for this count per process, baselined against all other processes over a 7-day period. A process with a Z-score greater than 3, especially when combined with the execution of a sleep-inducing command from the same process, should be investigated.",
              "Train a Hidden Markov Model (HMM) on sequences of command-line executions from benign administrative activity and known malware. The model will learn the probability of transitioning between states (e.g., 'start', 'query_time', 'sleep', 'file_op', 'end'). Use the trained model to score new command sequences, flagging those that match the high-probability malicious sequence of 'query_time -> sleep -> query_time' as indicative of a sandbox check."
            ]
          },
          {
            "description": "A process executes a high frequency of time-related commands or API calls (e.g., GetTickCount, timeGetTime) in a tight loop, a technique known as 'API hammering', without performing other meaningful actions like network I/O or file system modifications. This is used to delay execution past an automated analysis timeout.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those that are part of automated build or analysis pipelines where execution time is limited.",
            "action": [
              "Create a threshold rule that triggers if a single Process ID from Windows Event ID 4688 is observed executing more than 50 time-query commands (e.g., 'time /t') within a 30-second window, without any corresponding network connections (Zeek conn.log) or file modifications (Windows Event ID 4663) logged for that same process during its lifetime.",
              "For each process, calculate the ratio of (count of time-query commands) to (count of all commands executed). Over a 30-day rolling window, establish a baseline distribution for this ratio across all processes in the environment. Flag any process whose ratio falls into the 99.9th percentile, as this indicates a disproportionate and suspicious focus on querying time.",
              "Implement an autoencoder-based anomaly detection model trained on sequences of benign command-line events. Feed new command sequences into the trained model. A sequence representing time-based API hammering will be poorly reconstructed by the model, resulting in a high reconstruction error. Flag processes that generate a reconstruction error above a statistically determined threshold for investigation."
            ]
          },
          {
            "description": "A parent process spawns a child process that executes a long delay (e.g., using 'timeout.exe'). Immediately following the termination of the sleeper child process, the original parent process spawns one or more discovery commands (e.g., 'whoami', 'net user', 'ipconfig').",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on Domain Controllers, file servers, and other high-value assets that are likely targets for internal reconnaissance.",
            "action": [
              "Create a stateful correlation rule that enriches process creation events (Windows Event ID 4688) with parent process information. Trigger an alert if a parent process (Parent_PID) spawns a child process that executes a long delay (e.g., 'timeout /t > 300'). Upon the termination of this child process, if the same Parent_PID then spawns a common discovery tool ('whoami.exe', 'net.exe', 'ipconfig.exe', 'systeminfo.exe') within 60 seconds, generate an alert.",
              "Perform a time-of-day analysis on the execution frequency of common discovery commands ('ipconfig', 'net user', 'systeminfo') across the enterprise. Using a 30-day dataset, plot the execution count per hour. A recurring, sharp peak at an unusual, non-business hour (e.g., 02:05 AM) across multiple hosts is a strong statistical indicator of a scheduled, delayed payload.",
              "Apply a causal inference model, such as Granger causality analysis, to the time series of process events on a host. Test the hypothesis that the execution of a discovery command is statistically dependent on the prior completion of a 'sleep' or 'delay' process. A high causality score would distinguish this from coincidental, unrelated activity, providing strong evidence of a deliberate, staged execution chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]