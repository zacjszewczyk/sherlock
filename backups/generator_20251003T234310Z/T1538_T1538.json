[
  {
    "information_requirement": "Is the adversary attempting to discover cloud resources or services via the management console? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1538",
        "name": "Cloud Service Dashboard",
        "evidence": [
          {
            "description": "A cloud console login event exhibits multiple simultaneous anomalies, such as a source IP address matching a known malicious indicator, originating from a geographic location or Autonomous System (AS) never before seen for that user, or occurring at a time inconsistent with the user's established activity patterns.",
            "data_sources": [
              "AWS CloudTrail logs (ConsoleLogin event)",
              "Azure SignIn Logs",
              "Google Cloud Audit Logs (Admin Activity)",
              "Zeek conn.log",
              "Windows Security Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud IAM infrastructure, Internet gateways and proxies, Endpoint devices of privileged users",
            "action": [
              "For each cloud console login event (e.g., AWS 'ConsoleLogin'), extract the 'sourceIPAddress'. Correlate this IP against active threat intelligence feeds for malicious IPs, TOR exit nodes, and known anonymizing proxies. Generate a high-severity alert for any match.",
              "For each user account, maintain a 90-day rolling baseline of source countries, ASNs, and login hours (binned into 1-hour blocks). For each new login, calculate the frequency of the source country, ASN, and time-of-day bin. If the frequency for any of these attributes falls below the 5th percentile for that user, increment a risk score. A cumulative score exceeding a predefined threshold generates a medium-severity alert.",
              "Implement a time-series based 'impossible travel' model. For each user, process login events sequentially. Upon a new login, calculate the geographic distance and time elapsed since the previous login. If the required travel speed exceeds a realistic threshold (e.g., 800 km/h), classify the login as anomalous and generate a high-severity alert. The model should account for concurrent sessions and known VPN/proxy usage."
            ]
          },
          {
            "description": "A cloud console login or subsequent API activity from a console session is associated with a User-Agent string indicative of an offensive security tool (e.g., Pacu), an unauthorized automation script, or a string that is statistically rare for that specific user or their role.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs (Admin Activity)",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud management consoles (e.g., AWS Management Console, Azure Portal), Internet gateways and proxies, Cloud API endpoints",
            "action": [
              "Scan the 'userAgent' field from all cloud activity logs associated with a console session. Match this field against a curated set of regular expressions for known offensive tools ('Pacu', 'Cloudsplaining'), unauthorized scripting libraries ('python-requests', 'boto3' from non-service accounts), or headless browsers. Generate a medium-severity alert on any match.",
              "For each user, create a historical baseline of all User-Agent strings used in the past 90 days. For each new console login, check if the User-Agent is present in the user's baseline. If the User-Agent is new to the user, calculate its global rarity across the organization. A User-Agent that is both new to the user and present in less than 1% of all users' baselines should trigger an alert.",
              "Train a text classification model (e.g., Naive Bayes, SVM, or a simple CNN) on a large, labeled dataset of User-Agent strings ('benign-browser', 'benign-script', 'malicious-tool'). Deploy the model to classify the 'userAgent' field from new console sessions in real-time. Automatically generate a medium-severity alert for any classification of 'malicious-tool'."
            ]
          },
          {
            "description": "A single user console session generates an unusually high count and variety of read-only API calls (e.g., 'List*', 'Describe*', 'Get*') across multiple services in a short time window, indicating automated reconnaissance.",
            "data_sources": [
              "AWS CloudTrail logs (List*, Describe*, Get* events)",
              "Azure Activity Logs (Microsoft.Resources/subscriptions/resourceGroups/read)",
              "Google Cloud Audit Logs (Data Access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API endpoints, Cloud management consoles, Specific cloud service infrastructure (e.g., S3, EC2, RDS)",
            "action": [
              "Create a rule that triggers a medium-severity alert if a single user session ('sessionId' or equivalent) generates more than 100 API calls matching the pattern 'List*', 'Describe*', or 'Get*' across more than 5 distinct services (e.g., 'ec2', 's3', 'rds', 'iam', 'lambda') within a 15-minute window.",
              "For each user console session, calculate the Shannon entropy of the API event names invoked within a sliding 10-minute window. Compare this entropy score to the user's historical 90-day distribution of session entropy scores. A score in the 99th percentile indicates an unusually diverse set of actions and should be flagged for review.",
              "Train a sequence-based anomaly detection model, such as an LSTM autoencoder, on sequences of API call event names from legitimate user sessions. For active sessions, feed the sequence of API calls into the model. If the model's reconstruction error for the sequence exceeds a dynamically tuned threshold (e.g., 98th percentile of errors on a validation set), flag the session as anomalous, indicating a deviation from normal patterns of administrative activity."
            ]
          },
          {
            "description": "API calls originating from a console session target the discovery of sensitive resources (e.g., secrets, encryption keys, user permissions), especially when performed by a user or role that does not typically access such resources.",
            "data_sources": [
              "AWS CloudTrail logs (e.g., secretsmanager:ListSecrets, iam:GetAccountAuthorizationDetails)",
              "Azure Activity Logs (e.g., Microsoft.KeyVault/vaults/secrets/list/action)",
              "Google Cloud Audit Logs (Data Access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Secrets management services (e.g., AWS Secrets Manager, Azure Key Vault), IAM infrastructure, Data storage services hosting sensitive information",
            "action": [
              "Define a watchlist of high-sensitivity, discovery-related API calls (e.g., 'secretsmanager:ListSecrets', 'iam:GetAccountAuthorizationDetails', 'kms:ListKeys', 'storage:GetIamPolicy'). Generate a high-severity alert on any invocation from a console session by a user not belonging to a pre-approved 'Cloud Security Admin' or 'Cloud Auditor' group.",
              "For each sensitive API call on the watchlist, establish a baseline of which user roles invoke it and with what frequency over the past 180 days. Alert when a user invokes a sensitive call and their assigned role's historical invocation frequency for that specific call is zero or in the bottom 1st percentile (i.e., it is extremely rare or unprecedented for that role to perform that action).",
              "Utilize a graph-based anomaly detection model where nodes represent users and cloud resources (e.g., KMS keys, secret ARNs), and directed edges represent access events ('invoked'). Train the model on historical access logs to learn normal access patterns. Anomaly detection can be framed as link prediction; if the model assigns a very low probability to an observed access event (e.g., a user from the 'Marketing' group accessing a production database's master key), flag it as a high-risk anomaly for immediate investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]