[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence by creating or modifying system processes?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543",
        "name": "Create or Modify System Process",
        "evidence": [
          {
            "description": "A new system service is installed (Windows Event ID 7045 or 4697) where the 'Service File Name' hash, name, or description contains strings that match known malicious indicators.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations, DNS Servers",
            "action": [
              "Query all service creation events (Windows Event ID 7045, 4697). Join with process creation events (Windows Event ID 4688, Sysmon Event ID 1) to get file hashes. Compare the 'Service Name', 'Service File Name', 'Description' fields, and the binary's hash against a threat intelligence feed of known malicious service artifacts. Generate a high-severity alert on any match.",
              "For all new service creation events, extract the service name and description. Compare these strings against a baseline of all known benign service names and descriptions in the environment using a string similarity algorithm (e.g., Jaccard similarity or Levenshtein distance). Flag any new service with a similarity score in the lowest 5th percentile, indicating it is lexically dissimilar from known-good services and potentially evasive.",
              "Extract features from service creation events, including path depth of the binary, character entropy of the name, presence of common benign keywords (e.g., 'service', 'agent'), and the binary's file hash. Train a classification model (e.g., Random Forest) on a labeled dataset of benign and malicious services. Use the trained model to assign a risk score to all newly created services and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A system service is created (Windows Event ID 7045 or 4697) where the service name appears to be a misspelling of a legitimate service, or its associated command-line (from Windows Event ID 4688 or Sysmon Event ID 1) exhibits high entropy or contains patterns of LOLBAS execution.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations",
            "action": [
              "For each new service creation event, inspect the 'Service File Name' from the event and the full command line from the correlated process creation event (Windows Event ID 4688, Sysmon Event ID 1). Apply a library of regular expressions to detect LOLBAS patterns (e.g., `powershell -e`, `rundll32.exe`, `mshta.exe http`), encoded commands, or suspicious argument structures. Generate an alert on any match.",
              "For every new service creation event, calculate the Shannon entropy of the 'Service Name' string and the 'Service File Name' string. Compare these values against a pre-computed baseline distribution of entropy scores from all legitimate services in the environment. Generate an alert for any new service where the name or path entropy exceeds the 95th percentile of the established baseline.",
              "Monitor the rate of new service creations per host and across the enterprise over time. Implement a time-series anomaly detection model (e.g., LSTM autoencoder or Seasonal-ARIMA) on this data. A sudden spike in the rate of service creation that deviates significantly (e.g., >3 standard deviations) from the established forecast indicates potential automated adversary activity and should be investigated."
            ]
          },
          {
            "description": "A new system service is created (Windows Event ID 7045 or 4697) where the service binary ('Service File Name') is located in an uncommon or user-writable directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Temp\\) or the binary is unsigned.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a SIEM rule to alert on any service creation event (Windows Event ID 7045, 4697) where the 'Service File Name' path matches a list of disallowed directories (e.g., `C:\\Users\\*`, `C:\\ProgramData\\*`, `C:\\Temp\\*`, `C:\\Windows\\Temp\\*`, `*\\AppData\\*`). Further enrich the alert if the binary's signature information (from an EDR or Sysmon Event ID 7) shows it is unsigned or signed by an untrusted publisher.",
              "For each new service creation, extract the directory path of the service binary. Using a SIEM query, perform a frequency analysis on these directory paths across the entire enterprise over a 30-day window. Flag service binary paths that are statistical outliers, such as those that appear on only one or two machines or fall below the 1st percentile of frequency (least frequency of occurrence analysis).",
              "Develop a decision tree classifier to predict if a service is suspicious based on its binary's location and properties. Use features such as: `path_in_user_profile` (boolean), `path_in_temp_dir` (boolean), `binary_is_unsigned` (boolean), `signer_is_untrusted` (boolean), and `path_depth` (integer). The model's output can be a risk score used to prioritize analyst review of new services."
            ]
          },
          {
            "description": "A parent service process (e.g., services.exe) spawns an anomalous child process (Windows Event ID 4688 or Sysmon Event ID 1), such as an interactive shell (cmd.exe, powershell.exe) or a process that initiates an outbound network connection to a non-standard port or IP address (Zeek conn.log).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points",
            "action": [
              "Create a SIEM rule that triggers when a process with a 'ParentProcessName' of 'services.exe' or 'svchost.exe' has a 'ProcessName' of 'cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe', or 'rundll32.exe'. Correlate the child process ID with network logs (Zeek conn.log, Sysmon Event ID 3) within a 1-minute window. Escalate the alert severity if the child process initiates an outbound network connection, especially to a known malicious IP or a low-reputation domain (from Zeek dns.log).",
              "For each legitimate parent service process (e.g., services.exe), build a baseline of all normal child process names and their command-line argument characteristics (e.g., argument count, total length). Use descriptive statistics to define this baseline. Flag any newly observed child process whose name is not in the baseline list or whose command-line length exceeds the 99th percentile for that specific parent-child relationship.",
              "Model all process parent-child relationships observed in the environment as a directed graph. Apply a graph-based anomaly detection algorithm (e.g., PageRank on a derived graph or community detection) to identify new, rare edges. A new edge representing a service process spawning a LOLBAS for the first time in the environment is a significant deviation from the normal behavior graph and should be investigated."
            ]
          },
          {
            "description": "An existing service's configuration in the registry is modified, specifically the 'ImagePath', 'ServiceDll', or 'FailureCommand' values, to point to an adversary-controlled payload.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations, especially those with custom or legacy services",
            "action": [
              "Monitor for registry write events (Windows Event ID 4657, Sysmon Event ID 13) specifically targeting the 'ImagePath', 'ServiceDll', or 'FailureCommand' values for any key under `HKLM\\SYSTEM\\CurrentControlSet\\Services\\`. Create an allowlist of legitimate installer processes and administrative tools that are permitted to make these changes. Alert on any modification performed by a process not on the allowlist or outside of an approved change management window.",
              "Periodically (e.g., daily) snapshot the configurations of all services in the `HKLM\\SYSTEM\\CurrentControlSet\\Services` registry hive. For each service, calculate a cryptographic hash of its key configuration values (ImagePath, ServiceDll, FailureCommand, etc.). Track the rate of hash changes over time for each service. Flag any service whose configuration changes more frequently than 3 standard deviations above its own historical mean change rate, indicating abnormal modification activity.",
              "Train a One-Class SVM model on snapshots of known-good service configurations captured from a golden image or during a trusted baseline period. Use the trained model to classify live service configurations as normal (inliers) or anomalous (outliers) whenever a modification event (Sysmon Event ID 13) is detected. Flag all outliers for immediate analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by creating or modifying system processes?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543",
        "name": "Create or Modify System Process",
        "evidence": [
          {
            "description": "A new service is created (Windows Event ID 7045 or 4697) configured to execute as 'LocalSystem', and the service binary's name or hash matches a known privilege escalation exploit or tool.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a high-severity SIEM rule that triggers if a service creation event (Windows Event ID 7045, 4697) has a 'Service Account' of 'LocalSystem' (or NT AUTHORITY\\SYSTEM) AND the 'Service File Name' or its hash (from an EDR or correlated Sysmon Event ID 11) matches a curated threat intelligence list of known privilege escalation tool names and hashes (e.g., JuicyPotato, PrintSpoofer, BadPotato).",
              "For all processes that create services (e.g., sc.exe, powershell.exe), analyze the command-line arguments used (from Windows Event ID 4688, Sysmon Event ID 1). Calculate the frequency of argument combinations. Flag commands containing rare combinations that fall below a 1% frequency threshold across the environment, such as a `binPath=` pointing to a LOLBAS combined with `obj= LocalSystem`.",
              "Train a supervised classification model (e.g., Gradient Boosting) to identify service-based privilege escalation attempts. Use features derived from the service creation event and parent process, such as: `service_account_is_system` (boolean), `binary_is_lolbas` (boolean), `binary_path_is_user_writable` (boolean), `creating_process_name` (categorical), and `creating_user_is_admin` (boolean). Alert on any new service that the model predicts as malicious with a high confidence score."
            ]
          },
          {
            "description": "A file is created in a directory vulnerable to an unquoted service path exploit, where the filename is designed to hijack the legitimate service's execution path.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly older systems or those with third-party software",
            "action": [
              "First, programmatically query the registry (`HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\ImagePath`) on all endpoints to identify services with unquoted paths containing spaces. For each identified vulnerable service, create a specific detection rule that monitors for file creation events (Sysmon Event ID 11) in the exploitable path segments (e.g., alert on creation of `C:\\Program.exe` if a service path is `C:\\Program Files\\App\\service.exe`).",
              "For all services identified with unquoted paths, periodically scan the vulnerable directories for newly created executable files. For any new file, calculate the Damerau-Levenshtein distance between the intended service executable name (e.g., 'service.exe') and the newly discovered filename (e.g., 'servlce.exe'). A small distance (e.g., <= 2) suggests a deliberate typosquatting attempt and should be flagged for investigation.",
              "Use a vulnerability scanner or a custom script to build a dataset of services with configuration weaknesses (unquoted paths, weak ACLs). Train a simple regression model to assign a numerical risk score to each service based on these features. Use this score to prioritize monitoring efforts, applying high-fidelity detection rules (like the symbolic and statistical actions above) only to the services with the highest risk scores."
            ]
          },
          {
            "description": "A service is created or modified to run with SYSTEM privileges by a user account that is not a member of a local or domain administrative group.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Authentication Logs from Domain Controllers",
            "action": [
              "Create a high-severity alert that triggers if a service creation event (Windows Event ID 7045, 4697) shows the 'Service Account' is 'LocalSystem' or 'NT AUTHORITY\\SYSTEM' AND the 'SubjectUserName' in the event is NOT a member of a predefined list of administrative groups (e.g., 'Domain Admins', 'Enterprise Admins', 'BUILTIN\\Administrators'). This requires enriching the event with user group information from Active Directory.",
              "For each user account, establish a baseline of the number of system services they create per day over a 30-day period. For any user not in an administrative group, this baseline should be zero, and any service creation is a high-confidence anomaly. For administrative users, flag any day where their service creation count exceeds 3 standard deviations above their personal historical mean.",
              "Use peer group analysis (e.g., k-means clustering) to group users based on their typical daily activities derived from logs (e.g., processes run, logon types, network shares accessed). If a user belonging to a 'Standard User' or 'Developer' cluster performs an action characteristic of the 'System Administrator' cluster (such as creating a SYSTEM service), flag this cross-cluster behavior as a high-risk anomaly requiring investigation."
            ]
          },
          {
            "description": "A newly created service, running as SYSTEM, spawns a child process (Windows Event ID 4688 or Sysmon Event ID 1) that matches signatures for credential dumping, discovery, or lateral movement.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Create a correlation rule that chains events: IF a service is created to run as SYSTEM (Windows Event ID 7045 or 4697), THEN monitor the associated service process ID (from Windows Event ID 4688 or Sysmon Event ID 1) for 5 minutes. IF that process spawns a child process whose name or command line matches signatures for credential dumping (e.g., 'mimikatz', 'procdump lsass.exe') or discovery (e.g., 'whoami /all', 'net group \"Domain Admins\"'), generate a critical alert.",
              "For newly created SYSTEM services, monitor the command lines of their child processes. Calculate the n-gram frequency (n=2,3) of these command lines and compare them to a baseline of n-grams from benign SYSTEM service child processes. Flag command lines containing statistically rare n-grams, such as 'add user', '-w hidden', or 'dumplsass', that fall below a 1% frequency threshold.",
              "Use a sequence analysis model (e.g., a Hidden Markov Model) to detect malicious sequences of actions following a privilege escalation. Train the model on benign post-boot and post-install sequences. A high-probability malicious sequence to detect would be: {Service Create (SYSTEM)} -> {Spawn powershell.exe} -> {powershell.exe executes encoded command} -> {powershell.exe initiates outbound C2 connection}. The model would flag this entire chain as anomalous."
            ]
          },
          {
            "description": "An existing service's permissions (DACL) are modified to grant a non-administrative user write access, followed by a modification of that service's configuration by the same user to execute code with elevated privileges.",
            "data_sources": [
              "Windows Event ID 4670",
              "Sysmon Event ID 13",
              "Windows Event ID 4657",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Service configuration objects on Domain Controllers and critical servers",
            "action": [
              "Create a correlation rule that chains two events within a 1-hour window: (A) A security event (Windows Event ID 4670, requires SACL auditing) shows a non-administrative user being granted write-related permissions (e.g., SERVICE_CHANGE_CONFIG) on a service object. (B) A subsequent registry or service modification event (Sysmon Event ID 13, Windows Event ID 4657, or 4697) shows the same user modifying that service's 'ImagePath' or 'FailureCommand' value.",
              "Periodically audit service DACLs across all systems. For each service, calculate a 'risk score' based on the privileges of the accounts that have write permissions (e.g., standard user = 10 points, admin = 1 point). Track this score over time for each service. A sudden increase in a service's risk score, exceeding 2 standard deviations from its historical baseline, indicates a potential malicious permission change and should be investigated.",
              "Use an association rule mining algorithm (e.g., Apriori or FP-Growth) on security event logs. Search for rules with high confidence and lift, such as `{EventID=4670, Subject=non-admin, Permission=SERVICE_CHANGE_CONFIG, Object=ServiceX} => {EventID=13, Subject=non-admin, TargetObject=ServiceX.ImagePath}`. Discovering such a rule provides a strong, data-driven detection pattern for this specific attack."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]