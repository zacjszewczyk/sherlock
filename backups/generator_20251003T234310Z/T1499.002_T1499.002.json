[
  {
    "information_requirement": "Is an adversary attempting a Service Exhaustion Flood (T1499.002) against critical services? (TA0040 - Impact)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1499.002",
        "name": "Service Exhaustion Flood",
        "evidence": [
          {
            "description": "A high volume of connections to a single destination service (e.g., web server on port 443) where the source IP addresses have a high overlap with a threat intelligence feed of known DoS botnets, open proxies, or TOR exit nodes.",
            "data_sources": [
              "Zeek conn.log",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network border gateways, firewalls, load balancers, and public-facing web/application servers.",
            "action": [
              "Continuously join the source IP (`id.orig_h`) from `Zeek conn.log` against an ingested threat intelligence feed for connections to critical services (e.g., `dest_port` 80, 443). Generate an alert for any match.",
              "For each critical service, calculate the percentage of total inbound connections originating from IPs on the threat intelligence list over a 5-minute rolling window. Alert if this percentage exceeds a dynamic threshold, such as the 99th percentile of the daily historical distribution for that service.",
              "Develop a time series forecast model (e.g., ARIMA, Prophet) for the volume of connections from known malicious IPs. An alert is triggered if the observed volume significantly deviates from the forecasted confidence interval, indicating a coordinated attack rather than sporadic probes."
            ]
          },
          {
            "description": "Anomalous HTTP request patterns characterized by either A) extremely long connection durations with minimal data transfer, or B) a high frequency of requests to known resource-intensive API endpoints or database queries from a single or distributed set of sources.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "API gateways, public-facing web servers, and backend application servers.",
            "action": [
              "Apply regular expressions against the `uri` and `user_agent` fields in `Zeek http.log` to detect signatures of known application-layer DoS tools (e.g., GoldenEye, LOIC, Hulk). Generate an alert on any match.",
              "For each unique URI in `Zeek http.log`, calculate the ratio of connection duration (from `conn.log` `duration` field) to the sum of request and response body lengths (`req_body_len` + `resp_body_len`). Establish a baseline for this 'work-to-transfer' ratio for each critical URI and alert if it exceeds the 95th percentile for a statistically significant number of connections from a single source or service.",
              "Train a classification model (e.g., Random Forest, Gradient Boosting) on features extracted from `Zeek http.log` and `conn.log` sessions (e.g., request frequency per source IP, URI entropy per session, user-agent string anomaly, duration, data volume). Apply the model in near real-time to score incoming requests and alert on those classified with a high probability of being part of an application-layer DoS attack."
            ]
          },
          {
            "description": "A sustained, statistically significant increase in inbound traffic volume (bytes and packets) and new connection attempts per second that exceeds historical norms, coupled with a simultaneous, anomalous increase in the entropy of source IP addresses.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network border gateways, ISP peering points, firewalls, and load balancers.",
            "action": [
              "Define static 'tripwire' thresholds for critical services based on known hardware/software limits (e.g., >10,000 connections/minute to a single server) or business logic. Generate a high-priority alert if these hard limits are breached for more than 60 seconds.",
              "For each critical service, baseline the count of unique source IPs (`id.orig_h`) per 1-minute interval from `Zeek conn.log`. Concurrently, calculate the Shannon entropy of the source IP address distribution within each interval. Alert if both the unique IP count and the entropy score simultaneously surge above a dynamic threshold, such as the 98th percentile of their respective historical values, indicating a distributed flood.",
              "Implement a multivariate time series anomaly detection model (e.g., LSTM-based autoencoder) on key metrics from `Zeek conn.log` aggregated per minute: total bytes, total packets, and unique source IP count. Trigger an alert when the model's reconstruction error for live traffic exceeds a learned threshold, indicating a significant deviation from normal volumetric patterns characteristic of a flood attack."
            ]
          },
          {
            "description": "A high proportion of failed or incomplete TCP handshakes, indicated by an abnormal distribution of connection states (e.g., a spike in S0, S1, or REJ states) in network logs, suggesting TCP SYN backlog exhaustion. For TLS/SSL services, this includes a high rate of failed handshakes or repeated, computationally expensive renegotiation requests from the same source(s).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers handling TLS/SSL termination, stateful firewalls, and load balancers.",
            "action": [
              "Create a rule that alerts if a single source IP (`id.orig_h` in `Zeek conn.log`) generates more than 100 connection attempts with a final state of `S0` (SYN sent, no SYN-ACK received) or `REJ` (connection rejected) within a 1-minute window to a single destination.",
              "In 1-minute windows, calculate the ratio of successful connections (`SF` state) to total connection attempts (`SF` + `S0` + `REJ` + `S1`) for each monitored service. Establish a baseline for this success ratio and alert if it drops below 3 standard deviations of its historical mean. For TLS, analyze `Zeek ssl.log` and alert if the count of `resumed` being 'F' (false) combined with `ssl_renegotiation` events from a single source exceeds the 99th percentile of its baseline.",
              "Use a change point detection algorithm (e.g., Bayesian Changepoint Detection, CUSUM) on the time series of the connection state distribution (i.e., the vector of percentages for SF, S0, REJ, S1 states). Alert when the algorithm detects an abrupt and sustained structural break in the distribution, such as a sharp increase in the proportion of `S0` or `REJ` states."
            ]
          },
          {
            "description": "Observable degradation in service quality, evidenced by a statistically significant increase in application response times (latency), a high rate of connection timeouts, or a surge in server-side error codes (e.g., HTTP 5xx) as recorded in network and host logs.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 15005"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, web servers, and database servers.",
            "action": [
              "Create a high-severity alert if the count of critical error events related to resource limits (e.g., Windows Event ID 15005 for `http.sys` request queue full) exceeds a low threshold, such as 5 events in 1 minute, on a critical web server.",
              "From `Zeek http.log` and `conn.log`, calculate the 95th percentile of transaction latency (time from first request packet to last response packet) for critical applications over 5-minute intervals. Alert if this P95 latency increases by more than 100% over its 24-hour rolling average. Concurrently, monitor the rate of HTTP 5xx status codes and alert if this rate exceeds 3 standard deviations above its mean.",
              "Develop a multivariate anomaly detection model that correlates performance metrics from disparate sources: network latency and error rates from Zeek logs, and host-level metrics like CPU utilization, memory usage, and specific error event frequencies from Windows Performance Counters and Event Logs. The model learns the normal operating 'state vector' and alerts when the system enters a 'degraded' state indicative of service exhaustion."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]