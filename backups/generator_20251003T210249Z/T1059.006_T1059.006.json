[
  {
    "information_requirement": "Is an adversary leveraging Python for unauthorized code execution on enterprise endpoints or servers? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.006",
        "name": "Python",
        "evidence": [
          {
            "description": "A python.exe process creation event is correlated with a network connection to a destination on a threat intelligence watchlist, or the executed script's file hash matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway/proxy servers, DNS resolvers, All Windows endpoints and servers",
            "action": [
              "Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) within a 1-minute window on the same host. For each correlated event where the process is 'python.exe', check if the destination IP/domain is on a C2 watchlist. Separately, for all python.exe executions, hash the script file referenced in the command line and match against a malware hash database. Generate a high-severity alert on any match.",
              "For all network connections initiated by python.exe, group by destination Autonomous System Number (ASN) and top-level domain (TLD). Establish a 30-day rolling baseline of the frequency of each ASN and TLD. Alert when a connection is made to an ASN or TLD that falls in the bottom 1% of frequency (statistically rare) for the environment.",
              "Train a supervised classification model (e.g., Gradient Boosting) to predict if a python.exe execution is malicious. Features should include: command-line length and entropy, parent process name, network connection features (destination port, destination ASN, data volume), and whether the executed script path is in a user-writable directory. Use labeled historical data for training and apply the model to score new events in real-time."
            ]
          },
          {
            "description": "The command-line arguments of a python.exe process contain high-entropy strings, base64-encoded payloads, or keywords associated with reverse shells and offensive tooling.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (e.g., Domain Controllers, database servers), User workstations, Development environments",
            "action": [
              "Scan the command-line field of all python.exe process events (Windows Event ID 4688) using a curated set of regular expressions designed to find: one-liner reverse shells (e.g., 'socket', 'subprocess', 'pty.spawn'), base64 decoding patterns (e.g., '-m base64 -d'), or arguments for known offensive Python tools (e.g., Impacket scripts). Alert on any match.",
              "For every python.exe execution, calculate the Shannon entropy of its command-line string. Establish an environment-specific baseline distribution of entropy scores for legitimate scripts. Alert on any execution whose entropy score exceeds the 98th percentile of this baseline, as this is a strong indicator of obfuscation or packed code.",
              "Generate TF-IDF or transformer-based embeddings for all observed python.exe command lines. Use a density-based clustering algorithm (e.g., HDBSCAN) to group them. Automatically flag and queue for analyst review any new command lines that are classified as noise/outliers, as they represent structurally novel and potentially malicious patterns."
            ]
          },
          {
            "description": "A python.exe process is observed with anomalous contextual properties, such as being executed from a non-standard file path (e.g., C:\\Perflogs, %APPDATA%), spawned by an atypical parent process (e.g., WINWORD.EXE), or run by a user with no prior history of Python usage.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, User profile directories, Temporary file directories",
            "action": [
              "Define and maintain explicit allowlists for: 1) parent processes of python.exe (e.g., cmd.exe, powershell.exe, explorer.exe, specific IDEs), and 2) execution directories for python.exe (e.g., 'C:\\Python*', 'C:\\Program Files\\*'). Monitor Windows Event ID 4688 and generate an alert for any execution that violates either of these allowlists.",
              "For each user, create a 90-day rolling count of python.exe executions. Alert if a user with a zero-count executes python.exe. Additionally, create an enterprise-wide frequency table of python.exe execution parent directories. Alert on executions from directories that constitute less than 0.5% of all executions.",
              "For each user, model their python.exe execution frequency as a time series (e.g., daily counts). Apply a forecasting model like Prophet or an LSTM-based anomaly detector. Flag days where a user's actual execution count significantly exceeds the model's prediction (e.g., falls outside the 95% confidence interval), indicating an abnormal burst of activity."
            ]
          },
          {
            "description": "A Python process (python.exe) spawns a child process that is a known Living-off-the-Land Binary (LOLBin) such as 'wmic.exe', 'bitsadmin.exe', or 'rundll32.exe'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those with EDR agents capable of capturing parent-child process relationships",
            "action": [
              "From process creation logs (Windows Event ID 4688), build process chains. Create a rule that triggers an alert when a process tree contains a parent process of 'python.exe' and a direct child process whose name is on a curated list of LOLBins (e.g., 'schtasks.exe', 'wmic.exe', 'certutil.exe', 'powershell.exe', 'net.exe').",
              "Analyze historical process creation logs to build a dictionary of common child processes for python.exe. Calculate the conditional probability P(Child | Parent='python.exe') for all observed children. Alert when python.exe spawns a child process where this probability is below a low threshold (e.g., < 1%), indicating a rare and suspicious process relationship.",
              "Represent process execution events as a directed graph where nodes are processes and edges represent parent-child relationships. Train a graph neural network (GNN) on benign process activity to learn normal process graph structures. Apply the model to new process trees originating from python.exe and flag any tree that is scored as a structural anomaly."
            ]
          },
          {
            "description": "A network connection originating from a python.exe process demonstrates Command and Control (C2) characteristics, including periodic beaconing, data volumes indicative of exfiltration, or communication over non-standard ports to newly registered domains.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, All Windows endpoints and servers",
            "action": [
              "Correlate host-based network events (Windows Event ID 5156 or Sysmon Event ID 3) where the application is python.exe with network logs (Zeek dns.log). Alert if python.exe communicates to a destination domain that was registered within the last 60 days (determined via WHOIS enrichment of dns.log queries).",
              "For each source-destination pair involving python.exe, analyze connection logs (Zeek conn.log). First, calculate the standard deviation of the time delta between consecutive connections; a value near zero suggests automated beaconing. Second, establish a baseline for bytes sent (orig_bytes) and alert if a connection's volume exceeds the 99th percentile of that baseline, suggesting data exfiltration. An alert should fire if either condition is met.",
              "For each host, aggregate python.exe network traffic (e.g., total bytes, connection count) into fixed time intervals (e.g., 10 minutes). Apply a time-series decomposition algorithm (e.g., STL). Monitor the residual component of the decomposition; a spike in the residual value indicates a pattern change not explained by trend or seasonality and should be flagged as a potential C2 anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]