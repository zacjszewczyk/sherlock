[
  {
    "information_requirement": "Is an adversary exploiting remote services for lateral movement within the enterprise network? (PIR)",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1210",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "Network traffic from a single source to a single destination over a remote service port (e.g., 445/tcp, 3389/tcp, 5986/tcp) contains byte patterns or payload characteristics matching signatures of known exploits (e.g., CVE-2017-0144 'EternalBlue', CVE-2019-0708 'BlueKeep').",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors (e.g., Zeek) monitoring East-West traffic between server subnets, at the network perimeter, and within the DMZ.",
            "action": [
              "Symbolic: Deploy and monitor Network Intrusion Detection System (NIDS) signatures that match known exploit payloads for services like SMB, RDP, or vCenter. Correlate NIDS alerts with Zeek conn.log data by joining on the connection 4-tuple (source IP, source port, destination IP, destination port) and timestamp to investigate the full session context of a potential exploit attempt.",
              "Statistical: For each remote service (e.g., SMB on port 445), establish a per-host baseline of normal connection metrics, including duration, total bytes transferred, and the ratio of originator bytes to responder bytes. Alert when a new connection's metrics exceed the 99th percentile of the historical baseline for that specific host-service pair, which could indicate a large exploit payload delivery or anomalous data transfer.",
              "Machine Learning: Train a supervised classification model (e.g., Gradient Boosting) on labeled network flow data to identify malicious traffic patterns that lack a known signature. Engineer features such as packet lengths, inter-arrival times, protocol flags, and payload entropy. Apply the trained model to live or logged network flows to flag suspicious connections for analyst review."
            ]
          },
          {
            "description": "A process is created on a server with a command line containing patterns characteristic of remote execution or lateral movement tools like PsExec, WMIC, or Impacket scripts (e.g., wmiexec.py, smbexec.py) shortly after an inbound network connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 5145",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Detection and Response (EDR) logs from Domain Controllers, application servers, management servers (e.g., vCenter), and high-value user workstations.",
            "action": [
              "Symbolic: Create a detection rule to search Windows Event ID 4688 (Process Creation) logs for command lines containing strings like 'wmic /node:', 'process call create', or 'PSEXESVC.exe'. Also, monitor for Windows Event ID 4697 (A service was installed) for service names like 'PSEXESVC' and Zeek smb_files.log for executables written to administrative shares like ADMIN$.",
              "Statistical: Build and maintain a baseline of all command-line arguments and process names observed across the environment. Calculate the frequency of each unique command-line argument string. Flag any command line whose frequency is in the bottom 1st percentile (i.e., extremely rare) for investigation, especially if executed by a network service account or following a remote service connection.",
              "Machine Learning: Use a sequence analysis model to analyze the sequence of process creations on a host immediately following an inbound remote service connection. Train a model (e.g., an LSTM Autoencoder) on benign process sequences. Flag any sequence that has a high reconstruction error, as this indicates a significant deviation from normal operational workflows and could represent post-exploitation activity."
            ]
          },
          {
            "description": "A parent process associated with a network service (e.g., services.exe, lsass.exe, svchost.exe, vmtoolsd.exe) spawns a child process not typically associated with its normal function, such as cmd.exe, powershell.exe, or whoami.exe.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs from critical service hosts such as Domain Controllers, Exchange servers, VMware vCenter servers, and internet-facing web servers.",
            "action": [
              "Symbolic: Create a high-fidelity alert for any process creation event (Windows Event ID 4688) where the parent process name is 'lsass.exe'. Create a detection rule where the parent process is 'services.exe' or a network-facing 'svchost.exe' and the child process is 'cmd.exe' or 'powershell.exe', and correlate this event with an inbound network connection to the host within the last 5 minutes.",
              "Statistical: For each common parent network service process, build and maintain a historical frequency distribution of all its child processes over a 30-day baseline. Alert when a parent-child process relationship occurs that has never been seen before or falls in the lowest 1% frequency quantile for that parent, indicating a statistically rare and suspicious event.",
              "Machine Learning: Train a classification model (e.g., Random Forest) to predict if a parent-child process pair is malicious. Use features from the process event (Parent Process Name, Child Process Name, Command Line Entropy, User Account) and related network activity (e.g., presence of a recent inbound connection). This model can identify novel malicious combinations that evade simpler rule-based detections."
            ]
          },
          {
            "description": "A service on a host crashes or logs multiple errors (e.g., Windows Event ID 7031, 7034, 1000) within a 5-minute window immediately following a spike in inbound connection attempts to that service's port from a single source.",
            "data_sources": [
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Windows Event ID 1000",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Event Logs from externally-facing application servers and internal servers running potentially vulnerable remote services (e.g., RDP, SMB).",
            "action": [
              "Symbolic: Create a rule that triggers an alert if a Windows Event ID 7031, 7034, or 1000 for a critical service (e.g., 'TermService', 'Server') is logged on a host, and that host's IP and the service's port appear as a destination in Zeek conn.log from an internal, non-scanner source within the previous 5 minutes.",
              "Statistical: For each critical host, monitor the rate of service error events (e.g., sum of 7031, 7034, 1000 per hour). Use a 24-hour moving average to establish a baseline. Alert if the current error rate exceeds 3 standard deviations above the moving average. Correlate this alert with a corresponding spike in connection attempts from a single source IP in Zeek conn.log.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., SARIMA) on two parallel data streams for a given host: 1) the count of inbound connections to a specific port per minute from Zeek conn.log, and 2) the count of service error events per minute from Windows Event Logs. An anomaly detected across both series in close succession indicates a likely cause-and-effect relationship from failed or successful exploit attempts."
            ]
          },
          {
            "description": "Within 60 minutes of receiving an inbound connection to a remote service port, a host begins network scanning activity, defined as initiating connections to more than 20 unique internal IP addresses on common ports in a 5-minute window.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches and traffic sensors monitoring East-West traffic between internal subnets.",
            "action": [
              "Symbolic: First, identify hosts that have received a successful inbound connection to a common remote service port (e.g., 445, 139, 3389, 5985) within the last hour. Then, trigger an alert if one of those hosts initiates connections to >20 unique internal destination IPs on any port within a subsequent 1-minute window, or if Zeek generates a 'Scan::Address_Scan' notice for that host.",
              "Statistical: For each source IP, calculate the Shannon entropy of the destination IP addresses it connects to over a 5-minute sliding window. Establish a per-host baseline for this entropy value. Alert when a host's entropy value suddenly increases by more than 2 standard deviations from its 24-hour baseline, indicating a shift from targeted communication to widespread scanning behavior.",
              "Machine Learning: Use a density-based clustering algorithm like DBSCAN on network connection logs, using features like source IP, destination IP, and destination port. Normal, routine traffic will form dense clusters. A compromised host acting as a scanner will appear as a set of 'noise' points or a sparse cluster, as it connects from one source to many disparate destinations, deviating from established communication patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]