[
  {
    "information_requirement": "Has the adversary evaded defenses using command obfuscation? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.010",
        "name": "Command Obfuscation",
        "evidence": [
          {
            "description": "A command line argument or script block content recorded in host logs contains a string literal, function name, or comment that is a known, high-fidelity indicator of a specific obfuscation framework (e.g., 'Invoke-Obfuscation', '$DoIt') or malware family.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, particularly those with PowerShell v5+ script block logging enabled.",
            "action": [
              "Query command line and PowerShell script block logs for specific, high-fidelity strings associated with obfuscation tools. Use regular expressions to match known function names (e.g., `Invoke-Obfuscation`), comments, or unique variable names (e.g., `$DoIt`) from a curated threat intelligence list.",
              "Continuously monitor and baseline the frequency of known obfuscation-related keywords (e.g., 'FromBase64String', 'EncodedCommand', 'Bypass') across the enterprise. Generate an alert when the hourly count of any keyword on a single host exceeds 3 standard deviations above its 30-day rolling average for that host.",
              "Train a Naive Bayes classifier on a labeled dataset of command lines, using the presence or absence of a large dictionary of obfuscation-related keywords as features. Deploy the model to score new command lines in near real-time, flagging those with a high probability of being malicious for analyst review."
            ]
          },
          {
            "description": "A command line argument or script block exhibits structural characteristics of obfuscation, such as an excessive number of special characters, string concatenation patterns (e.g., 'wor'+'d'), or the use of character escape sequences (e.g., `^` in cmd.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts, with a focus on systems with direct internet access or hosting high-value user accounts.",
            "action": [
              "Develop and apply regular expressions to detect common obfuscation structures. For PowerShell, search for patterns like `IEX(New-Object Net.WebClient).DownloadString` combined with Base64 indicators. For cmd.exe, detect chained variable substringing (`%VAR:~start,len%`) or more than five consecutive carets (`^`) used for escaping.",
              "For each command, calculate a 'complexity score' based on the ratio of non-alphanumeric characters to total length, the count of special characters (e.g., `^`, `&`, `|`, `+`, `%`), and the depth of nested parentheses. Establish a baseline score for common parent processes (e.g., `explorer.exe`, `svchost.exe`) and alert on commands exceeding the 99th percentile of their respective baseline.",
              "Vectorize command lines using TF-IDF on character 3-grams. Apply a density-based clustering algorithm (e.g., DBSCAN) to the vectors. Isolate and investigate small, dense clusters that do not correspond to known benign software behavior, as these anomalous clusters may represent a new or uncommon obfuscation variant."
            ]
          },
          {
            "description": "A command line, script block, or URI argument exhibits high character entropy, indicating randomness characteristic of encoded or encrypted data, or a character distribution that is a statistical outlier compared to a learned baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (for Zeek logs) and all enterprise endpoints (for host logs).",
            "action": [
              "Create a detection rule to flag any single, unbroken alphanumeric string within a command line or URI parameter that is longer than 128 characters and contains a mix of uppercase, lowercase, and numeric characters. This is a strong heuristic for Base64-encoded payloads.",
              "For each process execution, calculate the Shannon entropy of the command line argument string. Establish a 14-day rolling baseline of entropy values for each unique parent-process/process combination (e.g., `explorer.exe` > `cmd.exe`). Alert when a new command's entropy exceeds the 99.5th percentile for its specific baseline.",
              "Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) on the hourly average command-line entropy per host. A sudden, sustained spike in the average entropy, flagged as an anomaly by the model, indicates a potential interactive session or automated script execution using obfuscation and should be prioritized for investigation."
            ]
          },
          {
            "description": "A PowerShell script block (Event ID 4104) or command line (Event ID 4688) shows evidence of dynamic command construction, such as the use of string concatenation operators (`+`), format specifiers (`-f`), or environment variable expansion, immediately preceding an invocation keyword like `IEX`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, developer workstations, and administrative jump boxes where scripting and dynamic command generation are common.",
            "action": [
              "Query PowerShell script block logs (Event ID 4104) for blocks containing both string concatenation (`+`) or join operators (`-join`) and invocation keywords (`IEX`, `Invoke-Expression`). For cmd.exe, search for commands that use `for` loops to construct a command string and then execute it.",
              "For each PowerShell script block, calculate the ratio of variable assignment operators (`=`) and concatenation operators (`+`) to the total character count. Establish a baseline for this 'construction ratio' for scripts executed by different users or on different hosts. Flag scripts with a ratio in the top 2% of all observed scripts for manual review.",
              "Train a Gradient Boosting classifier (e.g., XGBoost) to distinguish between benign and malicious dynamically constructed commands. Engineer features such as parent process name, count of expanded environment variables, presence of redirection characters (`<`, `>`), the ratio of alphabetic to special characters, and the final command line length. Use the model's output probability score to prioritize alerts for analyst investigation."
            ]
          },
          {
            "description": "A script block contains evidence of layered obfuscation, where the output of one deobfuscation function (e.g., `FromBase64String`) is piped or passed as an argument to another obfuscation-related function (e.g., string reversal, `-replace`, `GzipStream`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts with PowerShell Script Block Logging enabled, especially high-privilege systems like Domain Controllers and administrator workstations.",
            "action": [
              "Create a multi-stage detection rule that first identifies and programmatically decodes a Base64 block from a command line or script. Then, apply a second set of regular expressions to the decoded content to search for further obfuscation indicators like string reversal syntax (`-join ($a[-1..-($a.Length)]`) or compression keywords (`GzipStream`, `DeflateStream`). Generate a critical alert if both stages match.",
              "For any command flagged by other analytics (e.g., high entropy), programmatically attempt a series of common decoding steps (Base64, hex, URL-decode). After each attempt, recalculate the Shannon entropy of the result. A drop in entropy of more than 2.5 points after a single decoding step is a strong indicator of successful deobfuscation.",
              "Develop a sequence-to-sequence (seq2seq) neural network model, trained on known multi-layered obfuscated scripts and their deobfuscated outputs. The model learns to 'translate' obfuscated commands into a canonical, deobfuscated form. A successful translation from a new, unseen command indicates the presence of recognized layered obfuscation techniques and should trigger an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]