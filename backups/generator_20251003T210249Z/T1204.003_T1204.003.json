[
  {
    "information_requirement": "Has the adversary achieved execution through a malicious container or virtual machine image? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1204.003",
        "name": "Malicious Image",
        "evidence": [
          {
            "description": "A container is created using an image whose digest or tag is present on a known-malicious image threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Cloud container orchestration platforms (e.g., Kubernetes, EKS, AKS), Corporate image registries",
            "action": [
              "Parse process creation logs (Windows Event ID 4688) to identify container runtime commands (e.g., `docker run`, `crictl run`). Extract the image name, tag, and/or digest. Compare the extracted identifiers against a curated threat intelligence feed of known-malicious container images. Generate a high-priority alert for any match.",
              "For each unique container image name, calculate its deployment frequency across all container hosts over the last 90 days. Establish a rarity score based on this frequency. Alert on the deployment of any image that is not from a trusted internal registry and whose deployment frequency falls in the bottom 5th percentile, indicating it is a new and rare image in the environment.",
              "Develop a classification model (e.g., Random Forest) trained on features extracted from image metadata, including the image name (length, character entropy, presence of keywords like 'latest'), source registry, and image layers. Use the model to score new images. Alert on images that receive a high probability score for being malicious, triggering a review even if they are not on a known CTI feed."
            ]
          },
          {
            "description": "A running container generates child processes that are inconsistent with its expected behavior, such as network scanners, reverse shells, or cryptominers.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Critical application servers, Application servers running containerized workloads",
            "action": [
              "Continuously monitor process creation events (Windows Event ID 4688) where the parent process is a known container runtime process. Scan the command line of the child process against a list of regular expressions and keywords associated with malicious activity (e.g., `ncat`, `mimikatz`, `xmrig`, `kdevtmpfsi`). Trigger an alert upon any match.",
              "For each container image, create a baseline profile of all legitimate child processes and their command-line arguments observed over a 30-day learning period. For each new process creation event, calculate the Jaccard distance between the new process/argument set and the established baseline for that image. Alert when the distance exceeds a threshold (e.g., > 0.8), indicating a significant deviation from normal behavior.",
              "Apply a time-series anomaly detection algorithm (e.g., Seasonal-ARIMA) to the rate of process creation events per container over time. The model will learn the normal rhythm of process activity for each containerized application. Alert when the model detects a sudden and sustained spike in process creations that deviates significantly from the forecast, potentially indicating a malicious script or looping execution."
            ]
          },
          {
            "description": "A container is deployed with runtime flags that grant it excessive permissions, such as privileged mode (`--privileged`), host process ID namespace sharing (`--pid=host`), or mounting of the Docker socket (`-v /var/run/docker.sock:/var/run/docker.sock`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, CI/CD pipeline runners, Kubernetes API servers",
            "action": [
              "From process creation logs (Windows Event ID 4688), parse the command line of container runtime commands. Use regular expressions to detect the presence of high-risk flags and volume mounts (e.g., `--privileged`, `--net=host`, `-v /:/host`). Compare any findings against a predefined allow-list of approved use cases for such permissions. Alert on any unauthorized usage.",
              "Assign a risk weight to each possible runtime flag based on its security implication. For each container deployment, calculate a total risk score by summing the weights of all flags used. Establish a baseline of risk scores for each application or user. Alert when a new deployment's risk score exceeds the 99th percentile of historical scores for that context.",
              "Train an unsupervised anomaly detection model, such as an Isolation Forest, on feature vectors representing container deployments. Each feature in the vector is a binary value indicating the presence or absence of a specific runtime flag. The model will learn common and safe combinations of flags. Flag any new deployment that the model identifies as an outlier, as it represents an unusual and potentially risky combination of permissions."
            ]
          },
          {
            "description": "A container establishes network connections to an IP address or domain on a threat intelligence feed, exhibits beaconing behavior, or uses protocols and ports inconsistent with its defined function.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Container overlay network segments, DNS resolvers, Cloud VPCs",
            "action": [
              "Ingest Zeek conn.log and dns.log data. Correlate the destination IP addresses and resolved domain names against multiple threat intelligence feeds (e.g., known C2 servers, malware domains, cryptomining pools, TOR nodes). Generate a high-severity alert for any connection from a container IP to a malicious destination.",
              "For each container, analyze Zeek dns.log data to calculate the entropy of requested domain names over a rolling time window; a high entropy score can indicate Domain Generation Algorithm (DGA) activity. Separately, analyze Zeek conn.log data to profile connection intervals and data volume. Alert if a container exhibits periodic, low-volume connections (beaconing) or if its DNS request entropy exceeds 3 standard deviations from its established baseline.",
              "From Zeek conn.log, extract features for each network flow (e.g., destination port, protocol, duration, bytes sent, bytes received). Use a density-based clustering algorithm (e.g., DBSCAN) to group flows into clusters of 'normal' behavior for each application. Treat any flow identified as a noise point (i.e., not belonging to any cluster) as an anomaly and flag it for investigation."
            ]
          },
          {
            "description": "A container is created from an image hosted on an unapproved public registry or an image whose name is a likely typosquat of a legitimate, commonly used image (e.g., 'redis-cache' instead of 'redis').",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host servers, Corporate image registries, DNS resolvers, Developer workstations",
            "action": [
              "Maintain an explicit allow-list of approved container image registry domains. Monitor Zeek dns.log and conn.log for network connections to any registry domain not on this list that are associated with image pull activity. Generate an alert for any attempt to pull an image from an unvetted registry.",
              "From process creation logs (Windows Event ID 4688), extract all image names used in container deployments. For each name, calculate the Levenshtein distance to a list of known, approved public and internal image names. Flag any image name with a distance of 1 or 2, as this indicates a potential typosquatting attempt, and prioritize for review.",
              "Train a classification model (e.g., Gradient Boosting) to predict if a registry is legitimate. Use features such as the registry domain's age, SSL certificate issuer and validity, historical pull frequency within the organization, and public reputation data. Use the model to flag any image deployment originating from a registry that is classified as 'suspicious' or has a low trust score."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]