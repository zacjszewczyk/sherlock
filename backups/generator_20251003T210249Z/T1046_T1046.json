[
  {
    "information_requirement": "Is the adversary attempting to discover network services on the enterprise network?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1046",
        "name": "Network Service Discovery",
        "evidence": [
          {
            "description": "Network traffic contains artifacts uniquely associated with scanning tools. This includes specific User-Agent strings in HTTP traffic (Zeek http.log) or protocol anomalies flagged as 'weird' events by network sensors (Zeek weird.log), such as a TCP Christmas scan.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Internal network segments (East-West traffic), Server subnets, DMZ",
            "action": [
              "Query Zeek http.log for records where the 'user_agent' field matches a watchlist of known scanner User-Agents (e.g., 'Nmap Scripting Engine', 'masscan/1.3.2'). Generate an alert for each match.",
              "From Zeek weird.log, aggregate counts of scanner-related event types (e.g., 'TCP_Christmas_scan', 'possible_split_routing') per source IP over a 24-hour period. Establish a baseline distribution for these counts. Generate an alert if a source IP produces a count of these events exceeding the 99th percentile of the established baseline.",
              "Using a labeled dataset of Zeek conn.log records, train a Random Forest classifier to distinguish between benign traffic and scanner-generated traffic based on features like protocol, duration, service, and TCP flags. Deploy the model to classify new network flows in near-real-time and generate alerts for flows classified as scanning activity."
            ]
          },
          {
            "description": "A process is created with a filename (e.g., 'nmap.exe') matching a known network scanning tool, or a native utility (e.g., 'powershell.exe', 'Test-NetConnection') is executed with command-line arguments indicative of network service discovery (e.g., '-p 1-65535', '-Port').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Critical Workstations, Jump Boxes",
            "action": [
              "Continuously monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1). Generate an alert if a 'ProcessName' or 'Image' field matches a watchlist of scanner executables (e.g., 'nmap.exe', 'masscan.exe'). Additionally, use regular expressions on the 'CommandLine' field to detect native utilities used for scanning (e.g., 'Test-NetConnection -Port', 'nmap -sV') and alert on matches.",
              "For each host, compute a baseline for the Shannon entropy of command-line arguments for commonly abused utilities like 'powershell.exe' and 'cmd.exe'. For each new process creation event involving these utilities, calculate the command-line entropy. Generate an alert if the entropy score exceeds 3 standard deviations above the historical mean for that specific host and utility.",
              "Fine-tune a pre-trained Natural Language Processing (NLP) model on a labeled dataset of command-line arguments, classifying them as benign, administrative, or discovery-related. Deploy the model to score all new process creation events in real-time. Generate an alert for any command line classified with high confidence as discovery-related."
            ]
          },
          {
            "description": "Within a short time window, a single source host establishes connections to an abnormally high number of unique destination hosts on the same destination port, which is characteristic of a horizontal (or network) scan.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments, Cloud VPCs, VPN client subnets",
            "action": [
              "Using a 5-minute sliding window, query Zeek conn.log for a single source IP ('id.orig_h') connecting to more than 50 unique destination IPs ('id.resp_h') on a single common service port ('id.resp_p', e.g., 22, 445, 3389). Generate an alert upon rule match.",
              "In a 10-minute sliding window, calculate the count of unique destination IPs per source IP from Zeek conn.log, creating a 'fan-out' metric. Maintain a network-wide historical distribution of this fan-out metric. Generate an alert for any source IP whose fan-out count exceeds the 98th percentile of this distribution.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to connection data from Zeek conn.log. Use features like source IP, destination IP count, and destination port count within a fixed time window. The algorithm will group normal traffic into dense clusters. Identify scanning behavior by flagging the sparse clusters or noise points (outliers) that represent hosts performing horizontal scans."
            ]
          },
          {
            "description": "Within a short time window, a single source host establishes connections to an abnormally high number of unique destination ports on a single destination host, which is characteristic of a vertical (or port) scan.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical asset subnets (e.g., database servers, application servers), Domain Controllers, Internet-facing servers",
            "action": [
              "Using a 5-minute sliding window, query Zeek conn.log for a single source IP/destination IP pair ('id.orig_h', 'id.resp_h') associated with connections to more than 100 unique destination ports ('id.resp_p'). Generate an alert upon rule match.",
              "In a 10-minute sliding window, for each source-destination IP pair, calculate the Shannon entropy of the destination port numbers from Zeek conn.log. A high entropy score indicates a wide, non-sequential port scan. Generate an alert if a source IP's port entropy for a specific destination exceeds the 99th percentile of its historical baseline.",
              "For each source-destination pair, model the count of new connections per minute as a time series using a model like ARIMA. Train the model on historical benign traffic patterns. Generate an alert when the number of observed connections in a given minute results in a residual error (the difference between predicted and actual values) that exceeds a dynamically calculated threshold, such as 3 standard deviations of past errors."
            ]
          },
          {
            "description": "A specific process (e.g., 'winword.exe') initiates network traffic patterns, such as connecting to a high number of unique IPs or ports, that are inconsistent with its established historical network behavior baseline.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Application servers, any host where process and network telemetry can be correlated",
            "action": [
              "Join process creation logs (Sysmon Event ID 1) with network connection logs (Sysmon Event ID 3). Create a rule that generates an alert if a process from a watchlist of non-network-intensive applications (e.g., 'winword.exe', 'acrord32.exe', 'notepad.exe') is observed making more than 20 outbound connections in a one-minute window.",
              "For each unique process image on each host, build a historical baseline of its typical network behavior (e.g., mean and standard deviation of unique destination IPs per hour) using Sysmon Event ID 3 data. Periodically recalculate these metrics and generate an alert if a process's current hourly behavior deviates from its baseline by more than 3 standard deviations.",
              "For each process network connection event (Sysmon Event ID 3), create a feature vector that includes process name, parent process name, destination IP, and destination port. Use an anomaly detection algorithm like Isolation Forest to score each event. Generate an alert for events with high anomaly scores, particularly those involving common user-level processes exhibiting scanning-like network behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]