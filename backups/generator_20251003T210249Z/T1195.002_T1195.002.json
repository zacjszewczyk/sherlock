[
  {
    "information_requirement": "Has the adversary gained initial access by compromising a software supply chain?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1195.002",
        "name": "Compromise Software Supply Chain",
        "evidence": [
          {
            "description": "A downloaded executable file's hash matches a known-malicious signature, or the file is downloaded from a URL or IP address present on a threat intelligence feed.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Proxies, DNS Servers, Endpoints",
            "action": [
              "Implement a real-time monitoring rule that, for every new executable observed via network download (Zeek files.log) or process creation (Windows Event ID 4688), calculates its SHA256 hash and queries it against a threat intelligence feed of known malicious file hashes. Concurrently, correlate the source IP (Zeek conn.log) and requested hostname (Zeek http.log) against a feed of malicious infrastructure. Generate a high-severity alert on any match.",
              "For all executable downloads, profile the source IP address and domain. Calculate the historical rarity of that source serving executable files to the enterprise over a 90-day baseline. If a source IP or domain falls in the 99th percentile for rarity (i.e., it has rarely or never been seen before) and is serving executables, significantly increase its risk score. A high cumulative score should trigger an alert for analyst review.",
              "Develop and deploy a supervised classification model (e.g., Random Forest, XGBoost) using features extracted from Zeek logs (e.g., `http.log` user-agent, `files.log` MIME type, `conn.log` connection duration, `ssl.log` JA3/JA3S hash, domain age from `dns.log` responses). Train the model to predict the likelihood of a download being malicious. Flag any download with a probability score exceeding a dynamically tuned threshold (e.g., > 0.85) for immediate investigation, even in the absence of a direct IOC match."
            ]
          },
          {
            "description": "A newly observed executable file is unsigned, has an invalid or expired digital signature, or is signed by a publisher certificate that is new, statistically rare, or not reputable.",
            "data_sources": [
              "Zeek pe.log",
              "Windows Event ID 4688",
              "Windows Application Log (CodeIntegrity Events)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, Software Distribution Servers, Code Signing Certificate Authorities",
            "action": [
              "For each new executable file creation (Windows Event ID 4688) or download (Zeek pe.log), automatically verify its digital signature status. Generate a high-priority alert if the file is unsigned, the signature is invalid/expired (check Windows CodeIntegrity events in the Application log), or the publisher's subject name appears on an explicit blocklist of known-malicious or suspicious publishers.",
              "Establish and maintain a 90-day rolling baseline of all software publisher subjects observed in the environment. Calculate the frequency of each publisher. When a new executable is observed signed by a publisher not present in the baseline or in the bottom 5th percentile for frequency, flag it for investigation. Additionally, calculate the Shannon entropy of the publisher's subject name; a high entropy score ($$ > 4.0 $$) may indicate a randomly generated, malicious name.",
              "Implement an anomaly detection model (e.g., Isolation Forest) on features extracted from the executable's digital certificate, such as issuer organization, subject organization, certificate validity period, and key usage attributes. Train the model on all certificates observed historically in the enterprise. The model can identify anomalous certificates that deviate from the established norm, which may indicate a forged or malicious certificate even if it is technically valid."
            ]
          },
          {
            "description": "A legitimate, signed software update package shows a statistically significant deviation in file characteristics, such as file size, imported functions, or section entropy, when compared to its historical versions.",
            "data_sources": [
              "Zeek pe.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, File Servers, Software Deployment Systems",
            "action": [
              "Define a curated list of critical software components (e.g., `lsass.exe`, key application DLLs, core business application executables) and maintain a 'golden image' manifest of known-good file hashes for each version. Create a rule that alerts on any hash mismatch for these specific files following a software update event or file write (Windows Event ID 4663).",
              "For each monitored software package, establish a historical baseline of its file size, the average entropy of its executable sections, and its set of imported functions (IMPHASH). Upon detection of a new version (via file write events or Zeek pe.log), calculate the Z-score for the file size and the average section entropy. Also, calculate the Jaccard similarity between the new and old sets of imported functions. A high Z-score ($$ > 3 $$) or low Jaccard similarity ($$ < 0.8 $$) indicates a significant, potentially suspicious change requiring review.",
              "Develop a time-series forecasting model (e.g., ARIMA or Prophet) for the file size of a specific application's updates over time. If a new update's file size is a significant outlier that falls outside the forecasted value's confidence interval, flag it as anomalous. This can detect unexpected file bloating that may result from a malicious implant."
            ]
          },
          {
            "description": "A known software updater process initiates a network connection to a domain or IP address that is not part of its established baseline of known, legitimate update servers.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoints",
            "action": [
              "Create and maintain an explicit allowlist of known-good update domains and IP address ranges for common, high-risk software (e.g., `*.windowsupdate.com`, `*.adobe.com`, `*.google.com`). Alert when a known updater process (e.g., `TrustedInstaller.exe`, `msiexec.exe`), identified via Windows Event ID 4688, initiates a network connection (Zeek conn.log) to a destination not on this allowlist.",
              "For each known software updater process, build a historical profile of destination domains it has queried (from Zeek dns.log) over the last 90 days. Calculate the frequency of each domain queried by that specific process. Alert when the process queries a domain that is in the bottom 1st percentile of frequency for that process, indicating a rare and potentially unauthorized connection.",
              "Apply a clustering algorithm (e.g., DBSCAN) to network connection features (destination IP, destination port, protocol, data volume, JA3 hash) for each specific updater process. This will group normal update behaviors into stable clusters. Any new network connection that does not fall into an existing cluster (i.e., is classified as noise) should be flagged as a network anomaly, potentially indicating a compromised updater connecting to a non-standard C2 server."
            ]
          },
          {
            "description": "Following a software update, the updated process or a newly created child process performs suspicious follow-on actions, such as establishing persistence, disabling security controls, or initiating command-and-control communications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, Domain Controllers, Active Directory",
            "action": [
              "Create a correlation rule that triggers if a process spawned by a known installer (`msiexec.exe`) or updater (`update.exe`) performs a high-risk follow-on action within minutes of execution, such as creating a new scheduled task (Windows Event ID 4698), modifying a registry run key (Windows Event ID 4657), or spawning a scripting engine (`powershell.exe`, `cscript.exe`, `wscript.exe`) with an encoded command.",
              "Continuously profile all parent-child process relationships to build a probabilistic model. For each updater process, calculate the conditional probability $$ P(\text{child} | \text{parent}) $$ for all observed child processes. If a newly updated process spawns a child that has a very low conditional probability (e.g., $$ P(\text{cmd.exe} | \text{SomeUpdater.exe}) < 0.01 $$), flag the activity as a statistical anomaly.",
              "Train and deploy a sequence-based anomaly detection model (e.g., an LSTM Autoencoder) on sequences of host events (process creation, registry access, network connection) that typically follow a legitimate software update. During inference, if the sequence of events following an update has a high reconstruction error, it indicates a significant deviation from normal post-install behavior and a potential compromise."
            ]
          },
          {
            "description": "An executable or library file within a trusted software installation directory (e.g., Program Files) is modified by an unauthorized process, indicating potential patch tampering outside of a legitimate update mechanism.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical System Directories (e.g., System32, Program Files), Application Servers, Endpoints",
            "action": [
              "Configure file system auditing (SACL) on critical application directories to log write access (generating Windows Event ID 4663). Create an alert rule that triggers when a write operation is performed on a .dll or .exe file by a process that is NOT on an explicit allowlist of trusted installers (e.g., `msiexec.exe`, `TrustedInstaller.exe`, `setup.exe`).",
              "Establish a statistical baseline of all processes that normally write to protected application directories. Calculate the frequency of each source process performing these writes. If a process that is statistically rare (e.g., in the bottom 5th percentile of frequency, such as `notepad.exe` or `svchost.exe`) writes to a protected file, elevate the risk score for that host and event.",
              "Implement a graph-based anomaly detection model where nodes represent processes and files, and directed edges represent 'writes to' interactions. Train the model on normal file access patterns across the enterprise. A compromised supply chain component may manifest as a new, anomalous edge in the graph (e.g., a web server process writing to a core OS DLL), which the model would flag as a structural anomaly indicative of tampering."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]