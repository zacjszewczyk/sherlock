[
  {
    "information_requirement": "Is the adversary bypassing file access controls or monitoring via direct volume access?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1006",
        "name": "Direct Volume Access",
        "evidence": [
          {
            "description": "A process creation event is logged where the process name, command-line arguments, or associated file hash corresponds to a known utility or script used for direct volume access (e.g., NinjaCopy, rawdd).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (Domain Controllers, File Servers, Database Servers), Administrator Workstations, Backup Infrastructure Servers",
            "action": [
              "Create a real-time search rule that ingests process creation logs (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104). The rule must match the 'ProcessName', 'CommandLine', or 'ScriptBlockText' fields against a managed list of file names (e.g., `NinjaCopy.ps1`, `rawdd.exe`) and file hashes (SHA256, MD5) associated with known direct volume access tools. Generate a high-priority alert upon any match.",
              "For each process creation event (Windows Event ID 4688), calculate the prevalence of the process name across the enterprise over the last 30 days. If a process name has been seen on fewer than 5 hosts (low prevalence) and its command-line arguments contain keywords such as 'copy', 'raw', 'disk', 'volume', or `\\\\.\\`, increment a risk score for the host. An aggregate score exceeding a defined threshold triggers an alert.",
              "Deploy a supervised classification model (e.g., Gradient Boosting, Random Forest) trained on labeled process execution data. Features should include process name entropy, command-line argument length and entropy, parent process reputation, user context, and the presence of specific keywords. Continuously score all new process creation events and flag any process classified as malicious with a confidence score above a set threshold (e.g., 0.9) for analyst investigation."
            ]
          },
          {
            "description": "A legitimate system utility (e.g., vssadmin.exe, esentutl.exe, wbadmin.exe) or PowerShell is executed with command-line parameters or script content indicative of creating, accessing, or exfiltrating volume shadow copies or raw disk data.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (Domain Controllers, File Servers, Database Servers), Administrator Workstations, Backup Infrastructure Servers",
            "action": [
              "Implement a SIEM rule that uses regular expressions to parse command-line fields from Windows Event ID 4688 and script block text from Windows Event ID 4104. The rule should alert on high-fidelity patterns such as `vssadmin create shadow`, `esentutl.exe /y /vss`, `wbadmin start backup`, or direct access to volume paths like `\\\\.\\PhysicalDrive[0-9]` and `\\\\.\\HarddiskVolumeShadowCopy[0-9]`.",
              "For all executions of `vssadmin.exe`, `esentutl.exe`, and `wbadmin.exe`, calculate the Shannon entropy of the command-line arguments. Establish a per-host baseline of entropy scores for normal administrative use of these tools. Generate a medium-priority alert when a new execution's entropy score exceeds the 95th percentile of the historical baseline for that host, suggesting abnormal complexity or obfuscation.",
              "Use a sequence analysis model (e.g., Markov Chain) to learn common command execution sequences on a per-user or per-host basis. A sequence that is statistically improbable, such as `vssadmin.exe` followed by `7z.exe` (compression) and then `powershell.exe -enc` (network transfer/obfuscation) within a short time window, should be flagged as a potential T1006 attack chain."
            ]
          },
          {
            "description": "A process requests a handle to a logical volume or physical drive object (e.g., `\\\\.\\C:`, `\\\\.\\PhysicalDrive0`) where the process is not a known, legitimate system or backup utility, or the requested access rights are unusually permissive.",
            "data_sources": [
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (Domain Controllers, File Servers, Database Servers), Administrator Workstations",
            "action": [
              "Enable the 'Audit File System' success and failure SACL on root volume objects (e.g., C:\\) for specific high-privilege access rights. Create and maintain an allowlist of legitimate processes (e.g., `svchost.exe`, `lsass.exe`, approved backup software) authorized to request handles to volume objects. Ingest Windows Event ID 4656 and create a rule that alerts whenever a 'Process Name' not on the allowlist requests a handle where the 'Object Name' is a logical volume (e.g., `\\Device\\HarddiskVolume1`) or physical drive (`\\Device\\Harddisk0\\DR0`).",
              "For processes on the allowlist, establish a baseline of the typical 'Accesses' rights masks they request (from Event ID 4656). Calculate the frequency of each mask per process. Alert if a process requests an access mask that is historically rare for it (e.g., seen <1% of the time) or includes high-privilege rights like `WRITE_DAC`, `WRITE_OWNER`, or `GENERIC_ALL` (`0x10000000`) outside of its normal baseline.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN, Isolation Forest) to features extracted from Event ID 4656, including Process Name, Object Name, and the requested Accesses Mask. The model will group legitimate, recurring access patterns into clusters. Any event that does not belong to a known cluster (i.e., is classified as an anomaly or noise) represents a significant deviation and should be investigated as a potential direct volume access attempt."
            ]
          },
          {
            "description": "A time-correlated sequence of events on a single host, beginning with anomalous raw volume access, followed by the execution of data copying utilities, and culminating in abnormal network egress traffic.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (Domain Controllers, File Servers), Administrator Workstations, Network Egress Points",
            "action": [
              "Create a stateful correlation rule in the SIEM that triggers if the following sequence occurs on a single host within a 30-minute window: 1. A high-severity alert for evidence of direct volume access (e.g., from Evidence blocks 1, 2, or 3). 2. A subsequent process creation (Event ID 4688) for a known compression or archiving utility (e.g., `7z.exe`, `tar.exe`, `rar.exe`). 3. A subsequent outbound network connection (Zeek conn.log) from the same host where the total bytes sent (`orig_bytes`) exceeds 100MB to a destination IP not seen in the last 30 days.",
              "Following an initial alert for potential T1006 activity on a host (from Evidence blocks 1, 2, or 3), automatically enrich the alert with network traffic analysis. Using Zeek conn.log data, compare the total outbound bytes from the host in the 60 minutes following the alert to a rolling 30-day baseline for that specific host, hour-of-day, and day-of-week. If the current traffic exceeds 3 standard deviations above the mean or the 99th percentile of the baseline distribution, escalate the alert to critical priority for immediate incident response.",
              "Implement a Hidden Markov Model (HMM) where the hidden states represent stages of this attack pattern: (`Benign`, `VolumeAccess`, `Staging`, `Exfiltration`). The observations are discrete events from logs: (`AnomalousHandleRequest`, `LOLBAS_Execution`, `CompressionToolRun`, `LargeOutboundFlow`). Train the model on both benign activity and simulated attack data. Use the Viterbi algorithm in real-time to find the most likely sequence of hidden states given the stream of events from each host. A detected state transition path of `Benign` -> `VolumeAccess` -> `Staging` -> `Exfiltration` constitutes a high-confidence alert."
            ]
          },
          {
            "description": "A PowerShell script block is logged that exhibits high levels of obfuscation or contains direct calls to .NET or Win32 APIs for raw disk I/O, such as System.IO.FileStream on a volume path.",
            "data_sources": [
              "Windows Event ID 4103",
              "Windows Event ID 4104",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (Domain Controllers, File Servers, Database Servers), Administrator Workstations",
            "action": [
              "Create a detection rule that scans PowerShell script block logs (Windows Event ID 4104) for text patterns indicating direct API calls or .NET methods used for raw access. Use regular expressions to find keywords such as `CreateFileW`, `DeviceIoControl`, `NtCreateFile`, `[System.IO.FileStream]::new('\\\\.\\')`, and `[System.Runtime.InteropServices.Marshal]`. Correlate any matches with parent process information from Event ID 4688 to identify non-standard execution contexts (e.g., running from an Office macro).",
              "For every PowerShell script block log (Event ID 4104), calculate its Shannon entropy and the ratio of non-alphanumeric characters to total characters. Establish a baseline distribution for these two metrics across all benign scripts in the environment. Flag any new script block where both the entropy and the non-alphanumeric ratio exceed the 98th percentile of their respective baselines, indicating likely obfuscation.",
              "Leverage a pre-trained transformer-based language model (e.g., a fine-tuned version of BERT) specifically for PowerShell script analysis. Feed the text from every script block log (Event ID 4104) into the model for classification. Any script that the model classifies as malicious with a confidence score greater than 0.95 should be automatically escalated for immediate SOC review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]