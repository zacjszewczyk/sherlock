[
  {
    "information_requirement": "Is the adversary leveraging compromised software dependencies or development tools for Initial Access? (TA0001 - Initial Access)",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools",
        "evidence": [
          {
            "description": "A downloaded software package, library, or executable, identified via network or host logs, possesses a cryptographic hash (e.g., SHA256) that matches an entry in a threat intelligence feed for known malicious software dependencies.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.",
            "action": [
              "1. Symbolic (IOC Match): From Zeek files.log and process creation events (Windows Event ID 4688), extract file hashes (SHA256) of downloaded packages and executables. Continuously compare these hashes against a curated threat intelligence feed of known malicious dependencies. Generate a high-severity alert for any match.",
              "2. Statistical (Prevalence Analysis): For each unique file hash observed, calculate its prevalence (count of unique hosts) across the environment over a 30-day window. Flag files with a prevalence in the lowest percentile (e.g., <= 1st percentile) that are associated with a package manager or build tool process, indicating a non-standard or potentially trojanized component.",
              "3. Machine Learning (Classification): Develop and apply a supervised classification model (e.g., XGBoost, Random Forest) trained on features extracted from file metadata (e.g., file size, PE section entropy, source IP reputation, domain age of download source, presence/absence of valid signature). The model should classify each downloaded dependency as benign or malicious. Flag files classified as malicious with a confidence score > 0.9 for analyst review."
            ]
          },
          {
            "description": "A network connection (TCP/UDP) or DNS query originates from a process associated with a package manager or build tool (e.g., npm.exe, MSBuild.exe) and resolves to a domain, IP address, or ASN listed on a threat intelligence feed for C2 servers or malicious code repositories.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, DNS resolvers, network egress points.",
            "action": [
              "1. Symbolic (IOC Match): Ingest threat intelligence feeds for known malicious domains, IPs, and URLs associated with software supply chain attacks. Scan Zeek dns.log (query field), conn.log (id.resp_h), and http.log (host and uri fields) for matches originating from developer or build server subnets. Generate a high-severity alert for any match.",
              "2. Statistical (Domain & Connection Analysis): For DNS queries (Zeek dns.log) from development systems, calculate the Shannon entropy of the queried domain names. Flag queries with abnormally high entropy (e.g., > 3.5 bits/char) or those with a top-level domain (TLD) known for malicious use (e.g., .xyz, .online). For outgoing connections (Zeek conn.log), establish a baseline of destination ASNs and countries. Flag connections to rare or first-seen ASNs/countries, especially if the data volume exceeds the 95th percentile of typical connection volumes for that source.",
              "3. Machine Learning (Time-Series Anomaly Detection): Model the time-series data of outgoing network connections (bytes_out, connection count per minute) from build servers and developer subnets. Use an algorithm like Seasonal-Hybrid ESD (S-H-ESD) to detect anomalous spikes in traffic that deviate significantly from the established seasonal patterns, particularly within 10 minutes of a known package installation event (correlated with process logs)."
            ]
          },
          {
            "description": "A script (e.g., PowerShell, bash) executed by a package manager process (e.g., npm.exe, pip.exe) contains high-entropy content indicative of obfuscation, or specific commandlets/keywords associated with network downloaders or system reconnaissance.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, CI/CD pipeline runners.",
            "action": [
              "1. Symbolic (Signature Match): From PowerShell script block logs (Event ID 4104) and process command lines (Event ID 4688), use YARA rules or regular expressions to search for signatures of malicious activity, such as the use of `Invoke-Expression`, base64-encoded commands, or reconnaissance commands (`whoami`, `ipconfig`, `Get-LocalGroupMember`) executed by a package manager parent process. Alert on a match.",
              "2. Statistical (Content Analysis): For each script block logged (Event ID 4104), calculate the Shannon entropy of the script content and the length of the command line. Establish a baseline for these metrics from legitimate installation scripts. Alert when a script's entropy or length exceeds a dynamic threshold (e.g., > 3 standard deviations from the mean for that parent process), suggesting obfuscation or an embedded payload.",
              "3. Machine Learning (NLP Classification): Utilize a pre-trained Natural Language Processing (NLP) based classifier (e.g., a fine-tuned BERT model) on the text of script blocks (Event ID 4104). The model should analyze the sequence of commands and arguments to identify malicious patterns that simple keyword matching would miss. Flag scripts classified as malicious with a high probability score (>0.85) for investigation."
            ]
          },
          {
            "description": "A process execution or file modification involves a package name that is a close typographical match (e.g., Levenshtein distance of 1 or 2) to a legitimate, commonly used package, or explicitly matches a known malicious dependency from a threat intelligence source.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, internal artifact repositories, network egress points.",
            "action": [
              "1. Symbolic (IOC Match): Maintain a watchlist of known malicious package and executable names from security reports (e.g., 'pygrata-requests'). Create a detection rule that searches for these exact names in process command lines (Windows Event ID 4688) and in URIs from network logs (Zeek http.log).",
              "2. Statistical (Typosquatting Detection): Maintain a dictionary of approved, legitimate package names used in the organization. For each new package name observed in process command lines or download URIs, calculate the Levenshtein distance to all names in the dictionary. Flag package names with a distance of 1 or 2 from a legitimate name (e.g., 'python-dateutil' vs 'python-dateutli') as potential typosquatting.",
              "3. Machine Learning (Graph Analysis): Model the software dependency graph for all internal projects by parsing manifest files (e.g., package.json, requirements.txt). Use a community detection algorithm (e.g., Louvain Modularity) to find clusters of related packages. A new package that does not fit well into any existing community or acts as an anomalous bridge between unrelated communities can be flagged for review."
            ]
          },
          {
            "description": "A child process (e.g., cmd.exe, powershell.exe) is spawned by a package manager or build tool (e.g., npm.exe, MSBuild.exe) that is not part of a pre-defined, baselined set of legitimate child processes for that parent.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, CI/CD pipeline runners.",
            "action": [
              "1. Symbolic (Rule-Based): Create and enforce rules that alert on high-risk parent-child process relationships originating from package managers or build tools, such as `MSBuild.exe` spawning `powershell.exe` or `npm.exe` spawning `cscript.exe` outside of a known-good build profile.",
              "2. Statistical (Prevalence & Outlier Detection): For each parent process associated with development (e.g., `node.exe`, `python.exe`), build a historical frequency distribution of its child processes over 30 days. Alert when a rare or never-before-seen child process is spawned (e.g., a process seen less than 5 times globally). Additionally, calculate the entropy of command lines and flag any that exceed the 99th percentile for that parent process.",
              "3. Machine Learning (Process Sequence Analysis): Model the sequence of process creations (parent-child-grandchild relationships) during typical software build cycles. Use a sequence-based anomaly detection algorithm (e.g., using an LSTM autoencoder) to identify build sessions that contain abnormal process sequences, which could indicate the execution of a malicious payload injected by a compromised dependency. Flag anomalous sequences for analyst review."
            ]
          },
          {
            "description": "Network traffic associated with fetching a dependency originates from a package manager process and exhibits one or more of the following: a direct-to-IP connection, a connection to a domain with a low reputation score or recent registration date, or a non-standard User-Agent string.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, developer and build server subnets.",
            "action": [
              "1. Symbolic (Rule-Based): Create a rule to alert when a connection from a known package manager process is made directly to an IP address (identified in Zeek conn.log where `id.resp_h` is an IP and there's no preceding DNS query in `dns.log`), or when the HTTP Host header (in `http.log`) or TLS Server Name Indication (in `ssl.log`) contains an IP address.",
              "2. Statistical (Rarity Analysis): Establish a baseline of legitimate repository domains, ASNs, and User-Agent strings used for package downloads. Calculate the frequency of each. Alert when a dependency is downloaded from a domain or ASN that is in the bottom percentile of frequency (e.g., < 1st percentile). Similarly, flag connections using a User-Agent string that has a very low prevalence (<0.5%) across the enterprise.",
              "3. Machine Learning (Clustering): Apply an unsupervised clustering algorithm (e.g., DBSCAN) to connection metadata from Zeek conn.log, using features like destination port, bytes sent, connection duration, destination country, and destination ASN. Identify clusters representing normal download activity from primary repositories (e.g., pypi.org, npmjs.com). Flag connections that are classified as noise or fall into small, anomalous micro-clusters for investigation."
            ]
          },
          {
            "description": "A process spawned during a package installation or build is observed creating a persistence mechanism (e.g., new Scheduled Task, Run Key modification, new service) or accessing sensitive user directories (e.g., browser credential stores, SSH key folders) outside of its expected functional scope.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657",
              "Windows Event ID 5156",
              "Windows Event ID 4104",
              "Windows Event ID 4663",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain controllers (for GPO changes), developer workstations, build servers, file servers hosting sensitive data.",
            "action": [
              "1. Symbolic (IOC Match): Create high-fidelity alerts for when a process spawned during a package installation or build (traced via parent process IDs from Event ID 4688) is observed creating a new scheduled task (Event ID 4698), creating a new service (Event ID 7045), or modifying a common persistence-related registry key (Event ID 4657 on HKLM\\...\\Run keys).",
              "2. Statistical (Behavioral Baselining): Enable file access auditing (Event ID 4663) on sensitive user and project directories (e.g., `~/.ssh`, `~/.aws`, `%APPDATA%\\..\\Local\\Google\\Chrome\\User Data`). For processes related to development tools, establish a baseline of normal file access counts and paths. Alert when a process accesses a number of files that is a statistical outlier (e.g., > 99th percentile) or accesses files in highly sensitive directories for the first time.",
              "3. Machine Learning (Causation Analysis): Implement a graph-based event correlation engine. Model events (package install, process creation, network connection, registry modification) as nodes in a temporal graph. Use a graph neural network (GNN) to learn patterns of normal build and installation behavior. Flag subgraphs that represent a suspicious causal chain, such as a package installation node connected to an obfuscated PowerShell execution node (from Event ID 4104) which is then connected to an outbound connection node (from Event ID 5156 and Zeek conn.log) to a newly seen IP address."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]