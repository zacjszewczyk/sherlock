[
  {
    "information_requirement": "Is the adversary attempting to discover enterprise password policies? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1201",
        "name": "Password Policy Discovery",
        "evidence": [
          {
            "description": "A process creation event is observed where the executable's file hash is present on a threat intelligence feed of tools known for discovery, such as PowerSploit or BloodHound components.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations",
            "action": [
              "Create a real-time rule to compare the SHA256 or MD5 hash from every process creation event (Sysmon Event ID 1, Windows Event ID 4688) against a continuously updated threat intelligence feed of malicious hashes. Generate a critical alert for any match and trigger an automated host quarantine playbook.",
              "For every executed file hash not on an allowlist, calculate its environmental prevalence (percentage of hosts where it has executed) over the last 30 days. Investigate processes with a prevalence of less than 1% that are also associated with suspicious command-line arguments containing 'policy', 'password', 'net', or 'accounts'.",
              "Train a binary classification model, such as XGBoost, using features from process creation events (e.g., parent process, user context, file path entropy, hash prevalence). Use known-good admin tools and known-bad discovery tools as training data to classify new, unknown executables as benign or malicious."
            ]
          },
          {
            "description": "A command-line log, such as PowerShell Event ID 4104 or Sysmon Event ID 1, contains exact strings or regular expression patterns matching password policy discovery commands, including 'net accounts /domain', 'Get-ADDefaultDomainPasswordPolicy', 'chage -l', or 'pwpolicy getaccountpolicies'.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Windows PowerShell Event ID 4104",
              "Sysmon Event ID 1",
              "Zeek syslog.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Linux/macOS Servers, End-user Workstations",
            "action": [
              "Deploy a SIEM rule that uses regular expressions to search command-line arguments in Windows Event ID 4688, Sysmon Event ID 1, and PowerShell Event ID 4104 for patterns like 'net(.exe)?\\s+accounts', 'Get-ADDefaultDomainPasswordPolicy', 'chage\\s+-l', and 'pwpolicy\\s+getaccountpolicies'. Trigger an alert if the executing user is not in a pre-defined 'System Administrators' Active Directory group.",
              "For each user, establish a 30-day rolling baseline of their execution frequency for known policy discovery commands. Alert when a user's daily count exceeds the 99th percentile of their individual history or the 95th percentile of their peer group's history, with peer groups defined by Active Directory organizational unit.",
              "Apply a clustering algorithm, such as DBSCAN, to vectorized command-line arguments from process creation events. Analyze clusters of commands that are small in size (outliers) but contain suspicious tokens like 'pass', 'pol', 'acct', or 'domain' to identify potentially obfuscated or novel discovery commands."
            ]
          },
          {
            "description": "A password policy discovery command, such as 'net.exe' with an 'accounts' argument, is executed with a parent process not on an administrative tool allowlist (e.g., spawned from 'outlook.exe') or by a user outside of their baselined working hours.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Windows Security Event ID 4624",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "End-user Workstations, Application Servers, Domain Controllers",
            "action": [
              "Create a detection rule that alerts when a process associated with policy discovery (e.g., 'net.exe', 'net1.exe', 'powershell.exe') has a parent process from a denylist of non-interactive or office applications, such as 'winword.exe', 'excel.exe', 'outlook.exe', 'acrord32.exe', 'chrome.exe', or 'msedge.exe'.",
              "For each user, model their typical process execution hours using a time-of-day and day-of-week distribution based on 90 days of process logs (Event ID 4688). When a policy discovery command is executed, calculate the Z-score of the execution time against the user's historical distribution. Flag any execution with a Z-score greater than 3.5 for investigation.",
              "Deploy a pre-trained Isolation Forest model on legitimate administrative sessions, using features such as user role, parent process name, host name, time of day, and day of week. Score all new executions of policy discovery commands against this model and investigate any execution that receives a high anomaly score."
            ]
          },
          {
            "description": "A confirmed T1201 execution event from a specific user and host is followed within a 60-minute window by another event attributed to a Discovery (TA0007) or Credential Access (TA0006) technique on the same host or by the same user.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All hosts within the enterprise network, network egress points",
            "action": [
              "Implement a stateful correlation rule that triggers when a T1201 alert for a user/host pair is followed within 60 minutes by a command-line execution matching other discovery techniques (e.g., 'net group \"Domain Admins\"', 'nltest /dclist') or credential access activities (e.g., access to the LSASS process by a non-system process).",
              "Maintain a transition matrix of ATT&CK techniques observed per user session. Calculate the baseline conditional probability P(Technique B | T1201) across the enterprise. If, for a specific session, the observed transition to a high-risk technique like T1003 (OS Credential Dumping) significantly exceeds this baseline, elevate the session's risk score.",
              "Utilize a sequence analysis model like a Long Short-Term Memory (LSTM) network, trained on benign administrative command sequences. Feed new command sequences from user sessions into the model and flag sequences containing a T1201 event that the model identifies as having a low probability of being a benign sequence."
            ]
          },
          {
            "description": "Network logs show CLI commands sent to network devices (e.g., 'show aaa' via syslog) or API calls to a cloud provider's password policy endpoint (e.g., AWS IAM 'GetAccountPasswordPolicy', Azure AD 'Get-MgDomain') originating from an IP address or user account not on a security administration allowlist.",
            "data_sources": [
              "Zeek http.log",
              "Zeek syslog.log",
              "Windows PowerShell Event ID 4104",
              "AWS CloudTrail",
              "Azure Activity Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network backbone switches/routers, Cloud IAM infrastructure, Internet gateway",
            "action": [
              "Monitor AWS CloudTrail, Azure Activity Logs, and Zeek HTTP logs for API calls containing 'GetAccountPasswordPolicy' or 'Get-MgDomain'. Cross-reference the source user and IP address against an allowlist of administrative principals and bastion hosts. Generate a high-severity alert for any call from an unauthorized source.",
              "In Zeek, monitor DNS requests (dns.log) for IAM or Azure AD-related FQDNs. Calculate the Shannon entropy of the source IPs making these requests in 1-hour windows. Alert on a sudden decrease in entropy, e.g., >50% drop from baseline, which could indicate a single host performing targeted reconnaissance.",
              "Apply a time series forecasting model, such as ARIMA, to the volume of cloud password policy API calls (from CloudTrail/Azure logs) aggregated per hour. Generate an alert when the observed volume exceeds the model's forecasted upper confidence interval, indicating an anomalous spike in activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]