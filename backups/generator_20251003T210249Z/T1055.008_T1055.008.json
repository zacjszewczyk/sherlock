[
  {
    "information_requirement": "Has the adversary escalated privileges using ptrace system calls?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.008",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "A process, within a 5-minute window of being the target of a ptrace system call, initiates an outbound network connection to a destination IP address or resolves a domain name present on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web, database), Internet gateway/egress points",
            "action": [
              "Create a SIEM rule that triggers when a `syscall=ptrace` event from Linux Auditd is observed. Within 5 minutes on the same host, correlate the target process ID (PID) with a new network connection in Zeek conn.log or a DNS query in Zeek dns.log. Join the destination IP or resolved domain against a threat intelligence feed of known malicious indicators. Alert on any match.",
              "For any process targeted by ptrace that makes a network connection, calculate the rarity of the destination IP and destination port pair based on a 30-day historical baseline for that specific process executable name. Flag any connection where the IP/port pair falls into the bottom 1st percentile of historical frequency, indicating a highly unusual connection for that process.",
              "Train a Random Forest classification model on labeled network connection data (benign vs. malicious). Features should include: connection duration, bytes sent, bytes received, destination port, protocol, and reputation scores for the destination IP/domain. After a ptrace event is detected, extract these features for any subsequent network connection from the target process and use the trained model to classify the connection's likelihood of being malicious. A high probability score triggers an alert."
            ]
          },
          {
            "description": "A ptrace system call is initiated by a process executable that is not on a pre-defined allowlist of legitimate debugging, diagnostic, or containerization tools.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux hosts (servers and workstations), especially those running production applications.",
            "action": [
              "Maintain an allowlist of full executable paths known to legitimately use ptrace (e.g., `/usr/bin/gdb`, `/usr/bin/strace`, `/usr/sbin/runc`, `/usr/bin/dockerd`). Monitor Linux Auditd logs for `syscall=ptrace` events. Create a rule that generates a high-severity alert if the `exe` field of the source process is not on this allowlist.",
              "For each host, build a frequency table of processes (by `exe` path) that use ptrace over a 30-day baseline. For each new ptrace event, calculate a rarity score for the source process `exe` path on that host and across the enterprise. Alert when a ptrace call is made by a process with a rarity score in the 99th percentile (i.e., it is one of the rarest sources of ptrace activity seen).",
              "Apply an unsupervised clustering algorithm like DBSCAN to historical ptrace events. Use features such as source process name, parent process name, user ID (UID), and command-line arguments. This will create clusters representing normal ptrace activity. Monitor for new ptrace events that are flagged as noise or outliers by the DBSCAN model (i.e., do not belong to any established cluster), indicating anomalous activity."
            ]
          },
          {
            "description": "A ptrace system call is observed where the source process has a non-root effective user ID (EUID) and the target process has a root EUID (0), followed by the target process loading a shared library from a non-standard location or executing a new child process.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, execve)",
              "Sysmon for Linux (Event ID 7: Image Loaded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Linux systems, servers with privileged service accounts, container orchestration nodes.",
            "action": [
              "Create a multi-stage correlation rule. Stage 1: Detect a `ptrace` syscall in Linux Auditd where the source process `auid` or `uid` is non-root and the target process's `euid` is 0 (root). Stage 2: Within 10 seconds for the same target PID, look for either a Sysmon for Linux Event ID 7 (Image Loaded) where the image path is in a world-writable directory (`/tmp`, `/var/tmp`, `/dev/shm`), or an `execve` syscall in Auditd that spawns a shell (`/bin/sh`, `/bin/bash`). Alert on a successful correlation.",
              "Following a low-to-high privilege ptrace event (non-root ptrace'ing root), analyze the subsequent actions of the target process. Compare any child process it spawns or library it loads against a historical baseline of parent-child and process-library relationships for that privileged process. Calculate the conditional probability P(Child|Parent) or P(Library|Process). Alert if this probability is below a low threshold (e.g., <0.01%), indicating a historically unprecedented action.",
              "Develop a time-series anomaly detection model using a Long Short-Term Memory (LSTM) network, trained on sequences of system calls made by specific high-privilege processes during normal operation. After a low-to-high privilege ptrace event is detected, feed the subsequent syscall sequence from the target process into the model. An anomaly score from the model that exceeds a learned threshold indicates a significant behavioral deviation from the norm."
            ]
          },
          {
            "description": "A statistically significant deviation is observed in the volume of ptrace calls or in the source-to-target process pairings compared to a learned historical baseline.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Fleets of Linux servers with consistent roles (e.g., web server farm), developer workstation subnets.",
            "action": [
              "Implement two simple threshold rules. Rule A: Alert if a single user (`auid`) or host generates more than 50 `ptrace` syscalls within a 1-minute window, excluding known service accounts for debugging or containerization. Rule B: Maintain a list of known-good (source process, target process) ptrace pairs and alert on any pair not on the list.",
              "For each host, model the rate of `ptrace` syscalls over time using a 30-day baseline. Alert when the current rate exceeds a dynamic threshold, such as 3 standard deviations above the 24-hour moving average. Separately, maintain a frequency map of all `(source_process_exe, target_process_exe)` ptrace pairs observed enterprise-wide and alert on any newly observed pair.",
              "Model ptrace interactions as a directed graph where nodes are processes (identified by `exe` path) and edges represent ptrace calls. Train a graph neural network (GNN) to detect anomalous structural changes, such as the emergence of a new node that acts as a hub (ptrace'ing many other processes) or a bridge between previously disconnected communities, which could indicate a malicious tool at work."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using ptrace system calls?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.008",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "A ptrace system call is observed where the target process executable name or path matches a known security tool (e.g., EDR agent, antivirus scanner, audit daemon), and the source process is not an authorized component of that security tool.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux endpoints and servers with security agents installed.",
            "action": [
              "Maintain a watchlist of security agent process names and executable paths (e.g., `osqueryd`, `falco`, `auditd`, `aed`, `cbagentd`, `xagt`). Create a high-priority rule that triggers an alert if any process on this list is the target of a `ptrace` syscall, where the source process is not an explicitly allowlisted helper or self-debugging process for that tool.",
              "Baseline all interactions with security agent processes. For any `ptrace` event targeting a security agent, calculate the rarity of the source user (`uid`) and source process (`exe`) combination based on a 30-day history. An interaction pair that has never been seen before or is in the lowest percentile of occurrence frequency is highly suspicious and should be alerted on.",
              "Train a binary classifier (e.g., Logistic Regression or SVM) to distinguish between legitimate and malicious interactions with security agents. Features should include the source process name, user context, command-line arguments, and the specific syscall being used (with `ptrace` being a heavily weighted feature). A high 'malicious' probability score for a ptrace event constitutes a high-fidelity alert."
            ]
          },
          {
            "description": "A trusted process (e.g., 'nginx', 'sshd', 'cron'), after being targeted by a ptrace call, spawns an interactive shell or initiates network connections to destinations or ports that are inconsistent with its established operational baseline.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, execve)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux servers hosting public-facing or critical internal services (e.g., web servers, SSH jump boxes).",
            "action": [
              "Create a correlation rule that triggers when a trusted server process (e.g., `nginx`, `apache2`, `sshd`) is the target of a `ptrace` call. Within the next 5 minutes, if the same process ID (PID) or a child of that PID either spawns an interactive shell (`/bin/bash`, `python`, etc.) or makes an outbound network connection (from Zeek conn.log) to a non-standard port, generate an alert.",
              "For each key trusted process (e.g., `nginx`), build a historical baseline of: 1) normal child process names, 2) typical destination ports for network connections, and 3) the set of domains/IPs it communicates with. After a `ptrace` event targets a trusted process, compare its subsequent activity to this baseline. Alert if the process spawns a child that is in the bottom 1% of historical frequency, or connects to a destination port or domain that has never been observed for that process before.",
              "For each critical service (e.g., `nginx`), train an autoencoder on sequences of its normal behavior, including system calls and network activity features. After a `ptrace` event targets the process, feed the subsequent sequence of its actions into the trained autoencoder. A high reconstruction error indicates that the current behavior does not match the learned legitimate patterns, suggesting the process's logic has been hijacked by injected code."
            ]
          },
          {
            "description": "A process, within minutes of being targeted by a ptrace call, accesses sensitive system files (e.g., '/etc/shadow', '/etc/sudoers') or user credential files (e.g., '~/.ssh/id_rsa'), or writes a new file to a world-writable directory and sets execute permissions.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, openat, chmod)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on critical Linux servers, user home directories.",
            "action": [
              "Create a rule that detects a sequence: 1) A process is targeted by a `ptrace` syscall (Auditd). 2) Within 2 minutes, the same process ID (PID) issues an `openat` syscall for a file on a sensitive file watchlist (e.g., `/etc/shadow`, `/etc/sudoers`, `~/.ssh/id_rsa`). OR, the PID writes a file to `/tmp` or `/dev/shm` and then calls `chmod` with execute permissions. Alert on a full sequence match.",
              "For key processes, establish a baseline of file access patterns. After a process is targeted by a `ptrace` call, monitor its subsequent file access events. Calculate the Shannon entropy of the directory paths it accesses within a 5-minute window. A sharp, statistically significant increase in entropy compared to its baseline suggests abnormal file system discovery activity by injected code.",
              "Use a one-class SVM (Support Vector Machine) trained on legitimate file access patterns for specific high-value processes. Features can be derived from file paths using TF-IDF vectorization. After a `ptrace` event, classify subsequent file accesses by the target process. Any access classified as an outlier by the model is a strong indicator of compromise."
            ]
          },
          {
            "description": "A process, after being targeted by a ptrace call, executes the `socket`, `bind`, and `listen` syscall sequence to open a new listening port, or executes `socket` and `connect` syscalls to establish an outbound connection characteristic of a reverse shell.",
            "data_sources": [
              "Linux Auditd (syscall=ptrace, socket, bind, listen, connect)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of all Linux hosts, network egress points.",
            "action": [
              "Detect two malicious sequences following a `ptrace` event on a target PID. Sequence A (Bind Shell): The PID executes `socket`, `bind`, and `listen` syscalls in order. Alert if the listening port is not on an allowlist of known application ports. Sequence B (Reverse Shell): The PID executes `socket` and `connect` syscalls. Correlate with Zeek conn.log to confirm an outbound connection to an external IP.",
              "Maintain a baseline of all listening ports on all hosts across the enterprise. After a process is targeted by `ptrace` and subsequently opens a new listening port, perform a 'stack count' on that port number. If the port is active on less than 0.1% of hosts (i.e., it is statistically rare), flag it as a suspicious potential backdoor.",
              "Train a Recurrent Neural Network (RNN) on legitimate sequences of network-related syscalls (`socket`, `connect`, `bind`, `listen`, `accept`). After a `ptrace` event, analyze the subsequent syscall sequence from the target process. If the model assigns a very low probability to the observed sequence, it indicates an anomalous and potentially malicious pattern, such as the setup of a reverse shell or custom backdoor."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]