[
  {
    "information_requirement": "Is the adversary employing masquerading techniques for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036",
        "name": "Masquerading",
        "evidence": [
          {
            "description": "A process creation event is observed where the process's file hash is present in a threat intelligence feed of known malware, but the process name is identical to a common, legitimate system binary (e.g., svchost.exe, lsass.exe, cmd.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), Domain Controllers, Certificate Authorities",
            "action": [
              "Symbolic: For each process creation event (Windows Event ID 4688, Sysmon Event ID 1), join the process hash with a high-confidence threat intelligence feed. Generate a high-priority alert if a hash matches and the process name is on a watchlist of commonly masqueraded system binaries (e.g., svchost.exe, lsass.exe, explorer.exe, services.exe).",
              "Statistical: For each critical system binary name (e.g., lsass.exe, csrss.exe), maintain a historical set of all known-good file hashes from a golden image or software inventory. Alert when an execution of a critical binary name uses a hash not present in its corresponding known-good set.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on labeled process creation events. Features should include process name, parent process name, command line length, hash prevalence across the enterprise, and a binary feature indicating if the hash is present in threat intelligence. Use the model to score the likelihood that a new process execution with a legitimate name but a rare or known-bad hash is malicious."
            ]
          },
          {
            "description": "A process is executed where the filename contains patterns designed to deceive users, such as the Right-to-Left-Override (RTLO) Unicode character (U+202E), multiple file extensions (e.g., 'report.pdf.exe'), or a name that is a common misspelling of a legitimate binary (e.g., 'svch0st.exe').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints, email gateways, web proxies, and file shares",
            "action": [
              "Symbolic: Create a SIEM rule that uses regular expressions to scan the 'NewProcessName' or 'Image' field in process creation logs. The regex should search for: the RTLO character (\\u202E), multiple extensions (e.g., `\\.(pdf|docx|txt|jpg)\\.exe$`), and filenames with a space as the final character.",
              "Statistical: For each new process creation event, calculate the Levenshtein or Jaro-Winkler distance between the process filename (without extension) and a list of critical system process names. Flag any process name with a distance score that indicates high similarity but not an exact match (e.g., Jaro-Winkler > 0.95 and < 1.0) for manual review.",
              "Machine Learning: Train a character-level Convolutional Neural Network (CNN) on a large dataset of known benign and malicious filenames. The model learns to classify new filenames as 'suspicious' or 'benign' based on subtle character sequence patterns, structure, and combinations that are often missed by regex."
            ]
          },
          {
            "description": "A process with a name corresponding to a legitimate system binary (e.g., svchost.exe, powershell.exe) is executed from a file path outside of its standard, expected directory (e.g., not from C:\\Windows\\System32\\).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), especially user-writable directories (e.g., C:\\Users\\*, C:\\ProgramData, C:\\Temp, C:\\Perflogs)",
            "action": [
              "Symbolic: Maintain a strict allowlist of process name-to-path mappings for critical system binaries (e.g., {name: 'svchost.exe', path: 'C:\\Windows\\System32\\'}). Alert on any process creation event where the process name is on the list but the path does not match an allowed entry.",
              "Statistical: For each critical process name, build a frequency distribution of its execution paths across the enterprise over a 30-day baseline. Alert when a process executes from a path that falls into the bottom 1st percentile of frequency for that process name, indicating a statistically rare location.",
              "Machine Learning: Use a clustering algorithm like DBSCAN on process execution events, using features derived from the file path (e.g., directory depth, presence of user names, presence of 'Temp' or 'Public'). Identify and investigate small, dense clusters of system binaries running from anomalous locations, separate from the large, normal clusters (e.g., a cluster of 'rundll32.exe' running from 'C:\\Users\\Public\\Music\\')."
            ]
          },
          {
            "description": "A running process's on-disk filename (e.g., svchost.exe) does not match the 'InternalName' or 'OriginalFilename' fields embedded within its Portable Executable (PE) metadata.",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), Domain Controllers",
            "action": [
              "Symbolic: Configure Sysmon to collect PE header information (OriginalFileName, InternalName). Create a SIEM query to find all process creation events (Sysmon Event ID 1) where the basename of the 'Image' field does not equal the 'OriginalFileName' field from the PE data and the process name is not on an exception list.",
              "Statistical: Build a baseline of all observed (Image basename, OriginalFileName, InternalName) triplets. Calculate the frequency of each triplet across the enterprise. Alert on newly observed triplets or those with a frequency below a defined threshold, indicating a rare or first-seen combination that warrants investigation.",
              "Machine Learning: Train a decision tree model on features from PE headers and process execution data. Features should include boolean flags for (Image name == OriginalFileName) and (Image name == InternalName), signer information, and process path. Use the model to score the likelihood of masquerading for each process execution."
            ]
          },
          {
            "description": "A legitimate system process (e.g. cmd.exe) is spawned by an atypical parent process (e.g. winword.exe), or a critical system process (e.g. lsass.exe) is spawned by any process other than its expected parent (wininit.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints, especially user workstations and application servers running software like Microsoft Office or Adobe Reader.",
            "action": [
              "Symbolic: Develop a list of highly suspicious or forbidden parent-child process relationships (e.g., Parent: winword.exe, Child: powershell.exe; Parent: outlook.exe, Child: cmd.exe; Parent: NOT wininit.exe, Child: lsass.exe). Create a SIEM rule to generate a high-priority alert when any of these relationships are observed.",
              "Statistical: Over a 30-day period, generate a probabilistic model of all parent-child process relationships. For each observed execution, calculate the conditional probability P(Child | Parent). Alert on any relationship where the probability is below a low threshold (e.g., < 0.01%) or where the parent-child pair has never been seen before.",
              "Machine Learning: Use a graph-based anomaly detection algorithm to model normal process lineage. Nodes represent process names and directed edges represent parent-child relationships, weighted by frequency. Identify anomalies as low-weight edges that connect otherwise disconnected communities in the graph (e.g., an edge from an 'Office Application' node to a 'System Tool' node)."
            ]
          },
          {
            "description": "A process with a name of a known Microsoft-signed binary (e.g., explorer.exe) is executed, but the binary is either unsigned, has an invalid digital signature, or is signed by a publisher other than 'Microsoft Corporation' or 'Microsoft Windows'.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), code signing servers",
            "action": [
              "Symbolic: Using Sysmon Event ID 1, create a SIEM rule to check processes with names on a list of critical Microsoft binaries (e.g., lsass.exe, winlogon.exe). Alert if the 'SignatureStatus' is anything other than 'Valid' or if the 'Signature' is not from an authorized Microsoft signer.",
              "Statistical: Maintain a baseline of all (Process Name, Signer) pairs observed in the environment. Alert when a process that is almost always signed by Microsoft (e.g., >99.9% of observed instances) is seen with a new, non-Microsoft signer or is unsigned.",
              "Machine Learning: Train a Naive Bayes classifier using features such as: process_name, is_signed (boolean), signature_status (categorical), signer_name (categorical), and the historical prevalence of the signer. Use this model to flag executions where the combination of features is anomalous, such as a technically valid but rarely seen signature on a critical system process."
            ]
          },
          {
            "description": "A common system utility (e.g., powershell.exe, rundll32.exe, certutil.exe) is executed with command-line arguments that exhibit high Shannon entropy, contain Base64 encoded strings, or are uncharacteristically long, deviating from normal activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise endpoints (workstations, servers), DMZ servers, Domain Controllers, Web Proxies",
            "action": [
              "Symbolic: Create a SIEM rule that scans the 'CommandLine' or 'ProcessCommandLine' field in process creation logs for known obfuscation indicators (e.g., '-enc', '-encodedcommand', 'FromBase64String', '-e bypass -noprofile -w hidden') or suspicious LOLBAS usage patterns (e.g., 'certutil -urlcache').",
              "Statistical: For each key system utility (powershell.exe, cmd.exe, cscript.exe), establish a per-process baseline for the length and Shannon entropy of its command-line arguments. Generate an alert when a new execution's command line exceeds the 98th percentile for either length or entropy for that specific utility.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) on command-line arguments after vectorizing them with TF-IDF. This will group commands into clusters of similar activity. Identify and investigate small, outlier clusters, as these often represent anomalous usage patterns that differ from the large clusters of benign administrative activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]