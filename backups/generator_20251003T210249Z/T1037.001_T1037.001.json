[
  {
    "information_requirement": "Is the adversary maintaining persistence using Windows logon scripts? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037.001",
        "name": "Logon Script (Windows)",
        "evidence": [
          {
            "description": "A script file (.bat, .vbs, .ps1, .js) is created or modified in a directory associated with logon scripts, such as a user's profile or a domain's SYSVOL share, and its content hash is known to be malicious.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories on endpoints, SYSVOL shares on Domain Controllers, and file servers hosting scripts.",
            "action": [
              "Symbolic (IOC): Monitor for file creation events (Sysmon Event ID 11, Windows Event ID 4663) in known logon script paths (e.g., C:\\Users\\*\\AppData\\Roaming, \\\\<DOMAIN>\\SYSVOL\\). Upon event, automatically hash the 'TargetFilename' and query the hash against a threat intelligence feed of known malicious script hashes. Generate a high-severity alert on any match.",
              "Statistical: Establish a baseline of all script file names, paths, and extensions used in logon scripts across the enterprise. Calculate the rarity of each file name, path, and extension using historical data. Alert when a new logon script uses a file name or is placed in a directory that falls below the 5th percentile of frequency, or uses an uncommon extension (e.g., .js in an environment that only uses .bat).",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on a labeled dataset of benign and malicious script files. Extract features from script content such as file size, character entropy, string length distributions, API call frequencies, and the presence of suspicious keywords (e.g., 'Invoke-Expression', 'DownloadString', 'FromBase64String'). Score all new or modified scripts and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "The HKCU\\Environment\\UserInitMprLogonScript registry value is created or modified by a process not on an approved list of administrative tools (e.g., gpupdate.exe, regedit.exe) or by a non-privileged user account.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoint and server registry hives, specifically HKCU\\Environment for all user profiles.",
            "action": [
              "Symbolic (IOC): Create and maintain a watchlist of approved administrator accounts and authorized processes (e.g., 'gpupdate.exe', 'regedit.exe', specific software deployment tools). Monitor for modifications to the 'HKCU\\Environment\\UserInitMprLogonScript' registry key (Sysmon Event ID 13). Generate an alert if the 'Image' (process) or 'User' performing the modification is not on the approved watchlist.",
              "Statistical: For each host and user, baseline the frequency of modifications to the 'UserInitMprLogonScript' key over a 30-day rolling window. Use a time-series analysis to detect anomalies. Alert if the number of modifications in a 24-hour period exceeds 3 standard deviations above the historical mean for that entity, indicating unusual script-setting activity.",
              "Machine Learning: Implement an anomaly detection algorithm (e.g., Isolation Forest) using features from registry modification events (Sysmon Event ID 13). Key features should include the user account making the change, the parent process of the modifying process, the process image name, and the time of day. The model will learn normal patterns and flag any modification that is a significant outlier, such as a change made by 'powershell.exe' whose parent is 'winword.exe'."
            ]
          },
          {
            "description": "A process spawned by a logon script interpreter (e.g., cscript.exe, wscript.exe, powershell.exe) establishes a network connection to a destination IP or domain with a known-bad reputation or that is statistically rare for the enterprise.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints and servers, Network egress points, DNS servers.",
            "action": [
              "Symbolic (IOC): Correlate process creation events (Sysmon Event ID 1) with network connection events (Sysmon Event ID 3, Zeek conn.log). If a process's parent is a logon script interpreter (e.g., cscript.exe, powershell.exe) and the process initiates an outbound connection, enrich the destination IP/domain against a threat intelligence feed. Alert on any connection to a known malicious C2, proxy, or TOR node.",
              "Statistical: From Zeek dns.log, build a frequency table of all requested domains across the enterprise. For any network connection originating from a logon script's child process, calculate the rarity of the requested domain using a scoring method like inverse document frequency (IDF). Alert when a connection is made to a domain in the bottom 5% of prevalence, indicating an unusually rare destination.",
              "Machine learning: Develop a time-series model (e.g., ARIMA or LSTM) to baseline the expected outbound data volume ('orig_bytes' in Zeek conn.log) and connection frequency for processes spawned by logon scripts on a per-user basis. Alert when the observed outbound data volume or connection count for a single session significantly deviates from the predicted baseline, which could indicate C2 heartbeat activity or data staging."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using Windows logon scripts? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037.001",
        "name": "Logon Script (Windows)",
        "evidence": [
          {
            "description": "A logon script configuration is modified to point to a new script file, and the hash of that file's content matches a known privilege escalation tool or offensive security framework (e.g., PowerSploit, Mimikatz, BloodHound).",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controller SYSVOL Shares, User Endpoint Registry Hives (HKCU\\Environment), File systems on endpoints and servers.",
            "action": [
              "Symbolic (IOC): Monitor for modifications to logon script pointers (Sysmon Event ID 13 for registry, Sysmon Event ID 11 for GPO files). Upon detection of a change, retrieve the newly referenced script file, calculate its hash, and compare it against a curated threat intelligence database of hashes specific to privilege escalation tools. Alert on any match.",
              "Statistical: Analyze command-line arguments of processes launched by logon scripts (Sysmon Event ID 1). Profile the frequency of argument n-grams (e.g., bi-grams, tri-grams) from benign scripts. Alert when a command appears with arguments that are statistically anomalous or contain rare n-grams, suggesting alteration for malicious purposes like loading a reflective DLL or executing encoded commands.",
              "Machine Learning: Train a supervised learning classifier on labeled script content (benign vs. malicious privilege escalation scripts). Features should include obfuscation metrics (e.g., entropy, base64 string ratios), suspicious API call invocations (e.g., 'CreateProcessAsUser', 'LsaGetLogonSessionData'), and presence of keywords related to credential access or token manipulation (e.g., 'SeDebugPrivilege', 'mimikatz'). Apply the model to any new or modified logon script to predict its likelihood of being a privilege escalation tool."
            ]
          },
          {
            "description": "A logon script configuration is modified by an administrative account for a non-administrative user, where this specific administrative action deviates from established change management patterns.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Sysmon Event ID 13",
              "Active Directory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Endpoint Registry Hives (HKCU\\Environment), Active Directory user/group objects, Domain Controller SYSVOL Shares.",
            "action": [
              "Symbolic (IOC): For every modification to 'HKCU\\Environment\\UserInitMprLogonScript' (Sysmon Event ID 13), extract the modifying user ('User') and the target user profile SID from the registry path. Using Active Directory logs, query the group memberships of both accounts. Create a rule to alert if the modifying user is a member of a privileged group (e.g., 'Domain Admins') and the modification is for a standard user, and this action is not associated with a change management ticket.",
              "Statistical: Build a graph representing 'who modifies whom' for logon scripts, where nodes are users/OUs and edges are modification events. Identify normal administrative boundaries (e.g., Helpdesk for Sales OU). Alert when a modification occurs that crosses these established boundaries, such as an administrator for the Finance OU modifying a script for a user in the Engineering OU, as this is a statistically rare event.",
              "Machine Learning: Use an anomaly detection model (e.g., One-Class SVM) trained on legitimate cross-user logon script modifications. Features should include source user privilege level, target user privilege level, source and target OU, time of day, and source workstation name. The model will learn the profile of 'normal' administrative actions and flag modifications that deviate significantly, potentially indicating a compromised admin account being used for lateral movement setup."
            ]
          },
          {
            "description": "A logon script executes from a file system path where the Access Control List (ACL) grants write or modify permissions to a low-privilege security principal, such as 'Authenticated Users' or 'Everyone'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "File/Folder ACLs via PowerShell or API"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of Endpoints and Servers, particularly in user profile directories, temporary folders, and shared script repositories.",
            "action": [
              "Symbolic (IOC): Upon detection of a new logon script path (from Sysmon Event ID 13 or 1), trigger an action to query the ACL of the script file and its parent directory. Create a rule to alert if the ACL contains a Discretionary Access Control Entry (DACE) granting write/modify/full-control permissions to a non-administrative group SID (e.g., 'S-1-1-0' for Everyone, 'S-1-5-11' for Authenticated Users).",
              "Statistical: Periodically scan all known logon script paths. For each script, calculate a 'permissions risk score' by assigning weights to problematic ACEs (e.g., 'Everyone-Write' = 10 points, 'Authenticated Users-Write' = 8 points). Establish a baseline risk score across the environment. Alert when a script's risk score exceeds the 99th percentile, indicating a dangerously misconfigured file.",
              "Machine Learning: Train a classification model to predict if a file path is vulnerable to tampering based on its ACLs and path characteristics. Features can include the count of ACEs, presence of specific well-known SIDs, directory depth, and whether the path is in a standard protected location vs. a user-writable area. Proactively run this model against all logon script paths to identify and flag misconfigurations that enable privilege escalation."
            ]
          },
          {
            "description": "A child process of a logon script interpreter (e.g. cscript.exe) creates a new system service, creates or modifies a privileged scheduled task, or attempts to access the memory of the LSASS process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7045",
              "Windows Event ID 4698",
              "Windows Event ID 4656",
              "Sysmon Event ID 1",
              "Sysmon Event ID 10",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints and servers, Domain Controllers, Security log event forwarders.",
            "action": [
              "Symbolic (IOC): Create a correlation rule that triggers when a process spawned by a known logon script interpreter (Sysmon Event ID 1) is immediately followed by a high-risk event from the same ProcessGUID. Alert if this child process creates a new service (Event ID 7045), creates a scheduled task (Event ID 4698), or requests a handle to lsass.exe (Sysmon Event ID 10 where TargetImage ends in 'lsass.exe' and GrantedAccess indicates read/write).",
              "Statistical: For each logon script, profile the sequence of subsequent events (process create, registry set, file write, network connection). Represent these sequences as event chains (e.g., 'ProcCreate -> RegSet_HKLM -> SvcCreate'). Identify the most common chains. Alert when a new execution exhibits a chain that has a very low probability of occurrence based on historical data, suggesting an anomalous and potentially malicious action flow.",
              "Machine Learning: Use a sequence-based anomaly detection model, such as a Long Short-Term Memory (LSTM) autoencoder, trained on sequences of events following logon script execution. The model learns to reconstruct normal sequences of operations. A high reconstruction error for a new sequence indicates an anomalous chain of events (e.g., a script that normally only reads files suddenly tries to create a service), signaling a likely privilege escalation attempt."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]