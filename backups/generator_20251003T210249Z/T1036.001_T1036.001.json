[
  {
    "information_requirement": "Is the adversary using defense evasion techniques by executing code with an invalid signature? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.001",
        "name": "Invalid Code Signature",
        "evidence": [
          {
            "description": "A process is created from an executable file whose SHA256 hash or signing certificate thumbprint matches a known-malicious indicator from a high-confidence threat intelligence feed.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 7",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices (workstations, servers), Domain Controllers, Code repositories, Build servers",
            "action": [
              "Symbolic: Continuously monitor process creation events (Sysmon Event ID 1, Windows Event ID 4688) and image load events (Sysmon Event ID 7). Extract the file hash (SHA256) and certificate thumbprint for all executed files. Query this data against a blocklist of known malicious indicators from high-confidence threat intelligence. Generate a high-priority alert for any match.",
              "Statistical: Calculate the daily frequency of unique IOC hits per endpoint. Establish a baseline mean and standard deviation for each endpoint over a 30-day period. Alert on any day where the number of unique IOC hits on a single endpoint exceeds 3 standard deviations above its baseline, which may indicate a targeted intrusion rather than sporadic, opportunistic malware.",
              "Machine Learning: Implement a time series anomaly detection model (e.g., SARIMA, Prophet) on the aggregate count of IOC matches across the enterprise, segmented by IOC type (hash, certificate). A sharp, unforecasted spike in matches, particularly for a single indicator, can signal a new, widespread campaign. Use the model's anomaly score to dynamically adjust the alert priority."
            ]
          },
          {
            "description": "A process is created from an executable that fails the operating system's digital signature validation check, indicated by a 'SignatureStatus' of 'Invalid' in endpoint logs.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Microsoft-Windows-CodeIntegrity/Operational Event ID 3077",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, Application servers, Developer workstations, Systems with strict application control policies (e.g., WDAC)",
            "action": [
              "Symbolic: Create a SIEM rule that triggers on Sysmon Event ID 7 where the 'SignatureStatus' field is 'Invalid'. Correlate this with the corresponding process creation event (Sysmon Event ID 1) to retrieve the parent process and command line. Alert on all such events, excluding file paths and signers present on a pre-defined allowlist of known-good but invalidly signed software.",
              "Statistical: For each host and user, calculate a rolling 30-day baseline of the count of invalid signature events. Use the 99th percentile as a threshold. Generate a medium-priority alert when a host or user exceeds this threshold in a 24-hour period, helping to distinguish isolated events from a potential burst of malicious activity.",
              "Machine Learning: Train a supervised classification model (e.g., XGBoost, Random Forest) on labeled historical data of invalid signature events. Features should include: file path (e.g., temp, download, system32), file name entropy, parent process name (e.g., explorer.exe, cmd.exe, powershell.exe), user account type, and command-line arguments. Use the model's output probability score to triage alerts, automatically escalating high-probability events."
            ]
          },
          {
            "description": "An executable file's re-computed Authenticode hash does not match the hash value stored within its PE header's digital signature block, indicating the file was modified after it was signed.",
            "data_sources": [
              "File binary from endpoint",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations, Critical servers (Domain Controllers, Database Servers), Software distribution points, File shares",
            "action": [
              "Symbolic: Configure a SOAR playbook to trigger on process creation (Sysmon Event ID 1) for newly observed PE files. The playbook acquires the file binary, parses the WIN_CERTIFICATE structure to extract the embedded signature's hash, re-calculates the file's Authenticode hash, and generates a high-priority alert if the two hashes do not match.",
              "Statistical: Schedule a weekly hunt across endpoints to scan critical directories (e.g., C:\\Windows\\System32). For each signed PE file, perform the hash mismatch check. Calculate the percentage of mismatched files per host and establish a network-wide baseline for this percentage. Alert on any host whose mismatch percentage is a statistical outlier (e.g., Z-score > 3) compared to the fleet baseline.",
              "Machine Learning: For every file identified with a hash mismatch, extract a feature vector including PE metadata (compile time, section entropy), signature metadata (signer name, timestamp), and context (file path, host criticality). Feed this vector into an unsupervised anomaly detection model (e.g., Isolation Forest) to assign an anomaly score, allowing analysts to prioritize the most unusual instances of file tampering."
            ]
          },
          {
            "description": "A newly observed executable is signed with a certificate whose issuer or subject is statistically rare compared to a 90-day baseline of all signed executables in the environment.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All enterprise workstations and servers, Certificate Authority servers, Developer workstations",
            "action": [
              "Symbolic: Create a SIEM rule that monitors Sysmon Event ID 7 logs. Maintain and query against a watchlist of suspicious certificate attributes, including: known-bad issuer/subject names, subjects containing typosquatting variations of legitimate companies (e.g., 'Microsof Corporation'), or certificates with unusually long validity periods (e.g., > 10 years).",
              "Statistical: On a daily basis, ingest all unique certificate subjects and issuers from Sysmon Event ID 7 logs into a lookup table with their observation counts. For any newly executed file, calculate a rarity score for its certificate by taking the inverse of the observation count for its subject and issuer. Alert on any execution whose certificate rarity score falls in the top 1% (99th percentile) of all scores calculated that day.",
              "Machine Learning: Implement an unsupervised clustering model (e.g., DBSCAN) that runs weekly on the features of all observed certificates. Features should include: validity duration in days, entropy of the subject string, entropy of the issuer string, and a boolean for self-signed status. Certificates that are classified as noise or belong to very small clusters should be flagged for review as they represent anomalous signing practices."
            ]
          },
          {
            "description": "A file is downloaded from an external network source, and within a 10-minute window, is executed on an endpoint, resulting in a code integrity event indicating the signature is invalid.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Internet Gateway, Proxy server logs, All enterprise workstations",
            "action": [
              "Symbolic: Create a SIEM correlation rule where a file hash from 'Zeek files.log' is observed in a 'Sysmon Event ID 1' on the destination host within 10 minutes. Join this with the corresponding 'Sysmon Event ID 7' for that process. Generate a high-priority alert if the 'SignatureStatus' in the Sysmon event is 'Invalid'.",
              "Statistical: Using the logic from the symbolic rule, track the source domain for each 'download -> invalid execution' event chain. On a weekly basis, calculate a 'risk ratio' for each domain: (count of downloads from domain leading to invalid execution) / (total downloads from domain). Rank all domains by this ratio and investigate the top 5% as statistically significant sources of improperly signed software.",
              "Machine Learning: Create an hourly time series of the count of 'download -> invalid execution' correlated events across the enterprise. Apply a time series anomaly detection algorithm (e.g., Seasonal Hybrid ESD) to this data. A significant, unexplained spike flagged as an anomaly by the model should trigger an alert for a possible widespread campaign, prompting a broader threat hunt."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]