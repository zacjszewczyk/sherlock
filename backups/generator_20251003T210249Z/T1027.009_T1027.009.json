[
  {
    "information_requirement": "Is the adversary evading defenses by embedding malicious payloads within non-executable or seemingly benign executable files? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.009",
        "name": "Embedded Payloads",
        "evidence": [
          {
            "description": "A file's hash matches a known malicious signature associated with embedded payloads, or a PE file's section exhibits unusually high entropy (e.g., > 7.5), or its section names suggest the use of a known packer.",
            "data_sources": [
              "Zeek files.log",
              "Zeek pe.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewalls, Web Proxies, Email Gateways, User Workstations, File Servers",
            "action": [
              "Symbolic: Query for all file hashes from Zeek files.log and from file paths identified in Windows Event ID 4688 process creation events. Compare these hashes against a threat intelligence feed of known malicious hashes, specifically those tagged as droppers, loaders, or packed malware. Additionally, search Zeek pe.log for section names matching regular expressions for known packers (e.g., 'UPX[0-9]', 'FSG!', '.aspack').",
              "Statistical: For all PE files identified in Zeek pe.log, calculate the Shannon entropy for each executable section. Establish a baseline entropy distribution for legitimate executables within the environment. Flag any PE file where a section's entropy exceeds the 99th percentile or is greater than 3 standard deviations from the mean entropy of its corresponding section type (e.g., .text, .data, .rsrc).",
              "Machine Learning: Develop and deploy a logistic regression classifier trained on labeled PE file features (section count, section names, section entropy values, import table hash, overlay size) to predict the probability of a file containing an embedded payload. Continuously feed features extracted from Zeek pe.log into the model and generate alerts for files that receive a high probability score (e.g., > 0.9)."
            ]
          },
          {
            "description": "A PE file possesses a data overlay that is anomalously large relative to its total size, or it has an unusually high number of sections compared to a baseline of legitimate software.",
            "data_sources": [
              "Zeek pe.log",
              "Zeek files.log",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway Firewalls, Web Proxies, Email Gateways, Endpoint temporary directories",
            "action": [
              "Symbolic: Create a rule to detect PE files where the overlay size, calculated as `total_bytes` from Zeek files.log minus the PE structure size, is larger than a fixed threshold (e.g., 500KB) or larger than the PE structure itself. Correlate with files that have a low number of imported functions, as packed executables often resolve imports dynamically.",
              "Statistical: For all PE files observed in Zeek pe.log, calculate the ratio of the overlay size to the total file size. Establish a baseline distribution for this ratio across legitimate software in the environment. Generate an alert for files where this ratio exceeds the 95th percentile. Additionally, track the count of PE sections per file and flag files with a section count greater than 2 standard deviations above the mean for known-good executables.",
              "Machine Learning: Implement an unsupervised anomaly detection algorithm, such as an Isolation Forest or One-Class SVM, on a feature set derived from Zeek pe.log (e.g., section count, average section entropy, overlay size ratio, number of imported functions). Train the model on a large corpus of network traffic to learn the characteristics of 'normal' PE files and flag files that the model identifies as strong outliers."
            ]
          },
          {
            "description": "A PowerShell script block log (Windows Event ID 4104) reveals a script with high Shannon entropy (e.g., > 4.5), large Base64-encoded segments (e.g., > 256 characters), and the use of functions associated with in-memory execution (e.g., Invoke-Expression, [System.Reflection.Assembly]::Load).",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4103"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers, Exchange Servers",
            "action": [
              "Symbolic: Using regular expressions, search PowerShell script block logs (Event ID 4104) for the co-occurrence of keywords like `FromBase64String`, `Invoke-Expression`, `IEX`, or `[System.Reflection.Assembly]::Load` with large, encoded text blocks (e.g., a contiguous block of Base64 characters > 256 bytes).",
              "Statistical: For each script block logged in Event ID 4104, calculate the Shannon entropy of the script content and the character frequency distribution. Establish a baseline for legitimate administrative and user scripts in the environment. Alert on any script with an entropy score exceeding the 98th percentile or where the character distribution deviates significantly (measured by a chi-squared test) from the established norm for benign scripts.",
              "Machine Learning: Train a Naive Bayes or simple neural network text classifier on a labeled dataset of malicious and benign PowerShell scripts, using features such as keyword frequency (n-grams), API call mentions, entropy, and string length statistics. Deploy the trained model to classify incoming script blocks from Event ID 4104 in near real-time and alert on scripts classified as malicious with high confidence."
            ]
          },
          {
            "description": "A process injection event is detected (Sysmon Event ID 8 or 10) where a non-system process (e.g., WINWORD.EXE, CHROME.EXE) injects code into a legitimate system process (e.g., svchost.exe), and the injected memory is private, executable, and not backed by a file on disk.",
            "data_sources": [
              "Windows Event ID 8 (Sysmon)",
              "Windows Event ID 10 (Sysmon)",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers, Terminal Servers, Domain Controllers",
            "action": [
              "Symbolic: Create a detection rule that triggers on Sysmon Event ID 8 (CreateRemoteThread) where the `SourceImage` is a common productivity application (e.g., Office suite, browser, PDF reader) and the `TargetImage` is a common system process (e.g., svchost.exe, explorer.exe, rundll32.exe), particularly if the `StartModule` field is null or points to a non-standard module.",
              "Statistical: Analyze the frequency of process injection pairs (SourceImage -> TargetImage) across the enterprise. Establish a baseline of common, legitimate injection events (e.g., from security agents or system tools). Flag any injection pairs that are statistically rare (e.g., occurring fewer than 5 times in the last 90 days) or have never been seen before in the environment.",
              "Machine Learning: Utilize a graph-based anomaly detection model. Construct a graph where nodes represent processes and directed edges represent injection events (Sysmon Event ID 8). Enrich nodes with metadata (parent process, user context, image path). Train the model on benign activity to learn normal process interaction graphs and flag new, anomalous edges (injections) that deviate from the learned structural patterns."
            ]
          },
          {
            "description": "A process is created (Windows Event ID 4688) from a file with a non-executable extension (e.g., .txt, .jpg, .dat), and this event correlates with a network file transfer (Zeek files.log) where the file's identified MIME type (e.g., `application/x-dosexec`) contradicts its filename extension.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies, Email Gateways, Network Egress Points, File Servers",
            "action": [
              "Symbolic: Create a SIEM correlation rule that joins Zeek files.log with Windows Event ID 4688 on filename or hash. Trigger an alert when a file transferred with `mime_type` of `application/x-dosexec` has a `filename` extension from a deny-list (e.g., .jpg, .png, .txt, .pdf, .log) and is subsequently executed on an endpoint within a short time window (e.g., 5 minutes).",
              "Statistical: Perform frequency analysis on the file extensions of all executed processes recorded in Event ID 4688 logs. Maintain a dynamic list of the top 95% most common executable extensions. Alert whenever a process is created from a file with an extension that falls outside this common set, as this represents a statistical rarity.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., ARIMA) on the frequency of process executions, grouped by file extension. A sudden, anomalous spike in the execution of a typically non-executed file type (e.g., .iso, .img, .dat) across multiple hosts could indicate a coordinated attack. The model would flag such significant deviations from the established temporal baseline for that extension."
            ]
          },
          {
            "description": "An executable file (.exe, .dll, .ps1) is created (Sysmon Event ID 11) and then immediately executed (Windows Event ID 4688) within a short time window (e.g., < 60 seconds) by the same parent process, where that parent is not a known software installer or updater (e.g., parent is WINWORD.EXE, not setup.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Temporary File Directories (%TEMP%, %APPDATA%)",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a Sysmon Event ID 11 (FileCreate) for an executable file is followed by a Windows Event ID 4688 (ProcessCreate) for the same file path within 1 minute. The rule should verify that the `ProcessGuid` of the creating process in the first event matches the `ParentProcessGuid` in the second event and exclude parent processes on a known installer/updater allow-list (e.g., 'msiexec.exe', 'update.exe').",
              "Statistical: For all observed 'FileCreate -> ProcessCreate' sequences involving the same process GUID, calculate the time delta between the two events. Establish a baseline distribution of these time deltas for all parent processes. Flag sequences where the time delta is in the lowest 5th percentile (indicating automated, immediate execution) and the parent process is not on an allow-list of installers or trusted system processes.",
              "Machine Learning: Use a sequence mining model, such as an LSTM-based autoencoder, to learn normal sequences of endpoint events (file creations, process creations, network connections) that typically follow a file download by a specific application (e.g., Chrome, Outlook). Flag event sequences that deviate significantly from the learned 'normal' post-download behavior, which would include unexpected drop-and-execute patterns from non-installer parent processes."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]