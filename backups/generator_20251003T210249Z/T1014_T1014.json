[
  {
    "information_requirement": "Has the adversary deployed a rootkit to hide their presence and evade defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1014",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A pattern of persistent, low-volume, periodic network connections from an internal host to an external, non-categorized IP address or domain, where connection frequency is high but data volume is low, inconsistent with normal user browsing or data transfer.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DNS Resolvers, Network Security Monitoring (NSM) Sensor Grid",
            "action": [
              "Symbolic: Create a SIEM rule to generate an alert when a DNS query (Zeek dns.log) or network connection (Zeek conn.log) destination matches an IP or domain from an active threat intelligence feed for known rootkit C2 infrastructure.",
              "Statistical: For each internal source IP, group by destination IP and 1-hour time windows in Zeek conn.log. Calculate the count of connections, the sum of `orig_bytes` and `resp_bytes`, and the standard deviation of the time between connections (jitter). Flag destinations where the connection count is in the 95th percentile, total data volume is in the 5th percentile, and jitter is low (e.g., < 10th percentile), indicating automated, periodic beaconing.",
              "Machine Learning: Apply a time series anomaly detection model (e.g., Seasonal-ARIMA) to features aggregated per host per hour: `count(connections)`, `sum(total_bytes)`, `unique_count(destination_ips)`. Train the model on at least 30 days of data to learn normal host-level network patterns and flag hours where the observed pattern significantly deviates from the forecast."
            ]
          },
          {
            "description": "A kernel driver is loaded (Sysmon Event ID 6) that is unsigned, has a signature from an untrusted or revoked publisher, has a low prevalence hash across the enterprise, or has a filename/path that mimics a legitimate system file but is located in a non-standard directory (e.g., `svchost.sys` in `C:\\Users\\Public\\`).",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 6 (Sysmon)",
              "Windows Code Integrity Event IDs 3033, 3063, 3077"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged User Workstations, All Windows Endpoints and Servers",
            "action": [
              "Symbolic: Create a detection rule for any Windows Code Integrity event (ID 3033, 3063, 3077) indicating a driver failed validation. Also, create a rule that alerts when Sysmon Event ID 6 shows a driver loaded where `Signed` is `false` or the `ImageLoaded` path is a non-system directory (e.g., not `\\SystemRoot\\system32\\drivers`) but the filename is a common system driver name.",
              "Statistical: On a daily basis, query all Sysmon Event ID 6 logs to build a prevalence table of `(Signature, SignatureStatus)` pairs and `(Hash, ImageLoaded)` pairs. Alert on any driver load event where the `Signature` or `Hash` has a prevalence of less than 1% or is seen on only a single machine. Additionally, calculate the Levenshtein distance between the loaded driver's filename and a known-good list of Windows drivers; a distance of 1 or 2 indicates potential typosquatting.",
              "Machine Learning: Train a Random Forest or Gradient Boosting classifier using features from Sysmon Event ID 6 to predict malicious driver loads. Use features like `Signed` (boolean), `Signature` (categorical, after one-hot encoding), prevalence of the hash, entropy of the `ImageLoaded` path, and whether the path is a standard system location. Label known-good drivers from a golden image as benign and use threat intelligence for malicious samples."
            ]
          },
          {
            "description": "A process is created via command line (Sysmon Event ID 1 or Windows Event ID 4688) using utilities like `sc.exe`, `bcdedit.exe`, or `PnPUtil.exe` to install a service or driver, particularly when the parent process is not a standard administrative shell or deployment tool (e.g., parent is `winword.exe` or `outlook.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially user workstations and publicly accessible servers.",
            "action": [
              "Symbolic: Write a regex-based SIEM rule to detect command lines (Sysmon EID 1) containing patterns like `sc.exe create`, `bcdedit /set`, or `PnPUtil /add-driver` where the `ParentImage` is not in an allowlist of `['C:\\\\Windows\\\\System32\\\\svchost.exe', 'C:\\\\Windows\\\\System32\\\\mmc.exe', 'C:\\\\Windows\\\\explorer.exe']`.",
              "Statistical: Build a baseline of parent-child process relationships across the enterprise from Sysmon Event ID 1 logs. For each `ParentImage`, create a frequency distribution of its `Image` (child process). Alert when a new parent-child relationship is observed or if a relationship's frequency falls into a rare percentile (e.g., <0.1%), such as `iexplore.exe` spawning `cmd.exe` which then spawns `sc.exe`.",
              "Machine Learning: Vectorize command-line arguments from process creation events using techniques like TF-IDF. Apply a clustering algorithm (e.g., DBSCAN) to these vectors to group common administrative commands. Identify clusters with few members (outliers) or new clusters that appear suddenly across the environment as potential new rootkit installation techniques."
            ]
          },
          {
            "description": "A discrepancy is found where low-level network logs (Zeek conn.log) show an established outbound connection from a host, but a corresponding active network connection cannot be found in high-level endpoint logs (Sysmon Event ID 3) from the same time window, or the process associated with the connection is orphaned (has no parent process).",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4688",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, Network Egress Points",
            "action": [
              "Symbolic: Create a stateful correlation rule that triggers when a new service is created (Windows EID 7045) and the associated service process (Windows EID 4688) initiates an external network connection (Sysmon EID 3 or Zeek conn.log) within 60 seconds to a destination not on an organizational allowlist.",
              "Statistical: Join Zeek conn.log data with Sysmon Event ID 3 data on `(source_ip, source_port, dest_ip, dest_port, timestamp)`. For each host, count the number of connections in Zeek that have no corresponding Sysmon event within a 5-minute window. Establish a baseline for this mismatch count per host and alert when the count exceeds a dynamic threshold (e.g., 3 standard deviations above the mean).",
              "Machine Learning: Model host-based activity as a graph where nodes represent processes (from Sysmon EID 1) and network destinations (from Sysmon EID 3), and edges represent creations or connections. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal clusters of activity. A process that initiates a network connection but is not part of any established community (an outlier) is a strong indicator of a hidden or injected process."
            ]
          },
          {
            "description": "Execution of utilities known to modify boot configuration (`bcdedit.exe`, `bootsect.exe`) or direct write access to a physical disk's raw boot sector, especially when initiated by a non-administrative user or an anomalous process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 9 (Sysmon)",
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System Partitions on all hosts, Boot sectors of physical disks on servers and workstations.",
            "action": [
              "Symbolic: Create a high-priority alert for any process execution (Windows EID 4688 or Sysmon EID 1) of `bootsect.exe` or `fdisk.exe`. Also, alert on any FileCreate event (Sysmon EID 11) or RawAccessRead event (Sysmon EID 9) where the `TargetFilename` or `Device` is `\\\\\\\\.\\\\PhysicalDrive0` and the `Image` is not a known disk management or backup utility.",
              "Statistical: From Sysmon Event ID 9 (RawAccessRead), build a baseline profile of legitimate processes that access raw disk (e.g., backup agents, forensics tools, disk utilities). Calculate the prevalence of each process performing this action. Generate an alert if a process not in the baseline or with a low enterprise-wide prevalence score performs a raw disk read.",
              "Machine Learning: Train a supervised one-class SVM model on process execution events (Sysmon EID 1) that are known to be benign administrative actions. Use features like `User`, `ParentImage`, command-line arguments, and execution hour. Any new process execution that the model flags as a significant outlier from the benign class should be investigated as a potential malicious use of administrative tools."
            ]
          },
          {
            "description": "A localized and statistically significant increase in application crashes (Windows Event ID 1000/1001) or service failures (Windows Event ID 7031/7034), or the targeted termination (Sysmon Event ID 5) of specific security tool processes (e.g., EDR agent, antivirus service) on one or more hosts.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Windows Event ID 5 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially hosts with critical security agents installed.",
            "action": [
              "Symbolic: Create a critical alert that triggers immediately upon detection of a Process Terminated event (Sysmon EID 5) where the `Image` of the terminated process matches a predefined list of essential security agents (e.g., `MsMpEng.exe`, `csagent.exe`, `cb.exe`, `taniumclient.exe`).",
              "Statistical: For each host, ingest application crash (EID 1000) and service failure (EID 7031, 7034) events into a time series database. Establish an hourly baseline (mean and standard deviation) for the count of these events. Generate an alert if the count in any given hour exceeds a dynamic threshold, such as 3 standard deviations above the 28-day rolling average for that specific host and hour-of-day.",
              "Machine Learning: Use an Isolation Forest algorithm on feature vectors created hourly for each host. The vector should contain the counts of key failure events: `[count(EID 1000), count(EID 7031), count(EID 7034), count(security_agent_terminations)]`. This unsupervised model is effective at detecting anomalous combinations of these events that signify system instability caused by a rootkit, even if no single metric crosses a static threshold."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]