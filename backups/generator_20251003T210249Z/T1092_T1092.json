[
  {
    "information_requirement": "Is the adversary using removable media for command and control?",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1092",
        "name": "Communication Through Removable Media",
        "evidence": [
          {
            "description": "A file written to a removable storage device has a filename or file hash that matches a known-bad indicator from threat intelligence feeds associated with C2 frameworks that use removable media.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, servers with USB ports, air-gapped systems, and high-security network segments.",
            "action": [
              "Symbolic: 1. Ingest a threat intelligence feed of file hashes and filenames associated with C2 via removable media (e.g., known staging filenames like 'tasks.dat'). 2. Monitor for file creation events on removable media (Sysmon Event ID 11 or Windows Event ID 4663 with Object Type 'File' and a drive letter corresponding to removable media). 3. Compare the file hash and filename from the event against the ingested threat intelligence feed. 4. Trigger a high-severity alert upon any match.",
              "Statistical: 1. For all file creation events on removable media, aggregate filenames over a 30-day rolling window to build a frequency distribution model for the enterprise. 2. For each new file write event, calculate the frequency of its filename within the baseline model. 3. Trigger a medium-severity alert for analyst review if a filename's frequency falls into the bottom 1st percentile, indicating it is exceptionally rare.",
              "Machine Learning: 1. Develop and train a supervised classification model (e.g., Random Forest) on historical file write events to removable media, labeled as malicious or benign. 2. Engineer features for each event, including: filename entropy, filename length, file extension, parent process name, and a binary feature indicating if the file hash is publicly known. 3. Deploy the model to score new file write events in real-time. 4. Generate an alert when an event's predicted probability of being malicious exceeds a calibrated threshold (e.g., 0.90)."
            ]
          },
          {
            "description": "A file with an executable extension (e.g., .exe, .dll, .ps1, .vbs) or with the 'hidden' attribute is written to a removable drive by a non-standard parent process (e.g., a web browser, office productivity application).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 11",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoint devices with removable media access, administrative jump boxes, and developer workstations.",
            "action": [
              "Symbolic: 1. Define a list of high-risk file extensions (e.g., '.exe', '.dll', '.ps1', '.vbs', '.bat', '.lnk') and a whitelist of common processes that legitimately write to USB drives (e.g., 'explorer.exe', 'robocopy.exe'). 2. Create a rule to monitor for file creation events (Sysmon Event ID 11) on removable media. 3. Trigger an alert if the created file's extension is on the high-risk list AND the parent process name (from correlated Sysmon Event ID 1) is NOT on the whitelist.",
              "Statistical: 1. Over a 30-day period, build a statistical baseline of the file extensions written to removable media by each unique process name across the enterprise. 2. For each new file write event, calculate the conditional probability of that extension being written by that specific process, P(extension|process). 3. Trigger an alert if the calculated probability is below a low threshold (e.g., P < 0.01), indicating an anomalous process-to-file-type interaction.",
              "Machine Learning: 1. Continuously collect file creation events on removable media. 2. For each event, create a feature vector including: a categorical representation of the parent process name, a categorical representation of the file extension, and binary flags for file attributes (e.g., is_hidden, is_system). 3. Apply a density-based clustering algorithm (e.g., DBSCAN) to these feature vectors. 4. Automatically flag events that are marked as noise or belong to very small, sparse clusters for security analysis, as they represent rare combinations of process, extension, and attributes."
            ]
          },
          {
            "description": "A process reads a file from a removable drive and, within a short time window, initiates an outbound network connection to an external IP address, potentially exfiltrating data or receiving commands.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-connected workstations with USB access, network egress points (firewalls, proxies), and DNS servers.",
            "action": [
              "Symbolic: 1. Monitor for file read events from removable media (Windows Event ID 4663 with AccessMask containing 'ReadData'). 2. Within a 5-minute window following a read event, look for a network connection event (Sysmon Event ID 3 or Zeek conn.log) originating from the same Process GUID/ID. 3. Correlate the destination IP address or domain name with a C2 threat intelligence feed. 4. Trigger a high-severity alert if the destination is a known-malicious C2 server.",
              "Statistical: 1. For each process that reads from removable media, establish a baseline of its typical outbound network behavior (e.g., average bytes sent, destination port distribution). 2. Following a file read from removable media, monitor the subsequent network connections from that process. 3. Trigger an alert if the total bytes sent in the subsequent 10 minutes exceeds the 95th percentile of the process's historical baseline, or if it connects to a destination port it has rarely or never used before.",
              "Machine Learning: 1. Isolate network connection logs (Zeek conn.log, Sysmon Event ID 3) for processes that have recently read from removable media. 2. For each process, analyze the time series of its connection events by calculating the time differences between consecutive connections to the same destination. 3. Apply a Fast Fourier Transform (FFT) or autocorrelation to the time-delta series to detect strong periodic signals (beaconing). 4. Generate an alert for processes exhibiting highly regular, periodic network traffic after interacting with a removable drive."
            ]
          },
          {
            "description": "A single process performs mass file read operations from local user or system directories and subsequently writes a single, compressed or high-entropy file to a removable drive, indicative of data collection and staging for exfiltration.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers, database servers, user workstations containing sensitive project data, and developer workstations with source code access.",
            "action": [
              "Symbolic: 1. Define a threshold for mass file access (e.g., >500 unique file read events from 'C:\\Users\\*' by a single Process ID within 5 minutes, based on Windows Event ID 4663). 2. Create a rule that triggers if this threshold is met AND is followed within the same 5-minute window by a file creation event (Sysmon Event ID 11) from the same Process ID to a removable drive with an archive extension (e.g., '.zip', '.rar', '.7z'). 3. Trigger a high-severity alert.",
              "Statistical: 1. For all files written to removable media (Sysmon Event ID 11), calculate the Shannon entropy of the filename. 2. Establish a baseline distribution of filename entropy scores across the enterprise. 3. Trigger an alert for files written with an entropy score exceeding the 98th percentile, as high entropy can indicate randomized names used by malware to evade simple signature-based detection.",
              "Machine Learning: 1. Model process behavior as a feature vector over a time window (e.g., 1 minute) containing: count of local file reads, count of removable media writes, and count of network connections. 2. Train an autoencoder neural network on these vectors from a baseline period of normal activity. 3. In production, feed new process activity vectors into the trained autoencoder and measure the reconstruction error. 4. Generate an alert when the reconstruction error for a process's activity sequence is anomalously high, indicating its behavior (e.g., mass read followed by single write) is not typical."
            ]
          },
          {
            "description": "A process is executed where the process image path is located on a removable drive, especially if the executable is not digitally signed or is spawned by an unusual parent process (e.g., 'svchost.exe').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoint devices, particularly those used by privileged users or in physically unsecured areas.",
            "action": [
              "Symbolic: 1. Monitor for process creation events (Sysmon Event ID 1). 2. Create a rule that triggers if the 'Image' field points to a path on a removable drive (e.g., 'E:\\*', 'F:\\*'). 3. Escalate the alert severity to high if the 'Signed' field is 'false' or if the file hash is not found in trusted intelligence sources.",
              "Statistical: 1. Over a 90-day baseline, profile all parent-child process relationships observed in the environment (e.g., 'explorer.exe' -> 'cmd.exe'). 2. Calculate the frequency of each unique parent-child pair where the child process image is on a removable drive. 3. Trigger an alert when a new parent-child relationship is observed that is either entirely novel or falls below a low frequency threshold (e.g., seen less than 5 times enterprise-wide).",
              "Machine Learning: 1. Train a supervised classification model (e.g., Logistic Regression) to predict the maliciousness of a process execution from removable media. 2. Engineer features for each event from Sysmon Event ID 1, including: parent process name, the 'Signed' field status, the command line arguments, the integrity level, and the entropy of the executable's filename. 3. Deploy the model to score each execution from removable media. 4. Trigger an alert when the model's output probability score exceeds a defined threshold (e.g., > 0.85)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]