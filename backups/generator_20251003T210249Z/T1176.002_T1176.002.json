[
  {
    "information_requirement": "Is the adversary maintaining persistence through compromised IDE extensions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1176.002",
        "name": "IDE Extensions",
        "evidence": [
          {
            "description": "An IDE extension file's hash matches a known malicious signature, or a network connection initiated by an IDE process communicates with a destination on a threat intelligence blocklist.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 11 (FileCreate)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, network egress points, threat intelligence platforms.",
            "action": [
              "Symbolic Logic: Continuously monitor file creation events (Windows Event ID 4663, Sysmon Event ID 11) in common IDE extension directories (e.g., `%USERPROFILE%\\.vscode\\extensions`, `%APPDATA%\\JetBrains\\<IDE>\\plugins`, `%LOCALAPPDATA%\\Eclipse\\p2\\`). Upon detection, hash the file and compare it against a threat intelligence feed of known malicious file hashes. Concurrently, join network connection logs (Zeek conn.log) with DNS query logs (Zeek dns.log) and cross-reference destination IPs (from `id.resp_h` in conn.log) and domains (from `query` in dns.log) against a CTI feed of known malicious indicators. Alert on any match.",
              "Statistical Method: For each destination domain queried by an IDE process (identified by correlating Zeek dns.log with process logs like Sysmon Event ID 1), calculate its Shannon entropy and its rarity across the enterprise over a 30-day rolling window. Flag domains with high entropy (e.g., > 3.5 bits/character) or those falling in the 99th percentile for rarity (least frequently accessed) for analyst review as potential DGA or private C2 infrastructure.",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) trained on features from network connections originating from IDE processes. Features should include connection duration (`duration`), bytes sent/received (`orig_bytes`, `resp_bytes`), protocol (`proto`), connection state (`conn_state`), destination IP/domain reputation, domain age, and JA3/JA3S hashes (from Zeek's ssl.log). The model will classify each connection as 'benign' or 'malicious C2'. Continuously score live traffic and alert on connections classified as malicious with a high confidence score (e.g., > 0.90)."
            ]
          },
          {
            "description": "A known IDE process (e.g., code.exe, idea64.exe, eclipse.exe) spawns a child process containing suspicious command-line arguments, such as obfuscated scripts, network utilities, or flags to hide execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (ProcessCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, virtual desktop infrastructure (VDI) used for development, build servers.",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers on process creation events (Windows Event ID 4688, Sysmon Event ID 1) where the `ParentProcessName` is a known IDE executable and the `CommandLine` or `ProcessCommandLine` contains high-risk patterns via regex, such as `powershell -enc`, `-w hidden`, `IEX`, `Invoke-Expression`, `curl`, `wget`, or `nc.exe`.",
              "Statistical Method: For each IDE parent process, establish a historical baseline of normal child process names and their command-line argument structures over a 30-day window. Use a statistical measure like z-score to identify anomalous parent-child process relationships (e.g., a z-score > 3 for the rarity of `svchost.exe` being spawned by `code.exe`). Concurrently, calculate the entropy of the command-line arguments; flag arguments with entropy scores exceeding the 95th percentile of the baseline.",
              "Machine Learning: Train an unsupervised anomaly detection model, such as an isolation forest or a variational autoencoder, on vectorized command-line arguments from processes spawned by IDEs, using TF-IDF or word embeddings for vectorization. The model learns a representation of 'normal' command-line activity. Flag any new process creation event whose command-line argument vector yields an anomaly score exceeding a dynamically set threshold (e.g., the 99th percentile of scores from the training data)."
            ]
          },
          {
            "description": "An IDE extension is installed from a network source not on an approved allowlist, or extension files are written to disk by a process not associated with the IDE's official installation or update mechanism.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 11 (FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, network egress points, internal software repositories.",
            "action": [
              "Symbolic Logic: Maintain an allowlist of approved IDE marketplace domains (e.g., `marketplace.visualstudio.com`, `plugins.jetbrains.com`, `open-vsx.org`). Correlate network logs (Zeek conn.log) with file creation events (Sysmon Event ID 11) in extension directories. Alert if a file is written to an extension directory within minutes of a download from a non-allowlisted domain. Separately, alert if a file write event in an extension directory has a parent process (identified via Sysmon Event ID 1) that is not a recognized IDE or package manager (e.g., `cmd.exe`, `powershell.exe`, `mshta.exe`).",
              "Statistical Method: Profile the source domains for all network connections that result in file writes to IDE extension directories. For each source domain, calculate its prevalence (number of unique hosts downloading from it) across the enterprise over a 90-day period. Flag downloads originating from domains in the bottom 5th percentile of prevalence (i.e., very rare sources) for analyst review, as this may indicate sideloading from an unusual source.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., Prophet or an LSTM-based model) to monitor the volume of data (in bytes) downloaded to extension directories from both known and unknown repositories, aggregated hourly. A sudden, anomalous spike in the data volume that deviates significantly from the model's forecast (including seasonality) could indicate a coordinated supply chain attack. Alert when a new observation falls outside the 99% confidence interval."
            ]
          },
          {
            "description": "An IDE process or one of its children accesses sensitive files or directories outside the scope of typical development activities, such as credential stores, SSH keys, or system configuration files.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 11 (FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, servers hosting sensitive user profiles (e.g., file servers, domain controllers), code repositories.",
            "action": [
              "Symbolic Logic: Create a high-fidelity rule that alerts when a process whose ancestry traces back to a known IDE (e.g., `code.exe`) performs file access operations (monitored via Sysmon Event ID 11) on sensitive, predefined target paths. These paths must include `%USERPROFILE%\\.ssh\\`, `%USERPROFILE%\\.aws\\credentials`, `%USERPROFILE%\\.gcp\\`, browser credential databases (e.g., `AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data`), and system directories like `C:\\Windows\\System32`.",
              "Statistical Method: For each user, profile the set of parent directories accessed by their IDE processes during a 30-day baseline period to establish a 'normal project scope'. For each new file access event, calculate the Jaccard distance between the new file's parent directory path and the user's established baseline set of directories. An unusually high distance score (e.g., > 0.8, indicating little to no overlap) suggests the IDE is accessing files far outside its normal scope and should be flagged.",
              "Machine Learning: Construct a heterogeneous graph where nodes represent processes, files, and network destinations, and edges represent interactions (e.g., process-spawn-process, process-access-file). Use graph embedding techniques (e.g., node2vec) combined with a clustering algorithm (e.g., DBSCAN) to identify normal clusters of development activity. Flag nodes or edges that are classified as noise/outliers, as they represent anomalous interactions, such as an IDE process suddenly accessing a credential file."
            ]
          },
          {
            "description": "A network connection from an IDE process exhibits a periodic, low-variance 'heartbeat' pattern indicative of C2 beaconing, or the total volume of data egress over a single connection or time period significantly exceeds established baselines.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 3 (NetworkConnect)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, network egress points (firewalls, proxies), DNS servers.",
            "action": [
              "Symbolic Logic: Correlate process logs (Sysmon Event ID 1) with network connection logs (Zeek conn.log, Sysmon Event ID 3) to attribute all network activity to specific IDE processes. Create a rule to alert on any connection from an IDE process to a destination IP/domain on a threat intelligence blocklist. Additionally, detect potential DNS tunneling by flagging events where the `service` field in Zeek conn.log is `dns`, but the destination port (`id.resp_p`) is not 53.",
              "Statistical Method: For each source-destination IP pair originating from an IDE process, group connections and calculate the standard deviation of the time delta between consecutive connection start times. A very low standard deviation (e.g., < 1.0 second over 5+ connections) indicates a fixed-interval beacon and should be alerted. Separately, calculate the 99th percentile of total bytes sent (`orig_bytes` in conn.log) for each user's IDE processes over a 30-day baseline. Flag any new connection where the byte count exceeds this threshold.",
              "Machine Learning: Apply a time-series decomposition model (e.g., Seasonal-Trend-Loess) to network traffic data (e.g., total bytes sent, connection counts) originating from IDE processes, aggregated per host per minute. The model separates the time series into trend, seasonal, and residual components. A sudden, high-magnitude value in the residual component indicates an anomaly not explained by normal patterns. Alert when the residual value exceeds a predefined threshold (e.g., 3 standard deviations from the residual's mean)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]