[
  {
    "information_requirement": "Is an adversary using encrypted or encoded files to evade defenses and conceal malicious activity? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.013",
        "name": "Encrypted-Encoded File",
        "evidence": [
          {
            "description": "A file transferred over the network or created on a host has a hash (MD5, SHA1, SHA256) matching a known malicious file, particularly those associated with packers or droppers that use encryption.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways, web proxies, email servers, user workstations, file servers, cloud storage synchronization folders",
            "action": [
              "Implement a multi-tiered detection strategy for known malicious files. Symbolic: For every file observed in Zeek files.log or from endpoint file creation events (Windows Event ID 4663), calculate its hash and match against an aggregated threat intelligence database of known malicious hashes; generate a high-severity alert on a match. Statistical: Track the rate of unique malicious hash detections per hour. Establish a 7-day baseline using a moving average. Alert if the current rate exceeds 3 standard deviations from the baseline, which may indicate a targeted campaign. Machine Learning: Implement and monitor a file reputation classifier using features such as file source (domain, IP), MIME type, size, and threat intelligence context. A high probability score from the model, even without a direct hash match, should trigger an investigation."
            ]
          },
          {
            "description": "A process is created with command-line arguments or script content that explicitly calls a decoding utility (e.g., 'certutil -decode', 'openssl enc'), a common decoding function (e.g., PowerShell's '[System.Convert]::FromBase64String'), or executes a self-extracting archive from a non-standard location (e.g., %APPDATA%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, application servers, domain controllers, developer environments",
            "action": [
              "Deploy a multi-faceted approach to detect decoding activity. Symbolic: Using Windows Event ID 4688 (process creation) and 4104 (PowerShell script blocks), apply a library of regular expressions to command-line arguments and script content to detect explicit calls to decoding utilities and functions; alert on any match. Statistical: For each parent-child process relationship (e.g., winword.exe -> powershell.exe), establish a baseline of command-line length and Shannon entropy. Calculate these metrics for each new process execution. Flag any execution where the command-line length or entropy exceeds the 98th percentile for that specific process relationship. Machine Learning: Train a supervised classification model (e.g., logistic regression using n-gram features from command lines) on a labeled dataset of benign and malicious commands. Use the model to score new command lines from Event ID 4688, prioritizing those classified as suspicious for analyst review."
            ]
          },
          {
            "description": "A file is created or transferred with a deceptive filename containing multiple extensions where the final extension is executable or a script (e.g., 'invoice.pdf.exe', 'document.txt.js'), or a text-based file contains a non-standard or manipulated Byte Order Mark (BOM) sequence to obfuscate its content.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network shares, user home directories (%USERPROFILE%), email attachment directories, web download folders, removable media",
            "action": [
              "Detect deceptive filenames and content through a layered analytic process. Symbolic: From Zeek files.log and Windows Event ID 4663, use regular expressions (e.g., /.*\\.(pdf|docx|txt|jpg)\\.(exe|js|vbs|ps1)$/i) to detect and alert on filenames with deceptive double extensions. Concurrently, scan the first 4 bytes of text-based files for non-standard BOMs. Statistical: Maintain a frequency distribution of all observed file extension patterns (e.g., '.pdf.exe'). Calculate a rarity score for each pattern and flag any filename pattern that falls below a low-frequency threshold (e.g., seen less than 5 times in 90 days across the enterprise). Machine Learning: Develop a time series anomaly detection model (e.g., ARIMA or Prophet) to monitor the daily count of files with suspicious double extensions. A sudden spike deviating significantly from the forecast indicates a potential campaign and should trigger a broader investigation."
            ]
          },
          {
            "description": "A file created or transferred exhibits a Shannon entropy value significantly higher than the established baseline for its file type (e.g., entropy > 7.5 for a .txt or .html file), or is a password-protected archive, and resides in a high-risk directory such as a user's Downloads, Temp, or AppData folder.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile temporary directories (e.g., %TEMP%, %LOCALAPPDATA%), web browser cache and download folders, network egress points, email quarantine systems",
            "action": [
              "Identify high-entropy and protected files using a structured detection model. Symbolic: For files identified as archives (e.g., .zip, .rar, .7z) in Zeek files.log or via file inspection, check for a 'password protected' flag. Alert when a password-protected archive is downloaded from an external source with low reputation. Statistical: For each file observed via Windows Event ID 4663 or Zeek files.log, calculate its Shannon entropy. Maintain a baseline distribution (mean, standard deviation) of entropy values for common file extensions (.txt, .csv, .ps1, etc.). Flag any file whose entropy is more than 3 standard deviations above the mean for its type. Machine Learning: Train an unsupervised anomaly detection model, such as an Isolation Forest, on file metadata features (extension, size, entropy, source IP reputation, destination path). Use the model to assign an anomaly score to new files, prioritizing high-scoring files for review as potential obfuscated payloads."
            ]
          },
          {
            "description": "An encoded string (e.g., Base64, Hex) is observed in a process command line, script log, or network traffic (e.g., HTTP POST body, DNS TXT query) whose length or character distribution significantly deviates from the established baseline for that specific context.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Name System (DNS) infrastructure, web proxies and gateways, user workstations, application servers, API gateways",
            "action": [
              "Detect anomalous encoded strings across multiple data sources. Symbolic: Using regular expressions, scan Windows Event ID 4688 command lines, PowerShell logs (Event ID 4104), Zeek http.log POST bodies, and Zeek dns.log query fields for patterns matching Base64 or hexadecimal encoding; alert if an encoded string is found in an unexpected context or exceeds a static length (e.g., >1024 chars). Statistical: For each context (e.g., PowerShell command line, DNS TXT query), calculate the length of any detected encoded string. Establish a baseline distribution of these lengths and trigger an alert if a new string's length exceeds the 99th percentile for its context. Also, monitor the character frequency distribution and alert on high entropy. Machine Learning: Implement a time series forecasting model (e.g., Prophet) for the volume of encoded data observed per hour in specific network channels (e.g., DNS TXT queries). An observation that falls significantly outside the model's prediction interval should be flagged as a potential C2 or exfiltration channel."
            ]
          },
          {
            "description": "A sequence of correlated events occurs within a short time frame (<5 minutes): 1) A process (e.g., from an Office application) creates or reads a file with high entropy. 2) The same process or its child executes a command containing a decoding function. 3) The process or its child creates a new executable file and/or initiates an outbound network connection to a new or low-reputation IP address.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, critical servers (e.g., Domain Controllers, database servers), network egress points, virtual desktop infrastructure (VDI) environments",
            "action": [
              "Detect malicious sequences by correlating events across endpoint and network logs. Symbolic: Create a SIEM correlation rule that triggers on a specific sequence: [Event A: Windows Event ID 4663 (File Create/Write) with high entropy] by Process P1, followed within 60 seconds by [Event B: Windows Event ID 4688 (Process Create) by P1 or child P2 with decoding keywords in command line], followed within 60 seconds by [Event C: Zeek conn.log showing outbound connection from P2 to a low-reputation IP]. Statistical: Develop a risk scoring model for process sessions. Assign points for suspicious event chains (e.g., Word spawns PowerShell -> +10, PowerShell writes high-entropy file -> +15, PowerShell connects to new external IP -> +20). A cumulative session score exceeding a statistically determined threshold (e.g., the 99.5th percentile of all session scores) triggers an alert. Machine Learning: Use a graph-based analysis model where nodes represent processes, files, and network connections. Apply a trained graph neural network (GNN) or other graph-based anomaly detection algorithm to identify subgraphs that match the structure of known attack sequences in near-real-time."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]