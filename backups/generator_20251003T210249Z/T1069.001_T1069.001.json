[
  {
    "information_requirement": "Is the adversary performing host discovery to identify local groups and permissions?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1069.001",
        "name": "Local Groups",
        "evidence": [
          {
            "description": "Execution of a process with a file hash (e.g., SHA256) matching a known-malicious signature for tools associated with reconnaissance, such as components of PowerSploit, BloodHound, or other post-exploitation frameworks.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations, User Endpoints",
            "action": [
              "Symbolic: Query process creation logs (Windows Event ID 4688) for all executed process hashes. Compare each hash against a curated list of known-malicious hashes from threat intelligence feeds. Generate a critical alert for any direct match.",
              "Statistical: For processes not matching known-bad hashes, calculate the prevalence of each process hash across the enterprise. Flag hashes that appear on a very small number of endpoints (e.g., fewer than 5 or below the 1st percentile of prevalence), as this indicates non-standard software that warrants investigation.",
              "Machine Learning: Apply a pre-trained file hash reputation model using features like hash prevalence, signing certificate information, and first-seen/last-seen timestamps. Use a classification model (e.g., Random Forest) to score and prioritize alerts for unknown or rare hashes that are not signed by a trusted publisher."
            ]
          },
          {
            "description": "Execution of built-in Windows utilities, such as `net.exe`, `net1.exe`, or `whoami.exe`, with command-line arguments used for local group enumeration (e.g., `net localgroup`, `net group`, `whoami /groups`), especially when initiated by an anomalous parent process like `winword.exe` or `outlook.exe`.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations, User Endpoints",
            "action": [
              "Symbolic: Create a detection rule that searches process command-line logs (Windows Event ID 4688) for the exact strings 'net localgroup', 'net group', 'net1 localgroup', and 'whoami /groups'. Alert on any execution by a non-administrator account or if the parent process is not `cmd.exe` or `powershell.exe`.",
              "Statistical: For each user, establish a baseline of the frequency of these enumeration commands over a 30-day period. Calculate the mean and standard deviation ($$ \\mu $$, $$ \\sigma $$). Generate a medium-priority alert if a user's daily command count exceeds a dynamic threshold, such as $$ \\mu + 3\\sigma $$, indicating an abnormal spike in activity.",
              "Machine Learning: Use a sequence analysis model (e.g., a Hidden Markov Model or LSTM) to analyze the sequence of commands executed by a user in a session. Train the model on normal administrative and user behavior. Flag sessions where local group enumeration commands appear in a sequence that is statistically unlikely for that user's role, such as following a suspicious download or being surrounded by other discovery commands."
            ]
          },
          {
            "description": "Execution of a PowerShell script block, either in plaintext or obfuscated, containing cmdlets (`Get-LocalGroup`, `Get-LocalGroupMember`) or .NET/ADSI type accelerators (`[adsi]`, `[adsisearcher]`) used to query local group membership.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations, User Endpoints",
            "action": [
              "Symbolic: Scan PowerShell script block logs (Windows Event ID 4104) using regular expressions for keywords like `Get-LocalGroup`, `Get-LocalGroupMember`, and `[adsi]`. Create an allowlist of known, legitimate administrative script hashes. Alert on any execution of these commands that do not originate from an allowlisted script.",
              "Statistical: Calculate the Shannon entropy of each script block. Establish a baseline entropy score for legitimate administrative scripts. Alert on script blocks containing enumeration keywords that also have an unusually high entropy score (e.g., above the 95th percentile), as this often indicates obfuscation or encoding used to hide malicious code.",
              "Machine Learning: Train a text classification model (e.g., using a TF-IDF vectorizer and a Naive Bayes classifier) on a labeled dataset of benign and malicious PowerShell scripts. Apply the model to classify all new script blocks in real-time. Prioritize alerts for scripts that are classified as malicious and contain local group enumeration logic."
            ]
          },
          {
            "description": "A single source user account or host remotely enumerating local groups across a large number of unique destination hosts in a short time frame, indicating automated or scripted discovery.",
            "data_sources": [
              "Windows Event ID 4798",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized SIEM/Log Aggregator, Network Egress/Ingress Points, Internal Network Segments",
            "action": [
              "Symbolic: Create a rule that triggers if a single user account generates a 'Local Group Enumeration' event (Windows Event ID 4798) on more than a fixed number of hosts (e.g., 10) within one hour. This provides a simple, high-fidelity tripwire for brute-force discovery.",
              "Statistical: For each source user/host, aggregate enumeration events (from Event ID 4798 or command-line logs) over a rolling 1-hour window. Calculate the 99th percentile for the number of distinct hosts enumerated by any user/host in a typical hour. Alert whenever any user/host exceeds this dynamic threshold, indicating statistically rare 'fan-out' behavior.",
              "Machine Learning: Model user-to-host access patterns as a graph. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal clusters of activity (e.g., a server admin team accessing their assigned servers). Use an anomaly detection algorithm on the graph to flag a user who suddenly begins enumerating hosts far outside their normal community, indicating potential lateral movement and discovery."
            ]
          },
          {
            "description": "Observed temporal clustering of local group enumeration activity with other discovery techniques (e.g., T1087 - Account Discovery, T1046 - Network Service Scanning) originating from the same source host within a narrow time window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4798",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized SIEM/Log Aggregator, Domain Controllers, DNS Servers, Network Egress/Ingress Points",
            "action": [
              "Symbolic: Create a correlation rule that fires when an event for local group enumeration (e.g., `net localgroup` in Event ID 4688) from a source host is followed within 15 minutes by an event for network share discovery (e.g., `net view` in Event ID 4688) from the same host. This detects a common two-step reconnaissance pattern.",
              "Statistical: Create a risk scoring system. Assign points for different discovery activities observed from a single source host within a 1-hour window (e.g., +5 for local group enumeration, +3 for high ratio of unique destination ports in Zeek conn.log, +4 for remote system discovery). Alert when a host's total risk score exceeds a statistically derived threshold (e.g., 98th percentile of all host scores).",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., an autoencoder) on a feature vector representing a host's activity. The vector should include metrics like: count of group enumeration commands, count of network connections, number of unique ports scanned, and DNS query entropy. Train the model on normal host behavior to learn its 'rhythm' and alert when the combination of activities significantly deviates from the learned pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]