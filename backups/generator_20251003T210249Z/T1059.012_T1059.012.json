[
  {
    "information_requirement": "Has the adversary executed commands via a hypervisor command-line interface? (TA0002 - Execution)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.012",
        "name": "Hypervisor CLI",
        "evidence": [
          {
            "description": "Execution of a process or command involving a hypervisor CLI tool (e.g., esxcli, vim-cmd, PowerCLI) where the process file hash or command-line arguments match a known Indicator of Compromise (IOC).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "ESXi shell.log",
              "ESXi audit.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Hypervisor management servers (e.g., vCenter), ESXi hosts, designated administrator workstations, and jump boxes with hypervisor management tools installed.",
            "action": [
              "Symbolic Logic: In a SIEM, continuously query process creation logs (Windows Event ID 4688, Sysmon Event ID 1) and hypervisor shell logs (ESXi shell.log) for executions of `esxcli`, `vim-cmd`, or PowerShell processes with the `PowerCLI` module. Match the file hash of the executed process and any child processes against a threat intelligence feed of known malware hashes. Generate a critical alert on any match.",
              "Statistical Method: For each hypervisor CLI tool, establish a baseline of command argument frequency across the environment. Alert on the execution of any command whose full argument string has a historical frequency in the bottom 5th percentile (i.e., is exceptionally rare), as this may indicate a newly introduced malicious command not yet in threat intelligence feeds.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on a labeled dataset of benign and malicious hypervisor CLI command strings. Engineer features from the command line, such as n-grams, string length, presence of special characters, and keyword counts. Deploy the model to classify new command executions in real-time; a 'malicious' classification with a confidence score >0.9 should trigger an automated host isolation workflow."
            ]
          },
          {
            "description": "Execution of a hypervisor CLI command containing keywords or parameters associated with destructive, defense evasion, or reconnaissance actions (e.g., 'vm process kill', 'snapshot.removeall', 'firewall set --enabled false'), not correlated with a valid change ticket.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "ESXi shell.log",
              "ESXi audit.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Hypervisor management servers (e.g., vCenter), ESXi hosts, designated administrator workstations, and jump boxes with hypervisor management tools installed.",
            "action": [
              "Symbolic Logic: Create and apply a detection rule that searches process command-line arguments and hypervisor shell logs for a watchlist of high-risk strings. Examples include: `vm process kill`, `snapshot.removeall`, `firewall set --enabled false`, `storagecore claimrule remove`, `system syslog config set --loghost=`. Correlate any matches with change management system data via API; if no corresponding ticket exists, escalate the alert.",
              "Statistical Method: For each high-risk command pattern, establish a per-user and per-host baseline for execution frequency over a 30-day rolling window. Alert if a user executes a high-risk command at a rate exceeding 3 standard deviations above their personal mean, or if a specific host sees a cluster of such commands from multiple users, suggesting a compromised management tool.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on command execution events. Feature vectors should include the user, source host, command keywords (vectorized), and time of day. Identify clusters representing normal administrative behavior (e.g., patching, VM provisioning). Flag any command execution that is marked as a 'noise' point (i.e., does not belong to any normal cluster) as an anomaly for analyst review."
            ]
          },
          {
            "description": "A sequence of hypervisor CLI commands from a single source user or host within a short time window (e.g., under 15 minutes) that mirrors a known attack pattern, such as discovery followed by persistence or impact.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "ESXi shell.log",
              "ESXi audit.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Hypervisor management servers (e.g., vCenter), ESXi hosts, designated administrator workstations, and jump boxes with hypervisor management tools installed.",
            "action": [
              "Symbolic Logic: Using a stateful detection engine, define and search for specific, ordered command sequences. Example 1 (Ransomware Prep): `vim-cmd vmsvc/getallvms` followed by a loop of `esxcli vm process kill` commands within 10 minutes. Example 2 (Persistence): `esxcli system security anondisable` followed by `esxcli system settings advanced set -o /UserVars/ESXiShellTimeOut -i 0`. Alert on a completed sequence.",
              "Statistical Method: Calculate the Shannon entropy of the command names (e.g., `getallvms`, `process kill`) executed by a user in a 5-minute sliding window. Alert on two conditions: 1) a sharp increase in entropy, indicating exploratory behavior (discovery), followed by 2) a sharp decrease in entropy, indicating repetitive, scripted action (impact/destruction). This detects the transition from reconnaissance to attack.",
              "Machine Learning: Train a sequence analysis model, such as a Recurrent Neural Network (RNN) with LSTM cells, on streams of command-line arguments from administrative sessions. The model learns to predict the next command in a benign sequence. An alert is generated when the executed command has a very low probability according to the model's prediction, indicating a deviation from normal administrative workflows."
            ]
          },
          {
            "description": "A hypervisor CLI command is executed by a non-authorized user, from a non-standard source IP/hostname, or at an anomalous time, where the context deviates from established baselines.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4624",
              "Active Directory Logs",
              "ESXi shell.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Hypervisor management servers (e.g., vCenter), ESXi hosts, designated administrator workstations, domain controllers, and jump boxes.",
            "action": [
              "Symbolic Logic: Join process creation events (Windows Event ID 4688) with authentication logs from Active Directory. For any process involving `esxcli`, `vim-cmd`, or `PowerCLI`, verify that the executing user's account is a member of the 'VMware Administrators' AD group. Alert if the user is not a member of this authorized group.",
              "Statistical Method: For each authorized administrator, build a profile of their typical source IP subnets, login hours, and session durations using Windows Event ID 4624. Alert when a hypervisor CLI command is executed from an IP outside their typical subnets (e.g., a different country) or at a time that falls within the bottom 1st percentile of their activity distribution (e.g., 3 AM for a 9-to-5 admin).",
              "Machine Learning: Employ an anomaly detection model like an Isolation Forest on a feature set including: User, Source IP (encoded), Time of Day (cyclical encoding), Day of Week, Parent Process Name, and Command Line Length. The model learns the multi-dimensional boundary of normal administrative activity. Any execution event that the model flags with a high anomaly score is prioritized for immediate investigation."
            ]
          },
          {
            "description": "An outbound network connection from a hypervisor's management interface to a destination IP address or domain that is either a known malicious C2 indicator or is anomalous based on historical traffic patterns.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors (e.g., Zeek) monitoring traffic to/from hypervisor management interfaces, core network switches, and internet gateways.",
            "action": [
              "Symbolic Logic: In `Zeek conn.log`, filter for connections where `id.orig_h` is a hypervisor management IP and `id.resp_h` is not on an internal RFC1918 network. Match the destination IP (`id.resp_h`), DNS query (`dns.log:query`), or TLS fingerprint (`ssl.log:ja3`) against a threat intelligence feed of known malicious indicators. Generate a critical alert on any match.",
              "Statistical Method: For each hypervisor, create a 30-day baseline of all unique `(destination_ip, destination_port, protocol)` tuples from `Zeek conn.log`. Alert when a connection occurs to a tuple that has never been seen before ('first-seen' connection). Additionally, alert if the total daily outbound data volume (`orig_bytes`) for a hypervisor exceeds 3 standard deviations above its historical daily average.",
              "Machine Learning: Model the hypervisor communication network as a graph, where nodes are IPs and edges are connections. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal communication clusters (e.g., 'vCenter-ESXi-Storage' cluster, 'ESXi-NTP' cluster). An alert is triggered when an edge (connection) forms between a hypervisor node and a node outside of its established communities, indicating anomalous communication."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]