[
  {
    "information_requirement": "Is the adversary elevating privileges via process injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A process with a file hash matching a known malicious indicator creates a remote thread in, or accesses the memory of, a higher-privileged process.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints",
            "action": [
              "Correlate Sysmon Event ID 1 (Process Creation) to get the SourceImage file hash. Join this event with Sysmon Event ID 8 (CreateRemoteThread) or Event ID 10 (ProcessAccess) using the ProcessGUID. Alert if the SourceImage hash matches a known malicious hash from a threat intelligence feed and the TargetImage is a critical system process (e.g., lsass.exe, services.exe, wininit.exe).",
              "For each Sysmon Event ID 8 or 10, establish the source-target process pair (SourceImage, TargetImage). Maintain an enterprise-wide statistical baseline of the frequency of all observed pairs. Generate an alert for pairs that fall below a low percentile threshold (e.g., < 1st percentile), which indicates a rare and potentially suspicious interaction, especially when the target is a high-integrity process.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled historical data. Features must include SourceImage name, TargetImage name, GrantedAccess codes from Event ID 10, and the enterprise-wide prevalence of the SourceImage executable. Deploy the model to score new events in real-time and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A single source process gains memory write access to a target process and, within a sub-second time window, creates a remote thread in that same target process.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints",
            "action": [
              "Create a stateful correlation rule that triggers when a Sysmon Event ID 10 (ProcessAccess) with memory write permissions (e.g., GrantedAccess includes 0x1400, 0x0020, or 0x0010) is followed within a 1-second window by a Sysmon Event ID 8 (CreateRemoteThread) where the SourceProcessGUID and TargetProcessGUID are identical for both events. Generate a high-priority alert on this specific sequence.",
              "Analyze the time delta between all observed Sysmon Event ID 10 (with write access) and subsequent Event ID 8 events linked by the same Process GUIDs. Establish a statistical distribution of these time deltas. Flag sequences where the time delta is a statistical outlier (e.g., > 3 standard deviations below the mean, or in the lowest 1% of observed times), indicating an unusually fast, programmatic sequence likely associated with malicious automation.",
              "Implement a sequence-aware model like a Recurrent Neural Network (RNN) or a Hidden Markov Model (HMM) to learn common sequences of process interactions on endpoints. Ingest a stream of events (ProcessAccess, CreateRemoteThread, etc.) for each host. Flag event sequences that have a low probability of occurring based on the learned 'normal' behavior, indicating a deviation consistent with a malicious process injection chain."
            ]
          },
          {
            "description": "A process with a lower integrity level creates a remote thread in or accesses the memory of a process with a higher integrity level.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Endpoints, Virtual Desktop Infrastructure (VDI) fleet, Multi-user Terminal Servers",
            "action": [
              "Implement a detection rule to alert on any Sysmon Event ID 8 or 10 where the SourceProcessIntegrityLevel is 'Medium' and the TargetProcessIntegrityLevel is 'High' or 'System', or where the SourceProcessIntegrityLevel is 'High' and the TargetProcessIntegrityLevel is 'System'. This is a direct violation of the Windows integrity model and is highly suspicious.",
              "For all processes, establish a historical baseline of the integrity levels they typically interact with. For each process name (e.g., 'chrome.exe'), track the distribution of TargetProcessIntegrityLevel it accesses via Sysmon Event ID 8 or 10. Alert if a process suddenly starts interacting with integrity levels it has rarely or never accessed before, identified by a significant deviation from its historical statistical distribution.",
              "Develop an anomaly detection model (e.g., Isolation Forest) based on integrity level transitions. Use features such as SourceProcessIntegrityLevel, TargetProcessIntegrityLevel, SourceImage, and TargetImage. Train the model to learn normal integrity level interactions and flag any combination of (Source, Target, Source IL, Target IL) that is rare and isolated from the main clusters of normal activity."
            ]
          },
          {
            "description": "A critical system process (e.g., svchost.exe, lsass.exe) initiates an outbound network connection or spawns an unexpected child process (e.g., cmd.exe, powershell.exe) immediately after being targeted by a process access or remote thread creation event.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 3",
              "Windows Event ID 8",
              "Windows Event ID 10",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Internet Gateway/Egress Points, Core Network Switches, DNS Servers",
            "action": [
              "Create a stateful rule: upon detecting an injection event (Sysmon Event ID 8 or 10) targeting a critical process like lsass.exe, monitor the TargetProcessGUID. Alert if that same ProcessGUID is seen as the ParentProcessGUID for a cmd.exe or powershell.exe spawn (Sysmon Event ID 1), or as the source of an outbound network connection to a non-local address (Sysmon Event ID 3, correlated with Zeek conn.log).",
              "For each critical system process name, build a statistical baseline of its normal child process names (from Sysmon Event ID 1) and network destination IP/port pairs (from Zeek conn.log). Using frequency analysis, alert when a new child process or destination appears that is a statistical outlier (e.g., not in the top 99.5% of historical activity). Separately, calculate the entropy of command-line arguments for child processes; alert on a sudden spike in entropy, which can indicate obfuscated commands.",
              "Implement a time-series anomaly detection model on network traffic metrics originating from critical system processes. Monitor features like bytes sent/received, connection frequency, and destination port entropy over time using data from Zeek conn.log. An alert is generated when the model detects a significant, unexplainable deviation from the established temporal pattern, suggesting a behavioral change post-injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses via process injection?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A named pipe is created or connected, and the pipe's name matches a known malicious pattern or appears to be algorithmically generated.",
            "data_sources": [
              "Windows Event ID 17",
              "Windows Event ID 18"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers",
            "action": [
              "Continuously monitor Sysmon Event IDs 17 (Pipe Created) and 18 (Pipe Connected) for the PipeName field. Match the PipeName against a regularly updated threat intelligence list of malicious pipe names using both exact string matches and regular expressions (e.g., `\\\\.\\pipe\\msagent_[0-9a-f]{4}`). Generate a high-priority alert on any match.",
              "For all PipeName values observed from Sysmon Event IDs 17 and 18, calculate the Shannon entropy of the string. Establish a baseline distribution of entropy scores for legitimate pipe names in the environment. Alert on any pipe name whose entropy score is a statistical outlier (e.g., exceeds the 99th percentile), which is indicative of randomization or algorithmic generation by malware.",
              "Train a classification model to distinguish between benign and malicious pipe names. Extract features from the PipeName string, including length, character distribution (e.g., ratio of letters to numbers), n-gram frequencies, and entropy. Use this model to score new pipe names and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A process loads an unsigned Dynamic-Link Library (DLL) or a DLL with a file hash that is statistically rare across the enterprise.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Monitor Sysmon Event ID 7 (Image Loaded) and create a rule to alert whenever the 'Signed' field is 'false' AND the 'ImageLoaded' path points to a user-writable directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Windows\\Temp\\).",
              "For every unique DLL hash observed in Sysmon Event ID 7 (Image Loaded), calculate its enterprise-wide prevalence by counting the number of distinct hosts that have loaded it. Maintain this as a running inventory. Alert when a process loads a DLL whose hash prevalence is below a configured threshold (e.g., seen on fewer than 5 hosts or <0.1% of the endpoint fleet), flagging it as a rare binary.",
              "Use a clustering algorithm (e.g., DBSCAN) on loaded DLL events. Features for clustering should include prevalence, signed status, entropy of the file path, and characteristics of the parent process (e.g., name, integrity level). Outlier clusters identified by the model would represent groups of anomalous DLL load events that warrant investigation."
            ]
          },
          {
            "description": "A trusted system process (e.g., explorer.exe, svchost.exe) loads a DLL from a non-standard file path, such as a user's temporary directory instead of C:\\Windows\\System32.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers, Application Servers",
            "action": [
              "Define and maintain an explicit allowlist of standard DLL load directories for a set of critical system processes (e.g., svchost.exe should only load from C:\\Windows\\System32\\). Query Sysmon Event ID 7 and alert whenever one of these critical processes (the 'Image' field) loads a DLL (the 'ImageLoaded' field) from a path not on its specific allowlist.",
              "For each parent process name ('Image' in Event ID 7), build a statistical profile of its common 'ImageLoaded' directories. Use frequency analysis to identify the top 99% of source directories for each parent. Alert when a process loads a DLL from a directory that is not in its established baseline set.",
              "Train a one-class SVM (Support Vector Machine) model for each critical process, using features derived from the path of the loaded DLL (e.g., directory depth, directory name n-grams). The model learns the boundary of 'normal' load locations. Any new DLL load event that falls outside this learned boundary is flagged as an anomaly."
            ]
          },
          {
            "description": "A process that normally has no network activity (e.g., notepad.exe, calculator.exe) initiates an outbound network connection.",
            "data_sources": [
              "Windows Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Endpoints, Internet Gateway/Egress Points",
            "action": [
              "Maintain a static list of process image names that should never initiate network connections (e.g., notepad.exe, mspaint.exe, calculator.exe). Monitor Sysmon Event ID 3 (Network Connection) and generate a high-priority alert if the process 'Image' field matches any entry on this blocklist initiating an outbound connection.",
              "For every process image name in the environment, establish a baseline of its typical network activity by counting connections per hour from Sysmon Event ID 3 and Zeek conn.log. Use a simple statistical threshold to alert if a process with a historical average of zero connections per hour is observed making one or more outbound connections. This detects 'first time' network behavior for any process.",
              "After a Sysmon Event ID 10 (ProcessAccess) or Event ID 8 (CreateRemoteThread) targets a process instance, trigger a monitoring state for that specific TargetProcessGUID. Use a time-series anomaly detection model to monitor its network connection events (Sysmon Event ID 3). The model, baselined on zero activity, would detect a state change from 'no network activity' to 'any network activity', flagging the process as potentially compromised and hollowed."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]