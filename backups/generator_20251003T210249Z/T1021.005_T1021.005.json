[
  {
    "information_requirement": "Has an adversary moved laterally using VNC for remote control? (PIR)",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1021.005",
        "name": "VNC",
        "evidence": [
          {
            "description": "An observed VNC network connection (TCP ports 5800-5806, 5900-5906) where the source or destination IP is on a threat watchlist, or a VNC-related process is executed and its file hash matches a known-malicious signature from threat intelligence.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic logs from internet gateways and internal network sensors; Endpoint process execution logs from all workstations and servers.",
            "action": [
              "Symbolic: Create a rule to monitor Zeek conn.log for established connections on VNC ports (5800-5806, 5900-5906). Alert if either the 'id.orig_h' or 'id.resp_h' field matches an IP address on an active threat intelligence watchlist. Concurrently, monitor Sysmon Event ID 1 for process creations with VNC-related names (e.g., vncviewer.exe, winvnc.exe), hash the executable file, and alert if the hash matches a known-malicious signature.",
              "Statistical: Maintain a dynamic risk score for all internal IP addresses based on prior security alerts and asset criticality. For each new VNC connection observed in Zeek conn.log, calculate a session risk score by summing the scores of the source and destination hosts. Analyze the distribution of these session scores over a rolling 24-hour period. Flag any session whose score exceeds the 95th percentile of the distribution for analyst review.",
              "ML: Train a supervised classification model (e.g., Random Forest, Gradient Boosting) to predict the probability of a VNC session being malicious. Use features from Zeek conn.log such as 'duration', 'orig_bytes', 'resp_bytes', 'history', combined with contextual features like source/destination IP risk scores and whether the connection occurs during or outside of business hours. Label training data from historical incidents and benign activity. Alert on new sessions where the model's predicted probability exceeds a tuned threshold (e.g., > 0.90)."
            ]
          },
          {
            "description": "A VNC-related process (e.g., winvnc.exe, tightvnc.exe) is executed from a non-standard file path (e.g., C:\\Users\\Public\\, %APPDATA%), masquerades as a legitimate system process, or is launched with command-line arguments exhibiting high Shannon entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and command-line execution logs from endpoint detection and response (EDR) agents on all workstations and servers.",
            "action": [
              "Symbolic: Implement a detection rule that monitors Sysmon Event ID 1. Alert if a process image path is located in a suspicious directory (e.g., %TEMP%, %APPDATA%) and the process's 'OriginalFileName' or 'Description' field contains 'VNC'. Additionally, alert if a common system process name (e.g., svchost.exe) is the parent of a process that initiates a VNC network connection.",
              "Statistical: For every process execution, calculate the Shannon entropy of the 'CommandLine' field. Establish a baseline entropy score for legitimate VNC client and server processes in your environment. Alert when a VNC-related process execution has a command-line entropy that exceeds 3 standard deviations above its established baseline. Additionally, calculate the rarity of the process's 'Image' path directory compared to a 30-day historical baseline; flag executions from paths in the bottom 5th percentile of frequency.",
              "ML: Use a one-class SVM (Support Vector Machine) or Isolation Forest model trained on features derived from legitimate VNC process executions (Sysmon Event ID 1). Features should include file path depth, command-line length, parent process name, and user context. Apply the trained model to new VNC process events; any event classified as an outlier is flagged as anomalous and potentially malicious."
            ]
          },
          {
            "description": "A VNC connection pattern between internal hosts deviates from an established baseline, defined by one or more of the following: a new source-destination host pair, a user connecting at an anomalous time-of-day, an unusually long or short session duration, or a connection from a user account not authorized for remote access.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication logs from Active Directory Domain Controllers; Network flow logs from data center and user access layer switches.",
            "action": [
              "Symbolic: Maintain an explicit access control policy defining authorized user-to-host VNC access (e.g., 'IT_Admins' group to 'Workstations' OU). Correlate successful remote interactive logons (Windows Event ID 4624, Logon Type 10) with VNC network traffic (Zeek conn.log on ports 5900-5906). Generate a high-severity alert if the user account and target host combination violates the predefined policy.",
              "Statistical: For each user, create a historical baseline of VNC activity over 30 days, including typical login hours, average session duration, and a list of frequently accessed destination hosts. Alert if a user initiates a VNC session (1) outside of their normal time window (e.g., > 2 standard deviations from their mean login hour), (2) with a duration that is a significant outlier (e.g., > 3 standard deviations from their mean), or (3) to a destination host for the first time ('first seen' connection).",
              "ML: Employ a time-series anomaly detection model (e.g., SARIMA, Prophet) on the aggregate count of VNC sessions per hour across the network. The model will learn the normal daily and weekly seasonality of VNC usage. Generate an alert when the observed traffic volume significantly deviates from the model's predicted forecast, indicating a potential widespread lateral movement event."
            ]
          },
          {
            "description": "A high volume of failed VNC connection attempts (TCP resets on ports 5900-5906) or authentication failures (Windows Event ID 4625) from a single source IP is followed within a short time window by a successful connection (established TCP session or Windows Event ID 4624) from that same source to a target host.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4625",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at key aggregation points (e.g., core switches); Security event logs from all servers, especially authentication servers like Domain Controllers.",
            "action": [
              "Symbolic: Create a stateful detection rule that triggers when a single source IP address generates >20 failed VNC authentication events (Windows Event ID 4625 with Logon Type 10) across one or more target hosts within a 5-minute window, and this activity is immediately followed by a successful logon (Windows Event ID 4624) from the same source IP to one of the targeted hosts.",
              "Statistical: In a rolling 10-minute window, count the number of distinct user accounts associated with failed logon attempts (Event ID 4625) originating from a single source IP. If this count exceeds a threshold (e.g., >5 distinct accounts), and is followed by a successful logon (Event ID 4624) from that same IP, it indicates a likely password spraying attack. Calculate the ratio of failed-to-successful logons for each source IP and alert if this ratio exceeds the 99th percentile of all sources.",
              "ML: Model the attacker lifecycle using a Hidden Markov Model (HMM) with states such as 'Scanning', 'Brute-Forcing', and 'Successful Access'. The model's observations would be event types from a source IP (e.g., TCP SYN with no response, failed logon, successful logon). An alert is generated when the model transitions a source IP from the 'Brute-Forcing' state to the 'Successful Access' state with high probability, indicating a successful attack sequence."
            ]
          },
          {
            "description": "Following a successful VNC connection, the target host executes suspicious follow-on activity, such as system reconnaissance commands (e.g., whoami, net group, ipconfig), credential access tools, or initiates new outbound network connections to internal systems or external C2 servers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process, script block, and network connection logs from critical servers and high-value user workstations; Network DNS and flow logs from datacenter and user subnets.",
            "action": [
              "Symbolic: Identify an active VNC session by correlating a successful remote logon (Event ID 4624, Logon Type 10) with VNC port traffic. Within a 30-minute window of this event, monitor the target host's child processes (Sysmon Event ID 1) for execution of reconnaissance commands (`whoami`, `net group`, `nltest`, `ipconfig`), credential dumping tools, or encoded PowerShell commands (`powershell.exe -enc`). Alert on any match.",
              "Statistical: After identifying a VNC session, monitor all child processes and network connections spawned by the logged-on user. For each process and network destination, calculate a rarity score based on its inverse frequency in a 30-day organizational baseline. Sum these scores for the session. Flag sessions where the total rarity score exceeds a percentile-based threshold (e.g., 98th percentile), indicating highly unusual post-access behavior.",
              "ML: For each VNC session, construct a process execution graph of all activity within a 1-hour window. Use a graph embedding algorithm (e.g., Node2Vec) to create vector representations of these activity graphs. Train a classifier (e.g., Random Forest) on these vectors, using labeled data from known benign remote administration sessions and malicious post-exploitation scenarios. Use the trained model to classify new post-VNC activity graphs in near real-time."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]