[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by masquerading tasks or services? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.004",
        "name": "Masquerade Task or Service",
        "evidence": [
          {
            "description": "A new scheduled task (Windows Event ID 4698) or service (Windows Event ID 7045) is created, and the executable file associated with it has a hash that matches a known malicious indicator from integrated threat intelligence.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic: Upon detection of a new task (Event ID 4698) or service (Event ID 7045), extract the 'Image Path' or 'Service File Name'. Correlate this with process creation events (Event ID 4688) to obtain the file hash. Compare this hash against a high-confidence blocklist of known malicious file hashes. An exact match triggers a critical alert.",
              "Statistical: For every new task or service executable hash, query available threat intelligence feeds for its reputation. Establish a baseline of hash prevalence across the enterprise. Flag any executable whose hash is seen on a single endpoint (lowest percentile of prevalence) and has a 'suspicious' or 'malicious' reputation score from multiple intelligence providers.",
              "Machine Learning: Train a supervised classification model (e.g., XGBoost, Random Forest) to predict if a new task or service is malicious. Engineer features from the executable file including its entropy, signed status, and PE header information, combined with its enterprise-wide prevalence and threat intelligence reputation scores. The model's output probability score can be used to prioritize alerts."
            ]
          },
          {
            "description": "A new scheduled task or service is created with a name that is visually similar to a legitimate system task/service (e.g., Levenshtein distance of 1 or 2) or has a name with high character-level entropy, suggesting randomness.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic: Maintain an allowlist of legitimate task and service names based on your organization's standard builds. Monitor for new task (Event ID 4698) or service (Event ID 7045) creations. Alert on any new name that is not on the allowlist and also matches a regex pattern for common obfuscation, such as names with mixed case gibberish or typo-squatted names (e.g., 'Microsft', 'Windos').",
              "Statistical: For each new task or service name not on the allowlist, calculate the Levenshtein distance against all names on the established allowlist. Flag names with a distance of 1 or 2. Separately, calculate the Shannon entropy for all new names and flag any name that falls within the top 99th percentile of entropy scores observed across all task/service names, indicating a likely randomized name.",
              "Machine Learning: Utilize an anomaly detection model, such as an Isolation Forest or One-Class SVM, trained on features extracted from legitimate task and service names. Features should include name length, character n-grams (bigrams, trigrams), and the ratio of digits to letters. Apply the trained model to new names to identify outliers that do not conform to the patterns of legitimate names."
            ]
          },
          {
            "description": "A scheduled task or service is created with an executable path located in a directory that is unusual for legitimate system processes, such as a user's profile, a temporary directory, or a world-writable location.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic: From new task (Event ID 4698) and service (Event ID 7045) events, extract the executable path. Use a rule to trigger an alert if the path points to a non-standard, user-writable directory, such as 'C:\\Users\\*', 'C:\\ProgramData\\*', 'C:\\Windows\\Temp\\*', '%APPDATA%', or '%LOCALAPPDATA%', and is not on an explicit exception list.",
              "Statistical: Over a 30-day rolling window, build a frequency table of all parent directory paths for task and service executables across the enterprise. Any new task or service whose executable resides in a parent directory that falls in the bottom 5th percentile for prevalence should be flagged as statistically rare and investigated.",
              "Machine Learning: Train a classification model (e.g., Decision Tree) to predict the legitimacy of an executable's file path. Engineer features such as path depth, the presence of keywords ('Temp', 'Downloads'), the statistical rarity of each path segment, and whether the path contains a username. Use the model's prediction score to flag suspicious paths for analyst review."
            ]
          },
          {
            "description": "A core service management process (e.g., services.exe, svchost.exe, taskhostw.exe) spawns a child process that has never been observed for that parent in the environment or is known to be a suspicious utility.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers",
            "action": [
              "Symbolic: Monitor process creation events (Event ID 4688) where the Parent Process Name is 'services.exe', 'svchost.exe', 'taskhostw.exe', or 'taskeng.exe'. Trigger an alert if the spawned Child Process Name is a command-line interpreter ('cmd.exe', 'powershell.exe') or scripting host ('cscript.exe', 'wscript.exe') and the command line includes suspicious arguments like 'IEX', '-enc', or 'DownloadString'.",
              "Statistical: For each key parent process ('svchost.exe', 'taskhostw.exe'), maintain a baseline of all child process names observed over a 90-day period. Use frequency analysis to flag any new parent-child relationship that has never been seen before (first occurrence). Additionally, for known parent-child pairs, calculate the entropy of the command line arguments and flag any instance where the entropy score exceeds the 98th percentile for that specific pair.",
              "Machine Learning: Apply a clustering algorithm (e.g., DBSCAN) to process creation events. Use features such as the parent process name, child process name, command-line length, and command-line character distribution. Identify and investigate events that are marked as noise or outliers by the algorithm, as they do not belong to the dense clusters of normal, repetitive system activity."
            ]
          },
          {
            "description": "A process, with an ancestry tracing back to a scheduled task or service, initiates a network connection to a destination that is anomalous based on threat intelligence, geolocation, or historical communication patterns for that service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points, DNS Servers",
            "action": [
              "Symbolic: Correlate process creation events (Event ID 4688) with network connection logs (Zeek conn.log) using source IP and timestamps. For a process that initiates a network connection, trace its parent process ID chain upwards. If the ancestry leads to 'services.exe' or 'taskhostw.exe', check the destination IP against a threat intelligence feed of known C2 servers. Also, check the requested domain from Zeek dns.log against a list of newly registered domains (e.g., registered in the last 30 days). A match on either triggers an alert.",
              "Statistical: For each legitimate service process name, build a historical baseline of its network behavior including common destination ports, protocols, JA3/JA3S hashes (from Zeek ssl.log), and data volumes (from Zeek conn.log). Flag any new connection from a service-spawned process that uses a destination port not in its baseline, has a JA3/JA3S hash in the lowest 1st percentile of prevalence, or transfers a volume of data that exceeds 3 standard deviations from its mean.",
              "Machine Learning: For each service process, aggregate its outbound network data volume (e.g., sum of `orig_bytes` from Zeek conn.log) into time-based buckets (e.g., 10-minute intervals). Apply a time-series anomaly detection model (e.g., LSTM Autoencoder) to this data stream. The model learns the normal 'heartbeat' of the service's network traffic and will alert on significant, unexplained spikes or dips in communication patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]