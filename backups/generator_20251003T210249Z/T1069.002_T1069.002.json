[
  {
    "information_requirement": "Is the adversary attempting to discover domain groups and permissions? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1069.002",
        "name": "Domain Groups",
        "evidence": [
          {
            "description": "The command line of a created process (Windows Event ID 4688) or PowerShell script block (Windows Event ID 4104) contains a unique string, function name, or parameter combination directly matching a signature from a known malicious domain enumeration tool (e.g., AdFind, PowerView, BloodHound ingestor).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged User Workstations",
            "action": [
              "Symbolic: Maintain a list of high-fidelity string signatures for tools like AdFind (e.g., 'AdFind.exe -f objectCategory=group'), PowerView (e.g., 'Get-NetGroup', 'Find-DomainObjectPropertyOutlier'), and BloodHound (e.g., 'SharpHound.exe', 'Get-BloodHoundData'). Create a detection rule to scan process command lines (Windows Event ID 4688) and PowerShell script content (Windows Event ID 4104) for these exact strings and alert on any match.",
              "Statistical: For each PowerShell script block (Event ID 4104), calculate the Shannon entropy of the script content. Establish a baseline distribution of entropy scores from known-good administrative scripts in your environment. Generate an alert if a script's entropy score exceeds the 95th percentile of the baseline, as this indicates potential obfuscation often used to hide malicious code.",
              "Machine Learning: Develop and train a classification model (e.g., Logistic Regression, Random Forest) using features from process command lines (Event ID 4688). Features should include command length, special character frequency, n-grams, and the presence of known enumeration keywords. Label a dataset with 'benign' (e.g., 'net start') and 'malicious' (e.g., 'net group /domain') examples. Deploy the model to classify new command line executions in real-time and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A sequence of native discovery commands is executed by a single user or process on a single host within a short time window, deviating from the normal pattern of single, isolated administrative actions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially Domain Controllers and administrative workstations",
            "action": [
              "Symbolic: Using process creation logs (Event ID 4688) and PowerShell logs (Event ID 4104), create a correlation rule that triggers when a single user or process executes more than a specified number (e.g., 3) of distinct domain group enumeration commands (e.g., 'net group /domain', 'net localgroup /domain', 'Get-ADGroup', 'Get-ADGroupMember', 'dsquery group') from a single host within a short time window (e.g., 5 minutes).",
              "Statistical: For each user account, create a baseline of their normal command execution frequency. Calculate the moving average and standard deviation of discovery-related commands per hour over a 30-day period. Generate an alert when a user's command count in an hour exceeds 3 standard deviations above their personal moving average, indicating an uncharacteristic burst of enumeration activity.",
              "Machine Learning: Train a Hidden Markov Model (HMM) on sequences of command line executions. Define states such as 'Benign', 'Reconnaissance', and 'Lateral Movement'. Train the model on labeled data to learn the transition probabilities between states. In production, use the model to calculate the probability that an observed command sequence corresponds to the 'Reconnaissance' state and alert when this probability surpasses a defined threshold."
            ]
          },
          {
            "description": "A single source IP address generates a volume and pattern of LDAP search requests targeting Active Directory group objects that is statistically anomalous compared to its own historical baseline and the baseline of its peer group.",
            "data_sources": [
              "Zeek ldap.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments monitoring traffic to and from Domain Controllers",
            "action": [
              "Symbolic: From Zeek ldap.log, create a detection rule to alert on any LDAP query containing a filter known to be used by BloodHound, such as '(|(samaccounttype=268435456)(samaccounttype=268435457)(samaccounttype=536870912)(samaccounttype=536870913))', or broad filters querying for all group objects like '(objectCategory=group)'. These are highly indicative of reconnaissance.",
              "Statistical: From Zeek ldap.log, for each source IP, calculate the hourly count of LDAP searches. Establish a 30-day baseline for each host. Alert when the hourly query count for a host exceeds the 99th percentile of its own historical distribution. Additionally, group hosts by role (e.g., workstations, web servers) and alert if a host's query rate is an outlier (e.g., greater than 3 standard deviations from the group's mean query rate).",
              "Machine Learning: For each source host, model its LDAP query volume to Domain Controllers as a time series using Zeek logs. Use a forecasting model like ARIMA or Prophet to predict the expected query volume for the next interval (e.g., 10 minutes). Generate an alert if the actual observed volume significantly exceeds the model's predicted upper confidence bound, signaling a sudden, unpredicted spike in activity."
            ]
          },
          {
            "description": "An operation is performed to read the member attribute of a highly sensitive Active Directory group (e.g., Domain Admins, Enterprise Admins, Schema Admins) and the access is performed by a user or from a host that is not on an explicit allow list.",
            "data_sources": [
              "Windows Event ID 4662",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: First, enable 'Audit Directory Service Access' on Domain Controllers and apply a SACL to sensitive AD groups (e.g., Domain Admins, Enterprise Admins, DNSAdmins) to audit 'Read member' permissions, which generates Event ID 4662. Maintain a static allow list of authorized administrative accounts and management hosts. Create a high-severity alert to trigger if Event ID 4662 is generated for one of these groups by any account or from any source host not on the allow list.",
              "Statistical: For the authorized administrators on the allow list, baseline their normal access patterns using Event ID 4662 and associated logon data (Event ID 4624). Profile typical access hours and source workstations. Generate a medium-severity alert if an authorized administrator accesses these groups outside their normal profiled hours (e.g., hour-of-day z-score > 3) or from a source workstation not seen in the last 90 days for that user.",
              "Machine Learning: Train a one-class SVM or Isolation Forest model on features derived from legitimate administrative access events (Event ID 4662 correlated with 4624 logon data). Use features like User, Source Hostname, Logon Type, Time of Day, and Day of Week. This model learns the boundary of 'normal' access behavior. Deploy the model to score new access events and flag any event that falls outside this learned boundary as a high-confidence anomaly."
            ]
          },
          {
            "description": "Domain group enumeration commands or high-volume LDAP queries are executed from a user account or host whose business function (e.g., a web server, a user in the marketing department) has no defined operational requirement for such activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek ldap.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, particularly non-IT/developer workstations and single-function servers like Web Servers or Database Servers",
            "action": [
              "Symbolic: Maintain an up-to-date inventory mapping user accounts and hosts to functional roles (e.g., 'IT-Admin', 'Finance-User', 'WebServer-Prod'). Create a high-severity detection rule that triggers if a process (Event ID 4688) or PowerShell command (Event ID 4104) matching a known enumeration pattern (e.g., 'net group /domain', 'Get-ADGroup') originates from a user or host not assigned a role authorized for such activity.",
              "Statistical: Group users by their department or role. For each user, calculate a weekly 'discovery activity score' based on the weighted count of enumeration commands and LDAP queries. Alert if a user's score is a statistical outlier within their peer group (e.g., their score exceeds the 95th percentile of all scores within that role).",
              "Machine Learning: Apply a clustering algorithm like DBSCAN to host activity data, using features such as common processes executed, network protocols used, and destination ports. This will automatically group hosts into clusters representing their functional roles without pre-existing labels. If a host within a well-defined cluster (e.g., 'web servers' that primarily communicate over port 443) suddenly executes domain enumeration commands, it will be flagged as a noise point or outlier by the model, indicating a significant deviation from its established role."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]