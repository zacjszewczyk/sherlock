[
  {
    "information_requirement": "Has the adversary gained initial access to the network via compromised cloud accounts?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "A successful cloud authentication event originates from a source IP address present on a high-confidence threat intelligence feed of known malicious infrastructure, such as C2 servers, TOR exit nodes, or anonymous proxies.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider IAM services (e.g., Azure AD, AWS IAM), Network Egress/Ingress Points (e.g., Internet Gateway, VPN Concentrators), Threat Intelligence Platforms",
            "action": [
              "Join cloud authentication logs against a threat intelligence feed of malicious IP addresses. Generate a critical alert for any successful login where the source IP address matches an entry in the feed.",
              "For each successful login, enrich the source IP with ASN data using Zeek conn.log or an external data set. Calculate the frequency of each source ASN across the organization over a 30-day baseline. Alert on successful logins from ASNs in the bottom 5th percentile of frequency that are not on an allowlist of business partners or remote offices.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled historical login data with features such as source IP geolocation, ASN, time of day, and user agent. Use the model to score each new login for its probability of being malicious. Alert on logins with a probability score exceeding a defined threshold (e.g., > 0.9)."
            ]
          },
          {
            "description": "A sequence of cloud API calls is observed with a User-Agent string matching a known offensive security tool (e.g., PowerZure, Pacu) or a generic, script-based User-Agent (e.g., 'curl', 'python-requests', 'Go-http-client') not typically associated with the user.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API endpoints, Cloud Service Provider Management Consoles, Application and Web Server Logs",
            "action": [
              "Scan the User-Agent field in all cloud audit logs against a curated list of regular expressions for known malicious and unusual tools. Generate an alert on any match, with severity increased if correlated with enumeration or permission-modification API calls.",
              "For each user and service principal, build a baseline of normal User-Agent strings used. For each API call, calculate the Shannon entropy of the User-Agent string. Alert if a user employs a User-Agent that is not in their baseline or if the entropy is outside 2 standard deviations of the user's typical User-Agent entropy.",
              "Use a sequence analysis model, such as a Hidden Markov Model (HMM) or LSTM, trained on legitimate API call sequences per user or role. Flag any observed sequence of API calls that significantly deviates from the learned legitimate patterns, indicating potential tool-driven activity."
            ]
          },
          {
            "description": "A high volume of failed authentication events for a single cloud account (brute-force) or across multiple accounts with a limited set of passwords (password spraying) is observed from one or more source IP addresses.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Windows Event ID 4625 on ADFS servers"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud authentication endpoints, On-premises federation servers (e.g., ADFS), VPN gateways",
            "action": [
              "Create a rule that alerts when the count of failed logins from a single source IP exceeds 20 in 5 minutes (brute-force). Create a second rule that alerts when a single source IP generates failed logins for more than 15 unique accounts in 10 minutes (password spray).",
              "For each source IP, calculate the ratio of failed to successful logins within a rolling 1-hour window. Flag any IP where this ratio exceeds the 99th percentile for all source IPs. Additionally, monitor the number of unique accounts targeted by a single IP; an IP targeting a number of accounts > 3 standard deviations above the mean is suspicious.",
              "Implement a time series anomaly detection model (e.g., SARIMA, Prophet) on the global count of failed authentication events per minute. A sudden spike in the time series that the model flags as a statistical anomaly indicates a potential large-scale brute-force or password spraying attack."
            ]
          },
          {
            "description": "A successful cloud authentication occurs from a geographic location that is physically impossible for the user to have traveled to, given the time and location of their previous authenticated session.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Geolocation IP Databases, Network Gateway Logs",
            "action": [
              "For each successful login, retrieve the timestamp and geolocated source IP. Compare this to the user's previous login. Calculate the great-circle distance and divide by the time elapsed. If the resulting speed exceeds a physically impossible threshold (e.g., 1000 km/h), generate an 'impossible travel' alert.",
              "For each user, maintain a 90-day rolling baseline of normal login countries, cities, and ASNs. Use frequency analysis to flag any login from a location or ASN that falls outside the user's top 95% of locations. A login from a country never before seen for that user is a high-confidence indicator.",
              "Use a clustering algorithm (e.g., DBSCAN) on the geolocations (latitude/longitude) of each user's historical logins to identify their normal 'clusters' of activity (e.g., office, home). A new login that does not fall into any existing cluster and is flagged as noise by the algorithm should be alerted as a spatial anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using compromised cloud accounts or credentials?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call is authenticated using a credential identifier (e.g., AWS Access Key ID, Azure Client ID) that is present on a watchlist of known compromised or leaked credentials.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud API Endpoints, Internal Credential Watchlist Database, SIEM",
            "action": [
              "Continuously monitor all API calls and join the access key ID or token hash against a watchlist of known compromised credentials. Any match triggers an immediate critical severity alert and initiates an automated credential rotation playbook.",
              "Analyze the usage frequency of all programmatic credentials. A credential that has been dormant for an extended period (e.g., > 180 days) and suddenly becomes active should be flagged. Calculate the 'time since last use' for every API call and alert if this value exceeds the 99th percentile for that specific credential's usage pattern.",
              "Train a classifier on credential usage patterns, using features like API calls made, source IP, and time of day. If a known-compromised credential is used, its subsequent activity can be used as labeled malicious data. The model can then predict if other, unknown credentials are being used in a similarly malicious manner."
            ]
          },
          {
            "description": "A new programmatic credential, such as an AWS Access Key or Azure AD Service Principal secret, is created with high-privilege permissions, an unusually long or non-existent expiration, or a suspicious name (e.g., 'bkup', 'temp', 'test-admin').",
            "data_sources": [
              "AWS CloudTrail Logs (CreateAccessKey, CreateServicePrincipal)",
              "Azure Monitor Audit Logs (Add-AzureADApplicationPasswordCredential)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Change Management Systems (e.g., ServiceNow)",
            "action": [
              "Alert on any credential creation event where the associated policy grants administrative privileges (e.g., contains 'Action': '*' on 'Resource': '*') or the credential name matches a regex list of suspicious terms. Correlate with change management data and escalate if no approved change request ticket is found.",
              "Profile the typical roles and permissions assigned during credential creation across the organization. Flag the creation of any new credential where the number of assigned permissions exceeds 3 standard deviations above the average, or where the assigned role is statistically rare for the creating user or service.",
              "Use a graph-based anomaly detection model on the graph of principals and permissions. When a new credential (node) and its permissions (edges) are added, the model can evaluate if this addition significantly alters the graph structure in a way that resembles known attack paths (e.g., creating a new path to a critical resource), flagging it as high-risk."
            ]
          },
          {
            "description": "An authentication event or API call is observed from a user account, service principal, or API key that has not been used for an extended period (e.g., over 90 days), especially if the activity originates from a new source IP or at an atypical time.",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Asset and Identity Inventory Databases, Domain Controllers",
            "action": [
              "For every authentication event, look up the timestamp of the principal's previous authentication from an identity inventory. If the time delta is greater than a fixed threshold (e.g., 90 days), generate a medium-severity alert. Escalate to high severity if the source IP is also new for that principal.",
              "For each principal, calculate the mean and standard deviation of the time between authentications. An authentication event where the time since the last login is more than 3 standard deviations above the mean for that specific principal should be flagged as anomalous 'dormant account' activity.",
              "Use a time series forecasting model (e.g., Exponential Smoothing) for each user's login activity. If a login occurs at a time when the model predicted a near-zero probability of activity (e.g., during a long period of inactivity), flag it as an anomaly. This method is more dynamic than a fixed 90-day threshold."
            ]
          },
          {
            "description": "A configuration change is made to the identity federation settings of the cloud environment, such as adding a new SAML Identity Provider (IdP) or modifying the trust relationship with an existing one, that is not documented in change management records.",
            "data_sources": [
              "AWS CloudTrail Logs (CreateSAMLProvider, UpdateSAMLProvider)",
              "Azure Monitor Audit Logs (Set-MsolDomainFederationSettings)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Federation and Single Sign-On (SSO) configuration pages, On-premises Active Directory Federation Services (ADFS) servers",
            "action": [
              "Create a critical-severity, non-overridable alert for any API call that modifies federation settings (e.g., `UpdateSAMLProvider`, `Set-MsolDomainFederationSettings`, `Add-ADFSClaimsProviderTrust`). These events should always be manually investigated by the security team.",
              "Maintain an inventory of approved IdP domains, signing certificates, and claim rules. Periodically query the federation configuration via API and perform a diff against the last known-good state. As these are zero-frequency events, any unexpected change is a high-confidence statistical anomaly.",
              "Model the behavior of administrators who legitimately perform these changes (e.g., typical source IP ranges, times of day, preceding activities). Flag a modification if the responsible principal's attributes do not match the established 'administrator behavior' model, providing a secondary control to the primary rule-based alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary escalated privileges using compromised cloud accounts or misconfigurations?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call that modifies permissions (e.g., iam:AttachUserPolicy, iam:PutUserPolicy, Add-MgGroupMember) is executed with a User-Agent string associated with a known cloud hacking tool or a generic scripting agent not used by legitimate administrators.",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Cloud API Gateways",
            "action": [
              "Create a rule that joins the API call name with the User-Agent string. If the API call is on a watchlist of privilege-modifying actions AND the User-Agent matches a list of suspicious tool signatures, generate a high-severity alert.",
              "For each user, profile the User-Agent strings they typically use for sensitive operations. If a privilege-modifying API call is made using a User-Agent that is statistically rare for that user (e.g., they always use the web console but suddenly use 'Boto3'), flag the event for review.",
              "Train a classification model to predict whether a given API call is part of a privilege escalation chain, using features like the API call name, User-Agent, source IP, and the identity's role. A high probability score for a permission-modifying call indicates a likely attack."
            ]
          },
          {
            "description": "A specific, ordered sequence of API calls is observed from a single identity within a short time window, matching a known pattern for exploiting a cloud IAM misconfiguration (e.g., iam:ListPolicies, iam:ListPolicyVersions, iam:CreatePolicyVersion, iam:SetDefaultPolicyVersion).",
            "data_sources": [
              "AWS CloudTrail Logs",
              "Azure Monitor Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms",
            "action": [
              "Define stateful detection rules that look for a specific sequence of API calls from the same identity, such as `iam:ListAttachedRolePolicies` -> `iam:ListPolicyVersions` -> `iam:CreatePolicyVersion` -> `iam:SetDefaultPolicyVersion` within a 15-minute window. A completed sequence triggers a critical alert.",
              "Calculate the transition probabilities between different API calls for each user (e.g., what is the probability of calling `CreatePolicyVersion` immediately after `ListPolicyVersions`?). A sequence of calls with a very low joint probability based on the user's historical behavior should be flagged as anomalous.",
              "Use a sequence-aware model like an LSTM autoencoder trained on legitimate API call sequences. The model attempts to reconstruct the observed sequence; a high reconstruction error indicates the sequence is anomalous and does not conform to normal operational patterns, suggesting a potential exploit chain."
            ]
          },
          {
            "description": "An event modifying an IAM policy or role is detected where the change introduces high-risk permissions, such as adding a wildcard ('*') to the 'Action' or 'Resource' element, or adding sensitive permissions like 'iam:PassRole' or 'sts:AssumeRole'.",
            "data_sources": [
              "AWS CloudTrail Logs (CreatePolicyVersion, PutRolePolicy)",
              "Azure Monitor Audit Logs (Update-MgPolicy)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Configuration Management Database (CMDB)",
            "action": [
              "Upon any policy modification event, parse the request parameters containing the new policy document. Use a regular expression to search for high-risk patterns like `\"Action\":\"*\"` or sensitive permissions like `\"sts:AssumeRole\"`. Any match triggers a high-severity alert.",
              "Score every IAM policy based on the permissions it contains (e.g., using a tool like Cloudsplaining). When a policy is modified, calculate the 'privilege score' before and after the change. A change that results in a score increase beyond a certain threshold (e.g., >95th percentile of all historical score increases) is flagged as a significant privilege escalation.",
              "Use a Natural Language Processing (NLP) based model trained on JSON policy documents to classify policies as 'safe' or 'risky'. When a policy is modified, run the new version through the classifier. If a policy transitions from 'safe' to 'risky', generate an alert for analyst review."
            ]
          },
          {
            "description": "An identity (user or service) successfully assumes an IAM role for the first time, and this action is immediately followed by sensitive activity such as data access, credential creation, or permission changes within a short time window.",
            "data_sources": [
              "AWS CloudTrail Logs (AssumeRole, and subsequent calls)",
              "Azure Monitor Audit Logs (RoleAssignmentSucceeded)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Data stores containing sensitive information (e.g., S3 buckets, databases)",
            "action": [
              "Maintain a baseline of (identity, assumed_role) pairs that have been observed. Alert on the first occurrence of a new (identity, assumed_role) `AssumeRole` event. Correlate this with subsequent actions; if the new role is used to access sensitive data within 5 minutes, escalate the alert severity.",
              "For each identity, create a frequency distribution of roles they assume. A 'first-time' role assumption is an extreme statistical anomaly (zero prior occurrences). The risk can be weighted by the statistical rarity of the role itself across the organization (e.g., few other identities ever assume this role).",
              "Model the relationship between identities and the resources they access as a bipartite graph. Use a link prediction model to determine the likelihood of a new 'role assumption' edge forming under normal circumstances. A very unlikely but successful link indicates a potential privilege abuse path being exploited."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using compromised cloud accounts?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1078.004",
        "name": "Cloud Accounts",
        "evidence": [
          {
            "description": "An API call is executed that stops, deletes, or modifies a critical security logging or monitoring service, such as AWS CloudTrail, AWS GuardDuty, or Azure Sentinel.",
            "data_sources": [
              "AWS CloudTrail Logs (StopLogging, DeleteTrail, DeleteDetector)",
              "Azure Monitor Audit Logs (delete on microsoft.security/automations)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Security Service configuration pages (e.g., CloudTrail, GuardDuty, Sentinel), Centralized Log Aggregation Platform",
            "action": [
              "Create a non-overridable, critical-severity alert that triggers on a specific list of API call names associated with disabling security services (e.g., `StopLogging`, `DeleteTrail`, `UpdateDetector` with `Enable: false`). This alert must trigger an immediate incident response.",
              "Monitor the count of these critical security-disabling API calls. Any count greater than zero is a major statistical anomaly that constitutes an alert, as the expected frequency of these events is zero outside of a sanctioned change window.",
              "Train a behavioral model on administrator activity. If a security-disabling API call is made by a principal whose recent activity (e.g., source IP, time of day, other API calls) does not match the established 'IT Security Admin' behavior profile, automatically escalate the alert priority."
            ]
          },
          {
            "description": "A cloud network security rule (e.g., AWS Security Group, Azure Network Security Group) is modified to allow inbound or outbound traffic from a broad IP range like '0.0.0.0/0' or for all ports, creating an unnecessary exposure.",
            "data_sources": [
              "AWS CloudTrail Logs (AuthorizeSecurityGroupIngress, ModifySecurityGroupRules)",
              "Azure Monitor Audit Logs (Microsoft.Network/networkSecurityGroups/write)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Virtual Private Cloud (VPC) and Virtual Network (VNet) configurations, Network Security Group and Security Group configurations",
            "action": [
              "Monitor network configuration change events. Parse the request parameters and alert if a rule is created or modified where the `CidrIp` is '0.0.0.0/0' or the `ToPort` range is '1-65535', unless the change is associated with an approved deployment process or change ticket.",
              "Analyze the distribution of CIDR block prefix lengths and port ranges in security rule changes. A change introducing a CIDR block with a prefix length in the bottom 5th percentile (i.e., largest networks) or a port range in the top 5th percentile (i.e., widest ranges) should be flagged for review.",
              "Train a classification model on security group rule configurations, labeling them as 'compliant' or 'non-compliant/risky' based on organizational security policy. When a rule is modified, the new configuration can be classified in real-time. A transition from 'compliant' to 'risky' triggers an alert."
            ]
          },
          {
            "description": "An identity performs an action to delete or alter log data, such as deleting a log-storing S3 bucket, disabling lifecycle policies on a log bucket, or clearing events from a log stream, especially after other suspicious activity.",
            "data_sources": [
              "AWS CloudTrail Logs (DeleteBucket, PutBucketLifecycleConfiguration)",
              "Windows Event ID 104 (Log file was cleared)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized Log Storage (e.g., S3 Buckets, Azure Storage Accounts), CloudTrail/Log Analytics configuration, Windows Event Forwarding servers",
            "action": [
              "Create critical alerts for any API call that targets a known log-archive resource and has a destructive action (e.g., `s3:DeleteObject` on a bucket tagged as 'log-archive'). Ensure logs are shipped to a separate, immutable security account to preserve evidence.",
              "Use a time series anomaly detection model (e.g., SARIMA) to monitor the volume of logs ingested per key source. Alert on any sustained drop in volume that deviates significantly from the forecast and is not correlated with a planned maintenance window.",
              "Use a sequence analysis model to detect a pattern of 'Anomalous Login -> Data Access -> `DeleteBucket`'. The model can learn these multi-stage attack patterns and alert on the full sequence, rather than just the individual events, providing context to the log deletion."
            ]
          },
          {
            "description": "A successful interactive login to a privileged account occurs without Multi-Factor Authentication (MFA), indicated by a specific claim in the authentication log (e.g., mfaAuthenticated: false, MFAUsed: No).",
            "data_sources": [
              "Azure AD Sign-in Logs",
              "AWS CloudTrail Logs (ConsoleLogin event)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Identity and Access Management (IAM) Platforms, Single Sign-On (SSO) provider logs",
            "action": [
              "Create a rule to parse all successful interactive login events for privileged accounts. Generate a high-severity alert if the event log contains a field indicating MFA was not used (e.g., `mfaAuthenticated: false` or `MFAUsed: No`).",
              "For each privileged user, the percentage of logins with MFA should be 100%. Monitor this KPI over time. Any deviation or a sudden appearance of non-MFA logins for a user who has historically always used MFA is a statistical anomaly requiring investigation.",
              "Train a model to predict the likelihood that a login session is legitimate based on features like IP, location, device, and MFA status. A successful login without MFA would be a very strong feature indicating a potentially illegitimate session (e.g., resulting from session token theft), leading the model to flag it with a high risk score."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]