[
  {
    "information_requirement": "Has the adversary exploited a software vulnerability to access or forge credentials on the network? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1212",
        "name": "Exploitation for Credential Access",
        "evidence": [
          {
            "description": "Observed network traffic directed at a Domain Controller that contains byte patterns or RPC call sequences characteristic of known credential access exploits. Examples include an all-zero challenge/credential pair in a Netlogon authentication attempt (Zerologon/CVE-2020-1472) or specific EFSRPC API calls like EfsRpcOpenFileRaw (PetitPotam/CVE-2021-36942).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek ntlm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Network segments containing authentication servers, Network choke points",
            "action": [
              "Implement and monitor a network IDS signature that alerts on Netlogon RPC authentication attempts where the ClientChallenge and ClientCredential fields are composed entirely of null bytes, or on EFSRPC API calls to 'EfsRpcOpenFileRaw' targeting a Domain Controller.",
              "Using Zeek dce_rpc.log, establish a baseline of RPC operations, endpoints, and source hosts that communicate with authentication servers. Calculate the per-hour frequency of rare but legitimate RPC calls (e.g., LsarQueryInformationPolicy). Alert on source hosts where the call frequency for any single sensitive operation exceeds the 99th percentile of the historical baseline for that specific operation.",
              "Train a supervised classification model (e.g., Random Forest) using labeled network capture data (PCAP). Extract features from RPC sessions such as the sequence of operations, inter-request timings, payload sizes, and specific named pipe endpoints. Deploy the trained model to classify live RPC sessions targeting Domain Controllers as benign or malicious."
            ]
          },
          {
            "description": "A single host successfully requests a high volume of Kerberos Ticket Granting Service (TGS-REQ) tickets for numerous distinct Service Principal Names (SPNs) in a short time frame, or a Kerberos ticket is observed with weak encryption (RC4-HMAC) and is subsequently used for successful authentication.",
            "data_sources": [
              "Windows Event ID 4769",
              "Zeek kerberos.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers hosting critical services, Kerberos Key Distribution Center (KDC)",
            "action": [
              "Create a rule to detect Windows Event ID 4769 where the 'Ticket Encryption Type' is '0x17' (RC4-HMAC) and the 'Service Name' does not end with a '$' character (indicating a user or service account, not a machine account). Correlate this event with a subsequent successful logon (Event ID 4624) from the same source IP to confirm a potential Kerberoasting attack.",
              "For each source host, calculate the number of unique Service Names requested in Event ID 4769 over a rolling 10-minute window. Establish a network-wide baseline for this metric. Generate an alert when a host's unique SPN request count exceeds the 99.5th percentile of the baseline, indicating abnormal service enumeration.",
              "Develop a time-series anomaly detection model (e.g., Seasonal-ARIMA) for each host based on the volume of its generated Event ID 4769 logs, aggregated into 5-minute intervals. Train the model on at least 30 days of historical data. An alert is triggered when the observed volume of ticket requests significantly exceeds the model's predicted forecast range, indicating a burst of activity consistent with enumeration."
            ]
          },
          {
            "description": "The Local Security Authority Subsystem Service (lsass.exe) process terminates unexpectedly or crashes, logged as an Application Error (Windows Event ID 1000), potentially indicating a failed credential dumping attempt or memory access exploit.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Credential stores, Critical application servers",
            "action": [
              "Create a critical-priority alert that triggers immediately upon detection of Windows Event ID 1000 where the 'Faulting application name' is 'lsass.exe'. This event requires immediate investigation without exception.",
              "Using Windows Event ID 4688, profile the parent-child process relationships for 'lsass.exe'. The only expected parent process is 'wininit.exe'. Calculate the entropy of the parent process name field for lsass.exe over time. A sharp increase in entropy or the appearance of any parent other than 'wininit.exe' is a high-fidelity indicator of compromise.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to a feature set describing the behavior of the lsass.exe process. Features should include CPU usage, memory consumption, handle count (from performance counters), and process creation events where lsass.exe is the parent (from Event ID 4688). Normal behavior will form a dense cluster; flag any data points classified as noise or outliers as anomalous, potentially indicating exploit-induced instability."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) where a web server process (e.g., w3wp.exe, httpd.exe, tomcat.exe) spawns a command-line interpreter (e.g., cmd.exe, powershell.exe, /bin/bash), which is then observed making network connections to internal services, particularly Domain Controllers or other authentication servers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing web servers, Application servers, Internal network segments",
            "action": [
              "Create a detection rule for process creation events (Event ID 4688) where the 'Parent Process Name' is a known web server process (e.g., 'w3wp.exe', 'tomcat.exe') and the 'New Process Name' is a shell or common post-exploitation tool (e.g., 'cmd.exe', 'powershell.exe', 'whoami.exe', 'nltest.exe', 'net.exe').",
              "For each web server process, build a historical frequency distribution of all child processes it has ever spawned. Calculate a rarity score for each child process (e.g., 1 / frequency). Trigger an alert when a web server spawns a child process with a rarity score in the top 1% (e.g., spawning 'ntdsutil.exe' for the first time).",
              "Construct a process-network graph where nodes represent processes and IP addresses, and edges represent parent-child relationships or network connections. Train a graph-based anomaly detection model (e.g., using Graph Neural Networks) on a baseline of normal activity. An anomaly is flagged when a statistically improbable path is detected, such as 'w3wp.exe -> cmd.exe -> [Domain Controller IP]:389', which deviates from the learned graph structure."
            ]
          },
          {
            "description": "Multiple authentication requests are observed within a short time window containing identical values for fields that should be unique per session, such as a nonce or session token. This is particularly relevant for legacy protocols like NTLM.",
            "data_sources": [
              "Zeek ntlm.log",
              "Zeek kerberos.log",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Legacy application servers, Network traffic ingress/egress points",
            "action": [
              "In Zeek ntlm.log data, search for events where the same 'nonce' value is used in multiple NTLM_AUTHENTICATE messages from different source IPs or to different destination servers within a 5-minute window. Alert on any detected reuse of a nonce value.",
              "For each source IP, analyze the inter-arrival time (delta) between consecutive authentication requests (e.g., NTLM or Kerberos) destined for the same server. Establish a baseline distribution of these time deltas. Flag any source IP that generates a burst of requests where the time delta is in the bottom 1st percentile (near-zero), suggesting automated replay activity.",
              "Train a sequence-based autoencoder (e.g., LSTM or Transformer-based) on streams of authentication events for each user. Features should include protocol, source/destination IP, timestamp, and protocol-specific flags from Zeek logs. A replay attack, which inserts a previously seen event or sequence out of its normal temporal context, will cause a high reconstruction error from the model, thereby triggering an anomaly alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]