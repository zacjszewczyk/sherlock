[
  {
    "information_requirement": "Is the adversary collecting sensitive data or information via messaging applications?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1213.005",
        "name": "Messaging Applications",
        "evidence": [
          {
            "description": "A network connection, initiated by a known messaging application process on a managed endpoint, establishes communication with an external destination IP address or domain that is present on a threat intelligence feed of known malicious hosts (e.g., C2 servers, TOR nodes) or unapproved cloud storage providers.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log",
              "Sysmon Event ID 3",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), DNS Resolvers, User Endpoints",
            "action": [
              "Correlate process-aware network logs (Sysmon EID 3 or Windows EID 5156) with network flow data (Zeek conn.log) to identify connections made by messaging applications. Compare the destination IP address (`id.resp_h` in Zeek) and Server Name Indication (`server_name` in Zeek ssl.log) against a threat intelligence feed of known malicious C2 servers, TOR exit nodes, and unapproved cloud storage domains. Generate an alert for any match.",
              "For each user, establish a baseline of destination Autonomous System Numbers (ASNs) and countries from network logs for their messaging application traffic over a 30-day rolling window. Calculate the frequency of each destination. Generate an alert if a new connection goes to an ASN or country that appears in less than 1% of the user's historical connections, especially if combined with a data transfer volume (`orig_bytes`) in the top 5% for that user.",
              "Train a one-class SVM or isolation forest model using features derived from legitimate messaging traffic from Zeek logs. Key features should include: destination port, data volume (`orig_bytes` + `resp_bytes`), connection duration, protocol, and categorical features for destination ASN and country. Deploy the model to score new connections in real-time. Flag connections with an anomaly score in the top 1% for manual investigation."
            ]
          },
          {
            "description": "A messaging application process (e.g., slack.exe, msteams.exe) is created with command-line arguments indicative of automated or non-interactive use, such as those used by scripting engines (e.g., PowerShell, Python) to post messages, upload files, or interact with APIs.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Endpoints (Workstations, Laptops), Servers with Messaging Clients Installed",
            "action": [
              "Using process creation logs (Windows Event ID 4688 or Sysmon Event ID 1), create a detection rule that searches for messaging application process names (e.g., slack.exe, msteams.exe, discord.exe) executed with command-line arguments. Use regular expressions to find patterns matching file uploads, API token usage, or scripted messaging, such as `(?:--post-file|--channel|--token|-H|'Content-Type: application/json')`. Alert on any match.",
              "For each unique messaging application process, calculate the entropy of its command-line arguments across all invocations in a 30-day period to establish a baseline. For each new process creation, calculate the command-line entropy. Generate an alert if the entropy is more than 3 standard deviations above the mean for that process, suggesting the presence of encoded scripts or long API tokens. Also, flag any command-line argument string longer than the 99th percentile of historical lengths for that process.",
              "Develop a binary classification model (e.g., Random Forest) trained on labeled process creation events (benign vs. malicious automation). Extract features such as: process name, parent process name, command-line argument length, command-line entropy, and binary flags for the presence of keywords like 'http', 'api', 'upload', 'token', 'powershell'. Use the trained model to classify new process launch events. High-confidence 'malicious automation' classifications should trigger an immediate alert."
            ]
          },
          {
            "description": "The total volume of data uploaded (`orig_bytes` in Zeek) or the count of files transferred via a messaging application by a single user or from a single host significantly exceeds their established behavioral baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points",
            "action": [
              "Create a high-severity alert that triggers when the `orig_bytes` field in a single Zeek `conn.log` entry, associated with a known messaging application service, exceeds a static threshold of 500 MB. This acts as a tripwire for exceptionally large single-session transfers.",
              "For each user, calculate a 30-day rolling baseline of their daily data upload volume (sum of `orig_bytes` in `conn.log`) and file transfer counts (count of events in `files.log`) specifically for messaging application traffic. Generate an alert when a user's total daily upload volume or file count exceeds the 99th percentile of their individual historical baseline.",
              "For each user, implement a time series anomaly detection model (e.g., Seasonal-ARIMA) on their aggregate hourly data upload volume (`orig_bytes`) to messaging services. The model should learn the user's typical daily and weekly data transfer patterns. Trigger an alert if the actual observed data volume in an hour significantly exceeds the model's predicted upper confidence bound, indicating a potential bulk data exfiltration event."
            ]
          },
          {
            "description": "A messaging application process is observed with an anomalous parent process or running under a high-privilege, non-interactive system account. For example, it is spawned by a process other than `explorer.exe` (e.g., `svchost.exe`, `powershell.exe`) or runs as `NT AUTHORITY\\SYSTEM`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Endpoints, Application Servers, Domain Controllers",
            "action": [
              "Using Windows Event ID 4688 or Sysmon Event ID 1, create a detection rule that generates an alert if `NewProcessName` corresponds to a messaging application (e.g., 'slack.exe') AND (`SubjectLogonId` is '0x3e7' for SYSTEM account OR `ParentProcessName` is NOT 'explorer.exe'). Create a high-severity exception for known-good parent processes like software deployment tools.",
              "Over a 30-day period, build a frequency table of all observed (ParentProcessName, NewProcessName) pairs where `NewProcessName` is a messaging application. Calculate the probability of each unique pair occurring across the enterprise. Generate an alert when a new pair is observed that has a historical probability of less than 0.01% (e.g., `(wmic.exe, msteams.exe)`), indicating a highly rare and suspicious execution chain.",
              "Model process execution chains as a directed graph where nodes are processes and edges represent parent-child relationships. Train a graph-based anomaly detection algorithm on a baseline of normal process activity. Flag any new execution chain involving a messaging application that is identified as a structural anomaly, such as having an unusual depth or an ancestor process like `winlogon.exe` or a web server service."
            ]
          },
          {
            "description": "A network connection is initiated by a messaging application process on an endpoint to an internal IP address and port associated with a sensitive service (e.g., file shares, databases, domain controllers) that is not on an explicit allow-list of destinations for that application.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal Network Segments, Sensitive Data Enclaves (e.g., Database Zones, Developer Networks), User Endpoints",
            "action": [
              "Using host-based network connection logs (Sysmon Event ID 3 or Windows Event ID 5156), create a rule that alerts when the `Image` path points to a messaging client AND the `DestinationIp` is within a pre-defined sensitive internal IP range (e.g., database subnets, DC subnets) AND the `DestinationPort` corresponds to a sensitive service (e.g., 445, 1433, 3389, 5985). This rule should only trigger if the specific (Application, DestinationIp, DestinationPort) tuple is not on a pre-approved allow-list.",
              "For each messaging application, create a baseline of all internal (RFC1918) destination IP addresses and ports it communicates with across the enterprise over a 30-day period. Use frequency analysis to identify the most common destinations (e.g., internal API gateways). Generate an alert for any connection to an internal destination that is not in the top 99.9% of the frequency distribution, flagging it as a rare internal connection for investigation.",
              "Construct a network graph where nodes represent internal hosts and edges represent observed network connections. Apply a community detection algorithm (e.g., Louvain Modularity) to cluster hosts into functional groups (e.g., 'workstations', 'database servers'). Generate an alert if a messaging application process, typically residing in the 'workstations' community, initiates a connection to a host in a different, sensitive community (e.g., 'database servers'), as this indicates a cross-functional-boundary violation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]