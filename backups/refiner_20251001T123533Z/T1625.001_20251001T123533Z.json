[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by hijacking system runtime APIs? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1625.001",
        "name": "System Runtime API Hijacking",
        "evidence": [
          {
            "description": "A compliance check failure event from an MDM or MTD platform for an Android device, specifically for OS or file integrity. The event must detail a file hash mismatch for a critical system library (e.g., '/system/lib/libart.so') when compared against the organization's 'golden image' hash for the specific OS version and device model.",
            "data_sources": [
              "MDM event logs",
              "MTD alert logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log repositories for Mobile Device Management (MDM) and Mobile Threat Defense (MTD) platforms; the fleet of corporate-enrolled Android endpoint devices.",
            "action": [
              "Configure a SIEM rule to trigger a high-severity alert when an MDM/MTD log contains 'compliance_status: failed' and 'reason: File Integrity Mismatch' or 'OS Tampering'. On alert, extract the file hash and device ID. Automatically query threat intelligence feeds with the hash and cross-reference the device ID with asset inventory to identify the user. Escalate for immediate incident response if the hash is known-malicious or the modification is unauthorized.",
              "For each device model and OS version combination, ingest hourly counts of file integrity attestation failures. Calculate a 30-day rolling mean and standard deviation for these failures. Generate a medium-severity alert for any device group where the failure count in a given hour exceeds three standard deviations from its historical mean (Z-score > 3), indicating an anomalous spike in tampering activity.",
              "Train a time-series forecasting model (e.g., SARIMA) on historical, fleet-wide attestation failure counts per hour to predict expected failure volumes. In real-time, compare the observed failure count against the model's forecast. Generate a medium-severity alert if the observed count exceeds the upper bound of the model's 99% confidence interval for two consecutive hourly periods, signaling a statistically significant deviation from the normal pattern."
            ]
          },
          {
            "description": "Network logs from a single mobile device IP address show a combination of anomalous behaviors within a short time window, such as: connections to low-reputation destinations, highly periodic (low standard deviation of time intervals) C2 beaconing, high Shannon entropy in DNS queries indicative of Domain Generation Algorithms (DGA), and the use of a TLS client fingerprint (JA3) that is rare across the device fleet.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensor logs (e.g., Zeek) deployed at internet egress points, VPN concentrators, and wireless network controllers.",
            "action": [
              "Ingest Zeek conn.log and dns.log. Create a SIEM rule that triggers a high-severity alert if a destination IP ('id.resp_h') in conn.log or a queried domain in dns.log matches a high-confidence threat intelligence feed of malicious indicators. Correlate the source IP ('id.orig_h') with DHCP or MDM logs to identify the device and user for investigation.",
              "For each mobile device IP, calculate over a 15-minute window: (a) the Shannon entropy of unique DNS queries from Zeek dns.log, and (b) the standard deviation of connection start times to each unique destination from Zeek conn.log. Alert if a device's DNS entropy exceeds the 95th percentile of the fleet-wide baseline AND its connection time standard deviation falls below the 5th percentile, indicating likely DGA and C2 beaconing.",
              "From Zeek logs, create a feature vector for each connection (protocol, port, duration, bytes, JA3 hash). Train an unsupervised clustering model (e.g., DBSCAN) on a 30-day baseline to define normal behavior clusters. In real-time, classify new connections and flag any identified as noise (outliers). If a single device generates outlier connections at a rate exceeding the 99th percentile of the baseline outlier rate within a 5-minute window, escalate for investigation."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]