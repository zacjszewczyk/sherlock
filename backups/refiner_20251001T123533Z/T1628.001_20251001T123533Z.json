[
  {
    "information_requirement": "Is an adversary hiding malicious applications by suppressing their icons on managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1628.001",
        "name": "Suppress Application Icon",
        "evidence": [
          {
            "description": "An application package is identified in MDM application inventory logs for a device, but no corresponding LAUNCHER intent activity is found in mobile EDR logs for the same device and package name over a 30-day lookback period.",
            "data_sources": [
              "MDM ApplicationInventory",
              "MobileEDR LauncherIntents",
              "ThreatIntel PackageNameFeeds",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-owned and BYOD mobile endpoints, MDM/MTD Management Servers, SIEM Platform, Network Gateway, DNS Resolvers",
            "action": [
              "Execute a scheduled query that performs a left join from the MDM application inventory log source to the mobile EDR launcher intent log source, joining on device ID and package name. Trigger an alert for any package name from the inventory that has no corresponding launcher intent within the last 30 days. Suppress alerts for packages on a pre-defined allowlist of known non-launcher applications. Enrich positive results by cross-referencing the package name against threat intelligence feeds for known malicious identifiers.",
              "For all applications identified as lacking a launcher intent and not on an allowlist, calculate the fleet-wide installation prevalence (count of unique device installations). Establish a baseline distribution of prevalence for known-benign helper applications (e.g., plugins, services). Generate an alert for any non-launcher application whose installation count exceeds the 99th percentile of the benign baseline, indicating an anomalously widespread installation for its application type.",
              "Train and deploy a logistic regression model to produce a risk score for applications that lack a launcher intent. Engineer features from MDM logs (e.g., count of dangerous permissions, installation source, application age), and from network logs by correlating the device IP. Network features from Zeek logs should include the Shannon entropy of destination IP addresses ($$ H(X) = -\\sum p(x) \\log_2 p(x) $$) from conn.log, the entropy of queried domains from dns.log, and the ratio of connections to domains with low reputation scores. Flag applications for analyst review if their predicted probability of being malicious exceeds a defined threshold, such as $$ P(malicious) > 0.8 $$."
            ]
          },
          {
            "description": "A process creation event on an Android 10+ device shows a known launcher process parent spawning the system settings process ('com.android.settings') as a child, with command-line arguments that directly open a specific application's details page.",
            "data_sources": [
              "MobileEDR ProcessEvents",
              "Android Logcat ActivityManager",
              "HelpDesk Tickets"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoints (Android 10+), EDR/SIEM log aggregation platform, IT Help Desk System",
            "action": [
              "Create a SIEM correlation rule that triggers when a process creation event shows a `parent_process_name` matching an allowlist of known launchers (e.g., 'com.google.android.apps.nexuslauncher') and a `process_name` of 'com.android.settings'. The rule must validate that the `process_cmdline` contains strings indicating a direct navigation to an application's details page, such as 'com.android.settings.ApplicationDetailsPages' and 'package:'. Extract the package name from the command line and create an alert for investigation.",
              "For each application package name identified by the symbolic rule, maintain a daily count of 'launcher-to-settings' redirection events. Calculate a 30-day moving average ($$ MA_{30} $$) and standard deviation ($$ \\sigma_{30} $$) for this event count per application. Generate an alert when the daily count for any single application exceeds three standard deviations above its moving average ($$ DailyCount > MA_{30} + 3\\sigma_{30} $$), indicating a statistically significant spike in this suspicious behavior.",
              "Implement a sequence analysis model, such as a Hidden Markov Model (HMM), using time-series data from mobile EDR process and UI event logs. Define model states representing distinct user activities (e.g., 'HomeScreen', 'AppDrawer', 'SettingsMenu', 'AppDetailsPage'). Train the model on event sequences from a baseline of normal device usage to learn typical user navigation pathways and their transition probabilities. Identify the direct state transition from 'HomeScreen' to 'AppDetailsPage' as a low-probability, anomalous sequence. Score and alert on user sessions where this anomalous sequence occurs, as it indicates a synthesized icon was likely used."
            ]
          },
          {
            "description": "A static analysis report of an APK file, generated during an application vetting process, explicitly identifies the use of the `PackageManager.setComponentEnabledSetting` API with the `COMPONENT_ENABLED_STATE_DISABLED` flag targeting a component that is defined in the AndroidManifest.xml with both `android.intent.action.MAIN` and `android.intent.category.LAUNCHER` intents.",
            "data_sources": [
              "APK File Hashes",
              "Static Analysis Sandbox Reports",
              "Mobile App Reputation Service Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organizational application stores, Application vetting sandboxes, Developer CI/CD pipelines",
            "action": [
              "Deploy a YARA rule within the application vetting pipeline to scan APK files. The rule should be designed to detect the bytecode for the `setComponentEnabledSetting` method call and the integer constant for `COMPONENT_ENABLED_STATE_DISABLED`. Upon a match, trigger a secondary script to parse the `AndroidManifest.xml` and confirm the disabled component has a LAUNCHER intent filter. A confirmed match should automatically flag the application and block it from distribution.",
              "For each new APK submitted for vetting, extract a feature set of all API calls. Calculate the Jaccard distance ($$ d_J(A, B) = 1 - \\frac{|A \\cap B|}{|A \\cup B|} $$) between the new app's API set ($$ A $$) and a baseline feature set derived from a corpus of known-benign applications ($$ B $$). Also calculate the Shannon entropy of the `classes.dex` file to measure code complexity/obfuscation. Flag an application for manual review if it both contains the icon-hiding API and has a Jaccard distance and entropy score in the top 5th percentile of all scanned apps.",
              "Train a gradient boosting classifier (e.g., XGBoost) on a labeled dataset of benign and malicious APKs from a threat intelligence feed or historical analysis. Engineer features from static analysis reports, including the presence of specific suspicious API calls (e.g., `setComponentEnabledSetting`), the count of dangerous permissions requested in the manifest, the presence of known obfuscation tools, and the reputation of any embedded URLs or IP addresses. Deploy this model in the application vetting sandbox to automatically score each new APK. Reject applications with a malice score above a high threshold (e.g., $$ > 0.9 $$) and quarantine those in a medium-risk band (e.g., $$ 0.7 - 0.9 $$) for manual analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]