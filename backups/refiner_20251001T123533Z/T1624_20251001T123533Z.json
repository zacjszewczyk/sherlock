[
  {
    "information_requirement": "Is an adversary maintaining persistence on our mobile devices through event-triggered execution? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624",
        "name": "Event Triggered Execution",
        "evidence": [
          {
            "description": "An installed application's manifest (e.g., AndroidManifest.xml) declares one or more broadcast receivers for sensitive system events (e.g., 'android.intent.action.BOOT_COMPLETED', 'android.provider.Telephony.SMS_RECEIVED') and simultaneously requests high-risk permissions (e.g., 'android.permission.RECEIVE_SMS', 'android.permission.INTERNET'), where this combination of capabilities is inconsistent with the application's stated purpose or app store category.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Android Application Manifests (AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Mobile Device Management (MDM) server, Application vetting/sandbox environment",
            "action": [
              "Query MDM logs to identify applications that register broadcast receivers for sensitive events like 'android.intent.action.BOOT_COMPLETED'. For this subset, cross-reference their requested permissions for high-risk grants like 'android.permission.RECEIVE_SMS'. Compare the package names and signing certificates of any matches against a threat intelligence feed of known malicious mobile application indicators and alert on any match.",
              "Parse the manifests of all managed applications to extract all requested permissions and registered broadcast receivers. Calculate the fleet-wide frequency of each permission, each receiver, and each unique permission-receiver pair. For each application, calculate a rarity score by summing the inverse frequencies of its permission-receiver pairs. Group applications by their app store category, establish a baseline rarity score distribution, and flag any application whose score exceeds the 98th percentile for its category for manual review.",
              "Using a labeled dataset of benign and malicious Android application manifests, create feature vectors from one-hot encoded permissions and broadcast receivers. Train a Gradient Boosting classifier to predict a malice probability score from $$ 0.0 $$ to $$ 1.0 $$. Integrate the trained model into the application vetting pipeline and generate an alert for any new or updated application with a predicted malice score above a tuned threshold, such as $$ 0.90 $$. For each alert, generate and review SHAP (SHapley Additive exPlanations) values to identify which permissions and receivers most influenced the high score."
            ]
          },
          {
            "description": "A mobile device exhibits a measurable burst of anomalous network activity, such as a significant increase in connections, data volume, or high-entropy DNS queries, within a 5-minute window immediately following a system event (e.g., 'device boot', 'network connection change', 'application installed') logged by a Mobile Device Management (MDM) platform.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM Event Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, Internal and external DNS resolvers",
            "action": [
              "Correlate MDM event logs with network flow data (Zeek conn.log) using the device IP address and a 5-minute time window following the event timestamp. Isolate all network connections from the device immediately following a system boot event. Compare destination IP addresses, domains from Zeek dns.log, and JA3/JA3S hashes against threat intelligence feeds for known command and control (C2) infrastructure and alert on any positive match.",
              "For each device, create a 30-day historical baseline of network activity metrics (e.g., total connections, bytes out, unique DNS queries) in the 5-minute window after each type of system event. Calculate the mean and standard deviation for each metric to establish a normal profile. Compare live post-event activity against this profile and alert if any metric's Z-score exceeds a threshold of $$ 3.5 $$. Concurrently, calculate the Shannon entropy of the subdomain labels in DNS queries (Zeek dns.log) within the same window and alert if the score is anomalously high compared to the device's baseline, indicating potential Domain Generation Algorithm (DGA) activity.",
              "For each device, create a time series of feature vectors representing network activity (e.g., connection frequency, data volume, protocol mix) in the 5 minutes following a system boot. Train a Long Short-Term Memory (LSTM) autoencoder model on at least 30 days of this historical time-series data to learn the device's normal post-boot network behavior. Apply the trained model to live data and trigger an alert if the model's reconstruction error for a new post-boot window exceeds a statistically determined threshold, providing the error score and anomalous metrics for analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]