[
  {
    "information_requirement": "Is an adversary using SSL Pinning to conceal Command and Control communications on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1521.003",
        "name": "SSL Pinning",
        "evidence": [
          {
            "description": "A mobile application's network traffic, when passed through a TLS-inspecting proxy, exhibits a statistically significant increase in TLS handshake failures. This is evidenced by a spike in non-'ok' validation_status codes (e.g., 'self signed certificate in certificate chain', 'unable to get local issuer certificate') in Zeek ssl.log for connections originating from mobile device subnets, while direct, uninspected connections from the same application to the same server may succeed.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic egress points for mobile device VLANs (corporate-managed and guest Wi-Fi) where a TLS-inspecting proxy is deployed; Zeek sensors monitoring pre- and post-proxy traffic; DHCP server logs to map IPs to mobile device hostnames; MDM logs for device context.",
            "action": [
              "For connections originating from mobile IP ranges, join Zeek ssl.log with conn.log on the 'uid' field. Filter for events where ssl.log 'validation_status' is not 'ok' and conn.log 'conn_state' is one of 'REJ', 'RST0', or 'RSTRH'. Exclude connections where the 'server_name' from ssl.log belongs to a known-good application watchlist (e.g., banking, corporate apps). Match the resulting 'server_name' against a threat intelligence feed of known malicious C2 domains. An alert is generated on a match.",
              "Group all TLS connections by 'server_name' (application) from mobile IP ranges on an hourly basis. For each application, calculate the historical baseline (30-day rolling window) for the count of TLS validation failures (where 'validation_status' is not 'ok'). Generate an alert if the current hourly failure count for any application exceeds 3 standard deviations above its historical mean. Also, calculate the ratio of failed to successful connections per hour for each application and alert if this ratio exceeds the 95th percentile of its own 30-day history.",
              "For each mobile application (identified by 'server_name'), apply a time-series anomaly detection model (e.g., ARIMA or Prophet) to the hourly count of TLS validation failures. Train the model on at least 30 days of historical data to learn normal seasonality and patterns. An alert is generated when the model detects an anomaly where the observed failure count significantly deviates from the predicted count (e.g., the residual error's Z-score is greater than 3.5), indicating an abnormal spike in connection failures."
            ]
          },
          {
            "description": "A mobile application establishes a successful TLS connection (conn_state is 'SF' in Zeek conn.log) using a certificate that is either self-signed (certificate.issuer equals certificate.subject in Zeek x509.log) or issued by a statistically rare Certificate Authority (CA). A rare CA is defined as one that has issued less than a defined threshold (e.g., 0.05%) of all certificates observed across the network in the last 90 days. This indicates the application trusts a specific certificate or public key outside of the device's standard trust store.",
            "data_sources": [
              "Zeek x509.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Zeek sensors at internet egress points monitoring all outbound traffic from designated mobile device subnets; Certificate Transparency (CT) logs for external validation of observed certificates; Mobile Device Management (MDM) platforms to correlate application names, versions, and installation dates with network activity; Threat intelligence platform containing known malicious certificate hashes and C2 domains.",
            "action": [
              "Join Zeek conn.log, ssl.log, and x509.log on their respective unique identifiers. Filter for successful connections ('conn_state' = 'SF') from mobile IP ranges where the certificate is self-signed ('x509.log'.certificate.issuer equals 'x509.log'.certificate.subject). For these events, match the certificate hash or the 'server_name' against a threat intelligence feed of known mobile malware indicators. Generate a high-priority alert upon a match.",
              "On a daily basis, calculate the frequency of each certificate issuer ('certificate.issuer' in x509.log) observed over the last 90 days. Identify 'rare issuers' appearing in less than 0.05% of all observed certificates. Search for successful connections from mobile devices ('conn_state' = 'SF') that use a certificate from a rare issuer. For each such connection, calculate the Shannon entropy of the 'server_name'. Generate an alert if a connection both uses a rare issuer and has a high server name entropy score (e.g., > 3.5).",
              "Train a classification model (e.g., Random Forest) to predict if a TLS session from a mobile device is malicious. Use features such as: is_self_signed (boolean), issuer_rarity (float), certificate_validity_period (integer), server_name_entropy (float), JA3/JA3S hash frequency (float), connection duration (integer), and total bytes transferred (integer). The model should be trained on analyst-labeled data. In production, score each new TLS session from a mobile device; sessions with a predicted probability of being malicious above a set threshold (e.g., 0.9) trigger an alert for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]