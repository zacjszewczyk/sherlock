[
  {
    "information_requirement": "Is an adversary using a legitimate external web service for command and control of a compromised mobile device? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1481.002",
        "name": "Bidirectional Communication",
        "evidence": [
          {
            "description": "A mobile device application establishes periodic, low-volume 'heartbeat' connections characterized by a low standard deviation of inter-arrival times (e.g., less than 1 second over a 10-minute window), or initiates anomalous high-volume data transfers to a legitimate web service, where the traffic pattern deviates more than 3 standard deviations from an established 30-day baseline for that specific user, device, and application.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network security monitoring sensors at internet gateways, corporate Wi-Fi gateways, VPN concentrators, and Cloud Access Security Broker (CASB) log sources where mobile device traffic is observable.",
            "action": [
              "Query network logs (Zeek ssl.log 'server_name' field and Zeek conn.log 'id.resp_h') against a threat intelligence feed of domains, subdomains, and IPs known to be abused for C2 via legitimate services. Generate a high-severity alert for any match originating from a mobile device network segment.",
              "For each unique mobile device IP and destination service pair (from Zeek conn.log and ssl.log), establish a 30-day rolling baseline for connection frequency, duration, and data volume (orig_bytes + resp_bytes). Calculate the inter-arrival time (delta between 'ts' values) for sequential connections. Generate an alert if the sum of bytes for a single connection exceeds the 99th percentile of its baseline, OR the standard deviation of the inter-arrival time over a 10-minute window is less than 1 second, indicating automated beaconing.",
              "For each device-service pair, create a time series of total data volume (orig_bytes + resp_bytes) aggregated into 5-minute intervals from Zeek conn.log. Train a time-series forecasting model (e.g., SARIMA, Prophet) on at least 30 days of historical data to learn normal traffic patterns, including seasonality. Score live traffic against the model's forecast and generate an alert when the observed traffic volume in an interval exceeds the model's 99% prediction interval."
            ]
          },
          {
            "description": "An outbound HTTP/S request from a mobile application to a legitimate web service contains a URI path or query string with a Shannon entropy value greater than 4.5, or a value that is a statistical outlier for that specific service. Alternatively, the request includes a User-Agent string that does not conform to a known-good format for common mobile browsers or the specific application.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SSL/TLS-inspecting forward proxies, corporate DNS servers, and other network traffic inspection points capable of decrypting and logging HTTP/S metadata.",
            "action": [
              "Scan all decrypted Zeek http.log records. Generate a high-severity alert if the 'uri' field matches a known malicious C2 URI regex OR the 'user_agent' field matches a curated list of non-standard or known-bad User-Agent strings used by mobile malware.",
              "For each destination web service (identified via Zeek ssl.log 'server_name'), establish a baseline of normal URI structures from Zeek http.log. For each live request, calculate the Shannon entropy of the 'uri' field. Generate an alert if the URI entropy score is a statistical outlier (e.g., exceeds 3 standard deviations above the mean entropy for that service) or surpasses a high absolute threshold such as 4.5.",
              "From historical Zeek http.log data, engineer features for each URI, including length, query parameter count, percentage of non-alphanumeric characters, and Shannon entropy. Train a classification model (e.g., Random Forest) using a labeled dataset of known-benign and known-malicious C2 URIs. Deploy the model to score all new mobile device HTTP requests and generate an alert for any request classified as malicious with a confidence score above a defined threshold (e.g., 0.9)."
            ]
          },
          {
            "description": "A mobile application, as identified by MDM/EDR logs, generates network traffic to a destination service (e.g., 'github.com', 'pastebin.com') that is statistically rare for its assigned application category (e.g., a 'Calculator' app connecting to a 'Development Tools' service) or for the user's role within the organization.",
            "data_sources": [
              "Mobile EDR/MDM logs",
              "Zeek conn.log",
              "Zeek ssl.log",
              "HR Information System Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints via MDM/EDR agents, MDM/EDR management consoles, and network chokepoints like corporate Wi-Fi gateways or Cloud Access Security Brokers (CASBs).",
            "action": [
              "Define a security policy that maps high-risk or sensitive applications to an explicit whitelist of allowed network destinations. Using MDM/EDR logs to identify the source application process name and Zeek ssl.log 'server_name' for the destination, continuously monitor for policy violations. Generate a high-severity alert if a sensitive application communicates with any destination not on its approved whitelist.",
              "Ingest MDM/EDR logs to categorize all managed applications (e.g., 'Productivity', 'Social'). For each application category, profile the set of destination services (from Zeek ssl.log 'server_name') contacted over a 30-day period. Calculate the prevalence of each service within each app category (e.g., 'github.com' is contacted by 0.5% of 'Utility' apps). Generate a medium-severity alert when an application communicates with a service whose prevalence within that application's category is below a rarity threshold (e.g., < 1%).",
              "Model the relationship between mobile applications and destination services as a bipartite graph using MDM and Zeek log data. Apply a community detection algorithm (e.g., Louvain Modularity) to identify naturally occurring clusters of apps and the services they use. Generate an alert when a connection is observed from an app to a service outside of its primary community, scoring the anomaly based on the 'distance' between the communities in the graph."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]