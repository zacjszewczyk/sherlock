[
  {
    "information_requirement": "Is an adversary using native code to obscure malicious activity on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "An APK's native library (.so file) exhibits characteristics of packing or obfuscation, defined as: 1) a calculated Shannon entropy value for the executable section greater than 7.5, or 2) the library exports three or fewer JNI functions, with 'JNI_OnLoad' being one of them, a common pattern for dynamically registering many more functions at runtime to hide them from static analysis.",
            "data_sources": [
              "APK static analysis reports (JSON/XML)",
              "MDM application inventory logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application vetting system (static analysis sandbox), MDM server application inventory database, and file systems of enrolled mobile devices.",
            "action": [
              "For all applications in the MDM inventory, query the corresponding static analysis report for native library (.so) file hashes. Match these hashes against a threat intelligence feed of known malicious or packed libraries. Generate a critical alert for any match, including device, user, and application details.",
              "For each library with no IOC match, parse its static analysis report to extract the Shannon entropy of its executable section and the list of exported JNI functions. Create an alert if a library's entropy exceeds 7.5. Separately, create an alert if a library exports three or fewer functions and 'JNI_OnLoad' is one of them. Correlate alerts from both conditions for a single library to increase confidence.",
              "Score all new or updated native libraries using a pre-trained binary classification model (e.g., Gradient Boosting). The model will use features such as file size, executable section size, Shannon entropy, the count of imported and exported functions, the presence of specific JNI functions (JNI_OnLoad), and the count of string imports related to dynamic symbol resolution (e.g., 'dlsym'). Escalate any library with a predicted malicious probability score greater than 0.85 for manual reverse engineering."
            ]
          },
          {
            "description": "A process associated with an Android application is observed loading a library from a non-standard, writable directory (e.g., /data/data/[app_name]/files, /sdcard/downloads) within 120 seconds after the device downloaded a file with a .so, .dex, or .jar extension from a low-reputation domain.",
            "data_sources": [
              "Android Logcat streams from MDM",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log",
              "Mobile EDR file modification events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise wireless and VPN network traffic inspection points, DNS resolvers, and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "In the SIEM, create a correlation rule that joins Zeek dns.log, files.log, and Android Logcat data by device IP address and a 120-second time window. Generate a high-severity alert if a DNS query to a domain on a threat intelligence blocklist is followed by a download of a file ending in .so, .dex, or .jar, and a subsequent Android Logcat message containing 'System.load' or 'System.loadLibrary' with a path outside of the standard '/data/app/' directory.",
              "For each application package name, establish a historical baseline of library load paths from Android Logcat data. Calculate the frequency of loads originating from non-standard, world-writable directories (e.g., '/sdcard/', '/data/local/tmp'). Alert if an application's rate of loading from non-standard paths exceeds 3 standard deviations above its own 30-day moving average for such activity.",
              "Implement a sequence analysis model (e.g., a Hidden Markov Model or Recurrent Neural Network) trained on labeled event chains. Feed the model sequences of events per device, such as [DNS Query to new TLD -> File Download (.so) -> Library Load from /data/data/.../files]. Flag event sequences that have a high probability of matching a trained malicious pattern for analyst review."
            ]
          },
          {
            "description": "An application uses Java Reflection APIs (e.g., 'Class.forName', 'Method.invoke') to load and execute functions from a native library, particularly when the target class or method names are obfuscated (e.g., base64 encoded, encrypted) and retrieved at runtime.",
            "data_sources": [
              "Mobile EDR API monitoring logs",
              "Android Logcat streams from MDM"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR/MTP agent data feeds and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "Create a SIEM rule that triggers when an EDR log shows a call to 'java.lang.reflect.Method.invoke' immediately preceded by 'java.lang.System.loadLibrary' within the same thread and a short time window (e.g., 100ms). Escalate priority if the method name argument to 'invoke' is not a plaintext string within the APK, indicating dynamic resolution.",
              "For each application, baseline its normal use of Java Reflection. Using EDR logs, calculate the Shannon entropy of string arguments passed to reflection-related methods like 'Class.forName' and 'Method.invoke'. Alert if the entropy for a given call exceeds the 98th percentile of all observed reflection calls for that application, suggesting the name was deobfuscated at runtime.",
              "Train a supervised classifier on API call traces from a dynamic analysis sandbox. Use features like the sequence of API calls, the presence of reflection APIs, the entropy of their arguments, and the presence of dynamic code loading APIs. Classify API traces as benign or suspicious, flagging suspicious behavior involving reflection and native code for analyst investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary executing malicious commands or binaries on mobile devices via native code? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1575",
        "name": "Native API",
        "evidence": [
          {
            "description": "A native library (.so file) from an APK contains evidence of command execution capabilities, defined as: 1) importing common execution-related C functions such as 'system', 'execve', 'execl', 'execvp', or 'popen', or 2) containing embedded strings indicative of shell commands, such as '/system/bin/sh', 'su', 'pm install', 'am start', 'reboot', or 'setprop'.",
            "data_sources": [
              "APK static analysis reports (JSON/XML)",
              "MDM application inventory logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application vetting system (static analysis sandbox) and MDM application inventory database.",
            "action": [
              "During static analysis of an APK, scan all included native libraries for a blocklist of imported C functions ('system', 'execve', 'popen') and embedded strings ('/bin/sh', 'su'). Compare the parent application's package name against an allowlist of approved tools that legitimately use these functions. Generate a medium-severity alert for any non-allowlisted application that contains these indicators.",
              "Implement a risk scoring model. For each suspicious indicator (e.g., 'system' import, 'su' string), calculate its prevalence across all enterprise mobile apps. Assign a risk score to each indicator that is inversely proportional to its frequency. Sum the scores for each library and flag applications whose total library risk score exceeds 3 standard deviations above the mean score for all applications.",
              "Train a supervised classification model (e.g., Random Forest) to classify applications as 'potential native executor' or 'benign'. Use features from static analysis reports, including a binary flag for each suspicious function import, the count of shell-like strings, the set of requested Android permissions, and the ratio of the executable section size to the total file size. Escalate applications classified as 'potential native executor' with high confidence (>0.90) to a dynamic analysis sandbox."
            ]
          },
          {
            "description": "An application with one or more native libraries generates network traffic consistent with C2 beaconing. This is defined as repeated connections to the same destination with a low standard deviation in time intervals (jitter), small and consistent packet sizes (e.g., < 2KB), a consistent TLS fingerprint (JA3/JA4S hash), and a destination that is not on a known-good service allowlist.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM application inventory logs",
              "Mobile EDR network connection logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewall/Proxy), Enterprise DNS servers, VPN concentrators, and mobile endpoint network logs.",
            "action": [
              "Ingest Zeek conn.log and dns.log into the SIEM and enrich with threat intelligence feeds. Generate a high-severity alert for any connection from a mobile device IP to a destination IP, domain, or JA3/JA4S hash on a known C2 blocklist. Correlate the device IP and timestamp with Mobile EDR logs to identify the responsible process and application.",
              "For each Source IP, Destination IP, Destination Port, and JA3 hash tuple in Zeek conn.log over a 24-hour window, calculate the standard deviation of the time delta between connections and the standard deviation of the 'orig_bytes' field. Alert on connections that exhibit low standard deviation in both metrics (e.g., time delta stddev < 1.5s, byte count stddev < 100 bytes) and where the destination is not on an established commercial service allowlist (e.g., Google, Apple, AWS).",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to network flow data from Zeek conn.log. Use features such as connection duration, total bytes, protocol, destination port, time-between-connections standard deviation, byte count standard deviation, and the entropy of the destination domain name. Isolate and investigate small, dense clusters of activity that are distinct from large clusters of benign traffic, as these often represent unidentified C2 channels."
            ]
          },
          {
            "description": "A process associated with a mobile application, which is known to contain native libraries, spawns a child process (e.g., '/system/bin/sh', 'su') or executes a command via 'Runtime.exec()' that is not part of its established behavioral baseline.",
            "data_sources": [
              "Mobile EDR process event logs",
              "Android SELinux audit logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR/MTP agent data feeds, and real-time log streams from enrolled mobile endpoints.",
            "action": [
              "Create a SIEM rule that alerts on any process creation event from a Mobile EDR where the parent process is a non-system mobile application and the child process name is 'sh', 'su', or 'pm'. Cross-reference the parent application against an allowlist of approved tools that legitimately spawn these processes. An alert signifies potential unauthorized command execution.",
              "For each application package name, build a profile of its normal child process activity over a 30-day period from EDR logs. The profile should contain the set of child process names and command-line patterns. Alert if an application spawns a child process that has never been seen before for that application across the entire device fleet (a 'first seen in fleet' event).",
              "Train a classification model (e.g., an Isolation Forest) on process creation events to detect anomalies. Features should include: parent process package name, child process name, command-line argument count, and the presence of sensitive keywords in arguments (e.g., 'setprop', 'install', 'reboot'). The model will flag events that deviate significantly from the learned normal behavior for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]