[
  {
    "information_requirement": "Has an adversary exploited a software vulnerability to gain initial access to a mobile device? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1664",
        "name": "Exploitation for Initial Access",
        "evidence": [
          {
            "description": "A mobile device initiates a network connection to an IP or domain on a mobile-specific threat intelligence feed, or its network traffic exhibits anomalous characteristics in data volume, destination ports, or TLS fingerprints compared to its own historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, Guest Wi-Fi network, VPN concentrators, Internet gateway proxy/firewall logs, and MDM/UEM servers.",
            "action": [
              "Ingest a mobile-specific threat intelligence feed of known malicious IPs, domains, and SSL certificate hashes. Create a detection rule that queries Zeek `conn.log`, `dns.log`, and `ssl.log` for any connections from mobile devices where the destination IP (`resp_h`), requested domain (`query`), or certificate subject (`subject`) matches an indicator from the feed. Generate a high-severity alert upon a match.",
              "For each mobile device, establish a 30-day rolling baseline of network behavior using Zeek logs. Calculate daily metrics including total data transferred (`orig_bytes` + `resp_bytes`), Shannon entropy of destination ports (`resp_p`), and the set of unique JA3/JA3S hashes. Generate a medium-severity alert if the daily data volume exceeds the 95th percentile, port entropy falls below the 10th percentile, or a new JA3/JA3S hash is observed for the first time for that device.",
              "For each device, train a Long Short-Term Memory (LSTM) Autoencoder on sequences of historical network connection vectors from Zeek `conn.log` (features: `duration`, `orig_bytes`, `resp_bytes`, `proto`, `resp_p`). In real-time, feed new connection sequences into the model and calculate the reconstruction error. Generate a medium-severity alert if the reconstruction error exceeds a dynamic threshold, such as the 99th percentile of errors from the training set, indicating a significant deviation from learned normal patterns."
            ]
          },
          {
            "description": "A mobile device downloads a file that matches a known malicious hash, is an application package (.apk, .ipa) from an unapproved third-party domain, or has a mismatch between its server-provided MIME type and Zeek's inferred file type.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, Web Proxy, Guest Wi-Fi network, Corporate Wi-Fi network segments, and Content Delivery Network (CDN) logs.",
            "action": [
              "From Zeek `files.log`, compare the `md5` and `sha1` hash of every downloaded file against a threat intelligence feed of mobile malware hashes, alerting on a match. Separately, from `http.log`, identify requests for files ending in `.apk` or `.ipa`. Check if the `host` or `referrer` domain is on a predefined allowlist of official app stores (e.g., `play.google.com`, `apps.apple.com`). Generate a high-severity alert for any app download from an unapproved source.",
              "Using Zeek `files.log`, establish a fleet-wide baseline rate of mismatches between the server-provided `mime_type` and the Zeek-analyzed `inferred_mime_type`. For each mobile device, track its daily mismatch rate. Generate a medium-severity alert if a device's daily rate exceeds 3 standard deviations above the fleet-wide mean, indicating an abnormal frequency of potentially obfuscated file downloads.",
              "Engineer lexical and contextual features for all URLs associated with file downloads (from `http.log` and `dns.log`), including URL length, query entropy, TLD, and domain age. Use a pre-trained classification model (e.g., Gradient Boosting) to generate a real-time maliciousness score for each URL. Escalate any URL associated with a file download that receives a score greater than 0.9 for analyst review."
            ]
          },
          {
            "description": "A mobile device receives an inbound connection from a known push notification service and, within a short time window (e.g., under 5 seconds), initiates an outbound connection to a newly observed or known-malicious domain. This sequence suggests automated exploit activity bypassing user interaction.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network, Guest Wi-Fi network, Internet Gateway, and VPN termination points.",
            "action": [
              "Maintain an allowlist of IP ranges for push notification services (e.g., APNS, FCM) and a blocklist of IPs/domains associated with mobile spyware. Correlate Zeek `conn.log` events to detect sequences where an inbound connection from a push service IP is followed within 60 seconds by an outbound connection from the same device to an indicator on the spyware blocklist. Generate a critical-severity alert on detection.",
              "For each mobile device, baseline the time delta between receiving a push notification (inbound from push service IP in `conn.log`) and the subsequent user-initiated outbound connection. Create a probability distribution of these time deltas. Generate an alert if a post-notification outbound connection occurs in a statistically improbable short time (e.g., below the 5th percentile of the user's baseline) AND the destination is a domain not seen by that device in the last 30 days.",
              "Model each device's network activity as a sequence of states (e.g., `Idle`, `Receiving_Notification`, `User_Initiated_Traffic`). Train a Hidden Markov Model (HMM) on historical data to learn the normal transition probabilities between states. In production, flag any observed state transition with a very low probability according to the model, such as a direct transition from `Receiving_Notification` to a state representing beaconing to a low-reputation domain, which indicates a bypass of expected user behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]