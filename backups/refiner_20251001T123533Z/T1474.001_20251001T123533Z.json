[
  {
    "information_requirement": "Has an adversary compromised our mobile applications by injecting malicious code into their software dependencies or development tools? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474.001",
        "name": "Compromise Software Dependencies and Development Tools",
        "evidence": [
          {
            "description": "A mobile application, running on a corporate-managed device, generates network traffic that meets one or more of the following measurable conditions: (1) connection to a destination IP address or domain on a current threat intelligence feed; (2) utilization of an SSL certificate issuer or JA3/JA3S hash with a prevalence of less than 1% across the enterprise mobile device fleet; (3) a 24-hour total data egress volume that exceeds the 95th percentile of the application's 30-day rolling average; (4) communication using a user-agent string not present in an established allowlist of known mobile application libraries and frameworks.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Zeek http.log",
              "Zeek files.log",
              "Mobile Device Management (MDM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.",
            "action": [
              "Create a SIEM rule that joins network logs (Zeek conn.log, dns.log) from the mobile device IP space with threat intelligence feeds. Generate a high-severity alert for any connection matching a known malicious IP, domain, or JA3/JA3S hash. Also, alert on any HTTP request from these devices where the User-Agent string matches a known malicious signature.",
              "For each mobile application, establish a 30-day rolling baseline of network behavior. A) Using Zeek conn.log, calculate the 95th percentile for daily data egress per application and alert if the current daily volume exceeds this threshold. B) Using Zeek dns.log, calculate the Shannon entropy of requested second-level domains per application per hour; alert on entropy values that are more than 3 standard deviations above the application's historical mean. C) Using Zeek ssl.log and http.log, build a frequency table of all SSL certificate issuers and JA3 hashes seen across all mobile devices. Alert when an application uses an issuer or hash that falls in the bottom 1% of prevalence.",
              "Implement an unsupervised anomaly detection model, such as an Isolation Forest, using features from Zeek logs. Features should include: conn_state, protocol, service, connection duration, orig_bytes, resp_bytes from conn.log; certificate validity period, server_name from ssl.log; and user_agent from http.log. Train the model on historical network data to identify outlier connections that deviate significantly from established patterns of legitimate application traffic. Flag these outliers for analyst investigation as potential command-and-control channels."
            ]
          },
          {
            "description": "A software development process on a developer workstation or build server exhibits one or more of the following behaviors: (1) spawns a child process, such as powershell.exe or cmd.exe, containing command-line arguments with base64 encoded commands or download strings (e.g., 'IEX', 'DownloadString'); (2) creates an unsigned child process that is not on an established allowlist for that specific parent process; (3) initiates a network connection to a destination IP or domain first observed across the enterprise within the last 72 hours; (4) modifies critical project configuration or dependency lock files (e.g., build.gradle, Podfile, package.json, yarn.lock, Podfile.lock) outside of a standard source control commit or package manager operation, as detected by file integrity monitoring.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Sysmon Event ID 1",
              "Windows Sysmon Event ID 3",
              "Windows Sysmon Event ID 11",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer endpoints and continuous integration/continuous delivery (CI/CD) build servers within the corporate network.",
            "action": [
              "Create a detection rule using Windows Event ID 4688 or Sysmon Event ID 1 that triggers when a primary development process (e.g., `devenv.exe`, `xcodebuild`, `MSBuild.exe`, `gradle.bat`) spawns a suspicious child process (`powershell.exe`, `cmd.exe`, `wscript.exe`) with obfuscated or high-risk command-line arguments (e.g., `-enc`, `-w hidden`, `IEX`, `DownloadString`). Correlate with Windows Event ID 4104 (PowerShell Script Block Logging) to deobfuscate and inspect the full script content for malicious activity. Alert on any matches.",
              "For each developer host and build server, establish baselines of normal activity. A) Using Sysmon Event ID 1, profile the historical parent-child process relationships. Alert when a development tool spawns a new, never-before-seen child process. B) For command lines in Sysmon Event ID 1, calculate the entropy and length; alert when a command line's entropy or length exceeds 3 standard deviations from the historical norm for that specific parent-child pair. C) Using Sysmon Event ID 3 and Zeek dns.log, track the age of domains contacted by development tools; alert if a connection is made to a domain registered within the last 30 days.",
              "Train a supervised classification model (e.g., Random Forest or Gradient Boosting) on labeled host event data. Use features from Sysmon Event ID 1 (ParentProcessName, ProcessName, CommandLine Entropy, ProcessIntegrityLevel), Event ID 3 (DestinationIp, DestinationPort, DestinationIsIpv4), and Event ID 11 (TargetFilename). The model will classify event chains originating from development tools as 'benign' or 'suspicious supply chain attack'. 'Suspicious' classifications should generate an alert for immediate SOC investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]