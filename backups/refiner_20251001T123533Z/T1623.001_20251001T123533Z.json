[
  {
    "information_requirement": "Is an adversary executing unauthorized commands or scripts on mobile devices via a Unix shell? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A shell process ('sh', 'bash', 'zsh') is spawned by a parent application whose bundle ID is not present in the corporate allowlist of approved shell-spawning applications.",
            "data_sources": [
              "MTD ProcessEvents.log",
              "UEM ApplicationInventory.csv"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM platform for log correlation, UEM/MDM servers hosting application inventories, Cloud-hosted Mobile Threat Defense (MTD) platform log repository, Individual corporate-managed mobile endpoints.",
            "action": [
              "Create and maintain an allowlist of application bundle IDs authorized to spawn shell processes, derived from the UEM application catalog and known administrative/security tools. Ingest MTD process creation logs into the SIEM. Deploy a SIEM rule that triggers a high-severity alert when a process name matching ('sh', 'bash', 'zsh') is created by a parent application bundle ID not on the allowlist.",
              "For each application bundle ID, establish a 30-day baseline of shell execution frequency per user. Calculate the mean and standard deviation of shell executions for each app-user pair. Generate a medium-severity alert when an application's daily shell execution count for a specific user exceeds 3 standard deviations above its historical mean, indicating anomalous behavior.",
              "Engineer features from MTD logs (e.g., parent process name, parent app signature, app installation source, user role) for known benign and malicious shell spawning events. Train a supervised classification model (e.g., Random Forest, Gradient Boosting) to predict the probability of a new parent-shell event being malicious. Deploy the model to score events in real-time and alert on those with a probability score greater than 0.9."
            ]
          },
          {
            "description": "A shell command line contains high-risk substrings (e.g., 'curl ... | sh') and is associated with a network connection to a destination IP or domain listed in threat intelligence feeds.",
            "data_sources": [
              "MTD ProcessEvents.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Platform (TIP) Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM platform for log correlation and alerting, Network egress points instrumented with Zeek sensors, Corporate DNS resolvers logging to Zeek, Cloud-hosted Mobile Threat Defense (MTD) platform log repository.",
            "action": [
              "Deploy a SIEM rule that uses regular expressions to search MTD command-line arguments for high-risk patterns (e.g., 'curl .*\\|.*sh', 'nc -e', 'base64 -d'). If a match is found, correlate the event timestamp and device IP with Zeek conn.log and dns.log to find the destination IP/domain. Generate a high-severity alert if the destination is present in an active threat intelligence feed.",
              "Calculate the Shannon entropy for all shell command-line strings observed in MTD logs over a 30-day baseline period. Establish a threshold at the 99th percentile of these entropy scores. Deploy a real-time SIEM rule to calculate the entropy of new command-line arguments and generate a medium-severity alert when a command's entropy score exceeds the threshold.",
              "Collect a large dataset of command-line strings from MTD logs and label them as benign or malicious. Train a sequence-based deep learning model (e.g., an LSTM or a Transformer) to learn the syntactical patterns of malicious commands. Deploy the model to score new shell commands and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "Execution of a superuser binary ('su') is detected by the MTD on a device that is concurrently reported as 'non-rooted' and 'compliant' by the UEM platform.",
            "data_sources": [
              "MTD ProcessEvents.log",
              "UEM ComplianceState.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SOAR platform for automated enrichment and response, UEM/MDM API endpoint for compliance state, SIEM platform for initial detection, MTD platform log repository.",
            "action": [
              "Create a critical-severity SIEM rule that triggers on any process creation event where the process name is 'su'. Upon trigger, execute a SOAR playbook to query the UEM/MDM API for the device's real-time compliance status. If the device is reported as 'compliant' and 'non-rooted', escalate the alert and initiate automated device quarantine via the UEM.",
              "Aggregate hourly counts of unique devices executing 'su' across the entire mobile fleet. Calculate a 7-day rolling average and standard deviation for this count. Generate a high-severity alert if the current hourly count of devices executing 'su' exceeds 3 standard deviations above the rolling average, indicating a potential widespread attack.",
              "After confirming a malicious 'su' execution, collect post-event telemetry for the affected device (e.g., child processes, network connections from Zeek conn.log, subsequent MTD alerts). Use an unsupervised clustering algorithm (e.g., DBSCAN) on these feature vectors to identify other devices in the fleet exhibiting similar post-compromise behavior, thereby scoping the full extent of the campaign."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]