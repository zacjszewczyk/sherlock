[
  {
    "information_requirement": "Is an adversary collecting calendar entries from managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.001",
        "name": "Calendar Entries",
        "evidence": [
          {
            "description": "An application with calendar access permissions (android.permission.READ_CALENDAR or NSCalendarsUsageDescription) establishes a network connection where either the destination is a known malicious indicator or the volume of data transferred is a significant statistical anomaly compared to the application's historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile Device Management (MDM) Application Inventory",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate network gateways, VPN concentrators, DNS resolvers, and MDM/UEM platforms monitoring mobile device traffic and application installations.",
            "action": [
              "Correlate MDM application inventory data with network logs. For any device running an application with calendar permissions, query Zeek conn.log and dns.log for connections made by that device's IP. Join the destination IP or domain against a threat intelligence feed of known malicious C2 or data exfiltration nodes. An exact match triggers a high-severity alert.",
              "For each unique application-device pair with calendar access, establish a 30-day baseline of total bytes transferred (orig_bytes + resp_bytes from Zeek conn.log) per session. Alert when a new session's data volume exceeds the 99th percentile of this baseline. Concurrently, calculate the Shannon entropy of requested subdomains in Zeek dns.log for the connection's destination domain; an entropy score greater than 3.5 combined with a high-volume transfer indicates potential DGA and should be prioritized.",
              "Implement a time-series anomaly detection model, such as an LSTM autoencoder, on outbound data volume per device, aggregated into 1-hour windows. Train the model on historical Zeek conn.log data to learn normal network behavior. Trigger an alert if the model's reconstruction error for a given hour surpasses a dynamic threshold (e.g., three standard deviations above the mean reconstruction error), indicating a significant deviation from the established norm."
            ]
          },
          {
            "description": "A mobile application requests calendar access permissions and is not on the corporate allowlist, while also possessing risk attributes such as a low installation count across the enterprise or belonging to a category (e.g., 'Games') not typically associated with calendar functions.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Threat Defense (MTD) Scan Results",
              "Public App Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Mobile Threat Defense (MTD) platform, and public application stores (e.g., Google Play, Apple App Store).",
            "action": [
              "Continuously ingest application inventory from the MDM/MTD platform. For any application requesting calendar permissions, compare its bundle ID or cryptographic signature against a curated corporate allowlist and a denylist of known malicious applications. An application present on the denylist or absent from the allowlist triggers an alert for review.",
              "For each application with calendar permissions not on the allowlist, calculate its installation prevalence as a percentage of the total device fleet. Assign a risk score based on its public App Store category (e.g., 'Games' = 10, 'Productivity' = 1). An application with a low prevalence (e.g., < 2% of devices) and a high-risk category score should be flagged for manual security vetting.",
              "Develop and deploy a classification model, such as a Random Forest, to produce a 'malice probability score' from 0.0 to 1.0 for applications requesting calendar access. Use features from MDM and public app store data, including: requested permissions count, developer reputation, app category, user rating variance, and enterprise installation prevalence. Rank all applications by this score to create a prioritized queue for security analyst investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]