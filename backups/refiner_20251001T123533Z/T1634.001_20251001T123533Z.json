[
  {
    "information_requirement": "Is an adversary attempting to steal credentials from mobile device keychains? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1634.001",
        "name": "Keychain",
        "evidence": [
          {
            "description": "A mobile device's network traffic exhibits patterns indicative of a jailbroken state. Evidence includes: (1) DNS queries in dns.log for domains associated with jailbreaking tools (e.g., cydia.saurik.com, unc0ver.dev); (2) TLS handshakes in ssl.log with a validation_status of 'self_signed_cert_in_chain' or other certificate validation errors; or (3) A statistically significant decrease in the diversity of TLS certificate issuers (issuer field in ssl.log) for a single device, suggesting TLS interception by a rogue Certificate Authority.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, VPN termination points, DNS resolvers, and web proxies handling mobile device traffic.",
            "action": [
              "Create a SIEM rule to query dns.log data in real-time. Match the `query` field against an up-to-date watchlist of domains and subdomains associated with jailbreaking tools and repositories (e.g., Cydia, Sileo, unc0ver, Checkra1n). Trigger a high-severity alert upon any match, including the source IP (`id.orig_h`), queried domain, and timestamp.",
              "For each mobile device source IP, use ssl.log to establish a 14-day rolling baseline of TLS activity. Calculate two daily metrics: (A) the ratio of connections with a `validation_status` not equal to 'ok' to the total number of TLS handshakes, and (B) the Shannon entropy of the server certificate `issuer` field. Trigger a medium-severity alert if metric (A) exceeds the 95th percentile of its historical values for that device, or if metric (B) drops below the 5th percentile of its historical values, suggesting a potential Man-in-the-Middle (MitM) attack.",
              "Deploy an anomaly detection model (e.g., Isolation Forest) trained on legitimate TLS session features from ssl.log and conn.log. The feature vector should include: certificate validity period, SNI server name rarity (calculated via TF-IDF over a 24-hour window), `validation_status` (one-hot encoded), `orig_bytes`, `resp_bytes`, and connection duration. An anomalous score indicates a connection deviates from the established norm. A cluster of high-scoring anomalies from a single device, especially when correlated with symbolic or statistical alerts, strongly suggests device compromise."
            ]
          },
          {
            "description": "A mobile device initiates an outbound connection with characteristics consistent with bulk data exfiltration. Evidence includes a single connection from a mobile device IP with an anomalously high `orig_bytes` value, especially when directed to a low-reputation or newly-observed destination IP address or Autonomous System (AS).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, firewalls, and cloud access security brokers (CASBs) monitoring traffic from mobile device subnets.",
            "action": [
              "Continuously monitor conn.log and ssl.log for connections originating from mobile device IP subnets. Match the destination IP (`id.resp_h`) and SNI (`server_name`) against a threat intelligence feed of known malicious C2 servers, anonymization services, and suspicious data hosting providers. Generate a high-severity alert on any match, including full connection details from the log.",
              "Using conn.log, for each mobile device source IP, maintain a 30-day rolling baseline of outbound data volume (`orig_bytes`) per connection. Calculate the 99.5th percentile for this metric. Trigger a medium-severity alert if a single connection's `orig_bytes` exceeds this device-specific threshold. Escalate the alert to high-severity if the destination IP has been observed fewer than 3 times in the device's 30-day history or if the connection protocol is not TLS/443.",
              "Train an autoencoder neural network on legitimate network connection patterns from conn.log for the mobile device fleet. The feature vector for each connection should include `orig_bytes`, `resp_bytes`, `duration`, destination port, protocol, and a categorical representation of the destination IP's Autonomous System Number (ASN). A high reconstruction error on a live connection flags it as anomalous. A high-error connection with a large `orig_bytes` value is a strong indicator of potential exfiltration, especially if it occurs shortly after a jailbreak detection alert for the same device."
            ]
          },
          {
            "description": "A Mobile Device Management (MDM) platform reports a device's integrity status as 'compromised' or 'jailbroken'. Alternatively, the MDM detects the installation of unapproved applications associated with jailbreaking or system modification, or reports the presence of unexpected processes or files outside the standard iOS sandbox (e.g., /bin/bash, Cydia.app).",
            "data_sources": [
              "MDM Platform Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) and Unified Endpoint Management (UEM) platforms.",
            "action": [
              "Configure a SIEM rule to generate a critical alert whenever an ingested MDM log contains a field indicating a device's integrity status is compromised (e.g., `isJailbroken = true` or `isCompliant = false`). The alert must include the device identifier and associated user account for immediate investigation and potential device quarantine.",
              "On a daily basis, ingest and analyze MDM application inventory logs for the entire mobile fleet. For each application, calculate its prevalence (percentage of devices it is installed on). Create an alert for any device that installs an application with a prevalence of less than 1%, excluding newly deployed corporate applications. Rank alerts by the number of rare applications on a single device.",
              "Train a classification model (e.g., Random Forest) using historical MDM log data to predict the likelihood of device compromise. Features should include: OS version, time since last OS update, number of installed applications, count of non-compliant policy violations, and device model age. A sustained high probability score from the model for a specific device should trigger a manual review."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]