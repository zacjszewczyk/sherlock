[
  {
    "information_requirement": "Is an adversary attempting to elevate privileges on mobile devices via process injection? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "An auditable event, such as from an EDR agent, shows a running process on a mobile OS (Android, iOS) loading an unsigned or non-allowlisted dynamic library (.so, .dylib). Alternatively, an event shows a process making calls to specific debugging or memory manipulation APIs, like `ptrace` on Android or `mach_vm_write` on iOS, where the calling process is not an authorized debugging tool or signed with a developer certificate.",
            "data_sources": [
              "Android logcat",
              "iOS Unified Logs",
              "MDM/EDR Process Activity Logs",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.",
            "action": [
              "Create a detection rule that triggers on EDR logs from mobile devices indicating a process call to `ptrace`, `dlopen` with a non-system path, or `mach_vm_write`. Exclude known developer tools and processes signed with authorized developer certificates from this rule. Correlate any trigger on device IP and timestamp (+/- 1 minute) with Zeek logs to enrich with network context. Escalate to an alert if the associated device communicates with a destination IP or domain on a threat intelligence feed.",
              "For each mobile application, build and maintain an allowlist of legitimate dynamic libraries loaded across all managed devices over a 30-day baseline. Monitor EDR logs for library load events in real-time and calculate the fleet-wide prevalence of each library for its parent application. Flag any library with a prevalence of less than 1% as rare. Concurrently, ingest Zeek dns.log data and calculate the Shannon entropy of requested domain names using the formula $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$. Generate an alert when a rare library load event occurs within a 2-minute window of a DNS request from the same device where the domain entropy score is in the 99th percentile.",
              "For high-risk applications, collect sequences of system calls from mobile EDR logs. Train an LSTM (Long Short-Term Memory) autoencoder model on historical sequences to learn a representation of normal process behavior. In production, feed live system call sequences into the model and calculate the reconstruction error. Flag a sequence as anomalous if its reconstruction error exceeds a threshold set at the 99.9th percentile of errors from a validation dataset. Escalate if this anomaly is temporally correlated with the device initiating a connection to a newly observed IP address, defined as an IP not seen communicating with the device in the last 30 days based on Zeek conn.log history."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using process injection to hide malicious code within legitimate mobile application processes? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A trusted, allowlisted mobile application process exhibits a concurrent anomaly of both high resource consumption (e.g., CPU or memory usage exceeding the 95th percentile of its 30-day baseline for over 5 minutes) and anomalous network activity (e.g., connections to FQDNs or IPs not present in the application's historical baseline), without a corresponding application update or known change.",
            "data_sources": [
              "MDM Performance Logs (CPU/Memory)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with EDR/MDM agents, network gateways monitoring corporate Wi-Fi and VPN traffic, and centralized log aggregation platforms such as a SIEM or Data Lake.",
            "action": [
              "Create a detection rule that joins MDM/EDR process telemetry with Zeek network logs on device IP. Trigger an alert when a trusted application process (e.g., `com.android.chrome`, `com.apple.mobilesafari`) initiates a network connection where the destination IP, domain, or JA3/JA3S hash from Zeek ssl.log is on a threat intelligence blocklist, or the User-Agent in Zeek http.log does not match the established, known User-Agent string for that specific application and OS version.",
              "For each unique device-application pair, continuously calculate the 30-day rolling 95th percentile for CPU and memory usage from MDM performance logs. Generate an event if both metrics for an application exceed this percentile for a continuous 5-minute window. During this window, analyze the device's network traffic from Zeek conn.log and calculate the ratio of outgoing to incoming bytes ($$ orig_bytes / resp_bytes $$). Escalate to an alert if this ratio exceeds the 99th percentile of its historical 30-day distribution for that device, indicating potential data exfiltration.",
              "For each device, create feature vectors for outbound network connections from Zeek conn.log, including destination port, protocol, duration, byte counts, and the destination IP's Autonomous System Number (ASN). Train a DBSCAN clustering model on historical data to identify clusters of normal network behavior. In real-time, classify new connections; flag any connection classified as a noise point (outlier). If a device generates a network outlier while also exhibiting high resource consumption (as identified by the statistical method), generate a high-severity alert for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]