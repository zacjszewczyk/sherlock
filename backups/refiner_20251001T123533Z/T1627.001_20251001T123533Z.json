[
  {
    "information_requirement": "Is the adversary using geofencing to evade detection or analysis on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627.001",
        "name": "Geofencing",
        "evidence": [
          {
            "description": "An application's manifest, retrieved via static analysis, requests high-risk location permissions (`android.permission.ACCESS_BACKGROUND_LOCATION` for Android or `NSLocationAlwaysAndWhenInUseUsageDescription` key for iOS), while the application's category (e.g., 'Productivity', 'Finance') as defined by the app store or internal policy does not justify persistent, background location access.",
            "data_sources": [
              "MDM App Inventory Report",
              "Static Analysis Tool Output (e.g., MobSF JSON report)",
              "Corporate Application Policy/Whitelist",
              "Application Store Metadata"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) Platform, Application Vetting Sandbox, Corporate App Store/Repository, Managed Mobile Endpoints",
            "action": [
              "Query MDM inventory data to identify all applications with `android.permission.ACCESS_BACKGROUND_LOCATION` or `NSLocationAlwaysAndWhenInUseUsageDescription` permissions. Cross-reference this list against an approved application whitelist and a policy-defined list of application categories (e.g., 'Navigation', 'Ride-sharing') where such permissions are justified. Generate an alert for any application that possesses these permissions but is not on the whitelist or in an approved category.",
              "For all managed mobile applications, group by their App Store category. For each category, calculate the prevalence rate (percentage of apps) for high-risk location permissions like `ACCESS_BACKGROUND_LOCATION`. Establish a baseline prevalence for each category. Flag any application that requests a permission where the prevalence in its category is below a defined statistical threshold (e.g., less than the 5th percentile), indicating it is a functional outlier.",
              "Train and apply a classification model (e.g., Random Forest) on a labeled dataset of benign and malicious applications. Engineer features from static analysis reports, including the full list of requested permissions (one-hot encoded), presence of specific geofencing API calls (e.g., `GeofencingClient`, `CLLocationManager`), app category, and indicators of code obfuscation. The model will output a risk score from 0 to 1. Flag any new or updated application with a score exceeding a predetermined threshold (e.g., > 0.85) for manual review."
            ]
          },
          {
            "description": "During dynamic analysis in a sandboxed environment, a simulated change in the device's GPS coordinates from a 'permitted' region (e.g., corporate HQ country) to a 'restricted' region (e.g., analyst's country) results in an observable, programmatic change in application behavior. This is confirmed by observing one or more of the following within 120 seconds of the location change: 1) Cessation of periodic network callbacks to a specific IP address or domain identified in Zeek conn.log. 2) A greater than 80% reduction in total egress data volume measured in conn.log. 3) A quantifiable shift in DNS requests from high-entropy domains to common service domains, measured in dns.log.",
            "data_sources": [
              "Mobile Application Vetting Sandbox Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Static Analysis Report (APK/IPA)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Vetting Sandbox, Network Egress Points (VPN, Corporate Wi-Fi), DNS Resolvers, Web Proxy Servers",
            "action": [
              "In a dynamic analysis sandbox, establish a 10-minute baseline of the application's network activity using Zeek logs. Identify any periodic connections (beacons) defined as connections to the same destination IP with a consistent time interval (+/- 10%) and similar payload size. Simulate a GPS location change to a country outside the organization's area of operations. Generate an alert if the identified beaconing activity ceases and does not resume for at least 5 minutes after the location change.",
              "During the sandboxed test, capture all network traffic via Zeek logs. In 60-second windows, calculate two metrics: the Shannon entropy of the set of requested second-level domains from `dns.log` and the 90th percentile of outbound bytes (`orig_bytes`) per connection from `conn.log`. After simulating the GPS location change, compare the post-change moving average of these metrics to the pre-change baseline. Generate an alert if the DNS entropy drops by more than 1.5 standard deviations AND the 90th percentile of `orig_bytes` drops by more than 75%.",
              "Train a multivariate time-series anomaly detection model (e.g., LSTM autoencoder) on network telemetry (e.g., connection count, total `orig_bytes`, total `resp_bytes`, DNS request count, DNS request entropy from Zeek logs) from a baseline set of known-good sandboxed applications. During analysis of a new app, feed its telemetry into the model and introduce the simulated GPS location change as an exogenous event. A high reconstruction error immediately following the location change, which then settles into a new, lower-activity state, indicates a high probability of geofencing-based evasion and should trigger an alert for analyst investigation."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]