[
  {
    "information_requirement": "Is an adversary collecting and archiving sensitive data on corporate mobile devices prior to exfiltration? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1532",
        "name": "Archive Collected Data",
        "evidence": [
          {
            "description": "An application, not on an allowlist of legitimate file management or backup utilities, creates a file with a common archive extension (.zip, .rar, .7z, .tar.gz). This event is considered suspicious if it meets one or more of the following criteria: 1) the file size is anomalously large (e.g., greater than the 95th percentile for the device), 2) the file is created in a directory with high path entropy (e.g., greater than 3.0), or 3) the file creation is followed by an outbound network connection exceeding 1MB within 5 minutes.",
            "data_sources": [
              "MTD File Creation Events",
              "MDM File Inventory Logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on managed mobile endpoints, focusing on user-accessible storage (e.g., Android /sdcard/, iOS 'On My iPhone/iPad') and application-private storage directories. Network egress points instrumented with Zeek for traffic correlation.",
            "action": [
              "Query MTD file creation logs for new files where file_extension IN ('.zip', '.rar', '.7z', '.tar.gz'). For each event, join with MDM application inventory to retrieve the creating process's package name and signing certificate. Compare the process against an allowlist of known-good file management/backup applications and a denylist of known malware from threat intelligence feeds. Generate an alert if the process is on the denylist or is not on the allowlist and the application manifest includes permissions to access sensitive data stores (e.g., Contacts, Photo Library, Microphone).",
              "For each device, compute and maintain a 30-day rolling baseline of file sizes and directory path Shannon entropy. Upon detection of a new archive file from the symbolic logic, compare its size against the device's file size distribution and its parent directory's path entropy against the device's path entropy distribution. Generate a high-priority alert if the file size exceeds the 95th percentile OR the path entropy exceeds 3 standard deviations from the mean. Enrich this alert by querying Zeek conn.log for connections from the device's IP address where the timestamp is within 5 minutes of the file creation and orig_bytes is greater than 1MB.",
              "Develop a classification model (e.g., Gradient Boosting, Random Forest) to score file creation events for malicious staging activity. Engineer features from MTD, MDM, and Zeek logs including: file size relative to device norms (percentile), directory path entropy, a binary flag for archive extension, one-hot encoded app permissions, a binary flag indicating if the creating app is a known utility, time of day, and total bytes sent by the device in the 5 minutes following the file creation. A model output probability score exceeding a tuned threshold (e.g., 0.90) indicates a high-confidence malicious event."
            ]
          },
          {
            "description": "A process, not on an allowlist of legitimate background tasks, exhibits a sustained period of anomalous resource consumption while the device screen is off. This is defined as a 60-second window where average CPU utilization, memory usage, and disk write I/O all simultaneously exceed the 95th percentile of the application's established background activity baseline.",
            "data_sources": [
              "MTD Performance Logs",
              "MDM Device Health Metrics",
              "Mobile OS Performance Counters"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile device OS kernel, specifically process, CPU, memory, and disk I/O schedulers, with metrics collected by MDM/MTD agents.",
            "action": [
              "Query MTD performance logs for processes where screen_state is 'off'. For any such process, check its package name against a threat intelligence denylist and a curated allowlist of legitimate background processes (e.g., system services, backup agents). Generate a high-severity alert for any match on the denylist. Generate a medium-severity alert for any process not on the allowlist that exhibits resource consumption above predefined static thresholds (e.g., CPU > 70% for 60s).",
              "For each unique application and device pairing, establish and maintain separate 30-day rolling baselines (mean and standard deviation) of CPU usage, memory consumption, and disk write I/O for both 'screen on' and 'screen off' states. Using a 60-second sliding window, calculate the moving average for each metric. Generate an alert if, during a 'screen off' period, the moving averages for CPU, memory, AND disk I/O all simultaneously exceed 3 standard deviations above their respective 'screen off' baselines for that application.",
              "Implement a multivariate time-series anomaly detection model (e.g., LSTM Autoencoder) per device or device group. Train the model on historical performance data vectors containing features like cpu_usage, memory_usage, disk_write_bytes, network_sent_bytes, and screen_state. In production, feed live telemetry into the model. An anomaly is detected when the model's reconstruction error for a given time window exceeds a predetermined threshold (e.g., the 99th percentile of errors from a validation dataset), flagging a deviation from the device's learned normal behavior. Correlate this alert with the running process during the anomalous window."
            ]
          },
          {
            "description": "An application, not categorized as a utility or productivity tool, executes a suspicious sequence of API calls within a short time window (e.g., 60 seconds), particularly while in the background. The sequence involves: 1) accessing sensitive data stores (e.g., Contacts, Photos), 2) calling compression or cryptography libraries (e.g., java.util.zip, CommonCrypto), and 3) initiating a network connection (e.g., java.net.Socket).",
            "data_sources": [
              "MTD API Call Monitoring Logs",
              "Application Sandboxing Logs",
              "MDM Application Inventory and Permissions Logs",
              "OS-level API tracing logs (e.g., Frida traces)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Instrumentation points within the mobile OS or a sandboxed environment that hook into API calls made by user-installed applications. This includes monitoring system library calls for file system access, data access (contacts, photos), compression, cryptography, and networking.",
            "action": [
              "Define and monitor for specific high-risk, ordered sequences of API calls in MTD logs, such as '[Contacts.read -> java.util.zip.ZipOutputStream -> java.net.Socket.connect]', occurring within a 60-second window by the same process. For each match, query MDM inventory to check the application's declared category. If the category is not on an allowlist of expected application types (e.g., 'File Manager', 'Cloud Storage', 'Backup'), generate a high-severity alert.",
              "For each application, build a baseline of API call sequence frequencies using n-grams (e.g., trigrams) over a 30-day period. Monitor for new API call sequences in real-time. Generate an alert if an application executes a sequence that has a frequency in the bottom 1st percentile of its baseline, especially if the sequence contains high-risk APIs (cryptography, compression, networking). Additionally, calculate the Shannon entropy of API calls within a 5-minute sliding window for each app. Alert if the entropy score exceeds 3 standard deviations above the app's established baseline.",
              "Train a sequence-based classification model (e.g., LSTM, GRU) on labeled datasets of benign and malicious API call sequences. Each element in a sequence should be a vector containing the API call identifier, app context (foreground/background), and time delta from the previous call. Deploy the trained model to classify new API call sequences in real-time. A sequence classified as malicious with a high confidence score (e.g., >0.95), particularly one containing the data access -> compress/encrypt -> network pattern, should trigger a high-severity incident for immediate investigation."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]