[
  {
    "information_requirement": "Is an adversary collecting sensitive information from mobile device clipboards?",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "An Android application's disassembled code contains calls to `ClipboardManager.addPrimaryClipChangedListener`, but its `AndroidManifest.xml` file lacks the <intent-filter> for `android.view.inputmethod.InputMethod`, indicating it is not a legitimate input method editor (IME).",
            "data_sources": [
              "Static analysis output of APK",
              "MTD/MDM behavioral event logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android devices, Corporate application vetting pipeline, Mobile Device Management (MDM) server",
            "action": [
              "In an automated application vetting pipeline, create a rule to parse the `AndroidManifest.xml` file. If the manifest does not declare a service with an intent-filter for `android.view.inputmethod.InputMethod`, scan the application's disassembled DEX files for invocations of `ClipboardManager.addPrimaryClipChangedListener`. Alert if this API call is present in a non-IME application.",
              "Using MTD behavioral logs, query for all clipboard access events over the last 30 days, grouped by application package name and functional category. For each category, calculate the 95th percentile of daily clipboard access events per application. Generate an alert for any application whose daily access count exceeds its category's 95th percentile threshold.",
              "Develop a supervised classification model (e.g., Random Forest) trained on static APK features from a labeled dataset of benign and malicious applications. Features should include the presence of `addPrimaryClipChangedListener`, count of requested permissions, string entropy, and use of dynamic code loading. Integrate this model into the application vetting process to classify new APKs and assign a risk score."
            ]
          },
          {
            "description": "An iOS application programmatically accesses `UIPasteboard` properties (e.g., `UIPasteboard.general.string`) more than twice per second, or within 100 milliseconds of an `applicationWillEnterForeground` event, indicating automated, non-user-driven access.",
            "data_sources": [
              "Instrumented API call logs (e.g., Frida trace)",
              "MTD/MDM behavioral event logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed iOS devices, Corporate application vetting pipeline, Sandboxed analysis environment",
            "action": [
              "In a sandboxed analysis environment, use an instrumentation tool like Frida to hook the `UIPasteboard` class. Create a rule to log all access to the `string` property and alert if an application accesses it more than twice per second. Separately, create a SIEM rule to search MTD/MDM logs for the literal string 'pasted from' to identify all cross-app paste notifications for manual review.",
              "From MTD behavioral logs, for each application session, calculate the time delta between the `applicationWillEnterForeground` event and the first `UIPasteboard` access. Flag any application whose median time delta falls in the lowest 5th percentile across all monitored applications. Additionally, for each app, calculate the Shannon entropy of the time intervals between its clipboard access events; a low entropy score indicates suspicious, regular polling.",
              "Train a Long Short-Term Memory (LSTM) autoencoder on sequences of API calls from a large corpus of benign, vetted iOS applications. During dynamic analysis of a new application, feed its API call sequence into the model. If the reconstruction error exceeds a statistically determined threshold, flag the application as anomalous for deviating from normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary capturing credentials copied from password managers or other sensitive applications on mobile devices?",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1414",
        "name": "Clipboard Data",
        "evidence": [
          {
            "description": "A clipboard access event is logged from an application not on the approved browser or password manager list, occurring within 5 seconds after an `app_backgrounded` event is logged for an approved password manager application on the same device.",
            "data_sources": [
              "MTD/MDM behavioral event logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices with corporate-approved password managers installed",
            "action": [
              "In the SIEM, create a correlation rule that triggers on MTD logs. The rule should look for an `app_backgrounded` event from an application on a pre-defined list of approved password managers, followed within 5 seconds by a `clipboard_accessed` event from a different, non-password-manager, non-browser application on the same device ID.",
              "For each `clipboard_accessed` event from a non-password-manager app, query MTD logs to find the time delta from the most recent `app_backgrounded` event from a known password manager on the same device. Aggregate these deltas by application package name across all devices. Investigate any application whose median time delta is in the lowest 10th percentile.",
              "Build and train a sequence classification model (e.g., a Recurrent Neural Network) using labeled MTD event sequences (including `app_focused`, `app_backgrounded`, `clipboard_accessed`). The model should learn to distinguish between benign and malicious sequences indicative of credential scraping. Deploy the model to classify new event sequences in near real-time."
            ]
          },
          {
            "description": "A network connection is initiated by an application within two minutes of that same application accessing the clipboard, where the destination is either a known-malicious IP/domain, a newly registered domain (NRD), or a domain with a calculated Shannon entropy score greater than 3.5.",
            "data_sources": [
              "MTD/MDM behavioral event logs",
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints, Corporate VPN concentrators, DNS resolvers, Network egress points",
            "action": [
              "Create a SIEM correlation rule that joins MTD `clipboard_accessed` events with Zeek `conn.log` and `dns.log` on device IP and timestamp. The rule should alert if, within 2 minutes of a clipboard access, the associated application process initiates a network connection to a destination IP or domain listed in a threat intelligence feed.",
              "For every network connection occurring within 2 minutes of a clipboard access event, perform these statistical checks using Zeek logs: a) Calculate the Shannon entropy of the queried domain in `dns.log` and alert if > 3.5. b) Alert if the `validation_status` in `ssl.log` is 'invalid' or 'self-signed'. c) Perform a daily long-tail analysis to identify domains contacted by fewer than 5 devices in 30 days and correlate with recent clipboard access.",
              "For network flows in `conn.log` occurring within 5 minutes after a clipboard access event, extract a feature vector including destination port, protocol, bytes transferred, JA3/JA3S hash from `ssl.log`, and domain entropy from `dns.log`. Use an unsupervised clustering algorithm like DBSCAN to identify small, anomalous clusters of network activity that deviate from normal traffic patterns for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]