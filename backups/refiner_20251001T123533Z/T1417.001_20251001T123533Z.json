[
  {
    "information_requirement": "Is an adversary capturing user credentials via keylogging on mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "An installed mobile application, identified in MDM inventory logs, possesses third-party keyboard functionality and meets one or more of the following criteria: its package name is not on the corporate allowlist; it was installed from an untrusted source (sideloaded); its developer signature is untrusted or does not match the allowlist; or its binary hash differs from the known-good version.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Process Logs",
              "Threat Intelligence Feeds",
              "Android Logcat",
              "iOS sysdiagnose logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) / Mobile Device Management (MDM) Platform Database and associated device logs",
            "action": [
              "Query UEM/MDM application inventory reports for all devices. Join this data with a maintained allowlist of approved keyboard applications, including their package names, developer signatures, and known-good hashes. Trigger a high-severity alert for any application with keyboard functionality that is not on the allowlist, has a mismatched signature/hash, or is flagged by the MDM as sideloaded.",
              "From MDM inventory data, calculate the installation prevalence (percentage of total devices) for every keyboard application. Generate a medium-severity alert for any keyboard app with a prevalence below 1%. Additionally, monitor the daily installation count for each keyboard app. Alert if the daily installation count for a low-prevalence keyboard exceeds 3 standard deviations above its 30-day moving average, indicating a suspicious spike.",
              "Develop a Random Forest classification model trained on application metadata (e.g., requested permissions, developer reputation, app store category, installation source, user review sentiment scores). For any newly detected keyboard application, or any low-prevalence keyboard, run its metadata through the model. If the model returns a 'malicious' probability greater than 0.90, automatically create a critical incident for immediate investigation."
            ]
          },
          {
            "description": "An MDM or EDR permissions report for an Android device shows the 'android.permission.BIND_ACCESSIBILITY_SERVICE' is actively granted to an application not on a pre-approved allowlist. This permission can be abused to intercept text input events system-wide, effectively acting as a keylogger.",
            "data_sources": [
              "MDM Permissions Logs",
              "Mobile EDR API Monitoring Logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM Platform Database and Android device-level security logs",
            "action": [
              "Create a continuous SIEM rule that queries MDM/EDR permission logs for any event where 'android.permission.BIND_ACCESSIBILITY_SERVICE' is granted. Compare the package name of the application receiving the permission against a strict allowlist of approved accessibility service users (e.g., corporate password manager). Generate a critical alert for any application not on this list.",
              "For any application with 'BIND_ACCESSIBILITY_SERVICE' permission, calculate the Shannon entropy of its complete requested permission set. Compare this entropy score to the 99th percentile of entropy scores for all apps within the same app store category. Also, calculate the Jaccard distance between the app's permission set and the typical permission set for its category. An alert is triggered if the entropy is in the 99th percentile or the Jaccard distance exceeds 0.8, indicating an unusual combination of permissions.",
              "Deploy an Isolation Forest model on the sequence of API calls made by applications with accessibility permissions. Train the model on call sequences from known-good accessibility applications. In real-time, monitor API calls from these apps on EDR-enabled devices. If an app generates a 'TYPE_VIEW_TEXT_CHANGED' event (indicating text input) and this is immediately followed by API calls for network connections or file system writes, and the sequence has an anomaly score in the top 1%, generate a critical alert for potential data exfiltration."
            ]
          },
          {
            "description": "Network logs (Zeek) show a mobile device IP address initiating a recurring pattern of small, outbound data transfers (e.g., under 1KB) to an unknown external IP address. The connections are characterized by highly regular time intervals (low jitter), indicative of automated C2 beaconing used for exfiltrating keystroke data.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR Network Flow Logs",
              "WHOIS lookup data",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors capturing traffic from mobile device subnets, corporate Wi-Fi access points, and VPN concentrators",
            "action": [
              "Continuously correlate the `id.resp_h` (destination IP) and `query` (destination domain from dns.log) fields in Zeek logs from the mobile device IP range against threat intelligence feeds of known malicious IPs/domains. Generate a high-severity alert for any match.",
              "From Zeek conn.log, create 1-hour time windows and group flows by source IP (`id.orig_h`) and destination IP (`id.resp_h`). For each group, calculate the standard deviation of the time difference between consecutive connections and the 95th percentile of outbound bytes (`orig_bytes`). Trigger a medium-severity alert if the time delta standard deviation is less than 2 seconds and the 95th percentile of `orig_bytes` is less than 1024. Escalate to high-severity if the destination domain from Zeek dns.log was registered within the last 30 days (via WHOIS enrichment).",
              "For each mobile device, train an LSTM Autoencoder on a time-series of network features (e.g., bytes_out per minute, connection count per minute, destination port entropy). The model learns the device's normal network behavior. Continuously feed live data into the model. If the reconstruction error for a given time window exceeds a dynamically calculated threshold (e.g., 3 standard deviations above the mean error), generate a high-severity anomaly alert, indicating a significant deviation from the baseline, such as the start of a keylogger's exfiltration beacon."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive information (PII, proprietary data) via keylogging on mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "An installed mobile application, identified in MDM inventory logs, possesses third-party keyboard functionality and meets one or more of the following criteria: its package name is not on the corporate allowlist; it was installed from an untrusted source (sideloaded); its developer signature is untrusted or does not match the allowlist; or its binary hash differs from the known-good version.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Process Logs",
              "Threat Intelligence Feeds",
              "Android Logcat",
              "iOS sysdiagnose logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) / Mobile Device Management (MDM) Platform Database and associated device logs",
            "action": [
              "Query UEM/MDM application inventory reports for all devices. Join this data with a maintained allowlist of approved keyboard applications, including their package names, developer signatures, and known-good hashes. Trigger a high-severity alert for any application with keyboard functionality that is not on the allowlist, has a mismatched signature/hash, or is flagged by the MDM as sideloaded.",
              "From MDM inventory data, calculate the installation prevalence (percentage of total devices) for every keyboard application. Generate a medium-severity alert for any keyboard app with a prevalence below 1%. Additionally, monitor the daily installation count for each keyboard app. Alert if the daily installation count for a low-prevalence keyboard exceeds 3 standard deviations above its 30-day moving average, indicating a suspicious spike.",
              "Develop a Random Forest classification model trained on application metadata (e.g., requested permissions, developer reputation, app store category, installation source, user review sentiment scores). For any newly detected keyboard application, or any low-prevalence keyboard, run its metadata through the model. If the model returns a 'malicious' probability greater than 0.90, automatically create a critical incident for immediate investigation."
            ]
          },
          {
            "description": "An MDM or EDR permissions report for an Android device shows the 'android.permission.BIND_ACCESSIBILITY_SERVICE' is actively granted to an application not on a pre-approved allowlist. This permission can be abused to intercept text input events system-wide, effectively acting as a keylogger.",
            "data_sources": [
              "MDM Permissions Logs",
              "Mobile EDR API Monitoring Logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM Platform Database and Android device-level security logs",
            "action": [
              "Create a continuous SIEM rule that queries MDM/EDR permission logs for any event where 'android.permission.BIND_ACCESSIBILITY_SERVICE' is granted. Compare the package name of the application receiving the permission against a strict allowlist of approved accessibility service users (e.g., corporate password manager). Generate a critical alert for any application not on this list.",
              "For any application with 'BIND_ACCESSIBILITY_SERVICE' permission, calculate the Shannon entropy of its complete requested permission set. Compare this entropy score to the 99th percentile of entropy scores for all apps within the same app store category. Also, calculate the Jaccard distance between the app's permission set and the typical permission set for its category. An alert is triggered if the entropy is in the 99th percentile or the Jaccard distance exceeds 0.8, indicating an unusual combination of permissions.",
              "Deploy an Isolation Forest model on the sequence of API calls made by applications with accessibility permissions. Train the model on call sequences from known-good accessibility applications. In real-time, monitor API calls from these apps on EDR-enabled devices. If an app generates a 'TYPE_VIEW_TEXT_CHANGED' event (indicating text input) and this is immediately followed by API calls for network connections or file system writes, and the sequence has an anomaly score in the top 1%, generate a critical alert for potential data exfiltration."
            ]
          },
          {
            "description": "Network logs (Zeek) show a mobile device IP address initiating a recurring pattern of small, outbound data transfers (e.g., under 1KB) to an unknown external IP address. The connections are characterized by highly regular time intervals (low jitter), indicative of automated C2 beaconing used for exfiltrating keystroke data.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR Network Flow Logs",
              "WHOIS lookup data",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors capturing traffic from mobile device subnets, corporate Wi-Fi access points, and VPN concentrators",
            "action": [
              "Continuously correlate the `id.resp_h` (destination IP) and `query` (destination domain from dns.log) fields in Zeek logs from the mobile device IP range against threat intelligence feeds of known malicious IPs/domains. Generate a high-severity alert for any match.",
              "From Zeek conn.log, create 1-hour time windows and group flows by source IP (`id.orig_h`) and destination IP (`id.resp_h`). For each group, calculate the standard deviation of the time difference between consecutive connections and the 95th percentile of outbound bytes (`orig_bytes`). Trigger a medium-severity alert if the time delta standard deviation is less than 2 seconds and the 95th percentile of `orig_bytes` is less than 1024. Escalate to high-severity if the destination domain from Zeek dns.log was registered within the last 30 days (via WHOIS enrichment).",
              "For each mobile device, train an LSTM Autoencoder on a time-series of network features (e.g., bytes_out per minute, connection count per minute, destination port entropy). The model learns the device's normal network behavior. Continuously feed live data into the model. If the reconstruction error for a given time window exceeds a dynamically calculated threshold (e.g., 3 standard deviations above the mean error), generate a high-severity anomaly alert, indicating a significant deviation from the baseline, such as the start of a keylogger's exfiltration beacon."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]