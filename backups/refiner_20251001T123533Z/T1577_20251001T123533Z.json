[
  {
    "information_requirement": "Has an adversary established persistence by modifying a legitimate application executable on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1577",
        "name": "Compromise Application Executable",
        "evidence": [
          {
            "description": "The cryptographic hash (e.g., SHA-256) of an installed application package on a mobile device does not match the known-good hash value recorded in an official organizational application manifest for the identical application identifier and version. A mismatch indicates unauthorized modification, such as rebuilding an application with malicious code [2].",
            "data_sources": [
              "MDM application inventory report",
              "Mobile EDR agent logs",
              "Organizational Application Manifest"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (iOS, Android); Mobile Device Management (MDM) or Unified Endpoint Management (UEM) server; Organizational application manifest repository.",
            "action": [
              "Join application inventory data from MDM/EDR sources with the organizational application manifest on application ID and version. Generate a high-severity alert for any device where the collected file hash does not match the manifest's known-good hash.",
              "For each unique application ID across the fleet, aggregate the count of each reported application version. Flag any device reporting an application version with a fleet-wide prevalence below a set threshold (e.g., installed on fewer than 0.5% of devices) for manual review, as this indicates a non-standard or potentially patched version.",
              "For each device, create a feature vector representing all installed applications (e.g., multi-hot encoding of application IDs). Train an unsupervised anomaly detection model, such as an Isolation Forest, on the feature vectors from the entire device fleet to establish a baseline of normal application sets. Score each device in real-time and alert on devices with high anomaly scores, indicating a significant deviation in the installed software profile."
            ]
          },
          {
            "description": "Static analysis of an Android Application Package (APK) file reveals the presence of data bytes between the end of the ZIP central directory and the start of the Dalvik Executable (DEX) file. This structure is a specific artifact of exploitation of the Janus vulnerability (CVE-2017-13156) [1].",
            "data_sources": [
              "Raw APK files from endpoints",
              "Mobile App Vetting (MAV) static analysis reports",
              "Digital forensic image of device storage"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android device fleet; Application sandbox environment; Mobile security analysis platforms.",
            "action": [
              "Implement a static analysis rule within a Mobile App Vetting (MAV) or security analysis platform to scan every submitted APK. The rule must check for the presence of non-zero byte sequences located between the end of the ZIP central directory and the start of the DEX file. Trigger a critical-severity alert if this condition is met.",
              "For all analyzed APKs, calculate the size difference: $$ \\Delta = FileSize_{OnDisk} - (Offset_{CentralDirectory} + Size_{CentralDirectory}) $$. Establish a baseline distribution for $$ \\Delta $$; for valid apps, this should be close to zero. Alert on any APK where $$ \\Delta $$ is a statistical outlier (e.g., greater than the 99th percentile of the historical distribution).",
              "Train a supervised classification model, such as Random Forest, using features extracted from APK file structures. Features should include header flags, section counts, file size discrepancies, and the Shannon entropy of various file sections. Use a labeled dataset of known-benign, Janus-exploited, and other repacked malicious APKs to assign a risk score to all new and updated applications."
            ]
          },
          {
            "description": "Network traffic originating from a managed mobile device and attributed to a trusted application exhibits anomalous behavior. This includes communication with domains or IPs on threat intelligence lists, DNS queries with high Shannon entropy indicative of Domain Generation Algorithms (DGA), or data transfer volumes that are statistical outliers compared to a historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "CASB logs",
              "Mobile EDR network logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways; VPN egress points; DNS resolvers; Cloud Access Security Broker (CASB).",
            "action": [
              "Enrich network logs (e.g., Zeek conn.log) with application context from CASB/EDR logs. Correlate the destination IP address or requested domain (from Zeek dns.log) against a threat intelligence feed of known command-and-control (C2) servers. Generate a high-severity alert if a whitelisted application communicates with a known malicious indicator.",
              "For each application on each device, establish a 30-day rolling baseline of network behavior. A) Using Zeek conn.log, calculate the 95th percentile for total bytes transferred ($$ orig_bytes + resp_bytes $$) per session and alert if a new session exceeds this threshold. B) Using Zeek dns.log, calculate the average Shannon entropy of DNS queries for the application and alert if a new query's entropy is more than three standard deviations above the historical average.",
              "For each unique device-application pair, generate a multivariate time-series dataset from network logs, with features such as bytes sent/received per minute and new connections per minute. Train an LSTM (Long Short-Term Memory) Autoencoder to learn the normal temporal patterns of network activity. In a production environment, feed live data into the model and alert when the reconstruction error exceeds a dynamically calculated threshold, indicating a behavioral anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-10-01",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]