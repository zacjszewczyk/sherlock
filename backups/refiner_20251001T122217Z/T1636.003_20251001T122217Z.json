[
  {
    "information_requirement": "Has an adversary successfully collected contact list data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.003",
        "name": "Contact List",
        "evidence": [
          {
            "description": "An application possesses contact list access permissions ('android.permission.READ_CONTACTS' or 'NSContactsUsageDescription') but belongs to a functional category (e.g., 'Games', 'Photo Editing') where such access is statistically rare across the enterprise device fleet.",
            "data_sources": [
              "MDM Application Inventory Report",
              "MTD Permission Audit Log",
              "Application Vetting Service Scan Results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM/MTD log aggregation platform, Application Vetting Service Portal",
            "action": "1. (Symbolic) Create a SIEM rule to generate a high-priority alert when an application with contact list permissions is installed and its package name or cryptographic hash matches an entry in a threat intelligence feed of known mobile malware. 2. (Statistical) Using MDM application inventory data, script a daily job to: a) Group all applications by their App Store/Play Store category. b) For each category, calculate the percentage of applications that have contact list permissions. c) Flag for review any application that possesses the permission but belongs to a category where its prevalence is below a set threshold (e.g., less than 2% of apps in that category). 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on application metadata (developer, age, user ratings, number/type of other permissions requested). The model should predict a binary outcome: 'legitimate permission use' vs. 'anomalous permission use'. Periodically run the model against all apps with contact list access and investigate those flagged as 'anomalous' with a high confidence score."
          },
          {
            "description": "A single application process generates a statistically significant spike in OS API calls for contact list access, followed within a 5-minute window by network connections to a destination that is newly observed, has a high-entropy domain name, or is on a threat intelligence blocklist.",
            "data_sources": [
              "MTD OS API call monitoring logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile VPN concentrators, Network egress points for mobile device traffic, DNS resolvers serving mobile clients",
            "action": "1. (Symbolic) Configure a SIEM correlation rule that triggers when an MTD event for contact list access from a device's IP address is followed within 5 minutes by a Zeek conn.log event from the same source IP to a destination IP on a 'Mobile Malware C2' blocklist. 2. (Statistical) For each unique user-and-application combination, establish a baseline of hourly contact list API call frequency using MTD logs. Generate an alert if the call count in any hour exceeds the 99th percentile of the baseline. Enrich the alert by querying Zeek dns.log for DNS requests from the device in the same time window to domains with an entropy score greater than 3.5 or domains not seen in the preceding 30 days. 3. (Machine Learning) Deploy a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on sequences of device events (API calls, network connections, data volume). Feed real-time event streams from each device into the model. An alert is generated when the model's reconstruction error for a sequence containing contact list access followed by a network connection exceeds a dynamically tuned threshold, indicating a deviation from learned normal behavior patterns."
          },
          {
            "description": "A mobile device simultaneously reports a failed integrity check (e.g., is rooted or jailbroken) via MDM and has an application installed from an unofficial source ('sideloaded') that also possesses permissions to access the contact list.",
            "data_sources": [
              "MDM Device Compliance Log",
              "MDM Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM administration console, Device compliance reporting dashboards",
            "action": "1. (Symbolic) Implement a critical-severity SIEM alert that triggers when a single device ID produces logs that meet three conditions: a) a compliance status log showing 'is_compromised = true' or 'integrity_check = failed'; b) an application inventory log showing 'install_source = unofficial/sideloaded'; and c) the same application's manifest includes 'android.permission.READ_CONTACTS' or 'NSContactsUsageDescription'. 2. (Statistical) Generate a weekly report that lists all devices with one or more sideloaded applications. For each such application, calculate a risk score by summing weights for each sensitive permission it holds (e.g., Contacts=10, Microphone=10, Location=5, SMS=8). Rank the devices by the total risk score of all their sideloaded apps and prioritize the top 5% for manual investigation by a security analyst. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on all managed devices, using features like OS version, patch latency, number of failed integrity checks, and count of sideloaded apps. Isolate and investigate devices that are classified as outliers or belong to small, distinct clusters, as these represent high-risk device configurations that deviate significantly from the secure corporate baseline."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]