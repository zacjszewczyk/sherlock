[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by hijacking system runtime APIs? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1625.001",
        "name": "System Runtime API Hijacking",
        "evidence": [
          {
            "description": "An MDM or MTD log event indicates a device compliance check failure specifically for OS or file integrity. The event must contain a device identifier, the exact file path of the modified system library (e.g., '/system/lib/libart.so'), and a file hash that does not match the known-good hash from the organization's 'golden image' baseline for that specific OS version and device model.",
            "data_sources": [
              "MDM event logs",
              "MTD alert logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The MDM/MTD management platform and the population of enrolled Android devices.",
            "action": "1. (Symbolic) Create a SIEM detection rule that generates a high-severity alert when an MDM/MTD log event has a 'compliance_status' equal to 'failed' and a 'reason' field contains 'File Integrity Mismatch' or 'OS Tampering'. Upon alert, extract the file hash and automatically query internal and external threat intelligence platforms via API to determine if the hash corresponds to known malware. Escalate for incident response if the hash is malicious or if the file is a critical system component and the modification is unauthorized. 2. (Statistical) For each combination of device model and OS version, ingest hourly attestation failure counts into a statistical baseline. Calculate the 30-day rolling mean and standard deviation of failures for each hour. Trigger a medium-severity alert if the failure count for any segment in a given hour exceeds 3 standard deviations above its historical hourly mean (Z-score > 3), indicating an anomalous spike in tampering activity for that specific device group. 3. (Machine Learning) Develop and train a time-series forecasting model (e.g., SARIMA) using the historical fleet-wide count of attestation failures per hour to predict expected failure volumes. In real-time, compare the observed failure count against the model's forecast. Generate a medium-severity alert if the observed count exceeds the upper bound of the model's 99% confidence interval for two consecutive hourly periods, signaling a statistically significant deviation from the normal pattern that may indicate a widespread campaign."
          },
          {
            "description": "Network logs from a single mobile device IP address show a combination of anomalous behaviors within a short time window, such as: connections to low-reputation destinations, highly periodic (low standard deviation of time intervals) C2 beaconing, high Shannon entropy in DNS queries indicative of Domain Generation Algorithms (DGA), and the use of a TLS client fingerprint (JA3) that is rare across the device fleet.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at key traffic chokepoints, such as wireless LAN controllers, VPN gateways, and internet egress firewalls.",
            "action": "1. (Symbolic) Ingest Zeek conn.log and dns.log into the SIEM. Create a rule that joins records on the device IP and triggers a high-severity alert if the 'id.resp_h' (destination IP) from conn.log or the 'query' (domain) from dns.log matches an entry on a high-confidence threat intelligence feed of malicious indicators. Correlate the alert with the device owner information from DHCP or MDM logs for immediate investigation. 2. (Statistical) Over a 15-minute sliding window, calculate two risk metrics for each mobile device IP ('id.orig_h'): a) the standard deviation of connection timestamps to each unique destination ('id.resp_h'), and b) the Shannon entropy of all unique DNS queries in the 'query' field. Establish fleet-wide 95th percentile for DNS entropy and 5th percentile for connection interval standard deviation. Generate a medium-severity alert for any device that simultaneously exhibits DNS entropy above the 95th percentile and a connection interval standard deviation below the 5th percentile, indicating probable DGA and beaconing activity. 3. (Machine Learning) For each connection, create a feature vector from Zeek logs including protocol, destination port, duration, bytes transferred (orig_bytes, resp_bytes), and a one-hot encoded JA3 hash. Train an unsupervised clustering model (e.g., DBSCAN) on a 30-day baseline of this feature data to define clusters of normal network behavior. In production, classify new connections; any connection identified as noise (label -1) by the model is an outlier. Escalate a device for investigation if it generates a number of outlier connections within a 5-minute window that exceeds the 99th percentile of the baseline outlier rate for a single device, suggesting a pattern of anomalous traffic."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]