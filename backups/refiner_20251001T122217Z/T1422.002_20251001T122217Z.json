[
  {
    "information_requirement": "Is an adversary attempting to discover Wi-Fi network information on managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422.002",
        "name": "Wi-Fi Discovery",
        "evidence": [
          {
            "description": "A non-system, non-MDM application process on a managed mobile device makes an atypically high number of calls to Wi-Fi configuration APIs, such as `WifiManager.getConfiguredNetworks()` on Android or `NEHotspotConfigurationManager.fetchConfigurations` on iOS. Atypical is defined as exceeding a statistically derived baseline for that specific application or application category (e.g., >15 calls in a 5-minute window).",
            "data_sources": [
              "Mobile Device Management (MDM) API call logs",
              "Mobile Endpoint Detection and Response (EDR) process activity logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS, Android), Mobile Device Management (MDM) Platform, Mobile EDR Platform",
            "action": "Symbolic: 1. Maintain an allow-list of approved application package names and their code-signing hashes that are authorized to query Wi-Fi configurations. 2. Ingest MDM/EDR API call logs into a SIEM. 3. Create a detection rule to generate a high-severity alert for any unlisted application calling `getConfiguredNetworks` or `fetchConfigurations`. Statistical: 1. For each application, ingest at least 30 days of MDM/EDR API call logs to create a baseline of call frequency per 5-minute window. 2. Calculate the mean ($$\\mu$$) and standard deviation ($$\\sigma$$) of calls for each application. 3. Create a rule that generates a medium-severity alert if an application's call count in a 5-minute window exceeds $$ \\mu + 3\\sigma $$ or the 99th percentile for that specific app. Machine Learning: 1. From MDM/EDR logs, engineer features for a classifier model (e.g., Random Forest): API call frequency, API call sequences (e.g., `getConfiguredNetworks` followed by `startActivity`), application permissions, install source, and time-of-day. 2. Train the model to classify API call patterns as 'benign' or 'malicious Wi-Fi discovery'. 3. Deploy the model to score new activity in near real-time, alerting on high-probability classifications."
          },
          {
            "description": "A mobile device, within 5 minutes of a new Wi-Fi connection event, initiates network connections from a single source port to a high number of unique internal IP addresses (>20) or unique destination ports (>15) on the local subnet. This activity, characteristic of network scanning, excludes known broadcast and multicast traffic.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "DHCP Server Logs",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate and guest Wi-Fi network segments, Network sensors (e.g., Zeek), DHCP servers",
            "action": "Symbolic: 1. Configure Zeek to enable the Scan detector. 2. Ingest `notice.log` into a SIEM. 3. Create a high-severity alert rule for `Scan::Address_Scan` or `Scan::Port_Scan` notices. 4. Enrich the alert by joining the source IP with DHCP logs based on IP and timestamp to identify the device hostname and MAC address. Statistical: 1. Using `conn.log`, group connections by source IP (`id.orig_h`) in 60-second tumbling windows. 2. For each window, calculate the count of distinct destination IPs (`id.resp_h`) on the local subnet and the Shannon entropy of destination ports (`id.resp_p`). 3. Establish a 30-day baseline for the 95th percentile for both metrics across all mobile devices. 4. Generate a medium-severity alert when a single device exceeds both baselines in a single window. Machine Learning: 1. From `conn.log`, extract connection features per source IP in 1-minute intervals: total bytes sent, packet count, ratio of SYN to FIN/RST packets, unique destination IP count, and port entropy. 2. Train a density-based clustering algorithm like DBSCAN to identify anomalous clusters of scanning behavior that are distinct from normal network chatter. 3. Generate an alert when a device's activity is classified as a new, anomalous cluster."
          },
          {
            "description": "A process on a managed mobile device reads a known Wi-Fi credential store (e.g., `/data/misc/wifi/wpa_supplicant.conf` or `/data/misc/apexdata/com.android.wifi/WifiConfigStore.xml` on Android; iOS Keychain items with `kSecAttrService` containing `com.apple.wifid`) and, within 90 seconds, initiates an outbound network connection to a domain with a low prevalence score (<1% of devices) or a newly registered domain (<30 days old).",
            "data_sources": [
              "Mobile EDR file integrity monitoring logs",
              "Mobile EDR process or keychain access logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Network Egress Points (Firewall/Proxy), Internal DNS Resolvers, Mobile EDR Platform, Threat Intelligence Platform",
            "action": "Symbolic: 1. Deploy a Mobile EDR rule to generate a high-severity alert upon any read access to known Wi-Fi credential stores by a non-system process. 2. Correlate the device and timestamp with network logs (`conn.log`). 3. Escalate the alert if a subsequent outbound connection is made to an IP/domain on a threat intelligence feed within 5 minutes. Statistical: 1. Upon an EDR alert for credential store access, query `dns.log` for all domains resolved by that device in the following 5 minutes. 2. For each resolved domain, calculate its prevalence score: $$ S_p = (\\text{count of unique devices querying domain in last 30 days}) / (\\text{total unique devices}) $$. 3. Generate a medium-severity alert if the device connects to a domain where $$ S_p < 0.01 $$. Machine Learning: 1. Create event sequences from EDR and Zeek logs: [Process 'P' starts -> 'P' reads credential store -> 'P' resolves domain 'D' -> 'P' connects to IP 'I']. 2. Engineer features for a sequence model (e.g., LSTM or Transformer): process name hash, file path accessed, DNS query type, domain entropy, domain age, destination ASN, and bytes transferred. 3. Train the model to classify sequences as benign or 'credential theft and exfiltration'. 4. Deploy the model to score real-time event sequences and alert on high-confidence predictions."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]