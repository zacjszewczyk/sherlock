[
  {
    "information_requirement": "Is an adversary attempting to elevate privileges on mobile devices via process injection? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "An auditable event showing a running process on a mobile OS (Android, iOS) loading a dynamic library (.so, .dylib) that is either unsigned or not on a pre-defined application allowlist. Alternatively, an event showing a process making calls to specific debugging or memory manipulation APIs, such as `ptrace` (Android) or `mach_vm_write` (iOS), where the process is not an authorized debugging or development tool.",
            "data_sources": [
              "Android logcat",
              "iOS Unified Logs",
              "MDM/EDR Process Activity Logs",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform; Endpoint Detection and Response (EDR) agents on managed mobile devices; Network sensors monitoring corporate Wi-Fi and VPN traffic; SIEM or data lake where mobile EDR and network logs are aggregated and correlated.",
            "action": "1. (Symbolic Logic) Create a SIEM rule that triggers on EDR logs from mobile devices indicating a call to `ptrace`, `dlopen` (with a non-system path), or `mach_vm_write`. Exclude events from processes on an approved developer/debugger tool allowlist. For any trigger, enrich the event with network data by correlating the device IP and timestamp (+/- 2 minutes) from Zeek conn.log and dns.log. Escalate to an alert if: a) the loaded library name matches a known malicious signature, OR b) the device communicates with a destination IP/domain on a threat intelligence feed. 2. (Statistical) For each mobile application package name, build and maintain an allowlist of legitimate dynamic libraries loaded across all managed devices over a 30-day baseline period. In real-time, monitor for library load events from EDR logs and calculate the prevalence of each loaded library across the fleet for its parent application, flagging any library with a prevalence of less than 1% as 'rare'. Concurrently, ingest Zeek dns.log data and calculate the Shannon entropy for the second-level domain plus TLD of each requested FQDN using the formula $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$. Generate a high-priority alert when a 'rare' library load event occurs within a 2-minute window of a DNS request from the same device IP where the domain entropy score is in the 99th percentile (or has an absolute value > 4.0). 3. (Machine Learning) For high-risk applications (e.g., browsers, messaging apps), collect sequences of system calls (e.g., 100 calls per sequence) from historical mobile EDR data. Train an LSTM autoencoder model on these sequences to learn a representation of normal process behavior. In production, feed live system call sequences into the trained model and calculate the reconstruction error for each sequence. Flag a sequence as anomalous if its reconstruction error exceeds a threshold set at the 99.9th percentile of errors from a validation dataset. Escalate to an alert if the anomalous sequence occurs within 5 minutes of the device initiating a connection to a newly observed destination IP (an IP not seen communicating with this device in the last 30 days, based on Zeek conn.log history)."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary using process injection to hide malicious code within legitimate mobile application processes? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1631",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A trusted, allowlisted mobile application process shows a sustained increase in resource consumption (e.g., CPU or memory usage exceeding 3 standard deviations above its 30-day baseline for more than 5 minutes) that is temporally correlated with network connections to destination FQDNs or IPs not present in the application's historical baseline of network activity.",
            "data_sources": [
              "MDM Performance Logs (CPU/Memory)",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM console providing performance telemetry; Network egress points capturing traffic from corporate Wi-Fi and VPNs; SIEM or data lake where performance and network logs are aggregated; Devices assigned to users with access to sensitive corporate data.",
            "action": "1. (Symbolic Logic) Create a SIEM rule that joins MDM/EDR process telemetry with Zeek network logs on device IP and timestamp. Trigger an alert when a process with a name matching a trusted application (e.g., `com.android.chrome`, `com.apple.mobilesafari`) initiates a network connection where: a) the destination IP, domain, or JA3/JA3S hash from Zeek ssl.log is on a threat intelligence feed, OR b) the User-Agent from Zeek http.log does not match the established, known User-Agent string for that specific application and OS version. 2. (Statistical) For each unique device-application pair, continuously calculate the 30-day rolling 95th percentile for CPU and memory usage from MDM performance logs. Generate a medium-priority event if both CPU and memory metrics for an application exceed this percentile for a continuous 10-minute window. During this window, analyze the device's network traffic from Zeek conn.log and calculate the ratio of outgoing to incoming bytes ($$ orig\\_bytes / resp\\_bytes $$). Escalate the event to a high-priority alert if this ratio exceeds the 99th percentile of its historical 30-day distribution for that device. 3. (Machine Learning) For each mobile device, create feature vectors for every outbound network connection from Zeek conn.log, including destination port, protocol, duration, `orig_bytes`, `resp_bytes`, and the destination IP's Autonomous System Number (ASN). Train an unsupervised DBSCAN clustering model on 30 days of historical data to identify clusters representing 'normal' network behavior for each device. In real-time, score new connections against the model. Flag any connection that the model classifies as a noise point (i.e., an outlier). If a device generates a network outlier event during a period of high resource consumption (as identified by the statistical method), generate a high-severity alert for immediate investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]