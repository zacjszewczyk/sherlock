[
  {
    "information_requirement": "Is an adversary using a non-standard or custom encrypted channel for command and control on our managed mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1521",
        "name": "Encrypted Channel",
        "evidence": [
          {
            "description": "A TLS session initiated by a managed mobile device establishes a connection using a certificate where the issuer is self-signed, is not present on an organizational allowlist of approved Certificate Authorities, or the destination domain has a low reputation score or was registered within the last 30 days.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at internet egress points (e.g., corporate Wi-Fi gateways, VPN concentrators), Cloud Access Security Broker (CASB) logs, and Mobile Device Management (MDM) platform for device context and asset information.",
            "action": "1. (Symbolic) Join `ssl.log` and `x509.log` records on the connection UID. Filter for sessions where the `x509.validation_status` is 'self-signed certificate' or the `x509.issuer` is not on an approved CA allowlist. For these results, join with `dns.log` on the destination IP and check if the queried domain is present on a threat intelligence blocklist or has a creation date within the last 30 days. Generate a high-severity alert for any session matching both the certificate and domain criteria. 2. (Statistical) Isolate all TLS sessions from `ssl.log` where the certificate issuer is not on the approved CA allowlist. From the corresponding `conn.log` entries, extract the destination IPs. Enrich each IP with a reputation score from an external threat intelligence provider. Calculate the distribution of these reputation scores across all mobile device traffic over a 24-hour period. Trigger an alert for any connection to a destination IP whose reputation score falls below the 5th percentile of the observed distribution. 3. (Machine Learning) Develop and train a classifier model (e.g., Random Forest) on labeled historical `ssl.log` and `x509.log` data. Engineer features such as certificate validity duration, Shannon entropy of the certificate subject and issuer fields, public key algorithm type, and binary flags for self-signed status and newly registered domain. Deploy the model to score new TLS sessions in real-time and generate alerts for any session exceeding a predetermined suspicion threshold."
          },
          {
            "description": "A TLS client hello from a managed mobile device produces a JA3 or JA3S hash that is either not on an established allowlist of sanctioned applications or has a prevalence below the 1st percentile across the entire managed device fleet.",
            "data_sources": [
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at internet egress points, virtual tap points in the cloud environment, and the Mobile Device Management (MDM) platform for application inventory.",
            "action": "1. (Symbolic) Generate an allowlist of JA3 and JA3S hashes by baselining traffic from approved applications on managed mobile devices over a 30-day period. Create a detection rule to trigger an alert when a `ja3` or `ja3s` hash from a mobile device IP address, as seen in `ssl.log`, is not found on this allowlist. Enrich alerts with device owner and installed application data from the MDM platform. 2. (Statistical) Execute a daily batch job to calculate the frequency of all unique JA3 hashes from the mobile device IP range over the last 30 days of `ssl.log` data. Determine the prevalence percentage for each hash across the entire population. Generate a medium-severity alert for any new connection that uses a JA3 hash with a prevalence below the 1st percentile, indicating a client application that is exceptionally rare in the environment. 3. (Machine Learning) Model the behavior of each mobile device by creating a feature vector representing the set of JA3 hashes it has used over a rolling 7-day window. Apply a density-based clustering algorithm (e.g., DBSCAN) to this dataset of device vectors. Investigate any small, dense clusters that form, as this indicates a group of devices exhibiting identical and potentially anomalous TLS client behavior, which could correspond to a specific malware family."
          },
          {
            "description": "An encrypted TCP connection from a managed mobile device exhibits characteristics of C2 beaconing, such as a connection duration exceeding 12 hours, periodic data transfers of a near-identical size, and a low standard deviation of inter-packet arrival times.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches, VPN concentrators, and network taps monitoring traffic from split-tunneling configurations on mobile devices.",
            "action": "1. (Symbolic) Create a detection rule that queries `conn.log` for connections originating from the mobile device IP range where the connection state is not 'S0', 'S1', or 'REJ', the `duration` is greater than 12 hours, and the total bytes transferred (`orig_bytes` + `resp_bytes`) is less than a defined threshold (e.g., 5 KB). This combination identifies long-lived, low-volume connections typical of idle C2 channels. 2. (Statistical) For each source-destination pair in `conn.log` originating from a mobile device, calculate the standard deviation of the time deltas between successive connections and the standard deviation of the `orig_bytes` field over a 24-hour window. A standard deviation for both metrics approaching zero (e.g., below the 5th percentile of all calculated deviations) indicates a highly regular 'heartbeat' and uniform packet size. Alert on source-destination pairs exhibiting this behavior. 3. (Machine Learning) For TCP sessions longer than one hour, extract the time series of originator packet timestamps from high-fidelity flow data or PCAP. Convert this time series of inter-arrival times into the frequency domain using a Fast Fourier Transform (FFT). Analyze the resulting power spectral density. Develop a model that alerts when the ratio of the power of the dominant frequency to the total power of the spectrum exceeds a learned threshold, which is a strong indicator of automated beaconing."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]