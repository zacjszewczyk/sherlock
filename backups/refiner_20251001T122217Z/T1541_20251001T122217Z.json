[
  {
    "information_requirement": "Is an adversary using foreground services to establish persistence on a corporate mobile device? (TA0028 - Persistence)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1541",
        "name": "Foreground Persistence",
        "evidence": [
          {
            "description": "An application's manifest file (AndroidManifest.xml) contains the 'android.permission.FOREGROUND_SERVICE' permission, and runtime logs show invocations of the startForeground() method. This behavior is anomalous when the application is not on an approved list for such activity (e.g., navigation, music players) or its runtime duration exceeds typical usage patterns for its category.",
            "data_sources": [
              "MDM Application Manifest Scan",
              "Android Logcat Runtime Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android devices enrolled in MDM; Mobile Application Management (MAM) sandbox; Corporate application vetting and signing infrastructure.",
            "action": "1. (Symbolic) Continuously scan MDM application inventory for newly installed applications. For each new app, parse its manifest to check for the 'android.permission.FOREGROUND_SERVICE' permission. Trigger a high-priority alert if this permission is present AND the application's package name is not on a pre-defined allowlist of known-good applications. 2. (Statistical) Ingest Android Logcat data containing foreground service start/stop events into a SIEM. For each application category (e.g., Navigation, Media, Productivity), aggregate foreground service runtimes over a 30-day rolling window to establish a baseline distribution. Calculate the 95th and 99th percentile for runtime duration for each category. Trigger a medium-priority alert when an application's individual service runtime exceeds the 99th percentile for its established category. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features extracted from application metadata via MDM: count of permissions, presence of dangerous permissions, application source (e.g., official store, sideloaded), and category. The model will predict a probability (0-1) of malicious foreground service usage. If a newly installed app with the FOREGROUND_SERVICE permission receives a score above a defined threshold (e.g., 0.9), automatically trigger an MDM action to quarantine the device and generate a critical incident."
          },
          {
            "description": "A TCP connection from a managed mobile device to a single external IP address exhibits a duration exceeding a high threshold (e.g., > 4 hours) and occurs outside the user's typical working hours. This is often coupled with low and periodic data transfers, inconsistent with normal user activity.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM device inventory"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors monitoring corporate Wi-Fi segments; Core DNS resolvers; Network egress points and firewalls.",
            "action": "1. (Symbolic) Query Zeek conn.log every 15 minutes for connections where the source IP maps to a mobile device (via MDM inventory), `duration` is greater than 14400 seconds (4 hours), and the destination IP (`id.resp_h`) matches a threat intelligence feed of known C2 servers. If a match is found, retrieve the associated DNS query from dns.log to identify the domain and the device owner from MDM for immediate investigation. 2. (Statistical) For each mobile device IP, establish a 30-day rolling baseline of connection statistics from Zeek conn.log. Calculate the 95th percentile for connection `duration` and the 5th percentile for total bytes transferred (`orig_bytes` + `resp_bytes`). Trigger an alert if a connection's duration exceeds the 95th percentile while its total byte count falls below the 5th percentile, indicating a potential 'low and slow' C2 channel. 3. (Machine Learning) For each device, create a time series of the hourly count of long-duration connections (e.g., > 1 hour) from Zeek conn.log. Apply a time-series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) to this data stream. An anomaly detected by the model, representing a statistically significant deviation from the device's normal connection patterns, should generate an alert for analyst investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading background process restrictions on mobile devices to access sensors? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1541",
        "name": "Foreground Persistence",
        "evidence": [
          {
            "description": "A series of connections from a mobile device to a single external destination IP exhibits a near-zero standard deviation in inter-arrival times, resulting in a Shannon entropy score below a defined threshold (e.g., < 1.5), indicative of automated, non-human beaconing activity.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at traffic egress points; DNS resolvers; Network taps monitoring Wi-Fi access points for mobile devices.",
            "action": "1. (Symbolic) Continuously scan Zeek http.log for requests originating from the mobile device IP range. Trigger an alert if the `user_agent` string matches a known malicious tool signature, is a generic default client (e.g., 'Dalvik/2.1.0'), or is null. For any such alert, automatically correlate the destination IP with Zeek dns.log to check for suspicious domain characteristics, such as a recent registration date (< 30 days). 2. (Statistical) For each source IP in the mobile device range, group connections by destination IP (`id.resp_h`) in 1-hour windows using Zeek conn.log. For each group with more than 10 connections, calculate the time deltas between consecutive connection start times. Compute the Shannon entropy of these deltas. Trigger an alert for any source-destination pair where the entropy score is below a threshold (e.g., 1.5), indicating highly predictable, machine-generated beaconing. 3. (Machine Learning) On an hourly basis, featurize connections from mobile devices using attributes from Zeek conn.log, such as `duration`, `orig_bytes`, `resp_bytes`, `id.resp_p`, and the standard deviation of inter-arrival times to the same destination. Use a pre-trained density-based clustering algorithm (e.g., DBSCAN) to model normal network behavior. Flag any connection that the model classifies as a noise point (an outlier) for analyst review as a potential C2 beacon."
          },
          {
            "description": "An application known to be using a foreground service (identified via MDM) shows a significant statistical deviation in its data transfer patterns. Specifically, the volume of data sent (`orig_bytes`) in a single session or over a 24-hour period exceeds 3 standard deviations from its own historical baseline, suggesting anomalous data staging or exfiltration.",
            "data_sources": [
              "MDM Application Runtime Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/MAM management servers; Network sensors monitoring corporate Wi-Fi segments and VPN connections from mobile devices.",
            "action": "1. (Symbolic) Create a real-time correlation search that joins MDM application data (mapping device IP to running applications) with network flow data from Zeek conn.log. Trigger a high-priority alert if an application using a foreground service communicates with a destination IP listed in a threat intelligence feed of known exfiltration endpoints or anonymous file-sharing services. 2. (Statistical) For each unique application on each device, establish a 30-day rolling baseline of the daily sum of outgoing bytes (`orig_bytes`) from Zeek conn.log. Calculate the mean and standard deviation for this metric. Trigger a medium-priority alert if an application's data upload volume on a given day exceeds 3 standard deviations above its historical mean for that device. 3. (Machine Learning) Develop a regression model (e.g., Gradient Boosting Regressor) to predict the expected daily data upload volume (`sum of orig_bytes`) for each device. Use features such as user department, device type, and day of the week. Monitor the model's prediction residuals (actual volume - predicted volume) in real time. A sustained, large positive residual for a device indicates an anomalous data transfer event that should be flagged for investigation to determine the source application via MDM data."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]