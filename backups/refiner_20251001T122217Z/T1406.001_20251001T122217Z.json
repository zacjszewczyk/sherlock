[
  {
    "information_requirement": "Is an adversary using steganography to exfiltrate data from or introduce malicious tools to managed mobile devices? (TA0030 - Defense Evasion)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.001",
        "name": "Steganography",
        "evidence": [
          {
            "description": "A media file (e.g., PNG, JPG, MP4) transferred over the network from/to a mobile device is directed to a destination IP/domain on a threat intelligence blocklist, OR the file's size exceeds the 99th percentile for its MIME type within a 30-day rolling window, OR its calculated Shannon entropy $$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$ is greater than 7.5, indicating a high degree of randomness inconsistent with typical media files.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network egress points, Guest Wi-Fi network segments, VPN concentrators serving mobile devices, Cloud storage service gateways",
            "action": "1. (Symbolic) Ingest Zeek logs into a SIEM. Join `files.log` with `conn.log` on the `uid` field and enrich with `http.log` (host header) and `dns.log` (query/answer) to get domain names. Cross-reference the destination IP (`id.resp_h`) and domain name against a threat intelligence feed of known malicious hosts. Alert on any match. 2. (Statistical) For each MIME type in `files.log`, calculate the 99th percentile of file sizes (`seen_bytes`) over a 30-day rolling window. Alert if a new file's size exceeds this threshold. Separately, for each transferred file's content, calculate its Shannon entropy. Alert on any file with an entropy score > 7.5, as this suggests encrypted or packed data. 3. (Machine Learning) Train an Isolation Forest model on features from `files.log`, `conn.log`, and `http.log` representing benign traffic. Use features such as: file size, MIME type, transfer duration, destination ASN, user agent, and time of day. Apply the trained model to score all new file transfers. Investigate transfers with the highest anomaly scores (e.g., top 1%) as potential steganographic activity."
          },
          {
            "description": "A mobile application binary (.apk or .ipa) installed on a managed device contains embedded strings matching known steganography libraries, OR a media file (e.g., JPG, PNG) on the device's local storage has a Shannon entropy z-score $$ z = (x - \\mu) / \\sigma $$ exceeding 3, where $$ \\mu $$ is the mean and $$ \\sigma $$ is the standard deviation of entropy for that file type's baseline.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile Endpoint File System Scan Data",
              "Mobile Application Sandbox Analysis Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Enterprise application store and repository, Mobile device sandboxing environment",
            "action": "1. (Symbolic) Using MDM inventory data, retrieve application binaries (.apk/.ipa). Scan each binary using a YARA rule designed to find keywords and function names related to steganography libraries (e.g., 'StegLib', 'LsbSteganography', 'steganopng', 'pixelknot'). Generate an alert for any match. 2. (Statistical) Via a mobile EDR agent, periodically scan media files in common storage directories (`DCIM`, `Downloads`, `Pictures`). For each file type (e.g., `.jpg`, `.png`), maintain a baseline of Shannon entropy values (mean $$ \\mu $$ and standard deviation $$ \\sigma $$). For each new or modified file, calculate its entropy's z-score. Alert if the z-score is greater than 3. 3. (Machine Learning) Train a Gradient Boosting Classifier using features from an application sandbox and MDM. Features should include: requested permissions (e.g., `READ_EXTERNAL_STORAGE`, `INTERNET`), presence of steganography-related strings from a YARA scan, suspicious API call patterns, app store of origin, and code obfuscation metrics. Use the trained model to assign a risk score to all new and updated applications."
          },
          {
            "description": "A process on a mobile device, not on a pre-defined allowlist of media-related applications, reads a media file (e.g., .jpg, .png) and, within a 5-second window, initiates an outbound network connection to an external IP address that is either present on a blocklist or is statistically rare for that application's baseline behavior.",
            "data_sources": [
              "Mobile Endpoint Detection and Response (EDR) process logs",
              "Mobile EDR network connection logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet, Corporate Wi-Fi network egress points, VPN concentrators",
            "action": "1. (Symbolic) Correlate mobile EDR process and network logs. Create a rule that triggers when a process (a) is not on an allowlist of standard media applications (e.g., Photos, Instagram, gallery apps), (b) performs a file-read on a media file extension, and (c) within 5 seconds, initiates a network connection to an IP on a threat intelligence blocklist. 2. (Statistical) From mobile EDR logs, establish a behavioral baseline for each application, mapping processes to the Autonomous System Numbers (ASNs) they connect to. Calculate the frequency of each process-ASN pair. If a process reads a media file and then connects to an ASN that falls in the bottom 5% of its historical connection frequency, flag it as a rare event sequence and investigate. 3. (Machine Learning) Implement a sequence analysis model, such as an LSTM-based autoencoder, using mobile EDR event logs. Input sequences should be fixed-length vectors of events (e.g., `process_start`, `file_read_media`, `network_connect_external`, `file_write`). Train the model on sequences generated by benign applications. A high reconstruction error on a new sequence indicates a significant deviation from normal behavior, suggesting a malicious process flow consistent with steganography."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]