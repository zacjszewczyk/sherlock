[
  {
    "information_requirement": "Is an adversary collecting sensitive data from local system storage on our mobile devices? (TA0035 - Collection) (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1533",
        "name": "Data from Local System",
        "evidence": [
          {
            "description": "An application process performs file read operations that are anomalous when compared to its historical behavior. Anomalies are defined as either: a) a file read rate (files accessed per minute) that exceeds the 95th percentile of its own 30-day baseline, or b) access to a high count (e.g., >50) of unique file paths within sensitive directories (e.g., Photos, Contacts, Downloads) in a one-minute interval.",
            "data_sources": [
              "MDM file access logs",
              "EDR file system monitoring logs",
              "Android logcat",
              "iOS Unified Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/)",
            "action": "1. (Symbolic) In your SIEM, define a watchlist of sensitive directories (e.g., DCIM, Contacts, Documents) and known malicious or suspicious process names. Create a rule that triggers a high-severity alert when a process on the watchlist performs a read operation within a sensitive directory. 2. (Statistical) For each application process, ingest MDM/EDR file access logs into a SIEM. Run a scheduled query to calculate the number of file reads per minute, establishing a 30-day rolling baseline and calculating the 95th and 99th percentiles for this metric. Generate a medium-severity alert if a process exceeds the 95th percentile and a high-severity alert if it exceeds the 99th. 3. (Machine Learning) Apply a pre-trained time-series anomaly detection model (e.g., LSTM) to the file access patterns of each application. Use features such as file access frequency, file path entropy, and count of unique directories accessed per minute. Generate an alert when the model's prediction error surpasses a defined threshold, indicating a significant deviation from learned normal behavior."
          },
          {
            "description": "An API call to access sensitive credential stores (Android Keystore or iOS Keychain) is made by a process that is not on a pre-defined allowlist of trusted system or application processes.",
            "data_sources": [
              "MDM API monitoring logs",
              "EDR API call monitoring logs",
              "OS-level security audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Device credential management services and API gateways on mobile endpoints (e.g., Android Keystore, iOS Keychain).",
            "action": "1. (Symbolic) Using MDM/EDR API monitoring logs, create and maintain an immutable allowlist of process names and their associated cryptographic signers (e.g., 'securityd' on iOS, 'com.android.keychain' on Android) authorized to access credential stores. Create a SIEM rule to generate a critical alert for any access attempt from a process not on this list. 2. (Statistical) Profile the frequency of credential store API calls for all applications. Establish a baseline of access frequency per hour, segmented by application and user role. Alert on any activity that deviates by more than 3 standard deviations from the hourly mean, which could indicate compromise or misuse. 3. (Machine Learning) Deploy a one-class SVM (Support Vector Machine) model trained on legitimate credential access patterns. Use features such as process name, parent process, cryptographic signer, API function called, and time of day. Flag any new access attempt that the model classifies as an outlier for immediate investigation."
          },
          {
            "description": "A large archive file (e.g., >10MB with a .zip, .tar, .gz, or .7z extension) is created in a user-writable directory by a process not on an allowlist of approved file management or backup applications. The filename may also exhibit high entropy, suggesting randomized naming to evade detection.",
            "data_sources": [
              "MDM file creation logs",
              "EDR file system monitoring logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable storage locations on mobile devices (e.g., Android: /storage/emulated/0/Download/, iOS: /var/mobile/Library/Mobile Documents/) and corporate network egress points monitored by network sensors.",
            "action": "1. (Symbolic) Monitor MDM/EDR file creation events. Create a SIEM rule that triggers a medium-severity alert if a file with an archive extension (.zip, .tar, .gz, .7z) and size >10MB is created by a process not on the allowlist of approved file managers and backup utilities. 2. (Statistical) For each alert generated by the symbolic rule, automatically calculate the Shannon entropy of the filename. If the entropy score is high (e.g., >3.5), increase the event's risk score. Correlate this event by device IP and timestamp with network logs (Zeek conn.log) to identify any subsequent large data transfers (>10MB) to an external destination within a 5-minute window. A successful correlation elevates the alert to high-severity. 3. (Machine Learning) Train a Random Forest classification model using a labeled dataset of benign and malicious archive creation events. Features should include: creating process name, process signer, file size, file path depth, filename entropy, and time of day. Deploy the model to score new events in real-time, prioritizing analyst review for those with a malicious probability score above a tuned threshold (e.g., 0.8)."
          },
          {
            "description": "An installed application possesses a combination of high-risk permissions (e.g., READ_CONTACTS, READ_SMS, MANAGE_EXTERNAL_STORAGE) that is statistically rare for its declared application store category and not justified by its stated function.",
            "data_sources": [
              "MDM application inventory logs",
              "App store manifest data",
              "Android logcat permission grant logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application manifests and permission grant logs stored on managed mobile devices and aggregated by the MDM/UEM platform.",
            "action": "1. (Symbolic) Define and maintain a list of 'toxic' permission combinations (e.g., READ_CONTACTS + ACCESS_INTERNET + INSTALL_PACKAGES). Execute a recurring SIEM query against the MDM application inventory to identify any app with a toxic combination and flag it for manual review. 2. (Statistical) For each app store category (e.g., 'Games', 'Productivity'), ingest MDM permission data to calculate the prevalence of each permission. Create a risk score for each application by summing the inverse prevalence of its granted permissions (rarer permissions receive higher scores). Periodically review the top 5% of applications with the highest cumulative risk scores. 3. (Machine Learning) Apply a density-based clustering algorithm (e.g., DBSCAN) to the application inventory using a multi-hot encoded vector of granted permissions as the feature set for each application. This will group applications with similar permission profiles. Investigate applications classified as outliers (noise points) or those in small clusters containing high-risk permissions, as these represent anomalous permission sets."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]