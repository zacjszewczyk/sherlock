[
  {
    "information_requirement": "Has an adversary gained initial access by pushing a malicious update to a previously benign mobile application? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "A mobile application, within 24 hours of an update, initiates network connections to destinations that are anomalous when compared to a 30-day baseline, are present on threat intelligence feeds, or exhibit suspicious domain characteristics (e.g., registration age, name entropy, TLS fingerprint).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Mobile EDR/MDM Network Flow Logs",
              "Whois Data",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), DNS resolvers, and the SIEM platform where MDM/EDR and Zeek logs are aggregated.",
            "action": [
              "Correlate application update events from MDM/EDR logs with network logs (Zeek conn.log, dns.log) by device ID and timestamp. For all network connections within 24 hours post-update, query destination FQDNs and IPs against threat intelligence feeds. Also, enrich destinations with WHOIS data and flag any domain registered within the last 90 days. Alert on any match.",
              "For each new DNS query post-update (Zeek dns.log), calculate the Shannon entropy of the queried FQDN and alert if the score exceeds a dynamic threshold based on the 99th percentile of entropy scores for that application's historical queries. For new TLS connections (Zeek ssl.log), compare the JA3/JA3S hash against the historical set for the application and alert if a new hash's enterprise-wide prevalence is below the 1st percentile.",
              "Apply a pre-trained time-series anomaly detection model (e.g., LSTM, Prophet) to the application's egress data volume (bytes_out from Zeek conn.log), aggregated in 5-minute intervals. Generate an alert if observed traffic volume post-update falls outside the model's 95% confidence interval, indicating a significant deviation from the established baseline."
            ]
          },
          {
            "description": "Following a detected update, a mobile application is granted a new set of permissions that are either on a predefined high-risk list, represent a statistically significant change from the previous version's permissions, or are statistically rare for its app store category.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "MDM Compliance Logs",
              "Mobile OS permission logs",
              "App Store Category Baselines"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM platform and the SIEM platform where application inventory and compliance logs are stored.",
            "action": [
              "For each application update event from MDM logs, extract the pre- and post-update permission manifests. Compare any newly granted permissions against a curated list of high-risk permissions (e.g., `android.permission.BIND_DEVICE_ADMIN`, `com.apple.developer.kernel.extended-memory-access`). Generate a high-severity alert on any match.",
              "Calculate the Jaccard similarity index between the pre- and post-update permission sets. Alert if the score is below a tuned threshold (e.g., 0.8), indicating a substantial change. For each new permission, query a pre-computed baseline of permission prevalence by app store category and flag any permission found in less than 2% of apps in that category.",
              "Represent the application's permission set as a multi-hot encoded vector. Use a pre-trained classifier (e.g., Random Forest, Gradient Boosting) to label the permission set as 'benign' or 'suspicious'. Trigger an alert if an application's classification changes from 'benign' to 'suspicious' following an update."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by hiding malicious code within a legitimate application update? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "An application update is signed with a developer certificate that either has a thumbprint different from all previous versions, is newly issued, possesses a low-prevalence issuer, or is associated with other known malicious applications.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Application Manifest Data",
              "Certificate Transparency Logs",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM platform, application manifest repositories, and the SIEM platform where threat intelligence and certificate data are correlated.",
            "action": [
              "Upon detecting an application update via MDM logs, extract the code signing certificate's thumbprint. Compare this thumbprint against a historical allow-list of all thumbprints ever used for that specific application ID; alert immediately on any mismatch. Concurrently, query the new thumbprint against threat intelligence feeds for known malicious certificates.",
              "Calculate a risk score for the new certificate. Add points if the 'valid from' date is less than 90 days old. Add points if the certificate issuer's prevalence across all managed devices is in the bottom 5th percentile. Add points if the subject name's Levenshtein distance from the most recent previous version exceeds a threshold. Alert if the cumulative score surpasses a defined value.",
              "Utilize a graph-based model where nodes represent applications, certificates, and developers. After an update, if the new certificate creates a link (edge) from a previously trusted application node to a cluster of nodes identified as malicious (e.g., via community detection algorithms), flag the application as high-risk."
            ]
          },
          {
            "description": "Post-update, an application's network traffic exhibits command-and-control (C2) characteristics such as periodic beaconing, anomalous data egress volumes, use of non-standard ports for common protocols, or encrypted traffic patterns that deviate from its established 30-day baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek files.log",
              "Mobile EDR/MDM Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., Corporate Wi-Fi, VPN Concentrators), CASB, and the SIEM platform aggregating network flow data (Zeek, EDR/MDM) for behavioral analysis.",
            "action": [
              "Analyze network traffic post-update. Use a Zeek policy script or SIEM rule to alert on non-TLS traffic over TCP/443 originating from the application. Use regular expressions to match the `server_name` field in Zeek ssl.log against known C2 FQDN patterns from threat intelligence feeds. Alert on any match.",
              "To detect beaconing, calculate the standard deviation of inter-arrival times for the application's outbound connections (from Zeek conn.log) in a 1-hour window; a value approaching zero indicates periodicity and should be flagged if it falls below the 5th percentile of that app's historical values. To detect DGA, calculate the entropy of the TLS `server_name` in ssl.log; alert if the entropy score exceeds the 98th percentile for that app's baseline.",
              "Train an autoencoder neural network on feature vectors representing normal network sessions for the application (e.g., duration, orig_bytes, resp_bytes, proto, port). After an update, feed new session vectors into the model. A session with a high reconstruction error indicates it is anomalous and potentially malicious C2 communication, triggering an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]