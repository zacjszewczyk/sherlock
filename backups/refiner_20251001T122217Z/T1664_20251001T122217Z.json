[
  {
    "information_requirement": "Has an adversary exploited a software vulnerability to gain initial access to a mobile device? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1664",
        "name": "Exploitation for Initial Access",
        "evidence": [
          {
            "description": "A mobile device initiates a network connection to a destination IP address or domain on a mobile-specific threat intelligence feed, or the device's network traffic profile exhibits statistically significant anomalies in data volume, destination port distribution, or TLS fingerprinting when compared to its historical baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments, Guest Wi-Fi network, VPN concentrators, Internet gateway proxy/firewall logs, and MDM/UEM servers.",
            "action": "Symbolic: Step 1: Ingest a mobile-specific threat intelligence feed containing known malicious IPs, domains, and SSL certificate hashes into the SIEM. Step 2: Create a detection rule that queries Zeek logs (`conn.log`, `dns.log`, `ssl.log`) in real-time. Step 3: Join device IP information with network connection data. Step 4: Generate a high-severity alert if a `resp_h` (destination IP), `query` (DNS), or `subject` (SSL cert) matches an indicator from the feed. Statistical: Step 1: For each mobile device IP, create a 30-day rolling time-series profile from Zeek logs. Step 2: For each 24-hour period, calculate the total data sent/received (sum of `orig_bytes` + `resp_bytes` in `conn.log`), the Shannon entropy of destination ports (`resp_p`), and the frequency of each JA3/JA3S hash from `ssl.log`. Step 3: Calculate the mean and standard deviation for each of these metrics over the 30-day baseline. Step 4: Generate a medium-severity alert if the daily data volume exceeds 3 standard deviations from the mean, the port entropy falls below the 10th percentile (suggesting tunneling to a single port), or a JA3/JA3S hash appears that has not been seen for that device in the baseline period. Machine Learning: Step 1: For each device, create a training dataset consisting of feature vectors from historical Zeek `conn.log` records (e.g., `duration`, `orig_bytes`, `resp_bytes`, `proto`, `resp_p`). Step 2: Train a device-specific LSTM Autoencoder on these sequences of network connections to learn a model of normal behavior. Step 3: In production, feed new connection vectors into the trained model and calculate the reconstruction error. Step 4: Generate a medium-severity alert if the reconstruction error for a connection exceeds a dynamic threshold, such as the 99th percentile of reconstruction errors observed during the training phase, indicating a deviation from learned normal patterns."
          },
          {
            "description": "A mobile device downloads a file that is (1) identified as malicious by its file hash, (2) is an application package (.apk, .ipa) originating from a domain not on an approved list of official application stores, or (3) has a mismatch between its Zeek-inferred file type and its server-provided MIME type or file extension.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, Web Proxy, Guest Wi-Fi network, Corporate Wi-Fi network segments, and Content Delivery Network (CDN) logs.",
            "action": "Symbolic: Step 1: From `files.log`, extract the `md5` and `sha1` hash for every downloaded file. Compare each hash against a threat intelligence feed of known mobile malware hashes. Generate a high-severity alert on a match. Step 2: From `http.log`, isolate requests for files ending in `.apk` or `.ipa`. Step 3: Check if the `host` or `referrer` field in the log belongs to a predefined allowlist of official app stores (e.g., `play.google.com`, `apps.apple.com`). Step 4: Generate a high-severity alert for any app package download from an unapproved source. Statistical: Step 1: Using `files.log`, establish a fleet-wide baseline for the rate of mismatches between the server-provided `mime_type` and the Zeek-analyzed `inferred_mime_type`. Step 2: For each individual mobile device, track its daily mismatch rate. Step 3: Calculate the mean and standard deviation of the fleet-wide baseline mismatch rate. Step 4: Generate a medium-severity alert if a device's daily mismatch rate exceeds the fleet-wide mean by more than 3 standard deviations, indicating a statistically significant increase in potentially obfuscated file downloads. Machine Learning: Step 1: Engineer features for all URLs associated with file downloads from `http.log` and `dns.log`. Features should include lexical properties (URL length, query entropy, count of special characters, TLD) and contextual properties (domain age, DNS query type). Step 2: Use a pre-trained classification model (e.g., Gradient Boosting, Random Forest) to generate a maliciousness score (0.0 to 1.0) for each URL in near-real-time. Step 3: Escalate any URL associated with a file download that receives a score greater than 0.9 for analyst review."
          },
          {
            "description": "A mobile device receives an inbound connection from a known push notification service IP, and within a very short time window (e.g., less than 5 seconds), initiates an outbound connection to a newly observed or low-reputation domain. This sequence lacks intermediate connections to known-good domains, suggesting automated activity characteristic of a zero-click exploit.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network, Guest Wi-Fi network, Internet Gateway, and VPN termination points.",
            "action": "Symbolic: Step 1: Maintain a list of IP ranges for known push notification services (e.g., APNS, FCM) and a separate threat intelligence list of IPs, domains, and certificate fingerprints associated with mobile spyware. Step 2: Correlate Zeek `conn.log` events. Step 3: Generate a critical-severity alert if an inbound connection from a push service IP is followed within 60 seconds by an outbound connection from the same device to an indicator on the spyware list. Statistical: Step 1: For each mobile device, create a baseline of behavior following a push notification. Identify inbound connections from push service IPs in `conn.log`. Step 2: For each such event, calculate the time delta to the next outbound connection initiated by that device. Step 3: Create a probability distribution of these time deltas for each user to model their typical response time. Step 4: Generate a medium-severity alert if a post-notification outbound connection occurs in a statistically improbable short time (e.g., below the 5th percentile of the user's baseline) AND the destination is a newly observed domain (not seen in the last 30 days for that user). Machine Learning: Step 1: Model a device's network activity as a sequence of discrete states (e.g., `Idle`, `Receiving_Notification`, `User_Browsing`, `Anomalous_Beaconing`). Define states based on connection properties (direction, destination reputation, data volume). Step 2: Train a Hidden Markov Model (HMM) on historical data for each device to learn the normal transition probabilities between states (e.g., `Receiving_Notification` -> `User_Browsing` is a high-probability transition). Step 3: In production, use the trained HMM to calculate the probability of the observed sequence of states. Step 4: Generate a high-severity alert if a low-probability transition is observed, such as `Receiving_Notification` -> `Anomalous_Beaconing`, indicating that the expected user interaction state was bypassed."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]