[
  {
    "information_requirement": "Is an adversary executing unauthorized commands or scripts on mobile devices via a Unix shell? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A shell process (e.g., 'sh', 'bash') is observed with a parent process whose application ID or name is not on a pre-defined allowlist of authorized shell-spawning applications. The allowlist is derived from the UEM application catalog and known administrative tools.",
            "data_sources": [
              "MTD process creation logs",
              "UEM application inventory report"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "UEM/MDM servers hosting application inventories, Cloud-hosted Mobile Threat Defense (MTD) platform, Individual corporate-managed mobile endpoints (iOS/Android)",
            "action": "Symbolic: 1. Create and maintain an allowlist of application bundle IDs and process names authorized to spawn shell processes, derived from the UEM application catalog and known security tools. 2. Ingest MTD process creation logs into a SIEM. 3. Deploy a SIEM rule that triggers a high-severity alert when a shell process (e.g., 'sh', 'bash', 'zsh') is created by a parent process not found on the allowlist. | Statistical: 1. For each mobile application across the device fleet, ingest MTD process creation logs to establish a baseline of shell execution frequency per user over a 30-day rolling window. 2. Calculate the mean and standard deviation of shell executions for each app-user pair. 3. Generate a medium-severity alert when an application's daily shell execution count for a specific user exceeds 3 standard deviations above its historical mean. | Machine Learning: 1. Collect a labeled dataset of parent-shell process events from MTD logs. 2. Engineer features for each event, including parent process name, parent process hash, application signing certificate authority, application installation source (e.g., App Store, sideloaded), and user role. 3. Train a classification model (e.g., Gradient Boosting) to predict the probability of a parent-shell event being malicious. 4. Deploy the model to score new events in real-time and alert on those with a high probability score (e.g., > 0.9)."
          },
          {
            "description": "A shell process is executed with command-line arguments exhibiting one or more of the following: a Shannon entropy score above a defined threshold, patterns matching known malicious commands (e.g., fileless execution, reverse shells), or is associated with network connections to low-reputation or newly registered domains.",
            "data_sources": [
              "MTD process creation logs with command-line arguments",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence Feeds (Domain/IP)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress gateways (Firewalls, VPN Concentrators, Proxies), DNS resolvers serving mobile device clients, Cloud-hosted Mobile Threat Defense (MTD) platform",
            "action": "Symbolic: 1. Ingest MTD process logs with command-line arguments. 2. Create a library of regular expressions to detect high-risk patterns, such as 'curl [URL] | sh', 'nc -e /bin/sh', and 'base64 -d'. 3. Correlate any command-line matches with network logs (Zeek conn.log, dns.log) to identify associated network connections. 4. Generate a high-severity alert if the command matches a high-risk pattern and the associated destination IP/domain is found on a threat intelligence feed. | Statistical: 1. For all observed shell command-line strings from MTD logs over a 30-day baseline period, calculate the Shannon entropy of each string. 2. Determine the 99th percentile of entropy scores from this baseline. 3. Deploy a SIEM rule to calculate the entropy of new command-line arguments in real-time and generate a medium-severity alert when a command's entropy score exceeds the established threshold. | Machine Learning: 1. Collect a large dataset of command-line strings from MTD logs, labeled as benign or malicious. 2. Train a sequence-based deep learning model (e.g., an LSTM) on the raw command strings to learn complex syntactical patterns indicative of malice. 3. Deploy the trained model to score new shell commands and alert on those classified as malicious with high confidence."
          },
          {
            "description": "A process creation event for a superuser binary ('su' or 'sudo') is logged on a mobile device that the UEM/MDM reports as having a 'compliant' or 'non-jailbroken/non-rooted' status, indicating a privilege escalation attempt.",
            "data_sources": [
              "MTD process creation logs",
              "UEM device compliance state API/logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM servers hosting device compliance state, Individual corporate-managed mobile endpoints, Identity and Access Management (IAM) platform for user context",
            "action": "Symbolic: 1. Create a critical-severity SIEM rule that triggers on any process creation event where the process name is 'su' or 'sudo'. 2. Upon trigger, the rule must execute an enrichment action (e.g., via a SOAR playbook) to query the UEM/MDM API for the device's real-time compliance status. 3. If the device is reported as 'compliant' or 'non-rooted', escalate the alert and initiate an automated quarantine of the device through the UEM/MDM. | Statistical: 1. Monitor the fleet-wide count of unique devices executing 'su' or 'sudo' per hour. 2. Establish a dynamic threshold using a 7-day rolling average and standard deviation for this count. 3. Generate a high-severity alert if the hourly count of devices executing superuser commands exceeds 3 standard deviations above the rolling average, indicating a possible widespread, coordinated attack. | Machine Learning: 1. Following a confirmed malicious superuser execution event, collect post-event activity data for the device. 2. Engineer features such as child processes spawned by 'su', new outbound network connections (by ASN and domain), and MTD alerts generated in the following hour. 3. Use an unsupervised clustering algorithm (e.g., DBSCAN) to group devices exhibiting similar post-compromise behavioral patterns to identify the full scope of an attack campaign."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]