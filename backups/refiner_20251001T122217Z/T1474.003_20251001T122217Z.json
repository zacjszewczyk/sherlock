[
  {
    "information_requirement": "Has an adversary compromised our mobile software supply chain to gain initial access? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474.003",
        "name": "Compromise Software Supply Chain",
        "evidence": [
          {
            "description": "An updated mobile application's digital signature hash mismatches the vendor-published hash or appears on a known-malicious deny-list, and the application manifest concurrently requests new, high-risk permissions (e.g., Accessibility Services, Read SMS) not present in the previous baselined version.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory Logs",
              "Mobile Threat Defense (MTD) Signature Analysis Reports",
              "Vendor-Published Application Hashes",
              "Internal Application Hash Baseline"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM servers, corporate-owned mobile endpoints, and internal/external application repositories used by the organization.",
            "action": "For every application update event from MDM/MTD logs: 1. (Symbolic Logic) Extract the new package's signature hash. Compare this hash against a threat intelligence deny-list of known-malicious hashes, a vendor-provided allow-list of official hashes, and an internally maintained baseline of previously seen good hashes for that app. Generate a high-severity alert for any deny-list match or if the hash is unverified by the allow-list and has never been seen before. 2. (Statistical Analysis) Calculate a permission risk score for both the old and new application manifests by assigning weights to each permission (e.g., READ_SMS=10, DEVICE_ADMIN=8, ACCESS_FINE_LOCATION=8, INTERNET=1). Flag any update where the percentage increase in this risk score exceeds the 99th percentile of all historical score increases for that specific application. 3. (Machine Learning) Input features from the update (e.g., signature match status, permission risk score delta, count of new high-risk permissions) into a pre-trained classification model (e.g., Random Forest, Gradient Boosting). An alert is triggered if the model's output probability of compromise exceeds a calibrated threshold (e.g., > 0.85), especially when correlated with a signature mismatch from the symbolic check."
          },
          {
            "description": "Within 24 hours of a mobile application update, the device initiates network connections to domains with a Shannon entropy score greater than 3.5, or to IPs/domains on a threat intelligence deny-list. Concurrently, the application's total daily data egress exceeds its 30-day historical baseline by more than 3 standard deviations.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Mobile Device Management (MDM) Application Update Logs",
              "Threat Intelligence Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), corporate DNS resolvers, VPN concentrators, and WiFi access points servicing managed mobile devices.",
            "action": "Correlate MDM application update events with network logs (Zeek) from the device's IP address for the subsequent 24-hour period. 1. (Symbolic Logic) For every new connection, query the destination IP (from `Zeek conn.log`) and requested domain (from `Zeek dns.log`) against threat intelligence feeds. Generate a high-severity alert for any connection to a known malicious C2 or malware-hosting category. 2. (Statistical Analysis) For each application on each device, maintain a 30-day rolling baseline of its average daily data egress (sum of `orig_bytes` + `resp_bytes` in `Zeek conn.log`). Alert if post-update daily egress exceeds three standard deviations above this mean. Concurrently, calculate the Shannon entropy for all newly requested second-level domains in `Zeek dns.log` post-update; alert on any domain with an entropy score greater than 3.5. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., LSTM) trained on historical network traffic volume (bytes per hour) for each device. If the actual traffic post-update significantly deviates from the model's forecast by falling outside the 95% confidence interval, flag it as an anomaly. Combine this anomaly flag with alerts from the symbolic and statistical methods to generate a final, aggregated risk score for analyst review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]