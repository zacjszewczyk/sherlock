[
  {
    "information_requirement": "Is an adversary capturing user credentials via input manipulation on managed mobile devices? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A mobile device has a non-allowlisted keyboard application installed, and this event is temporally correlated (within 24 hours) with the appearance of periodic, small outbound network connections (e.g., 500 bytes to 5 KB) to a destination domain that is newly registered (less than 30 days old) or has a low reputation score from threat intelligence sources. The connection timing (e.g., every 5 minutes with a jitter of +/- 10 seconds) does not correlate with known foreground application activity.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Inventory Logs, continuously monitor for installed applications identified as keyboards. For each, compare its package name against a managed allow-list of approved keyboards. If an unapproved keyboard is found, generate a high-priority alert. Concurrently, enrich the application's package name and associated network indicators (domains, IPs) against external threat intelligence feeds for known malware signatures. 2. (Statistical) For any device with a flagged keyboard, analyze its network traffic in Zeek logs. First, analyze dns.log for queries from the device and calculate the Shannon entropy of the queried subdomains for each parent domain; an entropy score greater than 3.5 suggests DGA activity. Second, analyze conn.log for beaconing by identifying connections with low variance in both payload size (orig_bytes) and inter-arrival time. Third, in http.log, flag any POST requests where the request body is non-zero (req_body_len > 0) but the response body is zero (resp_body_len = 0) and the User-Agent string is anomalous or not standard for mobile browsers. 3. (Machine Learning) Train a time-series anomaly detection model (e.g., an LSTM Autoencoder) on a per-device basis using features from conn.log such as orig_bytes, resp_bytes, duration, protocol, and connection frequency per hour. An alert is triggered when the model's reconstruction error for a new time window exceeds a dynamic threshold (e.g., 3 standard deviations above the mean reconstruction error of the past 24 hours). Correlate the timestamp of the anomaly with MDM logs to identify if a new keyboard application was installed shortly before the anomalous behavior began."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application on an Android device is granted the 'android.permission.SYSTEM_ALERT_WINDOW' (Draw Over Other Apps) or 'android.permission.BIND_ACCESSIBILITY_SERVICE' (Accessibility Service) permission. This event is followed within 60 minutes by outbound network connections from the device to a domain not previously associated with the application or user in the preceding 90 days.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, generate a medium-priority alert whenever an application is granted 'SYSTEM_ALERT_WINDOW' or 'BIND_ACCESSIBILITY_SERVICE' permissions. Compare the application's package name against a curated allow-list of apps known to legitimately require these permissions (e.g., password managers, screen readers). If the app is not on the list, escalate the alert priority and automatically query threat intelligence services for the package name and its signing certificate hash. 2. (Statistical) For an application flagged by the symbolic rule, analyze its network activity in conn.log. Establish a 30-day baseline of hourly outbound data volume (sum of orig_bytes) for the device. Alert if, within 24 hours of the permission grant, the application initiates connections causing any hourly outbound data volume to exceed the 98th percentile of the device's baseline. Additionally, analyze ssl.log for associated connections using self-signed certificates or JA3/JA3S hashes with a prevalence of less than 0.1% across the enterprise. 3. (Machine Learning) Develop a classification model (e.g., Random Forest or Gradient Boosting) to produce a risk score for an application's permission request. Features should include: permissions requested, app store category, developer reputation, user ratings, age of the application, and whether the app is available on a major app store. An application receiving a risk score greater than 0.8 upon requesting 'SYSTEM_ALERT_WINDOW' or 'BIND_ACCESSIBILITY_SERVICE' triggers an automated workflow to collect forensic data from the endpoint and creates a high-priority incident for SOC investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary collecting sensitive user information (e.g., messages, contacts) via input capture on managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.001",
        "name": "Keylogging",
        "evidence": [
          {
            "description": "A mobile device has a non-allowlisted keyboard application installed, and this event is temporally correlated (within 24 hours) with the appearance of periodic, small outbound network connections (e.g., 500 bytes to 5 KB) to a destination domain that is newly registered (less than 30 days old) or has a low reputation score from threat intelligence sources. The connection timing (e.g., every 5 minutes with a jitter of +/- 10 seconds) does not correlate with known foreground application activity, suggesting automated exfiltration of collected data like messages or contacts.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Inventory Logs, continuously monitor for installed applications identified as keyboards. For each, compare its package name against a managed allow-list of approved keyboards. If an unapproved keyboard is found, generate a high-priority alert. Concurrently, enrich the application's package name and associated network indicators (domains, IPs) against external threat intelligence feeds for known malware signatures. 2. (Statistical) For any device with a flagged keyboard, analyze its network traffic in Zeek logs. First, analyze dns.log for queries from the device and calculate the Shannon entropy of the queried subdomains for each parent domain; an entropy score greater than 3.5 suggests DGA activity. Second, analyze conn.log for beaconing by identifying connections with low variance in both payload size (orig_bytes) and inter-arrival time. Third, in http.log, flag any POST requests where the request body is non-zero (req_body_len > 0) but the response body is zero (resp_body_len = 0) and the User-Agent string is anomalous or not standard for mobile browsers. 3. (Machine Learning) Train a time-series anomaly detection model (e.g., an LSTM Autoencoder) on a per-device basis using features from conn.log such as orig_bytes, resp_bytes, duration, protocol, and connection frequency per hour. An alert is triggered when the model's reconstruction error for a new time window exceeds a dynamic threshold (e.g., 3 standard deviations above the mean reconstruction error of the past 24 hours). Correlate the timestamp of the anomaly with MDM logs to identify if a new keyboard application was installed shortly before the anomalous behavior began."
          }
        ]
      },
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application on an Android device is granted the 'android.permission.SYSTEM_ALERT_WINDOW' (Draw Over Other Apps) or 'android.permission.BIND_ACCESSIBILITY_SERVICE' (Accessibility Service) permission. This event is followed within 60 minutes by outbound network connections from the device to a domain not previously associated with the application or user in the preceding 90 days, suggesting collection of on-screen information.",
            "data_sources": [
              "MDM Application Permission Logs",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/EMM servers, Network egress points (e.g., corporate WiFi gateways, VPN concentrators), Managed mobile endpoints (iOS/Android)",
            "action": "1. (Symbolic Logic) From MDM Application Permission Logs, generate a medium-priority alert whenever an application is granted 'SYSTEM_ALERT_WINDOW' or 'BIND_ACCESSIBILITY_SERVICE' permissions. Compare the application's package name against a curated allow-list of apps known to legitimately require these permissions (e.g., password managers, screen readers). If the app is not on the list, escalate the alert priority and automatically query threat intelligence services for the package name and its signing certificate hash. 2. (Statistical) For an application flagged by the symbolic rule, analyze its network activity in conn.log. Establish a 30-day baseline of hourly outbound data volume (sum of orig_bytes) for the device. Alert if, within 24 hours of the permission grant, the application initiates connections causing any hourly outbound data volume to exceed the 98th percentile of the device's baseline. Additionally, analyze ssl.log for associated connections using self-signed certificates or JA3/JA3S hashes with a prevalence of less than 0.1% across the enterprise. 3. (Machine Learning) Develop a classification model (e.g., Random Forest or Gradient Boosting) to produce a risk score for an application's permission request. Features should include: permissions requested, app store category, developer reputation, user ratings, age of the application, and whether the app is available on a major app store. An application receiving a risk score greater than 0.8 upon requesting 'SYSTEM_ALERT_WINDOW' or 'BIND_ACCESSIBILITY_SERVICE' triggers an automated workflow to collect forensic data from the endpoint and creates a high-priority incident for SOC investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]