[
  {
    "information_requirement": "Has an adversary established persistence on corporate mobile devices by modifying boot or logon initialization scripts? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1398",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A log from a Mobile Device Management (MDM) platform shows a remote attestation check for an Android device has failed. This is evidenced by a Google SafetyNet API result where the `ctsProfileMatch` flag is `false`, indicating a tampered device, or `basicIntegrity` is `false`, indicating a potentially rooted device or unofficial ROM.",
            "data_sources": [
              "MDM Logs (Attestation Events)",
              "Google SafetyNet API Logs",
              "Samsung Knox Attestation Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized logging platform (e.g., SIEM), Mobile Device Management (MDM) console, and network egress points instrumented with Zeek sensors.",
            "action": [
              "Create a detection rule in the SIEM to trigger a critical alert when an MDM log contains `ctsProfileMatch: false` or `basicIntegrity: false`. The alert should automatically trigger an MDM API call to place the device's network profile into a quarantined or restricted state.",
              "For all devices, calculate a 30-day rolling baseline of hourly attestation failure counts. Generate a medium-severity alert if the number of failures in the current hour exceeds the 99th percentile of this baseline. This helps detect widespread issues or coordinated attacks distinct from single-device failures.",
              "For any device with a failed attestation, automatically enrich the alert with network behavior features from the device's IP address (from Zeek logs) over the last 24 hours. Use a pre-trained logistic regression model to score the likelihood of malicious compromise based on features like: Shannon entropy of DNS queries (dns.log), ratio of failed to successful connections (conn.log), and connections to domains/IPs with low reputation scores. A high score elevates the incident priority."
            ]
          },
          {
            "description": "A device health check log from the MDM platform for an Android device shows a non-passing Android Verified Boot status. A 'Red' state signifies a corrupt system partition, and a 'Yellow' state indicates a modification to a non-system partition, such as the `vbmeta` partition [1].",
            "data_sources": [
              "MDM Device Health Telemetry",
              "MDM Policy Compliance Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers and Security Information and Event Management (SIEM) platform.",
            "action": [
              "Configure a SIEM alert to fire with critical severity upon ingestion of an MDM log where the `verified_boot_state` field is 'Red'. The automated response playbook should immediately invoke an MDM action to isolate and/or wipe the device.",
              "Create a daily time series chart of the count of devices reporting a 'Yellow' verified boot state. Apply a Seasonal-Trend-Loess (STL) decomposition to the last 90 days of data. Alert if the trend component shows a statistically significant upward slope over a 7-day window, indicating a potential systemic issue or a slow-moving attack campaign.",
              "Develop an Isolation Forest model to detect anomalous device health profiles from MDM telemetry. Use features including: `verified_boot_state` (one-hot encoded), days since last OS patch, hours since last MDM check-in, number of sideloaded applications, and a `developer_mode_enabled` flag. Devices with anomaly scores exceeding a pre-defined threshold are flagged for Tier 2 analyst review."
            ]
          },
          {
            "description": "Forensic analysis of a file system image from a suspect mobile device reveals the presence of unauthorized or modified files within critical Android boot partitions, specifically `/system/etc/init/`, `/system/bin/`, `/vendor/etc/init/`, or within `init.rc` files. Evidence includes file hash mismatches against a known-good baseline or the presence of files not part of the stock OS image.",
            "data_sources": [
              "Mobile Device Forensic Image",
              "File system metadata from forensic image",
              "Internal known-good file hash database",
              "Threat intelligence feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage.",
            "action": [
              "Following acquisition of a device's file system image, calculate the SHA-256 hash of every file in critical boot directories. Compare these hashes against both an internal known-good hash set for the specific device model/OS version and a threat intelligence feed (e.g., VirusTotal). A mismatch or a known-bad hash match constitutes a confirmed finding.",
              "For each script and executable file in the target directories, calculate its Shannon entropy score. Compare this score to a baseline distribution of entropy values from known-good firmware files of the same type (e.g., shell script, ELF binary). Flag any file with an entropy score exceeding 3 standard deviations from the baseline mean, as this suggests potential obfuscation via packing or encryption.",
              "For any script file identified as modified or non-standard, extract features and input them into a pre-trained Random Forest classifier for malicious script detection. Key features include: n-gram frequency of suspicious commands (e.g., `setenforce 0`, `pm install`), presence and length of encoded strings (Base64, hex), and file permissions. The model's output (e.g., 'malicious' with 95% confidence) prioritizes files for manual reverse engineering."
            ]
          }
        ]
      }
    ],
    "references": [
      {
        "id": 1,
        "citation": "Android Open Source Project. (n.d.). Verified Boot. Retrieved September 30, 2025, from https://source.android.com/docs/security/features/verifiedboot"
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]