[
  {
    "information_requirement": "Is an adversary using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627",
        "name": "Execution Guardrails",
        "evidence": [
          {
            "description": "A mobile application's manifest file (e.g., AndroidManifest.xml) contains a statistically rare combination of permissions (e.g., ACCESS_FINE_LOCATION, READ_PHONE_STATE) that falls below the 5th percentile for its declared app store category. Static code analysis confirms these permissions are used for conditional checks before executing core logic, rather than for legitimate user-facing features.",
            "data_sources": [
              "Mobile Application Manifest Files (AndroidManifest.xml)",
              "Mobile Threat Defense (MTD) permission analysis logs",
              "Static analysis reports from decompiled application source code (e.g., APK, IPA)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) platform, and internal application vetting/sandbox environments.",
            "action": [
              "For each new or updated application, parse its manifest file (e.g., AndroidManifest.xml) and compare the declared permissions against a predefined watchlist of high-risk combinations (e.g., `READ_SMS` + `ACCESS_FINE_LOCATION` + `READ_CONTACTS`) known to be used by malware families. Generate an alert for any match.",
              "For each application, calculate the Jaccard similarity of its permission set against the baseline permission set for its app store category. Flag applications with a similarity score below the 10th percentile. Concurrently, calculate the Shannon entropy of the requested permissions based on their frequency across the environment; an entropy score in the top 95th percentile indicates an unusual and potentially malicious combination requiring further review.",
              "Generate a feature vector for each application including one-hot encoded permissions, the count of exported services, and the presence of specific API calls associated with guardrailing (e.g., `TelephonyManager.getNetworkCountryIso`, `LocationManager.getLastKnownLocation`). Feed this vector into a trained classifier (e.g., Random Forest, Gradient Boosting). Quarantine any application where the model predicts a malicious probability score of $$ p(malicious) > 0.90 $$ for subsequent dynamic analysis."
            ]
          },
          {
            "description": "In a dynamic analysis sandbox, an application shows minimal activity (e.g., egress network traffic < 1KB/min, no sensitive API calls). After an environmental trigger is applied (e.g., GPS coordinates set to a target city, Wi-Fi SSID changed to a corporate name), the application's behavior changes, marked by a sudden spike in egress network traffic (>1MB) to a low-reputation domain and new API calls to access sensitive data (e.g., contacts, SMS) are observed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Dynamic analysis sandbox logs (API call traces, system call logs, file system access)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for corporate mobile devices (via VPN or proxy), guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.",
            "action": [
              "Within a dynamic sandbox, iterate through a list of environmental triggers (e.g., specific GPS coordinates, Wi-Fi SSIDs, device language settings). Monitor `Zeek dns.log` and `conn.log` for activity immediately following each trigger. Generate a high-severity alert if a DNS query is made to a domain on a threat intelligence feed or a connection is established to a known malicious IP.",
              "Establish a 5-minute behavioral baseline for the application, calculating the mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of outbound bytes per 10-second window from `Zeek conn.log`. After applying an environmental trigger, alert if any 10-second window's outbound byte count exceeds $$ \\mu + 3\\sigma $$. Separately, calculate the entropy of destination ports used before and after the trigger; a significant increase in both volume and port entropy indicates a state change to active C2.",
              "Continuously generate a time-series vector of network flow features (bytes out/sec, packets out/sec, flow duration) from `Zeek conn.log`. Feed this vector into a trained LSTM autoencoder model and monitor the reconstruction error. Generate an alert if the reconstruction error spikes above the 99th percentile of its historical distribution immediately after an environmental trigger is applied, indicating a behavioral anomaly."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]