[
  {
    "information_requirement": "Is the adversary actively concealing a compromised (rooted/jailbroken) mobile device state from our detection mechanisms? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1630.003",
        "name": "Disguise Root/Jailbreak Indicators",
        "evidence": [
          {
            "description": "A specific mobile device, identified by a unique ID, simultaneously fails a remote attestation check while its on-device Mobile Threat Defense (MTD) agent reports a 'compliant' status. The discrepancy is observed when both events occur within a 5-minute correlation window.",
            "data_sources": [
              "MDM Remote Attestation Logs",
              "MTD Compliance Status Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized logging platforms for Mobile Device Management (MDM) and Mobile Threat Defense (MTD) solutions; Cloud Identity Provider (IdP) conditional access policy logs; Network sensors at internet egress points and VPN concentrators.",
            "action": "Symbolic Logic: 1. Create a SIEM correlation rule that joins MDM Remote Attestation Logs and MTD Compliance Status Logs on the unique device identifier. 2. Trigger a high-severity alert if a device reports a 'fail' status in the attestation log and a 'compliant' status in the MTD log within a 5-minute window. 3. For each alert, automatically enrich the event by querying Zeek conn.log and dns.log for the device's IP address to identify any connections to known malicious domains or IPs from threat intelligence feeds. | Statistical Method: 1. For each mobile device, create a 30-day historical baseline of network activity using Zeek conn.log. 2. Calculate the hourly 95th percentile for the count of distinct destination ports and the count of unique destination Autonomous System Numbers (ASNs). 3. Trigger an alert if a device's count for either metric exceeds 3 standard deviations above its established baseline, especially if this occurs within 24 hours of a failed attestation. | Machine Learning: 1. For each device, ingest hourly DNS query counts from Zeek dns.log into a time-series database. 2. Apply an unsupervised anomaly detection model (e.g., Isolation Forest or LSTM autoencoder) to each device's time-series data to learn its normal DNS query pattern. 3. Generate an alert when the model detects a statistically significant anomaly (e.g., a prediction interval violation or high anomaly score) that coincides with a failed remote attestation status."
          },
          {
            "description": "A process is observed running with root/administrator privileges on a mobile device, and its SHA256 file hash is not found in either the curated allowlist of known-good OS/application binaries or the blocklist of known rooting tools.",
            "data_sources": [
              "MTD Process Execution Logs",
              "Zeek conn.log",
              "Zeek software.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MTD/EDR agent log repositories on mobile endpoints; Centralized SIEM or data lake containing MTD logs; Network sensors monitoring traffic from mobile subnets.",
            "action": "Symbolic Logic: 1. Configure a SIEM rule to trigger on any event from MTD Process Execution Logs where the process has root/administrator privileges. 2. As a condition, the rule must check if the process's file hash exists in the internal allowlist of known-good hashes or a threat intelligence feed of malicious hashes. 3. Generate a high-severity alert if the hash is not found in either list (i.e., it is an unknown, privileged process). | Statistical Method: 1. Ingest all MTD Process Execution Logs into a data platform. 2. For the entire mobile fleet, create a frequency table of all observed parent-child process relationships over the last 30 days to calculate a rarity score for each pair. 3. Trigger a medium-severity alert when a privileged process is spawned by a parent process, and this relationship's rarity score is below a defined threshold (e.g., seen less than 0.1% of the time). 4. Escalate the alert to high-severity if the child process initiates an outbound network connection, as seen in Zeek conn.log. | Machine Learning: 1. Extract features from MTD Process Execution Logs (e.g., process name entropy, command-line argument length, parent process name) and corresponding Zeek conn.log data (e.g., destination port, bytes_out). 2. Use this feature set to train a supervised classification model (e.g., Random Forest) on a labeled dataset of known benign and malicious privileged processes. 3. Apply the trained model in near-real-time to classify each new privileged process execution as 'benign' or 'suspicious', alerting on 'suspicious' classifications."
          },
          {
            "description": "An MTD agent log records an application process executing a command with arguments indicative of modifying the file system's read/write status (e.g., `mount -o rw,remount /system`) or changing permissions on system-level files outside its designated sandbox (e.g., `chmod 777 /system/bin/su`).",
            "data_sources": [
              "MTD File System Integrity Logs",
              "MTD Process Command-line Logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log storage for MTD/EDR agents on mobile endpoints; Network sensor file extraction logs (e.g., from Zeek); Application sandboxing analysis platforms and log repositories.",
            "action": "Symbolic Logic: 1. Implement a SIEM detection rule using regular expressions to search MTD Process Command-line Logs for patterns like `mount -o rw,remount` or `chmod .* /system`. 2. Trigger an alert upon a match. 3. Enrich the alert by correlating the timestamp and device IP with Zeek conn.log and files.log to determine if the responsible application was recently downloaded or is communicating with suspicious external hosts. | Statistical Method: 1. For each application on each device, establish a 30-day baseline of file system access using MTD File System Integrity Logs. 2. Calculate the Shannon entropy of the parent directory paths it accesses or modifies during a 24-hour period. 3. Trigger an alert if an application's daily path entropy score deviates by more than 3 standard deviations from its historical average, indicating it is accessing an abnormally diverse set of file locations. | Machine Learning: 1. Model normal application behavior by creating sequences of events for each app (e.g., `[network_connection, file_download, process_execution, file_modification]`) using data from Zeek conn.log, Zeek files.log, and MTD logs. 2. Train a sequence analysis model (e.g., an LSTM-based autoencoder) on these normal sequences. 3. Apply the model to new event sequences, generating an alert if the model's reconstruction error for a sequence is high, indicating a chain of actions that deviates from learned normal behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.3",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]