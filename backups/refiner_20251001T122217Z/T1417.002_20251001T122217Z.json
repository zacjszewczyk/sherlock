[
  {
    "information_requirement": "Is an adversary attempting to steal credentials on corporate mobile devices via GUI impersonation? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application's manifest, obtained from MDM scans, contains the 'android.permission.SYSTEM_ALERT_WINDOW' permission, and the application's package name and developer signing certificate hash do not match any entry in the corporate application allowlist.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Application Event Logs",
              "Threat Intelligence Feed"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Configuration Database, Mobile EDR Data Lake, and Application Inventory Store",
            "action": [
              "Create a SIEM rule that joins MDM application inventory logs with a mobile threat intelligence feed. Trigger a high-severity alert if an application possesses the 'android.permission.SYSTEM_ALERT_WINDOW' permission and its package name or signing certificate hash matches a known malicious indicator in the threat feed.",
              "On a daily basis, query the MDM inventory to list all applications with the 'SYSTEM_ALERT_WINDOW' permission. For each application, calculate its installation prevalence across all managed devices. Flag any application not on the corporate allowlist that falls below a 5th percentile prevalence threshold for manual review as a potentially malicious, rare application.",
              "For each new application installation event, extract a feature vector from its manifest including: count of permissions, presence of other high-risk permissions (e.g., BIND_ACCESSIBILITY_SERVICE, READ_SMS), and number of exported activities. Input this vector into a pre-trained Random Forest classifier model tuned to identify mobile malware. If the model classifies the application as 'malicious' with a confidence score exceeding 0.85, automatically generate a high-priority incident and trigger a device quarantine action via the MDM/UEM platform."
            ]
          },
          {
            "description": "A newly installed application's display name has a Levenshtein distance of 2 or less compared to a high-value corporate or financial application (e.g., 'Okta Verify', 'Microsoft Authenticator'), while its package name and developer signing certificate hash are a mismatch with the legitimate application's known values.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Corporate Application Allowlist/Metadata Store"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Application Inventory Database and the organization's repository of vetted/approved application metadata (package names, signatures).",
            "action": [
              "Maintain a dictionary mapping critical application display names (e.g., 'Microsoft Outlook') to their official package names and signing certificate hashes. Deploy a SIEM rule that, upon a new application installation event, calculates the Levenshtein distance between the new app's display name and all names in the dictionary. If the distance is 2 or less AND the package name or certificate hash does not match the dictionary entry, trigger a critical alert for suspected typosquatting.",
              "On a scheduled basis, query the MDM inventory. For each application, calculate the Jaro-Winkler similarity of its display name against a curated list of commonly targeted app names. Flag any application with a similarity score greater than 0.95 whose package name is not on an allowlist for that name. Monitor the daily count of newly flagged applications to detect spikes indicating a potential campaign.",
              "For all installed applications, vectorize metadata using character 3-grams from the display name, package name, and developer name. Apply a DBSCAN clustering algorithm to this feature space. Isolate and investigate any resulting cluster that contains a small number of devices (e.g., fewer than 5) and does not contain any pre-vetted, allowlisted applications, as these may represent emerging families of malicious apps using similar naming schemes."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to collect sensitive data from users on corporate mobile devices using deceptive GUI overlays? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A sequence of events is observed on a single device within a 5-second window: 1) A Mobile EDR log indicates a sensitive application (e.g., banking, corporate SSO) is in the foreground, immediately followed by 2) an EDR log showing a non-allowlisted application with overlay permissions becoming the foreground process. This is followed within 60 seconds by 3) a Zeek conn.log entry showing a network connection from the device to an IP with a low reputation score or a DNS request in Zeek dns.log for a domain younger than 30 days.",
            "data_sources": [
              "Mobile EDR Agent Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Threat Intelligence IP/Domain Reputation Feed",
              "Passive DNS Database"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR agent data lake, Corporate VPN concentrators, Network Security Monitoring sensors (e.g., Zeek cluster at internet gateway), Threat Intelligence Platform API, and Passive DNS provider API.",
            "action": [
              "Create a SIEM correlation rule that joins Mobile EDR logs with Zeek logs on the device IP address. The rule logic is: IF (EDR log shows app_A in foreground AND app_A is on 'sensitive_app_list') THEN, IF (within 5 seconds, EDR log shows app_B in foreground AND app_B has overlay permissions AND app_B is NOT on 'allowlist') THEN, IF (within 60 seconds, Zeek conn.log shows a connection to an IP on a threat feed OR Zeek dns.log shows a request for a domain with a registration age under 30 days), trigger a critical alert.",
              "For each user, build a state transition matrix from Mobile EDR logs to model normal application-switching behavior. Identify any transition from a sensitive app to an app with overlay permissions that has a transition probability below the 1st percentile for that user. At the time of such a rare transition, analyze the device's subsequent 1-minute network activity in Zeek logs. Flag for review if the entropy of requested FQDNs in Zeek dns.log spikes more than 3 standard deviations above the device's 30-day rolling average, or if a DNS request is made to a domain in the 99.9th percentile of rarity across the enterprise.",
              "Continuously feed a time-series of network features per device (e.g., bytes out, connection count per minute, protocol mix from Zeek conn.log) into a trained LSTM autoencoder model. When a high-risk application transition (as defined in the statistical method) is detected by the SIEM, query the LSTM model for that device's reconstruction error at the event's timestamp. An error score exceeding the 99th percentile of the device's historical error scores indicates a significant behavioral anomaly, warranting an automated device quarantine and a high-priority SOC investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.4",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]