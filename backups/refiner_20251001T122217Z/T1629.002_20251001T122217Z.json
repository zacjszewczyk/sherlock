[
  {
    "information_requirement": "Is an adversary attempting to evade defenses by locking users out of their mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.002",
        "name": "Device Lockout",
        "evidence": [
          {
            "description": "A 'device administrator enabled' event is logged for a mobile application that also meets one or more of the following criteria: the application's package name or signing certificate is absent from the corporate allowlist; the installation source is flagged as 'unknown' or 'sideloaded'; or the application's install count across all managed devices falls within the bottom 5th percentile of all applications.",
            "data_sources": [
              "MDM application inventory and event logs",
              "Mobile EDR process and permission grant logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices; Mobile Device Management (MDM) servers; Application Vetting and Sandboxing Environments; Enterprise Application Stores",
            "action": "1. (Symbolic) Query MDM and Mobile EDR logs for events indicating a new device administrator has been enabled. Correlate the application's package name and signing certificate hash against a threat intelligence feed of known malicious indicators. Generate a high-severity alert for any match. 2. (Statistical) For each 'device administrator enabled' event, enrich the event data with application prevalence (install count across the fleet) and installation source. Calculate a risk score by assigning points for a prevalence in the bottom 5th percentile, an installation source of 'unknown' or 'sideloaded', and absence from an organizational application allowlist. Trigger an alert for analyst investigation if the cumulative score exceeds a defined threshold. 3. (Machine Learning) Develop a logistic regression classifier to predict the probability that an application granted device administrator rights is malicious. Engineer features from MDM and EDR logs, including: installation source, time delta between install and admin grant, the quantity and risk-level of other permissions requested (e.g., SMS, contacts), and whether the developer is new to the enterprise. Flag applications with a predicted malice probability greater than $$ 0.85 $$ for priority review."
          },
          {
            "description": "Network traffic (TCP/UDP flows or DNS requests) originates from a mobile application that possesses Device Administrator or `SYSTEM_ALERT_WINDOW` permissions, and the traffic exhibits one of the following characteristics: the destination IP address or domain is present on a threat intelligence blocklist; the requested domain's calculated Shannon entropy score is above the 98th percentile of all observed domains; or the total bytes transferred in the session is more than three standard deviations above the mean for that specific application and device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR Network Flow Logs",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Our organization's internet gateway; Corporate DNS resolvers; Network proxies; VPN Concentrators",
            "action": "1. (Symbolic) Join network flow data (Zeek conn.log) with MDM application inventory data on the device IP address. Create a rule that triggers when an application with device admin or `SYSTEM_ALERT_WINDOW` permissions communicates with an IP or domain on a threat intelligence feed. 2. (Statistical) Ingest Zeek dns.log. For each query originating from a mobile device, calculate the Shannon entropy of the queried domain name. Establish a 30-day rolling baseline of entropy scores. Generate an alert if a query from an app with elevated permissions has an entropy score exceeding the 98th percentile of the baseline. 3. (Statistical/ML) For each application on each device, baseline the normal outbound data volume by calculating the mean and standard deviation of `orig_bytes` from Zeek conn.log over a 30-day period. Create an alert if a new connection from an app with elevated privileges transfers a number of bytes greater than three standard deviations from its established mean. For more advanced detection, apply a time-series anomaly detection model (e.g., ARIMA) to the aggregated outbound byte count per device to flag anomalous spikes in traffic volume correlated with a privileged app."
          },
          {
            "description": "A mobile application with `SYSTEM_ALERT_WINDOW` (overlay) permissions is observed as the active foreground process for an anomalously long duration without user interaction, or the permission was granted to an application installed from an untrusted source. An anomalous duration is defined as a continuous foreground session time exceeding three standard deviations above the application's historical average.",
            "data_sources": [
              "Mobile Application Vetting Scans",
              "Mobile EDR Process and Activity Logs",
              "Android Logcat",
              "MDM Application Installation Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environments; Corporate-managed mobile devices; Enterprise app stores and repositories; Mobile Endpoint Detection and Response (EDR) platform",
            "action": "1. (Symbolic) Within the application vetting process, create a policy to automatically flag for manual review any application package (APK) that manifests the `SYSTEM_ALERT_WINDOW` permission. Elevate the alert priority if MDM logs show the app was installed from an 'unknown source'. 2. (Statistical) Using Mobile EDR activity logs, calculate the mean and standard deviation of foreground session duration for every application with overlay permissions, per user. Generate an alert if an application's continuous foreground time, without corresponding user input events, exceeds three standard deviations above its historical average. 3. (Machine Learning) Employ an unsupervised learning model, such as an Isolation Forest, to detect anomalous application behavior. Use features from Mobile EDR logs, including: `SYSTEM_ALERT_WINDOW` permission status, CPU and memory utilization, foreground session duration, and the rate of touch/input events. The model should score each process session, and sessions with high anomaly scores should be flagged as potential overlay attacks."
          }
        ]
      }
    ],
    "version": "1.3",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]