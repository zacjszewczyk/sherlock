[
  {
    "information_requirement": "Is the adversary maintaining persistence via malicious kernel modules/extensions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.006",
        "name": "Kernel Modules and Extensions",
        "evidence": [
          {
            "description": "A Windows service is created (Event ID 7045) for a kernel driver where the driver file is unsigned, located in an anomalous directory (e.g., C:\\Users\\), or its hash matches known malicious indicators.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 6"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows endpoint and server fleet, including Domain Controllers and application servers; System driver directories (%SystemRoot%\\System32\\drivers) for baselining.",
            "action": [
              "Query for Windows Event ID 7045 where the Service Type is 'kernel driver'. For each event, extract the ImagePath, validate the file's digital signature, and query its hash against threat intelligence feeds. Alert if the driver is unsigned or if its hash is associated with known malware.",
              "Query Windows Event ID 7045 and Sysmon Event ID 6 logs over the last 90 days to create a baseline of common driver ImagePath directories. Calculate the frequency of each directory. For new driver load events, if the directory falls below the 5th percentile of frequency (e.g., C:\\Temp, C:\\Perflogs, user profiles), flag for investigation.",
              "Train a classification model (e.g., Random Forest) to predict if a new driver is malicious. Use features such as: a boolean for `is_signed`, the statistical rarity score of its file path, the entropy of the service name, and a boolean for `is_in_goodware_corpus` (e.g., NSRL). Alert on any driver classified as malicious with a high confidence score (>0.9)."
            ]
          },
          {
            "description": "A host initiates network connections to an unusual destination (e.g., rare IP, high entropy domain) immediately following the load of a new or rare kernel driver.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 7036",
              "Windows Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all Windows hosts.",
            "action": [
              "Correlate a driver load event (Windows Event ID 7036/Sysmon Event ID 6) with subsequent network traffic from the host in Zeek conn.log within a 5-minute window. Alert if the host initiates connections to destinations matching threat intelligence feeds for C2 servers or newly registered domains (NRDs).",
              "Following a driver load event, analyze the host's network traffic in Zeek conn.log for the next hour. Calculate the entropy of destination FQDNs from dns.log and the ratio of outbound-to-inbound bytes from conn.log. Alert if these values show a statistically significant increase (e.g., >3 standard deviations) compared to the host's 30-day baseline.",
              "Use a time-series anomaly detection model (e.g., ARIMA) on a host's outbound data volume (bytes_out). Train the model on the host's historical data. Following a driver load event, compare the forecasted traffic volume against the actual volume. A large, unexplained deviation from the forecast constitutes an anomaly requiring an alert."
            ]
          },
          {
            "description": "The `insmod` or `modprobe` commands are executed on a Linux host to load a kernel module (.ko file) from a temporary or user-writable directory, or a module is loaded that is not part of a legitimate software package.",
            "data_sources": [
              "Linux auditd logs (type=EXECVE, type=SYSCALL for init_module)",
              "Package manager logs (/var/log/apt/history.log, /var/log/yum.log)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux server fleet (e.g., web servers, database servers, container hosts); Linux file systems, specifically /tmp, /var/tmp, user home directories, and standard module paths like /lib/modules.",
            "action": [
              "Query auditd logs for `type=EXECVE` where the executed command is `insmod` or `modprobe`. Alert if the module path argument points to a non-standard directory like /tmp, /dev/shm, or /home. Correlate the module's hash against threat intelligence feeds and check Zeek conn.log for a prior download of the file.",
              "Periodically query `lsmod` output or auditd logs across all Linux hosts to build a fleet-wide baseline of loaded kernel modules. For each host, perform a set difference to find modules unique to that host. Calculate the prevalence of each module across the fleet; alert on any loaded module with a prevalence below a 1% threshold.",
              "Train a decision tree classifier on process execution logs to distinguish legitimate from suspicious module loading. Features should include: parent process name (e.g., `sshd`, `bash` vs. `yum`, `dpkg`), command line argument path (using the statistical rarity score), and whether the command was executed from an interactive shell. Alert on events classified as suspicious."
            ]
          },
          {
            "description": "The `kextload` command is executed on a macOS endpoint to load a kernel extension that is unsigned, signed by a non-Apple developer ID not on an allow-list, or has not been previously seen on the host.",
            "data_sources": [
              "macOS Unified Logs (process == 'kextload')",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoint fleet, especially developer and executive workstations; Network egress points and DNS servers.",
            "action": [
              "Query macOS Unified Logs for any execution of the 'kextload' process. Maintain an allow-list of known-good developer IDs for kext signing. Alert on any loaded kext signed by an ID not on the list, or any kext that is unsigned.",
              "For each host, maintain a historical baseline of all loaded kext bundle identifiers. Alert when a 'kextload' event occurs for a bundle identifier that has never been seen on that specific host before. Calculate the entropy of destination FQDNs in Zeek dns.log in the 5 minutes following a 'kextload' event; alert on a sudden spike.",
              "Use a time-series anomaly detection model (e.g., LSTM) on the count of 'kextload' events per host, per day. Train the model on historical data to learn patterns associated with legitimate software installations and system updates. Flag any spike that deviates significantly from the host's established pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary achieved privilege escalation using malicious kernel modules/extensions?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.006",
        "name": "Kernel Modules and Extensions",
        "evidence": [
          {
            "description": "A process, initiated by a non-administrative user, loads a kernel driver (e.g., via `sc.exe create`) whose hash is associated with a known vulnerable driver used in Bring Your Own Vulnerable Driver (BYOVD) attacks.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7045",
              "Windows Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Windows workstations and servers (e.g., Remote Desktop Session Hosts).",
            "action": [
              "Maintain a watchlist of file hashes for known vulnerable drivers (e.g., from the loldrivers.io project). Query Sysmon Event ID 1 for executions of `sc.exe` or `fltmc.exe`. If the command line references a file whose hash is on the watchlist and the executing user is not a privileged account, alert immediately.",
              "For all non-administrative user accounts, baseline the frequency of `sc.exe` usage with arguments containing 'create', 'type=kernel', or 'load'. This frequency should be near zero. Alert on any deviation from this zero-frequency baseline for a standard user account.",
              "Use a sequence analysis model (e.g., LSTM) trained on user session command histories from Sysmon Event ID 1 logs. Flag anomalous sequences such as: [file download of .sys] -> [`sc.exe create ...`] -> [`sc.exe start ...`] -> [spawning of system-level cmd.exe], when performed by a single non-admin user session."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688 or Sysmon Event ID 1) shows a child process running with a high-integrity security identifier (e.g., S-1-5-18 for SYSTEM) spawned from a parent process running with a medium or low-integrity identifier.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers.",
            "action": [
              "Query Sysmon Event ID 1 logs. For each event, compare the `IntegrityLevel` of the parent process with the child process. Alert on any transition from 'Medium' or 'Low' to 'High' or 'System', excluding known elevation brokers like `svchost.exe` and `consent.exe` as the parent process.",
              "For each parent process name (e.g., `powershell.exe`, `word.exe`), calculate the historical probability of it spawning a child process with 'System' integrity level. For most, this probability is zero. Alert when a 'System' integrity child is spawned from a parent where this historical probability is below a 0.01% threshold.",
              "Model process creation events as a directed graph where nodes are processes and edges are parent-child relationships with integrity levels as attributes. Use a graph-based anomaly detection algorithm to identify rare edges. An edge representing a privilege escalation (e.g., `cmd.exe` (Medium) -> `cmd.exe` (System)) that is not part of a learned, legitimate graph pattern is flagged as an anomaly."
            ]
          },
          {
            "description": "On Linux, a process with a non-root UID/EUID executes `insmod` or `modprobe`, and is followed by the same user session spawning a shell or process with an effective UID of 0 (root).",
            "data_sources": [
              "Linux auditd logs (type=EXECVE, type=USER_START, type=SYSCALL for init_module)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Shared Linux environments (e.g., developer shell servers, multi-user systems).",
            "action": [
              "Query auditd logs to correlate events by session ID. Alert when a user session executes `insmod` or `modprobe` and is followed within 5 minutes by the execution of a process where `euid=0` (e.g., `whoami` returns 'root', or a new `bash` shell is spawned with EUID 0).",
              "Analyze auditd `EXECVE` logs to track UID and EUID for all processes. It is statistically anomalous for a process's EUID to be 0 when its parent process's EUID was not 0. Flag all such transitions for review, as they represent a direct privilege escalation event.",
              "Train a Hidden Markov Model (HMM) on sequences of commands from user sessions, where states represent privilege levels ('standard user', 'root activity'). A transition from a 'standard user' state to a 'root activity' state, especially if preceded by a rare command like `insmod`, would be identified by the model as a low-probability, anomalous sequence."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]