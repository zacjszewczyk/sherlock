[
  {
    "information_requirement": "Is the adversary establishing persistence using malicious installer packages?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.016",
        "name": "Installer Packages",
        "evidence": [
          {
            "description": "A file creation or process execution event is correlated to a parent installer process (e.g., msiexec.exe, setup.exe), and the hash of the created file or executed child process matches a known-malicious indicator from a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 11",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Software deployment servers",
            "action": [
              "Symbolic: Query for process creation events (Windows Event ID 4688) and file creation events (Sysmon Event ID 11) where the creating process is a known installer (e.g., msiexec.exe, setup.exe, install.exe). Compare the hash of the child process executable or the created file against a threat intelligence feed of known malware hashes. Generate a high-priority alert on any match.",
              "Statistical: For installer processes that launch PowerShell (identified via 4688 parent/child relationship and 4104 script block logs), calculate the Shannon entropy of the executed script block. Compare the entropy score against a baseline established from legitimate installer scripts across the enterprise. Flag scripts with entropy scores in the top 5th percentile (e.g., > 6.5) as potentially obfuscated.",
              "Machine Learning: Train a gradient boosting classifier (e.g., XGBoost) to predict if a file written by an installer is malicious. Features can include file entropy, file size, write path (e.g., one-hot encoded common paths like Program Files, AppData, Temp), parent process name, and whether the file is digitally signed. Deploy the model to score files written by installers in near-real-time and alert on predictions with a high confidence score (>0.9)."
            ]
          },
          {
            "description": "An installer process is observed as the parent process for the creation of a persistence mechanism (e.g., new service, scheduled task, registry run key), and the properties of that mechanism (e.g., service name, executable path, command-line arguments) match known malicious patterns or IOCs.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 4698",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Domain Controllers",
            "action": [
              "Symbolic: Monitor for service creation (Windows Event ID 4697), scheduled task creation (Windows Event ID 4698), and registry modifications to autorun locations (Windows Event ID 4657). Correlate these events by ProcessID/GUID to a parent installer process (Windows Event ID 4688). Apply a ruleset (e.g., YARA, Sigma) against the service name, task name, command-line arguments, and registry value data to detect patterns associated with known malware. Alert on a match.",
              "Statistical: For each new persistence mechanism created by an installer, calculate a rarity score for its properties. For a new service, determine the enterprise-wide frequency of its executable path (e.g., a path in C:\\Users\\Public\\ is rarer than one in C:\\Windows\\System32\\). Aggregate rarity scores for the executable path, service name, and user context. Flag persistence entries with a combined rarity score exceeding the 98th percentile of all newly created persistence mechanisms.",
              "Machine Learning: Train a logistic regression classifier to predict whether a new persistence entry is malicious. Features should include parent process name, path of the new executable/script (featurized by location, e.g., ProgramFiles, AppData, Temp), presence and length of command-line arguments, location of the persistence mechanism (e.g., HKCU vs HKLM Run key), and the statistical rarity of the executable path. Alert on items classified as malicious with a high confidence score (> 0.9)."
            ]
          },
          {
            "description": "A specific, known installer package (e.g., vlc-3.0.16-win64.exe) creates a persistence mechanism (e.g., a scheduled task) that is not part of its established, baselined behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4697",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers, Domain Controllers, Software deployment servers",
            "action": [
              "Symbolic: Create and maintain an explicit allowlist mapping specific, approved installer package names/hashes to the exact persistence mechanisms they are authorized to create (e.g., 'acrobat_installer.msi' is allowed to create the 'AdobeARMservice' service). Alert on any installer that creates a persistence entry not on its specific allowlist.",
              "Statistical: Establish a baseline of normal persistence modifications for all installer processes observed over a 30-day period. For each new persistence creation event by an installer, check if the tuple of (installer_name, persistence_type, persistence_path_location) has been seen before. Use frequency analysis to flag events where a common installer creates persistence in a statistically rare location (e.g., a path with high string entropy or in a user-writable directory like C:\\PerfLogs). Alert on combinations in the bottom 1st percentile of frequency.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features extracted from persistence creation events, including parent process name, persistence type (service, task, run key), target path characteristics (e.g., depth, parent folder), and user context. Legitimate installers should form dense clusters representing common installation patterns. Treat events that are classified as noise or fall into very small, sparse clusters as anomalies requiring investigation."
            ]
          },
          {
            "description": "An installer process initiates a network connection to a destination IP or domain that is either on a threat intelligence blocklist, has a low reputation score, or is statistically anomalous for that specific installer process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network egress points (firewalls/proxies), DNS resolvers",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with network connection events (Sysmon Event ID 3 or Zeek conn.log) originating from the same ProcessID/GUID. Compare the destination IP addresses and resolved domains (from Zeek dns.log) against a CTI feed of known C2 servers or malicious domains. Generate an alert on any match originating from an installer process.",
              "Statistical: For each unique installer process name, build a profile of its typical network behavior (e.g., destination ports, protocols, JA3 hash, requested TLDs) from historical Zeek conn.log and dns.log data. Flag any instance where an installer's network connection exhibits anomalous properties, such as a data transfer volume exceeding the 99th percentile of its historical baseline, or a connection to a newly registered domain.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on features of legitimate installer network activity derived from Zeek logs. Features should include destination port, protocol, JA3/JA3S hash, connection duration, orig_bytes, resp_bytes, and the TLD of the requested domain. The model learns the boundary of 'normal' behavior. Any new network connection from an installer that falls outside this learned boundary is flagged as a high-confidence anomaly."
            ]
          },
          {
            "description": "An installer process is identified as the parent of a script interpreter (e.g., powershell.exe, cscript.exe), and the executed script block exhibits malicious characteristics such as obfuscation (high entropy), containing suspicious keywords, or being unsigned.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers",
            "action": [
              "Symbolic: From Windows Event ID 4104 (PowerShell Script Block Logging), parse the script content for executions where the parent process is a known installer (via correlation with Windows Event ID 4688). Apply a ruleset (e.g., Sigma) to search for specific suspicious string combinations like 'IEX', 'DownloadString', 'Get-ExecutionPolicy -Bypass', or base64-encoded commands. Generate an alert on any rule match.",
              "Statistical: For all script blocks logged in Event ID 4104 initiated by installers, calculate the Shannon entropy of the script content. Establish a baseline entropy score for legitimate scripts run during installations across the enterprise. Alert when a script's entropy exceeds a high threshold (e.g., > 95th percentile), which often indicates packing or obfuscation. Additionally, track the frequency of specific PowerShell cmdlet usage by installers and alert on the use of statistically rare cmdlets.",
              "Machine Learning: Utilize a pre-trained natural language processing (NLP) model (e.g., a transformer-based model fine-tuned on a corpus of malicious and benign PowerShell scripts) to classify script blocks. Feed the script content from Event ID 4104 into the model and alert when the classification is 'malicious' with a confidence score above a set threshold (e.g., 0.90)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges using malicious installer packages?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.016",
        "name": "Installer Packages",
        "evidence": [
          {
            "description": "An installer process is executed, and its file hash is found to match a known vulnerable application version with a public privilege escalation exploit (CVE).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Software repositories, Patch management systems",
            "action": [
              "Symbolic: Upon execution of any installer process (e.g., msiexec.exe, setup.exe) identified in Windows Event ID 4688, extract the file hash of the executable. Compare this hash against a continuously updated database of known-vulnerable application installers with associated privilege escalation exploits. Generate a high-priority alert on any match.",
              "Statistical: Maintain an inventory of all installed application versions across the enterprise. For each new installation event (derived from Event ID 4688), look up the software name and version against a vulnerability database (e.g., NVD). Flag for review any new installations of software with known privilege escalation vulnerabilities (CVSS Attack Vector: Local, Privileges Required: Low/None) and a CVSS base score above 7.0.",
              "Machine Learning: Develop a classification model to predict if a given installer corresponds to a known vulnerable version of a legitimate application. Features can include software name, version number string (parsed into major/minor/patch), publisher, and certificate information. Train the model on historical data of both vulnerable and patched software versions to proactively flag installations of outdated, vulnerable software."
            ]
          },
          {
            "description": "An installer process spawns a child process whose executable name or command-line arguments match signatures of known privilege escalation tools or techniques (e.g., PrintSpoofer, JuicyPotato).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Controllers, High-value asset servers",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) where the parent process is an installer. Scan the child process name and command line for regular expression patterns corresponding to known privilege escalation tools (e.g., 'JuicyPotato.exe', 'PrintSpoofer.exe', 'Invoke-PowerUp'). For PowerShell child processes, apply similar regex patterns to the script block content from the correlated Event ID 4104. Alert immediately on a match.",
              "Statistical: Analyze the command-line arguments of all child processes spawned by installers. Calculate the Shannon entropy and character frequency of each command line. Flag child processes that use statistically rare arguments or have an entropy score in the 99th percentile for that specific child process name (e.g., a rundll32.exe command line with very high entropy is suspicious), indicating obfuscation.",
              "Machine Learning: Train a sequence-based model, such as a Long Short-Term Memory (LSTM) network, on the sequence of tokens in command-line arguments for processes spawned by legitimate installers. The model learns the normal structure and order of arguments. Flag any command-line execution that the model identifies as having a high anomaly score (reconstruction error), as this could indicate the use of a novel or obfuscated privilege escalation tool."
            ]
          },
          {
            "description": "An installer process running at a 'Medium' integrity level spawns a child process that is running at a 'High' or 'System' integrity level, and this elevation is not associated with the standard User Account Control (UAC) mechanism.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, User workstations, Terminal servers",
            "action": [
              "Symbolic: Create a rule to alert any time an installer process (e.g., msiexec.exe) running at 'Medium' integrity level (from Sysmon Event ID 1) spawns a child process (e.g., cmd.exe, powershell.exe) that is running at 'High' or 'System' integrity level, and the child process is not a known, legitimate elevation broker like `consent.exe`.",
              "Statistical: For each unique installer name, establish a baseline of the typical integrity levels of its child processes using Sysmon Event ID 1 data. Alert when an installer spawns a child process with an integrity level that is statistically anomalous for that specific parent installer (e.g., a 'System' level process when 99.9% of historical children were 'Medium').",
              "Machine Learning: Use an Isolation Forest algorithm on process creation events. Features should include parent process name, child process name, parent integrity level, and child integrity level. The model will learn to isolate rare combinations that represent anomalies. Events that are quickly isolated (low path length), such as a non-system installer spawning a SYSTEM-level command prompt, are flagged as highly anomalous."
            ]
          },
          {
            "description": "A user account is added to a high-privilege local or domain group (e.g., Administrators, Domain Admins), and the process responsible for the change is identified as an installer or a child process of an installer.",
            "data_sources": [
              "Windows Event ID 4732",
              "Windows Event ID 4728",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Controllers, Active Directory databases",
            "action": [
              "Symbolic: Create a high-severity alert for any event where a member is added to a privileged group (e.g., 'Administrators', 'Domain Admins') tracked by Windows Event ID 4732 or 4728. Correlate the 'Process Name' field of the event with recent process creation events (Windows Event ID 4688) to determine if the originating action was an installer process. Alert if the correlation is positive within a 5-minute window.",
              "Statistical: Profile the normal rate of group modifications (Events 4732, 4728) per host. Use time-series analysis to detect a sudden spike in these events immediately following an installation event on a host (tracked via 4688). A burst of activity that is 3+ standard deviations above the hourly baseline for that host is a strong anomaly.",
              "Machine Learning: Train a decision tree classifier to determine if a group membership change is suspicious. Features should include: the name of the process making the change (e.g., lsass.exe, net.exe, msiexec.exe), the group being modified, the time of day, and the day of the week. The model learns that `net.exe` adding a user to 'Administrators' initiated by `msiexec.exe` is highly suspicious. Alert when the model classifies a change as suspicious with high confidence."
            ]
          },
          {
            "description": "An installer process, or its child, is observed performing a write or delete operation on a sensitive registry key known to be used for privilege escalation or persistence, such as those related to IFEO, Winlogon, or LSA.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Windows Registry hives on critical servers and workstations",
            "action": [
              "Symbolic: Deploy and monitor SIEM rules on critical registry keys (e.g., `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options`, `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa`). Create a rule that generates a critical alert on any 'SetValue' or 'CreateKey' event (Sysmon Event ID 13, Windows Event ID 4657) to these keys where the source process is an installer (e.g., msiexec.exe) or its child.",
              "Statistical: Build a frequency profile of processes that legitimately modify sensitive registry keys. Any write access to a monitored sensitive key from a process name that is statistically rare (e.g., in the bottom 1% of frequency) or has never been seen writing to that key before should be flagged. For example, if `msiexec.exe` is a rare process to access `HKLM\\...\\Image File Execution Options`, generate an alert.",
              "Machine Learning: Use a Markov Chain model to baseline the normal sequence of registry key accesses during legitimate software installations. The model learns the probability of transitioning from one registry key access to another. An anomalous sequence, such as an installer writing to its own `HKLM\\Software\\Vendor` key and then immediately writing to `HKLM\\...\\Image File Execution Options` (a low-probability transition), would be flagged as a deviation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]