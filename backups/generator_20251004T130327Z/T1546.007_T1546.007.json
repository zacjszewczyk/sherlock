[
  {
    "information_requirement": "Is an adversary establishing persistence through the registration and execution of a malicious Netsh Helper DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.007",
        "name": "Netsh Helper DLL",
        "evidence": [
          {
            "description": "A new value is written to the Windows Registry key `HKLM\\SOFTWARE\\Microsoft\\Netsh` that points to a DLL whose file hash or name is a known indicator of compromise (IOC).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13 (Registry Value Set)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows endpoints, including Domain Controllers, Application Servers, and Workstations.",
            "action": [
              "Symbolic: Construct a SIEM query to alert on any Sysmon Event ID 13 or Windows Event ID 4657 event where the TargetObject field or key name contains `HKLM\\SOFTWARE\\Microsoft\\Netsh`. Extract the DLL path from the event details. Upon alert, automate the retrieval of the file's hash and cross-reference it and the filename against a threat intelligence database of known malicious indicators. Generate a high-severity alert on any match.",
              "Statistical: For each new DLL registered as a Netsh helper, calculate the Shannon entropy of its filename. Establish a baseline distribution of filename entropy for legitimate, known-good helper DLLs across the enterprise. Generate an alert for any new DLL registration where the filename entropy exceeds the 95th percentile of the baseline, as this is a common characteristic of randomly generated malware filenames.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) to predict if a newly registered DLL is malicious. Use features such as: filename entropy, if the file path is within a system directory (e.g., System32) vs. a user directory, if the DLL is digitally signed, and the prevalence of the DLL's hash across the enterprise. The model's output can be a risk score, with scores above a set threshold triggering an investigation."
            ]
          },
          {
            "description": "The process `netsh.exe` is executed with command-line arguments containing `add helper`, indicating an attempt to register a new helper DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Windows endpoints, particularly standard user workstations and servers where administrative changes are infrequent.",
            "action": [
              "Symbolic: Create a detection rule that monitors for Sysmon Event ID 1 or Windows Event ID 4688 where the ProcessName is `netsh.exe` and the CommandLine contains the substring `add helper`. Escalate the alert priority if the parent process is not `cmd.exe`, `powershell.exe`, or a known software installer or administrative tool (e.g., `mmc.exe`).",
              "Statistical: For all `netsh.exe add helper` executions, create a frequency distribution of the parent processes and user accounts that initiate the command. Alert when a new execution involves a parent process-user account pair that is a statistical outlier (e.g., in the bottom 5th percentile of historical frequency), indicating a rare or first-time activity for that context.",
              "Machine Learning: Use a clustering algorithm like DBSCAN on `netsh.exe add helper` events. Use features such as the user account's group memberships (e.g., Domain Admins vs. standard users), parent process name, and time of day (e.g., business hours vs. off-hours). Identify clusters of normal administrative behavior and flag any new executions that are marked as noise or outliers by the algorithm, as these represent significant deviations from established patterns."
            ]
          },
          {
            "description": "A DLL registered as a Netsh helper exhibits anomalous properties, such as being located in a non-standard directory (e.g., `C:\\Users\\<user>\\AppData\\Local\\Temp`), being digitally unsigned, or having an exceptionally low prevalence across the enterprise endpoint fleet.",
            "data_sources": [
              "Sysmon Event ID 13 (Registry Value Set)",
              "Sysmon Event ID 1 (Process Creation)",
              "File integrity monitoring or EDR data for digital signatures"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise-wide endpoint fleet, file servers hosting user profiles, and configuration management databases (CMDB).",
            "action": [
              "Symbolic: Upon detection of a new Netsh helper DLL registration (Sysmon Event ID 13), trigger an automated enrichment process. Check if the DLL path is in a common user-writable directory (e.g., `C:\\Users`, `C:\\Temp`, `C:\\ProgramData`). Concurrently, verify the file's digital signature status. Generate a high-severity alert if the DLL is both unsigned and located in a user-writable path.",
              "Statistical: Maintain an enterprise-wide inventory of all registered Netsh helper DLLs, indexed by their SHA256 hash. Calculate the prevalence (i.e., the count of distinct hosts) for each DLL hash. This is also known as 'stack counting'. Flag any new DLL registration where its hash prevalence is a significant outlier, for example, being present on fewer than 1% of endpoints or below the 5th percentile of all prevalence counts.",
              "Machine Learning: Develop a time series anomaly detection model (e.g., ARIMA or Seasonal-Trend decomposition using Loess) on the daily count of new, unique (by hash) Netsh helper DLLs registered across the enterprise. A sudden, anomalous spike in the time series, especially if correlated with low-prevalence DLLs, can indicate a widespread campaign and should trigger a priority investigation."
            ]
          },
          {
            "description": "A Netsh helper DLL registry modification is followed within a 10-minute window by `netsh.exe` execution, which then spawns a suspicious child process (e.g., `powershell.exe`) or initiates an external network connection to a rare destination.",
            "data_sources": [
              "Sysmon Event ID 13 (Registry Value Set)",
              "Sysmon Event ID 1 (Process Creation)",
              "Sysmon Event ID 3 (Network Connection)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host-based sensors on endpoints and servers, Network egress points (e.g., firewalls, proxies monitored by Zeek).",
            "action": [
              "Symbolic: Create a stateful correlation rule that triggers when the following sequence occurs on the same host within 10 minutes: (1) Sysmon Event ID 13 shows a write to a key under `HKLM\\SOFTWARE\\Microsoft\\Netsh`, followed by (2) Sysmon Event ID 1 shows `netsh.exe` executing, which then (3) spawns a child process such as `powershell.exe`, `cmd.exe`, `rundll32.exe`, or `regsvr32.exe`.",
              "Statistical: After a Netsh helper DLL registration (Sysmon Event ID 13), monitor subsequent network connections (Sysmon Event ID 3, Zeek conn.log) from `netsh.exe` on that host. For each connection, analyze the destination IP and port. Calculate a risk score based on the rarity of the destination IP (e.g., using a prevalence baseline), the port's association with C2 protocols, and a low DNS query frequency for the associated domain (from Zeek dns.log). Alert if the cumulative score exceeds a statistically derived threshold (e.g., 3 standard deviations above the mean host risk score).",
              "Machine Learning: Use a sequence analysis model, such as a Hidden Markov Model (HMM), trained on sequences of host and network events. Define states such as 'Benign Activity', 'Netsh DLL Registration', 'Anomalous Child Process', and 'External C2 Beacon'. Train the model on known benign sequences. Apply the trained model to new event sequences in real-time to calculate the probability of a malicious sequence, flagging those that are highly improbable under the benign model."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary leveraging a malicious Netsh Helper DLL to execute code with elevated (High or System) integrity?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.007",
        "name": "Netsh Helper DLL",
        "evidence": [
          {
            "description": "A sequence of events occurs where: 1) A DLL file is created in a user-writable directory by a medium-integrity process. 2) Within a short time window, the same DLL is registered as a Netsh helper by a high-integrity `netsh.exe` process on the same host.",
            "data_sources": [
              "Sysmon Event ID 11 (File Create)",
              "Sysmon Event ID 1 (Process Creation)",
              "Sysmon Event ID 13 (Registry Value Set)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (`C:\\Users\\*`), temporary folders, and process/registry logs on standard workstations and multi-user servers.",
            "action": [
              "Symbolic: Create a correlation rule that triggers when: (1) Sysmon Event ID 11 logs a DLL creation in a user-writable path by a process with `IntegrityLevel: Medium`. (2) Within 5 minutes on the same host, Sysmon Event ID 1 logs `netsh.exe add helper` running with `IntegrityLevel: High` or `System`, and the command line references the same DLL path.",
              "Statistical: Monitor all `netsh.exe add helper` commands. For each, check the creation time of the specified DLL. Calculate the time delta between DLL creation and its registration. A very short delta (e.g., under 5 minutes) is anomalous. Flag any registration where this delta is in the bottom 1st percentile of all observed deltas, suggesting the DLL was dropped just-in-time for the persistence/escalation event.",
              "Machine Learning: Train a binary classifier (e.g., Logistic Regression) to predict if a Netsh registration is part of a privilege escalation chain. Features should include: boolean for if the DLL is in a user-writable path, boolean for if the DLL is unsigned, time difference between file creation and registration, and the integrity level of the process that created the file. The model can identify high-risk events that combine these suspicious attributes."
            ]
          },
          {
            "description": "An instance of `netsh.exe` running with High or System integrity spawns a child process that is not a known, legitimate helper process, such as `cmd.exe` or `powershell.exe`, which inherits the elevated privileges.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (Process Creation)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all Windows endpoints, especially Domain Controllers, Application Servers, and Privileged Access Workstations.",
            "action": [
              "Symbolic: Create a rule to detect Sysmon Event ID 1 where ParentImage is `C:\\Windows\\System32\\netsh.exe` and Image is a suspicious utility (e.g., `powershell.exe`, `cmd.exe`, `whoami.exe`, `reg.exe`, `sc.exe`, `rundll32.exe`). Trigger an alert only when the parent `netsh.exe` process was running with `IntegrityLevel` of `High` or `System`, and the child process inherited it.",
              "Statistical: Build a baseline profile of normal child processes for `netsh.exe` across the environment. For each host, maintain a list of `(child process name, command line)` tuples spawned by `netsh.exe`. Use frequency analysis (stack counting) to identify rare or unseen child processes. Alert when `netsh.exe` spawns a child process that has never been seen before on that host or is in the bottom 1st percentile of prevalence across the enterprise.",
              "Machine Learning: Apply Natural Language Processing (NLP) techniques to the command lines of processes spawned by high-integrity `netsh.exe` instances. Use TF-IDF to vectorize the command-line arguments. Train a classifier (e.g., Naive Bayes) to distinguish between benign administrative commands and suspicious commands involving user creation, service modification, defense evasion, or downloading files. Flag any command line classified as suspicious for analyst review."
            ]
          },
          {
            "description": "An audit of file or registry permissions reveals that a registered Netsh helper DLL file or its corresponding registry key (`HKLM\\SOFTWARE\\Microsoft\\Netsh`) has a weak Access Control List (ACL) that permits modification by non-administrative user groups.",
            "data_sources": [
              "Configuration management database (CMDB)",
              "EDR asset/vulnerability data",
              "Output from custom audit scripts (e.g., PowerShell's `Get-Acl`)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host-based configuration and permission audit data from all endpoints and servers.",
            "action": [
              "Symbolic: Create a scheduled audit query (e.g., daily) that: (1) Enumerates all DLL paths listed as values under `HKLM\\SOFTWARE\\Microsoft\\Netsh`. (2) For each DLL file path and its parent registry key, check its Access Control List (ACL). (3) Generate a finding if any ACL grants write, modify, or full control permissions to non-privileged groups like 'Everyone', 'Users', or 'Authenticated Users'.",
              "Statistical: On a scheduled basis, scan all Netsh helper DLLs and their registry keys for their permissions. Assign a numerical 'insecurity score' to the permissions (e.g., 'Authenticated Users:Write' = 10, 'Users:Modify' = 15, 'Everyone:FullControl' = 25). Create a distribution of these scores across the enterprise. Investigate hosts with DLLs that are statistical outliers with high insecurity scores (e.g., > 99th percentile).",
              "Machine Learning: Use a classifier to predict vulnerable hosts. Train a model on host-level features (e.g., OS version, count of installed software, number of local admin accounts, primary user role) to predict the likelihood of insecure Netsh helper DLL configurations. Use this model to prioritize which assets should be targeted for manual audit and remediation, focusing on hosts predicted to be at highest risk."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]