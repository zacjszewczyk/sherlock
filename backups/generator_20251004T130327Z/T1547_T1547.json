[
  {
    "information_requirement": "Is the adversary maintaining persistence through boot or logon autostart execution?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547",
        "name": "Boot or Logon Autostart Execution",
        "evidence": [
          {
            "description": "A new executable file is created in a known startup folder, or a new registry value pointing to an executable is added to an autorun key, where the file's hash, path, or value data is present on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows workstations and servers; specifically, user profile startup directories (e.g., %APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup), system-wide startup folders, and the HKLM/HKCU hives of the Windows Registry.",
            "action": [
              "Create a detection rule that monitors file creation events (Sysmon Event ID 11) in startup paths and registry value set events (Sysmon Event ID 13, Windows Event ID 4657) in autorun keys. Extract file hashes from associated process creation events (Sysmon Event ID 1) or registry values and alert on any exact match against a high-fidelity threat intelligence feed of malicious hashes, filenames, or registry values.",
              "Develop a statistical baseline by calculating the historical frequency (e.g., over 90 days) of all executable names and registry values created in autostart locations across the enterprise. Generate an alert for any new entry whose name or value falls below a low percentile threshold (e.g., 5th percentile), indicating it is highly uncommon.",
              "Implement a machine learning classification model (e.g., logistic regression, random forest) that ingests features such as file path, filename entropy, PE header information, and signer status to predict the likelihood of a new autostart entry being malicious. Alert when the model's predicted probability exceeds a defined risk threshold (e.g., >0.85)."
            ]
          },
          {
            "description": "An autostart entry executes a scripting engine (e.g., powershell.exe, cscript.exe, wscript.exe) with command-line arguments containing obfuscation patterns, such as Base64 encoding or high character entropy, or suspicious flags like '-w hidden' or '-nop'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those with advanced PowerShell logging enabled; Windows Registry HKLM/HKCU hives.",
            "action": [
              "Deploy a detection rule using regular expressions to scan process creation events (Windows Event ID 4688, Sysmon Event ID 1) for scripting engines with suspicious arguments like '-enc', '-w hidden', '-nop', or long Base64 strings. Correlate the parent process to confirm it was launched from a known persistence mechanism by tracing back to a registry key modification (Sysmon Event ID 13).",
              "For all autostarted script processes, calculate the entropy of the command-line arguments. Establish a baseline entropy score for legitimate scripts in your environment. Flag for review any execution where the command-line entropy exceeds a high percentile threshold (e.g., 95th percentile), suggesting obfuscation.",
              "Utilize a Natural Language Processing (NLP) model trained on legitimate and malicious scripts/command lines to classify the executed command as malicious. The model should analyze features like argument structure, function calls, and string characteristics to provide a risk score for alerting."
            ]
          },
          {
            "description": "A modification to a known autostart location (e.g., Registry Run keys, Startup folders, Scheduled Tasks, WMI event subscriptions) occurs outside of an authorized change window or is not associated with a known software installation or patching process.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Change management database, software deployment servers, all Windows endpoints and servers.",
            "action": [
              "Ingest change management tickets and software deployment logs to create a time-bound allowlist of expected system modifications. Monitor for autostart modifications (Sysmon EID 11, 13; Windows EID 4657, 4698, 4702) and alert on any change that does not correlate with an approved activity in the allowlist.",
              "For each host, model the rate of autostart modifications over time using a time-series analysis. Detect and alert on anomalous spikes in modification activity that deviate significantly (e.g., >3 standard deviations) from the host's established baseline.",
              "Apply a clustering algorithm (e.g., DBSCAN) to the features of modification events (e.g., process making the change, time of day, target path, user context). Legitimate software installers will form dense clusters; flag any modification that the model identifies as noise or an outlier."
            ]
          },
          {
            "description": "An autostarted process establishes outbound network connections exhibiting beaconing behavior (i.e., highly regular time intervals and/or consistent data sizes) to a destination IP/domain that is rare across the enterprise or has a poor reputation score.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), DNS servers, all Windows endpoints and servers.",
            "action": [
              "Correlate process creation at logon (Sysmon Event ID 1) with subsequent network connections (Sysmon Event ID 3, Zeek conn.log). Enrich destination IPs and domains (from Zeek dns.log) with threat intelligence feeds. Alert if an autostart process connects to a known command-and-control (C2) server or a newly registered domain.",
              "For each autostart process and destination IP pair, analyze the inter-arrival time of connections in Zeek conn.log. A very low standard deviation of these time deltas indicates machine-generated beaconing. Concurrently, identify destination IPs that are in the 99th percentile of rarity (i.e., contacted by very few hosts) and flag this combination.",
              "Apply a time-series forecasting model (e.g., ARIMA) to the connection events for a given process. If the model can predict future connection times with high accuracy, it suggests a programmatic, non-human pattern. A high-confidence forecast combined with a rare or low-reputation destination is a strong indicator of C2 beaconing."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation via boot or logon autostart execution?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547",
        "name": "Boot or Logon Autostart Execution",
        "evidence": [
          {
            "description": "A new Windows Service is created (Event ID 7045) or an existing service's ImagePath registry value is modified, where the service is configured to run as 'LocalSystem' and the associated executable path points to an unsigned file, a file in a non-standard directory, or a file with a known-bad hash.",
            "data_sources": [
              "Windows Event ID 7045",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, critical application servers, administrator workstations, and the Windows Registry HKLM\\SYSTEM hive.",
            "action": [
              "Create a rule to trigger upon a service creation event (Windows EID 7045) where the 'Service Account' is 'LocalSystem'. The rule should perform a hash lookup of the 'Service File Name' against a threat intelligence feed. Also monitor registry modifications (Sysmon EID 13) to HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\ImagePath and perform the same hash lookup and account check.",
              "Maintain a statistical baseline of common service executable paths and names across the enterprise. Flag the creation of any new service that runs as SYSTEM where the ImagePath is statistically rare (e.g., located in C:\\Users\\ or C:\\Temp\\) or has high filename entropy.",
              "Train a classification model on service creation events, using features such as 'Service File Name' path, 'Service Account', parent process that created the service, and the executable's signature status. Use the model to score the risk of each new service, alerting on those classified as high-risk and configured to run with elevated privileges."
            ]
          },
          {
            "description": "A process creation event shows a command-line utility (e.g., sc.exe, schtasks.exe, reg.exe) creating or modifying an autostart mechanism to execute with SYSTEM privileges, where the parent process is not a known administrative tool or installer (e.g., originating from an Office application).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers; command-line audit logs.",
            "action": [
              "Deploy regex rules to detect process creation events (Sysmon EID 1) for `sc.exe create`, `schtasks.exe /create ... /ru SYSTEM`, and `reg.exe add HKLM\\...\\Run`. Alert on any match where the new entry is configured to run with elevated privileges, especially if the parent process is unexpected (e.g., outlook.exe).",
              "Analyze parent-child process relationships for administrative utilities like sc.exe and schtasks.exe. Establish a baseline of normal parent processes (e.g., explorer.exe, mmc.exe, known software installers). Flag any execution where the parent process is statistically anomalous (e.g., winword.exe, an unmanaged powershell.exe instance).",
              "Implement an anomaly detection model on process command-line arguments. Vectorize the arguments (e.g., using TF-IDF) and use a one-class SVM or isolation forest to identify command-line invocations that are outliers compared to the historical baseline of legitimate administrative activity."
            ]
          },
          {
            "description": "A privileged system process that launches at boot (e.g., winlogon.exe, services.exe) loads a DLL module from a non-standard, user-writable path (e.g., C:\\Users\\, C:\\ProgramData\\), or loads an unsigned DLL, which deviates from the process's historical baseline of loaded modules.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers; System32/SysWOW64 directories for baseline comparison.",
            "action": [
              "Monitor DLL load events (Sysmon EID 7). Create and maintain an allowlist of known-good DLLs and their expected paths for critical, privileged autostart processes (e.g., services.exe, winlogon.exe). Alert when one of these processes loads a DLL not on its specific allowlist or any DLL that is unsigned ('Signed: false').",
              "For each privileged process, build a statistical profile of its typically loaded DLLs, including the frequency of each path. Flag any DLL load event where the path is a statistical outlier (e.g., C:\\ProgramData\\, C:\\PerfLogs\\) compared to the process's baseline. Calculate path entropy to find abnormally complex or random-looking paths.",
              "Use a sequence-based anomaly detection model (e.g., an LSTM autoencoder) trained on the sequence of DLLs loaded by a process during a normal boot. During inference, feed the observed DLL load sequence and flag any sequence that has a high reconstruction error, indicating a deviation from the learned normal behavior."
            ]
          },
          {
            "description": "A process creation event at boot or logon shows an executable running with SYSTEM integrity from a path that is statistically rare across the enterprise or is located in a user-writable directory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers; User profile directories and temporary folders.",
            "action": [
              "Create a detection rule to monitor process creation events (Sysmon Event ID 1). Alert if the 'User' is 'NT AUTHORITY\\SYSTEM', the 'Image' path is in a user-writable location (e.g., C:\\Users\\*, C:\\Temp\\*, C:\\ProgramData\\*), and the file is unsigned.",
              "Build a frequency table of all executable paths that run as SYSTEM across the enterprise over a 30-day period. Alert when a new SYSTEM process is created from a path that falls below a rarity threshold (e.g., seen on <1% of hosts or in the 1st percentile of execution frequency).",
              "Train a one-class SVM or other novelty detection algorithm on features of legitimate SYSTEM processes (e.g., image path, parent process, file signature status, file entropy). Flag any new SYSTEM process that the model identifies as a novelty or outlier compared to the established baseline."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]