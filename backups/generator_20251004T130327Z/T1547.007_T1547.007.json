[
  {
    "information_requirement": "Is the adversary maintaining persistence on macOS by modifying 'Reopen windows' login property list files?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.007",
        "name": "Re-opened Applications",
        "evidence": [
          {
            "description": "The 'com.apple.loginwindow.[UUID].plist' file is modified by a process other than the expected 'loginwindow' process during a user-initiated logout or restart sequence.",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User library directories (`~/Library/Preferences/ByHost/`) on all macOS endpoints.",
            "action": [
              "Create a detection rule to generate an alert whenever a file write event occurs on a path matching `*/Library/Preferences/ByHost/com.apple.loginwindow.*.plist` and the writing process name is not 'loginwindow'. Enrich the alert with the writing process's hash and parent process information for immediate triage.",
              "For each process that modifies the target plist file, query historical data to calculate its prevalence across the endpoint fleet (count of distinct hosts seen on / total hosts). Alert on modifications made by processes with a prevalence score below a defined threshold, such as appearing on less than 1% of endpoints.",
              "Train a Random Forest classification model to predict if a plist file modification is malicious. Use features such as the writing process name, path, code signature status (valid, invalid, ad-hoc, none), parent process name, and the count of file writes by the process in the last hour. A 'malicious' classification triggers an incident response workflow."
            ]
          },
          {
            "description": "An application path pointing to a non-standard location (e.g., temporary directory, user downloads folder) or an unsigned application is added to the 'SessionItems.CustomListItems' array within a 'com.apple.loginwindow.[UUID].plist' file.",
            "data_sources": [
              "File Integrity Monitoring logs",
              "osquery scheduled query results",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on all macOS endpoints, specifically targeting plist files in `~/Library/Preferences/ByHost/`.",
            "action": [
              "On file modification or via a scheduled task, parse all `com.apple.loginwindow.*.plist` files. Extract application paths from the `SessionItems.CustomListItems` array. Generate an alert if a path matches a blocklist of suspicious locations (e.g., starts with `/private/tmp/`, `/var/tmp/`, or contains `~/Downloads/`) or if the corresponding application bundle is unsigned.",
              "Maintain an organizational baseline of all application paths present in 'Re-opened Applications' plists. For each newly added path, calculate its prevalence across all users and hosts. Flag paths that fall below the 5th percentile of frequency for analyst investigation.",
              "Use a clustering algorithm like DBSCAN on application path features, including path depth, keywords in the path (e.g., 'tmp', 'cache'), and whether the path is within a standard `/Applications` directory. Treat paths identified as outliers or belonging to small, distinct clusters as suspicious and flag them for review."
            ]
          },
          {
            "description": "A process, known to be launched via the 'Re-opened Applications' mechanism, initiates network connections that are characteristic of command and control (C2) beaconing, such as regular intervals or connections to high-entropy domains.",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and process execution logs on macOS endpoints.",
            "action": [
              "Identify processes launched at or shortly after user login with ancestry tracing to the login process. Correlate their network connections from Zeek conn.log against a threat intelligence feed of known malicious IP addresses, domains, and JA3/JA3S hashes. Generate a high-severity alert on any match.",
              "For each auto-reopened application, establish a statistical baseline of its network behavior, including connection frequency, data volume per hour, and destination port distribution. Use z-scores to detect significant deviations from the baseline (e.g., $$ z > 3 $$). Separately, calculate the Shannon entropy of FQDNs in DNS requests per process; alert on entropy scores greater than 3.5, which are indicative of Domain Generation Algorithms (DGA).",
              "Train an unsupervised autoencoder model on sequences of network connection metadata (e.g., destination port, bytes sent, connection duration) from legitimate, frequently re-opened applications. A high reconstruction error when processing network traffic from a newly observed re-opened process indicates anomalous behavior potentially related to C2 activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary leveraging a re-opened application at user login to escalate privileges on a macOS endpoint?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.007",
        "name": "Re-opened Applications",
        "evidence": [
          {
            "description": "A process spawned from a re-opened application, running as a standard user (UID > 500), creates a child process that executes with root privileges (UID or EUID 0).",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_FORK"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution and ancestry data on all macOS endpoints.",
            "action": [
              "Create a detection rule that alerts when a new process is created with an effective user ID of 0 (`euid=0`) and its parent process has a user ID greater than 500 (`puid>500`). The rule should only trigger if the parent process's ancestry can be traced back to an application launched via the re-open mechanism. Exclude known-good escalations via an allowlist (e.g., parent is `sudo`).",
              "Build a historical baseline of all parent-child process pairs where the child process runs as root. For any new privilege escalation event originating from a re-opened application, flag it if the specific parent-child process pair has never been observed before in the environment or is exceedingly rare (e.g., seen on < 0.5% of endpoints).",
              "Train a XGBoost classification model to identify malicious privilege escalations. Use features such as parent process name and path, parent code signature status, child process name and path, child code signature status, and the presence of suspicious strings in the child process command-line arguments. Label training data using known exploits and legitimate administrative actions."
            ]
          },
          {
            "description": "A process, whose ancestry traces to a re-opened application and which is running as a non-root user, creates or modifies a file within a system-level or privileged directory.",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Protected macOS system directories, including `/System/`, `/Library/LaunchDaemons/`, `/Library/LaunchAgents/`, `/Library/PrivilegedHelperTools/`, and `/usr/local/bin/`.",
            "action": [
              "Create a rule that correlates process execution events with file write events. Generate an alert if a process with a UID greater than 500, whose ancestor is tied to a re-opened application, writes to a protected system directory like `/Library/LaunchDaemons` or `/etc/sudoers.d/`. This indicates a likely post-privilege-escalation action to establish further persistence.",
              "For each process, profile the set of directories it normally writes to. For a process launched via re-opening, calculate a Jaccard similarity index between the set of directories it writes to in a new session and its historical baseline. A low similarity score (e.g., < 0.3) combined with writes to privileged directories should be flagged as highly anomalous.",
              "Use a Long Short-Term Memory (LSTM) neural network to model normal sequences of file system interactions for common applications. A re-opened application that deviates from its learned sequence\u2014for example, by writing a binary to `/usr/local/bin` after previously only ever accessing `~/Library/Application Support/`\u2014would be flagged by the model as a high-confidence anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]