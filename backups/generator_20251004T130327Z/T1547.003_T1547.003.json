[
  {
    "information_requirement": "Is the adversary maintaining persistence using Windows Time Providers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "A registry modification event to a Time Provider's 'DllName' value specifies a DLL whose SHA256 hash matches a known malicious file hash from an integrated threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Critical Workstations",
            "action": [
              "Create a rule to detect a registry value set (Windows Event ID 4657 or Sysmon Event ID 13) where the 'TargetObject' contains '\\Services\\W32Time\\TimeProviders\\' and the value name is 'DllName'. Extract the file path from the 'Details' field. Using the file path, retrieve the file hash (from a file creation event like Sysmon Event ID 11 or via an EDR agent). Compare this hash against a threat intelligence database of known malicious SHA256 hashes. Trigger a high-severity alert on a match.",
              "Periodically query all endpoints to build a baseline inventory of all DLLs referenced in Time Provider registry keys. For each DLL, calculate its prevalence (percentage of endpoints where it is registered). Flag any DLL whose prevalence is below a threshold (e.g., < 0.5% of the fleet) for manual investigation. Also, calculate the entropy of the file path; paths with high entropy or in non-standard locations (e.g., 'C:\\Users\\...\\AppData\\Local\\Temp\\') should increase the risk score.",
              "Train a supervised classification model (e.g., XGBoost, Random Forest) using features from both the DLL file and the registry event. File features include PE header information, imported/exported functions, string entropy, and digital signature status. Event features include the process that made the change and user context. Use this model to score every new Time Provider registration. Alert when the malicious probability score exceeds a dynamically tuned threshold."
            ]
          },
          {
            "description": "A process creation event for 'w32tm.exe' with '/register' or '/config' command-line arguments is observed on a host, followed by a 'W32Time' service restart event (state changes to 'running') within a 5-minute window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Critical Workstations",
            "action": [
              "Create a stateful correlation rule that triggers when a process creation event (Windows Event ID 4688 or Sysmon Event ID 1) for 'w32tm.exe' with '/register' or '/config' in the command line is observed. The rule should then look for a subsequent service control event (Windows Event ID 7036) for 'w32time' entering a 'running' state on the same host within a 5-minute timeframe. Alert on this sequence.",
              "For all 'w32tm.exe' executions, profile the parent process name. Calculate the least frequent parent processes across the environment over a 30-day period. Alert when 'w32tm.exe' is spawned by a parent process in the bottom 5th percentile of frequency (e.g., 'winword.exe', 'powershell.exe' with an encoded command), as legitimate execution is typically from 'services.exe' or an interactive 'cmd.exe' session by an administrator.",
              "Implement a sequence mining algorithm (e.g., using Long Short-Term Memory, LSTM) to learn normal sequences of system events (process creations, service changes, registry writes) associated with system administration. Feed real-time event streams from each host into the model. An alert is generated when the model flags a sequence of events, such as 'powershell.exe' spawning 'w32tm.exe /register' followed by a 'W32Time' service restart, as having a low probability under the learned normal model."
            ]
          },
          {
            "description": "The 'svchost.exe' process hosting the 'W32Time' service initiates a network connection to a destination IP not on the authorized NTP server list or using a protocol/port other than UDP/123.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internet Gateway, Domain Controllers",
            "action": [
              "Join network flow data (Zeek conn.log) with process-level network events (Sysmon Event ID 3 or Windows Event ID 5156) on source/destination IP/port. Filter for events where the 'Image' is 'C:\\Windows\\System32\\svchost.exe' and the associated service is 'W32Time'. Trigger an alert if 'proto' is not 'udp' OR 'id.resp_p' (destination port) is not 123 OR 'id.resp_h' (destination IP) is not in the allowlist of approved NTP servers.",
              "For each host, create a baseline of network traffic features for the W32Time service process, including bytes sent/received, connection duration, and destination country. Use a 30-day rolling window to calculate the mean and standard deviation for each feature. Alert if any new connection's metrics exceed 3 standard deviations from the mean (e.g., an unusually large data transfer, a connection to a rare country).",
              "Train an autoencoder neural network on feature vectors derived from legitimate W32Time network connections from Zeek conn.log (e.g., duration, orig_bytes, resp_bytes, protocol, destination port). Continuously feed new connection data associated with the W32Time service into the model. A high reconstruction error indicates the connection is anomalous and potentially malicious C2 traffic. Alert when the error surpasses a dynamically adjusted threshold."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by abusing Windows Time Providers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "A registry modification event sets a 'DllName' value for a Windows Time Provider to a file path located within a world-writable or non-standard system directory, such as 'C:\\Users\\', 'C:\\ProgramData\\', or 'C:\\Windows\\Temp\\'.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Workstations, Terminal Servers, Member Servers",
            "action": [
              "Create a detection rule that inspects registry write events (Windows Event ID 4657, Sysmon Event ID 13) where the target key path contains '\\W32Time\\TimeProviders\\' and the value name is 'DllName'. Use a regular expression to check if the new value data (the file path) matches patterns for user-writable locations like '^C:\\\\(Users|ProgramData|PerfLogs|Windows\\\\Temp)\\\\.*'. Alert on any match.",
              "Generate an enterprise-wide list of all unique parent directory paths for Time Provider DLLs. Calculate the frequency of each path. Any path that is not '%SystemRoot%\\System32' is inherently suspicious. Assign a risk score based on rarity; a path seen on only one machine receives a high score, while a path seen on 10% of machines (e.g., from a third-party tool) receives a lower score. Alert on scores exceeding a set threshold.",
              "Use a one-class SVM (Support Vector Machine) trained on the file paths of legitimate Time Provider DLLs from a golden image or a known-clean baseline of the environment. Feed all new Time Provider DLL paths observed in registry modification events into the model. The model will classify any path that deviates significantly from the learned 'normal' set as an outlier, triggering an alert."
            ]
          },
          {
            "description": "A successful registry write to a key or value under 'HKEY_LOCAL_MACHINE\\...\\W32Time\\TimeProviders\\' is performed by a user account that is not 'NT AUTHORITY\\SYSTEM' and is not a member of an authorized administrative group (e.g., Domain Admins, Enterprise Admins).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, All Windows Endpoints and Servers",
            "action": [
              "For each registry write event (Windows Event ID 4657 or Sysmon Event ID 13) to the '\\W32Time\\TimeProviders\\' path, check the 'SubjectUserName' or 'User' field. Maintain an explicit allowlist of authorized administrative accounts and service accounts (e.g., 'SYSTEM', SCCM service account). Trigger an alert if the acting user is not on this list.",
              "Profile the user accounts and process names that modify the Time Provider registry keys over a 90-day period. This set of legitimate modifiers should be very small and static. Create a frequency map of (user, process) tuples. Any tuple that has not been seen before or has a very low frequency (e.g., seen only once) is a statistical anomaly and should be alerted on.",
              "Train an Isolation Forest model on features from legitimate registry modification events, including 'UserName', 'ProcessName', and the day-of-week/hour-of-day of the event. This model learns to isolate anomalies efficiently. Feed all new registry write events to the Time Provider keys into the model. An event receiving a high anomaly score (indicating it's easily isolated from the normal cluster) should trigger an alert."
            ]
          },
          {
            "description": "A sequence of events is observed on a host within a short time window (e.g., 10 minutes): 1. A process with 'Low' or 'Medium' integrity level creates a DLL file. 2. A separate, high-privilege process modifies a Time Provider 'DllName' registry value to point to the newly created DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints with UAC enabled, Terminal Servers",
            "action": [
              "Using a SIEM, create a stateful rule that triggers on a file creation event (Sysmon Event ID 11) where the creating process's integrity level (from Sysmon Event ID 1) is 'Low' or 'Medium'. Store the 'TargetFilename'. Then, within 10 minutes on the same host, look for a registry set event (Sysmon Event ID 13) where the 'TargetObject' contains '\\W32Time\\TimeProviders\\' and the 'Details' (the DLL path) matches the stored 'TargetFilename'. Alert on this completed sequence.",
              "For every instance of a Time Provider DLL being registered, calculate the time difference between the DLL file creation timestamp and the registry modification timestamp. Legitimate system DLLs will have a large delta (days/months/years). A delta of less than 5 minutes is a strong statistical anomaly. Calculate the percentile distribution of these deltas across the environment; alert on any delta in the bottom 1st percentile.",
              "Construct an event graph where nodes are processes, files, and registry keys, and edges represent actions (e.g., 'created', 'wrote to'). Use a graph neural network (GNN) to learn patterns of normal system behavior. The specific subgraph pattern of 'Medium-Integrity Process -> creates -> File.dll' followed by 'High-Integrity Process -> writes_registry_value -> File.dll' can be defined as a malicious template. Scan the event graph for instances of this subgraph to detect the exploit chain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]