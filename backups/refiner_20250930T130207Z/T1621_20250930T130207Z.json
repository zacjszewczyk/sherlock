[
  {
    "information_requirement": "Is the adversary attempting to bypass multi-factor authentication to gain access?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1621",
        "name": "Multi-Factor Authentication Request Generation",
        "evidence": [
          {
            "description": "Login attempts or MFA requests originating from IP addresses on threat intelligence lists (e.g., known malicious infrastructure, botnets, TOR exit nodes, or anonymous proxies).",
            "data_sources": [
              "Windows Event ID 4625",
              "MFA/Authentication Service Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Continuously correlate source IP addresses from failed login logs (Windows Event ID 4625), MFA request logs, and associated network sessions (Zeek conn.log) against a high-confidence, frequently updated CTI feed of malicious IPs, botnets, TOR exit nodes, and proxies. Generate a high-priority alert for any match to enable rapid response."
          },
          {
            "description": "MFA requests initiated by clients with User-Agent strings or other HTTP headers characteristic of automated scripts or known MFA bombing tools rather than legitimate web browsers or approved enterprise applications.",
            "data_sources": [
              "MFA/Authentication Service Logs",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze User-Agent strings and other HTTP headers within MFA authentication logs or the associated traffic captured in Zeek http.log. Maintain and match requests against a list of User-Agents associated with non-standard clients (e.g., default Python 'requests', 'curl', 'Go-http-client') or specific malicious toolkits. Use frequency analysis to identify rare User-Agents initiating MFA requests and investigate their activity."
          },
          {
            "description": "An unusually high volume of MFA push notifications or other MFA challenges generated for a single user account within a short timeframe, indicating a potential MFA fatigue attack.",
            "data_sources": [
              "MFA/Authentication Service Logs",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor MFA/Authentication service logs for the frequency of MFA challenges per user account. Establish a dynamic baseline of normal request frequency for users/groups. Use statistical methods like Inter-Quartile Range (IQR) or calculating a moving average and standard deviation to flag users experiencing a burst of requests (e.g., >10 requests in 5 minutes) that significantly exceeds their normal behavior. Correlate high MFA request volumes with clusters of failed login attempts (Windows Event ID 4625) for the same user."
          },
          {
            "description": "A sequence of failed login attempts for an account, culminating in a successful login where the MFA challenge is approved significantly faster than the user's typical response time.",
            "data_sources": [
              "Windows Event ID 4625",
              "Windows Event ID 4624",
              "MFA/Authentication Service Logs"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Create a baseline of the average time-to-approval for each user's MFA responses. Correlate sequences of failed logins (Windows Event ID 4625) with a subsequent successful login (4624) and the corresponding MFA approval log. Flag instances where the time between the final MFA challenge and its approval is an outlier (e.g., in the bottom 5th percentile of the user's response times), especially when preceded by numerous failed attempts, suggesting the user hastily approved a malicious prompt."
          },
          {
            "description": "A successful MFA-approved login originating from a geographic location that is anomalous for the user or represents an impossible travel scenario when compared to their recent physical login locations or the MFA device's location.",
            "data_sources": [
              "Windows Event ID 4624",
              "MFA/Authentication Service Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "For every successful MFA-approved login (Windows Event ID 4624 + MFA logs), geolocate the source IP address (from the log or Zeek conn.log). Compare this location against the user's historical login locations and, if available, the location of the device that approved the MFA prompt. Use correlation analysis to flag logins from rare or new countries/cities for that user. Implement an 'impossible travel' rule that alerts when a user logs in from two geographically distant locations in a time-frame that would be physically impossible."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]