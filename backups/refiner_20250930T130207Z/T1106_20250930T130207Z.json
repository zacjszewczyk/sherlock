[
  {
    "information_requirement": "Is an adversary leveraging native OS APIs for malicious code execution, process injection, or defense evasion? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1106",
        "name": "Native API",
        "evidence": [
          {
            "description": "A process is created or a module is loaded whose file hash matches a known-malicious signature from threat intelligence feeds, specifically for malware families identified as using direct syscalls or native API abuse.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with EDR agents installed.",
            "action": "1. (Symbolic) Ingest process creation (Sysmon Event ID 1, Windows Event ID 4688) and module load (Sysmon Event ID 7) events. Continuously compare the file hashes (SHA256, MD5) of the process image and loaded modules against a threat intelligence database of known-malicious hashes. Generate a high-priority alert upon any match. 2. (Statistical) For processes with hashes not found in threat intelligence, calculate the prevalence of each hash across the enterprise over a 30-day rolling window. Flag any hash that is present on a small number of hosts (e.g., fewer than 3, or below the 5th percentile of prevalence) for further scrutiny, especially if the parent process is anomalous. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on features from process creation events (e.g., parent process name, user context, command-line argument length/entropy, image path characteristics). Use this model to score and predict the likelihood that a new, unknown process hash is malicious, prioritizing high-score events for analyst investigation."
          },
          {
            "description": "A legitimate system binary (LOLBAS), such as `rundll32.exe` or `regsvr32.exe`, is executed with command-line arguments indicative of malicious activity, such as loading a remote script, executing from a non-standard path, or calling an unusual export function.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, application servers, and domain controllers where common LOLBAS are present.",
            "action": "1. (Symbolic) Using process creation logs (Sysmon Event ID 1) with full command-line logging, apply regular expressions to detect known malicious patterns for LOLBAS like `rundll32.exe javascript:...`, `regsvr32 /s /i:http...`, or `powershell -enc`. Alert on any matches. 2. (Statistical) For each major LOLBAS, establish a baseline of normal command-line argument patterns. Calculate the length and character entropy of all command-line arguments. Flag executions where the entropy or length exceeds a dynamic threshold (e.g., 95th percentile or 3 standard deviations above the mean for that specific LOLBAS), which often indicates obfuscation. 3. (Machine Learning) For each LOLBAS, tokenize its command-line arguments and use a clustering algorithm (e.g., DBSCAN) to group them. Benign usage will form large, dense clusters. Identify and alert on executions that are classified as noise/outliers or form new, small clusters, as these represent novel or rare usage patterns."
          },
          {
            "description": "A process requests a handle to another process with high-risk access rights (e.g., PROCESS_VM_WRITE, PROCESS_CREATE_THREAD, PROCESS_ALL_ACCESS), where the source-to-target process pair is anomalous.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on high-value targets like domain controllers (for lsass.exe) and user workstations (for explorer.exe, chrome.exe).",
            "action": "1. (Symbolic) From Sysmon Event ID 10 data, create a rule to alert whenever a non-security, non-debugging process (e.g., `winword.exe`, `powershell.exe`) requests `PROCESS_ALL_ACCESS` (access mask `0x1F0FFF`) or a combination of write and execute permissions on a critical target process like `lsass.exe`, `csrss.exe`, or `explorer.exe`. 2. (Statistical) Build a frequency table of all (SourceImage, TargetImage, GrantedAccess) tuples from Sysmon Event ID 10 data over a 30-day period. Score each new event based on the inverse frequency of the tuple. Alert on events that exceed a rarity score threshold (e.g., top 1% rarest interactions), indicating an unusual process interaction. 3. (Machine Learning) Model process interactions as a directed graph where nodes are processes and edges are handle requests weighted by access rights. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE) to learn embeddings for normal process behavior. Identify and alert on interactions (edges) that are anomalous in the context of the learned graph structure."
          },
          {
            "description": "Creation of command-line interpreters or system utilities by anomalous parent processes, such as office productivity applications, browsers, or services that do not typically spawn shells.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (for Office/browser parents) and critical servers (for service parents).",
            "action": "1. (Symbolic) Maintain and apply a denylist of parent-child process relationships that are almost always malicious, such as `outlook.exe` spawning `cmd.exe`, `winword.exe` spawning `powershell.exe`, or `services.exe` spawning `rundll32.exe`. Generate a high-severity alert on any match. 2. (Statistical) Using historical process creation logs (Sysmon Event ID 1), build a probability distribution of all parent-child process pairs in the environment. Alert when a new process creation event corresponds to a pair that falls below a rarity threshold (e.g., observed less than 0.01% of the time). 3. (Machine Learning) Train a classifier (e.g., Isolation Forest) on features derived from parent-child pairs (e.g., parent path, parent user, child command-line entropy, child path location). Use the model to score each new process creation event; scores indicating high anomaly should be alerted on as potentially malicious behavior that evades simple rule-based detection."
          },
          {
            "description": "A newly created process, characterized by an anomalous image path (e.g., high entropy, non-standard directory), initiates network connections to rare external IPs or performs unusual file system modifications within a short time window of its creation.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 11",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, web-facing servers, and network egress points (for Zeek logs).",
            "action": "1. (Symbolic) Correlate process creation events (Sysmon 1) with network connection events (Sysmon 3, Zeek conn.log) by process ID within a 60-second window. If a process is created from a user-writable path (e.g., `C:\\Users\\*\\AppData\\Local\\Temp`) and subsequently connects to an IP on a threat intelligence blocklist, generate an alert. 2. (Statistical) For each new process, calculate the Shannon entropy of its image path. If the entropy exceeds a baseline threshold (e.g., 95th percentile), enrich its network connections with DNS query data (Zeek dns.log) and calculate the public suffix + 1 (e.g., 'example.com') prevalence. A high-entropy path process connecting to a domain seen for the first time or with very low prevalence is highly suspicious. 3. (Machine Learning) Use a time-series model to analyze the rate of network connections and file creation events per process. Train the model to recognize normal application behavior (e.g., software installation burst). Alert on patterns that deviate, such as the periodic, low-volume 'heartbeat' of C2 beaconing or the high-volume, rapid file modification pattern characteristic of ransomware."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]