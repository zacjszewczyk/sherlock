[
  {
    "information_requirement": "Has the adversary accessed or stolen credentials from macOS Keychains? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.001",
        "name": "Keychain",
        "evidence": [
          {
            "description": "A process, identified by its file hash, name, or path, matching known keychain enumeration malware or tools, is executed on a macOS host.",
            "data_sources": [
              "macOS Process Execution Logs",
              "Sysmon for macOS Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS Endpoints",
            "action": "1. (Symbolic) Continuously monitor process execution logs on macOS endpoints. In a SIEM, join process execution data with a threat intelligence feed of known malicious file hashes and paths for keychain theft tools (e.g., KeySteal, Chain-Reactor). Generate a high-severity alert for any match. 2. (Statistical) For processes not on a known-good allowlist, calculate the global prevalence of their file hash across the enterprise. Flag processes with a prevalence below a defined threshold (e.g., present on <1% of hosts) that also access keychain-related files for further review. 3. (ML) Deploy a supervised classification model (e.g., Gradient Boosting) trained on process metadata (e.g., file path, parent process, signature status, file entropy) to predict the likelihood of a process being malicious. Feed high-probability predictions into an alerting pipeline."
          },
          {
            "description": "The built-in 'security' command-line utility is executed with arguments indicating keychain dumping, such as 'dump-keychain', 'find-generic-password', or 'find-internet-password'.",
            "data_sources": [
              "macOS Process Execution Logs (with command-line arguments)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS Endpoints",
            "action": "1. (Symbolic) In a SIEM, create a rule that uses regular expressions to detect command-line execution of the 'security' utility with arguments containing 'dump-keychain', 'find-generic-password', or 'find-internet-password'. Alert if the parent process is not Terminal.app, a known administrative script, or a whitelisted application. 2. (Statistical) For each host, establish a baseline for the hourly frequency of these specific 'security' command executions. Alert if the count in a given hour exceeds a statistical threshold, such as 3 standard deviations above the mean or the 99th percentile of the baseline. 3. (ML) Implement a time-series anomaly detection model (e.g., ARIMA or Prophet) on the aggregate count of 'security dump-keychain' commands across the environment. An anomalous spike in the time-series forecast indicates a potential widespread campaign and should trigger an investigation."
          },
          {
            "description": "An unsigned, recently created, or otherwise anomalous application makes API calls to access keychain data (e.g., SecItemCopyMatching) or spawns a SecurityAgent prompt for the keychain password.",
            "data_sources": [
              "macOS API Monitoring Logs",
              "macOS Unified Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS Endpoints",
            "action": "1. (Symbolic) Create a detection rule that inventories all processes making keychain access API calls. Alert on any process that is unsigned, is running from a user-writable or temporary directory (e.g., /tmp, ~/Downloads), and is not on an established allowlist of legitimate keychain accessors (e.g., web browsers, mail clients). 2. (Statistical) For each application, profile its typical behavior. Calculate the rarity of keychain access for each application across the environment. An application that rarely accesses the keychain (e.g., a document editor) suddenly attempting access should be flagged as a statistical anomaly. 3. (ML) Train a classification model (e.g., Random Forest) using features of the accessing process, such as parent process, process name entropy, age on disk, and whether it has open network connections. Use the model to classify each keychain access attempt as 'benign' or 'suspicious', alerting on the latter."
          },
          {
            "description": "A successful network authentication (e.g., Kerberos, SMB, RDP) for a macOS-primary user account occurs from a source IP address, at a time, or from a geographic location that is inconsistent with the user's established baseline.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Network Egress Points, VPN Concentrators",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of known malicious or anonymizer (e.g., TOR exit node) IP addresses. Create a rule to alert on any successful authentication (Windows Event ID 4624, Logon Type 3 or 10) from an IP on this blocklist. 2. (Statistical) For each user, build a historical baseline of login features including source country, ISP, and time-of-day. Use a scoring system where deviations add to a risk score (e.g., rare country=+3, unusual ISP=+2, off-hours login=+1). A cumulative score exceeding a percentile-based threshold (e.g., 95th percentile of all user scores) indicates a high-risk login. 3. (ML) Use a clustering algorithm like DBSCAN on login event features (source ASN, target service, time of day) for each user. Logins that are marked as noise by the algorithm are anomalous outliers that do not fit into any of the user's normal behavior clusters and warrant investigation."
          },
          {
            "description": "A successful network logon by a macOS-primary user is immediately followed by the execution of lateral movement tools (e.g., psexec.exe, wmic.exe) or suspicious PowerShell commands on the target Windows host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "PowerShell Script Block Logging (Event ID 4104)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Servers, Windows Endpoints, Domain Controllers",
            "action": "1. (Symbolic) Create a SIEM correlation rule that triggers when a successful network logon (Windows Event ID 4624, Logon Type 3) from a macOS user's account is followed within 5 minutes on the same host by a process creation (Windows Event ID 4688) for 'psexec.exe', 'wmic.exe', or 'powershell.exe' with encoded commands. 2. (Statistical) For PowerShell commands executed after a network logon, calculate the character frequency and entropy of the script block (Event ID 4104). A command with an entropy score significantly higher than the baseline for administrative scripts is indicative of obfuscation and should be alerted on. 3. (ML) Train a sequence model (e.g., an LSTM or Hidden Markov Model) on process execution chains following successful logons. The model learns normal sequences (e.g., logon -> explorer.exe -> outlook.exe). Flag any logon session that results in a low-probability sequence, such as logon -> cmd.exe -> powershell.exe -> wmic.exe, as a likely lateral movement attempt."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]