[
  {
    "information_requirement": "Has an adversary altered or replaced a critical application binary or its in-memory process to impact data integrity? (PIR)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1565.003",
        "name": "Runtime Data Manipulation",
        "evidence": [
          {
            "description": "A file write event occurs in a critical application directory where the written file's hash matches a known malicious signature, or the writing process is not an authorized patching or installer utility.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "File Integrity Monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.",
            "action": "1. (Symbolic) Continuously monitor file creation/modification events (Windows Event ID 4663) in directories containing critical application binaries. Correlate with process creation data (Windows Event ID 4688). Generate a high-severity alert if a file's hash matches a threat intelligence feed of known malware OR if the writing process name is not on an allowlist of approved installers/updaters (e.g., 'msiexec.exe', 'patch_manager.exe'). 2. (Statistical) For each critical application binary, establish a baseline of its file hash and size. Monitor for any change. Calculate the frequency of modification events per host and per file path. Alert if the daily modification count for a specific binary exceeds the 99th percentile of its historical daily modification count, excluding scheduled maintenance windows. 3. (ML) Train a classification model (e.g., Random Forest) using features from the writing process (parent process, user context, command line) and the file itself (path, extension). Label events as 'benign' (occurring during maintenance by known patchers) or 'malicious'. Deploy the model to score new file write events targeting critical binaries in real-time, alerting on scores above a high-confidence threshold."
          },
          {
            "description": "A process is created on a critical system with a command line containing arguments known to be used for destructive data manipulation or disk wiping.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on database servers, domain controllers, and servers hosting financial or proprietary applications.",
            "action": "1. (Symbolic) On critical assets, monitor process creation events (Windows Event ID 4688) for command-line arguments. Apply a ruleset of regular expressions to detect known data-wiping tools (e.g., 'sdelete.exe -p'), malicious use of system utilities (e.g., 'format.com /q /x', 'cipher.exe /w:'), or patterns associated with ransomware execution. Generate an alert on any match. 2. (Statistical) For each host, calculate the Shannon entropy of command-line arguments for all executed processes over a rolling time window. Establish a baseline entropy score for the system. A sudden, sharp increase in command-line entropy can indicate obfuscated or randomized commands. Alert when entropy for a 5-minute window exceeds 3 standard deviations from the 24-hour rolling average. 3. (ML) Use a pre-trained NLP model (e.g., a transformer-based classifier) to classify command-line strings as benign, suspicious, or malicious. Fine-tune the model on an internal dataset of known-good and known-bad commands. Deploy the model to score all new process command lines on critical systems, alerting on 'malicious' classifications."
          },
          {
            "description": "A remote thread is created in a critical application's process space by a source process that is not a standard operating system or debugging utility.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 8"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe', custom financial software) on production servers.",
            "action": "1. (Symbolic) Monitor for process injection events (Sysmon Event ID 8). Create a rule that alerts when the TargetImage is a critical application (e.g., 'sap.exe', 'oracle.exe') and the SourceImage is not on an allowlist of legitimate system or debugging processes (e.g., 'lsass.exe', 'csrss.exe', 'procexp.exe'). 2. (Statistical) Build a graph of normal inter-process relationships based on remote thread creation events. For each critical target process, baseline the set of normal source processes. Use frequency analysis to identify rare source-target process pairs. Alert when a remote thread creation event occurs with a source-target pair that has not been seen in the last 90 days or has a frequency below a 0.1% threshold. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on features from remote thread creation events (source process path, target process path, user context). Identify clusters of normal behavior. Treat any event that does not fall into a known-good cluster as an anomaly and flag for investigation."
          },
          {
            "description": "A legitimate application process accesses an anomalously high number of files or an unusual variety of file types in a short period, inconsistent with its baseline behavior.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File shares containing sensitive data, local file systems on database servers, and document repositories accessed by critical applications.",
            "action": "1. (Symbolic) For critical processes, define a 'golden baseline' of file path patterns they are expected to access (e.g., 'C:\\App\\Data\\*.dat'). Monitor file access events (Windows Event ID 4656) and alert if a critical process accesses a file outside its defined path patterns. 2. (Statistical) For each critical process, profile its normal file access behavior over a 30-day period. Calculate the baseline mean and standard deviation for (a) number of unique files accessed per minute and (b) the Shannon entropy of file extensions accessed per minute. Alert if the process exceeds the mean by 3 standard deviations for either metric in a given time window. 3. (ML) Train a one-class SVM model on feature vectors representing normal file access behavior for a critical process (e.g., file count, directory depth, extension entropy, read/write ratio). Deploy the model to classify new access patterns in real-time. Any pattern classified as an 'outlier' by the model indicates anomalous behavior and should generate an alert."
          },
          {
            "description": "A critical data-processing application, which normally has limited or no network activity, initiates an outbound connection to an external IP address, especially a rare or known-malicious destination.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), network traffic from critical application server subnets, and host-based firewall logs on those servers.",
            "action": "1. (Symbolic) Correlate host-based process creation (Windows Event ID 4688) and network connection events (Windows Event ID 5156) with network logs (Zeek conn.log). Maintain an allowlist of expected destination IPs/domains for each critical application. Alert if a critical application connects to any destination not on its allowlist, or any destination present in a CTI feed. 2. (Statistical) For each critical application, baseline its network behavior, including destination ports, data volume (orig_bytes, resp_bytes in Zeek conn.log), and connection duration. Alert if an application's outbound data volume in a single connection exceeds the 99th percentile of its historical connections, or if it connects to a port it has never used before. 3. (ML) Use time-series forecasting (e.g., ARIMA) to predict the expected volume of outbound traffic for each critical application per hour. Compare the actual observed traffic volume against the predicted volume with its confidence interval. Generate an alert if the actual traffic significantly exceeds the upper bound of the confidence interval, suggesting unexpected data transfer."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]