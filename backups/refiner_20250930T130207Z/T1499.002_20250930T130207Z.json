[
  {
    "information_requirement": "Is the adversary attempting to cause denial of service by exhausting service resources?",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1499.002",
        "name": "Service Exhaustion Flood",
        "evidence": [
          {
            "description": "A high volume of connections to a single destination service (e.g., web server on port 443) where source IP addresses match a threat intelligence feed of known DoS botnets, open proxies, or TOR exit nodes.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web and application servers",
            "action": "First, ingest high-confidence threat intelligence feeds for DoS-for-hire services, botnets, and open proxies into a threat intelligence platform or SIEM. Continuously join the source IP (`id.orig_h`) from Zeek conn.log against this feed for connections to critical services (e.g., dest_port 80, 443) and generate an alert for any match (Symbolic Logic). Second, for each critical service, calculate the percentage of total inbound connections originating from IPs on the threat intelligence list over a 5-minute window and alert if this percentage exceeds a dynamic threshold, such as the 99th percentile of the daily historical distribution (Statistical Analysis). Third, develop a time series forecast model (e.g., ARIMA) for the volume of connections from known malicious IPs; an alert is triggered if the observed volume significantly deviates from the forecasted volume, indicating a coordinated attack rather than sporadic probes (Machine Learning)."
          },
          {
            "description": "Anomalous HTTP request patterns characterized by either extremely long connection durations with minimal data transfer (Slowloris-style) or a high frequency of requests to resource-intensive API endpoints from single or multiple sources.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "API gateways and public-facing web servers",
            "action": "First, create and apply signatures or regular expressions against Zeek http.log `uri` and `user_agent` fields to detect known DoS tools (e.g., GoldenEye, LOIC) and generate an alert on a match (Symbolic Logic). Second, for each URI in Zeek http.log, calculate the ratio of connection duration (from conn.log) to bytes transferred (`resp_body_len`). Establish a baseline for this ratio for each critical URI and alert if it exceeds the 95th percentile for a significant number of connections, indicating a potential slow-write attack (Statistical Analysis). Third, train a classification model (e.g., Random Forest) on features extracted from Zeek logs (request frequency, URI entropy, user-agent, duration, data volume) to distinguish between benign traffic and various application-layer DoS patterns. Apply the model in real-time to score incoming traffic and alert on high-probability DoS requests (Machine Learning)."
          },
          {
            "description": "A sustained increase in inbound traffic volume and new connection attempts per second that exceeds historical norms by a significant margin, coupled with a simultaneous, anomalous increase in the number of unique source IP addresses.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network border gateways, firewalls, and load balancers",
            "action": "First, define static 'tripwire' thresholds for critical services (e.g., greater than 10,000 connections per minute) based on known hardware/software limits and generate a high-priority alert if these hard limits are breached (Symbolic Logic). Second, for each critical service, baseline the number of unique source IPs (`id.orig_h`) per 1-minute interval from Zeek conn.log. Calculate the Shannon entropy of the source IP distribution within each interval; alert if both the unique IP count and the entropy score sharply increase above a dynamic threshold, such as the 98th percentile of historical values (Statistical Analysis). Third, implement a multivariate time series anomaly detection model (e.g., LSTM-autoencoder) on key metrics from Zeek conn.log: total bytes, packet count, and unique source IP count. Trigger an alert when the model's reconstruction error for live traffic exceeds a learned threshold, indicating a deviation from normal volumetric patterns (Machine Learning)."
          },
          {
            "description": "A high proportion of failed or incomplete TCP handshakes, indicated by an abnormal distribution of connection states (e.g., S1, REJ) in network logs, suggesting TCP SYN backlog exhaustion. For TLS/SSL services, this includes a high rate of failed handshakes or repeated renegotiation requests.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers handling TLS/SSL termination and stateful firewalls",
            "action": "First, create a rule that alerts if a single source IP (`id.orig_h` in Zeek conn.log) generates more than 100 connections in the `S0` (SYN sent, no SYN-ACK) or `REJ` state within 1 minute (Symbolic Logic). Second, calculate the ratio of successful connections (`SF` state) to total connection attempts for each monitored service in 1-minute windows. Establish a baseline for this success ratio and alert if it drops below 3 standard deviations of the mean. For TLS, analyze Zeek ssl.log and alert if the count of `ssl_renegotiation` events exceeds the 99th percentile of its baseline (Statistical Analysis). Third, use a change point detection algorithm (e.g., CUSUM) on the time series of connection state distributions (i.e., percentage of SF, S0, REJ states). Alert when the algorithm detects an abrupt and sustained shift in the distribution, such as a spike in `S0` or `REJ` states (Machine Learning)."
          },
          {
            "description": "Observable degradation in service quality, evidenced by increased application response times, a high rate of connection timeouts, or a significant increase in server-side error codes (e.g., HTTP 5xx) as recorded in network and host logs.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers and web server log directories",
            "action": "First, create a high-severity alert if the count of critical error events (e.g., Windows Event ID 15005 for http.sys queue full) exceeds a low threshold like 5 events in 1 minute (Symbolic Logic). Second, from Zeek http.log, calculate the 95th percentile of transaction time for critical applications over 5-minute intervals. Alert if the P95 latency increases by more than 100% over its baseline for a sustained period. Concurrently, monitor the rate of HTTP 5xx status codes and alert if this rate exceeds 3 standard deviations above its mean (Statistical Analysis). Third, develop a multivariate anomaly detection model that correlates performance metrics from different sources: network latency and error rates from Zeek, and CPU/memory utilization and error event frequency from host logs. The model learns the normal operating state and alerts when the combined metrics enter a 'degraded' state indicative of service exhaustion (Machine Learning)."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]