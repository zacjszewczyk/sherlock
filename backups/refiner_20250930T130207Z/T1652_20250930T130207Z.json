[
  {
    "information_requirement": "Is the adversary attempting to discover system information, specifically device drivers, as part of post-compromise reconnaissance?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1652",
        "name": "Device Driver Discovery",
        "evidence": [
          {
            "description": "A process creation event is recorded where the process's SHA256 hash is present in a threat intelligence feed of known malicious binaries specifically tagged for 'discovery' or 'driver enumeration'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Developer Workstations, Endpoint devices",
            "action": "1. (Symbolic) Continuously monitor Windows Event ID 4688 for process creation. For each new process, query its SHA256 hash against a threat intelligence feed. Trigger a high-priority alert if the hash is matched to a known malicious tool categorized for discovery. 2. (Statistical) Calculate the prevalence of each process hash across the environment. Prioritize alerts for hashes that are both on a threat intelligence list and have a low prevalence score (e.g., present on < 0.1% of endpoints), indicating a targeted, non-standard tool. 3. (Machine Learning) Use a supervised learning classifier (e.g., Random Forest) trained on features such as process name entropy, parent process legitimacy, command-line length/entropy, and whether the hash is in a threat feed. An alert is triggered if the model classifies a process creation event as 'malicious discovery' with a confidence score > 0.9."
          },
          {
            "description": "A process creation or PowerShell script block event contains a command line or script body that invokes a known system utility (`driverquery.exe`, `wmic.exe`, `powershell.exe`, `sc.exe`) with arguments used for driver or service enumeration (e.g., `driverquery /v`, `wmic driver get`, `Get-WmiObject Win32_SystemDriver`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, PowerShell Execution Environments, Network Egress Points",
            "action": "1. (Symbolic) Create SIEM rules to monitor Windows Event ID 4688 and 4104 for command-lines or script blocks containing keywords like `driverquery`, `wmic driver get`, `Get-WmiObject Win32_SystemDriver`, `Get-Service`, `sc query`. Alert if the parent process is non-standard (e.g., `winword.exe`, `outlook.exe`). 2. (Statistical) For each user, establish a baseline execution frequency of these discovery commands. Calculate the 95th percentile for command executions per user per hour. Alert when a user's execution count exceeds this threshold. Additionally, calculate the Shannon entropy $$ H(X) = - \\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$ of command-line arguments to detect obfuscation. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., ARIMA) on the aggregate count of driver discovery commands across the enterprise. An alert is triggered if a statistically significant anomaly is detected. Use clustering algorithms (e.g., DBSCAN) on command-line features to identify novel outlier activity."
          },
          {
            "description": "A process, not on an established allowlist of system or administrative tools, performs a high volume of read operations on the `HKLM\\SYSTEM\\CurrentControlSet\\Services` registry key within a short time frame.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Registry on all endpoints and servers, Domain Controllers, Tier 0 Assets",
            "action": "1. (Symbolic) Enable auditing for read access on `HKLM\\SYSTEM\\CurrentControlSet\\Services`. Create an allowlist of legitimate processes (e.g., `svchost.exe`, `services.exe`, approved admin tools) expected to access this key. Alert on any access from a process not on the allowlist. 2. (Statistical) For each process, baseline the rate of access to the `...\\Services` hive. Use a Z-score to detect anomalies, triggering an alert if a process's access rate exceeds 3 standard deviations from the norm ($$ z = (x - \\mu) / \\sigma > 3 $$). Also, alert if a single process enumerates a number of subkeys per minute that exceeds the 99th percentile of typical activity. 3. (Machine Learning) Use an unsupervised learning model, such as an Isolation Forest, to detect anomalous registry access events. Use features including the process name, parent process name, access mask, and access rate. The model will identify rare and isolated events that deviate from normal activity clusters."
          },
          {
            "description": "A driver discovery command is executed within 15 minutes following a successful remote logon (Logon Type 3 or 10) from an untrusted IP address, or following the assignment of special privileges to a process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication logs on Domain Controllers and member servers, Process execution logs on all endpoints, Network gateway and perimeter firewall logs",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a driver discovery command (from Evidence #2) is executed by a user session that originated from a remote logon (Windows Event ID 4624, Type 3 or 10) within the last 15 minutes. 2. (Statistical) Implement a risk scoring system. In a 30-minute window, assign points for precursor events: +10 for logon from a rare geolocation (correlating IP from Event ID 4624 with Zeek conn.log and GeoIP), +15 for an unusual parent process, +5 for execution outside business hours. A driver discovery event in the same window that causes the user's risk score to exceed 20 triggers a high-priority alert. 3. (Machine Learning) Use a sequence analysis model (e.g., Hidden Markov Model) to identify likely malicious event chains. Train the model on known attack sequences and benign workflows. Alert when an observed sequence (e.g., `Remote Logon -> Special Privilege Assignment -> Driver Discovery Command`) has a high probability of belonging to a malicious model."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]