[
  {
    "information_requirement": "Is the adversary executing commands or programs using launchctl?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1569.001",
        "name": "Launchctl",
        "evidence": [
          {
            "description": "A launchd plist file is created or modified with a hash matching a known malicious file, or it contains program arguments pointing to malicious IPs or domains.",
            "data_sources": [
              "macOS endpoint logs (file creation/modification",
              "file content)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Continuously monitor file system events for the creation or modification of '.plist' files in common LaunchAgent/Daemon directories. Upon detection, hash the file and inner join the hash against a CTI feed of known malicious files. Additionally, parse the plist content to extract strings from 'Program' or 'ProgramArguments' keys, and correlate any IPs or domains against CTI feeds. Alert on any confirmed match."
          },
          {
            "description": "Execution of `launchctl` with command-line arguments or using plist files with structures characteristic of known malware families or offensive security tools.",
            "data_sources": [
              "macOS endpoint logs (process execution",
              "file monitoring)"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process execution events for `launchctl`. Analyze the full command line for patterns associated with specific tools or malware (e.g., `launchctl load -w`, suspicious naming conventions for plists). When a plist is loaded, inspect its XML structure for common malicious patterns: using generic 'Label' names to blend in (e.g., 'com.apple.update.plist'), setting 'RunAtLoad' to true combined with a suspicious program path, or using obfuscated 'ProgramArguments'. Maintain and use a library of these known malicious patterns, potentially with YARA rules, and alert on matches."
          },
          {
            "description": "The `launchctl` command is used to load a plist file from a non-standard or world-writable directory, such as `/tmp`, `/var/tmp`, `/Users/Shared`, or a hidden directory.",
            "data_sources": [
              "macOS endpoint logs (process execution)"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process execution events for 'launchctl load'. Extract the file path argument for the plist being loaded. Flag any execution where the path is located outside of the standard `/System/Library/Launch*`, `/Library/Launch*`, and `~/Library/LaunchAgents` directories. Use frequency analysis to establish a baseline of common application installation paths and identify rare or unique loading locations as high-priority alerts. Use descriptive statistics to track the prevalence of non-standard path loading over time."
          },
          {
            "description": "An unusual parent process (e.g., a web browser, document editor, or a process running from /tmp) executes `launchctl` to load a new service.",
            "data_sources": [
              "macOS endpoint logs (process execution with parent/child relationships)"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor all `launchctl` executions and inspect their parent process lineage. Establish a baseline of legitimate parent processes for `launchctl` (e.g., Terminal.app, sshd, legitimate installer processes). Generate an alert when `launchctl` is spawned by an anomalous parent, such as a Microsoft Office application, a web browser process, or any script running from a temporary location. Use correlation analysis to link this event with other suspicious activities from the parent process, such as downloading a file or receiving a network connection."
          },
          {
            "description": "A short-lived execution sequence where a plist file is created, loaded via `launchctl`, triggers a new process or network connection, and then the original plist file is deleted.",
            "data_sources": [
              "macOS endpoint logs (file monitoring",
              "process execution)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate events across multiple data sources within a short time window (e.g., 2 minutes) to detect a specific behavioral sequence. Hunt for the pattern: 1. File creation of a '.plist' in any location. 2. Process execution of `launchctl load` targeting that plist. 3. A subsequent network connection from the process specified in the plist (via Zeek conn.log) OR process creation of the program specified in the plist. 4. File deletion of the original '.plist' file. This 'create, load, run, delete' behavior is a strong indicator of an adversary attempting to execute code while minimizing forensic artifacts. Use time series analysis to identify any increase in the frequency of such behavioral sequences."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]