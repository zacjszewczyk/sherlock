[
  {
    "information_requirement": "Is the adversary attempting to discover system services as part of reconnaissance?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1007",
        "name": "System Service Discovery",
        "evidence": [
          {
            "description": "Execution of service discovery commands (e.g., sc.exe, net.exe) with unusual parameter combinations or syntax rarely seen in legitimate administrative activity, such as querying the state of all services ('sc query state= all') or using specific output formatting flags often hardcoded in malware.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially Domain Controllers and Application Servers.",
            "action": "Symbolic: Create a detection rule that searches Windows Event ID 4688 process command lines for exact string matches of known malicious discovery commands or unusual parameter combinations, such as `sc query type= service state= all`, `net start`, or `tasklist /svc` followed by output redirection to a file in a temporary directory. Statistical: For each host, calculate the historical frequency of specific command-line arguments used with `sc.exe`, `net.exe`, and `tasklist.exe`. Alert when a command is executed with arguments that fall outside the 99th percentile of historical usage for that host or its peer group (e.g., all developer workstations). Machine Learning: Train a logistic regression classifier on labeled command-line executions (benign vs. malicious). Use features like command length, number of arguments, presence of special characters, and entropy of the command string. Deploy the model to score new `sc.exe`, `net.exe`, and `tasklist.exe` executions in real-time."
          },
          {
            "description": "A service discovery utility (sc.exe, tasklist.exe, net.exe) is spawned by a parent process not typically associated with interactive or administrative activity, such as an Office application (winword.exe), a web server process (w3wp.exe), or a non-system-level script interpreter.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, and Application Servers.",
            "action": "Symbolic: Build a lookup table of legitimate parent-child process relationships for `sc.exe`, `tasklist.exe`, and `net.exe` (e.g., explorer.exe -> cmd.exe -> sc.exe). Create a rule to alert on any execution of these utilities where the parent process is not in the allowlist, specifically flagging parents like `winword.exe`, `excel.exe`, `outlook.exe`, and `w3wp.exe`. Statistical: For each parent process name, calculate the historical probability of it spawning `sc.exe`, `tasklist.exe`, or `net.exe`. Alert when a spawning event occurs with a probability below a set threshold, such as $$ P(\\text{child} | \\text{parent}) < 0.001 $$, to identify statistically rare parent-child relationships. Machine Learning: Use a graph-based anomaly detection model on process lineage data. Represent hosts, users, and processes as nodes and process creation events as edges. Identify anomalous edges (parent-child relationships) that deviate significantly from the learned graph structure of normal activity for the environment."
          },
          {
            "description": "Execution of PowerShell script blocks or WMI queries designed to enumerate system services, particularly when combined with obfuscation techniques (e.g., Base64, string concatenation) or chained with other commands within the same script block.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 5861"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers with PowerShell v5+ logging enabled.",
            "action": "Symbolic: Scan Windows Event ID 4104 (PowerShell Script Block Logging) for content containing keywords like `Get-Service`, `Get-WmiObject Win32_Service`, `Get-CimInstance Win32_Service`. Enhance the rule to also look for indicators of obfuscation like `FromBase64String`, `IEX`, or character replacement/concatenation around these keywords. Statistical: Calculate the Shannon entropy of PowerShell script blocks. Establish a baseline entropy score for legitimate administrative scripts. Alert on script blocks containing service discovery keywords that also have an entropy score above the 95th percentile, indicating probable obfuscation or packing. Machine Learning: Train a text classification model (e.g., using a TF-IDF vectorizer with a Naive Bayes or SVM classifier) on a corpus of benign and malicious PowerShell scripts. Use the model to classify new script blocks containing service discovery cmdlets as benign or malicious based on the overall script structure, function calls, and variable names."
          },
          {
            "description": "A statistically significant increase in the volume or variety of service discovery command executions (sc.exe, net.exe, Get-Service, etc.) from a single user or host over a short time window, exceeding established baselines for that entity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security Information and Event Management (SIEM) system or data lake containing aggregated endpoint logs.",
            "action": "Symbolic: Create a threshold rule that alerts if a single host executes more than 5 distinct types of service discovery commands (`sc query`, `tasklist /svc`, `net start`, `Get-Service`) within a 10-minute window. Statistical: For each host, aggregate service discovery events into 5-minute time bins. Calculate a baseline mean ($$ \\mu $$) and standard deviation ($$ \\sigma $$) of command counts per bin. Generate an alert when the count in a new time bin exceeds a dynamic threshold, such as $$ \\mu + 3\\sigma $$, indicating a statistically significant spike in activity. Machine Learning: Apply a time-series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD or Prophet) to the stream of service discovery events per host. The model will learn the normal rhythm (seasonality, trends) of administrative activity and automatically flag unusual bursts or deviations from this learned pattern without requiring fixed thresholds."
          },
          {
            "description": "The execution of a service discovery command is temporally and contextually linked to other ATT&CK techniques on the same host, such as network share discovery (T1135) or remote system discovery (T1018), within a defined time window (e.g., 60 minutes).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregation platform (SIEM/Data Lake) capable of correlating endpoint and network data.",
            "action": "Symbolic: Define a sequence-based rule: IF event A (T1007, e.g., `sc query`) is observed on Host X, AND THEN event B (e.g., T1018, `net view`) or event C (e.g., T1021.002, outbound SMB connection to a new host in `Zeek conn.log`) occurs from Host X within 30 minutes, THEN generate a high-severity alert. Statistical: For each host, create a transition matrix representing the probability of one ATT&CK technique following another within a session. For example, calculate $$ P(T_{t+1} | T_t) $$ where T is a technique. Alert when a sequence of techniques is observed that has a very low joint probability based on historical data. Machine Learning: Use a Hidden Markov Model (HMM) where the hidden states represent attacker intent (e.g., 'Discovery', 'Lateral Movement') and the observations are the ATT&CK techniques detected. An alert is triggered when the model transitions into a high-risk state sequence (e.g., a path leading from 'Discovery' to 'Execution') with high probability."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]