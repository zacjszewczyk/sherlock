[
  {
    "information_requirement": "Is the adversary subverting trust controls for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1553.003",
        "name": "SIP and Trust Provider Hijacking",
        "evidence": [
          {
            "description": "Detection of known malicious files by hash used for SIP or Trust Provider hijacking, or registry values pointing to known malicious DLLs.",
            "data_sources": [
              "Windows Event ID 4657",
              "Zeek files.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Continuously scan registry modification events (Event ID 4657) and file creation events (from Zeek files.log or EDR) for file hashes or full DLL paths that match a high-confidence cyber threat intelligence feed of known SIP hijacking tools. An inner join between observed hashes/paths and the CTI feed should trigger an immediate alert. Correlate findings with network logs to trace the origin of the malicious file."
          },
          {
            "description": "Modification of critical SIP or Trust Provider registry keys, or execution of processes (e.g., reg.exe, regsvr32.exe) with command lines targeting these specific registry paths.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Create a high-fidelity monitoring rule for any modification (Event ID 4657) to registry values under `HKLM\\SOFTWARE\\Microsoft\\Cryptography\\OID\\Encoding Type 0\\CryptSIP\\` or `HKLM\\SOFTWARE\\Microsoft\\Cryptography\\Providers\\Trust\\`. Additionally, monitor process creation (Event ID 4688) for command lines containing these paths (e.g., using `reg.exe add` or `regsvr32.exe`). Use descriptive statistics to find rare parent-child process relationships for processes modifying these keys, as modifications by non-system processes are highly anomalous."
          },
          {
            "description": "An unexpected or rare process, such as a non-system or non-security tool, modifies SIP/Trust Provider registry keys.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate registry modification events (Event ID 4657) targeting SIP/Trust Provider keys with the parent process information (from Event ID 4688 or enriched 4657 logs). Establish a baseline of legitimate processes that modify these keys (e.g., `TrustedInstaller.exe`, system update processes). Flag any modifications made by unexpected processes such as `powershell.exe`, `cmd.exe`, `wscript.exe`, or any executable running from a user profile or temporary directory. Use frequency analysis (low-frequency count) to identify rare processes making these changes across the enterprise."
          },
          {
            "description": "A behavioral sequence where a new DLL is created, a SIP/Trust provider registry key is modified to point to it, and a signed binary is then executed successfully, indicating a successful hijack.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 11"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Define and hunt for a specific behavioral chain: 1) A process (e.g., `powershell.exe`, `wscript.exe`) writes a new DLL to a temporary or user-writable path (detected via file monitoring or process creation of the DLL). 2) Within minutes, a registry modification (Event ID 4657) occurs in a SIP/Trust Provider key, with the new value pointing to the recently written DLL. 3) A signed application is subsequently executed, and a successful validation event (CAPI2 Event ID 11) is logged, indicating the hijacked provider was likely used. Correlate these events by hostname and time proximity (e.g., within 5 minutes) to detect the full attack chain."
          },
          {
            "description": "A file with a valid signature is executed from a non-standard location (e.g., temp folder, user profile) and subsequently initiates suspicious network activity, suggesting its validation may have been subverted.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate successful code signing validation events (CAPI2 Event ID 11) with process execution (Event ID 4688). Establish a baseline of normal file paths and signers for executed code. Flag executions of binaries that are successfully validated but are located in unusual directories (e.g., `%APPDATA%`, `%TEMP%`, Downloads) or signed by a rare or new publisher. Use correlation analysis to link these flagged executions to subsequent outbound network connections (Zeek conn.log) within a short time window. Apply linear regression to detect if the rate of these anomalous validation events is increasing over time, which may indicate a widespread campaign."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]