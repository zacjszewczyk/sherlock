[
  {
    "information_requirement": "Is the adversary executing code via Python?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.006",
        "name": "Python",
        "evidence": [
          {
            "description": "Execution of Python scripts with known malicious file hashes or network connections by python.exe to known C2 infrastructure.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 for process creation events involving python.exe and executing .py files. Extract file hashes (if available via audit policy) and correlate them against a threat intelligence database of known malicious script hashes. Concurrently, analyze Zeek conn.log for all connections originating from hosts running python.exe and inner join destination IPs/domains with a CTI feed of known malicious C2 servers. Alert on any matches from either correlation."
          },
          {
            "description": "Execution of Python using command-line patterns commonly associated with malicious one-liners, reverse shells, or known offensive security tools.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Use regular expression matching on the command-line field of Windows Event ID 4688 for python.exe processes. Search for high-confidence malicious patterns such as 'python -c import socket,subprocess,os;...', 'pty.spawn(\"/bin/bash\")', 'base64.b64decode', or specific argument structures used by known offensive Python tools (e.g., Impacket, PowerLurk). Maintain and update a list of these malicious patterns. Investigate all matches as high-fidelity indicators of malicious execution."
          },
          {
            "description": "Execution of python.exe from atypical file paths (e.g., temp directories), by unusual parent processes, or with command-line arguments exhibiting high entropy or signs of obfuscation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish a baseline of legitimate python.exe execution paths (e.g., C:\\Python*, /usr/bin/) and parent processes (e.g., IDEs, cmd.exe, explorer.exe). Monitor Windows Event ID 4688 for python.exe executions from unusual locations like %TEMP%, %APPDATA%, C:\\Users\\Public, or being spawned by anomalous parents like winword.exe or a web server process. Calculate the Shannon entropy of the command-line string; a high entropy score can indicate packed or encoded commands common in malicious scripts. Use frequency analysis and IQR to identify outliers in execution paths and parent processes."
          },
          {
            "description": "A Python process (python.exe) spawning suspicious child processes, such as living-off-the-land binaries (LOLBins), for discovery, lateral movement, or execution.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 for parent-child process relationships where python.exe is the parent. Build a baseline of expected child processes for your environment. Flag any instances where python.exe spawns suspicious child processes such as 'cmd.exe', 'powershell.exe', 'rundll32.exe', 'wmic.exe', 'schtasks.exe', 'bitsadmin.exe', or any unrecognized binary. Use correlation analysis to link the child process activity (e.g., network connections, file modifications) back to the parent Python script."
          },
          {
            "description": "Anomalous network connections made by a python.exe process that deviate from established baselines in terms of destination, data volume, or periodicity, suggesting C2 communication or data exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "Network devices",
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Baseline normal network activity for python.exe processes, including typical destinations (e.g., pypi.org, internal repositories), ports, and data transfer volumes. Monitor Zeek conn.log and Windows Event ID 5156 (filtered for Application 'python.exe') for deviations. Use time series analysis on connection logs to detect periodic, low-volume 'heartbeat' connections indicative of C2 beaconing. Use descriptive statistics (mean, standard deviation, percentiles) on connection duration and data volume (orig_bytes, resp_bytes in Zeek) to flag sessions that are statistical outliers."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]