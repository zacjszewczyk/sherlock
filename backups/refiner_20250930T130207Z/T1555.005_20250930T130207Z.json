[
  {
    "information_requirement": "Is the adversary accessing credentials stored in password managers?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1555.005",
        "name": "Password Managers",
        "evidence": [
          {
            "description": "A process executes with a file hash matching a known credential theft tool that targets password managers (e.g., KeeThief, LaZagne), or a process makes a network connection to a destination IP/domain flagged as malicious for exfiltration by threat intelligence.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User and administrator workstations, network egress points",
            "action": "1. (Symbolic) Continuously match the SHA256 hash from process creation events (Windows Event ID 4688) against a threat intelligence feed of known password-stealing malware. Simultaneously, check all destination IPs and server names in network connection logs (Zeek conn.log) against a high-confidence blocklist of C2 and exfiltration domains. 2. (Statistical) For each new executable hash, calculate its prevalence across the enterprise. Flag any hash that is present on fewer than 1% of endpoints and is not signed by a trusted publisher. For network connections, calculate the Shannon entropy of the server name in Zeek conn.log; alert on values exceeding a threshold (e.g., > 3.5), which may indicate DGA activity. 3. (Machine Learning) Train a logistic regression classifier on enriched process event data (e.g., parent process, command-line length, signature status) to predict the probability of a process being malicious. Use a time-series anomaly detection model (e.g., ARIMA) on outbound data volume per host (from Zeek conn.log) to flag sudden spikes inconsistent with forecasted baselines."
          },
          {
            "description": "A process is created (e.g., procdump.exe, comsvcs.dll) where the command-line arguments explicitly reference the process name or process ID of a running password manager application (e.g., KeePass.exe, 1Password.exe, bitwarden.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User and administrator workstations",
            "action": "1. (Symbolic) Deploy a detection rule that monitors process creation events (Windows Event ID 4688) and uses regular expressions on the command line to find known memory dumping utilities (e.g., procdump.exe, rcsass.exe) followed by the process name of a common password manager. 2. (Statistical) For all command-line invocations, tokenize the arguments and establish a baseline of normal argument patterns for legitimate administrative tools. Calculate the Jaccard similarity between a new command's token set and the historical baseline for that executable; a similarity score below a set threshold (e.g., 0.2) indicates a highly unusual command. 3. (Machine Learning) Use a pre-trained NLP model (e.g., a transformer-based classifier) on the raw command-line string to classify its intent as benign, suspicious, or malicious based on learned patterns of obfuscation, targeting, and execution flags. Cluster command-line strings using DBSCAN to identify outlier commands that do not belong to known benign clusters."
          },
          {
            "description": "A process, other than the signed executable of the password manager itself or an approved backup utility, initiates a read or handle request for a file with a known password manager database extension (e.g., .kdbx, .agilekeychain) or common name.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, file servers, or shared drives where password databases are stored",
            "action": "1. (Symbolic) Enable object access auditing and monitor for Windows Event ID 4663 on file paths and extensions associated with password managers (*.kdbx, *.1pif, %APPDATA%\\Bitwarden\\data.json). Create a rule that alerts when the 'Process Name' field is not on an explicit allowlist of legitimate password manager executables (e.g., KeePass.exe, 1Password.exe). 2. (Statistical) Profile the set of processes that normally access these sensitive files. Alert on any access attempt by a process with a historical access frequency in the lowest percentile (e.g., <1%) across the enterprise. Monitor the rate of access events per minute from a single host; a burst of access attempts (>10 events in 1 minute) can indicate a discovery script. 3. (Machine Learning) Develop an Isolation Forest model to detect anomalies in file access events. Use features such as the accessing process name, parent process name, user context, and time of day to train the model on normal access patterns. The model will then score and flag new access events that are outliers."
          },
          {
            "description": "A process relationship is observed where a non-standard parent process (e.g., winword.exe, cmd.exe) spawns a password manager application, or a suspicious process (e.g., powershell.exe) is spawned as a child of a password manager.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations and servers with password managers installed",
            "action": "1. (Symbolic) Create explicit detection rules that flag high-risk parent-child process relationships involving password managers, such as a Microsoft Office application spawning a password manager, or a password manager spawning a command shell (cmd.exe, powershell.exe). 2. (Statistical) Using historical Windows Event ID 4688 data, build a probability distribution of all parent-child process pairs. Alert on any process relationship involving a password manager that is statistically rare (e.g., has occurred fewer than 5 times in the last 90 days across the enterprise). 3. (Machine Learning) Model process ancestry as a directed graph. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE) to identify anomalous edges (parent-child links) or subgraphs. This can identify when a password manager process appears in an unexpected context or has an unusual descendant process tree, even if the direct parent-child link is not explicitly forbidden."
          },
          {
            "description": "A process that has recently read a password manager database file (within a 5-minute window) initiates an outbound network connection to a destination not associated with the password manager's known cloud sync servers, or transfers a volume of data significantly larger than typical sync operations.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, network egress points, file servers",
            "action": "1. (Symbolic) Correlate Windows Event ID 4663 (file access to *.kdbx, etc.) with network connection events (Windows Event ID 5156 or Zeek conn.log) from the same process/host within a 5-minute window. Alert if the destination IP/domain is not on an allowlist of known password manager sync servers. 2. (Statistical) For each password manager process, establish a baseline of outbound data volume (`orig_bytes` in Zeek conn.log). Alert when a connection's data volume exceeds the 95th percentile for that process. Additionally, track the ratio of outbound to inbound bytes; a ratio significantly greater than the historical norm (e.g., > 3 standard deviations) for a sync process is suspicious. 3. (Machine Learning) Train a one-class SVM on features of legitimate password manager network connections (e.g., destination port, destination ASN, data volume, protocol). Use this model to score new connections and flag those identified as outliers. Use a time-series model (e.g., Prophet) to forecast the expected daily outbound data volume per host; flag any day where the actual volume significantly exceeds the forecasted upper confidence bound."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]