[
  {
    "information_requirement": "Has newly developed or uniquely modified malware been executed on the network?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution (Detecting the use of malware developed via T1587.001)",
    "indicators": [
      {
        "technique_id": "T1587.001",
        "name": "Malware",
        "evidence": [
          {
            "description": "An executable file is observed executing that meets one or more of the following criteria: a) its hash has zero detections on threat intelligence platforms, b) its hash was first submitted to threat intelligence platforms within the last 72 hours, or c) it is unsigned or signed by a publisher not on an established allowlist.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly user workstations and public-facing servers.",
            "action": "For each new process execution (Windows Event ID 4688), perform three checks. First (symbolic), query the file hash against a threat intelligence feed and alert if it matches a known malicious indicator. Second (statistical), aggregate all publisher names over a 30-day window, calculate their frequency, and flag any process signed by a publisher in the bottom 5th percentile of rarity. Third (machine learning), feed process features (e.g., entropy, signature status, publisher rarity score, threat intelligence reputation) into a pre-trained classification model (e.g., Random Forest) to score the execution as 'benign', 'suspicious', or 'malicious', alerting on the latter two."
          },
          {
            "description": "A high-entropy (>7.5) or unsigned executable process is created (Windows Event ID 4688), and within a 5-minute window, the same host and user context creates a persistence mechanism, such as a scheduled task (Windows Event ID 4698), new service (Windows Event ID 4697), or registry modification to a Run key (Sysmon Event ID 13).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697",
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, critical application servers, and administrator workstations where persistence would have the highest impact.",
            "action": "Implement a multi-faceted detection strategy for malicious installation sequences. First (symbolic), create a correlation rule that triggers when a process from a watchlist (e.g., unsigned, low reputation) is created (4688) and is followed within 5 minutes by a service creation (4697) or scheduled task creation (4698) on the same host. Second (statistical), baseline the rate of persistence events per user and alert when this rate exceeds 2 standard deviations above their norm, especially after a rare process execution. Third (machine learning), use a sequence analysis model (e.g., LSTM) trained on event logs to score event sequences, alerting on sequences that match a learned malicious pattern like [Process Execution (High Entropy) -> Registry Run Key Modification -> Network Beacon]."
          },
          {
            "description": "An unsigned or reputation-negative process (Windows Event ID 4688) initiates external network connections (Zeek conn.log) and is followed by local reconnaissance command executions (e.g., whoami, net user, ipconfig) from the same process context.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways, egress filtering points, and high-value user endpoints (e.g., developers, executives).",
            "action": "Correlate host and network events to detect post-compromise activity. First (symbolic), alert when a process with a known-bad hash (from TI feed) executes and is followed within 10 minutes by executions of 'whoami.exe' or 'net.exe' on the same host. Second (statistical), calculate the entropy of command-line arguments for all processes; alert when a process with high-entropy arguments (indicating obfuscation) also initiates an external network connection. Third (machine learning), use a time-series anomaly detection model on the frequency of command-line executions per host. Generate an alert when the model detects a spike in anomalous command activity that is temporally correlated with the start of a network connection to a newly registered domain (NRD)."
          },
          {
            "description": "A process establishing command and control (C2) communications using non-standard protocols, unusual ports, or by tunneling C2 traffic over common protocols like DNS.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "DNS resolvers, network egress points, and proxy server logs.",
            "action": "Analyze network data for C2 patterns. First (symbolic), create a rule to alert on any DNS query for a TXT record where the domain matches a known C2 domain from a threat intelligence feed. Second (statistical), analyze Zeek dns.log to calculate the entropy of subdomain labels for each parent domain and alert when entropy exceeds the 98th percentile, indicating potential DNS tunneling. Third (machine learning), train a time-series forecasting model (e.g., ARIMA) on connection frequency and data volume per host (from Zeek conn.log) to predict normal beaconing behavior. Alert when observed traffic deviates significantly from the forecast, indicating a potential structured C2 channel."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]