[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying service binaries?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A service binary is modified, and its new hash matches a known malicious file from a threat intelligence database.",
            "data_sources": [
              "Windows Event ID 4663",
              "File Integrity Monitoring (FIM) logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Upon detecting a write access event (Windows Event ID 4663) or a file modification alert from FIM on a known service executable path, automatically calculate the new file hash. Correlate this hash by inner joining it with a CTI database of known malicious file hashes (updated daily). An immediate, high-priority alert should be generated on any match."
          },
          {
            "description": "A service binary is modified by a process whose name, path, or signature matches known malicious droppers or installers.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate file write events (Windows Event ID 4663) on service binaries with the parent process that performed the write (identified via event data or process creation logs like Windows Event ID 4688). Compare the name, path, and digital signature of the writing process against a maintained list of patterns associated with known malware droppers or hacking tools that employ service hijacking for persistence."
          },
          {
            "description": "A sequence of events is observed: anomalous permission changes on a service file, modification of the file outside a maintenance window, and a subsequent service restart.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4663",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Create a composite alert by correlating events in a specific sequence within a short time window (e.g., 10 minutes): 1. A permission change granting write access on a service file/directory (Event ID 4670) by a non-standard account. 2. A file write event to that service binary (Event ID 4663). 3. The same service entering a 'running' state (Event ID 7036). Use correlation analysis to link these events by file path and service name. This sequence is a strong behavioral indicator of hijacking for persistence."
          },
          {
            "description": "A service binary is modified by an unauthorized user or process, or outside of an established patch management window.",
            "data_sources": [
              "Windows Event ID 4663",
              "FIM logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Baseline normal modification activity for service executables, correlating it with patch management schedules and authorized installer processes. Monitor for file modifications (Windows Event ID 4663, FIM) to service binaries. Use time series analysis on modification events for specific paths to detect activity at anomalous times. Flag any modifications performed by user accounts or processes not on an established allowlist for software installation/updates."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges by modifying service binaries?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A service binary running as SYSTEM is replaced with a file whose hash matches a known privilege escalation tool.",
            "data_sources": [
              "Windows Event ID 4663",
              "FIM logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify all services configured to run with high privileges (e.g., NT AUTHORITY\\SYSTEM). Monitor their associated binary paths for modification (via FIM or Windows Event ID 4663). Upon modification, compute the file's hash and check it against a CTI database, specifically flagging matches to known privilege escalation tools or implants (e.g., variants of Cobalt Strike beacons, Metasploit payloads)."
          },
          {
            "description": "A high-privilege service process spawns a child process with command-line arguments indicative of creating a new administrative user or altering security groups.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor service start events (Windows Event ID 7036). Correlate these with subsequent child process creations (Windows Event ID 4688) originating from that service process. Scan command-line arguments for patterns matching user creation (`net user /add`), group modification (`net localgroup administrators /add`), or other suspicious commands not typical for the parent service. Use regular expressions to find these patterns and alert on any matches."
          },
          {
            "description": "A user account with standard privileges successfully modifies permissions on a high-privilege service binary and subsequently writes to the file.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify services running as SYSTEM and monitor their binary file paths and parent directories for permission changes (Windows Event ID 4670). Alert when permissions are modified by a user or process not running as SYSTEM or a member of Administrators. Correlate this permission change event with a subsequent file write event (Windows Event ID 4663) to the same path by the same low-privilege subject. This sequence is a strong behavioral indicator of a privilege escalation attempt."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by modifying service binaries?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A trusted, signed service binary (e.g., security agent, Microsoft binary) is modified, and the new file's digital signature is invalid, missing, or from an untrusted publisher.",
            "data_sources": [
              "Windows Event ID 4663",
              "FIM logs"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a list of critical, trusted service binaries (e.g., EDR agents, AV services, core Windows services). Upon a file modification event (Windows Event ID 4663, FIM alert) for any binary on this list, trigger an automated check of the file's digital signature. Alert immediately if the signature is missing, invalid, or issued by an untrusted publisher, especially when the original was known to be validly signed."
          },
          {
            "description": "A legitimate service process initiates network connections using protocols or to destinations that are uncharacteristic for that service but match known C2 patterns.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Baseline the normal network behavior of trusted service processes (e.g., svchost.exe, EDR agents). Monitor for anomalous network activity from these processes using Zeek logs correlated with endpoint process data. Flag connections to low-reputation IPs, communication over non-standard ports, or traffic matching C2 patterns (e.g., unusual user-agents in Zeek http.log, JA3/SNI hashes associated with C2 frameworks in Zeek ssl.log). Use correlation analysis to link the process start time with the anomalous network flow."
          },
          {
            "description": "A typically benign service process spawns unexpected child processes, particularly command shells, scripting engines, or known Living-off-the-Land Binaries (LoLBins).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "For each critical service process, build a baseline of its legitimate and expected child processes. Monitor process creation events (Windows Event ID 4688) and alert when a monitored service process spawns a child process not on its allowlist. Pay special attention to the spawning of `cmd.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`, or known LoLBins (`bitsadmin.exe`, `certutil.exe`, etc.). Use entropy measures on command-line arguments to detect obfuscation and flag high-entropy commands from service parents."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]