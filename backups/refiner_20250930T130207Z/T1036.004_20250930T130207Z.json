[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by masquerading tasks or services?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1036.004",
        "name": "Masquerade Task or Service",
        "evidence": [
          {
            "description": "Creation of a scheduled task or service where the associated executable file hash matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event IDs 4698 (Task Created) and 7045 (Service Installed) to identify new persistence mechanisms. Extract the executable path from the event. Correlate with the process creation event (Windows Event ID 4688) to obtain the file hash. Continuously compare the file hash against a high-confidence threat intelligence feed of known malicious file hashes. Generate a high-priority alert for any match."
          },
          {
            "description": "Creation of a scheduled task or service with a name that is a common typosquat or misspelling of a legitimate system task/service, or that follows a known malicious naming convention.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event IDs 4698 and 7045 for newly created tasks and services. Compare new names against a curated baseline list of legitimate, common Windows task/service names. Use string similarity algorithms (e.g., Levenshtein distance) to flag names that are very close but not identical to legitimate names (e.g., 'Windos Update' vs 'Windows Update'). Apply regular expression matching to detect known malicious naming patterns (e.g., randomly generated alphanumeric names of a specific length, names used by known malware families)."
          },
          {
            "description": "A scheduled task or service is created with an executable located in an unusual file path not typically associated with legitimate system or application software.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event IDs 4698 and 7045. For each new task/service, extract the executable file path. Compare the path against an established baseline of common, legitimate software locations (e.g., 'C:\\Windows\\System32', 'C:\\Program Files\\'). Flag and investigate executables running from user-writable directories (e.g., 'C:\\Users\\*', '%APPDATA%', '%TEMP%'), recycle bin, or other non-standard paths. Use frequency analysis on the parent directories of all service executables across the enterprise to identify rare and potentially suspicious locations."
          },
          {
            "description": "Execution of a historically rare or anomalous child process from a parent process associated with scheduled tasks or services (e.g., svchost.exe, taskhost.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 (Process Creation). Filter for events where the parent process is a known task/service host (e.g., svchost.exe, taskhost.exe, taskeng.exe, services.exe). For each parent-child process pair, establish a baseline of normal child processes and their command-line arguments. Use descriptive statistics and frequency analysis to identify child processes or arguments that are rare across the environment or have never been seen for that parent process. Use entropy measures on command-line strings to detect high-entropy arguments that may indicate randomization or encoding."
          },
          {
            "description": "A process originating from a scheduled task or service initiates a network connection to an external destination that deviates from the host's or service's established baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate process creation events (Windows Event ID 4688) originating from tasks/services with network connection logs (Zeek conn.log) based on source IP and timestamp. For each host, establish a baseline of normal external destinations and ports for its legitimate services. Use correlation analysis to link new task/service processes to subsequent network connections. Flag connections to low-reputation IPs, rare destination countries, non-standard ports, or any destination that deviates from the established baseline for that host/service. Use time series analysis on connection volume per service to detect unusual data transfer patterns."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]