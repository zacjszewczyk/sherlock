[
  {
    "information_requirement": "Is the adversary executing commands or code by deploying containers?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1610",
        "name": "Deploy Container",
        "evidence": [
          {
            "description": "Deployment of a container image whose name or tag matches known malicious indicators from cyber threat intelligence.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "From Windows Event ID 4688 process creation logs, parse command lines for container management tools (e.g., `docker`, `kubectl`, `ctr`) to extract image names and tags being deployed. Separately, monitor Zeek http.log for connections to container registries to identify pulled image names. Correlate these identified image names and tags against a CTI feed of known malicious container images (e.g., public cryptominers, known C2 frameworks). Alert on any match."
          },
          {
            "description": "A container deployed with a command that immediately executes a suspicious script, shell, or reverse shell payload, or is configured to use host networking.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Parse the full command lines from Windows Event ID 4688 for container deployment processes (e.g., `docker run`, `kubectl run`). Use regular expressions to search for patterns within the container's command argument, such as `sh -c`, `bash -i`, `nc -e`, `powershell IEX`, or other reverse shell one-liners. Also, create high-severity alerts for deployments that use the `--net=host` flag, which is a common pattern for network-based attacks from within a container."
          },
          {
            "description": "A container, shortly after deployment, initiates network connections to unusual external destinations or exhibits command and control (C2)-like beaconing behavior.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate a container deployment event (identified via Windows Event ID 4688) with subsequent network traffic (Zeek conn.log) from the container host's IP address. Analyze this traffic for connections to non-standard ports, low-reputation IPs from a threat feed, or patterns of regular, timed callbacks (beaconing). Use time series analysis on connection frequency and data volume from the host post-deployment to identify anomalous network patterns inconsistent with the container's declared function."
          },
          {
            "description": "Container deployment initiated by an unauthorized user account, a service account outside of its normal automation context, or from an unusual source host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze Windows Event ID 4688 for container deployment commands, identifying the user account that initiated the process. Correlate with login events (Event ID 4624) to establish the source of the activity (e.g., interactive logon vs. service). Baseline which users and hosts normally perform container deployments. Use descriptive statistics and frequency analysis to flag deployments by rare or never-before-seen users/hosts. Alert on any developer or standard user account deploying containers on production servers, or service accounts performing interactive deployments."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by deploying containers?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1610",
        "name": "Deploy Container",
        "evidence": [
          {
            "description": "Deployment of a container image with a known critical vulnerability (CVE) that could allow for host escape or privilege escalation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Extract container image names and tags from deployment commands (Windows Event ID 4688) and registry connections (Zeek http.log). Correlate this information against a vulnerability database or CTI feed that maps container images to known CVEs. Alert on the deployment of images with critical vulnerabilities, especially those related to remote code execution, sandbox escape, or privilege escalation that would compromise the host."
          },
          {
            "description": "A container is deployed using specific high-privilege flags or sensitive host path mounts known to facilitate defense evasion and host compromise.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "From Windows Event ID 4688 logs, parse the full command line of container deployment commands (`docker run`, etc.). Use regular expression matching to specifically identify the use of high-risk flags like `--privileged`, `--pid=host`, `--ipc=host`, or `--userns=host`. Also, search for and alert on volume mounts (`-v` or `--volume`) that map sensitive host directories into the container, such as `/`, `/root`, `/etc`, `/var/run/docker.sock`, or `C:\\`."
          },
          {
            "description": "A newly deployed container attempts to access the cloud metadata service to steal instance credentials or probes the internal network for sensitive services.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek conn.log and http.log for connections originating from container host IPs to the cloud metadata service IP (e.g., 169.254.169.254). While some legitimate access may occur, flag containers on hosts that make repeated or unusual queries post-deployment. Additionally, monitor for broad, horizontal connection attempts (network scanning) from the container host to other internal IP ranges on common service ports (e.g., 22, 3389, 445, 1433), which is anomalous for most containerized applications. Use frequency analysis on destination ports/IPs from a single source to detect scanning behavior."
          },
          {
            "description": "A container is deployed with a custom network configuration that circumvents established network policies or directly bridges to a less-restricted network segment.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Parse container deployment commands from Windows Event ID 4688 logs for network-related flags (`--network`, `--add-host`). Flag the use of custom network configurations that are not on an approved list or are known to be insecure (e.g., a custom bridge to a management network). Correlate the deployment with subsequent network traffic (Zeek conn.log) from the container's host. Use a baseline of normal network flows for containerized applications to identify traffic to/from unexpected network segments, indicating a policy bypass. A linear regression model could be used to predict expected traffic volume to certain segments, flagging significant deviations post-deployment."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]