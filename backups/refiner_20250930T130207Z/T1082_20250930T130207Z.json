[
  {
    "information_requirement": "Has an adversary performed system information discovery on managed assets?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1082",
        "name": "System Information Discovery",
        "evidence": [
          {
            "description": "A process creation event is observed where the process image's file hash (SHA256) matches a known malicious system discovery tool on a curated threat intelligence list.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (Domain Controllers, database servers), standard user endpoints, developer workstations.",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of known malicious discovery tool file hashes (e.g., Seatbelt.exe, WinPEAS.exe) into the SIEM. Create a rule to generate a high-severity alert whenever a process creation event (Windows Event ID 4688) is observed with a ProcessSHA256 that matches an entry in this feed. 2. (Statistical) For all process creation events, calculate the prevalence of each file hash across the enterprise over a 30-day rolling window. Flag any executable hash that has been seen on fewer than 5 endpoints (a low prevalence threshold) and is not signed by a trusted publisher for analyst review. 3. (Machine Learning) Train a classification model (e.g., Random Forest) on features from process creation events, including parent process, command line length, user context, and file hash prevalence. Use this model to assign a risk score to each new process execution, flagging those with a high probability of being malicious discovery activity."
          },
          {
            "description": "Observed command-line arguments or PowerShell script block content contain specific strings or patterns indicative of system information discovery, such as `systeminfo`, `Get-ComputerInfo`, or multiple discovery commands chained with `&&` or `;`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts with PowerShell logging enabled, especially servers hosting sensitive applications and administrative jump boxes.",
            "action": "1. (Symbolic) Create SIEM rules that use regular expressions to match against the command-line field (Windows Event ID 4688) or script block text (Windows Event ID 4104) for known discovery commands (e.g., `systeminfo`, `whoami`, `hostname`, `ipconfig /all`, `netstat -an`, `Get-NetIPAddress`, `Get-WmiObject -Class Win32_ComputerSystem`). Also, flag the use of command-chaining operators (`&&`, `|`, `;`) or output redirection (`>`) in conjunction with these commands. 2. (Statistical) For each host, calculate the Shannon entropy of the command line arguments for all processes. Establish a baseline for typical entropy values. Alert when the entropy of a command line exceeds the 99th percentile for that host, as this often indicates obfuscated or complex, scripted commands. 3. (Machine Learning) Utilize a time-series forecasting model (e.g., ARIMA) to predict the expected volume of discovery-related command executions per user. Generate an anomaly alert if the observed count in a given time window (e.g., 10 minutes) significantly deviates from the predicted volume, suggesting automated scripting."
          },
          {
            "description": "A system discovery command is executed by a non-administrative user account, a service account, or is spawned by a parent process not typically associated with administrative activity (e.g., `winword.exe`, `outlook.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, with a focus on web servers and database servers where service accounts are prevalent.",
            "action": "1. (Symbolic) Create a list of approved parent processes for discovery commands (e.g., `explorer.exe`, `powershell.exe`, `cmd.exe`). Generate an alert if a discovery command is spawned by a parent process not on this list, such as `winword.exe` or `outlook.exe`, or if executed by a service account on a standard user workstation. 2. (Statistical) Profile all unique (parent process, child process, user account) triples observed in the environment. Use frequency analysis to identify rare combinations. Any triple that occurs less than a specified number of times (e.g., < 5 occurrences globally) and involves a discovery command should be flagged as a high-confidence indicator. 3. (Machine Learning) Model process execution chains as a graph. Use a graph-based anomaly detection algorithm to identify unusual process parent-child relationships or command sequences that deviate from the learned baseline graph structure, indicating a suspicious process lineage for discovery activities."
          },
          {
            "description": "The count of system discovery command executions from a single host or user within a defined time window (e.g., 10 minutes) significantly exceeds a statistically derived baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake containing aggregated endpoint logs from all workstations and servers.",
            "action": "1. (Symbolic) Implement a simple threshold rule that alerts if any single host or user executes more than 20 discovery-related commands within a 5-minute window. 2. (Statistical) For each host, establish a baseline of the mean and standard deviation ($$ \\mu, \\sigma $$) of discovery command counts in 10-minute intervals over a 30-day period. Generate an alert if the count in any interval exceeds the mean by more than 3 standard deviations ($$ > \\mu + 3\\sigma $$). 3. (Machine Learning) Apply a time-series decomposition model to the discovery command event stream for each host, separating it into trend, seasonality, and residual components. Anomaly detection algorithms (e.g., Isolation Forest) can then be applied to the residual component to identify unusual spikes in activity that are not explained by normal operational patterns."
          },
          {
            "description": "A single source IP address initiates connections associated with remote discovery (e.g., WinRM, RPC, SMB) to an anomalously high number of unique destination hosts within a short time frame.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Taps/SPAN ports feeding Zeek sensors at network choke points (e.g., core switch, datacenter ingress/egress). Domain controllers and file servers.",
            "action": "1. (Symbolic) Create a rule that triggers if a single source IP is observed in Zeek conn.log making connections on remote administration ports (e.g., 135, 445, 5985, 5986) to more than 25 unique destination hosts within 15 minutes. 2. (Statistical) For each source host, count the number of unique destination hosts it connects to on discovery-related ports per hour. Use descriptive statistics (e.g., box-plot) to identify outliers. Any source host whose connection count falls into the 99th percentile (i.e., the top 1% of most active hosts) should be investigated for lateral reconnaissance. 3. (Machine Learning) Model the network connections (Zeek conn.log) as a directed graph where nodes are hosts and edges are connections. Use a community detection algorithm (e.g., Louvain Modularity) to identify normal clusters of activity. A host that suddenly begins connecting to many nodes outside of its typical community is a strong candidate for anomalous lateral movement and discovery."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]