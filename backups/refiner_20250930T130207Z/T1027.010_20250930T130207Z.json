[
  {
    "information_requirement": "Is the adversary evading defenses using command obfuscation?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.010",
        "name": "Command Obfuscation",
        "evidence": [
          {
            "description": "Command line arguments containing unique, high-confidence strings or deobfuscation function names known to be associated with specific malware or obfuscation frameworks.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Scan command line arguments from Windows Event ID 4688 events against a curated list of high-fidelity atomic indicators. This includes unique variable names, function calls, or comments left by specific obfuscators (e.g., 'Invoke-Obfuscation', specific strings from known APT campaigns). Use exact string matching for these selectors to provide a rapid, though potentially brittle, detection for known-bad obfuscated commands."
          },
          {
            "description": "Command line arguments matching structural patterns, keyword combinations, or layered encoding techniques characteristic of known obfuscation tools like Invoke-Obfuscation or common script obfuscators.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze Windows Event ID 4688 command lines for patterns characteristic of common obfuscators. For PowerShell, use regular expressions to detect patterns like `IEX(New-Object Net.WebClient).DownloadString` combined with Base64, or the use of `[System.Text.Encoding]`, `[System.Convert]::FromBase64String`, and `Format` operator (`-f`) abuse. For batch files, identify patterns like extensive use of `%VAR:~start,len%` for string slicing or chained `set` commands with delayed expansion. Flag commands matching these resilient structural patterns."
          },
          {
            "description": "Execution of commands with high statistical abnormality, indicated by high character entropy, unusual character distribution, non-standard casing, or excessive use of special characters and escape sequences.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Continuously process command line arguments from Windows Event ID 4688 and decoded URI strings from Zeek http.log. For each command, calculate Shannon entropy and create a character frequency distribution (including special characters, escape sequences, case transitions). Compare these metrics against a pre-computed baseline of normal commands for the environment using statistical methods like Inter-Quartile Range (IQR) or Z-scores to flag commands that are significant outliers. This approach detects novel or unknown obfuscation techniques."
          },
          {
            "description": "Execution of commands that are dynamically constructed in memory using methods like heavy string concatenation, variable substitution, or input redirection, particularly when launched by common interpreters (e.g., cmd.exe, powershell.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 for parent processes like 'cmd.exe', 'powershell.exe', 'wscript.exe', or 'cscript.exe'. Analyze the child process command line for patterns of dynamic construction, such as heavy use of string concatenation (`+` in PowerShell, `set var=%var%a` in cmd), extensive environment variable expansion (`%VAR%`), or commands being fed via input redirection (`<`). Use correlation analysis to determine if the presence of these patterns, combined with unusual child processes or network connections, increases the likelihood of malicious activity."
          },
          {
            "description": "Layered obfuscation techniques observed in a single command, such as Base64 encoding combined with string reversal, character substitution ciphers, or compression, requiring multiple deobfuscation steps to analyze.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Develop a multi-stage analysis for suspicious command lines identified through other means (e.g., high entropy). First, identify and attempt to reverse potential encoding (e.g., Base64, hex). Second, analyze the decoded output for further obfuscation patterns (e.g., string reversal functions, XOR keys, character substitution arrays, Gzip/Deflate compression headers). Flag commands that appear to require multiple layers of deobfuscation to reveal a potentially malicious payload (e.g., a call to `Invoke-Expression` or a URL). The number of identified layers can serve as a risk score for prioritization."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]