[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by ensuring a process continues execution despite potential interruptions?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.011",
        "name": "Ignore Process Interrupts",
        "evidence": [
          {
            "description": "Process execution with a command line that is an exact match to a known malicious command string used by a specific malware family to ignore process interrupts.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a threat intelligence list of high-fidelity, complete command-line strings known to be used by specific malware or threat actors for defense evasion via ignoring interrupts. Create an exact-match detection rule that scans the 'CommandLine' or 'Process Command Line' field of Windows Event ID 4688. Generate a high-priority alert for any match, as this represents a known-bad selector."
          },
          {
            "description": "Process execution using command-line arguments, scripting parameters, or API call patterns associated with ignoring interrupts, suppressing termination, or detaching from a parent session.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 command lines for patterns indicative of interrupt evasion. Use regular expressions to search for: (1) Linux/WSL commands like 'nohup', 'disown', 'setsid'. (2) PowerShell parameters such as '-ErrorAction SilentlyContinue' or error handling constructs like 'trap { continue; }'. (3) Native Windows commands that can detach processes, like 'start /b'. (4) VBScript's 'On Error Resume Next'. Use frequency analysis across the environment to identify rare or unusual usage of these patterns and investigate further."
          },
          {
            "description": "A process exhibiting anomalous lifetime behavior, such as continuing to run long after its parent process or interactive user session has terminated, indicating it has been intentionally detached.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4634"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Track process and user session lifecycles by correlating security event logs. A) Correlate logon (Event ID 4624) and logoff (Event ID 4634) events by 'Logon ID' to define user session boundaries. Identify processes (Event ID 4688) created during the session that do not terminate shortly after logoff. B) Track parent-child relationships using 'Process ID' and 'Creator Process ID' from Event ID 4688. Identify child processes that continue to run for a significant duration after their parent has terminated ('orphaned processes'). Establish baselines for normal orphaned processes (e.g., some Windows services) using descriptive statistics and alert on significant deviations or outliers identified using IQR or percentile analysis."
          },
          {
            "description": "A detached or long-running process, which appears to ignore interrupts, also initiates suspicious network connections or performs file modifications inconsistent with its purported function.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify processes that match pattern-based or behavioral detections for ignoring interrupts (e.g., uses 'nohup', is an orphaned process). Correlate the host and timeframe of these processes with network connection logs (Zeek conn.log). Investigate if these processes initiate external network connections, especially to low-reputation IPs/domains, use non-standard ports, or exhibit periodic 'heartbeat' traffic indicative of C2 communication. Use correlation analysis to link the host-based TTP detection with suspicious network behavior to significantly increase detection confidence and prioritize the alert."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]