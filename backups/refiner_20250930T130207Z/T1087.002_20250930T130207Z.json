[
  {
    "information_requirement": "Is the adversary attempting to discover domain accounts?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1087.002",
        "name": "Domain Account",
        "evidence": [
          {
            "description": "Execution of a process where the process name or command-line arguments match a known Active Directory enumeration tool, such as sharphound.exe, adrecon.exe, or bloodhound-python.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged User Workstations",
            "action": "1. (Symbolic) Using a SIEM rule, monitor Windows Event ID 4688 for new process creations. Alert if the process name matches a watchlist of known AD enumeration tools (e.g., 'sharphound.exe', 'adrecon.exe') or if the command line contains unique arguments associated with those tools. 2. (Statistical) For any process creation event, calculate the entropy of the process name. Establish a baseline of process name entropy for the environment and flag processes with abnormally high entropy scores (e.g., exceeding the 99th percentile), which can indicate packed or randomly named malware, and correlate these with other discovery behaviors. 3. (ML) Train a classification model (e.g., Random Forest) using features from Windows Event ID 4688 such as parent process name, user context, command-line argument length, and presence of keywords. Use the model to predict the probability that a new process is a malicious enumeration tool and alert on high-probability events."
          },
          {
            "description": "Execution of native Windows utilities (e.g., 'net.exe', 'dsquery.exe', 'nltest.exe') with command-line arguments specific to domain-level user, group, or trust enumeration, such as 'net user /domain'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Endpoint Devices",
            "action": "1. (Symbolic) Create a SIEM rule to monitor Windows Event ID 4688 for process names 'net.exe', 'dsquery.exe', or 'nltest.exe'. Alert when the command line contains strings like '/domain', '\"Domain Admins\"', 'dsquery user', or '/dclist', and apply higher severity if the parent process is non-interactive (e.g., 'w3wp.exe', 'sqlservr.exe'). 2. (Statistical) For each source host, create a baseline of the execution frequency for these utilities over a 30-day rolling window. Using a percentile-based threshold (e.g., 95th percentile), alert when a host executes these commands significantly more often than its own historical baseline or its peer group's baseline. 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on features derived from process execution events, including the user, host, parent process, and command executed. Identify clusters of anomalous command execution sequences that deviate from normal administrative behavior, which may represent an adversary's discovery workflow."
          },
          {
            "description": "Decoded PowerShell script block content (from Event ID 4104) containing cmdlets or functions associated with Active Directory enumeration, such as 'Get-ADUser', 'Get-ADGroupMember', or functions from frameworks like PowerView.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged User Workstations",
            "action": "1. (Symbolic) Using a SIEM rule, scan the message field of Windows Event ID 4104 for regular expressions matching AD enumeration cmdlets ('Get-ADUser', 'Get-ADGroup'), PowerView functions ('Get-NetUser', 'Find-LocalAdminAccess'), or patterns like '-Filter *' or '.Properties *'. 2. (Statistical) For each script block, calculate the character entropy and the ratio of alphanumeric to special characters. Establish a baseline for these metrics across the environment and alert on script blocks with high entropy scores or unusual character ratios that indicate obfuscation. 3. (ML) Train a time-series forecasting model (e.g., ARIMA) on the volume of PowerShell enumeration events per user. Alert when the observed volume of these specific events significantly exceeds the predicted volume, indicating a burst of suspicious activity."
          },
          {
            "description": "A single client IP address generating a statistically anomalous volume of LDAP (TCP/389, TCP/636) or SAMR (TCP/445) requests to a Domain Controller, or requesting an unusually large and diverse set of attributes in a short time frame.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek ldap.log",
              "Windows Event ID 4662"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Core Network Switches",
            "action": "1. (Symbolic) On Domain Controllers, enable Directory Service Access auditing (Windows Event ID 4662) on sensitive AD groups. Create a SIEM rule to alert when a non-administrative account attempts to read the 'Member' attribute of the 'Domain Admins' group. 2. (Statistical) Using Zeek logs, baseline the number of unique LDAP queries and total bytes transferred per source IP to Domain Controllers over a 1-hour window. Alert when a source IP exceeds the 99th percentile of either metric. Concurrently, monitor Windows Event ID 4662 and alert when the count of objects accessed by a single user in a 5-minute window is more than 3 standard deviations above the mean for that user. 3. (ML) Apply an unsupervised anomaly detection algorithm (e.g., Isolation Forest) to a feature set from Zeek logs, including connection duration, bytes transferred, LDAP operation type, and number of entries returned. The model will learn normal traffic patterns to Domain Controllers and flag connections that are strong outliers, which could represent tools like BloodHound."
          },
          {
            "description": "A single client IP address requesting a high volume of Kerberos Ticket Granting Service (TGS) tickets (Event ID 4769) for numerous distinct Service Principal Names (SPNs) in a short time period, particularly for user accounts and with weak RC4 encryption.",
            "data_sources": [
              "Windows Event ID 4769"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": "1. (Symbolic) Create a SIEM rule to monitor Windows Event ID 4769 for events where the 'Ticket Encryption Type' is '0x17' (RC4-HMAC) and the 'Service Name' does not belong to a machine account (i.e., does not end in '$'). Alert on any such request as a high-fidelity indicator of a Kerberoasting attempt. 2. (Statistical) Aggregate Windows Event ID 4769 by 'Client Address' over a 5-minute window. For each client, count the number of distinct 'Service Names' requested. Alert when a client's distinct SPN count exceeds the 98th percentile for the environment. 3. (ML) Train a one-class SVM (Support Vector Machine) on features from normal Kerberos TGS requests (Event ID 4769), such as client location, time of day, and requested service category. Use the trained model to identify requests that fall outside the learned 'normal' boundary, which are likely part of an enumeration or Kerberoasting attack."
          },
          {
            "description": "A correlated sequence of events from a single source host or user, demonstrating a logical progression of domain discovery, such as listing domain admin groups ('net group \"Domain Admins\" /domain') followed by listing the members of that group ('Get-ADGroupMember -Identity \"Domain Admins\"').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM / Log Aggregator, Domain Controllers, Member Servers",
            "action": "1. (Symbolic) Define a stateful SIEM correlation rule that triggers when Event A (e.g., process creation of 'net.exe' with command line containing '\"Domain Admins\"') is followed by Event B (e.g., process creation of 'net.exe' with command line containing '\"Domain Admins\" /domain') from the same host and user within a 15-minute window. 2. (Statistical) For each user, calculate a 'Discovery Activity Score' by assigning points to different discovery commands ('net user'=1, 'Get-ADUser'=1, 'net group'=2, 'Get-ADGroupMember'=2). Sum these scores over a 1-hour window and use a moving average and standard deviation to identify when a user's score spikes anomalously compared to their own history. 3. (ML) Use a sequence mining algorithm (e.g., GSP, PrefixSpan) on command-line and PowerShell logs (Event IDs 4688, 4104) to identify common and rare sequences of commands. Flag sequences that are statistically rare across the enterprise but are known to be associated with adversary discovery TTPs."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]