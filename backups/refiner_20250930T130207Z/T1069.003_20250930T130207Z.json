[
  {
    "information_requirement": "Has the adversary attempted to discover cloud groups and permissions? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1069.003",
        "name": "Cloud Groups",
        "evidence": [
          {
            "description": "A command line execution or API call event matches a known high-fidelity signature for a cloud group discovery tool or a command string strongly associated with manual reconnaissance.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider IAM/Audit Log services, Domain Controllers, Administrator workstations, CI/CD pipeline runners",
            "action": "1. (Symbolic) Maintain and monitor a watchlist of high-fidelity command variations and API calls strongly correlated with adversarial discovery (e.g., `Get-MsolRole -RoleName '*Admin*'`, `aws iam list-policies --scope Local`, `az ad user get-member-groups`). Trigger a high-severity alert on an exact match from a non-whitelisted user or system. 2. (Statistical) For parent processes of cloud CLI tools (e.g., `powershell.exe`, `bash`), calculate the entropy of the command-line arguments. Establish a baseline entropy score for legitimate administrative commands. Flag any command whose entropy score exceeds the 99th percentile for that process/user combination, as this can indicate obfuscation or complex, non-interactive scripting. 3. (Machine Learning) Train a classification model (e.g., logistic regression, decision tree) on labeled command-line arguments (benign vs. malicious discovery). Use features such as command length, presence of special characters, keyword counts (`list`, `get`, `group`, `role`), and process name. Use the model to score new commands in real-time for their likelihood of being malicious."
          },
          {
            "description": "A single user principal or source IP address executes cloud group enumeration commands or API calls at a machine-like velocity, or uses wildcard/broad-scoping parameters indicative of automated scripting.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs",
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider API gateways, Internal network egress points, Administrator workstations and servers",
            "action": "1. (Symbolic) Implement a rule that triggers if a single user principal executes more than 20 distinct enumeration API calls (e.g., `ListGroups`, `ListRoles`, `ListPolicies`, `Get-MsolRole`) within a 1-minute window. Alert on the use of wildcard queries like `Get-MsolUser -All | Get-MsolUserRole` when not executed by a whitelisted service account. 2. (Statistical) For each user principal, calculate the rate of enumeration API calls per minute. Establish a baseline (e.g., mean and standard deviation) over a 30-day period. Alert if the current rate for a user exceeds 3 standard deviations above their personal or peer-group baseline. 3. (Machine Learning) Use time-series analysis (e.g., ARIMA) on the count of enumeration events per user/IP over time. Anomaly detection models can flag sudden spikes or changes in the pattern that deviate from the forecasted behavior, indicating a potential scripted attack."
          },
          {
            "description": "A user principal's cloud enumeration activity metrics, such as the daily count of unique groups queried or the number of different API call types used, deviate significantly from their own or their peer group's historical baseline.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider IAM/Audit Log services, User and Entity Behavior Analytics (UEBA) platform data lake, SIEM log repository",
            "action": "1. (Symbolic) Define a rule that alerts if a non-administrative user account, or any account outside of a defined 'Cloud Administrators' group, executes any privileged enumeration command (e.g., `Get-MsolRole`, `gcloud iam roles list`). 2. (Statistical) For each user, profile the set of enumeration API calls they typically make. Calculate the Jaccard similarity between the set of calls made in a 1-hour window and their historical 30-day baseline set. A Jaccard similarity score below a certain threshold (e.g., 0.2) indicates a significant and potentially suspicious change in behavior. 3. (Machine Learning) Use clustering algorithms (e.g., DBSCAN) to group users based on their enumeration behavior (features: API call frequency, call diversity, time of day). Generate an alert when a user suddenly moves from a 'low-activity' cluster to a 'high-activity/high-diversity' cluster, or is classified as an outlier."
          },
          {
            "description": "A cloud group enumeration event is initiated from a source IP address with high-risk attributes, such as a rare geolocation, a known malicious reputation, a non-corporate ASN, or from an anomalous process context on an endpoint.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateway firewalls and proxies, VPN concentrators, Cloud provider audit logs, Endpoint process monitoring agents",
            "action": "1. (Symbolic) For every enumeration event, enrich the source IP with geolocation data and check it against threat intelligence feeds of known malicious IPs, TOR exit nodes, and anonymizing proxies. Maintain an 'allow list' of approved countries/ASNs and alert on any activity from outside this list. 2. (Statistical) For each user, maintain a frequency distribution of their source geolocations and ASNs. An enumeration event from a location/ASN that falls below the 1st percentile of frequency for that user (a 'rare' location) should be flagged for review. 3. (Machine Learning) Train a classification model to predict the legitimacy of an enumeration event based on contextual features: source IP geolocation, ASN, time of day, user role, and the parent process on the endpoint (e.g., `outlook.exe` vs `powershell.exe`). An event with a low probability score from the model indicates a high-confidence anomaly."
          },
          {
            "description": "A cloud group enumeration event by a user principal is followed within a short time window by a high-risk action, such as privilege escalation or data access, by the same principal or targeting a resource discovered during the enumeration.",
            "data_sources": [
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM correlation engine, Cloud provider audit log services, Data Loss Prevention (DLP) systems",
            "action": "1. (Symbolic) Define a SIEM correlation rule for a specific sequence: `EVENT_A = (API call matches 'List*', 'Get*', 'Describe*' for roles/groups)` followed by `EVENT_B = (API call matches 'AssumeRole', 'Add-RoleGroupMember', 'GetSecretValue', 's3:GetObject')` within 10 minutes, where `User(EVENT_A) == User(EVENT_B)`. 2. (Statistical) Analyze the transition probabilities between API call types. Calculate the conditional probability P(High-Risk Action | Enumeration Action). If this probability for a user in a given session significantly exceeds the historical average for all users, it indicates a suspicious sequence of actions. 3. (Machine Learning) Model cloud activity as a graph where users, roles, and resources are nodes and API calls are directed edges. Use graph-based anomaly detection algorithms to identify rare or high-risk paths (e.g., `User -> ListRoles -> Role -> AssumeRole -> GetSecretValue`) that do not conform to normal operational workflows."
          },
          {
            "description": "An internal host generates a statistically unusual volume, frequency, or diversity of network connections to cloud provider API FQDNs, which correlates in time with cloud audit log enumeration events from that host's user.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "AWS CloudTrail",
              "Azure Monitor Audit Logs",
              "GCP Cloud Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network TAPs at internet egress points, DNS resolvers, SIEM log repository",
            "action": "1. (Symbolic) Create a rule to alert if the number of DNS queries from a single host for cloud API FQDNs (e.g., `*.amazonaws.com`, `*.windows.net`, `*.googleapis.com`) in Zeek dns.log exceeds a threshold (e.g., 100 unique subdomains in 5 minutes). 2. (Statistical) Monitor the `orig_bytes` and `resp_bytes` fields in Zeek conn.log for connections to cloud API endpoints. A series of connections with abnormally low byte counts can indicate rapid-fire enumeration checks. Flag hosts whose average connection size to these endpoints drops more than 2 standard deviations below its established mean. 3. (Machine Learning) Apply time-series anomaly detection on the volume of connections per second from an internal host to the set of cloud API IP addresses. A model can learn the daily/weekly seasonality of normal work and flag bursts of connections at odd hours or with a machine-like cadence that deviates from the learned pattern."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]