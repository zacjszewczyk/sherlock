[
  {
    "information_requirement": "Has the adversary executed code via Windows service manipulation?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1569.002",
        "name": "Service Execution",
        "evidence": [
          {
            "description": "Installation of a Windows service whose executable hash or name matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Upon detection of a new service installation (Event ID 7045 or 4697), extract the 'Service File Name' (executable path). Automatically hash the file and compare the hash against a CTI feed of known malicious file hashes. Additionally, compare the 'Service Name' and the executable filename against a maintained list of known malicious service names (e.g., 'PSEXESVC', 'RemCom_Service'). Alert on any matches."
          },
          {
            "description": "A Windows service is created or modified using common administrative tools (e.g., sc.exe, powershell.exe) with command-line arguments or executable paths characteristic of malicious activity.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for process creation events (Event ID 4688) of 'sc.exe', 'powershell.exe' (with New-Service/Set-Service cmdlets), or 'instsrv.exe'. Analyze the command line for service creation/modification commands. Flag instances where the service's 'binPath' points to non-standard locations (e.g., %TEMP%, %APPDATA%, C:\\Users\\...), uses common living-off-the-land binaries (rundll32.exe, mshta.exe) in unexpected ways, or embeds encoded/obfuscated scripts. Use regular expressions to parse and identify these suspicious patterns."
          },
          {
            "description": "A Windows service is created and then rapidly started and stopped or deleted, consistent with the behavior of remote execution or lateral movement tools.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate service creation events (Event ID 7045) with service state change events (Event ID 7036, for 'running' then 'stopped' states) for the same service name on the same host. Calculate the time delta between creation, start, and stop events. Flag services with a lifespan of less than five minutes. Create a baseline of normal service lifespans using descriptive statistics (mean, median) and use Inter-Quartile Range (IQR) or percentile analysis to identify statistically significant short-lived services."
          },
          {
            "description": "A legitimate or newly created service process spawns an unexpected child process, such as a command shell, scripting engine, or network utility, deviating from baseline behavior.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process creation events (Event ID 4688). For each event, check if the 'Parent Process Name' corresponds to a known Windows service executable (e.g., svchost.exe, or any process running under 'NT AUTHORITY\\SYSTEM' context). Build a baseline of normal parent-child process relationships for services in the environment. Flag any deviations, especially the spawning of interactive shells (cmd.exe, powershell.exe), scripting engines (wscript.exe, cscript.exe), or network tools (net.exe, netsh.exe, certutil.exe). Use frequency analysis on parent-child pairings to identify rare or anomalous process chains originating from services."
          },
          {
            "description": "A service is configured to start automatically, but its executable path points to a location that is world-writable or associated with user profiles, indicating a potential persistence or insecure execution vector.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze new service creation events (Event ID 7045, 4697) where the 'Start Type' is 'Auto start' (Value: 2). For these services, inspect the 'Service File Name' (executable path). Flag any services where the path points to a directory with weak permissions (e.g., world-writable) or a user-specific folder (e.g., C:\\Users\\, C:\\ProgramData\\, %TEMP%, %PUBLIC%). Use linear regression to monitor if the rate of such creations is increasing over time, potentially indicating a wider campaign. Maintain a list of approved directories for auto-start services and alert on any deviation."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]