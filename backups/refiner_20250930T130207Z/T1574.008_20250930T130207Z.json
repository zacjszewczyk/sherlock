[
  {
    "information_requirement": "Is the adversary maintaining persistence by hijacking application search order?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "An executable file is created whose hash matches a known malicious tool used for search order hijacking.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file creation events (Windows Event ID 4663) for executable files (.exe, .dll, .com, .bat). Upon file creation, automatically calculate the file's hash (e.g., SHA256) and compare it against a continuously updated threat intelligence feed of known malicious file hashes, specifically those associated with malware that uses search order hijacking for persistence. Alert on any match."
          },
          {
            "description": "A file with a high-priority PATHEXT extension (e.g., .com, .bat) is created in an application's directory, where the filename matches a legitimate system executable (e.g., 'net.com' created to hijack calls to 'net.exe').",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file creation events (Windows Event ID 4663) in directories listed in the system PATH environment variable. Maintain a list of common system executable names (e.g., net, ipconfig, cmd, python). Alert when a new file is created that matches a name on this list but has a different extension than the legitimate tool, especially if the new extension has a higher search order priority (.com, .bat, .cmd precede .exe). Correlate this file creation with subsequent process creation events (Windows Event ID 4688) where the hijacked process is executed."
          },
          {
            "description": "A legitimate parent process spawns a child process with a common system utility name, but the child process executes from an unexpected, non-standard path instead of a trusted system directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Baseline normal parent-child process execution paths for legitimate applications across the environment. Monitor Windows Event ID 4688 for deviations where a parent process (e.g., legit_app.exe) launches a child process (e.g., net.exe) from a path other than its expected location (e.g., C:\\Windows\\System32). Use frequency analysis on process execution paths per process name; low-frequency or user-writable paths are highly suspicious. A box-plot of path locations for a given process name can reveal outliers."
          },
          {
            "description": "A process executing from a non-standard directory and masquerading as a common system utility initiates an external network connection, potentially for C2 communication.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate process creation events (Windows Event ID 4688) with network connection logs (Windows Event ID 5156, Zeek conn.log). Identify processes executing from unusual or user-writable directories while masquerading as system utilities. Investigate all external network connections initiated by these suspicious processes. Use linear regression to see if there is a correlation between the execution of these processes and anomalous outbound data flows."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by hijacking application search order?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "A file with a hash matching a known privilege escalation tool or malware is created in a path searched by a high-privilege application.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file creation events (Windows Event ID 4663), especially in world-writable directories that are part of the system PATH or in application directories for privileged services (e.g., C:\\ProgramData, C:\\Windows\\Temp). Calculate file hashes and compare them against a CTI feed of hashes for known privilege escalation exploits or malware that uses search order hijacking. Alert on any match and investigate the associated process."
          },
          {
            "description": "A file is created in a directory known to be searched by a specific, high-privilege, and commonly vulnerable application (e.g., installer, updater), where the filename matches a DLL or executable the application is known to load insecurely.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain a list of known vulnerable, high-privilege applications and the specific DLLs/executables they load insecurely (e.g., a specific DLL loaded by a printer driver installer). Monitor file creation events (Event ID 4663) for these specific filenames in the vulnerable paths. Also, monitor process creation events (Event ID 4688) where the parent process is the known vulnerable application and the child process is the hijacked DLL/executable executing from the unexpected path. Correlate file writes with subsequent execution by the vulnerable parent to confirm the hijack."
          },
          {
            "description": "A process running with high integrity (e.g., SYSTEM, Administrator) spawns a child process that matches the name of a common system utility but executes from an unusual path, especially if the file was created outside of a standard patching window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Filter process creation events (Event ID 4688) where the parent process is running with a high-integrity security token. Check if the child process name is a common utility but its full path is non-standard (e.g., not System32). Correlate the child process's file creation timestamp (from Event ID 4663) with known maintenance windows or software deployment schedules. Use time series analysis of privileged process executions to detect anomalous creation events that are statistical outliers from normal administrative activity."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking application search order?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "An executable file, with a hash matching known malware, is created with a filename matching a legitimate system utility or a DLL loaded by a trusted, signed application (e.g., an antivirus component).",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file creation events (Windows Event ID 4663) for executables/DLLs whose names match legitimate system components or security product files. Calculate the file's hash and compare it against a CTI feed of known malicious hashes. Alert on any match, as this is a strong indicator of masquerading to inherit trust and bypass security controls."
          },
          {
            "description": "A process executing from a non-standard path and masquerading as a system utility is launched with command-line arguments that are syntactically valid for the legitimate utility it is impersonating.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze process creation events (Event ID 4688). Filter for processes where the executable path is non-standard (e.g., user profile, temp folder) but the process name matches a system utility (e.g., net.exe, powershell.exe). Maintain a library of common command-line patterns for these utilities. Use regular expressions to check if the command line of the suspicious process matches a legitimate usage pattern. Flagging such events is high-priority as it shows intent to hijack a specific, expected action for defensive evasion."
          },
          {
            "description": "A trusted, signed parent process (e.g., a web browser, Office application, security tool) spawns a child process from an unusual path, where the child process name is a common system utility or DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Build a baseline of normal child process behavior for trusted and signed applications. Monitor process creation events (Event ID 4688) for anomalies where these trusted parents launch processes from unexpected locations (e.g., C:\\Users\\...\\AppData\\Local\\Temp, C:\\ProgramData). Use frequency analysis and parent-child process relationship graphing to find rare or never-before-seen execution paths. Correlate a suspicious execution with a recent file creation event (Event ID 4663) in the same path to link the file drop to the execution, confirming the hijack sequence."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]