[
  {
    "information_requirement": "Is the adversary using resource forking to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.009",
        "name": "Resource Forking",
        "evidence": [
          {
            "description": "A file's resource fork contains data matching the hash of a known malicious payload.",
            "data_sources": [
              "File system event logs",
              "Endpoint Detection and Response (EDR) data"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Upon file creation or modification events, inspect the file's resource fork (e.g., accessed on macOS via `<filename>/..namedfork/rsrc`). Calculate the hash (e.g., SHA256) of the resource fork's content and inner join it with a threat intelligence database of known malicious file hashes. Alert on any match and isolate the host for forensic analysis."
          },
          {
            "description": "An unusual process, such as a network utility or script interpreter, writes data to a file's resource fork.",
            "data_sources": [
              "File system event logs (e.g.",
              "from Apple Endpoint Security Framework)"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file write events, specifically targeting a file's resource fork path (`<filename>/..namedfork/rsrc`). Establish a baseline of legitimate processes (e.g., Finder) that interact with resource forks. Alert on write activity from anomalous source processes, such as `curl`, `python`, `bash`, or Microsoft Office applications, as this pattern is highly indicative of payload staging. Use frequency analysis to identify rare process-to-resource-fork-write events."
          },
          {
            "description": "A file with execute permissions is created or modified to have a non-empty resource fork, a combination highly uncharacteristic of legitimate software on modern macOS.",
            "data_sources": [
              "File system event logs",
              "EDR data"
            ],
            "data_platforms": [
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor file system events for files being created or modified. For any file with execute permissions (`+x`), check the size of its resource fork. A resource fork size greater than zero on an executable file is a strong behavioral anomaly that warrants immediate investigation. Use descriptive statistics (mean, max) on resource fork sizes across the fleet to build a baseline, but any non-zero size on an executable should be treated as a high-fidelity alert."
          },
          {
            "description": "A sequence of events where a file is downloaded, its resource fork is subsequently modified, and then code execution is initiated by a separate process.",
            "data_sources": [
              "Process execution logs",
              "File system event logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Create a correlated detection rule that triggers on the following sequence: 1) A file download is observed via network logs (Zeek conn.log) or a file is written by a browser or network utility. 2) A subsequent file system event shows the downloaded file's resource fork being written to. 3) A new process (e.g., `bash`, `osascript`) is created by the process that handled the download or modification. Use time-series analysis and correlation of events based on host, file path, and a defined time window (e.g., 5 minutes) to detect this multi-stage behavioral pattern."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]