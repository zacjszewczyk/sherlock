[
  {
    "information_requirement": "Has the adversary deployed a rootkit to hide their presence and evade defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1014",
        "name": "Rootkit",
        "evidence": [
          {
            "description": "A pattern of persistent, low-volume, periodic network connections from an internal host to an external IP address or domain matching known rootkit Command and Control (C2) infrastructure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DNS Resolvers, Network Security Monitoring (NSM) Sensor Grid",
            "action": "1. (Symbolic) Ingest a Cyber Threat Intelligence (CTI) feed of known rootkit C2 domains and IPs. Create a rule to alert on any connection in Zeek conn.log or DNS query in Zeek dns.log that matches an indicator from this feed. 2. (Statistical) For each source host, calculate the connection frequency and data volume per destination over time. Establish a baseline and identify outliers using percentile analysis; connections with very low data volume (e.g., <1st percentile) and highly regular intervals (low jitter) are indicative of beaconing. Calculate the entropy of subdomains in dns.log; a high entropy score can indicate DGA usage. 3. (Machine Learning) Employ a time series anomaly detection model (e.g., ARIMA) on connection counts and data volume per host to automatically detect beaconing patterns that deviate from a learned baseline of normal network activity."
          },
          {
            "description": "A driver is loaded that is either unsigned, signed by an untrusted or revoked publisher, or has a filename and path that mimics legitimate system files but is located in a non-standard directory.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 600 (Sysmon)",
              "Windows Code Integrity Event IDs 3033, 3063, 3077"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged User Workstations",
            "action": "1. (Symbolic) Create an alert for any Code Integrity event (3033, 3063) indicating a driver failed code integrity checks. Maintain and match against a list of known-bad driver hashes and suspicious filenames (e.g., 'ndis.sys' in a non-system32 directory). 2. (Statistical) Build a baseline of all driver publisher names across the enterprise. Calculate the prevalence of each publisher; a publisher name seen on a single host is a high-rarity event warranting investigation. Calculate the Levenshtein distance between newly loaded driver names and a list of legitimate system driver names; a small distance (e.g., 1 or 2) suggests typosquatting. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features from Sysmon Event ID 6 (Driver Loaded) such as 'Signed', 'Signature', 'ImageLoaded' path, and filename entropy to predict whether a loaded driver is malicious."
          },
          {
            "description": "A process is created using command-line arguments consistent with silent driver/service installation or kernel module loading, especially when launched from a non-standard parent process (e.g., an Office application).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially user workstations and publicly accessible servers.",
            "action": "1. (Symbolic) Use a regex-based rule to alert on command-line executions (Event ID 4688) containing patterns for silent installation or system modification, such as 'sc.exe create', 'bcdedit.exe', or 'PnPUtil.exe /add-driver', especially when the parent process is not 'explorer.exe' or 'services.exe'. 2. (Statistical) For each parent process name (e.g., 'winword.exe'), build a profile of all child processes it normally creates. Alert when a child process is created that falls into a rare percentile (e.g., <1%) for that parent, such as 'powershell.exe' launching 'sc.exe'. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on vectorized command-line arguments to group similar commands. New, small clusters that appear suddenly can represent the execution of a new rootkit installer across multiple hosts, allowing for early discovery."
          },
          {
            "description": "A process, service, or network connection is observed in low-level logs but cannot be correlated with a known, legitimate application, or is associated with an orphaned or suspiciously-parented process.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4688",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, Network Egress Points",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a new service is created (EID 7045), and within 60 seconds, the associated process (EID 4688) initiates an external network connection (Sysmon EID 3 or Zeek conn.log) to a destination IP not on a corporate allowlist. 2. (Statistical) For each host, create a baseline of (process_name, destination_port, protocol) tuples from network connection logs. Calculate the joint probability of new combinations. An event with a probability below a defined threshold (e.g., 1st percentile) indicates a novel and suspicious network behavior. 3. (Machine Learning) Model host-network interactions as a graph, where nodes are processes and IPs, and edges are connections. Use a community detection algorithm to find clusters of normal activity. A process that forms a new, isolated community or bridges to a known-malicious community is a strong indicator of compromise."
          },
          {
            "description": "Execution of tools known to modify critical boot components like the Master Boot Record (MBR), or direct raw disk access attempts from unexpected user-mode processes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 9 (Sysmon)",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System Partitions on all hosts, Boot sectors of physical disks on servers and workstations.",
            "action": "1. (Symbolic) Alert on any process creation (EID 4688) for 'bootsect.exe', 'fdisk', or similar utilities where the parent process is not a known IT administration or OS deployment tool. Also, alert on FileCreate events (Sysmon EID 11) targeting '\\\\.\\PhysicalDrive0'. 2. (Statistical) Monitor for RawAccessRead events (Sysmon EID 9). Profile the set of legitimate processes that perform this action (e.g., backup agents, disk utilities). Alert if a process not in this baseline set performs a raw disk read, and assign a higher risk score if that process has a low prevalence score across the enterprise. 3. (Machine Learning) Train a supervised classification model on process execution events to identify anomalous usage of administrative tools. Features should include Parent Process Name, User Context, command-line arguments, and execution time. A model can learn to distinguish between benign administrative use and malicious use by an adversary."
          },
          {
            "description": "A statistically significant increase in application or system crashes, or the unexpected termination of security tool processes (e.g., EDR agent, antivirus), on one or more hosts.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Windows Event ID 5 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially hosts with critical security agents installed.",
            "action": "1. (Symbolic) Create a high-priority rule that alerts immediately upon the detection of a process termination event (Sysmon EID 5) where the terminated process name matches a list of critical security agents (e.g., 'MsMpEng.exe', 'csagent.exe', 'cb.exe'). 2. (Statistical) For each host, establish an hourly baseline (mean and standard deviation) for application crash events (EID 1000). Alert if the hourly count exceeds a dynamic threshold, such as 3 standard deviations above the mean for that specific host and hour of the day. 3. (Machine Learning) Use an Isolation Forest algorithm on a time series of event counts per host (e.g., a vector of [count(EID 1000), count(EID 7031), count(EID 7034)] per hour). This model can detect anomalous combinations of failures that, while not individually significant, together represent a pattern of system instability indicative of a poorly implemented rootkit."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]