[
  {
    "information_requirement": "Is the adversary attempting to discover container resources and environment details? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1613",
        "name": "Container and Resource Discovery",
        "evidence": [
          {
            "description": "One or more API calls to container orchestration platform endpoints (e.g., Kubernetes API, Docker API) originate from a source IP address present on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, Docker daemon hosts, internet gateway, reverse proxies.",
            "action": "1. (Symbolic) Ingest a CTI feed of malicious IPs. Join Zeek conn.log and http.log records with the CTI feed on the source IP ('id.orig_h'). Alert on any match where the destination port ('id.resp_p') is a known container API port (e.g., 6443, 2375, 2376, 10250). 2. (Statistical) For all IPs connecting to container API ports, calculate the rate of new, previously unseen source IP addresses per hour. Establish a baseline and alert when this rate exceeds the 95th percentile, indicating a potential scanning campaign. 3. (ML) Train a classification model (e.g., Random Forest) to predict if an API connection is malicious. Features should include source IP reputation score, source ASN, time of day, country of origin, and whether the IP is new. This can identify suspicious connections from IPs not yet on a CTI list."
          },
          {
            "description": "Execution of container-native command-line tools (`kubectl`, `docker`) with discovery-oriented arguments (e.g., `get pods`, `ps`, `cluster-info`) from a non-interactive shell, an unexpected user account, or a host not designated for administrative activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Administrative workstations, jump servers, CI/CD runners, container nodes.",
            "action": "1. (Symbolic) Monitor Windows Event ID 4688 for process creations of `kubectl.exe` or `docker.exe`. Alert if the parent process is not `explorer.exe` or `powershell.exe`, or if the command line contains discovery arguments like `get`, `describe`, `ps`, `images`, `nodes`, `cluster-info`, `api-resources`. 2. (Statistical) For each user and host, calculate the Shannon entropy of the command-line arguments used with `kubectl.exe` or `docker.exe` within a 5-minute window. A high entropy score suggests scripted, broad enumeration. Alert if the score exceeds a dynamically calculated baseline (e.g., > 3 standard deviations above the user's average). 3. (ML) Use a clustering algorithm (e.g., DBSCAN) on process execution events. Use features like parent process name, user account, host, and command-line argument patterns to group activity. Flag clusters that are small and isolated from the large clusters of normal administrative activity as anomalous."
          },
          {
            "description": "A single source IP or user account generates a statistically significant volume or frequency of API calls to container platform endpoints, or connects from a network segment not authorized for administrative access.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, Docker daemon hosts, internal network firewalls and switches.",
            "action": "1. (Symbolic) Create a firewall or SIEM rule to alert on any connection attempt from a non-administrative network zone (e.g., user VLANs, guest Wi-Fi) to a container API endpoint (e.g., destination port 6443). 2. (Statistical) For each source IP, aggregate the number of connections (from Zeek conn.log) to the K8s API server over 1-minute intervals. Establish a baseline for each source. Alert if the connection count for any interval exceeds the 99th percentile of that source's historical baseline. 3. (ML) Employ a time-series anomaly detection model (e.g., ARIMA) for the overall API request rate. Train the model on historical Zeek http.log data. An alert is triggered when the observed request volume significantly deviates from the model's forecast, indicating a potential enumeration spike."
          },
          {
            "description": "A user session on a container management web UI (e.g., Kubernetes Dashboard) exhibits behavior indicative of automated scanning, such as an abnormally high rate of requests to resource-listing pages.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers hosting container management UIs (Kubernetes Dashboard, Rancher, OpenShift).",
            "action": "1. (Symbolic) In Zeek http.log, alert on any session accessing the management UI that has a User-Agent string matching known enumeration tools like `Kube-hunter` or generic scripting agents like `python-requests` or `curl`. 2. (Statistical) For each source IP and session, calculate the ratio of unique URI paths accessed to the total number of requests within that session. A high ratio (e.g., > 0.8) suggests broad scanning rather than targeted human interaction. Alert if this ratio is in the top 98th percentile of all sessions. 3. (ML) Model user navigation patterns as sequences of URI requests. Train a sequence-based anomaly detection model (e.g., an LSTM autoencoder) on legitimate user sessions. The model will reconstruct input sequences; sessions with a high reconstruction error are flagged as anomalous, likely representing scripted or malicious navigation."
          },
          {
            "description": "A single source (user or internal pod/host) makes API calls to list or get a wide variety of different resource types (e.g., pods, secrets, deployments, nodes) within a short time frame.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server, container nodes (for pod-to-API traffic).",
            "action": "1. (Symbolic) Create an alert that triggers if a single source IP, within 5 minutes, makes API GET or LIST requests for three or more distinct sensitive resource types, such as `secrets`, `serviceaccounts`, and `roles`. 2. (Statistical) For each source IP, parse the resource type from the URI in Zeek http.log (e.g., 'pods', 'secrets', 'nodes'). Calculate the Shannon entropy of the set of unique resource types requested in a 10-minute window. A high entropy value indicates broad discovery across many resource types. Alert if the entropy score is > 3.0 or exceeds 3 standard deviations of the established baseline. 3. (ML) Use a graph-based algorithm to model API interactions. Nodes are sources (IPs) and resources (API paths), and edges are requests. Apply a community detection algorithm to find normal activity clusters. Nodes or edges that do not belong to a well-defined community can be flagged as anomalous discovery attempts."
          },
          {
            "description": "An unusually large volume of sensitive data (logs, configurations, secrets) is retrieved via API calls, or access to these resources originates from a client that does not match baselined administrative tools.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API server (specifically endpoints for secrets, configmaps, and pod logs).",
            "action": "1. (Symbolic) Create a high-priority alert for any API request to list all secrets in all namespaces (e.g., `/api/v1/secrets`) originating from any source not explicitly whitelisted for this action. 2. (Statistical) For requests to sensitive endpoints (e.g., `/log`, `/secrets`), monitor the response size in `Zeek conn.log` (`resp_bytes`). Establish a per-endpoint baseline. Alert if a response size exceeds the 99th percentile, indicating potential bulk data retrieval. 3. (ML) Train a one-class SVM classifier on feature sets from legitimate access to sensitive data. Features should include source IP, User-Agent, time of day, and specific resource path. Any new access attempt that the model classifies as an outlier is a high-fidelity alert for anomalous access to sensitive information."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]