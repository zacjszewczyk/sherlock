[
  {
    "information_requirement": "Is the adversary maintaining persistence using Systemd services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.002",
        "name": "Systemd Service",
        "evidence": [
          {
            "description": "Creation of a systemd service unit file containing known malicious filenames, paths, or command-line arguments.",
            "data_sources": [
              "auditd logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor auditd logs for file creation events (e.g., syscall `creat`, `openat` with `O_CREAT`) in systemd directories (`/etc/systemd/system/`, `/usr/lib/systemd/system/`, `~/.config/systemd/user/`). Compare the names of created `.service` files and the paths within their `ExecStart` directives against a threat intelligence feed of known malicious filenames and binary paths. Alert on any matches."
          },
          {
            "description": "A systemd service is configured to launch a scripting interpreter (e.g., sh, bash, python, perl) with suspicious arguments, such as encoded commands or redirection from network sockets.",
            "data_sources": [
              "auditd logs",
              "journalctl logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Parse newly created or modified systemd service files identified from auditd data. Scan the `ExecStart` line for common scripting interpreters. Flag instances where the interpreter is invoked with suspicious patterns indicative of obfuscation or reverse shells, such as `| base64 -d | bash`, `eval`, or redirection from `/dev/tcp`. Use linear regression to model normal command line length and complexity to flag outliers. Correlate with journalctl logs to confirm the service was started."
          },
          {
            "description": "A new or recently modified systemd service spawns a process that initiates suspicious network connections, such as communicating with a low-reputation domain or exhibiting C2-like beaconing behavior.",
            "data_sources": [
              "auditd logs",
              "journalctl logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Identify the process started by a new or modified systemd service using its PID from auditd or journalctl logs. Monitor network connections from that PID using Zeek conn.log. Analyze the connections for suspicious attributes: connections to known C2 IPs/domains from a CTI feed, use of non-standard ports, periodic connections with a fixed interval (beaconing), or high-entropy domain names. Use correlation analysis to link the service creation/modification event directly to the suspicious network behavior."
          },
          {
            "description": "A new systemd service is created, enabled, and started outside of a standard package installation or authorized administrative maintenance window.",
            "data_sources": [
              "auditd logs",
              "journalctl logs",
              "package manager logs (e.g.",
              "/var/log/dpkg.log",
              "/var/log/yum.log)"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate the creation of a new `.service` file (from auditd), the execution of `systemctl enable` or `systemctl start` (from auditd `execve` logs), and the corresponding service start messages (from journalctl) within a short time window. Cross-reference these event sequences with package manager logs. Flag any service creation/enable/start sequence that does not correspond to a legitimate software installation or a known administrative script. Use time series analysis to identify service creation activity occurring outside of normal business or maintenance hours."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using Systemd services?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.002",
        "name": "Systemd Service",
        "evidence": [
          {
            "description": "Execution of a known malicious systemd generator or a service file exploiting a specific known vulnerability (CVE) in systemd for privilege escalation.",
            "data_sources": [
              "auditd logs",
              "journalctl logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor auditd logs for process execution (`execve`) of files within systemd generator directories (e.g., `/etc/systemd/system-generators/`, `/usr/lib/systemd/system-generators/`). Compare executable names and hashes against a list of known malicious generators. Additionally, monitor journalctl for error messages or specific log patterns associated with known systemd vulnerabilities being actively exploited. Maintain and cross-reference a list of IOCs for systemd-related exploits."
          },
          {
            "description": "Modification of an existing, legitimate systemd service unit file to change the `User=` directive to `root` or to alter the `ExecStart` command to an attacker-controlled path.",
            "data_sources": [
              "auditd logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Implement File Integrity Monitoring (FIM) using auditd rules on critical systemd service files in `/etc/systemd/system/` and `/usr/lib/systemd/system/`. Alert on any modification events. For each alert, analyze the changes to detect modifications to the `User=` or `ExecStart=` directives. Flag any change that sets `User=root` on a typically non-privileged service or points `ExecStart` to a world-writable location (e.g., `/tmp`, `/dev/shm`)."
          },
          {
            "description": "A new systemd service is created by a low-privilege user, but the service unit file is configured to execute as root (`User=root`) upon next system start or service reload.",
            "data_sources": [
              "auditd logs",
              "journalctl logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor auditd for `.service` file creation events. Correlate the user ID (UID) of the process creating the file with the contents of the file itself. Alert when a non-root user (UID > 1000) creates a service file that either contains `User=root` or omits the `User` directive (which defaults to root). Use descriptive statistics to baseline which users and automated processes normally interact with service files and alert on deviations."
          },
          {
            "description": "A systemd timer (`.timer` unit) is created that triggers a malicious `.service` unit with high privileges at a specific time or interval.",
            "data_sources": [
              "auditd logs"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor auditd logs for the creation of both `.timer` and `.service` files with matching base filenames in systemd directories. When a pair is detected, parse the `.service` file to check for privilege-related directives (`User=root`) and suspicious `ExecStart` commands (e.g., pointing to `/tmp`). Use correlation analysis to link the creation of the timer and service file by the same process/user in a short time window, indicating a paired unit designed for privileged execution."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]