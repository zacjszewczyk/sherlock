[
  {
    "information_requirement": "Is the adversary using stripped payloads to evade defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.008",
        "name": "Stripped Payloads",
        "evidence": [
          {
            "description": "An executable file with a SHA256 or MD5 hash matching a known stripped malware payload from threat intelligence is observed being written to disk, transferred over the network, or executed on a host.",
            "data_sources": [
              "Zeek file.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points, User workstations, Critical application servers, File shares",
            "action": "Symbolic: Continuously compute SHA256 hashes for all executable files from network transfers (Zeek file.log) and process executions (Windows Event ID 4688). Compare these hashes against a high-confidence threat intelligence feed of known stripped malware. Generate a high-priority alert on any match. Statistical: Track the rate of new, unseen executable hashes appearing in the environment. Use a moving average and standard deviation to detect a sudden spike in new hashes across multiple hosts, which could indicate a new campaign. Alert if the rate exceeds 3 standard deviations above the 30-day average. Machine Learning: Use a supervised classification model (e.g., Random Forest) trained on file metadata (file size, MIME type, source/destination IP reputation) and hash reputation scores to predict the likelihood that a newly observed executable is malicious. The model's output score can be used to prioritize files for deeper analysis."
          },
          {
            "description": "An executable file is identified with an anomalously low count of exported symbols (e.g., fewer than 5), a low number of printable strings, or is missing standard PE metadata sections like 'VersionInfo' that are typical for legitimate, signed software.",
            "data_sources": [
              "File content analysis reports",
              "Zeek file.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File sandboxes, User workstations, Application servers, Network file shares",
            "action": "Symbolic: Create a rule that triggers if a PE file is missing a .rsrc section or has a zero-sized VersionInfo resource, both of which are highly common in legitimate software but often absent in stripped malware. Statistical: For all new executables, calculate the number of imported/exported functions and the density of printable strings. Compare these counts to a pre-computed baseline for legitimate software of a similar type (e.g., drivers, utilities). Flag any executable where the symbol count falls below the 5th percentile of its baseline group. Machine Learning: Train a clustering algorithm (e.g., DBSCAN) on a feature vector derived from static file properties (number of sections, symbol count, string density, presence/absence of metadata fields). New files that are classified as outliers by the algorithm and do not fall into established clusters of legitimate software warrant investigation as potentially stripped or malicious."
          },
          {
            "description": "An executable file exhibits unusual section entropy, such as a code section with Shannon entropy greater than 7.2 suggesting packing, or the complete absence of an expected low-entropy section like .rdata, indicating stripping of resources.",
            "data_sources": [
              "File content analysis reports",
              "Zeek file.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File sandboxes, Network egress/ingress points, User workstations",
            "action": "Symbolic: Create a detection rule that flags any executable where the .text (code) section has a Shannon entropy greater than 7.2 (indicative of packing/encryption) and the .rsrc (resource) section is either missing or has a size of zero. Statistical: For each new executable, calculate the Shannon entropy of each PE section. Establish a baseline distribution of entropy values for common section names (.text, .data, .rsrc) from known-good files. Use Inter-Quartile Range (IQR) to flag a file if its .text section entropy is an upper outlier (packed) and its .rsrc section size is a lower outlier (stripped). Machine Learning: Use an anomaly detection model, such as an autoencoder, trained on the entropy vectors of PE sections from legitimate software. The model learns to reconstruct normal entropy profiles. Files that result in a high reconstruction error are anomalous and flagged as likely packed or stripped."
          },
          {
            "description": "A process, spawned from an executable previously identified as stripped, is observed executing from a non-standard directory (e.g., %APPDATA%, C:\\Users\\Public) and initiating periodic network connections to a non-FQDN IP address or a domain with high Shannon entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain Controllers, Network egress/ingress points, DNS servers",
            "action": "Symbolic: Create a rule that correlates a process creation event (Windows Event ID 4688) from an executable previously flagged as 'stripped' with a subsequent network connection (Zeek conn.log) to an IP address on a threat intelligence blocklist within 60 seconds of execution. Statistical: For processes launched from stripped executables, analyze their network beaconing behavior from Zeek conn.log. Calculate the inter-arrival time and data volume for outbound connections. A process exhibiting highly regular connection intervals (low standard deviation) and consistent payload sizes is statistically anomalous compared to normal user-driven traffic. Flag processes where the standard deviation of beaconing intervals is below a defined threshold (e.g., < 1 second). Machine Learning: Employ a time series forecasting model (e.g., ARIMA) on the outbound traffic patterns (bytes, packets) for a new process. If the model can predict future traffic with high accuracy, it suggests automated, non-human behavior indicative of C2. An alert is generated if the forecast error remains consistently low over several intervals."
          },
          {
            "description": "A process is created with a name that masquerades as a legitimate system binary (e.g., svchost.exe, lsass.exe), but its on-disk executable path is incorrect (not in C:\\Windows\\System32), and/or its file hash does not match the known-good version for the OS.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User workstations, Critical application servers, System Registry",
            "action": "Symbolic: For every process creation event (Windows Event ID 4688) involving a critical system process name (e.g., lsass.exe, svchost.exe), trigger an alert if the process path is not C:\\Windows\\System32\\ or if the file hash does not match a known-good manifest for the specific OS build. Statistical: Establish a baseline of parent-child process relationships for legitimate system processes (e.g., services.exe is the standard parent of svchost.exe). Monitor for deviations by calculating the frequency of parent processes for svchost.exe. If a new parent process like explorer.exe appears and its occurrence frequency is a statistical outlier (e.g., falls in the bottom 1% of all observed parent-child relationships), flag it as anomalous. Machine Learning: Train a one-class SVM classifier on features of legitimate system process executions, including process path, parent process name, command-line arguments, and user context (e.g., SYSTEM). This model creates a boundary defining normal behavior. Any new process execution that falls outside this boundary is classified as an anomaly, indicating potential masquerading."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]