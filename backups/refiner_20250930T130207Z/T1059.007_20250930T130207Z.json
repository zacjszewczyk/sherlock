[
  {
    "information_requirement": "Has the adversary executed malicious code using a JavaScript interpreter?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.007",
        "name": "JavaScript",
        "evidence": [
          {
            "description": "A script host process (wscript.exe, cscript.exe, node.exe) initiates a network connection to an IP address, domain, or URL present on a threat intelligence feed, or a JavaScript file transferred over the network has a hash matching a known malicious signature.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Proxies and Gateways",
            "action": "For each script host execution (wscript.exe, cscript.exe, node.exe) identified in Windows Event ID 4688, correlate by timestamp and source IP with network logs. 1. (Symbolic) Match destination IPs (from Zeek conn.log), hostnames (from Zeek http.log), and DNS queries (from Zeek dns.log) against a threat intelligence feed of known malicious indicators. Concurrently, match the SHA256 hashes of any transferred JavaScript files (from Zeek files.log) against a known-malicious hash database. Alert on any match. 2. (Statistical) For each user, establish a baseline of domains contacted by script hosts over a 30-day period. Alert when a script host connects to a domain not present in the user's historical baseline, flagging it as a first-seen domain connection for that user's script activity. 3. (Machine Learning) Employ a classification model (e.g., Logistic Regression) trained on URL lexical features (length, entropy, presence of special characters, TLD) to score the probability of a URL being malicious. An alert is triggered if a script host connection involves a URL with a score exceeding a predefined confidence threshold (e.g., >0.90)."
          },
          {
            "description": "A script host process (wscript.exe, cscript.exe) is executed with a command line containing obfuscated code patterns or a high-entropy script file argument.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Devices, Application Servers",
            "action": "Monitor Windows Event ID 4688 for process creation of 'wscript.exe' and 'cscript.exe'. 1. (Symbolic) Apply regular expressions to the command-line arguments to detect suspicious patterns such as Base64 encoded strings, calls to 'eval()', 'ActiveXObject', or excessive string concatenation. Alert on a positive match. 2. (Statistical) For all script files (.js, .jse) passed as arguments, calculate the Shannon entropy of the file content. Establish a baseline entropy distribution for benign scripts in the environment. Alert on any script whose entropy score falls in the top percentile (e.g., >98th percentile) or exceeds a hard threshold of 7.5, indicating heavy obfuscation or encryption. 3. (Machine Learning) Train a classifier (e.g., Random Forest) on command-line features like length, argument count, special character frequency, and keyword presence. Use the model to score each script host execution's command line, alerting on those classified as having a high probability of being malicious."
          },
          {
            "description": "JavaScript content observed in network traffic contains function calls, string patterns, or structural elements associated with known malicious frameworks or C2 communication.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Application Firewalls (WAFs)",
            "action": "Extract and analyze JavaScript content from HTTP traffic using Zeek http.log and files.log. 1. (Symbolic) Use a signature-based engine (like Zeek's policy scripts or a separate IDS) to search for regular expressions matching known malicious JS libraries (e.g., BeEF hooks), obfuscation patterns (e.g., `eval(unescape(...))`), or hardcoded C2 communication strings. 2. (Statistical) For each script, calculate the ratio of potentially obfuscated function calls (e.g., `eval`, `unescape`, `String.fromCharCode`) to the total number of lines. Alert on scripts where this ratio exceeds 3 standard deviations above the rolling average for all observed scripts. 3. (Machine Learning) Tokenize the JavaScript code and use an NLP approach, such as a TF-IDF vectorizer feeding a Naive Bayes classifier, to identify scripts that are lexically similar to known malicious script families based on function names, variable names, and comments."
          },
          {
            "description": "A JavaScript interpreter (wscript.exe, cscript.exe, mshta.exe) is spawned by a non-standard parent process, or a script is executed from an atypical file system location.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Mail Servers, File Servers",
            "action": "Analyze process creation events from Windows Event ID 4688 to track parent-child relationships and execution paths. 1. (Symbolic) Create and enforce a list of known-bad parent-child relationships (e.g., WINWORD.EXE -> wscript.exe) and known-bad execution paths (e.g., C:\\Users\\Public\\*, C:\\Windows\\Temp\\*). Alert on any event matching this list. 2. (Statistical) Build a frequency table of parent processes for each script host (wscript.exe, cscript.exe, etc.) over a 30-day baseline period. Alert when a script host is launched by a parent process that falls into a low-frequency percentile (e.g., bottom 5% of observed parents), indicating a rare and suspicious event. 3. (Machine Learning) Utilize an anomaly detection model (e.g., Isolation Forest) on a feature set including parent process name, script file path entropy, and user context. The model can identify rare combinations of these features that represent a deviation from normal execution patterns, even if individual elements are not inherently suspicious."
          },
          {
            "description": "A confirmed JavaScript execution is followed within a short time window by anomalous system or network activity, such as the creation of suspicious child processes, registry modifications for persistence, or network beaconing.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, Domain Controllers",
            "action": "Correlate confirmed JavaScript execution events with subsequent system and network events from the same host within a 5-minute window. 1. (Symbolic) Alert if a script host process (wscript.exe, etc.) spawns a child process known to be used for malicious activity (e.g., powershell.exe, cmd.exe, bitsadmin.exe, certutil.exe) or modifies a known persistence registry key (e.g., HKLM\\...\\Run). 2. (Statistical) Following script execution, analyze subsequent network connections in Zeek conn.log for beaconing. Calculate the inter-arrival time and data volume for connections to a single destination. Alert if the standard deviation of the inter-arrival time is very low (indicating a regular interval) and the connection count exceeds a statistically defined threshold for that host. 3. (Machine Learning) Model event sequences as graphs, where nodes are processes and files, and edges are actions (create, connect, write). Use a graph-based anomaly detection algorithm to identify sequences of events following a script execution that are structurally dissimilar to benign sequences observed during a training period."
          },
          {
            "description": "The Node.js runtime (node.exe) is executed with a script from an untrusted directory, or its execution is followed by the creation of suspicious child processes or anomalous network communications.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Development Environments, Web Servers, User Workstations",
            "action": "Monitor Windows Event ID 4688 for process creation of 'node.exe' and analyze its command line and subsequent behavior. 1. (Symbolic) Alert when 'node.exe' is executed with a script argument from a high-risk directory, such as a user's downloads folder, temporary internet files, or a newly created directory in AppData. 2. (Statistical) Establish a baseline of normal child processes for 'node.exe' within your environment (e.g., npm.exe, git.exe). Alert if 'node.exe' spawns a child process that is statistically rare or has never been observed before, such as 'powershell.exe' or 'cmd.exe', outside of a known administrative or development task. 3. (Machine Learning) Apply a time series anomaly detection model (e.g., LSTM autoencoder) to the volume and frequency of network traffic originating from 'node.exe' processes. Train the model on legitimate traffic patterns and alert on significant deviations that could indicate C2 communication or data exfiltration."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]