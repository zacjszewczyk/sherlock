[
  {
    "information_requirement": "Is the adversary maintaining persistence by manipulating service registry entries?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.011",
        "name": "Services Registry Permissions Weakness",
        "evidence": [
          {
            "description": "A service's `ImagePath` or `binPath` registry value is modified to an executable or script interpreter whose path, name, or file hash matches known threat intelligence.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations",
            "action": "1. Ingest Windows Event ID 4657 (A registry value was modified) and filter for modifications to object names ending in `\\ImagePath` or `\\binPath` under `\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Services\\`. 2. For each modification, extract the new value (the path), the modifying process ID, and the subject user name. 3. (Symbolic) Compare the executable name, full path, and hash (obtained via endpoint tool enrichment) against threat intelligence feeds for known malicious indicators. 4. (Statistical) For the modifying process, calculate its historical frequency of modifying service registry keys. Flag modifications by processes in the bottom 5th percentile of frequency as anomalous. 5. (Machine Learning) Utilize a classification model trained on features of the modification event (e.g., path location, parent process, time of day, service name) to predict the likelihood of the change being malicious, alerting on high-probability events."
          },
          {
            "description": "A new service is created (Windows Event ID 4697) where the service name exhibits high character entropy or the ImagePath points to a statistically anomalous file location.",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations",
            "action": "1. Monitor Windows Event ID 4697 (A service was installed in the system) for all new service creations. 2. (Symbolic) Compare the new service name and executable path against a curated list of patterns (regex) associated with known malware families and persistence tools. 3. (Statistical) For each new service name, calculate its character entropy score. Establish a baseline entropy score for legitimate service names in your environment; flag new services with names exceeding the 95th percentile of this baseline. 4. (Machine Learning) Employ a clustering algorithm (e.g., DBSCAN) on new services based on features like name length, entropy, ImagePath directory, and character set. Investigate services that form small, distinct clusters or are classified as noise, as they deviate from established groups of legitimate software installations."
          },
          {
            "description": "A service's `ImagePath` or `binPath` is modified to a file path in a directory not authorized for executables, such as a user profile or temporary folder.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Multi-user Servers (e.g., Terminal Servers)",
            "action": "1. Monitor Windows Event ID 4657 for modifications to `ImagePath` or `binPath` registry values. 2. (Symbolic) Compare the directory from the new path value against an allow-list of standard executable locations (e.g., `C:\\Windows\\System32`, `C:\\Program Files\\`). Alert if the path points to a user-writable or temporary location (e.g., `C:\\Users\\*`, `C:\\ProgramData\\`, `%TEMP%`). 3. (Statistical) For each service, build a historical baseline of legitimate `ImagePath` directories. Flag any modification where the new directory is a statistical outlier (e.g., has a historical probability of less than 1% for that service). 4. (Machine Learning) Train a one-class SVM or an isolation forest model on legitimate `(service_name, image_path_directory)` pairs. Use the trained model to detect and alert on novel or anomalous pairs that deviate from the established norm."
          },
          {
            "description": "A `Performance` or `Parameters` subkey, or a `ServiceDll` value, is created or modified for a service that does not normally use them, with the new value pointing to a DLL in a rare or non-standard location.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Critical Workstations",
            "action": "1. Monitor Windows Event ID 4657 for creation/modification of `Performance` or `Parameters` subkeys, or the `ServiceDll` value, under `HKLM\\SYSTEM\\CurrentControlSet\\Services\\*`. 2. (Symbolic) If a `ServiceDll` value is modified, compare the DLL's hash and path against threat intelligence feeds. 3. (Statistical) Maintain a baseline of services that legitimately use these keys. Alert on the creation of these keys for any service not on the baseline. Further, calculate the frequency of all `ServiceDll` paths across the enterprise; flag paths that are in the bottom 5th percentile of rarity for investigation. 4. (Machine Learning) Use a classification model to score the risk of the modification based on features such as the service's historical usage of these keys, the rarity of the DLL path, and the reputation of the process that made the change."
          },
          {
            "description": "A process started by `services.exe` initiates network connections that exhibit beaconing behavior or communicate with known malicious destinations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, All Endpoints and Servers",
            "action": "1. Correlate Windows Event ID 4688 events where the parent process is `services.exe` with Zeek conn.log data by matching the host's IP and timestamp. 2. (Symbolic) Compare destination IPs from the corresponding `conn.log` entries against threat intelligence feeds of known C2 servers. Alert on any match. 3. (Statistical) For each service-spawned process, perform time-series analysis on the volume of outbound data and connection frequency. Use a statistical method like Seasonal Hybrid ESD (S-H-ESD) to detect anomalous periodic spikes indicative of beaconing. 4. (Machine Learning) Train a time-series forecasting model (e.g., LSTM) on legitimate network traffic patterns (bytes out, connection count) for each service. Alert when the observed traffic significantly deviates from the forecasted model, suggesting anomalous C2 activity or data exfiltration."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges by manipulating service registry entries?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.011",
        "name": "Services Registry Permissions Weakness",
        "evidence": [
          {
            "description": "A service's `FailureCommand` or `ImagePath` registry value is modified to execute a command or file whose hash or command-line parameters match a known privilege escalation tool.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Workstations, Multi-user Servers",
            "action": "1. Monitor Windows Event ID 4657 for modifications to `HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\FailureCommand` or `ImagePath`, prioritizing services that run as SYSTEM. 2. (Symbolic) Extract the command/path and compare its file hash and command-line arguments against a specific threat intelligence list of privilege escalation tools and payloads (e.g., PrintSpoofer, Juicy Potato, BadPotato). 3. (Statistical) Baseline the modification frequency of the `FailureCommand` value across all services. Since legitimate modifications are exceptionally rare, any modification should be treated as a high-severity statistical anomaly and trigger an alert. 4. (Machine Learning) Train a text classification model on `FailureCommand` values, using features like command length, keywords (e.g., 'powershell', 'whoami', 'net user'), and path locations to distinguish benign recovery scripts from potential privilege escalation commands."
          },
          {
            "description": "A non-administrative user or an unusual process executes `sc.exe`, `reg.exe`, or a PowerShell cmdlet to modify a service's `binPath` or other critical registry values.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. Monitor Windows Event ID 4688 for process creations of `sc.exe`, `reg.exe`, and `powershell.exe`. 2. (Symbolic) Use regular expressions to match command lines against patterns known to modify service paths, e.g., `sc.exe config .* binPath=`, `reg.exe add HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\.* /v ImagePath`. Alert if the executing user is not a member of a privileged group. 3. (Statistical) Profile the user accounts and parent processes that execute these commands. Flag executions by users outside of administrator groups or by anomalous parent processes (e.g., `outlook.exe`, `chrome.exe`) as statistical outliers. 4. (Machine Learning) Use a sequence analysis model to detect chains of events, such as a browser spawning PowerShell which then modifies a service registry key, flagging the entire sequence as high-risk."
          },
          {
            "description": "A chronological sequence of events is observed: 1) A service registry key's permissions are changed (EID 4670). 2) The service's `ImagePath` or `FailureCommand` is modified by the user who gained permissions (EID 4657). 3) The service starts, resulting in a privileged process execution (EID 4688).",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Administrative Workstations",
            "action": "1. Create a correlation search that triggers on a Windows Event ID 4670 (Permissions on an object were changed) for an object name under `\\REGISTRY\\MACHINE\\SYSTEM\\CurrentControlSet\\Services`. 2. (Symbolic) Within 10 minutes of the trigger, look for a Windows Event ID 4657 (Registry value modified) on the same object name, where the Subject/User matches the user granted permissions in the 4670 event. If this sequence occurs, alert. 3. (Statistical) Measure the time delta between the 4670 and 4657 events. A delta below a statistically determined threshold (e.g., 5 minutes, or the 1st percentile of observed deltas for legitimate changes) strongly indicates an automated exploit chain. 4. (Machine Learning) Use a graph-based analysis tool to model these event sequences as paths. Train a model to recognize legitimate administrative workflows, and alert on paths that deviate, such as those initiated by non-administrative users or involving short time-to-live permission changes."
          },
          {
            "description": "A service's `FailureCommand` registry value is populated or modified, and the service's failure actions are configured to 'Restart the Service' or 'Run a Program'.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. Monitor Windows Event ID 4657 for modifications to `HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\FailureCommand`. 2. (Symbolic) Upon detection, automatically query the service's failure actions (e.g., via `sc qfailure <servicename>`). If the actions are set to restart or run a program, and the new `FailureCommand` points to an executable in a non-standard location (e.g., `%APPDATA%`), generate a high-severity alert. 3. (Statistical) Establish a baseline of which services have a non-empty `FailureCommand`. The population of this value for a service where it is normally empty is a statistical anomaly. 4. (Machine Learning) Use an NLP model to classify the content of the `FailureCommand` string. Train the model to recognize malicious patterns (e.g., encoded PowerShell, network connection commands) versus benign recovery scripts, and alert on malicious classifications."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to evade defenses by manipulating service registry entries?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.011",
        "name": "Services Registry Permissions Weakness",
        "evidence": [
          {
            "description": "A service's `ImagePath` is modified to a Living Off the Land Binary (LOLBAS) whose command-line arguments contain encoded payloads or references to malicious scripts.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. Monitor Windows Event ID 4657 for `ImagePath` modifications. When the service starts, inspect the corresponding process creation event (Windows Event ID 4688). 2. (Symbolic) If the `ImagePath` contains a known LOLBAS (e.g., `rundll32.exe`, `mshta.exe`, `powershell.exe`), use regex on the full command line from Event 4688 to detect suspicious patterns like `-enc`, `IEX`, `DownloadString`, or references to `.ps1`, `.sct`, or `.hta` files. 3. (Statistical) For LOLBAS executions spawned by services, calculate the entropy and length of the command-line arguments. Flag executions where these values exceed the 98th percentile of the established baseline for that LOLBAS. 4. (Machine Learning) Train a classifier on LOLBAS command lines to distinguish benign from malicious usage. Features can include argument count, presence of URLs, Base64 strings, and specific flags, enabling detection of novel evasion techniques."
          },
          {
            "description": "A service's `DisplayName` or `Description` is modified to a value that is a minor misspelling of a legitimate service, while its `ImagePath` points to an atypical executable or location.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4697",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. On service creation (Event ID 4697) or modification (Event ID 4657), extract the `DisplayName`, `Description`, and `ImagePath`. 2. (Symbolic) Compare the `DisplayName` against a list of legitimate service names using a Levenshtein distance calculation. A low distance (e.g., 1-2) indicates a potential misspelling (e.g., 'WinDefend' vs 'WinDefend'). If a misspelling is found, and the `ImagePath` is not the legitimate system path for that service, alert. 3. (Statistical) Create a baseline map of `(DisplayName, ImagePath)` pairs. Alert on any modification that creates a known `DisplayName` paired with a statistically rare or never-before-seen `ImagePath`. 4. (Machine Learning) Use a clustering algorithm on all services based on features of their name and path. Masquerading services will likely form a small, distinct cluster that can be flagged for investigation."
          },
          {
            "description": "A service's `ImagePath` is modified to use a LOLBAS to execute content from an Alternate Data Stream (ADS), such as `wmic process call create 'notepad.exe:payload.exe'`.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. Monitor Windows Event ID 4657 for modifications to `ImagePath` values. 2. (Symbolic) Scan the new `ImagePath` command string for syntax indicating ADS execution. This includes a colon `:` separating a legitimate filename from a stream name, especially when used as an argument to a LOLBAS like `wmic.exe`, `rundll32.exe`, or `certutil.exe`. 3. (Statistical) The use of ADS syntax within a service `ImagePath` is exceptionally rare in legitimate operations. A simple frequency count where any count > 0 serves as a high-confidence statistical alert. 4. (Machine Learning) Train a text-based classifier on service `ImagePath` command strings to identify suspicious syntax. Features would include the presence and position of colons, specific LOLBAS names, and arguments like 'call create', which are characteristic of this evasion technique."
          },
          {
            "description": "A registry value for a critical security service (e.g., EDR, antivirus, Windows Defender) is modified, changing its `Start` type to disabled (4) or altering its `ImagePath`.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. Maintain a list of critical registry keys corresponding to security services (e.g., `HKLM\\SYSTEM\\CurrentControlSet\\Services\\WinDefend`, `HKLM\\SYSTEM\\CurrentControlSet\\Services\\Sysmon`). 2. (Symbolic) Monitor Windows Event ID 4657 for any modification to these keys. Create a high-priority alert if the `Start` value is changed to `4` (Disabled) or if the `ImagePath` is changed to anything other than its known-good value. 3. (Statistical) Monitor the population-wide rate of modifications to these specific keys. A sudden increase in modifications across the environment is a statistical anomaly indicating a coordinated tampering campaign. 4. (Machine Learning) Use an anomaly detection model (e.g., isolation forest) trained on legitimate modification events for these services (e.g., during approved patching cycles). The model can detect and alert on any modification that is an outlier based on its context (e.g., time of day, modifying process, user account)."
          },
          {
            "description": "A process not associated with system administration (e.g., `winword.exe`, `chrome.exe`) modifies a registry key under `HKLM\\SYSTEM\\CurrentControlSet\\Services\\`.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers",
            "action": "1. For every Windows Event ID 4657 modifying a key under `HKLM\\SYSTEM\\CurrentControlSet\\Services\\`, correlate the Process ID with Windows Event ID 4688 to identify the modifying process name and path. 2. (Symbolic) Maintain an allow-list of processes authorized to modify service registry keys (e.g., `svchost.exe`, `TrustedInstaller.exe`, `sc.exe`, `powershell.exe`). Alert on any modification performed by a process not on this list. 3. (Statistical) For all processes observed modifying service registry keys, calculate their prevalence (frequency) across the enterprise. Flag modifications made by processes in the bottom 5th percentile of frequency as they are statistically rare and warrant investigation. 4. (Machine Learning) Train a classification model (e.g., Random Forest) to predict if a `(Modifying_Process_Name, Target_Service_Name)` pair is malicious. Features can include process signature status, user context, and time of day, allowing detection of suspicious modifications even from seemingly legitimate processes."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]