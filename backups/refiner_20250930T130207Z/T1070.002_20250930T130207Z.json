[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by clearing logs on Linux or macOS systems? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.002",
        "name": "Clear Linux or Mac System Logs",
        "evidence": [
          {
            "description": "Execution of a process where the file hash matches a known malicious log-clearing utility or malware component.",
            "data_sources": [
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, Log aggregation servers",
            "action": "1. (Symbolic) Ingest process creation events (Sysmon for Linux Event ID 1) into a SIEM. Continuously compare the file hash (SHA256) of every executed process against a threat intelligence feed of known malicious hashes. Generate a high-severity alert upon a match. 2. (Statistical) Calculate the enterprise-wide prevalence of every file hash executed. Flag processes whose hash has been seen on fewer than 1% of endpoints and is not part of a known-good software inventory. 3. (ML) Utilize a pre-trained classification model that scores process executions based on features like hash prevalence, file path, parent process, and user context. Alert on processes classified as 'malicious' with high confidence, even if the hash is not on a known-bad list."
          },
          {
            "description": "Execution of a shell command, utility, or script containing arguments and redirection operators designed to truncate, delete, or overwrite standard Linux/macOS log files (e.g., in /var/log).",
            "data_sources": [
              "Auditd execve syscall",
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, DMZ servers",
            "action": "1. (Symbolic) Monitor process command lines (from Sysmon EID 1 or auditd) for regular expression matches on log clearing patterns, such as `> /var/log/`, `cat /dev/null >`, `shred /var/log/`, `rm /var/log/auth.log`, or `truncate -s 0 /var/log/wtmp`. Alert on any match. 2. (Statistical) For each user, establish a baseline of command-line argument entropy and frequency of specific commands like 'truncate' or 'shred'. Alert if a user executes a command whose entropy is in the 95th percentile for that user or if the frequency of a rare command spikes more than three standard deviations above their individual baseline. 3. (ML) Employ a time-series anomaly detection model on the frequency of log-clearing command patterns per host. An alert is triggered if a sudden burst of these commands deviates significantly from the host's established seasonal baseline of administrative activity."
          },
          {
            "description": "Execution of shell commands specifically intended to tamper with, disable, or delete the shell command history file.",
            "data_sources": [
              "Auditd execve syscall",
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Interactive shell access points, Privileged user workstations and servers, Jump boxes",
            "action": "1. (Symbolic) Create detection rules to search process command lines for keywords and patterns indicative of history tampering, such as `unset HISTFILE`, `export HISTFILE=/dev/null`, `history -c`, `ln -s /dev/null .*_history`, or `rm .*_history`. 2. (Statistical) Track the first-time use of any history-tampering command by a user account. A 'first seen' event for these specific commands is inherently suspicious and should be flagged for review. Calculate the daily count of such commands per user and alert if the count exceeds the 99th percentile for all users. 3. (ML) Utilize a sequence analysis model (e.g., LSTM) to analyze command sequences within a user session. The model, trained on normal command progressions, should flag sessions where a history-clearing command immediately follows suspicious activity like network reconnaissance or privilege escalation, as this sequence is a strong indicator of malicious intent."
          },
          {
            "description": "Anomalous file modification or deletion events targeting critical log files or directories, characterized by an unusual source process or a high frequency of activity outside of normal log rotation.",
            "data_sources": [
              "Auditd unlink/truncate/rename syscall",
              "Sysmon for Linux Event ID 11",
              "Sysmon for Linux Event ID 23",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log directories on critical servers (/var/log, /var/run/), User home directories (for .*_history files), Network gateway for traffic correlation",
            "action": "1. (Symbolic) Create a correlation rule that alerts if a file deletion event (Sysmon EID 23 or auditd `unlink`) targets a file in `/var/log/` and the process responsible for the deletion has an active network connection to an external, non-categorized IP address (from Zeek conn.log) within the last five minutes. 2. (Statistical) For each host, calculate an hourly moving average and standard deviation for file deletion events in `/var/log/`. Alert if the current hour's count exceeds three standard deviations above the average, while excluding events from known log rotation processes (e.g., `logrotate`). 3. (ML) Implement a time-series anomaly detection model (e.g., ARIMA) on the volume of file modification and deletion events in log directories. The model should be trained to understand normal seasonality (e.g., nightly log rotation). An alert is generated when the observed event volume significantly deviates from the forecasted volume."
          },
          {
            "description": "Anomalous stoppage, disabling, or fatal error of a critical logging service (e.g., auditd, rsyslogd, syslog-ng) not associated with a scheduled maintenance window.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Auditd execve/kill syscall"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux and macOS endpoints and servers, Change management database/ticketing system",
            "action": "1. (Symbolic) Trigger an alert on the execution of commands that stop or disable logging daemons, such as `systemctl stop auditd`, `service rsyslog stop`, `launchctl unload com.apple.syslogd`, or a `kill` command targeting the PID of a known logging process. Cross-reference the alert time with a change management system to suppress alerts for planned maintenance. 2. (Statistical) Establish a baseline for the frequency of logging service stop/restart events per host over 30 days. Flag any host that exhibits a daily count of these events in the top 99th percentile across the enterprise, indicating abnormal tampering. 3. (ML) Deploy a 'heartbeat' monitoring system where each logging agent is expected to check in at regular intervals. Use an ML model to predict the next expected heartbeat. An alert is triggered if a heartbeat is missed beyond a dynamically adjusted tolerance, indicating the service is down unexpectedly."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]