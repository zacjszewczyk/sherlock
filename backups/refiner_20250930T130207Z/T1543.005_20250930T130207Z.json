[
  {
    "information_requirement": "Is the adversary establishing persistence using container services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "Deployment of containers using image names or hashes known to be malicious or associated with persistence TTPs.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Parse container creation commands (e.g., `docker run`, `podman run`, Kubernetes API calls logged in host process events) from Windows Event ID 4688. Extract the container image name, tag, and hash. Correlate these atomic indicators against a continuously updated Cyber Threat Intelligence (CTI) feed of known malicious container images. Alert on any confirmed match."
          },
          {
            "description": "A container service is created or modified to include specific persistence-enabling command-line flags or is configured to run as a system service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 for container command-lines (`docker run`, `podman run`) that include persistence flags such as `--restart=always`. Concurrently, monitor Windows Event ID 4697 (A service was installed in the system) and Event ID 4688 for `sc.exe` or `New-Service` PowerShell cmdlet usage where the service's binary path executes a container command, thereby establishing it as a persistent system service. Flag any new or unauthorized use of these specific patterns."
          },
          {
            "description": "A Kubernetes DaemonSet or Pod is deployed with a configuration explicitly designed for persistence across cluster nodes.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Zeek conn.log for connections to the Kubernetes API server (typically port 6443 or 443). Analyze the corresponding Zeek http.log requests for `CREATE` or `UPDATE` HTTP methods targeting API endpoints for `daemonsets` or `pods`. Inspect the request payload (if available/logged) for configurations patterns like `kind: DaemonSet` or `spec.restartPolicy: Always`. Alert on deployments originating from unauthorized sources or those not conforming to approved operational templates."
          },
          {
            "description": "A newly deployed container service initiates network communications that deviate from established baselines, such as connecting to rare external destinations or using non-standard protocols.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate container creation events (Windows Event ID 4688) with the subsequent network activity (Zeek conn.log) originating from that container. Establish a baseline of normal destination IPs, ports, and protocols for containerized applications. Use descriptive statistics (frequency analysis, percentile ranking) to identify containers communicating with low-frequency external IPs or using non-standard ports. Employ time series analysis to detect sudden changes in data transfer volume from a container, which could indicate a newly established C2 channel for persistence."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using container services?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.005",
        "name": "Container Service",
        "evidence": [
          {
            "description": "Execution of container commands or API calls matching signatures for known container escape vulnerabilities.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Maintain and apply a list of regular expressions or signatures for known container escape vulnerabilities (e.g., CVEs like 'Dirty Pipe', specific runc exploits, etc.) against container-related command lines captured in Windows Event ID 4688 and Kubernetes API requests logged in Zeek http.log. Alert immediately on any match, as this is a high-confidence selector for an active exploitation attempt."
          },
          {
            "description": "A container is created or executed using command-line patterns that grant high privileges or mount sensitive host system directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4688 for container command-lines (`docker run`, `podman run`, etc.) containing high-privilege flag patterns such as `--privileged`, `--security-opt seccomp=unconfined`, or `--cap-add=SYS_ADMIN`. Concurrently, search for volume mount patterns (`-v` or `--mount`) that map to sensitive host directories like `C:\\`, `C:\\Windows`, `C:\\Users`, `/etc`, `/var/run/docker.sock`, or the root directory `/`. Alert on any unauthorized use of these configurations."
          },
          {
            "description": "A process associated with a container runtime spawns an anomalous child process on the host, or a process is observed running on the host with unexpected container-related context, indicating a container escape.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Servers",
              "Endpoints"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Build process trees to identify processes whose parent is a container runtime (e.g., `dockerd.exe`, `containerd-shim-runc-v2.exe`). Establish a baseline of normal child processes for these runtimes. Monitor for behavioral anomalies, such as the runtime spawning an interactive shell (`cmd.exe`, `powershell.exe`), user management tools (`net.exe`), or network reconnaissance tools (`whoami.exe`, `ipconfig.exe`). Use parent-child process analysis and entropy measures on command-line arguments to detect deviations from normal operations."
          },
          {
            "description": "A container initiates network connections to internal network segments or administrative services that violate the principle of least privilege, suggesting a breakout or misconfiguration exploit.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate the creation of a new container (from Windows Event ID 4688) with its subsequent network activity (Zeek conn.log). Baseline the expected network reachability for different types of containerized applications. Alert when a container initiates connections to internal management interfaces (e.g., other container hosts, hypervisors), sensitive servers (e.g., domain controllers, database backends), or other network segments outside its defined role. Use correlation analysis to link the container deployment time with the start of the anomalous network scanning or connection attempts."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]