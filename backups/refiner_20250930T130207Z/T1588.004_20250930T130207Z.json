[
  {
    "information_requirement": "Is the adversary developing resources related to digital certificates?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1588.004",
        "name": "Digital Certificates",
        "evidence": [
          {
            "description": "A direct match is found between an observed SSL/TLS certificate's thumbprint, serial number, or subject details and a known-bad indicator from a high-fidelity cyber threat intelligence (CTI) feed specializing in malicious infrastructure.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Forward Web Proxies, Threat Intelligence Platform",
            "action": "1. (Symbolic) Continuously ingest Zeek ssl.log data into a SIEM. Extract certificate thumbprints (SHA1), serial numbers, subject common names (CN), and issuer distinguished names (DN). Create a rule that joins this data with a cyber threat intelligence (CTI) feed of known-malicious certificate attributes. Trigger a high-severity alert on any direct match. 2. (Statistical) For any CTI-matched certificate, analyze the associated connections in Zeek conn.log. Calculate the entropy of the server_name field (SNI); a value exceeding the 95th percentile of typical SNI entropy in the environment suggests DGA activity. Also, calculate the ratio of inbound to outbound bytes; a high ratio for a connection using a known-bad cert is anomalous. 3. (Machine Learning) Feed features from matched events (e.g., CTI source reputation, connection duration, total bytes, protocol, SNI entropy, destination port) into a supervised classification model trained to distinguish between true positive CTI hits and false positives. Use the model's output score to automatically escalate high-probability events for immediate analyst review."
          },
          {
            "description": "An SSL/TLS certificate is observed where the Subject Common Name (CN) or a Subject Alternative Name (SAN) contains typosquatted or homoglyph variations of the organization's domain, or is a dynamic DNS hostname issued by a free Certificate Authority.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Forward Web Proxies, Internal DNS Resolvers",
            "action": "1. (Symbolic) From Zeek ssl.log, create a rule that triggers when a certificate's issuer is a known free CA (e.g., Let's Encrypt, ZeroSSL) AND the certificate's CN or SAN matches a regex for common dynamic DNS providers (e.g., '.*\\\\.duckdns\\\\.org', '.*\\\\.no-ip\\\\.com'). 2. (Statistical) For all observed external certificates, calculate the Levenshtein distance between the certificate's domain and a master list of your organization's domains. Flag any certificate for a domain with a distance less than 3 for manual review as a potential typosquat. 3. (Machine Learning) Employ an NLP-based classification model trained to recognize malicious domain names. Feed all CNs and SANs from new certificates into the model. Use its output to score the likelihood of the domain being generated for phishing or C2, and alert on scores exceeding a predefined confidence threshold."
          },
          {
            "description": "Anomalous SSL/TLS certificate characteristics observed in network traffic, such as extremely short validity periods, issuance by rarely seen or non-standard Certificate Authorities, or certificates for domains with very recent registration dates.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Zeek x509.log",
              "External WHOIS Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Threat Intelligence Platforms, SIEM/Data Analytics Platform",
            "action": "1. (Symbolic) Create a rule to alert when a certificate from a free CA (e.g., Let's Encrypt) is used for a domain whose registration date (via WHOIS enrichment) is less than 7 days old. 2. (Statistical) Maintain a running baseline of all certificate issuers and their frequency. Alert on any certificate issued by a CA that falls into the bottom 5th percentile of frequency for your environment. Similarly, alert on certificates with a validity period that is in the bottom 10th percentile (e.g., < 30 days), as this is anomalous for paid certificates. 3. (Machine Learning) Employ an unsupervised anomaly detection model (e.g., Isolation Forest) on a feature set derived from Zeek x509.log and WHOIS data, including [validity_period, domain_age, number_of_SANs, public_key_length]. The model will score each certificate based on its deviation from normal patterns, with high scores indicating potential adversary development infrastructure."
          },
          {
            "description": "An unusual increase in the prevalence of self-signed certificates, certificates with validation errors (e.g., expired, revoked, name mismatch), or certificates issued by unexpected internal CAs is observed for external communications or on sensitive internal systems.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log",
              "Windows Event ID CAPI2 11",
              "Windows Event ID CAPI2 21",
              "Windows Event ID CAPI2 30",
              "Windows Event ID CAPI2 41",
              "Windows Event ID CAPI2 53"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Internal Server Segments, Domain Controllers, All Windows Endpoints and Servers",
            "action": "1. (Symbolic) From Zeek ssl.log, create a high-severity alert for any connection to a non-private IP address where the `validation_status` is 'selfsigned'. Correlate with Windows CAPI2 logs on the source host to check for manual trust installation. 2. (Statistical) For each distinct validation error type (e.g., 'certificate_expired', 'bad_certificate_hash'), establish a baseline of daily occurrences. Alert when the count for any error type exceeds its 99th percentile, indicating an unusual spike. 3. (Machine Learning) Implement a time series anomaly detection model on the overall volume of certificate validation errors observed at the network edge. The model will learn the normal daily and weekly patterns. An alert is generated when the observed error count deviates significantly from the predicted pattern, which could indicate a large-scale adversary campaign or network device issue."
          },
          {
            "description": "Multiple distinct SSL/TLS certificates, each with suspicious characteristics (e.g., from free CAs, for young domains), are observed resolving to a single IP address, or a single suspicious certificate is reused across multiple unrelated domains or IP addresses.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, SIEM/Data Analytics Platform, Graph Database Platform",
            "action": "1. (Symbolic) Create a rule that tracks certificate thumbprints. If a single, non-CDN thumbprint is seen being served by more than five distinct destination IP addresses over a 7-day period, generate an alert. This indicates potential reuse of a certificate across adversary infrastructure. 2. (Statistical) For every destination IP address, count the number of unique certificate subjects it serves. Establish a baseline for this count. Alert on any IP address where the count of unique subjects exceeds the 99th percentile, which could indicate a server hosting many unrelated malicious sites. 3. (Machine Learning) Construct a graph where nodes are IPs, Certificate Thumbprints, and Subjects. Create edges representing the relationships 'IP serves Thumbprint' and 'Thumbprint has Subject'. Apply a community detection algorithm (e.g., Louvain) to find clusters of related infrastructure. Score each cluster based on the proportion of nodes with suspicious attributes (e.g., free issuer, recent domain registration) to prioritize investigation."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]