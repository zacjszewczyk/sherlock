[
  {
    "information_requirement": "Is the adversary developing resources for operations, specifically DNS infrastructure?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1583.002",
        "name": "DNS Server",
        "evidence": [
          {
            "description": "An internal host sends a DNS query for a domain or to a DNS server IP address that matches a record on a high-confidence threat intelligence feed for known malicious or adversary-controlled infrastructure.",
            "data_sources": [
              "Zeek dns.log",
              "Windows Event ID 260"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Enterprise DNS Resolvers",
            "action": "1. (Symbolic) Continuously ingest high-confidence threat intelligence feeds of malicious domains and DNS server IPs. Create a detection rule that performs a real-time match between the 'query' field in Zeek dns.log and the malicious domain feed, AND between the 'answers' field (resolved IPs) and the malicious IP feed. Any match triggers a high-severity alert. 2. (Statistical) For domains that match the threat feed, calculate the frequency of queries from unique internal source IPs ('id.orig_h'). If the number of unique clients querying the malicious domain is below the 5th percentile for all external domains (indicating targeted rather than widespread activity), escalate the alert priority. 3. (Machine Learning) Train a binary classification model (e.g., Logistic Regression) using features from the threat feed (e.g., feed source, confidence score) and internal query data (e.g., query frequency). Use the model to classify new matches as either 'High-Confidence True Positive' or 'Requires Analyst Vetting' to prioritize alerts from lower-confidence feeds."
          },
          {
            "description": "A DNS query from an internal host is for a domain that is a typographical or visual permutation (e.g., typosquatting, homoglyph) of a monitored list of corporate, partner, or high-value brand domains.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Endpoint Devices",
            "action": "1. (Symbolic) Maintain a list of monitored corporate and partner domains. Use a script to pre-generate common permutations (e.g., using dnstwist). Create a detection rule that matches the 'query' field in Zeek dns.log against this pre-generated list. A match triggers a medium-severity alert. 2. (Statistical) For all queried domains not on an allowlist, calculate the Levenshtein distance against the monitored domain list. Flag any domain with a distance less than 3. Separately, calculate the character entropy of the flagged domain name; a domain with both high similarity to a brand asset and high entropy (e.g., above the 90th percentile) should have its risk score increased. 3. (Machine Learning) Vectorize all queried domain names using character n-grams. Use a clustering algorithm like DBSCAN to group syntactically similar domains. Apply an anomaly detection model (e.g., Isolation Forest) to these clusters to identify domains that are syntactically similar to each other but not to any known-good domain, a pattern often seen with domain generation algorithms (DGAs)."
          },
          {
            "description": "An internal host is one of the first within the organization to resolve a domain registered within the last 30 days, which also exhibits other suspicious properties like low Time-To-Live (TTL).",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Enterprise DNS Resolvers, Endpoint Devices of High-Value Targets",
            "action": "1. (Symbolic) For every unique domain in Zeek dns.log, perform a WHOIS lookup to get the creation date. Create a rule that alerts if a domain's creation date is less than 30 days old AND the DNS response TTL value is less than 300 seconds. 2. (Statistical) Establish a baseline of 'first seen' domains. Calculate the 95th percentile for TTL values and the 5th percentile for domain age for all newly observed domains. Create a risk score where risk = (1 / age_in_days) + (1 / TTL). Alert on queries where this risk score exceeds 3 standard deviations above the mean risk score for new domains seen in a 24-hour period. 3. (Machine Learning) Model the count of 'first seen' newly registered domains (NRDs) per hour as a time series. Use a forecasting model like SARIMA to predict the expected number of new NRD queries. An observed count that significantly exceeds the model's prediction interval indicates a potential campaign kickoff involving newly created infrastructure."
          },
          {
            "description": "Multiple, distinct, newly registered domains (NRDs) queried by internal hosts resolve to the same IP address or a small set of related IP addresses, suggesting they are all part of the same adversary-controlled infrastructure.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Passive DNS databases, Cloud Provider Network Infrastructure",
            "action": "1. (Symbolic) From Zeek dns.log, create a table of (domain, resolved_ip). Enrich with WHOIS data for domain age. Filter for domains younger than 60 days. Group by 'resolved_ip' and count unique domains. Create a rule that alerts if count(unique_domains) > 3 for a single IP address. 2. (Statistical) For all IP addresses that resolve NRDs, calculate the ratio of NRDs to total domains resolving to that IP. An IP address where this ratio is in the top 99th percentile is highly suspicious. Further, calculate the Jaccard similarity coefficient between the sets of internal hosts querying the different NRDs on that IP; high similarity indicates a coordinated group of compromised hosts. 3. (Machine Learning) Construct a bipartite graph where nodes are 'internal hosts' and 'resolved IPs'. Draw an edge if a host queried a domain resolving to that IP. Use a community detection algorithm (e.g., Louvain Modularity) to find clusters. A community with a small number of IPs and a distinct set of internal hosts, where the IPs are known to host NRDs, strongly suggests a C2 cluster."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]