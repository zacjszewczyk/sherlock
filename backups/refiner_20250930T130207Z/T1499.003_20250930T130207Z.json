[
  {
    "information_requirement": "Has the adversary caused a denial of service by exhausting application resources? (PIR)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1499.003",
        "name": "Application Exhaustion Flood",
        "evidence": [
          {
            "description": "A measurable volume of inbound connections (e.g., >100 connections in 5 minutes) originates from source IP addresses listed on a current, high-confidence threat intelligence feed for DoS activity or botnet membership.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, Application Load Balancers",
            "action": "1. Symbolic: Ingest threat intelligence feeds (e.g., lists of known DoS botnets, open proxies, TOR exit nodes) into the SIEM. Create a rule to generate an alert whenever a source IP from Zeek conn.log matches an IP on these lists and is communicating with a critical application port (e.g., 80, 443). 2. Statistical: For IPs matching the symbolic rule, calculate the connection rate per minute. If the rate for a single source IP exceeds the 99th percentile of the baseline connection rate for all external IPs, escalate the alert priority. The baseline should be calculated over the last 30 days of Zeek conn.log data. 3. Machine Learning: Develop a logistic regression model trained on historical data (labeled with known good and bad IPs from past incidents and threat feeds). Use features such as orig_bytes, resp_bytes, duration, and connection state (conn_state) from Zeek conn.log. Use this model to assign a probability score to each new connection from an IP flagged by the symbolic rule, providing a confidence level for the alert."
          },
          {
            "description": "HTTP requests contain User-Agent strings, URI patterns, or request headers that match signatures of known application-layer DoS tools (e.g., GoldenEye, Slowloris, RUDY).",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "API Gateways, Public-facing Web Servers",
            "action": "1. Symbolic: Maintain a watchlist of regular expressions matching User-Agent strings and other header values of known DoS tools. Create a SIEM rule to scan the user_agent and other relevant fields in Zeek http.log for matches. Alert on any match. 2. Statistical: For each source IP, calculate the Shannon entropy of its requested URIs over a 1-minute window. A very low entropy score indicates repetitive requests to the same resource. Flag any source IP whose URI entropy falls below a dynamically calculated threshold (e.g., 10th percentile of typical user session entropy). 3. Machine Learning: Use a pre-trained or custom-trained classifier (e.g., a Random Forest) to analyze features from Zeek http.log such as method, uri length, request_body_len, and the presence of specific headers. The model should classify each session as benign or malicious (DoS-related). A high confidence classification of 'malicious' for a session that also triggered a symbolic rule should be a high-severity alert."
          },
          {
            "description": "A rapid, sustained increase in connection or request volume to a specific application service, where the rate exceeds 3 standard deviations of the established 30-day rolling baseline for that time of day and day of week.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Load Balancers, Public-facing Web Servers",
            "action": "1. Symbolic: Define a static threshold rule that triggers if the number of connections per minute to a specific web server IP and port combination exceeds a high-water mark (e.g., 10,000 connections/min), which would indicate a massive, unsophisticated flood. 2. Statistical: For each application, establish a baseline of requests per minute using historical Zeek http.log data, segmented by hour of day and day of week. Continuously monitor the current request rate and calculate the z-score: $$ z = (x - \\mu) / \\sigma $$, where $$ x $$ is the current rate, $$ \\mu $$ is the baseline mean, and $$ \\sigma $$ is the baseline standard deviation. Alert if $$ z > 3 $$. 3. Machine Learning: Implement a time series forecasting model (e.g., ARIMA or Prophet) on the request rate data from Zeek http.log. The model will predict the expected request volume for the next interval with a confidence band. An alert is generated if the actual observed volume significantly exceeds the upper bound of the predicted confidence interval for a sustained period (e.g., > 2 consecutive minutes)."
          },
          {
            "description": "A cluster of application crash or resource exhaustion events (e.g., Windows Event ID 1000, 2004) on a server occurs within 5 minutes of a network traffic anomaly detected on that same host.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 2004",
              "Windows Event ID 5011",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, Backend Database Servers",
            "action": "1. Symbolic: Create a correlation rule in the SIEM that triggers when a critical Windows Event ID (e.g., 1000 'Application Error', 2004 'Resource-Exhaustion-Detector', 5011 'A worker process ... failed to respond to a ping') is logged on a server that is also the destination of an active network traffic alert. 2. Statistical: Establish a baseline for the rate of these critical events per server per hour. Use a Poisson distribution model to identify a statistically significant increase in the event count. An alert is triggered if the observed count in a given hour is highly improbable under the baseline model (e.g., p-value < 0.01). 3. Machine Learning: Use an unsupervised learning algorithm like DBSCAN to cluster server events in time. Features would include server hostname, event ID, and timestamp. If a dense cluster of resource-related error events forms and its timeframe overlaps with a network anomaly detected by a time-series model, escalate to a high-priority incident."
          },
          {
            "description": "A single source IP is responsible for a number of requests to a known resource-intensive API endpoint (e.g., /api/search, /api/report) that is in the 99.5th percentile of requests per source IP for that endpoint.",
            "data_sources": [
              "Zeek http.log",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "API Gateways, Application Logic Servers",
            "action": "1. Symbolic: Maintain a list of known resource-intensive URIs (e.g., search functions, report generators). Create a rule that alerts if any single source IP makes more than a hard-coded number of requests (e.g., >50) to any of these URIs within one minute. 2. Statistical: For each resource-intensive URI, profile the distribution of requests per source IP over a 5-minute window from Zeek http.log. Calculate the 99.5th percentile for this distribution. Create a rule that fires when any source IP's request count exceeds this dynamic threshold. 3. Machine Learning: Use a clustering algorithm (e.g., K-Means) to group user sessions based on features like session duration, number of requests, URIs requested, and average time between requests. Identify the centroid of the 'heavy user' cluster. Any new session that is a significant outlier from this centroid in the direction of extremely high request frequency to a single endpoint is flagged as a potential application exhaustion attack."
          },
          {
            "description": "A set of HTTP requests from a single source IP exhibits an average inter-request time of less than 100 milliseconds and a Shannon entropy score for request parameters below 1.0, indicating automated, repetitive requests.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing Web Servers, API Gateways",
            "action": "1. Symbolic: Search Zeek http.log for requests with exceptionally large request_body_len (e.g., > 10MB) or URI length (e.g., > 2048 characters) targeting application endpoints, which are common signatures for specific exhaustion exploits. Alert on any match. 2. Statistical: For each source IP and destination server pair, calculate two metrics over a 1-minute window from Zeek http.log and Zeek conn.log: (a) the average inter-arrival time between consecutive requests, and (b) the Shannon entropy of the uri field. Create a rule that alerts if the average inter-arrival time is below a threshold (e.g., < 100ms) AND the URI entropy is also below a threshold (e.g., < 1.0). 3. Machine Learning: Use an Isolation Forest algorithm to detect anomalies in multi-dimensional request data. Features for the model can include request_body_len, inter-arrival time, URI entropy, and the ratio of orig_bytes to resp_bytes from Zeek conn.log. The algorithm is efficient at identifying outliers without needing pre-labeled training sets, making it ideal for detecting novel or unusual request patterns."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]