[
  {
    "information_requirement": "Is the adversary evading defenses by using encrypted or encoded files to hide malicious artifacts? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.013",
        "name": "Encrypted-Encoded File",
        "evidence": [
          {
            "description": "A file is created or transferred that has a hash (MD5, SHA1, SHA256) matching a known malicious file associated with encrypted payloads or malicious SFX packers from threat intelligence feeds.",
            "data_sources": [
              "Zeek files.log",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways, email servers, user workstations, file servers, web application servers",
            "action": "Implement a three-tiered detection strategy for known malicious files. First (Symbolic): Continuously ingest file hash IOCs from threat intelligence feeds. For every file observed in Zeek files.log or from endpoint file creation events (Windows Event ID 4663), calculate its hash and match against the IOC database; generate a high-severity alert upon a match. Second (Statistical): Track the rate of IOC matches over time. Apply a moving average to the count of unique hash matches per hour. Trigger an alert if the current rate exceeds 3 standard deviations above the 7-day moving average, which could indicate a widespread campaign. Third (Machine Learning): Develop a file reputation classifier using features such as the file's source (domain, IP), MIME type, and size. Train a logistic regression or gradient boosting model to predict the probability of a file being malicious. A file with a high predicted probability, even without a direct IOC match, warrants investigation."
          },
          {
            "description": "A process is created with command-line arguments that include known decoding utilities (e.g., certutil.exe -decode), Base64 decoding functions in scripting languages (e.g., PowerShell's FromBase64String), or the execution of a self-extracting archive from an untrusted location.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, application servers, domain controllers",
            "action": "Deploy a multi-faceted approach to detect decoding activity. First (Symbolic): Using Windows Event ID 4688 and 4104, apply a library of regular expressions to command-line arguments and script block content to detect explicit calls to decoding utilities like 'certutil -decode', PowerShell's 'FromBase64String', or 'Invoke-Expression' combined with encoded strings; alert on any match. Second (Statistical): For each process name (e.g., powershell.exe, cmd.exe), establish a baseline of normal command-line length and character entropy. Calculate the Shannon entropy of the command-line arguments for each execution. Flag any execution where the command-line length or entropy exceeds the 98th percentile for that specific process. Third (Machine Learning): Train a supervised classification model (e.g., an NLP-based transformer or a simpler logistic regression model using n-gram features) on a labeled dataset of benign and malicious command lines to classify new command lines from Event ID 4688 as suspicious or benign. Prioritize suspicious classifications for investigation."
          },
          {
            "description": "A file is observed with a filename containing multiple extensions where the final extension is executable (e.g., '.pdf.exe') or a script (e.g., '.txt.vbs'), or a text-based file contains a non-standard or manipulated Byte Order Mark (BOM) sequence.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network shares, user home directories, email attachment directories, web download folders",
            "action": "Detect deceptive filenames and content through a layered analytic process. First (Symbolic): From Zeek files.log and Windows Event ID 4663, use regular expressions (e.g., /.*\\.(pdf|docx|txt|jpg)\\.(exe|js|vbs|ps1)$/i) to detect filenames with deceptive double extensions and alert immediately. Additionally, scan the first few bytes of text files for non-standard BOMs (e.g., UTF-7). Second (Statistical): Maintain a frequency count of all file extension patterns observed. Use a rarity score for each pattern and flag any filename pattern that is exceptionally rare (e.g., seen less than 5 times in the last 90 days). Third (Machine Learning): Develop a time series anomaly detection model (e.g., ARIMA) to monitor the daily count of files with suspicious double extensions. A sudden spike deviating significantly from the forecast indicates a potential campaign and should trigger an alert."
          },
          {
            "description": "A file is created or transferred that exhibits a Shannon entropy value significantly higher than the established baseline for its file type (e.g., entropy > 7.5 for a .txt file), or is identified as a password-protected archive, and is located in a high-risk directory like a user's Downloads or Temp folder.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile temporary directories (e.g., %TEMP%, %APPDATA%), web browser cache/download folders, network egress points",
            "action": "Identify high-entropy files using a structured detection model. First (Symbolic): For files identified as archives (e.g., .zip, .rar) in Zeek files.log, check for a 'password protected' flag if the analysis tool provides it. Alert when a password-protected archive is downloaded from an untrusted external source. Second (Statistical): For each file from Windows Event ID 4663 or Zeek files.log, calculate its Shannon entropy. Maintain a baseline distribution (mean, standard deviation) of entropy values for each common file extension. Flag any file whose entropy is more than 3 standard deviations above the mean for its type. Third (Machine Learning): Train an unsupervised anomaly detection model, such as an Isolation Forest, on file metadata features (extension, size, entropy, source IP reputation, destination path). The model will assign an anomaly score to new files, with high-scoring files prioritized for review as potential obfuscation."
          },
          {
            "description": "A process command line, script log, or network packet (HTTP, DNS) contains an encoded string (Base64, Hex) whose length or frequency significantly exceeds the established baseline for the context in which it appears (e.g., a 4KB Base64 string in a DNS TXT query).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Name System (DNS) infrastructure, web proxies, user workstations, application servers",
            "action": "Detect anomalous encoded strings across multiple data sources. First (Symbolic): Using regular expressions, scan Windows Event ID 4688 command lines, PowerShell logs (Event ID 4104), Zeek http.log POST bodies, and Zeek dns.log query fields for patterns matching Base64 or hexadecimal encoding; alert if found in an unexpected context. Second (Statistical): For each context (e.g., PowerShell command line, DNS TXT query), calculate the length of any detected encoded string. Establish a baseline distribution of these lengths and trigger an alert if a new string's length exceeds the 99th percentile for its context. Third (Machine Learning): Implement a time series forecasting model (e.g., Prophet) for the volume of encoded data observed per hour in specific network channels (e.g., DNS TXT queries). An observation that falls significantly outside the model's prediction interval should be flagged as a potential C2 or exfiltration channel."
          },
          {
            "description": "A sequence of correlated events occurs within a short time window (<5 minutes): (1) A process creates or reads a high-entropy file. (2) The same process or a child process executes a command containing a decoding function or creates a new executable file. (3) The process or its child initiates an outbound network connection to a new or low-reputation IP address.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, critical servers (e.g., Domain Controllers, database servers), network egress points",
            "action": "Detect malicious sequences by correlating events across endpoint and network logs. First (Symbolic): Create a SIEM correlation rule that triggers on a sequence of (A) Windows Event ID 4663 (File Create) of a high-entropy file, followed by (B) Windows Event ID 4688 (Process Create) by the same Process ID with a command line containing decoding keywords, within 60 seconds. Second (Statistical): Develop a risk scoring model for process parent-child relationships. Assign points for suspicious sequences (e.g., Word spawning PowerShell, PowerShell making an external network connection via Zeek conn.log). A cumulative score exceeding a statistically determined threshold (e.g., top 1% of all session scores) triggers an alert. Third (Machine Learning): Use a graph-based analysis model where nodes are processes, files, and network connections. Train a graph neural network (GNN) on labeled activity graphs to learn attack structures and apply it in real-time to detect subgraphs matching malicious sequences."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]