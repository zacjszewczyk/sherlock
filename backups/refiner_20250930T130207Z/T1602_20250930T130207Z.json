[
  {
    "information_requirement": "Has the adversary collected sensitive data from configuration repositories? (PIR)",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1602",
        "name": "Data from Configuration Repository",
        "evidence": [
          {
            "description": "A network connection or authentication event to a configuration repository that originates from an IP address on a threat intelligence feed or uses credentials known to be compromised.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek snmp.log",
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "For each connection to a repository, enrich the source IP from Zeek conn.log or Windows Event ID 4624 with geolocation and threat intelligence data. (1) Symbolic: Create an alert if the source IP matches an entry on a high-confidence threat intelligence list or if the authenticating username is on a list of known compromised credentials. (2) Statistical: For each repository, baseline the rarity of source ASNs and countries. Flag any connection from a source IP that is both on a threat list and falls in the top 99th percentile of geographic rarity for that server. (3) Machine Learning: Train a classification model (e.g., Logistic Regression) using features like IP reputation, ASN rarity, time of day, and credential status (known compromised) to produce a probability score of the session being malicious. A high probability score triggers an alert."
          },
          {
            "description": "One or more SNMP queries targeting Object Identifiers (OIDs) associated with sensitive configuration data (e.g., 1.3.6.1.4.1.9.9.92.1.1.1.1.2 for Cisco running config via TFTP) or process execution events for network scanning tools on non-administrative hosts.",
            "data_sources": [
              "Zeek snmp.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "Analyze SNMP traffic and host process events for signs of targeted collection. (1) Symbolic: In Zeek snmp.log, search for GET/GETBULK requests containing OIDs from a watchlist of sensitive identifiers (e.g., private MIBs for device configs). In Windows Event ID 4688, alert on execution of 'snmpwalk.exe' or 'nmap.exe' with SNMP script arguments on non-administrative workstations. (2) Statistical: Calculate the Shannon entropy of OIDs requested by a single source IP in Zeek snmp.log within a 5-minute window. A high entropy value suggests broad reconnaissance, whereas normal monitoring is low entropy. Alert if entropy exceeds 3 standard deviations from the administrative baseline. (3) Machine Learning: Apply a sequence analysis model (e.g., Hidden Markov Model) to SNMP query sequences. Train the model on legitimate administrative SNMP patterns to flag query sequences that have a low probability of being generated by a legitimate process."
          },
          {
            "description": "A network connection to a configuration repository from a source IP address, network segment, or TCP/UDP port that deviates from an established baseline of legitimate administrative access.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "Identify anomalous network pathways to configuration repositories. (1) Symbolic: Maintain an explicit allow-list of administrative subnets or jump boxes authorized to access repositories. Alert on any connection in Zeek conn.log originating from an IP address not on this list. (2) Statistical: For each repository, baseline the access frequency of source subnets. Use percentile-based alerting to flag connections from a source subnet that falls into the 98th percentile for rarity (i.e., is a very infrequent source). (3) Machine Learning: Use an unsupervised clustering algorithm like DBSCAN on connection metadata from Zeek conn.log (features: source IP, destination port, protocol, bytes transferred). Legitimate traffic will form dense clusters; the algorithm will identify outliers (noise points) representing anomalous connections for investigation."
          },
          {
            "description": "A network session involving a configuration repository where the volume of data transferred from the repository to the client (resp_bytes) significantly exceeds the established baseline for normal administrative tasks.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "Detect bulk data collection from repositories. (1) Symbolic: Alert on any single session from a non-administrative source IP that transfers more than a hard threshold of data (e.g., 50MB) from a configuration repository, which could indicate a full configuration backup exfiltration. (2) Statistical: For each source-repository pair, model the distribution of 'resp_bytes' from Zeek conn.log. Calculate the Z-score for each new connection's byte count and alert on any connection where the Z-score is greater than 3.5. (3) Machine Learning: Implement a time series forecasting model (e.g., ARIMA) on the aggregate data volume transferred from each repository per hour. If the actual observed volume significantly exceeds the model's prediction confidence interval, generate an alert for a potential bulk data transfer event."
          },
          {
            "description": "A successful authentication event (e.g., Windows Event ID 4624) to a configuration repository management interface that exhibits one or more anomalous properties, such as impossible travel, unusual time-of-day, or following a high-rate of failed authentications.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "Identify compromised accounts used to access repositories. (1) Symbolic: Alert on any successful login (Windows Event ID 4624) that follows more than 15 failed login attempts (Windows Event ID 4625) from the same source IP within a 5-minute window. (2) Statistical: For each administrative user, baseline login hours and source geolocations. Trigger an alert for 'impossible travel' (logins from two distant geolocations in an impossible timeframe) or if a login occurs more than 4 standard deviations from the user's mean login hour. (3) Machine Learning: Employ a UEBA system or an Isolation Forest model trained on features from Windows Event ID 4624 and Zeek conn.log (user, source IP, geolocation, time of day, day of week). The model learns a profile of normal behavior for each user and flags logins that are identified as significant outliers."
          },
          {
            "description": "A file system or object access event (e.g., Windows Event ID 4663) on a server hosting configuration data, where an unauthorized process or user attempts to read a sensitive configuration file or backup archive.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Management System (NMS) servers, Core network infrastructure (routers, switches), Domain Controllers (for GPO repositories), Cloud management consoles and API endpoints, Version control systems (e.g., Git, SVN) storing infrastructure-as-code",
            "action": "Detect direct, unauthorized access to configuration files on disk. (1) Symbolic: Configure SACLs on critical configuration directories (e.g., 'C:\\configs\\', '.../tftpboot/') to generate Windows Event ID 4663. Alert on any access event where the 'ProcessName' is not in an allow-list of administrative tools or where the 'SubjectUserName' is not a member of a repository administrators group. (2) Statistical: For each monitored sensitive file, baseline its access frequency. Use a simple count-based threshold to alert if a typically dormant file (e.g., a yearly backup archive) is accessed more than once in a 24-hour period. (3) Machine Learning: Use a classification model (e.g., Random Forest) to determine if a file access event is malicious. Train the model on Windows Event ID 4663 data, using features like process name, user account, time of day, and file path rarity to distinguish routine scripting from anomalous access by suspicious processes."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]