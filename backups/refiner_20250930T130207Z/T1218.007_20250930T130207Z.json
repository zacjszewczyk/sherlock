[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using msiexec.exe?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.007",
        "name": "Msiexec",
        "evidence": [
          {
            "description": "An msiexec.exe process command line contains a URL or IP address that matches a threat intelligence feed, or the SHA256 hash of the subsequently downloaded file matches a known malicious hash.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers; Network egress points (e.g., perimeter firewalls, web proxies); Threat intelligence platform.",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of malicious domains, URLs, and file hashes. Create a SIEM rule to monitor Windows Event ID 4688 for msiexec.exe executions where the command line contains 'http://' or 'https://'. Extract the domain/URL and match it against the threat intelligence feed. 2. (Statistical) For all domains contacted by msiexec.exe, calculate the domain's age and its prevalence (number of unique hosts contacting it) across the enterprise. Flag executions where the domain is younger than 30 days and has been accessed by fewer than 0.1% of hosts, as these are statistically indicative of suspicious infrastructure. 3. (ML) Train a classification model (e.g., Random Forest) on features extracted from the command line and network logs, such as URL path entropy, TLD, destination port, and threat intelligence scores. Use the model to classify each msiexec.exe execution involving a remote package with a probability score of being malicious, alerting on scores above a defined threshold (e.g., 0.85)."
          },
          {
            "description": "An msiexec.exe process is executed with the command-line arguments `/q` (or `/quiet`, `/qn`) and `/i` in conjunction with `http://` or `https://`, or with the arguments `/y` (register DLL) or `/z` (unregister DLL).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers with command-line logging enabled; Centralized log aggregation platform (e.g., SIEM).",
            "action": "1. (Symbolic) Create a high-fidelity detection rule to flag any msiexec.exe execution (Windows Event ID 4688) where the command line matches the pattern `(* /q * /i * http* *)` or `(* /quiet * /i * http* *)` or `(* /qn * /i * http* *)`. Create a separate high-priority rule for any command line containing `/y` or `/z` arguments. 2. (Statistical) For all msiexec.exe executions, build a 90-day baseline of command-line switch combinations. Identify and score executions containing switch combinations that fall below the 5th percentile of frequency. A combination of silent installation from a remote source (`/q`, `/i`, `http`) is likely to have a very low frequency and thus a high anomaly score. 3. (ML) Use a one-class SVM (Support Vector Machine) anomaly detection model trained on a baseline of legitimate msiexec.exe command-line argument vectors. The model will identify novel or unusual combinations of arguments, such as the simultaneous use of silent installation flags with remote sources or DLL registration, which deviate significantly from the learned 'normal' behavior."
          },
          {
            "description": "The parent process of msiexec.exe is identified as a process not typically associated with software installation, such as `winword.exe`, `excel.exe`, `outlook.exe`, `powershell.exe`, `wscript.exe`, or a browser process (e.g., `chrome.exe`, `msedge.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All host endpoints and servers with process relationship (parent/child) logging enabled.",
            "action": "1. (Symbolic) Create a detection rule that triggers when an msiexec.exe process (from Windows Event ID 4688) has a parent process from a list of non-standard initiators, including `winword.exe`, `excel.exe`, `outlook.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`, `chrome.exe`, `msedge.exe`, `firefox.exe`. 2. (Statistical) Establish a baseline of all parent-child process relationships involving `msiexec.exe` across the enterprise. For each host and user, calculate the historical frequency of each parent process. Flag any execution where the parent process is statistically rare for that specific host or user profile (e.g., a parent process that has never been seen before or accounts for less than 1% of historical invocations). 3. (ML) Develop a time-series anomaly detection model (e.g., Prophet) on the frequency of `msiexec.exe` executions spawned by scripting engines (`powershell.exe`, `wscript.exe`) per hour. A sudden, sharp spike in these events that deviates significantly from the forecasted trend could indicate a widespread campaign."
          },
          {
            "description": "Following the execution of msiexec.exe, the same process ID (PID) or a child process establishes one or more network connections to an external IP address not associated with the initial package download.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points; All host endpoints and servers.",
            "action": "1. (Symbolic) Create a rule that joins Windows Event ID 4688 (for `msiexec.exe` process creation) with Zeek conn.log on the source IP and a 5-minute time window. Alert if a destination IP from `conn.log` matches a threat intelligence feed of C2 servers AND the `conn.log` entry's timestamp is after the process creation time. 2. (Statistical) For each `msiexec.exe` execution, analyze subsequent outbound connections from the host in Zeek conn.log. Calculate the entropy of the JA3/JA3S hash seen in the TLS handshake. A JA3/JA3S hash that is in the 99th percentile for entropy, or is statistically rare (<1st percentile) across the enterprise, indicates non-standard TLS libraries potentially used by a malicious payload. 3. (ML) Use a time-series forecasting model (e.g., ARIMA) to predict the expected volume of outbound data (`orig_bytes` in Zeek conn.log) from a host. If, after an `msiexec.exe` execution, the actual data volume significantly exceeds the prediction (> 3 standard deviations), flag it as a potential C2 communication or data exfiltration anomaly."
          },
          {
            "description": "An msiexec.exe process is executed with a full command line string that has a low frequency of occurrence or high character-level entropy when compared to a 30-day rolling baseline of all `msiexec.exe` command lines in the environment.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregation platform (e.g., SIEM); All host endpoints and servers.",
            "action": "1. (Symbolic) Define a rule that flags any `msiexec.exe` command line (from Windows Event ID 4688) containing substrings indicative of obfuscation, such as 'powershell -e', 'certutil', or a Base64 string pattern of more than 50 characters. 2. (Statistical) Maintain a 30-day rolling baseline of all unique `msiexec.exe` command lines. For each new execution, if the command has occurred less than 5 times enterprise-wide (or falls below the 1st percentile of frequency), flag it for review. Additionally, calculate the Shannon entropy of the command line string; flag commands with entropy scores greater than the 99th percentile of the baseline. 3. (ML) Implement a character-level LSTM (Long Short-Term Memory) autoencoder trained on a large corpus of legitimate `msiexec.exe` command lines. Process new commands through the model and calculate the reconstruction error. A high error score indicates the command is anomalous and does not conform to learned legitimate patterns, suggesting obfuscation or malicious syntax."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]