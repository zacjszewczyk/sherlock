[
  {
    "information_requirement": "Is the adversary using signed code to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1553.002",
        "name": "Code Signing",
        "evidence": [
          {
            "description": "Execution of a binary where the file hash (e.g., SHA256) or the signing certificate's thumbprint matches a value on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints, servers, and network data transfer points (e.g., web proxies, email gateways).",
            "action": "1. (Symbolic) Ingest high-confidence threat intelligence feeds for malicious file hashes and compromised certificate thumbprints. Create a SIEM rule to query all process creation events (Sysmon Event ID 1) and file creation events (Zeek files.log) in real-time. Generate a high-priority alert upon any match. 2. (Statistical) For every observed certificate thumbprint, calculate its prevalence (number of hosts it's seen on) within the enterprise over the last 30 days. Correlate this with external prevalence from threat intelligence. A certificate with low internal prevalence but high external malicious prevalence should be flagged as suspicious. 3. (ML) Train a supervised classification model (e.g., Logistic Regression) using features such as `is_on_ti_feed_hash`, `is_on_ti_feed_cert`, `internal_cert_prevalence`, and binary metadata. The model will produce a risk score for each execution, allowing for more nuanced alerting than a simple binary match."
          },
          {
            "description": "Execution of a binary signed by a Certificate Authority (CA) whose issuer name is not on an approved enterprise allow-list, or whose subject name has a string similarity score above 0.85 to a known legitimate publisher.",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints and servers, particularly those outside of standard software management.",
            "action": "1. (Symbolic) Maintain an explicit allow-list of approved CA 'Issuer' names based on enterprise trust stores and legitimate software vendors. Ingest all process execution events (Sysmon Event ID 1) and filter for signed binaries. Alert on any execution where the certificate's 'Issuer' is not on the allow-list. 2. (Statistical) Maintain a list of common, legitimate software 'Subject' names. For each new signed binary, calculate the Jaro-Winkler or Levenshtein distance between its 'Subject' and all names on the legitimate list. Flag any binary with a similarity score exceeding a defined threshold (e.g., 0.85) that is not an exact match, indicating potential impersonation. 3. (ML) Develop a classification model that uses NLP-derived features from the 'Issuer' and 'Subject' strings (e.g., character n-grams, term frequency). Train the model to distinguish between legitimate and suspicious certificate subjects, identifying patterns of mimicry that simple string distance metrics might miss."
          },
          {
            "description": "A binary is executed that is self-signed (Issuer matches Subject) and not on an internal allow-list, or is signed by a certificate issued within the last 7 days.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 3002",
              "Windows Event ID 3004"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints and servers, internal development environments, and code signing infrastructure.",
            "action": "1. (Symbolic) Maintain an allow-list of certificate thumbprints for all known-good, internally developed, self-signed applications. Monitor Sysmon Event ID 1 and alert whenever a process executes where the certificate 'Issuer' and 'Subject' fields are identical and the thumbprint is not on the allow-list. 2. (Statistical) For every signed process execution, calculate the certificate's age (current date minus 'Valid From' date). Establish a baseline of typical certificate ages. Alert on any execution where the certificate's age is in the bottom 1st percentile (e.g., < 7 days old), as this is a common adversary tactic. 3. (ML) Use an unsupervised anomaly detection model like Isolation Forest on a feature set including `certificate_age`, `is_self_signed` (boolean), `issuer_prevalence`, and `subject_string_entropy`. This model can identify unusual combinations of these attributes that represent anomalous certificates without prior labeling."
          },
          {
            "description": "A signed binary executes from a user-writable directory (e.g., `C:\\Users\\*\\Downloads`, `%APPDATA%`) and is not part of an approved software installation process.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations and servers, focusing on temporary directories, user profiles, and public-writable folders.",
            "action": "1. (Symbolic) Create a list of forbidden execution directories (e.g., `*\\Temp\\*`, `*\\Downloads`, `C:\\PerfLogs`). Generate an alert for any signed process (Sysmon Event ID 1) that executes from a path matching this list, excluding known-good installers or updaters. 2. (Statistical) For each unique certificate subject (e.g., 'Google LLC'), build a baseline of its top 95% most common execution paths. Alert when a binary signed by that subject executes from a path not in its established baseline. This identifies legitimate software running from an unusual location. 3. (ML) Train a decision tree or random forest classifier to predict whether an execution path is suspicious. Features should include path depth, presence of keywords ('user', 'public', 'temp'), whether the directory is user-writable, and the certificate subject. This model can learn complex rules about which paths are acceptable for which signers."
          },
          {
            "description": "A signed binary, within 60 seconds of execution, either spawns an unsigned child process, modifies a persistence registry key, or initiates a network connection to a domain with a high entropy score indicative of a Domain Generation Algorithm (DGA).",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 13",
              "Sysmon Event ID 22",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints, DNS servers, and network egress points (firewalls/proxies).",
            "action": "1. (Symbolic) Create a correlation rule that triggers when a signed process (Sysmon EID 1) is immediately followed by: a child process with no signature, a registry modification to a 'Run' key (Sysmon EID 13), or a network connection (Sysmon EID 3) to an IP on a threat feed. 2. (Statistical) For DNS queries (Sysmon EID 22, Zeek dns.log) originating from a signed process, calculate the Shannon entropy of the queried domain name. Alert if the entropy is in the top 99th percentile for the environment, which is indicative of DGA. Also, track the parent-child signature status; alert if a signed parent spawns a statistically significant number of unsigned children. 3. (ML) Use a graph-based analysis where nodes are processes and edges represent relationships (child process, network connection). Apply a trained Graph Neural Network (GNN) to score subgraphs of activity originating from a signed process. The GNN can learn complex multi-step attack patterns, such as a signed dropper launching an unsigned payload which then connects to a suspicious domain."
          },
          {
            "description": "The same signed binary (by file hash) executes on a number of hosts greater than 3 standard deviations above the mean for that binary, or a group of hosts exhibit an execution time standard deviation in the bottom 1st percentile, indicating synchronized activity.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized logging platform (e.g., SIEM, data lake) containing process execution logs from all enterprise assets.",
            "action": "1. (Symbolic) For any given signed file hash not on an allow-list of common software, trigger an alert if it is seen executing on more than a fixed number of hosts (e.g., 20) within a 5-minute window. This threshold should be tuned to avoid false positives from legitimate software rollouts. 2. (Statistical) For each file hash seen executing on multiple hosts within an hour, calculate the standard deviation of the execution timestamps. A standard deviation below a low threshold (e.g., < 5 seconds) indicates highly synchronized execution. Alert on hashes in the bottom 1st percentile of timestamp standard deviation. 3. (ML) Use a time-series clustering algorithm (e.g., DBSCAN on execution timestamps) to group hosts. For a given binary hash, this can identify distinct clusters of coordinated execution activity, even if multiple independent campaigns are occurring. This is more robust than a single standard deviation calculation."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]