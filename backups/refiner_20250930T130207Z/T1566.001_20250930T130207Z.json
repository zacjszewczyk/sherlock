[
  {
    "information_requirement": "Has the adversary gained initial access to the network via spearphishing attachments?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1566.001",
        "name": "Spearphishing Attachment",
        "evidence": [
          {
            "description": "An email attachment's file hash (MD5, SHA1, SHA256), sender IP address, or sender domain matches an entry on a high-confidence threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Zeek files.log",
              "Zeek smtp.log",
              "Zeek intel.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Email gateway, network perimeter firewalls, network security monitoring sensors (e.g., Zeek sensors at the internet gateway).",
            "action": "1. Symbolic Logic (IOC Matching): Ingest high-confidence threat intelligence feeds for malicious file hashes (SHA256, MD5), sender domains, and sender IP addresses into a SIEM or Zeek's Intelligence Framework. Continuously match `fuid` and `tx_hosts`/`rx_hosts` from `Zeek smtp.log` with `files.log` to associate files with emails. Compare extracted file hashes, sender IPs, and domains against the intelligence feeds. Generate a high-severity alert for any match recorded in `Zeek intel.log`. 2. Statistical Analysis (Domain Rarity): For each sender domain in `Zeek smtp.log`, calculate its historical sending frequency to the organization over the last 90 days. Calculate the entropy of the subdomain structure. Flag domains that fall below a rarity threshold (e.g., seen less than 5 times, or in the 5th percentile of frequency) and have a high subdomain entropy score, as these are often characteristics of algorithmically generated malicious domains. 3. Machine Learning (Domain Classification): Train a supervised classification model (e.g., Logistic Regression, Random Forest) on a labeled dataset of benign and malicious domains. Features for the model should include domain length, character distribution (e.g., ratio of numbers to letters), presence of keywords ('login', 'secure', 'update'), domain age, and WHOIS information. Use this model to classify new sender domains in real-time and assign a risk score. Escalate domains with a score above a predefined threshold for analyst review."
          },
          {
            "description": "A process creation event is observed where the executable name contains a double extension (e.g., report.pdf.exe), a mismatched extension (e.g., an executable with a .jpg icon), or the process path is a temporary directory commonly used by email clients (e.g., Outlook's 'Content.Outlook' folder).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly those of executives, finance, and HR personnel who are common targets for spearphishing.",
            "action": "1. Symbolic Logic (Rule-Based Detection): Create SIEM rules to monitor Windows Event ID 4688. The rules should trigger on process creation events where: (a) the process name matches a regex for double extensions (e.g., `.*\\.(pdf|docx|xlsx|jpg)\\.exe$`), or (b) the process path is within a known email client temporary directory (e.g., `C:\\Users\\*\\AppData\\Local\\Microsoft\\Windows\\INetCache\\Content.Outlook\\*`). 2. Statistical Analysis (Path and Process Rarity): For each process creation event, create a composite key of `(hostname, process_path, process_name)`. Maintain a historical baseline (e.g., 30-day rolling window) of execution frequencies for these keys across the enterprise. Calculate the rarity score based on the inverse frequency. Flag executions that are in the lowest percentile (e.g., 1st percentile) of historical frequency, indicating a process that has rarely or never been seen executing from that path before. 3. Machine Learning (Anomaly Detection): Use an unsupervised anomaly detection model (e.g., Isolation Forest or One-Class SVM) trained on features from Windows Event ID 4688. Features should include process path depth, length of process name, entropy of the process name, and categorical features for the parent process. The model will learn the profile of 'normal' process executions and flag any new execution that significantly deviates from this learned profile as a potential anomaly requiring investigation."
          },
          {
            "description": "A process command line contains obfuscated or suspicious arguments, such as Base64 encoded strings, download cradles (`IEX (New-Object Net.WebClient).DownloadString`), or direct invocations of remote scripts, particularly when executed by a script host (powershell.exe, wscript.exe) or mshta.exe.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI environments, terminal servers.",
            "action": "1. Symbolic Logic (Signature Matching): Deploy SIEM rules that use regular expressions to scan command lines (from Event ID 4688) and PowerShell script blocks (from Event ID 4104). Match against a library of known malicious patterns, including `DownloadString`, `FromBase64String`, `Invoke-Expression`, `mshta.exe http://`, and other indicators of fileless malware and downloaders. 2. Statistical Analysis (Command Line Entropy & Length): For every process creation event, calculate the Shannon entropy and length of the command line arguments. Establish a baseline for common processes (e.g., powershell.exe, cmd.exe). Flag any command line whose entropy or length exceeds a high percentile threshold (e.g., 99th percentile) compared to its historical baseline, as this often indicates obfuscation or long, complex malicious commands. 3. Machine Learning (NLP Classification): Train a Natural Language Processing (NLP) model, such as a Bag-of-Words or TF-IDF model coupled with a Naive Bayes or SVM classifier, on a large dataset of labeled malicious and benign command lines and PowerShell scripts. Use this model to classify new command lines and script blocks in real-time, assigning a probability of maliciousness. Escalate events with a high probability score for analyst review."
          },
          {
            "description": "A Microsoft Office application process (e.g., winword.exe, excel.exe, powerpnt.exe) spawns a child process that is a command-line interpreter or scripting host (e.g., cmd.exe, powershell.exe, wscript.exe, mshta.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, network egress/ingress points for correlating host and network events.",
            "action": "1. Symbolic Logic (Parent-Child Process Relationship): Create a SIEM correlation rule that triggers when a process creation event (Windows Event ID 4688) has a `ParentProcessName` from the set {'winword.exe', 'excel.exe', 'powerpnt.exe', 'outlook.exe'} and a `NewProcessName` from the set {'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', 'mshta.exe'}. Generate a medium-severity alert for this relationship. 2. Statistical Analysis (Process Chain Rarity): Maintain a baseline of all parent-child process relationships observed in the environment. Calculate the frequency of each unique `(ParentProcessName, NewProcessName)` pair. Assign a risk score based on the inverse frequency of the observed process chain. Further increase the score if the child process subsequently makes a network connection (`Zeek conn.log`) to a domain with a low reputation score or one that is statistically rare (e.g., low prevalence in `Zeek dns.log`). 3. Machine Learning (Graph-Based Anomaly Detection): Model process execution activity as a directed graph where nodes are processes and edges are parent-child relationships. Use a graph-based anomaly detection algorithm to identify rare or abnormal subgraphs, such as the Office-spawns-shell-spawns-network-connection chain. This approach can identify not just the initial suspicious spawning, but the entire subsequent attack chain, even if individual components appear benign in isolation."
          },
          {
            "description": "An internal host initiates an outbound network connection to a low-reputation or newly observed external IP address or domain within minutes of receiving an email from an external sender. The connection characteristics (e.g., port, protocol, data volume) are anomalous for the host.",
            "data_sources": [
              "Zeek smtp.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek intel.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Email gateway, DNS resolvers, network egress/ingress points.",
            "action": "1. Symbolic Logic (Temporal Correlation): Create a SIEM rule that joins `Zeek smtp.log` events with `Zeek conn.log` and `Zeek dns.log` events. Trigger an alert if a host (`id.resp_h`) makes an outbound connection to an external IP/domain that is present on a threat intelligence feed (`Zeek intel.log`) within 5 minutes of that same host (`recipient` IP) receiving an email. 2. Statistical Analysis (Beaconing Detection): For outbound connections following an email receipt, analyze the periodicity and jitter of the connections. Group connections by destination IP and calculate the standard deviation of the time deltas between connections. A very low standard deviation indicates a fixed-interval beacon, a common C2 behavior. Flag connections exhibiting this regularity. 3. Machine Learning (Time Series Forecasting): For each host, build a time series model (e.g., ARIMA or LSTM) based on historical `Zeek conn.log` data to forecast expected outbound network traffic volume and connection counts. After an email is received (`Zeek smtp.log`), monitor the host's actual network traffic. If the observed traffic significantly exceeds the forecasted values (i.e., the residual error is greater than 3 standard deviations), flag it as a post-delivery anomaly potentially caused by a malicious payload executing and calling back."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]