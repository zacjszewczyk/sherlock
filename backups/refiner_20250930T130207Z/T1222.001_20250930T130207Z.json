[
  {
    "information_requirement": "Is the adversary modifying file or directory permissions to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1222.001",
        "name": "Windows File and Directory Permissions Modification",
        "evidence": [
          {
            "description": "A process with a file hash matching a known-malicious signature in a threat intelligence feed is observed executing file or directory permission modification commands (`icacls.exe`, `cacls.exe`, `takeown.exe`, `attrib.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with heightened focus on Domain Controllers, critical application servers, and file servers.",
            "action": "1. (Symbolic) Implement a SIEM rule to monitor process creation events (Windows Event ID 4688). For each event, calculate the process image hash and query a threat intelligence platform API. Generate a critical alert if a process with a known-bad hash executes `icacls.exe`, `cacls.exe`, `takeown.exe`, `attrib.exe`, or `powershell.exe` with `Set-Acl`. 2. (Statistical) For processes triggering the symbolic rule, analyze the command-line arguments. Calculate the entropy of the command line; unusually high entropy may indicate obfuscation or randomized arguments used by malware. Compare the entropy score against a baseline of legitimate admin commands and flag deviations greater than 3 standard deviations. 3. (ML) Train a supervised classification model (e.g., Random Forest) on labeled process execution data (Event ID 4688), using features like parent process name, command-line length, command-line entropy, and user context. Use the model to classify executions of permission-modifying tools as benign or malicious, flagging those classified as malicious with high confidence."
          },
          {
            "description": "The execution of `icacls`, `cacls`, `takeown`, `attrib`, or PowerShell's `Set-Acl` is observed with command-line arguments that grant broad permissions (e.g., FullControl, Modify) to permissive groups (e.g., Everyone, Authenticated Users) on sensitive system files or directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical system directories (e.g., C:\\Windows\\System32, C:\\ProgramData) and user profile directories on all Windows endpoints and servers.",
            "action": "1. (Symbolic) Create a detection rule using regular expressions to search command-line logs from Windows Event ID 4688. The rule should flag executions of `icacls.exe`, `cacls.exe`, or `Set-Acl` containing both a permissive group (e.g., 'Everyone', 'Authenticated Users') and a broad permission level (e.g., '/grant.*:F', 'FullControl') targeting files in critical directories. Also flag `takeown.exe /f` on system files or `attrib.exe -s -h`. 2. (Statistical) For each user, establish a baseline of the frequency and type of permission-modifying commands they execute. Calculate the 95th percentile for the number of such commands per hour. Generate an alert when a user exceeds this percentile, especially if the commands target sensitive paths not typically associated with their role. 3. (ML) Use a pre-trained NLP model (e.g., a transformer-based classifier) to analyze command-line arguments. Fine-tune the model to classify command lines as 'benign administrative action', 'suspicious modification', or 'malicious modification' based on the combination of the tool, arguments, target path, and executing user context."
          },
          {
            "description": "A file object access event (Windows Event ID 4670) shows permissions being modified on a file designated as a high-value target for persistence, such as an accessibility feature binary (`sethc.exe`, `Utilman.exe`) or a startup script.",
            "data_sources": [
              "Windows Event ID 4670"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system locations on Windows hosts containing binaries for accessibility features (e.g., C:\\Windows\\System32\\sethc.exe) and logon/startup script directories.",
            "action": "1. (Symbolic) Enable object access auditing on a watchlist of critical system files. Create a high-priority alert that triggers immediately upon detection of a Windows Event ID 4670 (Permissions on an object were changed) where the `ObjectName` matches a file on the watchlist (e.g., `sethc.exe`, `Utilman.exe`, `magnify.exe`). 2. (Statistical) For the watchlist files, perform a time-series analysis of modification events (Event ID 4670) over a 90-day period to establish a baseline. Legitimate changes should be extremely rare or non-existent. Use a simple thresholding model where any count > 0 in a 24-hour period is flagged as a high-severity anomaly. 3. (ML) Develop an unsupervised anomaly detection model (e.g., Isolation Forest) trained on Event ID 4670 data. Features should include the user who made the change (`SubjectUserName`), the process that made the change (`ProcessName`), the target object (`ObjectName`), and the time of day. The model will learn patterns of normal permission changes and flag modifications to critical files that deviate significantly from these patterns as anomalous."
          },
          {
            "description": "A high volume of permission modification events (Windows Event ID 4670) are generated by a single user or process within a compressed timeframe, indicating bulk changes inconsistent with normal administrative activity.",
            "data_sources": [
              "Windows Event ID 4670"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers, document management systems, and developer workstations where bulk file operations might occur.",
            "action": "1. (Symbolic) Create a rule that counts the number of Event ID 4670 events per `SubjectUserName` per host over a 5-minute window. If the count exceeds a hard threshold (e.g., 100 modifications), generate a medium-severity alert. This provides a simple, fast detection for egregious 'permission bombing'. 2. (Statistical) For each `SubjectUserName`, calculate a rolling baseline of the number of unique files/directories modified per hour. Use a Z-score or Inter-Quartile Range (IQR) to identify statistically significant spikes in activity. For example, an alert can be triggered if the count in a given hour is more than 3 standard deviations above the user's personal mean. 3. (ML) Employ a clustering algorithm (e.g., DBSCAN) on permission change events. Use features like `SubjectUserName`, `ProcessName`, and the parent directory of the `ObjectName`. The algorithm can group normal, sparse administrative changes into one cluster and identify dense, rapid-fire changes by a single user/process as a separate, anomalous cluster."
          },
          {
            "description": "A sequence of events is observed on a single host within a short time window: 1. A permission modification (Windows Event ID 4670), followed by 2. The creation and execution of a new file in that location (Windows Event ID 4688), which then 3. Initiates an external network connection (Zeek conn.log).",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing systems, DMZ servers, and developer workstations with direct internet access.",
            "action": "1. (Symbolic) Implement a stateful correlation rule in the SIEM that triggers on a specific sequence of events from a single host within 15 minutes: Event ID 4670 (`ObjectName` is a directory), followed by Event ID 4688 (`NewProcessName` is in that directory), followed by a Zeek conn.log entry where `id.orig_h` is the host and `id.resp_h` is a non-internal IP. This chained logic creates a high-fidelity alert for post-compromise activity. 2. (Statistical) For the processes identified in step 1, analyze the destination port in the Zeek conn.log. Calculate the rarity of that port being used for outbound connections across the enterprise. An outbound connection over a highly unusual port (e.g., in the bottom 5th percentile of frequency) significantly increases the suspicion score of the entire event chain. 3. (ML) Use a sequence-based anomaly detection model, such as a Long Short-Term Memory (LSTM) autoencoder, trained on sequences of typical user/system activities (process creations, file mods, network connections). Feed the observed sequence of events into the model. A high reconstruction error would indicate that the sequence is anomalous and does not conform to learned patterns of normal behavior, thus warranting an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]