[
  {
    "information_requirement": "Is the adversary maintaining persistence using Windows Time Providers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "A DLL registered as a new Time Provider matches a known malicious file hash from threat intelligence.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for registry value modifications (Windows Event ID 4657) to any 'DllName' value under 'HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\'. Upon detection, trigger an automated process to retrieve the file specified in the DLL path, calculate its hash (e.g., SHA256), and correlate the hash against a continuously updated threat intelligence database of known malicious files. Alert on any match."
          },
          {
            "description": "Execution of w32tm.exe with command-line arguments to register a new time provider, particularly when followed by a W32Time service restart.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for process creation of 'w32tm.exe' (Windows Event ID 4688). Analyze the command line field for arguments like '/register' or '/config' that indicate provider modification. Correlate these process creation events with a subsequent 'W32Time' service restart (Windows Event ID 7036 for service name 'w32time') within a short time window (e.g., 5 minutes). Flag instances of this pattern, especially if initiated by a non-SYSTEM account or an unfamiliar script."
          },
          {
            "description": "Creation of a new registry subkey under `HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\`, followed by setting its `DllName` and `Enabled` values, and a subsequent restart of the W32Time service.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for the sequence of registry modifications (Windows Event ID 4657) creating a new Time Provider subkey, setting the 'DllName' value to a non-standard path (e.g., not in System32), and setting 'Enabled' to 1. Correlate this sequence of registry changes with a restart of the W32Time service (Windows Event ID 7036, service name 'w32time'). Use correlation analysis on events sharing the same host and occurring within a tight timeframe (e.g., 10 minutes) to detect the full persistence chain."
          },
          {
            "description": "The w32time.exe process initiating network connections to unusual destinations or using non-standard protocols, deviating from its baseline NTP behavior.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish a baseline of normal network activity for w32time.exe processes across the environment, which should be primarily UDP port 123 traffic to known, approved time servers. Monitor Zeek conn.log for traffic originating from host IPs where the service runs. Flag connections that use TCP, connect on non-NTP ports (e.g., 80, 443), or contact external IP addresses that are not approved time servers. Use time series analysis and descriptive statistics to detect anomalous data volumes or connection frequencies indicative of C2 activity tunneled through the service."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by abusing Windows Time Providers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege-Escalation",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "A DLL written to a temporary or user-writable location is registered as a Time Provider DLL, and its hash matches a known privilege escalation tool.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for modifications (Windows Event ID 4657) to any 'DllName' value under the Time Providers registry key. Extract the file path from the new value. If the path points to a non-standard, user-writable directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Temp\\, C:\\Windows\\Tasks\\), retrieve the DLL file and hash it. Correlate the hash against a threat intelligence database of known privilege escalation tools and implants. Alert on any match."
          },
          {
            "description": "Execution of a known privilege escalation script or exploit tool that specifically targets the W32Time service or generic service-based DLL hijacking.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process creation events (Windows Event ID 4688) for command-line arguments containing strings or patterns specific to known privilege escalation frameworks (e.g., PowerSploit, Metasploit) or tools (e.g., Juicy Potato variants) that abuse services. For example, search for command lines invoking PowerShell with functions like 'Invoke-ServiceAbuse' or specific parameters known to target 'w32time'. Maintain and update a library of regular expressions for such tool patterns."
          },
          {
            "description": "A non-SYSTEM or non-administrative user account or process successfully modifies the DllName or Enabled registry value for a Time Provider, indicating a permissions misconfiguration being exploited.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Configure detailed auditing for the 'HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\' registry key. Monitor for successful registry write events (Windows Event ID 4657). For every successful write, analyze the 'SubjectUserName' and 'ProcessName'. Alert on any modification not performed by 'NT AUTHORITY\\SYSTEM' or a recognized administrative account/process, as this indicates a likely privilege escalation attempt exploiting a misconfiguration. Use descriptive statistics to baseline normal modifiers (which should only be SYSTEM) to detect anomalies."
          },
          {
            "description": "A low-integrity process creates a DLL file in a world-writable directory, followed by a registry modification pointing a Time Provider's DllName to that new DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate events across data sources. Monitor for a process running at a low or medium integrity level (identified from Windows Event ID 4688 with process token elevation logging enabled) that creates a DLL file. Track that DLL's path and filename. Then, monitor for a subsequent registry write (Windows Event ID 4657) from any process that sets a 'DllName' value to that specific DLL path. This sequence is highly indicative of an attacker exploiting a vulnerability to stage a payload and then tricking a high-privilege service into executing it for privilege escalation."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]