[
  {
    "information_requirement": "Is the adversary executing malicious code using scheduled tasks or jobs?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053",
        "name": "Scheduled Task/Job",
        "evidence": [
          {
            "description": "A process launched by the Windows Task Scheduler service (svchost.exe -k netsvcs) initiates an outbound network connection to an IP address, domain, or URL that is a known indicator of compromise.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Windows Servers (e.g., Domain Controllers, Application Servers), User Endpoints, and Network Egress Points.",
            "action": "For each process creation event (Windows Event ID 4688) where the parent process is `taskeng.exe` or `svchost.exe` with command line arguments containing `netsvcs`, identify the child process. Correlate this child process by process ID and timestamp with network connection logs (Zeek conn.log). 1) Symbolic: Join the destination IP or resolved domain (from Zeek dns.log) with a high-confidence threat intelligence feed. Alert on any matches. 2) Statistical: For all connections made by task-spawned processes, calculate the historical rarity of the destination IP, domain, and ASN. Flag connections to destinations in the bottom 5th percentile of frequency across the enterprise. 3) Machine Learning: Train a time-series model (e.g., ARIMA) on the bytes_out from Zeek conn.log for each host. An anomalous spike in outbound data transfer immediately following a scheduled task execution should be flagged for investigation."
          },
          {
            "description": "A scheduled task is created where the command-line arguments or embedded XML Action contain obfuscated code or suspicious strings associated with malware, offensive tools, or living-off-the-land techniques.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially those with PowerShell v5+ logging enabled.",
            "action": "Monitor process creation (Windows Event ID 4688) for `schtasks.exe` and task creation events (Windows Event ID 4698). 1) Symbolic: Use regular expressions to scan the command line and the task XML's `<Command>` and `<Arguments>` fields for known malicious patterns, such as `powershell -enc`, `rundll32 javascript:`, `mshta vbscript:`, or use of `certutil -urlcache`. 2) Statistical: Calculate the Shannon entropy of the command line arguments and script blocks within the task XML. Establish a baseline entropy score for legitimate tasks in your environment. Flag any new task whose command entropy exceeds the 95th percentile of this baseline, as this indicates potential obfuscation or encoding. 3) Machine Learning: Utilize a pre-trained NLP classification model (e.g., a fine-tuned BERT model) to classify the command-line arguments as 'benign' or 'malicious'. This can detect novel variations of obfuscated commands that may evade static regex patterns."
          },
          {
            "description": "A newly created scheduled task executes an unsigned binary from a non-standard, user-writable location (e.g., %APPDATA%, %TEMP%, C:\\Users\\Public) or executes a process that is statistically rare for the Task Scheduler to launch.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Monitor task creation (Windows Event ID 4698) and process execution (Windows Event ID 4688). 1) Symbolic: Maintain and apply an allow/deny list of executable paths for scheduled tasks. Alert whenever a task attempts to execute a binary from a denied path like `C:\\Users\\*\\AppData\\` or `C:\\Windows\\Temp\\`. 2) Statistical: Build a baseline of legitimate (process name, process path) tuples launched by the Task Scheduler across the enterprise. Use frequency analysis to identify rare combinations. A task launching `svchost.exe` from `C:\\Users\\Public\\` is a high-confidence anomaly. Flag any tuple that falls below a 1% frequency threshold. 3) Machine Learning: Employ an Isolation Forest model trained on features from legitimate scheduled tasks (e.g., process path depth, is_signed, parent process name, command-line length). This unsupervised outlier detection model will identify new tasks that deviate significantly from established normal behavior."
          },
          {
            "description": "A scheduled task is created, executed, and subsequently deleted within a very short timeframe (e.g., under five minutes), indicating a 'one-shot' execution pattern used to evade detection and analysis.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Correlate task events by `Task Name` and `Subject Logon ID` on the same host. 1) Symbolic: Create a detection rule that triggers when a Windows Event ID 4698 (Create) is followed by a Windows Event ID 4702 (Delete) for the same task name within a 5-minute window. 2) Statistical: Calculate the lifetime (delta between creation and deletion timestamps) for all tasks. Build a distribution of these lifetimes and alert on any task whose lifetime falls in the bottom 1st percentile, indicating an unusually ephemeral task. 3) Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on task features including lifetime, creating user account type (e.g., admin, standard user), and the process executed (from correlated Event ID 4688). A small, dense cluster of short-lived tasks created by standard user accounts could represent a specific adversary toolset in use."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistence using scheduled tasks or jobs?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053",
        "name": "Scheduled Task/Job",
        "evidence": [
          {
            "description": "A persistent scheduled task (e.g., triggers on logon, startup, or a recurring interval) is configured to execute a command containing a file path, domain, or IP address that matches a known malicious indicator.",
            "data_sources": [
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly Domain Controllers and other Tier 0 assets.",
            "action": "Continuously monitor task creation/modification events (Windows Event ID 4698). Filter for tasks where the XML data contains persistence triggers such as `<LogonTrigger>`, `<BootTrigger>`, or a recurring `<TimeTrigger>`. 1) Symbolic: From the task's `<Command>` and `<Arguments>` XML fields, extract all file paths, domains, and IP addresses. Compare these extracted artifacts against threat intelligence feeds of known malicious indicators. Alert on any matches. 2) Statistical: For all persistent tasks, calculate the frequency of the domains and executable names used in their actions. A domain or executable that appears in only one or a very small number of persistent tasks across the enterprise is anomalous and should be investigated. 3) Machine Learning: Train a classification model (e.g., Logistic Regression) to predict if a task is for persistence based on its features (trigger type, action, user context). Use the model to flag newly created tasks that it classifies as 'persistent' and that also have low-prevalence features."
          },
          {
            "description": "A scheduled task is created with a common persistence trigger (e.g., At Logon, At Startup) that executes a known living-off-the-land binary (LOLBin) with arguments to download a payload or execute a script.",
            "data_sources": [
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Monitor task creation events (Windows Event ID 4698). Filter for tasks with persistence-related triggers. 1) Symbolic: Within this filtered set, search the task's command for known LOLBins (e.g., `powershell.exe`, `mshta.exe`, `cscript.exe`, `rundll32.exe`, `certutil.exe`) followed by arguments indicating remote file access or script execution (e.g., `-nop -w hidden -c IEX`, `http://`, `javascript:`). 2) Statistical: Create a baseline of normal command-line argument patterns for LOLBins executed by scheduled tasks. Calculate the term frequency-inverse document frequency (TF-IDF) for all arguments. Arguments that are rare across the environment but appear in a new task (e.g., a unique URL) will have a high TF-IDF score and should be flagged. 3) Machine Learning: Use an anomaly detection model on the sequence of arguments passed to LOLBins. A model trained on legitimate sequences can identify novel malicious command structures that don't match known patterns."
          },
          {
            "description": "A new persistent scheduled task is created that is a statistical outlier compared to the established baseline of legitimate tasks based on its name, path, action, or trigger, suggesting masquerading or non-standard software.",
            "data_sources": [
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, with baselines established per server role and workstation image.",
            "action": "First, develop a baseline of legitimate scheduled tasks (names, executable paths, triggers, actions) for different asset groups (e.g., domain controllers, web servers, developer workstations). 1) Symbolic: Alert on new persistent tasks whose names are a close misspelling of legitimate tasks (e.g., 'Microsft Update Task' vs. 'Microsoft Update Task'). 2) Statistical: For new persistent tasks, calculate the Levenshtein distance of the task name and path to the known good baseline. A low distance to a known name but a high distance (different path) is suspicious. Also, flag tasks with high-entropy names, indicating randomization. 3) Machine Learning: Use a clustering algorithm (e.g., K-Means) to group all scheduled tasks based on features like name, path, and trigger type. Small, isolated clusters or new tasks that do not fall into any existing large cluster represent significant deviations from the norm and warrant investigation."
          },
          {
            "description": "A scheduled task is modified to hide its presence from standard administrative tools, such as by deleting its Security Descriptor (SD) or renaming it to masquerade as a legitimate system task.",
            "data_sources": [
              "Windows Event ID 4701",
              "Windows Event ID 4699"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Monitor for task update (Windows Event ID 4701) and task disabled (Windows Event ID 4699) events. 1) Symbolic: Look for a sequence where a task is updated and the `Task-Xml-SecurityDescriptor` field is changed to a null or empty value. This is a known technique to hide tasks. 2) Statistical: Analyze the names of all created/modified tasks. Flag names that are an extremely close match to legitimate Windows task names (e.g., 'GoogleUpdateTaskMachineUA' vs 'GoogleUpdateTaskMachineCore') but have a different action path. Use n-gram analysis on task names to find unusual character sequences. 3) Machine Learning: Train a sequence model on the series of events related to a single task (e.g., Create -> Disable -> Update -> Enable). A model trained on normal administrative workflows can flag an unusual sequence like Create -> Update (to remove SD) -> Enable as anomalous behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using scheduled tasks or jobs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053",
        "name": "Scheduled Task/Job",
        "evidence": [
          {
            "description": "A scheduled task is configured to run with elevated privileges (e.g., SYSTEM) and executes a file whose hash is associated with a known privilege escalation exploit tool or malware.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially multi-user systems like terminal servers.",
            "action": "Monitor for tasks created (Windows Event ID 4698) where the XML contains `<UserId>S-1-5-18</UserId>` or `<UserId>SYSTEM</UserId>`. 1) Symbolic: When such a task is created or executed (Windows Event ID 4688), obtain the hash of the executable file specified in the task's action. Compare this hash against a threat intelligence database of known malware and privilege escalation tools (e.g., BadPotato, PrintNightmare exploits). 2) Statistical: Maintain a baseline of executables that are legitimately run as SYSTEM via scheduled task. Flag any new task running as SYSTEM that uses an executable not on this baseline, especially if the executable is unsigned or located in a temporary/user directory. 3) Machine Learning: Use a supervised classification model to score the risk of a task. Features would include: runs_as_system (boolean), executable_is_signed (boolean), executable_path_rarity (float), creating_user_is_admin (boolean). A high risk score from the model triggers an alert."
          },
          {
            "description": "A scheduled task is created or modified with the 'Run with highest privileges' option enabled, and it executes a command pattern known to be used for bypassing User Account Control (UAC).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (e.g., Windows 10, Windows 11).",
            "action": "Monitor `schtasks.exe` process creation (Windows Event ID 4688) for the `/RL HIGHEST` argument. Also monitor task creation events (Windows Event ID 4698) for XML containing `<HighestAvailable>true</HighestAvailable>`. 1) Symbolic: Correlate the creation of a 'highest privileges' task with a task action that invokes a known UAC bypass method, such as targeting `fodhelper.exe`, `eventvwr.exe`, or `sdclt.exe` to launch a malicious command. 2) Statistical: Baseline the usage of `/RL HIGHEST` in your environment. Most legitimate tasks do not need this. A sudden increase in its use, or its use by a non-standard user or in conjunction with a rare process, is a statistical anomaly worth investigating. 3) Machine Learning: Model the sequence of user actions. A low-privilege process (e.g., a Word macro) that spawns a shell, which then creates a high-privilege scheduled task, is a suspicious sequence. A sequence model (like a Hidden Markov Model) can be trained to detect these anomalous state transitions."
          },
          {
            "description": "A user account with standard privileges creates or modifies a scheduled task, configuring it to execute under the context of a higher-privileged account such as SYSTEM, Administrator, or a service account.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4701"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Monitor scheduled task creation (Windows Event ID 4698) and update (Windows Event ID 4701) events. 1) Symbolic: Create a high-severity alert that triggers immediately when the `SubjectUserName` (the user creating the task) is a non-administrative account, but the `Task-Xml-Principals-UserId` in the event's XML data is `SYSTEM`, `S-1-5-18`, `Administrator`, or a member of a privileged group. This is a very high-fidelity indicator. 2) Statistical: Profile the types of tasks created by different user groups. It is statistically impossible for a standard user to create a SYSTEM task through normal means. The mere existence of such an event is a 100% anomaly against the baseline of OS security rules, indicating a vulnerability was exploited. 3) Machine Learning: A rules-based system is superior here, but for completeness, a classification model could be trained on `(creating_user_privilege_level, task_runas_privilege_level)` tuples. The model would learn that the tuple `(standard, system)` is malicious, providing an automated risk score."
          },
          {
            "description": "A temporary, high-privilege scheduled task is created and deleted in a short sequence, immediately following suspicious activity from a user-level process, indicating a 'hit-and-run' privilege escalation.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4702",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers.",
            "action": "Create a correlated detection that chains multiple events together. 1) Symbolic: Trigger an alert for the following sequence on a single host: [Event 4688: Process A created by standard user] -> [Event 4698: Task created by Process A's logon session, configured to run as SYSTEM] -> [Event 4702: Task deleted within 2 minutes]. 2) Statistical: Analyze the time delta between a suspicious user-level process execution (e.g., PowerShell downloading a file) and the creation of a new SYSTEM-level task. A very short delta (e.g., < 30 seconds) is a strong statistical indicator of causality. 3) Machine Learning: Use a graph-based analysis tool. Model processes, users, tasks, and files as nodes in a graph. An edge from a user-level process node to a SYSTEM-level task node that is both created and deleted in a short time represents a high-risk path in the graph, which can be automatically detected and flagged as a likely privilege escalation event chain."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]