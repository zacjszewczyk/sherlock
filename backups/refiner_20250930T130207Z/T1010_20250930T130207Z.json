[
  {
    "information_requirement": "Is the adversary attempting to discover open application windows?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1010",
        "name": "Application Window Discovery",
        "evidence": [
          {
            "description": "Execution of a process whose file hash matches a known malicious tool or implant that performs application window discovery.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Continuously monitor process creation events (Windows Event ID 4688). Assuming an EDR or agent capability, calculate the file hash (e.g., SHA256) for each executed process and correlate it against a high-confidence threat intelligence feed of known malware hashes specifically associated with reconnaissance and discovery activities. Alert on any matches and initiate incident response."
          },
          {
            "description": "Execution of built-in command-line utilities or specific PowerShell cmdlets explicitly used for listing application windows or processes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process creation command lines (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104) for specific, high-fidelity strings and commands. Create a watchlist for command patterns like `tasklist /v`, `Get-Process | Select-Object MainWindowTitle`, and `gwmi win32_process`. While these can be benign, alert when their execution is correlated with suspicious parent processes (e.g., `wscript.exe`, `mshta.exe`, an Office application) or when executed by non-interactive service accounts."
          },
          {
            "description": "An uncommon process executing window discovery commands, or a common utility executing them from an anomalous parent process or user context.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish a baseline of normal process execution chains and user contexts for discovery commands (e.g., `tasklist.exe` is normally run by `cmd.exe` under an interactive user session). Use statistical methods like frequency analysis and parent-child process graphing to identify anomalous executions. Alert when a discovery command is spawned by an unusual parent (e.g., `winword.exe`, a web server process) or runs under a system/service account. Calculate the entropy of parent processes for discovery commands across the enterprise to find rare and suspicious relationships."
          },
          {
            "description": "A sequence of actions where application window discovery is immediately followed by data staging, credential access attempts, or network C2 communication.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Use a correlation engine to detect a sequence of events within a short time window (e.g., 5 minutes) on a single host. The sequence pattern is: [1] T1010 activity (e.g., `tasklist /v` from Event ID 4688), followed by [2] file creation in a temp directory with a suspicious extension (from Zeek files.log or endpoint logs), or [3] a new network connection to an external, low-reputation IP address (from Zeek conn.log). Use time series correlation analysis to link these discrete events into a single high-confidence alert indicating discovery followed by action-on-objectives."
          },
          {
            "description": "PowerShell script execution that loads .NET classes or calls Win32 APIs for interacting with window handles and titles, bypassing standard cmdlets.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze the content of PowerShell script block logs (Windows Event ID 4104) for patterns indicating advanced, in-memory discovery. Search for obfuscated or clear text references to .NET assemblies like `[System.Diagnostics.Process]` or direct Win32 API calls via `Add-Type` or `DllImport` for functions such as `EnumWindows`, `GetForegroundWindow`, and `GetWindowText`. Use linear regression to baseline script complexity or API call frequency per host/user and flag significant outliers that deviate from normal administrative scripting."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]