[
  {
    "information_requirement": "Has the adversary gained initial access via compromised software dependencies or development tools?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools",
        "evidence": [
          {
            "description": "A downloaded file, identified via network or host logs, whose cryptographic hash (SHA256) matches an entry in a threat intelligence feed for known malicious software dependencies.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, internal artifact repositories (e.g., Nexus, Artifactory), network egress points.",
            "action": "1. Symbolic (IOC Match): From Zeek files.log and process creation events (Windows Event ID 4688), extract file hashes (SHA256) of downloaded packages and executables. Continuously compare these hashes against a curated threat intelligence feed of known malicious dependencies. Alert on any match. 2. Statistical (Prevalence Analysis): For each unique file hash observed, calculate its prevalence (count of endpoints where it's seen) across the environment over time. Flag files with extremely low prevalence (e.g., seen on <= 1% of developer systems) that are part of a new software installation, as this indicates a non-standard or potentially trojanized component. 3. Machine Learning (Classification): Develop and apply a supervised classification model (e.g., Random Forest, Gradient Boosting) trained on features extracted from file metadata (file size, entropy, source IP reputation, domain age of download source, presence/absence of valid signature). The model should classify each downloaded dependency as benign or malicious. Flag files classified as malicious with a high confidence score for analyst review."
          },
          {
            "description": "A network connection (TCP/UDP) or DNS query originating from a process associated with a package manager or build tool that resolves to a domain or IP address on a threat intelligence feed for C2 servers or malicious code repositories.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, DNS resolvers, network egress points.",
            "action": "1. Symbolic (IOC Match): Ingest threat intelligence feeds for known malicious domains, IPs, and URLs associated with software supply chain attacks. Scan Zeek dns.log (query field), conn.log (id.resp_h), and http.log (host and uri fields) for matches. Alert on any connection or query to a listed indicator. 2. Statistical (Domain & Connection Analysis): For DNS queries (Zeek dns.log) from developer and build systems, calculate the Shannon entropy of the queried domain names. Flag queries with abnormally high entropy (e.g., > 3.5 bits/char) or those corresponding to Newly Registered Domains (NRDs). For outgoing connections (Zeek conn.log), establish a baseline of destination ASNs and countries. Flag connections to rare or first-seen ASNs/countries, especially if the data volume is significant (e.g., > 95th percentile of typical connection volume). 3. Machine Learning (Time-Series Anomaly Detection): Model the time-series data of outgoing network connections (bytes_out, connection count) from build servers and developer subnets. Use an algorithm like Seasonal-Hybrid ESD (S-H-ESD) or a Prophet model to detect anomalous spikes in traffic that deviate significantly from the established seasonal patterns, especially after known package installation or update events."
          },
          {
            "description": "Execution of a high-risk script (e.g., PowerShell, bash) by a package manager process (e.g., npm.exe, pip.exe) that contains obfuscated code, network downloaders, or system reconnaissance commands.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, CI/CD pipeline runners.",
            "action": "1. Symbolic (Signature Match): From PowerShell script block logs (Event ID 4104) and process command lines (Event ID 4688), use YARA rules or regular expressions to search for signatures of malicious activity, such as the use of `Invoke-Expression`, base64-encoded commands, or specific reconnaissance commands (`whoami`, `ipconfig`, `net user`) being executed by a package manager parent process. 2. Statistical (Content Analysis): For each script block logged (Event ID 4104), calculate the Shannon entropy and the command-line length. Establish a baseline for these metrics from legitimate installation scripts. Alert when a script's entropy or length exceeds a dynamic threshold (e.g., > 3 standard deviations from the mean, or > 99th percentile), suggesting obfuscation or an embedded payload. 3. Machine Learning (NLP Classification): Utilize a Natural Language Processing (NLP) based classifier, trained on a large corpus of known-good and known-bad (e.g., from malware sandboxes, public reports) install scripts. The model should analyze the sequence of commands and arguments to identify malicious patterns that simple keyword matching would miss. Flag scripts classified as malicious with a high probability score."
          },
          {
            "description": "A process execution event or file system modification involving a file or package name explicitly matching a known malicious dependency from a threat intelligence source (e.g., 'pygrata-requests') or a name that is a close typographical match to a legitimate package.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, internal artifact repositories, network egress points.",
            "action": "1. Symbolic (IOC Match): Maintain a watchlist of known malicious package and executable names from security reports. Create a detection rule that searches for these exact names in process command lines (Windows Event ID 4688) and in URIs from network logs (Zeek http.log). 2. Statistical (Typosquatting Detection): Maintain a dictionary of common, legitimate package names used in the organization. For each new package name observed, calculate the Levenshtein distance to all names in the dictionary. Flag package names with a distance of 1 or 2 from a legitimate name (e.g., 'python-dateutil' vs 'python-dateutili'), as this is a common typosquatting technique. 3. Machine Learning (Graph Analysis): Model the software dependency graph for all internal projects. Use a community detection algorithm (e.g., Louvain Modularity) to find clusters of related packages. A new package that does not fit well into any existing community or acts as a strange bridge between unrelated communities can be flagged as an anomalous dependency requiring investigation."
          },
          {
            "description": "A process spawned by a package manager or build tool exhibits anomalous characteristics, such as creating unexpected child processes (e.g., `cmd.exe`), having a high-entropy command line, or being an unsigned executable in a typically signed software location.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, CI/CD pipeline runners.",
            "action": "1. Symbolic (Rule-Based): Create and enforce rules that alert on high-risk parent-child process relationships originating from package managers or build tools, such as `MSBuild.exe` spawning `powershell.exe` or `npm.exe` spawning `cscript.exe`. 2. Statistical (Prevalence & Outlier Detection): For each parent process associated with development (e.g., `node.exe`, `python.exe`), build a historical frequency distribution of its child processes. Alert when a rare or never-before-seen child process is spawned. Additionally, calculate the entropy of command lines and flag any that exceed a dynamically calculated threshold (e.g., 3 standard deviations above the mean for that process). 3. Machine Learning (Process Sequence Analysis): Model the sequence of process creations (parent-child relationships) during typical software build cycles. Use a sequence-based anomaly detection algorithm (e.g., using an LSTM autoencoder) to identify build sessions that contain abnormal process sequences, which could indicate the execution of a malicious payload injected by a compromised dependency."
          },
          {
            "description": "Network traffic associated with fetching dependencies exhibits anomalies, such as connections to low-reputation domains, direct-to-IP downloads, or the use of non-standard User-Agent strings.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, developer and build server subnets.",
            "action": "1. Symbolic (Rule-Based): Create a rule to alert when a connection from a known package manager process is made directly to an IP address (identified in Zeek conn.log) without a preceding DNS query for a legitimate repository domain, or when the HTTP Host header (in http.log) or TLS Server Name Indication (in ssl.log) contains an IP address. 2. Statistical (Rarity Analysis): Establish a baseline of legitimate repository domains, ASNs, and User-Agent strings. Calculate the frequency of each. Alert when a dependency is downloaded from a domain or ASN that is in the bottom percentile of frequency (e.g., < 1st percentile). Similarly, flag connections using a User-Agent string that has a very low prevalence across the enterprise. 3. Machine Learning (Clustering): Apply an unsupervised clustering algorithm (e.g., DBSCAN) to connection metadata from Zeek conn.log (e.g., destination port, bytes sent, connection duration, destination country). Identify clusters representing normal download activity. Flag connections that are classified as noise or fall into micro-clusters, as they represent anomalous network behavior."
          },
          {
            "description": "Following the installation of a software dependency, its associated processes are observed creating persistence mechanisms (e.g., new scheduled tasks, Run key modifications), modifying system configurations, or accessing sensitive user data outside of its expected functional scope.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4698",
              "Windows Event ID 4657",
              "Windows Event ID 5156",
              "Windows Event ID 4104",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain controllers (for GPO changes), developer workstations, build servers, file servers hosting sensitive data.",
            "action": "1. Symbolic (IOC Match): Create high-fidelity alerts for when a process spawned during a package installation or build (traced via parent process IDs from Event ID 4688) is observed creating a new scheduled task (Event ID 4698), a new service, or modifying a common persistence-related registry key (Event ID 4657 on Run/RunOnce keys). 2. Statistical (Behavioral Baselining): Enable file access auditing (Event ID 4663) on sensitive user and project directories. For processes related to development tools, establish a baseline of normal file access counts and paths. Alert when a process accesses a number of files that is a statistical outlier (e.g., > 99th percentile) or accesses files in directories unrelated to its function (e.g., browser credential stores, document folders). 3. Machine Learning (Causation Analysis): Implement an event correlation engine that uses a temporal logic model. This model would ingest a stream of events (package install, process creation, network connection, registry modification) and identify suspicious causal chains. For example, it would flag a sequence where a package installation is followed within a short time window (<5 minutes) by an obfuscated PowerShell command (Event ID 4104) and an outbound connection to a low-reputation IP (Event ID 5156 and Zeek conn.log)."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]