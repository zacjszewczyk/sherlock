[
  {
    "information_requirement": "Has the adversary attempted to access credentials stored in the SAM database?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1003.002",
        "name": "Security Account Manager",
        "evidence": [
          {
            "description": "Execution of a process whose name or hash matches a known credential dumping tool used for SAM access.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1 Servers, Administrator Workstations",
            "action": "For each process creation event, compare the process name and hash against a threat intelligence watchlist of known credential dumping tools (e.g., mimikatz.exe, gsecdump.exe, pwdump.exe, secretsdump.py). 1. Symbolic: Create a SIEM rule to generate a high-severity alert for any direct match on the process name or file hash. 2. Statistical: For all executed processes, calculate the character-level entropy of the process name. Establish a baseline for process name entropy by parent process and user context. Flag processes with an entropy score in the 99th percentile, especially if running as SYSTEM from a non-standard directory (e.g., C:\\Users\\*, C:\\Temp\\*), as this indicates potential obfuscation. 3. Machine Learning: Train a classification model (e.g., Random Forest) on process creation event features (parent process, user, command-line length, process name entropy). Use labeled data of known-good system processes and known-bad credential dumpers to classify newly observed processes as malicious or benign in real-time."
          },
          {
            "description": "Execution of system utilities (e.g., reg.exe, vssadmin.exe, ntdsutil.exe) with command-line arguments indicative of saving or creating copies of the SAM or SYSTEM registry hives.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1 Servers, Critical Application Servers",
            "action": "Continuously monitor the command-line field in process creation events. 1. Symbolic: Use regular expressions to search for patterns like 'reg.exe save hklm\\sam', 'vssadmin.exe create shadow', or 'ntdsutil.exe ... create ... ifm'. Correlate a 'vssadmin create shadow' command with subsequent file copy commands (xcopy, copy) targeting the SAM/SYSTEM file from the shadow copy path (e.g., \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy*). 2. Statistical: Establish a baseline for the execution frequency of reg.exe, vssadmin.exe, and ntdsutil.exe per host and user. Calculate a 95th percentile threshold for execution frequency over a rolling 30-day window. Alert when a user or host exceeds this threshold for commands involving 'save', 'hklm\\sam', or 'create shadow'. 3. Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) on the frequency of 'vssadmin create shadow' commands aggregated per hour. A sudden, unexplained spike in these commands outside of established backup windows should be flagged as a potential precursor to credential dumping."
          },
          {
            "description": "A process, other than expected system processes, directly accesses the SAM database file (%SystemRoot%\\system32\\config\\SAM) or its backups.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of Domain Controllers and Tier 0 Servers, specifically the %SystemRoot%\\system32\\config\\ directory.",
            "action": "Enable SACLs on the SAM file (%SystemRoot%\\system32\\config\\SAM) to generate object access logs. 1. Symbolic: Create a whitelist of legitimate processes known to access the SAM file (e.g., lsass.exe, System, approved backup agents). Generate an alert for any process not on this whitelist that triggers a file access event (Windows Event ID 4663) on the SAM file. 2. Statistical: For all access events to the SAM file, build a frequency distribution of the accessing processes. Any process that is statistically rare (e.g., falls outside the top 99% of accessing processes) should be flagged for investigation. Calculate the rarity of the process-host pair accessing the file. 3. Machine Learning: Develop an unsupervised learning model (e.g., Isolation Forest) trained on features from file access events (process name, user, host, time of day, access mask). The model will learn the profile of normal access to the SAM file and identify anomalous access events that deviate significantly from this learned profile."
          },
          {
            "description": "An unauthorized source process requests a handle to the LSASS process with memory read permissions (PROCESS_VM_READ).",
            "data_sources": [
              "Windows Event ID 10 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process memory space on Domain Controllers, Tier 0/1 Servers, and Administrator Workstations.",
            "action": "Monitor Sysmon Event ID 10 for any process access targeting lsass.exe. 1. Symbolic: Create a whitelist of legitimate source processes (SourceImage) like svchost.exe, wininit.exe, and known security tools. Alert on any SourceImage not on the whitelist that requests access with a GrantedAccess mask including '0x10' (PROCESS_VM_READ) or '0x1410' (PROCESS_VM_READ and others). 2. Statistical: For each SourceImage accessing lsass.exe, calculate the historical frequency of access. Alert if a process that has rarely or never accessed LSASS before suddenly does so. Further, calculate the entropy of the SourceImage path; a high entropy score can indicate a randomly named tool. 3. Machine Learning: Use a graph-based analysis where processes are nodes and access attempts are edges. A normal graph shows consistent access from system processes to LSASS. Apply a community detection algorithm to identify outlier nodes (processes) that form unusual connections to the LSASS node, indicating a potential credential dumping attempt."
          },
          {
            "description": "An unexpected process reads from or requests a handle to the HKLM\\SAM or HKLM\\SYSTEM registry hives.",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Registry on Domain Controllers, Tier 0/1 Servers, and Administrator Workstations.",
            "action": "Enable auditing on the HKLM\\SAM and HKLM\\SYSTEM registry hives. 1. Symbolic: Monitor Sysmon Events 12/13 and Windows Event ID 4656 where the TargetObject contains 'HKLM\\SAM'. Create a whitelist of processes (e.g., System, lsass.exe, regedit.exe used interactively by an administrator) and alert on any process not on the list accessing this hive. 2. Statistical: Profile the rate of access to the HKLM\\SAM key per process. Calculate a Z-score for the access count over a 5-minute window and alert if it exceeds a threshold of 3.0, indicating a statistically significant spike in access. 3. Machine Learning: Implement a sequence analysis model (e.g., Hidden Markov Model) to learn legitimate sequences of registry access by applications. An adversary might exhibit a rare sequence like: powershell.exe starts -> accesses HKLM\\SYSTEM -> accesses HKLM\\SAM. An alert on this anomalous sequence provides high-fidelity detection of a likely dumping attempt."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]