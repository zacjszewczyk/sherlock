[
  {
    "information_requirement": "Has the adversary achieved persistence by modifying the Terminal Services DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1505.005",
        "name": "Terminal Services DLL",
        "evidence": [
          {
            "description": "The file hash of '%SystemRoot%\\System32\\termsrv.dll' or a custom DLL specified in 'HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\ServiceDll' matches a known-bad hash, is statistically rare, or is classified as malicious.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": "1. Symbolic (IOC Match): Create a watch rule on the file path '%SystemRoot%\\System32\\termsrv.dll' and the registry value 'HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters\\ServiceDll'. On any modification event (Sysmon Event ID 11 or 13), or on a scheduled basis, hash the file. Join this hash against a threat intelligence database of known malicious file hashes. An exact match generates a high-severity alert. 2. Statistical (Rarity Analysis): Maintain a historical inventory of all 'termsrv.dll' hashes seen across the environment. Calculate the prevalence of each hash. A hash that is new to the environment or has a prevalence below a defined threshold (e.g., seen on < 0.1% of assets) should be flagged for investigation as a low-frequency anomaly. 3. Machine Learning (Classification): For any new or modified DLL, extract static file features (e.g., entropy, PE header details, import/export tables). Feed these features into a pre-trained classification model (e.g., Gradient Boosting) that predicts the probability of the file being malicious. Alert if the probability score exceeds a confident threshold (e.g., > 0.85)."
          },
          {
            "description": "Execution of commands to modify permissions or ownership of 'termsrv.dll' or alter the 'ServiceDll' registry value, especially when executed by an unusual parent process or with high command-line entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Process and Command-Line Logs",
            "action": "1. Symbolic (Pattern Matching): Monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for command lines containing keywords like 'takeown', 'icacls', 'reg.exe add' combined with 'TermService' or 'termsrv.dll'. Create correlation rules to detect a sequence of 'takeown' followed by 'icacls' on 'termsrv.dll' within a short time window (e.g., 2 minutes). 2. Statistical (Entropy & Rarity): For any command matching the symbolic patterns, calculate the Shannon entropy of the command line; a high score can indicate obfuscation. Additionally, analyze the parent-child process relationship. A modification command spawned from a non-standard parent (e.g., 'winword.exe') is highly anomalous. Calculate the rarity of the parent process for this specific action and alert on statistical outliers. 3. Machine Learning (Sequence Analysis): Employ a sequence analysis model (e.g., LSTM) trained on benign command-line histories for typical administrative sessions. The model can detect anomalous sequences of commands leading up to the file or registry modification, flagging the entire session as suspicious even if individual commands appear legitimate."
          },
          {
            "description": "The 'ServiceDll' registry value is modified to point to a new DLL, or the 'termsrv.dll' file is overwritten, by a process not on an established allowlist of trusted system updaters or that is otherwise anomalous.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 13 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint File System and Registry on Critical Servers",
            "action": "1. Symbolic (Allowlist): Enable auditing on the registry key 'HKLM\\System\\CurrentControlSet\\services\\TermService\\Parameters' (Sysmon Event ID 13) and the file '%SystemRoot%\\System32\\termsrv.dll' (Sysmon Event ID 11). Maintain an allowlist of processes authorized to modify these assets (e.g., 'TrustedInstaller.exe'). Alert on any modification event where the initiating process (e.g., 'powershell.exe', 'cmd.exe') is not on the allowlist. 2. Statistical (Rarity of Modifying Process): For all modification events on the target assets, build a frequency distribution of the modifying processes over time. Use a percentile-based approach to flag modifications made by a process that is statistically rare (e.g., in the bottom 5th percentile of frequency). 3. Machine Learning (Anomaly Detection): Train an anomaly detection model (e.g., Isolation Forest) on features from legitimate modification events, including process name, parent process, user context, and time of day. Apply the model to new events in real-time. Any event flagged as an anomaly by the model indicates a deviation from established safe behavior and requires investigation."
          },
          {
            "description": "Multiple, concurrent interactive RDP sessions (Logon Type 10) are active on a single Windows client OS, or an anomalous number of concurrent sessions are active on a Windows Server.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4634",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication Logs on Endpoints and Servers",
            "action": "1. Symbolic (Hard Rule): Ingest logon/logoff events (Windows Event ID 4624, 4634 for Logon Type 10). Maintain a state table of active sessions per host. For any host identified as a client OS (e.g., Windows 11), trigger a high-severity alert if the active session count for distinct users becomes greater than 1. 2. Statistical (Time-Series Anomaly): For hosts identified as Windows Server, establish a baseline of normal concurrent RDP sessions for different times of day. Calculate a moving average and standard deviation. Alert when the current number of active sessions exceeds a dynamic threshold, such as 3 standard deviations above the moving average for that time window. 3. Machine Learning (Forecasting): Implement a time-series forecasting model (e.g., ARIMA) for each critical server, trained on historical concurrent session data. The model will predict the expected number of sessions for the next interval. Generate an alert when the observed session count significantly deviates from the model's prediction and its confidence interval, validating with a correlated increase in TCP/3389 sessions in Zeek conn.log."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]