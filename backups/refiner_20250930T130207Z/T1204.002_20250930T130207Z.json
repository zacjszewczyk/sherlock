[
  {
    "information_requirement": "Has the adversary executed malicious code via user interaction with a malicious file?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1204.002",
        "name": "Malicious File",
        "evidence": [
          {
            "description": "Execution of a process where the executable's file hash matches a known malicious indicator from threat intelligence sources.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI instances, and critical application servers.",
            "action": "1. Symbolic (IOC Match): For each process creation event (Windows Event ID 4688), calculate the SHA256 hash of the executable file. Inner join this hash against an aggregated CTI feed of known malicious file hashes. Generate a critical alert for any match. 2. Statistical (Prevalence): Maintain a historical baseline of all file hashes executed across the enterprise. For any CTI hash match, enrich the alert with the hash's prevalence (count of unique hosts it has run on). Prioritize alerts where prevalence is below a statistically determined threshold (e.g., less than the 5th percentile of all hash prevalences, or simply < 5 hosts). 3. ML (Classification): Develop a logistic regression classifier trained on features from process creation events (e.g., file path entropy, parent process name, presence of command-line arguments) with the CTI hash match as the target label. Use this model to score new, unknown processes for their likelihood of being malicious, flagging those with a high probability score for analyst review."
          },
          {
            "description": "A network connection to a known malicious IP address, domain, or URL occurring within 60 seconds after the execution of a user-initiated file.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., firewalls, proxies) and all endpoint and server network interfaces.",
            "action": "1. Symbolic (IOC Match): Join process creation events (Windows Event ID 4688) with network connection events (Windows Event ID 5156 or Zeek conn.log) on the same host within a 60-second window. Compare destination IPs (conn.log), requested domains (dns.log), and HTTP host headers (http.log) against CTI feeds of known malicious indicators. Alert on any match. 2. Statistical (Time Delta & Rarity): For connections made by non-browser processes, calculate the time delta between process start and the first outbound connection. Establish a baseline distribution of these deltas and flag connections that fall into an outlier percentile (e.g., < 5th percentile). Additionally, score connections based on the rarity of the destination domain across the enterprise; a rare destination contacted immediately after process start is high-risk. 3. ML (Time Series Anomaly): For each host, model the time series of outbound network connections (count per minute). Use an anomaly detection model (e.g., Isolation Forest) to identify significant deviations from the established baseline. Correlate detected anomalies with preceding process creation events (4688) to determine if a newly executed file caused the anomalous network behavior."
          },
          {
            "description": "An office application (e.g., WINWORD.EXE, EXCEL.EXE) or archive utility (e.g., 7z.exe) spawns an interpreter process (e.g., powershell.exe, cmd.exe, wscript.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI instances, and servers hosting office applications.",
            "action": "1. Symbolic (Rule-based): Monitor process creation events (Windows Event ID 4688) for specific parent-child relationships. Create and maintain a rule that alerts whenever a parent process from a list of office/document applications (e.g., WINWORD.EXE, EXCEL.EXE, ACROBAT.EXE, 7z.EXE) spawns a child process from a list of interpreters (e.g., powershell.exe, cmd.exe, wscript.exe, mshta.exe). 2. Statistical (Frequency Analysis): Create a baseline of all parent-child process pairs observed across the enterprise over a 30-day period. Calculate the frequency of each pair. Trigger an alert for any office-to-interpreter pair that is statistically rare (e.g., has a frequency in the bottom 5th percentile or is seen on fewer than 5 unique hosts). 3. ML (Graph Analysis): Model process creation events as a directed graph where nodes are processes and edges are parent-child relationships. Use a community detection algorithm to find clusters of normal behavior. Identify processes that act as anomalous bridges between communities (e.g., a WINWORD.EXE process in the 'Office Apps' community spawning a powershell.exe process that is typically in an 'Admin Tools' community) and score these events for investigation."
          },
          {
            "description": "An interpreter process is executed with command-line arguments containing obfuscation patterns, download cradles, or high character entropy.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI instances, Domain Controllers, and administrative jump boxes.",
            "action": "1. Symbolic (Regex): From process creation events (Windows Event ID 4688), analyze the command-line field for interpreters. Apply a library of regular expressions to detect known malicious patterns like 'IEX (New-Object Net.WebClient).DownloadString', base64 encoding flags ('-enc'), and web-based script execution ('mshta.exe javascript:'). 2. Statistical (Outlier Detection): For each interpreter (e.g., powershell.exe), build a statistical baseline of its command-line arguments, including length and character entropy. Alert on any execution where these metrics exceed a dynamic threshold, such as 3 standard deviations from the mean or the 99th percentile. 3. ML (Text Classification): Train a natural language processing (NLP) model (e.g., TF-IDF with a logistic regression classifier) on a labeled dataset of malicious and benign command lines. Use this model to score all new interpreter command lines in real time. Investigate commands that receive a high 'malicious' probability score, especially when spawned by an office application."
          },
          {
            "description": "An office application or document reader (e.g., WINWORD.EXE, ACROBAT.EXE) spawns a child process that subsequently makes an external network connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (e.g., firewalls, proxies) and user workstations.",
            "action": "1. Symbolic (Rule-based): Create a rule that joins process creation (4688) and network connection (5156) events. Alert if a process makes an external network connection and its parent is an office application, while the process itself is not on an allow-list of known helper applications (e.g., officeclicktorun.exe). 2. Statistical (Tuple Frequency): For all instances where a child process makes a network connection, generate a 3-tuple: (ParentName, ChildName, DestinationPort). Maintain a frequency count for every unique tuple observed across the environment. Flag tuples that are statistically rare (e.g., seen less than 10 times in 30 days) for review. 3. ML (Clustering): Vectorize process network events with features like `parent_is_office_app` (binary), `child_process_name`, `destination_port_category`, and `bytes_transferred`. Use a clustering algorithm like DBSCAN to group normal behaviors. Events that are classified as noise points by the algorithm represent anomalous process network activity and should be investigated."
          },
          {
            "description": "A process is executed from a temporary or user-specific download directory (e.g., %TEMP%, %APPDATA%, Downloads) within five minutes of a file download to that host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories on endpoints (e.g., Downloads, AppData) and network file transfer logs at the boundary.",
            "action": "1. Symbolic (Correlation Rule): Correlate network file transfer logs (Zeek files.log) with process execution logs (Windows Event ID 4688) by host and time. Trigger an alert when a process is executed from a common download/temp path within 5 minutes of that same filename being logged as downloaded via HTTP or SMTP. 2. Statistical (Prevalence & Time Series): Maintain a baseline of all executable hashes that run from temp/download directories. Alert when a process runs from these locations and its hash has a prevalence of less than 0.1% across all endpoints. Additionally, use time series analysis to monitor the rate of process executions from these directories per host, alerting on spikes that exceed 3 standard deviations above the moving average. 3. ML (Sequence Analysis): Model user activity as a sequence of events (e.g., web_browse, file_download, process_exec). Train a sequence-based anomaly detection model (e.g., using an LSTM) on benign sequences. Use the model to score new event sequences in real-time. A sequence of `file_download` followed immediately by `process_exec_from_temp` that the model flags as having a high anomaly score indicates likely malicious file execution."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]