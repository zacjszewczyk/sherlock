[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using fileless storage?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1027.011",
        "name": "Fileless Storage",
        "evidence": [
          {
            "description": "A YARA rule match or a direct string match for a known malicious indicator (e.g., specific script content, encoded commands, malware-family identifiers) is recorded within a Windows Registry value, WMI object, or Event Log entry.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 5861",
              "Windows PowerShell Event ID 4103",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Windows Servers (e.g., Application, Database), User Workstations",
            "action": "For data from PowerShell script block logs (Event IDs 4103, 4104) and registry modifications (Event ID 4657): 1) Symbolic: Continuously scan content against a threat intelligence feed of YARA rules and string indicators for fileless malware. 2) Statistical: For any base64 encoded string found, calculate its character frequency distribution and compare it to a baseline of known-good encoded configuration strings; flag any string whose chi-squared distance from the baseline exceeds the 98th percentile. 3) Machine Learning: Apply a pre-trained logistic regression classifier on all captured script blocks (Event ID 4103), using features like script length, entropy, and API call frequency, to classify scripts as potentially malicious."
          },
          {
            "description": "Network traffic from a Linux host matches known command-and-control (C2) indicators (IPs, domains, JA3/JA4 hashes) associated with malware families that utilize shared memory (e.g., /dev/shm) for fileless storage.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, DNS Resolvers, Critical Linux Servers (e.g., Web, Application)",
            "action": "For network logs related to Linux hosts: 1) Symbolic: Join Zeek conn.log with dns.log on the UID field and correlate destination IPs and queried domains against a real-time threat intelligence blocklist of C2 servers for Linux malware. 2) Statistical: For each Linux host, establish a baseline of destination port frequency over a 30-day rolling window and alert when connection counts to a rare port exceed the 99th percentile. 3) Machine Learning: Use a time-series analysis model (e.g., ARIMA) on Zeek conn.log data to model expected outbound connection volume and frequency for each Linux server, alerting on statistically significant anomalies like periodic beaconing."
          },
          {
            "description": "A command-line or PowerShell execution event involves writing data that is unusually large, has high entropy, or is directed to a non-standard Windows Registry path, WMI namespace, or custom Event Log.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4103",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Domain Controllers, Windows Servers",
            "action": "For process and script execution logs: 1) Symbolic: From Event ID 4688, create a detection rule for command lines containing `reg.exe add` or `Set-ItemProperty` where the value being written is >1024 bytes and contains keywords like 'base64' or 'IEX'. 2) Statistical: For each PowerShell script block (Event ID 4103), calculate the Shannon entropy of the script content and flag any script whose score is >3 standard deviations above the established baseline for legitimate scripts. 3) Machine Learning: Use a one-class SVM model trained on features from legitimate process command lines (Event ID 4688) to identify outlier command-line executions attempting to write to fileless storage locations."
          },
          {
            "description": "A script file (e.g., shell, Python) transferred over the network contains explicit commands to write to or execute from a Linux shared memory directory (e.g., /dev/shm, /run/shm).",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Web Proxies, Linux Server Segments",
            "action": "For network file transfer logs: 1) Symbolic: Using data from Zeek files.log, scan the content of all downloaded shell scripts for regular expression patterns like `(wget|curl).*/(dev|run)/shm` or `chmod \\+x .*/(dev|run)/shm/.*`. 2) Statistical: Profile the file types downloaded by Linux servers from external sources (from Zeek files.log) and alert when a server downloads a script from a source domain that falls outside the top 95% of frequently accessed domains for that server. 3) Machine Learning: Apply a Naive Bayes classifier, trained on a bag-of-words model of script commands, to all scripts extracted via Zeek files.log to identify those with a high probability of being malicious droppers."
          },
          {
            "description": "A non-standard process writes an unusually large volume of data, writes with abnormally high frequency, or writes data with high entropy to a Windows Registry key, WMI object, or Event Log.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 5861",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Critical Windows Servers, Centralized Log Aggregators/SIEM",
            "action": "For registry and WMI modification events: 1) Symbolic: Create a watchlist of sensitive registry keys (e.g., Run keys) and alert on any write operation (Event ID 4657) to these keys by a process not on an explicit allowlist. 2) Statistical: For each process/registry key pair, use the Interquartile Range (IQR) method on the size of data written (from Event ID 4657) and alert when a write operation's size is an outlier (e.g., > Q3 + 1.5 * IQR). 3) Machine Learning: Use K-Means clustering on WMI write events (Event ID 5861) to group them into normal behavior clusters based on features like source process and target namespace; monitor for new events that are significant outliers."
          },
          {
            "description": "A new persistent WMI event consumer is created by an unsigned or unknown provider, or a WMI-related process (e.g., wmiprvse.exe) executes an anomalous child process or initiates suspicious network connections.",
            "data_sources": [
              "Windows Event ID 5859",
              "Windows Event ID 5860",
              "Windows Event ID 5861",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "WMI Infrastructure Servers, Domain Controllers, High-Value Asset Servers",
            "action": "For WMI operational and process logs: 1) Symbolic: Alert immediately on the creation of any new permanent WMI event consumer (Event ID 5859) or filter-to-consumer binding (Event ID 5860), as these are high-fidelity indicators. 2) Statistical: Build a frequency table of parent-child process relationships where the parent is `wmiprvse.exe` (from Event ID 4688) and alert when it spawns a statistically rare child process like `powershell.exe`. 3) Machine Learning: Apply a graph-based anomaly detection algorithm, modeling WMI activity as a graph of processes, objects, and network endpoints, to identify anomalous subgraphs that deviate from learned normal behavior."
          },
          {
            "description": "An unauthorized user-land process attempts to directly write to or modify the physical backing files for the Windows Registry (hives) or the WMI repository.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Systems of Domain Controllers and Critical Windows Servers",
            "action": "For file system audit logs: 1) Symbolic: Enable SACLs and monitor Event ID 4663 for 'WriteData' or 'AppendData' access attempts on files in `%SystemRoot%\\System32\\Config\\` or `%SystemRoot%\\System32\\Wbem\\Repository\\` by any process not on an allowlist (e.g., System, approved backup tools). 2) Statistical: Profile the count of access attempts (Event ID 4663) to these sensitive files by process name and alert if the daily access count for any process exceeds 3 standard deviations from its 30-day moving average. 3) Machine Learning: Train a decision tree classifier on Event ID 4663 data, using features like process name, access mask, and user context, to score and alert on high-probability malicious access events."
          },
          {
            "description": "A Linux host initiates anomalous network communications (e.g., beaconing to a new IP, large data upload) shortly after downloading a script or binary that contains patterns associated with shared memory usage.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress/Ingress Points, Linux Server Network Segments",
            "action": "For correlated network and file logs: 1) Symbolic: Create a rule that triggers when a file download (Zeek files.log) containing a shared memory pattern (e.g., `'/dev/shm'`) is followed within 5 minutes by an outbound connection (Zeek conn.log) from the same host to a low-reputation IP. 2) Statistical: Calculate the entropy of the set of destination IPs a Linux host connects to over 24 hours; a sharp increase in entropy post-download (exceeding the 99th percentile of historical values) can indicate C2. 3) Machine Learning: Use a time-series anomaly detection model on the `bytes_out` field from Zeek conn.log for each Linux host to detect anomalous spikes in data exfiltration that deviate from the learned baseline after a suspicious file download."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]