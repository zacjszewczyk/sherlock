[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by detecting virtualization or sandboxes?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "A process executes a command-line string or script that contains a unique, hardcoded value known to be used by a specific malware family for VM detection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints, servers, and Virtual Desktop Infrastructure (VDI) instances.",
            "action": "1. (Symbolic) Create a watchlist of known-bad command-line strings and arguments from threat intelligence reports. Continuously monitor Windows Event ID 4688 (Process Creation) and 4104 (PowerShell Script Block Logging) for exact matches to this watchlist. An exact match generates a high-severity alert. 2. (Statistical) For PowerShell scripts (Event ID 4104), calculate the character frequency distribution and entropy of each script block. Compare the distribution against a baseline of legitimate administrative scripts using a Chi-squared test. A statistically significant deviation indicates potentially obfuscated or packed code used for evasion. 3. (Machine Learning) Train a one-class SVM model on the command-line arguments of legitimate system processes (e.g., wmic.exe, systeminfo.exe). Use this model to classify new command-line executions; commands flagged as outliers are candidates for malicious system checks."
          },
          {
            "description": "A single process sequentially accesses multiple files, registry keys, or services within a short time window, where the artifacts are commonly associated with virtualization environments (e.g., VMware tools, VirtualBox guest additions).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints, especially developer workstations and security analysis sandbox systems.",
            "action": "1. (Symbolic) Create a rule that triggers when a single process (by Process ID/GUID) generates events for accessing 3 or more distinct artifacts from a watchlist within 60 seconds. The watchlist should include registry keys (`HKLM\\HARDWARE\\DESCRIPTION\\System\\SystemBiosVersion` containing 'VBOX'), files (`C:\\Windows\\System32\\drivers\\VBoxGuest.sys`), and process names (`vmtoolsd.exe`). 2. (Statistical) For each process, count the number of accesses to VM-related artifacts per minute. Establish a baseline distribution of these counts across the environment (most will be zero). Flag any process where the count exceeds the 99.9th percentile of this distribution. 3. (Machine Learning) Use a DBSCAN clustering algorithm on process activity data, with features like the count of registry queries, file accesses to system drivers, and WMI calls per minute. Processes forming small, dense clusters separate from the large cluster of normal activity are likely performing coordinated, anomalous discovery."
          },
          {
            "description": "A process, upon startup, performs one or more system checks and subsequently terminates without establishing any network connections or writing significant data to disk, followed by the deletion of its source executable.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4689",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly for phishing targets, and internet-facing servers.",
            "action": "1. (Symbolic) Define a stateful rule that looks for the sequence: (A) Process creation (Event ID 4688) from a non-standard path (e.g., %APPDATA%, %TEMP%). (B) Process performs a VM check (matches actions from previous evidence). (C) Process terminates (Event ID 4689) within 2 minutes. (D) No corresponding network traffic in `Zeek conn.log` for that host and time window. (E) The source executable is deleted (Event ID 4663 with Accesses: DELETE). 2. (Statistical) Calculate the ratio of (system queries + file checks) / (network connections) for all short-lived processes (< 5 minutes). An infinite or statistically high ratio is anomalous. Model the distribution of this ratio and flag outliers that fall beyond 3 standard deviations from the mean. 3. (Machine Learning) Develop a time series model (e.g., LSTM) for expected process behavior sequences (create -> read config -> network activity -> terminate). Feed sequences of process events into the model. An 'evasive termination' sequence will have a high anomaly score because it deviates from learned normal patterns by lacking the expected network activity phase."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary performing system checks to discover the execution environment?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "An endpoint initiates an outbound network connection to an IP address or non-standard port known to be used by virtualization software for host-guest communication or by malware for sandbox detection.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VDI host-only networks, and traffic between virtual machines.",
            "action": "1. (Symbolic) Create a high-priority alert rule to trigger on any `Zeek conn.log` entry where `id.resp_p` is a port on a maintained watchlist of known VM backdoor/control ports (e.g., TCP/5658 for VMware). This is a high-confidence indicator. 2. (Statistical) Analyze `Zeek conn.log` for unsuccessful connection attempts (`conn_state` of 'REJ', 'RSTO'). Calculate the baseline rate of unsuccessful connections per host. A sudden spike in unsuccessful connections from a single host to unusual ports could indicate probing for a sandbox environment's network listeners. 3. (Machine Learning) Use an autoencoder trained on legitimate network connection tuples (`src_ip`, `dst_ip`, `dst_port`, `proto`). Connections that have a high reconstruction error when passed through the trained model are anomalous and may represent attempts to connect to rare sandbox-specific ports."
          },
          {
            "description": "A process is created with command-line arguments or script content matching the execution patterns of known open-source discovery tools that include modules for environment keying (e.g., Seatbelt, V-Hunter, Pafish).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints and servers, particularly those managed by IT and security teams.",
            "action": "1. (Symbolic) Maintain a library of regular expressions matching command-line invocations of tools like Seatbelt (`Seatbelt.exe -group=all`) or specific PowerShell discovery cmdlets (`Get-VM`). Monitor Event ID 4688 and 4104 for matches. 2. (Statistical) Establish a baseline of legitimate script execution for administrators vs. regular users. Calculate the frequency of discovery-related cmdlet usage (e.g., `Get-WmiObject`, `Get-CimInstance`) per user session. A regular user account exhibiting a cmdlet usage frequency profile similar to a sysadmin's is anomalous. 3. (Machine Learning) Train a Naive Bayes classifier on PowerShell script blocks (Event ID 4104) to distinguish between 'Benign' and 'Recon' categories based on features like cmdlet presence, script length, and entropy. Use the trained model to score new scripts in real-time."
          },
          {
            "description": "A newly created process, especially if unsigned or running from a temporary directory, executes a statistically unusual number and variety of system information queries within its first few minutes of execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, with a focus on monitoring newly created processes.",
            "action": "1. (Symbolic) Create a rule that triggers if an unsigned process running from `%APPDATA%` or `%TEMP%` executes `wmic.exe`, `systeminfo.exe`, or `reg.exe query` more than 5 times within a 60-second window. 2. (Statistical) For each process, calculate the Shannon entropy of the WMI classes or registry hives it queries within the first minute. A high entropy score indicates the process is touching many different parts of the system, characteristic of broad discovery. Alert on significant positive deviations from a baseline. 3. (Machine Learning) Use K-Means clustering to group processes based on a feature vector of their initial behavior (e.g., number of child processes, count of WMI queries, count of registry queries). Analyze the resulting clusters; small, distinct clusters often represent anomalous behavior like intense discovery."
          },
          {
            "description": "A process performs file system enumeration on paths containing keywords associated with security analysis, such as 'sample', 'malware', 'sandbox', or the names of common analysis tools.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (Desktop, Downloads), temporary file locations, and dedicated security analysis VM environments.",
            "action": "1. (Symbolic) Monitor Windows Event ID 4663 (`Object Name` field) for access attempts to files or directories containing keywords from a watchlist: `['malware', 'sample', 'virus', 'sandbox', 'pafish', 'procmon', 'wireshark']`. Alert on any match. 2. (Statistical) For each user session, calculate the frequency of file/directory access to paths outside of the user's standard working set. A process that suddenly starts probing unusual system directories it has never accessed before is anomalous. Use a moving average of 'rare path' access counts to detect spikes. 3. (Machine Learning) Train a decision tree classifier to predict if a file access event (Event ID 4663) is 'suspicious'. Features can include: `process_is_unsigned`, `path_contains_keyword`, `process_running_from_temp`, `is_rare_path_for_user`. The model can provide a risk score for each file access event."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]