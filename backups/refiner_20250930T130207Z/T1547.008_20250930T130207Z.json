[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying or adding LSASS drivers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "An LSASS driver file (.dll) on disk matches the hash of a known malicious LSA driver, or the LSA Security Packages registry key is modified to include a known malicious DLL name.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for the creation of new files (Sysmon Event ID 11) in system directories and compute their hashes. Compare these hashes against a CTI feed of known malicious file hashes associated with tools like Mimikatz that use this technique. Concurrently, monitor registry key `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages` (via Windows Event ID 4657) for the addition of known malicious DLL names. Alert on any matches."
          },
          {
            "description": "A new DLL is added to an LSA-related registry key (e.g., Security Packages) that is unsigned, has low prevalence across the environment, or resides in an unusual file path.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor modifications to `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages` and other LSA-related keys. For any added DLL, automatically verify its digital signature. Additionally, check its file path against a list of standard locations (e.g., `C:\\Windows\\System32\\`). Use frequency analysis to identify DLLs that are rare across the enterprise. Alert on any DLLs that are unsigned, located in non-standard paths (e.g., `C:\\Temp\\`, `C:\\ProgramData\\`), or have a low prevalence score."
          },
          {
            "description": "The LSASS process (lsass.exe) loads a DLL that is not part of an established baseline of legitimate, known-good LSA security and notification packages for that host's OS build.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Using Sysmon Event ID 7 (`ImageLoaded` by `lsass.exe`), create and maintain a baseline of all DLLs normally loaded by LSASS on a golden image or representative set of stable hosts. Continuously monitor `lsass.exe` module loads on all endpoints and alert on any DLL that is not present in the established baseline. Use descriptive statistics on the set of loaded modules per host to identify outlier hosts with an unusual number or composition of LSA packages."
          },
          {
            "description": "An unusual process (e.g., cmd.exe, powershell.exe, a non-system process running in user context) modifies critical LSA registry keys.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate registry modification events (Windows Event ID 4657) on `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\*` keys with the process that initiated the change. Establish a baseline of legitimate processes that modify this key (e.g., System, TrustedInstaller.exe). Alert when any other process, especially interactive shells (`powershell.exe`, `cmd.exe`) or downloaded executables running in a user session, writes to this key. Use correlation analysis to link the modifying process to its parent process and user context."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges by modifying or adding LSASS drivers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.008",
        "name": "LSASS Driver",
        "evidence": [
          {
            "description": "Execution of a command or script containing strings known to be used for installing malicious LSA drivers, such as commands found in Mimikatz or PowerSploit.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor process command lines (Windows Event ID 4688) and PowerShell script blocks (Windows Event ID 4104) for specific strings, commands, or registry paths associated with this technique. Use regular expressions to search for patterns like `reg add HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa` or function names from modules like PowerSploit's `Install-Mimikatz`. Correlate hits with the user context to identify non-privileged users attempting the action."
          },
          {
            "description": "A rapid, ordered sequence of events occurs: a DLL file is created, an LSA registry key is modified to point to that file, and lsass.exe subsequently attempts to load the new DLL.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4657",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Define and monitor for a specific sequence of events on a single host within a short time window (e.g., 60 seconds): 1. File creation of a DLL (Sysmon Event ID 11). 2. A registry write (Windows Event ID 4657) to `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages` that includes the name of the newly created file. 3. A module load event by `lsass.exe` for that same DLL (Sysmon Event ID 7). Alerting on this specific, ordered pattern provides a high-fidelity indicator of this technique being actively used."
          },
          {
            "description": "A user process modifies LSA configuration, followed by the original user context gaining SYSTEM-level privileges or spawning new processes as SYSTEM.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Trace process ancestry using Windows Event ID 4688. Identify a low-privilege user's process that leads to a modification of the LSA registry key (Windows Event ID 4657). Following this modification, monitor for new logon events (Windows Event ID 4624, Logon Type 5 for service, Type 2 for interactive) for that same user account but with elevated privileges, or for new processes created by the user's original process tree that are now running as `NT AUTHORITY\\SYSTEM`. Use correlation analysis to link the registry modification event to subsequent high-privilege activity."
          },
          {
            "description": "An anomalous spike in LSA-related errors, such as failure to load a security package, immediately follows other suspicious user or process activity, indicating a failed privilege escalation attempt.",
            "data_sources": [
              "Windows Event ID 3033",
              "Windows Event ID 3063",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor for LSA error events (Windows Event ID 3033 - Security package init failed; 3063 - package failed to load). Use time series analysis to detect anomalous spikes in the frequency of these errors. When a spike is detected, correlate it backwards in time (e.g., within 5 minutes) with process creation events (Windows Event ID 4688) on the same host to identify the process that likely caused the failed load attempt. Investigate the source process and its user context for signs of attempted privilege escalation."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]