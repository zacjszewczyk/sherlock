[
  {
    "information_requirement": "Has the adversary attempted to enumerate local system accounts? (TA0007 - Discovery)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1087.001",
        "name": "Local Account",
        "evidence": [
          {
            "description": "Execution of a process where the file hash matches a known malicious tool used for local account discovery.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Member servers, Domain controllers",
            "action": "1. (Symbolic) Monitor process creation events (Windows Event ID 4688). For each new process, extract the file hash (e.g., SHA256) and match it against a threat intelligence feed of hashes for tools like PowerSploit, BloodHound, or Mimikatz. Alert on any match. 2. (Statistical) For any executed hash not on a known-bad or known-good list, calculate its prevalence across the enterprise. Flag processes whose hash prevalence is in the bottom 1st percentile (extremely rare) for investigation, especially if the parent process is anomalous (e.g., winword.exe). 3. (Machine Learning) Employ a pre-trained classification model (e.g., Random Forest) that uses features such as process name, parent process, user context, and hash prevalence to score the likelihood of the execution being malicious. Alert when the score exceeds a predetermined confidence threshold."
          },
          {
            "description": "Execution of a process containing command-line arguments that match patterns for local account enumeration utilities or scripts.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Member servers, Domain controllers, Terminal servers",
            "action": "1. (Symbolic) Monitor process creation events (Windows Event ID 4688) and their associated command lines. Use regular expressions to search for commands like `net user`, `net localgroup`, `Get-LocalUser`, `wmic useraccount get`, `dscl . list /Users`, and `esxcli system account list`. Alert on any match originating from a non-standard parent process (e.g., outlook.exe). 2. (Statistical) For each user, establish a baseline of command-line activity. Calculate the Shannon entropy of the command-line string; alert if the entropy is a significant outlier (e.g., > 3 standard deviations from the user's average), indicating potential obfuscation. Also, alert if the frequency of discovery-related commands from a user or host exceeds the 99th percentile of its historical activity. 3. (Machine Learning) Utilize a sequence analysis model (e.g., LSTM) to analyze the temporal chain of commands executed by a user. Train the model to recognize suspicious sequences, such as network connection -> `whoami` -> `net user`, and flag user sessions that exhibit these learned malicious patterns."
          },
          {
            "description": "A high-frequency burst or anomalous grouping of local account discovery commands originating from a single source host or user, targeting one or multiple destinations.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Source host initiating discovery, Target hosts being enumerated, Security Information and Event Management (SIEM) system",
            "action": "1. (Symbolic) Identify individual account discovery commands using regex pattern matching on command-line arguments as the input for this analysis. 2. (Statistical) Aggregate counts of these discovery commands by source user and source host in 5-minute windows. Establish a historical baseline (mean, standard deviation) for these counts. Alert when the count in a time window exceeds a dynamic threshold, such as 3 standard deviations above the mean for that entity. 3. (Machine Learning) Feed event features (source host, target host, user, command type, timestamp) into a clustering algorithm like DBSCAN to group sparse, 'low and slow' enumeration events that occur across different hosts and times into a single security case, identifying a coordinated campaign that would evade simple frequency thresholds."
          },
          {
            "description": "A local account discovery event on a host is followed within a defined time window by a logon attempt using a discovered, non-administrative, or dormant local account.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, High-value servers, User workstations, SIEM system",
            "action": "1. (Symbolic) Create a stateful correlation rule that triggers when a T1087.001 discovery event (e.g., `net user` from EID 4688) is observed from a source. If, within the next 60 minutes, a logon event (EID 4624/4625) occurs involving a local account (Logon Type 2) from that same source, generate an alert. 2. (Statistical) Enrich the alert by analyzing the logon history of the target account. Calculate the time since the account's last successful logon. If the account is in the 95th percentile for dormancy (i.e., one of the least frequently used accounts), significantly raise the alert's priority. 3. (Machine Learning) Use a supervised classification model (e.g., Logistic Regression) to predict if a logon attempt is malicious. Features should include logon type, time of day, source IP, and a boolean feature: `is_preceded_by_discovery_event_in_last_60_min`. An event with this feature flagged as true would receive a high-risk score."
          },
          {
            "description": "Access to or creation of a backup of the Security Account Manager (SAM) database is followed by a network exfiltration event from the source host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical application servers, Network egress points",
            "action": "1. (Symbolic) Monitor for process creation events (EID 4688) with command lines indicating SAM hive access, such as `reg.exe save hklm\\sam` or `vssadmin create shadow`. Correlate this with Zeek file logs (`files.log`) showing a file named `sam.save` or similar being transferred. 2. (Statistical) In the absence of a `files.log` hit, analyze network connection logs (`conn.log`) from the host that accessed the SAM hive. Establish a baseline for the host's typical outbound data volume per connection. Alert if a connection within minutes of the SAM access shows an outbound data volume in the 99th percentile for that host. 3. (Machine Learning) Employ an anomaly detection model (e.g., Isolation Forest) on time-series data from `conn.log` for critical assets. An anomalous spike in outbound traffic that is temporally correlated with the host-based SAM access event should be flagged as a high-confidence indicator of credential theft for offline discovery."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]