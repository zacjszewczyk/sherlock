[
  {
    "information_requirement": "Is the adversary using AppleScript for malicious execution on macOS endpoints? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.002",
        "name": "AppleScript",
        "evidence": [
          {
            "description": "An AppleScript execution event, identified by the execution of a .scpt or .applescript file, where the file's SHA256 hash matches a known-bad hash from a threat intelligence feed, or the script initiates a network connection to an IP or domain with a reputation score below a defined threshold (e.g., < 20/100).",
            "data_sources": [
              "macOS Process Creation Events",
              "macOS File Creation Events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (laptops, desktops, servers), Network egress points (firewalls, proxies), Threat Intelligence Platform",
            "action": "For every macOS process creation event involving an AppleScript interpreter (e.g., osascript, Automator), perform the following: 1. (Symbolic) Compute the SHA256 hash of the script file and query against a threat intelligence feed of known-malicious hashes. Concurrently, from associated network events in Zeek conn.log, extract destination IPs/domains and query them against a malicious indicator feed. Alert on any match. 2. (Statistical) Analyze the parent process name. Calculate the historical frequency of each parent process for osascript across the enterprise. Flag executions where the parent process falls below the 5th percentile of frequency (e.g., an unusual parent like 'Preview.app' or 'Microsoft Word'). 3. (Machine Learning) Feed features into a pre-trained classification model (e.g., Random Forest). Features should include: parent process name, script file path entropy, presence of network connections, destination IP reputation, and time of execution. An output score above a certain threshold (e.g., 0.85) indicates a high probability of malicious activity."
          },
          {
            "description": "An 'osascript' process is executed with command-line arguments containing high-entropy strings indicative of obfuscation, or includes the inline execution flag '-e' followed by suspicious commands like 'do shell script', 'curl', 'python', or base64-encoded payloads.",
            "data_sources": [
              "macOS Process Creation Events",
              "macOS Script Content Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS workstations and servers, User home directories where scripts may be dropped, Application sandbox directories",
            "action": "For all 'osascript' process executions: 1. (Symbolic) Apply regular expressions to the command line to detect high-risk patterns, such as the inline execution flag '-e' paired with keywords like 'do shell script', 'python', 'curl', 'base64', or IP addresses in private ranges. Alert on any matches. 2. (Statistical) For commands using '-e', calculate the Shannon entropy of the inline script content. Compare this value against a pre-computed baseline for normal inline scripts in your environment. An entropy score exceeding the 95th percentile is a strong indicator of packed or obfuscated code and should be investigated. 3. (Machine Learning) If script content is available, feed it into a fine-tuned NLP model (e.g., a BERT-based classifier) trained to distinguish between benign and malicious AppleScript code. An alert should be generated if the model's confidence score for the 'malicious' class surpasses a defined threshold (e.g., 0.90)."
          },
          {
            "description": "A process chain is observed where a non-standard parent (e.g., Microsoft Word, Adobe Reader) spawns 'osascript', which in turn (or one of its children) initiates an outbound TCP/UDP connection within 60 seconds of execution to a destination IP address that is statistically rare for the host or the organization.",
            "data_sources": [
              "macOS Process Creation Events",
              "macOS Network Connection Events",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints of users handling external documents (e.g., sales, HR), Network egress points, DNS servers",
            "action": "Correlate macOS process and network events with Zeek logs. 1. (Symbolic) For any network connection originating from an 'osascript' process or its children, check the destination IP address and FQDN (from Zeek dns.log) against threat intelligence feeds for known malicious infrastructure. Alert on a match. 2. (Statistical) For each connection, determine the rarity of the destination FQDN. Maintain a 30-day rolling count of all FQDNs requested across the enterprise. If an 'osascript'-related connection is made to a domain seen less than a threshold number of times (e.g., < 5 times), or if its JA3/JA3S hash is in the bottom 1% of observed hashes, increase its risk score. Flag connections with a high risk score. 3. (Machine Learning) Apply an anomaly detection model (e.g., Isolation Forest) to a feature set describing the connection event: parent process name, destination port, bytes sent, JA3 hash rarity, and time of day. The model should be trained on benign traffic to identify outlier connections indicative of C2 communication."
          },
          {
            "description": "The 'osascript' process or a child process performs a file write or modification operation within a directory commonly used for persistence, such as /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, or /Library/ScriptingAdditions. The written file is an executable or a property list (.plist) file.",
            "data_sources": [
              "macOS File Creation Events",
              "macOS File Modification Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS persistence locations (/Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons), User and System Application Support folders, All macOS endpoints",
            "action": "Monitor all file system events on macOS endpoints. 1. (Symbolic) Create a high-severity alert that triggers whenever the 'osascript' process (or its immediate children) writes or modifies a file in a predefined list of persistence directories, including '/Library/LaunchDaemons', '/Library/LaunchAgents', and '~/Library/LaunchAgents'. 2. (Statistical) For each user, baseline the number of files created per hour by 'osascript'. Use a percentile-based threshold (e.g., 99th percentile) to detect an abnormal burst of file creation activity from 'osascript', which could indicate payload dropping or staging. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) trained on benign file system telemetry (process name, file path, file type, file size). A new file write event by 'osascript' that is classified as a noise point (i.e., does not belong to any existing cluster of normal behavior) should be flagged as anomalous and investigated as a potential persistence attempt."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]