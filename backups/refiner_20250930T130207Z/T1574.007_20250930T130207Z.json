[
  {
    "information_requirement": "Is the adversary establishing persistence by hijacking the PATH environment variable?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable",
        "evidence": [
          {
            "description": "A file is created in a user-writable directory (e.g., %APPDATA%, %TEMP%) or a known persistence location, where the file's hash matches a known malicious implant from threat intelligence, and its name masquerades as a common system utility.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": "For each file creation, correlate host and network data. 1. (Symbolic) Create a rule that triggers when a file creation event (Windows Event ID 4663) in a high-risk directory (e.g., C:\\Users\\*, C:\\ProgramData\\*) has a filename matching a common system utility (e.g., 'net.exe', 'findstr.exe') and its hash is present in a threat intelligence feed of known malicious indicators. 2. (Statistical) For each user, baseline the set of directories where they typically create executable files. Calculate the entropy of the file path for new file creations. Alert if a new executable is created in a directory with unusually high entropy or in a directory that is statistically rare for that user (e.g., less than 1% of their historical file creations). 3. (Machine Learning) Use a one-class SVM or isolation forest model trained on benign file creation events (features: user, path, filename, parent process) to identify anomalous file creations. An event flagged as an outlier, especially when correlated with a subsequent execution from that path (Windows Event ID 4688), indicates potential malicious activity."
          },
          {
            "description": "A modification is made to the system-wide or user-specific PATH environment variable in the Windows Registry, prepending a non-standard, user-writable directory (e.g., C:\\ProgramData\\Temp, %APPDATA%\\Local\\Temp).",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for GPO-based changes), User Workstations, Terminal Servers",
            "action": "Monitor and analyze registry modifications to the PATH variable. 1. (Symbolic) Alert on any registry modification (Windows Event ID 4657) to 'HKLM\\SYSTEM\\...\\Environment\\PATH' or 'HKCU\\Environment\\PATH' where the new value prepends a directory path containing strings like '\\AppData\\', '\\Temp', '\\Downloads', or '\\ProgramData'. 2. (Statistical) Profile the PATH variable for all systems to establish a baseline of common directories. For each modification event, calculate the Levenshtein distance between the old and new PATH string. Flag modifications where the prepended directory is statistically rare across the enterprise (e.g., present on <1% of assets). 3. (Machine Learning) Train a classifier (e.g., Random Forest) to predict if a PATH modification is malicious. Features could include the process making the change, the user context, the prepended directory's characteristics (is it user-writable, recently created), and time of day. The model's output probability can be used to score the risk of the modification."
          },
          {
            "description": "A legitimate process, such as 'svchost.exe' or an application from 'Program Files', executes a child process (e.g., 'net.exe') whose full path resolves to a non-standard, user-writable directory instead of its expected location (e.g., C:\\Windows\\System32).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints and Servers, especially those with auto-starting applications",
            "action": "Analyze process parent-child relationships for anomalies. 1. (Symbolic) Create a detection rule that triggers when a process creation event (Windows Event ID 4688) shows a parent process from a trusted path (e.g., 'C:\\Windows\\System32\\', 'C:\\Program Files\\') spawning a child process with a common system name (e.g., 'net.exe', 'powershell.exe') from an untrusted path (e.g., 'C:\\Users\\*', 'C:\\ProgramData\\*'). 2. (Statistical) For every parent-child process relationship (e.g., 'services.exe' -> 'net.exe'), build a statistical baseline of the child's execution path. Use frequency analysis to identify the top 99% of legitimate paths. Alert when a child process executes from a path that is not in this baseline. 3. (Machine Learning) Use a process lineage anomaly detection model, such as an autoencoder trained on benign process trees. A new, anomalous parent-child execution pattern (e.g., svchost.exe spawning cmd.exe from C:\\Temp) will be flagged with a high reconstruction error."
          },
          {
            "description": "A newly created scheduled task or autorun entry specifies a command that calls a binary by name only (e.g., 'python.exe script.py'), which, due to a manipulated PATH, resolves to a malicious executable in a non-standard location.",
            "data_sources": [
              "Windows Event ID 4698",
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers, Domain Controllers (for scheduled tasks deployed via GPO)",
            "action": "Inspect commands in persistence mechanisms. 1. (Symbolic) Monitor for new scheduled tasks (Windows Event ID 4698) or Run key entries (Windows Event ID 4657) where the action calls a binary without a full path. Correlate this with a process execution (Windows Event ID 4688) from that task where the resolved path is a user-writable directory. 2. (Statistical) Profile all commands in scheduled tasks and autorun entries. Calculate the frequency of commands that use relative vs. absolute paths. Flag new entries with relative paths that are statistically uncommon for the host or user. 3. (Machine Learning) Develop a time-series model to track the creation of scheduled tasks that use relative paths. A sudden spike in the creation of such tasks on a host, detected as an anomaly in the time-series, could indicate a coordinated persistence attempt."
          },
          {
            "description": "A process executing from an anomalous path (e.g., C:\\ProgramData\\Temp\\net.exe) initiates outbound network connections to an IP address not on an organizational allowlist or exhibits a periodic, 'heartbeat' connection pattern.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, All Endpoints and Servers",
            "action": "Correlate anomalous host processes with network activity. 1. (Symbolic) Join process creation events (Windows Event ID 4688) with network logs (Zeek conn.log). Alert if a process from a user-writable path connects to a destination IP on a C2 threat intelligence feed. 2. (Statistical) For processes from hijacked paths, analyze their network connections in Zeek logs. Calculate the standard deviation of time intervals between connections to the same destination; a low standard deviation suggests automated beaconing. Also, flag connections to domains with high entropy or those younger than 30 days. 3. (Machine Learning) Apply a time-series anomaly detection algorithm (e.g., LSTM) to outbound connection volume and frequency for processes identified as potentially hijacked to detect C2 beaconing patterns that deviate from the established network baseline."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by hijacking the PATH environment variable?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable",
        "evidence": [
          {
            "description": "A file with a hash matching a known privilege escalation tool is created in a user-writable directory and is subsequently executed by a process running with elevated privileges (e.g., as SYSTEM or a member of the Administrators group).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Multi-user Terminal Servers, Development Servers",
            "action": "Hunt for known privilege escalation tools being positioned for execution. 1. (Symbolic) Create a rule that triggers when a file creation event (Windows Event ID 4663) in a user-writable path has a hash matching a known privilege escalation tool. Correlate with a subsequent process creation (Windows Event ID 4688) where the user context is high privilege (e.g., 'SYSTEM'). 2. (Statistical) Maintain a list of processes that legitimately run with high privileges. For each, baseline their typical child process execution paths. If a privileged process spawns a child from a path that is a statistical outlier (e.g., any user-writable directory), flag it. 3. (Machine Learning) Train a classification model (e.g., Gradient Boosting) to identify suspicious parent-child process pairs. Features should include parent privilege level, child process path, and whether the child path is user-writable. The model can flag combinations indicative of privilege escalation, such as a SYSTEM service spawning a process from a user's temp folder."
          },
          {
            "description": "A sequence of events is observed: 1. A low-privilege user process creates an executable in a user-writable directory. 2. A high-privilege process (e.g., a service running as SYSTEM) subsequently executes a process of the same name, which resolves to the path created in step 1.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers with misconfigured services, User Workstations, Staging Servers",
            "action": "Detect privilege escalation sequences. 1. (Symbolic) Define a sequence-based rule: (Event A) A low-privilege process (Windows Event ID 4663) creates file 'F' in path 'P'. (Event B) Within 5 minutes, a high-privilege process (Windows Event ID 4688) executes 'P\\F'. Trigger if 'P' is user-writable. 2. (Statistical) Analyze process chains. Calculate the probability of a given user context transition between a parent and child (e.g., 'UserA' -> 'SYSTEM'). Flag transitions that are statistically improbable based on historical data. 3. (Machine Learning) Use a graph-based anomaly detection model on the process-event graph. A path in the graph representing 'Low-Privilege Process -> Creates -> Malicious File -> Executed By -> High-Privilege Process' would be identified as an anomalous subgraph."
          },
          {
            "description": "A core system process running as SYSTEM (e.g., services.exe, svchost.exe) spawns a child process whose executable path is located within a user's profile directory (e.g., C:\\Users\\user\\AppData\\Local\\Temp\\net.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": "Focus on high-privilege parent processes. 1. (Symbolic) Create an alert that triggers if a process creation event (Windows Event ID 4688) has a 'ParentProcessName' of 'services.exe', 'svchost.exe', or 'taskhostw.exe' and the 'NewProcessName' (child path) matches the regex `^C:\\\\Users\\\\.*`. 2. (Statistical) For each privileged parent process, build a profile of its legitimate child process paths. Use a set-based comparison or Jaccard index to measure how much a new child process path deviates from the established baseline. An execution from a path with a Jaccard index of 0 from a user-writable location is a high-confidence indicator. 3. (Machine Learning) Employ an isolation forest model on process creation events, using features such as parent process name, parent user, and child process path. The model is highly effective at identifying rare, outlier events, such as a SYSTEM-level process spawning a child from a user's download folder."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking the PATH environment variable?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable",
        "evidence": [
          {
            "description": "A process is executed with a filename matching a known security tool (e.g., 'Sysmon.exe', 'procexp.exe') or a legitimate system utility, but its execution path is a non-standard, user-writable directory, and its signature is invalid or its hash is unknown.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SOC Analyst Workstations, IT Administrator Machines, All Endpoints with EDR agents",
            "action": "Hunt for masquerading security tools. 1. (Symbolic) Maintain a watchlist of security tool process names (e.g., 'procexp.exe', 'Sysmon.exe'). Trigger an alert if a process creation event (Windows EventID 4688) has a name on this list but its execution path is not in the corresponding allowlisted directory OR its signature is invalid. 2. (Statistical) For each process name on the security watchlist, baseline its legitimate hash and signing certificate. Calculate the frequency of different hashes or signers seen for each name. Alert if a process is launched with a hash or signer that is statistically rare (e.g., seen only once) for that process name. 3. (Machine Learning) Train a decision tree classifier to identify masquerading tools. Features would include: process name, path depth, path entropy, presence of 'Program Files' in path, and signature status. The model can distinguish legitimate executions from masquerading attempts."
          },
          {
            "description": "A file is created in a directory known to be prepended to the system PATH (e.g., C:\\Python27\\, C:\\ProgramData\\Oracle\\), where the filename matches a whitelisted application or common utility (e.g., 'powershell.exe'), but its hash does not match the legitimate version.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Systems with legacy applications, Developer workstations, Servers with custom application installs",
            "action": "Detect file drops in PATH directories. 1. (Symbolic) Create a rule that alerts on file creation (Windows Event ID 4663) in any directory listed in the system PATH variable (excluding `System32` and `Windows`) if the new filename matches a critical system utility (e.g., 'net.exe', 'cmd.exe'). 2. (Statistical) For each directory in the PATH, profile the set of executable files that are commonly created or modified. Use frequency analysis to identify outlier file creations. If a file named 'net.exe' is created in 'C:\\Perl64\\bin', and this has never happened before, it is a high-confidence statistical anomaly. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on file creation events (features: file path, file name, parent process). Clusters will form around normal software updates. Events that do not fall into any cluster are outliers, representing anomalous file creations in unexpected locations."
          },
          {
            "description": "A process is created where the command line invokes a utility by its name only (e.g., 'net user...'), but the resolved executable path is a user-writable directory (e.g., C:\\Users\\...\\net.exe) instead of the expected system path (e.g., C:\\Windows\\System32\\net.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": "Analyze the resolution of relative path executions. 1. (Symbolic) For each process creation event (Windows Event ID 4688), if the command line does not contain ':\\', compare the process name to the full execution path. Alert if the execution path is not the default system path for that utility (e.g., if command is 'net.exe' but path is not 'C:\\Windows\\System32\\net.exe'). 2. (Statistical) Build a baseline of all `(ProcessName, ExecutionPath)` tuples. For each process name, calculate the probability distribution of its execution paths. Alert when a process executes from a path that has a very low probability (e.g., <0.1%) for its name. 3. (Machine Learning) Train an autoencoder on legitimate process creation events (features: command line, resolved execution path, parent process). An event where the command line is inconsistent with the resolved path (e.g., 'net' resolves to 'C:\\Temp\\net.exe') will produce a high reconstruction error and be flagged as an anomaly."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]