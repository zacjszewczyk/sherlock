[
  {
    "information_requirement": "Has the adversary escalated privileges using process injection via APCs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.004",
        "name": "Asynchronous Procedure Call",
        "evidence": [
          {
            "description": "Execution of a process whose file hash matches a known malicious injector tool that utilizes APC injection.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "For every process creation event (Windows Event ID 4688), enrich the event with the file hash of the executable. Compare these hashes against a continuously updated threat intelligence feed of known malicious binaries, specifically flagging tools known to use APC injection for privilege escalation. Investigate any matches."
          },
          {
            "description": "An unsigned process, or a process executing from a non-standard path (e.g., temp directories), opens a handle to a high-integrity system process with thread modification rights.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4656 for requests to open handles to other processes, specifically targeting high-integrity processes (e.g., svchost.exe, winlogon.exe). Correlate the source Process ID with Event ID 4688 to find its file path and signature status. Create a detection rule that flags instances where a source process is unsigned OR located in a suspicious directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public) and requests access rights required for injection (e.g., THREAD_SET_CONTEXT, PROCESS_VM_WRITE). This pattern is a strong indicator of an injection attempt."
          },
          {
            "description": "A non-system or non-debugger process opens a handle to another process with specific access rights required for APC injection (e.g., PROCESS_VM_WRITE, THREAD_SET_CONTEXT).",
            "data_sources": [
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4656 (A handle to an object was requested) for process handle requests. Establish a baseline of normal process-to-process handle requests, creating an allow-list of known good source processes (e.g., lsass.exe, debuggers, authorized security tools). Flag any process not on this list that requests access rights like `0x20` (PROCESS_VM_WRITE), `0x40` (PROCESS_VM_OPERATION), or `0x100` (THREAD_SET_CONTEXT), especially when targeting common system processes. Use correlation analysis to link these handle requests with subsequent suspicious activity from the target process."
          },
          {
            "description": "A legitimate system process (e.g., svchost.exe, explorer.exe) that is a common injection target spawns an unusual child process, such as a command shell or a script interpreter.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze process creation events (Windows Event ID 4688) to model normal parent-child relationships. Create a baseline of legitimate child processes for common injection targets like svchost.exe, explorer.exe, and browsers. Generate alerts when these parent processes spawn unexpected children, particularly command shells (cmd.exe, powershell.exe) or processes running from temporary user directories. Use descriptive statistics and frequency analysis to identify child processes that are statistical outliers for a given parent."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using process injection via APCs?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.004",
        "name": "Asynchronous Procedure Call",
        "evidence": [
          {
            "description": "A commonly injected process (e.g., explorer.exe, svchost.exe, chrome.exe) initiates outbound network connections to a known malicious IP address or domain.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Correlate process creation data (Windows Event ID 4688, to identify process names and PIDs) with network connection logs (Zeek conn.log). Isolate connections originating from processes that are common injection targets and are expected to have network activity (e.g., browsers, svchost.exe). Inner join the destination IP addresses and domains from these connections with a high-confidence, continuously updated CTI feed of C2 servers. A match indicates a legitimate process has likely been compromised for C2, a key defense evasion behavior."
          },
          {
            "description": "An unsigned process or one executing from a suspicious location (e.g., temporary directories) opens a handle to a legitimate, network-facing process with rights to modify its memory or threads.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Monitor Windows Event ID 4656 for requests to open handles to other processes. For each request, correlate the source Process ID with Event ID 4688 to determine its file path and signature status. Alert when a source process that is unsigned OR located in a suspicious directory (%TEMP%, %APPDATA%) requests modification rights (e.g., PROCESS_VM_WRITE) to a common, network-facing target process (e.g., explorer.exe, chrome.exe, firefox.exe). This pattern indicates a potential attempt to inject into a process that can blend in with normal network traffic."
          },
          {
            "description": "A typically non-network-facing process (e.g., notepad.exe, services.exe) initiates outbound network communications after being created with an anomalous parent process.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "Network devices",
              "Endpoints",
              "Servers"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Establish a baseline of processes that normally initiate network connections. Use Windows Event ID 4688 and Zeek conn.log correlation to monitor for network traffic from processes not on this baseline 'allow list'. Prioritize alerts where the parent process is also anomalous (e.g., Microsoft Office application spawning notepad.exe, which then connects to the internet). Use time series analysis to detect sudden spikes in connections from unusual processes, and use entropy measures to identify if a single process is communicating with an unusually high number of distinct destination IPs or ports."
          },
          {
            "description": "Anomalous parent-child process relationships are observed, followed by suspicious network traffic originating from the parent process after the child terminates.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "Endpoints",
              "Servers",
              "Network devices"
            ],
            "nai": "Insert site-specific NAI here",
            "action": "Analyze process trees using parent-child relationships from Windows Event ID 4688 to detect unusual chains (e.g., winword.exe spawning cmd.exe, which runs a brief command and exits). Correlate these flagged parent processes (e.g., winword.exe) with network logs (Zeek conn.log) to check for new, suspicious network traffic patterns (e.g., beaconing, connections to rare domains) that begin shortly after the anomalous child process terminates. This behavioral pattern suggests the parent process was successfully injected and is now executing malicious code."
          }
        ]
      }
    ],
    "version": "2.1",
    "date_created": "2025-05-04",
    "last_updated": "2025-07-20",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]