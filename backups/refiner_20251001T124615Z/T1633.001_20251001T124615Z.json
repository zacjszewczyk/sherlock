[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile analysis or sandbox environments by performing system checks? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "A mobile application, within the first 5 minutes of execution, makes API calls (e.g., Android's 'android.os.SystemProperties.get' or runtime execution of 'getprop') to query specific system properties or reads files associated with known emulator or sandbox environments. The properties or files queried match a watchlist of artifacts (e.g., properties containing 'goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86'; file path '/system/bin/qemu-props'), and this query is not followed by any observable application function that would normally consume this environmental information (e.g., UI rendering adjustments, feature toggles for specific device models).",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "Mobile EDR File Integrity Monitoring Logs",
              "Mobile Application Vetting (MAV) Sandbox Reports",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environment, Corporate-managed mobile devices (Android & iOS), Mobile Device Management (MDM) platform, Mobile Application Vetting (MAV) platform",
            "action": [
              "Create a SIEM detection rule that triggers on Mobile EDR logs where a process calls a system property API (e.g., `android.os.SystemProperties.get`) or executes `getprop` and the property argument contains a known emulator string ('goldfish', 'ranchu', 'qemu', 'vbox', 'generic_x86', 'sdk_google'). The rule should also trigger on file read events for paths like '/system/bin/qemu-props' or '/proc/cpuinfo' where the content matches an emulator signature. Enrich alerts with the application package name, developer certificate, and installation source.",
              "For each new application package name, over its first 5 minutes of runtime on any device, calculate the count of unique system properties queried. Establish a baseline distribution of this count from all applications, segmented by application category (e.g., 'Productivity', 'Games'). Generate an alert for any application whose query count exceeds the 98th percentile of its category-specific baseline or a global baseline if the category is unknown.",
              "Train a Random Forest classifier using labeled data from MAV sandbox runs. Engineer features including: a binary flag for each known emulator property queried (e.g., 'has_ro.hardware_goldfish'), the total count of distinct properties queried in the first 3 minutes, the Shannon entropy of the set of queried property prefixes (e.g., 'ro.build.', 'ro.product.'), and the time in seconds from process start to the first system property query. Deploy the model to assign an 'evasion_probability' score to new applications during automated vetting."
            ]
          },
          {
            "description": "A mobile application queries for the list of available hardware sensors (e.g., accelerometer, gyroscope, light sensor) upon startup, but this query is not followed by a corresponding API call to register a listener for sensor data from the same process within a 90-second window. This indicates the query was for environmental awareness rather than legitimate functionality like motion tracking or display adjustment.",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "MAV Sandbox API Call Trace Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Bring-Your-Own-Device (BYOD) fleet with security agents, Application sandboxing environment, MDM/UEM platform logs",
            "action": [
              "Construct a SIEM correlation rule that triggers when a process on a mobile device generates an API call event for 'SensorManager.getSensorList' (Android) or queries 'CMMotionManager' properties (iOS) and is NOT followed by an event for 'registerListener' (Android) or 'startAccelerometerUpdates'/'startGyroUpdates' (iOS) from the same process ID within 90 seconds. Exclude applications whitelisted for this behavior.",
              "For each application, calculate a 'Dangling Sensor Query Ratio' defined as (Count of 'getSensorList' calls) / (Count of 'registerListener' calls + 1) over the first 5 minutes of execution. Establish a baseline ratio for legitimate applications, segmented by app store category. Alert on applications where this ratio exceeds 3 standard deviations from the category-specific mean, indicating an abnormal number of queries without subsequent use.",
              "Use a DBSCAN clustering algorithm on features representing sensor interaction patterns for each new application. Features should include: 1) Count of `getSensorList` calls in the first 5 minutes. 2) Count of `registerListener` calls in the first 5 minutes. 3) A binary flag indicating if GPS/Location sensor was queried but no location permission was requested in the app's manifest. 4) A binary flag if an ambient light sensor was queried in an app with no screen brightness control functions. Isolate and investigate small clusters or outliers that exhibit high query counts and low registration counts."
            ]
          },
          {
            "description": "A mobile application queries for network interface details (e.g., MAC address, DHCP server), and this query is temporally correlated with an abrupt and sustained shift in the device's network behavior. The change manifests as a sudden cessation of diverse traffic, a pivot to communicating with a single, non-CDN IP address, or a switch to encrypted DNS (DoH/DoT) to a non-standard resolver.",
            "data_sources": [
              "Mobile EDR API Monitoring Logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway), DNS resolvers, Core network switches generating NetFlow/IPFIX, Corporate-managed mobile devices",
            "action": [
              "Create a SIEM correlation rule that links a Mobile EDR alert for a network interface query (e.g., Android's 'NetworkInterface.getHardwareAddress()') to network logs from the same device source IP. Generate a high-severity alert if, within 5 minutes of the query: a) all DNS traffic in `dns.log` switches to a non-corporate DoH resolver identified by its SNI in `ssl.log` (e.g., not 'dns.google' or 'dns.quad9.net'), AND b) the JA3 hash of that new TLS traffic matches a known malware family.",
              "For each mobile device IP, create a script to process Zeek logs in 5-minute, non-overlapping windows. In each window, calculate the Shannon entropy of destination IPs (`id.resp_h` in `conn.log`) and requested domains (`query` in `dns.log`). Calculate a 1-hour rolling average for both entropy scores. Trigger an alert if the current window's entropy for either metric drops more than 80% below its rolling average, indicating a sudden channelization of traffic.",
              "Implement a time-series anomaly detection model for each device. Create a multivariate time series from Zeek logs with features aggregated per minute: `orig_bytes` from `conn.log`, `distinct_dest_ips` (count of unique `id.resp_h`), `connection_count` (count of `uid`s), entropy of `ja3` hashes in `ssl.log`, and the ratio of UDP to TCP connections. Train an LSTM autoencoder on a baseline of normal device behavior. A sustained spike in the model's reconstruction error indicates a significant behavioral deviation requiring investigation."
            ]
          }
        ]
      }
    ],
    "version": "1.4",
    "date_created": "2025-09-26",
    "last_updated": "2025-10-01",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]