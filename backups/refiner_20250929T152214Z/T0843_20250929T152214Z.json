[
  {
    "information_requirement": "Is an adversary attempting to modify controller logic via a program download?",
    "tactic_id": "TA0109",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T0843",
        "name": "Program Download",
        "evidence": [
          {
            "description": "Network traffic containing specific ICS protocol function codes for 'program download' (e.g., S7CommPlus 'Download Block', 'Write Var') originating from an unauthorized source IP address or observed during statistically anomalous time periods for a given PLC.",
            "data_sources": [
              "Zeek s7.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments connected to PLCs, DMZ between IT/OT networks, Engineering Workstation subnet.",
            "action": "1. **Symbolic Logic:** Analyze Zeek s7.log for entries where the 'function_code' field indicates a program download or write operation (e.g., 'Download Block', 'Write Var', 'Set PLC Program'). Cross-reference the 'id.orig_h' (source IP address) with a regularly updated whitelist of authorized Engineering Workstation IPs. Generate an immediate alert if a program download command originates from an IP address not present in the authorized whitelist. 2. **Statistical Method:** For each unique PLC ('id.resp_h'), calculate the hourly frequency of program download events over the last 30 days. Establish a baseline for typical maintenance windows and calculate the 10th percentile of download frequency for each hour. Generate an alert if a current program download event occurs in an hour where the frequency falls below the 10th percentile of the historical baseline for that specific PLC. 3. **Machine Learning:** Apply a time-series anomaly detection model (e.g., using an Isolation Forest or an Exponentially Weighted Moving Average algorithm) to the daily count of program download events per PLC and source IP pair. Train the model on 90 days of historical data to learn normal patterns. Generate an alert when the model detects a significant deviation (e.g., an anomaly score above 0.8) from the learned pattern in terms of volume or timing of program downloads."
          },
          {
            "description": "A successful logon (Windows Event ID 4624) or process creation (Windows Event ID 4688) on an Engineering Workstation precedes or coincides with network activity indicative of a program download (Zeek conn.log to PLC on ICS port), where the initiating user account lacks authorization or the process is not an approved engineering application.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations, Active Directory domain controllers, Network boundary sensors (for Zeek conn.log) within the PCN.",
            "action": "1. **Symbolic Logic:** Correlate Zeek conn.log entries showing connections from an Engineering Workstation to a PLC on an ICS protocol port (e.g., TCP/102 for S7CommPlus) with host logs from the source Engineering Workstation. Identify the 'TargetUserName' from successful logon events (Windows Event ID 4624) and the 'CreatorProcessName' from process creation events (Windows Event ID 4688) occurring within a short time window (e.g., 30 seconds) of the network connection. Alert if the 'TargetUserName' is not in a pre-approved list of authorized engineering personnel or if the 'CreatorProcessName' is not an authorized engineering application (e.g., Siemens TIA Portal, Rockwell Studio 5000). 2. **Statistical Method:** For each Engineering Workstation, calculate the entropy of unique processes initiating outbound network connections to PLCs over a 7-day rolling window. Establish a baseline for the expected entropy. Generate an alert if the entropy score drops below the 5th percentile of the historical baseline, indicating a sudden reduction in process diversity or a consistent use of a single, potentially unauthorized, process. 3. **Machine Learning:** Train a classification model (e.g., Random Forest or Support Vector Machine) on historical Windows Event ID 4688 data from Engineering Workstations. Use features such as 'ParentProcessName', 'CommandLine', 'ProcessPath', 'User', and 'IntegrityLevel' to classify processes initiating connections to ICS devices as 'normal' or 'anomalous'. Generate an alert if a process initiating a connection to a PLC is classified as anomalous by the model."
          },
          {
            "description": "A sequence of ICS command events is observed in Zeek s7.log where a PLC's operating mode is changed to a non-run state (e.g., 'STOP', 'PROGRAM') followed by a program download command (e.g., 'Download Block', 'Write Var') within a defined short time window (e.g., 5 minutes), originating from an unauthorized source or occurring outside scheduled maintenance windows.",
            "data_sources": [
              "Zeek s7.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments connected to PLCs, ICS network monitoring points.",
            "action": "1. **Symbolic Logic:** Implement a stateful correlation rule within the SIEM. For each unique PLC ('id.resp_h'), detect the occurrence of an 's7.log' entry with a 'function_code' indicating a mode change to 'STOP' or 'PROGRAM'. Within a 5-minute window following this event, detect a subsequent 's7.log' entry from the same 'id.orig_h' (source IP) with a 'function_code' for 'Download Block' or 'Write Var'. Alert if this specific command sequence occurs and the 'id.orig_h' is not in a pre-established whitelist of authorized Engineering Workstations for PLC mode changes and program downloads. 2. **Statistical Method:** For each PLC, calculate the average time duration (in seconds) between a 'Stop CPU' command and a subsequent 'Download Block' command over the last 90 days of operational logs. Establish the 95th percentile for this duration. Generate an alert if a newly detected 'Stop CPU' followed by 'Download Block' sequence has a time duration that falls outside the 5th to 95th percentile range, indicating an unusually short or long (potentially suspicious) delay. 3. **Machine Learning:** Develop a sequence-based anomaly detection model (e.g., using Hidden Markov Models or Recurrent Neural Networks like LSTMs) trained on historical sequences of ICS commands from Zeek s7.log for each PLC. The model should learn typical command sequences for routine maintenance and normal operations. Generate an alert when a sequence involving a 'Stop CPU' followed by a 'Download Block' command deviates significantly from the learned normal patterns (e.g., indicated by a high anomaly score or low probability score from the model), suggesting an unusual or unauthorized sequence of operations."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]