[
  {
    "information_requirement": "Is an adversary exploiting remote services to gain initial access into the ICS environment?",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "A network connection originating from an IT network segment targeting an OT asset on a service port known to be vulnerable or rarely used, characterized by a non-standard protocol handshake or a payload with high entropy.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek ssl.log",
              "Firewall logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Industrial Demilitarized Zone (IDMZ) gateways, firewall logs at the IT/OT boundary, internet-facing OT servers (e.g., remote access gateways, historian web interfaces), and network segments hosting Engineering Workstations (EWS) or Human-Machine Interfaces (HMIs) directly accessible from the IDMZ.",
            "action": "1. **(Symbolic Logic)** Monitor Zeek conn.log for all inbound connections crossing the IT/OT boundary. Identify connections targeting known vulnerable remote service ports (e.g., SMB/445, RDP/3389, VNC/5900) or ICS protocols (e.g., Modbus/502, DNP3/20000) that are not part of an established whitelist. Correlate with Zeek notice.log for signatures of known exploits (e.g., `SMB_NT_Trans_Pipe_Access_SMBv1_Exploit_Attempt`).\n2. **(Statistical Method)** Establish a baseline of normal source-destination-port communication pairs and payload sizes for traffic traversing the IT/OT boundary. For identified connections to OT assets, calculate the Shannon entropy of the first N bytes of the payload (if available, e.g., from Zeek's `raw_payloads` or `ssl.log` for encrypted traffic, or via PCAP reconstruction). Alert when a connection's payload entropy exceeds the 95th percentile for that specific protocol or when connection volume to a specific OT service port exceeds 3 standard deviations from its historical mean.\n3. **(Machine Learning)** Implement a time-series anomaly detection model (e.g., Isolation Forest or ARIMA) on connection volume, unique source/destination pairs, and protocol distribution for traffic crossing the IT/OT boundary. Train the model on historical data to identify sudden spikes, drops, or deviations from learned communication patterns that indicate an initial access attempt. A classification model could categorize connections based on protocol behavior and flag outliers."
          },
          {
            "description": "An OT asset's critical service or application experiences an unexpected termination (crash or abnormal exit) within a 60-second window after receiving an inbound network connection from an IT network segment, especially if the connection targets the port associated with the affected service.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 7034",
              "Windows Event ID 7031",
              "Zeek conn.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and other Windows-based control system assets within the Process Control Network (PCN) or Supervisory Control Network.",
            "action": "1. **(Symbolic Logic)** Correlate Zeek conn.log entries where `orig_h` is from an IT network segment and `resp_h` is an OT asset, with host-based logs on the `resp_h`. Specifically, look for `Windows Event ID 1000` (Application Error), `Windows Event ID 7034` (Service Control Manager: Service Terminated Unexpectedly), or `Windows Event ID 7031` (Service Control Manager: Service Terminated) where the `Faulting Application` or `Service Name` matches the service listening on the connection's destination port. Alert on temporal correlation within a 60-second window.\n2. **(Statistical Method)** Baseline the hourly frequency of `Windows Event ID 1000`, `7034`, and `7031` on critical OT assets for each specific service. Alert when the rate of these events, particularly for services exposed to the IT network (e.g., SMB, RDP, historian web services), exceeds the 99th percentile or 3 standard deviations above the historical mean, especially when preceded by a network connection from an unusual source or port. Monitor for sudden increases in `Zeek pe.log` entries related to process crashes on OT assets.\n3. **(Machine Learning)** Train a binary classification model (e.g., Random Forest or SVM) to distinguish between legitimate service crashes and exploit-induced crashes. Features for the model would include network connection metadata (source/destination, port, protocol anomalies from Zeek), host event details (process name, error codes, faulting module, crash time), and temporal proximity. The model would learn patterns of suspicious crashes following network interaction."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary exploiting remote services to move laterally within the ICS environment?",
    "tactic_id": "TA0109",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T0866",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "An OT host initiates connections to a significantly higher number of unique destination OT hosts on common remote service ports (e.g., SMB/445, RDP/3389, VNC/5900, or common ICS ports like Modbus/502) within a short time frame than its established baseline, suggesting reconnaissance or automated propagation.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek smb.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control network segments (e.g., Supervisory Control Network, Process Control Network), individual asset networks for PLCs/RTUs, network switches/routers within the OT environment, and Industrial DMZ.",
            "action": "1. **(Symbolic Logic)** Analyze Zeek conn.log for intra-OT traffic. For each source host within the OT network, count the number of unique destination IP addresses it connects to on common remote service ports (e.g., 445, 3389, 5900) or ICS ports (e.g., 502, 20000) within a 5-minute sliding window. Alert if a host connects to more than 10 unique destinations on these ports within that window. Additionally, flag any connection from an OT host to a known blacklisted IP or to a port that is typically not used for legitimate OT communication.\n2. **(Statistical Method)** For each OT source host, calculate the 99th percentile of unique destination IPs contacted over a rolling 24-hour period for specific remote service ports (e.g., SMB, RDP). Alert when a host's current unique destination count within a 10-minute window exceeds this percentile by a factor of 2 or more, indicating a significant deviation from its normal communication pattern. Use a similar approach for connection frequency and data volume.\n3. **(Machine Learning)** Implement a graph-based anomaly detection algorithm that constructs a graph of host interactions from Zeek conn.log data. Train the model to identify nodes (hosts) exhibiting unusual 'bursty' connection patterns, high centrality scores, or sudden changes in their communication 'neighborhood' that deviate from historical norms. A clustering algorithm (e.g., K-means or DBSCAN) could group hosts by their normal communication patterns and flag hosts that fall into unusual clusters, indicating scanning or worm-like activity."
          },
          {
            "description": "A critical OT application or service process (e.g., `Historian.exe`, `HMI_Runtime.exe`) on an OT asset spawns an unexpected child process, such as a command interpreter (`cmd.exe`), scripting interpreter (`powershell.exe`, `python.exe`), or an unsigned executable, immediately following an incoming network connection from another OT asset.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Zeek conn.log",
              "Zeek smb.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Historian servers, and other Windows-based control system assets within the Process Control Network (PCN) or Supervisory Control Network.",
            "action": "1. **(Symbolic Logic)** Join Zeek conn.log entries (where both `orig_h` and `resp_h` are OT assets) with `Windows Event ID 4688` (or Sysmon `Event ID 1` for richer process details) on the `resp_h`. Trigger an alert when an incoming network connection from another OT host is followed within a 120-second window by a process creation event where the parent process is a whitelisted critical OT application (e.g., `Historian.exe`, `HMI_Runtime.exe`) and the child process is an unexpected executable (e.g., `cmd.exe`, `powershell.exe`, `wmic.exe`, `certutil.exe`) or an unsigned binary.\n2. **(Statistical Method)** Establish a baseline of normal parent-child process relationships for each critical OT application on each host. Use statistical methods (e.g., frequency analysis, Jaccard similarity index for command-line arguments) to identify process creation events where the child process or its command-line arguments are statistically rare (e.g., below the 1st percentile) or deviate significantly from established normal parent-child relationships for that specific OT application. Alert on deviations exceeding a set threshold.\n3. **(Machine Learning)** Develop a behavioral anomaly detection model (e.g., using a sequence model like an LSTM or a Hidden Markov Model) that learns the typical sequence and characteristics of processes spawned by critical OT applications. The model would detect deviations in the process execution chain (e.g., an HMI spawning `powershell.exe` directly) or the spawning of unusual child processes that don't fit the learned normal behavior, especially when correlated with preceding network activity from other OT hosts."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]