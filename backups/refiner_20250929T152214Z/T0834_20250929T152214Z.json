[
  {
    "information_requirement": "Is an adversary executing unauthorized code on critical ICS assets (e.g., HMI, EWS) by directly interacting with the operating system's native API? (PIR)",
    "tactic_id": "TA0104",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T0834",
        "name": "Native API",
        "evidence": [
          {
            "description": "Windows Event ID 4688 (Process Creation) records a critical ICS application process (e.g., `HMI_Runtime.exe`, `Vendor_App.exe`, `Historian_Service.exe`) initiating a child process that is not part of its established operational baseline. This includes spawning known command interpreters (`cmd.exe`, `powershell.exe`), scripting engines (`wscript.exe`, `cscript.exe`), or any executable with an unsigned or unrecognized digital signature, especially if the child process originates from an unusual directory (e.g., `%TEMP%`, user profiles) for the parent process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) within the control network, Human-Machine Interfaces (HMI) on the plant floor, ICS Application Servers hosting SCADA/DCS components, Data Historian Servers",
            "action": "1. **Symbolic Logic:** On all critical ICS assets (EWS, HMI, ICS Application Servers), continuously monitor Windows Event ID 4688 for process creation. Immediately alert if a critical ICS process spawns `cmd.exe`, `powershell.exe`, `wscript.exe`, `cscript.exe`, or any executable from a temporary directory (`%TEMP%`, `C:\\Windows\\Temp`) or a user's profile directory (`C:\\Users\\*\\AppData\\Local\\Temp`). Also, alert on any child process with a missing or invalid digital signature where a signed process is expected.\n2. **Statistical Method:** Establish a baseline of normal parent-child process relationships, average execution frequency, and typical command-line arguments for each critical ICS application over a 30-day period. Calculate a `z-score` for the frequency of observed parent-child pairs and for the entropy of command-line arguments for child processes spawned by ICS applications. Flag any event where the `z-score` for frequency is below -3 (indicating extreme rarity) or the `z-score` for command-line argument entropy exceeds +3 (indicating unusual complexity or randomness) compared to the baseline.\n3. **Machine Learning:** Apply a one-class SVM or Isolation Forest model to Windows Event ID 4688 data from critical ICS assets, using features such as parent process name, child process name, command-line arguments, process owner, and executable path. Train the model on known good process creation patterns from the past 90 days. Flag any process creation event with an anomaly score above a pre-defined threshold (e.g., 0.7) as potentially malicious, indicating a deviation from established normal behavior."
          },
          {
            "description": "Zeek `conn.log` and `dns.log` show a critical ICS application process (correlated via host logs like Windows Event ID 5156) initiating an outbound network connection from an ICS network segment. This connection uses a non-industrial protocol (e.g., HTTP/S, SMB, RDP over non-standard ports), targets an IP address outside of the defined ICS/OT network boundaries, or resolves a domain name not present in the ICS network's approved whitelist.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter of ICS Network Segments (e.g., Level 3 to Level 3.5/4), Industrial Demilitarized Zone (IDMZ) egress points, Internet Gateway Proxies",
            "action": "1. **Symbolic Logic:** Correlate `Windows Event ID 5156` (Windows Filtering Platform Connection) `Application Name` with `Zeek conn.log` (source IP, destination IP, destination port, protocol) and `Zeek dns.log` (source IP, query name) on critical ICS assets. Immediately alert if an ICS process (e.g., `SCADA_Server.exe`, `HMI_Client.exe`) attempts to connect to an IP address or domain explicitly blacklisted for the OT network, or if it uses a non-whitelisted port/protocol (e.g., `TCP/80`, `TCP/443`, `TCP/3389` where only industrial protocols are expected) for outbound connections from the OT segment.\n2. **Statistical Method:** Establish a 30-day baseline for each critical ICS application's network communication, including average daily connection count, total bytes transferred, and distribution of destination IPs/ports/protocols. For each application, calculate a `Moving Average` and `Standard Deviation` for these metrics. Generate an alert if any metric for an ICS application exceeds its 3-sigma upper bound (indicating a significant surge) or if the `Shannon Entropy` of destination IP addresses or requested domain names for an ICS process suddenly increases by more than two standard deviations from its historical mean.\n3. **Machine Learning:** Deploy a supervised machine learning classifier (e.g., Random Forest or XGBoost) trained on labeled Zeek `conn.log` and `dns.log` data (features include `duration`, `orig_bytes`, `resp_bytes`, `proto`, `service`, `conn_state`, `query_name_length`, `entropy_of_query_name`) to identify malicious network traffic patterns originating from ICS applications. The model should be periodically retrained with new threat intelligence and ICS-specific benign traffic patterns. Flag connections with a high classification probability (e.g., >0.9) as 'malicious' or 'suspicious C2'."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]