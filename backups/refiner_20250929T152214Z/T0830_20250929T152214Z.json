[
  {
    "information_requirement": "Has the adversary established an Adversary-in-the-Middle (AiTM) position to intercept or manipulate ICS network communications? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0830",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "Multiple distinct IP addresses (e.g., \u22653) are observed resolving to a single MAC address within a 60-second window, or a critical ICS asset's IP address (e.g., PLC, HMI, EWS) is observed resolving to a MAC address not present in the established baseline of known-good IP-to-MAC mappings. Additionally, rapid, repeated changes (e.g., >5 changes in 5 minutes) in the MAC address associated with a critical ICS IP are observed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek arp.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) switches, network taps/sensors within the PCN, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Domain Controllers (if part of PCN authentication).",
            "action": "1. **Baseline Creation**: For all critical ICS assets (PLCs, HMIs, EWS, SCADA servers), establish a baseline of their expected IP-to-MAC address mappings from `Zeek conn.log` and `Zeek arp.log` over a 7-day period. Store these as known-good mappings. 2. **Symbolic Logic (Rule-based)**: Continuously monitor `Zeek conn.log` and `Zeek arp.log` for any observed IP-to-MAC mapping for a critical ICS asset that deviates from its established baseline, generating a high-priority alert. Additionally, monitor `Windows Event ID 4688` on EWS and HMIs for command-line executions containing `arp -s`, `arp -d`, or `netsh interface ip add neighbors` followed by a critical ICS IP address, alerting on detection. 3. **Statistical Method (Anomaly/Threshold)**: For `Zeek conn.log` or `Zeek arp.log`, calculate the number of unique IP addresses associated with each MAC address over a rolling 5-minute window. Alert if any single MAC address is associated with more than 3 unique IP addresses, or if this count exceeds the 99th percentile of normal network behavior. For critical ICS assets, track the rate of IP-to-MAC changes; alert if a critical IP's MAC address changes more than 3 times within a 5-minute period. 4. **Machine Learning (Clustering/Time-Series Anomaly)**: Apply a clustering algorithm (e.g., K-means) to `Zeek conn.log` and `Zeek arp.log` entries, using features such as source/destination MAC, IP, and ARP opcode (request/reply) to identify clusters representing known good communication patterns. Flag connections that fall outside these clusters as anomalous. Utilize a time-series anomaly detection model (e.g., Isolation Forest or LSTM Autoencoder) on the rate of `ARP` requests/responses, specifically focusing on gratuitous ARP messages for critical ICS IPs, to detect sudden spikes indicative of poisoning."
          },
          {
            "description": "Network flow records (Zeek conn.log) indicate that a communication session originating from a critical ICS asset (e.g., PLC, RTU, HMI) is observed with an intermediate hop (a source IP for a subsequent connection that is not the original destination) not present in the established baseline of direct communication paths between the source and its intended destination. This is characterized by a connection where `src_ip -> intermediate_ip` immediately precedes `intermediate_ip -> dst_ip` where `dst_ip` was the expected direct destination of `src_ip`.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network backbone switches within the PCN, firewalls/routers at PCN-DMZ/Enterprise boundaries, SCADA servers, Historian servers, network taps/sensors deployed at critical communication choke points.",
            "action": "1. **Baseline Creation**: For all critical ICS communication pairs (e.g., PLC-to-HMI, EWS-to-PLC, SCADA-to-Historian), establish a baseline of expected direct `src_ip -> dst_ip` paths from `Zeek conn.log` over a 30-day period. Store these as known-good direct paths. 2. **Symbolic Logic (Rule-based)**: Continuously analyze `Zeek conn.log` for sequences of connections where `src_ip_A -> intermediate_ip` is immediately followed by `intermediate_ip -> dst_ip_B`, and `src_ip_A` was expected to communicate directly with `dst_ip_B`. Alert if `intermediate_ip` is not part of the established direct path baseline for `src_ip_A` to `dst_ip_B`. Additionally, monitor `Zeek http.log` and `Zeek ssl.log` for connections originating from critical ICS assets where the `proxy_host` or `server_name` indicates an unexpected proxy or server. 3. **Statistical Method (Threshold/Percentile)**: For each critical source-destination pair, calculate the number of unique intermediate IP addresses observed in their communication paths over a 1-hour rolling window. Alert if this count is greater than zero for pairs expected to be direct, or if the count exceeds the 99th percentile of historical intermediary counts for that pair. Calculate the percentage of total traffic volume between a critical source-destination pair that flows through a newly detected intermediate IP. Alert if this percentage exceeds a predefined threshold (e.g., 5%) within a 15-minute window. 4. **Machine Learning (Graph Anomaly)**: Construct a dynamic graph of ICS network communications from `Zeek conn.log` where nodes are IP addresses and edges are connections. Utilize a graph neural network (GNN) or graph-based anomaly detection algorithm (e.g., NetWalk) to identify sudden structural changes, such as the insertion of new intermediary nodes in established communication paths for critical ICS assets."
          },
          {
            "description": "Observed `Zeek ssl.log` and `Zeek x509.log` entries for encrypted communication from or to critical ICS assets (e.g., SCADA servers, HMIs, EWS) show certificates with `validation_status` other than 'ok', `self_signed` status as true, or a certificate `fingerprint`, `subject`, `issuer`, or `serial` number that is not present in the established baseline of known-good certificates for that specific communication channel.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/sensors at the perimeter of the PCN, network gateways, SCADA servers, Historian servers, remote access VPN concentrators, Engineering Workstations (EWS) that establish encrypted sessions.",
            "action": "1. **Baseline Creation**: Over a 30-day period, establish a baseline of `certificate_fingerprint`, `subject`, `issuer`, `serial`, and `validation_status` for all encrypted traffic involving critical ICS assets from `Zeek x509.log` and `Zeek ssl.log`. Store these as known-good certificate profiles for specific source-destination pairs. 2. **Symbolic Logic (Rule-based)**: Continuously monitor `Zeek x509.log` and `Zeek ssl.log` for any certificate used in critical ICS communications where the `validation_status` is not 'ok'. Generate a high-priority alert. Alert immediately if `self_signed` is true for any certificate used by a critical ICS asset where a trusted CA-signed certificate is expected. Alert if a `certificate_fingerprint`, `subject`, `issuer`, or `serial` for a critical ICS communication path is observed that is not present in the established baseline. 3. **Statistical Method (Entropy/Frequency)**: Calculate the Shannon entropy of the `subject` and `issuer` fields for all certificates observed in ICS traffic. Alert if the entropy score for a certificate exceeds the 99th percentile of historically observed entropy scores, which may indicate randomly generated or highly variable malicious certificate data. Track the frequency of `validation_status` errors; alert if the number of non-'ok' statuses for a specific critical communication channel exceeds a threshold (e.g., 5 events in 1 hour) or if this count significantly deviates (e.g., >3 standard deviations) from its historical average. 4. **Machine Learning (Classification/Anomaly)**: Train a supervised classification model (e.g., Random Forest or XGBoost) using features from `Zeek x509.log` (e.g., `key_type`, `key_length`, `exponent`, `basic_constraints_ca`, `ext_key_usage`) to classify certificates as 'benign' or 'malicious/anomalous'. Flag newly observed certificates that are classified as 'malicious'. Apply an unsupervised anomaly detection algorithm (e.g., One-Class SVM or Autoencoder) to the vectorized features of certificates observed in ICS traffic. Alert on certificates identified as outliers, which may represent previously unseen or subtly altered malicious certificates."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]