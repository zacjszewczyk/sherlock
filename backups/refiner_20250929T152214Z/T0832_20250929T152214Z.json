[
  {
    "information_requirement": "Has an adversary gained unauthorized access to or is manipulating the view of the industrial process?",
    "tactic_id": "TA0105",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T0831",
        "name": "Man in the Middle",
        "evidence": [
          {
            "description": "Detection of duplicate MAC addresses on the same network segment, gratuitous ARP requests not initiated by a device reboot, or significant deviations in expected IP-to-MAC address mappings for critical ICS assets (PLCs, HMIs, engineering workstations) observed on the process control network.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek arp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments connecting PLCs, HMIs, and other critical control system devices within the Operational Technology (OT) network.",
            "action": "1. **Symbolic Logic (Whitelist/IOC Match):** Monitor Zeek `notice.log` for specific `note` types indicating ARP anomalies (e.g., `ARP::Spoofing`, `ARP::Duplicate_IP_Detected`). Create and maintain a strict whitelist of static IP-to-MAC address pairings for all critical ICS assets and alert on any observed deviation that is not part of a pre-approved change. 2. **Statistical Method (Baseline Deviation):** For each unique IP address on critical control network segments, calculate the frequency and distribution of associated MAC addresses over a 24-hour rolling window. Alert if a single IP address is observed with more than one MAC address within a 5-minute interval, or if the MAC address associated with a critical asset changes more than once in a 24-hour period (excluding planned maintenance windows), exceeding the 99th percentile of historical changes. 3. **Machine Learning (Time Series/Graph Analysis):** Apply a time-series anomaly detection model (e.g., Isolation Forest) to the rate of new MAC address detections per IP on critical network segments from `Zeek arp.log` to flag anomalous spikes. Additionally, use a graph-based machine learning model to analyze `Zeek conn.log` for unexpected communication patterns between ICS assets, flagging new or unusual peer-to-peer connections that deviate from established operational graphs."
          }
        ]
      },
      {
        "technique_id": "T0867",
        "name": "Standard Application Layer Protocol",
        "evidence": [
          {
            "description": "Detection of write commands (e.g., Modbus FC 0x06, 0x10; DNP3 FC 0x0C, 0x0D; S7COMM write operations) from an HMI or engineering workstation to a PLC that exhibit a statistically significant increase in frequency, originate from an unauthorized source IP, or attempt to set process variable values outside of their pre-defined safe operational ranges or historical norms.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of PLCs, HMIs, and associated engineering workstations within the control network zones, especially those connected to critical process segments.",
            "action": "1. **Symbolic Logic (IOC Match/Whitelist):** Create rules to flag any write command (e.g., `modbus.log` `function_code` = `0x06` or `0x10`) where the `originator` IP address is not on a whitelist of authorized HMIs/engineering workstations for the target PLC. Additionally, maintain a lookup table of critical process variables and their safe operational ranges; alert on any write operation where the `value` field falls outside these pre-defined bounds. 2. **Statistical Method (Percentile/Standard Deviation):** For each HMI-to-PLC communication pair, establish a 7-day rolling baseline for the average number of write commands per hour and the 95th percentile of write command values. Alert when the current hourly write command count exceeds 3 standard deviations from the baseline mean, or when any write command value is outside the 1st and 99th percentile of historical values for that specific variable for that HMI-PLC pair. 3. **Machine Learning (Classification/Time Series):** Train a supervised classification model (e.g., Random Forest) using historical ICS protocol logs (e.g., `modbus.log`), labeling normal and known anomalous write patterns (if available). The model should classify new write commands based on features like source IP, destination IP, function code, data value, and frequency. Additionally, apply a time-series anomaly detection model to the volume of write commands from each HMI to each PLC, flagging sudden, sustained increases that deviate from normal operational patterns."
          }
        ]
      },
      {
        "technique_id": "T0848",
        "name": "Modify Program",
        "evidence": [
          {
            "description": "Detection of unauthorized or atypical modification, creation, or deletion events impacting critical HMI application executables, dynamic link libraries (DLLs), or configuration files (e.g., `.ini`, `.xml`, `.json` files defining HMI views or control logic) on HMI servers or engineering workstations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMI application servers, engineering workstations, and historian servers within the control network, particularly their operating system and application directories.",
            "action": "1. **Symbolic Logic (Whitelist/IOC Match):** Identify critical HMI application directories and files (e.g., `C:\\Program Files\\SCADA_HMI\\*.exe`, `*.dll`, `*.config`). Create a strict whitelist of legitimate process hashes and user accounts authorized to modify these files. Alert on `Windows Event ID 4663` (File Write) or `4656` (Handle Request) for these critical files if the `SubjectProcessName` or `SubjectUserSid` is not on the whitelist. 2. **Statistical Method (Percentile/Frequency Analysis):** For each critical HMI file, establish a baseline frequency of modification events (`Windows Event ID 4663`) and the typical `ProcessName` (from `Windows Event ID 4688` correlated by `ProcessId`) associated with these modifications over a 30-day period. Alert if the number of modifications for a specific file exceeds the 99th percentile of its historical rate within a 1-hour window, or if a `ProcessName` not seen in the top 95th percentile of historical modifiers attempts a modification. 3. **Machine Learning (Anomaly Detection/Sequence Analysis):** Train a supervised anomaly detection model (e.g., One-Class SVM) on `Windows Event ID 4663` and `4688` data from HMI systems. Features for the model could include `ProcessName`, `ProcessId`, `SubjectUserSid`, `ObjectName` (file path), `AccessMask`, and `timestamp` (for time-based features). The model should learn normal file modification patterns by authorized processes and users, flagging deviations as potential malicious activity. Additionally, a sequence-based ML model could detect unusual sequences of process execution followed by file modifications on HMI systems."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]