[
  {
    "information_requirement": "Is an adversary establishing persistence on control system devices via unauthorized firmware modifications? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Observed network sessions utilizing common firmware update protocols (e.g., TFTP/UDP 69, FTP/TCP 21, SSH/TCP 22 for SCP/SFTP) where the source IP is not an authorized Engineering Workstation (EWS) or the activity occurs outside of documented maintenance windows, potentially involving a file transfer to an ICS device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) perimeter, Engineering Workstations (EWS), network segments containing PLCs/RTUs.",
            "action": "1. **Symbolic Logic**: Establish and maintain a whitelist of authorized Engineering Workstation (EWS) IP addresses and a schedule of approved maintenance windows. Create a SIEM rule to alert on Zeek `conn.log` entries where `service` matches known firmware protocols (e.g., 'tftp', 'ftp', 'ssh') AND `id.orig_h` is NOT in the EWS whitelist AND `id.resp_h` is a known ICS device IP. Additionally, alert if such activity occurs outside of scheduled maintenance windows. 2. **Statistical Method**: For any identified file transfer via `files.log` (e.g., `mime_type` indicating binary or executable), calculate the Shannon entropy of the `extracted_bytes` or `md5` hash. Flag transfers where entropy exceeds the 95th percentile of historical legitimate firmware images for that device type, indicating potential obfuscation or encryption. 3. **Machine Learning**: Develop a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on the frequency and volume of firmware-related network traffic from `conn.log` to ICS devices. Train the model on historical data to learn normal patterns, including scheduled updates. Flag significant deviations (e.g., 3 standard deviations from the predicted norm) as anomalous, indicating unscheduled or unusual firmware activity."
          },
          {
            "description": "An ICS device (e.g., PLC, RTU, or its modular component) exhibits an unexpected communication loss or device reboot, as indicated by network heartbeat monitoring or device status logs, within 5 minutes of observed network traffic involving file transfer protocols or anomalous connections to that device.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN), critical PLC and RTU assets.",
            "action": "1. **Symbolic Logic**: Establish a rule to correlate `conn.log` entries indicating a sudden cessation of regular communication from a critical ICS device (e.g., no `conn.log` activity for a device that normally communicates every 5-10 seconds for 2 consecutive intervals) with `files.log` entries showing any file transfer to that device within the preceding 10 minutes. 2. **Statistical Method**: For each critical ICS device, calculate a 7-day rolling average and standard deviation of its `conn.log` byte volume (sum of `orig_bytes` + `resp_bytes`). Alert if the current 5-minute average byte volume drops below 3 standard deviations from the rolling average, indicating a significant communication anomaly. Use descriptive statistics to identify devices with the highest inter-quartile range in connection duration, which may indicate unstable communication. 3. **Machine Learning**: Train a supervised classification model (e.g., SVM or Gradient Boosting) using historical `conn.log` data to predict device stability. Features could include `orig_bytes`, `resp_bytes`, `duration`, `state`, and `missed_bytes`. Label known communication failures or reboots. The model would then classify real-time device communication patterns to predict potential impending reboots or failures based on unusual communication characteristics."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to impair process control by manipulating module firmware on critical PLCs or RTUs? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0839",
        "name": "Module Firmware",
        "evidence": [
          {
            "description": "Execution of a specific vendor firmware update utility or associated process (e.g., `siemens_firmware_tool.exe`, `rockwell_flash_utility.bin`) on a Windows host outside of the designated Engineering Workstation (EWS) group, or with command-line parameters indicating a target ICS device IP not associated with the executing EWS.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), management servers with access to the Process Control Network (PCN).",
            "action": "1. **Symbolic Logic**: Maintain a whitelist of authorized EWS hostnames/IPs and a list of known legitimate firmware update utility process names (e.g., `SiemensFirmwareUpdate.exe`, `RockwellFlashUtility.exe`). Create a SIEM rule to alert on Windows Event ID 4688 where `New Process Name` matches a whitelisted utility AND `Computer` (source host) is NOT in the EWS whitelist. Additionally, monitor for specific command-line arguments (e.g., `/target:192.168.1.100`) that indicate targeting of critical ICS devices. 2. **Statistical Method**: Establish a baseline of typical execution frequency and user accounts for each firmware utility on authorized EWS using historical Windows Event ID 4688 data. Use a percentile-based anomaly detection: alert if a firmware utility is executed by a user account that has never or rarely executed it (e.g., below the 5th percentile of historical user execution frequency) or on an EWS that historically shows very low usage of such utilities (e.g., 99th percentile deviation from its own historical average). 3. **Machine Learning**: Implement a user and entity behavior analytics (UEBA) model (e.g., using clustering or classification) on Windows Event ID 4688 data. Train the model to profile normal process execution behavior for each user and host within the ICS network. Flag execution of firmware utilities by users or on hosts that deviate significantly from their established behavioral profiles as potentially malicious, even if the host is technically an EWS but the behavior is anomalous for that specific user or machine."
          },
          {
            "description": "A critical ICS device initiates or receives network connections from previously unobserved source/destination IPs or ports, or utilizes new application layer protocols (e.g., Modbus/TCP, EtherNet/IP, OPC UA) not part of its established communication baseline, without a corresponding change management ticket.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) core and boundary.",
            "action": "1. **Symbolic Logic**: For each critical ICS device, establish and maintain a strict whitelist of approved `(id.orig_h, id.resp_h, id.resp_p, proto)` tuples based on historical Zeek `conn.log` data and network architecture documentation. Create a SIEM rule to alert on any `conn.log` entry where the observed tuple for a critical ICS device does not match an entry in its whitelist. 2. **Statistical Method**: Continuously monitor Zeek `conn.log` for each critical ICS device. Calculate the percentage of 'new' connections (those not in the historical baseline) over a 1-hour rolling window. Alert if this percentage exceeds a dynamic threshold (e.g., 95th percentile of historical 'new connection' rates), indicating a sudden surge in novel communication. Additionally, calculate the Shannon entropy of `id.resp_p` (destination ports) for each device over 1-hour windows; a significant increase (e.g., >2 standard deviations from baseline) could indicate port scanning or novel service usage. 3. **Machine Learning**: Apply an unsupervised anomaly detection algorithm (e.g., autoencoder or one-class SVM) to Zeek `conn.log` features (e.g., `duration`, `orig_bytes`, `resp_bytes`, `proto`, `service`, `id.resp_p`) for each critical ICS device. Train the model on historical 'normal' communication patterns. Flag connections with high anomaly scores (e.g., top 1% of scores) as potential indicators of compromised firmware introducing new or malicious network behavior."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]