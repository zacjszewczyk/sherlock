[
  {
    "information_requirement": "Is an unauthorized device acting as a master/control server on the ICS network? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0848",
        "name": "Rogue Master",
        "evidence": [
          {
            "description": "Control commands (e.g., Modbus function code 0x05 Write Single Coil, DNP3 control relay output block) originate from an IP address not present in the authoritative asset inventory of designated master servers.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The ICS network segment containing master servers, outstations (PLCs, RTUs), and relevant protocol gateways.",
            "action": "1. **Symbolic Logic:** Maintain an authoritative asset inventory (e.g., CMDB, static lookup file) of all designated master server IP addresses and corresponding MAC addresses. Continuously monitor Zeek modbus.log (for `modbus_func` 0x05, 0x06, 0x0F, 0x10), Zeek dnp3.log (for `dnp3_func == 'WRITE'`), and other relevant ICS protocol logs for write/control function codes. Generate a high-severity alert if the `id.orig_h` (source IP) of any such command is *not* found in the authorized master server IP list.\n2. **Statistical Method:** For all observed control commands, calculate the daily unique count of source IPs. Establish a 7-day rolling baseline for this count. Trigger an alert if the unique source IP count deviates from the 99th percentile of the baseline or if a new source IP (not on the authorized list) attempts more than 5 control commands within a 60-second window, indicating a potential burst of activity from an unauthorized source.\n3. **Machine Learning:** Train a time series anomaly detection model on the frequency and type of control commands originating from each known master server over a 30-day period. Apply this model to incoming ICS protocol logs. Generate an alert if a source IP (especially an unknown one) exhibits a control command pattern (e.g., sequence, volume, specific function codes) that significantly deviates from established normal operational baselines for legitimate masters, indicating a potential rogue master attempting to mimic or disrupt operations."
          },
          {
            "description": "An outstation (e.g., PLC, RTU) initiates a network connection (TCP/UDP) to a destination IP address and port that is not part of its established, authorized communication baseline with legitimate master servers.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic ingress/egress points for the process control network, including the DMZ separating IT from OT.",
            "action": "1. **Symbolic Logic:** Establish and maintain a 'whitelist' of authorized communication pairs (outstation `id.orig_h` -> master `id.resp_h`, `id.resp_p`) using Zeek conn.log over a 30-day period, focusing on connections initiated by outstations to master-specific ports (e.g., Modbus 502/TCP, DNP3 20000/TCP). Generate a high-severity alert for any new `id.resp_h` (destination IP) seen communicating with an outstation on a master-specific port that is *not* present in the authorized whitelist.\n2. **Statistical Method:** For each outstation, calculate the daily unique count of destination IP addresses it communicates with. Establish a 7-day rolling baseline for this metric. Trigger an alert if the daily unique destination IP count for any outstation exceeds the 99th percentile of its historical baseline, or if a new destination IP (not in the whitelist) is observed communicating with more than 3 outstations within a 5-minute window, indicating a potentially new, widespread rogue master.\n3. **Machine Learning:** Apply a clustering algorithm (e.g., K-Means or DBSCAN) to Zeek conn.log data for outstation-initiated connections, using features like `id.resp_h`, `id.resp_p`, `proto`, `duration`, and `orig_bytes`. Train the model on historical data (e.g., 60 days) to identify clusters representing normal communication patterns. Flag any new connection from an outstation to a destination IP/port that falls into a 'sparse' or 'outlier' cluster, indicating a highly unusual communication partner, potentially a rogue master."
          },
          {
            "description": "The IP address of a designated master server is observed to be associated with a new or unauthorized MAC address in network traffic, or multiple MAC addresses simultaneously, indicating potential ARP spoofing or device impersonation.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek arp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The legitimate master servers, Engineering Workstations (EWS), and network switches within the process control network.",
            "action": "1. **Symbolic Logic:** Create and maintain a static, authoritative mapping of critical master server IP addresses to their legitimate MAC addresses (e.g., `master_ip_1` -> `master_mac_1`). Continuously monitor Zeek arp.log for `src_hw` (source MAC) and `src_ip` (source IP), and Zeek conn.log for `id.orig_h` (source IP) and `id.orig_l2_addr` (source MAC). Generate a high-severity alert if a master server's IP address (`src_ip` or `id.orig_h`) is observed to be associated with a MAC address that *does not match* its authoritative mapping.\n2. **Statistical Method:** For each master server IP address, track the daily unique count of associated MAC addresses observed in Zeek arp.log and conn.log. Establish a 7-day rolling baseline for this metric. Generate an alert if the unique MAC address count for a master IP exceeds 1 (indicating multiple MACs for one IP) or if it deviates from the 99th percentile of its historical baseline, suggesting an unusual change in network identity.\n3. **Machine Learning:** Train a time series anomaly detection model on the frequency and consistency of IP-to-MAC address bindings for critical master servers over a 30-day period using Zeek arp.log and conn.log. The model should learn the expected MAC address for each master IP. Generate an alert when the model detects a statistically significant change in the MAC address associated with a master IP, or a sudden increase in the rate of ARP requests/replies for a master IP from different MAC addresses, indicating potential ARP cache poisoning or a rogue device attempting to take over."
          },
          {
            "description": "A critical control system master service on a designated master server transitions to a 'stopped' state (or fails to start) outside of a documented maintenance window or without explicit administrative action.",
            "data_sources": [
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The primary and backup master/control servers (Windows hosts).",
            "action": "1. **Symbolic Logic:** On all Windows-based master servers, configure logging to capture Windows Event ID 7036 (Service Control Manager) for service state changes. Identify the exact service names for critical master control applications (e.g., 'Rockwell FactoryTalk HMI Server', 'Siemens WinCC Runtime', 'OSISoft PI Data Archive'). Create a rule to alert with high severity if any of these specific services report a `Service Status` of 'Stopped' (or 'Stop Pending', 'Failure') and the `Event ID` is 7036. Cross-reference with an approved maintenance schedule to filter out planned outages.\n2. **Statistical Method:** For each critical master service, establish a 30-day rolling baseline of its normal operational state, specifically tracking the frequency and duration of 'stopped' events. Calculate the average daily duration a service is in a 'stopped' state. Generate an alert if a service's 'stopped' duration exceeds the 99th percentile of its historical average, or if the frequency of 'stopped' events increases by a statistically significant margin (e.g., 3 standard deviations above the mean) within a 24-hour period, indicating abnormal service instability or malicious shutdown attempts.\n3. **Machine Learning:** Implement a multi-class classification model (e.g., Random Forest or SVM) trained on historical Windows Event ID 7036 data for critical master services, using features such as `Service Name`, `Service Status`, `User`, `Time of Day`, and `Day of Week`. Label events as 'normal stop', 'planned stop', or 'unplanned stop'. Deploy the model to classify new service stop events. An alert should be triggered for events classified as 'unplanned stop' with high confidence, especially if associated with unusual user accounts or occurring during non-operational hours, suggesting an adversary-induced service disruption."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]