[
  {
    "information_requirement": "Is an adversary attempting to inhibit response functions by modifying system firmware? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file transfer exceeding X MB (e.g., 5MB - 50MB, or >2 standard deviations from device-specific baseline firmware size) identified as a firmware image (based on MIME type, file extension, or internal header analysis) is sent to a critical ICS device (e.g., PLC, RTU) over an expected (e.g., FTP/21, TFTP/69, vendor-specific ports) or unexpected protocol from a source IP address not present in the authorized firmware update source list, or occurring outside of the defined maintenance window (e.g., 08:00-17:00 M-F) for that device.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments hosting PLCs/RTUs, Network segments containing Engineering Workstations (EWS), DMZ/Perimeter zones for vendor remote access, Enterprise/ICS network boundary points.",
            "action": "1. **Symbolic Logic (IOC)**: Identify all Zeek `conn.log` entries for connections to known critical ICS device IPs on common firmware update ports (e.g., 21, 69, or vendor-specific ports identified from asset inventory). Cross-reference the source IP with an approved list of EWS and vendor jump boxes. Alert on any connection from an unauthorized source IP. 2. **Statistical Method**: For each critical ICS device, establish a baseline of historical firmware update file sizes from `Zeek files.log` (field `seen_bytes`) over the last 90 days. Calculate the mean and standard deviation of `seen_bytes`. Alert on any firmware transfer where `seen_bytes` falls outside the 99th percentile or exceeds 3 standard deviations from the mean for that device. Also, establish a baseline of transfer times; alert on transfers occurring outside the 95th percentile of normal operational hours. 3. **Machine Learning**: Train a time-series anomaly detection model (e.g., Isolation Forest or Prophet) on the frequency and volume of firmware-like file transfers (identified by MIME type/extension) to critical ICS devices. Alert when the model identifies a significant deviation from the learned normal pattern, especially concerning transfer volume spikes or transfers during previously inactive periods."
          },
          {
            "description": "Execution of a known ICS vendor firmware update utility (identified by filename, hash, or digital signature) on an Engineering Workstation (EWS) or Human-Machine Interface (HMI) by a user account not explicitly authorized for firmware maintenance, or outside of a predefined, scheduled maintenance window for that device (e.g., not between 08:00-17:00 M-F).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the PCN, Human-Machine Interfaces (HMIs) in the PCN, Active Directory/Identity Management servers.",
            "action": "1. **Symbolic Logic (IOC)**: Maintain a centralized watchlist of known ICS vendor firmware update executable names (e.g., `Siemens_Tia_Updater.exe`, `Rockwell_Firmware_Tool.exe`) and their corresponding MD5/SHA256 hashes. Monitor `Windows Event ID 4688` (Process Creation) on all EWS and HMIs for processes matching these names or hashes. Immediately alert on any match. 2. **Statistical Method**: For each EWS/HMI, establish a baseline of typical execution times for firmware update utilities using historical `Windows Event ID 4688` data. Calculate the 95th percentile for execution times. Flag any execution occurring outside this percentile. Additionally, calculate the historical frequency of update utility usage per user and flag executions by users who are in the lowest 5th percentile of historical usage or have no prior history. 3. **Machine Learning**: Implement a User and Entity Behavior Analytics (UEBA) model (e.g., using clustering or classification) that profiles normal process execution patterns for each EWS/HMI and user. Alert when the model identifies an execution of a firmware update utility that significantly deviates from the established behavioral baseline for that specific user or workstation, considering factors like process parent-child relationships, command-line arguments, and execution frequency."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary establishing persistence by implanting malicious system firmware? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A critical ICS device (PLC, RTU) exhibits a statistically significant change in communication patterns (e.g., >30% increase/decrease in data volume, new destination IP not seen in the last 90 days, new protocol observed, or change in polling frequency by >2 standard deviations) within 60 minutes following a detected or suspected firmware transfer event.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments containing critical controllers (PLCs/RTUs), Network egress points from the Process Control Network (PCN), Industrial Demilitarized Zone (IDMZ) gateways.",
            "action": "1. **Symbolic Logic (IOC)**: After a detected firmware update event for a specific ICS device, monitor `Zeek conn.log` for that device for new connections to known malicious C2 IP addresses or domains from threat intelligence feeds within the subsequent 60 minutes. Alert immediately if a match is found. 2. **Statistical Method**: For each critical ICS asset, establish a 90-day baseline of its normal communication patterns from `Zeek conn.log`, including destination IPs, ports/protocols, connection duration, and data volume (bytes in/out) aggregated hourly. After a detected firmware update, calculate the Z-score for the subsequent 60 minutes of communication metrics. Alert if any metric exceeds 3 standard deviations from its baseline. Additionally, calculate the entropy of destination ports and protocols; alert on a significant increase (e.g., >25%) in entropy. 3. **Machine Learning**: Deploy a time-series anomaly detection model (e.g., LSTM autoencoder or ARIMA) on the aggregated communication metrics (e.g., bytes/second, connections/second, unique destination IPs/second) for each critical ICS device. After a firmware update, run the real-time communication data through the model and alert on any significant anomaly scores (e.g., exceeding the 99th percentile of historical anomaly scores) within the post-update observation window."
          },
          {
            "description": "A file identified as a firmware image (based on MIME type, file extension, or size characteristics consistent with device firmware) is transferred over the network, and its cryptographic hash (MD5, SHA256) does not exactly match any known-good, approved firmware versions for the target device maintained in the central firmware repository, or matches a hash on a known-malicious firmware blacklist.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, Engineering Workstations (EWS), Centralized firmware management servers/repositories, Network File Shares in the PCN.",
            "action": "1. **Symbolic Logic (IOC)**: Maintain a central database of cryptographic hashes (MD5/SHA256) for all approved firmware versions for every ICS device, linked to the device model. When `Zeek files.log` identifies a file transfer with a MIME type (e.g., `application/octet-stream`, `application/x-firmware`) or extension (e.g., `.bin`, `.hex`, `.img`) associated with firmware, extract its hash. Perform an exact match lookup against the approved firmware database. Generate a high-severity alert if the hash is not found or matches a known-malicious firmware hash blacklist. 2. **Statistical Method**: For each ICS device type, establish a baseline of the typical frequency of firmware updates over the last year. Use `Zeek files.log` to track firmware transfers. If an unknown firmware hash is detected for a device, calculate the current update frequency for that device. If the current frequency is significantly higher (e.g., >95th percentile for that device type) than the baseline, escalate the alert severity, as this might indicate repeated attempts or malicious re-flashing. 3. **Machine Learning**: Develop a binary classification model (e.g., Random Forest or SVM) trained on metadata from `Zeek files.log` (e.g., `total_bytes`, `MIME_type`, `file_extension`, `source_port`, `destination_port`) to classify files as 'likely firmware' or 'not firmware.' For files classified as 'likely firmware,' extract the hash and compare against the approved/blacklisted hash databases. This helps catch obfuscated or unknown firmware formats that bypass simple rule-based identification."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]