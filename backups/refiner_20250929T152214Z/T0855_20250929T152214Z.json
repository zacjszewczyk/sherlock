[
  {
    "information_requirement": "Is an adversary attempting to impair process control by sending unauthorized command messages? (PIR)",
    "tactic_id": "TA0106",
    "tactic_name": "Impair Process Control",
    "indicators": [
      {
        "technique_id": "T0855",
        "name": "Unauthorized Command Message",
        "evidence": [
          {
            "description": "A Modbus Write (function code 0x06, 0x10, 0x16), DNP3 Operate (function code 0x01), EtherNet/IP Write (e.g., 'Write Tag' service), or S7comm Write command message is observed originating from an IP address not explicitly listed in the 'Approved_ICS_Command_Initiators' whitelist (containing authorized Engineering Workstations, HMIs, and control servers).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, specifically monitoring network traffic flowing to and from Programmable Logic Controllers (PLCs), Remote Terminal Units (RTUs), and other field controllers (e.g., at the DMZ between Enterprise and ICS networks, or within Level 2/3 of the Purdue Model).",
            "action": "1. **Symbolic Logic:** Maintain an explicit 'Approved_ICS_Command_Initiators' IP allow-list for all authorized devices permitted to send critical command messages. For each command message identified in Zeek's ICS protocol logs (e.g., modbus.log, dnp3.log), compare the originating IP address ('id.orig_h' or equivalent) against this allow-list. Generate a high-priority alert for any command originating from an unauthorized IP. 2. **Statistical Method:** Establish a baseline of command message volume per source IP over the last 30 days. Calculate the 99th percentile for daily command counts. Alert when a new IP address initiates command messages and its daily volume exceeds this 99th percentile, indicating a sudden and significant new source. 3. **Machine Learning:** Utilize a supervised classification model (e.g., Random Forest or SVM) trained on historical network flow data (Zeek conn.log, ICS protocol logs) to classify source IP behavior. Features would include 'id.orig_h', protocol, command type, byte counts, and frequency. Flag source IPs as anomalous if the model's prediction confidence for 'authorized' activity drops below a defined threshold."
          },
          {
            "description": "A Modbus, EtherNet/IP, or S7comm command message (e.g., Modbus Write, ENIP Write Tag, S7 Write) is observed with a timestamp falling outside established operational baselines, specifically during non-operational hours (e.g., 22:00-06:00) or outside of scheduled maintenance windows, or exhibiting a sudden, uncharacteristic burst in frequency.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data historians, network taps, and industrial firewalls monitoring communication between HMIs, SCADA servers, and PLCs/RTUs within the ICS network.",
            "action": "1. **Symbolic Logic:** Define explicit operational schedules and approved maintenance windows for critical ICS commands. For each command in Zeek's ICS protocol logs, check if the timestamp falls outside these predefined periods. Alert on any command execution occurring during non-operational hours or unscheduled times. 2. **Statistical Method:** For critical ICS command types, perform a time-series analysis on at least 90 days of historical data to establish a baseline of normal activity (e.g., hourly count of commands). Calculate the mean and standard deviation of command counts for each hour of the day and day of the week. Generate an alert when the observed command count in a given time window exceeds 3 standard deviations from its historical mean, indicating an unusual burst or activity at an anomalous time. 3. **Machine Learning:** Apply a time-series anomaly detection algorithm (e.g., an Isolation Forest or a Prophet model) to monitor the frequency of specific critical ICS command messages. Train the model on historical command logs to learn normal patterns. Alert when the model identifies a significant deviation from the expected pattern, indicating an unusual command surge or activity at an unexpected interval."
          },
          {
            "description": "Windows Event ID 4688 records an ICS control application process (e.g., `Siemens.WinCC.exe`, `Rockwell.FactoryTalk.exe`, `GE.CIMPLICITY.exe`) being spawned by a non-standard parent process, specifically `powershell.exe`, `cmd.exe`, `wscript.exe`, or any process not explicitly in the 'Approved_ICS_Parent_Processes' whitelist, immediately followed by outbound network traffic (Zeek conn.log) from the same host to a known PLC or RTU IP address.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices functioning as Human-Machine Interfaces (HMIs) and Engineering Workstations (EWS) within the control network.",
            "action": "1. **Symbolic Logic:** On critical Windows-based ICS hosts, monitor for process creation events (Windows Event ID 4688). Maintain an explicit whitelist of 'Approved_ICS_Parent_Processes' for each critical ICS application. Create a detection rule that alerts when a critical ICS application process's `ParentProcessName` (from Event ID 4688) is not in its approved whitelist, or specifically matches known malicious parents like `powershell.exe` or `cmd.exe`. 2. **Statistical Method:** Establish a baseline of normal parent-child process relationships on ICS hosts over 30-60 days. Calculate the frequency of all parent-child pairs. Alert when a previously unseen or extremely low-frequency parent-child relationship (e.g., below the 1st percentile of historical occurrences) is observed for a critical ICS application, particularly if the parent is a common scripting or shell interpreter. 3. **Machine Learning:** Implement a graph-based anomaly detection algorithm that models process execution chains on ICS endpoints. Train the model on historical Windows Event ID 4688 logs to learn normal process trees. Flag execution paths that deviate significantly from the learned normal graph structure, especially when involving ICS applications and correlating with outbound ICS protocol traffic identified in Zeek conn.log."
          },
          {
            "description": "A Modbus Write (e.g., function code 0x06, 0x10) or DNP3 Operate (function code 0x01) message contains a data value for a critical control parameter (e.g., valve position, temperature setpoint, motor speed) that falls outside its predefined safe operational range (e.g., `valve_pos > 100%`, `temp_setpoint < -20C` or `> 150C`), or uses a function code not approved for the specific target device or process state.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek dnp3.log",
              "Zeek enip.log",
              "Zeek s7comm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN), with a focus on traffic destined for critical final control elements (e.g., actuators, valves, breakers) and safety instrumented systems (SIS).",
            "action": "1. **Symbolic Logic:** In collaboration with process engineers and asset owners, define explicit safe operational envelopes (minimum/maximum values, valid function codes, valid register addresses) for each critical control point and device. Parse the data fields from Zeek's ICS protocol logs for write/operate commands. Compare the values in these commands against the predefined safe envelopes and approved function codes. Alert on any command containing a value or function code that violates these process-aware rules. 2. **Statistical Method:** For critical data values within ICS commands, establish a historical distribution over 90 days. Calculate the mean, standard deviation, and interquartile range (IQR). Alert on values that fall outside 3 standard deviations from the mean, or beyond 1.5 times the IQR from the first or third quartile, indicating an extreme outlier. Additionally, calculate the Shannon entropy of the data value field for specific commands over time; a sudden and significant change in entropy (e.g., 2 standard deviations from the historical mean entropy) could indicate an adversary is fuzzing parameters or sending malformed, unauthorized values. 3. **Machine Learning:** Train an unsupervised anomaly detection model (e.g., Isolation Forest, One-Class SVM) on the distribution of data values for critical ICS parameters. The model would learn the normal range and patterns of these values. Alert on data values that the model identifies as outliers, indicating a potentially unsafe or unauthorized command. This can dynamically adapt to minor process drifts better than static thresholds."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]