[
  {
    "information_requirement": "Has the adversary executed commands or scripts using a Lua interpreter? (TA0002 - Execution)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.011",
        "name": "Lua",
        "evidence": [
          {
            "description": "A process execution event involving a Lua interpreter or script is followed within 5 minutes by an outbound network connection from the same host to an IP address or domain present on a CTI feed of known malicious indicators.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers (e.g., those running web applications with Lua components), and Network Egress Points.",
            "action": [
              "Symbolic: For each Lua process execution event (Windows Event ID 4688), extract the source host. Query network connection logs (Zeek conn.log, Zeek dns.log) from that host within a 5-minute window following the execution. Join the destination IP or queried domain against a CTI feed of known malicious C2 servers. An exact match triggers an alert.",
              "Statistical: For network connections following Lua execution, calculate the historical rarity of the destination IP, domain, and port for the specific host. Using a percentile-based approach, flag connections where the destination IP/domain falls below the 1st percentile of historical access frequency for that host, indicating a newly or rarely contacted destination.",
              "Machine Learning: Develop a time-series model of a host's normal network beaconing behavior (e.g., connection frequency, data volume, destination entropy). After a Lua execution event, monitor the subsequent network traffic from the host. Anomaly detection algorithms (e.g., Isolation Forest) can identify significant deviations from the established baseline, such as a sudden change to a regular, low-volume 'heartbeat' connection characteristic of C2."
            ]
          },
          {
            "description": "A Lua interpreter process (e.g., lua.exe, luac.exe) is executed with command-line arguments that exhibit high entropy, contain base64-encoded strings, or include specific function calls associated with remote code execution or file downloads.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices and Application servers where Lua interpreters are installed.",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) for Lua interpreters. Scan the command-line argument field using regular expressions for patterns like '-e', 'os.execute', 'io.popen', 'require(\"socket\")', or URI strings ('http://', 'https://'). An exact match triggers an alert.",
              "Statistical: For each Lua execution, calculate the Shannon entropy of the command-line arguments. Establish a baseline of normal entropy scores for legitimate Lua usage in the environment. Flag any execution where the command-line entropy exceeds the 95th percentile of the baseline, indicating likely obfuscation or an embedded script.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) on a labeled dataset of benign and malicious Lua command lines. Use features like argument length, character frequency, presence of specific keywords, and entropy. Apply the trained model to new Lua process creation events to classify them as malicious or benign in real-time."
            ]
          },
          {
            "description": "A Lua interpreter process is spawned by a parent process not on an established allowlist of typical parents for that interpreter, such as being launched by a Microsoft Office application, a web browser, or another scripting engine like wscript.exe.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, VDI instances, and servers running Microsoft Office or web browsers.",
            "action": [
              "Symbolic: For each Lua interpreter process creation event (Event ID 4688), inspect the parent process name. Compare the parent against a pre-defined denylist of suspicious parents (e.g., 'winword.exe', 'excel.exe', 'outlook.exe', 'chrome.exe', 'wscript.exe'). An exact match on the denylist triggers an alert.",
              "Statistical: Over a 30-day period, build a frequency table of all parent-child process relationships involving Lua interpreters to establish a baseline. For each new execution, calculate the rarity of the observed parent-child pair. Flag any relationship that has never been seen before or falls below a low frequency threshold (e.g., occurs less than 0.1% of the time).",
              "Machine Learning: Use a graph-based anomaly detection approach. Model process relationships as a directed graph where nodes are processes and edges represent parent-child spawning. Identify anomalous edges (a Lua process being spawned by an unusual parent) by looking for nodes with low centrality scores or connections that are rare in the overall process graph structure."
            ]
          },
          {
            "description": "A file with a .lua extension is written to a non-standard or temporary directory (e.g., %TEMP%, %APPDATA%) and is subsequently executed by a process within a short time window (e.g., under 1 minute).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on endpoints and servers (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Perflogs\\, %TEMP%).",
            "action": [
              "Symbolic: Monitor process creation events (Event ID 4688) where the command line contains a '.lua' file. Use a regular expression to check if the file path is within a high-risk directory such as '%TEMP%', '%APPDATA%', 'C:\\Users\\Public', or 'C:\\Windows\\Temp'. An execution from one of these paths triggers an alert.",
              "Statistical: Analyze the prevalence of Lua script execution paths across the enterprise. Identify paths that are statistically rare. Flag any Lua script execution where the directory path falls into the bottom 5th percentile of execution locations, indicating an outlier that warrants investigation.",
              "Machine Learning: Use a sequence analysis model to detect the pattern of 'file write -> file execute'. Correlate file creation events (e.g., from an EDR or Sysmon Event ID 11) with subsequent process execution events (Event ID 4688). Train a model to recognize the temporal and contextual relationship (e.g., same parent process, short time delay) between a browser/email client writing a '.lua' file and a Lua interpreter executing it."
            ]
          },
          {
            "description": "A process initiated by a Lua script or interpreter subsequently spawns a command shell (cmd.exe, powershell.exe) or executes system discovery commands (e.g., whoami, net user, ipconfig).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Controllers (for reconnaissance activity), and Internal network segments.",
            "action": [
              "Symbolic: For any process with a Lua interpreter as its parent (tracked via Parent Process ID in Event ID 4688), monitor the child process name. Trigger an alert if the child process matches a denylist of reconnaissance or shell commands, such as 'cmd.exe', 'powershell.exe', 'whoami.exe', 'net.exe', 'ipconfig.exe', 'systeminfo.exe'.",
              "Statistical: For a given Lua parent process, profile the typical set and frequency of child processes it spawns. Use Jaccard similarity or a similar set-based distance metric to compare the set of child processes spawned in a new instance against the historical baseline. A low similarity score indicates anomalous downstream activity.",
              "Machine Learning: Model the sequence of process executions as a Markov chain, where the state is the current process and transitions are determined by parent-child relationships. Calculate the transition probabilities based on historical data. Flag process chains originating from Lua execution that have a very low probability under the trained model, indicating a rare and suspicious sequence of actions."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]