[
  {
    "information_requirement": "Is the adversary evading defenses using reflective code loading?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1620",
        "name": "Reflective Code Loading",
        "evidence": [
          {
            "description": "A process, not typically associated with inter-process communication, creates a named pipe whose name matches patterns used by known C2 frameworks that employ reflective loading (e.g., Cobalt Strike).",
            "data_sources": [
              "Windows Event ID 17",
              "Windows Event ID 18"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, File Servers, Application Servers, User Workstations",
            "action": [
              "Symbolic: Monitor Sysmon Event ID 17 (Pipe Created) for pipe names matching regular expressions of known malicious C2 patterns (e.g., `^\\\\msse-[0-9]+-server$`, `^\\\\postex_[a-f0-9]+$`). Correlate the creating process with its parent process to identify suspicious origins, such as an Office application spawning a child that creates the pipe.",
              "Statistical: For each process name, establish a baseline of normal pipe creation activity. Calculate the Shannon entropy of all created pipe names and flag any names in the 95th percentile of entropy scores, as this can indicate algorithmically generated names used by malware. Also, flag any process that creates a named pipe if that process has rarely or never done so historically across the enterprise.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on features from Sysmon Event ID 17/18. Features should include process name, parent process name, pipe name entropy, user context, and time of day. The model classifies each pipe creation event as benign or suspicious, allowing for detection of novel C2 framework patterns."
            ]
          },
          {
            "description": "A command line execution, particularly from a scripting interpreter like powershell.exe, contains large base64 encoded strings, high entropy arguments, or substrings indicative of reflective loading APIs like `[System.Reflection.Assembly]::Load`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1",
              "Windows PowerShell Operational Log Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Servers with PowerShell Remoting enabled, Domain Controllers",
            "action": [
              "Symbolic: Create a detection rule that searches process command lines (Windows Event ID 4688, Sysmon Event ID 1) and PowerShell script block logs (Event ID 4104) for specific keywords and regular expressions associated with reflective loading, such as `[System.Reflection.Assembly]::Load`, `[System.Runtime.InteropServices.Marshal]::`, `IEX(`, and large base64 encoded blocks (`[A-Za-z0-9+/=]{200,}`).",
              "Statistical: Calculate the Shannon entropy for all command-line arguments and PowerShell script blocks. Establish a baseline entropy score for common processes and users. Flag any command line or script block whose entropy exceeds the 99th percentile for that specific process or parent process. Also analyze the command line length, flagging commands that are more than 3 standard deviations longer than the mean for that process.",
              "Machine Learning: Implement a logistic regression model trained on features like command length, entropy, presence of suspicious keywords, and parent process to classify each command's likelihood of being malicious. This can help score and prioritize alerts for analyst review, reducing fatigue from simple keyword matches."
            ]
          },
          {
            "description": "A non-.NET native Windows process (e.g., notepad.exe, explorer.exe, svchost.exe) loads .NET Common Language Runtime (CLR) modules (e.g., clr.dll, mscoree.dll) that are not present in its established baseline of normally loaded libraries.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical System Processes on Workstations and Servers, Third-party application processes, Web Servers",
            "action": [
              "Symbolic: Create a static watchlist of high-risk process/module load combinations. Alert when a non-.NET process (e.g., `notepad.exe`, `svchost.exe`, `lsass.exe`, Office applications) loads core .NET modules (`clr.dll`, `mscoree.dll`, `mscorwks.dll`). This provides a high-fidelity, low-volume alert for known suspicious behavior.",
              "Statistical: For every unique process name, build a historical baseline of all modules it has legitimately loaded over a 30-day period using Sysmon Event ID 7. Calculate the rarity of each process-module pair across the enterprise. Alert when a process loads a module that is in the bottom 5th percentile of load frequency for that process, indicating a rare and potentially malicious event.",
              "Machine Learning: Develop an unsupervised learning model (e.g., an autoencoder) trained on vectors representing module load events for a given process over time. The model learns the 'normal' pattern of module loads. Deviations from this learned pattern, resulting in a high reconstruction error or anomaly score, indicate a potential injection or reflective loading event that warrants investigation."
            ]
          },
          {
            "description": "A process initiates an outbound network connection where the process's typical behavior does not include network activity, or the connection destination is anomalous, which is often a secondary indicator following in-memory code execution.",
            "data_sources": [
              "Windows Event ID 3",
              "Windows Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), Workstations, Servers hosting sensitive data",
            "action": [
              "Symbolic: Join network connection events (Sysmon Event ID 3) with threat intelligence feeds on destination IP addresses, domains (from Zeek dns.log), and JA3/JA3S hashes (from Zeek ssl.log) to identify connections to known C2 infrastructure. Alert on any match.",
              "Statistical: For each process name, establish a baseline of normal network behavior, including common destination ports, data volume (bytes in/out from Zeek conn.log), and connection frequency. Use percentile-based thresholds to detect anomalies, such as a `notepad.exe` process initiating a connection on port 443 where this behavior is in the 99.9th percentile of rarity for that process.",
              "Machine Learning: Use a graph-based analysis to model relationships between processes, network connections, and users. Apply community detection algorithms to identify small, isolated clusters of activity showing a legitimate process making a rare external connection, which is linked to a prior script execution. Flag these subgraphs as high-risk indicators of post-exploitation activity."
            ]
          },
          {
            "description": "A sequence of events indicates cross-process memory access followed by remote thread creation, which is a common pattern for injecting a loader stub that then reflectively loads the main payload into the target process.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-value processes (lsass.exe, winlogon.exe, explorer.exe), User workstations, Domain Controllers",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a Sysmon Event ID 10 (`ProcessAccess`) from a `SourceImage` is immediately followed by a Sysmon Event ID 8 (`CreateRemoteThread`) from the same `SourceImage` into the same `TargetImage` within a 1-second window. Focus on high-risk combinations, such as `powershell.exe` targeting `lsass.exe`.",
              "Statistical: Build a frequency table of all `SourceImage`-`TargetImage` pairs for remote thread creation (Event ID 8). Calculate the rarity of each pair across the enterprise and flag pairs that are statistically rare (e.g., occurring less than 5 times in 30 days). Further analyze the `StartAddress` of the remote thread; addresses not mapping to a known, on-disk module in the target process are highly suspicious.",
              "Machine Learning: Train a sequence-based model (e.g., LSTM) on streams of Sysmon events per host to learn normal sequences of process interactions. An anomalous sequence, such as `WINWORD.EXE` -> `ProcessAccess` on `svchost.exe` -> `CreateRemoteThread` in `svchost.exe`, would be flagged with a high anomaly score as it deviates from learned benign sequences of system activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]