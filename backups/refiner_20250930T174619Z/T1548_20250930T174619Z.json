[
  {
    "information_requirement": "Has the adversary successfully escalated privileges using elevation control mechanisms?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548",
        "name": "Abuse Elevation Control Mechanism",
        "evidence": [
          {
            "description": "A process creation event is observed where the new process executable's file hash (e.g., SHA256) matches a value on a curated threat intelligence list of known privilege escalation tools (e.g., UACMe, Watson, Juicy Potato).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations (PAWs), Critical Application Servers, Developer Workstations",
            "action": [
              "Symbolic: Continuously monitor process creation events (Sysmon Event ID 1). For each new process, compute the executable's hash and match it against a high-confidence threat intelligence feed of file hashes specific to privilege escalation tools. Trigger a high-severity alert on any match.",
              "Statistical: Calculate the prevalence of every file hash executed across the enterprise over a 30-day rolling window. Flag hashes that are statistically rare (e.g., seen on fewer than 5 hosts or < 0.1% of endpoints) and are not signed by a trusted publisher for further inspection, even if not on a known-bad list.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on process creation events, using features such as file path entropy, parent process rarity, command-line argument structure, and hash prevalence. Use the model to score and predict the likelihood that a new process execution is part of a privilege escalation attempt."
            ]
          },
          {
            "description": "A process creation event exhibits a parent-child relationship or command-line arguments known to be associated with UAC bypass, such as a non-system process (e.g., explorer.exe) spawning a trusted auto-elevating binary (e.g., fodhelper.exe, eventvwr.exe) which in turn spawns a shell (cmd.exe, powershell.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, User Workstations, Remote Desktop Session Hosts",
            "action": [
              "Symbolic: Create a SIEM rule that triggers when a known auto-elevating process (e.g., fodhelper.exe, eventvwr.exe, sdclt.exe) is the child of a non-system parent (e.g., explorer.exe, winword.exe) and its own child process is a command interpreter (cmd.exe, powershell.exe).",
              "Statistical: Build a baseline model of normal parent-child process relationships for each host or user role by calculating the frequency of each unique (ParentImage, Image) pair from Sysmon Event ID 1 logs. Flag pairs that are statistically rare (e.g., in the bottom 1st percentile of occurrences for that context) as anomalous.",
              "Machine Learning: Use a graph-based algorithm to analyze process lineage chains (grandparent-parent-child). Train the model on benign activity to learn normal sequences. Detect anomalies when a new process chain significantly deviates from the learned normal patterns, indicating a potential bypass."
            ]
          },
          {
            "description": "A process creation event shows a new process running with 'NT AUTHORITY\\SYSTEM' integrity, where the parent process is not on a pre-defined allowlist of legitimate system processes (e.g., services.exe, svchost.exe, wininit.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1 Servers, Enterprise Certificate Authorities",
            "action": [
              "Symbolic: Implement a rule to alert when a Sysmon Event ID 1 shows the 'User' field as 'NT AUTHORITY\\SYSTEM' and the 'ParentImage' field is not in a defined set of legitimate parents like 'C:\\Windows\\System32\\services.exe', 'C:\\Windows\\System32\\svchost.exe', 'C:\\Windows\\System32\\wininit.exe', 'C:\\Windows\\System32\\lsass.exe'.",
              "Statistical: For all processes created as 'NT AUTHORITY\\SYSTEM', calculate the Shannon entropy of the 'ParentImage' file path. A high entropy score, deviating significantly from the low entropy of standard 'C:\\Windows\\System32' paths, indicates a potentially randomized or obfuscated parent process location.",
              "Machine Learning: Train a one-class SVM or an autoencoder on features of legitimate SYSTEM-level process creation events (e.g., parent image path, command line, process name). Use the trained model to identify outliers or events with high reconstruction error, which represent anomalous SYSTEM process creations."
            ]
          },
          {
            "description": "A file or registry modification is made to a system service's configuration (e.g., ImagePath) by a non-administrative user, followed by the execution of that service, resulting in privileged code execution.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Servers, Systems hosting custom or third-party services",
            "action": [
              "Symbolic: Create a correlation rule that triggers if a registry modification event (Sysmon Event ID 13) to a key under 'HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\ImagePath' is performed by a user not in a designated administrator group, and is followed within 5 minutes by a service start event (Event ID 7045) for that same service.",
              "Statistical: Profile the user accounts that modify service configurations. Maintain a count of modifications per user and flag any non-admin account whose modification count exceeds a baseline threshold (e.g., > 99th percentile of modification activity for non-admin users), indicating anomalous configuration changes.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., ARIMA) on the frequency of service ImagePath modifications across the environment. A sudden spike in the rate of these modifications, exceeding the forecasted range, could indicate a widespread attack campaign leveraging service abuse."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using elevation control mechanisms to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548",
        "name": "Abuse Elevation Control Mechanism",
        "evidence": [
          {
            "description": "A registry modification event is observed where a key controlling User Account Control (UAC) behavior is set to a value that disables or significantly weakens the protection, such as setting EnableLUA to 0.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows 10/11 Workstations, Windows Servers with a GUI installed",
            "action": [
              "Symbolic: Create a high-severity alert for any registry write event (Sysmon Event ID 13) where 'TargetObject' is 'HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA' and 'Details' is '0x00000000', or where 'TargetObject' is '...\\ConsentPromptBehaviorAdmin' and 'Details' is '0x00000000'.",
              "Statistical: Establish a baseline for the rate of modifications to UAC-related registry keys. While legitimate changes are rare, a sudden increase in the count of these modifications across multiple hosts (e.g., exceeding 3 standard deviations from the daily mean) could indicate an automated script or malware campaign disabling UAC.",
              "Machine Learning: Train a classification model to distinguish between legitimate (e.g., GPO push, admin script) and malicious modifications to UAC settings. Features could include the parent process making the change (e.g., 'svchost.exe' vs 'powershell.exe'), time of day, and user account. Use this model to score and prioritize alerts."
            ]
          },
          {
            "description": "A high-integrity (elevated) process injects code into or creates a remote thread in a process running at a lower integrity level, such as a standard user's browser or shell process, to bypass process-level security controls.",
            "data_sources": [
              "Sysmon Event ID 8",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Remote Desktop Session Hosts (RDSH), VDI Environments",
            "action": [
              "Symbolic: Create a detection rule for a Sysmon Event ID 8 ('CreateRemoteThread') where the 'SourceImage' is running at a high or system integrity level and the 'TargetImage' is running at a medium or low integrity level (e.g., explorer.exe, chrome.exe). Explicitly exclude known-good cross-integrity injectors like debuggers or security tools from the rule.",
              "Statistical: Profile normal process injection behavior by calculating the frequency of '(SourceImage, TargetImage)' pairs. Alert on pairs that are statistically rare or have never been seen before in the environment, especially when there is a mismatch in integrity levels or the source is an unsigned binary.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process injection events, using features like source/target process names, integrity levels, and command lines. Identify small, dense clusters that deviate from the large clusters of benign activity (e.g., browser helper objects, antivirus scans) as likely malicious."
            ]
          },
          {
            "description": "An elevated system process (e.g., svchost.exe) loads an unsigned DLL or a DLL from a non-standard, user-writable file path (e.g., C:\\Users\\*\\AppData\\Local\\Temp).",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Systems, especially Servers running critical applications and Domain Controllers",
            "action": [
              "Symbolic: Create a rule to alert on Sysmon Event ID 7 ('ImageLoad') where 'Image' is a high-privilege system process (e.g., svchost.exe, lsass.exe) and the 'ImageLoaded' path matches patterns for user-writable directories (e.g., 'C:\\Users\\*', 'C:\\ProgramData\\*', 'C:\\Temp\\*') OR 'Signed' is 'false'.",
              "Statistical: For each critical system process, build a statistical profile of the file paths of all DLLs it normally loads. Calculate the Shannon entropy of the directory path for each loaded DLL. Alert when a DLL is loaded from a path with an unusually high entropy score, suggesting a randomized or non-standard location.",
              "Machine Learning: Train an autoencoder on the set of (Process Name, Loaded DLL Path, DLL Signed Status) tuples from benign system activity. A high reconstruction error when presented with a new image load event indicates that the specific DLL being loaded by that system process is anomalous and potentially malicious."
            ]
          },
          {
            "description": "Following a privilege escalation event, a newly created high-integrity process spawns a shell which then initiates an external network connection for command and control or data exfiltration.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateways, Egress Firewalls, DNS Servers, All Windows Endpoints",
            "action": [
              "Symbolic: Create a correlation rule that looks for a known UAC bypass parent-child pattern (e.g., 'fodhelper.exe' -> 'cmd.exe') via Sysmon Event ID 1, followed within 60 seconds by a Sysmon Event ID 3 ('NetworkConnect') from that 'cmd.exe' process to a non-local IP address. Cross-validate the connection details (destination IP, port, timestamp) with Zeek conn.log records.",
              "Statistical: Establish a baseline of network connections made by interactive shells (cmd.exe, powershell.exe). Calculate the frequency of destination countries, ASNs, and ports. Alert when a newly spawned shell, especially one created after a potential privilege escalation, connects to a destination that falls in the lowest percentile of frequency for the organization.",
              "Machine Learning: Use a sequence-to-sequence model to analyze sessions of activity, combining process creation, registry modifications, and network events. Train the model to recognize legitimate administrative workflows. Flag sessions that start with a privilege escalation pattern and proceed to network activity that deviates from learned administrative sequences as highly suspicious."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]