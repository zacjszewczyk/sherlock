[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by modifying file timestamps? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.006",
        "name": "Timestomp",
        "evidence": [
          {
            "description": "A known malicious timestomping utility is identified being transferred over the network based on its file hash.",
            "data_sources": [
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points and internal file transfer choke points (e.g., between VLANs).",
            "action": [
              "Symbolic: Continuously analyze Zeek files.log for all files transferred over monitored network segments. Correlate the MD5 and SHA1 hashes of transferred files against a high-confidence cyber threat intelligence (CTI) feed of known malicious tools, including utilities specifically designed for or frequently used for timestomping. Generate a high-priority alert for any hash match.",
              "Statistical: Calculate the frequency of executable file transfers per source host. Identify statistical outliers where a host begins transferring an unusually high number of executable files, especially if those files are not digitally signed. A sudden spike in executable transfers (e.g., exceeding the 99th percentile of the host's historical daily transfer count) could indicate staging of malicious tools.",
              "Machine Learning: Train a file-based classification model using features from Zeek files.log (e.g., MIME type, file extension, entropy, is_executable, seen domains). Use the model to classify each transferred file as 'benign' or 'suspicious tool'. Flag files classified as 'suspicious tool' for further analysis, especially if they are transferred to multiple hosts in a short period."
            ]
          },
          {
            "description": "Execution of command-line utilities or PowerShell commands containing syntax specifically designed to modify file timestamps.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.",
            "action": [
              "Symbolic: Monitor Windows Event ID 4688 (Process Creation) for command lines containing patterns indicative of timestamp modification. Use regular expression matching to detect command structures such as the use of 'touch', PowerShell commands like `(Get-Item ...).CreationTime =`, `(Get-Item ...).LastWriteTime =`, or the execution of known third-party tools (e.g., 'nircmd.exe setfiletime', 'timestomp.exe').",
              "Statistical: For each host, calculate the entropy of command-line arguments captured in Event ID 4688. Establish a baseline entropy score for typical administrative commands. Flag command executions with unusually high entropy, which can indicate obfuscated PowerShell or scripting used to perform timestomping. An entropy score exceeding 3 standard deviations from the host's baseline should trigger an alert.",
              "Machine Learning: Develop a supervised machine learning classifier (e.g., Random Forest) trained on labeled command-line data (benign vs. malicious). Features can include command length, presence of special characters, keyword frequencies (e.g., 'Get-Item', 'Set-Date'), and the entropy score. Use this model to score all new process creation events in real-time, flagging high-probability malicious commands for analyst review."
            ]
          },
          {
            "description": "A file's metadata timestamp ($STANDARD_INFORMATION) significantly predates the file system's logged event time of its creation or modification.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical file system directories on endpoints and servers (e.g., C:\\Windows\\System32, user profile directories), and network file shares.",
            "action": [
              "Symbolic: For each file creation event (e.g., Windows Event ID 4663), compare the system's event timestamp with the file's CreationTime timestamp. Create a rule to alert if `File.CreationTime < (Event.Timestamp - 5 minutes)`. This simple rule catches instances where a file's creation date is backdated beyond a reasonable clock-skew tolerance.",
              "Statistical: For file creation events from Zeek files.log (from `ts` field) or host logs, calculate the delta: `delta = Event.Timestamp - File.CreationTime`. Analyze the distribution of this delta across the enterprise. An event with a delta that falls into the bottom 1st percentile (i.e., a large negative delta) is highly suspicious and should be investigated.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) on the stream of `delta` values calculated for new file creations on a given host. The model will learn the normal distribution of timestamp deltas. A significant anomaly detected by the model, representing a sudden and large negative delta, would indicate a potential timestomping event."
            ]
          },
          {
            "description": "A discrepancy exists between a file's user-visible $STANDARD_INFORMATION ($SI) timestamp and its kernel-level $FILE_NAME ($FN) timestamp within the NTFS Master File Table (MFT).",
            "data_sources": [
              "MFT Record Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "NTFS volumes on all Windows endpoints and servers.",
            "action": [
              "Symbolic: Periodically, or upon alert, use a forensic tool (e.g., EDR live response capability with an MFT parser) to extract and compare the $SI and $FN creation and modification timestamps for a given file. Generate an alert if `$SI.CreationTime != $FN.CreationTime` or `$SI.ModificationTime != $FN.ModificationTime`, especially for executable files in non-standard locations.",
              "Statistical: On a periodic basis (e.g., daily), run a full MFT scan on critical systems. Calculate the total count and percentage of files exhibiting $SI/$FN timestamp mismatches. Establish a baseline for this percentage, as some legitimate software can cause benign mismatches. A sudden, statistically significant increase in the percentage of mismatched files on a host (e.g., a jump of >3 standard deviations from the daily mean) indicates widespread file manipulation.",
              "Machine Learning: Train a classification model to determine if a file is suspicious based on its MFT attributes. Features would include the file path, file extension, and a binary feature `is_mft_timestamp_mismatched`. By correlating this mismatch feature with other suspicious indicators (like being in a temp directory), the model can more accurately classify a file as part of a timestomping attack."
            ]
          },
          {
            "description": "A newly created file, especially an executable, has MACE (Modification, Access, Creation, Entry) timestamps that are an exact match to those of a common, legitimate operating system file.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\\ProgramData on all Windows endpoints and servers.",
            "action": [
              "Symbolic: Maintain a reference list of MACE timestamps for common system files (e.g., `kernel32.dll`, `ntdll.dll`). Upon a file creation event (Windows Event ID 4663), particularly for executables in user directories, query the new file's timestamps. If the new file's full timestamp set exactly matches an entry in the reference list, generate a high-severity alert for potential timestamp cloning.",
              "Statistical: For all newly created executable files, calculate a 'timestamp popularity score' based on how many other files in the environment share the exact same set of MACE timestamps. Establish a distribution of these popularity scores. A new file appearing with a timestamp set that has an extremely high popularity score (e.g., in the 99.9th percentile, matching thousands of system files) is a strong statistical indicator of cloning.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to group newly created files based on their timestamp vectors (MACE timestamps). A file that clusters with a massive group of core OS files, despite being in a different location and having a different name, can be flagged as an anomalous member of that cluster, indicating cloning."
            ]
          },
          {
            "description": "A file exhibits illogical or inconsistent internal timestamps, such as a creation time that is more recent than its last modification time.",
            "data_sources": [
              "MFT Record Data",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "NTFS volumes on all Windows endpoints and servers.",
            "action": [
              "Symbolic: Using data from file monitoring tools or direct MFT parsing, create a rule that flags any file where `CreationTime > LastWriteTime`. While rare legitimate edge cases exist, this is a strong logical indicator of direct metadata manipulation and should be investigated.",
              "Statistical: Periodically scan file systems and calculate the number of files per host with illogical timestamps. Track this count over time for each host. A sudden spike in the number of files with inverted timestamps on a single host, compared to its own baseline and the enterprise-wide average, should trigger an alert.",
              "Machine Learning: This scenario is best suited for rule-based and statistical methods due to its deterministic nature. Instead of a dedicated model, use this finding as a strong feature input into a broader host-based risk scoring model. A file with an illogical timestamp, when combined with other behaviors like execution from a temp directory or network connections to a rare domain, would significantly elevate the host's overall risk score."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]