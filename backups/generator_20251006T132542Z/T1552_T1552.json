[
  {
    "information_requirement": "Is the adversary searching for or accessing unsecured credentials on the network?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552",
        "name": "Unsecured Credentials",
        "evidence": [
          {
            "description": "A network connection to a destination IP/domain on a threat intelligence list, originating from a host within 10 minutes of that same host executing a process with command-line arguments matching credential-search patterns.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Network Egress Points, DNS Resolvers",
            "action": [
              "Using a SIEM, join process creation logs (Windows Event ID 4688, Sysmon Event ID 1) with network logs (Zeek conn.log, Zeek dns.log) on the source host identifier and a 10-minute time window. Trigger an alert if a process command line contains regex patterns for credential searching (e.g., 'password', 'secret', 'api_key') and a subsequent network connection or DNS query from the same host is made to an IP address or domain on a subscribed threat intelligence feed.",
              "For any host exhibiting credential-searching behavior, analyze all subsequent outbound connections (Zeek conn.log). For each connection, calculate a rarity score based on the historical frequency of the destination ASN, country, and port for that host over the last 30 days. Flag connections where the combination of features falls above the 99th percentile of rarity, indicating a statistically anomalous destination.",
              "Implement a time-series anomaly detection model (e.g., ARIMA or LSTM) for each host, trained on historical outbound data volume (e.g., sum of `orig_bytes` from Zeek conn.log per minute). After a credential-search event is detected on a host, feed the subsequent outbound traffic data into the model. An alert is generated if the observed traffic volume exceeds the model's prediction confidence interval, indicating a potential data exfiltration event."
            ]
          },
          {
            "description": "A process is created using a common search utility (e.g., findstr, grep, Select-String, reg.exe) where the command-line arguments contain regular expressions or keywords matching sensitive terms (e.g., 'password', 'private_key') or paths to known credential storage locations (e.g., .bash_history, PuTTY session registry keys).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Developer Workstations, File Servers, CI/CD Pipeline Servers, System Administrator Workstations",
            "action": [
              "Create a SIEM rule that inspects the command line field in process creation logs (Windows Event ID 4688, Sysmon Event ID 1). The rule should use a regular expression to trigger an alert upon the co-occurrence of a search utility (e.g., `findstr`, `grep`, `Select-String`, `reg query`) and keywords or paths related to credentials (e.g., `password`, `secret`, `api_key`, `id_rsa`, `HKCU\\Software\\SimonTatham\\PuTTY\\Sessions`).",
              "For each process execution event (Sysmon Event ID 1), calculate the Shannon entropy of the `CommandLine` field. Establish a baseline entropy distribution for common processes (e.g., `findstr.exe`, `powershell.exe`). Flag for review any execution where the command-line entropy exceeds the 98th percentile for that specific process name, as this may indicate obfuscation or complex, non-interactive search patterns.",
              "Train a supervised classification model (e.g., Gradient Boosting or Random Forest) on a labeled dataset of malicious and benign command lines. Extract features such as command line length, character frequency distribution, n-gram analysis, presence of special characters, count of keywords, and parent process name. Deploy the model to score new process creation events in near real-time, generating an alert for commands classified with a high probability (>0.9) of being malicious credential-searching activity."
            ]
          },
          {
            "description": "A single process ID is observed accessing a high volume of distinct files (>50) within a short time frame (< 1 minute), particularly files with extensions like .config, .xml, .yml, .ini, .pem, .key, .txt, or .bak.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Shared Network Drives, User Profile Directories (e.g., C:\\Users\\*), Source Code Repositories, Application configuration directories (e.g., C:\\ProgramData\\, /etc/)",
            "action": [
              "Using file access logs (Windows Event ID 4663, Sysmon Event ID 11), create a stateful rule that triggers when a single Process ID accesses more than 50 unique files with extensions such as `.config`, `.xml`, `.yml`, `.ini`, `.pem`, `.key`, or `.bak` within a 60-second window. This acts as a tripwire for automated harvesting scripts.",
              "For each host and process name combination, build a statistical baseline of unique file access counts per minute over a 30-day period. Calculate the rolling average and standard deviation. Generate an alert for any one-minute interval where a process's unique file access count exceeds its historical mean by more than 3 standard deviations (a Z-score > 3).",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to file access events within a sliding time window (e.g., 5 minutes). Vectorize each event using features like process name, parent process name, file path depth, and file extension category. The algorithm will group 'normal' activity into dense clusters. Flag any file access events that are labeled as noise or belong to very small, sparse clusters as anomalous, indicating unusual file access behavior not seen in the baseline."
            ]
          },
          {
            "description": "A network data transfer, identified by Zeek file analysis logs or high-volume connection logs, to a geographically or organizationally rare destination, occurring within 15 minutes after a burst of file access activity is detected on the source host.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DMZ Servers, Hosts with high-volume file access, Cloud Storage Gateways",
            "action": [
              "Create a SIEM correlation rule that first identifies a high-volume file access event. If such an event occurs, the rule then monitors `Zeek files.log` for any file transfer from that same source IP within the next 15 minutes where the `filename` field matches a regex for credential-related terms (e.g., `(creds|pass|secret|backup|export).*(zip|txt|csv|7z)`). Trigger an alert on a positive correlation.",
              "Following a high-volume file access alert on a host, initiate a secondary analysis on its subsequent network connections (Zeek conn.log). For each outbound connection, look up the historical frequency of the destination ASN and country for that host. Calculate a rarity score. Any connection to an ASN/country pair that falls into the 99th percentile (i.e., is rarer than 99% of historical connections for that host) should be flagged as a potential exfiltration channel.",
              "Train a one-class SVM (Support Vector Machine) or Isolation Forest model on features from normal outbound network connections (Zeek conn.log) for each host. Features should include `duration`, `orig_bytes`, `resp_bytes`, `proto`, and destination `port`. After a credential-searching event, score all subsequent outbound connections from the host using the model. Connections flagged as anomalies are likely to represent non-standard behavior, such as a long-lived, high-volume TCP connection indicative of data exfiltration."
            ]
          },
          {
            "description": "A process execution chain is observed where a parent process associated with document handling (e.g., winword.exe, acrobat.exe) or web services (e.g., w3wp.exe, httpd.exe) spawns a shell (e.g., cmd.exe, powershell.exe), which in turn executes a search utility.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Servers (IIS, Apache), User Workstations with Microsoft Office, Mail Servers, SharePoint Servers",
            "action": [
              "Implement a SIEM rule that reconstructs process lineage from parent process IDs in Sysmon Event ID 1. Alert on any chain where a process such as `winword.exe`, `excel.exe`, `outlook.exe`, `w3wp.exe`, or `httpd.exe` is an ancestor of a shell (`cmd.exe`, `powershell.exe`) that subsequently launches a search utility (`findstr.exe`, `grep.exe`, `reg.exe`).",
              "Continuously aggregate all parent-child process pairs observed across the enterprise from Sysmon Event ID 1 logs over a 30-day window. Create a lookup table of their frequencies. Create a detection that queries this lookup table for newly observed pairs. Any pair that has not been seen before, or has a frequency of less than 10 across the enterprise, and involves a shell or scripting engine as the child process, should be flagged for investigation as a statistically rare execution chain.",
              "Implement a graph-based anomaly detection system. Model process trees from Sysmon Event ID 1 as directed graphs. Train a graph neural network (GNN) on a large dataset of benign process trees to learn normal execution patterns. In real-time, embed new process trees into a vector space and calculate their anomaly score based on deviation from the learned benign distribution. Flag trees with high anomaly scores, particularly those originating from common user applications or web servers, for SOC review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]