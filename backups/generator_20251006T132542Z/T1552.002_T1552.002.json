[
  {
    "information_requirement": "Is an adversary attempting to harvest credentials by querying the Windows Registry?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552.002",
        "name": "Credentials in Registry",
        "evidence": [
          {
            "description": "A process creation event with a file hash matching a known credential dumping utility is observed, or a direct registry access event targets a hardcoded path known to be used by malware for credential storage.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1/2 Servers, Developer Workstations, Privileged Access Workstations",
            "action": [
              "Symbolic: Create and maintain a watchlist of file hashes for known credential dumping utilities (e.g., Mimikatz, Lazagne, ProcDump). Monitor process creation events (Windows Event ID 4688) and alert on any hash match. Separately, create a watchlist of specific registry keys known to be targeted by malware (e.g., `HKCU\\Software\\Martin Prikryl\\WinSCP 2\\Sessions`) and monitor for access attempts using Windows Event ID 4663, alerting on any access by an unauthorized process.",
              "Statistical: For each registry key known to store credentials, establish a 30-day baseline of access frequency per-host and per-process using Windows Event ID 4663. Calculate the 99th percentile for daily access counts. Trigger an alert if the daily access count for any host-key pair exceeds this established threshold, indicating an unusual level of access.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled historical data from Windows Event IDs 4688 and 4663. Engineer features such as process name, parent process name, user context, target registry key path, and access mask. Deploy the trained model to score new registry access events in real-time, classifying them as either 'benign' or 'malicious credential access' with an associated confidence score."
            ]
          },
          {
            "description": "A command-line execution (via Windows Event ID 4688) or a PowerShell script block (via Windows Event ID 4104) is recorded containing string patterns indicative of registry credential searching.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic: Implement a detection rule that uses regular expressions to scan command-line arguments (from Windows Event ID 4688) and PowerShell script block contents (from Windows Event ID 4104). The rule should search for the co-occurrence of registry query tools (`reg.exe query`, `Get-ItemProperty`) with keywords such as 'password', 'pwd', 'credentials', 'privatekey', 'api_key', or specific paths like `Software\\SimonTatham\\PuTTY\\Sessions`. Generate a high-severity alert on a match.",
              "Statistical: For each command-line execution involving `reg.exe` or PowerShell registry cmdlets, calculate the Shannon entropy of the command string. Establish a baseline entropy score for normal administrative commands within the environment. Trigger an alert for commands whose entropy score exceeds 3 standard deviations from the mean, as high entropy can indicate obfuscation or long, complex search strings.",
              "Machine Learning: Utilize a pre-trained Natural Language Processing (NLP) model (e.g., a transformer-based model like BERT) and fine-tune it on an organization-specific, labeled dataset of command-line strings and PowerShell scripts. The model should classify text into categories like 'Benign Admin Activity' or 'Suspicious Credential Query'. This approach can identify novel or semantically similar attack patterns that keyword matching might miss."
            ]
          },
          {
            "description": "A process or user account accesses a credential-storing registry key, where this specific combination of (Process, User, Key) is statistically rare or has never been observed in a historical baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers, User Workstations, Remote Access Servers",
            "action": [
              "Symbolic: Create and maintain a static list of known-good (process, registry key) access pairs (e.g., `putty.exe` accessing `HKCU\\Software\\SimonTatham\\PuTTY\\Sessions`). Monitor registry access events (Windows Event ID 4663) and generate an alert for any access to a credential-storing key by a process not on its explicit allowlist for that key, particularly for non-standard processes like `WINWORD.EXE` or `cscript.exe`.",
              "Statistical: Over a 30-day rolling window, build a frequency table of all (process name, registry key path, user account) tuples from Windows Event ID 4663. For each new event, check its frequency in the historical data. Flag any tuple that is a first-seen event or falls below a low-frequency threshold (e.g., has occurred less than 5 times enterprise-wide) as a 'rare event' and generate a low-priority alert for analyst investigation.",
              "Machine Learning: Apply an unsupervised anomaly detection algorithm, such as DBSCAN or Isolation Forest, to registry access event data (Windows Event ID 4663). Use categorical features like process name, user account name, and target registry key path. The model will cluster 'normal' activity. Any event that is flagged as an outlier or noise by the algorithm (i.e., does not belong to a known-good cluster) should be treated as a high-fidelity anomaly and trigger an alert."
            ]
          },
          {
            "description": "A suspicious registry query event is observed on a host, followed within a short time window (e.g., 15 minutes) by subsequent lateral movement or data access activity originating from the same host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress/Ingress Points, Internal Network Segments",
            "action": [
              "Symbolic: Implement a SIEM correlation rule that triggers when an alert for suspicious registry querying (from Evidence 1, 2, or 3) is generated for a source host. The rule should then look for a subsequent successful logon (Windows Event ID 4624 with Logon Type 2, 3, or 10) or a network connection (Zeek conn.log) to a new internal asset originating from the same source host within a 15-minute window. Escalate alert severity if the subsequent logon uses an account different from the one that performed the initial registry query.",
              "Statistical: For each host that generates a suspicious registry query alert, begin monitoring its subsequent network activity (from Zeek conn.log) and logon activity (from Windows Event ID 4624). Compare the rate of new outbound connections or successful remote logons in the hour following the alert to a pre-computed baseline for that host. If the rate of new connections or logons exceeds the 99th percentile of the host's normal behavior, generate a high-priority alert indicating potential use of harvested credentials.",
              "Machine Learning: Develop a sequence analysis model, such as a Hidden Markov Model (HMM), to detect malicious chains of events. Define the model states as 'Benign Host Activity', 'Credential Discovery', and 'Lateral Movement'. The observable events are a time-ordered sequence of system logs (e.g., registry query, process creation, network connection, logon event) from a single host. Train the model on known attack sequences and alert when the probability of transitioning into the 'Lateral Movement' state after a 'Credential Discovery' state exceeds a defined confidence threshold."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]