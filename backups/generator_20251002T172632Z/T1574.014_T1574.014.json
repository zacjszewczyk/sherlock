[
  {
    "information_requirement": "Is the adversary establishing persistence by hijacking the .NET AppDomainManager?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A .NET process (i.e., a process that has loaded clr.dll or coreclr.dll) loads an unsigned DLL module, a DLL with low enterprise-wide prevalence, or initiates a network connection to a destination matching known command-and-control (C2) indicators.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 3",
              "Windows Event ID 7",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Fleet, Application Servers, Developer Workstations, Network Egress Points, DNS Servers",
            "action": [
              "Correlate the hashes of all modules loaded by .NET processes (Windows Event ID 7) and destination IPs/domains from their network connections (Windows Event ID 3, Zeek conn.log, Zeek dns.log) against a threat intelligence feed. Generate an alert for any match.",
              "For each .NET process, calculate the enterprise-wide prevalence (file count) of every loaded module hash. Flag any loaded module that is unsigned AND has a prevalence below a threshold (e.g., present on <1% of endpoints). Separately, establish a baseline of destination Autonomous System Numbers (ASNs) for each .NET process; alert when a connection is made to a statistically rare ASN (e.g., 99th percentile of rarity).",
              "Utilize a pre-trained classification model on process behavior features (parent process name, command line, loaded modules, network destinations). A high probability score for a .NET process that loads a rare module and connects to a new external address indicates likely hijacking."
            ]
          },
          {
            "description": "A process sets the 'COMPLUS_AppDomainManager_Assembly' or 'COMPLUS_AppDomainManager_Type' environment variables in its command line, or a .NET .config file is modified to include the '<appDomainManagerAssembly>' or '<appDomainManagerType>' XML elements.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers (e.g., IIS), Developer Workstations, Endpoint Fleet",
            "action": [
              "Monitor process creation events (Windows Event ID 1) for command lines containing the strings 'COMPLUS_AppDomainManager_Assembly' or 'COMPLUS_AppDomainManager_Type'. Separately, monitor file creation/modification events (Windows Event ID 11) on files ending in '.config' for the literal string '<appDomainManagerAssembly>'. Alert on any match.",
              "Profile the parent processes that set these environment variables or modify .config files. Calculate an anomaly score based on the rarity of the parent process (e.g., winword.exe) or user context performing the action. An action performed by a statistically anomalous process-user pair (e.g., exceeding 3 standard deviations from the norm) receives a higher risk score.",
              "Train an unsupervised learning model (e.g., Isolation Forest) on the full text of process command lines from Windows Event ID 1. After training on historical data to learn normal patterns, flag any command line identified as a high-scoring anomaly that also contains the substring 'COMPLUS_AppDomainManager'."
            ]
          },
          {
            "description": "A .NET process, within a short time window of its creation, creates a new persistence mechanism such as a Scheduled Task, a new Service, or a Registry Run Key, or it exhibits network beaconing patterns defined by regular, periodic connections with similar data volumes.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 3",
              "Windows Event ID 12",
              "Windows Event ID 13",
              "Windows Event ID 4698",
              "Windows Event ID 7045",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Endpoint Fleet, Network Egress Points",
            "action": [
              "Create a rule that triggers when a single process ID, associated with a .NET application (Windows Event ID 1), subsequently creates a Scheduled Task (Windows Event ID 4698), a new Service (Windows Event ID 7045), or modifies a registry Run key (Windows Event ID 12, 13) within a 60-second window.",
              "For each .NET process, establish a 30-day baseline of network connection frequency and data volume from Zeek conn.log. Calculate the standard deviation of the time delta between connections. Alert if the standard deviation becomes unusually low (e.g., below the 5th percentile), suggesting robotic beaconing, or if the number of connections in a 5-minute window exceeds the 99th percentile of the baseline.",
              "Implement a time-series forecasting model (e.g., ARIMA) for key network metrics per process (e.g., bytes out, unique destination ports) based on Zeek conn.log data. Generate an alert when observed behavior significantly deviates from the forecasted values and their confidence interval, indicating a behavioral change post-hijacking."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using AppDomainManager hijacking?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A .NET process running with high or system integrity (e.g., as 'NT AUTHORITY\\SYSTEM') loads a DLL module that is unsigned, has low enterprise-wide prevalence, or has a hash matching a known malicious tool.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations (PAWs)",
            "action": [
              "Filter Windows Event ID 7 logs for processes where the associated process creation event (Windows Event ID 1) shows an 'IntegrityLevel' of 'High' or 'System'. For each loaded module, check if the 'Signed' field is 'false'. Correlate the module's hash against a threat intelligence feed of known malicious DLLs. Alert on any match.",
              "For all high-privilege .NET processes, baseline their normally loaded modules over a 30-day period. Calculate the enterprise-wide prevalence of each DLL loaded by these processes. Flag any instance where a high-privilege process loads a DLL that is present on fewer than a defined number of endpoints (e.g., < 5 machines) or is in the bottom 1% of prevalence.",
              "Use a trained classification model to score the risk of a module load event. Input features should include the parent process name, process integrity level, module signature status, module name, and the statistical prevalence of the module. A high risk score for a high-integrity process indicates a probable malicious load for privilege escalation."
            ]
          },
          {
            "description": "A process running with low or medium integrity, or a user account that is not a member of an administrative group, modifies a .config file or registry key for a known high-privilege .NET application to set AppDomainManager properties.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 11",
              "Windows Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers, Domain Controllers, Privileged Access Workstations",
            "action": [
              "Maintain an explicit watchlist of full paths to .config files and registry keys for high-privilege .NET services. Alert whenever a modification event (Windows Event ID 11, 13) is performed by a user or process whose integrity level is not 'High' or 'System', or is not on an approved list of administrators.",
              "Profile user accounts and processes that typically modify service configurations. Calculate a risk score for each modification based on the rarity of the user-process-target combination. A standard user modifying a SYSTEM service's config file via an unusual process (e.g., explorer.exe) would generate a high anomaly score (e.g., >3 standard deviations from the established norm for that file).",
              "Deploy a peer group analysis model (UEBA). Group users by role and privilege level. The model identifies when a user's behavior (e.g., modifying a system-level .NET config file) deviates significantly from their peers, signaling a potential compromised account being used for privilege escalation."
            ]
          },
          {
            "description": "A high-privilege .NET process, such as a Windows Service running as SYSTEM, spawns an unexpected child process like cmd.exe or powershell.exe, or performs a sensitive follow-on action such as creating a new administrator account.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 4720"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged Access Workstations (PAWs)",
            "action": [
              "Maintain a strict allowlist of legitimate child processes for each high-privilege .NET service on critical servers. Monitor Windows Event ID 1 and alert on any deviation, especially the spawning of interactive shells (cmd.exe, powershell.exe), script hosts (wscript.exe, cscript.exe), or rundll32.exe.",
              "For each parent-child process pair involving a high-privilege .NET parent, calculate the historical frequency of that relationship. Alert when a rare pairing occurs (e.g., a pairing that has never been seen before or accounts for less than 0.1% of the parent's total child process creations). Calculate the Shannon entropy of the child process command line; high entropy may indicate obfuscation and should increase the event's risk score.",
              "Use a graph-based anomaly detection model to map normal process lineage (parent-child-grandchild relationships). A high-privilege .NET service spawning a process that then makes a network connection or modifies a sensitive file would create an anomalous path in the process graph, which the model would flag as a high-risk deviation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using AppDomainManager hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.014",
        "name": "AppDomainManager",
        "evidence": [
          {
            "description": "A trusted, signed, and allow-listed .NET process (e.g., MSBuild.exe) initiates a network connection to a destination IP or domain matching a threat intelligence feed, or exhibits network characteristics (e.g., JA3/JA3S hash, periodic beaconing) inconsistent with its established baseline.",
            "data_sources": [
              "Windows Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Endpoint Fleet, Developer Workstations, Build Servers",
            "action": [
              "Join network connection logs (Windows Event ID 3, Zeek conn.log) with a CTI feed of malicious IPs and domains. Filter for connections where the initiating process is on a watchlist of trusted .NET binaries (e.g., MSBuild.exe, InstallUtil.exe). Any match is a high-fidelity alert.",
              "For each trusted .NET process, profile its normal destination ASNs and JA3/JA3S hashes (from Zeek ssl.log). Alert when a connection uses a JA3/JA3S hash that has never been seen for that process or goes to a statistically rare ASN. Calculate the entropy of DNS query names (from Zeek dns.log) associated with the process; a spike in entropy can indicate Domain Generation Algorithm (DGA) activity.",
              "Implement a time-series anomaly detection model on network beaconing behavior. For each trusted .NET process, analyze connection frequency, regularity, and payload size (from Zeek conn.log). The model can detect rigid, periodic patterns characteristic of C2 communication by flagging deviations from learned 'bursty' or random traffic patterns."
            ]
          },
          {
            "description": "A scripting interpreter such as powershell.exe or cmd.exe sets the 'COMPLUS_AppDomainManager_Assembly' environment variable in its command line before launching a trusted .NET application as a child process.",
            "data_sources": [
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Fleet, Developer Workstations, Servers running .NET applications",
            "action": [
              "Using Windows Event ID 1, search for parent processes such as powershell.exe or cmd.exe whose command line contains 'COMPLUS_AppDomainManager_Assembly' and which immediately spawn a trusted .NET child process. This direct parent-child action sequence is a strong indicator of hijacking.",
              "Analyze the command-line arguments of all processes. Calculate the character frequency and length distribution for command lines that launch trusted .NET applications. A command line that is an outlier in length (e.g., >3 standard deviations from the mean for that parent-child pair) or contains a high percentage of special characters can be flagged for review.",
              "Train a sequence-based model (e.g., an LSTM) on parent-child process command-line pairs. The model learns legitimate sequences of process creation and argument passing. An anomalous sequence, such as cmd.exe passing environment variables to aspnet_compiler.exe with a Base64 encoded payload, would be flagged as a deviation from learned benign behavior."
            ]
          },
          {
            "description": "A trusted .NET 'living-off-the-land' binary (LOLbin) performs anomalous file system or process interaction, such as writing an executable to a world-writable directory, accessing browser credential stores, or attempting to read memory from a security process like lsass.exe.",
            "data_sources": [
              "Windows Event ID 10",
              "Windows Event ID 11",
              "Windows Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Fleet, File Servers, Domain Controllers",
            "action": [
              "Create a rule that alerts when a process from a watchlist of .NET LOLbins (e.g., InstallUtil.exe, RegAsm.exe) creates a file with a .exe or .dll extension in a non-standard directory like 'C:\\Users\\Public\\' or 'C:\\Windows\\Tasks\\' (Windows Event ID 11), or generates a process access event (Windows Event ID 10) targeting lsass.exe.",
              "For each trusted .NET LOLbin, baseline its normal file system access patterns using Windows Event ID 11. Use file path rarity analysis; if MSBuild.exe accesses a path in a user's browser profile (e.g., '...\\AppData\\...\\Login Data'), flag it as anomalous, as this path is statistically rare for this process and indicative of credential access.",
              "Use an unsupervised clustering algorithm (e.g., DBSCAN) on entities composed of process activity features (file paths accessed, registry keys modified, network connections made). A trusted .NET process that gets clustered with known malware or forms its own small, isolated cluster indicates its aggregate behavior is anomalous and likely evasive."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]