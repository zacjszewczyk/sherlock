[
  {
    "information_requirement": "Is an adversary using a trusted developer utility to proxy the execution of malicious code, thereby bypassing application control defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1127",
        "name": "Trusted Developer Utilities Proxy Execution",
        "evidence": [
          {
            "description": "A trusted developer utility process (e.g., MSBuild.exe, WinDbg.exe, RCSI.exe) is observed initiating a network connection, and either the process's file hash matches a known malicious signature or the destination IP/domain is found on a threat intelligence feed of known command and control (C2) servers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, domain controllers, and network egress points/gateways.",
            "action": [
              "Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on Process ID (PID) and timestamp. For processes identified as developer utilities (e.g., MSBuild.exe, WinDbg.exe), query the process hash against a threat intelligence database of known malicious hashes. Simultaneously, query the destination IP and domain (from Zeek conn.log and dns.log) against a C2 blocklist. Generate an alert if either the hash or the network indicator matches.",
              "For each network connection originating from a trusted developer utility, calculate the frequency of the destination IP address across all hosts in the last 30 days. Isolate connections where the destination IP falls into the 99th percentile for rarity (i.e., is one of the least frequently contacted IPs). Also, calculate the JA3/JA3S hash rarity from Zeek ssl.log for encrypted connections and flag those in the 99th percentile of rarity.",
              "Train a classification model (e.g., Gradient Boosting, Random Forest) on a labeled dataset of both benign and malicious developer utility executions. Features should include: process command-line length and entropy, parent process name, user context, network destination IP reputation score, destination port, connection duration, bytes sent/received, and JA3/JA3S hash. Deploy the model to score new executions in real-time, alerting on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A trusted developer utility is executed with command-line arguments containing patterns indicative of abuse, such as base64 encoded strings (`FromBase64String`), inline C# tasks (`RoslynCodeTaskFactory`), invocation of `System.Management.Automation`, or file paths pointing to `C:\\Users\\Public`, `C:\\Temp`, or user `%APPDATA%` directories.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those not designated for software development; Configuration Management Database (CMDB) to identify asset roles.",
            "action": [
              "Using Windows Event ID 4688, create a detection rule that inspects the command line of trusted developer utility processes. The rule should use a set of regular expressions to identify suspicious patterns, such as: `(?i)(FromBase64String|roslyncodetaskfactory|System.Management.Automation)`, or file paths like `C:\\\\Users\\\\Public\\\\`, `C:\\\\Temp\\\\`, `AppData\\\\Local\\\\Temp`. Generate an alert upon any match.",
              "For each developer utility (e.g., MSBuild.exe), establish a historical baseline of command-line argument length and Shannon entropy over a 30-day period. For each new execution, calculate these same metrics. Generate an alert if either the length or the entropy exceeds the 95th percentile of its historical baseline for that specific utility, suggesting obfuscation or an unusually complex command.",
              "On a per-host basis, model the daily frequency of developer utility executions as a time series. Use a model like SARIMA or Prophet to forecast the expected frequency for the next day. If the actual count of executions significantly exceeds the forecasted upper confidence interval, generate an anomaly alert. This can detect a sudden burst of activity indicative of a script-driven attack."
            ]
          },
          {
            "description": "A trusted developer utility process (e.g., MSBuild.exe) spawns a child process that is anomalous to its baseline behavior, such as a script interpreter (powershell.exe), a network utility (certutil.exe), or a process running from a user-writable directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, focusing on process lineage from non-developer systems; Asset inventory databases to distinguish developer from non-developer systems.",
            "action": [
              "Monitor parent-child process relationships using Windows Event ID 4688. Maintain an explicit allowlist of legitimate child processes for each trusted developer utility (e.g., MSBuild.exe -> csc.exe). Alert on any deviation, especially the creation of `powershell.exe`, `cmd.exe`, `wscript.exe`, `cscript.exe`, `bitsadmin.exe`, or `certutil.exe`.",
              "For each developer utility (e.g., MSBuild.exe), create a historical frequency table of its child processes over the past 90 days. For each new parent-child event, check the historical frequency of that specific child process. Generate an alert if a child process is spawned that has never been seen before or falls into the bottom 1% of historical frequency, indicating an anomalous process chain.",
              "Construct a process lineage graph for each host, where nodes are processes and directed edges represent parent-child relationships. Train a graph neural network (GNN) or use a graph embedding technique to learn the 'normal' structure of subgraphs originating from developer utilities. Flag new process subgraphs that have a high anomaly score, indicating a deviation in structure, depth, or node composition (e.g., unexpected grandchildren processes)."
            ]
          },
          {
            "description": "A trusted developer utility is executed by a user not belonging to a pre-defined 'Developer' group, on a host not categorized as a 'Development' asset, or as a child process of a non-development application like an office suite application (e.g., WINWORD.EXE, EXCEL.EXE) or a web browser (e.g., chrome.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human Resources user role database, Active Directory servers, CMDB for asset role categorization, all non-developer workstations (e.g., Finance, HR, Sales departments), and production servers.",
            "action": [
              "Join process creation events (Windows Event ID 4688) with asset inventory (for host role) and Active Directory data (for user group). Create a rule that alerts if a developer utility is executed AND (the user is NOT in the 'Developers' AD group OR the host is NOT tagged as a 'Development' asset). Additionally, create a rule to alert if the parent process is a common productivity application (e.g., WINWORD.EXE, OUTLOOK.EXE, chrome.exe).",
              "Over a 90-day baseline period, calculate the conditional probability $$ P(\\text{developer utility} | \\text{parent process}) $$ for all observed parent-child process pairs. For each new execution of a developer utility, look up this probability. Generate an alert if the probability is below a low threshold (e.g., $$ < 0.005 $$), indicating a statistically unlikely parent-child relationship.",
              "Train a one-class SVM or Isolation Forest model using features from known-good executions of developer utilities. The feature set should include: user role (categorical), host role (categorical), parent process name (categorical), and time of day (cyclical). Deploy the model to score new executions. Events that the model classifies as outliers are flagged as anomalous and require investigation."
            ]
          },
          {
            "description": "A sequence of events occurs within a short time window (< 5 minutes) on a single host: 1) A developer utility binary is created in a temporary or user-writable path (e.g., %TEMP%, %APPDATA%). 2) The binary is executed. 3) The process makes an external network connection. 4) The original binary file is deleted.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly temporary file directories (%TEMP%, %APPDATA%), public writeable directories (C:\\Users\\Public), and network egress points.",
            "action": [
              "In a SIEM, create a stateful correlation rule that looks for the following sequence on a single host within a 5-minute window: 1. A file creation event for a developer utility binary in a temp/user-writable directory. 2. A process creation event (Windows Event ID 4688) for that same binary path. 3. A network connection event (Zeek conn.log) from the PID of the new process. 4. A file deletion event (Windows Event ID 4663 with Accesses: DELETE) for the original binary path. Trigger a high-severity alert if all four steps are observed in order.",
              "For all executables created in and deleted from temporary directories (`%TEMP%`, `C:\\Users\\Public`, etc.), calculate the lifetime (delta between creation and deletion timestamps). Build a historical distribution of these lifetimes. For developer utilities specifically, flag any instance where the lifetime falls in the bottom 5th percentile (e.g., < 10 seconds) and is correlated with an outbound network connection, as this indicates rapid, automated execution and cleanup.",
              "Model user activity as a sequence of discrete events (e.g., `file_create_temp`, `process_exec_dev_util`, `network_conn_external`, `file_delete_temp`). Train a Hidden Markov Model (HMM) on sequences from benign user sessions to learn the normal transition probabilities between these event states. Apply the trained model to new event sequences in real-time. Flag sequences that have a very low likelihood score, indicating an improbable series of actions characteristic of an automated attack script rather than human behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]