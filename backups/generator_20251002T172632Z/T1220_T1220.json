[
  {
    "information_requirement": "Is an adversary evading defenses by executing malicious scripts embedded in XSL files? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1220",
        "name": "XSL Script Processing",
        "evidence": [
          {
            "description": "The wmic.exe or msxsl.exe process initiates an outbound network connection to a remote IP address, domain, or URL that is present on a high-confidence threat intelligence feed of known malicious hosts.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network perimeter firewalls, outbound web proxies, corporate DNS resolvers, and all Windows workstations and servers.",
            "action": [
              "Symbolic: Join process creation logs (Sysmon Event ID 1 or Windows Event ID 4688) with network connection logs (Sysmon Event ID 3 or Zeek conn.log). Generate an alert when the initiating process name is `wmic.exe` or `msxsl.exe` and the destination IP (from conn.log) or requested domain (from dns.log or http.log) matches an entry in a threat intelligence feed categorized as malware C2 or malicious script hosting.",
              "Statistical: For each destination domain contacted by `wmic.exe` or `msxsl.exe`, calculate its rarity by counting the number of distinct hosts in the enterprise that have connected to it in the last 30 days. Flag connections to domains in the bottom 1st percentile (i.e., the least frequently accessed domains) as statistically anomalous and potentially malicious.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) to produce a risk score for each network connection made by `wmic.exe` or `msxsl.exe`. Use features such as: destination IP reputation, JA3/JA3S hash from the TLS handshake (Zeek ssl.log), entropy of the domain name, domain age, and the presence and entropy of URL query parameters."
            ]
          },
          {
            "description": "The wmic.exe process is executed with the '/FORMAT' command-line switch where the argument is either a remote file (URL) or a local file in a user-writable or temporary directory (e.g., C:\\Users\\*, C:\\ProgramData\\*, C:\\Temp\\*).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows workstations and servers, with heightened scrutiny on systems outside of developer or system administrator groups.",
            "action": [
              "Symbolic: Search process execution logs (Sysmon Event ID 1) for any command line containing `wmic.exe` and the string `/FORMAT:`. Create a high-severity alert for command lines matching `/FORMAT:http`, `/FORMAT:https`, or where the local file path points to a user-writable directory like `AppData` or `Temp`.",
              "Statistical: For all executions of `wmic.exe` with the `/FORMAT` switch, calculate the entropy of the file path argument. Establish a baseline of normal path entropy. Alert on executions where the path entropy is in the top 5th percentile, which can indicate randomized or obfuscated file names often used by malware to evade simple signature-based detections.",
              "Machine Learning: Use an unsupervised anomaly detection algorithm, such as Isolation Forest, on features from `wmic.exe` executions. Model features should include: parent process name, command-line length, number of special characters in the command line, a binary flag for the presence of a URL, and a binary flag for the file path being in a temporary directory. The model will flag executions that are strong outliers from learned normal behavior."
            ]
          },
          {
            "description": "The msxsl.exe process is executed with command-line arguments that reference a remote file (URL) or local files with non-standard extensions (e.g., .jpeg, .txt, .tmp) instead of the expected .xml or .xsl.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all Windows workstations and servers. The presence of the msxsl.exe binary itself constitutes an NAI, as it is not installed by default and must be dropped by an adversary.",
            "action": [
              "Symbolic: Create a detection rule for process creation events (Sysmon Event ID 1) where the process name is `msxsl.exe`. Alert if any command-line argument contains `http://` or `https://`, or if the file extensions of the arguments are not `.xml` or `.xsl`. Additionally, alert on any execution of a process named `msxsl.exe` whose file hash does not match a known-good version from Microsoft.",
              "Statistical: As `msxsl.exe` is not a default Windows binary, its presence is highly anomalous. Generate a daily report of all hosts with `msxsl.exe` on their filesystem. Any host not explicitly authorized (e.g., a build server) should be investigated. For authorized hosts, baseline the parent processes of `msxsl.exe`; a parent like `outlook.exe` or `winword.exe` should be flagged as it deviates from expected developer-initiated execution.",
              "Machine Learning: Implement a time-series forecasting model (e.g., ARIMA) to monitor the daily count of `msxsl.exe` executions across the enterprise. An alert should be generated if the observed count significantly exceeds the forecasted value's confidence interval, indicating a potential widespread campaign. The investigation should focus on the specific hosts contributing to the anomalous spike."
            ]
          },
          {
            "description": "A process execution chain is observed where `wmic.exe` or `msxsl.exe` is spawned by a parent process not typically associated with systems administration, such as an Office application (winword.exe, excel.exe), browser, or another script interpreter (cscript.exe, wscript.exe, mshta.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly those belonging to users in non-IT roles such as Finance, HR, and Sales, where developer tool execution is not expected.",
            "action": [
              "Symbolic: Using process creation logs with parent process information (Sysmon Event ID 1), create a rule that alerts when the parent process of `wmic.exe` or `msxsl.exe` is one of `winword.exe`, `excel.exe`, `powerpnt.exe`, `outlook.exe`, `mshta.exe`, `cscript.exe`, or `wscript.exe`.",
              "Statistical: Maintain a baseline of all unique parent-child process relationships observed over a 30-day period. For each new execution of `wmic.exe` or `msxsl.exe`, check if its parent process has been seen before with this child. If the parent-child pair is new or has a frequency below a low threshold (e.g., in the 1st percentile of all pair frequencies), flag it as a rare and suspicious process chain.",
              "Machine Learning: Apply a graph-based anomaly detection algorithm to process execution trees. Model processes as nodes and parent-child relationships as directed edges. The algorithm can identify anomalous paths, such as a process chain originating from an email client that leads to `wmic.exe` executing a remote script, which is structurally different from normal system activity."
            ]
          },
          {
            "description": "Within 5 minutes of a suspicious `wmic.exe` or `msxsl.exe` execution, the source host initiates outbound network connections with command-and-control (C2) characteristics, such as periodic callbacks (beaconing), long-lived connections, or high-entropy data transfers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, host-based network monitoring on endpoints, and hosts identified as having recently executed suspicious XSL processing.",
            "action": [
              "Symbolic: Correlate process execution logs (Sysmon Event ID 1) with network connection logs (Sysmon Event ID 3). If a suspicious `wmic.exe` or `msxsl.exe` execution is detected, trigger a high-priority alert if the same host initiates an outbound connection directly to an IP address (bypassing DNS) on a non-standard port within the next 5 minutes.",
              "Statistical: For a host flagged for suspicious XSL processing, analyze its subsequent network traffic from `Zeek conn.log`. Calculate the standard deviation of the time intervals between connections to a single destination; a near-zero standard deviation indicates robotic beaconing. Additionally, calculate the entropy of the connection payload (if captured in `Zeek files.log` or via full packet capture) and alert if it exceeds a threshold indicative of encrypted or packed data.",
              "Machine Learning: Following a suspicious XSL execution event on a host, apply an autoencoder model trained on that host's normal network behavior (e.g., bytes sent/received per minute, protocol distribution, connection count). The model will reconstruct the observed traffic, and a high reconstruction error indicates a significant deviation from the learned baseline, flagging potential C2 activity or data exfiltration initiated by the malicious script."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]