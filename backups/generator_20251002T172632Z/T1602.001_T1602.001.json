[
  {
    "information_requirement": "Is the adversary collecting network information via SNMP MIB dumps?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1602.001",
        "name": "SNMP (MIB Dump)",
        "evidence": [
          {
            "description": "An SNMP session over UDP port 161 occurs where one host is on the internal network and the other is external, or an internal host involved in the session is present on a threat intelligence feed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek snmp.log",
              "Threat intelligence feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress/ingress points (monitored by Zeek), internal network segments (monitored by Zeek), integrated threat intelligence platform data feeds.",
            "action": [
              "Symbolic: Define a list of internal IP ranges. Query Zeek conn.log for records where `proto` is 'udp' and `id.resp_p` is 161. Alert if (`id.orig_h` is in internal ranges AND `id.resp_h` is NOT in internal ranges) OR (`id.orig_h` is NOT in internal ranges AND `id.resp_h` is in internal ranges). Additionally, correlate `id.orig_h` and `id.resp_h` against a threat intelligence feed of known malicious IPs and alert on any match.",
              "Statistical: For each internal host, count the number of other internal hosts it communicates with via SNMP over a 24-hour period. Establish a baseline distribution for this 'fan-out' count across all hosts. Flag any host whose fan-out count exceeds the 95th percentile, as it may indicate an internal scanner probing for SNMP-enabled devices.",
              "Machine Learning: Train a supervised binary classification model (e.g., Random Forest) using labeled historical Zeek conn.log data. Features should include: duration, source bytes, destination bytes, source ASN, destination country, and a binary flag indicating if either IP is on a threat intel feed. Label known-good internal management traffic as '0' and confirmed malicious or policy-violating external traffic as '1'. Deploy the model to score new SNMP connections, alerting on those with a high probability score of being malicious."
            ]
          },
          {
            "description": "An SNMP request is logged in Zeek snmp.log that uses a community string matching a denylist of default ('public', 'private'), common, or weak strings, with risk elevated if the source is not an authorized management host.",
            "data_sources": [
              "Zeek snmp.log",
              "Asset inventory of authorized management hosts"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centrally located network sensors (e.g., Zeek instances), asset management systems, and network devices themselves which respond to the requests.",
            "action": [
              "Symbolic: Maintain a denylist of weak/default community strings (e.g., 'public', 'private', 'manager'). Create a rule that triggers an alert when the `community` field in Zeek snmp.log matches an entry in this denylist. Increase alert severity if the source IP (`id.orig_h`) is not on an allowlist of authorized network management stations.",
              "Statistical: For each source host (`id.orig_h`), calculate the Shannon entropy of the community strings used over a 24-hour period from Zeek snmp.log. A very low entropy indicates repetitive use of one string (normal), while a high entropy suggests the host is trying many different strings (brute-forcing). Alert on hosts whose community string entropy exceeds the 98th percentile for all SNMP-sending hosts.",
              "Machine Learning: Apply an unsupervised clustering algorithm (e.g., DBSCAN) to features extracted from Zeek snmp.log. For each session, use features like: a flag for weak community string, a flag for non-allowlisted source IP, and the destination IP. The algorithm will group sessions into clusters. Analyze the resulting clusters to identify those representing scanning or brute-force activity and alert on new sessions assigned to a known-bad cluster."
            ]
          },
          {
            "description": "A process is created on a host that is not an authorized network management station, and the process name or command line arguments correspond to known SNMP scanning tools (e.g., 'snmpwalk', 'nmap -sU') or scripting libraries (e.g., PowerShell 'Get-SNMP').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, particularly user workstations, jump servers, developer workstations, and application servers. Exclude pre-approved network management servers.",
            "action": [
              "Symbolic: Create a detection rule that monitors process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for `NewProcessName` or `CommandLine` fields containing keywords such as 'snmpwalk', 'snmp-check', 'onesixtyone', 'nmap -sU', or script arguments like 'Get-SNMP'. If a match is found, check if the host is on an allowlist of administrative systems. If not, generate a high-severity alert.",
              "Statistical: For each host, maintain a historical baseline of all process names executed over the last 30 days. Alert when a process associated with SNMP scanning (e.g., 'snmpwalk.exe') is executed on a host for the first time. The statistical rarity of this event, especially on a non-administrative workstation, is a strong indicator of new malicious activity.",
              "Machine Learning: Train a supervised classification model to identify anomalous process executions. Use features from process logs like: process name, parent process name (e.g., 'powershell.exe', 'cmd.exe'), command line argument entropy, command line length, and user account type. Label known benign activity as '0' and known malicious/administrative tool usage on workstations as '1'. Use the model to score new process events and alert on those classified as anomalous."
            ]
          },
          {
            "description": "A single source host sends a number of SNMP requests (GET, GETNEXT, GETBULK) to a single destination within a short time window (e.g., 5 minutes) that significantly exceeds its own established baseline or the baseline of its peer group, which is indicative of a MIB dump.",
            "data_sources": [
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network TAPs or SPAN ports feeding Zeek sensors. The targets are network devices (routers, switches) and servers with SNMP enabled.",
            "action": [
              "Symbolic: Implement a static threshold rule that triggers an alert if a single source IP (`id.orig_h`) sends more than 1,000 SNMP requests to a single destination IP (`id.resp_h`) within a 5-minute window, based on counts from Zeek snmp.log.",
              "Statistical: For each source-destination IP pair, count the number of SNMP requests in 5-minute time windows. For each pair, calculate a rolling 30-day baseline (mean and standard deviation) of request counts. Generate an alert when the current count for a pair exceeds its historical mean by more than 3 standard deviations.",
              "Machine Learning: For high-value target devices (e.g., core routers, domain controllers), build a univariate time-series anomaly detection model (e.g., ARIMA or an LSTM-based autoencoder) on the volume of SNMP requests received per minute. The model learns the normal temporal patterns of management traffic. An alert is generated when the observed request volume deviates significantly from the model's prediction."
            ]
          },
          {
            "description": "A single source host sends SNMP requests to an unusually high number of distinct destination hosts in a short period (network scan), or a source host requests an unusually high number of distinct Object Identifiers (OIDs) from a single destination (MIB dump).",
            "data_sources": [
              "Zeek snmp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network-wide monitoring sensors (Zeek). Any host on the network can be a source, and any SNMP-enabled device can be a target.",
            "action": [
              "Symbolic: Create two threshold-based rules. Rule 1 (Scan Detection): Alert if a source IP (`id.orig_h`) sends SNMP requests to >20 unique destination IPs (`id.resp_h`) within 10 minutes. Rule 2 (Dump Detection): Alert if a source IP requests >500 unique OIDs from a single destination IP within 10 minutes, as seen in Zeek snmp.log.",
              "Statistical: In 10-minute windows, for each source IP, calculate two metrics from Zeek snmp.log: (1) the count of distinct destination IPs, and (2) the Shannon entropy of the requested OIDs. Establish a baseline for both metrics across all hosts. Alert on any source IP that exceeds the 98th percentile for either the destination count (indicating scanning) or OID entropy (indicating MIB exploration).",
              "Machine Learning: For each source host, aggregate SNMP activity over a 10-minute window and create a feature vector including: total request count, unique destination IP count, unique community string count, and OID entropy. Use an unsupervised anomaly detection model like Isolation Forest to score each vector. The model will identify hosts whose behavior patterns are rare and different from the majority of normal activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]