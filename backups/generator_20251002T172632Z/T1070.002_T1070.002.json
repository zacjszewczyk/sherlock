[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by clearing logs on Linux or macOS systems? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.002",
        "name": "Clear Linux or Mac System Logs",
        "evidence": [
          {
            "description": "A process execution event is observed where the file hash (e.g., SHA256) of the executed binary matches an entry on a threat intelligence list of known log-clearing tools or malware.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Auditd execve syscall"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux and macOS endpoints, particularly servers with critical roles (e.g., web, database, authentication) and developer workstations.",
            "action": [
              "Continuously query process execution events (e.g., Sysmon for Linux Event ID 1, auditd) and compare the file hash of each executed binary against a curated threat intelligence feed of known malicious hashes. Generate a critical alert upon any match.",
              "For all executed file hashes, calculate the enterprise-wide prevalence by counting the number of distinct hosts each hash is seen on. Isolate and review processes where the hash is present on a small number of systems (e.g., < 5 hosts or < 1% of the fleet) and is not part of an approved software inventory.",
              "Utilize a supervised classification model (e.g., Gradient Boosting, Random Forest) trained on labeled process execution data. Input features should include hash prevalence, file path entropy, parent process legitimacy score, and user context. Alert on any process classified as 'malicious' with a confidence score exceeding a defined threshold (e.g., > 0.9)."
            ]
          },
          {
            "description": "A process execution event is observed containing command-line arguments and shell operators indicative of log file truncation, deletion, or overwriting (e.g., 'cat /dev/null > /var/log/auth.log').",
            "data_sources": [
              "Auditd execve syscall",
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., web, database, authentication), macOS developer workstations, DMZ servers",
            "action": [
              "Using regular expressions, search all process command-line arguments for patterns associated with log clearing. Examples include `(>|>>) /var/log/.*(log|messages|secure|auth|wtmp|utmp)`, `cat /dev/null >`, `shred .*log`, `rm /var/log/`, and `truncate -s 0`. Generate an alert on any match.",
              "For each user, establish a baseline of command-line argument Shannon entropy over a 30-day window. Alert if a newly executed command's entropy exceeds the 95th percentile for that user. Additionally, track the frequency of rare commands like 'truncate' or 'shred' per user and alert if the daily count exceeds 3 standard deviations from their individual mean.",
              "Employ a time-series anomaly detection model (e.g., Prophet, SARIMA) on the aggregated count of log-clearing command patterns per host, bucketed hourly. Train the model on historical data to learn normal administrative cycles. An alert is triggered if a sudden burst of these commands creates a spike that significantly deviates from the forecasted pattern."
            ]
          },
          {
            "description": "A process execution event is observed containing commands or arguments designed to disable, clear, or redirect the shell's command history file (e.g., 'unset HISTFILE').",
            "data_sources": [
              "Auditd execve syscall",
              "Sysmon for Linux Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Interactive shell access points, Privileged user workstations and servers, Jump boxes",
            "action": [
              "Create detection rules to search process command-line arguments for specific patterns of history tampering. Examples include `unset HISTFILE`, `export HISTFILE=/dev/null`, `history -c`, `ln -s /dev/null .*_history`, `rm .*_history`, or `set +o history`. Generate a high-priority alert on any match.",
              "For each user account, flag the first-time use of any history-tampering command. Maintain a set of 'first-seen' suspicious commands per user. Separately, calculate the daily count of history-tampering commands per user and alert if this count exceeds the 99th percentile for all interactive users across the enterprise.",
              "Utilize a sequence-to-sequence autoencoder or an LSTM model to analyze the sequence of commands within a single user session. Train the model on millions of normal command sequences. The model should flag a session as anomalous if the reconstruction error is high, particularly for sequences where a history-clearing command immediately follows other suspicious activity (e.g., `whoami`, `netstat`, `find`) as this temporal relationship is a strong indicator of malicious intent."
            ]
          },
          {
            "description": "File modification, deletion, or rename events are observed targeting critical log files in directories like /var/log, originating from an unexpected process or occurring at a statistically unusual frequency.",
            "data_sources": [
              "Auditd unlink/truncate/rename syscall",
              "Sysmon for Linux Event ID 11",
              "Sysmon for Linux Event ID 23",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log directories on critical servers (/var/log, /var/run/), User home directories (for .*_history files), Network gateway for traffic correlation",
            "action": [
              "Create a correlation rule that triggers an alert if a file deletion or truncation event (e.g., Sysmon EID 23, auditd `unlink`) targets a path matching `/var/log/*` or `.*_history` AND the initiating process name is not on an allowlist of known log management utilities (e.g., `logrotate`, `journald`). Further enrich by correlating with network logs (Zeek conn.log) to see if the process has an active connection to an external, low-reputation IP address.",
              "For each host, compute a 30-day baseline (hourly moving average and standard deviation) for file deletion/modification events within `/var/log/`. Alert if the current hour's event count exceeds 3 standard deviations above the average, after excluding events from known log rotation processes and scheduled tasks.",
              "Implement a multivariate time-series anomaly detection model (e.g., VAR) that monitors the volume of file modifications, deletions, and creations in log directories simultaneously. Train the model to understand the normal relationships between these activities (e.g., log rotation involves creation and deletion). An alert is generated when the observed relationship between these metrics deviates significantly from the forecasted model, indicating tampering rather than routine maintenance."
            ]
          },
          {
            "description": "A command execution or system call is observed that stops, disables, or kills a critical logging service (e.g., auditd, rsyslogd), and the event is not correlated with a scheduled maintenance event.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Auditd execve/kill syscall",
              "systemd journal logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux and macOS endpoints and servers, Change management database/ticketing system",
            "action": [
              "Trigger a high-severity alert upon the execution of commands that stop or disable logging daemons, such as `systemctl stop auditd`, `service rsyslog stop`, `launchctl unload com.apple.syslogd`, or a `kill` command targeting the PID of a known logging process (e.g., `auditd`, `rsyslogd`). Correlate the event timestamp with a change management database API to suppress alerts associated with approved changes.",
              "Establish a baseline for the daily frequency of logging service stop/restart events per host over a 90-day period. Flag any host that exhibits a count of these events in the top 1% (99th percentile) across the enterprise, as this indicates an outlier with abnormal service instability or tampering.",
              "Analyze logging agent heartbeat data, where each agent reports its status every minute. Use an LSTM-based predictor to forecast the next expected heartbeat time for each agent. An alert is triggered if a heartbeat is not received within a dynamically calculated tolerance window (e.g., predicted time + 3 times the model's prediction error), indicating the service is down unexpectedly and potentially due to malicious intervention."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]