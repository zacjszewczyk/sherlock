[
  {
    "information_requirement": "Is the adversary establishing persistence by exploiting executable installer file permissions weakness?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write or creation event targeting a registered service's executable path occurs within 60 seconds of a service start event, followed by the service process spawning an anomalous child process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 7036",
              "Sysmon Event 1",
              "Sysmon Event 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Security, System, and Sysmon event logs from all Windows servers and workstations, particularly those running critical services.",
            "action": [
              "Create a detection rule that triggers when a file creation/write event (Sysmon Event 11 or Windows Event ID 4663) on a known service's executable path is followed within 60 seconds by a service start event (Windows Event ID 7036) and a subsequent process creation (Sysmon Event 1 or Windows Event ID 4688) where the child process is a command interpreter (cmd.exe, powershell.exe).",
              "For each service process, establish a statistical baseline of its legitimate child processes and their command-line arguments. Calculate the Shannon entropy of command lines for any newly observed child processes. Generate an alert if a service spawns a child process with a command-line entropy score exceeding the 95th percentile for that parent service, indicating potential obfuscation.",
              "Deploy a sequence-based anomaly detection model (e.g., LSTM Autoencoder) trained on event triplets (file write, service start, process create) for each host. Flag any event sequence with a high reconstruction error as anomalous, indicating a potential service hijack for persistence."
            ]
          },
          {
            "description": "A service process, whose executable was recently modified, spawns a rare child process or initiates an external network connection inconsistent with its established baseline behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Sysmon Event 1",
              "Sysmon Event 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Host-based process creation and network event logs (Windows Event Log, Sysmon) from endpoints and servers, correlated with network flow data (Zeek) from network security monitoring sensors.",
            "action": [
              "Create a detection rule that alerts when a process associated with a Windows Service spawns a known command shell (e.g., cmd.exe, powershell.exe) or initiates a network connection (Sysmon Event 3) to an IP address or domain on a threat intelligence feed.",
              "For each service process, profile its typical network behavior (e.g., destination ports, data volume, connection frequency) using Sysmon Event 3 and Zeek conn.log data. Generate an alert if a service's network activity deviates significantly, such as connecting to a port in the 99th percentile of rarity for that service or transmitting an outbound data volume 3 standard deviations above its daily average.",
              "Develop and apply a time-series forecasting model (e.g., ARIMA, Prophet) for the network data volume generated by each critical service process. Generate an alert when the observed traffic volume significantly exceeds the forecasted confidence interval, suggesting anomalous C2 communication or data staging."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges using executable installer file permissions weakness?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file is written to an executable path (.exe, .dll) by a process running with a Low or Medium integrity level, and within a short time window, that same executable is executed by a new process running with a High or System integrity level.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event 1",
              "Sysmon Event 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system and process creation logs from temporary directories (e.g., %TEMP%, %APPDATA%, C:\\ProgramData), user-writable profile directories, and application installation folders on all Windows endpoints.",
            "action": [
              "Create a correlation rule that triggers when a file creation event (Sysmon Event 11) for an executable, initiated by a process with 'IntegrityLevel: Medium' or 'Low', is followed within 5 minutes by a process creation event (Sysmon Event 1) for the same file path where the new process has 'IntegrityLevel: High' or 'System'.",
              "Continuously monitor process creation events (Sysmon Event 1). Calculate the enterprise-wide frequency of executables in user-writable locations (e.g., 'C:\\Users\\*') being executed with 'IntegrityLevel: System'. Alert when an executable from such a location runs with System integrity and this specific execution path is statistically rare (e.g., has occurred fewer than 5 times in the last 90 days).",
              "Implement a graph-based anomaly detection model on process-file interactions, where nodes are processes/files and edges are actions (write, execute). Flag any graph path representing 'Low/Medium Integrity Process -> Writes -> File -> Executed by -> High/System Integrity Process' as a high-risk anomaly, especially if this specific sequence is novel to the environment."
            ]
          },
          {
            "description": "A process creation event is observed where the user context is a privileged account (e.g., 'NT AUTHORITY\\SYSTEM') but the executable's image path points to a non-standard, user-writable directory (e.g., a subdirectory of C:\\Users\\, C:\\ProgramData, or %TEMP%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs (Sysmon, Windows Event Log) from all endpoints, with a focus on filtering for executions originating from user-writable and temporary directories such as C:\\Users, C:\\ProgramData, and C:\\Windows\\Temp.",
            "action": [
              "Create a high-severity alert for any process creation event (Sysmon Event 1) where the 'User' field is 'NT AUTHORITY\\SYSTEM' and the 'Image' path starts with 'C:\\Users\\', 'C:\\ProgramData', 'C:\\PerfLogs', or contains '\\AppData\\', excluding known good software installers or updaters.",
              "Establish a baseline of all execution paths for processes running as 'NT AUTHORITY\\SYSTEM'. Calculate the rarity of each execution path across the enterprise over a 30-day period. Generate an alert when a SYSTEM process executes from a path that falls in the bottom 1st percentile of historical frequency, indicating a highly unusual location.",
              "Employ a clustering algorithm (e.g., DBSCAN) on features from SYSTEM-level process executions, including image path, parent process image path, and command-line arguments. Identify and label clusters of normal behavior. Flag any new execution that is classified as an outlier (noise) as a potential privilege escalation event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking trusted executables through file permission weaknesses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event modifies a known, digitally signed executable in a protected directory (e.g., C:\\Program Files\\, C:\\Windows\\System32), and the new file's signature is invalid, absent, or from an untrusted publisher.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event 7",
              "Sysmon Event 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs and Sysmon logs from protected system and application directories (e.g., 'Program Files', 'Windows\\System32') on all endpoints and servers.",
            "action": [
              "Create a detection rule that joins file creation events (Sysmon Event 11) with image load events (Sysmon Event 7). Alert when an executable in a protected path is modified and subsequent loads of that executable show its 'SignatureStatus' as 'Invalid', 'Unsigned', or the 'Signature' field does not match an established allowlist of trusted publishers.",
              "Maintain a statistical baseline of all software publishers observed in the environment via Sysmon logs. For any file modification event on a signed executable, calculate the prevalence of the new file's publisher across the enterprise. Flag modifications signed by a publisher seen on fewer than 0.1% of endpoints as suspicious.",
              "Train a classification model (e.g., Random Forest) to differentiate between legitimate software updates and suspicious file modifications. Use features such as the source process (e.g., 'msiexec.exe', 'trustedinstaller.exe'), time of day, file path, and signature status change. A 'suspicious modification' classification on a critical system file should trigger a high-severity alert."
            ]
          },
          {
            "description": "A core service host process (e.g., 'services.exe', 'svchost.exe') spawns a child process that is a command-line interpreter, a scripting engine, or is otherwise not part of its established baseline of legitimate child processes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs (Sysmon, Windows Event Log) from all Windows hosts, especially Domain Controllers and critical Application Servers where services are a primary function.",
            "action": [
              "Create a detection rule to alert on any process creation event (Sysmon Event 1) where the 'ParentImage' is 'C:\\Windows\\System32\\services.exe' or 'C:\\Windows\\System32\\svchost.exe' and the child 'Image' is 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or 'rundll32.exe'.",
              "For each critical parent process (e.g., 'svchost.exe'), build a frequency table of all its historical child process names. Generate an alert when a child process is spawned that has never been observed before or falls within the lowest 1st percentile of historical frequency for that specific parent.",
              "Train a Parent-Child process relationship model using a graph neural network. The model learns the normal process graph of the operating system. Alert when a new edge (representing a new parent-child relationship) is created that the model flags as a high-probability anomaly, particularly if the parent is a trusted service host and the child is an interpreter."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]