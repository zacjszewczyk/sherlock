[
  {
    "information_requirement": "Has the adversary executed code via Windows service manipulation? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1569.002",
        "name": "Service Execution",
        "evidence": [
          {
            "description": "A new service is installed (Windows Event ID 7045 or 4697) where the service name, executable path, or a cryptographic hash of the service binary matches a known-bad indicator from threat intelligence feeds or an internal watchlist.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers and high-value asset servers.",
            "action": [
              "Upon a service installation event (Windows Event ID 7045/4697), extract the 'Service Name' and 'Service File Name' fields. Calculate the SHA256 hash of the file specified in 'Service File Name'. Compare the service name, full file path, and file hash against curated threat intelligence lists of known malicious indicators. Generate an alert on any match.",
              "For each new service name from Event ID 7045/4697, calculate its Shannon entropy. Maintain a statistical baseline of entropy scores for all legitimate service names observed over the last 90 days. Generate an alert for any new service name with an entropy score that exceeds the 98th percentile of the established baseline, indicating a high probability of being randomly generated.",
              "Develop and train a logistic regression model to classify new service installations as benign or malicious. Use features such as: service name entropy, service name length, whether the executable path is in a standard system directory, the prevalence of the executable's hash across the enterprise, and whether the executable is digitally signed. Continuously score new service installation events and alert on any service classified as malicious with a confidence score above 0.9."
            ]
          },
          {
            "description": "A command-line process creation event (Windows Event ID 4688) shows the execution of 'sc.exe', 'powershell.exe' (with cmdlets like New-Service, Set-Service), or 'net.exe' with arguments that create or modify a service to execute a payload from a non-standard, user-writable, or remote network location (UNC path).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially administrative jump boxes and management servers where such commands are more likely to be run.",
            "action": [
              "Create a detection rule that monitors process creation events (Windows Event ID 4688 with command-line logging enabled) for process names 'sc.exe', 'powershell.exe', or 'net.exe'. Use regular expressions to flag command lines containing ('create' or 'config' with 'binPath=') or ('New-Service', 'Set-Service' with '-BinaryPathName') pointing to non-standard directories (e.g., 'C:\\Users\\', 'C:\\ProgramData\\', '%TEMP%', '\\\\*\\*'). Also flag obfuscated PowerShell commands ('-enc', '-e') used in conjunction with service management cmdlets.",
              "For all service modification commands, parse the binary path ('binPath=' or '-BinaryPathName'). Build a frequency table of all parent directories used for service executables across the environment over a 30-day rolling window. Alert when a command specifies a binary path in a parent directory that falls below the 5th percentile of frequency, indicating an atypically rare location for a service.",
              "Utilize a clustering algorithm like DBSCAN on vectorized command-line executions of 'sc.exe' and 'powershell.exe'. Extract features such as: argument count, specific argument keywords (e.g., 'create', 'config', 'delete', 'start', 'stop'), command-line length, and characteristics of file paths used (e.g., depth, location type). Identify and investigate clusters of commands that are flagged as outliers and do not group with known, benign administrative activity."
            ]
          },
          {
            "description": "A sequence of service-related events occurs on a single host for the same service name: service creation (Windows Event ID 7045/4697), followed by service start (Event ID 7036 'running'), and then service stop (Event ID 7036 'stopped') or deletion, all within a short time window (e.g., less than 15 minutes). This is characteristic of remote administration tools like PsExec.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7036",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized log aggregators (SIEM) capable of correlating events from all Windows hosts. All Windows servers, especially those within the same network segment, to detect lateral movement.",
            "action": [
              "Implement a stateful correlation rule in the SIEM. For a unique combination of Hostname and Service Name, trigger an alert if the following sequence occurs within a 15-minute window: [Event ID 7045 OR 4697 (Create)] -> [Event ID 7036 with State='running'] -> [Event ID 7036 with State='stopped']. Assign a higher priority if the Service Name matches known patterns like 'PSEXESVC' or a randomly generated string.",
              "For all services that are created and subsequently stopped, calculate the total lifespan (time delta between creation and stop events). Maintain a historical distribution of service lifespans across the enterprise. Flag any service whose lifespan is a statistical outlier, for example, falling below the 1st percentile of all observed service lifespans, suggesting transient execution rather than persistent service behavior.",
              "For each host, create a time series of ephemeral service installation counts (services with a lifespan < 15 minutes) aggregated into 1-hour buckets. Apply a time-series anomaly detection model (e.g., SARIMA) to this data stream. Generate an alert when the model detects a statistically significant spike in the count of ephemeral services, which could indicate a lateral movement tool being used on or from the host."
            ]
          },
          {
            "description": "A process running under the context of the Service Control Manager (e.g., services.exe) or a known service executable (e.g., svchost.exe) spawns a child process (Windows Event ID 4688) that is inconsistent with its established baseline of behavior, such as spawning an interactive shell (cmd.exe, powershell.exe) or a network utility (net.exe, whoami.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers. Analysis requires process lineage data, typically collected via EDR or enhanced logging (like Sysmon) and aggregated in a SIEM/data lake.",
            "action": [
              "Monitor process creation events (Windows Event ID 4688). Create a high-priority alert if a process whose parent is 'services.exe' or has a path ending in 'svchost.exe' spawns a child process from a watchlist of suspicious executables (e.g., 'cmd.exe', 'powershell.exe', 'net.exe', 'whoami.exe', 'certutil.exe', 'rundll32.exe').",
              "Over a 30-day learning period, build a baseline of all unique parent-child process relationships for every service executable. For each parent process, calculate the frequency of each unique child process it spawns. After the baseline period, generate an alert for any newly observed parent-child relationship or any relationship where the child process is statistically rare (e.g., frequency < 1%) for that specific parent.",
              "Model process execution events as a directed graph where nodes are processes and edges represent parent-child relationships. Train a graph-based anomaly detection model on a baseline of normal process activity. Use the trained model to score new process creation events in real-time, identifying anomalous edges (a service spawning an unexpected child) that deviate from the learned normal behavior."
            ]
          },
          {
            "description": "A service is created or modified (Windows Event ID 7045, 4697) where the 'Service File Name' (executable path) points to a directory that is user-writable by default (e.g., C:\\Users, C:\\ProgramData, C:\\PerfLogs, %APPDATA%, %TEMP%) rather than a protected system directory (e.g., C:\\Windows\\System32, C:\\Program Files).",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, particularly multi-user systems like Remote Desktop Session Hosts.",
            "action": [
              "For every service creation/modification event (Windows Event ID 7045, 4697), parse the 'Service File Name' field. Use a regular expression to match against a list of unauthorized directory paths, including 'C:\\Users\\', 'C:\\ProgramData', 'C:\\Perflogs', 'C:\\Windows\\Temp\\', '\\AppData\\', '\\Temp\\'. Generate an alert for any match.",
              "Enumerate all service executable paths from events 7045 and 4697 across the enterprise. Create a frequency count for each parent directory that hosts a service executable. Any new service installed in a parent directory that is statistically rare (e.g., in the bottom 5% of all observed directories) or has never been seen before should be flagged for investigation.",
              "Train a decision tree classifier to predict if a service path is suspicious. Features can include: path depth, presence of keywords like 'Users' or 'Temp', whether the directory is user-writable, whether the executable is digitally signed, and the historical prevalence of the path's parent directory. Use the classifier to score all new service installations for risk and alert on those classified as suspicious."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]