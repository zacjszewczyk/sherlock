[
  {
    "information_requirement": "Has an adversary escalated privileges by injecting code into a higher-privilege process using the /proc filesystem?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.009",
        "name": "Proc Memory",
        "evidence": [
          {
            "description": "A low-privilege process or user writes to the memory map file (`/proc/[pid]/mem` or `/proc/[pid]/maps`) of a high-privilege process (e.g., a process running as root), and shortly after, the target process spawns a shell or initiates an outbound network connection.",
            "data_sources": [
              "Linux Auditd logs",
              "Sysmon for Linux Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux servers (e.g., database servers, web servers), Crown Jewel application hosts, Kubernetes nodes",
            "action": [
              "Create a rule that triggers an alert when a Linux Auditd log shows a `write` syscall event where the file path is `/proc/[0-9]*/mem` or `/proc/[0-9]*/maps`, the process effective user ID (euid) is not 0 (not root), and the target process's owner is root. Correlate this with a subsequent process creation (Sysmon for Linux Event ID 1) of `/bin/sh`, `/bin/bash`, or `nc` by the target process ID within 60 seconds.",
              "For each process, establish a baseline of file write activity using Auditd logs. Calculate the rarity of writes to files within the `/proc/` filesystem. Profile the parent-child process relationships seen in Sysmon for Linux Event ID 1 logs. Flag any instance where a process writes to `/proc/[pid]/mem` (a statistically rare event, >99th percentile of file write paths) and the target PID subsequently spawns a child process that is rare for that parent (e.g., a web server process spawning `bash`).",
              "Train a sequence analysis model (e.g., Hidden Markov Model) on syscall sequences from benign processes. Features should include syscall numbers and file paths accessed. Monitor for anomalous sequences, such as a low-privilege process performing `open` on `/proc/[pid]/maps`, followed by `lseek` and `write` to `/proc/[pid]/mem`, followed by the target PID executing a `connect` syscall. A sequence with a very low probability under the benign model indicates likely injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by executing malicious code within the memory space of a legitimate Linux process?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.009",
        "name": "Proc Memory",
        "evidence": [
          {
            "description": "The `dd` utility is executed with `/proc/[pid]/mem` or `/proc/[pid]/maps` as an input or output file, which is highly indicative of process memory manipulation, and is followed by anomalous network traffic from the target process.",
            "data_sources": [
              "Linux Auditd logs",
              "Sysmon for Linux Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux endpoints and servers, especially those running custom or sensitive applications, DNS resolvers",
            "action": [
              "Create an alert for any process creation event (Sysmon for Linux Event ID 1 or Auditd `execve` syscall) where the process name is `dd` and the command line arguments contain `/proc/` and (`mem` or `maps`). Correlate this with subsequent outbound network connections (Zeek conn.log) from the host to an IP address present on a known C2 threat intelligence list within 5 minutes.",
              "Establish a baseline for the command-line arguments used with `dd` across the environment. Calculate the frequency of arguments containing `/proc/`. An execution of `dd` with `/proc/` in its arguments is a high-rarity event (>99.9th percentile) and should be flagged. Further increase the risk score if the process ID targeted by the `dd` command subsequently initiates network traffic to a destination IP address in the 99th percentile of rarity for that host.",
              "Use a clustering algorithm (e.g., DBSCAN) on Zeek conn.log data to identify normal patterns of network communication (e.g., clusters of traffic to update servers, internal servers). After a suspicious `dd` execution targeting a process is detected, analyze the subsequent network traffic from that process. If the traffic does not belong to any established cluster (i.e., it is classified as a noise outlier), flag it as anomalous C2 communication."
            ]
          },
          {
            "description": "A process, after being targeted by a write to its `/proc` memory space, exhibits behavior inconsistent with its normal function, such as opening new listening ports, reading sensitive files, or spawning unusual child processes.",
            "data_sources": [
              "Linux Auditd logs",
              "Sysmon for Linux Event ID 1",
              "Sysmon for Linux Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, developer workstations, systems with access to sensitive data repositories",
            "action": [
              "Trigger an alert if a process that was the target of a `write` to `/proc/[pid]/mem` (identified via Auditd) subsequently spawns a child process known for reverse shells (e.g., `bash -i`, `python -c 'import socket...'`, `perl -e '...'`) or initiates a network connection (Sysmon for Linux Event ID 3) to a non-RFC1918 address.",
              "For each critical process (e.g., `sshd`, `nginx`, `mysqld`), build a profile of normal behavior, including files typically read (from Auditd `openat` logs) and child processes spawned (from Sysmon for Linux Event ID 1). Following a suspected memory write to that process, calculate an anomaly score based on deviations from this profile. For example, assign a high score if the process reads from `/etc/shadow` or spawns `gdb`, where these actions have a historical frequency of zero for that process.",
              "Train a one-class SVM model on benign syscall traces for specific, legitimate long-running processes (e.g., web server daemons, database services). Feed real-time syscall data for these processes into the model. An event classified as an outlier, particularly after a write to the process's `/proc` memory space, indicates a significant behavioral change potentially caused by code injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]