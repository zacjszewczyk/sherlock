[
  {
    "information_requirement": "Is the adversary maintaining persistence by loading a malicious AppInit DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.010",
        "name": "AppInit DLLs",
        "evidence": [
          {
            "description": "A modification to the HKLM\\Software\\...\\Windows\\AppInit_DLLs registry value references a DLL whose SHA256 file hash is present on a threat intelligence feed of known malicious indicators.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows workstations and servers; Threat Intelligence Platform data",
            "action": [
              "Symbolic Logic: Create a rule that triggers on a registry value modification (Windows Event ID 4657 or Sysmon Event ID 13) for the `AppInit_DLLs` key. From the event, extract the full path of the DLL. On the endpoint, calculate the SHA256 hash of the DLL file. Query your threat intelligence database for this hash. An exact match constitutes a high-confidence alert.",
              "Statistical Analysis: For all DLLs added to the AppInit_DLLs value, analyze the reputation of the signer certificate (if present). Establish a baseline of common signers (e.g., 'Microsoft Corporation'). Alert if a DLL is added that is either unsigned or signed by a principal whose prevalence is in the bottom 5th percentile across the enterprise, indicating a rare or untrusted publisher.",
              "Machine Learning: Train a random forest classifier to predict if a DLL added to AppInit_DLLs is malicious. Features should include: file path string entropy, rarity of the parent directory, whether the DLL is digitally signed, reputation of the signer, and a boolean flag indicating if the file hash is present in a CTI feed. Use the model's output probability score to triage events, flagging those with a 'malicious' probability > 0.8 for immediate review."
            ]
          },
          {
            "description": "The AppInit_DLLs registry value is modified to contain a file path pointing to a directory not used for legitimate application installations, such as a user profile folder (C:\\Users\\), temporary directory (C:\\Windows\\Temp\\), or a public-writable location (C:\\ProgramData).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, specifically user profile directories, temporary file system locations, and public-writable folders",
            "action": [
              "Symbolic Logic: Create a detection rule that triggers on any modification to the `AppInit_DLLs` value (Windows Event ID 4657 or Sysmon Event ID 13) where the new path string contains `C:\\Users\\`, `C:\\Windows\\Temp\\`, `\\AppData\\`, `C:\\ProgramData\\`, or matches a UNC path format (`\\\\*\\*`).",
              "Statistical Analysis: Calculate the path depth (number of directory levels) for all DLLs added to the `AppInit_DLLs` value. Establish a baseline distribution of path depths for legitimate DLLs (e.g., `C:\\Program Files\\...` often has a depth of 3-5). Alert on any new path with a depth that is a statistical outlier (e.g., > 2 standard deviations from the mean), which could indicate a file dropped in an unusually shallow or deep location.",
              "Machine Learning: Use a clustering algorithm like DBSCAN on feature vectors derived from the file paths added to `AppInit_DLLs`. Features should include path depth, path string entropy, and one-hot encoded vectors for the presence of keywords like 'Temp', 'Users', or 'ProgramData'. Investigate paths that are classified as noise or belong to very small clusters, as they do not conform to the common patterns of legitimate software."
            ]
          },
          {
            "description": "A sequence of events occurs on a host where the AppInit_DLLs registry key is modified, followed by a common GUI process (e.g., explorer.exe) spawning unexpected child processes (e.g., cmd.exe) or initiating network connections to new or rare destinations.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, Network Gateway, DNS servers",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a modification to `AppInit_DLLs` (Sysmon Event ID 13) is followed within 5 minutes on the same host by a process like `explorer.exe` or `outlook.exe` spawning `cmd.exe`, `powershell.exe`, or `rundll32.exe` (Sysmon Event ID 1), or initiating an external network connection (Sysmon Event ID 3) to an IP address with a low reputation score.",
              "Statistical Analysis: After an `AppInit_DLLs` modification, monitor the DNS queries (Zeek dns.log) originating from that host. Calculate the Jaccard similarity between the set of domains queried in the 24 hours post-modification and the set of domains queried in the 30 days prior. A similarity score below a threshold (e.g., 0.1) indicates a significant shift in DNS activity and a potential C2 channel.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., an LSTM autoencoder) trained on a multivariate time series of host behaviors (e.g., process creation rate, network connection rate, DNS query rate). After an `AppInit_DLLs` modification event, feed the subsequent host telemetry into the model. A high reconstruction error indicates a behavioral anomaly potentially caused by the malicious DLL, warranting investigation."
            ]
          },
          {
            "description": "The 'RequireSignedAppInit_DLLs' security setting (HKLM\\...\\Windows\\RequireSignedAppInit_DLLs) is modified to '0' (disabled), especially within a short time window of a modification to the 'AppInit_DLLs' value itself.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows endpoints and servers, particularly those running Windows 8 or newer with Secure Boot enabled",
            "action": [
              "Symbolic Logic: Create a critical-severity alert for any modification to the registry value `HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\RequireSignedAppInit_DLLs` (Sysmon Event ID 13) where the new DWORD value is `0x00000000`. This action is inherently suspicious and represents a direct attempt to weaken a security control.",
              "Statistical Analysis: Track the count of modifications to `RequireSignedAppInit_DLLs` per host over a 90-day period. Since this value should be static and managed by policy, any modification is a high-confidence anomaly. Generate an alert for any host where the modification count is greater than 0, unless it correlates with an authorized change request.",
              "Machine Learning: Use a sequence mining algorithm to detect the specific state transition of (`Event: 'RequireSignedAppInit_DLLs' set to 0`, `Host: X`) followed by (`Event: 'AppInit_DLLs' modified`, `Host: X`) within a 1-hour window. This specific two-event sequence is a strong indicator of a deliberate, multi-step attack and can be modeled as a high-risk pattern for automated detection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges through the loading of a malicious AppInit DLL?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.010",
        "name": "AppInit DLLs",
        "evidence": [
          {
            "description": "A DLL file referenced by a new AppInit_DLLs registry entry is identified by its hash, name, or imported functions as a known privilege escalation tool (e.g., a component of Mimikatz or a UAC bypass tool).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers; Threat Intelligence Platform data containing toolmarks for privilege escalation malware",
            "action": [
              "Symbolic Logic: Upon an `AppInit_DLLs` modification (Sysmon Event ID 13), hash the specified DLL (Sysmon Event ID 11). Correlate the hash and filename against a threat intelligence database specifically tagged with 'privilege-escalation' tools or malware families. An exact match is a critical alert.",
              "Statistical Analysis: Maintain an enterprise-wide baseline of all DLLs loaded via AppInit. If a DLL is added to the key on a host, and that DLL has never been seen in any AppInit_DLLs key across the entire environment before (first occurrence), flag the event. The first-seen status is a strong statistical indicator of anomalous activity.",
              "Machine Learning: Train a gradient boosting classifier to identify privilege escalation DLLs. Features should include PE import hash (imphash), presence of specific imported functions (e.g., `LsaEnumerateLogonSessions`, `CreateProcessWithTokenW`, `DuplicateTokenEx`), file entropy, and file size. When a new DLL is added to `AppInit_DLLs`, analyze it with the classifier to get a 'privesc-tool' probability score."
            ]
          },
          {
            "description": "A process running with standard user privileges (Medium Integrity) modifies the AppInit_DLLs key, and shortly thereafter, a new process is created on the same system with an elevated security token or High/System integrity level.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially multi-user systems like terminal servers",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when: 1) A modification to `AppInit_DLLs` (Sysmon Event ID 13) is performed by a process running at `IntegrityLevel: Medium`. 2) Within 5 minutes on the same host, a new process is created (Sysmon Event ID 1) that is known to load user32.dll (e.g., `mmc.exe`, `taskmgr.exe`) and has an `IntegrityLevel` of `High` or `System`.",
              "Statistical Analysis: For each user account, establish a baseline for the rate of elevated process creation (child process integrity > parent process integrity). After an `AppInit_DLLs` modification is attributed to a user-level process, monitor for a statistically significant spike (e.g., > 3 standard deviations above their personal baseline, or any occurrence if their baseline is zero) in the rate of integrity level jumps on the affected host.",
              "Machine Learning: Use a graph-based anomaly detection model where nodes represent processes (with attributes like user and integrity level) and edges represent actions (registry modify, process create). A path in the graph showing `(Process A, User X, Integrity: Medium) -> Modifies AppInit_DLLs -> Starts -> (Process B, User X, Integrity: High)` represents a potential privilege escalation chain. Apply algorithms like PageRank or centrality to score the risk of such paths."
            ]
          },
          {
            "description": "A privileged process (e.g. running as SYSTEM), launched after an AppInit DLL is registered, performs actions inconsistent with its established baseline, such as accessing the LSASS process, modifying account databases, or making external network connections.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1",
              "Sysmon Event ID 10",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Core Windows Servers, Network Gateway",
            "action": [
              "Symbolic Logic: After an `AppInit_DLLs` modification (Sysmon Event ID 13), trigger focused monitoring. Alert if any process running as NT AUTHORITY\\SYSTEM subsequently accesses the LSASS process memory (Sysmon Event ID 10 with TargetImage `lsass.exe` and GrantedAccess `0x1010` or `0x1410`), spawns a command shell (Sysmon Event ID 1), or communicates with an external IP address not on an allowlist (Zeek conn.log).",
              "Statistical Analysis: For critical privileged processes (`lsass.exe`, `services.exe`), create a behavioral baseline of normal activity (e.g., typical child processes, loaded modules, network destinations). Following an `AppInit_DLLs` modification, compare the behavior of newly started privileged processes against this baseline. Use a multi-metric scoring system where deviations (e.g., a child process in the bottom 1% of frequency, network traffic volume > 3 standard deviations from the norm) contribute to a risk score.",
              "Machine Learning: Train an autoencoder on benign process telemetry (e.g., vectors of parent-child relationships, network connection tuples, loaded DLLs) for privileged processes. After an `AppInit_DLLs` modification, feed telemetry from newly started privileged processes on that host into the trained autoencoder. A high reconstruction error indicates the process behavior is anomalous and does not match the learned pattern of benign activity, suggesting malicious code injection."
            ]
          },
          {
            "description": "A process, whose creation is temporally linked to a suspicious AppInit DLL modification, spawns a child process with a higher integrity level (e.g., Medium to High) than the parent process.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers",
            "action": [
              "Symbolic Logic: Create a rule to detect when a process creation event (Sysmon Event ID 1) shows a `ParentIntegrityLevel` of `Medium` and an `IntegrityLevel` of `High` or `System`. Increase the alert's severity if this event is correlated with an `AppInit_DLLs` modification (Sysmon Event ID 13) within the last hour on the same host.",
              "Statistical Analysis: For each parent process name (e.g., `explorer.exe`), track the frequency distribution of its child processes' integrity levels across the enterprise. Following an `AppInit_DLLs` modification, if `explorer.exe` on the affected host spawns a child process with an integrity level that is statistically rare for that parent (e.g., 'System' integrity, which might be in the 0.01th percentile), flag it as a potential UAC bypass or escalation.",
              "Machine Learning: Use a classification model (e.g., Logistic Regression) to predict the probability of an integrity level jump (`child_integrity > parent_integrity`). Features should include parent process name, parent user context, child process name, and a flag for recent `AppInit_DLLs` modification. If the model predicts a high probability of a jump, and one occurs, classify this event sequence as a high-risk privilege escalation attempt."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]