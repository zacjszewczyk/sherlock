[
  {
    "information_requirement": "Is the adversary compiling code on-host to evade standard defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.004",
        "name": "Compile After Delivery",
        "evidence": [
          {
            "description": "A file with a source code extension (e.g., .cs, .c, .cpp, .go) is written to a non-standard development location, or a newly created executable file's hash matches a known malicious signature from threat intelligence feeds.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 11 (FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile temporary directories (%APPDATA%, %TEMP%, Downloads), shared network drives, and web server directories, excluding designated software development project folders.",
            "action": [
              "Symbolic: Monitor file creation events (Sysmon Event ID 11) for files with extensions like .cs, .c, .cpp, .go in user-writable directories. Upon creation, hash the file and compare against a threat intelligence feed of known malicious source code. Similarly, for any newly created .exe files, compare their hash against known malicious executables.",
              "Statistical: Establish a baseline for each host profile (e.g., developer, HR, finance). For non-developer hosts, calculate the 30-day moving average and standard deviation of source code file creations. Alert if the daily count of new source code files exceeds three standard deviations from the average for that host profile.",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) to determine if a newly created executable is malicious. Use features such as file path entropy, the presence of source code in the same directory, parent process name, user context, and whether the file is digitally signed. Alert when the model classifies a new executable with a confidence score greater than 0.90."
            ]
          },
          {
            "description": "A compiler process (e.g., csc.exe, gcc.exe, MSBuild.exe, ilasm.exe) is executed with command-line arguments specifying a source file in a temporary or user-writable directory, an output path to a non-standard location, or is spawned by a process not associated with software development (e.g., Microsoft Office application, web browser).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (ProcessCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, User endpoints (especially non-developer workstations), and software development environments.",
            "action": [
              "Symbolic: Create a detection rule that monitors process creation events (Sysmon Event ID 1) for compiler processes (csc.exe, gcc.exe, etc.). Alert if the parent process is suspicious (e.g., winword.exe, excel.exe, outlook.exe, powershell.exe) or if the command line arguments reference input/output paths in temporary directories (e.g., /out:%TEMP%\\, /out:%PUBLIC%\\).",
              "Statistical: For each user, baseline normal compiler usage, including parent processes, common command-line argument patterns, and execution frequency. Calculate the Shannon entropy of the command-line arguments for each compiler execution. Alert if a compiler is launched by a parent process never before seen for that user, or if the argument entropy is in the top 5% (95th percentile) of all observed values for that user, indicating unusual complexity or obfuscation.",
              "Machine Learning: Use an anomaly detection model (e.g., Isolation Forest) on process execution events for compilers. Features should include the parent process name, user account, host name, and tokenized command-line arguments (e.g., using a bag-of-words approach on the arguments). Train the model on data from known developer workstations and alert on any compiler execution that the model flags as a significant outlier."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a short time window (e.g., under 5 minutes): 1) a source code file is created, 2) a compiler process is executed using that file, and 3) the resulting compiled binary is executed.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 11 (FileCreate)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Web application servers, CI/CD pipeline servers, and ephemeral or containerized environments.",
            "action": [
              "Symbolic: Implement a stateful detection rule that correlates events on a single host within a 5-minute window. Trigger an alert if the following sequence is observed: 1) Sysmon Event ID 11 (FileCreate) for a source code file; 2) Sysmon Event ID 1 (ProcessCreate) of a compiler where the command line references the source file path; 3) Sysmon Event ID 1 (ProcessCreate) where the executable path matches the compiler's output file.",
              "Statistical: For each host, calculate the time delta between a source code file write (Sysmon Event ID 11) and a compiler process execution (Sysmon Event ID 1) that references that file. Establish a baseline of these deltas for developer vs. non-developer hosts. Alert if the time delta on a non-developer host is below the 5th percentile (e.g., < 10 seconds), suggesting automated, non-interactive behavior.",
              "Machine Learning: Train a sequence analysis model, such as a Recurrent Neural Network (RNN) or Hidden Markov Model (HMM), on streams of host events (file creations, process executions). The model learns the probability of transitions between states (e.g., 'write source', 'compile', 'execute binary'). Alert when the model identifies a sequence of events that has a high probability of matching a pre-defined malicious compilation chain."
            ]
          },
          {
            "description": "A process, identified as a newly compiled binary via its creation and execution chain, initiates an outbound network connection to a destination that is rare, untrusted, or has characteristics associated with command and control (C2) channels.",
            "data_sources": [
              "Sysmon Event ID 1 (ProcessCreate)",
              "Sysmon Event ID 3 (NetworkConnect)",
              "Sysmon Event ID 11 (FileCreate)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls/Gateways), DNS servers, Endpoint network stacks (via Sysmon), and cloud service provider flow logs.",
            "action": [
              "Symbolic: Correlate the ProcessGUID from a Sysmon Event ID 1 (execution of a newly compiled binary) with a Sysmon Event ID 3 (NetworkConnect) from the same ProcessGUID within 60 seconds. Enrich the destination IP from Zeek conn.log. Alert if the destination IP is on a threat intelligence blocklist or if the associated domain in Zeek dns.log is flagged by a DGA detection algorithm.",
              "Statistical: After identifying a newly compiled binary's execution, analyze its subsequent network activity (Sysmon Event ID 3, Zeek conn.log). Calculate the prevalence of the destination IP, destination port, and JA3/JA3S TLS fingerprint across the enterprise over the last 30 days. Alert if the connection uses a JA3/JA3S hash seen in less than 1% of connections or connects to a country not seen in the organization's traffic over the last 90 days.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., Seasonal-ARIMA) to forecast a host's expected outbound data volume and number of unique destination IPs. When a 'newly compiled binary executed' event occurs, monitor the host's network behavior for the next hour. Alert if the actual outbound traffic significantly deviates from the forecasted model, indicating a state change in network behavior caused by the new process."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]