[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by modifying file timestamps? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.006",
        "name": "Timestomp",
        "evidence": [
          {
            "description": "A file transferred over the network is identified as a known timestomping utility based on a direct match of its file hash (MD5, SHA1, SHA256) against a threat intelligence database.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Monitored network segments including internet gateways and traffic to/from DMZ.",
            "action": [
              "Continuously query Zeek files.log and http.log data. For each file transfer event, compare the `md5`, `sha1`, and `sha256` hash values against a curated threat intelligence feed of known timestomping tools. Generate a high-priority alert on any match.",
              "For each source host, establish a baseline of the daily count of executable file transfers (`is_exe`=true in files.log). Calculate the 95th percentile of this count over a 30-day rolling window. Trigger an alert if a host's daily executable transfer count exceeds this percentile, especially if the files are unsigned or transferred over non-standard ports.",
              "Train a supervised classification model (e.g., Logistic Regression or Gradient Boosting) using features from Zeek files.log, including `fuid`, `mime_type`, `is_exe`, file entropy, and the reputation of the source/destination IP. Deploy the model to score new file transfers in real-time, flagging files with a high probability score of being a 'malicious tool' for analyst investigation."
            ]
          },
          {
            "description": "A process creation event is observed on a host, where the command-line arguments contain syntax associated with native operating system utilities (e.g., PowerShell) or known third-party tools used to modify file timestamps.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly high-value assets like domain controllers and database servers.",
            "action": [
              "Create a detection rule that monitors process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for command lines matching regular expressions indicative of timestomping. Patterns include: `powershell.*(Get-Item|GI).*CreationTime\\s*=\\s*`, `powershell.*(Get-Item|GI).*LastWriteTime\\s*=\\s*`, `touch\\s+-r`, `touch\\s+-t`, and the execution of binaries like `timestomp.exe` or `nircmd.exe` with relevant arguments.",
              "For each host, calculate a baseline entropy score for command-line arguments from process creation events over a 30-day period. Alert when a new command's entropy score exceeds a dynamic threshold, such as 3 standard deviations above the host's historical mean entropy. Correlate high-entropy events with the presence of timestomping keywords (e.g., 'CreationTime', 'LastWriteTime') to increase confidence.",
              "Develop and deploy a command-line classifier (e.g., a Random Forest) trained on a large dataset of labeled benign and malicious command lines. Features should include n-grams, character distributions, command length, and entropy. Use the model to assign a risk score to each new process creation event, flagging high-risk commands that contain file modification syntax for immediate review."
            ]
          },
          {
            "description": "A file's creation or modification timestamp, as recorded in its metadata, is significantly older than the timestamp of the system event that logged the file's creation or write operation.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4663",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical file system directories on endpoints and servers (e.g., C:\\Windows\\System32, user profile directories), temporary directories, and network file shares.",
            "action": [
              "For each file creation or write event (Sysmon Event ID 11, Windows Event ID 4663), compare the file's `CreationTime` or `LastWriteTime` attribute with the `Event.Timestamp`. Generate an alert if `File.Timestamp < (Event.Timestamp - 5 minutes)` to identify backdating beyond a reasonable clock skew tolerance.",
              "For all file creation events, calculate the delta: `delta = Event.Timestamp - File.CreationTime`. Collect these deltas across the enterprise and analyze their distribution. Flag any event where the delta falls in an extreme lower percentile (e.g., 1st percentile), indicating the file's creation time is anomalously older than the event time.",
              "For each host, model the stream of `delta` values (calculated as `Event.Timestamp - File.CreationTime`) using a time-series anomaly detection algorithm (e.g., ARIMA). The model will learn the host's normal pattern of timestamp deltas. An alert is triggered when the model detects a significant negative anomaly, indicating a file was created with an unusually old timestamp."
            ]
          },
          {
            "description": "A mismatch is identified between a file's $STANDARD_INFORMATION ($SI) timestamp and its $FILE_NAME ($FN) timestamp within the same NTFS Master File Table (MFT) record.",
            "data_sources": [
              "EDR file system telemetry",
              "MFT Record Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "NTFS volumes on all Windows endpoints and servers.",
            "action": [
              "On-demand or via scheduled scan, use an EDR or forensic tool to query the MFT on target systems. Create a rule to alert for any file where the `$SI.CreationTime` does not equal `$FN.CreationTime` or `$SI.ModificationTime` does not equal `$FN.ModificationTime`. Prioritize alerts for executable files or files in user-writable directories.",
              "On a scheduled basis (e.g., daily), run a full MFT scan on critical systems. For each system, calculate the percentage of files with $SI/$FN timestamp mismatches. Establish a baseline for this metric over several weeks. Trigger an alert if a host's daily mismatch percentage shows a statistically significant increase (e.g., exceeds the 99th percentile of its historical values).",
              "Incorporate the binary feature `has_mft_timestamp_mismatch` into a host-level anomaly detection model. This feature, when combined with others like execution of unsigned code and anomalous network connections, can be used by an Unsupervised model (like an Isolation Forest) to score the overall risk of a host being compromised."
            ]
          },
          {
            "description": "A newly created file, typically an executable, has a set of MACE (Modification, Access, Creation, Entry) timestamps identical to those of a well-known, legitimate operating system file, suggesting timestamp cloning.",
            "data_sources": [
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories such as %APPDATA%, %TEMP%, %PUBLIC%, and C:\\ProgramData on all Windows endpoints and servers.",
            "action": [
              "Upon file creation (Sysmon Event ID 11), particularly for executables in user directories, query the environment for other files with the exact same `CreationTime` and `LastWriteTime`. If the new file shares timestamps with a large number of common system files (e.g., `kernel32.dll`) but has a different name and path, generate a high-severity alert.",
              "For each new file creation event, generate a hash of its full MACE timestamp vector. Maintain a frequency count of these timestamp hashes across the environment. A new file created with a timestamp hash that has an extremely high frequency (e.g., in the 99.9th percentile, matching thousands of other files) is a strong statistical indicator of timestamp cloning.",
              "Use a density-based clustering algorithm (e.g., DBSCAN) on newly created files, using their MACE timestamps as the feature vector. A new file that falls into a large, dense cluster of core OS files but has an anomalous path (e.g., `%APPDATA%`) or name can be identified as a high-confidence outlier, indicating likely timestamp cloning."
            ]
          },
          {
            "description": "A file exhibits illogical internal timestamps, such as a creation time that is more recent than its last modification time.",
            "data_sources": [
              "Sysmon Event ID 11",
              "MFT Record Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "NTFS volumes on all Windows endpoints and servers.",
            "action": [
              "Using data from file system monitoring (Sysmon Event ID 11) or periodic MFT scans, create a high-severity alert rule that triggers for any file where `CreationTime > LastWriteTime`. This is a strong, near-definitive indicator of manipulation.",
              "On a daily basis, scan file systems on critical hosts and count the number of files with inverted timestamps (`CreationTime > LastWriteTime`). Track this count as a time series for each host. An alert should be triggered if this count deviates significantly from zero or a known low baseline.",
              "Use the boolean feature `has_illogical_timestamp` as a critical input for a host-based risk scoring model. In a supervised model (e.g., XGBoost) trained to predict host compromise, this feature would likely receive a very high feature importance score, significantly elevating the host's risk when true."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]