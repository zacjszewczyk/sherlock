[
  {
    "information_requirement": "Is the adversary maintaining persistence using Image File Execution Options?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.012",
        "name": "Image File Execution Options Injection",
        "evidence": [
          {
            "description": "A 'Debugger' value within a registry key under 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\' is modified to an executable path whose file hash matches a known malicious hash, or the path matches a known malicious pattern (e.g., C:\\Users\\Public\\a.exe).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives and process execution logs on Domain Controllers, Critical Application Servers, and User Workstations",
            "action": [
              "Symbolic: Create a rule that triggers on Windows Event ID 4657 or Sysmon Event ID 13 where the 'TargetObject' or 'Object Name' matches 'HKLM\\SOFTWARE\\*\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\*\\Debugger'. Extract the 'New Value' (the executable path). Upon trigger, query for the file hash of the specified executable and compare it against a threat intelligence feed of known malicious file hashes. Generate a high-severity alert on any match.",
              "Statistical: Establish a historical baseline of all executable paths set as IFEO debuggers. For each new modification, analyze the path properties of the new executable. Calculate the character entropy of the filename and the depth of the directory path. Generate an alert if the filename entropy exceeds the 95th percentile of the baseline or if the path points to a directory (e.g., %APPDATA%, %TEMP%) with a statistically anomalous frequency (<1%) for debugger executables.",
              "Machine Learning: Train a Random Forest classification model to score IFEO registry modifications as 'benign' or 'malicious'. Use features such as: the name of the process that made the change (e.g., reg.exe, powershell.exe), the name of the parent process, the target executable name (e.g., notepad.exe), debugger executable path properties (length, entropy, location), and the signature status of the debugger executable. A high probability score from the model indicates a likely malicious persistence attempt."
            ]
          },
          {
            "description": "An IFEO 'Debugger' value for a legitimate Windows executable (e.g., notepad.exe, calc.exe, mspaint.exe) is modified to an executable located in a non-standard or user-writable directory (e.g., C:\\Users\\*, C:\\ProgramData\\*, C:\\Windows\\Temp\\*, C:\\Perflogs\\*).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives on all User Workstations and Terminal Servers",
            "action": [
              "Symbolic: Monitor Sysmon Event ID 13 for modifications where 'TargetObject' matches '*\\Image File Execution Options\\<watchlist_exe>\\Debugger' and the 'Details' (New Value) matches a pattern for user-writable directories like 'C:\\Users\\*', 'C:\\ProgramData\\*', or '*\\Temp\\*'. The watchlist should contain common, non-debugger-oriented applications (e.g., notepad.exe, mspaint.exe, calc.exe). Alert on any match.",
              "Statistical: For each application, establish a baseline of its known-good debugger paths (which may be empty). For each new IFEO modification, calculate the Levenshtein distance between the new debugger path string and the set of known-good paths for that application. A high distance score, exceeding the 99th percentile of historical modifications across all applications, indicates a suspicious and dissimilar path requiring investigation.",
              "Machine Learning: Use an Isolation Forest anomaly detection model on process creation events (Sysmon Event ID 1) that occur within minutes after an IFEO registry modification. Ingest features such as the parent process name, child process name, command line arguments, user context, and integrity level. The model flags anomalous process chains that deviate from normal behavior, which could indicate a malicious IFEO was triggered for persistence."
            ]
          },
          {
            "description": "The GFlags tool (gflags.exe) is executed with command-line arguments to enable a process debugger, such as '/i <ImageFileName> /p /enable'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Command-line execution logs on User Workstations, Administrator Workstations, and Software Development Environments",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688, Sysmon Event ID 1) where 'ProcessName' is 'gflags.exe' and the 'CommandLine' contains both '/i' and '/p /enable'. Correlate with the parent process; execution by non-system, non-admin, or non-developer-tool processes (e.g., 'winword.exe', 'outlook.exe') is highly suspicious and should trigger a critical alert.",
              "Statistical: Build a historical frequency distribution of 'gflags.exe' executions across the enterprise, baselined by user, parent process, and host. An execution by a user or from a parent process that is statistically rare (e.g., falls in the bottom 1% of historical frequency) should be flagged for review. Also, flag any combination of command-line arguments not seen in the last 90 days.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) to identify malicious 'gflags.exe' usage. Features should include the parent process name, the user context (e.g., SYSTEM, Administrator, standard user), the target image file name specified with '/i', and binary flags indicating the presence of specific arguments like '/p', '/enable', and '/debug'. The model output would be a risk score for the execution event."
            ]
          },
          {
            "description": "A legitimate Windows process (e.g., notepad.exe) spawns an anomalous child process, such as a command shell (cmd.exe, powershell.exe) or an executable from a suspicious location, which may subsequently initiate a network connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs on User Workstations and Application Servers; Network flow logs at Network Egress Points",
            "action": [
              "Symbolic: Create a rule to monitor process creation events (Sysmon Event ID 1) where a parent process from a watchlist of common applications (e.g., notepad.exe, mspaint.exe, calc.exe) spawns a child process of 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or any executable from a non-standard path. Correlate this with subsequent network connections (Zeek conn.log) from the child process to non-categorized or newly seen IP addresses.",
              "Statistical: Establish a baseline of normal parent-child process relationships from process creation logs. For every parent process, calculate the probability of each child process, P(Child | Parent). Alert on any observed parent-child pair where the probability is below a defined rarity threshold (e.g., <0.001%) or where the pair has never been seen before in the environment.",
              "Machine Learning: Use a graph-based anomaly detection model (e.g., using Graph Neural Networks) on process lineage data. Represent processes as nodes and parent-child relationships as edges, enriched with attributes like command lines and user context. The model learns normative process graph structures and can identify anomalous subgraphs, such as 'mspaint.exe' spawning 'powershell.exe' which then spawns 'rundll32.exe', indicating a potential IFEO trigger."
            ]
          },
          {
            "description": "A 'MonitorProcess' value is created or modified under a 'HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\<executable>' registry key, pointing to a potentially malicious monitoring application.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives on all endpoints and servers.",
            "action": [
              "Symbolic: Create a rule to trigger on Sysmon Event ID 13 where 'TargetObject' matches '*\\SilentProcessExit\\*' and the value name is 'MonitorProcess'. Extract the executable path from the 'Details' field, calculate its hash, and compare it against a threat intelligence database. An alert should also be generated if the path points to a script interpreter like 'powershell.exe' or 'wscript.exe'.",
              "Statistical: Baseline all executables for which Silent Process Exit monitoring is configured. Any modification that adds monitoring for a new executable, especially a common user application rather than a service, is statistically anomalous. Calculate the prevalence of the 'MonitorProcess' executable across the environment; if it is rare (e.g., present on <5 hosts), it warrants investigation.",
              "Machine Learning: Train a classification model to distinguish between legitimate and malicious Silent Process Exit configurations. Features can include the process that modified the registry, the target executable being monitored (e.g., 'svchost.exe' vs 'chrome.exe'), properties of the 'MonitorProcess' executable (path, signature, entropy), and the presence of other configured values like 'ReportingMode'."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary escalated privileges using Image File Execution Options?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.012",
        "name": "Image File Execution Options Injection",
        "evidence": [
          {
            "description": "The 'Debugger' value in the IFEO registry key for a high-integrity system process (e.g., services.exe, lsass.exe, consent.exe, csrss.exe) is modified to point to an executable whose file hash matches known privilege escalation tools.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives on Domain Controllers, Member Servers, and Privileged Access Workstations (PAWs)",
            "action": [
              "Symbolic: Monitor Sysmon Event ID 13 for modifications to 'Debugger' values under IFEO keys for a watchlist of high-integrity processes (e.g., services.exe, lsass.exe, winlogon.exe, consent.exe). Extract the debugger executable path, calculate its hash, and compare it against a threat intelligence feed, specifically flagging hashes associated with privilege escalation tools (e.g., Mimikatz, Juicy Potato). Generate a critical alert on any match.",
              "Statistical: For any IFEO modification targeting a high-integrity process, analyze the properties of the new debugger executable. Flag any executable that is unsigned or has a signature from an untrusted or newly observed publisher. Calculate the prevalence of the signer certificate's thumbprint across the environment; a signer seen on fewer than 0.1% of executables is statistically rare and highly suspicious in this context.",
              "Machine Learning: Train a binary classifier (e.g., Gradient Boosting) to predict the likelihood of a privilege escalation attempt based on an IFEO modification. Features should include: the target process name, the user context of the modifying process, properties of the new debugger executable (path, signature, entropy), and whether the target process typically runs as SYSTEM. A high probability score from the model triggers an alert for immediate investigation."
            ]
          },
          {
            "description": "The 'Debugger' value in the IFEO registry key for a known accessibility application (sethc.exe, utilman.exe, osk.exe, Magnify.exe, Narrator.exe) is modified to 'cmd.exe' or 'powershell.exe'.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives on all Windows Workstations and Servers, especially Remote Desktop Gateway and Terminal Servers",
            "action": [
              "Symbolic: Deploy a zero-tolerance rule to monitor Sysmon Event ID 13 for any modification to the 'Debugger' value within the IFEO keys for 'sethc.exe', 'utilman.exe', 'osk.exe', 'Magnify.exe', or 'Narrator.exe'. If the new value contains 'cmd.exe' or 'powershell.exe', generate an immediate critical-severity alert, as this is a definitive indicator of a privilege escalation backdoor.",
              "Statistical: Track the historical frequency of modifications to these specific accessibility IFEO keys. A non-zero count is a severe anomaly. Analyze the process that made the change (e.g., 'reg.exe'). The rarity of this specific registry modification (which should be near zero) combined with the rarity of the modifying process (if not a trusted installer) provides a statistical basis for a high-confidence alert.",
              "Machine Learning: Use a supervised learning model to classify the process responsible for modifying accessibility feature IFEO keys. Train the model with features like process name, parent process name, command line arguments, user context, and session ID to distinguish unauthorized modifications from legitimate system updates or software installations. The model should be trained to recognize known good updaters like 'TrustedInstaller.exe'."
            ]
          },
          {
            "description": "A process creation event is observed where an accessibility application (e.g., utilman.exe) running with SYSTEM integrity spawns a command shell (cmd.exe, powershell.exe) as a child process, often initiated from the logon screen.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all Windows Logon Interfaces (physical and RDP), Domain Controllers, and Terminal Servers; Network egress points",
            "action": [
              "Symbolic: Monitor process creation events (Sysmon Event ID 1). Generate a critical alert when a parent process of 'utilman.exe', 'sethc.exe', 'osk.exe', 'Magnify.exe', or 'Narrator.exe' spawns a child process of 'cmd.exe' or 'powershell.exe', and the parent process is running with 'NT AUTHORITY\\SYSTEM' integrity level. This is a direct indicator of an accessibility feature backdoor being used.",
              "Statistical: Establish a baseline of all child processes for accessibility applications. In a normal environment, these applications should not spawn any child processes. Any observed child process is a statistical anomaly with a near-zero probability. Correlate with logon events (Windows Event ID 4624, Logon Type 2, 3, or 10) on the same host to confirm activity at the logon screen.",
              "Machine Learning: Apply time-series anomaly detection to network traffic features from a host immediately following a suspected accessibility feature abuse event. Model features from Zeek logs, such as bytes out, number of unique destination IPs, protocol distribution (e.g., TCP, UDP, ICMP) from conn.log, and DNS query entropy and query-to-response size ratio from dns.log. A sudden spike in these metrics would indicate post-exploitation C2 activity."
            ]
          },
          {
            "description": "The 'Debugger' value for a high-integrity process is set to an executable that is either unsigned, has an invalid digital signature, or is located in a user-writable directory such as C:\\Users\\* or C:\\Windows\\Temp.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows System Registry Hives, file systems of critical servers and workstations, and image load logs",
            "action": [
              "Symbolic: Combine data from Sysmon Event ID 13 (Registry Set) and Sysmon Event ID 7 (Image Load). When an IFEO 'Debugger' value is set for a high-integrity process, use the executable path to find a corresponding Image Load event. Alert if the 'Signed' field is 'false' or the 'SignatureStatus' is anything other than 'Valid'. Also, alert if the path matches a pattern for user-writable directories ('C:\\Users\\*', 'C:\\ProgramData\\*', etc.).",
              "Statistical: Maintain a statistical baseline of the directory locations for all executables designated as debuggers across the enterprise. Calculate the frequency of each directory path used. A path with a frequency below a certain threshold (e.g., seen on < 1% of systems) when used for a high-integrity process's debugger is a statistical outlier and should be investigated.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to group endpoints based on their IFEO configurations. Create a feature vector for each host that includes the set of executables with debuggers, the paths of those debuggers, and their signature statuses (signed, unsigned, invalid). Hosts that are identified as noise or outliers by the algorithm may have unique, and therefore suspicious, IFEO configurations that warrant manual investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]