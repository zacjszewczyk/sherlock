[
  {
    "information_requirement": "Is the adversary executing malicious code using XPC services? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1559.003",
        "name": "XPC Services",
        "evidence": [
          {
            "description": "An XPC service process is executed where the process image's file hash (SHA256), file path, or signing certificate thumbprint matches a known-bad entry in a threat intelligence feed.",
            "data_sources": [
              "Endpoint: Process Creation Events",
              "Endpoint: Code Signature Information"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, particularly developer workstations, critical servers, and systems running custom macOS applications.",
            "action": [
              "For every process creation event involving an XPC service, join with code signature information. Trigger an alert if the process's SHA256 hash, the signer's certificate thumbprint, or its file path matches a known-bad indicator from threat intelligence feeds.",
              "Calculate the Shannon entropy for the file path of every executed XPC service. Maintain a rolling 30-day baseline of path entropy for all XPC services. Trigger an alert for any XPC service execution whose path entropy exceeds the 95th percentile of the established baseline, as high entropy may indicate randomized paths used by malware.",
              "Implement a time-series forecasting model (e.g., ARIMA, Prophet) for each endpoint to predict the hourly volume of XPC service executions. Continuously train the model on historical data. Trigger an alert if the observed execution count in a given hour exceeds the model's forecasted upper confidence interval (e.g., 99% confidence), suggesting an anomalous burst of activity."
            ]
          },
          {
            "description": "A process creates a file with a .xpc or .appex extension in a user-writable directory (e.g., /tmp, /Users/Shared/), and within a short time window (e.g., 60 seconds), a child process of the original process executes this newly created file.",
            "data_sources": [
              "Endpoint: File Creation Events",
              "Endpoint: Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on macOS endpoints, such as /tmp, /Users/Shared, ~/Library/Caches, and ~/Library/Application Support.",
            "action": [
              "Correlate file creation and process creation events. Trigger an alert when a process (Process A) creates a file ending in `.xpc` or `.appex` in a monitored user-writable directory, and a child process of Process A executes that same file within 60 seconds.",
              "For each unique process name (e.g., `Installer`, `bash`, `curl`), count the number of times it writes and then executes an XPC bundle per day. Calculate the mean and standard deviation for this count over a 30-day period. Trigger an alert if a process's daily count exceeds its historical mean by more than 3 standard deviations.",
              "Train a logistic regression or gradient boosting classifier to predict the probability of a 'write-then-execute' sequence being malicious. Use features such as: parent process name, parent process path, file path entropy, time delta between write and execute, code signature status of the new XPC service, and whether the parent process is a script interpreter. Trigger an alert for any sequence classified as malicious with a probability score greater than 0.9."
            ]
          },
          {
            "description": "An inter-process communication (IPC) event is observed where the client process is a script interpreter (e.g., python, bash, osascript) or a network utility (e.g., curl), and the server is a known, high-privilege system XPC service (e.g., com.apple.securityd, com.apple.opendirectoryd).",
            "data_sources": [
              "Endpoint: IPC Connection Events",
              "Endpoint: Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level XPC services on all macOS endpoints; IPC communication channels and process relationship graphs monitored by endpoint security tools.",
            "action": [
              "Define a watchlist of suspicious client process names (e.g., `bash`, `python`, `sh`, `zsh`, `osascript`, `curl`, `wget`) and a watchlist of high-privilege XPC service names. Trigger an alert on any IPC connection event where the client process name is on the suspicious list and the server process name is on the high-privilege list.",
              "For each system XPC service (server), create a historical frequency distribution of all client process names that connect to it. Calculate the prevalence of each client-server pair. Trigger an alert when an IPC connection occurs from a client process that is in the bottom 5th percentile of frequency for that specific server, indicating a rare and potentially suspicious interaction.",
              "Construct a graph where nodes are processes (identified by name or hash) and directed edges represent XPC connections. Use a graph embedding algorithm (e.g., Node2Vec) to learn vector representations of normal process interactions. Apply a clustering algorithm (e.g., DBSCAN) to these vectors to identify outlier connections that do not belong to established clusters of normal behavior. Investigate these outliers as potential malicious activity."
            ]
          },
          {
            "description": "An XPC service process is executed that meets one or more of the following criteria: (1) the process path is outside of standard system or application directories, (2) the binary is unsigned or has an invalid signature, (3) the binary is signed by a certificate authority not on the trusted enterprise set or seen for the first time.",
            "data_sources": [
              "Endpoint: Process Creation Events",
              "Endpoint: Code Signature Information"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of macOS endpoints, particularly non-standard locations like /private/tmp/, /Users/Shared/, and user home directories; Enterprise certificate trust stores.",
            "action": [
              "Create a detection rule that triggers on XPC service process executions where: (1) the process path is not a subdirectory of `/System/`, `/Library/`, or `/Applications/`, OR (2) the code signature status is 'unsigned' or 'invalid', OR (3) the signing certificate's issuer is not on an enterprise-approved list of Certificate Authorities.",
              "Maintain a historical set of all signer certificate subjects seen for XPC services. When a new XPC service executes, calculate the Levenshtein distance between its signer subject and the closest match in the historical set. Trigger an alert if this distance is anomalously high (e.g., > 95th percentile of all historical distances) or if the certificate has never been seen before in the environment.",
              "Train a One-Class SVM model on features from known-good XPC service executions. Include features like: file path entropy, parent process name, code signature status (as a categorical variable), and the age of the signing certificate. Use the trained model to score all new XPC service executions. Trigger an alert for any execution classified as an outlier."
            ]
          },
          {
            "description": "A process creation event is recorded for a known system XPC service (e.g., com.apple.airportd) where the parent process is not 'launchd' (PID 1) or its expected parent application process.",
            "data_sources": [
              "Endpoint: Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process trees on all macOS endpoints, focusing on children of common user-facing applications like browsers, terminal emulators, and document editors.",
            "action": [
              "Create and maintain an allow-list mapping each legitimate system XPC service to its expected parent process(es) (e.g., 'com.apple.airportd' -> 'launchd'). Trigger an alert on any process creation event where an XPC service is launched by a parent process not on its specific allow-list.",
              "For each XPC service name, create a frequency table of its parent process names over the last 30 days. Trigger an alert if an XPC service is spawned by a parent process whose frequency is below a rarity threshold (e.g., appears in < 0.1% of launches for that child), indicating an anomalous parent-child relationship.",
              "Train a Random Forest classifier on labeled parent-child process creation events (legitimate vs. illegitimate). Use features like: parent process name, parent process path, parent command line arguments, child process name, and user context (e.g., user ID). Deploy the model to score all new parent-child events involving an XPC service as the child. Trigger an alert for events classified as 'illegitimate' with a confidence score > 0.8."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]