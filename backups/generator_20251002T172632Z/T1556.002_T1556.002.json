[
  {
    "information_requirement": "Is the adversary maintaining persistence by registering a malicious password filter DLL?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "A modification event is recorded for the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages' registry key, where the value data includes a new or previously unseen DLL name.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry and file systems on all Domain Controllers, specifically the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa' key and the '%SystemRoot%\\System32\\' directory.",
            "action": [
              "Create a SIEM rule to trigger on any modification to the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages' key (Sysmon Event ID 13). On alert, extract the DLL name and file hash (from the corresponding Sysmon Event ID 11 event) and automatically query threat intelligence feeds. Generate a critical alert on any match.",
              "Maintain an enterprise-wide historical set of all DLLs ever registered in 'Notification Packages'. For any new DLL addition, calculate its prevalence. If the prevalence is 1 (i.e., it is the first time this DLL has ever been registered for this purpose), flag it as a high-risk statistical anomaly requiring immediate review.",
              "Train a supervised classification model (e.g., Random Forest) on features from the registry modification event, including: the process that made the change (e.g., 'svchost.exe', 'reg.exe'), the parent process, user context, time of day compared to the user's baseline, and the historical rarity of the DLL name. Use the model to classify each modification event as 'benign' or 'malicious'."
            ]
          },
          {
            "description": "A DLL registered as a password filter is found to be unsigned, has an enterprise-wide installation prevalence of 1, or resides outside the standard '%SystemRoot%\\System32\\' directory.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process, registry, and file system audit logs on all Domain Controllers; enterprise-wide software and asset inventory database.",
            "action": [
              "Create a composite SIEM rule that triggers if a DLL is added to 'Notification Packages' (Sysmon Event ID 13) AND its corresponding file properties (from EDR or Sysmon Event ID 7/11) indicate it is unsigned OR its path is not '%SystemRoot%\\System32\\'.",
              "Upon a registry modification alert for 'Notification Packages', query a central software inventory for the hash of the new DLL. Calculate its prevalence (count of hosts). If the prevalence falls below a statistically determined low-frequency threshold (e.g., installed on < 5 hosts, or in the 1st percentile of all DLLs), escalate for investigation as a rare file.",
              "Apply an unsupervised anomaly detection model (e.g., Isolation Forest) to all newly registered password filter DLLs. Use a feature set including: is_signed (boolean), prevalence_count (integer), path_is_standard (boolean), publisher_rarity_score (float), and file entropy. The model will assign an anomaly score, with high scores indicating outlier DLLs that warrant investigation."
            ]
          },
          {
            "description": "A new or previously unobserved DLL is loaded by the lsass.exe process on a Domain Controller.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs, specifically module load events for the lsass.exe process, on all Domain Controllers.",
            "action": [
              "For each server OS build and role, create and maintain a strict allow-list of DLLs authorized to be loaded by lsass.exe. Generate a high-severity alert for any DLL loaded by lsass.exe (Sysmon Event ID 7, ImageLoaded: *\\lsass.exe) that is not on this pre-approved list.",
              "For each Domain Controller, establish a baseline set of all DLLs loaded into lsass.exe over a 30-day rolling window. On a daily basis, calculate the Jaccard similarity index between the current set of loaded modules and the historical baseline. A score below a defined threshold (e.g., 0.95) indicates a significant and potentially malicious change in loaded modules.",
              "Apply time-series analysis to the count of *new* unique DLLs loaded by lsass.exe per hour on each Domain Controller. A sudden spike in this count, detected by a time-series anomaly detection algorithm (e.g., ARIMA or Seasonal Hybrid ESD), indicates abnormal loading activity consistent with a compromise."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary using a malicious password filter DLL to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "A DLL registered in 'Notification Packages' has a filename that is a close variant of a known legitimate system DLL (e.g., 'rassapi32.dll' vs. 'rasapi32.dll'), indicating potential typosquatting.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry and file system on all Domain Controllers, specifically the 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa' key and the '%SystemRoot%\\System32\\' directory.",
            "action": [
              "Maintain a blocklist of known malicious typosquatted DLL names. Upon a 'Notification Packages' registry modification (Sysmon Event ID 13), compare the new DLL name against this list and generate a critical alert on any match.",
              "For any new DLL name added to the 'Notification Packages' key, calculate the Levenshtein distance between its name and a list of all legitimate DLLs in '%SystemRoot%\\System32\\'. A very low distance (e.g., 1 or 2) to a known DLL, especially if the new DLL is unsigned, is a strong indicator of typosquatting and should trigger an alert.",
              "Train a character-level n-gram classification model on a dataset of legitimate file names versus known-malicious typosquatted names. Use this model to classify any newly registered DLL name as 'legitimate' or 'suspiciously-similar', triggering an alert for the latter to be investigated."
            ]
          },
          {
            "description": "A new password filter DLL has its file creation timestamp modified to match older, legitimate files in the same directory (timestomping) or is packed, as indicated by high file entropy.",
            "data_sources": [
              "Sysmon Event ID 2",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system metadata and audit logs on all Domain Controllers.",
            "action": [
              "Create a high-severity alert for any 'FileCreateTimeChanged' event (Sysmon Event ID 2) where the TargetFilename is a DLL within '%SystemRoot%\\System32\\' on a Domain Controller.",
              "Upon file creation of a new password filter DLL (Sysmon Event ID 11), calculate the Shannon entropy of the file. Compare this value to the mean and standard deviation of entropy for all other DLLs in the same directory. An entropy value greater than 2 standard deviations above the mean (or an absolute value > 7.5) indicates probable packing or encryption and should be flagged.",
              "Use a clustering algorithm (e.g., DBSCAN) on file metadata for all DLLs in '%SystemRoot%\\System32\\'. Use features such as file entropy, file size, and the time delta between the file's creation time and the median creation time of all other files in the directory. The algorithm will automatically group legitimate files and isolate timestomped or packed outliers."
            ]
          },
          {
            "description": "The LSA Notification Packages registry key is modified by an unusual process, such as a scripting engine (powershell.exe, cscript.exe) or a process not typically associated with system administration.",
            "data_sources": [
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution and registry audit logs on all Domain Controllers.",
            "action": [
              "Create a SIEM rule to alert if 'HKLM\\...\\Notification Packages' is modified (Sysmon Event ID 13) and the modifying process name ('Image') is in a blocklist of suspicious updaters, such as ['powershell.exe', 'cmd.exe', 'wscript.exe', 'mshta.exe', 'WINWORD.EXE', 'EXCEL.EXE'].",
              "Maintain a frequency distribution of process names that modify this specific registry key over a 90-day baseline. This list should be extremely small and stable (e.g., 'reg.exe', 'svchost.exe'). Alert on any modifying process that is statistically rare (e.g., has a frequency of 0 in the baseline period).",
              "Train a classification model (e.g., Logistic Regression) on process and registry events, using features like process name, parent process name, command line arguments, and user context to classify the registry modification as 'Benign' or 'Malicious'. An update from powershell.exe run by a non-administrator user would be flagged as malicious."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary harvesting credentials via an installed malicious password filter DLL?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1556.002",
        "name": "Password Filter DLL",
        "evidence": [
          {
            "description": "The lsass.exe process on a Domain Controller initiates an outbound network connection to an external address.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network gateway traffic logs (Zeek), DNS server logs (Zeek), and endpoint network connection logs (Sysmon) from all Domain Controllers.",
            "action": [
              "Create a critical severity, zero-tolerance rule to alert on any 'Network connection detected' event (Sysmon Event ID 3) where the 'Image' is 'C:\\Windows\\System32\\lsass.exe', the 'Initiated' field is 'true', and the destination IP is not a private or link-local address.",
              "Enrich any alert for outbound `lsass.exe` connectivity with statistical context from historical Zeek logs. Calculate the historical rarity of the destination IP, ASN, and requested domain (from Zeek dns.log). A connection to a destination in the lowest percentile of historical frequency (e.g., never-before-seen ASN) greatly increases the alert's severity.",
              "Use a graph-based anomaly detection model on host and network process relationships. A newly formed edge in the graph originating from the 'lsass.exe' node on a Domain Controller and terminating at an external IP address node would be identified as a high-scoring structural anomaly, indicative of C2 communication or data exfiltration."
            ]
          },
          {
            "description": "The lsass.exe process writes to a file in a non-standard location or a file with a non-system extension like .txt, .log, or .dat.",
            "data_sources": [
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs on Domain Controllers, particularly monitoring '%SystemRoot%\\Temp\\', 'C:\\ProgramData\\', and user profile directories.",
            "action": [
              "Create a SIEM rule to alert if 'lsass.exe' is the source of a 'FileCreate' event (Sysmon Event ID 11) and the 'TargetFilename' matches a regex for temporary or non-standard locations (e.g., '.*\\\\Temp\\\\.*', 'C:\\\\ProgramData\\\\.*') or has a suspicious extension (e.g., '.log', '.txt', '.dat', '.tmp').",
              "Profile the file write paths and extensions for lsass.exe across all Domain Controllers. This should be a very small and predictable set. Use frequency analysis on the parent directory of any file written by lsass.exe. If the directory is not in the top 99.9th percentile of common system write locations for this process, flag it as anomalous.",
              "Train a classifier to predict if a file write event is malicious based on features of the process and target file (e.g., process name, target path, file extension, entropy of path string). This can distinguish legitimate system writes from credential dumping activity by lsass.exe."
            ]
          },
          {
            "description": "The lsass.exe process on a Domain Controller spawns a child process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs on all Domain Controllers.",
            "action": [
              "Create a critical severity, zero-tolerance rule that triggers on any process creation event (Sysmon Event ID 1 or Windows Event ID 4688) where the 'ParentImage' or 'Parent Process Name' field is 'C:\\Windows\\System32\\lsass.exe'. This behavior should never occur under normal operating conditions.",
              "The baseline frequency of lsass.exe appearing as a parent process is zero. Any single occurrence is an absolute statistical anomaly and represents a 100% deviation from the norm, requiring immediate incident response.",
              "In a process-lineage graph model, no legitimate edges should originate from the 'lsass.exe' node. A machine learning model trained on this graph structure would immediately flag the creation of any child process from lsass.exe as a topological anomaly with the highest possible risk score."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]