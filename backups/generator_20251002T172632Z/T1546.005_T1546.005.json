[
  {
    "information_requirement": "Is the adversary maintaining persistence by executing code triggered by interrupt signals?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.005",
        "name": "Trap",
        "evidence": [
          {
            "description": "A process, identified by a file hash matching a threat intelligence feed, modifies a user's shell startup file (e.g., .bashrc, .profile, .zshrc) within a WSL or Linux environment.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Home Directories on WSL-enabled Endpoints and Linux Servers",
            "action": [
              "Correlate file write events on shell startup files (e.g., `.bashrc`, `.profile`) from Windows Event ID 4663 or auditd logs with the initiating process creation event (Windows Event ID 4688). Alert if the file hash of the initiating process matches a known-malicious hash from a threat intelligence feed.",
              "For each process name that modifies a shell startup file, establish a baseline of modification frequency per user and system-wide. Generate an alert if a process that has rarely (<5th percentile) or never modified these files performs a write action.",
              "Train a Random Forest classifier on features from process creation (Event ID 4688) and file modification (Event ID 4663) events, including process name, parent process name, command-line arguments, user context, and target file path. An alert is generated if the model classifies a modification event as 'malicious'."
            ]
          },
          {
            "description": "A shell startup file (e.g., .bashrc, .profile) is modified to include a `trap` command containing suspicious arguments for remote payload execution (e.g., `curl`, `wget`), obfuscation (e.g., `base64`), or reverse shells (e.g., `bash -i`).",
            "data_sources": [
              "EDR file modification events with content",
              "FIM logs with content diffs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Home Directories on WSL-enabled Endpoints and Linux Servers",
            "action": [
              "Upon detection of a write to a shell startup file, scan the file's content. Use regular expressions to search for the string `trap` followed by patterns indicative of malice, such as `curl`, `wget`, `nc`, `ncat`, `python -c`, `base64`, `bash -i`, or IP addresses. An exact match generates a high-fidelity alert.",
              "For each `trap` command identified in a modified shell startup file, calculate the Shannon entropy of the command string argument. Alert on commands with an entropy score exceeding a dynamically calculated baseline (e.g., > 95th percentile for all trap commands seen in the environment), as high entropy often indicates obfuscation or encoded payloads.",
              "Implement a pre-trained Natural Language Processing (NLP) model specialized in detecting malicious shell commands. When a shell startup file is modified, feed the content of the new `trap` command to the model. Generate an alert if the model classifies the command's semantic structure as malicious or anomalous."
            ]
          },
          {
            "description": "A process not typically associated with development or system administration (e.g., winword.exe, outlook.exe, chrome.exe) modifies a shell startup file within a WSL environment.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "WSL filesystems on Windows Endpoints",
            "action": [
              "Create and maintain an allowlist of common processes that legitimately modify shell startup files (e.g., `code.exe`, `vim`, `nano`, `emacs`, `bash.exe`). Correlate file write events (Windows Event ID 4663) on these files with the modifying process name from the corresponding process creation event (Windows Event ID 4688). Alert if the modifying process name is not on the allowlist.",
              "Profile the parent-child process relationships for all modifications to shell startup files. Calculate the historical frequency of each unique parent process (e.g., `explorer.exe`) spawning a child process (e.g., `bash.exe`) that modifies a startup file. Alert when a statistically rare parent-child pair is observed (e.g., a pair with a frequency below the 1st percentile).",
              "Train a time-series model (e.g., LSTM) on sequences of process events preceding a shell file modification to learn normal user workflows. Features should include parent process names, process names, and time deltas. An alert is triggered when a new sequence of events deviates significantly from the learned normal patterns, indicating an anomalous workflow."
            ]
          },
          {
            "description": "A new process is created by a shell process (e.g., bash.exe) immediately before the shell process terminates, and the new process subsequently initiates an outbound network connection. This pattern is indicative of a command executed via a `trap` on the EXIT signal.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4689",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and Network Telemetry from Endpoints and Network Egress Points",
            "action": [
              "Join process creation events (Windows Event ID 4688) with process termination events (Windows Event ID 4689) on Process ID. Alert when a shell process (`bash.exe`, `sh.exe`) terminates within 1 second of its child process being created, and that child process subsequently makes an outbound network connection (from Zeek conn.log) to an IP address not on an allowlist of common destinations.",
              "For all processes spawned by a shell that terminates immediately after, analyze the destination IP addresses, ports, and ASNs from Zeek conn.log. Calculate the rarity of these connection properties across the enterprise. Alert if the process connects to a destination that is statistically rare (e.g., destination ASN is in the < 1st percentile of all connections).",
              "Use a time-series anomaly detection model (e.g., based on Hidden Markov Models) on event triplets: [Process Create -> Process Terminate (Parent) -> Network Connection (Child)]. The model should analyze features like the time delta between events, the child process name, and network connection properties (destination port, bytes sent). An alert is raised when a sequence is identified as a statistical outlier."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by hijacking execution flow with interrupt signals?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.005",
        "name": "Trap",
        "evidence": [
          {
            "description": "A system-wide shell script (e.g., /etc/profile) is modified by a privileged process to include a `trap` command that executes a known malicious binary or script, identified by its file hash.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "EDR file modification events with content"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level Directories on WSL-enabled Servers and Endpoints (e.g., /etc, /usr/bin, /etc/profile.d)",
            "action": [
              "Upon a write event (4663) to a privileged shell script, inspect the file content (via EDR). If a `trap` command is added, extract the command's arguments. If an argument is a file path, hash the file at that path and compare it against a threat intelligence feed of known privilege escalation tools. A match generates a critical alert.",
              "Baseline the set of commands and file paths used within `trap` statements in privileged scripts. Calculate the frequency of each command/path. Alert when a command or file path that has never been seen before or is in the lowest percentile of usage is added to a `trap` statement in a privileged script.",
              "Train a classifier to predict if a modification to a privileged script is malicious. Features should include the modifying process, user context, and NLP-derived features from the added text (e.g., TF-IDF of the new `trap` command). A 'malicious' classification triggers an alert."
            ]
          },
          {
            "description": "A system-wide, privileged shell script (e.g., /etc/profile, /etc/bash.bashrc) is modified to include a `trap` command that directly executes commands known to alter privileges (e.g., `usermod -aG sudo`, `chmod u+s /bin/bash`, `setcap cap_setuid+ep /bin/bash`).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4732",
              "EDR file modification events with content"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level Configuration Directories on WSL-enabled Servers (e.g., /etc)",
            "action": [
              "Upon a file write event (4663) to a system-wide shell script, trigger content inspection. Use regular expressions to search for `trap` commands followed by command strings associated with privilege escalation, such as `usermod`, `groupadd`, `chmod u+s`, `setcap`, `chown root`, or `visudo`. A match generates a high-priority alert.",
              "For all modifications to privileged shell scripts, analyze the added content. Calculate the Shannon entropy of any new `trap` command strings. Alert if a newly added `trap` command's entropy exceeds the 99th percentile of the baseline for that specific file, indicating potential obfuscation of a malicious payload.",
              "Utilize a sequence-to-sequence (seq2seq) model to detect anomalous modifications in critical configuration files. Train the model on historical versions of files like `/etc/profile`. An alert is generated when a new modification introduces a `trap` command that the model flags as a significant structural or semantic deviation from the learned benign state."
            ]
          },
          {
            "description": "A file write event is observed on a root-owned, system-wide script (e.g., a script in /etc/profile.d/) where the initiating process is running in a standard, non-privileged user context, indicating a likely privilege escalation exploit.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level script and service configuration directories (e.g., /etc/cron.d, /etc/systemd/system) on Linux servers and WSL environments",
            "action": [
              "Maintain an access control list of authorized users and processes for critical system configuration files. Create a rule that alerts when a file write event (4663) occurs on a file from this list (e.g., `/etc/profile`), and the User ID of the initiating process (from 4688) is not `root` or another authorized administrative account.",
              "For each critical system file, profile the user accounts and process names that modify it over time. Build a frequency distribution of modifying user/process pairs. Alert if a user or process that has never modified a specific critical file before (or is in the lowest 1st percentile of modification frequency) performs a write operation.",
              "Implement an unsupervised anomaly detection model (e.g., Isolation Forest) on file modification events affecting critical system files. Use features such as the modifying user's ID, the modifying process name, its parent process name, and the time of day. The model will flag any event that it calculates as a significant outlier from the established baseline activity."
            ]
          },
          {
            "description": "A privileged system service (e.g., cron, systemd in a Linux environment; Task Scheduler service in Windows) spawns a suspicious child process (e.g., `sh`, `bash`, `ncat`, `python`) not present on a pre-defined allowlist, potentially as a result of a triggered `trap`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and Security Event Logs from Critical Servers (Domain Controllers, Application Servers)",
            "action": [
              "For known privileged parent processes (e.g., `cron`, `systemd`, `svchost.exe` hosting Task Scheduler), maintain an explicit allowlist of expected child process names. Monitor process creation events (4688) and generate a critical alert whenever a child process is spawned by one of these parents that is not on its specific allowlist.",
              "Model the process execution graph for the environment, focusing on privileged parent processes. For each privileged parent, calculate the conditional probability of it spawning each type of child process based on historical data. Alert when a child process is spawned with a very low calculated probability (e.g., < 0.01%), indicating a rare and suspicious event.",
              "Apply a graph-based anomaly detection algorithm (e.g., using Graph Neural Networks) to the process creation event log. The model learns the normal graph structure of process parent-child relationships. An alert is triggered when a new edge (e.g., `cron` -> `ncat`) appears in the graph that the model deems anomalous based on learned structural properties and node features."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]