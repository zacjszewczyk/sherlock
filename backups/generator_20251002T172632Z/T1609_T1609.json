[
  {
    "information_requirement": "Is the adversary executing commands via container administration services? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1609",
        "name": "Container Administration Command",
        "evidence": [
          {
            "description": "A network connection to a container administration API (e.g., Docker daemon, Kubernetes API server, kubelet) originates from an IP address present on a threat intelligence feed, OR a container creation command (`docker run`, `kubectl run`) references an image digest or tag present on a list of known malicious container images.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container orchestration control plane nodes (e.g., Kubernetes masters), Perimeter firewalls, Cloud provider flow logs",
            "action": [
              "Symbolic: Continuously correlate source IP addresses from network connections to container API ports (e.g., Docker 2375/2376, K8s 6443, Kubelet 10250) in Zeek conn.log against a CTI feed of malicious IPs. Concurrently, monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1) and Kubernetes Audit Logs for container creation events, and match the specified container image against a deny-list of known malicious images. Generate an alert on any match.",
              "Statistical: For each inbound connection to a container API port in Zeek conn.log, enrich the source IP with ASN and geolocation data. Establish a 30-day baseline of seen source ASNs and countries. Generate an alert if a connection originates from an ASN or country that has never been seen before or whose frequency of appearance falls below the 1st percentile of the baseline distribution.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) on enriched Zeek conn.log data for connections to container APIs. Features should include: connection duration, total bytes transferred, protocol, source port, a boolean flag for CTI match, and statistical rarity scores for the source IP, ASN, and country. Label data based on historical incidents and known benign traffic patterns. The model will output a probability score for each connection being malicious, with scores above a defined threshold (e.g., 0.8) triggering an alert."
            ]
          },
          {
            "description": "Process execution of `docker exec` or `kubectl exec` is observed where the command-line arguments for the executed command contain patterns indicative of interactive shells, network reconnaissance, or sensitive file access.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts (e.g., Docker daemons, Kubelets), CI/CD runners, Jump servers with container tooling installed",
            "action": [
              "Symbolic: Monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1, Linux auditd) for command-lines containing `docker exec` or `kubectl exec`. Apply a list of regular expressions to the subsequent command arguments to detect patterns associated with reverse shells (e.g., `/bin/bash -i`), credential access (e.g., `cat /etc/shadow`), or reconnaissance (e.g., `whoami`, `ip a`). Generate an alert on any match.",
              "Statistical: For each user account, establish a 30-day baseline of their `exec` command activity, calculating the Shannon entropy of the command strings per hour. Generate an alert if a user's hourly command entropy exceeds the 95th percentile of their individual baseline, indicating a shift from predictable, automated commands to unpredictable, interactive commands.",
              "Machine Learning: Train a natural language processing (NLP) model on the text of `exec` command arguments using a large dataset of known benign commands (from CI/CD logs) and malicious commands (from threat reports). The model will classify new `exec` commands as benign or malicious. Alternatively, use a sequence-to-sequence autoencoder on the series of commands executed by a user in a session; a high reconstruction error for a new command sequence indicates it is anomalous compared to trained benign sequences."
            ]
          },
          {
            "description": "A container is created (`docker run`, `kubectl run`, `kubectl apply`) with security-context configurations that weaken or disable container isolation, such as privileged mode, host namespace sharing, or mounting sensitive host directories.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Kubernetes Audit Logs",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "CI/CD pipeline servers, Kubernetes API Servers, Container hosts, Git repositories containing Kubernetes manifests",
            "action": [
              "Symbolic: Monitor process creation logs (Windows Event ID 4688, Sysmon Event ID 1, Linux auditd) and Kubernetes Audit Logs for container creation events. Parse command-line arguments or manifest content for forbidden configurations, including but not limited to: `--privileged`, `hostPID: true`, `hostNetwork: true`, and volume mounts of host paths like `/`, `/etc`, `/root`, or `/var/run/docker.sock`. Generate a high-severity alert on any match.",
              "Statistical: Create and maintain an allow-list of user/service accounts authorized to create privileged or host-mounted containers. For accounts on this list, baseline their frequency of using these flags over a 90-day period. Generate an alert if an unauthorized account uses one of these flags, OR if an authorized account's usage rate in a 24-hour window exceeds 3 standard deviations above their historical mean.",
              "Machine Learning: Apply an unsupervised clustering algorithm (e.g., DBSCAN) to container creation events. Vectorize each event using features such as: the creating user/service account, the container image used, and a multi-hot encoded vector representing all security context flags and host paths mounted. Periodically re-run the clustering and flag any small clusters (outliers) that represent rare combinations of these features, such as a non-standard image being run with privileged flags by an interactive user account."
            ]
          },
          {
            "description": "A process for a container administration tool (`docker`, `kubectl`, `ctr`) is executed by a user account for the first time, or by an authorized user at a time of day or day of week that is statistically anomalous compared to their established baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, All user workstations, Production servers, Domain Controllers (for user account context)",
            "action": [
              "Symbolic: Maintain a list of all users who have executed `docker` or `kubectl` commands in the last 90 days. Generate an alert whenever a process creation event (Windows Event ID 4688, Sysmon Event ID 1, Linux auditd) shows one of these commands being run by a user not on this 'ever seen' list.",
              "Statistical: For each user who is authorized to run container administration commands, profile their activity by hour of day and day of week over a rolling 30-day window. For each new command execution, calculate the rarity of the current time slot (e.g., Tuesday at 3 AM) within that user's profile. Generate an alert if the execution occurs in a time slot that falls into the bottom 1% of activity for that user.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model for each authorized user, based on features of their command executions (e.g., source host, time of day, day of week). This creates a boundary of 'normal' behavior for each user. A new command execution that falls outside this learned boundary is classified as an anomaly and flagged for review, detecting deviations across multiple features simultaneously."
            ]
          },
          {
            "description": "The volume of network connections, unique source IPs, or total data transferred to a container administration API (e.g., Docker daemon port 2375, Kubernetes API port 6443) exceeds a statistically-derived threshold from an established baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments hosting container infrastructure, Cloud provider network gateways, Internal network switches and routers",
            "action": [
              "Symbolic: Using Zeek conn.log, create a rule that alerts on any connection to a known container administration port (e.g., 2375, 2376, 6443, 10250, 10255) that does not originate from a predefined list of authorized subnets (e.g., CI/CD server VLAN, admin workstation VLAN). This is a network access control violation.",
              "Statistical: From Zeek conn.log, calculate a 30-day baseline for the number of distinct source IPs connecting to container APIs per hour. Generate an alert if the count of unique source IPs in any given hour exceeds 3 standard deviations above the historical hourly mean. This can detect distributed scanning or access attempts.",
              "Machine Learning: Use an Isolation Forest algorithm on Zeek conn.log records for connections to container APIs. Use features like `duration`, `orig_bytes`, `resp_bytes`, `orig_pkts`, `resp_pkts`, and the rarity of the source IP. The model will assign an anomaly score to each connection, effectively identifying sessions that are outliers in their combination of characteristics, which could indicate scanning or data exfiltration attempts through the API."
            ]
          },
          {
            "description": "A rapid succession of varied container administration commands is executed by a single user or from a single host, deviating from normal, repetitive automation patterns and suggesting interactive, exploratory behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations with container tools, CI/CD runners, Shared administration servers",
            "action": [
              "Symbolic: Create a rule that triggers an alert if a single source host or user account executes more than 20 unique `docker` or `kubectl` commands (e.g., `run`, `exec`, `ps`, `logs`, `cp`) within a 10-minute time frame. This indicates tool-assisted or scripted exploration rather than typical single-command operations.",
              "Statistical: For each user, compute two rolling 5-minute metrics from their command-line history: (1) the total count of container administration commands, and (2) the Shannon entropy of the executed command strings. Establish a 90-day baseline for these two metrics. Generate an alert if both metrics simultaneously exceed the 98th percentile of their respective baselines, which indicates an abnormal burst of complex, non-repetitive activity.",
              "Machine Learning: Implement a change point detection algorithm (e.g., CUSUM, Bayesian Change Point) on the time series of command counts per user per minute. Train the model on historical data to understand normal activity levels. The algorithm will automatically signal an alert when it detects a statistically significant and persistent shift in the command frequency, indicating a potential transition from normal work to malicious activity."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]