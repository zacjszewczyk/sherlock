[
  {
    "information_requirement": "Is the adversary exploiting software vulnerabilities to disable or bypass our defensive security controls? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1211",
        "name": "Exploitation for Defense Evasion",
        "evidence": [
          {
            "description": "A network connection to or from an endpoint security agent's management port using a protocol or destination IP address inconsistent with established baselines, or traffic matching a known exploit signature for a security product vulnerability.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VPN concentrators, internal network segments monitoring security tool management servers, and Cloud VPC flow logs monitoring traffic to/from security service management planes.",
            "action": [
              "Symbolic: Query Zeek notice.log for alerts with `notice.note` values matching known exploit signatures (e.g., from ET Pro, Suricata) for security software. Concurrently, search Zeek conn.log and http.log for connections to or from security management servers that match IOCs (IPs, domains) associated with active exploit campaigns.",
              "Statistical: For each security agent process, establish a 30-day baseline of payload size and data entropy for its management communications using Zeek conn.log. Alert when a new connection's payload size or entropy exceeds the 99.5th percentile of its historical baseline, as this can indicate embedded shellcode or an obfuscated payload.",
              "Machine Learning: Develop a multivariate time-series anomaly detection model (e.g., VAR or LSTM) for each security agent's network traffic, using features like bytes sent/received, connection duration, and protocol from Zeek conn.log. Anomaly scores that significantly deviate from the learned normal patterns could indicate a compromised agent being used for data exfiltration (high traffic) or a disabled agent (no traffic)."
            ]
          },
          {
            "description": "A process is created (e.g., powershell.exe, sc.exe) with command-line arguments specifically targeting the modification, disabling, or termination of a known security service or process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations and servers, particularly those hosting security management consoles, critical applications, and Domain Controllers.",
            "action": [
              "Symbolic: Create a detection rule that searches Windows Event ID 4688 and Sysmon Event ID 1 for command-line arguments containing keywords like 'stop', 'delete', 'config', 'disable' followed by the name of a known security service (e.g., 'sc.exe stop WinDefend', 'powershell -c Stop-Service -Name Sense'). Maintain and apply a watchlist of known security bypass tool names (e.g., 'zemana.exe', 'av_killer.exe').",
              "Statistical: For legitimate utilities like 'sc.exe', 'net.exe', and 'powershell.exe', compute the enterprise-wide frequency of all unique command-line argument combinations used to interact with services. Flag any command targeting a security service that falls into the bottom 1% of historical frequency, as this represents a statistically rare and suspicious action.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) on a labeled dataset of benign and malicious command lines. Extract features such as character entropy, length, presence of obfuscation patterns (e.g., base64), n-grams, and argument structure. Apply the model to new process creation events (Sysmon EID 1); a high 'malicious' probability for a command targeting a security process indicates a likely exploit."
            ]
          },
          {
            "description": "A security service terminates unexpectedly (e.g., crashes) and is temporally correlated, within a short time window on the same host, with subsequent execution of discovery commands or outbound network connections to unknown destinations.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1001",
              "Windows Event ID 4688",
              "Windows Event ID 7034",
              "Zeek conn.log",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations and servers, especially Domain Controllers and other high-value assets.",
            "action": [
              "Symbolic: Implement a stateful correlation rule that triggers an alert when a security service crash or unexpected termination event (Windows Event ID 7034, 1000, 1001) is followed within a 5-minute window on the same host by either: a) process creation (Windows Event ID 4688) for a reconnaissance tool (e.g., `whoami.exe`, `net.exe`), or b) a network connection (Sysmon Event ID 3) to an IP address not seen in the last 30 days.",
              "Statistical: On a per-host basis, calculate the rolling 24-hour average and standard deviation of security service crash events (Windows Event ID 7034, 1000). Generate an alert if the count of these events in any 1-hour window exceeds 3 standard deviations above the mean, indicating repeated, unsuccessful exploit attempts.",
              "Machine Learning: Apply a sequence analysis model (e.g., Markov chains or an LSTM autoencoder) to event logs (Sysmon, Windows Events) to learn normal sequences of host events. Flag any sequence with a low probability score, particularly sequences that include a security process termination event followed by file creation in a temp directory and a new external network connection (Zeek conn.log), as this represents a classic exploit-to-C2 chain."
            ]
          },
          {
            "description": "A specific indicator (file hash, domain, or IP address) that was previously logged with an action of 'block' or 'prevent' by a security tool is subsequently observed in a 'success' or 'allow' event log from a different data source (e.g., process execution log, network flow log).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Security tool alert logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log aggregation platform (SIEM), endpoint workstations and servers, network egress points (Firewalls/Proxies).",
            "action": [
              "Symbolic: Continuously ingest all 'block' alerts from security tools (EDR, firewall, proxy) into a high-speed cache (e.g., Redis). Create a real-time correlation rule that checks every successful process execution (Sysmon Event ID 1) and network connection (Zeek conn.log) against this cache. An immediate, high-priority alert is generated upon a match.",
              "Statistical: For each major security control rule (e.g., 'Malware Blocked by AV', 'C2 Domain Blocked by Proxy'), stream its alert counts into a time-series database. Apply a change point detection algorithm (e.g., Pruned Exact Linear Time - PELT) to this data. A detected change point corresponding to a sudden, sustained drop in alert volume for a previously active rule is an indicator that the control has been disabled or bypassed.",
              "Machine Learning: Train a time-series forecasting model (e.g., Prophet) for each high-volume security alert type, incorporating seasonality (e.g., time of day, day of week). If the actual alert count falls below the model's forecasted lower confidence interval (`yhat_lower`) for a sustained period (e.g., more than 1 hour), generate an alert for a potential 'silent failure' or evasion of that control."
            ]
          },
          {
            "description": "A process associated with handling untrusted external content (e.g., WINWORD.EXE, CHROME.EXE) writes a file (e.g., DLL, CPL), which is then loaded as a module by a separate, unrelated security software process (e.g., MsMpEng.exe) on the same host within a short time frame.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations and servers, user home directories, temporary file locations (e.g., C:\\Users\\<user>\\AppData\\Local\\Temp), and the C:\\ProgramData folder.",
            "action": [
              "Symbolic: Create a correlation rule that joins two events on the same host within a 1-minute window: 1) A file creation event (Sysmon Event ID 11) by a parent process like `WINWORD.EXE` or `CHROME.EXE` in a world-writable path. 2) A subsequent image load event (Sysmon Event ID 7), where the `ImageLoaded` field from event 2 matches the `TargetFilename` from event 1, and the loading process is a known security tool.",
              "Statistical: Analyze image load events (Sysmon Event ID 7) to build a baseline of legitimate DLLs loaded by each security process. Calculate the rarity of each loaded DLL's path and name. A security process loading a DLL from a path like `C:\\Users\\*\\AppData\\Local\\Temp\\*` is a statistical anomaly with a near-zero legitimate frequency and should be alerted on immediately.",
              "Machine Learning: Construct a process-file-module-network event graph for each host. Use a graph-based anomaly detection algorithm to identify improbable subgraphs. A path such as `OUTLOOK.EXE` --(creates)--> `payload.dll` --(loaded by)--> `MsMpEng.exe` --(connects to)--> `[Rare External IP]` would be identified as a high-scoring anomalous subgraph, strongly indicating a successful exploit and bypass."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]