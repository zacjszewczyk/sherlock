[
  {
    "information_requirement": "Has the adversary captured user input to obtain credentials? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1056",
        "name": "Input Capture",
        "evidence": [
          {
            "description": "A process execution event (Windows Event ID 4688 or Sysmon 1) contains a file hash that matches a known keylogger hash from a threat intelligence feed, or a network connection event (Zeek conn.log) shows communication to an IP address or domain flagged as malicious C2 infrastructure.",
            "data_sources": [
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Servers (e.g., Domain Controllers, Financial Systems), Remote Access Gateways, DNS Resolvers",
            "action": [
              "Symbolic: Execute a continuous query against process creation events (Sysmon 1, Event ID 4688) and network connection logs (Zeek conn.log) to match process hashes, destination IP addresses, or resolved DNS domains against a threat intelligence feed of known keylogger indicators. Generate a high-severity alert upon any match.",
              "Statistical: For processes not on an allowlist, calculate the prevalence of each process hash across all endpoints. Identify processes with very low prevalence (e.g., <0.1% of hosts) that initiate network connections to domains with a creation date of less than 30 days or a reputation score in the bottom 5th percentile. A combination of these statistical rarities indicates a high likelihood of malicious activity.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using features from process and network events, such as process name, parent process, command-line arguments, destination IP/port, connection duration, bytes sent/received, and destination ASN. The model will score each process-network event pair for its likelihood of being keylogger activity, alerting on scores that exceed a dynamically tuned threshold based on the false positive rate."
            ]
          },
          {
            "description": "An unsigned or anomalously-named process creates a registry key, value, named pipe, or mutex whose name matches a known keylogger artifact pattern or exhibits high string entropy, suggesting an attempt to establish persistence or inter-process communication for capturing data.",
            "data_sources": [
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)",
              "Windows Event ID 14 (Sysmon)",
              "Windows Event ID 17 (Sysmon)",
              "Windows Event ID 18 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) instances, Registry Hives",
            "action": [
              "Symbolic: Implement detection rules that search registry and named pipe creation events (Sysmon Event IDs 12-14, 17-18) where the TargetObject field matches regular expressions for known keylogger artifacts (e.g., 'HKCU\\\\Software\\\\.*(?:key|hook|log).*', '\\\\pipe\\\\winkeylog'). Alert when the creating process is also unsigned.",
              "Statistical: For all created registry keys and named pipes, calculate the Shannon entropy of the artifact name. Establish a baseline of normal entropy values for artifacts created by legitimate, signed processes (e.g., svchost.exe, lsass.exe). Flag any artifact creation event where the name's entropy exceeds the 98th percentile of the established baseline, especially if the creating process is running from a temporary directory.",
              "Machine Learning: Employ an unsupervised clustering algorithm (e.g., DBSCAN) on features extracted from artifact creation events, including the creating process name, parent process name, artifact path, artifact name entropy, and the process's signature status. Isolate and investigate small clusters or outliers that do not group with the large clusters representing benign system and application activity."
            ]
          },
          {
            "description": "A process running in a non-interactive session (Session ID 0) or spawned from a command-line interpreter (cmd.exe, powershell.exe) loads user-interface-related DLLs (e.g., user32.dll, gdi32.dll, winio.dll) when the process itself is not a known, legitimate GUI application or Windows service.",
            "data_sources": [
              "Windows Event ID 7 (Sysmon)",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Backend Servers (Web, Database), Domain Controllers, User Workstations, Administrator Workstations",
            "action": [
              "Symbolic: Create a detection rule that triggers when a process image load event (Sysmon Event ID 7) for 'user32.dll' or 'gdi32.dll' is generated by a process where the ParentImage is 'services.exe' or 'powershell.exe', and the Image is not on a pre-defined allowlist of legitimate applications known to perform this behavior.",
              "Statistical: For each unique process name, build a baseline profile of all DLLs it normally loads across the enterprise. Calculate the frequency of each process-DLL pair. Generate a high risk score when a process loads a DLL that is statistically rare for it (e.g., loaded by < 0.5% of instances of that process enterprise-wide), particularly if the DLL is UI-related and the process is typically non-GUI.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on the sequence and inter-arrival time of DLLs loaded by critical system processes (e.g., lsass.exe, winlogon.exe) during their startup phase. The model learns the normal loading signature and alerts when it detects a significant deviation, such as the injection and loading of an unexpected UI-related DLL at an abnormal point in the process lifecycle."
            ]
          },
          {
            "description": "A PowerShell script block log (Event ID 4104) contains clear text or deobfuscated content with references to input capture APIs (e.g., SetWindowsHookEx, GetAsyncKeyState), clipboard access functions, or .NET methods for user input, particularly when the script also shows signs of obfuscation like Base64 encoding or character replacement.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4104 (PowerShell Script Block Logging)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrative Workstations, Servers with PowerShell Remoting enabled",
            "action": [
              "Symbolic: Scan PowerShell Script Block logs (Event ID 4104) and process command lines (Event ID 4688/Sysmon 1) for keywords such as 'Set-WindowsHookEx', 'GetAsyncKeyState', 'Get-Clipboard', '[System.Windows.Forms.Clipboard]::GetText()', 'user32.dll', and '[DllImport(\"user32.dll\")]'. Alert on any matches, especially if the command line indicates obfuscation (e.g., -enc, -encodedcommand).",
              "Statistical: For each script block in Event ID 4104, calculate the character frequency distribution and an entropy score. Establish a baseline for typical, non-obfuscated scripts. Flag scripts with an entropy score greater than 3 standard deviations from the mean or a character distribution that closely matches that of Base64 or ASCII hex, as this indicates obfuscation used to hide input capture functionality.",
              "Machine Learning: Fine-tune a pre-trained Natural Language Processing (NLP) transformer model (e.g., BERT) on a labeled dataset of benign and malicious PowerShell scripts. Use the model to classify the intent of each executed script block based on its semantic content, allowing detection of input capture logic even when specific keywords are avoided or obfuscated. Alert on scripts classified as malicious with a high confidence score."
            ]
          },
          {
            "description": "An outbound HTTP POST request is observed from an endpoint to a destination that is a non-categorized, newly registered, or low-reputation domain, and the request body contains parameter names suggestive of credential theft (e.g., 'user', 'pass', 'keydata') or has a small, consistent size.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Internet Gateway), DNS Resolvers, Web Proxies",
            "action": [
              "Symbolic: Monitor HTTP logs (Zeek http.log) for POST requests where the URI or request body contains case-insensitive parameter names like 'user', 'pass', 'login', 'token', 'keydata', or 'keystroke'. Correlate the destination FQDN with DNS logs (Zeek dns.log) and threat intelligence to check if the domain is less than 30 days old or has a poor reputation. Alert on a confirmed match.",
              "Statistical: For each source IP, model the typical size of POST request bodies to each destination over time using a moving average and standard deviation. Flag any POST request whose size is a statistical outlier (e.g., > 3 standard deviations from the mean), especially if the destination is a low-prevalence domain across the enterprise. Small (<512 bytes), periodic POSTs are highly suspicious of batched keystroke exfiltration.",
              "Machine Learning: Use a time-series anomaly detection model on network connection features (e.g., inter-arrival time, data volume sent, destination port, destination prevalence) from Zeek conn.log for each host. The model can identify beaconing behavior (periodic, 'heartbeat' connections) that is characteristic of keylogger C2 communication, even when encrypted, by detecting abnormally low variance in the timing and size of connections."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Has the adversary captured user input to collect information? (PIR)",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1056",
        "name": "Input Capture",
        "evidence": [
          {
            "description": "A non-standard or unsigned process creates a file with a .log, .txt, .dat extension or a hidden attribute in a common temporary or user directory (e.g., %TEMP%, %APPDATA%, C:\\Users\\Public\\Documents), which is a common pattern for staging captured data.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Shared File Systems, Endpoint File Systems",
            "action": [
              "Symbolic: Create a rule to monitor file creation events (Sysmon Event ID 11) where the TargetFilename matches regex patterns like '.*\\\\(AppData|Temp|Users\\\\Public).*\\\\.*\\.(log|txt|dat)$' and the creating process (Image field) is not on an allowlist of applications expected to write logs to these locations.",
              "Statistical: Calculate the enterprise-wide prevalence of every unique filename created in common staging directories. Flag for investigation any file with an extremely low prevalence (e.g., seen on only one host), especially if the creating process is also statistically rare or is unsigned.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) to predict if a file creation event is suspicious. Features should include: creating process name, process path, file path, file extension, whether the file is hidden, process signature status, and time of day. The model learns to identify unusual combinations, such as a browser process creating a hidden .dat file in a temporary directory outside of business hours."
            ]
          },
          {
            "description": "A process writes to a local file in a temporary or user-profile directory, and shortly thereafter, the same process (or a child process) initiates an outbound network connection to an external address, consistent with staging data for exfiltration.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 3 (Sysmon)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Data Staging Servers, Network Egress Points, Endpoint File Systems",
            "action": [
              "Symbolic: Create a stateful detection rule that correlates events by ProcessGUID (from Sysmon). Trigger an alert if a process generates a file creation event (Sysmon EID 11) in a staging directory, immediately followed by a network connection event (Sysmon EID 3) to an external IP address within a 60-second window.",
              "Statistical: For each process name, analyze event sequences to calculate the conditional probability P(Network Connection | File Write). Flag processes where this probability is anomalously high (>90%) compared to their established baseline behavior or to other processes, identifying tools whose primary function is 'write-then-send'.",
              "Machine Learning: Use a sequence analysis model, such as a Recurrent Neural Network (RNN), to learn normal sequences of system events (process creation, file I/O, network connections, registry modifications) for typical user sessions. The model can then identify and alert on the occurrence of rare but high-risk sequences, such as the 'keylog -> stage -> exfiltrate' pattern, even when performed by different processes."
            ]
          },
          {
            "description": "File system audit logs (Event ID 4663) or other file monitoring tools show a process performing an unusually high number of small write or append operations to a single file within a given time frame (e.g., >50 writes/minute), inconsistent with normal application logging or user activity.",
            "data_sources": [
              "Windows Event ID 11 (Sysmon)",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Critical Application Servers, Local File Systems with Auditing Enabled",
            "action": [
              "Symbolic: With file system auditing enabled for key directories, create a rule that alerts if a single Process ID generates more than 30 write access events (Event ID 4663 with Accesses containing 'WriteData' or 'AppendData') to the same file within a 1-minute window, excluding known logging processes.",
              "Statistical: For each process-file pair, aggregate file access events over 5-minute windows. Calculate the inter-arrival time between write events. Compare the mean and variance of this timing against a baseline of normal file write activity. A very low mean (< 2 seconds) and low variance in inter-arrival times for a non-logging process is a strong indicator of automated input capture.",
              "Machine Learning: Apply a time-series anomaly detection model to the volume of data written to a file over time by a process. An autoencoder can be trained to reconstruct benign write patterns (e.g., large bulk writes, infrequent updates) and will have a high reconstruction error when presented with the pattern of frequent, small, positive increments characteristic of a keylogger appending to a file."
            ]
          },
          {
            "description": "An endpoint exhibits periodic, fixed-interval outbound network connections (beaconing) to a low-reputation or previously unseen destination, where the payload size is small and consistent, or uses DNS queries with high-entropy subdomains for data tunneling.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internal DNS Servers, Firewall Log Aggregators",
            "action": [
              "Symbolic: Monitor DNS logs (Zeek dns.log) for queries where the query length is >100 characters and the subdomain contains character sets indicative of encoding (e.g., matches a Base64 or hex regex). Correlate the root domain with threat intelligence feeds for known DNS tunneling C2 infrastructure.",
              "Statistical: For each source host, analyze outbound connections in Zeek conn.log over a 24-hour period. Calculate the standard deviation of the time delta between consecutive connections to the same destination IP/port. A standard deviation near zero (< 1 second) indicates a fixed interval. Also, calculate the standard deviation of the bytes sent (orig_bytes). A low deviation in both metrics for a non-allowlisted service is a strong signal for C2 beaconing.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means or DBSCAN) on enriched network connection data. Features should include session duration, total bytes sent, destination port, destination IP prevalence, destination ASN, JA3/JA3S hash, and the statistical beaconing metrics described above. This can group suspicious C2 traffic into distinct clusters for investigation, separating it from benign periodic traffic like NTP or software updates."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]