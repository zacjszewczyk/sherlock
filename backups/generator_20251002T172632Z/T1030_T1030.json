[
  {
    "information_requirement": "Is the adversary exfiltrating sensitive data by chunking it into fixed sizes to evade detection? (PIR)",
    "tactic_id": "TA0010",
    "tactic_name": "Exfiltration",
    "indicators": [
      {
        "technique_id": "T1030",
        "name": "Data Transfer Size Limits",
        "evidence": [
          {
            "description": "A successful outbound network connection is established with a destination IP address, domain, or URL that matches a high-confidence threat intelligence feed of known malicious C2 or data exfiltration endpoints.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress network gateways, DNS resolvers, and web proxies",
            "action": [
              "Symbolic (IOC Match): Continuously join destination IPs from Zeek conn.log (where conn_state = 'SF'), host headers from Zeek http.log, and query names from Zeek dns.log against a high-confidence threat intelligence feed. Generate a high-severity alert for any successful connection (conn_state = 'SF' or equivalent) to a matched indicator.",
              "Statistical (Volume Analysis): For all connections matching a threat intelligence indicator, establish a historical baseline of outbound data volume (orig_bytes in Zeek conn.log) for that specific indicator. Generate a medium-severity alert if the current session's data volume exceeds the 95th percentile of the historical baseline for that indicator, suggesting an unusually large transfer.",
              "ML (Reputation Scoring): Develop and apply a reputation score for all external destinations using features like domain age (from WHOIS), ASN reputation, geographic prevalence, and historical threat intelligence matches. Use a classification model (e.g., Logistic Regression or Gradient Boosting) trained on known benign and malicious destinations to predict the probability of a destination being malicious. Alert on new connections to destinations with a predicted malicious probability above a defined threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "Observed outbound network traffic contains signatures or patterns, such as specific HTTP headers, DNS query structures, or fixed inter-packet delays, that match the known behavior of specific data exfiltration tools.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress network gateways, web proxies, and internal DNS servers",
            "action": [
              "Symbolic (Signature Match): Implement and monitor rule-based signatures (e.g., via a network IDS like Suricata or custom Zeek scripts) that match known exfiltration tool patterns. For example, search Zeek http.log for POST requests with a non-standard 'User-Agent' and a 'Content-Type' of 'application/octet-stream' to a URI with a file extension not typically associated with uploads (.php, .asp). For DNS, search Zeek dns.log for an abnormally high volume of TXT record queries to a single subdomain.",
              "Statistical (Entropy Analysis): For every DNS query in Zeek dns.log, calculate the Shannon entropy of the requested subdomain. Establish a network-wide baseline for normal entropy (typically lower for human-readable names). Generate an alert when a query's entropy score exceeds 3 standard deviations above the mean, which suggests the subdomain is algorithmically generated and may contain encoded data chunks for exfiltration.",
              "ML (Time Series Forecasting): For each source-destination IP pair, model the time delta between consecutive outbound connections using a time series model (e.g., ARIMA or LSTM). The model learns the expected 'rhythm' of communication. Generate an alert when the observed inter-connection delays deviate significantly from the forecast, indicating a potentially automated and fixed timing pattern (beaconing) inconsistent with normal user or system behavior."
            ]
          },
          {
            "description": "Statistical analysis of an outbound network flow reveals an abnormally low variance in the size of individual originator packets, indicating data is being programmatically split into uniform sizes before transmission.",
            "data_sources": [
              "Zeek conn.log",
              "Packet Capture (PCAP)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress network gateways and core network switches where full packet capture is available",
            "action": [
              "Symbolic (Protocol Mismatch): In Zeek conn.log, create a rule to alert when the 'service' field (e.g., 'http', 'ssh') does not match the well-known service for the destination port ('id.resp_p'), and where a significant amount of data is sent ('orig_bytes' > 10KB). For example, alert on traffic identified as 'dns' over TCP port 80. This indicates tunneling that may be used to exfiltrate fixed-size chunks.",
              "Statistical (Packet Size Variance): Using PCAP data or a custom Zeek script that logs per-packet statistics for each flow, calculate the standard deviation of originator packet sizes for all outbound flows longer than 30 seconds. Establish a baseline for normal standard deviation across different protocols. Alert on flows where the packet size standard deviation is in the bottom 1st percentile (e.g., < 10 bytes), indicating artificially uniform packet sizing.",
              "ML (Clustering): Periodically extract features from network flows, including average packet size, standard deviation of packet size, total bytes transferred, and flow duration. Use a clustering algorithm (e.g., DBSCAN) to group flows. Investigate clusters characterized by a very low standard deviation of packet size but a high total transfer volume, as these are anomalous and highly indicative of this exfiltration technique."
            ]
          },
          {
            "description": "A series of periodic outbound connections from a single internal host is detected, where each connection instance transfers a nearly identical volume of data, indicating automated, chunked exfiltration.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, servers hosting sensitive data, and egress network gateways",
            "action": [
              "Symbolic (Beaconing Rule): For each source IP, group connections by destination IP and port over a 1-hour window. If the count of connections is greater than 5, the time interval between each connection is regular (+/- 10% jitter), and the 'orig_bytes' field in Zeek conn.log for each connection is within a 5% size difference of the others, generate an alert for potential beaconing with fixed data size.",
              "Statistical (Autocorrelation): For each internal source IP, create a time series of outbound connection events to a single destination. Apply an autocorrelation function (ACF) to the time series of connection timestamps to detect significant periodic signals (beaconing). For any IP identified as beaconing, calculate the variance of the 'orig_bytes' field across those periodic connections. Flag hosts that exhibit both strong periodicity and a data volume variance below a statistically determined low threshold.",
              "ML (Anomaly Detection): Train an anomaly detection model (e.g., Isolation Forest) on per-host, per-hour features, such as number of outbound connections, number of unique destinations, average time between connections, and standard deviation of bytes sent per connection. The model will learn the normal 'rhythm' of network activity for each host. Flag hosts that the model identifies as strong anomalies, as they may be exhibiting new, automated C2 behavior characteristic of chunked exfiltration."
            ]
          },
          {
            "description": "An outbound network connection is initiated by a process that does not typically perform network communication, and the connection involves a significant data upload inconsistent with the process's function.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, application servers, and user workstations",
            "action": [
              "Symbolic (Process Whitelist): Correlate network connections from Windows Event ID 5156 (Application Name) with process creation events from Windows Event ID 4688 (New Process Name). Maintain an established baseline of legitimate network-communicating processes (e.g., 'chrome.exe', 'outlook.exe', 'svchost.exe'). Generate an alert when a process not on this baseline (e.g., 'powershell.exe', 'cscript.exe', 'notepad.exe', or any executable in a temp directory) initiates an outbound connection, and correlate with Zeek conn.log to confirm significant data upload ('orig_bytes' > 100KB).",
              "Statistical (Data Ratio Analysis): For all network flows, correlate the initiating process from Windows Event ID 5156 with the flow data from Zeek conn.log. For each process name, calculate the historical 99th percentile of the ratio of uploaded data to downloaded data (orig_bytes / resp_bytes). Alert when a new connection initiated by that process exceeds this established percentile, suggesting an abnormal data upload activity for that specific application.",
              "ML (JA3/JARM Fingerprinting): Generate JA3 (client) and JARM (server) TLS fingerprints for all encrypted connections using Zeek. Correlate these fingerprints with the initiating process name from Windows Event ID 5156. Train a classification model to recognize legitimate application-fingerprint pairs (e.g., 'chrome.exe' has a known set of JA3 hashes). Flag any TLS connection where the JA3 fingerprint does not match the expected fingerprint for the initiating process, indicating a potential masquerading or custom-coded TLS stack used for C2."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]