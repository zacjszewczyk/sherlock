[
  {
    "information_requirement": "Is the adversary maintaining persistence using the Emond service?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.014",
        "name": "Emond",
        "evidence": [
          {
            "description": "A new file created in `/etc/emond.d/rules/` has a SHA256 hash that matches a known-malicious hash from threat intelligence, or a process spawned by `/sbin/emond` has a command line that matches a known-malicious signature.",
            "data_sources": [
              "macOS ESF file creation event logs",
              "macOS process execution logs (including command line arguments)",
              "Threat Intelligence Platform hash and signature feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "EDR logs from all macOS endpoints; Threat Intelligence Platform API; SIEM correlation engine",
            "action": [
              "For each file creation event in `/etc/emond.d/rules/`, compute the file's SHA256 hash and query a threat intelligence feed for a match. Additionally, for each child process of `/sbin/emond`, compare its full command line against a list of known-bad command-line regular expressions. Generate a high-severity alert on any match.",
              "For all commands executed by `/sbin/emond` child processes, calculate the Shannon entropy of the command-line arguments. Establish a baseline of entropy scores from known-benign emond activity over a 30-day period. Generate an alert for any command whose entropy score exceeds the 99th percentile of the baseline, indicating potential obfuscation.",
              "Train a supervised classification model, such as XGBoost, using a labeled dataset of benign and malicious process command lines. Engineer features including command line length, argument count, presence of special characters, Shannon entropy, and TF-IDF scores of argument n-grams. Deploy the model to classify new processes spawned by `/sbin/emond` and alert on any process classified as 'malicious' with a confidence score above 0.9."
            ]
          },
          {
            "description": "A new or modified `.plist` file in `/etc/emond.d/rules/` contains a `RunCommand` or `RunExecutable` key whose value is a script interpreter (e.g., `python`, `osascript`, `bash`) or a binary located in a world-writable directory (e.g., `/tmp/`, `/Users/Shared/`).",
            "data_sources": [
              "macOS file integrity monitoring logs for `/etc/emond.d/rules/`",
              "EDR file content inspection logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Integrity Monitoring (FIM) solution; EDR agent logs on all macOS endpoints; SIEM for content parsing and alerting",
            "action": [
              "Create a detection rule that triggers on file write/modification events in `/etc/emond.d/rules/`. Upon trigger, parse the `.plist` file content. Generate an alert if the XML contains a `RunCommand` or `RunExecutable` key and its string value matches a regex for script interpreters or paths like `'/tmp/.*'` or `'/Users/Shared/.*'`.",
              "Over a 30-day rolling window, build a frequency table of all unique command strings found in the `RunCommand`/`RunExecutable` keys of emond rules across the enterprise. Treat this table as an allowlist of known-good commands. Alert on any new rule containing a command string not present in the established allowlist, as this represents a statistically rare event.",
              "Apply an NLP topic modeling technique, such as Latent Dirichlet Allocation (LDA), to the corpus of command strings from emond rules. Benign commands should cluster into a few topics (e.g., 'system maintenance'). Train a classifier on these topic distributions. A new command that does not fit well into any benign topic or forms a new, distinct topic should be flagged as anomalous."
            ]
          },
          {
            "description": "The `/sbin/emond` daemon, which normally has no child processes, spawns a child process, or a file is created in `/etc/emond.d/rules/` by a process not on the approved allowlist of system administration or configuration management tools.",
            "data_sources": [
              "macOS process execution logs (with parent process name and path)",
              "macOS ESF file creation event logs (with parent process context)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all macOS endpoints aggregated in a SIEM/data lake",
            "action": [
              "Create a SIEM rule that generates a high-severity alert for any process creation event where the parent process name is `/sbin/emond`. Create a second rule that alerts if a file creation event occurs in `/etc/emond.d/rules/` and the creating process is not on an explicit allowlist (e.g., `ansible`, `jamf`, `bash` running from a known admin script).",
              "For all file creation events in `/etc/emond.d/rules/`, maintain a frequency count of the parent processes responsible. After an initial baselining period of 30 days, any file creation by a parent process not seen during the baseline period is a statistical anomaly and should generate an alert.",
              "Model the count of child processes spawned by `/sbin/emond` per host per hour as a time series. The expected value is zero. Apply a simple time-series anomaly detection model, such as an Exponentially Weighted Moving Average (EWMA). Any non-zero value is, by definition, an anomaly and should trigger an immediate alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to escalate privileges via the Emond service?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.014",
        "name": "Emond",
        "evidence": [
          {
            "description": "A process spawned by `/sbin/emond` (running as root) executes a command containing arguments or patterns indicative of reconnaissance (`whoami`, `id`), user manipulation (`dscl`), or reverse shells (`bash -i >& /dev/tcp/...`).",
            "data_sources": [
              "macOS process execution logs (with UID, command line arguments, parent process)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "EDR process logs from all macOS endpoints; Network gateway Zeek sensors",
            "action": [
              "Monitor command lines for processes where the parent is `/sbin/emond` and the UID is 0 (root). Use regular expressions to match against known privilege escalation and post-exploitation commands (e.g., `dscl . -create`, `nc -e`, `chmod u+s`). Correlate any matching process with network logs (`Zeek conn.log`) to check for immediate outbound connections to untrusted IPs.",
              "For all root-level commands spawned by `/sbin/emond`, calculate the length of the command-line arguments. Establish a baseline length from known-good administrative scripts. Alert on any command whose argument length exceeds the 98th percentile of all system-wide root command argument lengths, as this may indicate an encoded payload.",
              "Train a one-class SVM model using features from known-benign root-level processes. Features should include command path, argument count, and n-gram frequencies from the arguments. Apply this model to score any new process spawned by `/sbin/emond`. A process classified as an 'outlier' is a high-confidence indicator of a novel privilege escalation attempt."
            ]
          },
          {
            "description": "An emond rule file (`.plist`) is created or modified to contain a `RunCommand` or `RunExecutable` action that writes to a privileged directory (`/Library/LaunchDaemons`, `/etc/sudoers.d/`), creates a new user via `dscl`, or modifies system-level permissions with `chmod`/`chown`.",
            "data_sources": [
              "macOS file integrity monitoring logs",
              "EDR file content inspection logs for `/etc/emond.d/rules/`"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File content logs from all macOS endpoints, specifically monitoring `/etc/emond.d/rules/`; SIEM for content analysis and correlation",
            "action": [
              "Parse the content of any new file in `/etc/emond.d/rules/`. Use regular expressions to detect commands known to be used for privilege escalation, such as `dscl`, `visudo`, `chmod ... /etc/passwd`, or writing files to `/Library/LaunchDaemons/`. Generate a critical alert upon match.",
              "Develop a risk scoring model for new emond rules. Assign points based on statistically rare characteristics: +5 for a command string never seen before; +10 for targeting a file path in the bottom 1% of write frequency (e.g., `/etc/sudoers`); +3 for having an argument count >2 standard deviations above the mean for system commands. Alert if a rule's total score exceeds a threshold of 10.",
              "Represent system activity as a graph where nodes are processes, files, and users. When a process creates an emond rule, create an edge `(process) -> [writes_rule] -> (rule_file)`. When the rule executes, create an edge `(rule_file) -> [executes_command] -> (target_file_or_user)`. Use a graph-based anomaly detection algorithm to identify when a low-privilege process creates a rule that ultimately modifies a high-privilege node, flagging this path as a privilege escalation."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a short time window: 1) a file is written to `/etc/emond.d/rules/`, 2) `/sbin/emond` spawns a child process, and 3) that process or its descendants either create a new user in the admin group or write a new file to `/Library/LaunchDaemons` or `/Library/LaunchAgents`.",
            "data_sources": [
              "macOS ESF file creation event logs",
              "macOS process execution logs (with process lineage)",
              "macOS Unified Logs for user/group management events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized SIEM platform capable of stateful, cross-source event correlation; EDR logs from all macOS endpoints",
            "action": [
              "In a SIEM, create a stateful correlation rule that triggers when the following events occur on the same host within 5 minutes: Event A: File write to path `/etc/emond.d/rules/`. Event B: Process creation with parent `/sbin/emond`. Event C: Process creation where the command includes `dscl . -append /Groups/admin` or file write to path `/Library/LaunchDaemons/`. The rule requires that Event C's process is a descendant of Event B's process. Alert on a successful correlation.",
              "For each process spawned by `/sbin/emond`, track the number of 'security-relevant' child events it generates in the next 10 minutes (e.g., file writes to system directories, user management commands, outbound network connections). Establish a baseline for this metric across all system processes. If an emond-spawned process generates a count of such events that is more than 3 standard deviations above the system-wide baseline, flag the entire event chain.",
              "Train a sequence analysis model, such as a Recurrent Neural Network (RNN), on sequences of system call and process events from benign host activity. Feed real-time event sequences from each host into the model. An anomalous sequence, such as `(process_A_writes_emond_rule) -> (emond_spawns_process_B) -> (process_B_creates_admin_user)`, will receive a high anomaly score from the model and trigger an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]