[
  {
    "information_requirement": "Is the adversary maintaining persistence via network logon scripts? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037.003",
        "name": "Network Logon Script",
        "evidence": [
          {
            "description": "A process is spawned by a network logon script interpreter where the child process hash or command line matches known indicators of malicious activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations, DNS Servers",
            "action": [
              "Create a query to identify process creation events (Windows Event ID 4688) where the parent process name is a logon script interpreter (e.g., 'cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe') and the creator process is a logon process. Match the child process's file hash and command-line arguments against a threat intelligence feed of known malicious hashes, domains, IPs, and patterns.",
              "For each unique logon script path, build a historical profile of all child processes it spawns. Calculate the frequency of each 'NewProcessName' and its command-line arguments. Generate an alert for any execution where a child process or argument combination appears that is statistically rare (e.g., observed in less than 1% of historical executions for that script).",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on features extracted from process creation events. Features should include command-line length, character entropy, presence of keywords ('-enc', 'IEX', 'download'), parent process name, and user context. Use the model to classify each new script execution as benign or malicious, assigning a risk score."
            ]
          },
          {
            "description": "A command executed by a logon script contains high-entropy strings, suspicious keywords, or invokes a LOLBin with parameters for downloading or executing code.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations",
            "action": [
              "Use regular expressions on process command lines (Windows Event ID 4688) to detect common obfuscation patterns (e.g., PowerShell's '-e', '-enc', 'FromBase64String'; VBScript's 'ChrW', 'AscW') or the use of LOLBins (e.g., 'certutil.exe -urlcache', 'bitsadmin.exe /transfer') when the parent process is a logon script interpreter.",
              "Calculate the character entropy and the ratio of non-alphanumeric characters for every command line executed by a logon script. Establish a baseline distribution for these metrics across all scripts. Flag any command line where the entropy or character ratio exceeds a dynamic threshold (e.g., the 99th percentile), indicating likely obfuscation.",
              "Implement an unsupervised autoencoder model trained on tokenized command-line arguments from known benign logon scripts. A high reconstruction error for a new command line indicates it is anomalous and does not conform to learned benign patterns, suggesting potential obfuscation or malicious intent."
            ]
          },
          {
            "description": "A logon script file located in a SYSVOL or Netlogon share is modified by a user account not authorized for such changes or at a time outside of established maintenance windows.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 5145"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (hosting SYSVOL/Netlogon shares)",
            "action": [
              "Monitor file system audit logs (Windows Event ID 4663, 5145) for write access events ('Accesses: WriteData' or '%%4417') on files within the '\\\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\scripts' or '\\\\<DOMAIN>\\NETLOGON' shares. Trigger an alert if the 'SubjectUserName' performing the modification is not on a pre-approved allowlist of administrative accounts.",
              "Profile the timestamps of all modification events for logon scripts to establish a baseline of normal change windows (e.g., 9 AM - 5 PM on weekdays). Alert on any file modification that occurs more than two standard deviations from the mean modification time or occurs on a statistically unusual day (e.g., Saturday, Sunday).",
              "Apply a time-series anomaly detection algorithm (e.g., Seasonal Hybrid ESD) to the daily/hourly count of logon script modification events. The model will learn the regular cadence of administrative activity and flag any day or hour that has a statistically significant deviation from the forecasted pattern, such as a single modification at 3 AM."
            ]
          },
          {
            "description": "A process spawned by a logon script establishes a network connection that exhibits C2 characteristics, such as connections to a known malicious destination, periodic beaconing, or use of DGA-like domains.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, User Workstations",
            "action": [
              "Correlate process creation events (Windows Event ID 4688) from logon scripts with subsequent network connections by that process's ID using Zeek conn.log. Join this data with threat intelligence feeds and alert if the destination IP address or requested domain (from Zeek dns.log) is on a blocklist.",
              "For network connections originating from logon script processes, analyze connection metadata from Zeek conn.log. Calculate the Shannon entropy of queried domain names to detect high-entropy DGA patterns. Additionally, for connections to the same destination, calculate the variance in the inter-arrival time; a low variance suggests periodic, machine-generated beaconing.",
              "Train an Isolation Forest model on features of benign network connections originating from logon scripts. Use features from Zeek logs such as destination port, protocol, connection duration, bytes sent/received, and DNS query/answer pairs. Use the trained model to assign an anomaly score to new connections, flagging those that are highly anomalous for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using network logon scripts for privilege escalation? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037.003",
        "name": "Network Logon Script",
        "evidence": [
          {
            "description": "A process spawned by a logon script executes a command containing strings or patterns associated with known Local Privilege Escalation (LPE) exploits or tools.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers",
            "action": [
              "Develop and maintain a set of regular expressions to search process command lines (Windows Event ID 4688) for strings indicative of LPE tools and exploits (e.g., 'JuicyPotato', 'PrintNightmare', 'efspotato.exe', 'PetitPotam', specific CLSIDs or named pipes used in exploits) where the parent process is a logon script interpreter.",
              "For each logon script, establish a baseline of the commands it executes. Calculate the rarity of each command string using a metric like Term Frequency-Inverse Document Frequency (TF-IDF) across the entire organization. Flag commands that are common in a single script but extremely rare enterprise-wide, as this may indicate a targeted exploit script.",
              "Fine-tune a pre-trained NLP transformer model (e.g., BERT) on a dataset of malicious and benign command-line arguments. Use the model to generate embeddings for new command lines from logon scripts. Perform clustering (e.g., DBSCAN) on these embeddings to identify clusters of anomalous commands that are semantically different from known benign command structures."
            ]
          },
          {
            "description": "A logon script executes a system utility (e.g., net.exe, sc.exe, schtasks.exe) with arguments that create or modify privileged accounts, services, or tasks.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers, Domain Controllers",
            "action": [
              "Create high-fidelity detection rules that search command-line logs for specific, sensitive argument combinations executed by logon scripts, such as 'net localgroup Administrators [username] /add', 'sc create [service] binPath=...', or 'schtasks /create ... /ru SYSTEM'.",
              "Profile the usage of administrative utilities (net.exe, sc.exe, etc.) by all logon scripts. For each utility, baseline the frequency of different argument patterns (e.g., 'net' with 'user', 'net' with 'localgroup'). Flag any execution from a logon script that uses a statistically rare combination of arguments not seen in established administrative scripts.",
              "Train a sequence-based Recurrent Neural Network (RNN/LSTM) on the sequence of process executions during normal logon sessions for different user roles. The model learns the expected sequence (e.g., logon -> script -> outlook.exe). An alert is triggered if the model observes a sequence that significantly deviates from learned patterns, such as a logon script followed by 'sc.exe create'."
            ]
          },
          {
            "description": "Anomalous commands are executed from a recently modified logon script during a privileged user's logon session.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User Workstations, Member Servers",
            "action": [
              "Create a correlation rule that triggers when: (1) A file write event (Windows Event ID 4663) occurs on a known logon script file; (2) Within a 5-minute window, a logon event (Windows Event ID 4624) for a high-privilege user occurs; and (3) A subsequent process creation event (Windows Event ID 4688) is observed where the executed command is on a watchlist of suspicious commands (e.g., 'net user', 'whoami /all').",
              "For each privileged user account, maintain a historical baseline of all command lines executed by their logon scripts. After a script modification event is detected for that user, compare any new command lines against their personal baseline using a string similarity metric (e.g., Levenshtein distance or Jaccard similarity). Flag any command with a low similarity score as a significant deviation.",
              "Construct a user-activity graph where nodes represent users, scripts, and commands. Use machine learning to detect anomalous paths that represent a privilege escalation chain, such as a low-privilege user modifying a script that is later executed by a privileged user to run a command never before seen in that context. Graph algorithms can score the risk of these paths."
            ]
          },
          {
            "description": "A process originating from a logon script, running under a standard user context, is observed with an elevated integrity level or spawns a child process as a more privileged user (e.g., NT AUTHORITY\\SYSTEM).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Member Servers",
            "action": [
              "In process creation logs (Windows Event ID 4688), filter for events where the parent process is a logon script interpreter. Create an alert where the 'TokenElevationType' is '%%1936' (TokenElevationTypeFull) but the 'SubjectUserName' is a non-administrative user. This configuration directly indicates a successful UAC bypass or similar elevation.",
              "For each user, establish a baseline of the 'TokenElevationType' value for processes spawned by their logon scripts. Most should be '%%1937' (Default) or '%%1938' (Limited). Generate a statistical alert if a user's script suddenly spawns a process with '%%1936' (Full), as this represents a deviation from their normal privilege level.",
              "Train a decision tree classifier on process creation event features including 'ParentProcessName', 'SubjectUserName', 'TokenElevationType', and keywords from the 'CommandLine'. The model can learn the legitimate rules for elevation (e.g., an administrator running a specific tool that prompts for UAC). Any elevation that violates these learned rules would be flagged as a potential malicious privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]