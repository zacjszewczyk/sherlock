[
  {
    "information_requirement": "Has the adversary established an Adversary-in-the-Middle (AiTM) position to intercept or manipulate ICS network communications? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0830",
        "name": "Adversary-in-the-Middle",
        "evidence": [
          {
            "description": "Anomalous ARP activity is observed on the Process Control Network (PCN), defined by one or more of the following: 1) An ARP reply or gratuitous ARP associates a critical ICS asset's IP address (e.g., PLC, HMI) with a MAC address not on a pre-defined hardware allowlist. 2) A single MAC address claims ownership of multiple IP addresses (>3) in a short time window (< 60 seconds). 3) A critical ICS asset's IP-to-MAC mapping changes more than a set number of times (>3) within a 5-minute window. 4) An `arp.exe` or `netsh` command is executed on an Engineering Workstation (EWS) to statically modify the ARP cache for a critical asset.",
            "data_sources": [
              "Zeek arp.log",
              "Windows Event ID 4688",
              "Windows Security Event ID 4703"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) switches, managed industrial switches, network taps/sensors within the PCN, Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), SCADA servers, Domain Controllers.",
            "action": [
              "Create and maintain an allowlist of IP-to-MAC address mappings for critical ICS assets. Using Zeek arp.log, generate an alert for any ARP reply (op='reply') or gratuitous ARP packet where the sender's IP-MAC pair does not match the allowlist. Separately, using Windows Event ID 4688, alert on any command-line execution of 'arp.exe -s' or 'netsh interface ipv4 add neighbors' targeting critical asset IPs.",
              "From Zeek arp.log, monitor the network for MAC address flapping. In a sliding 5-minute window, calculate the number of unique MAC addresses associated with each critical IP address. Generate an alert if this count exceeds a dynamic threshold, such as the 99th percentile of change frequency observed across all monitored assets over a 30-day baseline, or a static threshold of 3.",
              "Develop a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on the volume of gratuitous ARP packets per network segment, aggregated in 1-minute intervals. The model, trained on historical 'normal' data, should flag any sudden, sharp spikes in gratuitous ARP volume that have a high reconstruction error, indicating a potential network-wide ARP poisoning event."
            ]
          },
          {
            "description": "Network flow analysis reveals a communication path between a critical ICS asset and its legitimate destination being rerouted through an unauthorized intermediary device. This is evident when a connection from asset A to intermediary B (`A -> B`) is immediately followed by a connection from B to legitimate destination C (`B -> C`), where B is not an approved proxy or gateway for the A-to-C communication path.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network backbone switches within the PCN, firewalls/routers at PCN-DMZ/Enterprise boundaries, SCADA servers, Historian servers, network taps/sensors deployed at critical communication choke points.",
            "action": [
              "Define legitimate communication paths and approved intermediary devices (e.g., data diodes, firewalls) for all critical ICS protocols (e.g., Modbus, DNP3). Using Zeek conn.log, implement a rule that triggers when a connection from a critical asset `A` to an unapproved IP `B` is followed within 1 second by a connection from `B` to a known communication partner `C` of `A`. Correlate with Zeek http.log to alert on any `proxy_host` value not on the approved proxy allowlist.",
              "For each established critical communication path (e.g., HMI to PLC), baseline the round-trip time (RTT) and byte distribution using Zeek conn.log. Generate an alert if the RTT for a path deviates by more than three standard deviations from its historical norm, or if the distribution of `orig_bytes` vs `resp_bytes` changes significantly (e.g., using a Chi-squared test), suggesting traffic inspection or manipulation by an intermediary.",
              "Model the PCN as a directed graph where nodes are IP addresses and edges are connections from Zeek conn.log. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE) to learn normal network topology. The model should identify and alert on structural anomalies, such as the insertion of a new node (the intermediary) into a previously direct and well-established communication path between two critical assets."
            ]
          },
          {
            "description": "Anomalies in TLS/SSL certificates are observed during encrypted sessions involving critical ICS assets (e.g., EWS, Historian). This evidence includes: 1) A certificate's validation status in Zeek ssl.log is not 'ok' (e.g., 'self_signed', 'expired'). 2) A certificate's fingerprint, subject, or issuer does not match the established baseline for that service. 3) A previously unseen certificate is used for a critical service, especially if its subject or issuer fields contain high-entropy, non-human-readable strings.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/sensors at the perimeter of the PCN, network gateways, SCADA servers, Historian servers, remote access VPN concentrators, Engineering Workstations (EWS) that establish encrypted sessions.",
            "action": [
              "Maintain a baseline of known-good certificate fingerprints (SHA1), issuers, and subjects for all encrypted services on critical ICS assets. Using Zeek x509.log and ssl.log, generate a high-severity alert if a connection to a critical asset uses a certificate where a) the fingerprint does not match the baseline, b) `validation_status` is not 'ok', or c) `self_signed` is true for a service that should have a CA-signed certificate.",
              "For newly observed certificates captured in Zeek x509.log, calculate the Shannon entropy of the `subject` and `issuer` common name fields. Alert if the entropy score exceeds the 99th percentile of all previously observed certificates, indicating a potentially algorithmically generated, malicious certificate. Additionally, track the rate of TLS errors (`validation_status` != 'ok') per critical asset and alert if the rate exceeds 3 standard deviations from the 30-day rolling average.",
              "Train a one-class SVM (Support Vector Machine) or an autoencoder on feature vectors extracted from the baselined 'good' certificates in Zeek x509.log (e.g., key length, signature algorithm, validity period, number of extensions). During live monitoring, pass all newly observed certificates through the model. Any certificate that the model classifies as an outlier or has a high reconstruction error is flagged as anomalous and potentially indicative of an AiTM attack."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]