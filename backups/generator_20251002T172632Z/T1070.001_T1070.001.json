[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by clearing logs? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1070.001",
        "name": "Clear Windows Event Logs",
        "evidence": [
          {
            "description": "The execution of a process whose file hash (e.g., SHA256) or file path is associated with a known log-clearing utility (e.g., a variant of Mimikatz).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, User Workstations, Endpoints of privileged users",
            "action": [
              "Symbolic: Create a detection rule to alert when a process creation event (Windows Event ID 4688) contains a process hash that matches a threat intelligence list of known malicious tools with log-clearing functions. The rule should also check for execution from file paths associated with such tools (e.g., C:\\Windows\\Temp\\tool.exe).",
              "Statistical: For each host, profile parent-child process relationships and execution paths observed in Windows Event ID 4688 data. Calculate the frequency of each process name and its execution path across the enterprise. Generate a high risk score when a rare process name (e.g., seen on <1% of endpoints) executes from a low-prevalence directory (e.g., C:\\Users\\Public\\, C:\\PerfLogs\\), especially if the parent process is unusual (e.g., winword.exe spawning cmd.exe).",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) on labeled process execution events (Windows Event ID 4688, 4104). Use features including process name entropy, command-line argument characteristics (length, entropy, presence of suspicious substrings), parent process reputation, and file path statistical rarity. Deploy the model to classify new process executions in real-time as benign or malicious."
            ]
          },
          {
            "description": "The generation of Windows Security Event ID 1102 ('The audit log was cleared'), or the command-line execution of `wevtutil.exe` with 'cl' or 'clear-log' arguments, or the use of the PowerShell cmdlet `Clear-EventLog`.",
            "data_sources": [
              "Windows Event ID 1102",
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Windows Servers with security logging enabled, SIEM/Log Aggregator, Privileged Access Workstations",
            "action": [
              "Symbolic: Create a high-priority, zero-tolerance alert that triggers on any occurrence of Windows Security Event ID 1102. Create a second rule that searches process command-line logs (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104) for case-insensitive regular expressions matching `wevtutil.*cl`, `wevtutil.*clear-log`, or `Clear-EventLog`.",
              "Statistical: Establish a baseline of accounts that legitimately perform administrative actions involving log management. Profile the frequency of `wevtutil.exe` or `Clear-EventLog` usage per user. Trigger an alert if an account outside of this established administrative group executes one of these commands. Further increase risk if the execution time falls outside the user's normal activity window (e.g., > 2 standard deviations from their mean activity hour).",
              "Machine Learning: Apply a Natural Language Processing (NLP) based classification model to command-line and script block content (from Windows Event ID 4688 and 4104). Train the model to identify obfuscated or complex command variations intended to clear logs. Features can include token sequences, character n-grams, and entropy scores to detect commands that are syntactically unusual but functionally equivalent to log clearing."
            ]
          },
          {
            "description": "A file deletion attempt (DELETE access request) is recorded against a log file (e.g., a file ending in '.evtx') located in the default Windows Event Log directory, `C:\\Windows\\System32\\winevt\\Logs\\`.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of critical Windows hosts (Domain Controllers, member servers), especially those with object access auditing enabled on the winevt directory",
            "action": [
              "Symbolic: Deploy a System Access Control List (SACL) on the `C:\\Windows\\System32\\winevt\\Logs\\` directory to audit for delete access. Create a critical-severity alert rule that triggers upon observing Windows Event ID 4663 where the 'Object Name' field contains `\\winevt\\Logs\\` and ends with `.evtx`, and the 'Accesses' field includes 'DELETE'.",
              "Statistical: For each host, monitor the rate of file deletion events (Windows Event ID 4663) specifically for the `winevt\\Logs` directory. Calculate a 30-day rolling average and standard deviation of these events per hour. Trigger an alert if the count in a given hour exceeds the mean plus 3 standard deviations (a 3-sigma event), indicating an abnormal burst of deletion activity against log files.",
              "Machine Learning: Implement an unsupervised anomaly detection model (e.g., Isolation Forest) on file system audit events (Windows Event ID 4663). Use features such as the process name performing the action (e.g., `explorer.exe` vs `svchost.exe`), the target file path, file extension, and type of access requested. The model will learn normal file access patterns and flag the combination of a non-system process requesting 'DELETE' access on a '.evtx' file as a high-scoring anomaly."
            ]
          },
          {
            "description": "A significant, unexplained drop or complete cessation of log forwarding from a host to a central collector, or the explicit stopping of the 'Windows Event Log' service.",
            "data_sources": [
              "Windows Event ID 7036",
              "SIEM internal health/telemetry logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Log Aggregation Platform, Network Flow Collectors, Domain Controllers, Critical Servers",
            "action": [
              "Symbolic: Create a rule that alerts on Windows Event ID 7036 when the service name is 'Windows Event Log' ('eventlog') and the state is 'stopped'. Augment this with a 'missed heartbeat' rule in the SIEM that alerts if a host, known to be active on the network (i.e., has recent traffic in Zeek conn.log), fails to send any logs for a specified interval (e.g., 15 minutes) outside of a planned maintenance window.",
              "Statistical: For each log-forwarding host, ingest SIEM metadata on event count per minute. Establish a baseline distribution of this rate over a rolling 30-day period. Generate an alert if the current rate drops below a percentile-based threshold (e.g., the 5th percentile) for a sustained duration (e.g., more than 5 consecutive minutes) and is not correlated with a system shutdown event (Event ID 1074).",
              "Machine Learning: For each critical host, deploy a time-series forecasting model (e.g., SARIMA or Prophet) trained on historical log volume data (events per minute). The model will predict the expected log volume for the next time interval (e.g., 5 minutes). If the actual observed volume falls significantly below the model's prediction confidence interval (e.g., below the lower bound of the 99% interval), trigger an anomaly alert, effectively detecting 'unnatural' silence."
            ]
          },
          {
            "description": "The temporal correlation of a log clearing indicator (e.g., Event ID 1102) on a host with other suspicious activities, such as privilege escalation or persistence mechanism installation, within a narrow time frame.",
            "data_sources": [
              "Windows Event ID 1102",
              "Windows Event ID 4688",
              "Windows Event ID 4672",
              "Windows Event ID 4720",
              "Windows Event ID 7045",
              "Windows Event ID 4728",
              "Windows Event ID 4732"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Correlation Engine, Domain Controllers, Critical Application Servers",
            "action": [
              "Symbolic: Implement a SIEM correlation rule that creates a high-severity incident if a log clearing event (Event ID 1102 or command-line match from 4688) occurs on the same host within 30 minutes of a high-risk precursor event like special privilege assignment (4672), new user creation (4720), user added to a privileged group (4728, 4732), or new service installation (7045).",
              "Statistical: Develop a dynamic host-based risk scoring system. Assign weighted points to security events based on their ATT&CK mapping (e.g., Privilege Escalation: +15, Persistence: +20, Defense Evasion/Log Clearing: +50). Sum these scores over a sliding 60-minute window for each host. Trigger an investigation when a host's score exceeds a dynamic threshold, such as the 99th percentile of all active host scores, indicating a rapid accumulation of risk.",
              "Machine Learning: Model security alerts as a graph where nodes are entities (users, hosts, processes) and edges represent events connecting them. Apply graph analytics algorithms (e.g., community detection) to identify subgraphs representing attack sequences. A subgraph containing a node for 'log clearing' that is closely connected in time to nodes for 'credential access' and 'lateral movement' represents a high-confidence, automatically correlated attack narrative."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]