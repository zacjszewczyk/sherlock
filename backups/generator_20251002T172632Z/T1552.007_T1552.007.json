[
  {
    "information_requirement": "Has an adversary gained access to credentials by exploiting container APIs? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1552.007",
        "name": "Container API",
        "evidence": [
          {
            "description": "An HTTP request to a container API (e.g., Docker, Kubernetes) on ports 2375, 2376, 6443, or 10250 originates from a source IP address on a threat intelligence list or uses a User-Agent string associated with known malicious scanners.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Hosts running the Kubernetes API Server or Docker Daemon, network gateways and load balancers proxying traffic to the container orchestration plane, cloud network flow logs.",
            "action": [
              "Execute a query to cross-reference the source IP address (`id.orig_h`) in Zeek conn.log and http.log records against a threat intelligence feed of known malicious IPs for traffic destined to container API ports (e.g., 2375, 2376, 6443, 10250). Generate a high-priority alert for any match.",
              "For all requests to container API ports, calculate the frequency of each User-Agent string observed in Zeek http.log over a 24-hour period. Flag any User-Agent that is present in less than 0.1% of requests and matches patterns of common scanning tools (e.g., 'Docker-Client', 'Go-http-client', 'curl', 'Nmap').",
              "Deploy a pre-trained classification model (e.g., Logistic Regression) to score incoming API requests in real-time. Use features from Zeek logs such as the source IP's reputation score, ASN, User-Agent string entropy, and the presence of unusual HTTP headers to classify the request as benign or malicious."
            ]
          },
          {
            "description": "An HTTP request is made to a sensitive container API endpoint known to expose credentials, secrets, or provide container execution capabilities, such as the Kubernetes secrets API (`/api/v1/secrets`) or the Docker exec endpoint (`/containers/{id}/exec`).",
            "data_sources": [
              "Zeek http.log",
              "Kubernetes Audit Logs",
              "Docker Daemon Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Docker Daemon hosts, container runtime environment, cloud provider's managed Kubernetes service (e.g., GKE, EKS, AKS) control plane.",
            "action": [
              "Create a high-severity alert for any API request observed in Zeek http.log or Kubernetes Audit Logs that targets a watchlist of sensitive paths, including `/api/v1/secrets`, `/api/v1/namespaces/.*/pods/.*/exec`, `/containers/.*/exec`, or `/containers/.*/logs`. Maintain a whitelist of authorized administrative accounts and tools that are permitted to access these endpoints.",
              "For each user and source IP, establish a historical baseline of unique API paths accessed over a 30-day period. For each new session, calculate the Jaccard distance between the set of API paths accessed and the user's historical baseline. Flag sessions with a high deviation score, especially if the session includes access to sensitive paths not in the baseline.",
              "Train a sequence analysis model, such as an LSTM autoencoder, on legitimate sequences of API calls per user role. Deploy the model to analyze API call sequences in real-time. Flag user sessions that produce a high reconstruction error, indicating a significant deviation from normal workflows, particularly if the anomalous sequence involves access to a sensitive endpoint."
            ]
          },
          {
            "description": "A single source IP address or user account performs broad API discovery actions (e.g., accessing `/api`, `/apis`, `/version`) followed by targeted access to sensitive resources like secrets or container logs within a 15-minute window.",
            "data_sources": [
              "Zeek http.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, container orchestration plane, API gateway logs.",
            "action": [
              "Implement a correlation rule that triggers when a single source IP makes requests to discovery endpoints (e.g., `/api`, `/apis`) and then, within a 10-minute window, makes a request to a sensitive endpoint on a watchlist (e.g., `/secrets`, `/exec`, `/logs`). Alert on this 'scan-then-exploit' behavior.",
              "For each 5-minute window per source IP, calculate the Shannon entropy of the requested API URI paths from Zeek http.log or Kubernetes Audit Logs. Alert when a source IP exhibits a pattern of high entropy (value > 3.0, indicating discovery) in one window, followed by low entropy (value < 1.0) with targeted requests to sensitive paths in the next window.",
              "Apply a clustering algorithm like DBSCAN to sessionized API request data. Use features for each session such as the count of unique API paths, ratio of GET to POST requests, and a boolean flag for sensitive endpoint access. Investigate sessions that form small, distinct clusters or are labeled as noise, as they may represent the anomalous 'scan-then-exploit' behavior."
            ]
          },
          {
            "description": "A source IP or user account generates a volume of API requests or a data transfer size that exceeds established baselines by a significant margin, particularly when accessing endpoints for logs or container exports.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network load balancers, Kubernetes API Server, Docker Daemon hosts, network egress points.",
            "action": [
              "Create a rule with a static threshold to alert if any single, non-whitelisted source IP downloads more than 100MB of data (from `resp_bytes` in Zeek conn.log) from a container API log endpoint in a single session.",
              "For each source IP and user, establish a dynamic baseline for API request count and total bytes transferred per hour using a 30-day rolling average and standard deviation. Generate an alert if the activity in any given hour exceeds 3 standard deviations above the mean for that specific identity.",
              "Implement a time-series forecasting model (e.g., ARIMA) for key metrics like total API requests and bytes transferred per hour for the container API environment. An alert is generated when the observed values significantly deviate from the forecasted values and their confidence intervals, indicating a system-wide anomaly potentially caused by data exfiltration."
            ]
          },
          {
            "description": "A source IP or user account retrieves log data from an unusually high number of distinct containers or downloads a total volume of log data that far exceeds normal administrative activity.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Kubernetes Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, container log aggregation service, Docker Daemon hosts.",
            "action": [
              "Create a rule that alerts when a non-administrative user account or an IP address external to the organization's known ranges makes any request to a log retrieval endpoint (e.g., `/containers/.*/logs`, `/api/v1/namespaces/.*/pods/.*/log`). Maintain a whitelist of approved users and IP ranges.",
              "For each user, calculate the 95th percentile of (a) data volume downloaded from log endpoints per hour (`resp_bytes` in Zeek conn.log) and (b) the number of unique containers whose logs are accessed per hour. Alert when a user exceeds either of these established percentile thresholds in a given hour.",
              "Model user behavior for log access using peer group analysis. First, cluster users based on their roles and permissions. Within each cluster, an alert is triggered when a user's log access behavior (e.g., volume, frequency, number of distinct containers accessed) deviates significantly (e.g., > 3 standard deviations) from the centroid of their assigned peer group."
            ]
          },
          {
            "description": "A Kubernetes service account token, normally used by pods within the cluster, is used in an API request originating from an IP address external to the defined internal cluster network.",
            "data_sources": [
              "Kubernetes Audit Logs",
              "Zeek conn.log",
              "Cloud Provider Authentication Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kubernetes API Server, Identity and Access Management (IAM) service, network gateways, cloud control plane.",
            "action": [
              "Create a high-priority alert that triggers when a Kubernetes Audit Log event shows authentication by a service account (username format `system:serviceaccount:<namespace>:<serviceaccountname>`) where the request's source IP, found in the `sourceIPs` field, is not within the defined internal pod or service IP CIDR ranges.",
              "For each service account, build a baseline of source IP subnets and User-Agents used for authentication. Alert when an authentication event occurs with characteristics that are statistically rare for that identity, such as a source IP from a public or previously unseen ASN.",
              "Use a clustering algorithm (e.g., K-Means) on authentication events. Feature engineer attributes such as identity type (user vs. service account), source location (internal vs. external cluster IP), User-Agent, and time of day. Investigate authentications that fall into small, distant clusters, as they represent anomalous access patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]