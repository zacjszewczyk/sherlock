[
  {
    "information_requirement": "Is an adversary attempting to inhibit response functions by modifying system firmware? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "A file transfer to a critical ICS device (e.g., PLC, RTU) is identified as a firmware image (via file extension, MIME type 'application/octet-stream', or magic byte signature) and the transfer is anomalous because one or more of the following conditions are met: the transfer occurs outside a pre-approved maintenance window; the source IP is not on the authorized list of Engineering Workstations or vendor update servers; the protocol used (e.g., HTTP, SMB) is not the designated protocol for firmware updates (e.g., FTP, TFTP); or the file size deviates by more than 3 standard deviations from the historical baseline for that specific device model's firmware.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek ftp.log",
              "Zeek tftp.log",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments hosting PLCs/RTUs, Network segments containing Engineering Workstations (EWS), Industrial Demilitarized Zone (IDMZ) for vendor remote access, Enterprise/ICS network boundary points.",
            "action": [
              "Maintain an allowlist of authorized source IPs (EWS, vendor servers) and designated protocols/ports (e.g., FTP/21, TFTP/69) for firmware updates per critical ICS device. Monitor Zeek files.log for transfers to critical ICS device IPs where mime_type is 'application/octet-stream' or filename matches firmware patterns (e.g., *.bin, *.fw). For each matching transfer, correlate via the 'uid' field to the corresponding Zeek conn.log entry. Trigger a high-severity alert if the 'id.orig_h' (source IP) or 'proto'/'id.resp_p' (protocol/port) from conn.log is not on the device's specific allowlist.",
              "For each ICS device model, establish a 90-day baseline of legitimate firmware update file sizes from files.log ('seen_bytes') to calculate the mean and standard deviation. For any detected firmware file transfer, calculate the Z-score of its size. Maintain a baseline of update times (time of day, day of week) and source IPs from conn.log ('ts', 'id.orig_h'). Generate a risk score: add points if the file size Z-score > 3, if the transfer time falls outside the 95th percentile of normal maintenance windows, or if the source IP has not been seen updating this device class in the last 90 days. Trigger an alert if the cumulative risk score exceeds a predefined threshold.",
              "Train an anomaly detection model (e.g., Isolation Forest) on a feature set derived from historical Zeek conn.log and files.log data for legitimate firmware updates. Construct a feature vector for each new transfer event, including: 'file_size' (from files.log.seen_bytes), 'transfer_duration' (from files.log.duration), 'protocol_used' (categorical, from conn.log.proto), 'is_source_known' (binary, based on historical sources), 'is_maintenance_window' (binary), and 'hour_of_day'. Apply the trained model to each new firmware transfer event to generate an anomaly score. Trigger an alert for any transfer flagged as an outlier (e.g., scores in the top 1% percentile), as its combination of features is uncharacteristic of past legitimate updates."
            ]
          },
          {
            "description": "An ICS vendor firmware update utility is executed on an Engineering Workstation (EWS) or HMI, and the execution is anomalous based on at least one of the following verifiable conditions: the executing user account is not a member of the authorized 'ICS Firmware Admins' group; the process hash does not match the allowlist of approved utility versions; the process is spawned by an unusual parent process (e.g., 'outlook.exe' instead of 'explorer.exe'); or the command-line arguments specify a target device IP that is not in the asset inventory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Active Directory security logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) in the Process Control Network, Human-Machine Interfaces (HMIs) in the control room, Active Directory domain controllers for the ICS environment, Identity and Access Management (IAM) systems.",
            "action": [
              "Maintain an allowlist of firmware utility process names, their corresponding SHA256 hashes, and valid digital signer subjects. Monitor Windows Event ID 4688 on EWS/HMIs for executions of these utilities. Trigger an alert if a process name matches but its hash or signer does not. Correlate the 'SubjectUserSid' from Event ID 4688 with Active Directory logs to verify membership in an authorized 'ICS Firmware Admins' group; alert if the user is not authorized. Parse the 'CommandLine' field to extract target IP addresses and alert if the target is not a known, valid ICS device from the asset inventory.",
              "For each EWS and authorized user, baseline the typical execution frequency and time-of-day for each firmware utility using 180 days of Windows Event ID 4688 data. Calculate the 95th percentile for execution times (e.g., outside 8am-5pm Mon-Fri). For each new execution, score it based on deviations: add points if it occurs outside the 95th percentile of time, if the daily execution count for that user/host pair exceeds 3 standard deviations of its baseline, or if the parent process (ParentProcessName) is rare (in the bottom 5% of historical parent processes for that utility). Trigger an alert if the cumulative score passes a defined threshold.",
              "Deploy a User and Entity Behavior Analytics (UEBA) model that learns a multidimensional profile for each authorized user and EWS. Create feature vectors for each execution event, including: process name, parent process name, command-line argument patterns (e.g., using tokenization and TF-IDF), time of day, and logon type (from correlated Event ID 4624). Train a one-class SVM or other classification model to establish a boundary of normal behavior for sessions involving firmware updates. Trigger an alert when an execution is part of a session that the model classifies as a high-scoring anomaly, indicating a significant break from the user's or host's established behavior patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary establishing persistence by implanting malicious system firmware? (PIR)",
    "tactic_id": "TA0110",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T0857",
        "name": "System Firmware",
        "evidence": [
          {
            "description": "Within 60 minutes following a suspected malicious firmware transfer to a critical ICS device, the device's network behavior changes in a measurable way, such as: initiating connections to previously unseen external or internal IP addresses; using new network protocols or services (e.g., DNS, HTTP) not on the device's baseline communication profile; an increase in ICS protocol 'write' or 'stop' function codes; or a statistically significant increase (e.g., >3 standard deviations) in data volume or connection frequency.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek modbus.log",
              "Zeek dnp3.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments containing critical controllers (PLCs/RTUs), Network egress points from the Process Control Network (PCN), Industrial Demilitarized Zone (IDMZ) gateways, Network connections to corporate/enterprise DNS and proxy servers.",
            "action": [
              "Upon an alert for a suspicious firmware update to a device IP, begin a 60-minute enhanced monitoring period for that IP's traffic. During this period, query Zeek conn.log and dns.log for any outbound connections from the device IP to destinations on a threat intelligence feed of known C2 servers and trigger an alert on any match. Query ICS-specific logs (e.g., Zeek modbus.log) for any 'write' function codes (e.g., write_single_coil, write_multiple_registers) or diagnostic/stop commands originating from the device; alert if these are not part of a planned action.",
              "For each critical ICS device, maintain a 90-day rolling baseline of its communication profile from Zeek logs, including: a set of known destination IPs, a set of known destination ports/protocols, mean/std dev of hourly connection count, and mean/std dev of hourly data volume. Following a firmware update, compare the device's traffic in the subsequent hour against its baseline. Trigger an alert if any new destination IPs or destination ports appear that were not in the 90-day baseline. Calculate the Z-score for the post-update hourly connection count and data volume; trigger an alert if either Z-score > 3.",
              "For each critical device, train a time-series anomaly detection model (e.g., LSTM Autoencoder) on its multivariate network traffic data (features: bytes per second, connections per second, unique destination IPs per minute). Continuously feed the device's live traffic data into the trained model to generate a reconstruction error. Following a firmware update, monitor this reconstruction error. Trigger an alert if the reconstruction error for the post-update period spikes significantly above the established baseline (e.g., exceeds the 99th percentile of historical errors), indicating the new behavior does not conform to any previously observed legitimate pattern."
            ]
          },
          {
            "description": "A file transferred to or found on a key system (EWS, file share) is identified as a firmware image (by name, MIME type, or magic bytes), and its SHA256 hash does not match any entry in the curated allowlist of approved firmware versions for the intended target device model, or the hash matches a known-malicious hash from a threat intelligence feed.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Windows Event ID 4688",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments, Engineering Workstations (EWS), Centralized firmware management servers and repositories, Network File Shares in the PCN or IDMZ, Systems running file integrity monitoring (FIM) agents.",
            "action": [
              "Maintain a central database mapping ICS device models to a list of approved firmware versions and their corresponding SHA256 hashes. Subscribe to a threat intelligence feed of known malicious firmware hashes. For every file identified as firmware (e.g., via Zeek files.log), compute its SHA256 hash. Correlate with network data (conn.log) or host data (Event ID 4688) to identify the intended target device. Look up the device model in the asset inventory. Trigger a high-severity alert if the file's hash is not in the approved list for that model OR if the hash is present on the malicious blacklist.",
              "For firmware files with unknown hashes (not on the allowlist or denylist), perform a comparative statistical analysis. For the target device model, create a statistical profile of all known-good firmware files, including file size and byte-level entropy. Calculate the file size and entropy of the unknown firmware file. Calculate the Z-score for both the size and the entropy of the unknown file against the distribution of known-good files. Escalate for analyst review if either Z-score is greater than 3, suggesting the file is abnormally large, small, packed, or encrypted compared to legitimate versions.",
              "Train a binary classification model (e.g., Gradient Boosting, Random Forest) to predict if a firmware file is 'suspicious' or 'benign' based on metadata, without relying solely on its hash. Extract features for each firmware file, including: 'file_size', 'file_entropy', 'has_digital_signature' (boolean), 'transfer_protocol', 'source_ip_reputation', and 'transfer_duration'. Use the approved firmware repository for 'benign' training samples and public malware feeds for 'suspicious' samples. Use this model to score all unknown firmware files in real-time. A high 'suspicious' probability score (e.g., > 0.9) triggers an alert for a file that may be a novel or polymorphic malicious firmware, even if its hash is not yet blacklisted."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "1.5",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]