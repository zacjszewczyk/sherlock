[
  {
    "information_requirement": "Is an adversary evading defenses by modifying property list (plist) files to alter application behavior or hide execution?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1647",
        "name": "Plist File Modification",
        "evidence": [
          {
            "description": "An application's Info.plist file is modified to set the `LSUIElement` key to `1` or `true`, which prevents the application from appearing in the Dock and menu bar, effectively hiding its execution from the user.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically within application bundles (.app) located in /Applications/ and ~/Applications/.",
            "action": [
              "Create a rule to alert whenever a file write operation modifies an Info.plist file and adds or changes the LSUIElement key to a value of '1' or 'true'. Correlate this with the parent process; raise severity if the modifying process is not a known software installer or developer tool (e.g., Xcode).",
              "Establish a baseline of all applications in the environment that legitimately use the LSUIElement key (e.g., background agents). Maintain this as a set of application names or bundle identifiers. Alert when a plist modification sets this key for an application not in the baseline set.",
              "Train a classifier on features of the process that modifies the Info.plist file (e.g., process name, parent process name, command-line arguments, user context). Use the model to flag modifications made by processes that do not resemble legitimate software installers or updaters."
            ]
          },
          {
            "description": "A property list (.plist) file is created or modified in a persistence location, and its content contains strings (e.g., ProgramArguments, LSEnvironment, KeepAlive) that match known-bad indicators of compromise (IOCs) such as malicious file paths, domains, or IP addresses.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically user and system-level LaunchAgent/LaunchDaemon directories.",
            "action": [
              "Query file modification and creation events for .plist files in key directories (`~/Library/LaunchAgents`, `/Library/LaunchAgents`, `/Library/LaunchDaemons`, `~/Library/Preferences/com.apple.dock.plist`). Scan the file content for known-bad domains, IPs, file paths, or argument patterns from a threat intelligence feed. Generate an alert on any match.",
              "For all `ProgramArguments` values in newly modified plists, tokenize the arguments into n-grams (e.g., bigrams, trigrams). Compare the frequency of these n-grams against a pre-computed baseline of all legitimate plists in the environment. Flag plists containing n-grams that fall below a rarity threshold (e.g., 1st percentile).",
              "Apply a pre-trained text classification model (e.g., a fine-tuned BERT model) to the string values within a modified plist (e.g., `ProgramArguments`, `Label`). Generate an alert if the model classifies the content's likelihood of being malicious above a calibrated confidence threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A `Program` or `ProgramArguments` key within a modified .plist file specifies an executable path located in a directory statistically anomalous for application execution, such as temporary directories (`/tmp`, `/var/tmp`), user-shared spaces (`/Users/Shared/`), or hidden directories.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.",
            "action": [
              "Create and maintain a watchlist of non-standard executable directories (e.g., `/tmp/`, `/Users/Shared/`, `~/Downloads/`, `~/Documents/`, `~/.*`). Trigger an alert when a file modification event shows a plist's `Program` or `ProgramArguments` key pointing to an executable within one of these watched directories.",
              "For every endpoint, build a baseline of all executable paths specified in plist files. For each new or modified plist, calculate the rarity of its executable's parent directory based on the enterprise-wide baseline. Flag any plist pointing to a directory in the bottom 5th percentile of frequency.",
              "Train a decision tree or random forest classifier using features derived from the executable path (e.g., directory depth, is_hidden, is_in_user_space, is_in_tmp, character set). Use the trained model to classify new plist-specified paths as 'suspicious' or 'benign' and alert on 'suspicious' classifications."
            ]
          },
          {
            "description": "A modified .plist file's `ProgramArguments` key specifies a common scripting interpreter (e.g., `python`, `osascript`, `bash`, `zsh`, `perl`) followed by arguments exhibiting high Shannon entropy or characteristics of obfuscation.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.",
            "action": [
              "Alert on any plist modification where `ProgramArguments` contains a script interpreter followed by suspicious command-line flags like `-c` (command), `-e` (eval), or arguments containing patterns indicative of base64 encoding.",
              "For any plist that executes a script interpreter, calculate the Shannon entropy of the script content passed in the arguments. Compare the entropy score against a baseline established for legitimate scripts in the environment. Flag any script argument whose entropy exceeds the 95th percentile of the baseline.",
              "Use a clustering algorithm like DBSCAN on feature vectors derived from script arguments (e.g., length, entropy, character frequency, special character count). Investigate clusters that form separately from the large, dense cluster of benign scripts, as these represent anomalous script patterns."
            ]
          },
          {
            "description": "A process initiated by `launchd` (parent PID 1), corresponding to a recently modified .plist file, establishes an outbound network connection to a destination that is statistically rare or has a low reputation score.",
            "data_sources": [
              "macOS EDR Process Creation Events",
              "macOS EDR File Modification Events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all managed macOS endpoints.",
            "action": [
              "Correlate process launch events (parent PID is 1) with network connection logs (`Zeek conn.log`). If the process's executable path is specified in a plist that was modified in the last hour, check the destination IP/domain against a threat intelligence feed of known C2 servers. Alert on any match.",
              "For processes launched by `launchd` from a recently modified plist, analyze associated DNS queries (`Zeek dns.log`). Calculate the public suffix + 1 domain's (PSL+1) rarity based on enterprise-wide query frequency. Alert on connections to domains in the bottom 1% of popularity.",
              "Implement a time-series analysis model (e.g., ARIMA or Prophet) on the volume of new processes launched by `launchd`. Create a forecast based on historical data with confidence intervals. Alert when the observed volume of `launchd`-spawned processes exceeds the forecasted upper confidence interval, indicating a potential mass persistence event."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has an adversary established persistence by modifying property list (plist) files?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1647",
        "name": "Plist File Modification",
        "evidence": [
          {
            "description": "A property list (.plist) file is created or modified in a known persistence directory, and its content contains strings (e.g., ProgramArguments, LSEnvironment) matching known-bad indicators of compromise (IOCs) such as malicious file paths, domains, or IP addresses.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically monitoring `/Library/LaunchAgents`, `~/Library/LaunchAgents`, `/Library/LaunchDaemons`, and other auto-run locations.",
            "action": [
              "Create a rule to scan the contents of newly created or modified .plist files in key persistence directories for known-bad domains, IPs, file paths, or argument patterns from a threat intelligence feed. Generate an alert on any match.",
              "For `ProgramArguments` in plists within persistence locations, calculate the n-gram frequency of argument components. Flag plists containing n-grams that are statistically rare compared to a historical baseline of legitimate persistence plists in the environment.",
              "Apply a pre-trained text classification model to score the likelihood that the string values within a new or modified persistence plist are malicious. Generate an alert if the model's maliciousness score exceeds a predetermined threshold."
            ]
          },
          {
            "description": "A `Program` or `ProgramArguments` key within a modified persistence .plist file specifies an executable path located in a directory not typical for persistent applications, such as temporary directories (`/tmp`, `/var/tmp`), user-shared spaces (`/Users/Shared/`), or hidden directories.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on file systems within user home directories and system-wide temporary locations.",
            "action": [
              "Maintain a watchlist of non-standard executable directories (e.g., `/tmp/`, `/Users/Shared/`, `~/Downloads/`). Alert when a modified persistence plist's `Program` or `ProgramArguments` key points to an executable within one of these watched directories.",
              "Build a baseline of all executable parent directories found in persistence plists across the enterprise. For each new or modified persistence plist, calculate the rarity of its executable's parent directory. Flag any plist pointing to a directory in the bottom 5th percentile of frequency.",
              "Train a decision tree classifier on features of the executable path (e.g., directory depth, is_hidden, is_in_user_space) to classify paths specified in persistence plists as 'suspicious' or 'benign'. Alert on 'suspicious' classifications."
            ]
          },
          {
            "description": "A persistence .plist file's `ProgramArguments` key specifies a common scripting interpreter (e.g., `python`, `osascript`, `bash`) followed by arguments exhibiting high entropy, obfuscation, or direct download/execution patterns.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, specifically monitoring LaunchAgent and LaunchDaemon plist configurations.",
            "action": [
              "Alert on any persistence plist modification where `ProgramArguments` contains a script interpreter followed by suspicious command-line flags (`-c`, `-e`) or arguments containing `base64`, `curl`, or `wget`.",
              "For any persistence plist executing a script interpreter, calculate the Shannon entropy of the script content in the arguments. Compare the score against a baseline for legitimate administrative scripts. Flag any script argument whose entropy exceeds the 95th percentile of the baseline.",
              "Use a clustering algorithm (e.g., DBSCAN) on feature vectors derived from script arguments in persistence plists (e.g., length, entropy, character frequency). Investigate small, sparse clusters that are separate from the main cluster of benign administrative scripts."
            ]
          },
          {
            "description": "A .plist file in a persistence directory (`~/Library/LaunchAgents`, `/Library/LaunchDaemons`) is created or modified by a process not on an allowlist of legitimate software installers or system administration tools, such as by a browser or document reader.",
            "data_sources": [
              "macOS EDR File Modification Events",
              "macOS EDR Process Creation Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed macOS endpoints, focusing on process-to-file-write event correlation in persistence directories.",
            "action": [
              "Maintain an allowlist of parent processes that legitimately modify persistence plists (e.g., `installer`, `softwareupdated`). Alert on any file modification to a plist in these locations by a process not on the list, especially user-facing applications like `Google Chrome`, `Preview`, or `Microsoft Word`.",
              "For each process name that modifies a persistence plist, track its historical frequency. Use a moving average to establish a baseline. Alert when a rare process (e.g., one not seen modifying persistence plists in the last 90 days) performs a modification.",
              "Train a one-class SVM (Support Vector Machine) model on the features of legitimate persistence modification events (e.g., parent process name, command line, user context). Use the trained model to identify any new plist modification events that are outliers and warrant investigation."
            ]
          },
          {
            "description": "A process initiated by `launchd` (parent PID 1), corresponding to a recently modified persistence .plist file, establishes a recurring outbound network connection to a destination that is statistically rare or has a low reputation score.",
            "data_sources": [
              "macOS EDR Process Creation Events",
              "macOS EDR File Modification Events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, and all managed macOS endpoints.",
            "action": [
              "Correlate process launch events (parent is `launchd`) with network connection logs (`Zeek conn.log`). If the process was launched from a plist modified in the last hour, check the destination IP/domain against a threat intelligence feed of known C2 servers. Alert on any match.",
              "For processes launched by `launchd` from a recently modified plist, analyze associated DNS queries (`Zeek dns.log`) and connection logs (`Zeek conn.log`). Identify beaconing behavior by looking for connections to the same destination IP with a regular periodicity (e.g., every 5 minutes +/- 10 seconds). Alert on statistically regular connections to low-reputation or rare domains.",
              "Use a time-series analysis model to forecast the expected data volume per hour for each destination IP associated with a `launchd`-spawned process. Alert if the observed data volume significantly deviates from the forecast, potentially indicating data exfiltration or C2 activity."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-09-30",
    "last_updated": "2025-09-30",
    "contributors": [
      "Ask Sage",
      "Zachary Szewczyk"
    ]
  }
]