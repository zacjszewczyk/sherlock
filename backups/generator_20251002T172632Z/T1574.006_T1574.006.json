[
  {
    "information_requirement": "Is the adversary establishing persistence using dynamic linker hijacking?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.006",
        "name": "Dynamic Linker Hijacking",
        "evidence": [
          {
            "description": "A shared object file (.so, .dylib) is created in a user-writable directory (e.g., /tmp, /home/*) or a standard library path, and its hash matches a known-bad hash from a threat intelligence feed.",
            "data_sources": [
              "Sysmon for Linux Event ID 11",
              "auditd logs",
              "osquery file table"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories, /tmp, /var/tmp, /dev/shm, and standard library paths (/lib, /usr/lib, /lib64) on critical Linux/macOS servers and developer workstations.",
            "action": [
              "Create a detection rule that queries for file creation events (Sysmon for Linux Event ID 11) where the file name ends in '.so' or '.dylib' and the file's hash matches a list of known malicious indicators from a threat intelligence platform.",
              "For each host, establish a statistical baseline of new shared library creations per day in standard library paths. Alert when the daily count exceeds a dynamic threshold, such as the 99th percentile of the trailing 30-day average for that specific host or host group.",
              "Train a file classification model using features such as file path, file entropy, string characteristics (e.g., presence of IP addresses, domain names), and exported function names. Ingest features from new shared libraries and alert on files classified as malicious with high confidence."
            ]
          },
          {
            "description": "A process modifies dynamic linker configuration files, such as /etc/ld.so.preload or files within /etc/ld.so.conf.d/, using shell redirection or command-line tools.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "auditd logs",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The /etc/ directory and its subdirectories on all Linux hosts, particularly application servers, bastion hosts, and container hosts.",
            "action": [
              "Create a detection rule that searches process command lines (Sysmon for Linux Event ID 1) for patterns indicating modification of linker configurations, such as 'echo .* >> /etc/ld.so.preload', 'tee -a /etc/ld.so.preload', or 'ln -s .* /etc/ld.so.conf.d/'.",
              "Calculate the Shannon entropy of command-line arguments for all processes that write to files in the /etc/ directory. Establish a baseline entropy for legitimate administrative commands and alert when a command modifying linker-related files has an entropy score exceeding 3 standard deviations from the norm.",
              "Implement a time-series anomaly detection model to monitor the rate of modifications to /etc/ld.so.preload and files in /etc/ld.so.conf.d/. Generate an alert if modifications occur at a frequency inconsistent with historical patching and software installation cycles, or outside of established maintenance windows."
            ]
          },
          {
            "description": "An export command for `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES` is added to a user's shell configuration file (e.g., .bashrc, .profile, .zshrc).",
            "data_sources": [
              "Sysmon for Linux Event ID 11",
              "auditd logs",
              "File integrity monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on multi-user Linux systems, developer workstations, and administrative jump boxes.",
            "action": [
              "Implement a file integrity monitoring (FIM) rule to alert on any write event to common shell startup files (e.g., `~/.bashrc`, `~/.profile`, `~/.zshrc`, `~/.config/fish/config.fish`) that adds a line containing the strings 'LD_PRELOAD=' or 'DYLD_INSERT_LIBRARIES='.",
              "Profile the frequency of modifications to shell startup files per user. Since these files are rarely changed after initial setup, alert on any user who modifies these files more frequently than their historical baseline or more than 98% of other users.",
              "Train a regression model to produce a risk score for any modification to a shell startup file. Use features like user role, time of day, presence of sensitive strings like 'LD_PRELOAD', and the reputation of any file paths or domains. Trigger an investigation for scores above a defined threshold."
            ]
          },
          {
            "description": "A core system process (e.g., `cron`, `rsyslogd`) that does not normally use the network initiates an outbound network connection to an external or non-standard internal IP address.",
            "data_sources": [
              "Zeek conn.log",
              "Sysmon for Linux Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and process-network correlation logs from critical Linux servers (e.g., authentication servers, web servers, database servers).",
            "action": [
              "Define a watchlist of critical system process names that should not initiate outbound network connections (e.g., `crond`, `systemd-journald`, `accounts-daemon`). Correlate process execution data with network logs and alert any time a process on this watchlist is the source of a connection to a non-local IP address.",
              "For each system process, establish a baseline of its network behavior, including destination ports, connection frequency, and data volume. Alert if a process initiates a connection on a port not in the top 95% of historically used ports for that process, or if its daily data transfer volume exceeds 3 standard deviations from its average.",
              "Use an unsupervised learning model, such as an autoencoder, trained on legitimate process-network behavior (features: process name, destination IP, port, protocol, bytes out). Feed live process network events to the model and alert when the reconstruction error is high, indicating a significant deviation from learned normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges via dynamic linker hijacking?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.006",
        "name": "Dynamic Linker Hijacking",
        "evidence": [
          {
            "description": "A shared object file is created by a non-root user in a world-writable directory that is also in the library search path of a SUID/SGID-enabled executable.",
            "data_sources": [
              "Sysmon for Linux Event ID 11",
              "auditd logs",
              "osquery suid_bin table"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All file systems on multi-user Linux hosts, with a focus on world-writable directories such as /tmp, /var/tmp, and /dev/shm.",
            "action": [
              "Periodically inventory all SUID/SGID executables and their library search paths. Create a rule that alerts when a file creation event (Sysmon EID 11) by a non-root user (UID > 1000) for a file ending in '.so' occurs in one of these enumerated high-risk paths.",
              "Profile the parent-child process relationships for all SUID/SGID binaries. Alert if a SUID binary is executed by a parent process that has never been observed initiating it before (e.g., a web server process like `nginx` executing `/bin/mount`), as this may indicate exploitation after a malicious library was dropped.",
              "Use graph analysis to model relationships between users, processes, and file creation events. Query the graph to identify and alert on high-risk paths, such as a low-privilege user creating a shared library that is subsequently loaded by a root-owned SUID process."
            ]
          },
          {
            "description": "The `LD_PRELOAD` environment variable is detected in the process context of a SUID/SGID executable, indicating an attempt to bypass linker sanitization on vulnerable systems.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Linux endpoints and servers, especially those running older OS versions or custom-compiled applications.",
            "action": [
              "Create a high-severity alert that triggers when a process creation event (Sysmon EID 1) contains 'LD_PRELOAD=' in its environment variables and the process image is a known SUID/SGID executable (e.g., `sudo`, `passwd`, `pkexec`). This is a direct indicator of an attack attempt on a misconfigured system.",
              "Analyze the environment variables of all executed processes across the enterprise. Calculate the rarity of the `LD_PRELOAD` variable being set for each unique process name. Alert when `LD_PRELOAD` is set for a process where it is statistically rare (e.g., present in <0.01% of historical executions of that process name).",
              "Train a decision tree classifier to identify malicious command-line executions. Features should include the process name, user context, presence of environment variables like `LD_PRELOAD`, command-line length, and argument structure. Flag executions classified as malicious, especially those involving SUID/SGID binaries."
            ]
          },
          {
            "description": "A SUID/SGID executable spawns an unexpected child process (e.g., /bin/sh), initiates a network connection, or writes to an unusual file path, indicating its execution flow has been hijacked.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Sysmon for Linux Event ID 3",
              "Sysmon for Linux Event ID 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process, network, and file system logs from all Linux hosts, especially critical application and database servers.",
            "action": [
              "Create a rule to alert whenever a known SUID/SGID binary (e.g., `/usr/bin/crontab`, `/bin/su`) spawns a shell process (e.g., `sh`, `bash`, `zsh`) as a direct child, which is highly indicative of successful exploitation.",
              "For each SUID/SGID binary, create a baseline of its normal child processes and network connection patterns. Alert if a running instance spawns a child process not in its 99% most frequent list or makes a network connection to a destination IP that is a statistical outlier compared to its history.",
              "Use a sequence analysis model like an LSTM to learn the normal sequences of system calls made by high-risk SUID/SGID binaries during legitimate execution. Monitor system call traces in real-time and alert when the observed sequence deviates significantly from learned benign sequences."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using dynamic linker hijacking?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.006",
        "name": "Dynamic Linker Hijacking",
        "evidence": [
          {
            "description": "A shared library file is created in a non-standard path and is found to export symbols for common libc functions (e.g., `readdir`, `execve`, `connect`), indicating a userland rootkit designed to hook system calls.",
            "data_sources": [
              "Sysmon for Linux Event ID 11",
              "osquery shared_libraries table",
              "YARA scan results"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of hosts with critical security agents (e.g., EDR, log forwarders), particularly directories where tools are installed or in user-writable locations like /tmp or /dev/shm.",
            "action": [
              "Deploy a YARA rule that scans newly created files and alerts if a shared library contains exported function symbols for common syscalls (`readdir`, `connect`, `execve`) and is not located in a standard system library path (e.g., /lib, /usr/lib).",
              "For all shared libraries on a system, calculate a 'suspicion score' based on the number of hooked standard functions, the file path's rarity, and whether the file is unsigned. Alert on libraries with a score exceeding a percentile-based threshold (e.g., top 1%), indicating a high likelihood of being a rootkit component.",
              "Train a classifier on the exported function tables of both legitimate and known-malicious shared libraries. When a new library is created, extract its exports and feed them into the model to classify it as benign or malicious, allowing detection of novel rootkit components."
            ]
          },
          {
            "description": "A security agent process (e.g., EDR agent, audit daemon) is executed with the `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES` environment variable set.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all endpoints and servers where security monitoring agents (e.g., EDR, FIM, log forwarders) are deployed.",
            "action": [
              "Create a critical-severity rule that alerts immediately if any process creation event for a known security agent process name (e.g., `osqueryd`, `auditd`, `falcon-sensor`, `sentinel-agent`) includes `LD_PRELOAD` or `DYLD_INSERT_LIBRARIES` in its environment.",
              "Maintain an enterprise-wide statistical set of all process names that have ever been observed running with `LD_PRELOAD`. Alert if a security agent process name is ever added to this set, as this is an extremely rare and suspicious event.",
              "Model the parent-child relationships and process environment for all security agents. Use an anomaly detection algorithm to flag any instance where an agent is spawned by an unusual parent (e.g., not `systemd`) or with anomalous environment variables, suggesting a hijack-and-relaunch attempt."
            ]
          },
          {
            "description": "A common administrative or enumeration tool (e.g., `ps`, `ls`, `netstat`) is executed with the `LD_PRELOAD` environment variable set, indicating an attempt to hide artifacts from an analyst or script.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all Linux systems, especially multi-user systems and administrative bastion hosts.",
            "action": [
              "Create a detection rule that alerts when a process from a watchlist of enumeration tools (`ps`, `ls`, `ss`, `netstat`, `lsof`, `top`, `find`) is executed with the `LD_PRELOAD` environment variable present in its process context.",
              "For each command on the enumeration tool watchlist, calculate the frequency of `LD_PRELOAD` being used. Alert if it is used with a tool where it is statistically absent (e.g., <0.001% of executions). Additionally, analyze the entropy of the library path in `LD_PRELOAD` to detect obfuscated or randomized paths.",
              "Use a natural language processing (NLP) model to learn the 'grammar' of legitimate command-line sequences in administrative shell sessions. Flag sessions where common enumeration commands are prepended with `LD_PRELOAD=...`, as this breaks the learned patterns of normal administrative behavior."
            ]
          },
          {
            "description": "A host's security log volume (e.g., EDR, auditd) or network telemetry volume drops significantly without a known cause, potentially following the restart of a security agent process.",
            "data_sources": [
              "SIEM event ingestion logs",
              "Zeek conn.log",
              "Sysmon for Linux Event ID 1",
              "Log forwarder health metrics"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log ingestion pipeline health dashboards, network traffic summaries from core switches, and process monitoring logs on hosts with security agents.",
            "action": [
              "Correlate a security agent restart event (Sysmon EID 1) with a subsequent 'log source silent' alert from the SIEM for that same host within a 5-minute window. This directly links the restart to a loss of visibility, suggesting potential tampering or hijacking.",
              "For each log source, establish a time-series baseline of its 15-minute rolling average for event-per-second (EPS) volume. Alert if the EPS drops below the 5th percentile of its historical average for a sustained period (e.g., 30 minutes) without a corresponding maintenance window.",
              "Employ a time-series forecasting model (e.g., Prophet) to predict the expected log volume from each host or log source. Generate an alert when the actual observed volume deviates negatively from the forecasted volume's confidence interval, indicating an anomaly that could be caused by agent hijacking."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]