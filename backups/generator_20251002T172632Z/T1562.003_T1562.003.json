[
  {
    "information_requirement": "Is an adversary actively impairing command history logging on enterprise endpoints or servers to evade detection? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.003",
        "name": "Impair Command History Logging",
        "evidence": [
          {
            "description": "A process is created whose file hash or name matches a known threat intelligence indicator for a tool specifically designed to impair command history.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Linux auditd logs (type=EXECVE)",
              "osquery process_events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/EDR log repository aggregating process execution data from all Windows, Linux, and macOS endpoints and servers, correlated with a Threat Intelligence Platform.",
            "action": [
              "Symbolic: Continuously monitor process creation events (Windows Event ID 4688, Linux auditd EXECVE). Compare the SHA256 hash of the running process image (`NewProcessName` or equivalent) and any script block content hashes (Windows Event ID 4104) against a curated threat intelligence feed of known history-clearing tools. Generate a high-priority alert upon any match.",
              "Statistical: For every executed process SHA256 hash across the enterprise, calculate its prevalence as the percentage of unique hosts it has run on over the last 30 days. Flag any process hash that matches a history-impairment tool signature and also has a prevalence below a 1% threshold, indicating a rare tool not widely deployed in the environment.",
              "Machine Learning: Train a decision tree or random forest classifier on labeled process execution events. Features should include process name entropy, command-line argument count, parent process name (e.g., `winword.exe`, `sshd`), user context (e.g., `NT AUTHORITY\\SYSTEM`), a binary feature indicating if the hash is on a known-good allowlist, and whether the process initiated network connections."
            ]
          },
          {
            "description": "A process command line or script block contains specific strings, arguments, or regular expression patterns known to disable, clear, or manipulate shell history logging on Windows, Linux, or macOS.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Linux auditd logs (type=EXECVE)",
              "osquery shell_history",
              "Syslog from network devices"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM platform aggregating command-line logs from all enterprise endpoints, servers, and network devices with command logging capabilities.",
            "action": [
              "Symbolic: Create a watchlist or regex rule set to scan the `CommandLine` field (Windows Event ID 4688), `ScriptBlockText` (Windows Event ID 4104), and equivalent fields in Linux/network device logs. The patterns should detect commands like `Set-PSReadLineOption -HistorySaveStyle SaveNothing`, `unset HISTFILE`, `export HISTFILESIZE=0`, `history -c`, `ln -sf /dev/null ~/.bash_history`, and `no logging`. Trigger a high-severity alert on any match.",
              "Statistical: For each user, establish a 30-day rolling baseline of the execution frequency for commands matching the symbolic patterns. Use a Poisson distribution to model expected daily counts for these sensitive commands. Flag any user whose execution count for a given day is a statistically significant outlier (e.g., p-value < 0.01), indicating an abnormal increase in history manipulation.",
              "Machine Learning: Use a pre-trained language model (e.g., a lightweight BERT variant) fine-tuned on a labeled dataset of malicious and benign shell commands. This model can identify semantically similar but syntactically different evasion commands that regex might miss, such as those using string concatenation or environment variable obfuscation (e.g., `Set-PSReadLineOption -HistorySaveStyle ('Save' + 'Nothing'))`."
            ]
          },
          {
            "description": "A command known to impair history is executed in an anomalous context, such as by a non-interactive service account, from an unusual parent process, or immediately following a remote login from a previously unseen geolocation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log",
              "osquery logged_in_users",
              "Linux auditd logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM platform capable of correlating authentication logs (Windows, Zeek), process logs (Windows, Linux), and IP geolocation enrichment data.",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a process command line matches an impairment pattern (from EID 4688 or auditd) AND the parent process is not in [`powershell.exe`, `cmd.exe`, `explorer.exe`, `bash`, `zsh`, `sshd`] OR the command occurs within 5 minutes of a remote login (Windows EID 4624 Logon Type 3 or 10) from an IP address whose source country is not on the user's historical 90-day allowlist.",
              "Statistical: For each user login session, capture the sequence of commands executed in the first 10 minutes. Calculate the Shannon entropy of the command names within the sequence. If a history impairment command is present in this sequence and the sequence entropy is in the top 5th percentile for that user, flag the session. This identifies unusually varied or random activity combined with evasion.",
              "Machine Learning: Develop a time-series anomaly detection model (e.g., LSTM autoencoder) for each user's session activity. The feature vector at each time step should include: process name, parent process name, network connections initiated (from Zeek conn.log), and file modifications. Flag sessions with high reconstruction error, particularly when the error spikes immediately after a history impairment command is observed."
            ]
          },
          {
            "description": "A user session shows a sequence of TTPs where a history impairment command is immediately followed by commands associated with Discovery (TA0007), Credential Access (TA0006), or Execution (TA0002).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Linux auditd logs (type=EXECVE)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (Domain Controllers, file servers), administrator workstations, and developer endpoints.",
            "action": [
              "Symbolic: Define a stateful detection rule that tracks user sessions by Logon ID. The rule enters a 'suspicious' state for a session if a history impairment command is seen. If, while in this state, a subsequent command matches a watchlist of reconnaissance (`whoami`, `net user`, `ipconfig`, `ls -la /etc`), credential access (`cat /etc/shadow`, `reg save HKLM\\SAM`), or execution (`psexec`, `wmic process call create`), an alert is fired. The rule state times out after one hour.",
              "Statistical: Tokenize all commands in a user session into their corresponding MITRE ATT&CK techniques. Create trigrams (sequences of 3) of technique IDs (e.g., T1562.003 -> T1087.001 -> T1003.001). Calculate the probability of each observed trigram across the entire organization over 90 days. Flag any sequence containing T1562.003 that falls below a 0.05% probability threshold as a rare and suspicious chain of behaviors.",
              "Machine Learning: Train a sequence-to-sequence (Seq2Seq) model on known benign command sequences from developers, administrators, and regular users to learn normal command progressions. Feed a live user's command sequence into the trained model to predict the 'next' expected command. If a history impairment command is observed and the subsequent actual commands significantly deviate from the model's predictions, flag the sequence as anomalous."
            ]
          },
          {
            "description": "A default shell history file (e.g., `ConsoleHost_history.txt`, `.bash_history`) is deleted, has its size reduced to zero, is linked to `/dev/null`, or its last-modified timestamp fails to update despite continued interactive shell activity.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Linux auditd logs (type=SYSCALL, syscall=unlink,truncate,symlink)",
              "osquery file_events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File Integrity Monitoring (FIM) system and SIEM, monitoring user profile directories (`~`, `%APPDATA%`) on all endpoints and servers.",
            "action": [
              "Symbolic: Enable FIM or use auditd rules to monitor default history files. Create a rule to alert on any file deletion event (Windows EID 4663 with `Accesses` containing `DELETE`, auditd `unlink` syscall), file truncation (auditd `truncate` syscall), or symbolic link creation pointing to `/dev/null` for these specific file paths.",
              "Statistical: Periodically poll the metadata (last modified time, size) of shell history files for active users. Correlate this with process execution logs (EID 4688) for the same users. If a user has executed more than 5 shell commands in the last 15 minutes but the history file's last modified time has not changed and its size is static, flag this anomaly if it deviates more than 3 standard deviations from the user's baseline behavior.",
              "Machine Learning: For each user's history file, create a time-series model (e.g., ARIMA) that forecasts the expected file size based on historical growth patterns and the volume of command-line activity (as an exogenous variable). An anomaly is detected if the actual file size deviates significantly from the forecasted value and its confidence interval, especially a sudden drop to zero or a flatline during active sessions that the model cannot explain."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]