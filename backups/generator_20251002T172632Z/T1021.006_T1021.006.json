[
  {
    "information_requirement": "Is an adversary leveraging Windows Remote Management (WinRM) for lateral movement between hosts?",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1021.006",
        "name": "Windows Remote Management",
        "evidence": [
          {
            "description": "A network connection on TCP port 5985 or 5986, characteristic of WinRM, is observed where the source IP address is on an active threat intelligence watchlist of known malicious or currently compromised internal systems.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network switches, network traffic sensors at VLAN boundaries, authentication logs on member servers and domain controllers, threat intelligence platforms.",
            "action": [
              "Implement a SIEM rule to continuously compare the source IP address of all network connections on destination ports 5985 or 5986 (from Zeek conn.log) against a dynamic watchlist of compromised internal IPs. If a match occurs, generate a high-priority alert that includes both the source and destination IP, and enrich it with the successful logon event (Windows Event ID 4624, Logon Type 3) from the destination host for immediate investigation.",
              "For each unique user account, profile the set of source hosts from which they normally initiate WinRM connections over a 30-day period. Calculate the frequency of each source-destination-user triplet. Create a rule to flag any new WinRM connection where the source host is in the bottom 5th percentile of historical frequency for that specific user and destination, indicating an unusual origin point for the remote session.",
              "Construct a network graph where hosts are nodes and WinRM connections are directed edges. Train a graph-based anomaly detection model (e.g., using GraphSAGE) to learn the normal communication topology. Deploy the model to score the anomalousness of new WinRM connections in real-time. An alert should be triggered for new edges that the model flags as highly improbable, such as a connection from a host in the finance department to a developer's workstation for the first time."
            ]
          },
          {
            "description": "A child process of the WinRM service host (WsmPrvSE.exe) is observed with command-line arguments or embedded script block content that either matches signatures of known malicious tools or exhibits statistically anomalous characteristics such as high entropy.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation and command-line logs on all Windows endpoints and servers, particularly Domain Controllers and administrative bastion hosts. PowerShell script block logging archives.",
            "action": [
              "Filter all process creation events (Windows Event ID 4688) to isolate those where the ParentProcessName is 'WsmPrvSE.exe'. Apply a list of regular expressions against the process command line to detect known malicious strings, tools, and techniques (e.g., 'IEX', 'DownloadString', '-enc', 'mimikatz', 'invoke-bloodhound'). Generate a high-severity alert upon a match.",
              "For all command lines and PowerShell script blocks (Event ID 4104) spawned by WsmPrvSE.exe, calculate the Shannon entropy and character length. Establish a baseline distribution for these two metrics across the environment. Create a rule to flag any command where the entropy or length exceeds the 95th percentile of the established baseline, indicating likely obfuscation or a large embedded payload.",
              "Develop a supervised machine learning classifier (e.g., Logistic Regression, Random Forest) trained on a labeled dataset of benign and malicious PowerShell script blocks and command lines. Ingest content from Event ID 4104 and Event ID 4688 associated with WinRM. Use the model to classify new scripts and commands in real-time, flagging any item classified as 'malicious' with a high confidence score."
            ]
          },
          {
            "description": "A statistically significant deviation in WinRM network traffic patterns is observed, characterized by either: a sudden volumetric spike in connections, connections occurring at anomalous times, or the appearance of previously unseen communication pathways (e.g., workstation-to-workstation).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network flow data collectors (e.g., Zeek sensors) at network segment boundaries, especially between user, server, and administrative VLANs. Core switch and router flow export data.",
            "action": [
              "Define and enforce a network security policy that explicitly disallows WinRM connections for specific pathways, such as between client workstations or from non-administrative subnets to critical server subnets. Create a SIEM alert that triggers on any violation of this policy by monitoring Zeek conn.log for traffic on ports 5985/5986 that matches a forbidden source/destination subnet pair.",
              "Using Zeek conn.log, create a baseline of hourly WinRM connection counts for the entire network over a 30-day period. Calculate the mean and standard deviation of connections for each hour of the day and day of the week. Generate an alert when the observed connection count in any given hour exceeds three standard deviations above the historical mean for that specific time window, indicating a potential WinRM scanning or brute-force activity.",
              "Implement a time-series forecasting model (e.g., Prophet or an LSTM-based model) on the volume of WinRM connections between major network segments (e.g., Admin VLAN to Server VLAN). The model will learn the normal daily and weekly rhythm of this traffic and predict expected volumes. Generate an alert when the actual observed traffic volume significantly exceeds the model's predicted confidence interval, indicating an anomalous surge in activity."
            ]
          },
          {
            "description": "A successful remote network logon (Logon Type 3) associated with a WinRM connection is followed by an anomalous sequence or volume of process executions under the same logon session, such as an unusual chain of discovery commands or execution of sensitive system utilities.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4672",
              "Windows Event ID 4688",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication, privilege assignment, and process creation logs on all critical servers (Domain Controllers, Certificate Authorities, database servers) and privileged administrative workstations.",
            "action": [
              "Create a SIEM rule that correlates a successful network logon (Event ID 4624, Logon Type 3) from a WinRM source with subsequent process creation events (Event ID 4688) sharing the same Logon ID. Alert immediately if this session spawns high-risk processes rarely used in legitimate remote administration, such as 'ntdsutil.exe', 'vssadmin.exe', 'diskshadow.exe', or 'secedit.exe'.",
              "For each user-host pair, profile the typical command sequences within a WinRM session by analyzing command n-grams (sequences of 2-3 commands) from Event ID 4688 and 4104. Flag any session containing a command sequence with a historical frequency below a 1% threshold. Additionally, count the number of discovery commands (e.g., 'whoami', 'net user', 'ipconfig', 'nltest') per session and alert if the count exceeds the 99th percentile for that user.",
              "For each logon session (grouped by Logon ID from Event ID 4624), extract a feature vector including: session duration, total process count, average command entropy, and counts of specific command categories (discovery, execution, defense evasion). Use a clustering algorithm like DBSCAN to group these session vectors. Any session that the model identifies as a 'noise' point (i.e., does not belong to any normal cluster) should be flagged for investigation as anomalous behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]