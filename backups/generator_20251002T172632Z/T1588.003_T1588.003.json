[
  {
    "information_requirement": "Is the adversary acquiring and using stolen or deceptively obtained code signing certificates for targeting?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1588.003",
        "name": "Code Signing Certificates",
        "evidence": [
          {
            "description": "A process is created from an executable whose signing certificate matches a known-bad indicator (thumbprint, serial number, or issuer) from a threat intelligence source.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 7",
              "Windows AppLocker Event ID 8002",
              "Windows Code Integrity Event ID 3076",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, End-user Workstations, Application Servers, Network Egress Points, SIEM/Log Aggregator, Threat Intelligence Platform",
            "action": [
              "For every signed process creation (Sysmon Event ID 1, Windows Event ID 4688) or image load (Sysmon Event ID 7), extract the certificate thumbprint, serial number, and issuer. Correlate these values against a threat intelligence feed of known-malicious certificate indicators. Generate a high-severity alert upon any match.",
              "On a scheduled basis, query all unique certificate issuers from signed executables observed in the last 24 hours. Compare this list to a historical baseline of all issuers seen in the last 90 days. Calculate the prevalence of each new issuer across the host population. Flag any new issuer that appears on a very small number of hosts (e.g., < 0.5% of the environment) for investigation, as this indicates targeted, non-widespread software deployment.",
              "Train a binary classification model (e.g., XGBoost, Random Forest) on a labeled dataset of benign and malicious signed PE files. Engineer features from the certificate data, including issuer/subject string entropy, validity duration (in days), key algorithm and size, and boolean flags for self-signed or CA mismatch. Deploy the model to score newly observed signed executables. Investigate files classified with a high malicious probability score (e.g., > 0.85)."
            ]
          },
          {
            "description": "A process executes from a binary signed with a certificate containing deceptive attributes, such as a subject name with typosquatting (e.g., 'Mircosoft Corp') or a legitimate-sounding subject issued by an unexpected or low-reputation Certificate Authority.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows AppLocker Event ID 8002",
              "Windows Code Integrity Event ID 3076",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints, Public-Facing Web Servers, Software Distribution Points, DNS Servers, SIEM/Log Aggregator",
            "action": [
              "From process execution and certificate validation logs, extract certificate subject strings. Apply a curated list of regular expressions to detect common typosquatting of high-value company names (e.g., 'Micros[o0]ft', 'Go[o0]gle', 'Adob[e3]'). Separately, maintain a dictionary mapping trusted publisher names to their authorized Certificate Authorities (CAs). Alert when an executable's publisher name matches a trusted entity but the issuing CA is not in the authorized list.",
              "For all newly observed certificate subjects, calculate the Damerau-Levenshtein distance to a list of high-value brand and internal project names. Flag certificates for review where the subject has a low distance (e.g., 1 or 2) to a known name but is not an exact match. Combine this score with a rarity score for the issuer CA; a high combined score (e.g., low distance and rare CA) significantly increases detection confidence.",
              "Utilize a pre-trained Natural Language Processing (NLP) model or train a custom classifier to generate a 'deception score' for certificate subject and issuer strings. Features for the model can include character-level n-gram frequency, entropy, presence of non-ASCII characters, and numeric-to-alphabetic ratio. Periodically score all new certificates observed in the environment and alert on those exceeding a deception threshold, especially when correlated with low prevalence in the environment."
            ]
          },
          {
            "description": "A process executes from a binary signed by a certificate whose issuer or subject is statistically rare across the enterprise, or a certificate with an unusually short or long validity period, when compared to a dynamically generated environmental baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows AppLocker Event ID 8002",
              "Windows Code Integrity Event ID 3076",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Log Management Platform (for baselining), All Enterprise Endpoints and Servers, Network Egress/Ingress Points",
            "action": [
              "Maintain a list of low-reputation or free Certificate Authorities (e.g., 'Let's Encrypt', 'Sectigo EssentialSSL') not expected for enterprise-grade software. Ingest all certificate data from process creation and TLS sessions. Alert when an executable file (.exe, .dll) is signed by a CA from this low-reputation list.",
              "Over a 30-day rolling window, create a frequency distribution of all certificate issuer and subject names from endpoint logs. Alert on the execution of any binary signed by an issuer or subject that falls below a rarity threshold (e.g., observed on < 0.1% of hosts). Concurrently, calculate the statistical distribution (mean, standard deviation) of certificate validity periods. Flag any executable signed with a certificate whose validity duration is an outlier (e.g., > 3 standard deviations from the mean or in the lowest 5th percentile), excluding known short-term issuers.",
              "Apply a time-series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) to the daily count of newly observed unique certificate issuers within the environment. An anomalous spike that deviates significantly from the forecasted model indicates a potential campaign using diverse, freshly-acquired certificates. Automatically trigger an investigation to analyze the specific new issuers and associated executables that contributed to the anomaly."
            ]
          },
          {
            "description": "A root or trusted publisher certificate is installed into a system's certificate store by a process or user account not authorized for this activity, or outside of a standard change management process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 16",
              "Microsoft-Windows-CAPI2/Operational Event ID 41",
              "Windows Security Event ID 4673"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Critical Application Servers, Developer Workstations, Change Management Database/System",
            "action": [
              "Monitor for certificate store modification events (Sysmon Event ID 16, CAPI2 Event ID 41). Correlate with the parent process information (Sysmon Event ID 1, Windows Event ID 4688). Alert if the initiating process is not on an approved allowlist (e.g., 'mmc.exe', 'gpupdate.exe', approved software installers) or if the command line arguments for tools like 'certutil.exe' or 'powershell.exe' indicate a direct store addition ('-addstore').",
              "Establish a 90-day baseline of which user accounts and processes perform certificate installations on different host types (workstations, servers, domain controllers). Calculate the frequency of each user/process pair performing this action. Generate an alert when a certificate installation is initiated by a user/process pair that is statistically rare for that asset type (e.g., a service account running 'certutil.exe' on a workstation).",
              "Model legitimate certificate installations as a graph of process relationships (e.g., 'svchost.exe' spawns 'gpupdate.exe' which triggers a CAPI2 event). Use a graph-based anomaly detection algorithm to identify sequences that deviate from these learned legitimate patterns. An anomalous path, such as 'WINWORD.EXE' -> 'cmd.exe' -> 'powershell.exe' -> 'certutil.exe -addstore', would be flagged as a high-confidence malicious event chain."
            ]
          },
          {
            "description": "Network traffic is observed to Certificate Revocation List (CRL) or Online Certificate Status Protocol (OCSP) endpoints that are statistically rare, have low domain reputation, or do not correspond to the Certificate Authorities expected within the enterprise network baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek dns.log",
              "Firewall Logs",
              "Proxy Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, Web Proxies, DNS Resolver Logs",
            "action": [
              "Maintain a dynamically updated allowlist of CRL and OCSP domains derived from certificates observed on the network and endpoints over the last 30 days. Monitor all outbound DNS queries (Zeek dns.log) and HTTP connections (Zeek conn.log, proxy logs). Generate an alert for any connection attempt to a CRL/OCSP endpoint that is not on the established allowlist and is not associated with a recently introduced, legitimate certificate.",
              "From DNS and connection logs, build a frequency distribution of all requested second-level and third-level domains for CRL/OCSP endpoints over a 30-day baseline. Alert on requests to fully-qualified domains that fall in a low-frequency percentile (e.g., bottom 0.5%). Separately, calculate the character entropy of all requested DNS names; flag requests for domains with unusually high entropy, which may indicate the use of Domain Generation Algorithms (DGAs) for C2 infrastructure hosting CRL/OCSP points.",
              "Implement a multivariate time-series anomaly detection model monitoring key network indicators related to certificate validation. The model should track: 1) Volume of requests to new/rare CRL/OCSP domains, 2) Daily count of unique CRL/OCSP server IPs, 3) Ratio of failed to successful connections to these endpoints. A coordinated anomaly across multiple features (e.g., a spike in requests to new domains that are also failing to connect) would strongly indicate a malicious tool attempting to validate a revoked or fake certificate."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]