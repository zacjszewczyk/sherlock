[
  {
    "information_requirement": "Has the adversary established persistence by modifying or creating a boot or logon initialization script? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A script interpreter process (e.g., powershell.exe, cscript.exe) launched as a child of a logon process (e.g., userinit.exe) or startup process (e.g., services.exe) initiates a network connection to a destination IP or domain with a low reputation score or that is present on a C2 threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Internet Gateway/Egress Points, DNS Resolvers",
            "action": [
              "Correlate process creation events (Windows Event ID 4688) with network connection events (Zeek conn.log). For processes whose parent is a known logon/startup script host (e.g., userinit.exe, services.exe), join the destination IP from conn.log with a high-confidence C2 threat intelligence list. Alert on any match.",
              "For each outbound connection from a logon script-spawned process, enrich the destination IP with its ASN and geographic location. Calculate the frequency of the destination ASN and country pair across a 30-day baseline. Alert if the pair's frequency is in the bottom 1st percentile, indicating a rare destination.",
              "Apply a time-series analysis model (e.g., ARIMA) to the byte counts and connection frequency per destination IP from logon script processes. Flag destinations exhibiting periodic, low-volume 'heartbeat' patterns characteristic of C2 beaconing by identifying statistically significant periodic components in the time series."
            ]
          },
          {
            "description": "The command line arguments of a script interpreter (e.g., powershell.exe, cmd.exe) spawned by a logon or startup process contain obfuscation patterns (e.g., Base64, character replacement), high Shannon entropy, or explicit persistence-related commands.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": [
              "Using regular expressions, scan the CommandLine field in Windows Event ID 4688 for script processes. Search for keywords like 'schtasks', 'reg add', 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run', and PowerShell encoding flags like '-EncodedCommand', '-e', or patterns like '[Convert]::FromBase64String'. Alert on any match.",
              "For each script execution (Event 4688), calculate the Shannon entropy of the CommandLine string. Establish a baseline entropy score for legitimate scripts in the environment. Alert on any command line whose entropy exceeds 3 standard deviations above the mean, or a fixed threshold (e.g., > 4.5) indicative of packed or encoded data.",
              "Train a logistic regression classifier using TF-IDF vectorization on the command line strings from a labeled dataset of benign and malicious script executions. Use the trained model to assign a 'maliciousness' probability score to new command lines. Alert on commands exceeding a defined probability threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A file object corresponding to a known logon or startup script (e.g., within NETLOGON or SYSVOL GPO folders) is modified (WriteData or AppendData access) by a user account that is not a member of a whitelisted administrative group or by a process not on a pre-approved change management tool list.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (SYSVOL share), File Servers hosting roaming profiles, Enterprise Workstations",
            "action": [
              "Monitor file system audit events (Windows Event ID 4663 with Accesses: WriteData) for logon script paths (e.g., '\\\\<DOMAIN>\\SYSVOL\\...\\Scripts\\Logon'). Maintain a whitelist of authorized user SIDs and parent process names (e.g., 'gpmc.exe'). Alert when a modification event's SubjectUserName or ProcessName is not on the respective whitelist.",
              "For each monitored logon script, create a baseline of normal modification times (hour of day, day of week) and modifying accounts. Use z-scores to identify temporal outliers (e.g., modification at 2 AM on a Saturday) and user outliers (an account modifying a script for the first time). Alert on events with high z-scores (e.g., > 3).",
              "Use a one-class SVM or an isolation forest model trained on features of legitimate modification events (e.g., user account, source workstation, time of day, parent process). The model will learn the boundary of normal change management activity. Flag any new modification event that the model classifies as an outlier."
            ]
          },
          {
            "description": "A child process spawned by a logon script host (e.g., userinit.exe) is not digitally signed by a trusted publisher, executes from a non-standard or user-writable directory (e.g., C:\\Users\\Public, %APPDATA%), or has a name with low prevalence across the enterprise.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Application Servers",
            "action": [
              "For each process creation event (Windows Event ID 4688) where the parent is a logon script host, check the NewProcessName path against a list of suspicious directories (e.g., '\\AppData\\', '\\Temp\\', 'C:\\Users\\Public\\'). Enrich the event to verify the digital signature status of the executable. Alert if an unsigned executable is launched from a suspicious directory.",
              "Build a baseline of all parent-child process relationships originating from logon scripts. Calculate the frequency of each unique relationship (e.g., 'userinit.exe' -> 'explorer.exe'). Alert on any newly observed parent-child relationship or any relationship that falls in the bottom 1% of historical frequency.",
              "Train an autoencoder on feature vectors representing normal child processes of logon scripts (features could include path depth, command line length, parent process name). The autoencoder will learn to reconstruct 'normal' feature vectors with low error. Flag processes where the reconstruction error is high, indicating a deviation from the learned norm."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Has the adversary escalated privileges by abusing a boot or logon initialization script? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "The command line arguments of a process spawned by a logon script contain strings matching known credential dumping tools (e.g., 'mimikatz', 'procdump'), privilege escalation commands ('runas', 'psexec -s'), or patterns indicative of UAC bypass techniques.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Enterprise Workstations, Servers with local administrator accounts",
            "action": [
              "Apply a regularly updated regex rule set against the CommandLine field of Windows Event ID 4688 for processes spawned by logon scripts. The rules should target names of known privilege escalation tools ('PsExec.exe -s', 'Invoke-AllChecks') and common commands ('net localgroup administrators ... /add'). Alert on any match.",
              "Create a TF-IDF (Term Frequency-Inverse Document Frequency) model of command line arguments used in logon scripts. Identify terms that are rare across the enterprise but common in public threat reports on privilege escalation (e.g., 'lsass', '-s', '-accepteula'). Alert when a command line contains a high concentration of these statistically significant, high-risk terms.",
              "Train a supervised classification model (e.g., XGBoost) on a labeled dataset of benign and malicious command lines. Features can include n-grams, command length, and presence of special characters. Use the model to classify new script commands as potential privilege escalation attempts and alert on high-probability classifications."
            ]
          },
          {
            "description": "A temporal sequence of events occurs on a single host: 1) A script process modifies a registry key corresponding to a service's binary path (HKLM\\SYSTEM\\CurrentControlSet\\Services\\<Service>\\ImagePath), followed by 2) that same service being started or restarted.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 7040",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, Enterprise Workstations",
            "action": [
              "Create a stateful correlation rule that triggers if, on a single host within a 2-minute window, a process creation event (Event 4688) from a script is followed by a registry modification event (Event 4657) to a service's 'ImagePath', and then followed by a service start event (Event 7036) for that same service. Alert on this specific sequence.",
              "For each service on a system, baseline the processes that normally modify its configuration in the registry. Calculate the probability of a given process modifying a given service's 'ImagePath'. Alert when a process with a very low historical probability (e.g., <0.01%) performs this modification, especially if it is a script interpreter.",
              "Model system event sequences using a Hidden Markov Model (HMM). Train the model on event logs from normal system operation to learn valid state transitions. Flag event sequences that the model identifies as having a low likelihood, indicating a deviation from normal behavior patterns, such as a script modifying a service binary path."
            ]
          },
          {
            "description": "A process creation event, linked via Logon ID to an interactive logon (Logon Type 2) by a non-privileged user, shows the new process running with an elevated token (TokenElevationType = Type1 or Type2) or at a High/System integrity level, which is inconsistent with the user's standard privileges.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI)",
            "action": [
              "Join logon events (Windows Event ID 4624) with process creation events (Windows Event ID 4688) on the LogonId field. Maintain a list of non-privileged user SIDs. Alert if a process is created under a non-privileged user's logon session, but the process's TokenElevationType is 'Type1' or 'Type2' (indicating elevation).",
              "For each user account, build a profile of the typical IntegrityLevel of processes they launch. For example, a standard user may launch 99.9% of processes at 'Medium' integrity. Alert if a process is launched by that user at 'High' or 'System' integrity, as this would be a statistical outlier.",
              "Use a clustering algorithm (e.g., DBSCAN) on process event features, including UserSid, LogonType, and IntegrityLevel. Normal user activity will form dense clusters. Flag any process creation event that is classified as noise/an outlier, as it represents an unusual combination of attributes, such as a standard user spawning a high-integrity process."
            ]
          },
          {
            "description": "A process spawned by a machine startup script (parent process like services.exe, wininit.exe) requests a handle to the LSASS process memory with read access (PROCESS_VM_READ) or attempts to write to critical system files like the SAM or SYSTEM registry hives.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Credential Stores (LSASS process memory), Security Databases (SAM file)",
            "action": [
              "Create a high-priority alert that triggers when a handle request event (Windows Event ID 4656) is generated where the ObjectName is 'lsass.exe' and the AccessMask contains '0x10' (PROCESS_VM_READ), and the ProcessName of the requester is a script interpreter. Also, alert on any write attempts (Event 4663) to the SAM file by unexpected processes.",
              "Build a baseline profile of all processes that legitimately access lsass.exe memory. This list should be very small. Calculate the frequency of access for each process. Alert on any access from a process not on the baseline or whose access frequency is statistically anomalous (e.g., in the bottom 1st percentile).",
              "Model system interactions as a graph, where nodes are processes and files/objects and edges represent access requests. Train a graph neural network (GNN) to learn embeddings for normal system activity. Flag script executions whose resulting activity subgraph (e.g., a script process requesting a handle to LSASS) is identified as anomalous based on its learned embedding."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]