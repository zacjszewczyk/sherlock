[
  {
    "information_requirement": "Is an adversary attempting to inhibit our ability to respond to a process disruption or failure? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0878",
        "name": "Alarm Suppression",
        "evidence": [
          {
            "description": "An unauthorized user account or an unexpected process modifies, deletes, or renames a critical alarm configuration file or executable on an HMI, EWS, or SCADA server, particularly outside of a scheduled maintenance window.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4656",
              "Windows Event ID 4660"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Historian Servers",
            "action": [
              "Create and maintain a list of critical alarm-related file paths (e.g., C:\\SCADA\\Alarms.xml, alarm_service.exe) and a corresponding whitelist of authorized user accounts and processes. Trigger an alert on Windows Event ID 4663 (File System Access) where the Object Name matches a critical file, Accesses includes 'WriteData' or 'DELETE', and the SubjectUserName or ProcessName is not on the authorized whitelist.",
              "For each critical host (HMI, EWS), establish a baseline of hourly file modification counts (Event ID 4663) for the defined critical alarm files over a 30-day period. Calculate the 99th percentile of this count and trigger an alert if the current hourly count exceeds this statistical threshold. Additionally, calculate the Shannon entropy of command-line arguments for processes interacting with these files (from Event ID 4688) and alert if the entropy score deviates more than 2 standard deviations from the established baseline for that process.",
              "Aggregate hourly counts of Windows Event ID 4663 (modifications to critical alarm files) across all monitored ICS hosts. Train a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD) on at least 90 days of historical data to learn normal patterns, including maintenance windows. Deploy the model to identify sustained deviations from the predicted normal range, which could indicate a coordinated campaign to alter alarm configurations."
            ]
          },
          {
            "description": "An unauthorized source IP address sends an ICS network write command (e.g., Modbus Function Codes 5, 6, 15, 16; S7Comm Write Var) to a PLC/RTU memory address, coil, or register that controls an alarm state, threshold, or suppression flag.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control), DMZ for remote access to OT, Safety Instrumented System (SIS) network zones",
            "action": [
              "Maintain an OT asset inventory that maps critical alarm-related registers/coils to their respective PLCs. Create a whitelist of authorized source IPs (e.g., specific HMIs, EWS) allowed to issue write commands to these PLCs. Deploy a SIEM rule on Zeek logs (modbus.log, s7comm.log) to alert when a write function code (e.g., func_code 6, 16) originates from a non-whitelisted id.orig_h or targets a known critical alarm register.",
              "For each unique source-destination-function code tuple, baseline the hourly frequency of write operations using 30 days of Zeek log data. Alert if the current hourly frequency exceeds the 99th percentile of the baseline. Separately, for each source IP, calculate the Shannon entropy of the register_address field in modbus.log over a 30-minute rolling window and alert if entropy drops below the 10th percentile, indicating a suspicious focus on a small set of registers.",
              "From Zeek logs, create a feature set for each write command including source/destination IP, function code, register address, and the numerical value written. Train an unsupervised anomaly detection model, such as an Isolation Forest or a One-Class SVM, on historical 'normal' write traffic. Score each new write command in real-time and flag commands with anomaly scores exceeding a dynamically adjusted threshold, indicating statistically rare and potentially malicious patterns."
            ]
          },
          {
            "description": "A critical process variable (e.g., temperature, pressure) monitored via ICS network traffic exceeds its defined alarm threshold for a sustained period, while the expected corresponding alarm event is absent from the alarm server's application logs within a predefined time window.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Windows Event Log (Application)",
              "Custom Application Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian Servers, Alarm & Event Servers, SCADA Servers, OT Network segments monitoring Level 1 (Basic Control) process data",
            "action": [
              "Create a correlation map between process variables (e.g., Modbus Register 30001 from zeek modbus.log), their operational alarm thresholds (e.g., value > 80), and the expected alarm log signature (e.g., Event ID 1001 in Windows Application Log). Implement a stateful SIEM correlation rule that triggers an alert if a process variable reading from Zeek logs exceeds its threshold for a defined duration (e.g., >30 seconds) AND the corresponding alarm log signature is NOT found on the alarm server within a grace period (e.g., 60 seconds).",
              "For each critical process variable, baseline the typical time delta between a threshold breach (observed in Zeek logs) and the corresponding alarm log generation. Calculate the mean and standard deviation of this delay and trigger an alert if an observed delay exceeds 3 standard deviations from the mean. Separately, apply a statistical process control (SPC) chart to critical process variable values to alert on abnormally static readings just below an alarm threshold (i.e., 'flat-lining').",
              "Train a supervised classification model (e.g., Random Forest) to predict the probability of an alarm event based on a feature vector of recent process variable readings (e.g., 5-minute average, min, max from zeek modbus.log). In real-time, if the model predicts an alarm with high confidence (e.g., probability > 0.95) but no corresponding alarm event appears in the logs within a set timeframe, generate a 'Predicted Alarm Missed' alert for investigation."
            ]
          },
          {
            "description": "A critical alarm management service or process on an HMI, EWS, or alarm server is terminated, disabled, or crashes unexpectedly, resulting in a verifiable cessation of alarm display, logging, or notification functions.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 7034",
              "Windows Event ID 4697",
              "Windows Event ID 4700",
              "Windows Event ID 4701"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Alarm & Event Servers, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Domain Controllers (for Group Policy changes affecting services)",
            "action": [
              "Maintain a whitelist of critical alarm-related service names (e.g., HMI_Alarm_Service.exe). Create a high-priority SIEM alert for Windows Event ID 7036 (service stopped), 7034 (service terminated unexpectedly), or 4701 (service disabled) where the ServiceName is on the whitelist. Also, alert on Event ID 4688 where a command line contains 'taskkill /f', 'net stop', or 'sc stop' targeting a whitelisted service.",
              "For each whitelisted alarm service, analyze logs (Event IDs 7036, 7034) over a 60-day period to baseline its normal downtime duration and frequency. Calculate the 99th percentile for both metrics. Trigger an alert if a service's current stopped duration or the frequency of stop/crash events in the last hour exceeds its respective statistical threshold.",
              "Model the lifecycle of each critical alarm service using its state transitions (running, stopped) from Windows Event ID 7036. Train a time-series anomaly detection model, such as a Hidden Markov Model (HMM), on at least 90 days of this state data to learn the normal sequence and duration of states. Deploy the model to detect anomalous transitions, such as an unexpected 'stopped' state outside a maintenance window or a prolonged downtime that deviates from the learned pattern."
            ]
          }
        ]
      }
    ],
    "version": "1.5",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]