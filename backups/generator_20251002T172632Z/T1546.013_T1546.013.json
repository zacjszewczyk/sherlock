[
  {
    "information_requirement": "Is the adversary maintaining persistence using PowerShell profiles?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.013",
        "name": "PowerShell Profile",
        "evidence": [
          {
            "description": "A PowerShell profile script's file hash matches a known malicious hash, or its script block content contains strings, commands, or functions associated with known malware or hacking tools (e.g., 'Invoke-Mimikatz', 'IEX', 'DownloadString').",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems on endpoints and servers, specifically standard PowerShell profile paths ($PsHome\\Profile.ps1, $Home\\Documents\\PowerShell\\Profile.ps1, etc.), and PowerShell script block logs from these systems.",
            "action": [
              "1. Symbolic Logic: Create a watch list of known malicious file hashes and a YARA rule for malicious PowerShell script content (e.g., 'Invoke-Mimikatz', 'DownloadString', Base64 encoded strings). Correlate file creation events (Sysmon Event ID 11) in known profile paths against the hash list. Simultaneously, apply the YARA rule to the ScriptBlockText field in PowerShell Script Block logs (Windows Event ID 4104).",
              "2. Statistical Analysis: Calculate the Shannon entropy of all script blocks executed from PowerShell profiles (identified by correlating Event ID 4104 with process command lines from Event ID 4688). Establish a baseline entropy score for legitimate profile scripts in the environment (e.g., mean and standard deviation). Flag any script block whose entropy score exceeds the 95th percentile or is 3 standard deviations above the mean, as this indicates potential obfuscation or encryption.",
              "3. Machine Learning: Train a supervised classification model (e.g., Gradient Boosting Classifier) on a labeled dataset of benign and malicious PowerShell scripts. Extract features from script blocks such as character frequency, function call counts, presence of keywords (e.g., 'DownloadString', 'FromBase64String', 'IEX'), and entropy. Deploy the model to score new script blocks from profiles in near real-time, alerting on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A PowerShell profile script contains structural patterns used for persistence, such as encoded commands, network download cradles, or API calls to create scheduled tasks or WMI event subscriptions.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4698",
              "Windows Event ID 5861",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "PowerShell execution logs and Windows Security/System event logs on endpoints and servers, focusing on administrative and interactive user sessions.",
            "action": [
              "1. Symbolic Logic: Use regular expressions to search PowerShell Script Block logs (Windows Event ID 4104) for common persistence patterns, including Base64 encoding (`[Convert]::FromBase64String`), download cradles (`Net.WebClient`, `Invoke-WebRequest`), and direct calls to `Register-ScheduledTask` or `Register-WmiEvent`. Create a correlation rule that links a profile script execution to the immediate creation of a scheduled task (Windows Event ID 4698) or WMI event subscription (Windows Event ID 5861) by the same process ID.",
              "2. Statistical Analysis: Profile the frequency of specific sensitive cmdlets (e.g., `IEX`, `Invoke-Expression`, `Register-*`) appearing in profile scripts. Establish a baseline frequency for different user groups (e.g., administrators, developers) over a 30-day period. Generate an alert if the count of such cmdlets in a single profile script exceeds two standard deviations from the established group baseline.",
              "3. Machine Learning: Use a Natural Language Processing (NLP) approach. Tokenize PowerShell script blocks from profiles and use a model like TF-IDF to create feature vectors representing script content. Train an anomaly detection model (e.g., One-Class SVM) on vectors from known-good profile scripts to identify new profile scripts that are structurally and semantically dissimilar to the established benign corpus."
            ]
          },
          {
            "description": "A PowerShell profile file (e.g., profile.ps1) is created or modified by an anomalous parent process or at a frequency inconsistent with established baselines for administrative activity.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs on domain controllers, servers, and endpoints where PowerShell profiles are stored, including roaming profile shares.",
            "action": [
              "1. Symbolic Logic: Define an allowlist of parent processes expected to modify PowerShell profiles (e.g., `powershell.exe`, `powershell_ise.exe`, `code.exe`, `explorer.exe`). Monitor for file write events (Windows Event ID 4663) to any `profile.ps1` file path. Alert if the parent process (from correlated Windows Event ID 4688 or Sysmon Event ID 1) is not on the allowlist, particularly for processes like `winword.exe`, `outlook.exe`, or `mshta.exe`.",
              "2. Statistical Analysis: For each host and user, establish a baseline for the frequency of PowerShell profile modifications over a 30-day rolling window. Calculate the mean and standard deviation of modification events. Generate an alert if the number of modifications in a 24-hour period exceeds the mean plus three standard deviations, indicating a burst of unusual activity.",
              "3. Machine Learning: Implement a time-series anomaly detection model (e.g., ARIMA or Seasonal-Trend decomposition) to forecast the expected number of profile modifications per day across the enterprise or per critical server group. An alert is triggered when the actual count significantly deviates from the forecasted value and its confidence interval."
            ]
          },
          {
            "description": "A powershell.exe process, launched without the '-NoProfile' argument, initiates an outbound network connection to a domain with a low reputation score, a rare geolocation, or transfers an anomalous amount of data.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic logs at the egress point (e.g., firewall, Zeek sensor), DNS server logs, and process/network logs on endpoints and servers.",
            "action": [
              "1. Symbolic Logic: Correlate process creation events for `powershell.exe` (Windows Event ID 4688, where command line does not contain `-NoProfile`) with subsequent network connection logs (Zeek conn.log) using source IP and timestamp. Alert if the destination IP or the resolved domain (from Zeek dns.log) is present on a threat intelligence blocklist or has a poor reputation score.",
              "2. Statistical Analysis: For each user, build a baseline of normal PowerShell network behavior, including a list of common destination domains and typical data transfer sizes (from `orig_bytes` and `resp_bytes` in Zeek conn.log). Calculate domain prevalence across the enterprise. Alert when `powershell.exe` connects to a domain seen by fewer than 5 other hosts or when the data transferred in a single session exceeds the 99th percentile of that user's historical baseline.",
              "3. Machine Learning: Develop a clustering model (e.g., DBSCAN) on features from Zeek conn.log for PowerShell-initiated connections (e.g., destination port, protocol, data volume, connection duration). Identify clusters of normal behavior. A new connection that does not fall into any existing cluster is flagged as an outlier for investigation as a potential C2 channel established by a profile script."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using PowerShell profiles?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.013",
        "name": "PowerShell Profile",
        "evidence": [
          {
            "description": "A PowerShell profile script, executed in a high-privilege session (e.g., as SYSTEM, Administrator), contains code matching signatures of known privilege escalation tools (e.g., PowerSploit) or functions for token manipulation.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "PowerShell and security logs on Domain Controllers, Administrative Servers, and Privileged Access Workstations, specifically targeting sessions with elevated tokens.",
            "action": [
              "1. Symbolic Logic: Identify high-privilege sessions by correlating process creation events (Windows Event ID 4688) with logon events (Windows Event ID 4624), looking for `powershell.exe` where the user SID is a member of a privileged group or the logon event shows an elevated token. Scan the corresponding script block logs (Windows Event ID 4104) for these sessions using YARA rules that detect signatures of privilege escalation tools (e.g., PowerUp functions like 'Invoke-AllChecks', token manipulation APIs).",
              "2. Statistical Analysis: Build a vocabulary of all functions and cmdlets used in high-privilege profile scripts across the environment. Use TF-IDF (Term Frequency-Inverse Document Frequency) to identify commands that are rare across the general population of scripts but appear in a specific privileged profile. A high TF-IDF score for a sensitive command (e.g., 'Add-Type -TypeDefinition', 'Get-Process -Name lsass') in a privileged context is a strong indicator.",
              "3. Machine Learning: Create a feature set for privileged script blocks, including presence of reflection APIs (`[System.Reflection.Assembly]::Load`) and P/Invoke signatures (`Add-Type`). Train a logistic regression model to predict the likelihood of a script being part of a privilege escalation attempt. Alert when the model's output probability for a script in a privileged profile exceeds a defined threshold (e.g., 0.90)."
            ]
          },
          {
            "description": "A high-privilege PowerShell profile script executes a sequence of actions indicative of privilege escalation, such as reflectively loading a DLL, creating a new service with SYSTEM rights, or accessing the LSASS process memory.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Windows Event ID 7045",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System, Security, and Sysmon event logs on Domain Controllers, Administrative Servers, and Privileged Access Workstations.",
            "action": [
              "1. Symbolic Logic: Create a SIEM correlation rule that triggers when a high-privilege `powershell.exe` process (identified via Event ID 4688/4624) executes a script block containing reflection (`[System.Reflection.Assembly]::Load`) in Event ID 4104, AND this is followed within 5 minutes by either a new service creation (Windows Event ID 7045) from the same process ID or a process access event (Sysmon Event ID 10) targeting `lsass.exe` with specific access rights.",
              "2. Statistical Analysis: Model normal sequences of commands in privileged profile scripts using Markov chains. Based on benign administrative scripts, calculate the transition probabilities between commands (e.g., probability of `New-Service` following `Start-Sleep`). Flag any sequence of commands observed in a live profile execution that has a very low probability under the established model, indicating a novel or unexpected workflow.",
              "3. Machine Learning: Use a sequence-aware model like a Recurrent Neural Network (RNN) or LSTM, trained on sequences of commands (tokenized from Event ID 4104) from known-benign and known-malicious PowerShell scripts. Feed command sequences from privileged profile executions into the model to classify the entire sequence as benign or malicious."
            ]
          },
          {
            "description": "A PowerShell process from a high-privilege account's profile is immediately followed by the creation of a new user, modification of a privileged group, or creation of a scheduled task running as SYSTEM.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4720",
              "Windows Event ID 4732",
              "Windows Event ID 4698"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security and System event logs on Domain Controllers and other administrative servers where user and group management occurs.",
            "action": [
              "1. Symbolic Logic: Create a time-based correlation rule that alerts when a `powershell.exe` process, confirmed to be running from a privileged profile script, is followed within a 60-second window by any of the following events originating from the same user context: a new user creation (Windows Event ID 4720), a user added to a privileged group like 'Domain Admins' or 'Administrators' (Windows Event ID 4732), or a new scheduled task created to run as SYSTEM (Windows Event ID 4698).",
              "2. Statistical Analysis: For each administrative account, baseline the types and frequency of sensitive follow-on actions that normally occur after a profile script execution. Use a chi-squared test to compare the observed distribution of follow-on actions (e.g., 0 user creations, 2 group mods) for a given session against the historical distribution. A significant p-value indicates a deviation from normal administrative behavior.",
              "3. Machine Learning: Model the relationship between profile script characteristics and subsequent system changes as a multi-label classification problem. Features would include script entropy and keywords. Labels would be the types of sensitive events that occur (e.g., `User_Created`, `Group_Modified`). An alert is generated if the model predicts a sensitive action that is not part of the account's established automation baseline."
            ]
          },
          {
            "description": "A PowerShell profile file for a high-privilege account (e.g., AllUsersAllHosts, Administrator's profile) is modified by a lower-privileged user or a non-standard process, followed by the high-privilege account executing PowerShell.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system audit logs on Domain Controllers, Administrative Servers, and File Servers hosting roaming profiles.",
            "action": [
              "1. Symbolic Logic: Implement a two-stage detection rule. Stage 1 triggers a low-priority alert when a file write event (Windows Event ID 4663 or Sysmon Event ID 11) is detected on a privileged PowerShell profile path (e.g., `C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1`) and the SubjectUserName of the writing process is not a member of a privileged group. Stage 2 escalates this to a high-priority alert if the privileged account associated with that profile subsequently logs on (Windows Event ID 4624) and executes `powershell.exe` (Windows Event ID 4688) within a 24-hour window.",
              "2. Statistical Analysis: Analyze the parent-child process relationships for processes that modify privileged profiles. Create a baseline of legitimate parent processes (e.g., `explorer.exe`, `code.exe`). Calculate the frequency of each parent process. Alert if a low-frequency or first-seen parent process (e.g., `winword.exe`, a custom executable) modifies a privileged profile, as this is highly anomalous.",
              "3. Machine Learning: Model the attack chain as a graph where nodes are users, processes, and files, and edges represent actions (e.g., 'writes_to', 'executes'). Train a graph-based anomaly detection model (e.g., GraphSAGE) on graphs of normal activity. A sequence where a low-privilege user's process writes to a privileged profile, which is then executed by a high-privilege user, would form an anomalous subgraph structure that the model would flag."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]