[
  {
    "information_requirement": "Is the adversary using AppleScript for malicious execution on macOS endpoints? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.002",
        "name": "AppleScript",
        "evidence": [
          {
            "description": "An 'osascript' process execution event is observed where either the script's SHA256 hash is present on a threat intelligence feed of known-bad indicators, or the script (or a child process) establishes a network connection to a destination FQDN or IP address with a reputation score below a specified threshold (e.g., < 20/100).",
            "data_sources": [
              "macOS Process Execution Log",
              "macOS File Access Log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, particularly user workstations that handle external files; Network egress points and DNS resolvers; Threat intelligence platform API.",
            "action": [
              "Symbolic: For each 'osascript' process execution, retrieve the full path of the script file. Calculate the script's SHA256 hash and query it against all subscribed threat intelligence feeds for known malicious hashes. Simultaneously, correlate the process ID with network logs (Zeek conn.log) within a 60-second window to find associated outbound connections. Query the destination IP and any resolved FQDN (from Zeek dns.log) against threat intelligence feeds. Generate a high-priority alert on any match.",
              "Statistical: For each 'osascript' execution, identify the parent process. Maintain a 30-day rolling frequency count of all parent-child process relationships involving 'osascript' across the enterprise. Trigger an alert if 'osascript' is spawned by a parent process that falls into the bottom 5th percentile of historical frequency (e.g., 'Microsoft Word', 'Preview.app'), indicating an anomalous execution chain.",
              "Machine Learning: Develop a classification model (e.g., XGBoost, Random Forest) trained on labeled benign and malicious 'osascript' executions. Extract features for each execution event, including parent process name, command-line arguments, script path entropy, presence of network connections, and destination IP/FQDN reputation scores. An event receiving a 'malicious' probability score greater than a calibrated threshold (e.g., 0.85) should be automatically escalated for investigation."
            ]
          },
          {
            "description": "An 'osascript' process is executed using the inline script flag '-e' and the provided script content exhibits a Shannon entropy score above a baseline for typical administrative scripts, or the command line contains suspicious substrings such as 'do shell script', 'curl', 'python', or 'base64'.",
            "data_sources": [
              "macOS Process Execution Log with command-line auditing"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints; Centralized log management system capable of command-line capture and analysis.",
            "action": [
              "Symbolic: Deploy a SIEM rule that uses regular expressions to scan the command-line arguments of all 'osascript' process executions. The rule should match on the presence of the '-e' flag in combination with high-risk keywords, including but not limited to: 'do shell script', 'python', 'curl', 'base64', 'nc', 'bash', and 'zsh'. Generate a medium-priority alert on any match.",
              "Statistical: For every 'osascript' execution using the '-e' flag, extract the inline script string from the command line. Calculate the Shannon entropy of this string. Establish an environment-specific baseline by calculating the 95th percentile entropy value from all inline scripts observed over a 30-day period. Alert on any new inline script whose entropy score exceeds this established 95th percentile threshold, indicating likely obfuscation or packing.",
              "Machine Learning: If full script content is available from command-line logs, use a pre-trained NLP transformer model (e.g., a fine-tuned DistilBERT) to classify the inline script's maliciousness. The model should be trained on a corpus of known benign and malicious AppleScript and shell commands. Generate a high-priority alert if the model classifies the script as malicious with a confidence score above 0.90."
            ]
          },
          {
            "description": "A process execution chain is observed where a common productivity application (e.g., Microsoft Word, Preview.app) spawns 'osascript', which subsequently (within a 60-second window) initiates an outbound network connection to a destination FQDN or JA3/JA3S hash that is statistically rare across the enterprise.",
            "data_sources": [
              "macOS Process Execution Log",
              "macOS Network Connection Log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints for user groups with high exposure to external documents (e.g., HR, Finance, Sales); Network egress points instrumented with Zeek; DNS and SSL/TLS traffic inspection points.",
            "action": [
              "Symbolic: Create a correlation rule that triggers when an 'osascript' process, whose parent is from a list of non-standard initiators (e.g., 'Microsoft Word', 'Adobe Reader'), initiates an outbound network connection. Check the destination IP and FQDN (from Zeek dns.log) against threat intelligence feeds. Additionally, check the JA3/JA3S hash (from Zeek ssl.log) against known malicious hashes. Alert on any match.",
              "Statistical: For every network connection made by 'osascript' or its children, analyze the rarity of the connection artifacts. Maintain a 30-day rolling baseline of all destination FQDNs and JA3/JA3S hashes observed across the enterprise. Assign a risk score to the connection if the FQDN has been seen fewer than 5 times enterprise-wide, or if the JA3/JA3S hash is in the bottom 1% of prevalence. Connections exceeding a cumulative risk score threshold should be flagged for review.",
              "Machine Learning: Implement an anomaly detection model (e.g., Isolation Forest) on network connection events originating from 'osascript'. Use features such as parent process name, destination port, bytes sent/received, JA3 hash rarity score, and FQDN rarity score. Train the model on benign traffic patterns. Any connection flagged as an anomaly by the model indicates a deviation from normal behavior, such as potential C2 communication, and should be investigated."
            ]
          },
          {
            "description": "The 'osascript' process, or a direct child process, creates or modifies a file with executable permissions or a property list (.plist) file within a known macOS persistence directory (e.g., /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, /Library/ScriptingAdditions).",
            "data_sources": [
              "macOS File Creation Log",
              "macOS File Modification Log",
              "macOS Process Execution Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide and user-specific macOS persistence locations, including /Library/LaunchAgents, ~/Library/LaunchAgents, /Library/LaunchDaemons, and /Library/ScriptingAdditions on all macOS endpoints.",
            "action": [
              "Symbolic: Deploy a file integrity monitoring (FIM) rule that generates a high-severity alert whenever a process with the name 'osascript' (or its children, if correlation is possible) performs a write or modify operation on a file within a monitored list of persistence directories. The rule should specifically look for file extensions like '.plist' or files with execute permissions being set.",
              "Statistical: For each user and host, establish a baseline for the rate of file creation/modification events in persistence locations originating from 'osascript'. Use a time-series analysis to calculate a 99th percentile threshold for this activity (e.g., files per hour). Trigger an alert if the observed activity from 'osascript' on a given endpoint exceeds this statistical threshold, indicating a potential burst of persistence activity.",
              "Machine Learning: Employ a clustering algorithm (e.g., DBSCAN) on file system events to define 'normal' behavior. Features should include the acting process name, target directory, file extension, and file permissions. A file modification event by 'osascript' in a persistence location that is classified as a 'noise' point by the model (i.e., it does not fit into any established cluster of benign administrative activity) should be flagged as a potential novel persistence attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]