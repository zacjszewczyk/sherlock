[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying file associations?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.001",
        "name": "Change Default File Association",
        "evidence": [
          {
            "description": "A registry modification event is recorded for a `shell\\open\\command` key within HKEY_CLASSES_ROOT or a user's FileExts key, where the process performing the modification or the new command value matches a known threat intelligence indicator.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives (HKEY_CLASSES_ROOT, HKEY_CURRENT_USER) on all Windows endpoints, with a focus on servers hosting critical applications and privileged access workstations.",
            "action": [
              "Create a SIEM rule that alerts when a registry value is set (Sysmon Event ID 13 or Windows Event ID 4657) for a key path ending in `\\shell\\open\\command` and the `ProcessImage` or `Details` (new value) matches a known malicious hash, command-line pattern, or file path from a threat intelligence feed.",
              "Establish a baseline of processes that legitimately modify file association registry keys. For each modification event, calculate the rarity of the source process across the enterprise. Flag modifications made by processes in the bottom 5th percentile of frequency for this activity, or by processes never before seen performing this action.",
              "Train a supervised classification model (e.g., Random Forest) using features extracted from registry modification events, such as process name, parent process name, process signature status, target key path, and entropy of the new registry value. Use the model to score each modification event, generating alerts for those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A registry modification event is recorded for a file extension handler associated with non-executable files (e.g., txtfile, jpegfile, rtffile) where the new command value is set to execute a script interpreter or a living-off-the-land binary (LOLBin).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows workstations and servers, particularly those used by general users who handle documents and images.",
            "action": [
              "Develop a SIEM rule to detect registry value set events where the target key path contains a handler for a non-executable file type (e.g., `txtfile`, `jpegfile`, `pdffile`) and the new value contains a call to a script interpreter (`powershell.exe`, `cscript.exe`, `mshta.exe`) or a known LOLBin (`rundll32.exe`, `certutil.exe`).",
              "For each file extension, create a baseline of legitimate command handlers seen across the enterprise. For each modification, compare the new handler to this baseline. Flag handlers that are not in the top 99th percentile of prevalence for that extension. Additionally, calculate the Shannon entropy of the command string in the new registry value; alert if the entropy score is a statistical outlier (e.g., >3 standard deviations from the mean for that handler type), suggesting obfuscated commands.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to group file association modifications. Use features such as the file extension being modified, the new handler's process name, the handler's file path, and command-line arguments. Treat new, small, or sparsely populated clusters as anomalies requiring investigation, as they represent deviations from common software installation or update patterns."
            ]
          },
          {
            "description": "A process creation event is observed where a common document or file handling application (e.g., explorer.exe, notepad.exe, winword.exe) spawns a child process that is a script interpreter or an executable located in a user-writable or temporary directory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Windows endpoints, with emphasis on workstations where users frequently open documents and other files.",
            "action": [
              "Create a SIEM rule to alert on process creation events (Sysmon Event ID 1) where the `ParentImage` is a common document handler (e.g., `explorer.exe`, `notepad.exe`, `acrord32.exe`) and the child `Image` is a script interpreter or LOLBin, or is located in a suspicious directory like `%APPDATA%` or `C:\\Users\\Public\\`.",
              "For each potential parent process (e.g., `explorer.exe`, `winword.exe`), build a historical baseline of all child processes it normally spawns. For each new process creation event, calculate the frequency of the parent-child pair. Flag any pair that is new or falls below a rarity threshold (e.g., seen on fewer than 0.1% of endpoints).",
              "Aggregate counts of suspicious parent-child process relationships (e.g., `acrord32.exe` -> `powershell.exe`) across the enterprise into a time series. Apply a time-series anomaly detection model (e.g., ARIMA) to identify statistically significant spikes in these events, which could indicate a coordinated attack campaign."
            ]
          },
          {
            "description": "A process, spawned by a user opening a file, initiates a network connection to a destination that matches a threat intelligence blocklist or is statistically anomalous in terms of destination, port, or data volume for that process.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process and network logs from Windows endpoints, and network traffic metadata from network sensors at egress points and within major network segments.",
            "action": [
              "Correlate process creation events (Sysmon Event ID 1) with network connection logs (Zeek conn.log or Sysmon Event ID 3) on host IP and timestamp. Trigger an alert if a child process of a common file handler (e.g., `explorer.exe`, `acrord32.exe`) makes an outbound connection to an IP, domain, or JA3/JA3S hash present in a threat intelligence feed.",
              "Correlate process creation events with network logs. For the created process, analyze its network connections. Calculate the historical rarity of the destination IP, port, and domain (from Zeek dns.log) for that specific process name. Flag connections where the destination domain falls into the bottom 1st percentile of a public domain popularity list or where the destination IP has a low reputation score.",
              "Develop an unsupervised anomaly detection model (e.g., Isolation Forest or Autoencoder) trained on features from correlated process and network events. Features should include process name, parent process name, destination port, protocol, bytes sent, and connection duration. The model will learn a profile of normal process network behavior and flag any activity with a high anomaly score, such as `notepad.exe` making a long-running TCP connection to a non-standard port."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by modifying file associations?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.001",
        "name": "Change Default File Association",
        "evidence": [
          {
            "description": "A registry modification event is recorded for a `shell\\open\\command` key where the new command value contains command-line arguments or strings associated with known privilege escalation tools or techniques.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on sensitive systems, including Domain Controllers, Certificate Authority servers, and Privileged Access Workstations (PAWs).",
            "action": [
              "Deploy a SIEM rule that monitors registry value set events for modifications to `...\\shell\\open\\command` keys. The rule should use regular expressions to scan the new value for strings associated with privilege escalation tools (e.g., `invoke-mimi`, `PrintSpoofer.exe`, `JuicyPotato.exe`) or specific bypass techniques.",
              "For all modifications to `...\\shell\\open\\command` keys, parse the command-line arguments from the new value. Maintain a frequency dictionary of all observed arguments and argument pairs. Flag any modification containing an argument or pair that falls below a rarity threshold (e.g., has appeared on less than 0.01% of systems).",
              "Train a supervised text classification model (e.g., using TF-IDF vectorization and a Naive Bayes classifier) on a labeled dataset of command lines known to be benign or malicious for privilege escalation. Apply the model to the `New Value` field of all relevant registry modifications, alerting on commands classified as malicious with high confidence."
            ]
          },
          {
            "description": "A registry modification event is recorded for a file extension handled by privileged services (e.g., .log, .xml, .ini) where the new command handler is an executable located in a user-writable path like C:\\Users or C:\\ProgramData.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on servers and workstations, with a specific focus on file associations for extensions like .log, .xml, and .ini that may be opened by privileged system services.",
            "action": [
              "Create a watchlist of file extensions handled by privileged processes (.log, .xml, .ini, .cfg). Create a SIEM rule that alerts on registry value set events for these extensions where the new handler path in the `...\\shell\\open\\command` key points to a user-writable directory (e.g., `C:\\\\Users\\\\`, `%APPDATA%`, `%TEMP%`).",
              "Build a baseline of all executable paths registered as file handlers across the enterprise. For each modification event, compare the directory of the new handler executable against this baseline. Flag any modification where the handler's path is statistically rare (e.g., not in the top 99% of common paths) or points to a known user-writable location.",
              "Apply an unsupervised clustering algorithm to group file association modifications. Use features such as the handler executable's path, its digital signature status, its name, and the file extension it is being associated with. Investigate clusters that represent unsigned executables in user-writable directories being newly associated with system-related file extensions."
            ]
          },
          {
            "description": "A process creation event shows a process running with SYSTEM integrity spawning an interactive shell or script interpreter, which is inconsistent with its established baseline behavior, suggesting a privileged file handler was triggered by a system service.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Windows servers and critical workstations, particularly those running services or scheduled tasks as NT AUTHORITY\\SYSTEM.",
            "action": [
              "Create a SIEM rule to detect process creation events (Sysmon Event ID 1) where the `User` is `NT AUTHORITY\\SYSTEM` and the `ParentImage` is a system service (e.g., `services.exe`, `svchost.exe`), but the child `Image` is an interactive shell or script interpreter (`cmd.exe`, `powershell.exe`, `wscript.exe`).",
              "For each process running as SYSTEM (e.g., `svchost.exe`), build a historical baseline of its legitimate child processes. For each new process creation, flag parent-child relationships that are new to the environment or have a frequency below a defined rarity threshold (e.g., observed less than 5 times enterprise-wide).",
              "Model the behavior of privileged processes using a sequence-based autoencoder. The model learns normal sequences of child process creations, file modifications, and network connections. Flag any sequence of actions by a privileged process that results in a high reconstruction error, indicating it deviates from learned normal behavior, such as a print spooler service spawning `cmd.exe`."
            ]
          },
          {
            "description": "A process creation event is recorded with a full elevated token (Token Elevation Type `%%1936` or Integrity Level `High`/`System`) immediately after a user opens a common file, where the elevated process is not the expected default handler or a common utility.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Windows workstations, especially those used by non-administrator users where UAC is enforced.",
            "action": [
              "Write a SIEM rule that looks for a process creation event (Windows Event ID 4688) where `Token Elevation Type` is `%%1936` (Type 2 - Full) and the `Creator Process Name` is a common document handler, but the `New Process Name` is not on an allowlist of applications that legitimately prompt for UAC.",
              "For each user and each parent process, calculate a baseline (e.g., 30-day moving average and standard deviation) of UAC elevation events. Alert when the daily count of elevations for a user, or from a specific parent process, exceeds a statistical threshold (e.g., mean + 3 standard deviations).",
              "Train a supervised classification model (e.g., Gradient Boosting) to predict the legitimacy of a UAC elevation event. Use features such as parent process name, child process name, child process path, and command-line arguments. Deploy the model to score each elevation event, alerting on those classified as suspicious with high confidence, particularly when the parent is a document handler."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]