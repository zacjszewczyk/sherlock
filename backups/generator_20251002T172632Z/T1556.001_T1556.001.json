[
  {
    "information_requirement": "Is the adversary maintaining persistence on the domain controller via patched authentication?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "The multi-string registry value at 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' on a domain controller is modified to include a new DLL name not present in a curated known-good baseline for the environment.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' registry",
            "action": [
              "Symbolic: Implement a detection rule that triggers when Windows Event ID 4657 or Sysmon Event ID 13 reports a modification to the registry value 'HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages' on any host identified as a domain controller. Alert if the added DLL name matches a list of known malicious packages (e.g., mimilib.dll) or if the associated DLL file is not signed by Microsoft.",
              "Statistical: For all domain controllers, establish a baseline of the DLLs listed in the 'Security Packages' registry key. Calculate the prevalence of each DLL across the fleet. Flag any DLL that is a statistical outlier (e.g., present on only a single domain controller). Additionally, track the rate of change for this key value; any modification outside of a scheduled maintenance window that is not attributable to a known change request is anomalous.",
              "Machine Learning: Develop a time-series forecasting model (e.g., ARIMA) based on historical registry modification events to predict normal patching and update cycles for the 'Security Packages' key. An observed modification that is a significant anomaly in the time-series forecast should generate an alert. Concurrently, use a pre-trained classification model to score the file properties (e.g., entropy, import table hash, signature status) of the new DLL to assess its likelihood of being malicious."
            ]
          },
          {
            "description": "A process is created on a domain controller with command-line arguments containing substrings indicative of Mimikatz skeleton key functionality, such as 'misc::skeleton'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' process execution logs",
            "action": [
              "Symbolic: Create a detection rule that searches process creation events (Windows Event ID 4688, Sysmon Event ID 1) on domain controllers for command-line arguments containing specific keywords like 'misc::skeleton', 'privilege::debug', or 'sekurlsa::'. Alert on any match.",
              "Statistical: Analyze command-line arguments on domain controllers by calculating the Shannon entropy of the command string. Establish a baseline of entropy values for legitimate processes. Alert on commands with an entropy score exceeding the 95th percentile of the baseline, as this can indicate obfuscation or encoded payloads. Also, track parent-child process relationships and flag rare combinations (e.g., a web server process spawning PowerShell).",
              "Machine Learning: Train a classification model (e.g., logistic regression or a deep learning model) on features extracted from command lines (length, special character count, keyword presence, n-gram frequency, entropy) to distinguish between benign administrative commands and malicious commands. Use the model to score all new commands on domain controllers in real-time."
            ]
          },
          {
            "description": "A successful logon event (Logon Type 2, 3, 9, or 10) is recorded on a domain controller for a user account whose 'userAccountControl' attribute in Active Directory is flagged as 'ACCOUNTDISABLE'.",
            "data_sources": [
              "Windows Event ID 4624",
              "Active Directory User Account Attributes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database",
            "action": [
              "Symbolic: Periodically query Active Directory for all disabled accounts and ingest this list into a SIEM watchlist. Create a correlation rule that joins this watchlist with successful authentication events (Windows Event ID 4624). Any successful logon where the 'TargetUserName' is on the disabled accounts watchlist is a high-fidelity alert for potential skeleton key activity.",
              "Statistical: The baseline count of successful logons for disabled accounts should be zero. Any non-zero value is a significant statistical anomaly. Monitor and alert on any instance. Report the rate of these events per hour to quantify the scope of the abuse if multiple accounts are affected.",
              "Machine Learning: Use a time-series model to monitor the volume of distinct disabled accounts successfully authenticating. A sudden spike from zero indicates the initial compromise, while a subsequent increase in the variety of accounts used can indicate the adversary is actively leveraging the backdoor for lateral movement."
            ]
          },
          {
            "description": "A successful interactive logon (Logon Type 2 or 10) or Remote Interactive logon (Logon Type 7) to a domain controller is recorded for a user account that has no history of such logons in the preceding 90 days.",
            "data_sources": [
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' authentication logs",
            "action": [
              "Symbolic: Maintain a lookup table or Active Directory group of accounts authorized for interactive logon to domain controllers. Filter Windows Event ID 4624 on domain controllers for Logon Types 2, 7, or 10. Alert if any account not in the authorized group successfully performs an interactive logon.",
              "Statistical: For each user account, build a historical profile of logon types to domain controllers over a 90-day rolling window. Calculate the frequency of each logon type. If an account performs an interactive logon and its historical frequency for that logon type is zero (a 'first-time seen' event), flag it as anomalous and increase its risk score.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means or DBSCAN) to group user accounts based on their typical logon behavior (logon types, frequency, times of day, source workstation). A service account that suddenly moves from a 'non-interactive' cluster to an 'interactive' cluster represents a state change anomaly indicative of credential misuse or a compromised account."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by patching domain controller authentication?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "A process is created on a domain controller where the process name (e.g., 'mimikatz.exe') or the OriginalFileName from the PE header matches a known malicious tool associated with credential dumping or authentication patching.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' process execution logs",
            "action": [
              "Symbolic: Monitor process creation events (Sysmon Event ID 1) on all domain controllers. Compare the 'Image' and 'OriginalFileName' fields against a threat intelligence feed of malicious tool names and their known hashes. Alert on any match.",
              "Statistical: Establish a baseline of all process names executed on domain controllers. Calculate the frequency of each process. A process name that is extremely rare (e.g., seen only once in 30 days across the fleet, falling in the lowest 1st percentile) should be flagged for investigation, especially if it is not signed by a trusted publisher.",
              "Machine Learning: Train a classification model to score process names for maliciousness based on character-level n-grams and other lexical features. This can help detect slight variations of known tool names (e.g., 'm1m1katz.exe', 'mimikatz_alt.exe') designed to evade simple string matching and blocklists."
            ]
          },
          {
            "description": "A process requests access to the lsass.exe process memory on a domain controller, where the requesting process is not a known, legitimate system or security process (e.g., wininit.exe, services.exe, specific EDR agents).",
            "data_sources": [
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' process memory access logs",
            "action": [
              "Symbolic: Monitor for Sysmon Event ID 10 events where the 'TargetImage' is 'C:\\Windows\\system32\\lsass.exe'. Maintain a whitelist of legitimate 'SourceImage' processes (e.g., 'wininit.exe', 'services.exe', approved EDR/AV processes). Alert on any process accessing lsass.exe that is not on the whitelist, especially if the 'GrantedAccess' mask includes high-privilege values like 0x1010 or 0x1410 (PROCESS_VM_READ, PROCESS_VM_WRITE).",
              "Statistical: Profile the frequency of different processes accessing lsass.exe. A process that has never accessed lsass.exe before (a 'first-time' access event) is a statistical anomaly. Further, analyze the distribution of 'GrantedAccess' masks requested by each source process; a request for an unusual or high-privilege access mask compared to a process's own baseline is suspicious.",
              "Machine Learning: Use a sequence anomaly detection model (e.g., an LSTM autoencoder) on the events leading up to lsass.exe access. A model can learn the normal sequence of process creations and API calls. A sequence involving process creation from an unusual directory, followed by loading suspicious DLLs, and then accessing lsass.exe would be flagged as a multi-stage anomaly."
            ]
          },
          {
            "description": "A file modification or creation event is recorded for a critical authentication-related DLL (e.g., cryptdll.dll, msv1_0.dll, samsrv.dll) in the C:\\Windows\\System32 directory of a domain controller, where the event is not associated with a trusted installer process like 'TrustedInstaller.exe'.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' C:\\Windows\\System32 directory",
            "action": [
              "Symbolic: Enable File System Object Access Auditing on domain controllers for the System32 directory. Monitor for Write or Delete events on a curated list of critical DLLs (msv1_0.dll, samsrv.dll, cryptdll.dll, etc.). Whitelist the 'TrustedInstaller.exe' process during approved maintenance windows. Alert on any modification by a non-whitelisted process.",
              "Statistical: Establish a baseline hash (e.g., SHA256) for each critical authentication DLL on all domain controllers after patching. Periodically re-calculate the hashes and compare against the baseline. Any hash mismatch is a high-fidelity indicator of tampering. Track the rate of file modifications in the System32 directory; a sudden spike in modifications outside of a patch window is a statistical anomaly.",
              "Machine Learning: Use a time-series model to predict file modification events in the System32 directory based on historical patching data. An unpredicted modification event is an anomaly. A classification model can also score the process that performed the modification based on its properties (name, path, parent process, signature status) to determine if it is a suspicious actor."
            ]
          },
          {
            "description": "For a remote logon to a domain-joined resource where MFA is enforced, a successful primary authentication event (Windows Event ID 4624, Logon Type 3 or 10) is logged without a corresponding successful MFA event from the MFA provider for that user within a 2-minute time window.",
            "data_sources": [
              "Windows Event ID 4624",
              "MFA Provider Logs",
              "Zeek conn.log",
              "VPN Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, MFA Authentication Servers, Network Gateway",
            "action": [
              "Symbolic: For each successful remote logon (Windows Event ID 4624, Logon Type 10 or 3), perform a lookup against the MFA provider logs for a successful authentication event for the same 'TargetUserName' from the same 'IpAddress' within a +/- 2-minute window. If no corresponding MFA success event is found, generate a high-priority alert for a potential MFA bypass.",
              "Statistical: For each user, calculate the ratio of successful remote Windows logons to successful MFA logons over a rolling 24-hour window. The expected ratio should be close to $$ 1.0 $$ for MFA-enforced systems. A sudden drop in this ratio (e.g., many Windows logons but few MFA logons) is a statistical indicator of a potential bypass.",
              "Machine Learning: Train a time-series model on the event stream for a user session (e.g., VPN connect -> Windows logon -> MFA success). The model learns the expected sequence and timing of these events. An observed sequence that deviates from the learned pattern, such as a missing MFA success event or an abnormally long delay, is flagged as a sequence anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary accessing credentials or accounts via patched domain controller authentication?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1556.001",
        "name": "Domain Controller Authentication",
        "evidence": [
          {
            "description": "A successful logon event (Windows Event ID 4624) is recorded for a designated honey-token account, which is a disabled account with high-privilege group memberships but no legitimate use case.",
            "data_sources": [
              "Windows Event ID 4624",
              "Active Directory User Account Attributes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database",
            "action": [
              "Symbolic: Create one or more disabled user accounts in Active Directory to serve as honey-tokens. Create a high-priority detection rule that triggers an immediate alert upon any successful logon event (Windows Event ID 4624) where the 'TargetUserName' matches a honey-token account.",
              "Statistical: The baseline logon frequency for a disabled honey-token account is zero. Any successful logon is therefore an infinite statistical deviation from the norm. Track the number of unique honey-token accounts that have successful logons over time; an increasing count indicates the adversary is actively discovering and using them.",
              "Machine Learning: Use a classification model on the source of the logon (IP address, hostname) to automatically enrich the alert with context, classifying the source as internal/external, trusted/untrusted, or matching known adversary infrastructure. This helps prioritize the response."
            ]
          },
          {
            "description": "A failed logon event (Windows Event ID 4625, Status Code 0xc000006d 'bad password') is followed within 5 seconds by a successful logon event (Windows Event ID 4624) for the same user account from the same source IP address.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers' authentication logs",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a Windows Event ID 4625 with 'Status' code '0xc000006d' is immediately followed by a Windows Event ID 4624 from the same 'IpAddress' for the same 'TargetUserName' within a 5-second window. This is a specific behavioral signature for skeleton key usage.",
              "Statistical: The time delta between a user's failed logon (4625) and subsequent successful logon (4624) can be analyzed. A distribution of these time deltas clustered near zero for a specific user or source IP is highly anomalous compared to normal user behavior, who may wait longer before re-typing a password or have longer lockout periods.",
              "Machine Learning: Use a sequence analysis model to detect the specific 'fail-then-succeed' event pattern in the stream of authentication logs. The model can learn to distinguish this malicious pattern from benign behavior (e.g., a user quickly correcting a typo) by considering the frequency, timing, source, and account context of the events."
            ]
          },
          {
            "description": "Following a successful network logon (Logon Type 3), a user account generates logon events on a number of distinct destination hosts that exceeds the 99th percentile of that account's historical 1-hour activity baseline.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Member Servers, User Workstations, Network Segments",
            "action": [
              "Symbolic: After a successful logon, track the subsequent network connections (e.g., from Zeek conn.log correlated with Windows Event ID 4769 Kerberos tickets). If the user account attempts to connect to a list of predefined 'crown jewel' assets that it is not authorized to access, trigger an alert.",
              "Statistical: For each user account, build a rolling 30-day baseline of the number of distinct destination hosts accessed per hour. Use percentile-based thresholding to alert when an account's activity in a given hour exceeds its own 99th percentile. This is a form of user behavior analytics (UBA) to detect anomalous lateral movement.",
              "Machine Learning: Use a graph-based clustering algorithm (e.g., Louvain community detection) to model normal user-to-host access patterns. An edge in the graph represents a user logging into a host. A user who suddenly creates edges to a new cluster of hosts they do not normally interact with would be flagged as a community detection anomaly."
            ]
          },
          {
            "description": "Two successful logon events are recorded for the same user account from two different source IP addresses, where the geographic distance between the IPs and the time elapsed between logons implies a travel velocity greater than 600 mph (965 kph).",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "VPN Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, Network Gateway, Cloud Service Authentication Logs",
            "action": [
              "Symbolic: For every successful remote logon (Windows Event ID 4624, Logon Type 10), geolocate the source IP address. If the source country is on a 'blocked countries' list, alert immediately. This is a simple geographic IOC rule.",
              "Statistical: For each new successful logon, enrich the event with geolocation data for the source IP. Calculate the great-circle distance and time delta from the user's previous logon location. Compute the required travel velocity. If the velocity exceeds a plausible speed (e.g., 600 mph), this is a statistical impossibility. Alert on this 'impossible travel' event.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to identify a user's typical geographic logon clusters (e.g., 'Office', 'Home', 'Mobile Carrier Network'). A logon from a location far outside any established cluster is a spatial anomaly. A time-series model can also track a user's logon velocity over time to detect sudden, anomalous jumps that might not be impossible but are highly improbable."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]