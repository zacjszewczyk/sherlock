[
  {
    "information_requirement": "Is the adversary establishing or maintaining persistence by creating or modifying Windows services?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.003",
        "name": "Windows Service",
        "evidence": [
          {
            "description": "A new Windows service is created and its associated executable's file hash or its designated service name matches a known-malicious indicator from a threat intelligence source.",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Endpoint Workstations, Threat Intelligence Platforms",
            "action": [
              "For each service creation event (Windows Event ID 4697/7045), extract the 'Service Name' and 'Service File Name' (path). Query endpoints or file analysis systems to retrieve the SHA256 hash of the binary at the 'Service File Name' path. Correlate both the 'Service Name' and the binary hash against integrated threat intelligence feeds. Generate a high-severity alert on any match.",
              "Using service creation logs, build a frequency table of all 'Service Name' and 'Service File Name' values across the enterprise over a 30-day baseline. Identify statistical outliers by flagging any service name or file path that appears on fewer than 1% of endpoints or in a directory that is rare (e.g., bottom 5% of all service directories by frequency).",
              "Develop a classification model (e.g., Random Forest, Gradient Boosting) to predict service maliciousness. Train the model using features extracted from service creation events and the associated binary, such as: service name entropy, file path depth and location (e.g., System32, Program Files, Temp), binary entropy, binary has a valid digital signature, and binary import/export functions. Score all new services and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A new Windows service's 'ImagePath' contains a command that executes a Living-Off-the-Land Binary (LOLBAS) with suspicious arguments, such as those used for obfuscation, remote file download, or inline script execution.",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Endpoint Workstations",
            "action": [
              "From service creation events, parse the 'Service File Name' (ImagePath). Create a detection rule that triggers if the executable is a known LOLBAS (e.g., powershell.exe, mshta.exe, rundll32.exe, regsvr32.exe) AND the command-line arguments contain high-risk patterns like '-enc', 'IEX', 'DownloadString', 'http:', 'ftp:', or UNC paths (\\\\\\\\).",
              "For each LOLBAS used in a service ImagePath, establish a baseline of command-line argument length and Shannon entropy. Calculate these metrics for each new service creation. Flag any instance where the argument entropy or length exceeds the 95th percentile of the historical distribution for that specific LOLBAS, indicating potentially complex or obfuscated commands.",
              "Train a classifier using a Bag-of-Words or TF-IDF vectorization of command-line arguments from known benign and malicious service commands. Use a model like Logistic Regression or a Simple Neural Network to classify new command lines as suspicious or benign. This approach learns which combinations of arguments and flags are indicative of malicious activity."
            ]
          },
          {
            "description": "A new Windows service is created where its executable binary ('Service File Name') is located in an atypical or non-standard directory, such as a user's home directory, temporary folder, or a public-writable location.",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Workstations, Multi-user Terminal Servers, File Servers",
            "action": [
              "From service creation events (4697/7045), extract the directory path from the 'Service File Name'. Maintain a denylist of unauthorized service binary locations (e.g., 'C:\\\\Users\\\\', 'C:\\\\Windows\\\\Temp\\\\', 'C:\\\\PerfLogs\\\\', 'C:\\\\ProgramData\\\\', network shares). Generate an alert if a new service's binary path falls within a denylisted directory.",
              "Aggregate all 'Service File Name' paths from service creation events across the environment. Create a frequency count of the parent directories. Flag any new service whose binary is located in a parent directory that accounts for less than 1% of all service locations, as this identifies an exceptionally rare installation path.",
              "Use an anomaly detection model like Isolation Forest trained on the string representation of directory paths from all known-good services. The model learns the structure of normal paths. Score the path of each new service; paths with high anomaly scores (indicating they are structurally different from the norm) should be flagged for investigation."
            ]
          },
          {
            "description": "A service with 'Auto-Start' enabled is created on a host at a time that is inconsistent with that host's logged change management tickets, software deployment schedules, or patching windows.",
            "data_sources": [
              "Windows Event ID 4697",
              "Windows Event ID 7045",
              "Change Management System Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Change Management Systems (e.g., ServiceNow, Jira), Software Deployment Servers (e.g., SCCM), Endpoint Workstations, SIEM Correlation Engine",
            "action": [
              "For every new auto-start service creation event (StartType=0x2 in 4697/7045), perform a correlation search. Query change management logs for an approved change ticket for the affected hostname within a predefined time window (e.g., +/- 60 minutes) of the service creation event. If no corresponding authorized activity is found, generate an alert.",
              "For each host, establish an hourly baseline profile of new auto-start service creations over a 30-day period. Calculate the mean and standard deviation for each hour of the day. Generate an alert if the count of new auto-start services in a given hour exceeds three standard deviations from the host's historical average for that hour.",
              "Implement a time-series anomaly detection model (e.g., Seasonal-Hybrid ESD, ARIMA) for each host or for the entire enterprise, forecasting the expected number of new service installations. An observed count that falls outside the model's prediction interval (a large residual error) indicates a burst of activity inconsistent with historical patterns and should be investigated."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by creating or modifying a Windows service with insecure permissions or by hijacking an existing one?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.003",
        "name": "Windows Service",
        "evidence": [
          {
            "description": "The 'ImagePath' registry value of an existing high-privilege service is modified, or its corresponding executable file on disk is overwritten, to point to an unauthorized or unsigned binary.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0 Servers, Privileged Access Workstations (PAWs), Registry Hives on Endpoints",
            "action": [
              "Maintain a baseline of ImagePath values and file hashes for critical, high-privilege services. Monitor for registry modifications (4657/Sysmon 13) or file writes (4663/Sysmon 11) affecting these services. Upon detection, check the digital signature of the new binary. Alert immediately if the binary is unsigned, the signature is invalid, or the signer is not on an approved list for that service.",
              "Baseline the names of processes that legitimately modify service binaries or their registry keys (e.g., 'TrustedInstaller.exe', 'msiexec.exe', patch management agents). A modification event where the initiating process name is not on this allowlist (e.g., 'explorer.exe', 'cmd.exe') represents a statistical anomaly and should be flagged for review.",
              "Train a classification model (e.g., Logistic Regression) to differentiate legitimate patching from malicious hijacking. Use features like: modifying process name, user context, time of day, target service name, and properties of the new binary (is signed, entropy, signer subject). Score all modification events and alert on those classified as malicious."
            ]
          },
          {
            "description": "A service configured to run with SYSTEM privileges has its configuration (e.g., ImagePath, StartType) modified by a user account that does not belong to a standard administrative group, indicating abuse of misconfigured service permissions (ACLs).",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Active Directory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application Servers, Legacy Systems, Endpoint Workstations, Active Directory Domain Controllers",
            "action": [
              "Create a correlation rule: IF a registry modification event (4657/Sysmon 13) targets a service key (`HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\*`) for a service that runs as 'LocalSystem', THEN enrich the event with the user's group memberships from Active Directory. IF the user is NOT a member of 'Domain Admins', 'Enterprise Admins', or 'Administrators', THEN generate a critical alert.",
              "For each service, profile the Active Directory groups of users who modify its configuration over a 90-day baseline. A modification performed by a user whose groups have a 0% historical modification frequency for that specific service is a high-confidence anomaly indicating a potential permissions abuse.",
              "Use a peer group analysis model (e.g., K-Means clustering on user activity data) to group users by behavioral role. Flag any user who performs a service modification if that action is a significant deviation from the established behavior of their peer group cluster. This identifies users performing actions outside their typical job function."
            ]
          },
          {
            "description": "A high-privilege service process (e.g., services.exe, svchost.exe) spawns an anomalous child process or initiates a network connection to a destination that is rare for that service or organization-wide.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal Network Segments, DNS Servers, Internet Gateways, Endpoint Workstations",
            "action": [
              "Create a detection rule that alerts if a parent process named 'services.exe' or 'svchost.exe' spawns a child process from a denylist (e.g., 'cmd.exe', 'powershell.exe', 'whoami.exe', 'net.exe') or makes a network connection to an IP/domain on a threat intelligence feed.",
              "For each parent service process, maintain a 30-day baseline of its child process names and network destinations. Flag any new child process name not seen in the baseline. For network connections (Zeek conn.log), flag connections where the destination IP's country code, ASN, or port has a prevalence of less than 1% for that service. Additionally, flag rare JA3/JA3S TLS hashes (from Zeek ssl.log) which indicate unusual client/server software.",
              "Model process and network relationships using a graph database. Nodes represent processes, IPs, and domains; edges represent creation or connection events. Use a graph anomaly detection algorithm to score subgraphs (e.g., 'svchost.exe -> powershell.exe -> 1.2.3.4:4444'). Subgraphs that are structurally rare or contain statistically anomalous nodes/edges should be flagged as high-risk."
            ]
          },
          {
            "description": "A sequence of events is observed where a service, normally 'Disabled' or 'Manual', is first reconfigured to 'Auto-Start', then started, and is immediately followed by suspicious process or network activity from that host.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13",
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Application Servers, Databases, Endpoint Workstations, SIEM Correlation Engine",
            "action": [
              "Create a stateful detection rule that triggers on a sequence: 1) Event 4657/Sysmon 13 modifies a service's 'Start' value from 3 (Manual) or 4 (Disabled) to 2 (Auto). 2) Event 7036 shows the same service entering the 'Running' state. 3) This sequence occurs within a 5-minute window. Generate a high-priority alert for this sequence.",
              "For each service, calculate the transitional probability of the event sequence: 'StartType modified to Auto' -> 'Service Started' -> 'Anomalous Child Process Spawned' (e.g., cmd.exe). A sequence with a historically low probability (e.g., occurring less than once a quarter for that service) should be assigned a high risk score.",
              "Use a Hidden Markov Model (HMM) where the states represent the service's configuration (Disabled, Manual, Auto-Running, etc.) and observations are the security events (Registry Write, Service Control Manager event, Process Create). Train the model on legitimate service lifecycles. An adversary's actions, such as forcing an improbable state transition (e.g., Disabled -> Auto-Running) followed by an anomalous observation (spawning a shell), would be identified as a low-probability sequence by the HMM."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]