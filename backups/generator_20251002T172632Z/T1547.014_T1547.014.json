[
  {
    "information_requirement": "Is the adversary maintaining persistence via Active Setup?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.014",
        "name": "Active Setup",
        "evidence": [
          {
            "description": "The 'StubPath' registry value string under 'HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\', or the hash of the file it points to, matches an entry on a threat intelligence blocklist.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives (specifically HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\) on all Windows endpoints.",
            "action": [
              "Query registry modification events (Sysmon Event ID 13) where the 'TargetObject' ends with 'StubPath'. Extract the 'Details' (the new path string) and compare it, along with the hash of the referenced executable, against threat intelligence feeds of known malicious file paths, names, and hashes. Trigger an alert on any match.",
              "Generate a list of all unique 'StubPath' values across all hosts over a 30-day period. For each value, calculate its prevalence (count of hosts with the value / total number of hosts). Flag any value with a prevalence below a defined threshold (e.g., < 0.1% or present on fewer than 5 hosts) as a low-prevalence outlier requiring investigation.",
              "Extract features from 'StubPath' strings: string length, character entropy, file path depth, and presence of keywords (e.g., 'powershell', '.tmp', '.dat'). Train a Random Forest classifier on a labeled dataset of known benign and malicious 'StubPath' values. Apply the trained model to new or modified 'StubPath' values to predict their maliciousness in near real-time."
            ]
          },
          {
            "description": "A registry modification event shows a new 'StubPath' value that contains a command invoking a scripting interpreter (e.g., powershell.exe, cmd.exe) or specifies an executable located in a non-standard, user-writable directory (e.g., C:\\Users\\Public, %TEMP%, %APPDATA%).",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry and process execution logs on all Windows endpoints, with a focus on standard user workstations.",
            "action": [
              "Create a detection rule that uses regular expressions to search the 'Details' field of registry value set events (Sysmon Event ID 13) for 'StubPath' modifications. The regex should match scripting interpreters (powershell, cmd, wscript, cscript, mshta) or paths corresponding to user-writable locations ('C:\\\\Users\\\\.*', 'C:\\\\ProgramData\\\\.*', 'C:\\\\Windows\\\\Temp\\\\.*'). Alert on any match.",
              "For each host, build a baseline of legitimate executable directories found in 'StubPath' values over a 30-day period. For each new 'StubPath' modification, compare the directory path against the host's baseline. Calculate the string entropy of the full path. Flag any path that is not in the baseline and has an entropy value in the top 5th percentile of all observed paths.",
              "From process execution logs (Sysmon Event ID 1), extract features for processes spawned by 'runonce.exe' shortly after logon. Features should include: executable path, command-line arguments, and process hash. Use a density-based clustering algorithm like DBSCAN to group these executions. Investigate any process that is classified as noise or belongs to a very small cluster (e.g., < 5 members), as these represent anomalous executions."
            ]
          },
          {
            "description": "A process creation event is observed within 2 minutes following a user logon event (Type 2 or 10), where the created process is rare or unseen for that user/host, and its parent process is 'runonce.exe' or 'explorer.exe'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation and user logon logs from all Windows endpoints, especially those of privileged users.",
            "action": [
              "Correlate user logon events (Windows Event ID 4624, LogonType 2 or 10) with subsequent process creation events (Sysmon Event ID 1) on the same host within a 2-minute window. Maintain an organizational allowlist of common processes launched at startup. Alert on any process that is not on the allowlist and has a parent process of 'runonce.exe' or 'explorer.exe'.",
              "For each user, create a historical profile of processes executed within 2 minutes of logon. For each new logon, identify processes launched in the startup window. Calculate the execution frequency for each process in the user's profile. Flag any process whose frequency falls below the 5th percentile for that user, indicating it is a rare occurrence.",
              "Model the sequence of process creations post-login (Windows Event ID 4624) using a Long Short-Term Memory (LSTM) autoencoder. Train the model on sequences from benign login sessions. During inference, feed new login sequences into the model and calculate the reconstruction error. A high reconstruction error indicates a deviation from the normal sequence and should be flagged as anomalous."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges via Active Setup?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.014",
        "name": "Active Setup",
        "evidence": [
          {
            "description": "An Active Setup 'StubPath' value is created or modified to execute a known auto-elevating binary (e.g., fodhelper.exe, sdclt.exe) with command-line arguments or registry interactions that are characteristic of a UAC bypass.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives and process command-line logs on all Windows workstations.",
            "action": [
              "Create a rule that searches 'StubPath' registry modifications (Sysmon Event ID 13) and subsequent process creation command lines (Sysmon Event ID 1) for patterns matching known UAC bypass techniques. Examples include 'fodhelper.exe' spawning alongside modifications to 'HKCU\\Software\\Classes\\ms-settings\\', or 'cmstp.exe' executed with '/s' and a '.inf' file path.",
              "Establish a baseline of command-line argument length and entropy for legitimate executions of auto-elevating binaries (e.g., 'eventvwr.exe', 'computerdefaults.exe'). Monitor for executions of these binaries originating from the Active Setup execution chain. Flag any instance where the command-line length or entropy exceeds the 99th percentile of the established baseline.",
              "Train a supervised classifier (e.g., Gradient Boosting) to distinguish between benign and malicious use of auto-elevating binaries. Use features such as: parent process name (e.g., 'runonce.exe'), command-line arguments, execution timing relative to logon, and preceding registry modifications to the Active Setup key. Apply the model to detect novel UAC bypass attempts initiated at logon."
            ]
          },
          {
            "description": "A temporal sequence of events is observed on a single host: 1) A modification to an Active Setup 'StubPath' registry value, followed by 2) a process creation event for a known auto-elevating binary, which in turn 3) accesses the file or registry key specified in the 'StubPath'.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 13",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Correlated registry modification, process creation, and file/registry access logs from all Windows endpoints.",
            "action": [
              "Implement a stateful detection rule that triggers an alert when the following sequence occurs on a host within a 5-minute window: Event A (Sysmon Event ID 13: 'HKLM\\...\\Active Setup\\...\\StubPath' value set), followed by Event B (Sysmon Event ID 1: Process creation of an auto-elevating binary like 'fodhelper.exe'), followed by Event C (Sysmon Event ID 11 or 13: The process from Event B accesses a resource specified in Event A).",
              "Build a probabilistic model of parent-child process relationships. Calculate the conditional probability of each auto-elevating binary being spawned by common parent processes. A parent process of 'runonce.exe' spawning 'fodhelper.exe' is a statistically improbable event (low P(fodhelper.exe | runonce.exe)) and should be flagged for immediate investigation.",
              "Construct event graphs for each user session, where nodes represent processes, files, and registry keys, and edges represent interactions (e.g., create, read, write). Train a graph neural network (GNN) on graphs from benign sessions to learn normal activity patterns. Apply the model to new session graphs; anomalous subgraphs, such as a logon process leading to a registry write and then an unusual auto-elevating process execution, will be flagged."
            ]
          },
          {
            "description": "A process whose ancestry traces back to an Active Setup execution performs a privileged action, such as creating a new service (Event ID 7045), modifying a Run key, or writing a file to a protected system directory (e.g., C:\\Windows\\System32).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657",
              "Windows Event ID 7045",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System service logs, process execution logs, and file/registry audit logs from critical system locations (e.g., C:\\Windows\\System32, HKLM\\SYSTEM, HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run) on all Windows endpoints.",
            "action": [
              "Create a correlation rule that links a process spawned by Active Setup (identified by its parent process and timing) to subsequent high-privilege events generated by that same Process GUID. Trigger an alert if the process creates a new service (Windows Event ID 7045), writes to a 'Run' key (Sysmon Event ID 13), or drops a file in 'C:\\Windows\\System32' (Sysmon Event ID 11).",
              "Develop a risk scoring model for user sessions. Assign weights to privileged actions (e.g., service creation=10, Run key write=8). For each process spawned by Active Setup, track its subsequent actions and aggregate a risk score. Establish a baseline for typical session risk scores per user role. Alert if a session's risk score exceeds the 99th percentile for that role.",
              "For each process spawned via Active Setup, create a time-series of its system call or event types (e.g., 'RegSetValue', 'CreateFile', 'CreateService'). Use a time-series anomaly detection model like an Isolation Forest, trained on benign process behaviors, to identify sequences of activity that are anomalous. A sequence indicating a privilege escalation attempt will deviate significantly from the learned normal behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]