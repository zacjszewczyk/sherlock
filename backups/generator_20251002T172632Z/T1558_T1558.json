[
  {
    "information_requirement": "Has the adversary stolen or forged Kerberos tickets to gain unauthorized access? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1558",
        "name": "Steal or Forge Kerberos Tickets",
        "evidence": [
          {
            "description": "A process creation event (Windows Event ID 4688 or Sysmon Event ID 1) is logged where the new process's file hash matches a known credential dumping tool, or its command-line arguments contain patterns specific to Kerberos ticket theft, forgery, or enumeration.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Privileged User Workstations, Standard User Workstations",
            "action": [
              "Symbolic Logic: Implement a SIEM rule to generate a high-priority alert on process creation events where the process hash matches a curated list of known credential dumping tools (e.g., Mimikatz, Rubeus, Kekeo) or where the command-line arguments contain high-fidelity regular expressions matching Kerberos attack commands (e.g., 'kerberos::golden', 'asktgt /user:', 'rubeus.exe kerberoast', 'klist purge').",
              "Statistical Method: For all command-line execution events, calculate the entropy and character frequency of the command-line string. Establish a baseline for common administrative commands and user profiles. Flag commands with unusually high entropy or with character distributions deviating by more than 2 standard deviations from the norm, which can indicate obfuscated or encoded payloads. Also, track the frequency of rare process executions and alert when a process that has not been observed in the last 30 days executes with parameters related to authentication or tickets.",
              "Machine Learning: Train a supervised classification model (e.g., Gradient Boosting or Random Forest) on labeled process creation events. Use features such as parent process name, command-line length, argument count, entropy, presence of keywords ('kerberos', 'ticket', 'dump', 'tgt'), and the process's digital signature status. The model's objective is to classify each new process execution as benign or suspicious, specifically tuned for detecting credential dumping activity."
            ]
          },
          {
            "description": "A single source account generates a high volume of Kerberos Service Ticket requests (Windows Event ID 4769) for numerous distinct Service Principal Names (SPNs) within a 5-minute window, particularly where the ticket encryption type requested is RC4-HMAC (0x17).",
            "data_sources": [
              "Windows Event ID 4769",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Network sensors monitoring traffic to/from Domain Controllers",
            "action": [
              "Symbolic Logic: Create a SIEM correlation rule that triggers when Windows Event ID 4769 is logged with 'Ticket Encryption Type' equal to '0x17' (RC4-HMAC) for a user account not on an approved list of legacy service accounts. Correlate this with Zeek kerberos.log to verify the source IP and ensure the traffic originates from an unexpected network segment.",
              "Statistical Method: For each client account, aggregate the count of unique Service Names from Windows Event ID 4769 over a rolling 5-minute window. Calculate a baseline and standard deviation for this count per user over a 30-day period. Generate an alert when a user's count of unique service requests exceeds the 99th percentile of all users' activity or is more than 3 standard deviations above their own established baseline.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA or an LSTM-based autoencoder) on the volume of TGS-REQ events (Event ID 4769) per user, per hour. The model learns the normal rhythm of ticket requests for each user, factoring in time-of-day and day-of-week patterns. An alert is generated when the observed request volume for a user significantly deviates from the model's prediction, indicating a potential Kerberoasting spray."
            ]
          },
          {
            "description": "A successful Kerberos Authentication Ticket (TGT) request (Windows Event ID 4768) is observed for a user account where the 'Pre-Authentication Type' is '0', indicating pre-authentication was successfully skipped. This is confirmed by Active Directory records showing the user object has the 'Do not require Kerberos preauthentication' attribute enabled.",
            "data_sources": [
              "Windows Event ID 4768",
              "Zeek kerberos.log",
              "Active Directory User Object Attributes"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory infrastructure, Network sensors monitoring traffic to/from Domain Controllers",
            "action": [
              "Symbolic Logic: Create a SIEM rule to alert on every occurrence of Windows Event ID 4768 where the 'Pre-Authentication Type' field is '0' and the 'Result Code' is '0x0' (Success). Enrich the alert by performing a live LDAP query to Active Directory to confirm the 'userAccountControl' attribute for the specified user includes the 'DONT_REQ_PREAUTH' flag. Alert on every successful TGT issuance under these conditions.",
              "Statistical Method: Periodically (e.g., daily) query Active Directory for all user accounts with pre-authentication disabled and track the total count. Alert if this count increases. Additionally, for accounts with this flag enabled, establish a baseline for the frequency of successful TGT requests (Event ID 4768 with Pre-Auth Type 0) and alert if the rate for any single user exceeds the 95th percentile of their historical activity.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to perform peer-group analysis. Group users by role, department, and access patterns. For each group, establish a baseline for the rate of TGT requests where pre-authentication is disabled. The model identifies users whose ticket request behavior is a statistical outlier compared to their defined peers, which can detect an account being targeted for AS-REP Roasting."
            ]
          },
          {
            "description": "A logon event (Windows Event ID 4624, Logon Type 3 or 9) contains high-privilege Security Identifiers (SIDs) inconsistent with the user's assigned Active Directory group memberships (Golden Ticket). Alternatively, a Kerberos Service Ticket request (Event ID 4769) is logged on a member server for a user who has no corresponding TGT request (Event ID 4768) on any Domain Controller within the TGT's valid lifetime (Silver Ticket).",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4769",
              "Windows Event ID 4768",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Member Servers (e.g., file servers, database servers), User Workstations, Active Directory infrastructure",
            "action": [
              "Symbolic Logic: Golden Ticket: For each successful network logon (Event ID 4624, Type 3/9), extract the user's SID and group SIDs from the event data. Compare these against a fresh query of the user's actual group memberships in Active Directory. Alert if the token contains privileged SIDs (e.g., Domain Admins, Enterprise Admins) not assigned to the user. Silver Ticket: On member servers, alert if a service ticket request (Event ID 4769) is logged for a user for whom no TGT request (Event ID 4768) was logged on any DC within the last 10 hours (or the domain's TGT lifetime policy).",
              "Statistical Method: Golden Ticket: For all logon events (Event ID 4624), calculate a 'privilege score' based on the SIDs present in the token. Profile the normal privilege score range for each user. Alert if a user's logon session has a score that is a statistical outlier (e.g., >3 standard deviations) compared to their historical sessions. Silver Ticket: In Zeek kerberos.log, monitor the 'till' - 'from' duration for all tickets. Alert if a ticket's lifetime significantly exceeds the domain policy default (e.g., 10 years for a forged Golden Ticket), or if a TGS ticket is issued by a client IP that is not a known Domain Controller.",
              "Machine Learning: Construct a user-service access graph where nodes are users and services (SPNs), and edges represent successful ticket requests (Event ID 4769), weighted by frequency. Use a graph-based anomaly detection algorithm (e.g., Local Outlier Factor or community detection) to identify highly improbable access patterns, such as a user suddenly accessing a service completely unrelated to their departmental peers. Such an anomaly can indicate a forged Silver Ticket being used for lateral movement."
            ]
          },
          {
            "description": "A process access event (Sysmon Event ID 10) is logged where an unauthorized source process (e.g., powershell.exe, rundll32.exe, or any unsigned binary) requests access to the LSASS.exe process memory with read permissions (e.g., GrantedAccess mask includes PROCESS_VM_READ).",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, especially Domain Controllers, Privileged Access Workstations, and critical servers",
            "action": [
              "Symbolic Logic: Create a high-severity SIEM alert for any Sysmon Event ID 10 where the TargetImage is 'C:\\Windows\\System32\\lsass.exe' and the SourceImage is not on an explicit allowlist of legitimate processes (e.g., specific EDR agents, svchost.exe). The rule must specifically check if the 'GrantedAccess' mask includes read permissions (e.g., '0x1010', '0x1410', '0x1000', '0x10').",
              "Statistical Method: Build a baseline of all (SourceImage, User, GrantedAccess) tuples that access lsass.exe over a 30-day period. Calculate a rarity score for each tuple. Generate an alert for any access event involving a tuple that has never been seen before or falls into the top 0.5% of rarity, indicating a highly unusual and suspicious process access pattern.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model on features from legitimate Sysmon Event ID 10 events targeting lsass.exe. Features should include SourceImage path, parent process of the source process, user context, digital signature status of the source process, and the specific access mask requested. The model learns the boundary of 'normal' LSASS access. Any new access event that falls outside this learned boundary is flagged as a likely credential theft attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]