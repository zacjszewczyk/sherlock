[
  {
    "information_requirement": "Is the adversary attempting to deobfuscate or decode files or information to evade our defenses? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1140",
        "name": "Deobfuscate-Decode Files or Information",
        "evidence": [
          {
            "description": "A process is created from an executable whose file hash matches a known malicious deobfuscation tool, or a script log contains unique strings (e.g., function names, variable names, comments) associated with known malware deobfuscation routines.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4104",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Application Servers, User Workstations, Network Egress Points, DMZ Servers",
            "action": [
              "Create a rule to continuously monitor process creation events (Sysmon Event ID 1) and compare the executable's hash against a threat intelligence feed of known malicious decoder tools. Concurrently, scan PowerShell script block logs (Windows Event ID 4104) and files extracted from network traffic (Zeek files.log) for unique, hardcoded strings associated with known malware deobfuscation stubs. Alert on any match.",
              "Calculate the Shannon entropy of all PowerShell script blocks (Windows Event ID 4104). Establish a baseline entropy distribution from at least 30 days of historical data. Create an alert for any new script block whose entropy score exceeds the 99th percentile of the established baseline, indicating a high degree of randomness typical of packed or obfuscated code.",
              "Train a Random Forest classifier on features extracted from PowerShell script blocks (Windows Event ID 4104). Use features such as script length, character frequency distribution, entropy, the ratio of alphabetic to non-alphabetic characters, and the presence of specific keywords (e.g., 'FromBase64String', 'IEX', 'Invoke-Obfuscation'). Deploy the model to classify new script blocks as benign or malicious in near real-time."
            ]
          },
          {
            "description": "The `certutil.exe` process is executed with command-line arguments containing `-decode`, `-decodehex`, or the `-urlcache -split -f` combination.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, Domain Controllers, Application Servers",
            "action": [
              "Create a detection rule to monitor process creation events (Sysmon Event ID 1) for any execution of `certutil.exe` where the command line contains the arguments `-decode`, `-decodehex`, or the combination of `-urlcache`, `-split`, and `-f`. Generate a high-severity alert on any match.",
              "Analyze process creation events (Sysmon Event ID 1) over a 30-day period to establish a baseline of normal `certutil.exe` usage, focusing on parent processes and user accounts. Calculate the frequency of each parent process. Flag any execution of `certutil.exe` with decoding arguments that is spawned by a statistically rare parent (e.g., `winword.exe`, `outlook.exe`, `powershell.exe`) or by a user account that has never used the utility before.",
              "Develop a time-series anomaly detection model (e.g., ARIMA) on the hourly frequency of `certutil.exe` executions that use decoding arguments, aggregated per host and per user. An unexpected spike in this activity, particularly one that deviates significantly from the forecasted model and occurs outside of normal business hours, should be flagged as a potential intrusion."
            ]
          },
          {
            "description": "A PowerShell process is initiated with the `-EncodedCommand` flag, or a PowerShell script block log (Event ID 4104) contains content indicative of deobfuscation, such as `[System.Convert]::FromBase64String`, `Invoke-Expression` (IEX), character array reassembly, or XOR operations.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, All Windows Servers, Microsoft Exchange Servers, Domain Controllers",
            "action": [
              "Create a signature-based rule to scan PowerShell Script Block logs (Windows Event ID 4104) for literal strings like `FromBase64String`, `IEX`, `Invoke-Expression`, and `-bxor`. Simultaneously, monitor process creation events (Sysmon Event ID 1) for `powershell.exe` command lines containing `-EncodedCommand`, `-e`, or `-enc` followed by a long Base64 string.",
              "For all PowerShell process creations with an encoded command, calculate the length of the Base64 string. Establish a baseline distribution of these lengths from normal administrative scripts. Alert on any command whose encoded string length exceeds 3 standard deviations from the baseline mean. Additionally, calculate the character frequency of script blocks (Windows Event ID 4104) and flag scripts with a character distribution that deviates significantly from that of known-good scripts.",
              "Train a logistic regression model to produce a risk score for PowerShell commands. Features should include: command line length, presence of encoding flags, entropy of the script block, ratio of alphanumeric to special characters, and the presence of specific deobfuscation function calls. A command receiving a score above a tuned threshold is classified as malicious. Correlate high-scoring events with subsequent child processes or network connections to low-reputation destinations to increase confidence."
            ]
          },
          {
            "description": "The `cmd.exe` or `powershell.exe` process executes `copy /b` or `type` commands to concatenate multiple source files into a single output file with an executable extension (e.g., .exe, .dll, .ps1).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, File Servers, Staging Servers, Developer Endpoints",
            "action": [
              "Create a detection rule for process creation events (Sysmon Event ID 1) where the process is `cmd.exe` or `powershell.exe` and the command line contains (`copy /b` or `type`) and multiple source files (using `+` or wildcards) are concatenated into a single output file with a `.exe`, `.dll`, `.ps1`, or `.bat` extension.",
              "Profile the normal usage of `copy /b` and `type` across the enterprise. Establish a baseline for typical source/destination paths and file extensions. Flag any execution where the destination is a high-risk, user-writable directory (e.g., `%TEMP%`, `C:\\Users\\Public\\`, `%APPDATA%`) and the number of concatenated source files exceeds the 95th percentile of normal activity.",
              "Train a decision tree classifier to identify suspicious file reassembly. Use features including: parent process name, the destination file path's rarity (based on historical path analysis), the output file extension, the number of input files, and the user context. The model will learn to distinguish between legitimate developer/admin activity and adversary tradecraft, flagging suspicious concatenations for review."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a 5-minute window: 1. A file is downloaded from an external source. 2. The downloaded file is accessed by a decoding utility or scripting interpreter. 3. A new executable file is created or a new network connection is established by the decoding process.",
            "data_sources": [
              "Zeek http.log",
              "Zeek files.log",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Perimeter (Gateway/Proxy), DMZ Servers, User Workstations, Egress Points",
            "action": [
              "Create a correlation rule that triggers when, on the same host within a 5-minute window: 1) A file download is observed (Zeek http.log); 2) The downloaded file's path is used as a command-line argument for `certutil.exe` or `powershell.exe` (Sysmon Event ID 1); and 3) The decoding process creates a new executable file (Sysmon Event ID 11) or makes an outbound network connection (Zeek conn.log) to a destination with a low reputation score.",
              "Calculate a risk score for each file download based on source domain reputation, file extension rarity, and the downloading user agent. If a file with a high initial risk score is accessed (Sysmon Event ID 1) by a known decoding utility, aggregate the risk. Flag any host whose aggregated risk score for this sequence of behaviors exceeds a dynamically adjusted threshold based on the rolling 24-hour 98th percentile risk score for the entire network.",
              "Construct a directed graph for each host where nodes are processes, files, and network connections, and edges represent interactions (e.g., 'process A created file B'). Use a graph-based anomaly detection algorithm to identify sequences (paths in the graph) that are statistically rare compared to a learned baseline of normal activity graphs. Flag paths representing a 'download -> decode -> connect' sequence that have a low probability score under the model."
            ]
          },
          {
            "description": "A process associated with a Microsoft Office application (e.g., `winword.exe`, `excel.exe`, `outlook.exe`) spawns a child process known for decoding or script execution (e.g., `powershell.exe`, `cmd.exe`, `wscript.exe`, `certutil.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Microsoft Exchange Servers, Terminal Servers / Citrix Environments",
            "action": [
              "Create a detection rule that alerts on any process creation event (Sysmon Event ID 1) where the ParentImage path ends in `winword.exe`, `excel.exe`, `powerpnt.exe`, or `outlook.exe` and the Image path ends in `powershell.exe`, `cmd.exe`, `wscript.exe`, `cscript.exe`, or `certutil.exe`.",
              "Generate a frequency table of all parent-child process relationships observed in the environment over a 30-day baseline period from Sysmon Event ID 1 logs. Calculate the rarity of each observed pair. Flag any newly observed parent-child relationship (e.g., `excel.exe` -> `certutil.exe`) or any relationship that falls below a low frequency threshold (e.g., observed less than 5 times enterprise-wide) for investigation.",
              "Train a Bayesian network to model legitimate parent-child process relationships, calculating the conditional probability P(Child | Parent). When a new process creation event occurs, use the model to score its likelihood. Events with a very low probability, such as P(`powershell.exe` | `winword.exe`), are flagged as highly anomalous and indicative of potential malicious activity originating from a weaponized document."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]