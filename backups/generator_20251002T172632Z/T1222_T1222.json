[
  {
    "information_requirement": "Has the adversary modified file or directory permissions to evade defenses and access protected resources? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1222",
        "name": "File and Directory Permissions Modification",
        "evidence": [
          {
            "description": "A process, identified as malicious by hash or a security product alert, executes a built-in command-line utility (icacls.exe, cacls.exe, takeown.exe, chmod, fsutil.exe) to alter file or directory permissions.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Windows Defender Event ID 1116"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers (e.g., SharePoint, SAP), Endpoint devices of privileged users (e.g., Domain Admins, Developers)",
            "action": [
              "Join process creation events (Windows Event ID 4688/Sysmon Event ID 1) with security alerts (e.g., Windows Defender Event ID 1116) on the common hostname within a 5-minute window. Trigger an alert if a process creation event for `icacls.exe`, `cacls.exe`, `takeown.exe`, `chmod`, or `fsutil.exe` has a parent process hash matching a known-bad hash from a threat intelligence feed or if the parent process name matches the process identified in the security alert.",
              "Group all process creation events (Windows Event ID 4688/Sysmon Event ID 1) for `icacls.exe`, `cacls.exe`, `takeown.exe`, `chmod`, and `fsutil.exe` by their parent process name over a 30-day rolling window. Calculate the frequency percentage for each unique parent process. Generate an alert when one of these utilities is spawned by a parent process whose frequency falls below the 5th percentile, indicating an uncommon parent.",
              "Develop a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled process creation events (Sysmon Event ID 1). Extract features including: parent process name, command-line argument length, command-line argument entropy, user account context (e.g., SYSTEM, Administrator, standard user), and hour of the day. Train the model on historical true/false positives. Deploy the model to score new permission modification events in real-time, alerting on those classified as malicious with a high confidence score (>0.9)."
            ]
          },
          {
            "description": "A command-line execution of a permission utility (icacls.exe, cacls.exe, chmod, chown, fsutil.exe) includes arguments that grant broad permissions, such as Full Control (:F) to 'Everyone' or 'Authenticated Users', or read/write/execute for all (777) on a sensitive file or directory.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System configuration directories (e.g., C:\\Windows\\System32, /etc/), application installation directories, user profile directories, network file shares hosting sensitive data, and common persistence locations (e.g., Startup folders).",
            "action": [
              "From process creation logs (Windows Event ID 4688/Sysmon Event ID 1), create a detection rule that uses regular expressions to find high-risk permission changes in command-line arguments. Alert on matches for patterns like `/(icacls|cacls).*(Everyone|Authenticated Users|Users):(F|M|W)/i`, `/chmod\\s+(777|a\\+rwx)/`, or `/takeown\\s+\\/f/`. Increase alert severity if the target path is in a critical system directory (e.g., `C:\\Windows\\`, `/etc/`, `/bin/`).",
              "For all process creation events involving permission modification utilities, extract the target file/directory path from the command line. Calculate the Shannon entropy of the full path string. Over a 30-day period, build a distribution of these entropy scores to establish a baseline. Trigger an alert for any new execution where the path entropy exceeds the 95th percentile of the baseline, indicating a potentially randomized or obfuscated path.",
              "Implement a sequence analysis model (e.g., an n-gram model) on terminal command history logs (e.g., PowerShell logs, bash history). Train the model on command sequences from benign administrative sessions to learn normal command transitions. Score new command sequences in real-time. Flag user sessions where a permission modification command occurs in a low-probability sequence, such as immediately following a `curl` or `wget` command from an uncategorized domain, or preceding execution from a world-writable directory like `/tmp` or `C:\\Windows\\Temp`."
            ]
          },
          {
            "description": "A Discretionary Access Control List (DACL) modification event (Windows Event ID 4670) is logged for a critical file, directory, or registry key, and the change is initiated by a non-standard user account or process.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek smb_files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Registry (HKLM\\Software, HKCU\\Software), Group Policy Objects (GPOs) on Domain Controllers, directories containing security tool binaries (e.g., C:\\Program Files\\Windows Defender), and system binary directories (C:\\Windows\\System32).",
            "action": [
              "Define a watchlist of critical assets (e.g., `C:\\Windows\\System32\\sethc.exe`, GPO files, key registry hives). Configure object access auditing for these assets. Create a rule that triggers a high-severity alert for any Windows Event ID 4670 where the `Object Name` is on the watchlist and the `SubjectUserName` is not in a predefined group of authorized administrators (e.g., 'Domain Admins').",
              "From Windows Event ID 4670 logs, aggregate unique combinations of (SubjectUserName, ProcessName, ObjectName) over a 30-day baseline. Calculate the frequency of each unique tuple. Generate an alert for any new 4670 event that forms a tuple not seen in the baseline (a 'first-seen' event) or whose frequency falls below a 1% threshold, indicating a rare administrative action.",
              "Use an unsupervised clustering algorithm (e.g., DBSCAN, Isolation Forest) on Windows Event ID 4670 data. Vectorize events using features like `SubjectUserName`, `ProcessName`, the parent directory of the `ObjectName`, and the `LogonID`. Run the model periodically to define clusters of 'normal' permission change activity. Alert on any new event that is classified as an outlier or noise point by the model, as it does not fit any established pattern of behavior."
            ]
          },
          {
            "description": "A permission change event (Windows Event ID 4670) on a file is immediately followed by a file modification (Sysmon Event ID 11 - FileCreate) or execution (Windows Event ID 4688 / Sysmon Event ID 1) of that same file by the same user or process.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Persistence locations (e.g., Startup folders, Run keys in registry), directories containing security software binaries and logs, user profile directories.",
            "action": [
              "Create a stateful detection rule that looks for a sequence of events on the same host. Trigger an alert if `Event A` (Windows Event ID 4670 for `Object X` by `User Y`) is followed within 60 seconds by `Event B` (Sysmon Event ID 11 or Windows Event ID 4688 for `Object X` by `User Y`). Escalate the alert priority if `Object X` is an executable (`.exe`, `.dll`, `.scr`) or script (`.ps1`, `.bat`) located in a sensitive or persistence-related directory.",
              "For every observed sequence of a permission change (4670) followed by a file write/create (Sysmon 11) or execution (4688) on the same object, calculate the time delta in seconds. Maintain a statistical distribution of these deltas over a 30-day baseline. Generate an alert for any new sequence where the time delta is less than the 5th percentile of the baseline, indicating an atypically rapid, likely scripted, modify-then-use action.",
              "For each host, create a time-series of the count of Windows Event ID 4670 events in 10-minute intervals. Train a forecasting model (e.g., SARIMA, Prophet) on at least 30 days of historical data for each host to learn its normal rhythm of permission change activity. In real-time, compare the actual event count to the model's forecast (including confidence bands). Trigger an alert if the actual count exceeds the upper confidence bound by a significant margin (e.g., >3 standard deviations), indicating a potential mass permission change event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]