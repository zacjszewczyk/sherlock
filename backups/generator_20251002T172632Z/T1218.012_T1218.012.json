[
  {
    "information_requirement": "Is an adversary abusing the Extension CLSID Verification Host (verclsid.exe) to proxy code execution and evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.012",
        "name": "Verclsid",
        "evidence": [
          {
            "description": "The command line for a verclsid.exe process execution contains a Class ID (CLSID) that matches a known-malicious value from threat intelligence.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers; Threat intelligence platforms providing CLSID-based indicators of compromise.",
            "action": [
              "Create a detection rule that triggers on process creation events (Windows Event ID 4688) where the process name is `verclsid.exe`. For each trigger, parse the command line to extract any CLSID provided via the `/C` switch. Compare the extracted CLSID against an up-to-date watchlist of known-malicious CLSIDs. Generate a high-severity alert upon a match.",
              "Continuously profile all CLSIDs invoked by `verclsid.exe` across the environment to build a frequency distribution. Flag any execution involving a CLSID that falls below a rarity threshold (e.g., observed less than 5 times enterprise-wide, or in the bottom 1st percentile of frequency), as this may indicate a newly introduced malicious COM object.",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) on labeled `verclsid.exe` execution events. Use features such as the parent process name, parent command-line entropy, user context, host, and the invoked CLSID (as a categorical feature). Deploy the model to score new executions in real-time, alerting on those classified as malicious with a confidence score above 0.9."
            ]
          },
          {
            "description": "A verclsid.exe process is created by a parent process other than the typical `explorer.exe` or `svchost.exe`, such as a Microsoft Office application (`winword.exe`, `excel.exe`), scripting engine (`powershell.exe`, `cscript.exe`), or command shell (`cmd.exe`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations with Microsoft Office; Application servers; Any endpoint where scripts are executed.",
            "action": [
              "Create a detection rule that monitors process creation events (Windows Event ID 4688) for `verclsid.exe`. Maintain an allowlist of legitimate parent processes (e.g., `explorer.exe`, `svchost.exe`). Generate a high-severity alert if `verclsid.exe` is spawned by any process not on this list, with specific emphasis on `winword.exe`, `excel.exe`, `powerpnt.exe`, `powershell.exe`, `cmd.exe`, `cscript.exe`, and `wscript.exe`.",
              "For each user and host, build a statistical baseline of all parent-child process relationships observed over a 30-day rolling window. Alert when a new parent-child pair involving `verclsid.exe` is observed for a specific user or host that has never been seen before in their individual baseline (e.g., `user-A` on `host-1` has never had `winword.exe` spawn `verclsid.exe` before).",
              "Apply an unsupervised anomaly detection model, such as an Isolation Forest, to the feature set of [Parent Process Name, Child Process Name, User, Host]. Train the model on historical process creation data to learn normal activity boundaries. The model will score new `verclsid.exe` creation events, flagging any that are identified as outliers, indicating an anomalous parent-child relationship."
            ]
          },
          {
            "description": "The command line of the parent process that spawned verclsid.exe contains characteristics of obfuscation, such as high character entropy, or contains explicit download commands.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints, particularly user workstations where malicious documents or scripts might be opened.",
            "action": [
              "For every `verclsid.exe` process creation event, inspect the full command line of its parent process. Use regular expression matching to search for high-confidence indicators of malicious scripting, such as `.DownloadString`, `IEX`, `FromBase64String`, or URLs pointing to non-standard file extensions (.sct, .ps1) from untrusted domains. Trigger an alert on any match.",
              "Calculate the Shannon entropy for the command line of the parent process for every `verclsid.exe` execution. Establish a baseline distribution of entropy scores for common parent processes (e.g., `powershell.exe`, `cmd.exe`). Alert when a parent command line's entropy score exceeds a dynamic threshold, such as 3 standard deviations above the mean for that specific parent process, or a static threshold of >4.5, indicating likely obfuscation.",
              "Train a character-level Convolutional Neural Network (CNN) or a sequence model like an LSTM on a large dataset of labeled benign and malicious command lines. Use the trained model to classify the parent process command line of new `verclsid.exe` executions. Alert on any command line classified as malicious with high probability."
            ]
          },
          {
            "description": "A verclsid.exe process is observed making an outbound network connection, or a connection originates from its host shortly after its execution, which is highly anomalous behavior.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, and all Windows endpoints.",
            "action": [
              "Using a SIEM, correlate process creation events for `verclsid.exe` (Windows Event ID 4688) with network connection logs (Zeek conn.log) by joining on the endpoint's IP address and a timestamp within 30 seconds of the process start time. Since `verclsid.exe` should not make network connections, any successful correlation constitutes a high-severity alert.",
              "If a network connection from `verclsid.exe` is detected, enrich the alert by analyzing the destination. Query DNS logs (Zeek dns.log) to find the domain for the destination IP. Flag connections to destinations that are statistically rare (e.g., bottom 5% of domains requested enterprise-wide), newly registered (e.g., domain age < 30 days), or have a low reputation score from a threat intelligence provider.",
              "Construct a bipartite graph where nodes represent processes and remote IP addresses. Create an edge between a process node and an IP node when a network connection occurs. Train a graph-based anomaly detection model (e.g., using GraphSAGE) on normal network behavior. An edge created between a `verclsid.exe` node and any IP node would be flagged as a structural anomaly, as `verclsid.exe` nodes are expected to be isolates with no network edges."
            ]
          },
          {
            "description": "A verclsid.exe process creates a child process, which is not legitimate behavior for this verification host.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers.",
            "action": [
              "Create a detection rule that triggers on any process creation event (Windows Event ID 4688) where the `ParentProcessName` field (or equivalent) is `verclsid.exe`. This behavior is inherently suspicious; generate a high-severity alert for any such event, capturing the child process name and command line for investigation.",
              "While any child process is an alert, prioritize the investigation based on the child process's characteristics. Automatically calculate a risk score for the alert by evaluating the child process's command line entropy, whether it makes network connections, and the prevalence of the child process itself in the environment. An alert for `verclsid.exe` -> `rare_executable.exe` should be prioritized over `verclsid.exe` -> `cmd.exe`.",
              "Frame this as a simple binary classification problem. For every process creation event, use the feature `ParentProcessName`. Train a decision tree model on labeled data where any event with `ParentProcessName == 'verclsid.exe'` is labeled 'malicious'. The resulting model will create a single, highly interpretable rule (`if ParentProcessName is verclsid.exe, then malicious`) for automated detection."
            ]
          },
          {
            "description": "The CLSID supplied to verclsid.exe via the command line is not present in the host's Windows Registry (`HKEY_CLASSES_ROOT\\CLSID\\`) or has never been seen before in the environment.",
            "data_sources": [
              "Windows Event ID 4688",
              "EDR Registry Query Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The Windows Registry on all endpoints and servers; Centralized log repository containing historical process execution data.",
            "action": [
              "Upon detecting `verclsid.exe` execution with a CLSID argument, trigger an automated EDR or remote script action to query the host's registry for the key `HKEY_CLASSES_ROOT\\CLSID\\{CLSID}`. If the key does not exist, generate a high-severity alert, as this may indicate a phantom COM object or in-memory execution.",
              "Maintain a centralized, historical set of all CLSIDs ever invoked by `verclsid.exe` across the enterprise. For each new execution, perform a lookup against this historical set. If the CLSID is 'first seen' in the environment, flag it for investigation. This highlights novel COM objects that could be part of a new attack.",
              "Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA or Prophet) that monitors the daily count of 'first seen' CLSIDs (from the statistical method). A sudden, anomalous spike in the number of new CLSIDs appearing across the enterprise could indicate a widespread campaign and would be flagged by the model, prompting a broader threat hunt."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]