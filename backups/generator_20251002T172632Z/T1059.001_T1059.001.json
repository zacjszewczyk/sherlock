[
  {
    "information_requirement": "Is the adversary executing malicious code on the network using PowerShell? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.001",
        "name": "PowerShell",
        "evidence": [
          {
            "description": "A PowerShell script block log (Windows Event ID 4104) contains a script whose SHA256 hash matches a known malicious hash from threat intelligence, or the script content contains an IP address, domain, or URL that matches a known malicious C2 indicator.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, DNS Resolvers, Network Egress Points",
            "action": [
              "For each new Windows Event ID 4104, calculate the SHA256 hash of the script block content and compare it against a curated list of known-malicious script hashes. Separately, use regular expressions to extract all URI, IPv4, and FQDN patterns from the script block text and match them against a threat intelligence feed of malicious indicators. Generate a high-severity alert upon any match.",
              "Calculate the prevalence of each script block's SHA256 hash across all endpoints over a 30-day window. Flag any script hash that appears on fewer than 5 hosts or less than 0.1% of the endpoint population as statistically rare. Correlate the host executing the rare script with Zeek dns.log to identify queries to newly registered domains (NRDs) or domains with low reputation scores within 1 minute of execution. Alert if a rare script is associated with such DNS queries.",
              "Develop and deploy a supervised classification model (e.g., Gradient Boosting Machine or Random Forest) trained on a labeled dataset of benign and malicious PowerShell scripts. Engineer features from script block text, including: script length, entropy, n-gram frequency, presence of keywords like 'IEX' or 'DownloadString', and counts of specific cmdlet types. Use the model to score each new script block from Event ID 4104 in real-time and alert on scripts classified as malicious with a confidence score above a predefined threshold (e.g., 0.85)."
            ]
          },
          {
            "description": "A PowerShell process command line (Windows Event ID 4688) or a script block log (Windows Event ID 4104) contains syntactic patterns strongly indicative of obfuscation. This includes the use of Base64 encoding flags ('-e', '-enc', '-encoded'), character array casting (`[char]`), string replacement (`-replace`), backtick escaping, or string concatenation to form suspicious commands.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Apply a set of regular expressions to the command line field in Windows Event ID 4688 and the script block text in Event ID 4104. Search for patterns such as `(-e|-enc|-encodedcommand)`, `(IEX|Invoke-Expression)`, `(New-Object Net.WebClient).DownloadString`, `FromBase64String`, and excessive use of format specifiers (`{0}`) or string concatenation (`+`). Generate a medium-severity alert on any match.",
              "For every script block in Event ID 4104, calculate its Shannon entropy score and the ratio of alphanumeric to non-alphanumeric characters. Establish a baseline for these two metrics using a known-good set of administrative scripts. Alert on any script where the entropy score exceeds the 95th percentile of the baseline (or a fixed threshold of 6.0) or the character ratio is more than 3 standard deviations from the baseline mean, as these indicate potential packing or obfuscation.",
              "Train a binary classifier (e.g., Logistic Regression or Random Forest) on a labeled dataset of obfuscated and non-obfuscated PowerShell scripts. Extract features including: character-level entropy, word-level entropy, ratio of uppercase to lowercase letters, script length, and frequency of specific obfuscation-related tokens (e.g., 'replace', 'char', 'join'). Deploy the model to score new script blocks and alert on those classified as obfuscated."
            ]
          },
          {
            "description": "A PowerShell process executes a command containing logic to download content from a remote URL and execute it directly in memory, commonly via `Invoke-Expression` (IEX) combined with a download class like `Net.WebClient` or `Invoke-WebRequest`.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points, Web Proxies, DNS Resolvers",
            "action": [
              "Create a detection rule that triggers when a Windows Event ID 4688 or 4104 contains both 'IEX' (or 'Invoke-Expression') and one of 'DownloadString', 'DownloadFile', or 'Invoke-WebRequest'. Upon triggering, automatically query Zeek conn.log and dns.log for any external network connections or DNS requests made by the source host within 10 seconds of the PowerShell event timestamp. Alert if a correlation is found.",
              "For each host, create a baseline of the daily count of network connections initiated by powershell.exe. Alert if the daily count for a host exceeds the 99th percentile for its peer group (e.g., 'developer workstations', 'domain controllers'). Further, analyze Zeek http.log for connections where the User-Agent is 'WindowsPowerShell' and the destination IP/domain is not on an allowlist of expected destinations (e.g., internal servers, Microsoft sites). A match on both conditions constitutes a high-confidence alert.",
              "Implement a time-series anomaly detection model (e.g., Prophet or an LSTM-based autoencoder) on the volume of network traffic (bytes_out) from powershell.exe processes per host. The model learns the normal daily and weekly rhythm of PowerShell network activity for each host. Alert when the observed traffic volume significantly deviates from the model's prediction, indicating an unusual data transfer."
            ]
          },
          {
            "description": "The `System.Management.Automation.dll` module is loaded by a process other than a standard, allowlisted PowerShell host (e.g., powershell.exe, powershell_ise.exe, pwsh.exe), indicating potential use of unmanaged PowerShell or process injection.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Event ID 4104",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially those running Microsoft Office or other common applications.",
            "action": [
              "Using Sysmon Event ID 7 (Image Load), create a rule to alert whenever `ImageLoaded` is `System.Management.Automation.dll` and the `ProcessImage` is not in a defined allowlist (`powershell.exe`, `powershell_ise.exe`, `pwsh.exe`, specific admin tools). Create high-severity alerts for loads into common adversary targets like `rundll32.exe`, `mshta.exe`, `wscript.exe`, or Microsoft Office applications.",
              "Generate a frequency table of all process names that load `System.Management.Automation.dll` across the enterprise over a 30-day period. Any process name that is not on the allowlist and appears on a statistically insignificant number of hosts (e.g., fewer than 5) should be flagged for investigation as a rare parent process.",
              "Utilize a graph-based anomaly detection model to learn the normal relationships between processes and the DLLs they load. Represent each process and DLL as a node, and each module load as a directed edge. After training on a baseline of Sysmon Event ID 7 data, the model can identify and alert on the creation of anomalous edges, such as `wscript.exe` -> `System.Management.Automation.dll`, that have not been seen in the training data."
            ]
          },
          {
            "description": "A PowerShell process is launched with command-line arguments that weaken security controls or attempt to hide execution. This includes arguments like `-ExecutionPolicy Bypass`, `-WindowStyle Hidden`, `-NonInteractive`, and `-EncodedCommand`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4105"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers, Tier 0 assets",
            "action": [
              "Create a rule that alerts on any Windows Event ID 4688 for powershell.exe where the command line arguments contain any of the following strings, case-insensitively: `-ep bypass`, `-ExecutionPolicy Bypass`, `-w hidden`, `-WindowStyle Hidden`, `-noni`, `-NonInteractive`, `-e`, `-enc`, `-EncodedCommand`. Raise the alert severity if the executing user is not in a pre-defined administrative group.",
              "For each user, maintain a historical set of all PowerShell command-line arguments they have used over the last 90 days. Alert when a user executes a PowerShell command with a suspicious argument (e.g., `-EncodedCommand`, `-Bypass`) for the first time. This 'first use' detection can identify a change in user behavior that warrants investigation.",
              "Apply a clustering algorithm (e.g., DBSCAN) to user accounts based on featurized PowerShell command-line data (e.g., vector representations of arguments used, frequency of execution). This will automatically group users into behavior-based profiles. Monitor for users who anomalously shift from a 'low-usage' cluster to a 'high-usage/complex-commands' cluster, as this indicates a significant and potentially malicious change in behavior."
            ]
          },
          {
            "description": "A PowerShell script block (Windows Event ID 4104) contains a large, high-entropy data segment, indicative of an embedded payload (e.g., shellcode, packed executable), which is statistically distinct from typical administrative scripts.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Define a rule that flags any script block from Event ID 4104 that is larger than 4KB and contains a Base64 string that, when decoded, contains the PE file magic bytes ('MZ') or common shellcode instruction sequences. This specifically targets scripts embedding executables or shellcode.",
              "For each script block in Event ID 4104, calculate the distribution of entropy across the script using a sliding window (e.g., 256-byte chunks). Benign scripts typically have uniform, low entropy. Flag any script that shows a bimodal distribution, with a region of low-entropy script code and a distinct, large region of high-entropy (> 7.0) data, which is characteristic of an embedded, encrypted/compressed payload.",
              "Train an autoencoder neural network on the Abstract Syntax Trees (ASTs) of a large corpus of benign PowerShell scripts. The model learns to reconstruct normal script structures with low error. A script containing an embedded payload will have an abnormal AST (e.g., a massive string literal), resulting in a high reconstruction error. Alert on scripts where the reconstruction error exceeds a statistically determined threshold (e.g., 99th percentile of benign script errors)."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]