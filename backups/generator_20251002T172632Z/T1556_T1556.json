[
  {
    "information_requirement": "Is the adversary establishing persistence by modifying authentication processes?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A DLL file is created in a critical system directory, such as `C:\\Windows\\System32\\`, and is subsequently loaded by the `lsass.exe` process, where the file's hash is present on a threat intelligence feed of known malicious authentication modification tools.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, ADFS Servers, Privileged Access Workstations (PAWs); specifically the `C:\\Windows\\System32\\` directory and the `lsass.exe` process space.",
            "action": [
              "Construct a query to join file creation events (Sysmon Event ID 11) in `C:\\Windows\\System32\\` with image load events (Sysmon Event ID 7) where the `ImageLoaded` is the same file path and `Image` is `lsass.exe`, occurring within a 5-minute window. Trigger an alert if the file's hash matches a known malicious hash from an integrated threat intelligence platform.",
              "For all DLLs loaded by `lsass.exe` (Sysmon Event ID 7), compute the enterprise-wide prevalence (stack count) of each file hash. Generate an alert for any DLL loaded by `lsass.exe` that has a prevalence of less than 1% of monitored endpoints. Separately, calculate the Shannon entropy of the file and flag if the score is greater than 7.0, indicating probable packing.",
              "Deploy a time-series forecasting model (e.g., ARIMA, Prophet) trained on the hourly count of unique DLLs loaded by `lsass.exe` per host. Generate an alert if the observed count of new DLLs exceeds the model's forecasted upper confidence interval, particularly on a Domain Controller."
            ]
          },
          {
            "description": "A registry value modification event is observed for `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages` where the new value adds a DLL path that is not on an established allowlist of legitimate LSA providers.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Windows Servers; specifically the registry hives at `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\`.",
            "action": [
              "Create a detection rule that triggers on a registry set event (Sysmon Event ID 13 or Windows Event ID 4657) for the target keys `...\\Lsa\\Notification Packages` or `...\\Lsa\\Security Packages`. The rule must parse the new value, extract all DLL paths, and alert if any path is not found in a pre-defined, version-controlled allowlist of legitimate LSA package DLLs.",
              "Establish a baseline of all DLLs listed in the LSA Notification and Security Packages registry keys for each server role (e.g., DC, Web Server). Calculate the prevalence of each DLL within each role. Alert on any modification that introduces a new DLL whose prevalence is below a 5% threshold for that server role, or any change whatsoever on a Domain Controller outside a designated maintenance window.",
              "Train a one-class SVM model on feature sets derived from legitimate LSA package modifications (e.g., during patching). Features should include the parent process name of the modifying process (e.g., `TrustedInstaller.exe`), user context, time of day, and properties of the new DLL (e.g., is signed, file age). A modification classified as an anomaly by the model indicates a likely malicious change."
            ]
          },
          {
            "description": "A successful logon event (Windows Event ID 4624, Logon Type 3 or 10) is recorded on a server, but no corresponding Kerberos or NTLM network authentication traffic is observed in Zeek logs from the source IP to the destination IP within a 5-second window, suggesting a bypass of standard authentication protocols.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log",
              "Zeek krb5.log",
              "Zeek ntlm.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, Bastion Hosts; specifically network traffic logs at ingress/egress points and Windows Security Event Logs on destination servers.",
            "action": [
              "For each successful Windows Logon Event (ID 4624, Logon Type 3 or 10), execute a sub-search against network logs. Query Zeek's `krb5.log` and `ntlm.log` for an event where the client IP matches the logon's `Source Network Address` and the destination server is the same, within a +/- 5-second window. Generate an alert if no corresponding network authentication log is found.",
              "For each critical server, establish a baseline ratio of successful network logons (Windows Event ID 4624, Type 3) to the count of corresponding Kerberos TGS-REQ or NTLM AUTHENTICATE messages from Zeek logs per hour. Alert if this ratio suddenly increases, exceeding 3 standard deviations from the moving average, indicating logons are occurring without expected network authentication traffic.",
              "Train a binary classification model (e.g., Logistic Regression) to predict if a given logon event is 'valid' (has corresponding network traffic) or 'suspect' (lacks network traffic). Use features like logon type, source/destination subnet, target server role, and time of day. Any logon event on a critical server that is classified as 'suspect' with a high confidence score should be flagged as a potential authentication bypass."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by modifying authentication processes?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense-Evasion",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A registry modification event (Sysmon Event ID 13) changes the value of `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\LsaCfgFlags` to a DWORD of `2`, which explicitly disables Windows Defender Credential Guard and requires a reboot to take effect.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4608",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System Registry Hives on all Windows endpoints and servers with Credential Guard enabled, particularly Domain Controllers and Privileged Access Workstations.",
            "action": [
              "Create a high-severity alert that triggers if the registry value `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\LsaCfgFlags` is modified to a DWORD value of `2`, as recorded by Sysmon Event ID 13 or Windows Event ID 4657. This is a specific indicator of an attempt to disable Credential Guard.",
              "Periodically query all endpoints to audit the value of the `LsaCfgFlags` registry key. Compare the current value against an expected-state baseline where the value should be `1` (enabled) or `0` (not supported). Alert on any host that deviates from its baseline and track the count of deviations over time to identify systemic attacks.",
              "Develop a state-change model by correlating an `LsaCfgFlags` modification event with the initiating process (e.g., `reg.exe`, `powershell.exe`) and subsequent system events (e.g., a reboot event). Use a sequence-based anomaly detection model (e.g., an LSTM autoencoder) to flag unusual event sequences, such as a non-standard process modifying the key followed by a system reboot."
            ]
          },
          {
            "description": "An image load event (Sysmon Event ID 7) into `lsass.exe` or `winlogon.exe` involves a DLL that is unsigned or has a signature status other than 'Valid'. Separately, a Group Policy Object modification (Windows Event ID 5136) weakens an authentication policy, such as by enabling LM hash storage.",
            "data_sources": [
              "Sysmon Event ID 7",
              "Windows Event ID 5136",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for GPO changes), all Windows Endpoints and Servers (for image loads), Group Policy Management Console.",
            "action": [
              "Monitor image load events (Sysmon Event ID 7) into `lsass.exe` and `winlogon.exe`. Alert if the `Signed` field is 'false' and the `SignatureStatus` is not 'Valid'. Separately, create a rule to detect GPO modifications (Windows Event ID 5136) where the `AttributeLDAPDisplayName` relates to authentication policies (e.g., `LMPolicy`, `NTLMLanman`) and the new value represents a weaker security setting.",
              "Establish an enterprise-wide baseline of all DLLs loaded by `lsass.exe`. Any newly observed DLL that falls below a rarity threshold (e.g., loaded on fewer than 0.5% of endpoints) should be flagged for review. For GPO changes, calculate the rate of modification for security-sensitive policies and alert if a sudden burst of changes occurs outside a maintenance window.",
              "Use a classification model (e.g., Random Forest) to assign a risk score to GPO change events. Train the model using features such as the user making the change, time of day, the specific policy modified, and whether the change weakens security (e.g., a categorical feature). Changes classified as high-risk should generate an alert for analyst review."
            ]
          },
          {
            "description": "A successful remote logon (Windows Event ID 4624, Type 10) is recorded for an MFA-enforced user, but no corresponding success event appears in the MFA provider's authentication logs. Separately, a process not on an established allowlist gains process-read access (`0x1000`) to `lsass.exe` memory (Sysmon Event ID 10).",
            "data_sources": [
              "Sysmon Event ID 10",
              "Windows Event ID 4624",
              "MFA Provider Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators, Cloud Service Authentication Logs (e.g., Azure AD), Domain Controllers, Privileged Endpoints.",
            "action": [
              "For every successful remote logon (Windows Event ID 4624, Type 10) for an MFA-enforced user, require a matching success event in the MFA provider logs from the same source IP within a 60-second window; alert if no match is found. Also, alert on any process access to `lsass.exe` (Sysmon 10) where `GrantedAccess` includes `0x1000` (PROCESS_VM_READ) and the `SourceImage` is not in an allowlist of legitimate system/security processes.",
              "Profile the typical processes that access `lsass.exe` on different host types (workstation, DC, web server). Build a frequency distribution (stack count) of `SourceImage` paths. Any process accessing `lsass.exe` that is statistically rare (e.g., in the bottom 5th percentile of frequency) should be flagged as anomalous.",
              "Use a clustering algorithm (e.g., DBSCAN) on `lsass.exe` access events, using features like `SourceImage`, `GrantedAccess` code, parent process, and user context. Legitimate access patterns will form dense clusters. Any access event that the algorithm marks as noise (i.e., does not belong to any cluster) is a strong candidate for a defense evasion or credential access attempt."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary gaining credentials by modifying authentication processes?",
    "tactic_id": "TA0006",
    "tactic_name": "Credential-Access",
    "indicators": [
      {
        "technique_id": "T1556",
        "name": "Modify Authentication Process",
        "evidence": [
          {
            "description": "A sequence of events occurs on a host: 1) A file is created in `C:\\Windows\\System32\\`. 2) The file's hash matches a known credential harvesting DLL (e.g., Mimikatz's `memssp.dll`). 3) A registry key is modified to register this DLL as an LSA Security or Notification package.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, System Registry Hives, File System (`C:\\Windows\\System32\\`).",
            "action": [
              "Create a high-fidelity detection rule that chains events by ProcessGUID: 1) A process creation event (Sysmon 1). 2) A file creation event (Sysmon 11) in `C:\\Windows\\System32\\` where the file hash matches a known malicious credential harvesting DLL. 3) A registry modification (Sysmon 13) to an `HKLM\\SYSTEM\\...\\Lsa\\*` key that adds the path of the newly created file.",
              "Calculate the Shannon entropy of all new DLLs written to `System32`. Malicious DLLs used for credential harvesting are often packed and may have a higher entropy score. Alert when a new DLL is registered as an LSA package and its entropy is in the top 95th percentile of all DLLs on the system, or above a fixed threshold of 7.2.",
              "Train a supervised classification model (e.g., XGBoost) to predict if a newly registered LSA package is malicious. Features should include file properties (entropy, size, signature status), the name of the process that wrote the file, the name of the process that modified the registry, and the time difference between file creation and registry modification. The model can be trained on known malware samples and legitimate software installers."
            ]
          },
          {
            "description": "A user object is modified in Active Directory (Windows Event ID 4738) where the `userAccountControl` attribute is changed to include 'Password not required' or 'Store password using reversible encryption'. This may also be executed via PowerShell (`Set-ADUser -AllowReversiblePasswordEncryption $true`).",
            "data_sources": [
              "Windows Event ID 5136",
              "Windows Event ID 4738",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Database (NTDS.dit), Group Policy Objects.",
            "action": [
              "Create a high-priority alert for any occurrence of Windows Event ID 4738 where the `userAccountControl` attribute change includes 'Password not required' or 'Store password using reversible encryption'. Correlate with PowerShell logs (Event ID 4104) containing `Set-ADUser` or `Set-ADAccountControl` with the `-AllowReversiblePasswordEncryption $true` parameter.",
              "Monitor the rate of `userAccountControl` attribute modifications across the domain. A sudden spike in modifications, especially from a single administrative account or source host, is anomalous. Calculate the baseline rate of these changes per day and alert if the count exceeds 3 standard deviations from the mean.",
              "Use peer group analysis on administrative accounts. Model the typical types of changes each administrator performs. If an admin who normally only performs user creation tasks suddenly modifies the `userAccountControl` attribute for a privileged account to enable reversible encryption, flag this as a behavioral anomaly inconsistent with their role's typical activity profile."
            ]
          },
          {
            "description": "A process with low enterprise-wide prevalence (i.e., rare) writes a new DLL file to a system directory and, within 60 seconds, modifies the registry to register that DLL as an LSA Notification Package or Password Filter.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 12",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Servers, System Registry Hives, Temporary/User Profile Directories (as staging locations).",
            "action": [
              "Create a correlation rule that triggers when a process creation event (Sysmon 1) is followed by a file creation event (Sysmon 11) for a DLL, and then a registry set event (Sysmon 13) for an LSA package pointing to that DLL, all occurring within 60 seconds and initiated by the same Process GUID.",
              "Enrich the symbolic rule by adding a statistical condition. Calculate the enterprise-wide prevalence of the initiating process image path (from Sysmon 1). If the process prevalence is less than 5% (i.e., it is running on very few machines), significantly increase the risk score of the alert. A rare process performing this sensitive sequence of actions is highly suspicious.",
              "Use a graph-based anomaly detection model. Create a graph where nodes are processes, files, and registry keys, and edges represent actions (writes, modifies). A legitimate software installation might create a large, complex graph. An adversary's actions might create a small, linear graph (Process -> writes -> DLL -> modifies -> Registry Key). Flag small, high-velocity subgraphs involving these critical assets as malicious."
            ]
          },
          {
            "description": "Network monitoring detects a downgrade in authentication protocol strength (e.g., use of NTLMv1 instead of NTLMv2, or RC4 instead of AES Kerberos encryption) on traffic involving a host that recently had a suspected authentication process modification.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ntlm.log",
              "Zeek krb5.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic to/from Domain Controllers, network traffic to external/untrusted networks, network choke points.",
            "action": [
              "Create a rule that triggers when Zeek's `ntlm.log` shows `success = T` but the detected NTLM version is 'v1', or when `krb5.log` shows a successful TGS ticket using a weak encryption type like RC4-HMAC. Correlate this with the source or destination host having a recent alert for authentication process modification.",
              "Profile the distribution of NTLM versions (`ntlm.log`) and Kerberos encryption types (`krb5.log`) across the network. Establish a baseline where NTLMv2 and AES256 are expected to be >99% of authentications. Alert if the percentage of NTLMv1 or RC4-HMAC authentications suddenly increases above a statistical threshold (e.g., > 1% of total authentications) over a 1-hour window.",
              "Apply a time-series anomaly detection model to network traffic volume (e.g., `total_bytes` in `conn.log`) originating from authentication servers. After a potential compromise (e.g., installation of a malicious password filter), an adversary might exfiltrate captured credentials, causing a spike in outbound traffic that a model like an LSTM autoencoder could detect as anomalous compared to the established daily/weekly seasonality."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]