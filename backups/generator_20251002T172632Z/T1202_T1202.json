[
  {
    "information_requirement": "Has the adversary bypassed security restrictions using indirect command execution? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1202",
        "name": "Indirect Command Execution",
        "evidence": [
          {
            "description": "A process associated with indirect command execution (e.g., forfiles.exe, pcalua.exe, scriptrunner.exe, ssh.exe) spawns a child process whose SHA256 or MD5 hash is present on an internal or external threat intelligence feed of known malicious files.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations, Privileged Access Workstations (PAWs), Application Servers",
            "action": [
              "Symbolic Logic: Create a SIEM rule that triggers on process creation events (Sysmon Event ID 1). The rule should check if the ParentImage path ends with 'forfiles.exe', 'pcalua.exe', 'scriptrunner.exe', or 'ssh.exe' and if the Hashes field (e.g., SHA256) of the child process matches any hash in the organization's threat intelligence database. Generate a high-severity alert upon a match.",
              "Statistical Method: For each T1202 parent process, build a frequency distribution of all child processes observed over the last 90 days. Calculate the rarity of each parent-child pair. Generate a medium-severity alert for pairs falling into the bottom 5th percentile of frequency, especially if the child process name exhibits high character entropy (e.g., > 3.5 bits per character), suggesting randomization.",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest) trained on labeled process creation events. Features should include one-hot encoded parent process name, child process name entropy, command-line argument length, count of suspicious keywords in the command line (e.g., 'http', 'download', 'powershell'), and whether the child process runs from a non-standard directory (e.g., %APPDATA%, %TEMP%). The model will predict a 'malicious' or 'benign' label, flagging high-probability events for review."
            ]
          },
          {
            "description": "A utility such as forfiles.exe, pcalua.exe, or ssh.exe is executed with command-line arguments containing suspicious patterns indicative of malicious execution, such as 'forfiles /c', 'pcalua -a', or 'ssh -o LocalCommand'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, User Workstations, Jump Servers",
            "action": [
              "Symbolic Logic: Deploy a detection rule that uses regular expressions on the process CommandLine field (Sysmon Event ID 1) to find known-malicious patterns. Examples include: 'forfiles\\.exe /p .* /c', 'pcalua\\.exe -a .*', 'scriptrunner\\.exe -appvscript .*', or 'ssh\\.exe .* -o (ProxyCommand|LocalCommand)'. Generate an alert on any match.",
              "Statistical Method: For each T1202 utility, profile the command-line length and argument count across the enterprise over a 30-day rolling window to establish a baseline. Calculate the 95th and 99th percentiles for both metrics. Generate a medium-severity alert for any execution exceeding the 95th percentile and a high-severity alert for any exceeding the 99th, as this indicates unusually complex command-line activity.",
              "Machine Learning: Vectorize command-line arguments for T1202 utilities using a TF-IDF model. Apply a density-based clustering algorithm like DBSCAN to group common, legitimate usage patterns. Any command-line execution that the model classifies as noise (i.e., does not belong to any known legitimate cluster) should be treated as a high-confidence anomaly and queued for immediate analyst investigation."
            ]
          },
          {
            "description": "A process associated with indirect command execution (forfiles.exe, pcalua.exe, scriptrunner.exe) initiates an outbound TCP or UDP network connection to an external IP address, where the destination IP, destination port, or JA3/JA3S hash has not been seen in connection with this process over a 30-day baseline.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), DNS Servers, Host-based firewalls, Host-level Network Telemetry on critical servers and workstations",
            "action": [
              "Symbolic Logic: Create a rule that triggers on Sysmon Event ID 3 (Network Connection) where the Image process path ends with 'forfiles.exe', 'pcalua.exe', 'scriptrunner.exe', or 'ssh.exe'. Enrich the DestinationIp with threat intelligence data. Generate a high-severity alert if the DestinationIp is on a blocklist of known C2 servers or malicious domains.",
              "Statistical Method: Using Zeek conn.log data correlated with process information from Sysmon Event ID 3, maintain a per-host, per-process profile of destination countries and Autonomous System Numbers (ASNs). Alert when a T1202-related process communicates with a country or ASN not previously associated with that host and process combination in the last 60 days (i.e., a first-seen geo/ASN).",
              "Machine Learning: For each T1202-related process, model the time series of its outbound data volume (e.g., orig_bytes in Zeek conn.log) using an LSTM autoencoder. Train the model on historical data to learn normal traffic patterns. Use the model to predict the next time step's traffic volume; if the reconstruction error between the predicted and actual volume exceeds a dynamically calculated threshold, flag it as a temporal anomaly indicative of unexpected data transfer."
            ]
          },
          {
            "description": "An anomalous process lineage is observed where a non-interactive or office productivity application (e.g., WINWORD.EXE, OUTLOOK.EXE, a web server process) spawns a T1202 utility, which in turn spawns a command interpreter, a scripting engine, or another process known for post-exploitation activity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Virtual Desktop Infrastructure (VDI), Application Servers (e.g., Citrix, SharePoint), Web Servers",
            "action": [
              "Symbolic Logic: Using process creation events with parent/child relationships (Sysmon Event ID 1), create detection rules for specific, high-fidelity malicious process chains. Alert on sequences such as: ParentImage='...\\WINWORD.EXE' -> Image='...\\forfiles.exe' -> Grandchild Image='...\\cmd.exe'. This list of forbidden chains should be maintained and updated.",
              "Statistical Method: Construct a directed graph of all parent-child process relationships observed across the enterprise from Sysmon Event ID 1 data over 30 days. For any observed three-process chain (A -> B -> C), calculate its path rarity score by multiplying the conditional probabilities P(B|A) and P(C|B). Alert on chains with a rarity score below a set threshold (e.g., < 0.001%), indicating a highly unusual sequence of process spawns.",
              "Machine Learning: Represent process activity as a graph where nodes are processes and edges are parent-child relationships, with features like command lines and user context. Train a GraphSAGE or similar Graph Neural Network (GNN) model to learn embeddings that represent 'normal' process subgraphs. Flag new process chains whose subgraph embeddings have a large cosine distance from the embeddings of known-benign subgraphs, indicating a structural anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]