[
  {
    "information_requirement": "Has an adversary performed system information discovery on managed assets?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1082",
        "name": "System Information Discovery",
        "evidence": [
          {
            "description": "A process creation event is observed where the process image's file hash (SHA256, MD5, etc.) matches a known malicious or dual-use system discovery tool on a curated threat intelligence list (e.g., WinPEAS, Seatbelt, SharpHound).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Detection and Response (EDR) logs and Windows Event Logs from all workstations and servers, with a focus on Domain Controllers, administrative jump boxes, and developer workstations.",
            "action": [
              "1. (Symbolic) Ingest threat intelligence feeds of known malicious discovery tool file hashes into the SIEM. Create a rule to generate a high-severity alert whenever a process creation event (Windows Event ID 4688, Sysmon Event ID 1) is observed with a file hash that matches an entry in this feed.",
              "2. (Statistical) For all process creation events, calculate the prevalence of each executable's file hash across the enterprise over a 30-day rolling window. Flag any executable hash seen on fewer than 1% of endpoints (a low prevalence threshold) that is also not signed by a trusted publisher for analyst review.",
              "3. (Machine Learning) Train a classification model (e.g., Random Forest, Gradient Boosting) on features from process creation events, including parent process name, command line length and entropy, user context, and the statistical file hash prevalence. Use this model to assign a risk score to each new process, flagging those with a high probability of being malicious discovery activity."
            ]
          },
          {
            "description": "Observed command-line arguments or PowerShell script block content contain specific strings or patterns indicative of system information discovery, such as `systeminfo`, `wmic os get`, `Get-ComputerInfo`, `ver`, or multiple discovery commands chained together.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows hosts with command-line and PowerShell script block logging enabled, especially servers hosting sensitive applications and administrative workstations.",
            "action": [
              "1. (Symbolic) Create SIEM rules using regular expressions to match against the command-line field (Windows Event ID 4688, Sysmon Event ID 1) or script block text (Windows Event ID 4104) for known discovery commands (e.g., `systeminfo`, `hostname`, `ipconfig /all`, `netstat -an`, `wmic os get`, `Get-WmiObject -Class Win32_ComputerSystem`). Flag the use of command-chaining operators (`&&`, `|`, `;`) or output redirection (`>`) in conjunction with these commands.",
              "2. (Statistical) For each host, calculate the Shannon entropy of the command line arguments for all executed processes. Establish a baseline of typical entropy values for common processes (`cmd.exe`, `powershell.exe`). Alert when the entropy of a command line exceeds the 99th percentile for that host or process type, as this can indicate obfuscated or complex, scripted commands.",
              "3. (Machine Learning) Utilize a time-series forecasting model (e.g., ARIMA, Prophet) to predict the expected volume of discovery-related command executions per user or host. Generate an anomaly alert if the observed count in a given time window (e.g., 10 minutes) significantly deviates from the predicted volume, suggesting automated scripting or reconnaissance."
            ]
          },
          {
            "description": "A system discovery command (e.g., `systeminfo`, `whoami`) is executed by a non-interactive or service account, or is spawned by a parent process not typically associated with administrative activity (e.g., `winword.exe`, `outlook.exe`, `iexplore.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, with a focus on application servers, web servers, and database servers where service accounts are prevalent and user interaction is limited.",
            "action": [
              "1. (Symbolic) Maintain a list of approved parent processes for discovery commands (e.g., `explorer.exe`, `powershell.exe`, `cmd.exe`). Generate an alert if a discovery command is spawned by a parent process not on this list (e.g., Office applications, web browsers) or if executed under the context of a known service account on a non-administrative server.",
              "2. (Statistical) Profile all unique (parent process, child process, user account type) triples observed in the environment over a 30-day period. Use frequency analysis (stack counting) to identify rare combinations. Any triple that occurs less than a specified number of times (e.g., < 5 occurrences globally) and involves a discovery command should be flagged as a high-confidence indicator.",
              "3. (Machine Learning) Model process execution chains as a directed graph where nodes are processes and edges represent parent-child relationships. Use a graph-based anomaly detection algorithm (e.g., PageRank on the process graph) to identify unusual process lineages, such as a low-reputation parent spawning a discovery tool, which deviates from the learned baseline graph structure."
            ]
          },
          {
            "description": "The count of system discovery command executions from a single host or by a single user within a defined time window (e.g., 5 minutes) significantly exceeds a statistically derived baseline for that entity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized SIEM or data lake containing aggregated endpoint logs from all workstations and servers across the enterprise.",
            "action": [
              "1. (Symbolic) Implement a threshold rule that alerts if any single host or user executes more than 15 distinct discovery-related commands within a 5-minute window. This threshold should be tuned to the specific environment to reduce false positives from administrative scripts.",
              "2. (Statistical) For each host and user, establish a baseline of the mean and standard deviation ($$ \\mu, \\sigma $$) of discovery command counts in 10-minute intervals over a 30-day period. Generate an alert if the count in any interval exceeds the mean by more than 3 standard deviations ($$ > \\mu + 3\\sigma $$), indicating a statistically significant spike in activity.",
              "3. (Machine Learning) Apply a time-series decomposition model to the discovery command event stream for each host, separating it into trend, seasonality, and residual components. Apply an anomaly detection algorithm (e.g., Isolation Forest, Local Outlier Factor) to the residual component to identify unusual spikes in activity that are not explained by normal operational patterns or seasonality."
            ]
          },
          {
            "description": "A single source host initiates remote administration connections (e.g., WinRM, RPC, SMB) to an anomalously high number of unique destination hosts within a short time frame, indicative of a remote discovery sweep.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network taps/SPAN ports feeding Zeek sensors at network choke points (e.g., core switches, data center and cloud VPC ingress/egress). Windows Firewall logs and Security Event Logs from all servers.",
            "action": [
              "1. (Symbolic) Create a rule that triggers if a single source IP is observed in Zeek conn.log making new connections on remote administration ports (e.g., 135/tcp, 445/tcp, 5985/tcp, 5986/tcp) to more than 20 unique destination hosts within 10 minutes.",
              "2. (Statistical) For each source host, count the number of unique destination hosts it connects to on discovery-related ports per hour. Use the interquartile range (IQR) method to identify statistical outliers. Any source host whose hourly connection count is greater than Q3 + 1.5 * IQR should be flagged for investigation.",
              "3. (Machine learning) Model network connections from Zeek conn.log as a bipartite graph of (source hosts, destination hosts). Use a community detection algorithm (e.g., Louvain Modularity) to identify normal clusters of activity (e.g., web servers talking to database servers). A host that suddenly begins connecting to many nodes outside of its typical community is a strong candidate for anomalous lateral movement and discovery."
            ]
          },
          {
            "description": "Anomalous or excessive API calls are made to cloud service provider metadata services or APIs that return system information, such as `DescribeInstances` in AWS or `VirtualMachines - Get` in Azure, especially from a user or role not typically associated with infrastructure management.",
            "data_sources": [
              "AWS CloudTrail logs",
              "Azure Activity Logs",
              "Google Cloud Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider logging services (AWS CloudTrail, Azure Monitor, Google Cloud's operations suite) aggregating logs from all production and development subscriptions/accounts.",
            "action": [
              "1. (Symbolic) Create an alert for any non-administrative user or programmatic role executing discovery-related API calls (e.g., `ec2:Describe*`, `compute.instances.get`, `Microsoft.Compute/virtualMachines/read`). Maintain an allow-list of approved administrative principals and alert on any deviation.",
              "2. (Statistical) For each cloud principal (user/role), establish a baseline for the frequency and variety of discovery API calls over a 30-day period. Alert if a principal's call count to these APIs in a 1-hour window exceeds the 98th percentile of their own historical activity, or if they call a sensitive, read-only API they have never used before.",
              "3. (Machine Learning) Use a clustering algorithm (e.g., K-Means or DBSCAN) to group cloud principals based on their API call behavior patterns (e.g., using TF-IDF vectors of API calls). Identify principals that anomalously shift from a 'developer' or 'application' cluster to an 'administrator' or 'recon' cluster. This indicates a significant and potentially malicious change in behavior."
            ]
          }
        ]
      }
    ],
    "version": "2.3",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]