[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by ensuring a process continues execution despite potential interruptions? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.011",
        "name": "Ignore Process Interrupts",
        "evidence": [
          {
            "description": "A process creation event contains a command-line string that is an exact, case-sensitive match to a known malicious command string from a threat intelligence feed specifically cataloged for ignoring process interrupts.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers, Critical Production Servers",
            "action": [
              "Symbolic Logic: Maintain and regularly update a high-fidelity list of complete command-line strings known to be used for this technique. Create an exact-match detection rule that scans the 'CommandLine' or 'Process Command Line' field of Windows Event ID 4688 logs. An alert from this rule indicates a known-bad indicator and requires immediate investigation.",
              "Statistical Logic: Calculate a 30-day rolling baseline (mean and standard deviation) of the daily count of exact-match detections across the enterprise. Generate a high-severity alert if the daily count for a single day exceeds three standard deviations above the mean, which may indicate a widespread, coordinated campaign.",
              "Machine Learning: Apply a pre-trained natural language processing (NLP) model, such as a one-class SVM or a transformer-based classifier, to the command-line string. The model, trained on millions of benign commands and known malicious interrupt-ignoring commands, can identify semantic and structural similarities to known malicious patterns, flagging novel variations that are not on the exact-match list."
            ]
          },
          {
            "description": "A process is created with a command line containing specific keywords, parameters, or syntax patterns (e.g., 'nohup', '-ErrorAction SilentlyContinue') used to ignore interrupts, suppress termination, or detach from a parent session.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Servers with PowerShell, Windows Subsystem for Linux (WSL) enabled hosts, Developer environments",
            "action": [
              "Symbolic Logic: Implement regular expression searches against process command lines (Windows Event ID 4688) and PowerShell script block logs (Windows Event ID 4104). Search for patterns such as 'nohup .* &', 'disown', 'setsid', 'Start-Process -WindowStyle Hidden', 'trap { continue; }', or '-ErrorAction SilentlyContinue' and generate a low-severity alert for triage.",
              "Statistical Logic: For each pattern identified (e.g., 'nohup'), establish a baseline of normal usage frequency per user, hostname, and parent process. Calculate the historical prevalence of each pattern. Generate an alert when usage is observed from a user or on a host for the first time, or if the daily count for a specific pattern exceeds the 95th percentile of its historical usage.",
              "Machine Learning: Apply a pre-trained classification model (e.g., Gradient Boosting, Random Forest) to feature vectors extracted from command lines. Engineer features such as: command length, character entropy of the command string, presence/count of specific keywords ('nohup', 'SilentlyContinue'), and the ratio of special characters to alphanumeric characters. A classification score exceeding a predetermined confidence threshold (e.g., 0.85) indicates a likely evasive command."
            ]
          },
          {
            "description": "A process's termination event occurs more than a predefined time threshold (e.g., 5 minutes) after the termination event of its parent process or the logoff event (Event ID 4634) of the user session that spawned it.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4634"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Authentication Servers, Domain Controllers, User Workstations, Remote Desktop (RDS) and Terminal Servers",
            "action": [
              "Symbolic Logic: For each process termination event (found in security or Sysmon logs), retrieve its creation event (Windows Event ID 4688) to identify the Parent Process ID and Logon ID. If the parent process termination event or a user logoff event (Windows Event ID 4634) with the same Logon ID occurred more than 5 minutes prior, trigger an alert. Maintain an allowlist of known-good processes expected to exhibit this behavior (e.g., certain system services).",
              "Statistical Logic: For each common parent process (e.g., 'explorer.exe', 'svchost.exe'), calculate the time delta between the parent's termination and each child's termination. Establish a baseline distribution of these deltas. Generate an alert when a newly observed time delta for a parent-child pair exceeds the 99th percentile for that parent process type, indicating an anomalously long-lived orphaned process.",
              "Machine Learning: Model the count of active orphaned processes per host in 15-minute intervals using a time series forecasting algorithm (e.g., SARIMA, Prophet). The model will learn the normal cyclical patterns of orphaned processes on a host. Generate an alert when the observed count significantly deviates from the forecasted confidence interval, suggesting a potential mass-detaching of malicious processes."
            ]
          },
          {
            "description": "A process previously identified as ignoring interrupts initiates an external network connection to a destination IP or domain that is statistically rare for the host or communicates over a non-standard port.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Network Egress Points, DNS Server Logs, Network Security Monitoring (NSM) sensors",
            "action": [
              "Symbolic Logic: Correlate process creation events flagged by other 'Ignore Process Interrupts' detections with network connection logs (Zeek conn.log) within 5 minutes of process start time. Trigger a high-priority alert if the process's destination IP address or resolved domain matches an entry on a current threat intelligence feed.",
              "Statistical Logic: For any process identified as ignoring interrupts, analyze its destination domains from Zeek dns.log. Calculate a risk score for each domain based on a combination of factors: domain age (younger is riskier), subdomain entropy (higher is riskier), and public suffix list prevalence (less common is riskier). Flag any process communicating with a domain whose composite score is in the top 5th percentile of all newly observed domains in the environment.",
              "Machine Learning: Employ a graph-based anomaly detection model where nodes represent processes and IP addresses, and edges represent network connections. Features for nodes and edges can include process command line, connection duration, protocol, and total bytes transferred. The model learns normal communication graphs (e.g., 'chrome.exe' connecting to many Google IPs) and can identify anomalous edges, such as a 'powershell.exe' process (flagged as ignoring interrupts) making a long-running connection to a single, newly-seen IP address."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]