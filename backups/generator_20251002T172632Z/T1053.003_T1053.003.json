[
  {
    "information_requirement": "Has the adversary established execution using a Cron job?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A Linux host initiates outbound network connections at a highly regular interval (e.g., standard deviation of inter-arrival time < 1 second) to an external destination matching a known malicious indicator or a newly seen destination.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Routers), DNS resolvers, and the Linux/Unix server fleet (specifically web, application, and database servers).",
            "action": [
              "Symbolic: Create a rule to join Zeek conn.log `id.resp_h` with a threat intelligence feed of malicious IPs. Separately, join Zeek dns.log `query` with a malicious domain feed and Zeek ssl.log `ja3` hashes with a malicious hash feed. Alert on any matches.",
              "Statistical: For each source-destination IP pair in Zeek conn.log, calculate the inter-arrival times between connections over a 24-hour window. Flag pairs where the standard deviation of inter-arrival times is less than one second, $$ \\sigma < 1s $$, indicating machine-like periodicity. Prioritize alerts for destinations that are rare or have a low reputation score.",
              "Machine Learning: Apply a time series forecasting model (e.g., ARIMA) to the connection count per minute for each source-destination pair. An Autocorrelation Function (ACF) plot showing significant repeating spikes at regular intervals (e.g., lags at 60, 120, 180) confirms a periodic schedule, likely from a cron job."
            ]
          },
          {
            "description": "A process creation event (e.g., PsExec.exe, wmic.exe) is logged on a Windows host, where the associated network logon event (Type 3) originates from a Linux/Unix host IP address and occurs at a highly regular interval.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Windows Servers (Domain Controllers, File Servers), Linux/Unix management servers, Authentication logs.",
            "action": [
              "Symbolic: Search for Windows Event ID 4688 (Process Creation) for processes like 'psexec.exe', 'wmic.exe', or 'powershell.exe' with remote execution arguments. Correlate the `LogonId` to a Windows Event ID 4624 (Logon) event with `LogonType: 3`. Alert if the `IpAddress` in the 4624 event belongs to a Linux/Unix subnet and is not on an approved administrative systems allowlist.",
              "Statistical: For the correlated logon events grouped by source IP and target user, calculate the time difference between consecutive logons. Flag any group where the standard deviation of the time difference is below a small threshold (e.g., $$ \\sigma < 5s $$). Compare the logon frequency against the 99th percentile of logon frequencies for that user or source host to identify abnormally frequent automated access.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on the logon timestamps for each source IP/user pair. Input features should be `(day_of_year, time_of_day)`. A dense cluster of events occurring at the same minute of the hour across multiple days should be flagged as a periodic, scheduled activity."
            ]
          },
          {
            "description": "A crontab file (e.g., in /etc/cron.d/, /var/spool/cron/) is modified or created by a suspicious process, followed shortly by new outbound network activity from the same host.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux/Unix server fleet, especially hosts with externally facing services or administrative roles.",
            "action": [
              "Symbolic: Alert on any FileCreate event (Windows Event ID 11) for file paths matching `/etc/cron*` or `/var/spool/cron*`. Prioritize if the process creating the file (`Image` field) is `bash`, `sh`, `wget`, `curl`, or another script interpreter.",
              "Statistical: Correlate a crontab modification event with subsequent process execution (Windows Event ID 1) or network connections (Zeek conn.log) from the same host within a 5-minute window. Establish a baseline of normal crontab modifications (e.g., by package managers like 'apt' or 'yum'). Flag any modification that deviates from this baseline, especially if followed by a connection to a low-reputation IP/domain.",
              "Machine Learning: Train a classifier to determine if a command line string written to a crontab is malicious. Features can include: presence of base64 encoding, use of `curl` or `wget` with a pipe to `sh`, presence of IP addresses, and use of reverse shell syntax. A high score from this model would trigger an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary maintaining persistent access using a Cron job?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A host makes recurring, scheduled outbound network connections over a multi-day period (>7 days) to a destination with characteristics of a C2 server (e.g., on a CTI feed, high-entropy domain, self-signed certificate).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS resolvers, Certificate Transparency logs, Linux/Unix server fleet.",
            "action": [
              "Symbolic: Over a 30-day lookback, correlate destination IPs from Zeek conn.log, domains from Zeek dns.log, and server certs/JA3 hashes from Zeek ssl.log against threat intelligence feeds. Alert on any match that occurs on at least two separate days with regular periodicity.",
              "Statistical: For each source-destination pair, calculate the daily connection frequency over a 7-day sliding window. A consistently low variance in daily frequency is suspicious. Separately, calculate the Shannon entropy of the subdomain labels in Zeek dns.log for a given parent domain; a high entropy value (e.g., > 3.5) can indicate DGA, often used with scheduled callbacks for persistence.",
              "Machine Learning: Train a classifier (e.g., Random Forest) to identify C2 beaconing. Use features from Zeek conn.log such as `duration`, `orig_bytes_ip`, `resp_bytes_ip`, and statistical features of inter-arrival times (mean, stdev). Flag any connection pattern that is classified as C2 and persists with a strong periodic signal over 7+ days."
            ]
          },
          {
            "description": "A process running under a low-privilege Linux service account (e.g., 'www-data', 'apache') executes a command that modifies user accounts or permissions, and this activity occurs at a regular, repeating interval.",
            "data_sources": [
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux/Unix web and application servers.",
            "action": [
              "Symbolic: Alert when a process running as a web service user (e.g., `www-data`, `nginx`) executes commands like `usermod`, `chmod`, `chown`, `useradd`, or writes to `/etc/passwd` or `/etc/shadow`.",
              "Statistical: For the alerts generated by the symbolic rule, analyze the timestamps of their occurrences over a 30-day period. Calculate the inter-arrival times. A low standard deviation ($$ \\sigma < 5s $$) across multiple events indicates a scheduled, automated task for persistence.",
              "Machine Learning: Use an anomaly detection model (e.g., Isolation Forest) on process execution events. Features should include `User`, `ParentImage`, `Image`, `CommandLine`, and `Time of Day`. The model can identify rare and suspicious executions, such as a web server process spawning a shell or a user management tool outside of normal software update cycles."
            ]
          },
          {
            "description": "A Linux host makes periodic DNS requests (e.g., for TXT or A records) to a specific domain without subsequent outbound TCP/UDP connections to the resolved IP, indicating a DNS tunnel for C2. The periodicity suggests a cron-based scheduler.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, network egress points, Linux/Unix server fleet.",
            "action": [
              "Symbolic: For each `uid` in Zeek dns.log, check if a corresponding `uid` exists in Zeek conn.log within 1 minute. Alert if a host makes repetitive DNS queries (especially for TXT or CNAME records) for which no corresponding outbound connection is made.",
              "Statistical: Calculate the ratio of DNS query volume to outbound TCP/UDP connection volume for each host over 24 hours. A ratio significantly exceeding the network-wide 99th percentile is anomalous. Additionally, calculate the entropy of the inter-arrival times of these DNS queries to the same domain; low entropy indicates scheduling.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) to group hosts based on their network protocol profile (e.g., percentage of traffic over TCP/80, TCP/443, UDP/53). Flag any host that moves to a cluster characterized by an abnormally high percentage of DNS traffic relative to its peers. A time series analysis on the DNS query count can then confirm the periodic 'heartbeat'."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges using a misconfigured or malicious Cron job?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1053.003",
        "name": "Cron",
        "evidence": [
          {
            "description": "A process, spawned by `cron`, runs with root privileges and modifies sensitive system files or configurations (e.g., setting the SUID bit on a binary, modifying the /etc/sudoers file).",
            "data_sources": [
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "The entire Linux/Unix server fleet, with a focus on multi-user systems.",
            "action": [
              "Symbolic: Alert on any process with `cron` or `crond` in its ancestry (`ParentImage` chain) that executes `chmod` with arguments containing `+s` or `4755`, or that writes to `/etc/sudoers` or `/etc/passwd`.",
              "Statistical: Establish a baseline of commands run by root-level cron jobs. Flag any new or rare command line execution (e.g., a command seen for the first time in 30 days). Calculate the command line entropy; a high entropy value might indicate an obfuscated payload.",
              "Machine Learning: Use a one-class SVM (Support Vector Machine) trained on the command lines of known-good root cron jobs (e.g., log rotation, system updates). Any new cron-spawned command that falls outside the learned boundary is flagged as a potential privilege escalation attempt."
            ]
          },
          {
            "description": "A cron job is created or modified in a user-writable directory (e.g., /tmp, /var/tmp) and is later executed with elevated privileges, leading to a new process running as root.",
            "data_sources": [
              "Windows Event ID 11",
              "Windows Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux/Unix hosts, specifically monitoring world-writable directories like /tmp and /var/tmp.",
            "action": [
              "Symbolic: Alert on any FileCreate event (Windows Event ID 11) for a file in a world-writable directory (`/tmp`, `/var/tmp`, `/dev/shm`) that is subsequently executed (Windows Event ID 1) by a privileged user (e.g., root).",
              "Statistical: Correlate file creation events in world-writable directories with process executions. Calculate the time delta between file write and execution. A short delta (<1 minute) is suspicious. Track the rarity of a privileged process executing a file from `/tmp`; flag if this behavior is in the 99th percentile of rarity for the host.",
              "Machine Learning: Use a graph-based analysis model. Create nodes for users, files, and processes. Create edges for file writes and process executions. Search for the specific path: `Low-Privilege User -> Writes File to /tmp -> Cron/Systemd Executes File -> New Process as Root`. This sequence represents a classic privilege escalation path."
            ]
          },
          {
            "description": "A Linux host, after a suspected cron-based compromise, initiates network logons (e.g., via SSH, WinRM) to other systems using credentials captured or elevated on the source host. The timing of these subsequent lateral movement attempts is periodic.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments, authentication logs on both Windows and Linux servers, network egress/ingress points between security zones.",
            "action": [
              "Symbolic: After detecting a suspicious cron execution on Host A, monitor for new outbound connection attempts from Host A to sensitive ports (e.g., TCP/22, TCP/3389, TCP/5985). Correlate these with logon failures (Windows Event ID 4625) or first-time successful logons (Windows Event ID 4624) on destination hosts.",
              "Statistical: For a host suspected of cron-based compromise, monitor for an increase in the number of unique destination IPs or user accounts it attempts to connect to. A spike exceeding 3 standard deviations from the host's 30-day baseline is anomalous. Analyze the timing of these attempts; periodicity suggests the compromised cron job is being used for lateral movement.",
              "Machine Learning: Model the 'blast radius' of a typical host using a graph neural network. The model learns normal lateral movement patterns (e.g., admin workstations connecting to servers). If a compromised web server suddenly begins attempting to connect to other servers in a way that is inconsistent with its learned role, the model will flag this as anomalous lateral movement, likely driven by an automated (cron) task."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]