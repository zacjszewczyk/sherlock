[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by modifying code signing policies?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1553.006",
        "name": "Code Signing Policy Modification",
        "evidence": [
          {
            "description": "A process creation event is logged with a file hash that matches a known indicator of compromise (IOC) for tools specifically designed to modify or disable code signing policies (e.g., KDU, DSEFix).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer Workstations, System Administrator Workstations, Critical Servers, Network Egress Points",
            "action": [
              "Query process creation logs (Windows Event ID 4688, Sysmon Event ID 1) and file analysis logs (Zeek files.log) for file hashes. Compare these hashes against a threat intelligence feed of known code signing modification tools. Generate a high-priority alert upon a match.",
              "For any process execution, calculate the enterprise-wide prevalence of its file hash. If a process modifies code signing policies (identified via command-line or registry actions) and its hash is in the bottom 1st percentile of prevalence (i.e., a rare file), escalate for investigation.",
              "Develop a supervised classification model (e.g., XGBoost, Random Forest) trained on labeled process execution data. Use features such as parent-child process relationships, file path location, command-line argument structure, and file entropy. Deploy the model to score new process executions in real-time and alert on those classified as malicious with high confidence, especially when associated with system configuration changes."
            ]
          },
          {
            "description": "A process creation event is recorded containing command-line arguments explicitly used to modify code signing policies, such as 'bcdedit.exe /set testsigning on' or 'csrutil disable'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Developer Workstations, Endpoint fleet, macOS systems",
            "action": [
              "Deploy a SIEM rule using regular expressions to search the command-line field within process creation logs (Windows Event ID 4688, Sysmon Event ID 1). The regex should detect variations of `bcdedit.exe` or `csrutil` commands used to modify signing policies, such as `/(?i)(bcdedit|csrutil).*(testsigning|nointegritychecks|disable)/`. Trigger an alert on any match.",
              "For each user, build a historical profile of `bcdedit.exe` command-line usage. For each new execution, calculate a rarity score based on the command's historical frequency for that specific user and for the general user population. Flag commands that are rare for the user and rare globally (e.g., exceeding the 95th percentile of rarity) for review.",
              "Vectorize command-line arguments from `bcdedit.exe` executions using a technique like TF-IDF or a pre-trained language model. Apply an unsupervised clustering algorithm (e.g., DBSCAN) to these vectors. Analyze clusters of size 1 (outliers) as they may represent obfuscated or novel malicious commands that deviate from common administrative patterns."
            ]
          },
          {
            "description": "A registry modification event is logged, showing a change to a value within a key path controlling code signing policies, such as `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Config` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Policy`.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Active Directory Certificate Services Servers",
            "action": [
              "Configure monitoring for write and delete operations (Windows Event ID 4657, Sysmon Event ID 13) on critical code integrity registry keys, including `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Config` and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Policy`. Alert on any modification not attributed to a known, trusted system process or approved change request.",
              "For every process that modifies a monitored code signing registry key, calculate the string entropy of its file path. Establish a baseline of path entropy for legitimate administrative tools. Flag any modification where the initiating process's path entropy exceeds 3 standard deviations from the baseline, suggesting randomization or execution from a temporary location.",
              "Model the frequency of modification events for code signing registry keys using a time-series forecasting model (e.g., Prophet, ARIMA). The model should account for weekly and daily seasonality. Generate an alert when the observed count of modifications in a given time window exceeds the model's predicted upper confidence interval, indicating an anomalous burst of activity."
            ]
          },
          {
            "description": "A sequence of events is observed on a single host: 1) A code signing policy change is detected via command-line or registry modification, 2) The system reboots, and 3) An unsigned driver is subsequently loaded or a driver fails signature validation.",
            "data_sources": [
              "Windows Event ID 5038",
              "Sysmon Event ID 6",
              "Windows Event ID 6006",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, especially developer and administrator workstations, Virtual Desktop Infrastructure (VDI) fleet",
            "action": [
              "Implement a stateful correlation rule that triggers when, on the same host, an alert for 'Code Signing Policy Modification' is followed by a system shutdown event (Windows Event ID 6006) and then a driver load event where the signature is invalid or missing (Sysmon Event ID 6, where Signed is 'false') within a 30-minute time window.",
              "Calculate the daily rate of unsigned driver load events (Sysmon Event ID 6 where Signed is 'false') per host. Use a moving average to smooth the data. Identify hosts whose rate of unsigned driver loads is in the 99th percentile for the entire fleet, indicating a persistent policy misconfiguration or compromise.",
              "Train a Hidden Markov Model (HMM) on sequences of endpoint events (process creation, registry mods, driver loads, reboots) from known benign systems. Apply this model to new event sequences from monitored hosts. Flag sequences that have a very low probability of being generated by the benign model, particularly those containing the state transitions from 'policy modification' to 'reboot' to 'unsigned driver load'."
            ]
          },
          {
            "description": "A driver load event for a legitimately signed but known-vulnerable driver is followed within a short time window (e.g., 5 minutes) by the loading of a second, unsigned or self-signed driver, indicating a 'Bring Your Own Vulnerable Driver' (BYOVD) attack.",
            "data_sources": [
              "Windows Event ID 7045",
              "Sysmon Event ID 6",
              "Sysmon Event ID 7",
              "Zeek x509.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-Value Target Workstations, Domain Controllers, Servers running Endpoint Detection and Response (EDR) agents",
            "action": [
              "Maintain a watchlist of file hashes for known vulnerable drivers. Create a correlation rule that alerts when a driver from this list is loaded (Sysmon Event ID 6), and within 5 minutes on the same host, a second driver is loaded that is unsigned (Signed='false') or has an anomalous signature status.",
              "For every driver load event (Sysmon Event ID 6), extract the certificate's issuer and subject. Cross-reference with Zeek's `x509.log` to build a baseline of common signers across the enterprise. If a known vulnerable driver is loaded, and is followed by the load of another driver signed by an entity in the 1st percentile of rarity (i.e., almost never seen), escalate for investigation.",
              "Construct a real-time causality graph where nodes represent processes and files (drivers), and directed edges represent actions like 'created' or 'loaded'. Use a graph query language to search for the specific BYOVD subgraph pattern: `(Process)->[:LOADS]->(VulnerableDriver)->[:MODIFIES_KERNEL_OR_LOADS]->(MaliciousDriver)`. The `VulnerableDriver` node would be identified by its hash from an IOC list, and the `MaliciousDriver` node by properties like being unsigned."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]