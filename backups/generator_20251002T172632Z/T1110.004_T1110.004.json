[
  {
    "information_requirement": "Is the adversary attempting to gain credential access using credential stuffing? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1110.004",
        "name": "Credential Stuffing",
        "evidence": [
          {
            "description": "A successful or failed authentication event is associated with a source IP address or HTTP User-Agent string that matches a known indicator of compromise (IOC) from a high-confidence threat intelligence feed specializing in credential stuffing campaigns.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Externally-facing authentication services (VPN, OWA, M365), Internet Gateway/Firewall, Web Proxies, Cloud Identity Provider (e.g., Azure AD)",
            "action": [
              "Join authentication logs (Windows Event IDs 4624, 4625) with web logs (Zeek http.log) on source IP address. For each event, compare the source IP and User-Agent string against a curated threat intelligence list of indicators associated with credential stuffing. Generate a high-severity alert for any direct match.",
              "For each source IP address over a 1-hour window, calculate the ratio of login attempts that match an IP or User-Agent on a threat feed to the total number of login attempts from that IP. Alert on any IP where this ratio exceeds the 99th percentile of the population distribution, indicating a high concentration of known-bad activity.",
              "Train a supervised classification model (e.g., Logistic Regression, Random Forest) on labeled historical data. Use features such as source ASN, geolocation, User-Agent string characteristics (length, token count), and a binary feature indicating if the IP/UA is on a threat list. Deploy the model to score new login attempts in real-time, alerting on any attempt with a predicted probability of being malicious above a calibrated threshold (e.g., 0.90)."
            ]
          },
          {
            "description": "A single source IP address generates a high volume of failed authentication events (Windows Event ID 4625) across a large number of distinct user accounts within a short time frame, coupled with a low success-to-failure ratio but potentially including successful logins (Windows Event ID 4624) for multiple distinct accounts.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers (RADIUS, LDAP), Cloud Identity Provider (e.g., Azure AD), VPN Concentrators",
            "action": [
              "Create a detection rule that triggers when a single source IP address generates over 100 failed logins (Event ID 4625) targeting more than 20 unique user accounts within a 5-minute window. Escalate the alert's severity if the same IP also achieves at least two successful logins (Event ID 4624) to different accounts within the same window.",
              "In 5-minute windows, calculate two metrics per source IP: the count of unique target usernames in failed logins and the Shannon entropy of those usernames. Establish a baseline for both metrics. Generate an alert when a source IP's unique username count exceeds the 98th percentile and its username entropy is anomalously high, which indicates the attacker is cycling through a diverse list of accounts rather than targeting a single one.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to all source IPs observed in a 1-hour window. Use features such as total login attempts, failure count, success count, and number of unique target accounts. The algorithm will isolate anomalous clusters representing attacker IPs from the dense cluster of normal user behavior. Automatically flag any IP belonging to a sparse, high-volume cluster for investigation."
            ]
          },
          {
            "description": "A successful authentication (Windows Event ID 4624) for a single user account originates from a geographic location that is physically impossible for the user to have traveled to, based on the location and timestamp of their last successful login.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators, Cloud Identity Provider (e.g., Azure AD), Internet Gateway/Firewall, Geolocation Intelligence Service",
            "action": [
              "For each successful login (Event ID 4624), enrich the source IP with geolocation data and retrieve the timestamp. Compare this with the geolocated IP and timestamp of the user's last successful login. Calculate the required travel speed between the two locations. Generate an 'Impossible Travel' alert if the speed exceeds a set threshold (e.g., 1000 km/h or 600 mph).",
              "For each user, maintain a historical profile of login locations (countries, cities, ASNs). For each new successful login, calculate the Mahalanobis distance of its geolocation from the centroid of the user's historical location cluster. An alert is generated if this distance score exceeds the 98th percentile for that user, indicating a login from a statistically improbable location for that specific user.",
              "Train a one-class SVM (Support Vector Machine) model for each active user, defining a 'normal' boundary based on their historical login features (e.g., geolocation coordinates, time of day as a cyclical feature, day of week, source ASN). Use the model to classify each new login as 'inlier' (normal) or 'outlier' (anomalous). Flag all outlier logins for review, as they represent a deviation from the user's established behavior pattern."
            ]
          },
          {
            "description": "A high volume of web requests to authentication endpoints from a single source IP exhibit characteristics of automation, such as programmatic User-Agent strings (e.g., 'curl', 'python-requests'), the absence of expected HTTP headers (e.g., 'Referer', 'Accept-Language'), or unnaturally consistent timing between requests.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Servers hosting login pages, Web Application Firewalls (WAFs), Reverse Proxies, Content Delivery Networks (CDNs)",
            "action": [
              "Scan Zeek http.log for requests to known authentication URLs (e.g., '/login', '/auth'). Create a rule to flag any request that either contains a User-Agent from a blocklist of automation tools or is missing a 'Referer' header when one is expected. Correlate with failed logins (Event ID 4625) from the same source IP in Zeek conn.log within the same minute.",
              "For each source IP making requests to login pages, calculate the standard deviation of the inter-arrival time (time between requests) over a 1-minute window. Flag IPs where this value is exceptionally low (e.g., less than 50 milliseconds), as this suggests scripted, non-human pacing. Also, calculate the ratio of POST to GET requests to the login page; a very high ratio can be indicative of a stuffing tool.",
              "Develop a time-series anomaly detection model (e.g., LSTM autoencoder) for the overall volume of failed logins (Event ID 4625). Train the model on historical data to learn the normal rhythm of failed authentications. A sudden, sharp spike in failures that the model flags as a significant anomaly can indicate the start of a large-scale credential stuffing attack."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]