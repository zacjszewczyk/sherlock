[
  {
    "information_requirement": "Is an adversary attempting to elevate privileges by injecting code into a higher-privileged process on a mobile device? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1631.001",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "An audit log event (e.g., Android audit.log) shows a ptrace system call where the source process's package name is not on an approved list of debuggers or system utilities, and the target process is running with a user ID (UID) of 0 (root) or 1000 (system).",
            "data_sources": [
              "Android audit.log",
              "MDM application inventory log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Kernel-level system call interface on managed mobile endpoints, Mobile Device Management (MDM) platform, Centralized log aggregator for mobile device logs",
            "action": "1. (Symbolic) Continuously ingest Android audit logs and threat intelligence feeds. Query for ptrace system calls where the source process hash matches a known malicious indicator. 2. (Statistical) Establish and maintain an allow-list of application package names (and their corresponding processes) that are authorized to use ptrace (e.g., debuggers, security tools) from MDM inventory. Generate an alert for any ptrace call initiated by a process not on this list. Calculate the frequency of ptrace calls per source application over a rolling 24-hour window. An application exhibiting a ptrace frequency greater than the 99th percentile of its own historical baseline, especially when targeting a new or high-privilege process (UID 0 or 1000), indicates a statistical anomaly. 3. (ML) Deploy a pre-trained classification model (e.g., Random Forest) that classifies each ptrace event as 'benign' or 'malicious' based on features like source/target process names, UIDs, parent process, and time of day. A 'malicious' classification for a ptrace call targeting a privileged process should trigger a high-severity alert for immediate investigation."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to evade defenses by executing malicious code within the context of a legitimate mobile application process? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1631.001",
        "name": "Ptrace System Calls",
        "evidence": [
          {
            "description": "Network flow data (Zeek conn.log) shows a process establishing a connection to a destination IP/port or resolving a DNS query (Zeek dns.log) inconsistent with its established behavioral baseline, where the anomalous network event occurs within a 5-minute window after the same process was the target of a ptrace system call (Android audit.log).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Android audit.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at corporate Wi-Fi egress points, VPN concentrators, and DNS resolvers used by mobile devices",
            "action": "1. (Symbolic) Ingest ptrace events from Android audit logs. For each event, extract the target process and timestamp. Correlate this with network logs (Zeek conn.log, dns.log) within a 5-minute window following the event. Trigger a high-priority alert if the process initiates a connection to a destination IP or resolves a domain that matches an entry in a C2 threat intelligence feed. 2. (Statistical) For each critical mobile application, create a 30-day network baseline including (a) a set of normal destination ports, (b) the 95th percentile of data sent/received per connection, and (c) the mean and standard deviation of the Shannon entropy of its requested FQDNs per hour. After a ptrace event targets an application, generate an alert if its subsequent network traffic connects to a non-baselined port, exceeds the 95th percentile for data transfer, or if its DNS query entropy for the next hour is more than 3 standard deviations above its mean. 3. (ML) For high-value processes (e.g., browsers, email clients), implement a time-series anomaly detection model (e.g., LSTM Autoencoder) trained on 1-minute aggregations of network metrics (e.g., bytes_out, connection_count, unique_dest_IPs). When a ptrace event targets a monitored process, its subsequent network activity is fed to the model. A reconstruction error score exceeding a dynamically adjusted threshold indicates a significant behavioral deviation and potential process injection."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]