[
  {
    "information_requirement": "Is an adversary attempting to discover the physical location of our mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1430",
        "name": "Location Tracking",
        "evidence": [
          {
            "description": "An installed application on a managed mobile device requests high-risk location permissions (e.g., Android: ACCESS_BACKGROUND_LOCATION; iOS: NSLocationAlwaysAndWhenInUseUsageDescription) that are inconsistent with the application's documented function or its approved permissions baseline.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "Application manifest (AndroidManifest.xml) files",
              "Application property list (Info.plist) files",
              "Threat intelligence feeds on malicious application hashes/package names"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, internal application stores, application vetting sandboxes, MDM/UEM server logs.",
            "action": "1. (Symbolic) Continuously scan application manifests (Android) and Info.plist files (iOS) for all installed applications on managed devices. Compare the application's package name or signature hash against a threat intelligence database of known malicious applications. Alert on any match. 2. (Statistical) Calculate the Shannon entropy of the permission set requested by each application. A high entropy score, when combined with high-risk permissions like `ACCESS_BACKGROUND_LOCATION`, may indicate a multi-purpose malicious app. Flag apps with permission entropy scores in the top 5th percentile for their functional category (e.g., 'Productivity', 'Utility') for manual review. 3. (Machine Learning) Train a machine learning classification model (e.g., Random Forest) using features from application manifests (e.g., one-hot encoded permissions, number of services, broadcast receivers) and app store metadata. The model, trained on a labeled dataset of known benign and malicious apps, should classify new or updated applications as 'suspicious' or 'benign' based on their characteristics, especially the request for location permissions."
          },
          {
            "description": "A managed mobile device exhibits a statistically significant increase in the frequency of location reporting events or communicates location data to a destination IP address that is rare for the user, device, or organization.",
            "data_sources": [
              "Mobile Threat Defense (MTD) location logs",
              "MDM location history logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, network gateways, VPN endpoints, DNS resolvers, cloud-hosted MTD/MDM platforms.",
            "action": "1. (Symbolic) Ingest threat intelligence feeds of known malicious IP addresses and domains. Correlate destination IPs (`id.resp_h` in Zeek conn.log) and DNS queries (`query` in Zeek dns.log) from mobile device IP ranges against these feeds. Alert on any match. 2. (Statistical) For each device, establish a 30-day baseline of location reporting frequency from MDM/MTD logs. Alert if the frequency exceeds the 99th percentile of its historical behavior. Separately, maintain a set of historically seen destination IP addresses for each user's devices over 60 days. Flag any new connection to an IP address not in this historical set for review. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., ARIMA or LSTM) on the location reporting frequency for each device to learn its normal rhythm. The model will flag deviations that simple statistical thresholds might miss. Additionally, use a clustering algorithm (e.g., DBSCAN) on the geo-coordinates of location reports to identify anomalous location clusters inconsistent with the user's typical areas of operation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary actively collecting and exfiltrating location data from our mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1430",
        "name": "Location Tracking",
        "evidence": [
          {
            "description": "A mobile application with location permissions is observed initiating a network connection to a destination IP or domain known to be associated with command and control (C2) infrastructure.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Threat Intelligence feeds",
              "MDM/MTD logs identifying active applications"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, firewalls, proxies, VPN concentrators, corporate-managed mobile devices, DNS resolvers, threat intelligence platforms.",
            "action": "1. (Symbolic) Join network connection data (Zeek conn.log) with application activity data (MDM/MTD logs) on timestamp and device IP. Correlate the destination IP/domain (`id.resp_h` in conn.log, `query` in dns.log, `server_name` in ssl.log) against threat intelligence feeds for C2 infrastructure. Generate a high-severity alert if a connection to a known-bad destination is initiated by an application that holds background location permissions. 2. (Statistical) Analyze `ssl.log` for connections from mobile devices. Calculate the enterprise-wide prevalence of each JA3 hash. A JA3 hash that is extremely rare (<0.01% of all connections) and is associated with an application possessing location permissions is highly suspicious. Also, monitor the entropy of DNS queries (`query` in dns.log) from a single application; high entropy can be indicative of Domain Generation Algorithms (DGAs). 3. (Machine Learning) Use a supervised machine learning model (e.g., Logistic Regression) to score the maliciousness of a network connection. Features should include: threat intel matches, destination ASN reputation, JA3 rarity, DNS query length and entropy, and whether the source application has sensitive permissions. A high score from the model triggers an alert for investigation."
          },
          {
            "description": "A mobile device's data upload volume exceeds its historical baseline by a statistically significant margin, and the time of the data transfer correlates with the execution of an application that has location permissions.",
            "data_sources": [
              "Zeek conn.log",
              "MDM/MTD application activity logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VPN concentrators, corporate-managed mobile devices, MDM/MTD cloud consoles.",
            "action": "1. (Symbolic) Create a rule that triggers when a single connection from a mobile device IP transfers an amount of data (e.g., >100MB) to a non-corporate, non-whitelisted cloud storage provider domain. Correlate this network event with MDM logs to identify if an application with location permissions was active at the time of the transfer. 2. (Statistical) For each device, compute a 30-day rolling baseline (mean and standard deviation) of total daily upload bytes (sum of `orig_bytes` in Zeek conn.log). Generate an alert when the daily upload volume exceeds 3 standard deviations from the mean. Enrich the alert with the top talking applications from MDM/MTD logs during the anomalous period, highlighting any with location permissions. 3. (Machine Learning) Implement a time-series forecasting model (e.g., an LSTM-based autoencoder) for each device's data upload patterns, accounting for time-of-day and day-of-week seasonality. Generate an alert when the actual data volume significantly exceeds the model's predicted confidence interval, as this indicates a break from established user behavior."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]