[
  {
    "information_requirement": "Is an adversary using packed or obfuscated applications to evade detection on our mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406.002",
        "name": "Software Packing",
        "evidence": [
          {
            "description": "An Android Application Package (APK) file transferred over the network or created on an endpoint has a calculated Shannon entropy score that significantly exceeds the established baseline for legitimate, corporate-approved applications, indicating probable compression or encryption.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic sensors at internet gateways and VPN termination points, Developer and IT administrator workstations, Mobile Device Management (MDM) / Enterprise Mobility Management (EMM) log repositories.",
            "action": "1. (Symbolic) From Zeek http.log, correlate APK downloads with the requesting URL. Alert if the source domain is present on a threat intelligence feed of malicious domains. 2. (Statistical) Continuously monitor Zeek files.log for file transfers with MIME type 'application/vnd.android.package-archive'. For each APK, calculate its byte-level Shannon entropy. Establish and maintain a baseline entropy distribution for approved applications from the MDM inventory. Flag any new APK with an entropy score exceeding the 95th percentile of this baseline. 3. (Machine Learning) Develop a classification model (e.g., Logistic Regression) trained on features extracted from APKs, including entropy, file size, and network context from Zeek logs (source ASN, domain age). The model will classify newly observed APKs as 'benign' or 'potentially packed/malicious', triggering an alert on a high-confidence 'malicious' classification."
          },
          {
            "description": "An APK file contains strings, section names (e.g., '.UPX0', '.dex'), or byte sequences characteristic of known commercial or open-source software packers (e.g., UPX, FTT, DexProtector).",
            "data_sources": [
              "Zeek files.log",
              "Windows Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File system on developer workstations, Network file transfers at egress/ingress points, Application inventory on MDM-managed devices.",
            "action": "1. (Symbolic) Using Zeek's file extraction capabilities, carve APK files from network traffic (files.log). Scan the extracted files against a YARA ruleset containing signatures for known mobile application packers. A match on a packer-specific rule generates a high-severity alert. 2. (Statistical) From extracted APKs, parse the names of all executable sections. Calculate the frequency of non-standard section names (i.e., those not conforming to typical '.text', '.data' conventions). An APK with a count of non-standard section names in the top 5th percentile relative to a baseline of known-good apps should be flagged. 3. (Machine Learning) Implement a time-series analysis on the detection of packed applications. Monitor the rate of new packer signature hits over time. An anomalous spike in the detection rate, deviating significantly from the historical moving average, could indicate a new campaign and should trigger a threat hunting activity."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]