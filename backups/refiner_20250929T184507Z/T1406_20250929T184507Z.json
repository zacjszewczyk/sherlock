[
  {
    "information_requirement": "Is an adversary using obfuscated files to evade defenses on mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1406",
        "name": "Obfuscated Files or Information",
        "evidence": [
          {
            "description": "A file downloaded to a mobile device exhibits high entropy or a mismatch between its file extension and its actual content type, suggesting it has been packed or encrypted to hide its true nature.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network segments used by mobile devices.",
            "action": "For all files logged in Zeek files.log originating from the mobile device IP space, calculate the file's byte entropy. Establish entropy baselines for common file types (e.g., PNG, DOCX, PDF) and flag files with an entropy score significantly above the norm for their type (e.g., an entropy score of $$ E > 7.5 $$ for a file with a .txt extension). Concurrently, compare the file extension against the `mime_type` field in `files.log`. A high-entropy file or one with a mismatched MIME type (e.g., `invoice.jpg` with `application/x-dosexec`) should be flagged for investigation. Correlate with `conn.log` to identify the source and destination of the transfer."
          },
          {
            "description": "A series of small, seemingly benign files are downloaded to a mobile device in a short time frame from a single source, potentially representing a split payload.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points and corporate Wi-Fi segments.",
            "action": "Group file downloads from `Zeek files.log` by destination IP address within a 5-minute rolling window. Create a rule to detect when a single mobile IP address downloads more than a threshold number of files (e.g., >3) from the same source IP address. Apply a scoring system: add points for each file that is small (<1MB), has high entropy, uses a generic name (e.g., `data1.bin`, `archive.zip`), or originates from a low-reputation source. A cumulative score exceeding a defined threshold for a device within the time window indicates a likely split payload download."
          },
          {
            "description": "A process on a Windows host, used for mobile application development or staging, creates a file that is then immediately processed by a known encoding or packing utility before potential transfer to a mobile device.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, CI/CD build servers, and other hosts involved in mobile application deployment.",
            "action": "On designated NAIs, monitor for process creation events (Windows Event ID 4688). Search for command-line arguments containing strings associated with obfuscation, such as `base64`, `certutil -encode`, or the names of custom packing tools. Establish a baseline of normal process command-line arguments for build-related activities. Use statistical methods, such as flagging command lines with character entropy or length exceeding two standard deviations from the norm, to identify anomalous process behavior. Correlate the timestamp of a suspicious process chain with `Zeek conn.log` data from the same host to check for subsequent file transfers to mobile device IP ranges or known file-sharing services."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]