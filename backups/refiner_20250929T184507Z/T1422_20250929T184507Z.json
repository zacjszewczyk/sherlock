[
  {
    "information_requirement": "Is an adversary discovering our mobile device network configuration? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1422",
        "name": "System Network Configuration Discovery",
        "evidence": [
          {
            "description": "A non-system, non-carrier, or non-default SMS application on an Android device is logged by an MDM/MTD platform as requesting or being granted the 'READ_PRIVILEGED_PHONE_STATE' permission, which allows access to identifiers like IMEI and IMSI without a valid operational need.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Application Scan Logs",
              "Mobile Device Management (MDM) Policy Compliance Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android mobile device fleet; MDM/MTD management servers",
            "action": "1. (Symbolic) Implement a SIEM rule that generates a high-severity alert whenever an MDM/MTD log indicates the 'READ_PRIVILEGED_PHONE_STATE' permission is requested by or granted to an application. Maintain a whitelist of approved system, carrier, and default SMS applications; the rule should only trigger for applications not on this list. 2. (Statistical) For each alert, automatically query Zeek conn.log for all outbound connections from the device's IP address in the 15 minutes following the permission event. Calculate the historical rarity of each destination IP across the entire mobile device subnet over the last 30 days. Flag connections to IPs seen by fewer than 2% of other mobile devices. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on application metadata (permissions, app category, developer reputation) and post-install network behavior. Use this model to score newly installed apps that request sensitive permissions, flagging those classified as 'high-risk discovery tool'."
          },
          {
            "description": "An application on an instrumented Android device generates a volume of calls to the 'java.net.NetworkInterface' API that exceeds a statistically established baseline for that specific application or its category, suggesting programmatic network enumeration.",
            "data_sources": [
              "Mobile EDR/MTD API Call Monitoring Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices of high-value targets (e.g., executives, system administrators); Mobile EDR/MTD backend servers",
            "action": "1. (Symbolic) Create a detection rule that alerts on any API call to 'java.net.NetworkInterface' from an application whose package name or signing certificate matches a known threat intelligence indicator for mobile malware. 2. (Statistical) For each application on instrumented devices, ingest API call counts into a time-series database. Establish a 30-day baseline of 'java.net.NetworkInterface' call frequency in 5-minute intervals. Generate an alert if the call count in any interval exceeds the 99th percentile of that application's specific baseline. 3. (Machine Learning) Apply a time-series anomaly detection algorithm (e.g., ARIMA or LSTM-based autoencoder) to the API call frequency data for each high-value application. This model can learn complex temporal patterns (e.g., lower activity at night) and flag anomalous bursts of activity that a simple statistical threshold might miss."
          },
          {
            "description": "A mobile device initiates a network connection to a destination domain or IP address that is statistically rare across the enterprise and occurs within a short time window (e.g., 5 minutes) following a new application installation or update event logged by an MDM platform.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM/MTD Application Install Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Organization's network egress points (e.g., internet gateway, VPN concentrators); DNS resolvers",
            "action": "1. (Symbolic) Ingest a threat intelligence feed of known malicious C2 domains and IPs. Create a SIEM correlation rule that cross-references all destination lookups in Zeek dns.log and connections in Zeek conn.log from the mobile IP space against this feed, generating a critical alert on any match. 2. (Statistical) For each DNS query in Zeek dns.log from the mobile subnet, calculate the entropy of the queried domain name. Flag domains with an entropy score above a threshold (e.g., 3.5) that are not on an organizational whitelist. Correlate with Zeek conn.log to confirm a connection was established and check the rarity of the destination IP across the enterprise. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on features extracted from Zeek conn.log for all mobile device connections (e.g., destination port, protocol, bytes sent). This will group normal traffic patterns together. Outliers or very small clusters represent anomalous network behavior that could correspond to C2 or exfiltration and should be prioritized for investigation."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]