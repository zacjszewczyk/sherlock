[
  {
    "information_requirement": "Is an adversary attempting to evade defenses by locking users out of their mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.002",
        "name": "Device Lockout",
        "evidence": [
          {
            "description": "A mobile application receives device administrator privileges (e.g., Android 'add-device-admin' event) and meets one or more of the following criteria: the application's package name is not on an organizational allowlist, it was installed within the last 24 hours, or it has a low prevalence (<5 installs) across the managed device fleet.",
            "data_sources": [
              "Mobile Device Management (MDM) Logs",
              "Android Logcat",
              "Mobile EDR/MDR Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices; Mobile Device Management (MDM) servers; Application Vetting/Sandboxing Environments",
            "action": "First, query MDM logs for 'add-device-admin' events where the application's package name or signing certificate hash matches a known-bad indicator list from threat intelligence feeds. Second, for each 'add-device-admin' event, calculate a risk score; increment the score for factors such as the application installation source being 'sideloaded' or 'unknown', the application not being on the corporate allowlist, or its prevalence across the device fleet falling below the 5th percentile. Trigger an alert if the cumulative score exceeds a predefined threshold. Finally, train a logistic regression classifier using features like app installation source, requested permissions, app age on device, and developer reputation to predict the probability of an admin-grant event being malicious and flag high-probability events for review."
          },
          {
            "description": "A mobile application with device administrator or overlay permissions (`SYSTEM_ALERT_WINDOW`) generates network traffic (DNS requests or TCP/UDP connections) to a destination that is either on a threat intelligence blocklist, has a high-entropy domain name, or is statistically anomalous for that device or application.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR/MDR Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Our organization's internet gateway; Corporate DNS resolvers; Network proxies",
            "action": "First, continuously compare all DNS queries (Zeek dns.log) and destination IPs (Zeek conn.log) from the mobile device subnet against a threat intelligence feed of known mobile malware C2 servers, generating an alert on any match. Second, for each DNS query in dns.log, calculate the Shannon entropy of the queried domain name; establish a baseline for normal entropy scores and alert on queries with a score exceeding the 98th percentile, especially if the top-level domain is also rare. Finally, develop a time-series anomaly detection model (e.g., ARIMA) for each device's outbound data volume (bytes_out in Zeek conn.log) to flag sudden, unexplained spikes in data transfer that could indicate C2 communication."
          },
          {
            "description": "A mobile application possesses the `SYSTEM_ALERT_WINDOW` permission and is identified as the foreground process for an anomalously long duration without user interaction, or it is granted this permission outside of a standard application store installation process.",
            "data_sources": [
              "Mobile Application Vetting Scans",
              "Mobile EDR/MDR Process Logs",
              "Android Logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environments; Corporate-managed mobile devices; Enterprise app stores / repositories",
            "action": "First, during pre-deployment vetting, scan all APKs to flag any application that requests the `SYSTEM_ALERT_WINDOW` permission and is not on a pre-approved organizational allowlist. Second, using Mobile EDR logs, monitor the foreground duration for each application with overlay permissions; calculate the mean and standard deviation of this duration and alert when an application's foreground time exceeds 3 standard deviations above its typical mean. Finally, use an unsupervised learning model like Isolation Forest on Mobile EDR data, with features including `SYSTEM_ALERT_WINDOW` permission status, CPU usage, and foreground duration, to identify outlier application behaviors indicative of a malicious overlay."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]