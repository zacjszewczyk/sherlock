[
  {
    "information_requirement": "Is an adversary attempting to subvert trust controls on our mobile devices to execute untrusted code or intercept communications? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1632",
        "name": "Subvert Trust Controls",
        "evidence": [
          {
            "description": "A CA certificate is installed on a managed mobile device whose SHA-256 hash does not match the organization's allowlist of approved CA certificate hashes, or whose issuer is statistically rare across the enterprise network.",
            "data_sources": [
              "MDM logs detailing installed certificates and their hashes",
              "Zeek x509.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile Device Management (MDM) server, Network egress points/Internet Gateway",
            "action": "1. (Symbolic) In your SIEM, continuously ingest MDM logs. Create a rule that joins the `installed_certificate_hash` from MDM logs with a watchlist of `approved_ca_hashes`. Generate a high-severity alert for any device where the installed hash is not on the allowlist. 2. (Statistical) In Zeek logs, create a 30-day rolling baseline of all certificate issuers observed in `x509.log`. Calculate the daily frequency of each issuer. Generate a medium-severity alert when a certificate is observed from an issuer whose frequency is below the 1st percentile, indicating extreme rarity. Correlate with mobile device IP ranges to increase priority. 3. (Machine Learning) Train a classification model (e.g., Random Forest) using features from `x509.log` and `ssl.log` (e.g., `certificate.validity_length`, `certificate.key_alg`, `san.dns` count, issuer rarity score). The model classifies each TLS session as 'benign' or 'suspicious'. An alert is triggered when a session involving a mobile device is classified as 'suspicious' and the anomalous CA is installed on the device per MDM logs."
          },
          {
            "description": "A managed Android device reports a configuration state where the 'Install unknown apps' permission is set to 'true' for any application, and this state change was not part of an authorized administrative action or policy push.",
            "data_sources": [
              "MDM logs reporting device configuration state",
              "Mobile endpoint security agent logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed Android devices, Mobile Device Management (MDM) server",
            "action": "1. (Symbolic) Define a strict MDM compliance policy where the 'Install unknown apps' setting must be 'false' for all non-administrative profiles. Trigger a high-severity alert for any device reporting a non-compliant status. 2. (Statistical) Track the daily count of devices with this permission enabled. Use a 90-day baseline to establish a mean and standard deviation. Alert if the daily count exceeds 3 standard deviations above the mean, which may indicate a widespread attack or misconfiguration. 3. (Machine Learning) Develop an Isolation Forest model using MDM configuration data points (e.g., 'Install unknown apps' status, developer mode enabled, OS patch level, number of installed apps). The model identifies devices with anomalous configuration postures. An alert is generated when a device is flagged as an outlier and the 'Install unknown apps' setting is a primary contributing feature to its anomaly score."
          },
          {
            "description": "An iOS device has an installed configuration profile whose identifier is not on the MDM-managed allowlist, the profile is unsigned, or it was downloaded from a non-corporate, high-entropy, or newly observed domain.",
            "data_sources": [
              "MDM logs detailing installed configuration profiles",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed iOS devices, Mobile Device Management (MDM) server, Network egress points/Internet Gateway",
            "action": "1. (Symbolic) Monitor `Zeek files.log` for downloads where `mime_type` is 'application/x-apple-aspen-config' (a .mobileconfig file). If the source hostname in the corresponding `http.log` entry is not on an approved domain allowlist, generate a high-priority alert. Correlate with MDM logs to see if the profile was installed on the destination device. 2. (Statistical) For each new `.mobileconfig` file downloaded, calculate the character entropy of the source hostname. Alert if the entropy score is above a threshold (e.g., 3.5), indicating a likely DGA or randomized domain. Additionally, use a SIEM query to check if the domain has been observed in the last 30 days; flag newly seen domains. 3. (Machine Learning) Use a time series forecasting model (e.g., ARIMA) to predict the expected hourly volume of `.mobileconfig` file downloads across the network. Generate an anomaly alert if the actual download count significantly exceeds the predicted volume with its confidence interval. This helps detect large-scale campaigns that might otherwise be missed by single-device rules."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]