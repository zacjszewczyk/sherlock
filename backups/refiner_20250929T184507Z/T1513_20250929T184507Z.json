[
  {
    "information_requirement": "Is an adversary capturing sensitive information from user screens on corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1513",
        "name": "Screen Capture",
        "evidence": [
          {
            "description": "A non-allowlisted application is granted screen recording permissions, such as via the Android MediaProjectionManager API [1], and subsequently initiates network connections to destinations with low reputation scores or exhibits data transfer patterns indicative of exfiltration.",
            "data_sources": [
              "MDM/EMM application inventory logs",
              "MDM/EMM permission grant logs",
              "Zeek conn.log",
              "Zeek files.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, network egress points, corporate DNS resolvers, threat intelligence platforms",
            "action": "1. (Symbolic) Create and maintain an allowlist of applications approved for screen recording (e.g., remote support tools). In a SIEM, create a rule that joins MDM/EMM permission grant logs with application inventory logs. Alert when an application not on the allowlist is granted screen recording permissions and also has internet access permissions. 2. (Statistical) For any application with screen recording permissions, establish a network behavior baseline using Zeek conn.log. Monitor the volume of outbound data (orig_bytes). Flag any device where data sent by a recording-capable app exceeds the 98th percentile of its own 30-day historical baseline. Additionally, using Zeek dns.log, calculate the Shannon entropy of requested subdomains for a given parent domain; a sudden spike in entropy ($$ H(X) = -\\sum_{i=1}^{n} P(x_i) \\log_2 P(x_i) $$) can indicate DGA activity [2]. 3. (Machine Learning) Develop a multi-feature anomaly detection model (e.g., Isolation Forest) trained on legitimate application network behavior from Zeek logs. Features should include connection duration, bytes sent/received, periodicity, destination port, and destination IP reputation. An application classified as an outlier, especially after receiving screen recording permissions, should be flagged for investigation."
          },
          {
            "description": "An application not on a pre-approved allowlist for accessibility services is observed with these privileges enabled, and its network activity deviates significantly from established baselines for the device [3].",
            "data_sources": [
              "MDM/EMM application inventory logs",
              "MDM/EMM security policy compliance logs",
              "Android logcat",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, device settings configurations, MDM/EMM management console/server",
            "action": "1. (Symbolic) Define an explicit allowlist of applications requiring accessibility services (e.g., known password managers, screen readers). Use the MDM/EMM platform to run a periodic compliance check. Generate a high-severity alert for any device where an application not on this allowlist has accessibility services enabled. 2. (Statistical) For any device with a non-allowlisted accessibility app, analyze its network traffic from Zeek conn.log. Compare the total outbound data volume over 24 hours to the device's 30-day rolling average. An increase greater than three standard deviations from the mean should trigger an alert. 3. (Machine Learning) Implement a time-series forecasting model (e.g., ARIMA) for each device's total daily outbound data volume. An actual data volume that significantly exceeds the model's predicted value (with a 95% confidence interval) constitutes a temporal anomaly. Correlate this network anomaly with an MDM alert for a newly enabled accessibility service on the same device to increase detection confidence."
          },
          {
            "description": "The execution of 'screencap' or 'screenrecord' command-line utilities is detected on a device, or network traffic consistent with a remote Android Debug Bridge (adb) session on TCP port 5555 is observed [4][5].",
            "data_sources": [
              "MDM/EMM developer mode/USB debugging logs",
              "Zeek conn.log",
              "Mobile EDR logs",
              "Android logcat"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, network segments allowing adb traffic (TCP port 5555), developer workstations, network infrastructure (firewalls, IDS/IPS)",
            "action": "1. (Symbolic) Deploy an IDS/firewall rule to block and alert on all traffic on TCP port 5555 (adb) at the network perimeter. On Mobile EDR or via advanced logging, create a detection rule that specifically searches for process execution of 'screencap' or 'screenrecord'. 2. (Statistical) Analyze Zeek conn.log for any allowed connections on TCP port 5555. Profile the session duration and data volume. Flag sessions whose data volume is in the top 5% of all observed TCP sessions for that device, or whose duration is abnormally long compared to a baseline of developer sessions. 3. (Machine Learning) Use a supervised classification model (e.g., Gradient Boosting) to distinguish between benign (developer) and malicious adb sessions. Train the model on features from Zeek conn.log such as duration, orig_bytes, resp_bytes, and connection history. A session classified as 'malicious', especially from an untrusted source IP, indicates potential unauthorized remote access."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]