[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile analysis or sandbox environments by performing system checks? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1633.001",
        "name": "System Checks",
        "evidence": [
          {
            "description": "A mobile application makes API calls to query specific system properties (e.g., 'ro.hardware', 'ro.product.model', 'ro.build.fingerprint') or attempts to read files (e.g., '/system/bin/qemu-props') that are indicative of an emulator or sandbox environment. This activity is not followed by legitimate use of the retrieved information.",
            "data_sources": [
              "Mobile EDR API call logs",
              "Mobile EDR file access logs",
              "Mobile Application Vetting (MAV) sandbox logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application sandboxing environment, Corporate-managed mobile devices (Android & iOS), Mobile Device Management (MDM) platform",
            "action": "1. (Symbolic) Create and maintain a watchlist of high-confidence emulator-related system properties (e.g., 'goldfish', 'ranchu', 'qemu', 'vbox') and file paths. Trigger an alert if an application queries any property or path on this list. 2. (Statistical) For each application, calculate the total count of unique system properties queried within the first 60 seconds of execution. Establish a baseline distribution for property query counts across your organization's approved application store. Flag any application whose query count exceeds the 95th percentile of this baseline. 3. (Machine Learning) Train a decision tree classifier on labeled data from MAV sandbox runs (malicious vs. benign). Use features such as the specific properties queried (one-hot encoded), the count of properties, and the presence of file access attempts to known emulator paths. Use this model to classify new applications and assign a probability score for sandbox evasion."
          },
          {
            "description": "A mobile application queries the availability of multiple hardware sensors (e.g., accelerometer, gyroscope, thermometer, light sensor) via API calls (e.g., Android's SensorManager.getSensorList()) upon startup, but subsequently fails to register a listener or receive data from these sensors within a 5-minute window.",
            "data_sources": [
              "Mobile EDR API call logs",
              "MAV sandbox dynamic analysis logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Bring-Your-Own-Device (BYOD) fleet with security agents, Application sandboxing environment",
            "action": "1. (Symbolic) Implement a rule that triggers when an application calls a function to list available sensors (e.g., 'getSensorList') and is not followed by a call to register a sensor listener (e.g., 'registerListener') from the same process within 30 seconds. 2. (Statistical) Profile legitimate applications to establish a baseline ratio of 'sensor list' calls to 'sensor register' calls. Calculate this ratio for each new application. An unusually high ratio (e.g., > 5:1, or exceeding 3 standard deviations from the mean of benign apps) indicates potential evasion. 3. (Machine Learning) Use a clustering algorithm like DBSCAN on features representing sensor interaction patterns (e.g., count of sensor list queries, count of sensor registrations, time between query and registration). Identify and investigate clusters of applications that exhibit the 'query-but-don't-use' behavior."
          },
          {
            "description": "A mobile application queries for network interface details (e.g., MAC address, DHCP server IP) and, based on the results, exhibits a measurable change in network behavior. Network logs show a device's traffic pattern changing drastically after a short period of initial activity, such as a sudden drop in the variety of destination IPs or a shift to exclusively using DNS over HTTPS (DoH).",
            "data_sources": [
              "Mobile EDR API call logs",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points for mobile devices (e.g., corporate Wi-Fi, VPN gateway), DNS resolvers, Corporate-managed mobile devices",
            "action": "1. (Symbolic) Create a rule correlating a mobile EDR alert for a network interface query with subsequent network traffic from the same device IP in Zeek logs. Alert if, within 5 minutes of the query, the device's traffic is limited exclusively to a pre-defined allowlist of high-reputation domains (e.g., google.com, apple.com). 2. (Statistical) For each mobile device, calculate the Shannon entropy of destination IP addresses in 'conn.log' and requested domains in 'dns.log' over 5-minute windows. Generate an alert if the entropy score drops by more than 75% from one window to the next. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., ARIMA or an LSTM autoencoder) on network traffic metrics from Zeek logs (e.g., bytes sent, connection count, destination port diversity). Flag significant deviations from the predicted normal 'rhythm' of a device, especially a sudden 'flat-lining' of activity after an initial burst."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]