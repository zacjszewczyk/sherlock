[
  {
    "information_requirement": "Is an adversary using execution guardrails to evade detection and ensure payload execution only on targeted mobile devices? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1627",
        "name": "Execution Guardrails",
        "evidence": [
          {
            "description": "A mobile application's manifest file contains a statistically anomalous combination of permissions related to environmental sensing (e.g., ACCESS_FINE_LOCATION, READ_PHONE_STATE, ACCESS_NETWORK_STATE) when compared to a baseline of legitimate applications in the same category. Static analysis reveals that API calls corresponding to these permissions (e.g., LocationManager.getLastKnownLocation(), TelephonyManager.getSimCountryIso()) are invoked within the first few seconds of execution, prior to the application's primary functions.",
            "data_sources": [
              "Mobile Application Manifest Files (AndroidManifest.xml)",
              "Mobile Threat Defense (MTD) logs",
              "Static analysis reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, mobile device management (MDM) platforms, and application vetting/sandbox environments.",
            "action": "1. (Symbolic Logic) For all new and updated applications, scan AndroidManifest.xml files for known high-risk permission combinations that are signatures of specific malware families (e.g., READ_SMS, SEND_SMS, and ACCESS_FINE_LOCATION used in conjunction). Alert on any match from a curated IOC list. 2. (Statistical Analysis) For each application, extract its list of requested permissions. Calculate the Shannon entropy of this list based on the global frequency of each permission across all managed devices. Compare this entropy score to the historical distribution for the application's declared category (e.g., 'Productivity', 'Games'). Flag applications with an entropy score exceeding the 95th percentile for their category, as this indicates an unusual and potentially suspicious combination of permissions. 3. (Machine Learning) Utilize a pre-trained classification model (e.g., Random Forest) that uses features derived from the manifest file (e.g., one-hot encoded permissions, number of permissions, presence of specific API intents). For each new application, use the model to generate a probability score indicating the likelihood that it is malicious. An application with a score exceeding a calibrated threshold (e.g., 0.85) should be automatically quarantined for dynamic analysis."
          },
          {
            "description": "During dynamic analysis, an application exhibits baseline network behavior (e.g., less than 1KB data egress to known CDNs). When an environmental trigger is simulated (e.g., GPS coordinates are changed to a specific location, device is connected to a simulated public Wi-Fi), a state change is observed, characterized by a spike in network traffic to a new, low-reputation IP address, or the initiation of sensitive API calls (e.g., contact list access) not seen in the baseline state.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Dynamic analysis sandbox logs (system calls, network traffic, API hooks)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic egress points for corporate mobile devices, guest Wi-Fi network segments, and dedicated mobile security analysis sandboxes.",
            "action": "1. (Symbolic Logic) In a dynamic analysis sandbox, systematically modify environmental variables (e.g., GPS location, network SSID, SIM country code). Correlate sandbox system call logs with network connection logs (Zeek conn.log). If a connection is made to an IP address or domain present on a threat intelligence blocklist immediately following an environmental change, trigger a high-severity alert. 2. (Statistical Analysis) For each sandbox run, establish a 5-minute baseline of network activity, calculating the mean and standard deviation for key metrics like outbound data volume (Zeek conn.log:orig_bytes) and the number of unique DNS lookups (Zeek dns.log). During subsequent runs where environmental parameters are altered, flag any 10-second interval where these metrics exceed 3 standard deviations from the baseline, indicating a sudden change in behavior. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., LSTM autoencoder) trained on aggregated network flow data from thousands of known benign mobile applications. Feed the network flow from the application under test (e.g., bytes per second, new connections per second) into the model. A reconstruction error that sharply increases above a dynamically calculated threshold immediately following a simulated environmental trigger indicates a behavioral deviation consistent with a guardrail being bypassed."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]