[
  {
    "information_requirement": "Is the adversary attempting to discover security software on our managed mobile devices? (PIR)",
    "tactic_id": "TA0032",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1418.001",
        "name": "Security Software Discovery",
        "evidence": [
          {
            "description": "A mobile application initiates DNS queries for domains not associated with its known function and exhibiting low prevalence (queried by less than 1% of devices) within 5 minutes of its first-seen launch, followed by a data transfer to the resolved IP address.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "MDM Application Inventory Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, VPN Concentrators, DNS Resolvers, MDM/EMM Servers",
            "action": "Correlate MDM logs showing a new application installation with network logs. For DNS requests from the device (Zeek dns.log), perform three checks: 1. (Symbolic) Match queried domains against threat intelligence feeds for known C2 infrastructure or newly registered domains (NRDs). 2. (Statistical) For domains not on an allow-list, calculate their query prevalence across all mobile devices. Flag any domain queried by fewer than 5 devices or falling below the 1st percentile of query frequency. Additionally, calculate the Shannon entropy of the subdomains; a high score can indicate data encoding. 3. (ML) Use a time-series anomaly detection model on the volume of outbound data (Zeek conn.log) per device; alert if an anomalous spike in data transfer occurs within minutes of a rare DNS query to a suspicious domain."
          },
          {
            "description": "A mobile application sends an HTTP/S POST or GET request where the URI path, query parameters, or POST body size are anomalous compared to its established baseline, and the destination is a low-reputation or uncategorized domain.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Web Application Firewalls, Forward Proxies, VPN Concentrators",
            "action": "For traffic from mobile subnets, establish application-specific baselines for HTTP/S activity. Implement the following detections: 1. (Symbolic) In Zeek http.log and ssl.log, match destination domains and server name indications (SNIs) against threat intelligence lists of known malicious sites. 2. (Statistical) For each application, calculate a baseline for POST request size and URI entropy. Alert if a request's size exceeds the 99th percentile or if its URI entropy is more than 3 standard deviations above the mean, suggesting encoded data. Also, alert on rare SNIs not previously seen from the application. 3. (ML) Train an unsupervised learning model (e.g., Isolation Forest) on session features (URI length, request size, SNI prevalence, data volume) to identify anomalous connections that deviate from normal application behavior, indicative of potential exfiltration."
          },
          {
            "description": "A mobile application installed on a managed device requests permissions indicative of device scanning (e.g., Android's 'android.permission.QUERY_ALL_PACKAGES') or utilizes private APIs for enumerating applications (e.g., iOS's 'LSApplicationWorkspace'), which are not justified by the application's stated purpose.",
            "data_sources": [
              "MDM/EMM Application Manifest Scans",
              "Mobile App Vetting Service Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) / Enterprise Mobility Management (EMM) Platform, Third-party Application Vetting System",
            "action": "Leverage MDM/EMM and app vetting platforms to analyze application manifests and behavior. 1. (Symbolic) Maintain an explicit allow-list of applications authorized to use sensitive permissions like QUERY_ALL_PACKAGES. Alert on any new or existing application outside this list that requests or uses this permission. 2. (Statistical) Calculate the prevalence of the QUERY_ALL_PACKAGES permission across the entire mobile application inventory. Flag any application where this permission is statistically rare (e.g., present in <5% of apps) and the app's category (e.g., 'Game', 'Social') does not justify its use. 3. (ML) Develop a classification model (e.g., Logistic Regression) to predict application maliciousness, using features like the presence of dangerous permissions, the number of permissions requested, and app store reputation. Assign a high weight to the QUERY_ALL_PACKAGES permission and alert when an app's risk score exceeds a predefined threshold."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]