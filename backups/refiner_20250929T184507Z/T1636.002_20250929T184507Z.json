[
  {
    "information_requirement": "Is an adversary collecting call log data from our managed mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.002",
        "name": "Call Log",
        "evidence": [
          {
            "description": "An application on a managed Android device requests the 'android.permission.READ_CALL_LOG' permission and is not on an approved application allowlist maintained by the security and mobility teams.",
            "data_sources": [
              "MDM/UEM Application Manifest Scan Results",
              "Mobile Application Management (MAM) Policy Reports",
              "Application Vetting Sandbox Analysis Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Unified Endpoint Management (UEM) console, Cloud-based application sandbox, Corporate application store",
            "action": "1. (Symbolic) During application vetting, parse the AndroidManifest.xml for 'android.permission.READ_CALL_LOG'. Compare the application's package name and signature against an allowlist of apps with a documented business need for this permission and a blocklist of known malicious applications. Immediately reject any match from the blocklist. 2. (Statistical) For any application not on the allowlist, calculate a permission rarity score. If 'READ_CALL_LOG' is present in fewer than 1% of all applications in your environment's portfolio (i.e., it is in the 99th percentile for rarity), flag it for mandatory security review. 3. (Machine Learning) Utilize a classification model (e.g., Random Forest) trained on application manifest features (permissions, intents, services), developer reputation, and app store metadata. If the model classifies an app requesting 'READ_CALL_LOG' as 'suspicious' or 'malicious' with a confidence score > 0.8, escalate for reverse engineering and dynamic analysis."
          },
          {
            "description": "A process on a managed Android device makes a runtime API call to the Android Call Log Content Provider URI ('content://call_log/calls') and the process name does not match a baseline of known legitimate applications.",
            "data_sources": [
              "Mobile Endpoint Detection and Response (EDR) API call logs",
              "OS-level process and API monitoring logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android endpoints, Unified Endpoint Management (UEM) console, SIEM platform",
            "action": "1. (Symbolic) Deploy a mobile EDR agent to monitor for runtime access to the 'content://call_log/calls' URI. Maintain an allowlist of legitimate process names (e.g., com.android.dialer, com.google.android.dialer) expected to access this provider. Generate a high-severity alert for any process not on the allowlist that attempts access. 2. (Statistical) For each application, establish a baseline of API call frequency to the call log provider. Generate an alert if an application's call frequency exceeds 3 standard deviations above its own historical hourly baseline or the baseline established for its peer group (e.g., other messaging apps). 3. (Machine Learning) Implement a sequence analysis model (e.g., Hidden Markov Model) to learn the normal sequence of API calls and system events for legitimate applications. Flag any anomalous sequence involving a call to the call log provider followed by suspicious actions like creating a network socket, writing to external storage, or using encryption APIs, as it indicates a high probability of malicious collection and exfiltration."
          },
          {
            "description": "A mobile device's data upload volume to a destination IP with a low reputation score increases by more than 3 standard deviations above its 30-day baseline within 24 hours of an application with 'READ_CALL_LOG' permission being installed.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM/UEM application installation logs",
              "Threat Intelligence IP/Domain Reputation Feeds"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi network gateways, VPN concentrators, DNS resolvers",
            "action": "1. (Symbolic) In a SIEM, join MDM application installation logs with network flow data (Zeek conn.log). For any device installing an app with call log permissions, check all subsequent outbound destination IPs against a threat intelligence feed of known malicious C2 servers. An immediate, critical alert should be generated upon a match. 2. (Statistical) For each device, establish a 30-day rolling baseline of hourly data upload volume (orig_bytes) from Zeek conn.log. After an app with 'READ_CALL_LOG' is installed, trigger a high-severity alert if the upload volume exceeds the 98th percentile of the baseline. Concurrently, analyze DNS requests in Zeek dns.log from the device and alert if the entropy of queried second-level domains spikes, suggesting DGA activity. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., ARIMA) on per-device outbound traffic volume. An alert is triggered if actual traffic significantly deviates from the forecasted volume post-installation. Additionally, use a clustering algorithm (e.g., DBSCAN) on connection metadata (destination IP/port, protocol, duration, bytes sent) to identify outlier network flows that do not conform to the device's normal behavior profile."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]