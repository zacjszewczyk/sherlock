[
  {
    "information_requirement": "Is an adversary attempting to evade our mobile security controls by disabling or modifying security tools? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1629.003",
        "name": "Disable or Modify Tools",
        "evidence": [
          {
            "description": "An MDM log event indicates a delta in the set of active device administrators on a managed mobile device, where the new set either lacks an approved security application or contains an application not on the corporate allow-list.",
            "data_sources": [
              "MDM Device Compliance Log",
              "EMM Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate mobile devices, MDM/UEM management servers",
            "action": "1. (Symbolic) In the SIEM, create a rule that triggers a high-severity alert when an MDM device compliance log shows a device_admin_status change. The rule logic should compare the new list of administrators against a predefined allow-list for that device's profile. Alert if (expected_admins - current_admins) contains a security tool OR (current_admins - expected_admins) contains a non-allow-listed app. 2. (Statistical) Calculate the rate of device administrator changes per device over a 30-day rolling window. Flag any device whose change rate exceeds the 99th percentile for the entire fleet to detect devices undergoing repeated, suspicious modifications. 3. (Machine Learning) Train a classification model (e.g., Random Forest) on historical MDM logs, using features like the application being added/removed, time of day, and recent app installations. The model will classify each device admin change event as 'benign' or 'suspicious' to automate initial triage."
          },
          {
            "description": "The absence of a health status or heartbeat log from a managed MTD agent for a duration exceeding a statistically defined threshold, or a direct log from the MTD console indicating the agent status changed to 'disabled' or 'unresponsive'.",
            "data_sources": [
              "MTD Agent Health Status Log",
              "MTD Management Console Event Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate mobile devices, MTD management console",
            "action": "1. (Symbolic) Create a SIEM rule that generates a medium-severity alert whenever an MTD management log explicitly records an agent's status changing to 'disabled', 'stopped', or 'tampered'. Correlate this with MDM logs to see if the device is simultaneously marked as non-compliant. 2. (Statistical) For each device, calculate the average and standard deviation of its MTD agent heartbeat interval. Trigger an alert if a device misses a heartbeat for a period greater than mean + 3 * std_dev. Monitor the fleet-wide count of silent agents per hour; an hourly count exceeding the 95th percentile of the daily average indicates a potential widespread issue. 3. (Machine Learning) Use a time-series anomaly detection model (e.g., LSTM) on the aggregate MTD heartbeat data volume. An alert is generated when a sudden, statistically significant drop in telemetry volume is detected that the model cannot explain, which could signify a coordinated attack disabling MTD agents."
          },
          {
            "description": "A device compliance or security posture log from an Android device records the SELinux state as 'permissive' or 'disabled', whereas the established security baseline for all corporate devices is 'enforcing'.",
            "data_sources": [
              "MDM Device Compliance Log",
              "MTD Agent Security Posture Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate mobile devices, MDM/UEM management servers, MTD management console",
            "action": "1. (Symbolic) Implement a critical-severity SIEM alert that triggers immediately if any MTD Agent Security Posture Log or MDM Device Compliance Log contains the key-value pair `selinux_status: permissive` or `selinux_status: disabled`. This should be treated as an indicator of active compromise requiring immediate device isolation. 2. (Statistical) Establish a baseline for SELinux status changes, which should be zero. A non-zero count is a critical anomaly. Calculate the entropy of security setting changes (SELinux status, root status, encryption status) on a per-device basis. A device with high entropy indicates instability or tampering. 3. (Machine Learning) Develop an unsupervised anomaly detection model (e.g., Isolation Forest) using device posture telemetry as input features (SELinux status, root status, screen lock status). Any device that the model flags as a significant outlier should be automatically queued for a Tier 2 analyst investigation, as it represents a deviation from the learned norm of device security posture."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]