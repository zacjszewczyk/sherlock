[
  {
    "information_requirement": "Has an adversary successfully collected contact list data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636.003",
        "name": "Contact List",
        "evidence": [
          {
            "description": "A mobile application, not categorized as 'Contacts', 'Communications', or 'Social Networking', is granted 'android.permission.READ_CONTACTS' or has a non-null 'NSContactsUsageDescription' key, and this permission is statistically rare for its application category.",
            "data_sources": [
              "Mobile Device Management (MDM) application inventory logs",
              "Mobile Threat Defense (MTD) permission audit logs",
              "Application vetting service reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM/MTD log aggregation platform, Application Vetting Service Portal",
            "action": "First, perform a symbolic search by querying MDM logs for any application whose package name or hash matches a known-malicious application list and has been granted contact list permissions. Second, apply a statistical method by ingesting application inventory and permission data for all managed devices. For each App Store category (e.g., 'Games', 'Productivity'), calculate the prevalence of contact list permissions. Generate an alert for any application that has the permission but belongs to a category where fewer than 1% of applications request it. Third, use a machine learning classification model (e.g., logistic regression) trained on app metadata (developer, age, other permissions) to predict if a permission request is anomalous. Flag apps with a high anomaly probability score for manual review."
          },
          {
            "description": "An application's API calls to the contacts provider exceed the 95th percentile for that user-application baseline, or occur within five minutes preceding a network connection to an IP address on a threat intelligence blocklist or a newly observed domain.",
            "data_sources": [
              "MTD OS API call monitoring logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices, Mobile VPN concentrators, Network egress points for mobile device traffic, DNS resolvers serving mobile clients",
            "action": "First, for symbolic detection, create a rule that correlates a contact list access event from MTD logs with a subsequent Zeek conn.log entry from the same device IP within a 5-minute window, where the destination IP is on a threat intelligence blocklist. Second, for statistical detection, establish a per-user, per-app baseline of hourly contact access frequency. Generate an alert when the access count in a given hour exceeds the 95th percentile or 3 standard deviations from the mean. Also, monitor Zeek dns.log for a spike in queries from the device to new or rare domains immediately following contact access. Third, apply a machine learning time-series anomaly detection model (e.g., LSTM autoencoder) trained on sequences of API calls and network traffic volume. Flag event sequences (e.g., contact access -> DNS query -> large data upload) that the model identifies as improbable."
          },
          {
            "description": "An application is present on a device where the installation source is identified by the MDM as 'sideloaded' or 'unknown', the application's manifest includes permissions for contact list access, and the device is also flagged for a failed integrity check (e.g., jailbroken or rooted).",
            "data_sources": [
              "MDM application inventory logs",
              "MDM device integrity attestation logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate-managed mobile devices (iOS and Android), MDM administration console, Device compliance reporting dashboards",
            "action": "First, use a symbolic rule to generate a high-priority alert whenever an MDM log shows a new application installation where `app_source` is 'Unknown/Sideloaded', `permissions` includes contact access, and `device_integrity_status` is 'Failed'. Immediately check the app hash against threat intelligence feeds. Second, apply a statistical method by generating a daily report of all sideloaded applications. For each, create a risk score by summing the number of sensitive permissions requested. Investigate devices hosting applications in the top 5th percentile of this risk score. Third, employ a machine learning clustering algorithm (e.g., K-Means) to group devices based on their configuration profile (e.g., number of sideloaded apps, OS version, failed integrity checks). Analyst focus should be on outlier clusters representing a small number of devices with highly anomalous configurations."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]