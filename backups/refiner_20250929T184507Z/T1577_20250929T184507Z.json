[
  {
    "information_requirement": "Has an adversary established persistence by modifying a legitimate application executable on a mobile device? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1577",
        "name": "Compromise Application Executable",
        "evidence": [
          {
            "description": "The cryptographic hash of an installed application executable (e.g., APK) on a mobile device does not match the known-good hash from the official app store or the organization's approved application baseline. This suggests the application has been rebuilt with malicious code, a method noted by researchers [2].",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Mobile EDR Scan Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device fleet (iOS, Android)",
            "action": "Maintain a manifest of cryptographic hashes (SHA-256) for all versions of organization-approved mobile applications. Periodically, use MDM or Mobile EDR to collect the hashes of installed applications from all managed devices. Compare the collected hashes against the manifest. Flag any device with an application hash mismatch for immediate investigation and isolation."
          },
          {
            "description": "An Android Application Package (APK) file exhibits structural properties consistent with the Janus vulnerability, where malicious code is appended to the file without invalidating its signature [1]. The file contains data in both the APK and DEX headers, allowing an attacker to seamlessly inject code.",
            "data_sources": [
              "Mobile EDR File Scans",
              "Forensic device image"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Android device fleet",
            "action": "Utilize a Mobile EDR or specialized security scanner to perform deep file inspection on APKs installed on managed Android devices. Specifically, configure the scanner to detect the Janus vulnerability (CVE-2017-13156) by checking if an APK file's structure allows for code to be appended to both the start of the file and the end of the DEX section. An alert from this specific scan indicates a high-confidence compromise attempt."
          },
          {
            "description": "A legitimate, whitelisted application initiates network connections to unusual or known-malicious destinations, uses non-standard ports, or exfiltrates data in a manner inconsistent with its documented function. This can indicate a trojanized application is communicating with a command-and-control server.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "MDM Network Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways and VPN egress points",
            "action": "For each managed application, establish a baseline of normal network behavior, including typical destination domains/IPs, data transfer volumes, and protocols used. Monitor network logs (Zeek conn.log, dns.log) originating from mobile devices. Use statistical analysis to detect significant deviations from the baseline (e.g., > 3 standard deviations in data volume), connections to domains with low reputation scores, or DNS requests with high entropy scores suggesting DGA activity. Correlate alerts with the specific device and application to identify potential compromise."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]