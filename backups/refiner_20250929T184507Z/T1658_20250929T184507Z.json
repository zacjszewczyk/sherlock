[
  {
    "information_requirement": "Is an adversary executing arbitrary code on corporate mobile devices by exploiting client application vulnerabilities? (TA0041 - Execution)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1658",
        "name": "Exploitation for Client Execution",
        "evidence": [
          {
            "description": "A messaging or browser application on a mobile device spawns a non-standard child process (e.g., a shell) or initiates a network connection to an IP address or domain that is newly registered, categorized as malicious, or has a high entropy score in its FQDN.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile EDR/MDM process logs",
              "Mobile OS crash logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, Cloud-based mobile security gateways, Mobile Device Management (MDM) servers, Endpoint mobile devices",
            "action": "1. (Symbolic) From Zeek dns.log, join with threat intelligence feeds to identify and alert on any DNS requests from mobile device IP ranges to known malicious or newly registered domains (NRDs). Correlate with Zeek conn.log to confirm a connection was established. 2. (Statistical) For each mobile device, establish a baseline of normal process parent-child relationships using MDM/EDR logs. Calculate the rarity of each observed relationship across the fleet. Alert when a device exhibits a process relationship that falls below the 5th percentile of rarity (e.g., Safari spawning /bin/sh). Additionally, monitor outbound data volume in Zeek conn.log per device; alert if a device's hourly outbound traffic exceeds the 95th percentile of its 30-day rolling average. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., ARIMA) for each device's network connection frequency and data volume using historical Zeek conn.log data. Alert when the model flags a significant anomaly in network behavior that temporally correlates (within 5 minutes) with a suspicious DNS lookup. Use a classification model (e.g., Random Forest) trained on features from Zeek dns.log (entropy, length, TLD) and conn.log (port, duration, bytes out) to score connections for maliciousness."
          },
          {
            "description": "An increase in the rate of mobile OS crash logs for a specific device or OS version, followed within a 60-minute window by the installation of an unapproved application or configuration profile as detected by the Mobile Device Management (MDM) platform.",
            "data_sources": [
              "Mobile OS crash logs",
              "Mobile Device Management (MDM) application inventory logs",
              "Mobile Device Management (MDM) configuration profile logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) servers, Endpoint mobile devices, Corporate Wi-Fi network gateways",
            "action": "1. (Symbolic) Create a watchlist of unauthorized application bundle IDs and configuration profile identifiers. Ingest MDM inventory logs and trigger an immediate alert if any item from the watchlist is detected on a device. Correlate this finding with any OS crash log from the same device in the preceding 24 hours. 2. (Statistical) For each device model and OS version combination, calculate a baseline crash rate (crashes per hour) using a 30-day window of MDM crash logs. Alert if any device's crash rate exceeds 3 standard deviations above the mean for its peer group. Following a crash, analyze the subsequent 15 minutes of network traffic in Zeek conn.log for that device; flag any connections with an outbound-to-inbound byte ratio above the 98th percentile, which can indicate data exfiltration. 3. (Machine Learning) Use a time-series anomaly detection model to monitor the fleet-wide count of specific crash types (e.g., 'kernel panic', 'SpringBoard crash'). An anomalous spike across multiple devices running the same OS version is a strong indicator of a widespread exploit. Use an unsupervised clustering algorithm (e.g., DBSCAN) on features from MDM inventory logs (app name, install date, permissions) to identify outlier applications. An application forming a very small cluster or identified as a noise point, especially if installed after a crash event, is highly suspicious."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]