[
  {
    "information_requirement": "Is an adversary executing commands or scripts on our mobile endpoints? (PIR)",
    "tactic_id": "TA0041",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1623.001",
        "name": "Unix Shell",
        "evidence": [
          {
            "description": "A mobile application not explicitly whitelisted for shell execution functionality invokes Java methods such as `java.lang.Runtime.exec()` or `java.lang.ProcessBuilder` to execute a command. This event is observed in MTD API monitoring logs and is anomalous when compared to the application's established behavioral baseline.",
            "data_sources": [
              "Mobile Threat Defense (MTD) API Call Logs",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) Platform, Corporate-managed Android and iOS devices, Network Egress Points (Firewalls, Proxies)",
            "action": "First, for symbolic detection, create and maintain a watchlist of known malicious command strings (e.g., 'su', 'pm install', 'cat /data/data/'). Continuously monitor MTD API call logs for `Runtime.exec()` or `ProcessBuilder` invocations with arguments matching this watchlist, and generate a critical alert upon a match. Second, for statistical analysis, build a baseline for each application's API call frequency and argument patterns. Flag any application that invokes these methods if the call is a statistical outlier (e.g., > 99th percentile of historical call frequency for that app) or if the command arguments have a Shannon entropy score > 4.0, suggesting obfuscation. Third, for machine learning, implement a time-series anomaly detection model on network traffic (Zeek conn.log bytes_out) for any device where a suspicious API call was detected. A sudden spike in outbound data transfer immediately following a shell execution call, which deviates from the device's learned traffic pattern, indicates potential C2 activity and should be alerted."
          },
          {
            "description": "A shell process (e.g., `sh`, `bash`, `zsh`) is spawned as a child of a mobile application process that does not normally perform this action. The parent-child process relationship is not present in the established process lineage baseline for the application across the managed device fleet.",
            "data_sources": [
              "Mobile Threat Defense (MTD) Process Creation Logs",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution environments on corporate-managed devices, DNS resolution infrastructure, Network gateways",
            "action": "First, for symbolic logic, define a rule to immediately alert when a shell process (e.g., `sh`, `bash`) is spawned by a parent process on a deny-list (e.g., common messaging apps, games). Correlate the event with a threat intelligence feed lookup on any associated command-line arguments that appear to be a domain or IP address. Second, for statistical analysis, establish a baseline of normal parent-child process relationships for all managed applications. Use a statistical model to score the rarity of a new relationship; a score exceeding a defined threshold (e.g., a relationship seen on < 0.1% of devices) triggers an alert. Also, calculate the distribution of command-line argument lengths for all shell executions and flag commands with lengths in the top 1st percentile. Third, for machine learning, develop an unsupervised learning model (e.g., an autoencoder) on features from process events (parent process name, child process name, command-line argument entropy). The model will learn a 'normal' representation of process activity; events with a high reconstruction error are considered anomalous and indicative of malicious shell execution."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]