[
  {
    "information_requirement": "Is an adversary using a legitimate external web service for command and control of a compromised mobile device? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1481.002",
        "name": "Bidirectional Communication",
        "evidence": [
          {
            "description": "A mobile device application exhibits periodic, low-volume 'heartbeat' connections or high-volume data exfiltration to a legitimate web service, where the traffic pattern deviates significantly from an established user and application baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, including corporate Wi-Fi gateways and VPN concentrators, where mobile device traffic is observable.",
            "action": "1. Symbolic Logic: Correlate Zeek ssl.log Server Name Indication (SNI) fields against a threat intelligence feed of domains and subdomains of legitimate services known to be abused for C2 (e.g., specific GitHub repository names, Pastebin user accounts). Alert on any match. 2. Statistical Method: For each mobile-device-IP-to-destination-service pair, establish a 30-day rolling baseline of connection frequency, duration, and data volume (orig_bytes, resp_bytes) from Zeek conn.log. Calculate the inter-arrival time (delta) between connections. Alert on connections where data volume exceeds the 99th percentile or where the inter-arrival time shows low variance, indicating automated, periodic beaconing (e.g., a standard deviation of < 1 second for connections repeating every 60 seconds). 3. Machine Learning: Implement a time series forecasting model (e.g., SARIMA) for each device's traffic volume to key services. Feed the model with historical Zeek conn.log data (orig_bytes, resp_bytes). Generate an alert when the observed traffic volume at a given time exceeds the model's predicted confidence interval, indicating a significant anomaly from the learned pattern."
          },
          {
            "description": "A mobile application communicates with a legitimate web service using HTTP/S requests that contain high-entropy URI paths or parameters, or use non-standard User-Agent strings, suggesting encoded C2 communications rather than legitimate API usage.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic inspection points, such as forward proxies with SSL/TLS inspection capabilities, and corporate DNS resolvers.",
            "action": "1. Symbolic Logic: From Zeek http.log, scan request URIs for known malicious patterns associated with C2-over-web-service frameworks (e.g., '/s/ref=.../', '/api/v3/emojis'). Maintain and check against a list of anomalous or known-bad User-Agent strings used by mobile malware. Alert on any matches. 2. Statistical Method: For each destination web service (identified via Zeek ssl.log SNI), establish a baseline of normal URI path and query parameter structures from Zeek http.log. Calculate the Shannon entropy of all URI paths and query strings. Flag any URI whose entropy score is a statistical outlier (e.g., > 3 standard deviations above the mean for that service), suggesting encoded data. 3. Machine Learning: Train a classification model (e.g., Random Forest) on features extracted from URIs, such as length, query parameter count, percentage of non-alphanumeric characters, and entropy. Use a labeled dataset of known-good and known-bad C2 URIs. Apply the trained model to live Zeek http.log data from mobile devices to classify each request as potentially malicious or benign."
          },
          {
            "description": "A mobile application, as identified by MDM/EDR, generates network traffic to a web service inconsistent with the application's documented function and category (e.g., a 'Calculator' app connecting to a code repository like GitHub).",
            "data_sources": [
              "Mobile EDR/MDM logs",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile device endpoints, the MDM/EDR management console, and corporate network gateways.",
            "action": "1. Symbolic Logic: Create and maintain a static whitelist mapping of critical or sensitive applications to their expected network destinations. Using MDM/EDR data to identify the running application and Zeek ssl.log SNI for the destination, generate a high-severity alert if an application communicates with a destination not on its explicit whitelist (e.g., IF app_name == 'SecureCorp_VPN' AND destination != '*.securecorp.com' THEN ALERT). 2. Statistical Method: Using MDM/EDR logs, categorize all managed applications (e.g., 'Productivity', 'Social', 'Utilities'). For each category, profile the set of web services typically contacted. Calculate the prevalence of each destination service within each app category. Generate an alert when an application communicates with a service that is statistically rare for its category (e.g., prevalence < 0.5%). 3. Machine Learning: Model the relationship between applications and destination domains as a bipartite graph. Apply a community detection algorithm (e.g., Louvain Modularity) to identify clusters of apps and the services they use. A connection from an app to a service outside of its primary community represents a behavioral anomaly. Score the anomaly based on the 'distance' between communities in the graph and alert on high scores."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]