[
  {
    "information_requirement": "Is an adversary using SSL Pinning to conceal Command and Control communications on our mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1521.003",
        "name": "SSL Pinning",
        "evidence": [
          {
            "description": "A mobile application, when its traffic is routed through a TLS-inspecting proxy, generates a high volume of TLS validation failures (e.g., validation_status in ssl.log is not 'ok'), while successful connections from the same application are observed when not inspected. A rate of failure greater than 3 standard deviations above the application's established baseline is considered anomalous.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments routing mobile device traffic (e.g., guest Wi-Fi, corporate MDM-enrolled device VLANs) through a network security proxy with TLS inspection capabilities. Zeek sensors deployed at these inspection points.",
            "action": "Symbolic: Create a watchlist of mobile applications known to use SSL pinning for legitimate reasons. For any application not on this list, query ssl.log for records where the validation_status is 'self signed certificate in certificate chain' or 'certificate has expired'. Correlate the uid with conn.log to confirm the source IP is from a mobile device range and the connection was reset (conn_state is 'REJ' or 'RSTO'). An immediate alert should be generated for review. Statistical: For each mobile application (identified by server_name in ssl.log), establish a 30-day rolling baseline of the hourly count of TLS validation failures (validation_status != 'ok'). Calculate the mean and standard deviation of these failures. Generate an alert if the current hourly failure count for an application exceeds its baseline mean by more than 3 standard deviations. This indicates a statistically significant increase in failures, potentially due to newly introduced pinning. Machine Learning: Implement a time-series anomaly detection model (e.g., Seasonal-ARIMA) on the stream of TLS validation failure counts per mobile application. The model will learn the normal daily and weekly patterns of failures. An alert is triggered when the model detects an anomaly that deviates significantly from the learned pattern, suggesting a change in application behavior such as the introduction of SSL pinning for C2."
          },
          {
            "description": "A mobile application establishes a successful TLS connection (conn_state = 'SF') using a certificate that is either self-signed (certificate.issuer == certificate.subject in x509.log) or issued by a Certificate Authority (CA) that is statistically rare (e.g., present in <0.1% of all observed certificates) across the enterprise network. The connection is made without the certificate being present in the device's standard trust store.",
            "data_sources": [
              "Zeek x509.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors (Zeek) at internet egress points monitoring all outbound traffic from mobile device subnets. Mobile Device Management (MDM) platforms that can provide an inventory of installed applications and their versions for correlation.",
            "action": "Symbolic: Query x509.log for certificates where certificate.issuer matches certificate.subject. For each resulting certificate id, search ssl.log to find associated connections (uid). Correlate with conn.log to verify the connection was successful (conn_state = 'SF') and originated from a mobile IP. If the server_name in ssl.log matches a domain on a threat intelligence feed for mobile malware C2, escalate as a high-priority incident. Statistical: Periodically (e.g., daily), calculate the frequency of every certificate.issuer observed in x509.log over the past 90 days. Create a list of 'rare issuers' that account for less than 0.1% of all issuances. Monitor ssl.log for successful connections from mobile devices to server_names using certificates from these rare issuers. Calculate the Shannon entropy of the server_name FQDN; a high entropy score combined with a rare issuer significantly increases the risk score of the connection. Machine Learning: Develop a classification model (e.g., Gradient Boosting) to score the risk of each TLS session. Features will include: is_self_signed (from x509.log), issuer_rarity_score (from statistical analysis), certificate_validity_duration_days, server_name_entropy, JA3 and JA3S hash values, and conn_state (from conn.log). The model, trained on historical data labeled by analysts, will assign a probability score to each new session. Sessions from mobile devices exceeding a probability threshold (e.g., >0.85) are flagged for automated enrichment and analyst investigation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]