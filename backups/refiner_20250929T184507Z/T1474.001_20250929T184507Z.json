[
  {
    "information_requirement": "Has an adversary compromised our mobile applications by injecting malicious code into their software dependencies or development tools? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1474.001",
        "name": "Compromise Software Dependencies and Development Tools",
        "evidence": [
          {
            "description": "Evidence of a mobile application making a network connection to a domain or IP address that is either on a threat intelligence blocklist, has a low reputation score, or deviates significantly from its established baseline of network activity.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Mobile Device Management (MDM) logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi network gateways, VPN concentrators, and Mobile Device Management (MDM) platforms monitoring mobile device traffic.",
            "action": "1. (Symbolic Logic) Continuously query Zeek dns.log and conn.log for connections from mobile device IP ranges to domains, URLs, or IP addresses present in threat intelligence feeds (e.g., known C2 servers, malware distribution points). Generate a high-severity alert for any match. 2. (Statistical Method) For each mobile application, establish a baseline of normal network behavior, including domains contacted, data volume transferred, and connection frequency. Using Zeek conn.log, calculate the 95th percentile for daily data egress per application. Monitor for any application exceeding this threshold by more than 50%. Additionally, calculate the Shannon entropy of DNS queries in dns.log; a sudden spike in entropy for queries associated with a specific app may indicate DGA activity. 3. (Machine Learning) Develop a time series forecasting model (e.g., ARIMA) for the volume of network connections and bytes transferred per application. Flag any observation that falls outside the 99% prediction interval as a temporal anomaly requiring investigation. Additionally, use an unsupervised learning model like Isolation Forest on features from conn.log (e.g., connection duration, service, protocol, bytes sent/received) to classify connections as outliers, pointing to potentially malicious C2 communication disguised as legitimate traffic."
          },
          {
            "description": "Evidence of a software development tool (e.g., IDE, compiler, build script) on a developer's workstation or build server executing a child process with anomalous characteristics (e.g., unsigned, unusual name, suspicious command-line arguments) or initiating a network connection to a rare or malicious destination.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Sysmon Event ID 1",
              "Windows Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer endpoints and build servers within the corporate network.",
            "action": "1. (Symbolic Logic) Using Windows Event ID 4688 or Sysmon Event ID 1, create a detection rule that triggers when a known development process (e.g., `devenv.exe`, `gcc.exe`, `MSBuild.exe`) spawns a suspicious child process like `powershell.exe`, `cmd.exe`, or `wscript.exe` with encoded or obfuscated command-line arguments. Also, hunt for process creations of unsigned executables from directories associated with development tools or build artifacts. 2. (Statistical Method) For each developer host, create a baseline of parent-child process relationships and network connections originating from development tools. Calculate the rarity of a given child process being spawned by a parent development tool (e.g., `MSBuild.exe` spawning `ftp.exe`). Alert when a process relationship falls below a rarity threshold (e.g., seen on <1% of developer hosts). Similarly, for network connections (Sysmon Event ID 3, Zeek conn.log), calculate the historical frequency of destination IPs/domains for each tool and alert on connections to destinations in the bottom 5th percentile (i.e., very rare destinations). 3. (Machine Learning) Train a classification model (e.g., Random Forest) on features from Sysmon Event ID 1 (process creation) and Sysmon Event ID 3 (network connection) events. Features should include process name, parent process name, command-line length and entropy, user context, and network destination attributes (reputation, ASN, geo-location). The model should be trained on labeled historical data to classify new process/network events from development tools as 'benign' or 'suspicious'. A 'suspicious' classification triggers an alert for analyst review."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]