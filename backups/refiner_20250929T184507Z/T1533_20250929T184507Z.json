[
  {
    "information_requirement": "Is an adversary collecting sensitive data from local files or databases on our mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1533",
        "name": "Data from Local System",
        "evidence": [
          {
            "description": "An application process initiates file read operations at a rate exceeding the 95th percentile of its own 30-day historical baseline, or accesses more than 50 unique files in sensitive directories (e.g., Contacts, Photos, Downloads) within a 1-minute window.",
            "data_sources": [
              "MDM/EDR agent file system logs",
              "Android logcat logs",
              "iOS Unified Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User data partitions, application sandboxes, and shared storage on managed mobile devices (e.g., Android: /data/data/, /storage/emulated/0/DCIM/, /storage/emulated/0/Contacts/; iOS: /var/mobile/Containers/Data/Application/, /var/mobile/Media/DCIM/)",
            "action": "1. (Symbolic) From MDM/EDR logs, create a watchlist of sensitive file paths (e.g., contact databases, photo directories) and known malicious application process names. Trigger a high-severity alert if a process on the watchlist accesses a sensitive path. 2. (Statistical) For each application process, query MDM/EDR file access logs to establish a 30-day rolling baseline of file read counts per minute. Calculate the 95th and 99th percentile for this activity. Generate a medium-severity alert if a process exceeds the 95th percentile and a high-severity alert if it exceeds the 99th percentile, especially when accessing user data directories. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., using an LSTM) for each application's file access patterns, trained on historical file access frequency and file path entropy. An alert is generated when the model flags a significant deviation from the learned normal behavior, indicating a potential scraping activity."
          },
          {
            "description": "A non-system process, or a process not explicitly on an approved application allowlist, makes an API call to access the Android Keystore or iOS Keychain services.",
            "data_sources": [
              "MDM/EDR API monitoring logs",
              "OS-level security audit logs (if available)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Device credential management services (e.g., Android Keystore, iOS Keychain)",
            "action": "1. (Symbolic) Using MDM/EDR API monitoring, define an immutable allowlist of process names and their cryptographic signers (e.g., 'securityd' on iOS) authorized to access credential stores. Generate a critical alert for any access attempt from a process not on this list. 2. (Statistical) Profile the frequency of credential store access for all applications. For legitimate apps with non-zero access (e.g., password managers), establish a baseline of access frequency. Alert on any statistically significant spike (e.g., >3 standard deviations above the mean), as this could indicate compromise. 3. (Machine Learning) Use a one-class SVM (Support Vector Machine) classifier trained on legitimate credential access patterns (e.g., process name, parent process, timing). Any new access attempt that is classified as an outlier by the model should be flagged for immediate investigation to detect novel or obfuscated threats."
          },
          {
            "description": "A file with an archive extension (.zip, .tar, .gz, .7z) larger than 10MB is created in a user-writable directory by a process not on the pre-approved list of file management or backup applications.",
            "data_sources": [
              "MDM/EDR agent file system creation logs",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable storage locations on mobile devices, including internal shared storage and external SD cards (e.g., Android: /storage/emulated/0/Download/, iOS: /var/mobile/Library/Mobile Documents/), and corporate network egress points monitored by network sensors.",
            "action": "1. (Symbolic) Monitor file creation events from MDM/EDR logs for files with extensions (.zip, .tar, .gz, .7z). If the creating process is not on an allowlist of known file managers and backup utilities, generate a medium-severity alert. 2. (Statistical) For any newly created archive file, calculate the Shannon entropy of its filename. Filenames with entropy scores above a threshold (e.g., 3.5), suggesting randomization, should have their associated event risk score increased. Correlate the file creation event with network traffic logs (Zeek conn.log) within the next 5 minutes to detect subsequent large data uploads. 3. (Machine Learning) Train a classification model (e.g., Random Forest) to predict if an archive creation event is malicious. Features should include: creating process name, file size, file path, filename entropy, and time of day. The model can provide a probability score for each event to prioritize analyst review."
          },
          {
            "description": "An installed application holds a combination of high-risk permissions (e.g., READ_CONTACTS, READ_SMS, ACCESS_FINE_LOCATION, MANAGE_EXTERNAL_STORAGE) that is statistically rare for its declared application category in the app store.",
            "data_sources": [
              "MDM application inventory logs",
              "App store manifests",
              "Android logcat permission grant logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application manifests and permission grant logs stored on managed mobile devices and collected by the MDM/UEM platform.",
            "action": "1. (Symbolic) Define a set of 'toxic combinations' of permissions (e.g., 'Read Contacts' + 'Access Internet' + 'Install Packages' for a non-communications app). Scan the MDM application inventory for any app matching these combinations and flag for review. 2. (Statistical) For each app category, analyze the permissions of all apps across the enterprise to calculate the prevalence of each permission. Assign a risk score to each app based on how many low-prevalence (rare) permissions it holds for its category. Investigate apps in the top 5th percentile of risk scores. 3. (Machine Learning) Use a clustering algorithm (e.g., DBSCAN) on the application inventory, using their permission sets as features. This can automatically group applications. Outlier applications that do not fit well into any cluster, or small clusters with high-risk permissions, represent anomalies that require review."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]