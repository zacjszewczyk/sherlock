[
  {
    "information_requirement": "Is the adversary capturing audio from mobile devices to collect sensitive information? (TA0035 - Collection)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1429",
        "name": "Audio Capture",
        "evidence": [
          {
            "description": "A mobile application activates the device microphone while the application is in a background state, and this activation is immediately followed by an outbound network connection to an unusual or known malicious destination.",
            "data_sources": [
              "MDM/MTD Sensor Logs (Microphone Access Events)",
              "MDM/MTD Application State Logs (Foreground/Background)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Company-managed mobile devices, BYOD devices with corporate profiles, Network egress points (e.g., firewalls, proxies), MDM/MTD management servers",
            "action": "1. Ingest MDM/MTD logs detailing microphone access and application state (foreground/background) into a SIEM. 2. (Symbolic) Create a rule that triggers when a microphone activation event occurs for an app in a background state, and within 60 seconds, a network connection is initiated by the same device to a destination IP or domain on a threat intelligence feed of known C2 servers (checked via Zeek dns.log and conn.log). 3. (Statistical) For each application, establish a baseline of normal microphone usage duration and frequency when in the background. Alert if a background activation's duration exceeds the 95th percentile for that specific app or all apps. Additionally, calculate the entropy of destination ports in Zeek conn.log for traffic from the device immediately following microphone activation; a sudden increase in entropy may indicate random port usage for C2 communication. 4. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM) to analyze sequences of events per device (e.g., app_backgrounded, mic_on, network_out, mic_off). Train the model on historical data to learn normal sequences. An alert is generated when the model flags a sequence as having a high anomaly score, indicating a deviation from established user and application behavior."
          },
          {
            "description": "A non-system, third-party Android application's manifest contains the 'CAPTURE_AUDIO_OUTPUT' permission, or an application requests microphone access ('RECORD_AUDIO' on Android, 'NSMicrophoneUsageDescription' on iOS) that is incongruous with its published category and functionality.",
            "data_sources": [
              "MDM/MTD Application Inventory Logs (Permissions Manifest)",
              "Mobile Application Static Analysis Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application stores and repositories, All managed mobile devices, Application vetting and sandboxing environments",
            "action": "1. Continuously inventory all applications and their permissions on managed devices using MDM/MTD. 2. (Symbolic) Create a high-priority alert that triggers immediately if a non-system Android application is found with the 'CAPTURE_AUDIO_OUTPUT' permission. Maintain and check against a deny-list of application bundle IDs or hashes known to be malicious. 3. (Statistical) Develop a risk score for each application requesting microphone access. Features for the score should include: application category (e.g., 'Games' vs 'Communication'), developer reputation, number of other risky permissions requested, and age of the application. Alert on applications whose risk score is in the top 5% (95th percentile) across the enterprise for manual review. 4. (Machine Learning) Deploy a classification model (e.g., Random Forest) trained on a labeled dataset (e.g., AndroZoo) of malicious and benign APKs. Use features from static analysis, such as permissions, API calls, and embedded strings. The model will classify each new or updated application as 'benign', 'suspicious', or 'malicious', automatically flagging non-benign apps for sandboxed analysis or blocking installation."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]