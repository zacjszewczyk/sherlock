[
  {
    "information_requirement": "Is an adversary attempting to steal credentials on corporate mobile devices via GUI impersonation? (PIR)",
    "tactic_id": "TA0031",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "An application, not present on a pre-approved allowlist, is installed on a managed mobile device and possesses the 'android.permission.SYSTEM_ALERT_WINDOW' permission in its manifest.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "Mobile EDR Agent Application Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Configuration Database and Application Inventory",
            "action": "1. (Symbolic) Query the MDM/EDR platform for all applications with the 'android.permission.SYSTEM_ALERT_WINDOW' permission. Compare this list against a threat intelligence feed of known-bad package names or signing certificates associated with mobile malware. An exact match triggers a high-severity alert. 2. (Statistical) For all apps with this permission, calculate their prevalence across the device fleet. Identify applications in the bottom 5th percentile of installation count that are not on a curated allowlist of legitimate apps (e.g., screen sharing tools, chat heads). These rare applications are flagged for investigation. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on application manifest data (permissions, activities, services) and metadata (install source, developer reputation). Use this model to score the risk of each new application possessing the 'SYSTEM_ALERT_WINDOW' permission. An application receiving a high-risk score is flagged for manual review."
          },
          {
            "description": "A newly installed application's display name has a low string distance (e.g., Levenshtein distance < 2) to a high-value target application (e.g., 'Okta Verify', 'Microsoft Authenticator'), but its package name or developer signing certificate does not match the legitimate application's known values.",
            "data_sources": [
              "Mobile Device Management (MDM) Application Inventory",
              "App Vetting Service Report"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM/UEM Application Inventory and Corporate App Store/Vetting Service Database",
            "action": "1. (Symbolic) Maintain a dictionary of legitimate, high-value application names and their corresponding package names and developer signatures. For every new application installation event from the MDM, check if a known app name is present with a mismatched package name or signature. A mismatch is a high-confidence alert. 2. (Statistical) Continuously scan the MDM application inventory. For each application name, calculate the Levenshtein distance against a curated list of commonly targeted app names. Flag any application with a similarity score > 0.85 but a different package name for review. Track the frequency of such 'typosquatting' attempts over time to identify campaigns. 3. (Machine Learning) Use an unsupervised learning model (e.g., DBSCAN clustering) on the feature space of application metadata (app name character n-grams, developer name, package name structure). This can group potentially related malicious apps that use similar naming conventions, even if they don't directly mimic a known app. Investigate clusters containing known-bad indicators or exhibiting outlier characteristics."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary attempting to collect sensitive data from users on corporate mobile devices using deceptive GUI overlays? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1417.002",
        "name": "GUI Input Capture",
        "evidence": [
          {
            "description": "A temporal correlation is observed where a non-allowlisted application with overlay permissions becomes the foreground process within seconds of a sensitive application (e.g., banking, SSO, VPN), and is immediately followed by an anomalous network connection from the device to an untrusted destination.",
            "data_sources": [
              "Mobile EDR Agent Logs (Foreground App Events)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile EDR agent data lake, Corporate VPN concentrators, and Network Security Monitoring sensors (e.g., Zeek cluster at internet gateway)",
            "action": "1. (Symbolic) Create a SIEM rule that triggers when a Mobile EDR log shows an app with 'SYSTEM_ALERT_WINDOW' permission (and not on an allowlist) becoming the foreground process immediately after a sensitive app (e.g., com.mybank.app). Correlate the device ID and timestamp with Zeek conn.log to check for connections to IPs or domains on a threat intelligence feed within the next 5 minutes. 2. (Statistical) From Mobile EDR logs, identify rare or unseen application transition sequences where the second app has overlay permissions and the first is sensitive. Concurrently, from Zeek dns.log, calculate the entropy of requested domain names in 1-minute windows for the device. A sudden spike in entropy or a connection to a domain in the top 99th percentile of rarity across the enterprise, following the rare app transition, indicates potential C2. 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) on network traffic features from each mobile device (e.g., bytes out, connection count). When a high-risk application transition is detected, a high reconstruction error from the autoencoder at that specific time suggests the network behavior is anomalous compared to the device's learned normal patterns, warranting an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]