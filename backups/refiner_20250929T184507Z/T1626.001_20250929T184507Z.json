[
  {
    "information_requirement": "Has an adversary illegitimately gained Device Administrator permissions on a corporate mobile device? (PIR)",
    "tactic_id": "TA0029",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1626.001",
        "name": "Device Administrator Permissions",
        "evidence": [
          {
            "description": "The parsed AndroidManifest.xml from an application package (APK) contains the permission string 'android.permission.BIND_DEVICE_ADMIN' and the application's package name or signing certificate does not match an established whitelist of approved MDM, security, or corporate applications.",
            "data_sources": [
              "Application Package (APK) Manifest File"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate application repository, Mobile Application Management (MAM) platform, or Mobile Threat Defense (MTD) platform",
            "action": "1. (Symbolic) Automate static analysis of all new and updated application APKs. Create a rule to scan the AndroidManifest.xml for the exact string 'android.permission.BIND_DEVICE_ADMIN'. Cross-reference the application's package name and signing certificate hash against a curated allow-list of known-good applications. Generate a high-severity alert if a non-allow-listed app requests this permission. 2. (Statistical) For any application requesting the permission, calculate the Shannon entropy of its package name. Establish a baseline entropy score for legitimate apps in the corporate app store. Flag applications with package name entropy exceeding the 95th percentile of this baseline. Additionally, analyze the distribution of requested permissions per app; an app requesting BIND_DEVICE_ADMIN plus a rare combination of other permissions should have its risk score elevated. 3. (Machine Learning) Train a logistic regression or random forest classifier using features extracted from APKs. Features should include: presence of BIND_DEVICE_ADMIN, total number of requested permissions, presence of other risky permissions (e.g., SYSTEM_ALERT_WINDOW), entropy of the package name, and strings indicative of obfuscation. Use this model to classify newly discovered applications as 'benign' or 'potentially malicious', flagging the latter for manual review."
          },
          {
            "description": "A device compliance log from an MDM/EMM/MTD platform records the activation of a new Device Administrator where the application's package name is not on the pre-approved list, and the event's timestamp is outside of the user's typical working hours (e.g., 9 PM - 6 AM local time).",
            "data_sources": [
              "MDM/EMM/MTD Audit Logs",
              "Zeek conn.log",
              "Android Security Log Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile endpoint devices (Android), Corporate network gateway/VPN concentrator, SIEM platform",
            "action": "1. (Symbolic) Ingest MDM/EMM audit logs into a SIEM. Create a rule that triggers an immediate alert when an event for 'Device Administrator Activated' contains an application package name that is NOT in the organization's approved Device Admin application set. Correlate this alert with any network connections from the device's IP address (from Zeek conn.log) to known malicious domains or IPs from a threat intelligence feed within 5 minutes of the activation event. 2. (Statistical) For each user, establish a baseline of normal device administration activity (likely zero for most users). Model the time of day for legitimate administrative changes, which typically occur during business hours. An activation event that occurs more than 2 standard deviations from the mean time of legitimate events, or at an anomalous time like 3 AM, should be flagged. 3. (Machine Learning) Develop a time-series anomaly detection model (e.g., an LSTM-based autoencoder) on the stream of device management events (installs, uninstalls, permission changes) for each device. The model learns the normal sequence and timing of events. A sudden, out-of-sequence 'Device Administrator Activated' event, especially one not preceded by a managed app installation push, would generate a high anomaly score, triggering an alert."
          },
          {
            "description": "Android logcat or MTD agent logs show a high-frequency burst of touch or accessibility events (e.g., > 10 events per second) immediately preceding a 'Device Administrator Activated' event for a new application. The coordinates of the touch events may correspond to the system dialog 'Activate' button.",
            "data_sources": [
              "Android Accessibility Event Logs",
              "Android logcat (filtered for ActivityManager and InputReader)",
              "MDM/EMM Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices enrolled in an advanced or enhanced monitoring program via an MTD agent",
            "action": "1. (Symbolic) Create a detection rule that looks for a specific sequence of events within a 2-second window: an AccessibilityEvent indicating a new window with text matching the device admin activation prompt (e.g., 'Activate device admin app?'), followed by a touch event, immediately followed by an MDM log showing a new device administrator has been enabled. This sequence is a high-confidence indicator of automated abuse. 2. (Statistical) For each device, establish a baseline of user touch interaction speed. Monitor the rate of InputReader events from logcat. A burst of touch events where the rate exceeds the 99th percentile of the user's normal interaction rate is anomalous. If this statistical anomaly is temporally correlated (within 5 seconds) with a 'Device Administrator Activated' event, escalate to a high-priority alert. 3. (Machine Learning) Use a sequence-based classification model (e.g., a Recurrent Neural Network) trained on labeled streams of UI and system events. The model learns to distinguish between benign user-driven sequences and malicious, automated sequences characteristic of T1516 (Input Injection) followed by T1626.001. The model would classify event sequences in near real-time, flagging those that match known malicious patterns."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]