[
  {
    "information_requirement": "Is an adversary using a compromised mobile device to move laterally within our internal network by exploiting remote services? (PIR)",
    "tactic_id": "TA0033",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1428",
        "name": "Exploitation of Remote Services",
        "evidence": [
          {
            "description": "A single source IP, identified as a mobile device from DHCP or VPN logs, establishes connections to more than 10 unique internal hosts on common service ports (e.g., 445, 3389, 22, 8080) within a 5-minute window. This 'fan-out' activity is followed within 60 minutes by a successful authentication event (Windows Event ID 4624) on one of the scanned hosts originating from the same source IP.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Windows Event ID 4624",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "VPN Concentrators, Internal Wi-Fi Access Points, Core network switches, Domain Controllers, and high-value internal servers.",
            "action": "1. Ingest and correlate VPN/DHCP logs with network traffic (Zeek conn.log) to create an enriched session log that maps mobile device IPs to network activity. 2. (Symbolic) Scan Zeek notice.log for entries like 'Scan::Port_Scan' or exploit-specific notices originating from mobile IP subnets. Correlate these notices with subsequent successful logins (Windows Event ID 4624) from the same source IP to a scanned host. 3. (Statistical) For each mobile device IP, calculate the number of unique destination hosts and ports contacted in a 5-minute sliding window. Establish a baseline and alert when an IP exceeds the 98th percentile for either metric. Also, calculate the entropy of destination ports; a high entropy score coupled with a low data volume per connection indicates scanning behavior. 4. (Machine Learning) Train an isolation forest or one-class SVM model on features from the enriched session log (e.g., unique hosts contacted, unique ports, total bytes, protocol mix) to profile 'normal' mobile device network behavior. A high anomaly score for a given device's session indicates a deviation like scanning. 5. If any method flags an IP, automatically query for successful logins (Windows Event ID 4624) from that IP to any of the target hosts within the next hour to confirm lateral movement."
          },
          {
            "description": "A Windows service unexpectedly terminates (Event ID 7034) or an application crashes (Event ID 1000) on an internal server within 60 seconds of receiving a network connection from an IP address assigned to a mobile device.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 7034",
              "Zeek conn.log",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, database servers, and workstations hosting remote services (e.g., RDP, SMB, HTTP) accessible from the internal network.",
            "action": "1. Create a trigger that, upon detecting Windows Event ID 1000 or 7034, queries Zeek conn.log for all connections to the affected host in the preceding 2 minutes. 2. (Symbolic) Compare the protocol data unit (PDU) or payload characteristics of the connection immediately preceding the crash against a library of known exploit signatures (e.g., Snort/Suricata rules for specific CVEs). If the source IP is from a mobile device pool and matches a signature, generate a high-priority alert. 3. (Statistical) For each critical service, establish a baseline crash rate per hour. Use time series analysis to detect a statistically significant spike in crashes (e.g., a count greater than 3 standard deviations from the mean) that is temporally correlated with an increase in connection attempts from mobile devices. 4. (Machine Learning) Train a supervised classifier (e.g., Random Forest) on historical crash events, using features from the preceding network connection (e.g., source IP reputation, protocol, bytes transferred, is_mobile_device). The model will classify each crash as 'suspicious' or 'benign'. A 'suspicious' classification for a crash linked to a mobile device connection generates an alert. 5. Investigate alerts by examining the crashing application, the source mobile device, and the specific network traffic to determine if a vulnerability was exploited."
          },
          {
            "description": "A network-facing service process (e.g., w3wp.exe, httpd.exe) on an internal server spawns an anomalous child process (e.g., cmd.exe, powershell.exe), and this event occurs within 5 seconds of an inbound connection from a mobile device's IP address.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "VPN Access Logs",
              "DHCP Server Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web servers, application servers, and other systems running remotely accessible services.",
            "action": "1. Enable command-line logging for Windows Event ID 4688. Create a process-to-network correlation rule that joins process creation events with network connections (Zeek conn.log) on the hostname and a tight time window (< 5 seconds). 2. (Symbolic) Hunt for process creation events where a known network-facing service is the parent process and a shell (cmd.exe, powershell.exe, bash) or scripting engine (wscript.exe) is the child. If the parent process received a connection from a mobile IP just before spawning the shell, this is a high-fidelity indicator of remote code execution. 3. (Statistical) For each parent process on a server, build a baseline of its common child processes. Flag any parent-child relationship that is statistically rare (e.g., occurs <0.01% of the time). Additionally, calculate the character-level entropy of the command-line arguments; an unusually high entropy score can indicate obfuscated or encoded malicious commands. 4. (Machine Learning) Train a classification model (e.g., Logistic Regression with TF-IDF vectorization) to identify malicious command-line arguments. When a network service spawns a shell after a connection from a mobile device, pass the command line to the model for scoring. A 'malicious' classification triggers an alert. 5. Alerts should prompt immediate investigation of the spawned process, its command-line arguments, and subsequent network activity from the host."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]