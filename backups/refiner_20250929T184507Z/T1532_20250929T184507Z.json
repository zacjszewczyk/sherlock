[
  {
    "information_requirement": "Is an adversary collecting and archiving sensitive data on corporate mobile devices prior to exfiltration? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1532",
        "name": "Archive Collected Data",
        "evidence": [
          {
            "description": "A new file is created on a mobile device with a common archive extension (.zip, .rar, .7z, .tar.gz), and its size exceeds a statistically determined threshold (e.g., 95th percentile of file sizes for that user/device) or it is created in a non-standard directory.",
            "data_sources": [
              "MTD File Creation Events",
              "MDM File Inventory Logs",
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-accessible and application-sandboxed storage on mobile devices (e.g., Android /sdcard/Download, iOS app container Documents directory), especially on devices of executives, developers, and system administrators. Network egress points for correlation.",
            "action": "First, use symbolic logic to continuously scan MTD file creation events for filenames matching common archive extensions (e.g., `*.zip`, `*.rar`, `*.7z`). Second, apply a statistical method by establishing a 30-day rolling baseline of all file creation sizes for each device; alert when a new archive file's size exceeds the 95th percentile of this baseline. Also, calculate the entropy of directory paths where archives are created to flag creations in unusual or previously unseen locations. Third, use a machine learning approach by correlating the file creation event with subsequent network traffic from the same device IP in Zeek logs. A trained classification model (e.g., Random Forest) using features like file size, time of day, process name, and subsequent outbound data volume (`orig_bytes` in conn.log) can classify the event as 'benign staging' or 'malicious collection'. A time series analysis on `orig_bytes` immediately following the file write can detect anomalous data transfer spikes."
          },
          {
            "description": "A background process, where the application is not in the foreground, on a mobile device exhibits sustained CPU utilization above 75% for over 60 seconds, coupled with high disk write I/O, not attributable to legitimate system or user-initiated backup tasks.",
            "data_sources": [
              "MTD Performance Logs",
              "MDM Device Health Metrics"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile device CPUs and storage controllers, monitored via MDM/MTD agents.",
            "action": "First, use symbolic logic by maintaining a watchlist of process names and hashes known to be associated with mobile malware or suspicious data collection tools; alert if a process from this list is the source of high resource consumption. Second, apply statistical methods by establishing separate baselines for CPU and disk I/O during 'user active' (screen on) and 'user inactive' (screen off) periods. Use a moving average to alert when resource utilization exceeds 3 standard deviations above the 'user inactive' mean for a sustained period (e.g., > 60 seconds). Third, employ a machine learning model for anomaly detection. A time series anomaly detection model (e.g., ARIMA or LSTM) on CPU and disk I/O data streams can identify patterns inconsistent with the device's historical behavior. Additionally, a clustering algorithm (e.g., DBSCAN) can group processes by their resource consumption profiles to identify outlier processes that do not group with known benign applications."
          },
          {
            "description": "An application invokes compression (e.g., Android's `java.util.zip`, iOS's `Compression.framework`) or encryption (e.g., Android's `javax.crypto`, iOS's `CommonCrypto`) APIs, where this behavior is anomalous for the application's category (e.g., a simple game) and it also possesses permissions to access sensitive data (Contacts, Photos, Files).",
            "data_sources": [
              "MTD API Call Monitoring Logs",
              "Application Sandboxing Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile OS API frameworks for compression (e.g., Android `java.util.zip`, iOS `Compression.framework`) and encryption (e.g., Android `javax.crypto`, iOS `CommonCrypto`).",
            "action": "First, implement symbolic logic by creating and maintaining an allowlist of application bundle IDs that are expected to use compression/encryption APIs (e.g., file managers, cloud storage clients); alert on any API call from an application not on this list. Second, use a statistical approach by profiling the frequency of each application's calls to these APIs. Alert if an application's call frequency suddenly spikes, exceeding its 99th percentile of daily calls, especially if correlated with newly granted permissions to sensitive data. Third, apply a machine learning classifier (e.g., Naive Bayes) trained on features like the application's category, permissions, user reviews, and reputation score. The model will predict the likelihood that an API call is malicious, helping to prioritize alerts from statistically anomalous but potentially legitimate behavior."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]