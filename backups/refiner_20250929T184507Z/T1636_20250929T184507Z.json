[
  {
    "information_requirement": "Is an adversary collecting protected user data from corporate mobile devices? (PIR)",
    "tactic_id": "TA0035",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1636",
        "name": "Protected User Data",
        "evidence": [
          {
            "description": "A mobile application's manifest requests a combination of high-risk permissions (e.g., READ_CONTACTS, READ_SMS, ACCESS_FINE_LOCATION) that is statistically rare for its declared application category or matches a signature of known malware.",
            "data_sources": [
              "MDM Application Inventory Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) platform, Corporate App Store, Application Vetting System, Corporate-managed mobile endpoints",
            "action": "1. (Symbolic) Ingest application inventory data from MDM. Match application package names, hashes, and signing certificates against threat intelligence feeds of known malicious mobile applications and alert on any direct match. 2. (Statistical) For each application, parse its manifest to extract requested permissions. Create a baseline of normal permission sets for each application category (e.g., 'Navigation', 'Productivity'). Calculate the prevalence of each permission within its category and flag applications that request a permission with a prevalence of less than 5% in their category. Additionally, assign a risk weight to each permission and calculate a cumulative risk score; alert on applications with scores in the 99th percentile enterprise-wide. 3. (Machine Learning) Develop a classification model (e.g., Random Forest) trained on a labeled dataset of benign and malicious application manifests, using the set of requested permissions as features. Deploy the model to score all new and updated applications installed on managed devices. Investigate applications classified as 'malicious' with a confidence score above 0.85."
          },
          {
            "description": "A network connection from a mobile device shows a high-volume data upload (e.g., >100MB in a single session) to a destination IP address that is not on an established allow-list and is associated with a domain that is newly registered, has a low reputation score, or exhibits high Shannon entropy.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Corporate Wi-Fi access points, VPN concentrators, DNS resolvers",
            "action": "1. (Symbolic) From Zeek conn.log and dns.log, extract all destination IPs and domain names for traffic originating from the mobile device subnet. Correlate these against threat intelligence feeds for known C2 servers, exfiltration endpoints, and blocklists. Generate an immediate alert for any connection to a known-bad indicator. 2. (Statistical) For each mobile device, establish a 30-day rolling baseline of outbound data volume (`orig_bytes` in conn.log) and connection count per destination. Alert when a device's single-session or daily total upload volume exceeds the 98th percentile of its own historical behavior. Concurrently, analyze `query` fields in Zeek dns.log, calculate the Shannon entropy of requested domains, and flag any domain with a score greater than 3.5 as potentially algorithmically generated (DGA). 3. (Machine Learning) Implement a time-series anomaly detection model (e.g., LSTM autoencoder) on per-device, per-hour aggregated outbound traffic volume. The model learns the 'normal' data usage pattern for each device. Flag time intervals where the reconstruction error of the model exceeds a dynamically adjusted threshold, indicating a significant deviation from normal behavior. Prioritize these alerts when they co-occur with connections to newly registered domains or statistically anomalous DNS queries."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]