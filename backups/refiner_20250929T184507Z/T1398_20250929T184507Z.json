[
  {
    "information_requirement": "Has an adversary established persistence on corporate mobile devices by modifying boot or logon initialization scripts? (PIR)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1398",
        "name": "Boot or Logon Initialization Scripts",
        "evidence": [
          {
            "description": "A corporate-managed mobile device returns a failed remote attestation result, specifically with Android SafetyNet API 'ctsProfileMatch' or 'basicIntegrity' fields set to 'false', or a failed Samsung Knox attestation.",
            "data_sources": [
              "MDM Attestation Logs",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile Device Management (MDM) server log repository, SIEM platform, and network security monitoring sensors at internet gateways.",
            "action": "1. (Symbolic) Ingest MDM attestation logs into the SIEM. Create a high-priority alert that triggers immediately when a device's attestation log shows 'ctsProfileMatch: false' or 'basicIntegrity: false'. 2. (Statistical) Calculate the hourly rate of attestation failures across the device fleet. Alert if the current hour's failure count exceeds the 99th percentile of the rolling 30-day hourly baseline, indicating a statistically significant spike. 3. (Machine Learning) Train a logistic regression classifier to predict high-risk compromise events. Features should include the binary attestation result, device model, OS version, user group, and network context from Zeek logs (e.g., connection to a newly seen ASN, high entropy DNS query). A failed attestation combined with other anomalous features would yield a high-risk score, differentiating it from benign failures."
          },
          {
            "description": "A mobile device reports a non-passing Android Verified Boot state, specifically a 'Red' (corrupt) or 'Yellow' (warning) status, during a routine MDM health check [1].",
            "data_sources": [
              "MDM Device Health Check Logs",
              "MDM Policy Compliance Reports"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "MDM server log repository and SIEM platform.",
            "action": "1. (Symbolic) Configure the MDM to poll and log Verified Boot status. Create a critical alert in the SIEM for any log entry where 'verified_boot_state' is 'Red'. 2. (Statistical) Monitor the daily count of devices reporting a 'Yellow' state. Apply a time-series analysis over a 90-day window to detect a statistically significant upward trend, which could signal a widespread, low-and-slow attack campaign or a problematic OS update. 3. (Machine Learning) Use an Isolation Forest anomaly detection model on all device health telemetry. Features should include boot state, OS patch level, device model, and time since last successful check-in. The model will flag devices with an unusual combination of attributes, such as a device in a 'Yellow' state that also has a 30-day-old patch level, identifying outliers that rule-based systems might miss."
          },
          {
            "description": "A forensic image of a mobile device contains unauthorized or modified executable files or scripts within boot-related system partitions (e.g., /system, /init.rc files).",
            "data_sources": [
              "Mobile Device Forensic Image",
              "File system metadata from forensic image"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Digital Forensics and Incident Response (DFIR) workstation and secure evidence storage.",
            "action": "1. (Symbolic) For a device under investigation, acquire a full file system image. Compute SHA-256 hashes of all files in boot-related directories. Compare these hashes against a known-good baseline hash set for the exact device model and OS version, and also check them against threat intelligence feeds for known mobile malware. 2. (Statistical) For all scripts and executables in boot-related paths, calculate the file entropy. A high entropy score (e.g., > 7.5 on a scale of 8) suggests packing or encryption. Compare the entropy distribution of the suspect device's files to a known-good baseline; flag files that are statistical outliers. 3. (Machine Learning) Use a pre-trained Naive Bayes classifier to analyze the text of any discovered scripts. The model, trained on public and internal samples of benign/malicious mobile scripts, can classify a script as 'suspicious' based on the frequency of weighted terms related to networking (e.g., 'curl', 'socket'), privilege escalation ('su'), or reconnaissance ('getprop')."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]