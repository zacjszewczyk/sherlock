[
  {
    "information_requirement": "Is an adversary maintaining persistence on mobile devices by abusing broadcast receivers? (TA0028 - Persistence)",
    "tactic_id": "TA0028",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1624.001",
        "name": "Broadcast Receivers",
        "evidence": [
          {
            "description": "An application's AndroidManifest.xml file contains a <receiver> tag for a high-risk system broadcast intent (e.g., 'android.intent.action.BOOT_COMPLETED', 'android.provider.Telephony.SMS_RECEIVED') and also requests permissions in a <uses-permission> tag that enable malicious action upon receiving the broadcast (e.g., 'android.permission.SEND_SMS').",
            "data_sources": [
              "Application manifest files (AndroidManifest.xml)",
              "Mobile Device Management (MDM) logs reporting application manifests"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices, Internal application stores, Application vetting systems",
            "action": "1. (Symbolic) Implement a static analysis rule that scans application manifests for a watchlist of high-risk broadcast receivers (e.g., 'BOOT_COMPLETED', 'SMS_RECEIVED', 'NEW_OUTGOING_CALL'). Generate an alert if an application registers a receiver from this list and is not on an approved application allowlist. 2. (Statistical) For all scanned applications, calculate the frequency of each declared broadcast receiver across the environment. Identify applications that register for statistically rare receivers (e.g., in the bottom 5th percentile of frequency). Correlate these rare receivers with an application's category; a non-system utility app registering for a rare system-level receiver is highly suspicious. 3. (Machine Learning) Train a logistic regression classifier on a labeled dataset of benign and malicious APK manifests. Use features such as the presence of high-risk receivers, the total count of receivers, and the count of sensitive permissions requested. Use the trained model to classify all new applications, flagging those with a high probability of being malicious for analyst review."
          },
          {
            "description": "A running application process makes an API call to 'registerReceiver()' with an IntentFilter for a system event that is incongruous with the application's documented purpose, particularly on devices running Android 8 (API 26) or newer.",
            "data_sources": [
              "Mobile EDR logs containing API call monitoring data",
              "Dynamic application analysis sandbox reports detailing runtime behavior and API calls"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Mobile devices with EDR agents installed, Dynamic application analysis sandbox environment",
            "action": "1. (Symbolic) Create a detection rule that triggers when a process not on an approved list (e.g., not a core OS process or known communication app) makes a 'registerReceiver()' call with an IntentFilter for 'android.provider.Telephony.SMS_RECEIVED' or 'android.intent.action.NEW_OUTGOING_CALL'. 2. (Statistical) For each application on each device, establish a 30-day baseline of normal 'registerReceiver()' calls and the associated intents. Generate an alert if an application registers a number of unique intents per hour that is more than 3 standard deviations above its baseline, or if it registers an intent it has never registered before. 3. (Machine Learning) Use a time-series anomaly detection model (e.g., LSTM autoencoder) on the sequence of 'registerReceiver()' calls per device. Train the model on sequences of (application, intent, timestamp) tuples from a known-good period. The model should flag any sequence of registrations with a high reconstruction error, indicating a deviation from normal temporal patterns of behavior."
          },
          {
            "description": "An application's manifest declares a combination of a broadcast receiver and permissions that, when used together, create a high-risk capability. For example, the combination of the 'android.provider.Telephony.SMS_RECEIVED' receiver with the 'android.permission.READ_CONTACTS' and 'android.permission.INTERNET' permissions allows for the interception and exfiltration of SMS messages and contact lists.",
            "data_sources": [
              "MDM logs detailing application permissions",
              "Application manifest files (AndroidManifest.xml)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed mobile devices, Application vetting systems, Mobile Threat Defense (MTD) platforms",
            "action": "1. (Symbolic) Define a set of high-risk 'tuples' consisting of (Broadcast Receiver, Permission 1, Permission 2). For example: ('SMS_RECEIVED', 'READ_CONTACTS', 'INTERNET'). Scan all application manifests and generate a critical alert if an application's manifest contains a complete match for any defined high-risk tuple. 2. (Statistical) For the entire population of managed applications, build a permission co-occurrence matrix. Calculate a risk score for each application based on the rarity of its observed permission pairs (e.g., ('RECEIVE_BOOT_COMPLETED', 'REQUEST_INSTALL_PACKAGES') is rarer and thus higher risk than ('INTERNET', 'ACCESS_NETWORK_STATE')). Flag applications whose average permission-pair rarity score exceeds the 95th percentile. 3. (Machine Learning) Use an unsupervised clustering algorithm (e.g., DBSCAN) to group applications based on feature vectors derived from their registered receivers and requested permissions. Manually analyze the resulting clusters. Small, dense clusters containing high-risk permissions or receivers are highly suspicious and should be prioritized for investigation as potential new malware families."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]