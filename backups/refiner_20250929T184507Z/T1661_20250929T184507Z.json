[
  {
    "information_requirement": "Has an adversary gained initial access by pushing a malicious update to a previously benign mobile application? (PIR)",
    "tactic_id": "TA0027",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "Within 24 hours of an application update, the mobile application initiates network connections to domains that are on threat intelligence blocklists, newly registered, have high-entropy names, or use TLS fingerprints (JA3/JA3S) not previously associated with the application's established 30-day baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log",
              "Mobile EDR/MDM Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Wi-Fi Networks, VPN Concentrators, Managed Mobile Devices",
            "action": "Correlate mobile application update events from MDM/EDR logs with subsequent network activity within a 24-hour window from Zeek logs. 1. (Symbolic) For each new connection, query the destination IP/domain against threat intelligence feeds and alert on any match. 2. (Statistical) For each DNS query in dns.log, calculate the Shannon entropy of the queried domain name. Flag domains with entropy scores exceeding a baseline threshold (e.g., > 3.5), indicative of DGA. Concurrently, compare the JA3/JA3S hash from ssl.log against a historical baseline for the application; a new, unseen hash post-update is anomalous. 3. (Machine Learning) Employ a time-series anomaly detection model (e.g., ARIMA) on the egress data volume from conn.log for the application. An alert is generated if the observed traffic post-update significantly deviates from the forecasted volume, suggesting unexpected data transfer."
          },
          {
            "description": "Following an update, a mobile application is granted a new set of permissions that are either on a predefined high-risk list or are statistically anomalous for its declared application category (e.g., a calculator app requesting microphone access).",
            "data_sources": [
              "MDM Application Inventory Logs",
              "MDM Compliance Logs",
              "Mobile OS permission logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "Continuously ingest application manifest and permission data from MDM/EDR agents. Upon an update event, perform a differential analysis of the permission set. 1. (Symbolic) Compare the newly granted permissions against a static 'deny list' of high-risk permissions or combinations (e.g., 'READ_SMS' and 'SEND_SMS' together) and generate a high-severity alert on a match. 2. (Statistical) Maintain a risk score for each permission. Calculate the total risk score change after an update and alert if it exceeds a set threshold. Additionally, compare the new permissions against a statistical baseline for the app's store category; flag permissions that are rare (e.g., present in <1% of apps in that category). 3. (Machine Learning) Use a clustering algorithm (e.g., K-Means) to group applications based on their permission vectors. An alert is triggered if an application, post-update, migrates from a low-risk cluster (e.g., minimal permissions) to a high-risk cluster (e.g., apps with extensive device access)."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is an adversary evading defenses by hiding malicious code within a legitimate application update? (PIR)",
    "tactic_id": "TA0030",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1661",
        "name": "Application Versioning",
        "evidence": [
          {
            "description": "An application update is signed with a developer certificate thumbprint that differs from all previous versions of the same application, or the certificate itself is newly issued and has a low reputation score.",
            "data_sources": [
              "MDM Application Inventory Logs",
              "Application Manifest Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Managed Mobile Devices",
            "action": "Using MDM/EDR, maintain a historical database of the code signing certificate thumbprint and subject for each application version on managed devices. 1. (Symbolic) Upon an update, compare the new certificate's thumbprint with the historical record for that app ID. Alert immediately on any mismatch. Also, check the thumbprint against a threat intelligence feed of known malicious certificates. 2. (Statistical) Analyze the certificate's 'valid from' date. Flag certificates younger than 90 days. Additionally, calculate the prevalence of the certificate's issuer across the environment; an issuer seen on fewer than 0.5% of all installed applications is a statistical anomaly and should increase the alert's risk score. 3. (Machine Learning) Develop a certificate reputation classifier (e.g., Logistic Regression) trained on features like certificate age, issuer prevalence, and number of apps signed. Flag any update signed by a certificate with a 'low reputation' classification."
          },
          {
            "description": "Post-update, an application's network traffic exhibits beaconing behavior (connections at regular, repeating intervals), a significant increase in total data egress, or communication over non-standard ports not observed in its pre-update baseline.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log",
              "Mobile EDR/MDM Network Flow Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Corporate Network Gateways, Managed Mobile Devices",
            "action": "For each application, baseline network behavior over a 30-day rolling window using Zeek and MDM logs. After an update, monitor for deviations. 1. (Symbolic) Alert if the application communicates over a well-known port associated with a different protocol (e.g., traffic on TCP/443 that is not TLS, identified via Zeek protocol analyzers) or if the 'server_name' in ssl.log matches a known C2 pattern. 2. (Statistical) Apply a Fourier transform to the timestamps of an application's outbound connections in conn.log over a 24-hour period. A strong peak in the frequency domain indicates periodic beaconing. Also, alert if the total daily data egress exceeds 3 standard deviations from the established baseline. 3. (Machine Learning) Use an autoencoder trained on feature vectors representing normal application network sessions (e.g., duration, bytes out, port, protocol). A high reconstruction error for a new session post-update suggests it is anomalous and potentially malicious C2 communication."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-26",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]