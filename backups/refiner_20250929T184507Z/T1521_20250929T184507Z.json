[
  {
    "information_requirement": "Is an adversary using a non-standard or custom encrypted channel for command and control on our managed mobile devices? (PIR)",
    "tactic_id": "TA0037",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1521",
        "name": "Encrypted Channel",
        "evidence": [
          {
            "description": "A TLS session from a managed mobile device uses a self-signed certificate or a certificate whose issuer is not on the corporate-approved list, and the destination is a low-reputation IP address or newly registered domain.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud Access Security Broker (CASB) logs, Corporate Wi-Fi network gateways, and VPN termination points.",
            "action": "For each mobile device connection, perform three checks. First (Symbolic): Query Zeek x509.log and ssl.log for connections where the certificate issuer is not in a pre-approved list of Certificate Authorities or is explicitly self-signed. Correlate these via UID with Zeek dns.log to check if the destination server name is on a threat intelligence blocklist or was registered in the last 30 days. Second (Statistical): For connections with non-approved CAs, analyze the destination IP in Zeek conn.log. Flag any connection where the certificate is non-approved AND the destination IP's community threat score (e.g., from an integrated threat feed) is in the bottom 10th percentile (i.e., very poor reputation). Third (Machine Learning): Train a decision tree classifier on historical ssl.log and x509.log data, using features like certificate validity period, subject/issuer string entropy, public key algorithm, and whether the domain is newly registered. Use the trained model to classify new TLS sessions as 'benign' or 'suspicious certificate' in real-time."
          },
          {
            "description": "A TLS client hello from a managed mobile device generates a JA3 or JA3S hash that has a low prevalence (<1st percentile) across the mobile device fleet or does not correspond to any sanctioned application's known fingerprint.",
            "data_sources": [
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network sensors at internet egress points, Mobile Device Management (MDM) platform, and virtual tap points in the cloud environment.",
            "action": "For each TLS session, perform three checks on its JA3/JA3S fingerprint. First (Symbolic): Maintain an allowlist of known-good JA3 and JA3S hashes for all sanctioned mobile applications. Create a detection rule in the SIEM that triggers an alert when a JA3/JA3S hash from a managed mobile device is observed in Zeek ssl.log that is not on this allowlist. Second (Statistical): For all mobile devices, calculate the population frequency of every observed JA3 hash over a 30-day rolling window. Identify and alert on any JA3 hash that appears on a device but has a global prevalence of less than the 1st percentile across the entire device fleet, indicating a rare client. Third (Machine Learning): Use a clustering algorithm like DBSCAN on the feature space of JA3 hashes. Identify small, dense clusters of rare JA3 hashes that are not associated with known applications. Investigate any new device whose traffic joins these anomalous clusters as a potential indicator of unauthorized software or malware."
          },
          {
            "description": "An encrypted connection from a mobile device persists for an unusually long duration (>99th percentile of all connections) and exhibits a periodic 'heartbeat' pattern (e.g., consistent packet size and timing intervals), inconsistent with typical user-driven activity.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Split-tunneling traffic egress points, VPN concentrators, and core network switches.",
            "action": "For each TCP connection, perform three checks for C2-like behavior. First (Symbolic): For connections flagged by other analytics (e.g., anomalous JA3 or cert), search Zeek conn.log for matching 5-tuples that exhibit long durations (> 24 hours) and have a Zeek 'history' string indicating periodic keepalives (e.g., a repeating 'd' character). Second (Statistical): From Zeek conn.log, compute the 99th percentile for connection duration and the 5th percentile for the ratio of total bytes to duration. Create a rule to flag connections that exceed the 99th percentile for duration while falling below the 5th percentile for the byte-to-duration ratio, which suggests a heartbeat instead of data transfer. Third (Machine Learning): For long-lived connections, apply a time series analysis using a Fast Fourier Transform (FFT) on the inter-arrival times of packets. A strong, single frequency peak in the transformed signal indicates a regular, automated beacon characteristic of C2 communication and should trigger an alert for analyst review."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-26",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]