[
  {
    "information_requirement": "Has the adversary staged data for exfiltration by compressing or encrypting it using a library?",
    "tactic_id": "TA0009",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T1560.002",
        "name": "Archive via Library",
        "evidence": [
          {
            "description": "A process is created with a file hash matching a known malicious or suspicious archiving tool.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, File Servers, Critical Application Servers, Developer Workstations, Executive Laptops",
            "action": [
              "Query process creation events (Windows Event ID 4688) and compare the process hash (SHA256/MD5) against a threat intelligence list of known malicious archiver hashes. Generate an alert for any exact match.",
              "For all process creation events, calculate the prevalence of each hash across the enterprise. Flag hashes that are extremely rare (e.g., seen on < 0.1% of endpoints) and are associated with processes that have 'zip', 'archive', or 'compress' in their name or metadata. This identifies potentially unauthorized or non-standard tools.",
              "Train a binary classification model (e.g., Random Forest) on features from process creation events, including process name, parent process, command line length, and hash prevalence. Use a labeled dataset of known-good and known-bad archiver executions to predict whether a new, unseen process execution is malicious."
            ]
          },
          {
            "description": "A scripting interpreter (e.g., python.exe, pwsh.exe) or a legitimate binary is executed with command-line arguments or loaded modules that invoke archiving libraries to compress data.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Web Servers, Application Servers, Code Repositories",
            "action": [
              "Create a detection rule that scans command lines from process creation events (Windows Event ID 4688) for the execution of interpreters (python.exe, pwsh.exe) alongside keywords for archiving modules or functions (e.g., 'zipfile', 'rarfile', 'Compress-Archive', 'System.IO.Compression'). Alert when these are seen targeting sensitive directories like 'Users', 'Documents', or 'AppData'.",
              "For each unique command-line pattern involving archiving keywords, calculate the Shannon entropy of the arguments. A high entropy score can indicate obfuscated or randomized script arguments. Also, establish a baseline for the frequency of specific archiving commands per user/host. A command that deviates significantly from its historical frequency (e.g., > 3 standard deviations above the mean) is anomalous.",
              "Use a clustering algorithm (e.g., DBSCAN) on command-line arguments after tokenizing them into a feature vector (e.g., TF-IDF). This can automatically group similar command executions. Outlier clusters or small, isolated clusters may represent novel or rare adversary activity that does not match predefined patterns."
            ]
          },
          {
            "description": "A process not typically associated with user-driven archiving (e.g., a web server, database service, system process) creates a file with an archive extension (.zip, .rar, .7z, .tar.gz).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Application Servers (DMZ), Database Servers, Internal File Shares, System Temporary Directories (e.g., C:\\Windows\\Temp)",
            "action": [
              "Create a rule that joins file creation events (Windows Event ID 4663, for Object Name ending in .zip, .rar, etc.) with process creation events (Windows Event ID 4688) on Process ID. Alert if the creating process name is on a watchlist of non-interactive or sensitive processes (e.g., 'w3wp.exe', 'sqlservr.exe', 'lsass.exe', 'svchost.exe').",
              "For each process name, build a historical profile of the file extensions it creates. Calculate the probability $$ P(\\text{ext} | \\text{process}) $$. Flag any instance where a process creates an archive file and this probability is below a low threshold (e.g., < 1%) or is a zero-probability event (first time seen), indicating a strong deviation from normal behavior.",
              "Develop an anomaly detection model using a One-Class SVM or Autoencoder on features derived from file creation events, including the creating process name, file path, and file extension. Train the model on a baseline of normal activity. The model will then identify any file creation event that is a significant outlier from the learned normal profile, such as `svchost.exe` creating a `.zip` file in `C:\\Perflogs`."
            ]
          },
          {
            "description": "A single process reads a high volume of unique files or directories within a short timeframe, immediately preceding the creation of a large archive file by the same process.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Profile Directories (Documents, Desktop), Network-mapped Drives, SharePoint Sites, Source Code Repositories",
            "action": [
              "Define a sequence-based rule: Trigger if Process A performs > 100 file read operations (Windows Event ID 4663, Access Type: ReadData) within 60 seconds, followed by Process A performing a file write operation (Windows Event ID 4663, Access Type: WriteData) to a file with an archive extension.",
              "For each process over a 5-minute sliding window, calculate the number of unique directories accessed (directory access entropy). Correlate a spike in directory access entropy (> 95th percentile of the process's historical behavior) with the subsequent creation of an archive file by the same process.",
              "Implement a time-series analysis model (e.g., ARIMA) on file system activity per host. The model learns the normal rhythm of file reads and writes. An alert is generated when the model detects a statistically significant anomaly, specifically a sharp, unpredicted spike in file read events followed by a write event corresponding to an archive file."
            ]
          },
          {
            "description": "An archive file is created on a host, and shortly thereafter, an outbound network connection is initiated from the same host to an external or unusual internal destination.",
            "data_sources": [
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Servers, Endpoint Network Stacks",
            "action": [
              "Create a correlation rule that triggers when a file creation event (Windows Event ID 4663 for *.zip, *.rar, etc.) on Host A is followed within 2 minutes by a network connection event (Zeek conn.log from Host A's IP) to an IP address categorized by threat intelligence as malicious or to a non-standard port.",
              "For each host, establish a baseline of typical outbound connection destinations (countries, ASNs) and data volumes. When an archive creation event is detected, flag subsequent outbound connections from that host where the destination ASN is rare for that host (< 5th percentile of historical connections) or the transferred data volume is an outlier (> 95th percentile of typical outbound flows for that host).",
              "Use a graph-based analysis where hosts are nodes and connections are edges. When an archive creation event occurs on a node (host), temporarily increase its risk score. The algorithm can then identify high-risk paths, such as the 'at-risk' node connecting to another node (external IP) that is part of a low-reputation community or has features identified as suspicious by a separate classifier."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]