[
  {
    "information_requirement": "Is the adversary executing malicious code on the network using PowerShell? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.001",
        "name": "PowerShell",
        "evidence": [
          {
            "description": "A PowerShell script block (Windows Event ID 4104) generates a SHA256 hash that matches a known-malicious hash from a threat intelligence feed, or the script contains network indicators (IP addresses, domains) that match known command and control (C2) infrastructure.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, DNS Resolvers, Network Egress Points",
            "action": [
              "Symbolic Logic: For every script block logged (Windows Event ID 4104), calculate its SHA256 hash and query against a threat intelligence feed of known-malicious script hashes. Additionally, parse script blocks to extract all IP addresses and domain names, and match them against a C2 indicator feed. Alert on any match.",
              "Statistical Method: For each host, track the frequency of PowerShell-initiated connections to domains with low reputation scores or newly registered domains. Alert if a host's activity exceeds the 99th percentile for the organization. Additionally, calculate the prevalence of each script hash across the environment; a hash observed on fewer than 5 hosts is statistically rare and warrants investigation.",
              "Machine Learning Application: Use a supervised classification model (e.g., Gradient Boosting Machine) trained on features extracted from PowerShell scripts (e.g., presence of network callouts, string obfuscation keywords, specific cmdlet usage) and labeled with threat intel data to predict if a new, unseen script is malicious."
            ]
          },
          {
            "description": "A PowerShell command line (Windows Event ID 4688) or script block (Windows Event ID 4104) contains patterns indicative of obfuscation, including but not limited to Base64 encoding flags ('-e', '-enc'), character-level concatenation, string replacement, or formatting used to construct suspicious commands.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic Logic: Use regular expressions to search command lines and script blocks for known obfuscation patterns such as '-EncodedCommand', '-e', 'IEX', '(New-Object Net.WebClient).DownloadString', '[System.Text.Encoding]::', '[char]', and heavy use of string concatenation ('+').",
              "Statistical Method: Calculate the Shannon entropy and character frequency distribution for all script blocks. Establish a baseline from known-good administrative scripts. Flag scripts with entropy scores exceeding the 95th percentile of the baseline or a hard threshold of 6.0. Also, flag scripts where the ratio of non-alphanumeric characters to alphanumeric characters is more than 3 standard deviations above the mean.",
              "Machine Learning Application: Train a Random Forest classifier on a labeled dataset of benign and obfuscated PowerShell scripts. Use features like script length, entropy, n-gram frequency, presence of specific keywords (e.g., 'Invoke-Expression', 'Base64'), and the count of special characters. Use the model to classify new scripts in real-time."
            ]
          },
          {
            "description": "A PowerShell process executes a command containing logic to download content from a remote URL and execute it directly in memory, commonly via `Invoke-Expression` (IEX) combined with a download class like `Net.WebClient` or `Invoke-WebRequest`.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Network Egress Points, Web Proxies",
            "action": [
              "Symbolic Logic: Create a high-fidelity alert for any command line (Event ID 4688) or script block (Event ID 4104) containing the pattern 'IEX' and 'DownloadString' or 'Invoke-WebRequest'. Correlate the source host with network logs (Zeek conn.log) to confirm an external download occurred within 5 seconds of the PowerShell execution.",
              "Statistical Method: For every host, baseline the frequency of PowerShell processes making external network connections. Use a percentile-based threshold (e.g., > 99th percentile) on the count of such events within a 1-hour window to detect anomalous activity. Analyze user-agent strings in Zeek http.log; flag connections where the user agent is the default for PowerShell and the destination is a low-reputation or uncategorized domain.",
              "Machine Learning Application: Use an anomaly detection model (e.g., an autoencoder) on time-series data representing network connections originating from PowerShell processes. The model learns normal connection patterns (e.g., to internal servers, Microsoft update sites) and flags deviations, such as connections to new, rare, or geographically anomalous IP addresses."
            ]
          },
          {
            "description": "The `System.Management.Automation.dll` module is loaded by a process other than a standard, whitelisted PowerShell host (e.g., powershell.exe, powershell_ise.exe), indicating potential process injection or unmanaged code execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially those running Microsoft Office or other common applications.",
            "action": [
              "Symbolic Logic: Using Sysmon Event ID 7 (Image Load), create a rule to alert whenever `System.Management.Automation.dll` is loaded by any process not in a pre-defined allowlist (e.g., `powershell.exe`, `powershell_ise.exe`, `pwsh.exe`). Specifically, alert on loads by `winword.exe`, `excel.exe`, `outlook.exe`, `mshta.exe`, `wscript.exe`, and `rundll32.exe`.",
              "Statistical Method: Generate a frequency table of all parent processes that load `System.Management.Automation.dll` across the enterprise over a 30-day period. Any process that appears on a statistically insignificant number of hosts (e.g., < 0.1% of endpoints) should be flagged for investigation as a rare occurrence.",
              "Machine Learning Application: Use a graph-based anomaly detection algorithm to model process relationships. Train the model on a baseline of normal process ancestry and module loads. The model can then identify anomalous 'loads' edges, such as a new and unexpected link from `svchost.exe` to `System.Management.Automation.dll`, that deviate from the learned graph structure."
            ]
          },
          {
            "description": "A PowerShell process is launched with command-line arguments that weaken the security posture, such as `-ExecutionPolicy Bypass`, `-WindowStyle Hidden`, or `-NonInteractive`, especially on hosts or by users with no legitimate administrative need for PowerShell.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Windows Event ID 4105"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers, Tier 0 assets",
            "action": [
              "Symbolic Logic: Alert on any process creation event (Event ID 4688) where the command line contains `-ExecutionPolicy Bypass`, `-ep bypass`, `-w hidden`, or `-WindowStyle Hidden`. Correlate with the user identity and increase severity if the user is not a member of a privileged group.",
              "Statistical Method: For each user and host, create a baseline of PowerShell usage (e.g., daily execution count, unique commands used). Use a Z-score to detect significant spikes in activity. Also, create a profile of command-line arguments used by each user group; flag the first-time use of a suspicious argument like `-EncodedCommand` by a user in a non-administrative group.",
              "Machine Learning Application: Use clustering (e.g., K-Means or DBSCAN) to group users based on their PowerShell command-line features (arguments used, script complexity, frequency). This automatically segments users into profiles like 'No-Usage,' 'Standard-User,' and 'Power-Admin.' Trigger an alert when a user's activity causes them to move to a more suspicious cluster without a corresponding change in job role."
            ]
          },
          {
            "description": "A PowerShell script block (Windows Event ID 4104) displays statistical properties that are outliers when compared to a baseline of benign scripts, such as high Shannon entropy indicating packed data or an unusual character frequency distribution.",
            "data_sources": [
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic Logic: Define a rule that flags any script block over 1024 characters that contains both the string 'FromBase64String' and 'IEX' or 'Invoke-Expression'. This combines a size heuristic with specific function calls to identify likely in-memory execution of decoded payloads.",
              "Statistical Method: For all script blocks from Event ID 4104, compute the Shannon entropy. Establish a rolling 30-day baseline of entropy scores for the environment. Alert on any script whose entropy score is greater than 4 standard deviations above the mean, or exceeds a hard threshold (e.g., 6.5) often associated with encrypted or compressed data.",
              "Machine Learning Application: Implement an autoencoder neural network trained on the character n-grams or abstract syntax trees (AST) of benign PowerShell scripts. This model learns to reconstruct 'normal' scripts with low error. When a malicious, obfuscated script is processed, the high reconstruction error indicates a significant deviation from the norm and triggers an anomaly alert."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]