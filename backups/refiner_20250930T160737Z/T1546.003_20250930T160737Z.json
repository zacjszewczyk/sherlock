[
  {
    "information_requirement": "Is the adversary maintaining persistence using WMI Event Subscriptions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription",
        "evidence": [
          {
            "description": "A new WMI FilterToConsumerBinding event (Windows Event ID 5861) is logged, where the 'Name' of the Filter/Consumer/Binding, the 'Query' of the Filter, or the 'Destination' (command-line/script) of the Consumer matches a known malicious signature from threat intelligence.",
            "data_sources": [
              "Windows Event ID 5861"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Tier 0/1 Servers, Endpoint workstations of privileged users",
            "action": [
              "Create a detection rule that triggers when a Windows Event ID 5861 is generated. Extract the Name, Query, and Consumer properties from the event data. Compare these extracted strings and any associated file hashes against a curated list of Indicators of Compromise (IOCs) from threat intelligence feeds. Alert on any match.",
              "For all new WMI Consumers (Event ID 5861), calculate the Shannon entropy of the consumer's command line or script block. Flag consumers with entropy scores exceeding a dynamically calculated baseline (e.g., the 95th percentile), as high entropy can indicate obfuscation or packed payloads.",
              "Train a classification model (e.g., Random Forest) on labeled WMI event data (benign vs. malicious). Use features such as string length, character distribution, presence of keywords ('powershell', 'download', 'execute'), and entropy of the Filter Query and Consumer Destination fields to classify new WMI subscription events in real-time."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) or PowerShell script block log (Windows Event ID 4104) contains command-line arguments or script content that explicitly creates WMI persistence components using patterns associated with offensive frameworks.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations, Development servers, Management servers where PowerShell is frequently used",
            "action": [
              "Deploy a SIEM rule that uses regular expressions to search command-line arguments (Event ID 4688) and PowerShell script blocks (Event ID 4104) for patterns like 'New-WmiEventFilter', 'Set-WmiInstance -Namespace root\\\\subscription', 'Register-WmiEvent', or the use of 'wmic.exe' with 'eventfilter', 'eventconsumer', or 'filtertobinding' keywords. Alert on any matches.",
              "Analyze the parent-child process relationships for processes that create WMI subscriptions (e.g., powershell.exe, wmic.exe). Calculate the frequency of each parent process (e.g., explorer.exe, cmd.exe, a web server process). Flag WMI creation activity originating from a statistically rare parent process (e.g., a parent process in the lowest 5% frequency tier).",
              "Use Natural Language Processing (NLP) techniques, such as tokenization and TF-IDF, on PowerShell script block logs (Event ID 4104). Train a model to identify anomalous scripts that contain WMI-related functions combined with other suspicious activities like network connections, obfuscation, or file downloads, which are characteristic of malicious toolsets."
            ]
          },
          {
            "description": "A WMI Consumer is created (Windows Event ID 5861) that specifies a payload (script or executable) located in a non-standard, world-writable, or user-specific directory (e.g., C:\\Users\\Public, %APPDATA%, %TEMP%).",
            "data_sources": [
              "Windows Event ID 5861",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on multi-user systems like terminal servers",
            "action": [
              "Upon detection of a new WMI Consumer (Event ID 5861), parse the consumer's destination path. Create a rule that alerts if the path matches a denylist of unusual directories, such as '%APPDATA%', '%LOCALAPPDATA%', '%TEMP%', '%TMP%', 'C:\\Users\\Public\\', or 'C:\\PerfLogs\\'.",
              "Across the enterprise, aggregate all WMI consumer executable paths. Calculate the frequency of each unique path. Alert on any new WMI consumer whose execution path is statistically rare, falling below a certain percentile threshold (e.g., 1st percentile) of observed paths.",
              "Implement a clustering algorithm (e.g., DBSCAN) on WMI consumer events, using features like the executable path, file name, and parent process. Identify clusters of normal behavior and flag any new WMI consumer event that is classified as an outlier or noise, indicating it does not belong to any known-good cluster of activity."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) with parent process 'WmiPrvSe.exe' is correlated with a network connection event (Zeek conn.log) from the same host to an external IP address, particularly to a destination with a low reputation score or over an uncommon port.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (firewalls, proxies), DNS servers, and all Windows hosts",
            "action": [
              "Correlate process events (Event ID 4688) where ParentImage is 'WmiPrvSe.exe' with network logs (Zeek conn.log) by host and timestamp. Create a rule that alerts if the spawned process initiates an outbound connection to an IP address on a threat intelligence blocklist or a non-standard port (e.g., not 80/443).",
              "For all processes spawned by 'WmiPrvSe.exe', profile their network behavior. Calculate the entropy of destination ports and the frequency of destination Autonomous System Numbers (ASNs). Alert if a process exhibits unusually high port entropy or communicates with a statistically rare ASN for your environment.",
              "Use time-series analysis on the network connection data (e.g., bytes out, connection duration) for processes spawned by 'WmiPrvSe.exe'. Train a model (e.g., LSTM) to detect beaconing behavior, characterized by regular, periodic outbound connections, which is a strong indicator of a command-and-control channel."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges using WMI Event Subscriptions?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription",
        "evidence": [
          {
            "description": "A 'mofcomp.exe' process is executed (Windows Event ID 4688), and the hash of the MOF file specified in its command-line arguments matches a known malicious signature associated with privilege escalation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows servers and workstations, particularly those not managed by standard software deployment systems",
            "action": [
              "Create a detection rule for process creation (Event ID 4688) of 'mofcomp.exe'. Upon trigger, automatically extract the MOF file path from the command line, retrieve the file, calculate its hash (e.g., SHA256), and query a threat intelligence platform or internal IOC database. Alert on any hash match.",
              "Track the frequency of parent processes that spawn 'mofcomp.exe'. Establish a baseline of common parent processes (e.g., 'ccmexec.exe', 'TrustedInstaller.exe'). Alert when 'mofcomp.exe' is executed by a statistically rare parent process (e.g., 'powershell.exe', 'cmd.exe', or an Office application process).",
              "Develop a supervised classification model to predict if a 'mofcomp.exe' execution is malicious. Features should include the parent process name, the user context, the path of the MOF file, and properties of the MOF file itself (e.g., file size, keyword density). Train the model on known good (e.g., SCCM activity) and known bad (e.g., malware samples) executions."
            ]
          },
          {
            "description": "A 'mofcomp.exe' process is executed (Windows Event ID 4688) by a non-SYSTEM/non-ADMINISTRATOR user, or the MOF file being compiled is located in a user-writable directory like '%TEMP%' or 'C:\\Users\\*'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user workstations, Remote Desktop Session Hosts, and servers with lax permissions",
            "action": [
              "Monitor for 'mofcomp.exe' process creation (Event ID 4688). Alert if the User is not 'NT AUTHORITY\\SYSTEM' or a member of the local Administrators group, OR if the command line contains a path to a MOF file located in a suspicious directory ('%APPDATA%', '%TEMP%', 'C:\\Windows\\Tasks', etc.).",
              "Build a baseline of normal 'mofcomp.exe' executions per host. For each execution, create a feature vector including user, parent process, and MOF file directory. Use a one-class SVM or isolation forest to identify executions that are statistical outliers from this host-specific baseline of administrative activity.",
              "Use a clustering algorithm on 'mofcomp.exe' execution events based on features like user context, parent process, and file path. Known legitimate software installations and system updates will form dense clusters. Any execution that falls outside these clusters (i.e., is classified as an outlier) should be flagged for investigation."
            ]
          },
          {
            "description": "A process is created (Windows Event ID 4688) with parent 'WmiPrvSe.exe' and user context 'NT AUTHORITY\\SYSTEM', where the child process name is not on an established allowlist of expected system processes for that host profile.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially newly provisioned or recently patched systems",
            "action": [
              "Maintain an allowlist of legitimate child process image names for the parent process 'WmiPrvSe.exe' running as SYSTEM (e.g., 'unsecapp.exe', 'wmiprvse.exe'). Create a rule to monitor process creation (Event ID 4688) and alert on any child process spawned by 'WmiPrvSe.exe' as SYSTEM that is not on this allowlist.",
              "For each host, profile the set of processes spawned by 'WmiPrvSe.exe' as SYSTEM. Calculate the historical frequency of each child process name. Alert when a process is spawned that has never been seen before on that host or is in the bottom 1st percentile of frequency across the enterprise fleet.",
              "Correlate WMI-spawned SYSTEM processes (Event ID 4688) with preceding logon events (Event ID 4624) or system startup events. Use a sequence analysis model to learn common, legitimate sequences of events. Flag any sequence where an anomalous SYSTEM process is spawned by WMI shortly after a logon or startup event."
            ]
          },
          {
            "description": "A WMI subscription creation event (Windows Event ID 5861) is followed by a corresponding deletion event (Windows Event ID 5860) for the same subscription objects within a short time frame (e.g., under 15 minutes).",
            "data_sources": [
              "Windows Event ID 5861",
              "Windows Event ID 5860"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, as this is a generic technique",
            "action": [
              "Create a stateful detection rule that monitors for a Windows Event ID 5861. Upon detection, it should track the unique subscription name. If a corresponding Event ID 5860 with the same name is observed on the same host within a defined window (e.g., 15 minutes), generate an alert for a suspicious transient WMI subscription.",
              "Calculate the average and standard deviation of the lifetime for all WMI subscriptions in the environment. Alert on any subscription whose lifetime (time between creation and deletion) is a statistical outlier, for example, more than 2 standard deviations below the mean lifetime.",
              "Use a time-series anomaly detection model on the rate of WMI subscription creation (Event ID 5861) and deletion (Event ID 5860) events per host. A sudden, correlated spike in both creation and deletion events within a short window, which deviates from the learned baseline, indicates a potential automated attack script using transient WMI."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]