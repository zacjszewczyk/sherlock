[
  {
    "information_requirement": "Has the adversary used Parent PID Spoofing for privilege escalation?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1134.004",
        "name": "Parent PID Spoofing",
        "evidence": [
          {
            "description": "A new process is created whose file hash matches a known malicious hash from threat intelligence feeds, specifically for tools known to perform PPID spoofing for privilege escalation.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All domain-joined Windows endpoints and servers, particularly Domain Controllers and critical application servers.",
            "action": [
              "Symbolic: For each process creation event (Windows Event ID 4688), calculate the hash of the file specified in the 'NewProcessName' field. Compare this hash against a continuously updated list of known malicious hashes from threat intelligence, specifically those tagged with 'T1134.004' or 'PPID Spoofing'. Generate a high-severity alert upon a match.",
              "Statistical: Profile the prevalence of all executable file hashes across the enterprise. Calculate the enterprise-wide rarity of each hash observed in process creation events. Flag any executable hash that appears on a very small number of machines (e.g., fewer than 5 or below the 1st percentile of prevalence) and is not part of a known software deployment, as it may represent a newly introduced malicious tool.",
              "Machine Learning: Utilize a supervised machine learning classifier (e.g., Random Forest, Gradient Boosting) trained on labeled process creation events. Features should include file hash reputation, process name, parent process name, command-line arguments, and user context. The model should predict the likelihood of a process being part of a PPID spoofing attack. Alert when the prediction score exceeds a predefined confidence threshold."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows a discrepancy where the 'Creator Process Name' (the actual spawner) differs from the 'Parent Process Name' (the spoofed parent), and the spoofed parent is a high-privilege process (e.g., lsass.exe, services.exe, wininit.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All domain-joined Windows endpoints and servers.",
            "action": [
              "Symbolic: Create a rule to trigger on every Windows Event ID 4688 where the 'Creator Process Name' field exists and is not equal to the 'Parent Process Name' field, AND the 'Parent Process Name' is in a watchlist of high-privilege system processes (e.g., 'lsass.exe', 'services.exe', 'wininit.exe', 'smss.exe').",
              "Statistical: For all events where 'Creator Process Name' differs from 'Parent Process Name', calculate the frequency of each unique ('Creator Process Name', 'Parent Process Name') tuple. Use a statistical outlier detection method, such as flagging any tuple that falls below the 5th percentile of frequency, to identify anomalous spoofing relationships that deviate from normal system behavior (like UAC elevations).",
              "Machine Learning: Develop an unsupervised clustering model (e.g., DBSCAN) using features from process creation events, including the creator process, spoofed parent process, child process name, and user context. The goal is to group normal spoofing behavior (e.g., UAC) into distinct clusters. Any event that is classified as noise or falls into a very small, isolated cluster should be flagged as a potential malicious PPID spoofing attempt."
            ]
          },
          {
            "description": "A new process is created with an elevated integrity level ('High' or 'System') whose parent is a high-privilege system process, and this specific parent-child process relationship is statistically rare compared to a historical baseline.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical infrastructure servers (e.g., Domain Controllers, Certificate Authorities) and administrative workstations.",
            "action": [
              "Symbolic: Define a static list of known-good parent-child relationships where the parent is a high-privilege process (e.g., 'services.exe' spawning 'svchost.exe', 'wininit.exe' spawning 'services.exe'). Alert on any observed high-privilege parent-child relationship from Windows Event ID 4688 that is not on this allowlist, especially if the child process integrity level is 'High' or 'System'.",
              "Statistical: Build a historical baseline of all parent-child process relationships over a 30-day period, calculating the frequency of each pair. For each new process creation where the parent is a high-privilege process, calculate the z-score of its frequency against the baseline distribution. Alert on any relationship with a z-score indicating extreme rarity (e.g., z > 3) or that has never been seen before.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., LSTM Autoencoder) on the sequence of process creations for each host. The model learns the normal patterns of process creation sequences. An alert is generated when a new process creation (specifically a rare high-privilege parent-child pair) causes a high reconstruction error, indicating a deviation from the learned normal sequence of operations for that machine."
            ]
          },
          {
            "description": "A process creation event shows a process with a 'Medium' integrity level ('Creator Process') spawning a new process with a 'High' integrity level, but the reported 'Parent Process' is not 'consent.exe', indicating a potential UAC bypass via PPID spoofing.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, especially for privileged users (developers, system administrators).",
            "action": [
              "Symbolic: Create a rule that triggers on Windows Event ID 4688 when the 'Token Elevation Type' is 'Type 1' or 'Type 2' (indicating full or limited elevation) AND the 'Parent Process Name' is NOT 'consent.exe'. This specifically targets elevation events that do not follow the standard UAC prompt workflow.",
              "Statistical: For all elevation events (where a child process has a higher integrity level than its creator), establish a baseline of the most common reported 'Parent Process Name' values (e.g., 'consent.exe', 'explorer.exe'). Calculate the entropy of the parent process name distribution for each user over time. A sudden drop in entropy or the appearance of a rare parent process in this context (e.g., 'svchost.exe') should be flagged for investigation.",
              "Machine Learning: Train a decision tree classifier to distinguish between legitimate UAC elevations and malicious bypasses. Features should include 'Creator Process Name', 'Parent Process Name', 'Child Process Name', user session type (interactive vs. remote), and time of day. The model can learn the rules that define legitimate elevation and flag any deviation as a potential bypass attempt."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using Parent PID Spoofing for defense evasion?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1134.004",
        "name": "Parent PID Spoofing",
        "evidence": [
          {
            "description": "A new process is created whose file hash matches a known malicious hash from threat intelligence, and its command line or parent process (e.g., explorer.exe) suggests an attempt to masquerade as legitimate system activity.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All domain-joined Windows endpoints and servers.",
            "action": [
              "Symbolic: For each process creation event (Windows Event ID 4688), calculate the hash of the 'NewProcessName' executable. Correlate this against a threat intelligence feed for hashes known to be used in defense evasion via PPID spoofing. Generate a high-severity alert on a match.",
              "Statistical: Analyze the command-line arguments for all newly created processes. Calculate the Shannon entropy for the command-line string of each process. Flag processes with unusually high entropy (suggesting obfuscation or packed data) that also have a common parent like 'explorer.exe' or 'svchost.exe', as this combination can indicate a malicious payload hiding its execution.",
              "Machine Learning: Use a supervised machine learning classifier trained on features like process hash reputation, parent process name, command-line length and entropy, and whether the process name matches a common system binary. The model's goal is to classify each process creation event as either 'benign' or 'evasive'. Alert when the 'evasive' classification probability is high."
            ]
          },
          {
            "description": "A process creation event (Windows Event ID 4688) shows the 'Creator Process Name' (e.g., WINWORD.EXE) differs from the reported 'Parent Process Name' (e.g., explorer.exe), where the reported parent is a common process used to evade parent-child relationship detections.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly those processing external documents (e.g., from email).",
            "action": [
              "Symbolic: Create a rule to trigger on Windows Event ID 4688 where 'Creator Process Name' is not equal to 'Parent Process Name', AND 'Creator Process Name' is a process that typically should not spawn children that need to hide (e.g., 'WINWORD.EXE', 'EXCEL.EXE', 'OUTLOOK.EXE'), AND the 'Parent Process Name' is a common trusted process (e.g., 'explorer.exe', 'svchost.exe').",
              "Statistical: For every instance of a 'Creator Process Name' / 'Parent Process Name' mismatch, build a frequency distribution of the ('Creator Process Name', 'New Process Name') tuples. Flag tuples that are statistically rare across the enterprise (e.g., occurring less than 5 times in 30 days), as this indicates an unusual process being spawned by an application like Word, which is then attempting to hide its origin.",
              "Machine Learning: Train a logistic regression model to predict the probability of malicious spoofing. Features should be one-hot encoded representations of the Creator Process, Parent Process, and Child Process. The model will learn which combinations are benign (e.g., related to UAC) and which are highly correlated with malicious activity (e.g., Office app creating PowerShell, but parented by explorer.exe)."
            ]
          },
          {
            "description": "A LOLBAS (e.g., powershell.exe, rundll32.exe) is launched where the parent-child relationship is statistically anomalous, and analysis of 'Creator Process Name' vs 'Parent Process Name' indicates spoofing is used to create this anomalous relationship.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows systems, with a focus on internet-facing servers and standard user workstations.",
            "action": [
              "Symbolic: Create a rule set that flags the execution of a LOLBAS (e.g., 'powershell.exe', 'mshta.exe', 'cmstp.exe') where the 'Creator Process Name' is an Office application or web browser, but the reported 'Parent Process Name' is 'explorer.exe'. Correlate this with network connections made by the LOLBAS process (via Zeek conn.log using Process GUID) to C2 domains.",
              "Statistical: For each LOLBAS, build a baseline of its legitimate parent processes and creator processes. Use a statistical test (e.g., Chi-squared test) to compare the observed distribution of parents/creators for a given host or user against the enterprise-wide baseline. A significant deviation indicates anomalous activity. For example, if 'powershell.exe' on a user's machine is suddenly parented by 'svchost.exe' far more than is normal, flag it.",
              "Machine Learning: Use an Isolation Forest algorithm on process creation events involving LOLBAS. Features should include user, host, parent process name, creator process name, and command-line parameters. The algorithm is designed to identify outliers, which in this context would be unusual LOLBAS executions that differ from the vast majority of benign executions."
            ]
          },
          {
            "description": "A seemingly legitimate process chain (e.g., explorer.exe spawning powershell.exe) is observed, but the parent process ('explorer.exe') is running in an anomalous context (e.g., as NT AUTHORITY\\SYSTEM, or in a non-interactive session like Session 0).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Remote Desktop Session Hosts, Citrix servers, and other multi-session environments.",
            "action": [
              "Symbolic: Create a rule to alert on any process creation event where the 'Parent Process Name' is 'explorer.exe' BUT the 'Subject User Name' associated with the parent process is 'NT AUTHORITY\\SYSTEM' or the 'Session ID' is 0. Legitimate interactive 'explorer.exe' instances run in the user's context and a non-zero session ID.",
              "Statistical: For every process spawned by 'explorer.exe', profile the distribution of the 'SubjectUserName' and 'SessionID' associated with the parent 'explorer.exe' process. Flag any instance where the user or session ID is a statistical outlier (e.g., a service account name, a session ID of 0) compared to the established baseline for interactive 'explorer.exe' usage.",
              "Machine Learning: Implement a time-series anomaly detection model on the parent-child process relationships for each user session. The model learns the typical sequence and context of processes spawned within a session. An alert is triggered if a process chain that appears normal (e.g., explorer.exe -> cmd.exe) occurs out of sequence or with anomalous attributes (like an unusual user context for the parent), indicating a high reconstruction error from the model."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]