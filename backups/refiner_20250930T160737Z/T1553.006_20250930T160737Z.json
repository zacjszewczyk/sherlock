[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by modifying code signing policies?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1553.006",
        "name": "Code Signing Policy Modification",
        "evidence": [
          {
            "description": "A process creation event is observed where the process image's file hash (e.g., SHA256) matches a known malicious tool (e.g., KDU, DSEFix) used for modifying code signing policies.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer Workstations, System Administrator Workstations, Critical Servers",
            "action": [
              "Symbolic: Create a detection rule that queries process creation logs (Windows Event ID 4688, Sysmon Event ID 1) and compares the file hash against a curated threat intelligence list of known malicious hashes associated with code signing abuse tools. Trigger a high-severity alert on any match.",
              "Statistical: For all newly observed file hashes not on a malicious list, calculate the prevalence of the hash across the enterprise. A hash with an extremely low prevalence (e.g., seen on < 0.1% of endpoints) that is associated with a process modifying system settings should have its risk score increased.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from process execution events, including file hash entropy, file path location, parent process, and command-line arguments. Use this model to classify executions as benign or suspicious, flagging those with a high probability of being malicious tools even without a prior hash match."
            ]
          },
          {
            "description": "A process creation event is recorded containing command-line arguments explicitly used to modify code signing policies, such as 'bcdedit.exe /set testsigning on' or 'bcdedit.exe /set nointegritychecks on'.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Developer Workstations, Endpoint fleet",
            "action": [
              "Symbolic: Implement a detection rule that searches command-line arguments in process creation logs (Windows Event ID 4688, Sysmon Event ID 1) for regular expressions matching known commands for disabling code signing (e.g., /(bcdedit|bcdedit\\.exe).*(set|deletevalue).*(testsigning|nointegritychecks)/i).",
              "Statistical: For each unique command-line execution involving 'bcdedit.exe', establish a baseline of normal usage per user and host. Calculate the historical frequency of such commands. An execution by a user or on a host with no prior history, or a command that is a statistical outlier (e.g., > 3 standard deviations from the mean user/host frequency), should be flagged for review.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on feature vectors of command-line arguments (e.g., using TF-IDF). This can group legitimate developer and administrator usage together and isolate anomalous or obfuscated variations of code signing modification commands as outliers."
            ]
          },
          {
            "description": "A registry modification event is logged, showing a change to a value within a key path controlling code signing policies, such as `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Config` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Policy`.",
            "data_sources": [
              "Windows Event ID 4657",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Workstations and Servers, Active Directory Certificate Services Servers",
            "action": [
              "Symbolic: Create a rule to monitor for any modification event (Windows Event ID 4657, Sysmon Event ID 13) to the specific registry keys and values that control code signing (e.g., HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Config\\*, HKLM\\SYSTEM\\CurrentControlSet\\Control\\CI\\Policy\\*). Alert on any write or delete operation to these paths initiated by a non-system process.",
              "Statistical: Profile the parent processes that modify security-related registry keys. Calculate the entropy of the process name and path that modifies the target keys. A process with a high entropy name (suggesting randomization) or a process running from an unusual path (e.g., C:\\Users\\...\\AppData\\Local\\Temp\\) that modifies these keys should be considered highly suspicious.",
              "Machine Learning: Apply time-series analysis to the volume of modification events for critical code signing registry keys. Train a model (e.g., ARIMA or LSTM) to predict the expected volume of changes. A sudden spike in modifications that significantly deviates from the predicted forecast indicates a potential coordinated attack."
            ]
          },
          {
            "description": "A code integrity or driver load event indicates a driver file failed signature validation (e.g., Windows Event ID 5038), and this event occurs within 30 minutes following a system reboot and a previously detected code signing policy change.",
            "data_sources": [
              "Windows Event ID 5038",
              "Sysmon Event ID 6",
              "Windows Event ID 6006"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint fleet, Virtual Desktop Infrastructure (VDI) fleet",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a 'Code Signing Policy Modified' alert is followed by a system reboot event (e.g., Windows Event ID 6006) and then a 'Driver Load Failed Signature Check' event (e.g., Windows Event ID 5038, Sysmon Event ID 6 where Signed is 'false') on the same host within a 30-minute window.",
              "Statistical: Establish a baseline for the rate of unsigned driver load failures per host and across the enterprise. Use percentile ranking to identify hosts with an unusually high rate of these failures (e.g., in the 99th percentile), which can uncover systems where signature enforcement is permanently disabled.",
              "Machine Learning: Use a sequence analysis model (e.g., a Hidden Markov Model) trained on sequences of system events (policy change, reboot, driver load). The model can learn the probability of transitioning between states. A sequence matching the 'policy change -> reboot -> unsigned driver load' pattern, which would be a low-probability sequence in a benign model, can be flagged as anomalous."
            ]
          },
          {
            "description": "A sequence of driver load events is observed where a known-vulnerable but legitimately signed driver is loaded, followed shortly by the loading of a second, unsigned or self-signed driver, indicating a 'Bring Your Own Vulnerable Driver' (BYOVD) attack pattern.",
            "data_sources": [
              "Windows Event ID 7045",
              "Sysmon Event ID 6",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "High-Value Target Workstations, Servers running Endpoint Detection and Response (EDR) agents",
            "action": [
              "Symbolic: Maintain a watchlist of file hashes and names for known vulnerable drivers. Create a rule that triggers when a driver from this list is loaded (Sysmon Event ID 6), and then within a 5-minute window on the same host, another driver is loaded that is unsigned (Sysmon Event ID 6 where Signed is 'false') or has an invalid signature.",
              "Statistical: For each driver load event, calculate the rarity of the driver's signer based on its certificate information. A driver signed by an extremely rare or never-before-seen entity that is loaded immediately after a known vulnerable driver should be flagged. This can help detect new or unknown malicious drivers used in BYOVD attacks.",
              "Machine Learning: Train a graph-based model where nodes are processes, files, and drivers, and edges represent interactions (e.g., 'loads', 'creates'). A BYOVD attack forms a specific subgraph pattern: `Process A -> loads -> Vulnerable Driver B -> loads -> Malicious Driver C`. Use graph pattern matching algorithms to detect this structure in real-time event data."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]