[
  {
    "information_requirement": "Is the adversary attempting to evade defenses using time-based methods? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497.003",
        "name": "Time Based Evasion",
        "evidence": [
          {
            "description": "A process executes a command line containing obfuscated or encoded content with keywords known to be used for time-based evasion (e.g., 'Start-Sleep', 'GetTickCount').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those with PowerShell v5+ logging enabled.",
            "action": [
              "Symbolic: Monitor Windows Event ID 4688 for command lines containing 'powershell -e' or 'powershell -enc'. For each, decode the Base64 payload and search for known malicious time-evasion keywords like 'Start-Sleep', 'Measure-Command', or 'GetTickCount'. Simultaneously, monitor Windows Event ID 4104 (PowerShell Script Block Logging) for the deobfuscated script content and apply the same keyword search.",
              "Statistical: For command lines identified as encoded PowerShell, calculate the Shannon entropy of the decoded script block. Establish a baseline entropy score for legitimate administrative scripts in your environment. Flag scripts with an entropy score exceeding the 95th percentile, as high entropy is often indicative of obfuscation or packing common in malware.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression, Random Forest) on a labeled dataset of command lines, using features such as command length, character frequency distribution, n-grams, and the presence of specific keywords. Use this model to classify new, unseen command lines as either benign or potentially malicious time-evasion attempts."
            ]
          },
          {
            "description": "A process invokes a native utility such as 'timeout.exe' or 'ping.exe' with parameters that cause an execution delay greater than an established operational baseline (e.g., > 5 minutes).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, especially those where interactive command-line usage is rare (e.g., production web servers, database servers).",
            "action": [
              "Symbolic: Create a detection rule to trigger on process creation events (Windows Event ID 4688) for 'timeout.exe' or 'ping.exe' where the command line arguments specify a long delay. Example patterns include 'timeout /t [number]' where number > 300, or 'ping -n [number] 127.0.0.1' where number > 300.",
              "Statistical: For all executions of 'timeout.exe' and 'ping.exe', extract the numeric argument for the delay. Calculate the 99th percentile for these values across the enterprise over a 30-day rolling window to establish a baseline. Alert on any execution where the delay value exceeds this dynamically calculated threshold.",
              "Machine Learning: Use time series analysis (e.g., ARIMA or SARIMA model) to monitor the frequency and magnitude of delay commands per host. An anomalous spike in the use of long delays on a host that does not typically exhibit such behavior can be flagged by the model as a deviation from its forecasted normal activity."
            ]
          },
          {
            "description": "A process is created and remains dormant for an anomalously long period before initiating its first network connection or file system modification.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, and network choke points (e.g., internet gateways, VPN concentrators) monitored by Zeek sensors.",
            "action": [
              "Symbolic: Create a stateful correlation rule that flags a process (from Windows Event ID 4688) that does not generate any corresponding network traffic (in Zeek conn.log) or file creation events (Windows Event ID 4663) within the first 60 seconds of its life, but subsequently initiates one of these actions after more than 10 minutes.",
              "Statistical: For each process name, calculate the time delta between its creation (Windows Event ID 4688) and its first outbound network connection (Zeek conn.log). Establish a baseline distribution of these deltas for common executables (e.g., 'chrome.exe', 'svchost.exe'). Alert on any process whose delay-to-network-activity falls more than 3 standard deviations from the mean for its process name.",
              "Machine Learning: Employ a clustering algorithm (e.g., DBSCAN) on process behavioral data. Use features such as [time_to_first_network_connection, time_to_first_file_modification, process_name_rarity, parent_process_name]. The algorithm will group normal process behaviors together; processes that fall into sparse clusters or are marked as noise, particularly those with very large delay values, should be flagged as anomalous 'sleeper' processes for investigation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to discover the environment using time-based methods? (PIR)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497.003",
        "name": "Time Based Evasion",
        "evidence": [
          {
            "description": "A process executes a rapid sequence of commands to query the system time, pause execution, and then query the time again, with the measured wall-clock time being significantly less than the requested pause duration.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on virtualized environments and sandboxes.",
            "action": [
              "Symbolic: Create a correlation rule that tracks process executions by Process ID. The rule should trigger if it observes a sequence like ['time /t' or 'Get-Date'] -> ['timeout /t X' or 'Start-Sleep -s X'] -> ['time /t' or 'Get-Date'] from the same PID within 60 seconds. The rule must then compare the actual time elapsed between the first and second time query events with the specified sleep duration 'X'. Flag as high confidence if (actual_elapsed_time < X * 0.5).",
              "Statistical: Monitor for processes that execute an unusually high number of time-query commands ('time /t', 'date /t') within their lifetime. Calculate a Z-score for the count of time queries per process, baselined against all other processes. A high Z-score (>3) combined with the presence of a sleep-inducing command from the same process significantly increases the likelihood of this technique.",
              "Machine Learning: Use a sequence analysis model, such as a Hidden Markov Model (HMM), trained on command sequences from both benign system administration and known malware. The model can learn to recognize the specific state transition sequence of (start -> query_time -> sleep -> query_time -> compare -> end) as a high-probability malicious pattern indicative of a sandbox check."
            ]
          },
          {
            "description": "A process executes an abnormally high number of time-related API calls or commands in a short period without corresponding productive activity, such as network or file I/O.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly those that are part of automated build or analysis pipelines.",
            "action": [
              "Symbolic: Create a threshold rule that triggers if a single process ID executes more than 20 time-query commands (e.g., 'time /t', 'date /t') within a 60-second window, without any corresponding network connections or file modifications logged for that process.",
              "Statistical: For each process over its lifetime, calculate the ratio of (count of time-query commands) / (count of all commands). Establish a baseline for this ratio across all processes in the environment using a 30-day rolling window. Flag processes that are in the 99.9th percentile of this ratio, as they are disproportionately focused on querying time relative to their other actions.",
              "Machine Learning: Apply an autoencoder-based anomaly detection model to process command-line sequences. Train the autoencoder on vast amounts of benign command sequences from your environment. A sequence consisting of rapid, repeated time queries ('API hammering') will result in a high reconstruction error from the model, indicating that this pattern is highly anomalous and does not conform to normal operational behavior."
            ]
          },
          {
            "description": "The execution of discovery-related commands (e.g., 'whoami', 'net user', 'ipconfig') is preceded by the termination of a process that was executing a long, scripted delay.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a focus on Domain Controllers, file servers, and other high-value assets that are likely targets for internal reconnaissance.",
            "action": [
              "Symbolic: Create a correlation rule that joins process events by parent-child relationships. Trigger an alert if a parent process spawns a child that runs a long delay (e.g., 'timeout /t > 300'), and immediately upon that child's termination, the same parent process spawns a discovery tool (e.g., 'whoami.exe', 'net.exe', 'ipconfig.exe').",
              "Statistical: Perform a time-of-day analysis on the execution of common discovery commands ('ipconfig', 'net user', 'systeminfo', etc.) across the enterprise. Plot the execution frequency per hour over a 30-day period. A sharp, recurring peak at an unusual, non-business hour (e.g., 2:05 AM daily) across multiple hosts is a strong statistical indicator of a scheduled, delayed payload used for discovery.",
              "Machine Learning: Use a causal inference model (e.g., Granger causality or a Bayesian network) to determine if the execution of a discovery command is conditionally dependent on the completion of a preceding 'sleep' process. By analyzing event timings and parent-child process trees, the model can assign a probability score that the sleep was a necessary precondition for the discovery, distinguishing it from coincidental, unrelated activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]