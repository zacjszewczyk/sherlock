[
  {
    "information_requirement": "Has an adversary forged Kerberos tickets to gain unauthorized credential access? (TA0006 - Credential Access)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1558.001",
        "name": "Golden Ticket",
        "evidence": [
          {
            "description": "A process executes on a Domain Controller, and its file hash matches a known hash for a credential dumping or ticket forging tool.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: On all Domain Controllers, monitor process creation events (Windows Event ID 4688, Sysmon Event ID 1) with command-line auditing enabled. Correlate the hashes of created process executables against a frequently updated CTI feed of hashes for known malicious tools like Mimikatz and Rubeus. An exact match triggers a high-severity alert.",
              "Statistical: For all process creation events on Domain Controllers, calculate the entropy of the process name and command-line arguments. Establish a baseline of entropy values for legitimate administrative processes. Alert on processes with names or arguments that fall into the 99th percentile of entropy, as adversaries often use randomized or obfuscated strings.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on features from process creation events, including parent process, user context, file path rarity, and command-line argument structure. The model should be trained to distinguish between benign administrative activity and processes indicative of credential dumping. Deploy this model to score all new process events on Domain Controllers in real-time."
            ]
          },
          {
            "description": "A Kerberos Ticket-Granting Ticket (TGT) or Ticket-Granting Service (TGS) request uses the RC4-HMAC encryption type, which is deprecated and commonly used by forging tools.",
            "data_sources": [
              "Windows Event ID 4768",
              "Windows Event ID 4769",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: On Domain Controllers, monitor Kerberos TGT (Event ID 4768) and TGS (Event ID 4769) requests. Create a high-fidelity alert for any ticket requested using the RC4_HMAC_MD5 encryption type (Ticket Encryption Type '0x17' in Windows events). Elevate the alert's priority if the request is for a privileged account (e.g., member of Domain Admins).",
              "Statistical: For all Kerberos requests, calculate the distribution of encryption types used per user account over a 30-day rolling window. Establish a baseline of typical encryption types for each user. Alert when an account, especially a privileged one, suddenly uses an encryption type (like RC4) that deviates from its historical baseline (e.g., a type never before seen for that user).",
              "Machine Learning: Use an anomaly detection model (e.g., Isolation Forest) on Kerberos ticket request events. Features should include Account Name, Service Name, Client Address, Encryption Type, and Ticket Options. The model learns normal combinations of these features and flags requests that are statistically improbable, such as a specific user from a new IP requesting a ticket for a rare service with a weak encryption cipher."
            ]
          },
          {
            "description": "A Ticket-Granting Service (TGS) request is observed from a client IP address for a specific user, but no corresponding Ticket-Granting Ticket (TGT) request was observed from that same client IP for that user within the valid ticket lifetime.",
            "data_sources": [
              "Windows Event ID 4768",
              "Windows Event ID 4769",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic to/from Domain Controllers",
            "action": [
              "Symbolic: For every TGS request (Event ID 4769 or Zeek kerberos.log with `request_type=TGS-REQ`), perform a stateful check. Query for a preceding TGT request (Event ID 4768 or Zeek kerberos.log with `request_type=AS-REQ`) from the same 'Client Address' for the same 'Target User Name' within the configured TGT lifetime (e.g., 10 hours). If no corresponding TGT request is found, generate a high-priority alert.",
              "Statistical: Establish a baseline ratio of TGT requests to TGS requests per client IP address over a 24-hour period. Monitor for significant deviations from this baseline. A sudden drop in the TGT:TGS ratio for a specific client (i.e., many TGS requests with few or no new TGT requests) indicates a potential anomaly that should be investigated.",
              "Machine Learning: Implement a time-series analysis model for each user account, tracking the sequence and timing of their Kerberos events (TGT requests, TGS requests). The model learns the typical cadence of ticket requests. An alert is triggered when a sequence deviates from the learned pattern, such as a TGS request appearing without a preceding TGT request within the expected time window, which the model flags as a temporal anomaly."
            ]
          },
          {
            "description": "The lifetime of a requested Kerberos authentication ticket (TGT) significantly exceeds the domain's maximum ticket lifetime policy, such as a ticket with a 10-year lifetime.",
            "data_sources": [
              "Windows Event ID 4768",
              "Zeek kerberos.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: On Domain Controllers, parse the ticket lifetime from every TGT request (Event ID 4768). Compare this value against the domain's configured maximum ticket lifetime policy. Generate a critical alert if the requested lifetime exceeds the policy, especially if it matches the common forged lifetime of 3650 days (10 years).",
              "Statistical: For all TGT requests (Event ID 4768), calculate descriptive statistics (mean, median, 99th percentile) for ticket lifetimes across the domain. Alert on any requested lifetime that is a statistical outlier (e.g., exceeds the 99.9th percentile or is more than 4 standard deviations above the mean), as this could indicate an adversary testing boundaries.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on TGT request events, with features like requested lifetime, client IP, and user account. The algorithm will group normal requests together. Requests that do not belong to any cluster are flagged as anomalous noise points. An unusually long ticket lifetime would likely cause a request to be flagged as noise."
            ]
          },
          {
            "description": "A single account conducts an anomalously high number of successful network logons (Logon Type 3) to distinct systems in a short period, inconsistent with baseline user behavior.",
            "data_sources": [
              "Windows Event ID 4624",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All servers and workstations",
            "action": [
              "Symbolic: Define a static threshold rule: alert if any single non-service account successfully authenticates via network logon (Event ID 4624, Logon Type 3) to more than 20 distinct hosts within a 1-hour window. This provides a basic tripwire for rapid lateral movement.",
              "Statistical: Aggregate successful network logon events (Event ID 4624, Logon Type 3) across all endpoints. For each user account, establish a baseline by calculating the 95th percentile of distinct hosts accessed per hour over a 30-day period. Continuously monitor for any hour where an account's activity exceeds its own historical 95th percentile.",
              "Machine Learning: Model lateral movement as a graph where nodes are hosts and edges are authentications. Use a time-series graph analysis model to learn the normal patterns of connectivity for each user. The model can detect anomalies such as a user suddenly connecting to a new, isolated cluster of servers, or the velocity of new connections increasing dramatically, both of which are indicative of behavior following the use of a golden ticket."
            ]
          },
          {
            "description": "A Kerberos service ticket is granted where authorization is based on a high-privilege SID (e.g., Enterprise Admins) present in the SID-History of the user's ticket.",
            "data_sources": [
              "Windows Event ID 4769"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers",
            "action": [
              "Symbolic: On Domain Controllers, monitor the 'Transited Services' field within Kerberos service ticket request events (Event ID 4769). Create a high-priority alert when this field is populated and the SID-History contains the SID of a high-privilege group (e.g., Enterprise Admins 'S-1-5-21-...-519', Domain Admins 'S-1-5-21-...-512').",
              "Statistical: For every account, create a list of SIDs that have legitimately appeared in its SID-History during a baseline period (e.g., after a domain migration). Store this as a known-good set for each user. Alert whenever a TGS request (Event ID 4769) for a user contains a SID in the 'Transited Services' field that is not in their established baseline set.",
              "Machine Learning: Train a classification model to identify malicious SID-History abuse. Features include the user account, the target service, the source IP, and a binary feature indicating if SID-History was used. The model would be trained on known-good data (e.g., post-migration activity) and known-bad patterns (e.g., injection of Enterprise Admin SID) to score new TGS requests with SID-History for their likelihood of being malicious."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]