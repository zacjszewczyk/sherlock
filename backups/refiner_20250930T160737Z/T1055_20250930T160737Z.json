[
  {
    "information_requirement": "Is the adversary elevating privileges via process injection?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A process, identified by a hash matching a known malicious indicator, is observed creating a remote thread in or writing to the memory of a separate, higher-privileged process.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations, Standard User Endpoints",
            "action": [
              "Symbolic: Correlate Sysmon Event ID 8 (CreateRemoteThread) or Event ID 10 (ProcessAccess) with a threat intelligence feed. Generate a high-priority alert if the SourceImage hash matches a known malicious hash and the TargetImage corresponds to a critical system process (e.g., lsass.exe, services.exe, wininit.exe).",
              "Statistical: For each Sysmon Event ID 8 or 10 event, analyze the SourceImage and TargetImage pair. Maintain a statistical baseline of common source/target process pairs across the enterprise. Calculate the frequency of each observed pair. Alert on pairs that fall below a low percentile threshold (e.g., < 1st percentile), indicating a rare and potentially suspicious interaction, especially when the target is a high-integrity process.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using features from Sysmon Event ID 8 and 10 logs, including SourceImage, TargetImage, GrantedAccess codes, and the enterprise-wide prevalence of the source executable. The model should be trained on labeled historical data to predict the likelihood that a new event represents a malicious process injection attempt."
            ]
          },
          {
            "description": "A process is observed gaining memory write access to a target process, immediately followed by the same source process creating a remote thread in the same target process, all within a short time window.",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Privileged Access Workstations",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a Sysmon Event ID 10 (ProcessAccess) with write permissions (e.g., GrantedAccess includes 0x1400 or 0x0020) is followed within 1 second by a Sysmon Event ID 8 (CreateRemoteThread) from the same SourceProcessGUID to the same TargetProcessGUID. Alert on this specific sequence.",
              "Statistical: Analyze the time delta between related Sysmon Event ID 10 and Event ID 8 events linked by Process GUIDs. Establish a distribution of these time deltas for all process interactions. Flag sequences where the time delta is a statistical outlier (e.g., > 3 standard deviations below the mean, indicating an unusually fast, programmatic sequence) as potentially malicious.",
              "Machine Learning: Use a sequence-aware model like a Recurrent Neural Network (RNN) to learn common sequences of process interactions on a host. Ingest a stream of events (ProcessAccess, CreateRemoteThread, etc.) and flag sequences that have a low probability of occurring based on the learned 'normal' behavior, indicating a deviation consistent with a process injection chain."
            ]
          },
          {
            "description": "A process running at a lower integrity level (e.g., Medium) is observed creating a remote thread in, or accessing the memory of, a process running at a higher integrity level (e.g., High, System).",
            "data_sources": [
              "Windows Event ID 8",
              "Windows Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Endpoints, Virtual Desktop Infrastructure (VDI) fleet, Multi-user Terminal Servers",
            "action": [
              "Symbolic: Create a rule to alert on any Sysmon Event ID 8 or 10 where the SourceProcessIntegrityLevel is 'Medium' and the TargetProcessIntegrityLevel is 'High' or 'System', or where SourceProcessIntegrityLevel is 'High' and TargetProcessIntegrityLevel is 'System'. This is a direct violation of the Windows integrity model and is highly suspicious.",
              "Statistical: For all processes, establish a baseline of the integrity levels they typically interact with. For a given process name (e.g., 'chrome.exe'), track the distribution of TargetProcessIntegrityLevel it accesses. Alert if a process suddenly starts interacting with integrity levels it has rarely or never accessed before, identified by a significant deviation from its historical statistical distribution.",
              "Machine Learning: Develop an anomaly detection model (e.g., Isolation Forest) based on integrity level transitions. Features would include SourceProcessIntegrityLevel, TargetProcessIntegrityLevel, SourceImage, and TargetImage. The model would learn normal integrity level interactions and flag any tuple of (Source, Target, Source IL, Target IL) that is rare and isolated from the main clusters of normal activity."
            ]
          },
          {
            "description": "A critical system process (e.g., svchost.exe, lsass.exe) exhibits anomalous behavior, such as initiating outbound network connections or spawning non-standard child processes, after being the target of a process access or remote thread creation event.",
            "data_sources": [
              "Windows Event ID 1",
              "Windows Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Internet Gateway/Egress Points, Core Network Switches",
            "action": [
              "Symbolic: After detecting a potential injection event targeting a system process like lsass.exe, monitor that specific process instance (TargetProcessGUID). Alert if that process instance subsequently spawns a child process of cmd.exe or powershell.exe (Sysmon Event ID 1) or initiates an external network connection (Sysmon Event ID 3).",
              "Statistical: For each critical system process (e.g., svchost.exe, lsass.exe), build a statistical baseline of its normal child processes and network destinations. Using frequency analysis, alert when a new child process or destination appears that is a statistical outlier (e.g., not in the top 99% of historical activity). Calculate the entropy of the command line arguments for child processes; a sudden spike in entropy can indicate obfuscated commands.",
              "Machine Learning: Implement a time-series anomaly detection model on network traffic originating from critical system processes. Monitor metrics like bytes sent, connection frequency, and destination port entropy over time. An alert is generated when the model detects a significant, unexplainable deviation from the established temporal pattern, suggesting a change in behavior post-injection."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses via process injection?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055",
        "name": "Process Injection",
        "evidence": [
          {
            "description": "A named pipe is created or connected to, and its name matches a known indicator of compromise associated with offensive security tools (e.g., Cobalt Strike, Metasploit) or malware.",
            "data_sources": [
              "Windows Event ID 17",
              "Windows Event ID 18"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers",
            "action": [
              "Symbolic: Monitor Sysmon Event IDs 17 and 18 for the PipeName field. Match the PipeName against a regularly updated threat intelligence list of malicious pipe names using exact matches and regular expressions (e.g., \\\\.\\pipe\\msagent_[0-9a-f]{4}). Generate a high-priority alert on any match.",
              "Statistical: For all PipeName values observed from Sysmon Event IDs 17 and 18, calculate the Shannon entropy of the name string. Establish a baseline distribution of entropy scores for legitimate pipe names. Alert on any pipe name whose entropy score is a statistical outlier (e.g., exceeds the 99th percentile), as this may indicate algorithmic generation by malware.",
              "Machine Learning: Train a classification model to distinguish between benign and malicious pipe names. Features could include string length, character distribution, presence of numbers, entropy, and n-gram frequencies. Use this model to score new pipe names and alert on those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A process loads a dynamic-link library (DLL) that is either unsigned or has a hash that is statistically rare across the enterprise environment.",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers",
            "action": [
              "Symbolic: Monitor Sysmon Event ID 7 (Image Loaded) and create a rule to alert whenever the Signed field is 'false' AND the ImageLoaded path is in a user-writable directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\Windows\\Temp\\).",
              "Statistical: For every DLL loaded (Sysmon Event ID 7), calculate its enterprise-wide prevalence based on its file hash (Hashes field). Maintain a running count of how many unique hosts have loaded each DLL hash. Alert when a process loads a DLL whose hash prevalence is below a dynamic threshold (e.g., seen on fewer than 5 hosts or <0.1% of the fleet).",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on loaded DLLs. Features for clustering could include prevalence, signed status, entropy of the file path, and characteristics of the loading process. Outlier clusters identified by the model would represent groups of anomalous DLL load events that warrant investigation."
            ]
          },
          {
            "description": "A trusted system process (e.g., explorer.exe, svchost.exe, lsass.exe) loads a DLL from a path that is not a standard system directory (e.g., not in System32 or WinSxS).",
            "data_sources": [
              "Windows Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Domain Controllers, Application Servers",
            "action": [
              "Symbolic: Create an allowlist of standard DLL load paths for critical processes (e.g., svchost.exe should only load from C:\\Windows\\System32\\). Monitor Sysmon Event ID 7 and alert whenever one of these critical processes loads a DLL from a path not on its specific allowlist.",
              "Statistical: For each parent process name (Image field in Event ID 7), build a statistical profile of its common ImageLoaded directories. Use frequency analysis to identify the top 99% of source directories. Alert when a process loads a DLL from a directory that is not in its established baseline set.",
              "Machine Learning: Train a one-class SVM (Support Vector Machine) model for each critical process, using the path of the loaded DLL as a feature. The model learns the boundary of 'normal' load locations. Any new DLL load event that falls outside this learned boundary is flagged as an anomaly."
            ]
          },
          {
            "description": "A process that does not typically make network connections (e.g., notepad.exe, calculator.exe) initiates an outbound network connection, particularly after being the target of a remote thread creation or memory write event.",
            "data_sources": [
              "Windows Event ID 10",
              "Windows Event ID 8",
              "Windows Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standard User Endpoints, Internet Gateway/Egress Points",
            "action": [
              "Symbolic: Maintain a static list of processes that should never make network connections (e.g., notepad.exe, mspaint.exe, calculator.exe). Monitor Sysmon Event ID 3 and Zeek conn.log and generate a high-priority alert if any process on this list initiates an outbound connection.",
              "Statistical: For every process in the environment, calculate a baseline of its network activity (e.g., connections per hour, unique destinations). Use a simple statistical threshold to alert if a process with a historical average of 0 connections/hour makes a connection. This identifies 'newly seen' network behavior for a process.",
              "Machine Learning: Use a time-series anomaly detection model on the network connection events for a process instance (ProcessGUID). After a Sysmon Event 10 or 8 targets a process, begin monitoring its network behavior. The model would detect a sudden state change from 'no network activity' to 'network activity', flagging it as an anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]