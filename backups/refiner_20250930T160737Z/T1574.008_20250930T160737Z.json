[
  {
    "information_requirement": "Is the adversary maintaining persistence by hijacking application search order?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "A new executable file is created in a directory included in the system or user's PATH, and its hash matches a known malicious signature.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System PATH directories (e.g., C:\\Windows\\System32), User profile directories, Common application directories",
            "action": [
              "Symbolic: Monitor file creation events (Windows Event ID 4663) for new executables (.exe, .com, .scr) in common PATH directories. Upon creation, hash the file and compare it against a threat intelligence feed of known malware hashes. Alert on any match.",
              "Statistical: For each file creation event, calculate the entropy of the new filename. Establish a baseline of filename entropy for executables in common directories. Flag files with unusually high entropy filenames (e.g., 95th percentile or higher for a given directory) as this can indicate random name generation by malware.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features from file creation events, including file path, filename entropy, file size, and whether the hash is known-good. Use the model to predict the likelihood that a newly created executable is malicious. High-probability classifications should trigger an alert."
            ]
          },
          {
            "description": "A file with a high-priority PATHEXT extension (e.g., .com, .bat) is created in an application's directory, where the filename matches a legitimate system executable (e.g., 'net.com' created to hijack calls to 'net.exe').",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Common application installation directories (e.g., C:\\Program Files), System32 and SysWOW64 directories, User profile directories",
            "action": [
              "Symbolic: Create and maintain a watchlist of critical system executable names (e.g., 'net', 'ipconfig', 'findstr'). Monitor file creation events (Windows Event ID 4663) for new files matching these names but with a higher-precedence extension from the PATHEXT variable (e.g., .com, .bat) in any directory within the system's search path. Alert on any such creation.",
              "Statistical: For each process execution (Windows Event ID 4688), parse the process name and its full path. For common system processes, calculate the frequency of their execution paths across the enterprise. An execution from a path that falls below a low frequency threshold (e.g., seen in <1% of executions for that process name) is anomalous and should be flagged.",
              "Machine Learning: Use a time-series analysis model (e.g., ARIMA) on the count of executions for each system utility from non-standard paths. A sudden spike in the time-series that cannot be explained by patching or administrative activity could indicate a widespread search order hijacking campaign. The model can forecast expected counts and flag significant deviations."
            ]
          },
          {
            "description": "A legitimate parent process spawns a child process with a common system utility name, but the child process executes from an unexpected, non-standard path instead of a trusted system directory.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on all endpoints and servers, Parent process memory space, Network egress points",
            "action": [
              "Symbolic: For every process creation event (Windows Event ID 4688), check if the child process name is a common system utility (e.g., 'net.exe', 'cmd.exe') and if its execution path is not in the expected system directory (e.g., not 'C:\\Windows\\System32\\net.exe'). Alert if the parent process is a common user application (e.g., 'winword.exe', 'chrome.exe').",
              "Statistical: Build a baseline of parent-child process relationships and child process execution paths. For each parent process, calculate the probability distribution of its child processes' paths. Flag any execution where the path has a very low probability (e.g., <0.01%) for that specific parent-child pair.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on process execution events, using features like parent process name, child process name, and child process path. Normal activity will form dense clusters. Executions that are marked as noise or fall into very small, sparse clusters are outliers and represent potentially hijacked process executions."
            ]
          },
          {
            "description": "A process executing from a non-standard directory and masquerading as a common system utility initiates an external network connection.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process and network event logs, Network gateway and firewall logs, DNS server logs (Zeek dns.log)",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with network connection events (Zeek conn.log or Windows Event ID 5156). Create a rule that alerts when a process with a name of a common utility (e.g., 'svchost.exe') but an executable path in a user-writable directory (e.g., 'C:\\Users\\*') initiates an outbound connection to an IP address on a known bad reputation list.",
              "Statistical: For masquerading processes, analyze their network connections in Zeek conn.log. Calculate the entropy of requested domain names (from Zeek dns.log) or the JA3 hash distribution of their TLS connections. A high entropy score for domains or a connection to a JA3 hash with a low global prevalence is a strong statistical indicator of C2 activity.",
              "Machine Learning: Train a classifier to distinguish between benign and malicious network traffic using features from Zeek logs (connection duration, bytes sent, protocol, JA3 hash). Apply this model to traffic originating from processes identified as potentially hijacked (i.e., system utility name, non-standard path). A 'malicious' classification should be a high-severity alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by hijacking application search order?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "A file is created in a world-writable directory (e.g., C:\\Windows\\Temp) that is also in a privileged application's search path, and the file's hash matches a known privilege escalation exploit.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "World-writable directories (C:\\Windows\\Temp, C:\\ProgramData), Application directories for services running as SYSTEM, Scheduled task directories",
            "action": [
              "Symbolic: Monitor file creation events (Windows Event ID 4663) in known-vulnerable, world-writable directories. Hash all new executables/DLLs and compare against a specific threat intelligence feed for privilege escalation tools (e.g., Juicy Potato variants). Alert on any match.",
              "Statistical: Analyze permissions of newly created files in application directories. A file created by a low-privilege user in a directory owned by SYSTEM or Administrator is anomalous. Calculate a risk score based on the disparity between the file creator's privileges and the directory owner's privileges. A high score indicates potential pre-staging for privilege escalation.",
              "Machine Learning: Train a classification model to identify suspicious file write events. Features should include the writing process's integrity level, the target directory's permissions, the file extension, and if the directory is in the system PATH. The model can predict if a file write is part of a likely privilege escalation attempt."
            ]
          },
          {
            "description": "A file is created in a directory known to be searched by a specific, high-privilege, and commonly vulnerable application (e.g., installer, updater), where the filename matches a DLL or executable the application is known to load insecurely.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Directories of third-party software updaters and installers, Driver installation paths, Staging directories for privileged applications",
            "action": [
              "Symbolic: Maintain a list of known vulnerable applications and the specific executables/DLLs they load insecurely. Create a detection rule that triggers on a file creation event (Windows Event ID 4663) for one of these specific filenames in a vulnerable path, immediately followed by the vulnerable application loading it (Windows Event ID 4688).",
              "Statistical: Profile the file modification and creation rates in directories containing privileged applications. Use time-series analysis to establish a baseline. A sudden burst of file creations in a directory that is normally static, especially outside of a scheduled patch window, is statistically anomalous and warrants investigation.",
              "Machine Learning: Use sequence analysis on event logs. Model the normal sequence of events for a software installation (e.g., installer process starts -> files written to temp -> files moved to Program Files). An observed sequence that deviates, such as a file write into the Program Files directory by an unrelated process just before the updater runs, can be flagged by a sequence-based anomaly detection model (e.g., an LSTM autoencoder)."
            ]
          },
          {
            "description": "A process running with high integrity (e.g., SYSTEM, Administrator) spawns a child process that matches the name of a common system utility but executes from an unusual path.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on servers running high-privilege services, Domain Controller event logs, Endpoint security agent logs",
            "action": [
              "Symbolic: Filter process creation events (Windows Event ID 4688) for parent processes running with a 'High' or 'System' integrity level. Alert if such a parent spawns a child process with a common utility name (e.g., 'powershell.exe') from a path not in 'C:\\Windows\\System32' or other trusted system directories.",
              "Statistical: For every process running as SYSTEM, profile the set of child processes it normally spawns and their locations. Calculate the Shannon entropy of the child process paths. A sudden increase in entropy, indicating executions from more varied and unusual locations, is a statistical red flag for hijacking of a privileged process.",
              "Machine Learning: Train a one-class SVM on features of legitimate privileged process executions (e.g., parent image path, child image path, command line). This model learns a boundary around normal behavior. Any new execution that falls outside this boundary is classified as an anomaly, indicative of a potential privilege escalation event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking application search order?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking",
        "evidence": [
          {
            "description": "A file is created with a name that masquerades as a legitimate system utility or a component of a security tool, but its file hash matches a known malicious signature or it is unsigned.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Security product installation directories (e.g., C:\\Program Files\\Windows Defender), System32 directory, Directories of trusted, signed applications",
            "action": [
              "Symbolic: Monitor file creation events (Windows Event ID 4663). Maintain a list of filenames for critical security tools (e.g., 'MsMpEng.exe'). Alert if a file with a matching name is created or loaded from a non-standard path, or if its signature is invalid or its hash is on a blocklist.",
              "Statistical: Periodically scan directories of trusted applications. For each executable/DLL, check its digital signature. Calculate the percentage of unsigned files in these directories. A sudden increase in the proportion of unsigned files is a statistical anomaly warranting investigation.",
              "Machine Learning: Use an autoencoder trained on the features of legitimate, signed files (e.g., sections, imports/exports, signature status, entropy). When a new file masquerading as a trusted component is detected, feed its features into the autoencoder. A high reconstruction error suggests the file is structurally different from legitimate files and is likely malicious."
            ]
          },
          {
            "description": "A process executing from a non-standard path and masquerading as a system utility is launched with command-line arguments that are syntactically valid for the legitimate utility it is impersonating.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint command line audit logs, SIEM containing process execution data, User profile and temp directories",
            "action": [
              "Symbolic: For processes matching system utility names (e.g., 'net.exe') but running from non-standard paths, parse their command line arguments (from Event ID 4688). If the arguments match known suspicious patterns (e.g., 'net user <user> /add'), generate a high-severity alert.",
              "Statistical: For each common system utility, build a baseline of its command-line argument structure (e.g., argument count, length). Calculate the Mahalanobis distance of a new command line's features from the baseline distribution. A large distance indicates a statistically unusual command line that may be used for malicious purposes.",
              "Machine Learning: Train a language model (e.g., n-gram model) on legitimate command-line invocations for system utilities. Use this model to calculate the perplexity of a new command line. A command line with very high perplexity, executed by a masquerading process, is highly suspicious of being crafted to evade simple detections."
            ]
          },
          {
            "description": "A trusted, signed parent process (e.g., a web browser, Office application) spawns a child process from an unusual path, where the child process name is a common system utility or DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from user workstations, Application logs for browsers and Office suite, File system audit logs in user AppData directories",
            "action": [
              "Symbolic: Create a rule that triggers when a parent process signed by a trusted publisher (e.g., Microsoft, Google) spawns a child process from a user-writable directory (e.g., 'AppData\\Local\\Temp') that is not a known installer or updater behavior.",
              "Statistical: For each trusted parent process (e.g., 'winword.exe'), maintain a frequency count of all child process paths it spawns. Flag any child process execution where the path is a statistical outlier (e.g., in the bottom 1st percentile of frequency). This 'least seen path' analysis can uncover novel evasion techniques.",
              "Machine Learning: Use a graph-based anomaly detection approach. Model normal process relationships as a graph where nodes are processes and edges represent parent-child relationships, weighted by frequency. A newly observed, low-weight edge originating from a 'trusted' node to a node in an unusual path (e.g., 'chrome.exe' -> 'C:\\Users\\Public\\svchost.exe') would be flagged as a structural anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]