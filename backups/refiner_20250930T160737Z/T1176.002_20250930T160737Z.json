[
  {
    "information_requirement": "Is the adversary maintaining persistence through compromised IDE extensions?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1176.002",
        "name": "IDE Extensions",
        "evidence": [
          {
            "description": "An IDE extension file's hash matches a known malicious signature from a threat intelligence feed, or a network connection initiated by an IDE process communicates with a destination IP or domain identified as malicious.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, build servers, network egress points, threat intelligence platforms.",
            "action": [
              "Symbolic Logic: Continuously monitor file creation/modification events (Windows Event ID 4663) in common IDE extension directories (e.g., `%USERPROFILE%\\.vscode\\extensions`, `%APPDATA%\\JetBrains\\<IDE>\\plugins`). Upon detection, hash the file and compare it against a threat intelligence feed of known malicious file hashes. Concurrently, join network connection logs (Zeek conn.log) with DNS query logs (Zeek dns.log) and cross-reference destination IPs and domains against a CTI feed of known malicious indicators. Alert on any match.",
              "Statistical Method: For each destination domain queried by an IDE process (identified by correlating Zeek dns.log with process execution logs like Windows Event ID 4688), calculate its domain name entropy and its rarity across the enterprise over a 30-day rolling window. Flag domains with high entropy (e.g., > 3.5 bits/character) or those in the top 1% for rarity (least frequently accessed) for analyst review.",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest) trained on features from network connections originating from IDE processes. Features should include connection duration, bytes sent/received (from Zeek conn.log), destination IP/domain reputation, domain age, and JA3/JA3S hashes. The model will classify each connection as 'benign' or 'malicious C2'. Continuously score live traffic and alert on connections classified as malicious with a high confidence score (e.g., > 0.90)."
            ]
          },
          {
            "description": "A known IDE process (e.g., code.exe, idea64.exe) spawns a child process with suspicious command-line arguments, such as encoded PowerShell commands, hidden window flags, or network connection utilities.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, virtual desktop infrastructure (VDI) used for development, build servers.",
            "action": [
              "Symbolic Logic: Create a detection rule that monitors process creation events (Windows Event ID 4688) where the parent process name is a known IDE executable. The rule should trigger if the child process command line contains high-risk patterns identified via regular expressions, such as `powershell -enc`, `powershell -w hidden`, `cscript.exe //E:JScript`, `curl`, `wget`, or `netcat`.",
              "Statistical Method: For each IDE parent process, build a baseline of normal child process names and command-line argument structures. Calculate the frequency of each parent-child process relationship. Use a statistical measure like z-score to identify anomalous process chains (e.g., a z-score > 3 for the rarity of a specific child process being spawned by code.exe). Additionally, calculate the entropy of command-line arguments; a high entropy score can indicate obfuscated or encoded commands and should be flagged.",
              "Machine Learning: Train an unsupervised anomaly detection model, such as an autoencoder or isolation forest, on vectorized command-line arguments from processes spawned by IDEs. The model learns a representation of 'normal' command-line activity. Flag any new process whose command-line reconstruction error or anomaly score exceeds a dynamically set threshold (e.g., the 99th percentile of reconstruction errors from the training data)."
            ]
          },
          {
            "description": "An IDE extension is installed from a network source not on an approved allowlist, or extension files are written to disk by a process other than a known legitimate IDE or package manager.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, network egress points, software repositories.",
            "action": [
              "Symbolic Logic: Maintain an allowlist of approved IDE marketplace domains (e.g., `marketplace.visualstudio.com`, `plugins.jetbrains.com`). Create a rule that joins network logs (Zeek conn.log) with file modification events (Windows Event ID 4663) in extension directories. Alert if a file is written to an extension directory following a download from a domain not on the allowlist. Also, alert if a file write event (4663) in an extension directory has a parent process (from event 4688) that is not a recognized IDE or package manager (e.g., `cmd.exe`, `powershell.exe`).",
              "Statistical Method: Profile the source domains for all downloads that result in file writes to IDE extension directories. For each domain, calculate its prevalence (number of unique hosts downloading from it) across the organization. Flag downloads from domains in the bottom 5th percentile of prevalence (i.e., very rare sources) for further investigation, as this may indicate sideloading from an unusual source.",
              "Machine Learning: Use a time-series anomaly detection model (e.g., ARIMA) to monitor the volume of data downloaded from known and unknown extension repositories. A sudden, anomalous spike in downloads from a new or rare source could indicate a coordinated supply chain attack or widespread installation of a malicious extension. The model should be trained on historical network traffic volume and alert when a new observation falls outside the predicted confidence interval."
            ]
          },
          {
            "description": "An IDE process spawns a child process not typically associated with development activities (e.g., cmd.exe, net.exe) or performs file access operations (read/write/delete) on sensitive files or directories such as credential stores, SSH keys, or system configuration files.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, servers hosting sensitive user profiles (e.g., file servers, domain controllers), code repositories.",
            "action": [
              "Symbolic Logic: Create a high-fidelity rule that alerts when a process with a parent process name of a known IDE (e.g., `code.exe`) accesses sensitive files or directories. Use Windows Event ID 4663 and define target paths such as `%USERPROFILE%\\.ssh\\`, `%USERPROFILE%\\.aws\\credentials`, browser credential databases, or attempts to write to system directories like `C:\\Windows\\System32`.",
              "Statistical Method: For each user, profile the set of file paths and parent directories typically accessed by their IDE processes during a 30-day period. Store this as a 'project scope' baseline. For each new file access event (Windows Event ID 4663), calculate the Jaccard distance between the new file's parent directory and the user's established baseline of directories. An unusually high distance score (e.g., > 0.8) indicates the IDE is accessing files far outside its normal scope and should be flagged.",
              "Machine Learning: Implement a graph-based anomaly detection algorithm. Model process relationships (parent-child from Event ID 4688) and file accesses (process-file from Event ID 4663) as a large graph. Use algorithms like PageRank or community detection to identify normal clusters of activity (e.g., IDE -> compiler -> source file). Flag nodes or edges that are outliers or bridge disparate, normally unconnected communities (e.g., an IDE process directly accessing a browser credential file)."
            ]
          },
          {
            "description": "A network connection originating from an IDE process exhibits a periodic, 'heartbeat' pattern indicative of C2 beaconing, or the total volume of data egress over a single connection significantly exceeds established baselines for that user or host.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, network egress points (firewalls, proxies), DNS servers.",
            "action": [
              "Symbolic Logic: Join process creation logs (Windows Event ID 4688) with network connection logs (Zeek conn.log) on process ID and timestamp to attribute network activity to IDEs. Alert on any connection from an IDE process to a destination IP/domain on a threat intelligence blocklist. Further, alert if the `conn_state` in Zeek conn.log is `S0` and the `service` is `dns`, but the destination port is not 53, indicating potential DNS tunneling.",
              "Statistical Method: For each source IP/IDE process pair, group connections by destination IP and calculate the variance of the time delta between consecutive connections (inter-arrival time). A very low variance indicates a fixed-interval beacon. Alert when the standard deviation of inter-arrival times is below a threshold (e.g., < 1.0 seconds). Additionally, for each connection, calculate the total bytes sent (`orig_bytes`) and flag any connection where the volume exceeds the 99th percentile of historical data sent by that user's IDE.",
              "Machine Learning: Apply a time-series decomposition model (e.g., STL) to the network traffic data (bytes and connection counts) originating from IDE processes, aggregated per minute. The model separates the data into trend, seasonal, and residual components. A sudden, sharp spike in the residual component indicates an anomaly that is not explained by normal daily or weekly patterns. This can detect both beaconing (as a new seasonal pattern) and large, unexpected data transfers."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]