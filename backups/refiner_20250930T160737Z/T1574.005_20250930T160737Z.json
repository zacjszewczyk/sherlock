[
  {
    "information_requirement": "Is the adversary establishing persistence by exploiting executable installer file permissions weakness?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file modification event on a registered service executable is observed within a short time window (e.g., < 60 seconds) of a service start event for that same service, which then spawns a child process not present in its historical baseline.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Windows Event ID 7036",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Service Control Manager logs, process creation logs, and file system audit logs on all Windows servers and workstations.",
            "action": [
              "Create a correlation rule that triggers when Event A (File Write on a service's executable path), Event B (Service Start for the same service via Event ID 7036), and Event C (Process Create from the parent service process) occur in sequence within 60 seconds, and the child process in Event C is a command interpreter (e.g., cmd.exe, powershell.exe).",
              "For each service, baseline its normal child processes and their command-line arguments. Calculate the Shannon entropy of command lines for any new child processes. Alert if a service spawns a child process with a command-line entropy score that is more than 3 standard deviations above the mean for that parent service, suggesting obfuscated or complex commands.",
              "Use a sequence-based anomaly detection model (e.g., an LSTM Autoencoder) trained on event sequences (file writes, service starts, process creations) for each host. Flag any sequence of events that has a high reconstruction error as anomalous and potentially indicative of a service hijack for persistence."
            ]
          },
          {
            "description": "A legitimate service process, which was recently modified, exhibits anomalous behavior such as spawning rare child processes or initiating external network connections inconsistent with its baseline.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint process creation logs, network connection logs from endpoints, and network gateway flow logs.",
            "action": [
              "Alert when a process associated with a Windows Service (e.g., svchost.exe with specific parameters) spawns a command shell (cmd.exe, powershell.exe) or initiates a network connection to an IP address present on a threat intelligence blocklist.",
              "For each service process, build a statistical baseline of its network behavior (destination ports, data volume, connection frequency) using Zeek conn.log. Alert when a service's network activity deviates significantly, e.g., connecting to a port in the 99th percentile of rarity for that service or transmitting a data volume 3 standard deviations above its daily average.",
              "Develop a time-series forecasting model (e.g., ARIMA) for the network traffic volume generated by each critical service process. Alert when the observed traffic significantly exceeds the forecasted volume with its confidence interval, suggesting anomalous data exfiltration or C2 communication."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary elevating privileges using executable installer file permissions weakness?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event to an executable (.exe, .dll) is initiated by a process running with a low or medium integrity level, followed within a short time window by a process creation event for that same executable, where the new process is running with a high or system integrity level.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Temporary directories (e.g., %TEMP%, %APPDATA%, C:\\ProgramData), user profile directories, and application installation directories on all Windows endpoints.",
            "action": [
              "Create a correlation rule that triggers when: (1) a file creation event for an executable is initiated by a process with 'IntegrityLevel: Medium' or 'Low', and (2) within 5 minutes, a process creation event for the same executable path shows an 'IntegrityLevel: High' or 'System'.",
              "Monitor all process creation events. Calculate the frequency of executables in user-writable locations (e.g., C:\\Users\\*) being executed with System integrity. Alert when an executable from such a location runs with System integrity and this behavior is statistically rare (e.g., has occurred fewer than 5 times in the last 90 days across the enterprise).",
              "Train a graph-based anomaly detection model on process-file interactions. Represent processes and files as nodes and interactions (write, execute) as edges. Flag any path in the graph representing 'User Process -> Writes -> File -> Executed By -> System Process' as a high-risk anomaly, especially if this path structure is novel."
            ]
          },
          {
            "description": "A process creation event is logged where the user context is a privileged account (e.g., NT AUTHORITY\\SYSTEM) and the image path of the executable points to a non-standard, user-writable directory (e.g., C:\\Users\\*, C:\\ProgramData, C:\\PerfLogs, %TEMP%).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs across all endpoints, focusing on executions originating from user-writable and temporary directories.",
            "action": [
              "Create a SIEM rule to alert on any process creation event where `User` is 'NT AUTHORITY\\SYSTEM' and `ImagePath` starts with 'C:\\Users\\', 'C:\\ProgramData', 'C:\\PerfLogs', or contains '\\AppData\\'.",
              "Baseline the execution paths for all processes running as SYSTEM. Calculate the rarity of each execution path across the environment. Alert when a SYSTEM process executes from a path that falls in the bottom 1st percentile of historical frequency, indicating a highly unusual location.",
              "Use a clustering algorithm (e.g., DBSCAN) on features of SYSTEM-level process executions (image path, parent process, command line arguments). Identify clusters of normal behavior. Flag any execution that does not belong to a known cluster (i.e., is identified as noise/outlier) as a potential privilege escalation event."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by hijacking trusted executables?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event modifies a digitally signed executable in a protected directory (e.g., C:\\Program Files\\), and the new file version is either unsigned, has an invalid signature, or is signed by an untrusted publisher.",
            "data_sources": [
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Protected system and application directories (e.g., 'Program Files', 'Windows') on all endpoints and servers.",
            "action": [
              "Upon a file write event to a known signed executable, trigger a script to verify the new file's signature. Alert if the signature status is 'Invalid', 'Untrusted', or if the signer is not on an approved publisher list.",
              "Maintain a database of legitimate signers for applications in the environment. For any newly observed signer of a modified executable, calculate its prevalence across the enterprise. Flag modifications signed by a publisher seen on fewer than 0.1% of endpoints as suspicious.",
              "Train a classification model to distinguish between legitimate patch events and suspicious file modifications. Features can include the source process name, time of day, file path, and signature status. A 'suspicious' classification on a critical system file triggers a high-severity alert."
            ]
          },
          {
            "description": "A parent process known to host legitimate services (e.g., 'services.exe', 'svchost.exe') creates a child process that is a command-line interpreter, a scripting engine, or is otherwise not part of its established baseline of legitimate child processes.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs on all Windows hosts, particularly Domain Controllers and Application Servers where services are critical.",
            "action": [
              "Alert when a process creation event shows a ParentImage of 'services.exe' or 'svchost.exe' and an Image of 'cmd.exe', 'powershell.exe', 'wscript.exe', 'cscript.exe', or 'rundll32.exe'.",
              "For each critical parent process (like 'svchost.exe'), build a frequency table of its child processes. Alert when a child process is spawned that has never been seen before or is in the lowest 1st percentile of historical frequency for that parent.",
              "Train a Parent-Child process relationship model using a graph database. The model learns the normal process graph of the system. Alert when a new edge (a new parent-child relationship) is created that the model flags as a high-probability anomaly, especially if the parent is a trusted service host."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]