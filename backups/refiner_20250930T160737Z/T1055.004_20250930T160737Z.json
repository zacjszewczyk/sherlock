[
  {
    "information_requirement": "Has the adversary escalated privileges using process injection via APCs?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1055.004",
        "name": "Asynchronous Procedure Call",
        "evidence": [
          {
            "description": "A process creation event is observed where the executable's file hash is present on a threat intelligence feed of known APC injection tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, User Workstations",
            "action": [
              "Symbolic Logic: For every process creation event (Sysmon Event ID 1), compare the file hash (SHA256, MD5) against a continuously updated threat intelligence feed of known malicious binaries, specifically flagging tools known to utilize APC injection. A direct match generates a high-severity alert.",
              "Statistical: Analyze the prevalence of all process hashes across the enterprise. Flag hashes that are extremely rare (e.g., seen on < 0.1% of endpoints or only on one host) and are associated with processes that attempt to interact with high-privilege system processes. This identifies potentially new or unknown injector tools.",
              "Machine Learning: Train a classification model (e.g., Random Forest) on process metadata (file path, signature status, parent process, command line arguments, hash prevalence) to predict the likelihood that a new process is a malicious injector. Use features engineered from process behavior baselines and known malicious/benign samples for training."
            ]
          },
          {
            "description": "A process that is either unsigned or originates from a low-prevalence/non-standard directory opens a handle to a separate process with access rights sufficient for APC injection.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Detection and Response (EDR) logs, Active Directory Domain Controllers, High-Value Asset Servers",
            "action": [
              "Symbolic Logic: Filter Sysmon Event ID 10 (ProcessAccess) logs for events where the `GrantedAccess` code includes permissions for injection (e.g., 0x1F0FFF, 0x28, 0x400). Correlate the `SourceImage` with process creation logs (Sysmon Event ID 1) to check if the source is unsigned or runs from a suspicious path (e.g., %APPDATA%, C:\\Users\\Public). Alert if the `TargetImage` is a high-integrity system process (e.g., lsass.exe, winlogon.exe, svchost.exe).",
              "Statistical: Establish a baseline of normal process access events by creating a frequency distribution of (SourceImage, TargetImage, GrantedAccess) tuples. Calculate a rarity score for each new event. Alert on events that fall in a high percentile of rarity (e.g., top 1%), especially when the SourceImage is statistically anomalous in its path or signature status compared to its historical behavior.",
              "Machine Learning: Develop an anomaly detection model (e.g., Isolation Forest) using features from Sysmon Event ID 10 and Event ID 1, such as source/target process names, requested access rights, source process path entropy, and parent process information. Train the model on benign activity to identify process access patterns that deviate significantly from the established norm."
            ]
          },
          {
            "description": "A process not associated with security, debugging, or system management tools requests modification rights to another process.",
            "data_sources": [
              "Sysmon Event ID 10",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Developer Machines, System Administration Consoles",
            "action": [
              "Symbolic Logic: Create and maintain an explicit allow-list of source processes (e.g., `procdump.exe`, `windbg.exe`, specific EDR agent executables) permitted to request high-privilege access to other processes. Using Sysmon Event ID 10 logs, generate an alert for any `SourceImage` not on this allow-list that requests `GrantedAccess` rights associated with process injection (e.g., `0x28`, `0x400`).",
              "Statistical: For each `SourceImage`, calculate the historical probability of it requesting specific `GrantedAccess` rights to other processes. Alert when a process requests a set of rights that is a statistical outlier for its own baseline (e.g., `notepad.exe` suddenly requesting `PROCESS_VM_WRITE`). Use z-scores on the frequency of access right requests per process to identify these deviations.",
              "Machine Learning: Use a graph-based model (e.g., GraphSAGE) to represent the network of process interactions. Nodes are processes, and edges are access requests weighted by frequency and privilege level. Train the model to identify anomalous edges, which represent a source process interacting with a target process in a way that is structurally different from the established graph of normal enterprise activity."
            ]
          },
          {
            "description": "A process that is a common injection target (e.g., svchost.exe, explorer.exe) spawns a child process inconsistent with its established baseline behavior, such as a command shell.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Log Aggregation Platform (SIEM)",
            "action": [
              "Symbolic Logic: Define a set of high-risk parent-child relationships where the child is a command interpreter or networking tool (e.g., `svchost.exe` spawning `cmd.exe`, `explorer.exe` spawning `powershell.exe`). Monitor process creation logs (Sysmon Event ID 1) for these specific patterns and generate a high-severity alert upon detection.",
              "Statistical: For each parent process, build a statistical baseline of all its legitimate child processes and their command lines. Calculate the entropy of the command line arguments for each child process. Alert when a new child process is spawned that is either not in the baseline or has a command line with an entropy score that is a significant outlier (e.g., > 3 standard deviations from the mean), suggesting obfuscation.",
              "Machine Learning: Train a time-series model (e.g., LSTM) on sequences of process creation events for individual hosts to learn normal sequences of process activity. An alert is generated when a sequence occurs that has a low probability under the learned model, such as a legitimate process spawning an unusual child, indicating a deviation from normal operations potentially caused by code injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses using process injection via APCs?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1055.004",
        "name": "Asynchronous Procedure Call",
        "evidence": [
          {
            "description": "A commonly injected process (e.g., explorer.exe, svchost.exe, chrome.exe) initiates outbound network connections to a known malicious IP address or domain.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (Firewalls, Proxies), DNS Resolvers, Endpoint EDR/Sysmon Logs",
            "action": [
              "Symbolic Logic: Join host-based network connection logs (Sysmon Event ID 3) with network sensor logs (Zeek conn.log, dns.log). Filter for connections originating from common masquerading targets (`svchost.exe`, `explorer.exe`). Compare the destination IP, domain, and JA3/JA3S hash against threat intelligence feeds for known C2 infrastructure. An exact match triggers an alert.",
              "Statistical: For each process that normally makes network connections, profile its destination domains using metrics like domain age, popularity (e.g., Tranco list percentile), and DNS resolution patterns. Calculate the Mahalanobis distance for each new connection based on these features. Alert on connections with a high distance score, indicating the destination is statistically dissimilar to the process's normal targets.",
              "Machine Learning: Implement a DGA (Domain Generation Algorithm) detection classifier. For network connections originating from injected-process candidates, feed the requested domain name into the classifier. If the model flags the domain as likely machine-generated, and the source process is a common injection target, escalate for investigation as potential C2 communication."
            ]
          },
          {
            "description": "A process that is unsigned or runs from a suspicious path opens a handle to a common network-facing application (e.g., browser, email client) with memory or thread modification rights.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Remote Desktop Servers, Endpoint Sysmon Logs",
            "action": [
              "Symbolic Logic: Using Sysmon Event ID 10, filter for events where the `TargetImage` is a known network-facing application (e.g., `chrome.exe`, `outlook.exe`) and `GrantedAccess` includes injection-related rights (`0x28`, `0x400`). Correlate the `SourceImage` with Sysmon Event ID 1 data. Alert if the `SourceImage` is unsigned or its path is in a high-risk directory like `%APPDATA%`.",
              "Statistical: Establish a baseline of (SourceImage, TargetImage) pairs for process access events involving network-facing applications. Calculate the frequency of these interactions. Alert when a rare or never-before-seen `SourceImage` attempts to access a browser or email client with high privileges, representing a significant deviation from normal inter-process communication.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) to score the risk of a process access event. Features should include: source/target process names, is source signed, is source in standard path, requested access rights, and parent of source process. The model can predict the probability that an access event is part of a defense evasion attempt."
            ]
          },
          {
            "description": "A process with no legitimate reason for network access (e.g., notepad.exe, calculator.exe) initiates an outbound network connection.",
            "data_sources": [
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Network Connection Logs, Network Flow Logs, DNS Server Logs",
            "action": [
              "Symbolic Logic: Create an allow-list of executables that are expected to make network connections. Monitor Sysmon Event ID 3 (Network Connection) and alert whenever a process `Image` not on this list initiates an outbound connection. Enrich the alert with parent process information from Sysmon Event ID 1.",
              "Statistical: For every outbound connection from an unexpected process, calculate the prevalence of the destination IP and port combination across the enterprise. Connections from an unexpected process to a destination that is also rare (e.g., seen by < 5 hosts) should be scored as high risk. Analyze connection frequency for beaconing patterns.",
              "Machine Learning: Use a time-series anomaly detection model on network traffic volume (bytes sent/received) per process per host. A sudden, uncharacteristic spike in network activity from a process that is typically quiet (e.g., `services.exe`) would be flagged by the model as a potential indicator of compromise."
            ]
          },
          {
            "description": "An anomalous parent-child process relationship is observed, followed by suspicious network traffic originating from the parent process after the child terminates.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 5",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint Process and Network Logs, Log Aggregation Platform (SIEM)",
            "action": [
              "Symbolic Logic: Define rules to detect anomalous process chains (e.g., `winword.exe` -> `cmd.exe`). When such a chain is detected (Sysmon ID 1) and the child terminates (Sysmon ID 5), trigger heightened monitoring on the parent process's PID. If that parent then initiates a network connection (Sysmon ID 3) to a destination not on a baseline allow-list, generate a high-severity alert.",
              "Statistical: Profile the typical time delay and characteristics of network connections made by a process (e.g., `explorer.exe`) after it spawns a child. If, after spawning an anomalous child, the parent process initiates a network connection with characteristics (e.g., protocol, port, data volume) that are a statistical outlier compared to its normal behavior, flag it. Use beaconing analysis to detect periodic connections.",
              "Machine Learning: Use a sequence-to-sequence (Seq2Seq) model trained on event logs (process creation, termination, network connections) to predict the next likely event. An alert is triggered when the actual observed event (e.g., `explorer.exe` making a raw TCP connection) significantly differs from the model's prediction, indicating a break from normal behavior potentially caused by code injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]