[
  {
    "information_requirement": "Is the adversary maintaining persistence on macOS hosts using Login Items?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.015",
        "name": "Login Items",
        "evidence": [
          {
            "description": "A new entry is added to a user's login item database (backgrounditems.btm) or is created via scripting, pointing to an executable in a non-standard or user-writable path.",
            "data_sources": [
              "File modification events (EDR)",
              "Process execution logs (EDR, macOS Unified Log)",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Library directories (~/Library) on macOS endpoints",
            "action": [
              "Symbolic: Monitor for process executions of `osascript` with command-line arguments containing 'System Events' and 'make login item'. Match the executable path specified in the command against a blocklist of known malicious file names, hashes, or paths.",
              "Statistical: Establish a baseline for the rate of login item modifications per user. Alert when the rate for a single user exceeds a statistical threshold, such as 3 standard deviations above their 90-day average. Calculate the prevalence of the target executable path across the enterprise; an executable added as a login item with a prevalence of <1% is highly suspicious.",
              "Machine Learning: Train a decision tree classifier on features of login item creation events (e.g., parent process name, user context, target executable path, command-line arguments). Use the trained model to classify new events as either benign (e.g., a legitimate software installer) or malicious (e.g., `osascript` run from `bash`)."
            ]
          },
          {
            "description": "An application registers a hidden login item using the Service Management Framework, which points to a helper tool that is unsigned or has low enterprise prevalence.",
            "data_sources": [
              "API monitoring logs (EDR)",
              "File creation events (EDR)",
              "Process execution logs (EDR)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application bundles and LaunchAgent directories (/Library/LaunchAgents, ~/Library/LaunchAgents) on macOS endpoints",
            "action": [
              "Symbolic: Monitor for API calls to `SMLoginItemSetEnabled` originating from processes that are unsigned or whose hash matches a known malicious indicator. Alert on the creation of new .plist files in LaunchAgent directories by processes other than trusted installers.",
              "Statistical: Profile the set of parent processes that legitimately register Service Management login items. Flag any registrations originating from anomalous parents (e.g., `Terminal.app`, `Microsoft Word`). Calculate the entropy of the executable path string being registered; a high entropy score may indicate algorithmic generation to evade static signature-based detection.",
              "Machine Learning: Use an autoencoder to model the normal sequence of API calls for legitimate applications during and after installation. Flag an application as anomalous if its sequence of API calls, including `SMLoginItemSetEnabled`, significantly deviates from the reconstruction provided by the autoencoder, indicating unexpected behavior."
            ]
          },
          {
            "description": "A process launched automatically at user login initiates anomalous network activity or executes from an atypical path.",
            "data_sources": [
              "Process execution logs (EDR, macOS Unified Log)",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints and network egress points",
            "action": [
              "Symbolic: Correlate process launch events at login with subsequent network connections in Zeek conn.log. Join the destination IP or domain (from dns.log) with a threat intelligence feed of known command-and-control (C2) servers. Alert on any match.",
              "Statistical: For processes launched by `launchd` shortly after a user login, establish a baseline of normal network behavior (e.g., connection frequency, data volume, destination port rarity). Use percentile-based alerting to flag when a process's outbound data volume is in the 99th percentile compared to its peers or its own history. Analyze DNS queries (Zeek dns.log) from these processes and flag those with high domain name entropy.",
              "Machine Learning: Use a time-series forecasting model (e.g., ARIMA) to predict the expected volume of network traffic for each known startup process. Generate an alert when the observed traffic volume significantly exceeds the predicted volume with its confidence interval, suggesting a potential change in process behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using Login Items on macOS to escalate privileges?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.015",
        "name": "Login Items",
        "evidence": [
          {
            "description": "An application launched as a login item spawns a credential prompt that mimics a legitimate system request to capture user credentials.",
            "data_sources": [
              "Process execution logs (EDR)",
              "API monitoring logs (EDR)",
              "macOS Unified Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints",
            "action": [
              "Symbolic: Monitor for processes launched from a login item that then execute `osascript` with the argument 'with administrator privileges'. Block and alert on any such script that does not have a known, legitimate purpose.",
              "Statistical: Calculate the Levenshtein distance between the process name that spawns a credential prompt and legitimate system process names like 'System Preferences' or 'SecurityAgent'. A small distance (e.g., <= 2) indicates potential typosquatting and should be flagged for review. Profile the frequency of credential prompts by application; a rarely-seen or brand-new application prompting for credentials is a high-risk indicator.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) to distinguish between legitimate and malicious credential prompts. Features could include the parent process, the executable path, code signature status, and whether the process has open network connections. Deploy the model to score and alert on suspicious prompts in real-time."
            ]
          },
          {
            "description": "A process running in a standard user context creates a persistence item in a system-wide location, such as /Library/LaunchAgents.",
            "data_sources": [
              "File creation events (EDR)",
              "Process execution logs (EDR, macOS Unified Log)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide directories (/Library/LaunchAgents, /Library/LaunchDaemons, /Library/StartupItems) on macOS endpoints",
            "action": [
              "Symbolic: Create a high-severity alert for any file creation or modification event within `/Library/LaunchAgents` or `/Library/LaunchDaemons` where the responsible process is not running as root and is not a known, trusted software installer process (e.g., `installer`, `system_installd`).",
              "Statistical: Establish a baseline of authorized processes and user accounts permitted to write to system-wide persistence locations. Alert on any write operation performed by a process or user that deviates from this authorized set. Track the count of such events per host; a sudden spike is anomalous.",
              "Machine Learning: Implement a role-based access control (RBAC) anomaly detection model. Model the typical file system write patterns for different user roles (e.g., 'Standard', 'Admin'). Flag as a high-confidence anomaly any instance where a process running under a 'Standard' user role performs a write action (file creation) in a directory typically restricted to the 'Admin' role, such as `/Library/LaunchAgents`."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]