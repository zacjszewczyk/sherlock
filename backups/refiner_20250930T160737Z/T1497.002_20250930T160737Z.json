[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by checking for user activity?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1497.002",
        "name": "User Activity Based Checks",
        "evidence": [
          {
            "description": "A process is executed whose file hash is a known indicator for a sandbox evasion tool that specifically checks for user activity (e.g., mouse movement, open documents).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints (laptops, desktops); Virtual Desktop Infrastructure (VDI) environment; Server infrastructure.",
            "action": [
              "Symbolic Logic: Continuously match the file hashes of newly created processes (from Sysmon Event ID 1) against a threat intelligence feed of known sandbox evasion tools like 'Pafish', 'Al-Khaser', or other malware samples known to implement T1497.002. Generate a high-severity alert on any match.",
              "Statistical: Analyze the PE import table of unsigned executables running from non-standard directories (e.g., %TEMP%, %APPDATA%). Establish a baseline for the frequency of API calls related to user activity checks (e.g., 'GetCursorPos', 'GetForegroundWindow', 'GetRecentDocs'). Flag executables where the combination or frequency of these imported functions is a statistical outlier (e.g., exceeds the 99th percentile) compared to the population of legitimate software.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from process execution events, including process name, parent process, command-line arguments, and PE metadata (e.g., imported functions, entropy). The model should be trained to classify processes as benign or potentially evasive. Use the trained model to score new processes in real-time, alerting on those classified with high probability of being evasive."
            ]
          },
          {
            "description": "A process executes a rapid, ordered sequence of file or registry accesses to check for signs of a real user, such as accessing the recent documents list, checking browser history file existence, or enumerating files on the desktop.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations; Terminal servers; Domain Controllers; File servers hosting user profiles.",
            "action": [
              "Symbolic Logic: Define and monitor for specific, ordered sequences of file (Sysmon EID 11) and registry (Sysmon EID 13) accesses by a single Process ID within a short time window (<10 seconds). An example sequence is: query 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\RunMRU', then access '%APPDATA%\\Microsoft\\Windows\\Recent\\', then attempt to read 'C:\\Users\\*\\Desktop'. Alert when a process matches such a predefined behavioral signature.",
              "Statistical: For each process, calculate the Shannon entropy of the file paths and registry keys it accesses within the first 60 seconds of execution. Establish a baseline for common applications. Flag processes whose access path entropy is a significant outlier (e.g., >3 standard deviations above the mean for its process category), especially if the process is unsigned or running from a temporary user directory.",
              "Machine Learning: Use a sequence analysis model, such as a Hidden Markov Model (HMM) or an LSTM-based neural network, trained on event sequences (file, registry, process events) from known benign and evasive malware samples. The model can classify new, unseen sequences of host activity as likely benign or part of an evasion attempt, identifying novel patterns that do not match predefined symbolic rules."
            ]
          },
          {
            "description": "A process spawned from a user-opened document (e.g., PDF, DOCX) exhibits a multi-minute delay before initiating network connections or creating suspicious child processes.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User endpoints; Email gateway servers; Network egress points.",
            "action": [
              "Symbolic Logic: Create a rule that alerts when a process spawned by a common document handler ('WINWORD.EXE', 'ACRORD32.EXE', 'EXCEL.EXE') is followed by a suspicious child process ('powershell.exe', 'wscript.exe') or an external network connection (Sysmon EID 3) after a delay greater than a fixed threshold (e.g., 5 minutes).",
              "Statistical: For processes spawned by document handlers, measure the time delta between the process start (Sysmon EID 1) and its first child process creation or first outbound network connection (Zeek conn.log). Baseline this distribution of delays. Flag processes with delays in the extreme upper tail of the distribution (e.g., >98th percentile) as potentially using time-based evasion.",
              "Machine Learning: Apply time-series anomaly detection to the behavior of processes originating from document handlers. Model the typical sequence and timing of events (child processes, network connections, file writes) post-launch. An algorithm can then detect executions that deviate significantly from the learned benign model, such as a long, flat period of inactivity followed by a sudden burst of suspicious events."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary conducting discovery of user activity for profiling or data collection?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1497.002",
        "name": "User Activity Based Checks",
        "evidence": [
          {
            "description": "A process executes command-line utilities or scripts to search the content of user files (e.g., documents, browser history) for sensitive keywords.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations; Document management systems; Network file shares.",
            "action": [
              "Symbolic Logic: Monitor process command lines (Sysmon EID 1) using a list of regular expressions to detect searching of user directories for sensitive keywords. Example: `findstr.exe /s /i \"password\" C:\\Users\\*\\Documents\\*` or PowerShell scripts accessing browser SQLite files with SQL queries containing 'bank' or 'login'.",
              "Statistical: Calculate the entropy and length of command-line arguments for processes. A command line with abnormally high entropy or length that also contains paths to user directories may indicate an obfuscated script or complex search query. Flag processes whose command-line metrics are statistical outliers when compared to a baseline of normal user and system activity.",
              "Machine Learning: Utilize Natural Language Processing (NLP) models to classify command-line arguments. Train a classifier (e.g., a transformer-based model) to categorize command lines as 'benign', 'administrative', or 'malicious-discovery'. This allows detection of novel or obfuscated commands that share semantic similarities with known discovery techniques."
            ]
          },
          {
            "description": "A process, not associated with system indexing or backup, rapidly accesses a high volume of user-created files (documents, spreadsheets, text files) in a manner consistent with automated scanning.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User home directories on endpoints; Departmental and project-specific network file shares.",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a non-system, non-AV process generates more than N (e.g., 200) file read events (Sysmon EID 11) for unique files with extensions like '.docx', '.xlsx', '.pdf', '.txt' within a short time window (e.g., < 2 minutes).",
              "Statistical: For each process, calculate the rate of file access events per second. Establish a baseline for normal user and application behavior. Use a percentile-based threshold (e.g., 99th percentile) to flag processes exhibiting an abnormally high file access rate, especially if the process is unsigned or running from a suspicious path.",
              "Machine Learning: Apply unsupervised learning (e.g., DBSCAN clustering) to process activity features, including file access rate, diversity of file extensions accessed, and process path. This can automatically group anomalous processes that exhibit high-volume file scanning behavior, separating them from the clusters of normal system and user activity without pre-defined rules."
            ]
          },
          {
            "description": "A process initiates an outbound network connection to an external destination immediately after accessing sensitive user profile data (e.g., browser history, password stores).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 3",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points/Internet gateway; DNS resolvers; Endpoints hosting user profiles.",
            "action": [
              "Symbolic Logic: Create a stateful correlation rule: IF a process (identified by ProcessGUID) accesses a sensitive user file (e.g., Chrome's 'Login Data' or Firefox's 'key4.db', via Sysmon EID 11), THEN within 60 seconds the same process initiates an outbound network connection (Sysmon EID 3) to a destination IP not on an allowlist, THEN generate an alert.",
              "Statistical: For network connections (Zeek conn.log) that follow sensitive file access, analyze the volume of data sent (`orig_bytes`). Flag connections where the outbound data volume is a statistical outlier (e.g., > 3 standard deviations above the historical mean for that host-destination pair), suggesting data exfiltration rather than a typical heartbeat or API call.",
              "Machine Learning: Construct a behavior graph where nodes are processes, files, and network destinations. Use a graph-based anomaly detection algorithm to find rare and suspicious paths, such as 'uncommon process -> reads -> sensitive file -> connects to -> new external domain'. This can identify the full chain of discovery-to-exfiltration activity."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]