[
  {
    "information_requirement": "Is the adversary maintaining persistence using Registry Run Keys or Startup Folder items?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.001",
        "name": "Registry Run Keys - Startup Folder",
        "evidence": [
          {
            "description": "A file, shortcut, or registry value added to a startup location matches a known malicious hash, filename, or command-line signature from threat intelligence.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate workstations and servers, Domain Controllers, Critical application servers",
            "action": [
              "Symbolic Logic: Monitor for registry value modifications (Windows Event ID 4657, Sysmon Event ID 13) in specified Run/RunOnce keys and file creation events (Windows Event ID 4663, Sysmon Event ID 11) in Startup folders. Extract file hashes, full paths, and registry value data. Compare these artifacts against a threat intelligence feed of known malicious hashes, file names, and command-line patterns. Generate a high-severity alert on any match.",
              "Statistical Method: For all executables and scripts added to startup locations, calculate the prevalence of each file hash and file path across the enterprise. Flag any file whose hash or path appears on less than 1% of endpoints or a statistically determined low percentile as anomalous. Further score the anomaly by calculating the entropy of the filename; a high entropy score may indicate a randomly generated name used by malware. A combination of low prevalence and high entropy warrants investigation.",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest) trained on features extracted from startup items, including file path, file extension, parent process name, and whether the file is signed. Train the model using a labeled dataset of known-benign and known-malicious startup entries. Apply the model in real-time to classify newly created startup items as malicious or benign."
            ]
          },
          {
            "description": "A startup item is added that uses suspicious command-line patterns, such as invoking scripting engines with encoded commands, living-off-the-land binaries (LOLBAS), or pointing to executables in atypical directories like Temp or Public folders.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate workstations and servers, User profile directories, System-wide temporary directories",
            "action": [
              "Symbolic Logic: From process creation events (Windows Event ID 4688, Sysmon Event ID 1) and registry modifications (Windows Event ID 4657, Sysmon Event ID 13), parse the command line or registry value. Use regular expressions to search for indicators of obfuscation (e.g., 'powershell -enc', '-e', '-encoded'), LOLBAS usage (e.g., 'certutil', 'bitsadmin', 'mshta'), and execution from non-standard directories (e.g., C:\\Windows\\Temp\\, C:\\Users\\Public\\). Alert on any positive match.",
              "Statistical Method: For every command line associated with a startup process, calculate its length and character entropy. Establish a baseline of these metrics for legitimate startup programs. Flag commands that are statistical outliers, such as those exceeding the 95th percentile for length or entropy, which often indicates encoded payloads. Also, track the frequency of parent processes creating persistence; a rare parent (e.g., winword.exe) is suspicious.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on command-line arguments from startup processes, vectorized using TF-IDF. The algorithm will group similar, legitimate commands. Outlier commands that do not belong to any cluster are highly suspicious and should be flagged for manual review, as they represent novel execution patterns not seen in the established baseline."
            ]
          },
          {
            "description": "A process executed from a startup location is statistically rare or new to the environment and initiates an outbound network connection shortly after execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate workstations and servers, Network egress points (e.g., firewalls, proxies), DNS servers",
            "action": [
              "Symbolic Logic: Correlate process creation events (Windows Event ID 4688, Sysmon Event ID 1) from startup locations with subsequent network connection events (Sysmon Event ID 3, Zeek conn.log) from the same host within a 60-second window. If the destination IP or domain is present on a threat intelligence blocklist, generate a high-severity alert.",
              "Statistical Method: Maintain a historical baseline of all processes executed from startup locations and their prevalence. If a new process's prevalence is below a dynamic threshold (e.g., seen on < 5 hosts), flag it. Concurrently, analyze its network connections. If the destination IP's Autonomous System Number (ASN) or country is rare compared to the host's historical network traffic baseline (e.g., outside the top 90% of frequented ASNs), increase the risk score.",
              "Machine Learning: Implement a time-series analysis model on network traffic volume (bytes_out) per process, initiated from startup locations. Train the model on historical data to predict expected network behavior. Flag any process whose network activity significantly deviates from the predicted pattern (e.g., a sudden spike in data exfiltration from a process that is normally quiet), which can detect C2 beaconing."
            ]
          },
          {
            "description": "A pre-existing, legitimate startup entry is modified to point to a different payload, or permissions on startup folders or registry keys are insecurely modified.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4670",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate workstations and servers, Key registry hives (HKLM\\Software, HKCU\\Software), System-wide and user-specific startup folders",
            "action": [
              "Symbolic Logic: Maintain a golden baseline (allowlist) of known-good registry values and file paths for legitimate startup items. Monitor for any modification (Windows Event ID 4657, Sysmon Event ID 13) to these specific entries. Any deviation not part of an authorized change should trigger an alert. Also, alert on any permission change (Windows Event ID 4670) on startup locations that grants 'Write' access to non-administrative groups.",
              "Statistical Method: Periodically snapshot the values of startup registry keys and shortcut targets, creating a hash of each configuration. Track the frequency of changes for each entry. An entry that changes more frequently than its historical baseline (e.g., > 2 standard deviations from the mean change frequency) may indicate repeated hijacking attempts.",
              "Machine Learning: Train an anomaly detection model (e.g., an autoencoder) on the sequence of system calls made by legitimate startup processes. In real-time, feed the system call sequence for a monitored startup process to the model. If the reconstruction error exceeds a predetermined threshold, it indicates the process behavior has deviated from its learned benign baseline, suggesting it has been hijacked."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges using Registry Run Keys or Startup Folder items?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.001",
        "name": "Registry Run Keys - Startup Folder",
        "evidence": [
          {
            "description": "A file written to a system-wide startup location, such as an HKLM Run key or the All Users Startup folder, by a standard user account matches a known malicious hash or signature.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user servers (e.g., Citrix, RDS), Administrator workstations, Key registry hives (HKLM\\Software), System-wide startup folder (C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup)",
            "action": [
              "Symbolic Logic: Filter for write events (Windows Event ID 4663, Sysmon Event ID 11 for files; Windows Event ID 4657, Sysmon Event ID 13 for registry) to system-wide startup locations. Isolate events where the User is not a member of a privileged group. Extract the file hash or registry value and compare against threat intelligence feeds. Alert on a match.",
              "Statistical Method: Track all write activity to system-wide startup locations. A write event from a standard (non-privileged) user is a statistical anomaly and should be flagged. The risk score should be elevated if the process performing the write (e.g., 'powershell.exe') is also statistically uncommon for that user to be running.",
              "Machine Learning: Use a peer group analysis model to identify anomalous user behavior. Group users by role and permissions. If a user writes to a system-wide startup location, and this behavior deviates significantly from their own historical baseline and that of their peer group, classify the event as a high-risk anomaly."
            ]
          },
          {
            "description": "A standard user account adds a startup item to a system-wide location that uses known malicious execution patterns, such as invoking a scripting engine to download and run a remote payload.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user servers (e.g., Citrix, RDS), Key registry hives (HKLM\\Software), System-wide startup folder, Network egress points",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a non-administrative user writes to an HKLM Run key or the All Users startup folder, AND the data written contains high-risk patterns like 'powershell -enc', 'IEX(New-Object Net.WebClient).DownloadString', or 'mshta.exe javascript:'. This directly indicates a privilege escalation attempt.",
              "Statistical Method: Analyze command-line arguments written to system-wide startup locations by standard users. Calculate the Jaccard similarity index between the new command and a baseline set of legitimate commands. A very low similarity score indicates a novel and potentially malicious command. Also, calculate the command's entropy; high entropy suggests obfuscation.",
              "Machine Learning: Train a sequence-to-sequence (Seq2Seq) autoencoder model on legitimate command-line arguments from system-wide startup locations. Feed new command lines written by standard users into the model. If the model fails to reconstruct the command with low error, it signifies the command is structurally different from known benign commands and is anomalous."
            ]
          },
          {
            "description": "A file or registry key is written to a startup location by one user, and the resulting process is subsequently executed under the context of a different, higher-privileged user account upon their login.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Windows Event ID 4624",
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user servers (e.g., Citrix, RDS), Shared administrator workstations, Domain Controllers",
            "action": [
              "Symbolic Logic: Create a stateful rule that logs a file/registry write to a startup location by 'User A'. Upon a new logon for 'User B', monitor for process creation from that file/path. If User A is not User B, and User B has higher privileges than User A, trigger a high-severity alert for privilege escalation.",
              "Statistical Method: For each startup process, trace back to the creation event of its file/key. Track the 'creator-executor' user pairs. Flag any pair where the creator is different from the executor and this pairing is new to the environment's history. The risk is highest when the time delta between write and execution is short and the executor has admin rights.",
              "Machine Learning: Use a graph-based analysis. Create nodes for users, files, and processes and edges for actions ('writes', 'executes', 'runs_as'). Search for the pattern: User A -> File X <- Process Z -> User B, where User A != User B. Apply a classification model to this pattern, using features like privilege levels and time difference, to score the likelihood of malicious escalation."
            ]
          },
          {
            "description": "The HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\BootExecute registry value is modified to include executables beyond the standard 'autocheck autochk *'.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate workstations and servers, Domain Controllers, Key system registry hives (HKLM\\System)",
            "action": [
              "Symbolic Logic: Create a high-fidelity rule that monitors for any write modification (Windows Event ID 4657, Sysmon Event ID 13) to 'HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\BootExecute'. Alert if the new value does not exactly match the known-good baseline (e.g., 'autocheck autochk *'). This is a critical indicator.",
              "Statistical Method: Periodically poll and record the value of the 'BootExecute' key across all systems. Any host where the value deviates from the fleet-wide norm is a statistical anomaly. This polling provides a secondary check to real-time monitoring and can identify systems compromised while logging was offline.",
              "Machine Learning: Model the sequence of processes that modify the HKLM\\System hive. Train an anomaly detection model on process names and parent processes that legitimately interact with this area (e.g., 'svchost.exe'). If an anomalous process (e.g., 'powershell.exe') is observed modifying the 'BootExecute' key, the model would flag it as highly suspicious."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]