[
  {
    "information_requirement": "Is the adversary establishing persistence using application shimming? (PIR)",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.011",
        "name": "Application Shimming",
        "evidence": [
          {
            "description": "A custom shim database (.sdb) file is created in a monitored directory (%WINDIR%\\AppPatch\\Custom\\) and its hash matches a known malicious signature from threat intelligence, or its content matches a YARA rule designed to detect shim-based malware.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic: Upon file creation in `%WINDIR%\\AppPatch\\Custom\\` (Windows Event ID 4663 or Sysmon Event ID 11), compute the file's SHA256 hash and match it against a threat intelligence feed of known malicious shim database hashes. Concurrently, scan the file content with YARA rules designed to detect patterns of known malicious shims.",
              "Statistical: For each new `.sdb` file created, calculate the Shannon entropy of the file. Compare the entropy score to the distribution of entropy scores for legitimate `.sdb` files in the environment. Flag files with entropy scores in the top 5th percentile or greater than two standard deviations from the mean, as this may indicate packed or encrypted malicious code.",
              "Machine Learning: Develop a file content classifier (e.g., a gradient boosting model) trained on the byte-level features of known benign and malicious `.sdb` files. Use the model to classify newly created `.sdb` files as either 'benign' or 'malicious'. Generate an alert for any file classified as 'malicious' with high confidence."
            ]
          },
          {
            "description": "The `sdbinst.exe` process is executed with command-line arguments pointing to a shim database (.sdb) file located in a non-standard, user-writable directory (e.g., C:\\Users\\, C:\\Temp\\, %APPDATA%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Staging Servers, Application Servers",
            "action": [
              "Symbolic: Create a detection rule to trigger on process creation events (Windows Event ID 4688 or Sysmon Event ID 1) where the process name is `sdbinst.exe` and the command line contains a path to a `.sdb` file located in a directory matching patterns like `\\Users\\`, `\\Temp\\`, `\\AppData\\`, or `\\ProgramData\\`.",
              "Statistical: For all `sdbinst.exe` executions, extract the parent directory of the `.sdb` file from the command line. Maintain a frequency count of all parent directories seen over a 30-day baseline period. Alert on any execution where the parent directory is statistically rare (e.g., seen fewer than 5 times in the baseline).",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features extracted from `sdbinst.exe` executions, including user account, parent process name, and the full path of the `.sdb` file. Identify and alert on clusters of anomalous activity that deviate from the large, dense clusters representing normal administrative or software installation behavior."
            ]
          },
          {
            "description": "A process commonly targeted for shimming (e.g., services.exe, spoolsv.exe, explorer.exe) spawns an anomalous child process (e.g., powershell.exe, cmd.exe) or initiates an external network connection to a destination with a low reputation score or that is rare for the environment.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log",
              "Windows Event ID 5156",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Network Egress Points",
            "action": [
              "Symbolic: Correlate events in a sequence: 1) A target process (e.g., `explorer.exe`) starts. 2) Within 60 seconds, it spawns a child process known for C2 (e.g., `powershell.exe`, `rundll32.exe`). 3) The child process makes an outbound network connection (Zeek conn.log) to an IP address on a threat intelligence blocklist. Alert on the complete sequence.",
              "Statistical: For each process commonly targeted for shimming, build a baseline of normal child processes and network destination ASNs over a 30-day period. Calculate the frequency of each. Alert if a target process spawns a child process or connects to a destination that is not in the baseline or is in the lowest 1st percentile of frequency.",
              "Machine Learning: Train a time-series anomaly detection model (e.g., LSTM Autoencoder) on sequences of events (process creations, network connections) following the launch of high-value parent processes. The model learns the normal 'post-launch' behavior. Flag any new sequence of events that results in a high reconstruction error, indicating a significant deviation from normal activity."
            ]
          },
          {
            "description": "A write or modification event occurs on a custom shim database path (`%WINDIR%\\AppPatch\\Custom\\*.sdb`) or a custom shim registry key (`HKLM\\...\\AppCompatFlags\\Custom\\`) initiated by a process other than standard installers or patch management tools.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Application Servers, Domain Controllers",
            "action": [
              "Symbolic: Alert on any modification to the registry key `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\\` (Windows Event ID 4657 or Sysmon Event ID 13) by a process that is not `sdbinst.exe` or a known trusted installer process from a pre-defined allowlist.",
              "Statistical: Analyze the timing of modifications to shim-related registry keys and file paths. Create a baseline distribution of modification times by hour of day and day of week. Alert on any modifications that occur at statistically anomalous times (e.g., outside of 9am-5pm business hours or designated patch windows), scoring events based on their deviation from the mean time.",
              "Machine Learning: Use a classification model (e.g., Random Forest) to determine if a shim-related file or registry modification is 'legitimate' or 'suspicious'. Features for the model should include the parent process name, user context, time of day, and correlation with other system events. Train the model on labeled data from known patching cycles and known malicious activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using application shimming? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.011",
        "name": "Application Shimming",
        "evidence": [
          {
            "description": "A custom shim database (.sdb) file is created in a user-writable directory (e.g., %TEMP%, %APPDATA%) and its content matches a YARA rule designed to detect specific UAC bypass techniques (e.g., targeting msconfig.exe or eventvwr.exe).",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers",
            "action": [
              "Symbolic: Continuously monitor user-writable directories (e.g., `%TEMP%`, `%APPDATA%`, `C:\\Users\\*`) for `.sdb` file creation (Sysmon Event ID 11). On creation, scan the file with a YARA ruleset specifically designed to identify shims used for UAC bypass and privilege escalation. Alert on any match.",
              "Statistical: Profile the characteristics of `.sdb` files found in user-writable directories. Calculate statistics on file size and entropy. A file whose size and entropy fall within the known range of specific exploit shims (e.g., small file size, medium entropy) should receive a higher risk score than random data.",
              "Machine Learning: Train a classifier to distinguish between benign temporary files and malicious `.sdb` files staged in user directories. Features can include file path patterns, file size, entropy, and the name of the process that wrote the file. A high-confidence classification as 'malicious .sdb' triggers an alert."
            ]
          },
          {
            "description": "A sequence of process creations occurs within a short time window (<10 seconds) under the same user context: `sdbinst.exe` is executed to install a shim, followed by the execution of a Microsoft-signed, auto-elevating executable (e.g., eventvwr.exe, fodhelper.exe).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Administrator Jump Boxes",
            "action": [
              "Symbolic: Create a correlation rule that triggers when Process A (`sdbinst.exe`) is followed by Process B (a member of a watchlist including `eventvwr.exe`, `msconfig.exe`, `fodhelper.exe`) within 10 seconds, where both processes are initiated by the same user ID and session ID.",
              "Statistical: Establish a baseline of process pairs that execute sequentially within a 10-second window. Calculate the transition probability between any two processes. Alert when the observed transition from `sdbinst.exe` to an auto-elevating executable has a very low probability (e.g., is in the bottom 0.1% of all observed process transitions).",
              "Machine Learning: Model process sequences using a Markov chain or a recurrent neural network (RNN) trained on normal user activity. When the specific sequence `sdbinst.exe` -> `auto-elevating-executable` is observed, calculate the sequence's likelihood score given the model. A very low likelihood score indicates a strong anomaly and a potential UAC bypass attempt."
            ]
          },
          {
            "description": "A process chain is observed where a process running at Medium integrity level spawns an auto-elevating executable (e.g., eventvwr.exe), which subsequently runs at High integrity and spawns a child process (e.g., cmd.exe) that also runs at High integrity.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers",
            "action": [
              "Symbolic: Create a rule to detect a process ancestry chain: Grandparent Process (Integrity=Medium) -> Parent Process (`eventvwr.exe`, `fodhelper.exe`, etc., Integrity=High) -> Child Process (`cmd.exe`, `powershell.exe`, etc., Integrity=High). This requires joining process creation events (Sysmon Event ID 1) on parent/child process IDs and checking the integrity levels.",
              "Statistical: For all auto-elevating executables, create a baseline of their typical child processes. Calculate the frequency of each child process. Alert when an auto-elevating process spawns a child that is statistically rare (e.g., `cmd.exe` is spawned by `eventvwr.exe` less than 0.01% of the time) and there is an integrity level escalation in the process chain.",
              "Machine Learning: Use a graph-based anomaly detection algorithm on the process creation tree. Represent processes as nodes and parent-child relationships as edges, with features like process name and integrity level. The algorithm learns the structure of normal process graphs and flags subgraphs that represent the UAC bypass pattern (Medium -> High -> High) as anomalous."
            ]
          },
          {
            "description": "An auto-elevating executable (e.g., msconfig.exe, computerdefaults.exe) that has been illegitimately elevated via a shim performs actions outside its normal behavioral profile, such as initiating an outbound network connection or writing a file to a user's Downloads folder.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Windows Event ID 5156",
              "Sysmon Event ID 3",
              "Windows Event ID 4663",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points, File Servers",
            "action": [
              "Symbolic: Create a rule that alerts when a process from a watchlist of auto-elevating system utilities (e.g., `computerdefaults.exe`, `dccw.exe`) makes any external network connection (destination IP is not RFC1918) or writes an executable file (.exe, .dll, .ps1) to disk.",
              "Statistical: For each auto-elevating process, build a baseline of domains contacted (from Zeek dns.log) and file paths written to. Calculate the Shannon entropy of the requested domain names. Alert if a process contacts a domain with unusually high entropy (indicative of DGA) or writes to a file path that is statistically rare for that process.",
              "Machine Learning: Develop a one-class SVM (Support Vector Machine) model for each critical auto-elevating process, trained on its normal behavior (files read, registry keys accessed, network connections). Any new activity that falls outside the learned boundary of normal behavior is flagged as an anomaly, potentially caused by a malicious shim."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]