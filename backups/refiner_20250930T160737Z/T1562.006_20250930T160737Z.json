[
  {
    "information_requirement": "Is the adversary actively blocking security telemetry or indicators to evade detection?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.006",
        "name": "Indicator Blocking",
        "evidence": [
          {
            "description": "A process is created where the file hash matches a known malicious tool specifically used for disabling security monitoring or event logging.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations, Critical servers (e.g., Domain Controllers, file servers), Log aggregation servers",
            "action": [
              "Symbolic (IOC): Continuously compare the file hash (SHA256, MD5) from process creation events (Sysmon Event ID 1, Windows Security Event ID 4688) against a curated threat intelligence feed of tools known to perform indicator blocking (e.g., PCHunter, GMER, Mimikatz's 'misc::memssp' command). Generate a high-severity alert upon a match.",
              "Statistical: Analyze the prevalence of process file hashes across the enterprise. Identify hashes that are extremely rare (e.g., seen on < 0.1% of endpoints) but are executing on multiple systems within a short time frame. Use a percentile-based approach to flag such low-prevalence, high-spread events for investigation, as this is characteristic of a targeted tool deployment.",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on features from process creation events, including process name entropy, parent process, user context, and file hash reputation. Use the model to classify each new process as benign or suspicious, specifically flagging those with characteristics similar to known indicator blocking tools, even if the hash is unknown."
            ]
          },
          {
            "description": "A process creation event contains command-line arguments that directly manipulate event logging services, firewall rules blocking telemetry, or Event Tracing for Windows (ETW) providers.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1",
              "Windows PowerShell Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations, Servers with local administrative privileges, PowerShell execution environments",
            "action": [
              "Symbolic (IOC): Create a detection rule using regular expressions to search command-line arguments (from Sysmon Event ID 1, Windows Security Event ID 4688) and PowerShell script blocks (PowerShell Event ID 4104) for specific strings like 'wevtutil cl', 'Clear-EventLog', 'Set-EtwTraceProvider', 'sc stop Sysmon64', or 'netsh advfirewall' blocking traffic to SIEM IPs. Trigger an alert on any match.",
              "Statistical: Calculate the entropy of command-line arguments for common utilities like powershell.exe, cmd.exe, and reg.exe. Establish a baseline entropy score for normal administrative activity. Flag executions where the command-line entropy significantly deviates from the norm (e.g., > 3 standard deviations), which can indicate obfuscated commands used to hide tampering activity.",
              "Machine Learning: Use a Natural Language Processing (NLP) model to parse and classify command-line arguments. Train the model to recognize the intent of commands, distinguishing between benign system administration and malicious defense evasion. For example, the model could learn to flag a 'Set-ItemProperty' command targeting a sensitive logging registry key as higher risk than one targeting a user-profile key."
            ]
          },
          {
            "description": "The system generates a specific event ID known to indicate that a security log was cleared, a firewall rule was modified, or a security tool's configuration was changed.",
            "data_sources": [
              "Sysmon Event ID 16",
              "Windows Security Event ID 1102",
              "Windows Firewall Event ID 4947"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, Domain Controllers, Systems with host-based firewalls enabled",
            "action": [
              "Symbolic (IOC): Create a high-priority, non-suppressible alert that triggers immediately upon detection of Windows Security Event ID 1102 (The audit log was cleared) or Sysmon Event ID 16 (Sysmon configuration change). These events are high-fidelity indicators of tampering and require immediate investigation.",
              "Statistical: For firewall rule modification events (Windows Firewall Event ID 4947), establish a baseline of normal activity (e.g., rules added by Group Policy). Use statistical analysis to alert on outliers, such as a rule being added manually outside of a maintenance window, a rule that allows all traffic ('*'), or a rule specifically targeting the IP address of a log collector or SIEM.",
              "Machine Learning: Develop a sequence analysis model (e.g., Hidden Markov Model) to detect suspicious event chains. Train the model to recognize a pattern where a log clearing event (Event ID 1102) is preceded by suspicious process executions and followed by a period of log silence from the host. This contextualizes the high-fidelity alert and increases confidence."
            ]
          },
          {
            "description": "A host stops sending security logs to the central collector for a defined period, while network flow data confirms the host is still communicating on the network with other internal or external systems.",
            "data_sources": [
              "Zeek conn.log",
              "Ingestion logs from SIEM/Log Aggregator"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network chokepoints (e.g., core switches, internet gateway), SIEM/Log Aggregator ingestion points, All log-generating endpoints and servers",
            "action": [
              "Symbolic (IOC): Create a 'heartbeat' rule that expects at least one log event from every critical host within a defined interval (e.g., 15 minutes). If a host misses its heartbeat window, query network flow data (Zeek conn.log) for that host's IP address. If network activity is present but logs are not, trigger a 'Silent Host' alert.",
              "Statistical: For each host, establish a time series baseline of log volume per hour using methods like exponential smoothing. Continuously monitor the log volume against this baseline. Trigger an alert if the log volume drops below a dynamic threshold (e.g., below the 5th percentile of the historical distribution for that hour of the day) for a sustained period.",
              "Machine Learning: Use a time series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) on the log ingestion data for each host. This model can account for seasonality (e.g., lower volume overnight/weekends) and trends, providing a more robust detection of unexpected drops in telemetry compared to simple statistical thresholds. Correlate anomalies with network activity data to confirm the host is still online."
            ]
          },
          {
            "description": "A user session on a single host exhibits a sequence of process creations: first, enumeration of running services or processes (e.g., tasklist, sc query), followed immediately by a command to terminate a process or service identified as a security tool.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint workstations, Servers with interactive user logins, Privileged Access Workstations (PAWs)",
            "action": [
              "Symbolic (IOC): Implement a correlation rule that triggers if, within a 5-minute window on the same host and user session, a process creation event for a discovery tool ('tasklist.exe', 'sc.exe query') is followed by a process creation event for a termination command ('taskkill.exe', 'sc.exe stop') where the target is a known security agent (e.g., 'msmpeng.exe', 'sysmon64.exe').",
              "Statistical: Profile the sequence of commands executed by users. Identify rare command sequences by calculating the conditional probability of 'taskkill' following 'tasklist' within a short window. If this sequence is rare for a user but occurs, and the target of 'taskkill' is a low-prevalence process like a security agent, flag it as a high-risk anomaly.",
              "Machine Learning: Use a sequence-aware model, such as a Recurrent Neural Network (RNN), trained on streams of command-line executions per session. The model learns normal sequences of administrative and user behavior. It can then identify and alert on anomalous sequences that deviate from learned patterns, such as the 'discover-then-kill' TTP, without needing pre-defined rules for every possible security tool."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]