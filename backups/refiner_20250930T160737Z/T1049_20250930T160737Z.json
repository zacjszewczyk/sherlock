[
  {
    "information_requirement": "Is the adversary attempting to discover network connections from compromised systems?",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1049",
        "name": "System Network Connections Discovery",
        "evidence": [
          {
            "description": "A process creation event where the process hash is present on a threat intelligence feed of known malicious or dual-use network discovery tools.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek software.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints (Workstations and Laptops), Critical Servers (e.g., Domain Controllers, Application Servers), DMZ Servers",
            "action": [
              "Symbolic Logic: Create a detection rule that queries process creation logs (Windows Event ID 4688) and alerts when the 'ProcessHash' or 'Hashes' field matches a value in a curated watchlist of known malicious or high-risk network discovery tool hashes.",
              "Statistical Method: Profile the prevalence of dual-use tools (e.g., nmap.exe, netcat.exe) per host. Calculate the 95th percentile for execution frequency across the enterprise. Alert when a host's execution count for a specific tool exceeds this threshold over a 24-hour period, especially if the tool is rare in the environment.",
              "Machine Learning: Develop a classification model trained on process execution features (process name, parent process, command line, user context, hash) to predict whether an execution is malicious. Use labeled historical data of both benign and malicious discovery tool usage to train the model. Deploy the model to score new process events in real-time."
            ]
          },
          {
            "description": "Execution of native command-line utilities for network discovery (e.g., `netstat`, `net.exe`, `arp.exe`, `ipconfig.exe`, `nbtstat.exe`) with specific, reconnaissance-focused arguments (e.g., `netstat -an`, `net view`, `net session`, `arp -a`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Endpoints (Workstations and Laptops), Jump Servers, Domain Controllers",
            "action": [
              "Symbolic Logic: Implement a SIEM rule that triggers on process creation events (Windows Event ID 4688) where 'ProcessName' is a common discovery utility (e.g., `net.exe`, `netstat.exe`) and the 'CommandLine' contains suspicious argument combinations (e.g., `net view /domain`, `netstat -anop tcp`).",
              "Statistical Method: For each host, establish a baseline of the frequency and diversity of discovery command executions by user role. Calculate the entropy of command-line arguments used with `net.exe`. Alert when a low-entropy (highly repetitive/automated) or high-entropy (highly varied/exploratory) execution pattern deviates more than 2 standard deviations from the user's or host's baseline.",
              "Machine Learning: Use a sequence analysis model (e.g., an LSTM) to analyze the sequence of commands executed in a single session. Train the model on known attack chains and benign administrative sessions. Flag sessions where a network discovery command is preceded by suspicious activity (e.g., `whoami`) and followed by lateral movement attempts (e.g., use of `net.exe use`)."
            ]
          },
          {
            "description": "PowerShell script block execution (Windows Event ID 4104) or WMI activity containing code that enumerates network connections, configurations, or sessions using specific cmdlets or CIM/WMI classes.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688",
              "Microsoft-Windows-WMI-Activity/Operational Event ID 5858"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, Systems with PowerShell Remoting Enabled",
            "action": [
              "Symbolic Logic: Create a detection rule that searches PowerShell script block logs (Event ID 4104) for keyword patterns like 'Get-NetTCPConnection', 'Get-NetIPConfiguration', 'Win32_NetworkAdapterConfiguration', or obfuscated versions of these commands. Alert if the script's parent process is anomalous (e.g., `winword.exe`).",
              "Statistical Method: Analyze the statistical properties of PowerShell scripts, such as character frequency distribution or string length. Calculate the Jaccard similarity between a new script block and a known set of benign administrative scripts. Alert when the similarity score is below a defined threshold, indicating a potentially novel or obfuscated script.",
              "Machine Learning: Train a NLP-based classifier on the text of PowerShell script blocks (Event ID 4104). Use features like token frequency, cmdlet usage, and obfuscation indicators (e.g., Base64 encoding, concatenation) to classify scripts as benign, suspicious, or malicious. Prioritize alerts for scripts classified as suspicious that also perform network enumeration."
            ]
          },
          {
            "description": "A single source host establishing connections to an abnormally high number of unique internal destination hosts or ports over a short time frame, inconsistent with its established baseline behavior.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments (East-West traffic), Network Security Monitoring Sensor locations, VPC Flow Log collection points",
            "action": [
              "Symbolic Logic: Create a rule that alerts when a single source IP ('id.orig_h') in 'conn.log' connects to more than 20 unique destination IPs ('id.resp_h') on common management or discovery ports (e.g., 22, 135, 445, 3389) within a 1-minute window, excluding known scanner systems.",
              "Statistical Method: For each host, compute a baseline of the daily count of unique destination IPs and ports contacted. Alert when a host's daily count exceeds the 99th percentile of its own 30-day historical distribution, indicating a potential horizontal scanning event.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on `conn.log` data, using features like source IP, destination IP, destination port, and protocol. Identify outlier clusters that represent sparse, widespread connection patterns characteristic of network discovery, as opposed to dense clusters representing normal client-server communication."
            ]
          },
          {
            "description": "A network discovery utility (e.g., `netstat.exe`, `ipconfig.exe`) being spawned by a parent process not typically associated with system administration or network troubleshooting, such as `outlook.exe`, `chrome.exe`, or a web server process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Servers, User Workstations, Application Servers",
            "action": [
              "Symbolic Logic: Define a static list of invalid parent-child process relationships (e.g., `winword.exe` -> `net.exe`, `httpd.exe` -> `ipconfig.exe`). Create a detection rule that queries process creation logs (Event ID 4688) and alerts on any match to this list.",
              "Statistical Method: Generate a frequency map of all parent-child process relationships observed across the enterprise over 30 days. Alert when a new parent-child relationship occurs that is statistically rare (e.g., has occurred fewer than 5 times in the entire organization) and involves a discovery tool as the child process.",
              "Machine Learning: Train a graph-based anomaly detection model on process lineage data. Represent sessions as graphs where nodes are processes and edges are parent-child relationships. The model learns normal process execution graphs. Flag new session graphs that have a high anomaly score, particularly those involving discovery tools spawned from unusual parent nodes."
            ]
          },
          {
            "description": "A single user account executing network discovery commands from a number of distinct hosts that is statistically anomalous compared to its own baseline or the baseline of its peer group within a specific timeframe.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers (for login events), All Endpoints and Servers (for process events), Identity and Access Management Systems",
            "action": [
              "Symbolic Logic: Correlate process creation events (Event ID 4688) for discovery tools with successful logon events (Event ID 4624). Alert if a non-administrative user account executes a discovery command from more than 3 different hosts within one hour.",
              "Statistical Method: For each user, create a daily time series of the number of unique hosts from which they run discovery commands. Use a moving average and standard deviation to define a dynamic threshold. Alert when the daily count for a user exceeds their historical average by more than 3 standard deviations.",
              "Machine Learning: Model user behavior using entity-behavior analytics (UEBA). Create features for each user, such as frequency of discovery command usage, number of hosts accessed, and time of day. Use an unsupervised learning algorithm (e.g., Isolation Forest) to score user activity sessions for anomalies. Investigate users with the highest anomaly scores, especially when correlated with discovery activity across multiple hosts."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]