[
  {
    "information_requirement": "Is the adversary maintaining persistence using Windows Time Providers?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "The SHA256 hash of a DLL file specified in the 'DllName' value of a new or modified Time Provider registry key matches a known malicious hash from internal or external threat intelligence feeds.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Critical Workstations",
            "action": [
              "Symbolic: Monitor for registry value modifications (Windows Event ID 4657) to any 'DllName' value under 'HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\'. Upon detection, extract the DLL path, retrieve the file, calculate its SHA256 hash, and query against a threat intelligence database of known malicious file hashes. Alert on any match.",
              "Statistical: Establish a baseline of all 'DllName' values and their corresponding file paths for all hosts. Calculate the frequency of each DLL path across the enterprise. Alert on any 'DllName' value that is statistically rare (e.g., present on < 0.1% of endpoints) or points to a non-standard directory (e.g., not in %SystemRoot%\\System32).",
              "Machine Learning: Train a classification model (e.g., Random Forest) on features extracted from the DLL file itself (e.g., entropy, import/export tables, string characteristics) and its path. Use the model to predict the probability that a newly registered Time Provider DLL is malicious. Alert when the probability exceeds a predefined threshold."
            ]
          },
          {
            "description": "The 'w32tm.exe' process is executed with command-line arguments '/register' or '/config' and is immediately followed by a restart of the 'W32Time' service within a 5-minute window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Member Servers, Critical Workstations",
            "action": [
              "Symbolic: Create a correlation rule that triggers when a 'w32tm.exe /register' or 'w32tm.exe /config' process creation event (Windows Event ID 4688) is followed by a 'W32Time' service restart event (Windows Event ID 7036, Service Name: 'w32time') on the same host within 5 minutes. Alert if the initiating user is not a known administrative account or automated deployment system.",
              "Statistical: Profile the parent processes of 'w32tm.exe'. Calculate the frequency of each parent process (e.g., 'cmd.exe', 'powershell.exe', 'services.exe'). Alert when 'w32tm.exe' is spawned by a statistically rare parent process (e.g., 'winword.exe', 'outlook.exe') or a process running from a temporary directory.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) to learn normal sequences of events involving 'w32tm.exe' and the 'W32Time' service. Feed host event streams into the model and alert when a low-probability sequence is detected, such as a script dropping a DLL, followed by 'w32tm.exe /register', and a service restart."
            ]
          },
          {
            "description": "The 'svchost.exe' process hosting the W32Time service initiates network connections on ports other than UDP/123 or to destination IPs not on the approved NTP server allowlist.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, Internet Gateway, Domain Controllers",
            "action": [
              "Symbolic: Filter Zeek conn.log for connections where the destination port is not UDP/123. For any match, correlate the source IP and port with host logs (Windows Event ID 5156) to confirm the initiating application is 'svchost.exe' and the service is 'W32Time'. Alert if the destination IP is not on the enterprise's allowlisted NTP servers.",
              "Statistical: For each host, create a time series of the daily volume of data sent by the W32Time service process. Calculate the mean and standard deviation of this volume over a 30-day rolling window. Alert if the daily data volume exceeds 3 standard deviations from the mean, which could indicate C2 data exfiltration.",
              "Machine Learning: Use an autoencoder trained on features from normal W32Time network connections (protocol, destination port, data volume, connection duration, destination ASN). Feed all new connection data into the autoencoder and alert when the reconstruction error is anomalously high, indicating a deviation from learned normal behavior."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation by abusing Windows Time Providers?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1547.003",
        "name": "Time Providers",
        "evidence": [
          {
            "description": "A Time Provider's 'DllName' registry value is modified to point to a DLL located in a user-writable or non-standard directory (e.g., C:\\Users\\, C:\\ProgramData\\, C:\\PerfLogs\\, C:\\Windows\\Temp\\).",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user Workstations, Terminal Servers, Member Servers",
            "action": [
              "Symbolic: Monitor registry modifications (Windows Event ID 4657) to 'DllName' values under the Time Providers key. Create an alert rule that triggers if the new file path matches a regular expression for user-writable or temporary directories, such as '^C:\\\\(Users|Temp|PerfLogs|ProgramData)\\\\.*'.",
              "Statistical: Analyze the parent directories of all registered Time Provider DLLs across the environment. Calculate the frequency of each parent directory. Alert on any DLL registered from a directory that falls outside the 99th percentile of common locations (which should be almost exclusively '%SystemRoot%\\System32').",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features of registry modification events, including the process name making the change, the user context, and the path of the new DLL. Identify clusters of anomalous activity that deviate from the main cluster of legitimate system changes."
            ]
          },
          {
            "description": "A successful registry write event to a key or value under 'HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\' is attributed to a user account that is not 'NT AUTHORITY\\SYSTEM' or a member of a defined administrative group.",
            "data_sources": [
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, All Windows Endpoints and Servers",
            "action": [
              "Symbolic: For every successful registry write event (Windows Event ID 4657) to the Time Providers key path, enrich the event with the group memberships of the 'SubjectUserName'. Trigger an alert if the user is not 'NT AUTHORITY\\SYSTEM' and is not a member of a predefined list of administrative groups.",
              "Statistical: Create a baseline of all user accounts and processes that legitimately modify the Time Providers registry key. This list should be extremely small and stable. Alert on any account or process name that deviates from this established baseline, as it represents a statistical anomaly.",
              "Machine Learning: Use an anomaly detection model (e.g., Isolation Forest) on event features including 'SubjectUserName', 'ProcessName', and target registry key. Train the model on data from a known-good period to learn the profile of normal administrative changes and flag any event that deviates significantly."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within 10 minutes: 1. A process running at a 'Low' or 'Medium' integrity level creates a DLL file. 2. A registry modification event sets a Time Provider 'DllName' value to the path of that newly created DLL.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints with UAC enabled, Terminal Servers",
            "action": [
              "Symbolic: Create a stateful correlation rule that looks for a DLL file creation event by a process with a low/medium integrity level (from Windows Event ID 4688 with Token Elevation Type enabled). If detected, the rule should then monitor for a registry write (Windows Event ID 4657) within 10 minutes on the same host that points a 'DllName' value to that exact file path. Alert if this sequence completes.",
              "Statistical: For all 'DllName' registry writes, calculate the time delta between the DLL file's creation time and the registry modification time. A very small delta (e.g., under 1 minute) is anomalous, as legitimate time providers are not typically created on-the-fly. Alert when this time delta is in the bottom 1st percentile of all observed deltas.",
              "Machine Learning: Develop a graph-based analysis where events are nodes and relationships (e.g., 'process created file', 'process wrote to registry') are edges. Use a graph ML algorithm to identify subgraphs matching the pattern of 'low-integrity process -> creates -> DLL file <- referenced by <- high-privilege registry write' to uncover the full chain of the exploit."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]