[
  {
    "information_requirement": "Is the adversary using Electron applications to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1218.015",
        "name": "Electron Applications",
        "evidence": [
          {
            "description": "An Electron application process (e.g., teams.exe) initiates an outbound network connection to a destination IP address or domain present on a high-confidence threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Domain Name System (DNS) resolvers, Network egress points/firewalls",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) to attribute traffic to a parent Electron process. Perform a daily inner join of the destination IPs or domains (from Zeek dns.log) against a list of known malicious indicators from a threat intelligence platform. Alert on any match.",
              "Statistical: For each Electron application, track the rate of CTI matches over time. Establish a baseline for this rate (e.g., mean and standard deviation). Alert if the number of CTI matches for a specific application in a 24-hour window exceeds a statistical threshold, such as 3 standard deviations above the baseline, which could indicate a widespread campaign leveraging that application.",
              "Machine Learning: Train a binary classification model (e.g., Logistic Regression) using features such as process name, destination port, data volume, domain age, domain entropy, and a binary flag for CTI match. Use the model to generate a risk score for each connection, alerting on connections that are classified as malicious with high confidence."
            ]
          },
          {
            "description": "An Electron application is executed with command-line arguments used to disable security controls or enable debugging, such as '--no-sandbox' or '--remote-debugging-port'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Developer workstations, Production servers",
            "action": [
              "Symbolic: From process creation events (Windows Event ID 4688), monitor the command line for processes associated with known Electron applications. Use a regular expression to search for and alert on the presence of high-risk arguments, such as '--inspect', '--remote-debugging-port', '--gpu-launcher', '--disable-gpu-sandbox', or '--no-sandbox'.",
              "Statistical: For each user and Electron application, establish a baseline of normally used command-line arguments. Calculate the rarity of each argument or combination of arguments across the enterprise. Alert when a user's process exhibits an argument combination that is in the bottom 1st percentile of frequency, indicating highly unusual behavior for that user or application.",
              "Machine Learning: Vectorize command-line arguments for Electron applications using a TF-IDF (Term Frequency-Inverse Document Frequency) approach. Train an anomaly detection model, such as Isolation Forest or a One-Class SVM, on these vectors. Use the trained model to score new process executions and alert on those identified as outliers."
            ]
          },
          {
            "description": "A known Electron application process (e.g., slack.exe) spawns a child process that is a command-line interpreter (e.g., cmd.exe, powershell.exe) or script host (e.g., wscript.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices, Application servers",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) for parent-child relationships. Create a high-priority alert for any instance where a parent process from a list of known Electron applications spawns a child process from a watchlist of interpreters (e.g., cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, bash.exe).",
              "Statistical: Build a frequency table of all parent-child process pairs in the environment over a 30-day period. Alert when a new pair involving an Electron parent is observed for the first time or if an existing pair's frequency drops into a low percentile (e.g., <1%), indicating it is a rare event.",
              "Machine Learning: Model process relationships as a directed graph where nodes are processes and edges represent parent-child relationships. Use a graph-based anomaly detection algorithm to identify unusual edges, such as an edge from an 'Electron app' node to a 'shell' node that has a low centrality score or is not part of a common community subgraph."
            ]
          },
          {
            "description": "An Electron application initiates network traffic with anomalous characteristics, such as connections to a statistically rare domain, use of a non-standard port, or an unusually large data transfer volume.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Domain Name System (DNS) resolvers, Endpoint devices",
            "action": [
              "Symbolic: Define an allowlist of standard destination ports (e.g., 80, 443) for each major Electron application. Create a rule that alerts when a connection from one of these applications (identified by correlating Zeek conn.log with Windows Event ID 4688) uses a port not on its specific allowlist.",
              "Statistical: For each Electron application, baseline network connection metrics from Zeek conn.log (e.g., 'resp_bytes', 'duration', 'history'). Alert when a new connection's metric exceeds a dynamic threshold, such as the 99th percentile of the historical distribution for that application. For domains (from Zeek dns.log), alert if an application connects to a domain seen by less than 1% of other devices.",
              "Machine Learning: For each Electron application, model the volume of outbound data per hour as a time series. Use a forecasting model (e.g., SARIMA) to predict the expected range of data volume for the next interval. Alert if the observed data volume falls significantly outside the model's prediction interval, indicating a potential data exfiltration event."
            ]
          },
          {
            "description": "A child process is spawned by an Electron application with command-line arguments that reference or modify the parent application's core resource files, such as 'app.asar'.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices with installed Electron applications",
            "action": [
              "Symbolic: In process creation events (Windows Event ID 4688), inspect the command line of any child process spawned by an Electron application. Use a regular expression to detect if the command line contains file paths that point back to the parent process's installation directory, specifically targeting sensitive files like 'app.asar' or '.js' files within that directory structure.",
              "Statistical: Analyze the entropy of command lines for child processes spawned by Electron applications. A command line containing a long, encoded script to modify a file will likely have a higher entropy score than typical commands. Establish a baseline entropy score and alert on significant deviations.",
              "Machine Learning: Train a sequence-to-sequence autoencoder on legitimate sequences of process command-line arguments observed on endpoints. A malicious sequence, such as an Electron process spawning a shell that then contains arguments to modify the Electron app's own files, will have a high reconstruction error when passed through the model, triggering an anomaly alert."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]