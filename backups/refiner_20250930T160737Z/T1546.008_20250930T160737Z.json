[
  {
    "information_requirement": "Is the adversary establishing persistence by hijacking accessibility features?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1546.008",
        "name": "Accessibility Features",
        "evidence": [
          {
            "description": "An accessibility feature binary (e.g., sethc.exe, utilman.exe) is replaced, and the new file's hash matches a known malicious hash, or the Image File Execution Options (IFEO) registry key for an accessibility binary is modified to point to a known malicious executable.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 13",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Symbolic Logic: Monitor for file creation events (Sysmon Event ID 11) in C:\\Windows\\System32\\ where the TargetFilename is a known accessibility binary (e.g., sethc.exe, utilman.exe, osk.exe). Calculate the hash of the created file and compare it against a threat intelligence feed of known malicious file hashes. Alert on any match.",
              "Statistical Method: For registry modifications to IFEO keys (HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\<accessibility_binary>\\Debugger, Sysmon Event ID 13), establish a baseline of legitimate debugger values. Use frequency analysis to identify rare or first-time values written to these keys across the enterprise. A value with an occurrence frequency below a set threshold (e.g., seen on <1% of endpoints) should be flagged for review.",
              "Machine Learning Application: Train a classification model (e.g., Random Forest) using features from file creation and registry modification events. Features can include parent process name, user context, file hash entropy, file signature status, and the new registry value. The model, trained on labeled historical data (benign updates vs. known malicious modifications), can predict whether a new modification event is malicious."
            ]
          },
          {
            "description": "A sequence of events on an accessibility feature binary within a short time window: 1) change of ownership (e.g., via takeown.exe), 2) modification of permissions (e.g., via icacls.exe), and 3) a file write or rename operation.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4670",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a process creation event for takeown.exe or icacls.exe (Sysmon Event ID 1) targeting an accessibility binary is followed within 2 minutes by a file write event (Windows Event ID 4663) on the same binary, originating from the same user session. Alert on this specific sequence.",
              "Statistical Method: For each host, calculate the baseline rate of permission changes (Windows Event ID 4670) on system files in C:\\Windows\\System32\\. Use a moving average and standard deviation for this rate. An alert is generated if the number of permission changes on accessibility binaries in a short time window (e.g., 5 minutes) exceeds a statistical threshold (e.g., 3 standard deviations above the mean), indicating anomalous tampering activity.",
              "Machine Learning Application: Use a sequence analysis model (e.g., a Hidden Markov Model) to learn normal sequences of file operations on system binaries during patching or software installation. An anomalous sequence, such as takeown -> icacls -> write on sethc.exe outside of a known patching window, would be flagged by the model as a high-probability attack."
            ]
          },
          {
            "description": "A process with a non-standard parent (e.g., WINWORD.EXE, POWERSHELL.EXE, MSHTA.EXE) performs a write or modification to an accessibility feature binary or its corresponding IFEO registry key.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 11",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Standard User Workstations, Privileged User Workstations",
            "action": [
              "Symbolic Logic: Maintain an allowlist of approved processes (e.g., TrustedInstaller.exe, msiexec.exe) that can modify accessibility binaries or their IFEO keys. Create a rule that alerts whenever a process not on this allowlist performs a file write (Sysmon Event ID 11) to an accessibility binary or a registry set (Sysmon Event ID 13) to its IFEO 'Debugger' value.",
              "Statistical Method: Analyze the parent-child process relationships for all modifications to accessibility binaries. Calculate the frequency of each parent process (e.g., WINWORD.EXE) performing such a modification. A parent process that is statistically rare (e.g., in the 1st percentile of observed parent processes for system file modifications) should be flagged for investigation.",
              "Machine Learning Application: Train a classification model on process creation events (Sysmon Event ID 1) that lead to system modifications. Features would include the full parent-child process lineage, command-line arguments, user context, and process integrity level. The model would learn to classify modification events as either 'benign-patch' or 'suspicious-modification' based on this rich contextual data."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by executing a hijacked accessibility feature?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1546.008",
        "name": "Accessibility Features",
        "evidence": [
          {
            "description": "A command-line shell or scripting interpreter (e.g., cmd.exe, powershell.exe) is executed as a child process of an accessibility feature binary, and the command line contains strings indicative of malicious activity (e.g., credential dumping, reconnaissance, reverse shell).",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Logon screens of all Windows systems, Remote Desktop Gateway Servers, Domain Controllers",
            "action": [
              "Symbolic Logic: Monitor process creation events (Sysmon Event ID 1) where the ParentImage is an accessibility binary. Scan the CommandLine of the child process for a list of high-confidence malicious keywords and regex patterns (e.g., 'mimikatz', 'iex(new-object net.webclient).downloadstring', 'net user /add', 'whoami /priv'). Alert on any match.",
              "Statistical Method: For all command lines executed by shells spawned from accessibility features, calculate the Shannon entropy of the command line string. Establish a baseline entropy score for typical administrative commands. Unusually high entropy often indicates obfuscated or encoded commands (e.g., Base64). Alert when the entropy of a command line exceeds a statistical threshold (e.g., > 95th percentile of the baseline).",
              "Machine Learning Application: Use a Natural Language Processing (NLP) model, fine-tuned on a labeled dataset of malicious and benign command lines, to classify commands as malicious. The model can learn the structure and semantics of malicious commands, identifying novel threats that do not match simple keyword signatures."
            ]
          },
          {
            "description": "A sequence of process creations within a short timeframe, initiated by an accessibility feature's child process, that corresponds to creating a new user and adding them to a privileged group.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4720",
              "Windows Event ID 4732"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Logon screens of all Windows systems, Domain Controllers, Active Directory databases",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when: 1) an accessibility feature spawns a shell (Sysmon Event ID 1), followed within 1 minute by 2) a user creation event (Windows Event ID 4720), and then 3) an event adding a member to a local administrative group (Windows Event ID 4732). All events must be linked to the same host and logon session.",
              "Statistical Method: Analyze the time delta between a shell being spawned by an accessibility feature and a subsequent user creation event (4720). A time delta falling in the lowest percentile (e.g., < 10 seconds) is highly anomalous and indicative of a scripted attack, whereas manual administrative actions would have larger, more variable delays.",
              "Machine Learning Application: Use a graph-based analysis model where nodes are processes, users, and groups, and edges are actions. Train the model on benign administrative activity to learn normal graph structures. An attack sequence would form a distinct subgraph pattern (e.g., utilman.exe -> cmd.exe -> net.exe -> net.exe) that the model can identify as an anomaly."
            ]
          },
          {
            "description": "A process creation event where the parent process is a known accessibility binary and the child process is a command shell, scripting interpreter, or remote access tool.",
            "data_sources": [
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Logon screens of all Windows systems, Remote Desktop Gateway Servers",
            "action": [
              "Symbolic Logic: Create a high-severity alert for any process creation event (Sysmon Event ID 1) where the ParentImage is one of {sethc.exe, utilman.exe, osk.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe} and the Image is one of {cmd.exe, powershell.exe, pwsh.exe, wscript.exe, cscript.exe, mshta.exe}. This is a high-fidelity indicator.",
              "Statistical Method: Establish a baseline of all parent-child process relationships across the enterprise. Calculate the frequency of each unique parent-child pair. An alert can be generated for any observed parent-child pair with a frequency below a very low threshold (e.g., seen less than 5 times across the entire enterprise history), flagging it as a rare occurrence.",
              "Machine Learning Application: Train an autoencoder on vectors representing normal parent-child process relationships. When a malicious event, like utilman.exe spawning cmd.exe, is fed to the model, the reconstruction error will be high, flagging it as a novel anomaly not seen in the training data of benign events."
            ]
          },
          {
            "description": "A process spawned by an accessibility feature binary initiates an outbound network connection.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Firewall and proxy servers, Remote Desktop Gateway Servers, Domain Controllers",
            "action": [
              "Symbolic Logic: Correlate process creation events (Sysmon Event ID 1) where the parent is an accessibility binary with network connection events (Sysmon Event ID 3) from the child process ID. Check the destination IP address against a threat intelligence feed of known C2 servers and the destination port against a list of common reverse shell ports.",
              "Statistical Method: For all outbound connections from processes spawned by accessibility features, use frequency analysis on Zeek conn.log data to identify rare destination IPs, domains, or ports. Calculate the JA3 hash of the TLS connection (from Zeek ssl.log) and flag hashes that are rare or have a low prevalence in the environment.",
              "Machine Learning Application: Use time-series analysis on network traffic volume (bytes out from Zeek conn.log) associated with the source IP and timeframe of the suspicious process creation. A model like ARIMA can be trained on normal network behavior to detect anomalous, sustained data flows that deviate from learned patterns, indicating potential exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]