[
  {
    "information_requirement": "Is an adversary achieving persistence by creating or modifying a macOS Login/Logout Hook?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1037.002",
        "name": "Login Hook",
        "evidence": [
          {
            "description": "A measurable change is detected in the com.apple.loginwindow.plist file, specifically the addition or modification of the LoginHook or LogoutHook keys, pointing to an executable script.",
            "data_sources": [
              "macOS Endpoint Security Framework (ESF) logs",
              "osquery process_events",
              "File monitoring logs for /Library/Preferences/com.apple.loginwindow.plist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (laptops, desktops), particularly those of developers or administrators.",
            "action": [
              "Symbolic Logic: Monitor process execution logs for the `defaults` command with arguments `write com.apple.loginwindow LoginHook` or `write com.apple.loginwindow LogoutHook`. Alert on any occurrence of this command string.",
              "Statistical Method: Establish a baseline of the `com.apple.loginwindow.plist` file hash across all macOS endpoints. Use frequency analysis to identify rare or unique hashes. A hash with a prevalence of less than 1% of the fleet warrants investigation for unauthorized modification.",
              "Machine Learning Application: Use a file integrity monitoring (FIM) system to track all modifications to `/Library/Preferences/com.apple.loginwindow.plist`. Train a classification model (e.g., a decision tree) on features of the modifying process (e.g., parent process, user, TTY, command-line arguments) to distinguish between legitimate administrative changes (e.g., by MDM software) and anomalous modifications. Alert when a modification is classified as anomalous."
            ]
          },
          {
            "description": "A process, whose parent process is `loginwindow` and is initiated at user login, establishes a network connection to a destination that is either known-malicious, has a low reputation score, or is anomalous based on historical behavior for that user or device.",
            "data_sources": [
              "macOS process execution logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, network egress points (gateways, firewalls).",
            "action": [
              "Symbolic Logic: Correlate process execution logs on macOS endpoints with network connection logs (Zeek conn.log). Alert if a process launched by `loginwindow` at logon connects to an IP or domain on a threat intelligence blocklist.",
              "Statistical Method: For each user, build a profile of typical domains and IPs contacted by processes at logon. Calculate a rarity score for each new connection based on historical frequency (e.g., using inverse document frequency). Alert on connections to destinations in the 99th percentile of rarity for that user or device profile.",
              "Machine Learning Application: Implement a time-series analysis on the volume of outbound data (e.g., `orig_bytes` in Zeek conn.log) for processes launched at logon. Use an anomaly detection model (e.g., SARIMA or LSTM) to identify significant deviations from the established baseline of data transfer patterns, which could indicate C2 communication or data exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is an adversary leveraging a Login/Logout Hook to execute a script with elevated (root) privileges?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1037.002",
        "name": "Login Hook",
        "evidence": [
          {
            "description": "A process is observed running with a UID of 0 (root) immediately following a user login event, and the process path matches the value specified in the LoginHook or LogoutHook key of com.apple.loginwindow.plist.",
            "data_sources": [
              "macOS process execution logs with user context",
              "osquery process_events table",
              "File monitoring logs for /Library/Preferences/com.apple.loginwindow.plist"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, particularly multi-user systems or those accessed by standard users.",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a process starts with UID 0 (root) and its executable path is listed as the value for the `LoginHook` or `LogoutHook` key in the `com.apple.loginwindow.plist` file. This requires joining process start events with file content monitoring.",
              "Statistical Method: Baseline the set of all processes that normally run as root on macOS endpoints and profile their parent processes. Create an alert for any new or rare process that runs as root where the parent process is `loginwindow`, as this is highly anomalous. A process seen running as root on < 0.1% of endpoints should be flagged for review.",
              "Machine Learning Application: Develop a sequence analysis model that tracks user activity. The model should identify the sequence: 1) A user modifies a script file. 2) The same user (or another process) modifies `com.apple.loginwindow.plist` to point to that script. 3) Upon next login, that script executes as root (UID 0). Classify this sequence as a high-confidence privilege escalation event."
            ]
          },
          {
            "description": "Following a login event, a process originating from a Login Hook (parent is `loginwindow`) is observed performing privileged actions such as writing to /etc/sudoers, creating a new user account via `dscl`, or disabling security tools.",
            "data_sources": [
              "macOS process execution logs",
              "macOS file integrity monitoring logs",
              "macOS Unified Log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System directories on macOS endpoints (`/etc/`, `/System/Library/`), user account databases, security configuration files.",
            "action": [
              "Symbolic Logic: Alert on any process with a parent process name of `loginwindow` that executes commands containing `dscl . -create /Users/`, `visudo`, `spctl --master-disable`, or writes to sensitive files like `/etc/sudoers` or `/etc/passwd`.",
              "Statistical Method: Calculate the Shannon entropy of command lines for processes spawned by `loginwindow`. A high entropy score can indicate obfuscated or complex commands often used for malicious activity. Alert on commands whose entropy score exceeds the 95th percentile of the historical distribution for that endpoint.",
              "Machine Learning Application: Use a graph-based analysis to model process relationships and actions. Represent processes as nodes and actions (file modification, network connection, process creation) as edges. Train a graph neural network (GNN) to identify subgraphs that represent malicious behavior, such as a login-hook-spawned process creating a new user and then establishing a reverse shell. Flag any subgraph that matches this learned malicious pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]