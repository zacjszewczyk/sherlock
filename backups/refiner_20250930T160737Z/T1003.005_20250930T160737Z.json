[
  {
    "information_requirement": "Has the adversary accessed cached domain credentials? (PIR)",
    "tactic_id": "TA0006",
    "tactic_name": "Credential Access",
    "indicators": [
      {
        "technique_id": "T1003.005",
        "name": "Cached Domain Credentials",
        "evidence": [
          {
            "description": "Execution of a process with a file hash matching a known credential dumping tool (e.g., Mimikatz, secretsdump.py) from a cyber threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations, Critical Application Servers",
            "action": [
              "Symbolic (IOC Match): Correlate the process executable hash (from Sysmon Event ID 1) against a threat intelligence feed of known credential dumping tool hashes. Generate a high-severity alert upon a match.",
              "Statistical (Rarity Analysis): Analyze the prevalence of all process hashes across the enterprise. A hash that is extremely rare (e.g., seen on < 0.01% of endpoints) but is associated with a process name like 'mimikatz.exe' or runs from a non-standard directory should have its alert severity increased.",
              "Machine Learning (Classification): Use a supervised classification model (e.g., Random Forest) trained on process metadata (path, name, hash, parent process) to classify new processes as benign or malicious. Features should include hash prevalence, path entropy, and whether the parent process is a common shell (powershell.exe, cmd.exe)."
            ]
          },
          {
            "description": "Execution of a process with command-line arguments containing specific strings or patterns indicative of accessing or dumping cached credentials (e.g., 'sekurlsa::logonpasswords', 'reg save hklm\\security', 'tdbdump').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Authentication Servers, Linux systems integrated with Active Directory",
            "action": [
              "Symbolic (Regex Match): Create and apply a SIEM rule that uses regular expressions to search process command-line arguments (from Windows Event ID 4688 or Sysmon Event ID 1) for known credential dumping commands like 'reg.exe save HKLM\\\\SECURITY', 'sekurlsa::', 'lsadump::cache', and 'tdbdump'. Alert on any match.",
              "Statistical (Frequency Analysis): Calculate the historical frequency of specific command-line argument patterns per user and per host. A command that is statistically anomalous for a given user or host (e.g., first time 'reg.exe' is used by a user to access the SECURITY hive) should be flagged. Use a percentile-based threshold (e.g., command rarity is in the 99th percentile for that user) to trigger an alert.",
              "Machine Learning (Time-Series Anomaly Detection): Develop a time-series model to forecast the expected volume of sensitive command-line executions per hour across the environment. A sudden, unexplained spike in these commands that significantly deviates from the forecast (e.g., exceeds the 95% prediction interval) indicates a potential coordinated attack and should be investigated."
            ]
          },
          {
            "description": "An unauthorized or unexpected process (e.g., powershell.exe, reg.exe) directly accesses critical registry hives (HKEY_LOCAL_MACHINE\\SECURITY, HKEY_LOCAL_MACHINE\\SYSTEM, HKEY_LOCAL_MACHINE\\SAM).",
            "data_sources": [
              "Windows Event ID 4656",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Windows Servers with cached credentials enabled, User Workstations",
            "action": [
              "Symbolic (Allowlist/Blocklist): Configure System Access Control Lists (SACLs) on HKLM\\SECURITY, HKLM\\SYSTEM, and HKLM\\SAM. Create a SIEM rule to alert when a process not on an allowlist (e.g., not lsass.exe, System) generates a read access event (Windows Event ID 4663) for these hives.",
              "Statistical (Path Entropy): For each process accessing these critical hives, calculate the entropy of its file path. A process accessing these hives from a high-entropy path (e.g., 'C:\\Users\\Public\\AppData\\Local\\Temp\\abcdef123.exe'), which is statistically rare, is highly suspicious and should be scored as a high-risk event.",
              "Machine Learning (Clustering): Use an unsupervised clustering algorithm (e.g., DBSCAN) on events related to registry hive access. Cluster based on features like process name, user context, and time of day. Outlier clusters or individual outlier events that do not belong to established 'benign' clusters represent anomalous access patterns requiring investigation."
            ]
          },
          {
            "description": "A process not on an established allowlist requests a handle with specific access rights (e.g., PROCESS_VM_READ) to the Local Security Authority Subsystem Service (lsass.exe) process.",
            "data_sources": [
              "Sysmon Event ID 10"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers, especially Domain Controllers",
            "action": [
              "Symbolic (Signature Match): Monitor Sysmon Event ID 10 for any process accessing lsass.exe. Create an alert rule that triggers if the 'GrantedAccess' code includes '0x1010' (PROCESS_VM_READ and PROCESS_QUERY_INFORMATION) and the 'SourceImage' is not on a pre-defined allowlist of legitimate system/security processes.",
              "Statistical (Behavioral Baselining): For each user and host, create a baseline of processes that normally access lsass.exe. Monitor for statistical deviations. For example, if a user's session spawns a process (e.g., 'rundll32.exe') that accesses LSASS for the first time, and this behavior is rare (<1% of users), increase the event's risk score.",
              "Machine Learning (One-Class SVM): Train a one-class SVM (Support Vector Machine) model on features from legitimate LSASS access events (SourceImage path, parent process, user, GrantedAccess code). Use this model to identify any new access events that are anomalous or novel, indicating a potential credential dumping attempt."
            ]
          },
          {
            "description": "A sequence of events on a single host within a short time window: 1) a potential credential dumping indicator (e.g., LSASS access, suspicious command), followed by 2) multiple failed or successful network logons to other systems originating from the source host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 10",
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise-wide network traffic gateways, Authentication logs on all servers, Process execution logs on all endpoints",
            "action": [
              "Symbolic (Correlation Rule): Create a SIEM rule that triggers when an alert for LSASS access or suspicious command-line usage is generated for a host, AND within the next 30 minutes, that same host originates network logons (Windows Event ID 4624/4625, Logon Type 3) to more than 5 distinct target hosts for the first time in 24 hours.",
              "Statistical (Connection Baselining): Following a credential dumping indicator on a host, monitor its network activity in Zeek conn.log. Calculate the 95th percentile for its daily outbound connection counts and total bytes sent. If, in the hour following the indicator, the host exceeds this percentile for either metric, flag it for anomalous lateral movement or exfiltration.",
              "Machine Learning (Hidden Markov Model): Use a Hidden Markov Model (HMM) where the hidden states are 'Benign Activity', 'Credential Dumping', and 'Lateral Movement'. Train the model on sequences of security events (process creation, network connections, authentication events). An observed sequence of events that results in a high probability of transitioning from 'Benign Activity' to 'Credential Dumping' and then to 'Lateral Movement' would generate a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]