[
  {
    "information_requirement": "Has the adversary moved laterally using SSH Hijacking?",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1563.001",
        "name": "SSH Hijacking",
        "evidence": [
          {
            "description": "An SSH connection (TCP/22) is observed where either the source or destination host is on a dynamic watchlist of compromised or suspicious systems.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network choke points (e.g., core switches, data center firewalls), DNS servers, Threat Intelligence platforms.",
            "action": [
              "Continuously query SSH connection logs (Zeek conn.log where `id.resp_p` == 22) for any source (`id.orig_h`) or destination (`id.resp_h`) IP address present in a static list of known compromised hosts or a dynamic watchlist of hosts with active high-severity alerts. Generate a critical alert upon a match.",
              "For each host, calculate a 'suspicion score' based on the number and severity of security alerts over a rolling time window. For any new SSH connection, calculate a combined risk score by summing the suspicion scores of the source and destination hosts. Flag connections where the combined score exceeds the 99th percentile of all connection scores observed in the last 24 hours.",
              "Use a supervised classification model (e.g., a Gradient Boosting Machine) trained on historical alert data to predict the likelihood that a given host is compromised. Ingest Zeek conn.log data in real-time and apply the model to both the source and destination hosts of an SSH session. Flag any session where the predicted compromise probability for either host exceeds a predefined threshold (e.g., 0.8)."
            ]
          },
          {
            "description": "A process is created for an SSH client (e.g., ssh.exe, ssh) containing command-line arguments for connection multiplexing or control socket manipulation (e.g., '-M', '-S', 'ControlMaster', 'ControlPath').",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical servers (e.g., application servers, database servers), developer workstations, administrative jump boxes/bastion hosts.",
            "action": [
              "Create a detection rule that triggers on any process creation event (Windows Event ID 4688 or Sysmon Event ID 1) where `ProcessName` is 'ssh.exe' (or equivalent) and `CommandLine` contains '-S', '-M', 'ControlMaster', or 'ControlPath'. These are direct indicators of multiplexing attempts.",
              "For each user, calculate the historical frequency of using SSH multiplexing arguments. Maintain a baseline of this frequency. Alert when a user executes SSH with these arguments if their historical probability of doing so is below a low threshold (e.g., < 1%), identifying users who do not normally use these advanced features.",
              "Train a character-level NLP model (e.g., an LSTM) on a large corpus of legitimate command-line arguments. Use the model to calculate the perplexity (a measure of how 'surprising' a sequence is) of newly observed command lines for ssh.exe. A command line with an unusually high perplexity score, particularly if it includes multiplexing flags, indicates a potential anomaly crafted by an attacker."
            ]
          },
          {
            "description": "A single source host establishes an anomalously high number of distinct outbound SSH connections within a short time window (fan-out), or connects to a destination host that is statistically rare for that source or user.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal network segments, authentication logs on Domain Controllers and member servers, network flow collectors.",
            "action": [
              "Define a rule that triggers if a single source IP (`id.orig_h`) initiates more than 5 new SSH connections to distinct destination IPs (`id.resp_h`) within a 10 minute window. Correlate with authentication logs (Event ID 4624) to ensure the activity is tied to a single user account.",
              "For each user account, build a historical baseline of destination hosts they connect to via SSH. Calculate the probability of connection for each user-destination pair. Alert when a user initiates an SSH connection to a host that falls below a low probability threshold (e.g., in the bottom 5th percentile of their typical destinations).",
              "Use unsupervised learning (e.g., DBSCAN clustering) on SSH connection data (source IP, destination IP, user, time of day). Identify clusters of normal activity. Flag any new SSH connection that does not fall into an existing cluster and is classified as a noise point, as these outliers represent connections that deviate from established patterns of behavior."
            ]
          },
          {
            "description": "A process spawned by an SSH daemon (sshd) executes commands associated with reconnaissance, credential access, or further lateral movement (e.g., `whoami`, `net group`, `mimikatz.exe`, `psexec.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on critical servers and workstations, especially those designated as SSH targets (e.g., Linux servers, admin workstations).",
            "action": [
              "On a destination host, monitor for process creation events (Sysmon Event ID 1) where the `ParentImage` is the SSH daemon process. Create a rule to alert if the child `Image` or `CommandLine` matches a watchlist of suspicious tools and commands (e.g., `mimikatz.exe`, `ipconfig /all`, `net group 'Domain Admins'`, `quser`).",
              "For each SSH session, calculate the Shannon entropy of the command-line arguments of all child processes spawned by the SSH daemon. Establish a baseline for normal session command entropy. A sudden, sharp increase in entropy can indicate an attacker performing discovery, moving away from scripted or typical administrative commands.",
              "Apply a pre-trained NLP model to the command lines executed within an SSH session to classify each command as benign, discovery, or malicious. Use a time-series model to analyze the sequence of classifications. A sequence transitioning from benign to discovery and then to malicious is a strong indicator of a hijacked session."
            ]
          },
          {
            "description": "An SSH connection is observed that violates a historically established role-based access baseline, such as a workstation-to-workstation connection, or a server that typically only acts as an SSH destination initiating an outbound SSH connection.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "East-west traffic logs from core network switches, network tap/SPAN port data, data center egress points.",
            "action": [
              "Define asset groups (e.g., 'Workstations', 'Web Servers', 'Database Servers'). Create a rule matrix of allowed SSH paths (e.g., 'Workstations' -> 'Web Servers' is allowed; 'Web Servers' -> 'Workstations' is denied). Alert on any SSH connection in Zeek conn.log that violates this predefined policy matrix.",
              "Profile the SSH connection directionality for every host. For each host, calculate the ratio of inbound to outbound SSH connections over a 30-day period. Classify hosts as 'Client' (ratio << 1), 'Server' (ratio >> 1), or 'Both'. Alert if a host's behavior changes category, e.g., a host classified as a 'Server' suddenly initiates an outbound SSH connection.",
              "Model the internal network as a directed graph where hosts are nodes and SSH connections are edges. Use a community detection algorithm (e.g., Louvain Modularity) to identify clusters of hosts that frequently interact. An SSH connection that bridges two distinct and typically separate communities (e.g., a connection from a host in the 'HR servers' community to a host in the 'R&D workstations' community) is a high-confidence anomaly."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]