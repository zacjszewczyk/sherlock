[
  {
    "information_requirement": "Has the adversary executed commands using cloud APIs?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1059.009",
        "name": "Cloud API",
        "evidence": [
          {
            "description": "Execution of a cloud CLI tool where command-line arguments contain atomic indicators (e.g., IP addresses, domains, resource names) from threat intelligence feeds.",
            "data_sources": [
              "Windows Event ID 4688",
              "AWS CloudTrail",
              "Azure Activity Logs",
              "Google Cloud Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Developer workstations, administrator jump boxes, CI/CD servers, cloud control plane.",
            "action": [
              "Symbolic Logic: Query process creation logs (Windows Event ID 4688) and cloud audit logs for cloud CLI tool names (`aws.exe`, `az.exe`, `gcloud.exe`) or direct API calls. Match the full command-line arguments or API parameters against a regularly updated, curated list of malicious indicators (IPs, domains, keys, resource names) from threat intelligence using regular expressions.",
              "Statistical Method: For command lines matching cloud CLI tools, calculate the rarity of observed arguments or argument combinations across the enterprise over a 30-day window. Flag commands containing arguments that fall below a low frequency threshold (e.g., seen in less than 0.1% of all CLI executions), as this may indicate novel or targeted malicious commands not yet in CTI feeds.",
              "Machine Learning: Train a classification model (e.g., Logistic Regression) on labeled command-line strings (benign vs. malicious from CTI). Use features like argument count, presence of specific keywords ('delete', 'create', 'put-policy'), and character entropy. Apply the model to new CLI executions or API calls to generate a real-time maliciousness score."
            ]
          },
          {
            "description": "Execution of cloud API calls or CLI commands using patterns associated with reconnaissance, credential theft, or defense evasion.",
            "data_sources": [
              "Windows Event ID 4688",
              "AWS CloudTrail",
              "Azure Activity Logs",
              "Google Cloud Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud provider control plane (e.g., AWS Management Console, Azure Portal), CI/CD pipeline runners, administrator workstations.",
            "action": [
              "Symbolic Logic: Create and apply a ruleset to detect high-risk command patterns in cloud CLI executions (Windows Event ID 4688) or cloud audit logs. The rules should flag commands associated with reconnaissance (e.g., 'list-users', 'get-secret-value', 'describe-instances'), credential creation ('create-access-key', 'new-ad-user'), or defense evasion ('delete-trail', 'put-bucket-logging --status Disabled', modification of permissive network ACLs).",
              "Statistical Method: For each user, establish a baseline of normal command patterns by calculating the frequency of different command 'verbs' (e.g., list, get, create, delete, put). Use a chi-squared test to detect significant deviations in the distribution of command types for a user over a given time period (e.g., a sudden spike in 'delete' commands from a user who normally only performs 'list' actions).",
              "Machine Learning: Use an unsupervised learning algorithm like K-Means clustering on vectorized representations (e.g., TF-IDF) of command-line arguments. Analyze the resulting clusters to identify groups of anomalous or suspicious command patterns that deviate from the main clusters of benign administrative activity. New commands can then be assigned to the nearest cluster, with alerts generated if they fall into a suspicious cluster."
            ]
          },
          {
            "description": "Execution of a cloud CLI tool by a user account not authorized for cloud administration, from an atypical parent process, or from a non-standard file path.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All corporate endpoints, application servers, developer workstations.",
            "action": [
              "Symbolic Logic: From Windows Event ID 4688, create a rule that alerts when a cloud CLI process is executed by a user account not in the 'Cloud Administrators' or 'DevOps' Active Directory groups. Further, alert if the parent process is not an approved shell ('powershell.exe', 'cmd.exe'), IDE, or CI/CD tool (e.g., alert on parent 'winword.exe' or 'outlook.exe').",
              "Statistical Method: For each user, profile the parent processes that typically spawn cloud CLIs and calculate the probability $$ P(\\text{Parent} | \\text{User}) $$. Alert when a CLI execution occurs where the observed parent process has a very low probability for that specific user (e.g., below the 5th percentile of observed parent process frequencies for that user).",
              "Machine Learning: Train a One-Class SVM (Support Vector Machine) model on features of benign CLI execution context, including User, Parent Process Name, and Process File Path. The model learns a boundary around 'normal' activity. Any new execution that falls outside this boundary is classified as an anomaly and flagged for investigation."
            ]
          },
          {
            "description": "A statistically significant increase in the volume or frequency of cloud CLI process executions or network connections to cloud API endpoints from a single host.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, VPN concentrators, individual host network interfaces.",
            "action": [
              "Symbolic Logic: Create a simple threshold rule that triggers an alert if the number of connections from a single source IP to known cloud API endpoints (e.g., `*.amazonaws.com`, `management.azure.com` on port 443 in Zeek conn.log) exceeds a high, fixed number (e.g., 1000 connections in 10 minutes) to detect brute-force or rapid scripted activity.",
              "Statistical Method: For each source IP, calculate a rolling 30-day baseline of API call volume (count of CLI executions from Event ID 4688 or connections in Zeek conn.log) per hour. Alert if the current hour's activity exceeds a dynamic threshold, such as 3 standard deviations above the mean or the 99th percentile for that specific hour of the day and day of the week.",
              "Machine Learning: Implement a time-series forecasting model (e.g., ARIMA or Prophet) for each host's API call volume. The model will predict the expected volume for the next time interval (e.g., next 15 minutes). Generate an alert if the actual observed volume significantly exceeds the model's prediction interval, indicating a statistically unlikely burst of activity."
            ]
          },
          {
            "description": "A sequence of host activities within a short time window that includes network download, script execution, and subsequent cloud API calls.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, public-facing web servers, CI/CD servers.",
            "action": [
              "Symbolic Logic: Using a SIEM, create a correlation rule that triggers when the following sequence of events originates from the same host within a 5-minute window: 1. Process creation for a network utility like 'curl.exe' or 'bitsadmin.exe' (Windows Event ID 4688). 2. Process creation for a scripting engine like 'powershell.exe'. 3. Process creation for a cloud CLI ('aws.exe', 'az.exe') or a spike in connections to cloud API endpoints (Zeek conn.log).",
              "Statistical Method: Calculate the entropy of process names executed on a host within a rolling 5-minute window. A normal user session has low process entropy. A chained attack involving downloaders, script hosts, and CLI tools will cause a sudden spike in process name entropy. Alert when this entropy score for a host crosses a dynamically calculated threshold (e.g., 95th percentile of entropy scores across all hosts).",
              "Machine Learning: Model user sessions as sequences of events (process creations, network connections). Use a sequence-based anomaly detection model, such as a Recurrent Neural Network (RNN), trained on benign user sessions. The model learns normal sequences of actions. Feed new event sequences into the model and alert when the model assigns a low probability to the observed sequence, indicating it is anomalous."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]