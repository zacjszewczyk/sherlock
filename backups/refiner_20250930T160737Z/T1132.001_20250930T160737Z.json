[
  {
    "information_requirement": "Is the adversary communicating with command and control infrastructure using encoded data?",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1132.001",
        "name": "Standard Encoding",
        "evidence": [
          {
            "description": "Detection of specific encoded strings or byte sequences within network traffic payloads that match signatures from threat intelligence feeds for known malware C2 using standard encoding.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway/Egress Points",
            "action": [
              "Symbolic: 1. Ingest threat intelligence feeds containing signatures of encoded C2 patterns (e.g., specific Base64 strings, hex-encoded commands, unique MIME boundaries). 2. Create a rule to scan the http.log URI and body fields, files.log extracted file content, and sampled conn.log payloads for these exact signatures using regular expressions. 3. Generate a high-severity alert upon a match, including the signature that was matched and the full connection details.",
              "Statistical: 1. For traffic matching known C2 destination ports but not a specific signature, calculate the frequency of character sets (e.g., Base64 alphabet `[A-Za-z0-9+/=]`). 2. Establish a baseline for character frequency distribution for legitimate traffic on those ports. 3. Flag connections where the character frequency distribution deviates by more than 3 standard deviations from the established baseline, suggesting a high likelihood of encoding.",
              "Machine Learning: 1. Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled datasets of benign and malicious (encoded C2) network payloads. 2. Use features such as n-gram frequency, character distribution, string length, and entropy. 3. Apply the trained model to classify new, unknown network payloads in near real-time. A classification of 'malicious-encoded' with a high confidence score triggers an alert for analyst investigation."
            ]
          },
          {
            "description": "Presence of Base64, Hexadecimal, or URL encoding patterns within network protocol fields where such encoding is anomalous (e.g., DNS subdomains, HTTP User-Agents, custom HTTP headers).",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Resolvers",
            "action": [
              "Symbolic: 1. Develop regular expressions to detect common encoding schemes (e.g., Base64 `(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?`, long hex strings `[0-9a-fA-F]{20,}`). 2. Apply these regex patterns against specific fields in Zeek logs: http.log (uri, user_agent, referrer, custom headers), dns.log (query, answers), and conn.log (service). 3. Alert when an encoding pattern is detected in a field where it is not expected, especially for connections to low-reputation or newly registered domains.",
              "Statistical: 1. For each relevant log field (e.g., http.log User-Agent, dns.log query), calculate the Shannon entropy of the string value for each event. The entropy of a Base64 string is typically around $$ 5.9 $$. 2. Establish a baseline entropy score for each field across all traffic (e.g., typical User-Agent entropy is low, around $$ 3.5-4.5 $$). 3. Identify outliers by flagging any event where the entropy exceeds a high percentile threshold (e.g., 99th percentile) or is significantly higher than the field's historical average.",
              "Machine Learning: 1. Use an unsupervised clustering algorithm (e.g., DBSCAN, K-Means) on features extracted from DNS queries or HTTP headers, such as string length, character type ratio (alpha vs. numeric vs. symbol), and entropy. 2. Identify clusters of anomalous requests that do not group with the large, dense clusters of normal traffic. 3. Manually inspect samples from these outlier clusters to identify new or unknown C2 encoding techniques, which can then be used to create new symbolic rules."
            ]
          },
          {
            "description": "A network connection exhibits a highly asymmetric data transfer ratio (bytes sent vs. bytes received) or total volume that is statistically anomalous compared to established baselines for the given protocol and destination.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Flow Collectors",
            "action": [
              "Symbolic: 1. Create a rule that triggers on any connection where the ratio of bytes sent to bytes received (`orig_bytes` / `resp_bytes`) exceeds a hard threshold (e.g., > 50) and the destination is external. 2. Exclude known services that exhibit this behavior legitimately (e.g., file uploads, backups). 3. Generate a low-severity alert for investigation, prioritizing connections to uncategorized or newly seen IP addresses.",
              "Statistical: 1. For each service/port combination (e.g., tcp/443), calculate a historical baseline of the data ratio (`orig_bytes` / `resp_bytes`) and total volume (`orig_bytes` + `resp_bytes`) per source host. 2. Use a moving average and standard deviation to model normal behavior. 3. Flag any connection where the data ratio or total volume exceeds 3 standard deviations from the host's or service's established baseline. This is particularly effective for identifying encoded data exfiltration.",
              "Machine Learning: 1. Apply a time series anomaly detection model (e.g., ARIMA, LSTM) to the aggregated bytes sent and received per host over 5-minute intervals. 2. The model learns the typical 'rhythm' of a host's network traffic. 3. An alert is generated when the model detects a significant deviation from the predicted pattern, such as a sudden, sustained increase in outbound data that is uncharacteristic for that host, which could indicate encoded C2 or exfiltration."
            ]
          },
          {
            "description": "A network connection is initiated by a process on an endpoint that is unauthorized, unsigned, or running from an unusual file path, and the associated network traffic exhibits characteristics of encoding.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical Servers (e.g., Domain Controllers, Database Servers)",
            "action": [
              "Symbolic: 1. Join process creation events (Sysmon EID 1, WEID 4688) with network connection events (Sysmon EID 3, WEID 5156). 2. Create a rule to alert when a process with a suspicious signature (e.g., `Image` path in `%APPDATA%` or `%TEMP%`, `OriginalFileName` is empty, process is unsigned) initiates an external network connection. 3. Prioritize alerts where the destination IP/domain is uncategorized or has a low reputation.",
              "Statistical: 1. Build a baseline of 'normal' parent-child process relationships and network-connecting processes for workstations and servers. 2. For each new network connection, calculate a 'rarity' score for the initiating process based on its prevalence in the baseline. A process like `rundll32.exe` making a network connection is common; a custom executable in a user's download folder is not. 3. Flag connections initiated by processes with a rarity score in the top 99th percentile, especially if the connection's data volume or duration is also anomalous compared to the host's baseline.",
              "Machine Learning: 1. Train a classification model (e.g., Logistic Regression) to predict if a process is 'benign' or 'suspicious' based on features from Sysmon EID 1 (e.g., Image path, parent process, command line arguments, signature status). 2. For any process classified as 'suspicious' that also initiates a network connection (Sysmon EID 3), pipe the connection details (destination IP, port, bytes sent) to a second-stage model or risk scoring engine. 3. This creates a high-fidelity alert by chaining a process-based ML detection with network indicators."
            ]
          },
          {
            "description": "Network traffic on standard ports (e.g., HTTP/80, HTTPS/443, DNS/53) that deviates significantly from expected protocol structure, content types, or data field lengths, often containing large, opaque data blobs consistent with standard encoding schemes.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Application Firewalls (WAFs)",
            "action": [
              "Symbolic: 1. Create rules to detect protocol mismatches. For `http.log`, alert on requests to port 80/443 that have a `Content-Type` of `application/octet-stream` when the URI does not point to a known file download path. 2. For `dns.log`, alert on queries for TXT or NULL records with a response length greater than a fixed threshold (e.g., 255 bytes). 3. For `conn.log`, alert on any connection on a well-known port (e.g., 53, 80, 443) that fails to be parsed by the corresponding Zeek protocol analyzer (i.e., no entry appears in `dns.log` or `http.log` for the connection).",
              "Statistical: 1. For key text fields in protocol logs (e.g., `http.log` URI, `ssl.log` SNI, `dns.log` query), calculate the historical distribution of string lengths. 2. Generate an alert when the length of a value in one of these fields exceeds the 99th percentile for that specific field. For example, a URI longer than 2000 characters is highly unusual and could contain encoded data. 3. Calculate the ratio of non-alphanumeric characters to alphanumeric characters in these fields and flag values where this ratio is statistically high compared to the baseline.",
              "Machine Learning: 1. Implement a JA3/JA3S hashing algorithm on TLS handshakes from `ssl.log`. 2. Use a clustering model to group clients and servers by their TLS fingerprint (JA3 hash) and server fingerprint (JA3S hash). 3. Identify outliers and small clusters that do not conform to fingerprints of common browsers or legitimate applications. These outlier fingerprints are often associated with malware or non-standard clients used for C2, which may then use encoding within the encrypted tunnel."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]