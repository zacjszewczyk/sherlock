[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying service binaries?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event occurs on a known service executable path, and the resulting file hash is present in a threat intelligence feed of known-malicious file hashes.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers",
            "action": [
              "Symbolic: Upon detecting a write access event (Windows Event ID 4663) on a service executable path (e.g., C:\\Program Files\\...\\*.exe), calculate the file hash. Join this hash against a threat intelligence database of known-malicious file hashes. Generate a critical alert on any match.",
              "Statistical: Maintain a historical baseline of file hashes for all service executables. Calculate the rarity of a hash change for each service binary. A hash change on a rarely updated service (e.g., a core OS service binary that has not changed in over 180 days) outside a designated patching window should generate a high-severity alert, even without a CTI match.",
              "Machine Learning: Train a time-series anomaly detection model on file modification events (Windows Event ID 4663) for directories containing service executables. The model should learn the normal cadence of patching cycles. Flag any cluster of file modification events that deviates significantly from the learned temporal patterns (e.g., modifications occurring at 2 AM on a Saturday when patching is on Tuesdays)."
            ]
          },
          {
            "description": "A process, identified by its name, path, or digital signature, writes to a service executable path, and the parent process's attributes are associated with known malware or suspicious tools.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint devices of privileged users, Standard User Workstations",
            "action": [
              "Symbolic: Correlate file write events (Windows Event ID 4663) on service binary paths with the parent process information from process creation logs (Windows Event ID 4688). Alert if the Creator Process Name is an unsigned binary, located in a non-standard directory (e.g., C:\\Users\\...\\AppData\\Local\\Temp), or its name matches a known hacking tool.",
              "Statistical: For each service, build a statistical profile of the processes that normally modify its executable (e.g., msiexec.exe, trustedinstaller.exe). Calculate the entropy of the parent process path that modifies a service binary. A high entropy score, or a parent process name that is statistically rare for that specific service binary modification, increases a risk score. An alert is triggered when the score exceeds a percentile-based threshold (e.g., 99th percentile).",
              "Machine Learning: Use a classification model (e.g., Random Forest) trained on process creation events (Windows Event ID 4688). Features should include process name, parent process name, command-line length/entropy, and whether the process is signed. Apply this model to any process observed writing to a service binary path to classify it as 'benign patcher' or 'suspicious modifier'."
            ]
          },
          {
            "description": "A sequence of events occurs on a service binary's file or directory: anomalous permission changes, followed by a file write from an unauthorized user or process, followed by a service restart, all outside a pre-defined maintenance window.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4663",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Certificate Authority Servers, Virtualization Hosts",
            "action": [
              "Symbolic: Create a stateful detection rule that triggers if the following sequence occurs for the same file path within 15 minutes: 1) Event ID 4670 indicating a permission change by a non-administrative account. 2) Event ID 4663 indicating a write operation by the same account. 3) Event ID 7036 indicating the associated service has started. This sequence constitutes a high-fidelity alert for service hijacking.",
              "Statistical: Establish a baseline of accounts that normally modify permissions (Windows Event ID 4670) on service directories. For any permission modification event, calculate a risk score based on the rarity of the account performing the action. If a subsequent file write (Windows Event ID 4663) occurs by that same rare account, escalate the risk score. A cumulative score exceeding a threshold (e.g., > 3 standard deviations from the mean risk) triggers an alert.",
              "Machine Learning: Implement a Hidden Markov Model (HMM) where the states are 'Benign Operation', 'Potential Hijack', and 'Confirmed Hijack'. The observed events are permission changes (4670), file writes (4663), and service starts (7036). Train the model on normal system behavior. A transition to the 'Potential Hijack' state followed by a transition to 'Confirmed Hijack' would trigger a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges by modifying service binaries?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A write event is detected on the executable file path of a service configured to run as 'NT AUTHORITY\\SYSTEM', and the new file's hash matches a known privilege escalation tool or implant.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user systems (e.g., Remote Desktop Session Hosts), Endpoint workstations of developers or administrators",
            "action": [
              "Symbolic: Maintain a list of services configured to run as SYSTEM. Monitor their binary paths for file writes (Windows Event ID 4663). Upon write detection, hash the new file and join against a CTI feed specifically curated for privilege escalation tools (e.g., PowerSploit modules, Juicy Potato variants). Alert on any match.",
              "Statistical: For services running as SYSTEM, baseline the user context under which writes to the service binary occur (typically SYSTEM). A file write to a SYSTEM service binary initiated by a non-SYSTEM user process is a statistical anomaly. Score this event based on the rarity of the user context; alert if the score exceeds the 99.9th percentile.",
              "Machine Learning: Train a classifier on process command-line arguments (from Windows Event ID 4688) to identify privilege escalation commands. When a file write (Windows Event ID 4663) to a SYSTEM service binary occurs, analyze the command line of the responsible parent process. If the model classifies the command line as 'privesc-related', generate an alert."
            ]
          },
          {
            "description": "A process running as 'NT AUTHORITY\\SYSTEM', which is associated with a known service, spawns a child process (e.g., cmd.exe, powershell.exe) containing command-line arguments for user creation, group modification, or credential dumping.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Authentication Servers (e.g., ADFS, RADIUS)",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) where the Parent Process Name corresponds to a high-privilege service executable and the Process Name is a shell. Use regular expressions on the Command Line field to detect strings like 'net user /add', 'net localgroup administrators', or 'lsass.exe'. Generate a critical alert on a match.",
              "Statistical: For each high-privilege service, baseline the distribution of its child processes and the entropy of their command-line arguments. An alert is triggered when a service spawns a statistically rare child process or if the command-line entropy for a common child (like powershell.exe) exceeds a learned threshold (e.g., 98th percentile), indicating potential obfuscation.",
              "Machine Learning: Use an unsupervised learning model (e.g., Isolation Forest) on process creation events (Windows Event ID 4688) originating from high-privilege services. Features should include parent/child process names and command-line length. The model will identify anomalous parent-child relationships that deviate from normal system behavior, flagging them as potential hijacked service activity."
            ]
          },
          {
            "description": "A non-administrative user account successfully executes a permission change on a file or directory associated with a SYSTEM-level service, followed by a file write operation to that same path by the same user context.",
            "data_sources": [
              "Windows Event ID 4670",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers hosting application binaries, Standard User Workstations",
            "action": [
              "Symbolic: Create a correlation rule that triggers when Event ID 4670 (permission change) on a SYSTEM service's binary path is logged for a Subject/Security ID not in 'Domain Admins' or 'SYSTEM'. If a subsequent Event ID 4663 (file write) for the same path and Subject/Security ID occurs within 5 minutes, create a high-priority incident.",
              "Statistical: Build a frequency distribution of user accounts that perform permission changes (Windows Event ID 4670) on service-related file paths. Any account falling below a low frequency threshold (e.g., seen less than 5 times in 90 days) that performs such an action is flagged. If this rare event is followed by a file write (Windows Event ID 4663), the combined probability is calculated, and if it is exceptionally low, an alert is generated.",
              "Machine Learning: Employ a sequence analysis model (e.g., a Recurrent Neural Network) to learn valid sequences of events related to software updates. The model would flag a sequence like [Standard User Process Start -> Permission Change by User -> File Write by User -> Service Restart] as a significant anomaly indicative of privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by modifying service binaries?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event occurs on a service binary path belonging to a security tool (e.g., EDR, AV), and the new file's digital signature is invalid, absent, or issued by a publisher not on an approved allowlist.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers with security software installed, Domain Controllers",
            "action": [
              "Symbolic: Maintain an allowlist of trusted publisher names for critical security services (EDR, AV). Upon a file write (Windows Event ID 4663) involving these paths, validate the new file's digital signature. Alert immediately if the signature is invalid, missing, or the publisher is not on the allowlist.",
              "Statistical: Periodically scan and baseline the signature status of all service binaries. After a file write is detected on a service binary, re-scan its signature. If the status changes from 'valid' to 'invalid' or 'missing', this is a high-risk statistical anomaly. Score this change based on the criticality of the service; a change to an EDR agent's binary is a critical alert.",
              "Machine Learning: Train a classification model to distinguish between legitimate software updaters and suspicious processes. When a file write occurs on a signed service binary, feed the attributes of the writing process (parent process, command line, signature status) to the model. If the model classifies the writer as 'suspicious', and the signature of the target binary has become invalid, trigger a high-confidence alert."
            ]
          },
          {
            "description": "A process associated with a legitimate service initiates outbound network connections to a destination IP/domain with a low reputation, or the traffic characteristics (e.g., protocol, port, JA3 hash, User-Agent) are anomalous for that service and match known C2 profiles.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), DNS Resolvers, All endpoints and servers",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log). For processes associated with services, join the destination IP/domain against a C2 threat intelligence feed. Check Zeek ssl.log for JA3 hashes and Zeek http.log for User-Agents known to be associated with malware. Alert on any match.",
              "Statistical: For each service process, build a statistical baseline of its network behavior: common destination ports, protocol usage, and domain entropy from Zeek logs. Alert if a service's outbound connection uses a destination port outside the 95th percentile of its normal behavior, or if the entropy of a requested domain in dns.log is unusually high.",
              "Machine Learning: Use a time-series model to analyze beaconing behavior in network traffic (Zeek conn.log). For each service process, model its normal connection frequency and data volume. The model should flag periodic, 'heartbeat' connections with regular intervals and consistent packet sizes that are uncharacteristic for the service, as this indicates a C2 channel."
            ]
          },
          {
            "description": "A service process, which normally has no or few child processes, spawns a command interpreter (cmd.exe, powershell.exe) or a known Living-off-the-Land Binary (LoLBin).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoint workstations and servers, Critical Application Servers",
            "action": [
              "Symbolic: Create a rule to monitor process creation events (Windows Event ID 4688) where the parent process is a known service executable (e.g., spoolsv.exe) and the child process is on a watchlist of LoLBins (e.g., cmd.exe, powershell.exe, certutil.exe). This parent-child relationship should generate a high-severity alert.",
              "Statistical: For every parent process (service) on the system, build a frequency table of its child processes, creating a parent-child process graph. Any process creation event that represents a statistically rare edge in this graph (e.g., a parent-child relationship never seen before or seen <0.01% of the time) should be flagged for investigation.",
              "Machine Learning: Train an autoencoder on legitimate process creation event data (Windows Event ID 4688), using features like parent process name, child process name, and command-line arguments. When a hijacked service spawns an anomalous child process, the model will have a high reconstruction error, flagging the event as a potential threat."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]