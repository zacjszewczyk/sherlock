[
  {
    "information_requirement": "Has the adversary gained initial access to the network via content injection?",
    "tactic_id": "TA0001",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T1659",
        "name": "Content Injection",
        "evidence": [
          {
            "description": "A file transferred over the network has a hash that matches a known malicious file in a threat intelligence feed, or a network connection is made to a domain/IP address known to be associated with malware distribution.",
            "data_sources": [
              "Zeek file.log",
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, External-facing Web Proxies, ISP Demarcation Point",
            "action": [
              "Symbolic: Join network file logs (e.g., Zeek file.log) with a threat intelligence feed of known malicious file hashes and alert on any match. Similarly, join network connection logs (Zeek conn.log, Zeek dns.log) with feeds of known malicious IPs and domains, alerting on matches.",
              "Statistical: For files transferred, calculate the prevalence of each file hash across the enterprise over a 24-hour window. Flag files with extremely low prevalence (e.g., seen on < 0.1% of endpoints or a count of 1) for further inspection, as novel malware often appears as a rare hash.",
              "Machine Learning: Use a supervised classification model (e.g., Random Forest) trained on features from network logs (domain age, reputation score, connection duration, data volume) to predict the likelihood that a given connection is malicious. Flag connections with a high probability score for analyst review."
            ]
          },
          {
            "description": "A process is created (e.g., powershell.exe, cmd.exe, wscript.exe) where the parent process is a web browser and the child process image is located in a temporary or cache directory (e.g., INetCache, AppData\\...\\Cache).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Terminal Servers, Virtual Desktop Infrastructure (VDI) Environments",
            "action": [
              "Symbolic: Create a detection rule that triggers when a browser process (chrome.exe, firefox.exe, msedge.exe, iexplore.exe) spawns a scripting engine (powershell.exe, cmd.exe, wscript.exe, cscript.exe) or a known living-off-the-land binary (LOLBin). Alert on any match.",
              "Statistical: For each parent-child process relationship, calculate its historical frequency across the environment. Alert when a rare relationship (e.g., below the 5th percentile of observed frequencies) occurs, particularly involving browser parents.",
              "Machine Learning: Train an unsupervised anomaly detection model (e.g., Isolation Forest) on features from process creation events (Event ID 4688), including parent process name, child process name, command-line arguments, and process path. Use the model to score each new process creation event and flag high-scoring anomalies for investigation."
            ]
          },
          {
            "description": "Within a short time window (e.g., 5 minutes) on a single host, a file is downloaded via a web browser, followed by the execution of a new process and a subsequent outbound network connection to a new, previously unvisited domain.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek http.log",
              "Zeek file.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Network Egress Points, Web Proxies",
            "action": [
              "Symbolic: Correlate a file download event (e.g., Zeek file.log mime_type is 'application/x-dosexec' or 'application/octet-stream') with a subsequent process creation (Windows Event ID 4688) from the same host where the new process name matches the downloaded filename. Alert on this sequence.",
              "Statistical: For each host, establish a baseline of the typical time delta between a file download and a subsequent outbound connection. Use a percentile-based threshold (e.g., alert if the time delta is in the bottom 1st percentile, indicating immediate automated activity) to identify suspicious sequences.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) to learn normal sequences of user activity (download -> execute -> connect). Feed real-time event sequences into the model and flag any sequence with a low probability of being generated by the learned 'normal' model."
            ]
          },
          {
            "description": "The TLS certificate for a frequently visited, high-reputation domain changes to an unexpected issuer or subject, or the content length of a standard web page response deviates significantly from its historical average.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Internal DNS Servers, Web Proxies",
            "action": [
              "Symbolic: Maintain a static list of expected TLS certificate issuers and subjects for critical internal and external services. Alert if a connection to one of these services uses a certificate that does not match the list (from Zeek ssl.log 'issuer' and 'subject' fields).",
              "Statistical: For key web resources, baseline the average and standard deviation of the response content length (from Zeek http.log 'resp_body_len'). Alert if a new response's content length is more than 3 standard deviations from the historical mean, which could indicate injected content.",
              "Machine Learning: Apply time series forecasting (e.g., ARIMA) to the volume of traffic and content types for specific domains. Flag any significant deviation between the predicted and observed traffic patterns as an anomaly potentially caused by on-path content injection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  },
  {
    "information_requirement": "Is the adversary using content injection for command and control?",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1659",
        "name": "Content Injection",
        "evidence": [
          {
            "description": "Network traffic to a legitimate, high-reputation domain (e.g., a known CDN or cloud provider) contains a URI, HTTP header, or payload that matches a known C2 signature, or the destination IP, while appearing legitimate, is on a threat intelligence C2 list.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek file.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Resolvers, Cloud Service Gateways",
            "action": [
              "Symbolic: Scan HTTP request headers, URIs, and POST bodies (from Zeek http.log) using a ruleset (e.g., Suricata/YARA) for patterns matching known C2 frameworks. Alert on any rule match.",
              "Statistical: Calculate the frequency of JA3/JA3S hashes (from Zeek ssl.log) across the enterprise. A JA3 hash that is globally rare but appears consistently from a small set of internal hosts connecting to a common destination may indicate a specific malicious client and should be flagged.",
              "Machine Learning: Develop a classifier for domain names using features like n-gram frequency, entropy, and domain length. Train it to distinguish between legitimate domains and domain generation algorithm (DGA) domains used for C2. Apply the model to Zeek dns.log queries to find suspicious C2 domains."
            ]
          },
          {
            "description": "A host makes HTTP/S requests to a single domain where the URI path or query parameters exhibit low variability or contain structured, non-human-readable data, and the User-Agent string is anomalous or fixed.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web Proxies, Network Egress Points, User Workstations",
            "action": [
              "Symbolic: Create a detection rule that looks for specific, hardcoded User-Agent strings known to be used by C2 tools in Zeek http.log.",
              "Statistical: For each source-destination pair, calculate the Shannon entropy of the URI query string (Zeek http.log). A consistently high or low entropy, compared to the baseline for that destination, can indicate encoded C2 data or simple check-ins, respectively. Flag values outside the 5th-95th percentile range.",
              "Machine Learning: Use clustering algorithms (e.g., K-Means or DBSCAN) on features extracted from HTTP requests (URI length, number of parameters, header count, User-Agent). Identify clusters of non-browser, automated traffic that may represent C2 channels."
            ]
          },
          {
            "description": "A single host establishes connections to a specific external destination at highly regular intervals (e.g., every 5 minutes +/- 1 second), with nearly identical data transfer sizes for each connection, especially during non-business hours.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, VPN Concentrators, User Workstations",
            "action": [
              "Symbolic: Search for connections where the duration is consistently short (e.g., < 2 seconds) and the bytes sent/received are small and repetitive, a pattern often seen in C2 'check-in' beacons.",
              "Statistical: For each source-destination pair, calculate the time difference between consecutive connections. Compute the standard deviation of these time deltas over a 24-hour period. A very low standard deviation (e.g., < 5 seconds) indicates periodic beaconing. Flag pairs with a low standard deviation for review.",
              "Machine Learning: Apply a time series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) to the connection count per minute for each internal host. The model can learn the 'seasonality' of normal user behavior and flag periodic, non-human patterns indicative of C2 beaconing."
            ]
          },
          {
            "description": "Data within an HTTP POST request to a common web service or a DNS query's subdomain exhibits a character distribution indicative of Base64 encoding or high entropy suggesting encryption, where such encoding is not typical for that service.",
            "data_sources": [
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS Servers, Web Proxies, Network Egress Points",
            "action": [
              "Symbolic: Use regular expressions to search for Base64-encoded strings within HTTP POST bodies (Zeek http.log) or DNS query names (Zeek dns.log). If found, attempt to decode the string and search for C2-related keywords (e.g., 'whoami', 'cmd', 'psh').",
              "Statistical: Calculate the character frequency distribution for data in specific HTTP headers (e.g., Cookies) or URI query parameters. Compare this distribution to a baseline for the destination service using a Chi-squared test. A significant deviation can indicate the presence of encoded or encrypted C2 data.",
              "Machine Learning: Train a character-level Convolutional Neural Network (CNN) to classify text as either 'normal' (e.g., English text, URLs) or 'encoded/encrypted'. Apply this model to fields like DNS subdomains, URI paths, and POST bodies to identify covert C2 channels."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]