[
  {
    "information_requirement": "Is the adversary using web services for command and control? (PIR)",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1102",
        "name": "Web Service",
        "evidence": [
          {
            "description": "Evidence of a connection from an internal host to an external web service where the destination hostname, URL path, or SSL/TLS certificate hash matches a known-bad indicator from a threat intelligence feed.",
            "data_sources": [
              "Zeek dns.log",
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), DNS Resolvers",
            "action": [
              "Symbolic Logic: Ingest threat intelligence feeds for C2 indicators (domains, URLs, certificate hashes). Create a rule to join this intelligence with network logs (Zeek dns.log, http.log, ssl.log) in near-real time and alert on any matches.",
              "Statistical Method: Analyze the frequency of IoC hits per host. Use a 95th percentile threshold to identify hosts that are matching C2 IoCs at a statistically significant higher rate than their peers, which could indicate a wider compromise or a particularly noisy C2 channel.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on features from Zeek logs (e.g., user-agent string, URI length, presence of query parameters) and labeled with historical IoC matches. Use this model to score new connections for their likelihood of being malicious C2, even without a direct IoC match."
            ]
          },
          {
            "description": "An HTTP or HTTPS request to a web service contains a User-Agent string, URI path structure, or custom header that matches a known C2 framework signature (e.g., Cobalt Strike, Empire).",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), Application-Layer Proxies with TLS Inspection",
            "action": [
              "Symbolic Logic: Maintain a library of regular expressions for known C2 framework patterns. Scan Zeek http.log data for matches on User-Agent strings, URI structures (e.g., /raw/ on paste sites, base64 strings in URIs), and anomalous HTTP headers.",
              "Statistical Method: Calculate the Shannon entropy of User-Agent strings and URI paths for traffic to common web services (e.g., pastebin.com, api.dropbox.com). An entropy score below the 10th percentile of the established baseline for that service indicates programmatic, non-human generation typical of C2. Alert on such low-entropy values.",
              "Machine Learning: Use a time series forecasting model (e.g., ARIMA) to predict the expected volume of requests matching specific C2 patterns (e.g., requests to pastebin.com/raw/). A sudden spike in actual request volume that significantly exceeds the forecasted upper confidence interval indicates a potential new campaign."
            ]
          },
          {
            "description": "A series of connections from a single internal host to a specific external web service destination exhibit a consistent time interval (low jitter) and/or a consistent data payload size, characteristic of automated C2 beaconing.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies), Critical Servers, User Workstations",
            "action": [
              "Symbolic Logic: For each source-destination pair in Zeek conn.log, create a rule that triggers if the connection count exceeds a simple threshold (e.g., 100 connections in 24 hours) to a non-standard web service, and the connection state is consistently 'S0' or 'REJ', indicating failed beaconing attempts.",
              "Statistical Method: For each internal host, calculate the time delta between consecutive connections to the same external web service. Compute the standard deviation of these deltas over a rolling 24-hour window. A standard deviation below a small threshold (e.g., < 5 seconds) indicates highly regular, machine-generated beaconing. Flag hosts whose beaconing standard deviation falls in the bottom 5th percentile.",
              "Machine Learning: Apply a clustering algorithm (e.g., DBSCAN) to network sessions based on features like destination service, port, duration, bytes sent, and the standard deviation of inter-arrival times. Analyze the resulting clusters to identify small, dense groups with low time-delta variance and connections to file-sharing or code-hosting web services, which are highly indicative of C2 beaconing."
            ]
          },
          {
            "description": "A network connection to a known web service (e.g., cloud storage, social media) where the ratio of bytes sent to bytes received is anomalously high compared to a historically established baseline for that service.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points (e.g., Firewalls, Proxies)",
            "action": [
              "Symbolic Logic: Create a rule that flags any single connection to a high-risk web service (e.g., pastebin.com, file.io) where bytes sent ('orig_bytes') is greater than a fixed threshold (e.g., 10 MB) and also greater than bytes received ('resp_bytes').",
              "Statistical Method: For each major web service, establish a baseline egress-to-ingress ratio ('orig_bytes' / 'resp_bytes'). Continuously monitor new connections and calculate the Z-score of their ratio against this baseline. Flag any connection with a Z-score greater than 3, indicating a statistically significant deviation from normal patterns.",
              "Machine Learning: Train an anomaly detection model (e.g., Isolation Forest) on features from Zeek conn.log, including 'orig_bytes', 'resp_bytes', 'duration', and the destination service category. Use the model to score each connection's 'abnormality'. Connections flagged as anomalous with high 'orig_bytes' are strong candidates for C2-based data exfiltration."
            ]
          },
          {
            "description": "A network connection to an external web service is initiated by a process (e.g., powershell.exe, svchost.exe) that does not typically initiate external web traffic, or by a process running from a non-standard file path (e.g., %APPDATA%).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Servers, User Workstations, Developer Machines",
            "action": [
              "Symbolic Logic: Using enriched host logs (like Windows Event ID 5156), create an alert that fires any time a process on a watchlist (e.g., 'lsass.exe', 'powershell.exe', 'cscript.exe') makes a network connection to an external IP address associated with a known public web service.",
              "Statistical Method: For each process name, build a profile of its typical network destinations. Calculate the rarity of a process communicating with a new domain. Flag any communication where a common system process (e.g., 'svchost.exe') communicates with a domain it has rarely or never contacted before, especially if that domain is a public web service like GitHub or Pastebin.",
              "Machine Learning: Develop a parent-child process relationship model to identify anomalous process chains (e.g., 'winword.exe' spawning 'powershell.exe'). Train a classifier using features like process names, command-line arguments, and the resulting network destination. An alert from this model, correlated with network data showing a connection to a web service, provides high-fidelity evidence of a compromise."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]