[
  {
    "information_requirement": "Is the adversary using junk code insertion to evade defenses?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1027.016",
        "name": "Junk Code Insertion",
        "evidence": [
          {
            "description": "A file's cryptographic hash (MD5, SHA1, SHA256) matches an entry on a threat intelligence feed specifically attributed to malware known to use junk code insertion.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek file.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, User Workstations, Email Gateways",
            "action": [
              "Symbolic Logic: Continuously ingest threat intelligence feeds. Create a watch list of file hashes tagged with 'T1027.016' or 'Junk Code'. Query Windows Event ID 4688 (Process Creation) and Zeek file.log for any hash matches on this watch list and generate a high-severity alert.",
              "Statistical Method: For all newly observed executables, calculate the frequency of their hash across the enterprise. A hash that is globally rare (e.g., seen on < 0.1% of endpoints) but also matches a generic malware signature (e.g., from a YARA rule) is a candidate for further analysis.",
              "Machine Learning: Train a binary classification model (e.g., a Gradient Boosting Machine) using features from threat intelligence (e.g., tags, first seen date, associated actors) and internal prevalence data. Use the model to predict the likelihood that a newly seen file hash is a variant of a known threat family that uses junk code insertion."
            ]
          },
          {
            "description": "A process creation event includes command-line arguments or a parent process name indicative of known software packers or obfuscators that commonly inject junk code (e.g., UPX, Themida, MPRESS).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Developer Endpoints, Staging Servers",
            "action": [
              "Symbolic Logic: Scan the command line field in Windows Event ID 4688 events for regular expression matches against a list of known packer/obfuscator tool names, flags, and artifacts (e.g., upx.exe, --brute, themida). Alert on any matches.",
              "Statistical Method: Calculate the Shannon entropy of command-line arguments for all process creation events. Establish a baseline entropy score for common processes. Flag processes with command-line entropy exceeding a high percentile (e.g., 98th percentile), as obfuscated commands often have higher entropy.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on features extracted from command lines (length, special character count, entropy, n-grams). Identify and investigate clusters of anomalous command-line structures that do not belong to known-good application behavior."
            ]
          },
          {
            "description": "A legitimate Windows system process (e.g., svchost.exe, rundll32.exe) is spawned by a non-system, user-land parent process and subsequently initiates an outbound network connection to a low-reputation or newly observed domain/IP.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, User Workstations, Internal Web Servers",
            "action": [
              "Symbolic Logic: Join process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) on the source IP and timestamp. Alert when a process like 'svchost.exe' has a parent process outside `C:\\Windows\\System32\\` and the child process makes an outbound connection to an IP on a C2 blocklist within 10 seconds of creation.",
              "Statistical Method: For each parent-child process relationship involving system utilities, baseline the frequency of the parent process path. Flag any relationship where the parent path is statistically rare (e.g., seen less than 5 times in 30 days) across the enterprise, especially if originating from a user-writable directory like `C:\\Users\\*` or `C:\\ProgramData\\`.",
              "Machine Learning: Develop a time-series model to analyze the sequence of events: (1) parent process creation, (2) child system utility creation, (3) outbound network connection. Use a sequence-based anomaly detection model (like an LSTM autoencoder) to identify event chains that deviate from normal system behavior patterns and flag them as suspicious."
            ]
          },
          {
            "description": "A process with a filename that mimics a legitimate system binary (e.g., 'svchost.exe', 'lsass.exe') is executed from a user-writable or non-standard file path (e.g., `C:\\ProgramData`, `C:\\Users\\Public`, `%APPDATA%`).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User Workstations, Public-facing Servers, Shared Network Drives",
            "action": [
              "Symbolic Logic: Create a list of common system binary names and their authoritative paths (e.g., 'svchost.exe' in `C:\\Windows\\System32`). Create a rule that alerts whenever a process with one of these names executes from any path not on the authoritative list.",
              "Statistical Method: For each process name, calculate the frequency distribution of its execution path across the enterprise. Alert on any execution where the path falls outside the top 99% most common paths for that process name. Additionally, calculate the Levenshtein distance between the process name and known system binaries to detect typosquatting (e.g., 'scvhost.exe').",
              "Machine Learning: Train a classification model (e.g., Random Forest) on process execution events. Use features like process name, file path components (e.g., depth, presence of 'Users', 'Temp'), parent process name, and username. The model should predict whether an execution event is legitimate or masquerading."
            ]
          },
          {
            "description": "A newly created process initiates network connections exhibiting Command and Control (C2) characteristics, such as periodic, fixed-interval 'heartbeat' connections (beaconing), connections to a large number of unique destinations (fan-out), or use of non-standard protocols over common ports.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network Egress Points, DNS Servers, All Endpoints and Servers",
            "action": [
              "Symbolic Logic: For each new process (from Windows Event ID 4688), monitor its subsequent DNS requests (Zeek dns.log). Alert if the process requests domains with known DGA (Domain Generation Algorithm) patterns or domains present on a threat intelligence feed for C2 servers.",
              "Statistical Method: For each source IP/process pair, analyze connection timings in Zeek conn.log. Calculate the inter-arrival time between connections to the same destination. A low variance or standard deviation in these timings indicates beaconing. Alert if the standard deviation is below a threshold (e.g., < 1 second) for a series of 5+ connections.",
              "Machine Learning: Apply a time-series decomposition model (e.g., Seasonal-Trend-Loess) to the network traffic volume (bytes_out) generated by a new process. A strong, regular seasonal component with a short period (e.g., minutes or hours) can indicate automated C2 beaconing activity that should be investigated."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]