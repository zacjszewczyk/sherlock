[
  {
    "information_requirement": "Is the adversary executing malicious code using XPC services? (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1559.003",
        "name": "XPC Services",
        "evidence": [
          {
            "description": "An XPC service process is executed where the process image's file hash, file path, or signing certificate thumbprint matches a known-bad entry in a threat intelligence feed.",
            "data_sources": [
              "EDR: Process Events",
              "EDR: Code Signature Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints, particularly developer workstations and servers running custom macOS applications.",
            "action": [
              "Symbolic: Query process creation events for XPC services. Join with code signature data. Alert if the process's file hash, signing certificate thumbprint, or file path (e.g., from /tmp/, /Users/Shared/) matches an entry on a threat intelligence blocklist or a manually curated watchlist of suspicious indicators.",
              "Statistical: For all executed XPC services, calculate the Shannon entropy of their file paths. Establish a baseline of path entropy for legitimate services. Alert on XPC services executing from paths with an entropy score exceeding the 95th percentile, as this often indicates randomized or obfuscated paths used by malware.",
              "Machine Learning: Develop a time-series model to forecast the expected volume of XPC service executions per endpoint. Alert on significant deviations (e.g., > 3 standard deviations) from the forecast, which could indicate a malware outbreak or a widespread exploitation campaign leveraging XPC services."
            ]
          },
          {
            "description": "A process writes a new XPC service bundle (.xpc or .appex) to a non-standard, user-writable directory, and within 60 seconds, that same parent process's child process executes the new service.",
            "data_sources": [
              "EDR: File Creation Events",
              "EDR: Process Events",
              "EDR: IPC Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on macOS endpoints (e.g., /tmp, /Users/Shared, ~/Library/Application Support).",
            "action": [
              "Symbolic: Create a correlation rule that triggers when: (1) a file creation event for a path ending in .xpc or .appex occurs in a user-writable directory (e.g., /tmp, /Users/Shared); (2) a process creation event for that same file path occurs within 60 seconds; and (3) the parent process ID of the new service matches the process ID that created the file.",
              "Statistical: For all processes that write new XPC bundles, track the frequency of this behavior per process name (e.g., bash, python, Installer). Establish a baseline frequency. Alert when a process exhibits this behavior at a rate exceeding 3 standard deviations above its own baseline or the population baseline, indicating potentially anomalous installation activity.",
              "Machine Learning: Train a logistic regression classifier on features from file creation and process creation events (e.g., parent process name, file path, time delta between write and execute, code signature status). The model should predict the likelihood that a 'write-then-execute' sequence for an XPC service is malicious. Alert on predictions with a high confidence score (> 0.9)."
            ]
          },
          {
            "description": "An inter-process communication (IPC) event is observed where the client process (e.g., python, bash, osascript) is a script interpreter or a non-standard client, and the server is a known, high-privilege system XPC service (e.g., com.apple.securityd, com.apple.opendirectoryd).",
            "data_sources": [
              "EDR: IPC Events",
              "EDR: Process Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-level XPC services on all macOS endpoints; IPC communication channels monitored by endpoint security tools.",
            "action": [
              "Symbolic: Create a detection rule that alerts when an IPC connection is established where the client process name is in a list of suspicious clients (e.g., bash, python, sh, zsh, osascript) and the server process name corresponds to a high-privilege system XPC service (e.g., com.apple.securityd, com.apple.opendirectoryd).",
              "Statistical: For each system XPC service, build a profile of its legitimate client processes and the frequency of their connections. Use a stacking algorithm to identify the rarity of a given client-server pair. Alert when a connection occurs from a client process that falls below the 5th percentile of connection frequency for that server, indicating a statistically rare interaction.",
              "Machine Learning: Use a graph-based anomaly detection algorithm (e.g., Local Outlier Factor on a graph of process interactions) to model normal XPC communications. Nodes represent processes and edges represent IPC connections. Alert when a new, anomalous edge appears that connects a previously disconnected or distantly connected component to a high-privilege XPC service node."
            ]
          },
          {
            "description": "An XPC service process is executed that meets one or more of the following criteria: (1) the process path is outside of standard system or application directories, (2) the binary is unsigned or has an invalid signature, (3) the binary is signed by a certificate authority not in the trusted enterprise set or seen for the first time in the environment.",
            "data_sources": [
              "EDR: Process Events",
              "EDR: Code Signature Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of macOS endpoints, particularly non-standard locations like /private/tmp/, /Users/Shared/, and user home directories.",
            "action": [
              "Symbolic: Query all XPC service process execution events. Alert if the process path is not a subdirectory of /System/, /Library/, or /Applications/, OR if the code signature status is 'unsigned', 'invalid', or 'ad-hoc'.",
              "Statistical: Maintain a historical set of all developer certificate subjects and thumbprints seen signing XPC services in the environment. For each new XPC execution, calculate a risk score. Add points if the signing certificate is new to the environment (first seen in < 7 days), or if the certificate's subject name has a high Levenshtein distance to known legitimate developer names. Alert on scores exceeding a percentile-based threshold (e.g., 98th percentile).",
              "Machine Learning: Implement a one-class SVM (Support Vector Machine) model trained on features of legitimate XPC services (e.g., path location, signature status, parent process). Use the trained model to classify new XPC service executions. Alert on any execution classified as an 'outlier' by the model, indicating significant deviation from the established baseline of legitimacy."
            ]
          },
          {
            "description": "A process creation event is recorded for a known system XPC service (e.g., com.apple.airportd) where the parent process is not 'launchd' (PID 1) or its expected parent application process.",
            "data_sources": [
              "EDR: Process Events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process trees on all macOS endpoints, focusing on children of common user-facing applications like browsers, terminal emulators, and document editors.",
            "action": [
              "Symbolic: Create and maintain an allow-list mapping each legitimate system XPC service to its expected parent process(es) (e.g., 'com.apple.airportd' -> 'launchd'). Create a rule to alert on any process creation event where an XPC service is launched by a parent process not on its specific allow-list.",
              "Statistical: For each XPC service, profile the distribution of its parent processes across the enterprise. Alert when an XPC service is spawned by a parent process that is statistically rare for that child (e.g., a parent process that accounts for less than 0.1% of its launches), indicating a potential deviation from normal behavior.",
              "Machine Learning: Use a classification algorithm (e.g., Random Forest) trained on legitimate parent-child process relationships. Features could include parent process name, parent command line, child process name, and user context. The model will predict if a given parent-child launch event is legitimate. Alert on any launch event classified as 'illegitimate' with a high probability score."
            ]
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-30",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]