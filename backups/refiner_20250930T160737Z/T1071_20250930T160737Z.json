[
  {
    "information_requirement": "Has the adversary established command and control using a common application layer protocol to blend in with normal network traffic?",
    "tactic_id": "TA0011",
    "tactic_name": "Command And Control",
    "indicators": [
      {
        "technique_id": "T1071",
        "name": "Application Layer Protocol",
        "evidence": [
          {
            "description": "A confirmed match between a destination IP address, domain, or TLS Server Name Indication (SNI) and a Cyber Threat Intelligence (CTI) feed of known C2 indicators.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points (e.g., firewalls, web proxies), DNS resolvers",
            "action": "Symbolic: Continuously join destination IPs from Zeek conn.log, queried domains from dns.log, and server_name values from ssl.log against a high-confidence CTI feed of known C2 infrastructure. Generate a high-severity alert for any match. Statistical: For matched CTI indicators, calculate the frequency of communication from internal hosts. Prioritize investigation for hosts that communicate with multiple distinct C2 indicators or communicate with a single indicator above the 95th percentile of connection frequency for that host. Machine Learning: Train a classification model (e.g., Logistic Regression) using features such as CTI source reputation, indicator age, and historical true/false positive rates for the indicator in the environment to score and prioritize alerts, reducing fatigue from low-confidence matches."
          },
          {
            "description": "HTTP/S traffic containing User-Agent strings, URI patterns, or JA3/JA3S hashes that match known C2 framework signatures.",
            "data_sources": [
              "Zeek http.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Web proxies, Egress points (e.g., firewalls), Endpoints generating web traffic",
            "action": "Symbolic: Maintain and apply a ruleset to scan Zeek http.log for specific User-Agent strings and URI patterns associated with C2 frameworks (e.g., Cobalt Strike, Metasploit). Match the `ja3` and `ja3s` fields in Zeek ssl.log against a list of known C2 fingerprints and alert on any match. Statistical: For each `user_agent` in http.log and `ja3` hash in ssl.log, calculate its prevalence across the organization. Flag User-Agents or JA3 hashes that are extremely rare (e.g., used by fewer than 0.1% of hosts) as potentially anomalous. Machine Learning: Use a clustering algorithm (e.g., K-Means) on JA3 hashes to group clients with similar TLS configurations. Investigate small, outlier clusters, as these may represent non-standard client software, including C2 implants, and can help discover novel C2 tools."
          },
          {
            "description": "A series of outbound connections from an internal host to a single external destination characterized by highly regular time intervals (low jitter) and consistent data volumes.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points (e.g., firewalls), Network taps monitoring internal subnets",
            "action": "Symbolic: For host-destination pairs, if the connection count exceeds a simple threshold (e.g., >100 connections in 24 hours) to a non-categorized or low-reputation domain, flag for review. Statistical: For each source-destination IP pair in Zeek conn.log, calculate the time deltas between consecutive connections. Identify pairs where the standard deviation of these time deltas is exceptionally low. Concurrently, calculate the standard deviation of connection bytes (`orig_bytes` + `resp_bytes`). A combination of low time delta variance and low byte variance is a strong statistical indicator of automated beaconing. Machine Learning: Apply a time series forecasting model (e.g., ARIMA) to the connection events for each host-destination pair. A strong periodic component identified by the model indicates beaconing, which is robust against minor jitter that might evade simple standard deviation checks."
          },
          {
            "description": "A network connection on a common application port (e.g., 80, 443, 53) originating from a process that does not typically initiate network communications or is executing from a non-standard file path.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Application servers, Domain Controllers",
            "action": "Symbolic: Create a watchlist of processes that should never make network connections (e.g., `calc.exe`, `notepad.exe`) or that are executing from temporary/user-writable directories. Correlate Windows Event ID 5156 (network connection) with the process name and path from Event ID 4688 and alert if a process from the watchlist is the source. Statistical: Build a baseline of (ProcessName, DestinationPort) tuples from Windows Event ID 5156. Calculate the frequency of each tuple. Any tuple that is statistically rare (e.g., appearing for the first time or falling below a 1st percentile frequency) should be flagged. Machine Learning: Train a one-class SVM or Isolation Forest model on legitimate process execution features (e.g., process path, parent process, command-line arguments) correlated with network connection data. Use the model to score new process network events; events scored as outliers are likely malicious."
          },
          {
            "description": "DNS queries exhibiting characteristics of C2 tunneling, such as unusually high entropy in subdomain labels, excessive query length, high frequency of requests to a single domain, or an abnormal ratio of TXT/NULL queries.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Domain Controllers, Egress points",
            "action": "Symbolic: Search Zeek dns.log for queries where the domain matches a known DGA pattern or C2 domain from a CTI feed. Additionally, create rules to alert on DNS queries containing encoded payloads (e.g., Base64 patterns in subdomains). Statistical: For each query in dns.log, calculate the Shannon entropy of the subdomain label. Queries with entropy scores in the top percentile (e.g., >95th) are indicative of DGA. Also, track the ratio of query types per source host; a spike in the percentage of TXT queries is a strong indicator of data exfiltration over DNS. Machine Learning: Train a classifier (e.g., Random Forest) on features extracted from DNS queries (query length, subdomain entropy, query type, TLD) to distinguish between benign and malicious (DGA/tunneling) DNS traffic."
          },
          {
            "description": "Application layer connections where the ratio of bytes sent to bytes received is inverted compared to the protocol's expected behavior (e.g., a client uploading significantly more data than it downloads over HTTP/S or DNS).",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress points (e.g., firewalls, web proxies), Network taps",
            "action": "Symbolic: Create a rule to flag any connection on port 53 (DNS) where the bytes sent (`orig_bytes`) are greater than a static threshold (e.g., 1KB), as this is highly abnormal for standard DNS queries. Statistical: For each protocol (e.g., HTTP, SSL), calculate a baseline ratio of `orig_bytes` / `resp_bytes`. Use a Z-score or Inter-Quartile Range (IQR) method to identify connections that are statistical outliers (e.g., Z-score > 3). A high ratio for a client-initiated web connection is a strong sign of data upload. Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on connection features from Zeek conn.log, including `(orig_bytes, resp_bytes, duration, proto)`. This can automatically group connections into clusters of 'normal' behavior. Outlier points that do not belong to any cluster represent anomalous connections, such as C2 exfiltration, that can be prioritized for investigation."
          }
        ]
      }
    ],
    "version": "2.2",
    "date_created": "2025-05-04",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]