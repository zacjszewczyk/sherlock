[
  {
    "information_requirement": "Is the adversary executing commands or programs using launchctl? (TA0002 - Execution) (PIR)",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1569.001",
        "name": "Launchctl",
        "evidence": [
          {
            "description": "A .plist file is created or modified in a standard launch directory whose file hash matches a known malicious signature or whose 'ProgramArguments' key contains a known malicious IP address, domain, or URL.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS File Creation/Modification Logs",
              "Zeek dns.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoints (laptops, desktops, servers), DNS servers, Network egress points",
            "action": [
              "Create a watch rule for file creation/modification events on .plist files in `/Library/Launch*` and `~/Library/LaunchAgents`. Upon event trigger, hash the file and check against a threat intelligence feed of known-bad file hashes. Simultaneously, parse the plist's 'ProgramArguments' key and check any contained domains or IP addresses against a malicious indicator feed.",
              "For all domains extracted from 'ProgramArguments' in newly created plists, calculate the domain's rarity score based on its historical prevalence across the enterprise using a 30-day baseline from Zeek dns.log. Flag any domain that falls into the bottom 5th percentile of frequency for analyst review.",
              "Train a logistic regression classifier on the properties of .plist files (e.g., presence of 'RunAtLoad', length of 'ProgramArguments', number of arguments, entropy of the label). Use features from known-benign and known-malicious plists as training data. Apply the model to newly created plists to generate a probability score for maliciousness. Alert on scores exceeding a predefined threshold, such as 0.85."
            ]
          },
          {
            "description": "The `launchctl` process is executed with command-line arguments (`load`, `unload`, `start`) and references a .plist file whose content structure matches known malicious patterns, such as obfuscated 'ProgramArguments' or a generic 'Label' like 'com.apple.update'.",
            "data_sources": [
              "macOS Process Execution Logs",
              "macOS File Content Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints",
            "action": [
              "Deploy YARA rules to scan the content of .plist files referenced in `launchctl load` commands. The rules should detect suspicious structures, such as the use of 'RunAtLoad' with a program path in a temporary directory, or specific strings associated with known malware families or offensive tools.",
              "For each `launchctl load` event, calculate the Shannon entropy of the 'Label' and 'Program' values within the associated .plist file. Establish a baseline entropy score for legitimate plists across the enterprise. Flag any plist where these values have an entropy score greater than 2 standard deviations above the mean, as high entropy can indicate randomized names used to evade signature-based detection.",
              "Use a K-Means clustering algorithm to group .plist files based on vectorized features of their XML structure (e.g., keys used, argument count, path depth). Periodically review clusters for outliers or small, distinct clusters that do not correspond to known legitimate software. These anomalous clusters may represent new or unknown adversary techniques."
            ]
          },
          {
            "description": "The `launchctl` command is used to load a plist file from a non-standard or world-writable directory, such as `/tmp`, `/var/tmp`, `/Users/Shared`, or a hidden directory.",
            "data_sources": [
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of all macOS endpoints, specifically focusing on world-writable and temporary directories.",
            "action": [
              "Create a detection rule that triggers on any process execution of `launchctl load` where the file path argument for the .plist file is located in `/tmp/`, `/var/tmp/`, `/Users/Shared/`, or any user's `~/Downloads/` directory. These are high-confidence indicators and should generate an immediate alert.",
              "Maintain a historical frequency table of all directory paths used in `launchctl load` commands across the enterprise. Calculate the percentile rank for the parent directory of each loaded plist. Generate a medium-priority alert for any path that falls below the 10th percentile in frequency, indicating an uncommon location that warrants investigation.",
              "Develop a time-series anomaly detection model (e.g., ARIMA) on the daily count of `launchctl load` events originating from non-standard directories. Generate an alert if the observed count significantly deviates from the forecasted count, which could indicate a widespread campaign or automated malware deployment."
            ]
          },
          {
            "description": "An unusual parent process, such as a web browser, document editor, or a process running from /tmp, executes `launchctl` to load a new service.",
            "data_sources": [
              "macOS Process Execution Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process trees on all macOS endpoints",
            "action": [
              "Create a detection rule that alerts whenever the parent process of `launchctl` is a browser (e.g., 'Google Chrome', 'Safari', 'Firefox'), an office productivity application (e.g., 'Microsoft Word', 'Excel', 'PowerPoint'), or a common document viewer (e.g., 'Preview').",
              "Generate a baseline of all parent-child process relationships involving `launchctl` across the environment over a 30-day period. Create a list of 'legitimate' parent processes that account for 99% of all `launchctl` executions. Alert on any `launchctl` execution spawned by a parent process not on this list.",
              "Apply a graph-based anomaly detection algorithm to process lineage data. Model normal user sessions as graphs of process executions. A sub-graph representing a browser spawning `launchctl` would be flagged as a structural anomaly compared to baseline graphs, where `launchctl` is typically spawned by installers, terminal sessions, or system processes."
            ]
          },
          {
            "description": "A short-lived execution sequence where a plist file is created, loaded via `launchctl`, triggers a new process or network connection, and then the original plist file is deleted within a short timeframe (e.g., under 5 minutes).",
            "data_sources": [
              "macOS File Creation/Deletion Logs",
              "macOS Process Execution Logs",
              "macOS Network Connection Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "macOS endpoint file systems, macOS endpoint process tables, Network egress points",
            "action": [
              "Implement a stateful correlation rule that triggers when the following sequence of events occurs on a single host within a 2-minute window: (1) A .plist file is created. (2) `launchctl load` is executed targeting that plist. (3) The process specified in the plist's 'ProgramArguments' is executed or initiates an external network connection. (4) The original .plist file is deleted. This sequence is a high-fidelity indicator of evasive persistence.",
              "For every .plist file creation event, track the file's lifetime (time between creation and deletion). Calculate the distribution of these lifetimes for all plists across the enterprise. Flag any plist whose lifetime falls in the 1st percentile (e.g., less than 5 minutes), especially if it was also loaded by `launchctl`, to identify suspiciously ephemeral configuration files.",
              "Use a sequence analysis model, such as a Recurrent Neural Network (RNN), trained on sequences of endpoint events (file create, process exec, network conn, file delete). Train the model to recognize legitimate software installation sequences. Apply the model to live event streams to identify sequences that have a low probability of being legitimate, such as the 'create-load-run-delete' pattern."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]