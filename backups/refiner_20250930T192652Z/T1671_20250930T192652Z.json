[
  {
    "information_requirement": "Is the adversary maintaining persistence by leveraging cloud application integrations?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1671",
        "name": "Cloud Application Integration",
        "evidence": [
          {
            "description": "A cloud application registration or consent event contains an Application ID, publisher name, or redirect URI that matches an entry on a threat intelligence feed of known malicious OAuth applications.",
            "data_sources": [
              "Microsoft 365 Unified Audit Log",
              "Azure AD Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID / Azure AD tenant, Threat intelligence platforms",
            "action": [
              "Symbolic Logic: Query cloud audit logs for events where ActivityType is 'Add application' or 'Consent to application'. Join the application identifier (e.g., AppId, ServicePrincipalName) from these events against a maintained list of known malicious application identifiers from threat intelligence feeds. Generate a high-severity alert for any match.",
              "Statistical Method: For all 'Consent to application' events, extract the publisher domain from the application's metadata. Calculate the historical frequency of consents for each publisher domain across the enterprise over the last 180 days. Flag any consent to an application from a publisher domain that falls below the 5th percentile of consent frequency for manual review.",
              "Machine Learning: Develop a classification model (e.g., Random Forest) trained on historical application consent events using features like publisher reputation, domain age of redirect URIs, and requested permission scopes. Use the model to predict the probability that a new consent event is malicious. Alert on events exceeding a predefined probability threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A new application registration event shows an application name with characteristics of impersonation (e.g., typosquatting, homoglyphs) or is associated with an unverified publisher whose domain is newly registered.",
            "data_sources": [
              "Microsoft 365 Unified Audit Log",
              "Azure AD Audit Logs",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID / Azure AD tenant, Public WHOIS records, Network gateways and proxies",
            "action": [
              "Symbolic Logic: For each 'Add application' or 'Consent to application' event, apply a set of regular expressions to the application display name to detect common impersonation and typosquatting patterns (e.g., 'M.crosoft', '0ffice', 'Goog1e'). Generate an alert if a pattern is matched.",
              "Statistical Method: For each new application from an unverified publisher, extract the publisher's domain from Zeek dns.log or application metadata. Programmatically query WHOIS data to retrieve the domain's creation date. Flag any application whose publisher domain is less than 90 days old. Additionally, calculate the Levenshtein distance between the new application's name and a list of legitimate, commonly used applications in the enterprise. Flag applications with a small distance (e.g., 1-2) to a known app name.",
              "Machine Learning: Use an unsupervised learning model like DBSCAN on feature vectors derived from application names (e.g., character n-grams, use of non-ASCII characters). Investigate small, outlier clusters as potentially containing sophisticated impersonation attempts that regex or simple distance metrics might miss."
            ]
          },
          {
            "description": "An application consent event involves a set of high-risk permissions, or the consent is granted by a non-administrative user from a geographically anomalous or non-corporate IP address.",
            "data_sources": [
              "Microsoft 365 Unified Audit Log",
              "Azure AD Audit Logs",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft Entra ID / Azure AD tenant, Network gateways and proxies, VPN concentrators",
            "action": [
              "Symbolic Logic: Define a static list of high-risk delegated or application permissions (e.g., 'Mail.ReadWrite.All', 'Directory.ReadWrite.All', 'Application.ReadWrite.All'). Query cloud audit logs for 'Consent to application' events that contain any permission from the high-risk list. Generate a high-priority alert for any match.",
              "Statistical Method: For every 'Consent to application' event, enrich the source IP address with geolocation data by correlating with Zeek conn.log. For each user, maintain a baseline of typical source countries. Flag any consent granted from a country that is not in the user's top 95% historical locations. Additionally, calculate the entropy of permission scopes requested by applications; a high entropy score for a single application's permissions can indicate an unusually broad request and should be flagged.",
              "Machine Learning: Use a clustering algorithm (e.g., K-Means) to group applications based on the vector of permissions they request. Analyze the resulting clusters to identify a 'high-risk' cluster. Any new application that is assigned to this high-risk cluster upon consent should be flagged for review. Additionally, train an anomaly detection model (e.g., Isolation Forest) on features including user role, permission risk score, time of day, and source IP reputation to identify outlier consent events."
            ]
          },
          {
            "description": "A service principal associated with a cloud application exhibits data access behavior that deviates significantly from its established baseline in terms of volume, time-of-day, frequency, or types of resources accessed.",
            "data_sources": [
              "Microsoft 365 Unified Audit Log (SharePointFileOperation, ExchangeItem)",
              "Azure AD Sign-in Logs (Service Principal)",
              "Azure AD Audit Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Microsoft 365 services (Exchange Online, SharePoint Online, OneDrive), Microsoft Entra ID / Azure AD tenant",
            "action": [
              "Symbolic Logic: For service principal sign-in and access events, correlate the sign-in IP address against a deny-list of known malicious IPs, TOR exit nodes, or anonymizing proxies. Generate an alert for any sign-in or access attempt from a listed IP.",
              "Statistical Method: For each service principal, establish a 30-day rolling baseline of hourly data access volume (e.g., count of files accessed). Calculate the mean and standard deviation for each hour. Generate an alert if the access volume in any given hour exceeds three standard deviations from the historical mean for that hour. Also, flag a service principal if the number of unique user mailboxes it accesses in a day exceeds the 99th percentile of its historical daily activity.",
              "Machine Learning: Apply a time-series anomaly detection model (e.g., LSTM autoencoder) to the sequence of resource access events for each service principal. Train the model on features like resource type, access operation (Read, Write), and time between events. Flag sequences of actions that the model reconstructs with high error, indicating a deviation from normal learned behavior, such as rapid enumeration followed by exfiltration."
            ]
          },
          {
            "description": "A process creation event on an endpoint, indicating the use of a cloud CLI tool to create a service principal, is temporally correlated with the first sign-in or data access activity from that new principal.",
            "data_sources": [
              "Windows Event ID 4688",
              "Azure AD Audit Logs",
              "Azure AD Sign-in Logs (Service Principal)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain-joined endpoints and servers, Microsoft Entra ID / Azure AD tenant",
            "action": [
              "Symbolic Logic: Create a rule that triggers when a process creation event (Windows Event ID 4688) with a parent process of 'pwsh.exe' or 'cmd.exe' shows a process name of 'az.cmd' and command-line arguments matching 'ad sp create-for-rbac'. If this is followed within 5 minutes by an 'Add service principal' event in Azure AD Audit Logs for the same principal, alert.",
              "Statistical Method: Establish a baseline for the frequency of service principal creation across the environment. Generate an alert if the number of service principals created in a 24-hour period exceeds the 99th percentile of the daily creation count over the last 90 days. Correlate spikes in creation with process-level data (Windows Event ID 4688) to identify potential scripted mass-creation.",
              "Machine Learning: Develop a sequence analysis model that examines the chain of events following a service principal's creation. Train a classifier (e.g., Logistic Regression) on features like [Time to first sign-in, IP reputation of first sign-in, Permissions granted at creation, Time to first data access]. A sequence characterized by immediate sign-in from a rare IP followed by high-volume access would receive a high suspicion score and trigger an alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.2",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]