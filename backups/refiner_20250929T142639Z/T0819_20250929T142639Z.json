[
  {
    "information_requirement": "Is an adversary attempting to exploit our public-facing ICS applications for initial access? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0819",
        "name": "Exploit Public-Facing Application",
        "evidence": [
          {
            "description": "A sudden increase (e.g., >2 standard deviations from 7-day average) in inbound connection attempts or data volume to a public-facing ICS application from an unapproved geographic region, a known malicious IP/ASN, or a source IP exhibiting multiple failed authentication attempts immediately followed by successful authentication.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek notice.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network DMZ containing public-facing ICS applications (e.g., Historians, Web HMIs, Remote Access Gateways, OPC UA Servers)",
            "action": "1. **Symbolic Logic (IOC Match):** Search Zeek http.log URI, POST body, and HTTP User-Agent fields for known exploit strings (e.g., SQL injection patterns, command injection payloads, web shell indicators) using regular expressions or Yara rules. Simultaneously, cross-reference source IPs from Zeek conn.log against threat intelligence feeds for known malicious IPs, ASNs, or TOR exit nodes. \n2. **Statistical Method (Percentile Threshold/Baseline):** For each public-facing ICS application, establish a 7-day moving average and standard deviation for inbound connection count and total bytes in Zeek conn.log, grouped by source IP and destination port. Trigger an alert if any source IP exceeds the mean by 3 standard deviations within a 15-minute window or if connection attempts from a new geographic region (based on MaxMind GeoIP data) occur within a 24-hour period. \n3. **Machine Learning Application (Classification/Anomaly Detection):** Apply a clustering algorithm (e.g., DBSCAN or K-means) to Zeek conn.log entries targeting ICS applications, using features like `orig_bytes`, `resp_bytes`, `duration`, `orig_pkts`, and `resp_pkts` to identify anomalous connection clusters that deviate significantly from established normal communication patterns. Train a binary classifier (e.g., Random Forest) on historical Zeek http.log data to detect anomalous HTTP requests based on URI length, parameter count, HTTP method, and entropy of request body, flagging requests with a high probability of being exploit attempts. Correlate findings with Zeek notice.log for events like 'Scan::Address_Scan' to prioritize suspicious sources."
          },
          {
            "description": "A process associated with a public-facing ICS application (e.g., `historian.exe`, `hmi_web_server.exe`) creates a child process that is not part of its normal operational whitelist, particularly within 5 minutes of an inbound network connection from an external IP, with the child process being an interactive shell (e.g., `powershell.exe`, `cmd.exe`), a reconnaissance utility (e.g., `whoami.exe`, `ipconfig.exe`, `net.exe`), or a known malware payload.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing ICS application servers (e.g., Windows-based HMI servers, data historians, engineering workstations in DMZ)",
            "action": "1. **Symbolic Logic (IOC Match/Whitelist):** Define a whitelist of legitimate child processes for each public-facing ICS application process (e.g., `historian.exe` is allowed to spawn `logger.exe` but not `powershell.exe`). Alert immediately if `Windows Event ID 4688` shows an ICS application process as `ParentProcessName` and a non-whitelisted executable (e.g., `powershell.exe`, `cmd.exe`, `bitsadmin.exe`, `certutil.exe`, `net.exe`, `whoami.exe`) as `NewProcessName`, especially when correlated with an inbound Zeek `conn.log` entry from an external IP to the server's public-facing port within a 5-minute window. \n2. **Statistical Method (Entropy/Baseline):** For each public-facing ICS application, calculate the Shannon entropy of newly created process names (from `Windows Event ID 4688`) in 1-hour windows. Establish a baseline entropy score. Trigger an alert if the entropy score deviates by more than 2 standard deviations from the historical mean, indicating a sudden increase in diverse or unusual process creations following an inbound network connection (from Zeek `conn.log`) to that application. \n3. **Machine Learning Application (Behavioral Anomaly Detection):** Train a behavioral anomaly detection model (e.g., isolation forest or one-class SVM) on `Windows Event ID 4688` data for public-facing ICS application servers, using features such as `ParentProcessName`, `NewProcessName`, `CommandLine`, and `NewProcessId`. The model should learn normal process execution patterns and flag new process creations by ICS applications that are scored as anomalous, especially when preceded by suspicious network activity identified from Zeek `conn.log`."
          },
          {
            "description": "A public-facing ICS application server establishes an outbound network connection to an internal ICS network segment (e.g., Level 1/0, Process Control Network) that is not part of its established operational baseline, particularly using protocols like SMB, RDP, or proprietary ICS protocols, or targeting high-value assets such as PLCs, RTUs, or engineering workstations.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network boundary between the IT/DMZ and the OT/ICS network, Internal ICS network segments (e.g., Process Control Network, Safety Instrumented System Network, Level 1/0 Control Network)",
            "action": "1. **Symbolic Logic (Whitelist/Blacklist):** Maintain a strict whitelist of allowed outbound connections from public-facing ICS application servers to the internal ICS network (source IP, destination IP, destination port, protocol from Zeek `conn.log`). Alert immediately on any connection attempting to egress the DMZ and enter the ICS network that is not explicitly whitelisted, especially if the destination port corresponds to common remote access or file transfer protocols (e.g., 3389/RDP, 445/SMB, 22/SSH, 502/Modbus, 102/S7COMM). \n2. **Statistical Method (Jaccard Index/Threshold):** For each public-facing ICS application server, establish a 30-day baseline of unique destination IPs and ports contacted within the internal ICS network from Zeek `conn.log`. Calculate the Jaccard index (or similar similarity metric) of current-day connections against the baseline. Trigger an alert if the similarity score drops below a predefined threshold (e.g., 0.5), indicating a significant deviation from normal internal communication patterns. Additionally, monitor for a sudden increase (e.g., >3 standard deviations from the 7-day average) in the number of internal hosts contacted by the ICS application server within a 1-hour window. \n3. **Machine Learning Application (Graph-based Anomaly Detection):** Utilize a graph-based anomaly detection model on Zeek `conn.log` data, where nodes are hosts and edges are connections. Train the model on historical ICS network traffic to understand normal communication patterns between public-facing ICS servers and internal ICS hosts. Flag new connections or changes in connection topology (e.g., a public-facing server connecting to a previously uncontacted PLC or RTU) that are identified as anomalous by the model, indicating potential lateral movement or network reconnaissance."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]