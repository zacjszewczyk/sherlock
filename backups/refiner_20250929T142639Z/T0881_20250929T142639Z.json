[
  {
    "information_requirement": "Is the adversary attempting to inhibit our response functions by stopping critical ICS services? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0881",
        "name": "Service Stop",
        "evidence": [
          {
            "description": "Observation of a process creation event (Windows Event ID 4688) with command-line arguments explicitly indicating a service stop operation (e.g., 'sc stop', 'net stop', 'Stop-Service') targeting a critical ICS service, immediately followed by a Windows System Event ID 7036 confirming the service entered a 'stopped' state.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human Machine Interfaces (HMIs), Historian Servers, OPC Servers, Domain Controllers, Jump Servers in OT/DMZ",
            "action": "1. **Symbolic Logic**: Create a watchlist `ICS_CRITICAL_SERVICES` containing exact names of critical ICS services (e.g., 'Rockwell FactoryTalk Linx', 'OSIsoft PI Data Archive', 'Wonderware Historian'). Monitor all Windows System Event ID 7036 where `Service_Name` is in `ICS_CRITICAL_SERVICES` and `Service_Status` is 'stopped'. Immediately alert if `Service_Name` matches a blacklisted service critical for safety or production without an accompanying change management ticket. 2. **Statistical Method**: For each host, establish a baseline of normal service stop times for services in `ICS_CRITICAL_SERVICES` (e.g., day of week, time of day) over a 90-day period. Calculate the mean and standard deviation for these events. Flag any service stop event that occurs outside of business hours (e.g., 6 PM - 6 AM local time) or on weekends, or that deviates from the baseline by more than 2 standard deviations. Additionally, monitor for Windows Security Event ID 4688 (Process Creation) where `ParentProcessName` is `cmd.exe` or `powershell.exe` and `CommandLine` contains `sc stop`, `net stop`, or `Stop-Service` for services in `ICS_CRITICAL_SERVICES`. Correlate these process creation events with subsequent Event ID 7036 within a 60-second window on the same host. 3. **Machine Learning Application**: Implement a time-series anomaly detection model (e.g., Isolation Forest, Prophet) on the frequency and timing of critical ICS service stop events per host. Train the model on historical data (e.g., 6 months). Generate alerts when the model identifies a significant deviation from the learned pattern, such as an unusually high number of service stops in a short period or a stop event at a highly atypical time, even if it falls within the 2-standard-deviation threshold of the simpler statistical method."
          },
          {
            "description": "Observation of a critical ICS service entering a 'stopped' state (Windows Event ID 7036) within a short time window (e.g., 60 seconds) after an inbound network connection (Zeek conn.log) to the affected host, where the network connection exhibits characteristics statistically anomalous to the host's historical network communication profile.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT Network Segments, DMZ between IT/OT, Critical Control System Hosts (e.g., EWS, HMIs), Network Intrusion Detection Systems (NIDS) deployed in OT",
            "action": "1. **Symbolic Logic**: Identify all critical service stop events (Windows Event ID 7036 for services in `ICS_CRITICAL_SERVICES`). For each event, search Zeek conn.log for inbound connections to the affected host's IP address (`id.resp_h`) within the 5 minutes preceding the service stop timestamp. Filter for connections from known 'untrusted' zones (e.g., IT network, internet, or non-engineering workstations in OT) directly to OT critical assets, or connections using typically restricted ports (e.g., RDP/3389, SMB/445 from IT to OT). Immediately alert on such connections followed by a service stop. 2. **Statistical Method**: For each critical OT host, build a statistical profile of normal inbound network connections (source IP, source port, destination port, protocol, byte counts, connection duration) from Zeek conn.log over a 30-day period. Calculate percentiles (e.g., 99th percentile for byte counts, frequency of source IPs). For any inbound connection within 5 minutes of a critical service stop, calculate a 'deviation score' based on how far it deviates from the established profile. For example, assign a high score if the `id.orig_h` (source IP) has never been observed communicating with this `id.resp_h` (destination IP) before, or if the `id.resp_p` (destination port) is outside the top 5 most frequently used ports for that host. Alert if the cumulative deviation score exceeds a predefined threshold (e.g., multiple metrics exceeding the 99th percentile or 3 standard deviations from the mean deviation score). 3. **Machine Learning Application**: Apply an unsupervised machine learning algorithm (e.g., Isolation Forest, One-Class SVM) to Zeek conn.log data for each critical OT host. Train the model on historical network traffic patterns (e.g., 60 days) to learn 'normal' connection behavior (e.g., source/destination IP pairs, ports, protocols, connection duration, byte counts). When a critical service stop (Event ID 7036) occurs, analyze the network connections to that host in the preceding 5 minutes using the trained model. Generate an alert if any of these preceding connections are classified as anomalous by the model, indicating a potential remote trigger for the service stop."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]