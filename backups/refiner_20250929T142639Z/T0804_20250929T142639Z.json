[
  {
    "information_requirement": "Is an adversary inhibiting our response function by blocking critical reporting messages? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0804",
        "name": "Block Reporting Message",
        "evidence": [
          {
            "description": "Unexpected termination of a whitelisted critical ICS application process (e.g., opcserver.exe, hmi_client.exe) on a Windows-based HMI, EWS, or historian server, resulting in a measurable and sustained drop in associated ICS protocol traffic.",
            "data_sources": [
              "Windows Event ID 4689",
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Historian Servers, OPC Servers within the Process Control Network (PCN) segments.",
            "action": "1. **Symbolic Logic/Threshold**: Maintain a CMDB-driven whitelist of critical ICS application process names (e.g., 'opcserver.exe', 'hmi_client.exe') and their expected parent processes on HMIs, EWS, and Historian Servers. Alert on Windows Event ID 4689 (A process has exited) for any whitelisted process. Immediately inspect Windows Event ID 4688 (A new process has been created) for the parent process of the terminated application; flag terminations initiated by non-standard administrative tools (e.g., 'cmd.exe', 'powershell.exe', 'psexec.exe') or any unexpected parent process. 2. **Statistical Method**: For each critical ICS application, establish a 7-day baseline of expected outbound ICS protocol traffic volume (bytes/packets per minute) in Zeek conn.log to its associated field devices (PLCs/RTUs). Upon detecting a process termination (from Step 1), query Zeek conn.log for the 5-minute interval immediately following the termination. Alert if the traffic volume for the relevant ICS protocol drops below the 1st percentile or by more than three standard deviations from the established baseline, indicating a significant and unusual communication loss. 3. **Data Science/Anomaly Detection**: Implement a time series anomaly detection algorithm (e.g., Exponential Smoothing, ARIMA) on the hourly count of Windows Event ID 4689 for whitelisted critical ICS processes. Trigger an alert if the observed termination rate deviates significantly (e.g., Z-score > 3) from the predicted range, indicating an unusual surge in process terminations that might be orchestrated by an adversary rather than routine maintenance."
          },
          {
            "description": "Detection of a newly added or modified Windows Defender Firewall rule on a critical HMI, Historian, or Application Server that explicitly blocks inbound or outbound communication on a port known to be used by ICS protocols (e.g., TCP 502 for Modbus, TCP 20000 for DNP3, UDP 47808 for EtherNet/IP), followed by a corresponding and sustained reduction in expected ICS traffic.",
            "data_sources": [
              "Windows Event ID 4947",
              "Windows Event ID 4950",
              "Windows Event ID 4956",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "HMIs, Historian Servers, Application Servers in the Process Control Network (PCN), and Industrial Demilitarized Zone (IDMZ) servers that bridge IT/OT networks.",
            "action": "1. **Symbolic Logic/IOC**: Create a watchlist of known ICS protocol ports (e.g., TCP 502, TCP 20000, UDP 47808). Continuously monitor critical Windows-based ICS assets for Windows Event IDs 4947 (A rule was added to the Windows Firewall exception list), 4950 (A setting has changed in Windows Firewall), and 4956 (A rule was modified in the Windows Firewall exception list). Parse the 'Rule Name', 'Direction', and 'Port' fields from the event details. Alert if a new or modified rule explicitly blocks a port from the ICS protocol watchlist, especially if the direction is 'Inbound' or 'Outbound' to/from expected ICS devices. 2. **Statistical Method**: For each critical asset, establish a 7-day moving average baseline of communication volume (packets per minute) for each ICS protocol port identified in Zeek conn.log. Upon detection of a suspicious firewall rule change (from Step 1), immediately query Zeek conn.log for the affected asset. Calculate the mean traffic volume for the relevant port in the 15-minute window following the rule change. Trigger an alert if this mean volume drops below the 5th percentile or by more than three standard deviations from the established baseline, indicating a measurable reduction in traffic. 3. **Data Science/Classification**: Develop a simple classification model (e.g., Decision Tree, Logistic Regression) trained on historical Windows Firewall rule changes (Event IDs 4947/4950/4956) to categorize them as 'Expected Maintenance', 'Normal Operation', or 'Anomalous'. Features could include user account, time of day, day of week, affected ports, and whether the rule is 'Enabled'. Alert on 'Anomalous' classifications, particularly those involving ICS-specific ports or occurring outside of scheduled maintenance windows."
          },
          {
            "description": "A critical ICS reporting endpoint (e.g., HMI, Historian) experiences a network denial-of-service (DoS) condition, identified by an abnormal surge in connection attempts, failed connections, or high connection rates from unexpected sources, resulting in a measurable degradation or cessation of legitimate ICS protocol communication.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek notice.log",
              "Zeek dpd.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network interfaces of HMIs, Historians, and Control Servers; network segments/VLANs dedicated to process control.",
            "action": "1. **Statistical Method**: For critical ICS endpoints (HMIs, Historians, Control Servers), establish a 7-day moving baseline for the hourly count of inbound connections in Zeek conn.log, broken down by destination port and source IP. Alert if the current hourly connection count to any critical port exceeds the 99.5th percentile of its historical baseline, specifically from a single source IP or a small cluster of IPs. 2. **Symbolic Logic/Threshold**: Upon triggering an alert from Step 1, filter the Zeek conn.log for the affected endpoint and time window. Calculate the percentage of connections with a `conn_state` of 'S0' (SYN sent, no reply), 'REJ' (connection rejected), or 'RSTR' (reset due to connection refused). Alert if this percentage exceeds 70% of the anomalous traffic, indicating a high rate of failed connection attempts characteristic of a network flood. Concurrently, verify if the `service` field in Zeek conn.log for legitimate ICS protocols (e.g., `modbus`, `dnp3`) from expected sources shows a sustained drop in traffic volume (e.g., >90% reduction) in the same time window. 3. **Data Science/Anomaly Detection**: Implement a real-time time series anomaly detection model (e.g., Isolation Forest, One-Class SVM) on the connection rate (connections per second) to critical ICS endpoints from Zeek conn.log. Train the model on benign network traffic patterns. Generate an alert when the model identifies a significant deviation from the learned normal behavior, indicating an unusual surge or sustained high rate of connections that could signify a DoS attack. Further enrich by clustering source IPs of anomalous connections to identify potential attack origins."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]