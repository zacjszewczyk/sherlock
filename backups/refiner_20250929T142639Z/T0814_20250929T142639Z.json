[
  {
    "information_requirement": "Is an adversary attempting to disrupt industrial control system (ICS) device functionality via Denial of Service? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0814",
        "name": "Denial of Service",
        "evidence": [
          {
            "description": "A sustained, anomalous increase in network traffic volume (e.g., packets per second, bytes per second) or connection count (e.g., new connections per second) directed at a specific ICS device (e.g., PLC, RTU, HMI) where the observed rate exceeds the 95th percentile of its established historical baseline for a continuous period of at least 60 seconds.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "ICS Network Segments, particularly the network interfaces of critical controllers (PLCs, RTUs) and Human-Machine Interfaces (HMIs), and the Control System DMZ.",
            "action": "1. **Symbolic Logic**: Identify all Zeek `conn.log` entries where `id.resp_h` matches a predefined watchlist of critical ICS device IP addresses and `id.resp_p` matches known ICS protocol ports (e.g., Modbus TCP 502, EtherNet/IP 44818). Flag connections with `orig_bytes` or `resp_bytes` of 0 for a given time window (e.g., 5 seconds) if `duration` is non-zero, indicating potential empty floods. 2. **Statistical Method**: For each critical ICS device, calculate the rolling 5-minute average and standard deviation of `orig_bytes`, `resp_bytes`, `orig_pkts`, `resp_pkts`, and unique `id.orig_h` counts from `conn.log`. Alert when any of these metrics exceed 3 standard deviations from their respective rolling means or cross the 99th percentile of historical values for a continuous period of at least 60 seconds. 3. **Machine Learning**: Implement a time-series anomaly detection model (e.g., using a Prophet model or Isolation Forest) on the aggregated `conn.log` data (e.g., total bytes per minute, connection count per minute) directed at critical ICS devices. Trigger an alert when the model identifies a significant, sustained deviation from the learned normal traffic patterns."
          },
          {
            "description": "A sustained, anomalous increase in the rate of connection resets (`RST` flag) or rejections (e.g., Zeek `conn_state` 'REJ', 'RSTO', 'RSTR', 'RSTRH') originating from a specific ICS device, exceeding the 95th percentile of its established baseline, observed within 30 seconds of receiving traffic from a single or small group of source IP addresses.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Control System DMZ, network interfaces of Programmable Logic Controllers (PLCs) and Remote Terminal Units (RTUs), and SCADA Servers.",
            "action": "1. **Symbolic Logic**: Filter Zeek `conn.log` for entries where `id.resp_h` is a critical ICS device IP and `conn_state` is one of 'REJ', 'RSTO', 'RSTR', or 'RSTRH'. Additionally, identify connections where `resp_pkts` is significantly higher than `orig_pkts` but with minimal `resp_bytes` (e.g., less than 10 bytes), indicating potential malformed replies or device struggle. 2. **Statistical Method**: For each critical ICS device, establish a 5-minute rolling average and standard deviation for the count of connections with `conn_state` indicating resets/rejections. Trigger an alert if this count exceeds the 99th percentile of its historical baseline for at least 30 seconds, specifically when correlated with traffic originating from a single or small cluster of source IPs. 3. **Machine Learning**: Apply an unsupervised clustering algorithm (e.g., K-Means or DBSCAN) to group `conn.log` entries based on `id.resp_h`, `id.orig_h`, `conn_state`, and `duration`. Identify clusters that represent unusual patterns of high-frequency, short-duration connections with error states to specific ICS devices, indicating potential DoS activity."
          },
          {
            "description": "A critical process or service on a Windows-based ICS host (e.g., HMI application, historian database service) reports an Application Error (Windows Event ID 1000) or Application Hang (Windows Event ID 1002), or a Service Control Manager event indicating unexpected termination (e.g., Windows Event ID 7031, 7034), occurring within a 60-second window after a sustained increase in network connection attempts or resource utilization (e.g., CPU, memory) directed at that host.",
            "data_sources": [
              "Windows Event ID 1000",
              "Windows Event ID 1002",
              "Windows Event ID 7031",
              "Windows Event ID 7034",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS), Human-Machine Interfaces (HMIs), and Historian Servers within the ICS network.",
            "action": "1. **Symbolic Logic**: Create a watch list of critical processes and services on Windows-based ICS hosts (e.g., `hmi_app.exe`, `historian.exe`, `scada_server.exe`). Monitor Windows Event IDs 1000 (Application Error), 1002 (Application Hang), 7031 (Service terminated unexpectedly), and 7034 (Service terminated unexpectedly) specifically for these processes/services. Trigger an alert if any of these events occur. 2. **Statistical Method**: Upon detection of a critical application/service error/hang event, analyze Zeek `conn.log` for the preceding 60 seconds for the affected host. Calculate the percentile rank of the `orig_bytes`, `resp_bytes`, and `connection_count` directed at the host during that period compared to the host's historical 5-minute average. An alert is generated if any of these network metrics exceed the 99th percentile, especially if originating from a low-reputation or newly observed internal IP address. 3. **Machine Learning**: Employ a correlation engine or a graph-based anomaly detection model to identify unusual temporal relationships between spikes in network traffic (from Zeek `conn.log`) directed at a specific Windows-based ICS host and the occurrence of critical application/service error or hang events (Windows Event IDs 1000, 1002, 7031, 7034) on that host. The model should learn typical network-to-host event causality and flag deviations where high network activity immediately precedes host instability."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]