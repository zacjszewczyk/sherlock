[
  {
    "information_requirement": "Is an adversary manipulating the I/O image of a PLC to inhibit its response function?",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0835",
        "name": "Manipulate I-O Image",
        "evidence": [
          {
            "description": "Detection of Modbus Function Code 5 (Force Single Coil) or 15 (Force Multiple Coils) targeting a PLC, originating from an Engineering Workstation (EWS) via an unapproved source IP or process, or occurring outside of predefined operational hours and scheduled maintenance windows.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Industrial Demilitarized Zone (IDMZ) network segments, Control Network segments (Level 3.5 and 3 of Purdue Model), Engineering Workstation (EWS) endpoints.",
            "action": "1. **Symbolic Logic:** Filter Zeek modbus.log for `function_code:5` or `function_code:15`. For each instance, check if the `id.orig_h` (source IP) is *not* present in a predefined allowlist of authorized EWS IPs for force commands. If not, generate a high-priority alert. Additionally, correlate `id.orig_h` from Zeek conn.log with Windows Event ID 4688 (process creation) on the originating EWS to identify the `Process_Name`. Compare this `Process_Name` against a strict allowlist of approved engineering software (e.g., 'Studio5000.exe', 'TIA_Portal.exe'). If the process is not on the allowlist, generate an alert.\n2. **Statistical Method:** For each target PLC and source EWS IP, establish a baseline of `function_code:5` and `function_code:15` occurrences per hour over the last 90 days. Calculate the 99th percentile for the hourly frequency of these commands. Alert if the current hourly count exceeds this 99th percentile. Additionally, calculate the standard deviation for the `start_time` of these commands for each PLC over the last 90 days. Alert if a command occurs more than 3 standard deviations outside the typical time window (e.g., 9 AM-5 PM on weekdays, excluding approved change windows).\n3. **Machine Learning:** Train a time-series anomaly detection model (e.g., Isolation Forest or SARIMA-based anomaly detection) on the historical frequency and timing of `function_code:5` and `function_code:15` commands to each PLC. Input real-time modbus.log data into the trained model and generate an alert if the model detects a significant deviation from the learned normal pattern (e.g., an anomaly score above the 95th percentile of historical anomaly scores)."
          },
          {
            "description": "Execution of PLC memory write commands (e.g., Modbus Function Code 6 - Preset Single Register, or Function Code 16 - Preset Multiple Registers) targeting I/O image registers, originating from a source IP not on an approved allowlist, or initiated by a process other than authorized engineering software on an EWS.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek conn.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments (Level 2 of Purdue Model), critical PLC backplanes, Engineering Workstation (EWS) endpoints.",
            "action": "1. **Symbolic Logic:** Filter Zeek modbus.log for `function_code:6` or `function_code:16`. For each identified write command, check if the `id.orig_h` (source IP) is present in a predefined allowlist of authorized EWS IPs. If not, generate a high-priority alert. For commands from authorized IPs, correlate `id.orig_h` from Zeek conn.log with Windows Event ID 4688 (process creation) on the EWS. Verify the `Process_Name` against a strict allowlist of authorized engineering applications (e.g., 'FactoryTalkViewStudio.exe', 'Step7.exe'). If the process is not on the allowlist or is an unknown process, generate an alert.\n2. **Statistical Method:** Calculate the entropy of unique `id.orig_h` values observed sending Modbus write commands (`function_code:6` or `function_code:16`) over a rolling 24-hour window. Establish a baseline for this entropy. Alert if the current entropy value exceeds the 95th percentile of the historical entropy, indicating an unusual diversity of sources attempting write operations. Additionally, for each target PLC, track the frequency of write commands. Alert if the number of write commands to a specific PLC within a 1-hour window exceeds 3 standard deviations from its historical hourly average.\n3. **Machine Learning:** Develop a behavior-based anomaly detection model (e.g., using a clustering algorithm like K-means or DBSCAN) on features extracted from modbus.log and conn.log for write commands (e.g., source IP, destination IP, function code, timestamp, data length). Cluster historical 'normal' write operations. When new write commands occur, classify them. If a command falls into a cluster significantly distant from the established 'normal' clusters, or if it's an outlier not fitting any cluster, generate an alert."
          }
        ]
      }
    ],
    "last_updated": "2025-09-29",
    "version": "1.1",
    "date_created": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]