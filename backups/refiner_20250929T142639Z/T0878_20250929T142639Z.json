[
  {
    "information_requirement": "Is an adversary attempting to inhibit our ability to respond to a process disruption or failure? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0878",
        "name": "Alarm Suppression",
        "evidence": [
          {
            "description": "Unauthorized modification or deletion of alarm configuration files, scripts, or binaries on HMI/EWS systems, or unexpected termination of alarm-related processes/services.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 7036",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers, Historian Servers",
            "action": "1. **Symbolic Logic:** Identify critical alarm configuration files (e.g., .ini, .xml, .db files in known HMI/SCADA directories) and service executables. Create alerts for `Windows Event ID 4663` (File System Object Access) indicating modification or deletion of these files by non-whitelisted processes or users. Additionally, alert on `Windows Event ID 4688` (Process Creation) where parent processes like `cmd.exe` or `powershell.exe` are spawned by HMI/SCADA applications to interact with these files. 2. **Statistical Method:** Baseline the hourly frequency of `Windows Event ID 4663` events on each critical HMI/EWS for specific alarm configuration files. Alert if the observed event rate exceeds the 99th percentile of the historical hourly rate for that host. For processes interacting with alarm configurations, calculate the Shannon entropy of their command-line arguments over a rolling 1-hour window and alert on values significantly below the historical average (e.g., 3 standard deviations), indicating repetitive, targeted commands. 3. **Machine Learning Application:** Implement a time-series anomaly detection model (e.g., using a moving average with standard deviation bands) on the count of `Windows Event ID 4663` or `Windows Event ID 7036` events per host. Flag as anomalous any sustained deviation (e.g., 3 consecutive data points outside the 95% prediction interval) from the forecasted normal event rate, which could indicate a coordinated attack on alarm configurations or services."
          },
          {
            "description": "Unauthorized or anomalous ICS protocol write commands (e.g., Modbus, S7Comm) targeting controller registers or memory locations known to control alarm states or thresholds.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek s7comm.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "OT network segments between Level 2 (Supervisory Control) and Level 1 (Basic Control), DMZ for remote access to OT, Safety Instrumented System (SIS) network zones",
            "action": "1. **Symbolic Logic:** Create a whitelist of authorized source IP addresses, destination controller IPs, and specific ICS function codes (e.g., Modbus Function Codes 5, 6, 15, 16) permitted for write operations from `Zeek modbus.log` or `Zeek s7comm.log`. Generate an immediate alert for any write command that violates this whitelist (e.g., unauthorized source, unauthorized destination, or unauthorized function code). 2. **Statistical Method:** For authorized write commands, baseline the hourly frequency of write operations per source IP and destination controller. Alert if the observed frequency exceeds the 99th percentile of historical activity for that specific source-destination pair. Additionally, over a rolling 30-minute window, calculate the Shannon entropy of target register addresses written to by a single source; a sudden decrease (e.g., 2 standard deviations below the mean) could indicate focused, malicious manipulation. 3. **Machine Learning Application:** Apply an unsupervised anomaly detection algorithm (e.g., Isolation Forest or One-Class SVM) to a feature set derived from `Zeek modbus.log` or `Zeek s7comm.log` entries, including source IP, destination IP, function code, register address, and value written. Flag connections or command sequences that are identified as outliers compared to the established baseline of normal ICS write operations, indicating rare or unusual write patterns."
          },
          {
            "description": "Absence of expected alarm generation in the alarm management system (Windows Event Logs or proprietary logs) despite critical process variables, observed in ICS network traffic, exceeding predefined operational safety or alarm thresholds for a sustained duration.",
            "data_sources": [
              "Zeek modbus.log",
              "Windows Event ID 1",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Historian Servers, Alarm & Event Servers, SCADA Servers, OT Network segments monitoring Level 1 (Basic Control) process data",
            "action": "1. **Symbolic Logic:** Define critical process variables (e.g., specific Modbus register addresses) and their corresponding alarm thresholds. Implement a stateful correlation rule: if a process variable observed in `Zeek modbus.log` exceeds its alarm threshold for a sustained period (e.g., >10 seconds), AND no corresponding alarm event (e.g., `Windows Event ID 1` with specific Source Name and Event Message patterns) is logged on the central alarm server within an expected timeframe (e.g., 5 seconds), then generate a 'Missing Alarm' alert. 2. **Statistical Method:** For each critical process variable, calculate the average and 99th percentile of the time it takes for an alarm to be generated after its threshold is exceeded, based on historical data. Alert if the observed alarm generation delay for a given event significantly exceeds this statistical threshold. Additionally, monitor the distribution of process values in `Zeek modbus.log`; an unusually flat distribution or values consistently just below a threshold, without expected alarms, could be flagged using statistical process control. 3. **Machine Learning Application:** Train a simple classification model that learns the normal relationship between process variable values (from `Zeek modbus.log`) and the generation of alarm events (`Windows Event ID 1`). When the model predicts an alarm *should* have occurred based on the observed process data, but no corresponding alarm event is found in the logs, flag it as a 'Predicted Alarm Missed' anomaly. This model would be retrained periodically to adapt to system changes."
          },
          {
            "description": "Explicit termination of critical alarm management services or processes (e.g., HMI display, alarm logger) via system commands or direct manipulation on HMI, EWS, or alarm servers, resulting in a cessation of alarm generation or display.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 4688",
              "Windows Event ID 7034"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Alarm & Event Servers, Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), SCADA Servers",
            "action": "1. **Symbolic Logic:** Maintain a watchlist of critical alarm-related service names (e.g., 'HMI_Alarm_Service', 'SCADA_Notifier', 'AlarmLogger.exe') and their associated executable paths. Create an immediate alert upon `Windows Event ID 7036` (Service Control Manager) indicating a service from the watchlist has transitioned to a 'stopped' state. Also, alert on `Windows Event ID 4688` (Process Creation) where the `CommandLine` contains `taskkill`, `net stop`, or similar commands explicitly targeting a watchlist service or process. 2. **Statistical Method:** Baseline the typical uptime and downtime durations for each critical alarm service on its respective host. Alert if a service's downtime exceeds the 99th percentile of its historical downtime, or if the frequency of service stoppages (from `Windows Event ID 7036` or `7034`) exceeds the 99th percentile for a given rolling time window (e.g., hourly). 3. **Machine Learning Application:** Implement a time-series anomaly detection model on the operational status (running/stopped) of critical alarm services. A sudden, unexpected, and sustained 'stopped' state, particularly outside of scheduled maintenance windows or without preceding system reboot events, would be flagged as an anomaly. This could involve a simple state-transition model that learns expected state changes and alerts on unexpected ones based on historical patterns."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]