[
  {
    "information_requirement": "Has an adversary compromised a host in our ICS environment via a drive-by attack? (PIR)",
    "tactic_id": "TA0108",
    "tactic_name": "Initial Access",
    "indicators": [
      {
        "technique_id": "T0817",
        "name": "Drive-by Compromise",
        "evidence": [
          {
            "description": "A web browser process (e.g., chrome.exe, iexplore.exe, firefox.exe) on an engineering workstation or HMI spawns an unexpected child process, such as a command shell or script interpreter (e.g., cmd.exe, powershell.exe, wscript.exe).",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, Human-Machine Interface (HMI) terminals, any host with web browsing capability within the control or corporate environment.",
            "action": "Continuously monitor for process creation events (Windows Event ID 4688) where the Parent Process Name is a known web browser. Establish a baseline of legitimate child processes for each browser. Generate an alert for any deviation from this baseline, prioritizing alerts for the creation of cmd.exe, powershell.exe, wscript.exe, or cscript.exe. Analyze the 'CommandLine' field for suspicious arguments, such as encoded commands, download cradles, or references to temporary directories."
          },
          {
            "description": "Network traffic from a host within the ICS or supporting corporate network shows DNS requests for, or direct connections to, domains known to be malicious, newly registered, or exhibiting characteristics of algorithmic generation (DGA).",
            "data_sources": [
              "Zeek dns.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, ICS network gateways.",
            "action": "Ingest Zeek dns.log and cross-reference all queried domains against threat intelligence feeds of known malicious or suspicious domains. For domains not on these lists, calculate the domain's age and flag any domains registered within the last 30 days. Apply an entropy score calculation to all queried domains to identify those with high randomness, which are indicative of DGA. Correlate suspicious DNS lookups with connection logs (Zeek conn.log) to confirm if a successful connection was established."
          },
          {
            "description": "A file with an executable MIME type (e.g., application/x-dosexec, application/octet-stream) or a script extension is downloaded by a web browser from a non-standard or low-reputation source.",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, internet gateway proxy servers.",
            "action": "Analyze Zeek files.log to identify all files transferred over the network. Filter for files with executable MIME types or extensions (.exe, .dll, .ps1, .vbs). For each identified file, use the 'conn_uids' field to pivot to the corresponding Zeek http.log entry. Analyze the 'host' and 'referrer' fields to determine the download source. Establish a baseline of common file-distributing domains and alert on executable downloads from domains outside this baseline, especially those with poor reputation scores or that are categorized as 'uncategorized'."
          },
          {
            "description": "An unusual User-Agent string is observed in outbound HTTP/S traffic originating from a host, potentially indicating the use of a malicious tool or an outdated, vulnerable browser targeted by an exploit kit.",
            "data_sources": [
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering workstations, HMIs, corporate network internet gateway.",
            "action": "From Zeek http.log, extract all unique User-Agent strings and their frequency of occurrence across the environment. Create a baseline of common, legitimate User-Agent strings for approved browser versions. Use statistical analysis to alert on User-Agent strings that are rare (e.g., appearing in the bottom 5th percentile of frequency). Also, create rules to match against known malicious User-Agent strings from threat intelligence or those corresponding to significantly outdated and vulnerable browser versions."
          }
        ]
      }
    ],
    "version": "1.0",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-25",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]