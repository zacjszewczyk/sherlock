[
  {
    "information_requirement": "Has a critical ICS device been restarted or shut down outside of a scheduled maintenance window? (PIR)",
    "tactic_id": "TA0107",
    "tactic_name": "Inhibit Response Function",
    "indicators": [
      {
        "technique_id": "T0816",
        "name": "Device Restart-Shutdown",
        "evidence": [
          {
            "description": "Windows System Event ID 1074 (user-initiated restart/shutdown) or Event ID 6006/6008 (unexpected shutdown) is observed on a critical Windows-based system (e.g., HMI, EWS), indicating a change in system operational state.",
            "data_sources": [
              "Windows System Event ID 1074",
              "Windows System Event ID 6006",
              "Windows System Event ID 6008",
              "Windows Security Event ID 4624",
              "Windows Security Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Human-Machine Interfaces (HMIs), Engineering Workstations (EWS), Operator Stations, and SCADA Servers within the Process Control Network (PCN).",
            "action": "1. **Symbolic Logic:** Identify all instances of Windows System Event ID 1074 (User initiated restart/shutdown) or 6006/6008 (unexpected shutdown) on critical HMI/EWS assets. For each event, check if the `InitiatingProcessName` (from 1074) matches a blacklist of known malicious tools or if the `InitiatingUser` is not a member of an authorized 'ICS Operators' or 'Maintenance Personnel' Active Directory group. Alert on any match. 2. **Statistical Method:** Establish a baseline of normal HMI/EWS shutdown/restart times and frequencies over the past 90 days, accounting for scheduled maintenance. Calculate the average frequency of these events per asset. Alert if the number of shutdown/restart events on a specific HMI/EWS within a 24-hour period exceeds the 99th percentile of its historical frequency, or if the `InitiatingProcessName` for Event ID 1074 is statistically rare (e.g., not observed in the past 180 days). 3. **Machine Learning:** Utilize a time-series anomaly detection model (e.g., Isolation Forest, LSTM) trained on 6-12 months of historical Windows System Event ID 1074 and 6006/6008 data from all critical HMI/EWS assets. The model should learn normal patterns of system restarts/shutdowns, including scheduled maintenance. Detect and alert on significant deviations from the learned patterns, such as an unscheduled cluster of restarts or a restart occurring at an unusual time for a specific HMI, classifying it as anomalous."
          },
          {
            "description": "Observation of specific ICS protocol function codes or commands (e.g., DNP3 Function Code 1/2 for restart, Modbus Diagnostic Function Code 8 with specific sub-functions) targeting a PLC, RTU, or IED, indicating a device restart request.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log",
              "Zeek ethernetip.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic monitoring points between Level 1 (Basic Control) and Level 2 (Supervisory Control) of the Purdue Model, specifically targeting PLCs, RTUs, and IEDs, and in DMZ segments separating IT and OT networks.",
            "action": "1. **Symbolic Logic:** Filter Zeek ICS protocol logs (e.g., `dnp3.log`, `modbus.log`, `ethernetip.log`) for known device restart function codes or commands (e.g., DNP3 FC1/FC2, Modbus FC8/sub-functions for restart, EtherNet/IP 'Reset' service). Cross-reference the source IP address of the command with an approved whitelist of Engineering Workstations (EWS) or authorized HMI systems. Alert immediately if a restart command is observed originating from an unapproved IP address. 2. **Statistical Method:** For each critical PLC/RTU, establish a statistical baseline of the frequency and types of ICS protocol function codes received from authorized sources over the past 90 days. Calculate the entropy score for the distribution of function codes over hourly or daily windows. Alert if a device restart command (e.g., DNP3 FC1) is observed, and its frequency within a given time window exceeds the 99th percentile of its historical occurrence, or if the overall function code entropy drops significantly, indicating unusual, focused command activity. 3. **Machine Learning:** Apply a supervised machine learning classifier (e.g., Random Forest, SVM) trained on historical Zeek ICS protocol logs to differentiate between normal operational commands and anomalous restart/shutdown commands. Features could include source/destination IP/port, protocol type, function code, payload size, and command frequency. The model would learn patterns of legitimate restart commands (e.g., during scheduled maintenance) and flag commands that deviate significantly from these patterns, classifying them as potentially malicious. Alert on high-confidence anomalous classifications."
          },
          {
            "description": "Absence of expected periodic network communication (e.g., polling, heartbeat messages, control commands) from a critical controller (PLC, RTU, IED) for a duration exceeding established operational thresholds, indicating a potential shutdown or reboot.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dnp3.log",
              "Zeek modbus.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic flows to and from critical controllers on the Process Control Network (PCN), specifically at network aggregation points or switch mirror ports for Level 0/1/2 devices.",
            "action": "1. **Symbolic Logic:** Maintain a list of critical controller IPs and their expected communication partners (HMIs, Historians, other PLCs) and normal polling intervals. For each critical controller, monitor `Zeek conn.log` (or specific ICS protocol logs) for active connections. If no `conn.log` entries (or specific ICS protocol log entries indicating activity) are observed for a given controller IP from its expected partners within 1.5 times its defined normal polling interval, generate a 'communication loss' alert. Exclude known scheduled maintenance windows from this alerting logic. 2. **Statistical Method:** For each critical controller, use `Zeek conn.log` to calculate a rolling average and standard deviation of the inter-arrival times of expected heartbeat/polling packets over the past 7 days. If the observed inter-arrival time for a controller exceeds the 99th percentile of its historical distribution, or if the current inter-arrival time is more than 3 standard deviations greater than the mean, trigger an alert for potential communication loss. Further, analyze the `duration` field of `Zeek conn.log` for connections to/from controllers; an abrupt drop in the average connection duration could also indicate an issue. 3. **Machine Learning:** Employ a time-series anomaly detection model (e.g., ARIMA, Prophet) on the `Zeek conn.log` data to predict expected communication patterns (presence/absence of connections, data volume, connection duration) for each critical controller. Train the model on several months of historical data, accounting for daily/weekly cycles and known maintenance periods. When the actual communication pattern for a controller significantly deviates from the model's prediction (e.g., a prolonged absence of connections where activity was predicted), classify it as an anomaly and generate an alert, indicating an unexpected shutdown or communication interruption."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]