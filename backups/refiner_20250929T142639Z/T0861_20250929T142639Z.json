[
  {
    "information_requirement": "Is an adversary attempting to map our industrial control process? (PIR)",
    "tactic_id": "TA0100",
    "tactic_name": "Collection",
    "indicators": [
      {
        "technique_id": "T0861",
        "name": "Point & Tag Identification",
        "evidence": [
          {
            "description": "Detection of a new, previously unobserved host initiating ICS protocol communication (e.g., Modbus, EtherNet/IP) with a PLC, or an established host exhibiting a significant statistical deviation in the volume of ICS read requests (e.g., Modbus Function Code 0x03/0x04, EtherNet/IP Get_Attribute_All) or unique destination IPs compared to historical baselines.",
            "data_sources": [
              "Zeek modbus.log",
              "Zeek ethernetip.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Control Network (PCN) segments containing PLCs, RTUs, and HMIs; Firewall/Router logs at PCN boundaries.",
            "action": "1. **Symbolic Logic:** Identify all unique `id.orig_h` (source IP) from `zeek_modbus.log` and `zeek_ethernetip.log`. Maintain an allowlist of known/authorized ICS hosts. Generate an alert when an `id.orig_h` not on the allowlist initiates any Modbus or EtherNet/IP communication (e.g., `modbus.log` entries where `uid` is not associated with an allowlisted `id.orig_h`).\n2. **Statistical Method:** For each established ICS host (`id.orig_h`) communicating with PLCs, establish a 7-day rolling baseline for the hourly count of Modbus read requests (e.g., `modbus.func=3` or `modbus.func=4`) and EtherNet/IP read requests (e.g., `ethernetip.command=0x6F` for `Get_Attribute_All`). Calculate the mean and standard deviation for these counts. Generate an alert if the current hourly count exceeds the mean by 3 standard deviations or the 99th percentile.\n3. **Machine Learning:** Apply a time-series anomaly detection model (e.g., Isolation Forest or ARIMA) to the hourly volume of unique destination IP addresses contacted by each ICS host and the hourly volume of total ICS protocol packets. Train the model on 30 days of historical data and alert when the model identifies a significant anomaly score (e.g., exceeding a predefined threshold or falling outside a predicted range), indicating a change in enumeration behavior."
          },
          {
            "description": "Windows Event ID 4663 (File System) indicating access (e.g., `AccessMask` containing `0x1` for ReadData or `0x80` for Delete) to ICS project files (e.g., `.ACD`, `.L5K`, `.CTL`, `.ap16`, `.XML` for tag exports) by an unauthorized user account, non-allowlisted process, or from an unusual network path.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Engineering Workstations (EWS) and central repositories for ICS project files; File servers storing ICS configurations.",
            "action": "1. **Symbolic Logic:** Configure Windows auditing for `Event ID 4663` (File System) on directories containing ICS project files (e.g., `*.ACD`, `*.L5K`, `*.CTL`, `*.ap16`, `*.XML` for tag exports). Define an allowlist of authorized `SubjectUserName` (user accounts/groups) and `ProcessName` (e.g., `Studio5000.exe`, `RSLogix5000.exe`, `TiaPortal.exe`) associated with legitimate access. Generate an alert for any `Event ID 4663` where `Object Name` matches an ICS project file extension and `SubjectUserName` or `ProcessName` is not on the allowlist. Specifically flag access by generic system processes (`cmd.exe`, `powershell.exe`, `explorer.exe` from non-user context) or network shares from non-EWS hosts.\n2. **Statistical Method:** For each authorized user account, establish a rolling 7-day baseline for the number of unique ICS project files accessed per hour and the frequency of access to specific file extensions. Calculate the mean and 99th percentile for these metrics. Alert if a user's activity in a 1-hour window exceeds the 99th percentile for either metric, indicating an unusual volume of file enumeration.\n3. **Machine Learning:** Implement a User and Entity Behavior Analytics (UEBA) model that profiles normal access patterns for ICS project files by each user and workstation. Train the model on historical `Event ID 4663` data to identify typical access times, file types, and process interactions. Alert when the model detects a significant deviation from the established behavioral profile (e.g., a user accessing an unusual number of different ICS project file types, or accessing files at atypical hours), indicating potential credential abuse or an adversary enumerating files."
          },
          {
            "description": "Detection of a new, unbaselined source IP connecting to the historian database port (e.g., 1433/TCP for MS SQL, 5432/TCP for PostgreSQL) or an established client exhibiting an anomalous volume of data transferred (`resp_bytes` in Zeek `conn.log`) or an unusual number of login failures (`Windows Event ID 4625`) preceding a successful login (`Windows Event ID 4624`) to the historian server.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624",
              "Windows Event ID 4625"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process Data Historian server(s); Database servers; Firewall/Router logs at network segment boundaries.",
            "action": "1. **Symbolic Logic:** Identify all unique `id.orig_h` (source IPs) from `zeek_conn.log` where `id.resp_p` (destination port) matches known historian database ports (e.g., 1433/TCP, 5432/TCP, 3306/TCP). Maintain an allowlist of authorized historian client IPs. Generate an alert when a `id.orig_h` not on the allowlist attempts to connect to the historian database port. Additionally, monitor `Windows Event ID 4625` (Account Logon Failed) on the historian server for a high volume of failed logins from a single source within a short timeframe (e.g., 10+ failures in 5 minutes) followed by a `Windows Event ID 4624` (Account Logon Successful) from the same source.\n2. **Statistical Method:** For all successful connections to the historian's database port (from `zeek_conn.log`), establish a 7-day rolling baseline for the `resp_bytes` (response bytes) field, grouped by `id.orig_h` (source IP) and `id.resp_h` (historian IP). Calculate the mean and standard deviation of `resp_bytes`. Generate an alert when a single connection's `resp_bytes` value exceeds the mean by 4 standard deviations, or when the hourly sum of `resp_bytes` for a given source IP exceeds the 99th percentile of its historical hourly sums.\n3. **Machine Learning:** Develop a User and Host Behavior Analytics (UHBA) model that profiles the typical data retrieval patterns from the historian. Train the model on historical `zeek_conn.log` data, focusing on `id.orig_h`, `id.resp_h`, `id.resp_p`, and `resp_bytes`. The model should learn typical data transfer volumes and frequencies for each client. Alert when the model identifies a significant deviation in data transfer volume or frequency for a specific client (e.g., a client pulling a volume of data significantly larger than its learned baseline or at an unusual frequency), indicating potential bulk data exfiltration or tag database dump."
          }
        ]
      }
    ],
    "version": "1.1",
    "date_created": "2025-09-25",
    "last_updated": "2025-09-29",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]