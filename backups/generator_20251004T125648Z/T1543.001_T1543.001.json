[
  {
    "information_requirement": "Is the adversary maintaining persistence using Launch Agents?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1543.001",
        "name": "Launch Agent",
        "evidence": [
          {
            "description": "A process with parent PID 1 ('launchd') executes from a path defined in a newly created .plist file located in `/Library/LaunchAgents/` or `~/Library/LaunchAgents/`. This process subsequently establishes an outbound network connection to a destination IP or domain matching a known malicious indicator from a threat intelligence feed.",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways, DNS resolvers",
            "action": [
              "1. Monitor macOS ESF for process execution events (ES_EVENT_TYPE_NOTIFY_EXEC) where the parent process name is 'launchd'. 2. For each such event, correlate the process's host IP and timestamp with Zeek `conn.log` and `dns.log` records. 3. Query DNS logs to resolve the destination IP to a domain name. 4. Trigger an alert if the destination IP or fully qualified domain name (FQDN) exists in a threat intelligence feed categorized as C2 or malware.",
              "1. For each process identified as being executed by a new Launch Agent, extract all associated DNS queries from `dns.log`. 2. For each queried domain, calculate its Shannon entropy score. 3. Establish a baseline distribution of entropy scores for legitimate domains across the enterprise. 4. Alert on any domain whose entropy score exceeds the 98th percentile of the established baseline, indicating potential DGA activity.",
              "1. Train a Random Forest classifier using labeled historical data. Features should include: process path entropy, code signature validity, parent process, destination port, outbound data volume, and IP reputation scores from external services. 2. Apply the trained model in real-time to new Launch Agent process executions and their corresponding network traffic. 3. Flag any process classified as 'malicious' with a high confidence score for analyst review."
            ]
          },
          {
            "description": "A file creation event for a `.plist` file is observed in `/Library/LaunchAgents/` or `~/Library/LaunchAgents/`. Analysis of the file's content reveals the `ProgramArguments` key points to an executable in a non-standard, world-writable location (e.g., `/tmp/`, `/Users/Shared/`). Alternatively, the process that created the `.plist` file is a scripting interpreter or network utility (e.g., `bash`, `python`, `curl`, `osascript`).",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_EXEC events",
              "File content analysis of .plist files"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, User home directories on macOS endpoints",
            "action": [
              "1. Monitor macOS ESF for file creation events (`ES_EVENT_TYPE_NOTIFY_CREATE`) in `/Library/LaunchAgents/` and `~/Library/LaunchAgents/`. 2. For each new `.plist` file, inspect the creating process. Alert if the parent process is on a watchlist of suspicious creators (e.g., `bash`, `curl`, `python`, `osascript`). 3. Additionally, parse the `.plist` file content and alert if the `ProgramArguments` key points to an executable path starting with `/tmp/` or `/Users/Shared/`.",
              "1. For all `.plist` file creation events in Launch Agent directories, aggregate the parent process names over a 30-day baseline period. 2. Calculate the frequency of each parent process. 3. Alert when a `.plist` is created by a parent process that is not in the top 99% of frequent creators (a rare parent). 4. In parallel, calculate the Shannon entropy of the executable path specified in the `ProgramArguments` key and alert if it exceeds a threshold derived from the 95th percentile of legitimate paths.",
              "1. Collect a dataset of `.plist` file creation events, vectorizing features such as parent process name, hour of day, and target directory (system vs. user). 2. Apply a density-based clustering algorithm (e.g., DBSCAN) to group legitimate events, such as software installations and updates, into distinct clusters. 3. Any new file creation event that does not fall into an existing cluster and is flagged as noise/an outlier by the model should be escalated for investigation as it represents a deviation from established activity patterns."
            ]
          },
          {
            "description": "On a single host, a behavioral chain is observed within a 5-minute window: a process not on an approved software installer allowlist writes a new file with execute permissions, followed by the same process (or its child) creating a `.plist` file in a Launch Agent directory that references the new executable, which is then executed and makes an outbound network connection.",
            "data_sources": [
              "macOS ESF process execution events",
              "macOS ESF file creation events",
              "macOS ESF file permission modification events",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways, Web content filters",
            "action": [
              "1. Define a stateful detection rule with a 5-minute time window, keyed by hostname. 2. Step A: Detect a file write event with execute permissions from a process not in a pre-defined 'installer' allowlist. 3. Step B: Detect a `.plist` creation in a Launch Agent directory by the same process or its child, pointing to the file from Step A. 4. Step C: Detect the execution of the file from Step A, followed by an outbound network connection in `Zeek conn.log`. 5. Trigger a high-severity alert if all three steps occur in sequence.",
              "1. For the initial process triggering the sequence (e.g., a browser), establish a baseline for the number of executable files it creates per hour. 2. Calculate the moving average and standard deviation of this count. 3. If a process creates a number of executables that is more than 3 standard deviations above its hourly moving average, flag the start of the chain as anomalous, increasing the overall risk score of the sequence.",
              "1. Represent event sequences as directed graphs where nodes are entities (processes, files) and edges are actions (create, execute, connect). 2. Train a graph neural network (GNN) on a large dataset of legitimate software installation and update sequences to learn normal graph embeddings. 3. In real-time, generate a graph for each observed sequence. 4. Flag any sequence whose graph embedding is a significant outlier in the learned embedding space, indicating a novel or anomalous behavioral pattern."
            ]
          },
          {
            "description": "An executable, whose controlling `.plist` file in a Launch Agent directory was created within the last 7 days, spawns suspicious child processes (e.g., `sh`, `osascript`), exhibits high-entropy command-line arguments, or generates a high volume of network connections.",
            "data_sources": [
              "macOS ESF process execution events",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Network egress points/gateways",
            "action": [
              "1. Create and maintain a dynamic watchlist of executable paths associated with Launch Agent `.plist` files created in the last 7 days. 2. Monitor macOS ESF process events where the parent process's executable path is on this watchlist. 3. Trigger an alert if any such child process is a shell (`sh`, `bash`, `zsh`), scripting interpreter (`python`, `osascript`), or a known sensitive data access tool.",
              "1. For each process on the 7-day watchlist, ingest its associated `Zeek conn.log` data. 2. Calculate the 24-hour moving average and standard deviation for bytes sent (`orig_bytes`) and connection count per 10-minute interval. 3. Alert if the bytes sent or connection count in any interval exceeds the moving average by more than 3 standard deviations.",
              "1. For each process on the watchlist, create a time series of its outbound data volume per minute. 2. Decompose the time series into trend, seasonal, and residual components using a method like STL. 3. Apply an Isolation Forest model to the residual component. 4. Flag any data point identified as an anomaly by the Isolation Forest, as this represents unpredictable behavior not captured by normal patterns."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting privilege escalation using Launch Agents?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1543.001",
        "name": "Launch Agent",
        "evidence": [
          {
            "description": "A file creation or modification event in `/System/Library/LaunchAgents/` or `/Library/LaunchAgents/` fails with a 'permission denied' error, where the source process is executing with a user ID (UID) other than 0 (root).",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_CREATE events",
              "macOS ESF ES_EVENT_TYPE_NOTIFY_WRITE events",
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide directories on all macOS endpoints",
            "action": [
              "1. Monitor macOS ESF file events (`ES_EVENT_TYPE_NOTIFY_CREATE`, `ES_EVENT_TYPE_NOTIFY_WRITE`) for the target directories `/System/Library/LaunchAgents/` and `/Library/LaunchAgents/`. 2. Filter for events where the outcome is 'failure' or 'permission denied'. 3. Trigger a high-severity alert if the effective user ID (EUID) of the source process is greater than 0.",
              "1. Aggregate failed write attempts to protected Launch Agent directories by user and process name over 1-hour windows. 2. Establish a baseline rate of failures for each user/process combination. 3. Alert if the failure count for any user or process in a given hour exceeds the 95th percentile of its historical baseline, indicating an abnormal burst of failed attempts.",
              "1. Build a labeled dataset of failed write attempts, classifying them as benign (e.g., known app bug) or suspicious. 2. Train a Logistic Regression model using features like process name, parent process, command-line arguments, and code signature status. 3. Deploy the model to score new failed write events in real-time. Escalate events with a high 'malicious' probability score for analyst review."
            ]
          },
          {
            "description": "A process execution event for `launchctl` is observed with `load` or `bootstrap` subcommands, where the target `.plist` file path is in a globally-writable directory (`/tmp/`, `/Users/Shared/`) rather than a standard user or system Launch Agent directory.",
            "data_sources": [
              "macOS ESF process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints",
            "action": [
              "1. Monitor macOS ESF process execution events. 2. Trigger an alert when `process_name == 'launchctl'` and the command line contains the `load` subcommand. 3. The alert should fire only if the `.plist` file path specified in the command line is located in a world-writable directory, such as `/tmp/` or `/Users/Shared/`.",
              "1. For all `launchctl load` commands, log the user and the parent directory of the loaded `.plist` file. 2. Create a frequency profile of parent directories loaded per user over a 30-day period. 3. Alert when a user loads a `.plist` from a directory that is not on their historical profile or is in the bottom 5% of their most frequently used paths.",
              "1. Create a feature set for each `launchctl load` event, including categorical features for the parent process name and the target `.plist`'s parent directory. 2. Train a One-Class SVM on a dataset of known-good `launchctl` executions from a baseline period. 3. Apply the model to new events in real-time. Any event classified as an outlier (falling outside the learned 'normal' boundary) should be flagged for investigation."
            ]
          },
          {
            "description": "A process, not associated with a standard administrative tool (e.g., `sudo`, `sshd`), elevates its privileges to root (EUID=0) and subsequently, within 60 seconds, writes or modifies a `.plist` file in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/`.",
            "data_sources": [
              "macOS ESF ES_EVENT_TYPE_NOTIFY_SETUID events",
              "macOS ESF process execution events",
              "macOS ESF file creation events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All macOS endpoints, Authentication logs",
            "action": [
              "1. Define a stateful detection rule with a 60-second window, keyed by process ID. 2. Step A: Detect a privilege escalation event (e.g., `setuid(0)`) where the process name is not on an allowlist of administrative tools. 3. Step B: Detect a file write or creation event by the same process ID in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/`. 4. Trigger an alert if both steps occur in sequence.",
              "1. For all instances of the correlated sequence (priv-esc followed by `.plist` write), measure the time delta in seconds. 2. Establish a historical distribution of these time deltas for legitimate administrative actions. 3. Flag any new sequence where the time delta falls below the 5th percentile of the legitimate distribution, indicating a scripted and immediate action characteristic of malware.",
              "1. Define a set of process states (e.g., 'user-level execution', 'root execution', 'system file write'). 2. Model legitimate administrative workflows (e.g., running `sudo` to install a package) as sequences of these states. 3. Train a Hidden Markov Model (HMM) to learn the transition probabilities between states in legitimate sequences. 4. Score new event sequences against the trained HMM. A sequence with a very low probability score indicates a deviation from normal administrative patterns and should be alerted."
            ]
          },
          {
            "description": "A process that creates or modifies a `.plist` file in `/Library/LaunchAgents/` or `/System/Library/LaunchAgents/` has an invalid, missing, or ad-hoc code signature. Alternatively, the signature's Team ID or Subject Name is not on an organizational allowlist of approved software vendors.",
            "data_sources": [
              "macOS ESF file creation events",
              "macOS ESF process execution events",
              "macOS code signing information logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System-wide directories on all macOS endpoints, Certificate and code signing infrastructure, Software/asset inventory database",
            "action": [
              "1. Monitor file write/creation events in `/Library/LaunchAgents/` and `/System/Library/LaunchAgents/`. 2. For each event, enrich the source process with its code signing information. 3. Trigger an alert if the code signature status is 'invalid', 'unsigned', or 'ad-hoc'. 4. Also, trigger an alert if the signature's Team ID is not present in an enterprise allowlist of trusted developers.",
              "1. Over a 30-day rolling window, create a list of all code signing Team IDs associated with processes that write to protected Launch Agent directories. 2. Calculate the frequency of each Team ID. 3. Alert any time a process with a Team ID never before seen in this context writes to one of these directories. 4. Additionally, alert if the Team ID is a statistical rarity, accounting for less than 0.1% of the total writes.",
              "1. Create a labeled training dataset of processes that write to protected directories, with features including `is_signed`, `is_valid`, `is_apple_signed`, `team_id`, and `process_name`. 2. Train a Decision Tree or Random Forest classifier to predict a 'malicious_write' label. 3. Apply the model to new write events. Events classified as malicious, especially those involving unsigned or ad-hoc signed processes, should be prioritized for analyst review."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]