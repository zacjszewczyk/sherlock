[
  {
    "information_requirement": "Is the adversary developing or using self-signed or suspicious code signing certificates for execution or persistence? (PIR)",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1587.002",
        "name": "Code Signing Certificates",
        "evidence": [
          {
            "description": "A certificate thumbprint from an executed binary or a TLS session matches a known-malicious thumbprint from a threat intelligence feed.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek ssl.log",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM/Data Lake aggregating endpoint and network telemetry, Network sensors at internet egress points, All endpoints with process and signature monitoring.",
            "action": [
              "Create a detection rule that cross-references certificate thumbprints from executed processes (Sysmon Event ID 1 with signature data or Zeek pe.log) and TLS sessions (Zeek ssl.log) against an ingested list of known-malicious certificate thumbprints from CTI feeds. Trigger a high-severity alert on any match.",
              "For any CTI-matched certificate, query historical logs (e.g., 90 days) to calculate the prevalence of its issuer ('Issuer' field). If the issuer's prevalence falls within the lowest 1st percentile of all observed issuers, escalate the alert priority, as this suggests a novel or highly targeted threat.",
              "Implement a time series anomaly detection model (e.g., ARIMA) on the daily count of new CTI certificate matches. Generate a high-priority alert if the observed count exceeds the model's forecasted upper confidence interval (e.g., > 99th percentile), signaling a potential widespread campaign."
            ]
          },
          {
            "description": "The execution of a certificate management utility (e.g., certutil.exe, PowerShell) with command-line arguments indicating the addition of a new certificate to a trusted root or publisher store.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows endpoints and servers, especially Domain Controllers, Public Key Infrastructure (PKI) servers, and developer workstations.",
            "action": [
              "Create a detection rule that monitors for process command lines (Sysmon Event ID 1, Windows Event ID 4688) or PowerShell script blocks (Windows Event ID 4104) containing patterns like 'certutil -addstore Root', 'certutil -addstore TrustedPublisher', or 'Import-Certificate -FilePath .* -CertStoreLocation Cert:\\\\LocalMachine\\\\Root'. Generate an alert on any match.",
              "Establish a baseline of hosts and user accounts that legitimately perform certificate store modifications. For each new modification event, calculate the historical frequency of such activity by that specific host and user. Flag events performed by hosts or users that are not in the top 5% of actors performing this activity (i.e., those for whom this is a rare action).",
              "Train a classification model (e.g., Logistic Regression) using features extracted from command lines, such as argument patterns, keywords ('-addstore', 'Root'), command length, and user context (e.g., IT admin vs. standard user). The model should classify certificate management commands as either 'benign administrative activity' or 'suspicious', triggering an alert for the latter."
            ]
          },
          {
            "description": "An executed binary is signed by a certificate with metadata (e.g., Subject, Issuer, validity period) that matches patterns commonly associated with malware, such as highly random subject names or unusually long validity periods.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints and servers where binaries are executed; Network chokepoints where files are transferred (e.g., web proxies, email gateways); Centralized file repositories and shares.",
            "action": [
              "For every executed binary with a digital signature, apply a ruleset (e.g., YARA) against its signing certificate metadata. The rules should detect known-bad issuer/subject strings, suspicious validity periods (e.g., > 20 years), and weak cryptographic algorithms (e.g., MD5).",
              "For each newly observed signing certificate, calculate the Shannon entropy of its 'Subject' and 'Issuer' fields. Flag certificates for review if their entropy scores fall in the top 5th percentile (indicating high randomness, potential DGA-like names) or bottom 5th percentile (indicating generic or empty fields), particularly if the certificate is also self-signed.",
              "Develop and deploy an anomaly detection model (e.g., Isolation Forest or a variational autoencoder) trained on a feature set from certificate metadata. Features should include validity period duration, public key length, signature algorithm type, and subject/issuer entropy. Certificates with high anomaly scores should be flagged as suspicious."
            ]
          },
          {
            "description": "A binary is executed that is signed by a certificate that is either self-signed (Issuer and Subject fields are identical) or has an issuer that has never been seen before in the environment.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek pe.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All managed endpoints and servers; Network egress points monitoring file transfers; Software distribution points (e.g., SCCM, Intune).",
            "action": [
              "Alert when a process is executed from a binary signed by a certificate where the Issuer field equals the Subject field AND the Subject Common Name contains generic keywords like 'Test', 'Developer', 'Example', or is NULL.",
              "Maintain a historical baseline of all certificate issuers and their first/last seen timestamps. For each executed binary, check if its certificate issuer is new to the environment. If the issuer is new, or if its overall prevalence is in the bottom 5th percentile of all known issuers, increase the event's risk score.",
              "Train a one-class SVM model on feature vectors derived from certificates of known-good, commonly used software within the enterprise. Features should include issuer, subject details, validity period, and key usage. Any new certificate that the model classifies as an outlier is flagged for immediate investigation."
            ]
          },
          {
            "description": "A statistically significant increase in the number of unique, self-signed certificates observed on a single host or across the enterprise within a short time frame.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek pe.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Enterprise-wide SIEM or data lake aggregating host and network logs.",
            "action": [
              "Create a rule to alert if a single host executes binaries signed by or initiates TLS sessions using more than 5 unique, previously unseen, self-signed certificates within a 1-hour window.",
              "Using a rolling 24-hour window, count the number of newly observed, unique self-signed certificate thumbprints across the enterprise. Calculate the mean and standard deviation for this count over a 30-day baseline period. Trigger an alert if the current count exceeds the mean by more than three standard deviations.",
              "Apply a time series anomaly detection algorithm (e.g., Seasonal-Hybrid ESD) to the hourly count of new self-signed certificates observed enterprise-wide. An alert should be generated when the model detects a statistically significant anomaly (a spike) that cannot be explained by normal seasonality or trends."
            ]
          },
          {
            "description": "The same certificate thumbprint is used to both sign a locally executed binary and as the server certificate for an outbound TLS session from the same host to an external destination.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Zeek ssl.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SIEM or data lake capable of correlating host-based process execution data with network session data.",
            "action": [
              "Create a correlation rule that joins process execution events (Sysmon Event ID 1) with network TLS session logs (Zeek ssl.log) on the host identifier within a 5-minute window. Trigger an alert if a binary's signing certificate thumbprint matches the server certificate thumbprint, especially when the destination IP (from Zeek conn.log) is external and has a low reputation score.",
              "Build a statistical baseline of common `(process_name, signing_certificate_issuer, destination_IP_ASN)` tuples observed across the environment. Any newly observed correlation that results in a tuple with a frequency in the lowest 1st percentile should be flagged as a high-risk anomaly.",
              "Model host and network events in a graph database where nodes represent processes, certificates, and destination IPs. Use a community detection algorithm (e.g., Louvain Modularity) to find outliers. A small, newly formed cluster connecting a process, a self-signed certificate, and a rare external IP is a strong indicator of malicious C2 activity."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]