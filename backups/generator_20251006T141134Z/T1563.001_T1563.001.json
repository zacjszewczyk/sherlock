[
  {
    "information_requirement": "Has the adversary moved laterally using SSH Hijacking? (PIR)",
    "tactic_id": "TA0008",
    "tactic_name": "Lateral Movement",
    "indicators": [
      {
        "technique_id": "T1563.001",
        "name": "SSH Hijacking",
        "evidence": [
          {
            "description": "An SSH connection (TCP port 22) occurs involving a host (source or destination) that is listed on an active threat intelligence watchlist or an internal list of hosts with high-severity alerts.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network security monitoring sensors (e.g., Zeek sensors at network egress/ingress points), Threat Intelligence platforms, SIEM alert correlation engine.",
            "action": [
              "Query all SSH connection logs (Zeek conn.log where `id.resp_p` == 22) in real-time. Generate a high-priority alert if either the source IP (`id.orig_h`) or destination IP (`id.resp_h`) matches an IP address in a threat intelligence feed or an internal watchlist of compromised systems.",
              "For each host on the network, maintain a 'risk score' based on the count and severity of security alerts over a 7-day rolling window. For every new SSH connection, calculate a session risk score by summing the scores of the source and destination hosts. Generate an alert for any session whose score exceeds the 99th percentile of all SSH session scores observed in the past 30 days.",
              "Train a supervised classification model (e.g., Random Forest) using features from historical alerts (type, frequency, source, severity) to predict a 'compromised' probability for each host. For each new SSH connection from Zeek conn.log, apply the model to the source and destination hosts. Flag the session if the predicted probability for either host surpasses a tuned threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A process creation event is logged for an SSH client process (e.g., `ssh` on Linux, `ssh.exe` on Windows) with command-line arguments indicating the use or creation of a control socket for connection multiplexing (e.g., -M, -S, ControlMaster, ControlPath).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoint detection and response (EDR) logs from critical servers (e.g., application servers, database servers), developer workstations, and administrative jump boxes/bastion hosts.",
            "action": [
              "Create a detection rule that triggers on process creation events (Windows Event ID 4688, Sysmon Event ID 1) where the process name is 'ssh' or 'ssh.exe' and the command line contains any of the strings: '-S', '-M', 'ControlMaster', or 'ControlPath'.",
              "For each user, establish a baseline of their historical usage of SSH multiplexing arguments over the last 90 days. Calculate the probability of use for each user. Generate an alert if a user executes SSH with multiplexing arguments and their historical probability is below a defined threshold (e.g., < 0.01), indicating this is highly unusual behavior for them.",
              "Train a character-level NLP model (e.g., a Transformer or LSTM) on a large dataset of legitimate SSH command lines from your environment. Use this model to calculate a perplexity score for each new SSH command. A command line with an anomalously high perplexity score, especially one containing multiplexing arguments, indicates a potentially malicious or attacker-crafted command."
            ]
          },
          {
            "description": "A single host establishes an unusually high number of new, distinct outbound SSH connections in a short timeframe (fan-out behavior), or a user establishes an SSH connection to a destination host statistically rare for that specific user or their role.",
            "data_sources": [
              "Zeek conn.log",
              "Windows Event ID 4624"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "East-west traffic monitoring points (e.g., core switches, virtual switch flow logs), authentication servers (for user-to-IP mapping), network flow collectors.",
            "action": [
              "Create a rule that triggers if a single source IP (`id.orig_h`) initiates more than 10 new SSH connections to distinct destination IPs (`id.resp_h`) within a 15-minute window. Correlate the source IP with authentication logs (Event ID 4624) to attribute the activity to a specific user account.",
              "For each user account, build a historical baseline of destination hosts they connect to via SSH. For each new SSH connection, calculate the frequency of that source-user-destination triplet. Alert when a user initiates an SSH connection to a host that is in the bottom 5th percentile of their connection frequencies.",
              "Apply an unsupervised clustering algorithm (e.g., DBSCAN) to SSH connection data, using features like source IP, destination IP, user, and time of day. Normal activity will form dense clusters. Flag any new SSH connection that is classified as a 'noise' point (i.e., does not belong to any existing cluster) as a potential anomaly representing a deviation from established behavior patterns."
            ]
          },
          {
            "description": "On an SSH destination host, a process spawned by the SSH daemon (`sshd` or its equivalent) executes commands or binaries strongly associated with reconnaissance (`ipconfig`, `whoami`, `net group`), credential access (`mimikatz.exe`), or subsequent lateral movement (`psexec.exe`).",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs on critical servers and workstations, especially those designated as SSH targets (e.g., Linux servers, administrative workstations, cloud compute instances).",
            "action": [
              "Monitor for process creation events (Sysmon Event ID 1) where the parent process is the SSH daemon (`sshd`, `sshd.exe`). Create a rule to alert if the child process image or command line matches a watchlist of suspicious reconnaissance, credential access, or lateral movement tools and commands.",
              "For each interactive SSH session, calculate the Shannon entropy of the sequence of command-line arguments executed by the user. Establish a baseline for normal command entropy within sessions. A session with a command entropy score that exceeds 3 standard deviations above the user's or host's baseline indicates potentially exploratory or malicious activity.",
              "Use a pre-trained NLP classification model (e.g., fine-tuned BERT) on the command lines executed within an SSH session to classify each command's intent (e.g., benign, discovery, execution, exfiltration). Employ a time-series model to analyze the sequence of intents. A sequence that transitions from 'benign' to 'discovery' to 'execution' is a strong indicator of a compromised session."
            ]
          },
          {
            "description": "An SSH connection is observed that violates an established access control policy or a baselined behavioral role. Examples include a workstation initiating an SSH connection to another workstation, or a host that historically only receives SSH connections (e.g., a web server) initiating an outbound SSH connection.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "East-west traffic monitoring points (core switches), network TAPs/SPAN ports, data center/cloud environment egress points, and VPC flow logs.",
            "action": [
              "Define asset groups (e.g., 'Workstations', 'Web Servers', 'Database Servers', 'Domain Controllers') and create a strict rule matrix defining allowed SSH pathways (e.g., 'Admin Workstation' -> 'Web Server' is allowed; 'Web Server' -> 'Database Server' is denied). Alert on any SSH connection from Zeek conn.log that violates this policy.",
              "For every host, profile its SSH connection directionality by calculating the ratio of inbound to outbound SSH connections over a 30-day period. Classify each host as a 'Client' (ratio < 0.1), 'Server' (ratio > 10), or 'Peer' (ratio ~ 1). Alert if a host's behavior changes category, such as a long-term 'Server' initiating its first outbound SSH connection.",
              "Model the internal network as a directed graph where hosts are nodes and SSH connections are edges. Use a community detection algorithm (e.g., Louvain Modularity) to identify clusters of hosts that normally interact (e.g., 'Finance Servers', 'Developer Workstations'). An SSH connection that bridges two historically separate communities is a high-confidence anomaly indicative of lateral movement."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]