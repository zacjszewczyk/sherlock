[
  {
    "information_requirement": "Is the adversary employing defense evasion techniques involving hidden file systems? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.005",
        "name": "Hidden File System",
        "evidence": [
          {
            "description": "A file transfer containing an executable or archive where the file hash, name, or embedded metadata (e.g., product name, internal name) matches a known utility for creating hidden file systems (e.g., VeraCrypt, TrueCrypt, E4sh, BestCrypt).",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateways and network egress points",
            "action": [
              "Symbolic: Create and maintain a watchlist of file hashes, names, and embedded metadata for known hidden file system creation utilities. Query network file transfer logs (Zeek files.log) to alert when a downloaded file matches an entry on the watchlist. Correlate alerts with connection logs (Zeek conn.log) to identify the source and destination of the transfer.",
              "Statistical: For all executable files (.exe, .dll) observed in network traffic (Zeek files.log), calculate the Shannon entropy of the filename. Establish a rolling 30-day baseline of filename entropy across the enterprise. Generate an alert for any executable filename whose entropy exceeds the 95th percentile of the baseline and is not on an allow-list of known high-entropy software names (e.g., installers).",
              "Machine Learning: Train a classification model (e.g., Random Forest, Gradient Boosting) on labeled network log data (Zeek conn.log, files.log, http.log) representing malicious and benign file transfers. Engineer features such as source/destination IP reputation, ASN rarity, destination port, file MIME type, file size, filename entropy, presence of a User-Agent, and connection duration. Deploy the model to score new file transfers in near real-time and alert on any transfer classified as high-risk or malicious."
            ]
          },
          {
            "description": "A process creation event for a disk management utility (e.g., diskpart.exe, mountvol.exe, fsutil.exe) with command-line arguments used to delete a volume mount point, create a new file of a specific size, or execute a script to manipulate partitions.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, File Servers, Critical application servers, and Administrator workstations",
            "action": [
              "Symbolic: Create a detection rule that triggers on process creation events (Windows Event ID 4688) for `mountvol.exe` with the `/d` switch, `diskpart.exe` with a command script containing `create partition` or `delete volume`, or `fsutil.exe file createnew`. Tune the rule to exclude executions by known administrative scripts or software installers by whitelisting parent process names and command-line patterns.",
              "Statistical: For each host, profile the parent processes and command-line arguments for `diskpart.exe`, `mountvol.exe`, and `fsutil.exe` using process creation logs (Windows Event ID 4688). Calculate the least frequency of occurrence for each parent-process/command-line pair across the enterprise. Alert when a combination is observed that is rare (e.g., seen on fewer than 5 hosts or <1% of the fleet) and the parent process is not a standard administrative tool (e.g., `mmc.exe`, `explorer.exe`).",
              "Machine Learning: Train a sequence analysis model (e.g., LSTM, Transformer) on sequences of command-line executions within a parent process session (e.g., `cmd.exe`, `powershell.exe`). The model should learn normal sequences of administrative commands. Flag any session containing an anomalous sequence of commands, particularly those involving disk reconnaissance (`wmic partition get`, `fsutil fsinfo drives`) followed immediately by partition modification (`diskpart`, `mountvol`)."
            ]
          },
          {
            "description": "A service creation event (Windows Event ID 7045) for a kernel driver (`ServiceType` 0x1) where the driver image is unsigned, has a randomized name, or is located outside of C:\\Windows\\System32\\drivers. Alternatively, a Code Integrity event (Event ID 3033) indicating a kernel driver load was blocked due to an invalid signature.",
            "data_sources": [
              "Windows Event ID 7045",
              "Microsoft-Windows-CodeIntegrity/Operational Event ID 3033",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers",
            "action": [
              "Symbolic: Create a detection rule that alerts on new service creation events (Windows Event ID 7045) where `ServiceType` is a kernel driver (`0x1`) and the `ImagePath` is not in the `\\System32\\drivers\\` directory. For any such alert, enrich the event by checking the file's digital signature. Additionally, create a high-severity alert for any Microsoft-Windows-CodeIntegrity/Operational Event ID 3033, indicating an explicit block of an unsigned driver.",
              "Statistical: Aggregate all kernel driver service creation events (Windows Event ID 7045) over a 30-day period. For each unique `ImagePath`, calculate its prevalence (i.e., the percentage of hosts it's installed on). Alert on any new kernel driver installation where the `ImagePath` has a prevalence of less than 1% and is not part of a known, targeted software deployment. Additionally, calculate the entropy of the service name and alert on names in the top 98th percentile.",
              "Machine Learning: Train an anomaly detection model (e.g., One-Class SVM or Isolation Forest) on features extracted from legitimate driver installation events (Windows Event ID 7045). Features should include: file path depth, presence of `System32` in path (binary feature), entropy of service name, entropy of file name, and whether the service name contains common substrings like 'sys', 'drv', 'pci'. Use the trained model to score all new driver installations and alert on those identified as anomalous."
            ]
          },
          {
            "description": "An object access event (Windows Event ID 4656 or 4663) indicating a process requested read or write access (`Accesses` includes `ReadData` or `WriteData`) to a raw physical disk or volume object (e.g., `\\Device\\HarddiskVolume1`, `\\.\\PhysicalDrive0`), where the process is not a known, authorized system utility (e.g., chkdsk.exe, backup agents).",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4656",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "SACL-monitored raw disk objects (\\.\\PhysicalDrive*) on all Windows endpoints and servers, especially database servers, file servers, and domain controllers.",
            "action": [
              "Symbolic: Configure SACLs on raw disk objects (e.g., `\\.\\PhysicalDrive*`) to log access attempts (generates Windows Event ID 4656/4663). Create a detection rule that alerts when the `Process Name` in the event is not on an allow-list of approved disk utilities (e.g., `svchost.exe`, `defrag.exe`, backup agents) and the requested `Accesses` include `WriteData` or `ReadData`.",
              "Statistical: Establish a 30-day baseline of all processes that access raw disk objects across the enterprise, based on Windows Event ID 4656/4663. For each process name, calculate its frequency (prevalence). When a new access event occurs, if the process's prevalence is below a threshold (e.g., seen on < 2% of systems), flag it for review. Prioritize alerts where the parent process is also rare (e.g., `cmd.exe`, `powershell.exe`).",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) to group raw disk access events based on features like process name, parent process name, access mask, and time of day. Analyze clusters to identify legitimate activity (e.g., a large cluster of backup software running at night). Flag small, sparse clusters or singleton events as anomalies for investigation."
            ]
          },
          {
            "description": "A registry modification event targeting keys that control file system or boot-time drivers, or a raw disk write event to sector 0 of a physical drive, initiated by a process other than a trusted OS installer or patch management tool.",
            "data_sources": [
              "Windows Event ID 4657",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Boot sectors of physical disks and Windows Registry hives on all Windows assets",
            "action": [
              "Symbolic: Create high-priority alerting rules for any modification event (Windows Event ID 4657) to critical registry keys like `HKLM\\SYSTEM\\CurrentControlSet\\Services\\Ntfs` or `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute`. Alert if the responsible process is not `TrustedInstaller.exe` or a similar approved system process.",
              "Statistical: Track the frequency of modification events (Windows Event ID 4657) to the `HKLM\\SYSTEM\\CurrentControlSet\\Services` key and its subkeys. Establish a baseline for the daily count of these modifications per host. Alert when a host's daily modification count exceeds a statistical threshold (e.g., 3 standard deviations above its own mean, or above the 99th percentile for all hosts), especially outside of established patch windows.",
              "Machine Learning: Implement a time-series anomaly detection model (e.g., SARIMA, Prophet) on the aggregate count of modification events (Windows Event ID 4657) for keys under `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\` and `HKLM\\SYSTEM\\CurrentControlSet\\Services\\`. The model should account for weekly and monthly seasonality (e.g., Patch Tuesday). Alert on any spike in activity that the model flags as a significant anomaly, indicating potential bootkit or malicious driver installation."
            ]
          },
          {
            "description": "A periodic check of a physical disk reveals that the sum of all partition sizes is less than the total disk size, creating an 'unallocated' gap that is not accounted for by standard over-provisioning. This discrepancy is detected by comparing the output of commands like `wmic diskdrive get size` and `wmic partition get size`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Custom Script Output"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Physical disks on all Windows endpoints and servers",
            "action": [
              "Symbolic: Schedule a recurring script on endpoints to run `wmic diskdrive get size` and `wmic partition get Name, Size, StartingOffset` and log the output. Create a rule to parse these logs and calculate `UnallocatedSpace = TotalDiskSize - SUM(PartitionSizes)`. Alert if this value is greater than a nominal threshold (e.g., 1GB) and not attributable to known over-provisioning.",
              "Statistical: For each host, ingest the periodic `UnallocatedSpace` calculation into a time-series database. Apply a change point detection algorithm (e.g., CUSUM, Bayesian Change Point) to this series. Alert when a statistically significant, positive change in the `UnallocatedSpace` value is detected, indicating that space was recently carved out from the disk.",
              "Machine Learning: On a weekly basis, collect disk layout profiles from all hosts (features: total disk size, number of partitions, size of each partition, percentage of unallocated space). Use a clustering algorithm (e.g., K-Means) to group hosts into standard build profiles (e.g., 'Standard Laptop', 'Dev VM', 'DB Server'). If a host migrates from one cluster to another unexpectedly (e.g., its unallocated space changes, pushing it into a different group), flag it for investigation as a potential unauthorized disk modification."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]