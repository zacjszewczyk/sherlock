[
  {
    "information_requirement": "Is an adversary performing system language discovery to tailor their attack or evade detection? (TA0007 - Discovery)",
    "tactic_id": "TA0007",
    "tactic_name": "Discovery",
    "indicators": [
      {
        "technique_id": "T1614.001",
        "name": "System Language Discovery",
        "evidence": [
          {
            "description": "A process creation event is recorded with a command line containing a known system language discovery command, such as `systeminfo | findstr /B /C:\"System Locale\"` or `wmic os get locale`.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Executive Workstations, Public-facing Windows Servers",
            "action": [
              "Symbolic Logic: Create a detection rule to monitor process creation events (Windows Event ID 4688, Sysmon Event ID 1) for exact command-line matches to a curated list of high-confidence language discovery commands, including `systeminfo | findstr /B /C:\"System Locale\"`, `wmic os get locale`, and specific `rundll32.exe` calls targeting language APIs. Alert on any match.",
              "Statistical Method: For processes matching broader discovery patterns (e.g., execution of `systeminfo`), analyze the frequency of the parent process across the environment. Establish a baseline of common parent processes (e.g., `explorer.exe`, `cmd.exe`). Alert when the parent process is a low-frequency outlier (e.g., occurring in less than the 1st percentile of parent processes for this action), such as `winword.exe`, `mshta.exe`, or a web server process.",
              "Machine Learning: Develop a supervised classification model (e.g., Random Forest) trained on labeled command-line execution data. Engineer features including process name, parent process name, command-line length, presence of special characters (|, <, >), and n-grams from the command string. Deploy the model to score new process creation events and alert when the probability of being malicious discovery activity exceeds a predefined threshold (e.g., > 0.9)."
            ]
          },
          {
            "description": "A PowerShell script block log contains cmdlets or .NET calls used for language discovery, such as `Get-Culture` or `[System.Globalization.CultureInfo]`.",
            "data_sources": [
              "Windows Event ID 4104",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints and Servers with PowerShell v5+ script block logging enabled",
            "action": [
              "Symbolic Logic: Monitor PowerShell script block logs (Windows Event ID 4104) for the presence of keywords like `Get-Culture`, `Get-UICulture`, `[System.Globalization.CultureInfo]`, `Get-WinSystemLocale`, and `Get-WinUserLanguage`. Trigger an alert on any match, prioritizing those originating from obfuscated or non-interactive scripts.",
              "Statistical Method: For each script block containing a language discovery keyword, calculate the Shannon entropy of the script block content. Establish a baseline entropy score for legitimate administrative scripts in your environment. Alert when a script's entropy score exceeds a high percentile (e.g., 95th percentile), which is a strong indicator of obfuscation used to hide malicious code.",
              "Machine Learning: Use a time-series analysis model (e.g., ARIMA) to monitor the rate of PowerShell-based language discovery events per host. Establish a baseline forecast for this activity on a per-host or per-subnet basis. Generate an alert when the observed count of these events significantly deviates from the forecasted range, indicating a potential burst of automated reconnaissance activity."
            ]
          },
          {
            "description": "A process performs a read operation on a Windows Registry key storing language or locale information, such as `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language`.",
            "data_sources": [
              "Windows Event ID 4663",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Registry hives on all Windows Endpoints and Servers, particularly Domain Controllers and critical servers",
            "action": [
              "Symbolic Logic: Deploy a System Access Control List (SACL) or Sysmon configuration to monitor for read access (Windows Event ID 4663 or Sysmon Event ID 13) to the keys `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language`, `HKCU\\Control Panel\\International`, and `HKLM\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts`. Create an allowlist of known-good processes (e.g., `explorer.exe`, `ctfmon.exe`, `LogonUI.exe`) and alert on any access from a process not on that list.",
              "Statistical Method: For all processes accessing the monitored registry keys, perform a stack counting analysis on the process image path across the enterprise. Identify processes that are rare (e.g., appearing on < 1% of endpoints or in less than the 5th percentile by count). Investigate any low-prevalence process accessing these keys, as it may indicate a custom malware implant or living-off-the-land binary.",
              "Machine Learning: Train an anomaly detection model (e.g., Isolation Forest) on features of processes that access these registry keys, including process name, path, parent process, and user context. The model will learn the profile of 'normal' access patterns. Deploy the model to score new access events in real-time and alert when an event is flagged as an anomaly."
            ]
          },
          {
            "description": "A process, created from a suspicious source (e.g., parent is an Office application, path is a temporary directory), executes a system language discovery action within 60 seconds of its creation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104",
              "Sysmon Event ID 1",
              "Sysmon Event ID 13",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, particularly those of high-value targets; Public-facing web servers; VPN Concentrators",
            "action": [
              "Symbolic Logic: Create a correlation rule that triggers when a process creation event (Sysmon Event ID 1) from an untrusted parent (e.g., `winword.exe`, `excel.exe`, `outlook.exe`, `wscript.exe`) is followed within 60 seconds by a language discovery action (e.g., specific command line, registry read) from the same process. Alert on this sequence.",
              "Statistical Method: Develop a risk scoring system. Assign points for suspicious attributes in process events: +10 for an unsigned binary, +15 for executing from a user-writable path (e.g., `AppData`, `Temp`), +20 for a parent process like a browser or Office app. Assign +30 if the process subsequently performs a language discovery action. Establish a threshold (e.g., > 40 points) by analyzing the distribution of scores for past true and false positives. Alert when a process's cumulative score exceeds the threshold.",
              "Machine Learning: Implement a graph-based analysis model. Represent processes, files, registry keys, and network connections (from Zeek conn.log) as nodes and their interactions as edges. Use graph algorithms to detect anomalous paths, such as a process spawned from an email attachment that then performs language discovery and subsequently makes an external network connection to a new or rare domain. Flag these subgraphs as high-risk."
            ]
          },
          {
            "description": "System language discovery is observed as part of a larger sequence of reconnaissance activities (e.g., `whoami`, `ipconfig`, `net user`) performed by the same process or in the same user session within a short time window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 13",
              "Sysmon Event ID 22"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Entire enterprise network, with a focus on lateral movement paths between workstations and servers",
            "action": [
              "Symbolic Logic: Define a set of TTPs for host reconnaissance (e.g., `whoami`, `ipconfig /all`, `net user`, `tasklist`, `systeminfo`, T1614.001). Create a correlation rule that looks for 3 or more distinct reconnaissance TTPs executed by the same process (via ProcessGUID) or user logon session (via Logon ID) within a 10-minute window. Alert on this behavior.",
              "Statistical Method: Group all commands executed by a user session (e.g., by Logon ID within a 1-hour window). For each session, calculate the ratio of discovery/reconnaissance commands to total commands executed. Establish a baseline for this ratio for different user roles (e.g., administrators vs. standard users). Alert when a session's ratio exceeds the 99th percentile for its role, indicating a session disproportionately focused on reconnaissance.",
              "Machine Learning: Use a sequence analysis model (e.g., Hidden Markov Model) trained on known attack sequences. Feed streams of security events (process creation, registry access, network connections) per host into the model. The model learns the probability of transitioning from one state (e.g., initial execution) to another (e.g., language discovery) and then to a third (e.g., network enumeration). Alert when the model identifies a sequence of events with a high probability of matching a malicious reconnaissance pattern."
            ]
          },
          {
            "description": "A process creation event is recorded on a Linux or macOS host with a command line containing `locale` or other environment queries related to system language.",
            "data_sources": [
              "Sysmon for Linux Event ID 1",
              "Linux Auditd logs",
              "macOS Endpoint Security Framework events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Linux/macOS servers (web servers, database servers), Developer workstations",
            "action": [
              "Symbolic Logic: Monitor process execution logs for the command `locale` or scripts accessing the `$LANG` or `$LC_ALL` environment variables. Alert when this command is executed by a web service account (e.g., `www-data`, `apache`) or in a non-interactive shell, and the parent process is not a standard shell or administrative tool.",
              "Statistical Method: Analyze the parent-child process relationships for all executions of `locale`. Establish a baseline of normal parent processes (e.g., `bash`, `zsh`, `sshd`). Alert when `locale` is executed by an anomalous parent process (e.g., a web server binary, a running daemon, a process spawned from a downloaded script) that falls below a 1% prevalence threshold enterprise-wide.",
              "Machine Learning: Use a clustering algorithm (e.g., DBSCAN) on command-line execution data from Linux/macOS hosts. Featureize commands using TF-IDF vectorization on the command string and its arguments. The model will group normal administrative and user behavior into dense clusters. Flag any command containing reconnaissance-related strings like 'locale' that is classified as a noise point or outlier by the model."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]