[
  {
    "information_requirement": "Is an adversary actively gathering information about our organization's host and device firmware?",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1592.003",
        "name": "Firmware",
        "evidence": [
          {
            "description": "A record of an established or attempted inbound connection exists in network logs where the source IP address is present on a current threat intelligence list of known internet scanners or malicious reconnaissance actors.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway firewalls, DMZ network sensors, public-facing application servers, cloud VPC internet gateways, VPN concentrators.",
            "action": [
              "Query Zeek conn.log for all inbound connections. Join the `id.orig_h` field with a threat intelligence database of known scanning IPs. Generate a high-severity alert for any successful connection (where `conn_state` is not 'S0', 'REJ', or 'RSTO') or a medium-severity alert for any connection attempt.",
              "For each source IP identified by the symbolic action, calculate the total number of connections and the number of unique destination ports (`id.resp_p`) targeted within the last 24 hours. Compare these counts to the historical baseline for that IP or to the 95th percentile of all external IPs. An IP with anomalously high connection or port counts is a strong candidate for a dedicated scanner.",
              "Train a binary classification model (e.g., Logistic Regression, Random Forest) using labeled data from threat intelligence feeds. Features should include `protocol`, `service`, `duration`, `orig_bytes`, `resp_bytes`, `conn_state`, and boolean flags for well-known ports. Use the trained model to score and classify new inbound IPs in near-real-time to identify potential scanners not yet on static blocklists."
            ]
          },
          {
            "description": "An HTTP/S request recorded in web server or network logs contains a User-Agent string, URI path, or header combination indicative of automated reconnaissance tools attempting to fingerprint firmware.",
            "data_sources": [
              "Zeek http.log",
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Public-facing web servers, API gateways, management interfaces for network appliances, load balancers, Web Application Firewalls (WAFs).",
            "action": [
              "Using a regex list of known scanner User-Agents (e.g., 'Nmap', 'masscan', 'ZGrab', 'Nuclei') and firmware-related URI patterns (e.g., '/version', '/firmware', '/.git/', '/.env'), query Zeek http.log. Generate an alert for any match from an external source IP.",
              "For each external source IP (`id.orig_h`) over a 1-hour window, calculate the Shannon entropy of the `user_agent` field from Zeek http.log. A low entropy score (approaching 0.0) suggests a single, repeated User-Agent. Compare the entropy score to a baseline and flag IPs with scores in the bottom 5th percentile as suspicious.",
              "Apply a density-based clustering algorithm (e.g., DBSCAN) to vectorized HTTP request features from Zeek http.log. Features should include URI length, number of special characters in URI, User-Agent string, and header count. Isolate and investigate small, dense clusters that do not align with the large cluster of normal user traffic, as these often represent automated tooling."
            ]
          },
          {
            "description": "Network flow data shows a single external source IP connecting to an abnormally large number of unique internal destination hosts (horizontal scan) or unique destination ports on a single host (vertical scan) within a short time frame.",
            "data_sources": [
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter firewalls, network tap at the internet edge, cloud VPC flow logs, cloud security group flow logs.",
            "action": [
              "Create a real-time rule that triggers an alert when a single `id.orig_h` is seen in Zeek conn.log connecting to >50 unique `id.resp_h` (horizontal scan) or >100 unique `id.resp_p` on a single `id.resp_h` (vertical scan) within a 5-minute sliding window.",
              "On an hourly basis, for each external source IP in Zeek conn.log, compute the count of distinct destination hosts and distinct destination ports. Compare these counts against a distribution established over the last 30 days. Flag any source IP where either count exceeds the 99.5th percentile as a high-confidence scanner.",
              "For each source IP, create a time series of the inter-arrival times between its connection requests from Zeek conn.log. Train a time series anomaly detection model (e.g., ARIMA) on data from known benign IPs to learn normal traffic patterns. Apply this model to flag source IPs whose connection timing is rhythmically consistent (machine-like), indicating potential 'low-and-slow' scanning."
            ]
          },
          {
            "description": "An external source IP is observed making connection attempts to management-related ports (e.g., IPMI, SNMP, RDP) or sending protocol-specific queries designed to enumerate system or firmware information.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek weird.log",
              "Zeek snmp.log",
              "Zeek http.log",
              "Zeek rdp.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network segments hosting IoT/OT devices, data center management networks, network appliance management interfaces, blade server chassis management interfaces.",
            "action": [
              "Query Zeek conn.log for external connections to a watchlist of management ports (e.g., 161/SNMP, 623/IPMI, 3389/RDP, 5900/VNC, 5985/WinRM, 5986/WinRM-SSL). Correlate with Zeek snmp.log for `get-request` commands or Zeek rdp.log for connection attempts with non-standard cookies. Alert on any confirmed connection.",
              "For each external source IP, calculate the ratio of connection attempts to management-watchlist ports versus standard web ports (80, 443). Establish a baseline for this ratio across all traffic. Flag IPs with a ratio in the top 2nd percentile as engaging in targeted probing rather than general web traffic.",
              "Use events from Zeek weird.log as features for an unsupervised anomaly detection model (e.g., Isolation Forest). Train the model on a baseline of 'normal' weird events. Apply the model to new events to score their anomaly level. High-scoring events, especially those related to malformed packets or unexpected protocol behavior (`malformed_packet`, `bad_TCP_checksum`), should be investigated as potential fingerprinting attempts."
            ]
          },
          {
            "description": "Command line or PowerShell script execution logs on a host show the use of specific commands or WMI queries to retrieve local or remote system firmware information, indicating post-compromise discovery.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, administrator workstations, virtualization hosts, critical application servers, endpoint devices.",
            "action": [
              "Query Event ID 4688 (Process Creation) and 4104 (PowerShell Script Block) logs for command lines or scripts containing keywords such as `wmic bios`, `Get-WmiObject win32_bios`, `systeminfo`, `dmidecode`, or `msinfo32.exe`. Generate an alert for any match, especially if originated by a non-administrative user or a web server service account.",
              "For each host, establish a baseline frequency of firmware query commands. Use a moving average to track the count of these commands over time. Generate an alert if the count in a 1-hour window exceeds 3 standard deviations above the baseline for that specific host, which could indicate a reconnaissance script being executed.",
              "Train a sequence-based anomaly detection model (e.g., an LSTM autoencoder) on the sequence of commands executed by users and systems. The model learns normal command progressions. Feed new command sequences into the model and flag any with a high reconstruction error. A sequence involving a network download, followed by a firmware query, followed by a new outbound network connection would be flagged as highly anomalous."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]