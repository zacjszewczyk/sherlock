[
  {
    "information_requirement": "Has the adversary escalated privileges by escaping from a container or virtualized environment to the underlying host? (PIR)",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1611",
        "name": "Escape to Host",
        "evidence": [
          {
            "description": "A process is created on a container host by a container-related parent process, and the new process executable's hash or name matches a known container escape tool or payload.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host server process execution logs and file systems",
            "action": [
              "Query process creation events (Windows Event ID 4688) on all container hosts. Alert if `NewProcessName` or the file hash of the executable matches a threat intelligence feed of known container escape tools (e.g., 'deepce.sh', 'pwn.sh') or related malware.",
              "For each process creation event on a container host, calculate the Shannon entropy of the `CommandLine` field. Establish a per-host baseline of entropy scores. Alert if a new process has a command-line entropy score that exceeds the 95th percentile of the host's historical baseline, suggesting obfuscation.",
              "Train a Random Forest or Gradient Boosting classifier on features from process creation events (Windows Event ID 4688), including parent process name, command-line length, command-line entropy, and the presence of suspicious substrings. Use this model to score each new process creation event on container hosts, flagging those classified as malicious with high confidence."
            ]
          },
          {
            "description": "A file is written to a sensitive host path by a containerized process, and that same file is executed by a host process within a short time window.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host server file system and process audit logs",
            "action": [
              "Create a SIEM correlation rule that triggers when: (1) A file write event (Windows Event ID 4663) from a process known to be containerized targets a sensitive host path (e.g., `C:\\Windows\\System32\\`), and (2) a process creation event (Windows Event ID 4688) executes the file from that exact path within a 60-second window.",
              "For each container image, build a historical baseline of file paths written to by its processes using Windows Event ID 4663. Monitor for new write events from these container processes. Alert if a write occurs to a path that is a statistical outlier (e.g., a path never seen before or with a historical frequency of less than 0.1% for that image), especially if the path is on the host filesystem.",
              "Use a sequence mining algorithm (e.g., GSP or PrefixSpan) on event logs (Windows Event IDs 4663, 4688) to discover common benign sequences of file writes and process executions. Flag any new, infrequent sequence that involves a containerized process writing to a host path followed by execution, as it deviates from learned normal behavior."
            ]
          },
          {
            "description": "A process is created on the host operating system whose direct parent process is a container runtime or shim process.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs on all container hosts",
            "action": [
              "For every process creation event (Windows Event ID 4688), check the `ParentProcessName`. Alert if the `ParentProcessName` is a known container runtime process (e.g., 'containerd-shim-runc-v2.exe', 'dockerd.exe') and the `NewProcessName` is a non-container process running outside of the container's security context (e.g., 'powershell.exe', 'cmd.exe').",
              "Build a baseline of all parent-child process relationships observed on container hosts over a 30-day period. Calculate the frequency of each unique `(ParentProcessName, NewProcessName)` pair. Alert when a new pair is observed (frequency of zero in the baseline) where the parent is a container-related process.",
              "Model the process execution history of each container host as a directed graph where nodes are processes and edges represent parent-child relationships. Use a graph-based anomaly detection algorithm to identify newly formed edges that connect a node within the 'container' sub-graph to a node in the 'host' sub-graph (e.g., sensitive system processes), as these represent structural anomalies indicative of a breakout."
            ]
          },
          {
            "description": "A network connection is made to the Docker control socket/pipe from a containerized process, immediately followed by a suspicious Docker command, such as creating a privileged container or mounting the host's root filesystem.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container hosts, specifically monitoring process command-lines and network connections to the container daemon",
            "action": [
              "Monitor for process creation events (Windows Event ID 4688) where `ProcessName` is 'docker.exe' and the `CommandLine` contains high-risk flags like '--privileged', '-v /:/host', '--pid=host', or '--net=host'. Correlate this with a preceding network connection event (Windows Event ID 5156) to the Docker named pipe `\\\\.\\pipe\\docker_engine` from a process originating inside a container.",
              "Profile the `docker.exe` command-line arguments used on each host. For commands like `docker run`, calculate the frequency of specific volume mounts (`-v` flag) and other flags. Alert when a command uses a volume mount or flag combination that has a near-zero frequency in the historical data, indicating a novel and potentially malicious container configuration.",
              "Apply an NLP-based anomaly detection model to the `CommandLine` field of all 'docker.exe' executions. Train the model on benign administrative commands and use it to flag command lines that are structurally dissimilar to the learned baseline, which could indicate an attempt to chain arguments in a novel way to achieve an escape."
            ]
          },
          {
            "description": "A containerized process accesses or modifies a host file or registry key that is outside its defined, mounted volumes.",
            "data_sources": [
              "Windows Event ID 4663",
              "Windows Event ID 4657",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File integrity monitoring (FIM) and registry audit logs on container hosts",
            "action": [
              "Create a SIEM rule that cross-references file/registry access events (Windows Event IDs 4663, 4657) with container configuration data. Alert if the process performing the access is containerized (identified via parent process context from Event ID 4688) and the target path/key is on the host filesystem and not within a configured volume mount for that container.",
              "For each container image, build a baseline profile of all file paths and registry keys it normally accesses during operation. Alert when a process from that container image accesses a path or key that is not on its baseline list, treating any such access as a zero-frequency anomaly.",
              "Use a clustering algorithm (e.g., DBSCAN) on vectors representing file access patterns for each process (e.g., a multi-hot encoded vector of directories accessed). Normal container processes should form dense clusters. An escaped process attempting to access host files will likely be flagged as a noise point or outlier because its access pattern will not match any established cluster."
            ]
          },
          {
            "description": "A process previously flagged as a potential container escape initiates an outbound network connection to an external, non-allowlisted destination.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Container host process logs and network egress points (e.g., Firewalls, Core Routers, Zeek sensors)",
            "action": [
              "Create a high-severity alert that triggers if a process ID, previously flagged in any container escape alert, appears in a network connection log (Zeek conn.log) as initiating a connection to an external IP address, especially if that IP is on a threat intelligence blocklist.",
              "For any process flagged as a potential escape, analyze its subsequent network connections from Zeek conn.log. Compare connection attributes (destination port, destination country/ASN, protocol, data volume) against the historical baseline for the host. Alert if multiple attributes are statistical outliers (e.g., destination port is in the bottom 1% of used ports for the host and destination ASN is new).",
              "If a container escape is suspected on a host at time `T`, apply a time series anomaly detection model (e.g., ARIMA) to the host's outbound network traffic (bytes_out from Zeek conn.log). A significant, unexplained spike in outbound traffic volume immediately following time `T` would strongly corroborate that the escape was successful and is now being used for C2 or data exfiltration."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]