[
  {
    "information_requirement": "Has the adversary manipulated data in transit to compromise its integrity? (PIR)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1565.002",
        "name": "Transmitted Data Manipulation",
        "evidence": [
          {
            "description": "A network connection from a critical internal asset (e.g., payment processor, database server) to an external destination IP address matches a known malicious proxy, anonymizer, or man-in-the-middle (MitM) C2 server, where no direct external communication is expected for that asset's function.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet gateway, Core network switches monitoring traffic from critical assets, DNS servers, DMZ firewalls",
            "action": [
              "Symbolic: Continuously join the destination IP address (`id.resp_h`) from Zeek conn.log against a high-confidence threat intelligence feed of known malicious proxy/MitM IPs. Generate a high-priority alert for any successful connection from a source IP within a critical asset subnet to a matched IP.",
              "Statistical: For each critical internal asset, profile its typical external communication destinations (IPs and ASNs) over a 30-day baseline using Zeek conn.log. Calculate the frequency of each destination. Generate a medium-priority alert if a connection is made to a destination in the bottom 5th percentile of frequency.",
              "Machine Learning: Train a classification model (e.g., Random Forest) using features from Zeek conn.log (duration, service, orig_bytes, resp_bytes) and external IP context (threat intel match, ASN, geolocation) to assign a risk score to each connection. Alert when the score exceeds a dynamically tuned threshold, indicating a high probability of malicious redirection."
            ]
          },
          {
            "description": "An SSL/TLS connection to a critical internal service (e.g., internal web portal, database) presents a certificate with one or more anomalous attributes: the issuer is not the expected internal CA, the certificate is self-signed, its JA3/JA3S hash matches a known MitM tool, or the validation_status is not 'ok'.",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek x509.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application servers, Load balancers, VPN concentrators, Web proxies, Network segments between clients and critical services",
            "action": [
              "Symbolic: Create a rule to alert when a `ja3` or `ja3s` hash in Zeek ssl.log matches a known MitM tool's signature (e.g., Fiddler, Burp Suite, mitmproxy), or when the `certificate.issuer` field in x509.log for a critical asset does not match the approved list of Certificate Authorities.",
              "Statistical: For each server IP (`id.resp_h`) hosting a critical service, create a historical baseline of all observed certificate `issuer` and `subject` values from Zeek x509.log. Calculate the frequency of each combination. Alert when a new connection presents a certificate whose issuer/subject pair has a frequency below the 1st percentile for that service.",
              "Machine Learning: Vectorize features from Zeek ssl.log and x509.log for each session, including `cipher`, `version`, `validation_status`, and certificate validity duration. Apply a clustering algorithm like DBSCAN to group sessions. Investigate any clusters identified as noise/outliers, as they represent SSL/TLS sessions with uncommon characteristics potentially indicative of MitM activity."
            ]
          },
          {
            "description": "A process, not part of a standard software allowlist, accesses the memory of a critical application (e.g., sqlplus.exe, saplogon.exe, filezilla.exe) using CreateRemoteThread or WriteProcessMemory API calls, immediately preceding an outbound network connection from the targeted application.",
            "data_sources": [
              "Windows Event ID 4688",
              "Sysmon Event ID 8",
              "Sysmon Event ID 10",
              "Windows Event ID 4656"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical application servers (e.g., financial, ERP), Database servers, Developer workstations, User workstations handling sensitive data (e.g., finance, HR)",
            "action": [
              "Symbolic: Create a rule to trigger when a Sysmon Event ID 10 (`ProcessAccess`) shows a `SourceImage` not on the allowlist (e.g., powershell.exe, rundll32.exe) targeting a `TargetImage` on a critical application list (e.g., saplogon.exe), with `GrantedAccess` including `0x1010` (PROCESS_VM_WRITE and PROCESS_VM_OPERATION) or `0x0008` (PROCESS_CREATE_THREAD). Correlate this with a subsequent network connection from the `TargetImage` within 5 seconds.",
              "Statistical: Using Sysmon Event ID 10 logs, build a baseline of `(SourceImage, TargetImage, GrantedAccess)` triplets for all hosts. Calculate the historical frequency of each triplet. Generate an alert if a triplet is observed that has never been seen before or falls in the bottom 1st percentile of frequency for that host or role.",
              "Machine Learning: Model normal user behavior by creating sequences of events per user session (e.g., Logon -> Process Create -> Process Access -> Network Connection). Use a sequence-based autoencoder (e.g., LSTM) to learn these patterns. Feed real-time event sequences into the model and alert when the reconstruction error exceeds a dynamically determined threshold, indicating a sequence of actions that does not conform to the user's normal behavior."
            ]
          },
          {
            "description": "For a recurring, automated data transfer between two specific internal systems (e.g., hourly database replication), the size of the transferred data (orig_bytes + resp_bytes) deviates by more than three standard deviations from the established historical average for that specific transfer.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek http.log",
              "Zeek files.log",
              "Zeek weird.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Data center network fabric, Connections between application and database tiers, Primary and backup data replication links",
            "action": [
              "Symbolic: Create a rule that triggers if Zeek weird.log reports a `content_gap` for a TCP session involving a critical application server, indicating a discrepancy between TCP sequence numbers and the amount of data delivered, which can be a sign of packet injection or dropping.",
              "Statistical: For critical, periodic data flows identified by source/destination IP and destination port, establish a baseline of the mean and standard deviation of total bytes (`orig_bytes` + `resp_bytes`) from Zeek conn.log. Generate an alert if a new connection's total bytes exceeds 3 standard deviations from the mean for that specific flow.",
              "Machine Learning: For high-value data flows, aggregate total bytes transferred per minute. Train a time series anomaly detection model (e.g., SARIMA, Prophet) on this data. Generate an alert when the observed data volume falls outside the model's predicted confidence interval, indicating an unexpected spike or drop in traffic that could be caused by data manipulation."
            ]
          },
          {
            "description": "A sudden spike in application-level errors related to data integrity, such as 'Checksum Mismatch' errors in file transfer logs, 'Transaction Rollback' events in database logs, or 'Hash validation failed' messages from custom applications, is observed across one or more systems.",
            "data_sources": [
              "Application Logs",
              "Database Logs",
              "Zeek files.log",
              "Windows Event Logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers, Database servers logging transaction failures, Application servers processing data uploads, Systems participating in data replication (e.g., Domain Controllers, backup servers)",
            "action": [
              "Symbolic: Create a SIEM rule that generates a high-priority alert upon detecting specific error strings in application or database logs, such as 'Data Integrity Error', 'Transaction Rollback', 'Checksum validation failed', 'CRC error', or 'Hash mismatch'.",
              "Statistical: Aggregate the count of data integrity error events, identified by the symbolic rule, per host, per hour. Calculate a moving average and standard deviation over a 7-day period. Alert if the current hourly count for any host exceeds 4 standard deviations above the moving average.",
              "Machine Learning: Create a time series of the count of integrity failure events across the enterprise per 5-minute interval. Apply an unsupervised anomaly detection algorithm like Isolation Forest or Local Outlier Factor (LOF) to this time series. Alert on any data point flagged as an anomaly, which can detect coordinated, low-and-slow increases in errors that might evade simple statistical thresholds."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]