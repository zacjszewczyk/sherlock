[
  {
    "information_requirement": "Is the adversary establishing persistence via DLL search order hijacking or sideloading?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A DLL file is written to disk, and its file hash matches a known-bad entry in a threat intelligence database. Within a short time window (e.g., 10 minutes), this DLL is loaded by a process associated with a known persistence mechanism (e.g., a new service, scheduled task, or a process spawned from a Registry Run key).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7",
              "Windows Event ID 4697",
              "Windows Event ID 4698",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Domain Controllers, Application Servers, Persistence locations in the Windows Registry (e.g., HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run), System service binaries, Scheduled Task repository.",
            "action": [
              "1. (Symbolic) Upon a DLL file creation event (Sysmon Event ID 11), calculate the file hash. Query the hash against a threat intelligence feed of known malicious DLLs. If a match is found, correlate by file path with any subsequent DLL load events (Sysmon Event ID 7) within 10 minutes. Raise a high-severity alert if the loading process is associated with a recent persistence event (e.g., Windows Event ID 4697, 4698).",
              "2. (Statistical) For all DLL load events (Sysmon Event ID 7), calculate the prevalence of each DLL's file path across the environment. For processes known to be persistence mechanisms (e.g., svchost.exe, taskhostw.exe), flag any loaded DLLs originating from statistically rare paths (e.g., paths in the bottom 5th percentile of frequency).",
              "3. (ML) Deploy a classification model (e.g., Random Forest) trained on features from DLL load events (process name, DLL path entropy, DLL signature status, publisher name rarity, parent process). Feed all DLL load events into the model. If the model classifies a load as 'suspicious' and the loading process's parent is a persistence mechanism like services.exe or the process itself is configured for autorun, trigger an alert for analyst review."
            ]
          },
          {
            "description": "A DLL file is created with a name identical to a legitimate system DLL (e.g., 'version.dll', 'dwrite.dll', 'uxtheme.dll') but is placed in an application's local directory instead of the expected system directory (e.g., 'C:\\Windows\\System32'). The hosting application is subsequently configured for persistence via a new service, scheduled task, or Run key.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7",
              "Windows Event ID 4697",
              "Windows Event ID 4698",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application installation directories (e.g., C:\\Program Files\\), User profile directories, Startup folders, Windows Registry persistence locations.",
            "action": [
              "1. (Symbolic) Maintain a watchlist of commonly hijacked system DLL names (e.g., 'version.dll', 'wlbsctrl.dll', 'cryptbase.dll'). Alert when a file creation event (Sysmon Event ID 11) is detected for a DLL on this watchlist in any directory other than 'C:\\Windows\\System32\\' or 'C:\\Windows\\SysWOW64\\', and it is subsequently loaded (Sysmon Event ID 7).",
              "2. (Statistical) For each process, establish a historical baseline of the set of DLLs it normally loads. For each new process execution, calculate the Jaccard similarity score between the set of currently loaded DLLs and its historical baseline. A low score (e.g., < 0.8), particularly when the new DLL has a common name but an unusual path, indicates potential hijacking and should be flagged.",
              "3. (ML) Utilize a time-series anomaly detection model (e.g., LSTM Autoencoder) on the sequence of DLLs loaded by specific, critical persistent services (e.g., a specific svchost instance). An abnormally high reconstruction error when a new DLL load sequence is processed indicates a deviation from normal behavior, suggesting a hijack, and should be flagged."
            ]
          },
          {
            "description": "A DLL file is written to a transient or user-writable directory (e.g., '%TEMP%', '%APPDATA%', 'C:\\Users\\Public\\') and is subsequently loaded by a process within a short time frame (e.g., under 60 seconds).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User profile directories (%APPDATA%, %LOCALAPPDATA%), Temporary file directories (%TEMP%, C:\\Windows\\Temp), Publicly writable folders (C:\\Users\\Public\\).",
            "action": [
              "1. (Symbolic) Create a rule to correlate file creation events (Sysmon Event ID 11) for any file with a '.dll' extension in user-writable locations (e.g., 'C:\\Users\\*', '\\AppData\\', '\\Temp\\') with subsequent image load events (Sysmon Event ID 7) for the exact same file path. Alert if the time delta between file creation and load is less than 5 minutes.",
              "2. (Statistical) For each running process, calculate the string entropy of the file paths of all DLLs it loads. Establish a moving average baseline of this entropy score for each process name. A sudden, sharp increase in path entropy for a process (e.g., > 3 standard deviations above its moving average) can indicate it is loading libraries from unusual, randomly named, or deeply nested temporary locations.",
              "3. (ML) Employ an unsupervised learning model (e.g., DBSCAN) to cluster DLL load events based on features like (ProcessName, DllPath, DllIsSigned, DllPublisher). Outlier points that the model cannot assign to any established cluster of normal behavior represent anomalous load events that warrant investigation, such as a trusted process loading an unsigned DLL from a temp folder."
            ]
          },
          {
            "description": "A process associated with a persistence mechanism (e.g., svchost.exe, a process launched via a Run key) initiates a network connection to read a DLL file from a remote network share (SMB or WebDAV).",
            "data_sources": [
              "Zeek smb_files.log",
              "Zeek conn.log",
              "Sysmon Event ID 3"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, Internal file servers, WebDAV servers, Endpoints initiating remote connections.",
            "action": [
              "1. (Symbolic) Monitor Zeek's 'smb_files.log' for any 'read' action where the filename ends in '.dll'. Correlate the client IP ('id.orig_h') with endpoint network connection logs (Sysmon Event ID 3) within the same timeframe to identify the source process. If the process is a known persistence mechanism (e.g., 'svchost.exe', 'lsass.exe'), generate a high-priority alert.",
              "2. (Statistical) Profile the file extensions accessed over SMB for each host. Calculate the frequency of '.dll' file reads as a percentage of all SMB file reads per host. A sudden spike in this ratio, or a client host becoming a statistical outlier for DLL reads (e.g., exceeding the 99th percentile across all hosts), indicates anomalous activity.",
              "3. (ML) Train a time-series forecasting model (e.g., ARIMA) on the count of unique DLL files transferred via SMB per hour across the network. An observed count that significantly exceeds the forecasted volume (e.g., > 3 standard deviations above the prediction) may indicate a widespread remote DLL loading attack in progress."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary escalating privileges by abusing DLL loading?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A DLL file is written to a user-writable directory, and its file hash matches an IOC for a known privilege escalation tool or payload (e.g., PrintSpoofer, Juicy Potato, BadPotato). The DLL is subsequently loaded by a process.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User-writable directories on multi-user systems (e.g., Citrix servers, developer workstations), System-wide temporary folders (C:\\Windows\\Temp), User profile temp directories.",
            "action": [
              "1. (Symbolic) Upon a file creation event for a DLL (Sysmon Event ID 11), hash the file. Match the hash against a curated, high-confidence list of IOCs for privilege escalation tools. An exact match that is followed by a load event for that DLL (Sysmon Event ID 7) triggers an immediate, critical alert.",
              "2. (Statistical) Maintain a baseline of all file hashes observed in user-writable directories. A DLL hash that is globally rare (e.g., seen on only one host), is unsigned, and is loaded by a process, is highly suspicious. Assign a risk score based on the combination of hash rarity, lack of signature, and path.",
              "3. (ML) Use a supervised classifier (e.g., XGBoost) trained on file and process metadata to predict if a file creation event is part of a privilege escalation attempt. Features should include: file path, user context, parent process name, file entropy, and whether the file is signed. A high-confidence prediction of 'privilege escalation' from the model should be escalated for immediate investigation."
            ]
          },
          {
            "description": "A DLL file is created in a specific, hardcoded path known to be vulnerable to hijacking by a high-privilege process (e.g., creation of 'C:\\Windows\\System32\\wlbsctrl.dll' prior to the IKEEXT service starting).",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System directories on servers running specific vulnerable services (e.g., IKEEXT, UsoSvc), Application directories for third-party software running as SYSTEM.",
            "action": [
              "1. (Symbolic) Create a high-fidelity detection rule that monitors for file creation events (Sysmon Event ID 11) for specific DLL filenames in specific, known-vulnerable paths (e.g., FileName = 'wlbsctrl.dll' AND Path = 'C:\\Windows\\System32\\'). Correlate this with a subsequent load of that DLL (Sysmon Event ID 7) by the vulnerable service.",
              "2. (Statistical) For known hijackable DLL paths, baseline the modification timestamp of the legitimate file. Monitor for file write events (Sysmon 11) that change this file. A file write occurring outside of an established patch window, especially if the resulting file is unsigned, is a statistical anomaly. Correlate with the next load of that DLL (Sysmon 7) to confirm.",
              "3. (ML) Develop a Hidden Markov Model for the state transitions of services vulnerable to DLL hijacking. The states could be 'Stopped', 'Running_Benign', 'Running_Hijacked'. The creation of a malicious DLL in a hijackable path (observed via Sysmon 11) would represent a transition to a low-probability 'Running_Hijacked' state, triggering an alert."
            ]
          },
          {
            "description": "A process running with High or System integrity level loads a DLL from a directory where standard, non-administrative users have write permissions (e.g., C:\\Users\\Public, C:\\Perflogs).",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints and servers, particularly those where users have local admin rights or where UAC is misconfigured. Shared workstations and terminal servers.",
            "action": [
              "1. (Symbolic) Filter image load events (Sysmon Event ID 7) where the 'IntegrityLevel' is 'High' or 'System' AND the 'ImageLoaded' path is in a user-writable location (e.g., starts with 'C:\\Users\\', 'C:\\ProgramData\\', 'C:\\Perflogs'). Exclude known good software installers. Alert on any match.",
              "2. (Statistical) For each high-integrity process (e.g., 'lsass.exe', 'csrss.exe'), build a profile of its normal DLL load paths. Calculate a rarity score for each new DLL load path observed. A path with a very high rarity score (e.g., in the 99.9th percentile) for that specific privileged process indicates a significant deviation and potential hijack.",
              "3. (ML) Train a one-class SVM model on legitimate DLL load events for high-integrity processes, using features like DLL path, signature status, and publisher. The model learns a boundary of normal behavior. Any new DLL load event that falls outside this boundary is classified as an anomaly and should be investigated."
            ]
          },
          {
            "description": "A process running with High or System integrity, immediately following the load of a DLL from a user-writable directory, spawns a suspicious child process (e.g., cmd.exe, powershell.exe) or initiates an external network connection to a new destination.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 7",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Privileged Access Workstations (PAWs), Critical servers, Network egress points.",
            "action": [
              "1. (Symbolic) Create a chained rule: (1) A high-integrity process loads a DLL from a user-writable path (Sysmon 7). (2) Within 30 seconds, the same process GUID spawns 'cmd.exe' or 'powershell.exe' (Sysmon 1) OR initiates an external network connection (Sysmon 3). This sequence is highly indicative of successful exploitation.",
              "2. (Statistical) For each high-integrity parent process, build a frequency distribution of its child processes immediately following a DLL load from a user-writable path. A child process that is statistically rare for that parent in that context (e.g., 'svchost.exe' spawning 'whoami.exe', which has a near-zero probability) is a strong indicator of compromise.",
              "3. (ML) Use a Graph Neural Network (GNN) to model normal process-file-network activity graphs. A subgraph representing a privileged process loading a user-writable DLL and then spawning a shell or making a network call would have anomalous structural properties and node embeddings compared to the learned baseline, allowing for its detection."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by abusing DLLs?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.001",
        "name": "DLL",
        "evidence": [
          {
            "description": "A trusted Windows 'living-off-the-land' binary (LOLBin), such as 'rundll32.exe' or 'svchost.exe', loads a DLL whose file hash is identified by threat intelligence as a component of a known malicious toolkit (e.g., Cobalt Strike Beacon, Mimikatz, Metasploit).",
            "data_sources": [
              "Sysmon Event ID 7",
              "Sysmon Event ID 11"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, particularly those running common 'living-off-the-land' binaries (LOLBins).",
            "action": [
              "1. (Symbolic) Monitor DLL load events (Sysmon 7). If a loaded DLL's hash matches a known malicious hash from a threat intelligence feed, and the loading process is a known LOLBin (e.g., 'rundll32.exe', 'regsvr32.exe', 'msiexec.exe'), generate a critical alert.",
              "2. (Statistical) For each LOLBin process (e.g., 'rundll32.exe'), establish a baseline of common (command line argument, loaded DLL path) pairings. Calculate the co-occurrence frequency of these pairs across the enterprise. A pair with a very low co-occurrence frequency (e.g., in the bottom 1st percentile) is anomalous and indicates potential abuse.",
              "3. (ML) Train a classification model (e.g., LightGBM) to distinguish between benign and malicious LOLBin executions. Features should include: command-line arguments, name and path of the loaded DLL, the DLL's signature status, and DLL entropy. A 'malicious' classification from the model indicates likely abuse for defense evasion."
            ]
          },
          {
            "description": "A process binary signed by a trusted publisher (e.g., 'Microsoft Corporation') loads a DLL that is either unsigned or signed by a publisher not on an allowlist of trusted vendors. The anomaly is amplified if the DLL resides in a non-standard directory.",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, focusing on processes that are part of the core operating system or trusted third-party applications.",
            "action": [
              "1. (Symbolic) Create a rule to detect when a process with a valid 'Microsoft Corporation' signature (from Sysmon 7) loads a DLL where 'SignatureStatus' is not 'Valid' or the 'Signature' field is not in a pre-defined list of trusted publishers. Exclude known-good cases to reduce noise.",
              "2. (Statistical) Maintain a baseline of all (Process Publisher, DLL Publisher) pairs observed in the environment. Identify statistically anomalous pairs by calculating their frequency. If 99.9% of DLLs loaded by 'explorer.exe' (published by Microsoft) are also published by Microsoft, a load involving an unsigned or unusually-signed DLL is a statistical outlier worth investigating.",
              "3. (ML) Use an Isolation Forest model on DLL load events. Features should include categorical representations of: ProcessIsSigned, ProcessPublisher, DllIsSigned, DllPublisher, and DllPath. The model will learn to isolate anomalies, such as unusual combinations of signed processes loading untrusted DLLs from non-standard paths."
            ]
          },
          {
            "description": "A legitimate system process (e.g., svchost.exe, explorer.exe), after loading a DLL from a non-system directory (e.g., %APPDATA%), performs actions outside its normal behavioral profile, such as initiating a network connection to a suspicious domain or spawning a command shell.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Sysmon Event ID 3",
              "Sysmon Event ID 7",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, DNS servers, All endpoints and servers.",
            "action": [
              "1. (Symbolic) Create a chained alert: (1) A trusted system process (e.g. 'explorer.exe') loads a DLL from a non-system path (e.g. not C:\\Windows\\*) (Sysmon 7). (2) Within 60 seconds, the same process makes a DNS query (Zeek dns.log) for a domain with a known malicious category (e.g., 'C2', 'Dynamic DNS') from a threat intelligence feed.",
              "2. (Statistical) Following a DLL load from a non-system path by a trusted process, track subsequent DNS queries from that process. Calculate the entropy of the queried top-level domains (TLDs) within a 5-minute window. A sudden spike in entropy (e.g., exceeding 3 standard deviations from the process's historical average) indicates potential DGA activity triggered by the sideloaded DLL.",
              "3. (ML) Model the lifecycle of a process (e.g., 'explorer.exe') using a sequence-to-sequence autoencoder on its system calls or event logs. A high reconstruction error on a new process lifecycle indicates it is anomalous, such as when a sideloaded DLL causes the process to initiate C2 communications or drop additional files, behaviors not present in the training data."
            ]
          },
          {
            "description": "A process loads a DLL with a filename matching a critical system or security software DLL (e.g., 'ntdll.dll', 'amsi.dll'), but the file's on-disk path is not the legitimate, protected system directory (e.g., not 'C:\\Windows\\System32').",
            "data_sources": [
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "System folders (C:\\Windows\\System32), Security product installation directories (e.g., C:\\Program Files\\CrowdStrike), Application directories.",
            "action": [
              "1. (Symbolic) Maintain a dictionary of critical DLLs and their single correct paths (e.g., {'ntdll.dll': 'C:\\Windows\\System32\\ntdll.dll'}). Alert on any image load event (Sysmon 7) where the DLL filename is a key in the dictionary, but its 'ImageLoaded' path does not match the corresponding value.",
              "2. (Statistical) For each unique DLL name, create a frequency distribution of the paths it is loaded from across the enterprise. For a system DLL like 'ntdll.dll', the path 'C:\\Windows\\System32\\ntdll.dll' should account for >99.9% of loads. Any load from a path in the long tail of the distribution (e.g., 'C:\\Users\\Public\\ntdll.dll') is a severe anomaly.",
              "3. (ML) Use a K-Means clustering algorithm on the feature set of (DLL Filename, DLL Path). Legitimate loads will form dense clusters (e.g., a large cluster for ('ntdll.dll', 'C:\\Windows\\System32')). A DLL load event that falls into a very small, singleton cluster or is identified as a cluster outlier (e.g., ('ntdll.dll', 'C:\\Users\\Public\\Music')) should be investigated for hijacking."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]