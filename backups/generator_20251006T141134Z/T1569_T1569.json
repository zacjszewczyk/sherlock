[
  {
    "information_requirement": "Is the adversary leveraging system services for execution?",
    "tactic_id": "TA0002",
    "tactic_name": "Execution",
    "indicators": [
      {
        "technique_id": "T1569",
        "name": "System Services",
        "evidence": [
          {
            "description": "A new service is created (Windows Event ID 7045) or an existing one is modified (Windows Event ID 4697) where the service's executable file hash matches a known malicious indicator. The process spawned by this service (Windows Event ID 4688) subsequently initiates an outbound network connection (Zeek conn.log) to an IP address or domain on a threat intelligence feed.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697",
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Critical Application Servers, Endpoint Subnets, Egress Network Gateways, Threat Intelligence Platform",
            "action": [
              "Symbolic: Create a SIEM correlation rule that joins service creation/modification events (Windows Event ID 7045, 4697) with a threat intelligence feed on the service's binary file hash. If a match occurs, further join with process creation events (4688) from the same host to identify the ProcessID, and then join with Zeek conn.log data, alerting if the destination IP or domain is also on a C2 blocklist.",
              "Statistical: For each new service executable file hash observed in event 7045, calculate its prevalence across all endpoints over the last 30 days. Flag any hash that appears on a number of hosts below a low percentile threshold (e.g., less than the 1st percentile, or on fewer than 5 machines). Additionally, analyze network connections from the new service's process and flag connections to destination domains or IPs that are statistically rare for the organization (e.g., never seen before or in the bottom 0.1% of all connections).",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using labeled historical service creation events. Extract features such as: entropy of the service name and path, binary path location (e.g., temp, user profile), whether the binary is signed, and the parent process of the service installer. Deploy the model to score all new service creation events (7045) in real-time, alerting on any service classified as malicious with a high confidence score (e.g., > 0.90)."
            ]
          },
          {
            "description": "The execution of a service management utility (e.g., sc.exe, powershell.exe) is observed via command-line logging (Windows Event ID 4688) where the arguments specify service creation or modification, and the associated binary path ('binPath=') points to a non-standard, user-writable, or temporary directory (e.g., C:\\Users, C:\\Windows\\Temp, C:\\ProgramData).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Windows Server Infrastructure, Administrator Workstations",
            "action": [
              "Symbolic: Create a SIEM detection rule that monitors process creation events (4688) for process_name IN ('sc.exe', 'powershell.exe'). The rule must use regular expressions on the command_line field to detect keywords like 'create', 'config', 'New-Service', or 'Set-Service' in conjunction with binary paths pointing to suspicious locations such as `C:\\\\Users\\\\*`, `C:\\\\Windows\\\\Temp\\\\*`, `C:\\\\ProgramData\\\\*`, or `C:\\\\PerfLogs\\\\*`.",
              "Statistical: For all command-line executions of sc.exe and powershell.exe that create or modify services, calculate the Shannon entropy of the command-line string. Establish a baseline of entropy values from known-good administrative scripts. Generate an alert for any command whose entropy score is a statistical outlier (e.g., > 3 standard deviations above the mean), which may indicate obfuscation. Additionally, track the parent process of sc.exe and alert if the parent is statistically rare for this action (e.g., winword.exe, chrome.exe).",
              "Machine Learning: Apply a density-based clustering algorithm (e.g., DBSCAN) to feature vectors derived from service-related command lines (event 4688). Features must include command length, argument count, presence of specific keywords (create, config, binPath), and path characteristics. Treat clusters with few members, or points identified as noise (not belonging to any cluster), as anomalies requiring investigation."
            ]
          },
          {
            "description": "A new service is created (Windows Event ID 7045) with a service name or display name that has a small string edit distance (e.g., 1-2 characters) from a legitimate, known Windows service, but points to a different or unexpected executable path.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 4697"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Standardized Server Builds (Golden Images), Endpoint Fleet, Configuration Management Database (CMDB), Software Asset Management Database",
            "action": [
              "Symbolic: Maintain a baseline dictionary mapping all legitimate service names to their authorized ImagePath and file hash, derived from a golden image or CMDB. Create a SIEM rule to monitor service creation/modification events (7045, 4697). Alert on any new service where the ServiceName is in the baseline dictionary but the ImagePath does not exactly match the authorized path.",
              "Statistical: For any new service name from event 7045 not found in the baseline, iterate through the list of known-good service names and calculate the Levenshtein distance between the new name and each baseline name. Alert on any service where the minimum calculated distance is low (e.g., 1 or 2), indicating potential typosquatting.",
              "Machine Learning: Train an autoencoder neural network on feature vectors derived from the population of legitimate services. Features should include a character-level embedding of the service name, properties of the image path (e.g., directory depth, parent folder name), and whether the binary is signed. A new service that produces a high reconstruction error when passed through the trained autoencoder is flagged as anomalous, as it does not conform to the learned patterns of normal services."
            ]
          },
          {
            "description": "A service exhibits an anomalous lifecycle pattern, such as being created (Event ID 7045), started (Event ID 7036), and then deleted (via sc.exe delete in Event ID 4688) within a very short timeframe (e.g., under 15 minutes), or repeatedly crashing (Event ID 7034) with unusual frequency.",
            "data_sources": [
              "Windows Event ID 7045",
              "Windows Event ID 7036",
              "Windows Event ID 7034",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Hosts, Software Deployment and Patch Management Servers, SIEM/Log Management System",
            "action": [
              "Symbolic: Implement a stateful SIEM detection rule that correlates events by Host and ServiceName. Trigger an alert if a sequence of [Event ID 7045 (Create)] -> [Event ID 7036 (Start)] -> [Event ID 4688 with 'sc.exe delete' in command line] occurs for the same service within a 15-minute window.",
              "Statistical: For each service, track the time delta between start (7036) and stop/crash (7036, 7034) events. Use outlier detection methods like the Interquartile Range (IQR) to identify services whose runtime is anomalously short. Also, count the number of crash events (7034) per service per hour and alert on any service that has a crash frequency exceeding a high percentile (e.g., 99th percentile) for all services.",
              "Machine Learning: Model the sequence of service lifecycle events (e.g., Create, Start, Stop, Crash) for each service as a time series. Train a Long Short-Term Memory (LSTM) based autoencoder on sequences from known-good services. Use the trained model to identify anomalous sequences of events that have a high reconstruction error, indicating a deviation from normal lifecycle patterns."
            ]
          },
          {
            "description": "A legitimate service host process, such as svchost.exe or services.exe, spawns a child process (Windows Event ID 4688) that is anomalous for that parent (e.g., cmd.exe, powershell.exe), or initiates a network connection (Zeek conn.log) to an external destination that is rare or has a low reputation.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress Network Gateways, DNS Resolvers, All Windows Hosts",
            "action": [
              "Symbolic: Create a high-priority SIEM alert for any process creation event (4688) where the ParentProcessName is one of ('svchost.exe', 'dllhost.exe', 'services.exe') and the ProcessName is one of ('cmd.exe', 'powershell.exe', 'cscript.exe', 'wscript.exe', 'rundll32.exe'). Also, alert if the child process binary is running from a user-writable or temporary directory.",
              "Statistical: For each common service host parent process (e.g., svchost.exe), build a historical baseline of all unique child process names it normally spawns. Alert when a new child process name appears that is not on the baseline. Similarly, for network connections from these service hosts, baseline the destination ports and the prevalence of destination IPs. Alert on connections to ports outside the baseline or to destination IPs with a very low prevalence score (e.g., seen by < 5 other hosts).",
              "Machine Learning: Construct a process relationship graph where nodes are process names and edges represent parent-child relationships from event 4688. Use a community detection algorithm (e.g., Louvain Modularity) on the historical graph to identify normal clusters of activity. In real-time, flag any new edge that connects a node from one community to a node in a distant, unrelated community (e.g., an edge from svchost.exe to powershell.exe) as a high-fidelity anomaly."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]