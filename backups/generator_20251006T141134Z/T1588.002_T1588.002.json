[
  {
    "information_requirement": "Is the adversary acquiring or staging tools to support their operations?",
    "tactic_id": "TA0042",
    "tactic_name": "Resource Development",
    "indicators": [
      {
        "technique_id": "T1588.002",
        "name": "Tool",
        "evidence": [
          {
            "description": "An executable file is created on a host where the file's hash matches a known malicious tool signature from a threat intelligence feed. Separately, a network connection is established from an internal host to a destination IP address, domain, or URL known to host or distribute adversary tooling.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log",
              "Zeek files.log",
              "Zeek http.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, DNS Servers, Endpoints",
            "action": [
              "Join Zeek conn.log with dns.log and http.log. Alert when the destination IP, requested domain, or full URI matches an Indicator of Compromise (IOC) list for tool distribution sites. Concurrently, scan Windows Event ID 4688 (Process Creation) and Zeek files.log records, alerting when a file hash matches a known-bad hash for an offensive security tool.",
              "For all executable file hashes identified in Zeek files.log, calculate their prevalence across all endpoints over the last 30 days. Flag any executable hash seen on fewer than 5 hosts (or <0.1% of the total fleet) for review. Separately, calculate the Shannon entropy of fully qualified domain names (FQDNs) in Zeek dns.log. Flag domains in the 95th percentile of entropy that are not on an established allowlist and are associated with executable file downloads (via join with files.log).",
              "Train a supervised classification model (e.g., Random Forest, Gradient Boosting) using labeled historical network data. Use features from Zeek conn.log such as connection duration, protocol, service, port, originator/responder bytes, and connection state, enriched with features like domain age and IP reputation. Deploy the model to score all new outbound connections to previously unclassified destinations, flagging those with a high probability score (>0.8) of being malicious, particularly if associated with a file transfer."
            ]
          },
          {
            "description": "A command-line execution contains argument strings, parameter combinations, or obfuscation patterns (e.g., Base64 encoded PowerShell) that are uniquely characteristic of an offensive security tool's execution.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 4104"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints, Application Servers, Domain Controllers",
            "action": [
              "Deploy and monitor Sigma rules that match known command-line patterns for tools like Mimikatz, AdFind, BloodHound, PsExec, and common PowerShell frameworks (e.g., PowerSploit, Nishang). Scan the CommandLine field in Windows Event ID 4688 and ScriptBlockText in Windows Event ID 4104 for matches to these regex or keyword-based signatures.",
              "Tokenize all command-line arguments from Windows Event ID 4688. For each parent process (e.g., powershell.exe, cmd.exe), build a frequency distribution of its arguments over a 30-day baseline. Alert on command-line executions containing arguments that fall into the bottom 5% of frequency for their respective parent process. Additionally, calculate the character entropy of the entire command line; flag commands with entropy scores exceeding 3 standard deviations from the mean for that process, which may indicate packing or encoding.",
              "Vectorize command-line arguments from Windows Event IDs 4688 and 4104 using a TF-IDF (Term Frequency-Inverse Document Frequency) model. Apply an unsupervised clustering algorithm like DBSCAN or Isolation Forest to the resulting vectors. Investigate small, dense clusters that are distinct from the large clusters of benign administrative activity, as these may represent novel or unknown tool usage patterns."
            ]
          },
          {
            "description": "An executable file is transferred over the network and written to disk, and is then executed from a user-writable, non-application directory (e.g., C:\\Users\\Public\\, C:\\PerfLogs\\, C:\\Windows\\Temp\\, user download folders) within a short time window (e.g., under 10 minutes).",
            "data_sources": [
              "Zeek files.log",
              "Zeek http.log",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internet Gateway, Endpoints, Shared Network Drives",
            "action": [
              "Correlate Zeek files.log (for any protocol) or http.log events showing an executable download (by MIME type or file extension) to a specific host IP with subsequent Windows Event ID 4688 events from the same host (by hostname/IP). Trigger an alert if the process creation occurs within 10 minutes of the download and the process path is in a list of non-standard directories like C:\\Users\\*\\Downloads\\, C:\\Users\\Public\\, or C:\\Windows\\Temp\\.",
              "For each parent process (e.g., chrome.exe, outlook.exe), create a baseline of common child processes it spawns and the directories from which those children are executed. Calculate the frequency of each unique (parent_process, child_process, child_path_directory) tuple. Alert on the occurrence of statistically rare tuples, such as outlook.exe spawning an executable from C:\\Users\\Public\\, which would fall in the bottom 1st percentile of observed behaviors.",
              "Train a sequence-to-sequence autoencoder (a type of Recurrent Neural Network) on event chains from individual hosts. A typical sequence might be [network_connection, file_write, process_create, registry_mod]. The model learns to reconstruct normal sequences. Feed real-time event sequences into the trained model; sequences with a high reconstruction error indicate a deviation from learned normal behavior and may represent a malicious tool staging and execution chain."
            ]
          },
          {
            "description": "A user account or host initiates a remote administration connection (e.g., WinRM, SMB, RDP) to another host for the first time, or with a frequency that is a statistical outlier compared to its own or its peer group's baseline, suggesting the use of a newly acquired remote access or lateral movement tool.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dce_rpc.log",
              "Zeek rdp.log",
              "Windows Event ID 4624",
              "Windows Event ID 4648"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal Network Segments, Domain Controllers, High-Value Servers",
            "action": [
              "Maintain a stateful table of unique (Source User, Source Host, Destination Host, Logon Type, Protocol/Port) tuples observed over a 30-day rolling window. Generate an alert when a new tuple is seen for the first time involving an administrative protocol (e.g., RDP, WinRM, RPC) or a privileged account, such as a developer's workstation RDP-ing into a finance server for the first time.",
              "For each user, establish a baseline of remote logon activity by destination and protocol, calculating the mean and standard deviation of daily connection counts. Alert when a user's activity on a given day exceeds 3 standard deviations from their personal baseline. Concurrently, profile peer groups (e.g., 'Developers', 'HR'). Alert when a user's remote access activity (e.g., number of distinct hosts accessed) is in the 98th percentile compared to their peers.",
              "Construct a graph where hosts are nodes and remote logons (from Windows Event ID 4624 and Zeek conn.log) are directed, weighted edges. Apply a community detection algorithm (e.g., Louvain Modularity) to identify normal communication clusters (e.g., web servers, developer workstations). Use a link prediction model to identify new connections (edges) that are highly unlikely given the graph structure, such as a new edge forming between the 'HR' community and the 'Domain Controllers' community, which could indicate tool-facilitated lateral movement."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]