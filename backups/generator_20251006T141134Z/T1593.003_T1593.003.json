[
  {
    "information_requirement": "Is the adversary conducting reconnaissance against the organization's public code repositories?",
    "tactic_id": "TA0043",
    "tactic_name": "Reconnaissance",
    "indicators": [
      {
        "technique_id": "T1593.003",
        "name": "Code Repositories",
        "evidence": [
          {
            "description": "An alert from an external secret scanning service identifies a credential pattern (e.g., 'AWS_ACCESS_KEY_ID', 'rsa-private-key') in a commit to a public-facing organizational code repository.",
            "data_sources": [
              "GitHub Advanced Security alert logs",
              "GitGuardian alert logs",
              "Third-party secret scanning service API logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Third-party secret scanning platforms and APIs",
            "action": [
              "Ingest alerts from secret scanning services. Trigger a high-severity incident if an alert indicates a secret type from a predefined list (e.g., 'AWS_KEY', 'PRIVATE_KEY', 'API_TOKEN') was found in a commit to a public repository.",
              "Aggregate secret leak alerts by author over a 30-day rolling window. Generate a medium-severity alert for any developer whose alert count exceeds the 95th percentile for all developers, indicating a potential need for security training or a compromised account.",
              "Develop a classification model (e.g., Logistic Regression) using features from historical secret scanning alerts (e.g., repository sensitivity tag, file extension, commit message keywords, secret entropy). Use the model to score new alerts for their probability of being a true positive, high-impact leak, and automatically escalate alerts with a prediction score above a defined threshold (e.g., > 0.85)."
            ]
          },
          {
            "description": "A user account with a creation date of less than 72 hours performs a clone or fork operation on one or more sensitive organizational repositories.",
            "data_sources": [
              "GitHub audit stream",
              "GitLab audit events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud-based Git provider audit logs",
            "action": [
              "Join repository audit events (action: `git.clone`, `repo.fork`) with user account metadata. Trigger a medium-severity alert if the `user.created_at` timestamp is within 72 hours of the event timestamp and the target repository is tagged as 'sensitive' or 'critical'.",
              "For each critical repository, calculate the 30-day moving average and standard deviation of daily clone events. Alert when the daily count exceeds the mean by 3 standard deviations. Escalate the alert to high severity if the percentage of this activity from new accounts (age < 30 days) also exceeds the 90th percentile of its historical values.",
              "For critical repositories, train a time-series anomaly detection model (e.g., SARIMA) on historical clone and fork event counts. Generate an alert when the observed hourly or daily activity count falls outside the model's 99% confidence interval, indicating a statistically significant deviation from normal behavior."
            ]
          },
          {
            "description": "An external, unauthorized access event (clone, fork) occurs against a repository that is marked as 'internal' or 'private' but is publicly accessible due to misconfiguration.",
            "data_sources": [
              "GitHub audit stream",
              "GitLab audit events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Cloud-based Git provider APIs and audit logs",
            "action": [
              "Periodically query the Git provider API to list all repositories and their visibility settings ('public', 'internal', 'private'). Compare this against a master list of repositories and their intended visibility. Generate a high-priority alert for any repository whose actual visibility is more permissive than its intended state (e.g., intended 'private', actual 'public').",
              "From Git audit logs, aggregate all `repo.access` events hourly. Calculate the Shannon entropy of the repository names accessed within each hour. Alert when the hourly entropy score drops below the 10th percentile of its 30-day historical distribution, indicating a shift from broad to narrow, targeted access.",
              "Train an unsupervised anomaly detection model (e.g., Isolation Forest) on user sessions derived from Git audit logs. Use features like number of repositories cloned, number of forks, time of day, and user account age. Flag sessions with high anomaly scores that involve repositories intended to be private for manual review."
            ]
          },
          {
            "description": "A failed or successful authentication event is observed on a corporate resource from an external IP address, where the username corresponds to an account whose credentials were recently found in a public code repository.",
            "data_sources": [
              "Windows Event ID 4624",
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, Cloud Identity Provider Logs (e.g., Azure AD), Perimeter Firewalls",
            "action": [
              "Maintain a watchlist of usernames associated with credentials discovered in public repositories. Trigger a critical-severity alert when an authentication event (Windows Event ID 4624 for success, 4625 for failure) is recorded for a username on this watchlist originating from an IP address outside the corporate network range.",
              "For each user on the leaked credential watchlist, calculate a baseline authentication failure rate from external IP addresses over a 30-day window. Alert if the hourly failure rate for a user exceeds their baseline by more than 3 standard deviations, suggesting a targeted credential stuffing attempt.",
              "Develop a supervised classification model (e.g., Random Forest) to score the risk of each external authentication attempt. Use features such as `is_on_watchlist` (boolean), source IP ASN, source IP geolocation rarity, time of day, and login result. Trigger an alert for any authentication attempt that receives a malicious probability score above a predetermined threshold (e.g., > 0.9)."
            ]
          },
          {
            "description": "A single external source IP address generates authentication failures (Windows Event ID 4625) for numerous distinct user accounts within a short time frame, indicating a password spraying attack.",
            "data_sources": [
              "Windows Event ID 4625",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, VPN Concentrators, Web Application Firewalls (WAFs)",
            "action": [
              "Trigger a high-severity alert when a single source IP address generates Windows Event ID 4625 (Logon Failure) for more than 10 distinct user accounts within a 5-minute window.",
              "For each source IP, calculate the ratio of unique destination accounts to total failed login attempts within a 1-hour window. A ratio approaching 1.0 indicates password spraying. Alert when this ratio for a given IP exceeds 0.9 and the number of distinct accounts targeted is greater than 10.",
              "Apply a clustering algorithm (e.g., DBSCAN) to authentication log data over 15-minute windows. Use features such as source IP, user-agent, and target account. Identify and alert on clusters that contain a single source IP but a high number of distinct user accounts, as these clusters represent password spraying activity."
            ]
          },
          {
            "description": "An external IP address initiates a DNS request for or a connection to a non-public service endpoint (e.g., 'dev-api.internal.corp.com') whose name was sourced from a public code repository.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Perimeter Firewalls, DNS Resolvers, Network TAPs providing data to Zeek sensors",
            "action": [
              "Maintain a watchlist of hostnames intended for internal resolution only (e.g., '*.internal.corp.com'). Trigger a high-severity alert if a query for a hostname on this list is observed in `Zeek dns.log` originating from an external recursive resolver.",
              "Analyze `Zeek conn.log` to build a frequency table of all inbound (external IP to internal/DMZ IP) destination port connections over the last 30 days. Generate a medium-severity alert for any successful connection (`conn_state` = 'SF') to a destination port that falls into the bottom 1st percentile of observed ports.",
              "Train a One-Class SVM model on `Zeek conn.log` data to learn the characteristics of normal inbound connections. Use features like destination port, protocol, connection duration, and bytes transferred. Run the model against new connection logs and alert on any connection identified as an outlier."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]