[
  {
    "information_requirement": "Has an adversary altered or replaced a critical application binary or its in-memory process to impact data integrity? (PIR)",
    "tactic_id": "TA0040",
    "tactic_name": "Impact",
    "indicators": [
      {
        "technique_id": "T1565.003",
        "name": "Runtime Data Manipulation",
        "evidence": [
          {
            "description": "A file representing a critical application binary is modified or replaced by a process that is not an authorized software installation or patching utility.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Windows Event ID 4663",
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File systems of critical application servers (e.g., ERP, financial systems), database servers, and developer workstations.",
            "action": [
              "1. (Symbolic) Monitor file creation events (Sysmon Event ID 11) in directories containing critical application binaries. Correlate with the creating process information (Windows Event ID 4688). Generate a high-severity alert if the new file's hash matches a known malicious signature from a threat intelligence feed, or if the process name responsible for the write is not on a strict allowlist of approved installers and updaters (e.g., 'msiexec.exe', 'TrustedInstaller.exe', 'patch_manager.exe').",
              "2. (Statistical) For each critical application binary, establish a baseline of its file hash and size using a file integrity monitoring approach. Monitor for any change outside of scheduled maintenance windows. Calculate the frequency of modification events per file path. Alert if the daily modification count for a specific binary exceeds the 99th percentile of its historical 90-day count, indicating an abnormal rate of change.",
              "3. (ML) Train a classification model (e.g., Random Forest, Gradient Boosting) on features from file write events (Sysmon Event ID 11) targeting critical application directories. Use features such as: the writing process name, parent process name, user context, command line arguments, time of day, and whether the event occurs within a maintenance window. Label events as 'benign' (e.g., a patch from 'TrustedInstaller.exe') or 'malicious' (e.g., a write from 'powershell.exe' initiated by an unusual parent). Deploy the model to score new file write events, alerting on scores above a high-confidence threshold."
            ]
          },
          {
            "description": "A process is created using a command-line utility (e.g., reg.exe, powershell.exe) to modify a registry key or configuration file that controls how a critical application processes, validates, or displays data.",
            "data_sources": [
              "Sysmon Event ID 1",
              "Windows Event ID 4688",
              "Sysmon Event ID 13"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs and registry monitoring logs on servers hosting financial, industrial control, or proprietary data processing applications.",
            "action": [
              "1. (Symbolic) Monitor process creation events (Sysmon Event ID 1) and registry modification events (Sysmon Event ID 13). Create a ruleset to detect command-line arguments that modify sensitive application-specific registry keys. For example, alert on 'reg.exe add HKLM\\Software\\CriticalApp\\... /v DisplayFormat /d ...' when executed by a non-administrative or unexpected user account. The rule should be specific to registry paths known to affect data presentation or integrity.",
              "2. (Statistical) For each critical host, baseline the Shannon entropy of command-line arguments for processes that are known to interact with configuration files or the registry (e.g., 'powershell.exe', 'cmd.exe'). A sudden, sharp increase in command-line entropy can indicate obfuscated commands used to perform manipulation. Alert when the entropy for a 5-minute window exceeds 3 standard deviations from the 24-hour rolling average for that specific process.",
              "3. (ML) Use a pre-trained NLP model (e.g., a transformer-based classifier), fine-tuned on an internal dataset, to classify command-line strings as 'benign configuration', 'suspicious manipulation', or 'malicious'. The model should be trained to recognize patterns associated with altering data formats, disabling validation checks, or redirecting data streams via command-line instructions. Deploy to score all new process command lines on critical systems."
            ]
          },
          {
            "description": "A remote thread is created in the memory space of a critical application process by a source process that is not a standard operating system, security, or debugging utility.",
            "data_sources": [
              "Sysmon Event ID 8"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process memory space of critical applications (e.g., 'sqlserver.exe', 'oracle.exe', custom financial software) on production servers, monitored via endpoint detection and response (EDR) agents.",
            "action": [
              "1. (Symbolic) Monitor for process injection events using Sysmon Event ID 8 ('CreateRemoteThread'). Maintain an allowlist of legitimate source-target process pairs for remote thread creation (e.g., Source: 'lsass.exe', Target: any process; Source: 'procexp.exe', Target: any process). Generate a high-severity alert when the 'TargetImage' is a critical application (e.g., 'sap.exe') and the 'SourceImage' is not on the established allowlist.",
              "2. (Statistical) Build a graph model of normal inter-process remote thread creation activity over a 30-day period. For each critical process (target), baseline the set of normal source processes that inject into it. Use frequency analysis to identify rare source-target pairs. Alert when a 'CreateRemoteThread' event occurs involving a source-target pair that has not been observed in the last 90 days or has a historical frequency below a 0.1% threshold.",
              "3. (ML) Use a clustering algorithm (e.g., DBSCAN) on feature vectors derived from remote thread creation events. Features should include source process path, target process path, user context, and parent processes of both source and target. Identify clusters of normal behavior (e.g., debugging tools used by developers, system processes performing routine tasks). Treat any event that is classified as noise or does not fall into a known-good cluster as a high-risk anomaly requiring immediate investigation."
            ]
          },
          {
            "description": "A critical application process writes to or modifies its own executable file, a Dynamic-Link Library (DLL) it has loaded, or a critical system DLL outside of an authorized patching or update process.",
            "data_sources": [
              "Sysmon Event ID 11",
              "Sysmon Event ID 7"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Application installation directories (e.g., C:\\Program Files\\CriticalApp), system directories containing shared libraries (e.g., C:\\Windows\\System32), and process memory space on critical servers.",
            "action": [
              "1. (Symbolic) Correlate DLL load events (Sysmon Event ID 7) with file write events (Sysmon Event ID 11). Create a rule that triggers if a process writes to a file path that matches a DLL it has already loaded into memory. Additionally, alert if a process's file write target path is identical to its own image path (self-modification). Exclude known good software updaters from this rule.",
              "2. (Statistical) For each critical process, create a baseline of file write targets over a 30-day period. Profile the file extensions and directory paths it normally writes to (e.g., '.log', '.tmp' files in its AppData folder). Calculate the frequency of writes to executable file types ('.exe', '.dll', '.sys'). Alert if a critical process writes to an executable file, and this behavior has not been observed in its historical baseline.",
              "3. (ML) Train a one-class SVM model on feature vectors representing normal file write behavior for a critical process. Use features such as target file extension, target directory depth, time of day, and whether the target path is in a system-critical directory. Deploy the model to classify new file write patterns in real-time. Any pattern classified as an 'outlier' by the model indicates anomalous behavior, such as a database engine attempting to modify a system DLL, and should generate an alert."
            ]
          },
          {
            "description": "A critical data-processing application receives an inbound network connection from an internal source that is not an authorized client or management server, immediately preceding anomalous file or memory activity on the host.",
            "data_sources": [
              "Zeek conn.log",
              "Sysmon Event ID 3",
              "Sysmon Event ID 11",
              "Sysmon Event ID 8"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic to/from critical application server subnets, internal network gateways, and host-based endpoint logs on those servers.",
            "action": [
              "1. (Symbolic) Maintain an allowlist of authorized source IP addresses/subnets for inbound connections to critical applications (e.g., only the 'App-Client' VLAN can connect to the 'DB-Server' on port 1433). Correlate inbound network connections (Sysmon Event ID 3, Zeek conn.log) with subsequent host activity. Alert if an inbound connection from a non-allowlisted source IP is followed within 60 seconds by a high-risk event like process injection (Sysmon Event ID 8) or critical file modification (Sysmon Event ID 11) on the same host.",
              "2. (Statistical) For each critical server, build a baseline of all source IPs that connect to it over a 30-day period, creating a frequency distribution. Alert if the server receives a connection from a source IP that falls in the bottom 1st percentile of the frequency distribution (a 'rare' source). Additionally, calculate the baseline data volume ('orig_bytes' in Zeek) for these connections and alert if a new connection's payload size exceeds the 99th percentile of the historical average.",
              "3. (ML) Model the internal network as a graph where hosts are nodes and network connections are directed, weighted edges. Use a graph-based anomaly detection algorithm (e.g., based on GNNs or matrix factorization) to learn normal communication patterns. An edge representing a new or statistically improbable connection (e.g., a workstation from the marketing department VLAN connecting to a financial database server's administrative port) would be flagged as a high-risk anomaly, potentially indicating a precursor to a manipulation attack."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]