[
  {
    "information_requirement": "Is the adversary attempting to evade defenses by spoofing security alerts? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.011",
        "name": "Spoof Security Alerting",
        "evidence": [
          {
            "description": "A process creation event or network connection event contains a file hash, destination IP address, or domain name that matches an entry on a threat intelligence feed specifically associated with defense evasion or security tool spoofing malware.",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Enterprise Endpoints (Workstations and Servers), Network Egress/Ingress Points (e.g., Firewalls, Proxies), Threat Intelligence Platform",
            "action": [
              "Query all process creation events (Windows Event ID 4688) and network connection logs (Zeek conn.log, dns.log). Join the ProcessGUID/UID from these events and compare the file hash, destination IP, and requested domain against a high-confidence threat intelligence feed. Generate a high-severity alert for any match.",
              "For all executed process hashes not on an approved software allowlist, calculate their prevalence (percentage of endpoints where seen) across the enterprise over the last 30 days. Flag processes with a prevalence below a 1st percentile threshold that also initiate external network connections for further investigation.",
              "Train a supervised classification model (e.g., Gradient Boosting) on process execution events. Use features such as file hash reputation, parent process legitimacy, command-line argument entropy, file path location, and associated network connection features from Zeek (e.g., destination ASN, JA3/JA3S hash, connection duration, bytes transferred). The model should classify each process execution as benign, suspicious, or malicious, with a focus on identifying evasive characteristics."
            ]
          },
          {
            "description": "A process is created with command-line arguments containing keywords or patterns indicative of spoofing, such as manipulating Windows GUI elements (e.g., via PowerShell's Windows.Forms), using built-in notification tools like 'msg.exe' or 'mshta.exe' with suspicious content, or invoking scripts that mimic security alerts.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints, Centralized Log Aggregator (SIEM)",
            "action": [
              "Using a SIEM, create a detection rule that applies regular expressions to the command-line field of process creation events (Windows Event ID 4688). Search for patterns like 'msg.exe * Your system is secure', PowerShell invocations of '.ShowDialog()', or execution of VBScript/JScript with alert-like strings. Alert on any matches.",
              "For each unique process name (e.g., 'powershell.exe'), establish a baseline distribution of command-line argument length and character entropy. Using a 30-day moving window, alert when a new execution's command-line length or entropy exceeds the 99th percentile for that specific process, suggesting obfuscation or unusual parameters.",
              "Tokenize all command-line arguments from process creation events. Apply a clustering algorithm (e.g., DBSCAN or K-Means) to the resulting vectors. Manually review newly formed or low-density clusters, as they represent novel command-line patterns that deviate from established benign activity and may indicate new spoofing techniques."
            ]
          },
          {
            "description": "A trusted security tool process (e.g., 'MsMpEng.exe', 'SavService.exe') is observed as the parent process for an unexpected child process, particularly script interpreters ('powershell.exe', 'cscript.exe'), command shells ('cmd.exe'), or any unsigned binary.",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Endpoints with standard EDR/Antivirus solutions installed, Domain Controllers, Critical Application Servers",
            "action": [
              "From process creation logs (Windows Event ID 4688), build a process tree for each event. Maintain a strict allowlist of known-good child processes for each security tool executable in your environment. Generate an alert for any observed parent-child relationship that is not on this allowlist.",
              "For each parent process corresponding to a security tool, calculate the frequency of each child process it spawns across the enterprise. Alert when a parent-child relationship occurs that has a historical probability of less than 0.1%, indicating an extremely rare and suspicious event.",
              "Model process parent-child relationships as a directed graph. Use a graph-based anomaly detection algorithm (e.g., GraphSAGE with an anomaly scoring head) trained on a baseline of normal process execution chains. The model will score new process chains, flagging those with anomalous structures, such as a security tool node having an edge to an unexpected scripting engine node."
            ]
          },
          {
            "description": "A logical contradiction is observed within a short time window on a single host, where a security tool's own log source reports a 'healthy' or 'scan complete' status, while the Windows System or Service Control Manager log concurrently reports that the tool's associated service has been stopped or has terminated unexpectedly.",
            "data_sources": [
              "Windows Event ID 7036",
              "Windows Event ID 7034",
              "Windows Application Event Log",
              "Microsoft-Windows-Windows Defender/Operational",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized SIEM Platform (for event correlation), All Windows Endpoints (forwarding Service Control Manager and Application logs), Network Security Monitoring sensors at key chokepoints",
            "action": [
              "Implement a SIEM correlation rule that triggers if a host generates a 'service stopped' or 'service terminated' event (Windows Event IDs 7036, 7034) for a security service (e.g., 'WinDefend'), and within the subsequent 5 minutes, the same host logs a 'healthy status' message from that same application's event log. Also correlate with high-confidence network IOCs from Zeek.",
              "On a per-host basis, track the time series count of 'service stopped' events and 'healthy' status events for each security tool. Calculate the Pearson correlation coefficient between these two series over a rolling 24-hour window. A significant negative correlation or a decorrelation from a normally positive baseline could indicate that healthy messages are being spoofed while the service is being tampered with.",
              "For each security tool, create a state transition model (e.g., a Hidden Markov Model) based on its event log sequence (e.g., 'service started' -> 'scan started' -> 'scan complete' -> 'healthy status'). Train the model on legitimate event sequences. Feed new event sequences into the model and alert if the model calculates a low probability for the observed sequence, indicating a deviation from normal operation, such as a 'healthy status' appearing without a preceding 'scan complete'."
            ]
          },
          {
            "description": "A process is observed running with a name that is a misspelling of a legitimate security tool (e.g., 'MsMpEnge.exe' vs 'MsMpEng.exe') or uses the correct name but executes from an unauthorized file path (e.g., '%APPDATA%' instead of '%ProgramFiles%').",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows Endpoints (File System and Process Monitoring), Network Firewalls and Proxies",
            "action": [
              "Create and maintain a dictionary of legitimate security tool executables with their required properties (name, full path, file hash). Query all process creation events (Windows Event ID 4688) and alert if a process name matches an entry but the path or hash does not, or if the process name has a Levenshtein distance of 1 or 2 from a legitimate name.",
              "For all running processes, calculate the entropy of the full file path. Establish a baseline entropy score for legitimate security tool paths. Alert on any process impersonating a security tool name whose file path entropy is in the 98th percentile or higher, indicating execution from a randomized or deep, non-standard directory.",
              "Train a one-class SVM model using features from known-good security processes. Features should include: file path depth, parent process name, binary signature status (signed/unsigned), and presence of PE metadata. Any new process execution that is classified as an outlier by the model should be flagged as a potential impersonation attempt."
            ]
          },
          {
            "description": "The frequency of 'healthy' or 'status OK' messages from a specific security tool on an endpoint deviates significantly from its established baseline, manifesting as either a sudden, high-volume flood of messages or a complete and prolonged cessation of expected periodic reports.",
            "data_sources": [
              "Windows Application Event Log",
              "Microsoft-Windows-Windows Defender/Operational"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Centralized Log Management Platform (SIEM), All Windows Endpoints",
            "action": [
              "Create a stateful rule that monitors for 'security control disabled' events. If such an event is not followed by a corresponding 'security control enabled' event from the same host and for the same tool within a 15-minute window, but 'healthy' status messages for that tool continue to be logged, generate an alert for a logical contradiction.",
              "For each host-tool combination, model the hourly count of 'healthy' status reports using a 30-day historical baseline. Generate an alert if the current hour's count exceeds the baseline mean by more than 3 standard deviations (Z-score > 3) or if the count drops to zero and remains there for a period exceeding the normal maximum reporting interval (e.g., 24 hours).",
              "For each host, apply a time-series forecasting model (e.g., Prophet or ARIMA) to the volume of security status reports. The model will predict the expected number of reports for the next time interval. If the actual observed count falls significantly outside the model's prediction interval (confidence bounds), flag it as an anomaly indicative of either spoofing (too many) or tool failure/disabling (too few)."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]