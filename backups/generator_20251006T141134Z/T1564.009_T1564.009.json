[
  {
    "information_requirement": "Is an adversary using macOS resource forks to hide malicious payloads or executables for defense evasion? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1564.009",
        "name": "Resource Forking",
        "evidence": [
          {
            "description": "The content of a file's resource fork matches a known-malicious hash or has an entropy value indicative of packing or encryption.",
            "data_sources": [
              "ES_EVENT_TYPE_NOTIFY_CREATE file creation events",
              "ES_EVENT_TYPE_NOTIFY_WRITE file write events",
              "File system audit logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Development environments, common staging directories like /tmp/, ~/Downloads/, ~/Documents/",
            "action": [
              "For each file write or creation event (ES_EVENT_TYPE_NOTIFY_WRITE, ES_EVENT_TYPE_NOTIFY_CREATE), calculate the SHA256 hash of its resource fork content. Correlate this hash against a threat intelligence feed of known malicious file hashes. Generate a high-priority alert upon a match.",
              "For each file with a non-zero resource fork, calculate the Shannon entropy of the fork's content. Establish a baseline entropy distribution for resource forks from known-good, code-signed applications. Flag any file whose resource fork entropy exceeds the 95th percentile of this baseline for further analysis, as this suggests encryption or packing.",
              "Develop a binary classification model (e.g., Random Forest, Gradient Boosting) trained on labeled data. Features should include resource fork size, resource fork entropy, parent process name, file permissions, file type, and whether the parent application is signed. Deploy the model to score file modification events in real-time, flagging files with a high probability score of being 'malicious-fork'."
            ]
          },
          {
            "description": "A process outside of a pre-defined set of legitimate system utilities (e.g., Finder) writes data to a file's resource fork.",
            "data_sources": [
              "ES_EVENT_TYPE_NOTIFY_FORK process fork events",
              "ES_EVENT_TYPE_NOTIFY_EXEC process execution events",
              "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Development environments",
            "action": [
              "Create a detection rule that alerts when a process name from a watchlist of suspicious writers (e.g., curl, wget, python, bash, osascript, Word, Excel) is observed in a file write event that targets a resource fork (/..namedfork/rsrc).",
              "Aggregate all process names associated with resource fork write events over a 30-day period. Calculate the frequency of each process. Alert on any process that is not on an allowlist of known-good system utilities (e.g., Finder, Xcode) and whose frequency falls within the lowest 5th percentile (least frequent), indicating rare and potentially suspicious activity.",
              "Develop a clustering model (e.g., DBSCAN) on graph-based features representing process lineage. Features should include the parent process, child process, and the action taken (e.g., 'write_to_resource_fork'). Clusters of normal behavior will be dense (e.g., Finder writing to resource forks). Flag any process chain that falls outside of these dense clusters as an outlier, particularly chains originating from browsers or office applications that lead to a resource fork write."
            ]
          },
          {
            "description": "An executable file (+x permission) is observed with a resource fork size greater than zero bytes.",
            "data_sources": [
              "ES_EVENT_TYPE_NOTIFY_SETATTR file attribute modification events",
              "ES_EVENT_TYPE_NOTIFY_CREATE file creation events",
              "ES_EVENT_TYPE_NOTIFY_WRITE file write events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations (macOS), macOS-based servers, Staging directories (e.g., /tmp, ~/Downloads)",
            "action": [
              "Implement a detection rule that triggers when a file creation or attribute modification event shows the file has execute permissions AND its com.apple.ResourceFork extended attribute size is greater than zero. Suppress alerts for files signed by trusted developers or located in paths belonging to allowlisted legacy applications.",
              "Continuously monitor the size of resource forks for all files with execute permissions. Calculate a moving average and standard deviation of resource fork size for this file population. Alert on any executable file whose resource fork size is greater than 3 standard deviations above the moving average, indicating a statistical outlier.",
              "Apply a time-series anomaly detection algorithm (e.g., SARIMA) to the count of new executable files with non-zero resource forks, aggregated per host per hour. A sudden spike in this count that the model flags as an anomaly, deviating significantly from the established seasonal and trend baseline for that host, should generate an alert for a potential mass deployment or worm-like activity."
            ]
          },
          {
            "description": "A sequence of events occurs on a single host within a short time window: 1) a file download from an external source, 2) a write operation to that file's resource fork, and 3) execution of a process related to the downloaded file.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "ES_EVENT_TYPE_NOTIFY_WRITE file write events",
              "ES_EVENT_TYPE_NOTIFY_EXEC process execution events"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points, User workstations (macOS), User download folders",
            "action": [
              "Create a stateful correlation rule that joins network and endpoint data. Trigger an alert when, on a single host and within a 5-minute window, the following sequence is observed: 1) Zeek files.log records a file download. 2) An endpoint log shows a write to the resource fork of the same file path. 3) An endpoint log shows the execution of a process where the image path or parent process is related to the downloaded file. This indicates a 'download-fork-execute' payload delivery.",
              "For all sequences matching the 'download-fork-execute' pattern, calculate the time delta between the initial file write (from network logs) and the final execution (from endpoint logs). Maintain a historical distribution of these time deltas for all user-initiated executions. A sequence involving a resource fork modification where the time delta falls in the lowest 5th percentile (e.g., less than 15 seconds) should be treated as highly suspicious, as it suggests automated execution rather than user interaction.",
              "Train a sequence analysis model (e.g., LSTM, Hidden Markov Model) on event streams from endpoints, including network connections, file writes, resource fork modifications, and process executions. The model will learn normal sequences of user and system behavior. A sequence of 'network_download -> resource_fork_write -> process_exec' will have a low probability under the trained model and will be flagged as an anomalous, high-risk sequence."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk"
    ]
  }
]