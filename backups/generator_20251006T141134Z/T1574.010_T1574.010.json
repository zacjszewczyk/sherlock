[
  {
    "information_requirement": "Is the adversary maintaining persistence by modifying service binaries?",
    "tactic_id": "TA0003",
    "tactic_name": "Persistence",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write operation is logged for a file path defined in a Windows service's ImagePath registry key, and the resulting file's hash is present on a threat intelligence feed of known-malicious file hashes.",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688",
              "Windows Security Event ID 4657"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Windows Service Control Manager Registry (HKLM\\SYSTEM\\CurrentControlSet\\Services\\*\\ImagePath) on all endpoints and servers; File systems on all Windows hosts, particularly in System32 and Program Files directories.",
            "action": [
              "Symbolic: Create a detection rule that triggers on Windows Event ID 4663 (An attempt was made to access an object) where the Object Name corresponds to a known service binary path. Upon trigger, hash the modified file and cross-reference the hash against a list of known-malicious file hashes from a threat intelligence platform. Generate a critical alert on any match.",
              "Statistical: For each service binary, maintain a 180-day baseline of its file hash and the timestamp of its last modification. Upon a file write event (Windows Event ID 4663), if the new hash is different, calculate the time since the last change. If this duration exceeds a high percentile (e.g., 95th percentile, indicating a rarely changed file) and occurs outside a defined maintenance window, generate a high-severity alert.",
              "Machine Learning: Aggregate file write events (Windows Event ID 4663) for service executable directories into hourly counts. Train a time-series forecasting model (e.g., SARIMA) on this data to learn the normal rhythm of patching cycles. Generate an anomaly alert when the observed count of file writes in a time window significantly exceeds the model's predicted forecast with its confidence interval."
            ]
          },
          {
            "description": "A process writes to a service executable path, where the writing process is unsigned, originates from a temporary or user-writable directory, or is not a known, trusted installer process (e.g., 'msiexec.exe', 'TrustedInstaller.exe').",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process execution logs from all Windows endpoints, focusing on workstations of privileged users and standard user populations.",
            "action": [
              "Symbolic: Correlate file write events (Windows Event ID 4663) on service binary paths with the creating process information from Windows Event ID 4688. Generate an alert if the Creator Process Name is unsigned, located in a non-standard path (e.g., AppData, Temp, Public), or is not on an allowlist of approved patch management processes.",
              "Statistical: For each service binary, build a baseline profile of the processes that legitimately modify it. Calculate the frequency of each unique 'Creator Process Name' seen modifying the service binary. A modification by a process that is statistically rare (e.g., in the bottom 5th percentile of frequency) for that specific service binary triggers a high-risk score and potential alert.",
              "Machine Learning: Train a classification model (e.g., Random Forest, XGBoost) to predict if a file modification is 'benign' or 'suspicious'. Use features from the writing process (Event ID 4688) such as its signature status, path entropy, parent process, and command-line arguments. Apply this model to any process observed writing to a service binary path to flag suspicious modifications."
            ]
          },
          {
            "description": "A sequence of events is observed for a single service binary path within a short time window: a permission change by a non-administrative user, a file write by the same user, and a subsequent service start or restart event, all occurring outside a standard maintenance window.",
            "data_sources": [
              "Windows Security Event ID 4670",
              "Windows Security Event ID 4663",
              "Windows System Event ID 7036"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Event logs from high-value assets such as Domain Controllers, Certificate Authority Servers, and Virtualization Hosts.",
            "action": [
              "Symbolic: Implement a stateful detection rule that looks for the following sequence for the same file path and user account within a 15-minute window: 1) Event ID 4670 (Permissions on an object were changed). 2) Event ID 4663 (An attempt was made to access an object) with Write access. 3) Event ID 7036 (The service entered the running state). If the user is not a member of a privileged group, generate a critical alert.",
              "Statistical: Baseline the accounts that normally perform permission changes (Event ID 4670) on service-related directories. For any permission change event, assign a risk score based on the rarity of the account performing the action. If a subsequent file write (Event ID 4663) by the same rare account occurs, escalate the score. A cumulative score exceeding a dynamically calculated threshold (e.g., 3 standard deviations above the mean risk) triggers an alert.",
              "Machine Learning: Use a sequence analysis model like a Hidden Markov Model (HMM) where the hidden states are 'Benign Maintenance', 'Suspicious Activity', and 'Confirmed Hijack'. The observed events are permission changes (4670), file writes (4663), and service starts (7036), along with the user context. A transition path from 'Benign' to 'Suspicious' to 'Confirmed Hijack' based on an anomalous sequence of observations generates a high-confidence alert."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary attempting to elevate privileges by modifying service binaries?",
    "tactic_id": "TA0004",
    "tactic_name": "Privilege Escalation",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event is logged for the executable path of a service configured to run with 'NT AUTHORITY\\SYSTEM' privileges, and the new file's hash matches a known privilege escalation tool or implant.",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Multi-user systems like Remote Desktop Session Hosts and Citrix servers; Endpoints used by developers, system administrators, and other privileged roles.",
            "action": [
              "Symbolic: Maintain a list of service binaries configured to run as SYSTEM. Monitor these specific file paths for write events (Windows Event ID 4663). Upon detection, hash the new file and compare it against a CTI feed specifically curated for privilege escalation tools (e.g., Mimikatz, PowerSploit, Juicy Potato). An exact match triggers a critical alert.",
              "Statistical: For all services running as SYSTEM, establish a baseline of the user accounts that perform write operations on their corresponding binaries (typically only 'SYSTEM' or 'TrustedInstaller'). A file write (Event ID 4663) to a SYSTEM service binary initiated by any other user account is a high-risk statistical anomaly and should trigger an immediate high-severity alert.",
              "Machine Learning: Train a supervised classification model on process command-line arguments (from Windows Event ID 4688) to identify commands associated with privilege escalation attempts. When a file write (Event ID 4663) to a SYSTEM service binary occurs, analyze the command line of the responsible parent process. If the model classifies the command as 'privilege-escalation-related' with high confidence, generate an alert."
            ]
          },
          {
            "description": "A process associated with a known service running as 'NT AUTHORITY\\SYSTEM' spawns a child process (e.g., cmd.exe, powershell.exe) whose command line contains arguments for user creation, group modification, or credential access.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Windows System Event ID 7036",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Domain Controllers, Active Directory Federation Services (ADFS) servers, RADIUS servers, and other core authentication infrastructure.",
            "action": [
              "Symbolic: Monitor process creation events (Windows Event ID 4688) where the Parent Process is a known high-privilege service running as SYSTEM, and the New Process Name is an interactive shell or system utility. Use regular expressions on the Command Line field to detect keywords like 'net user /add', 'net localgroup administrators', 'add-adgroupmember', or 'lsass'. A match generates a critical alert.",
              "Statistical: For each high-privilege service, profile the distribution of its child processes and the entropy of their command-line arguments. An alert is triggered when a service spawns a statistically rare child process (e.g., one never seen before) or if the command-line entropy for a common child (like powershell.exe) exceeds a learned threshold (e.g., 98th percentile), which can indicate obfuscation or complex commands.",
              "Machine Learning: Use an unsupervised anomaly detection model (e.g., Isolation Forest) on process creation events (Windows Event ID 4688) originating from high-privilege services. Features should include parent/child process names, command-line length, and a flag for command-line obfuscation patterns. The model will flag anomalous parent-child process relationships that deviate from normal system operation."
            ]
          },
          {
            "description": "A user account not in a pre-defined administrative group successfully executes a permission change on a file or directory associated with a SYSTEM-level service, immediately followed by a file write operation to that same path by the same user.",
            "data_sources": [
              "Windows Security Event ID 4670",
              "Windows Security Event ID 4663"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "File servers hosting application binaries; Standard end-user workstations where local administrative rights are restricted.",
            "action": [
              "Symbolic: Create a stateful detection rule that triggers when Event ID 4670 (permission change) on a SYSTEM service's binary path is logged for a Subject/Security ID not in 'Domain Admins', 'Enterprise Admins', or 'SYSTEM'. If a subsequent Event ID 4663 (file write) for the same path and Subject/Security ID occurs within 5 minutes, create a critical incident.",
              "Statistical: Build a frequency distribution of user accounts that perform permission changes (Event ID 4670) on service-related file paths. Any account falling below a low frequency threshold (e.g., seen performing this action less than twice in 90 days) is flagged. If this rare event is followed by a file write (Event ID 4663) by the same user, the combined low probability of the sequence triggers a high-severity alert.",
              "Machine Learning: Employ a sequence analysis model (e.g., a Gated Recurrent Unit - GRU) to learn valid sequences of events related to software updates and administration. The model would be trained on event tuples of (EventID, UserName, ObjectName). An observed sequence like [4670, StandardUser, C:\\services\\svc.exe] -> [4663, StandardUser, C:\\services\\svc.exe] would be flagged as a significant anomaly indicative of privilege escalation."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  },
  {
    "information_requirement": "Is the adversary evading defenses by modifying service binaries?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1574.010",
        "name": "Services File Permissions Weakness",
        "evidence": [
          {
            "description": "A file write event modifies a service binary belonging to a security product (e.g., EDR, AV, logging agent), and the new file's digital signature is invalid, missing, or issued by a publisher not on a trusted allowlist.",
            "data_sources": [
              "Windows Security Event ID 4663",
              "Windows Security Event ID 4688",
              "Autoruns/Sysinternals Data"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All endpoints and servers, with a focus on monitoring directories containing security software agents (e.g., Program Files\\Windows Defender, Program Files\\CrowdStrike).",
            "action": [
              "Symbolic: Maintain a list of file paths for critical security service binaries and an allowlist of their trusted code-signing publishers. Upon a file write (Event ID 4663) to these paths, validate the new file's digital signature status and publisher. Alert immediately if the signature is invalid, absent, or the publisher is not on the allowlist.",
              "Statistical: Periodically scan and baseline the signature status and hash of all security service binaries. After a file write is detected on a security service binary, re-validate its signature. A state change from 'valid' to 'invalid' or 'missing' is a high-risk statistical anomaly that should generate a critical alert, as it indicates potential tampering.",
              "Machine Learning: Train a classification model to distinguish between legitimate security software updaters and other processes. When a file write occurs on a signed security service binary, feed the attributes of the writing process (parent process, command line, signature status) to the model. If the model classifies the writer as 'suspicious' with high confidence, trigger a high-confidence alert for defense evasion."
            ]
          },
          {
            "description": "A legitimate service process initiates an outbound network connection to a destination with a low reputation score, or the connection exhibits anomalous characteristics (e.g., JA3/JA3S hash, User-Agent, destination port) matching known command-and-control (C2) profiles.",
            "data_sources": [
              "Windows Security Event ID 4688",
              "Zeek conn.log",
              "Zeek ssl.log",
              "Zeek http.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network egress points (Firewalls, Proxies), DNS resolvers, and host-level network logs from all endpoints and servers.",
            "action": [
              "Symbolic: Correlate process creation events (Windows Event ID 4688) with network connection logs (Zeek conn.log) using Process GUIDs or host/port/time tuples. For processes associated with services, join the destination IP/domain against a C2 threat intelligence feed. Also, check Zeek ssl.log for JA3/JA3S hashes and Zeek http.log for User-Agents known to be associated with malware. Alert on any match.",
              "Statistical: For each service process, build a baseline of its network behavior including common destination ports, protocol usage, data volume, and domain TLDs/entropy from Zeek logs. Alert if a service's outbound connection uses a destination port outside the 98th percentile of its normal behavior, connects to a domain with unusually high entropy, or exhibits a JA3 hash that is statistically rare for that process.",
              "Machine Learning: Use a time-series model to analyze the periodicity and data size of outbound connections (from Zeek conn.log) on a per-service-process basis. The model should flag periodic, 'heartbeat' connections with regular intervals and consistent packet sizes that are uncharacteristic for the service, as this is a strong indicator of an active C2 channel established by a hijacked service."
            ]
          },
          {
            "description": "A service process, which has a historically stable and limited set of child processes, spawns a command interpreter (cmd.exe, powershell.exe) or a known Living-off-the-Land Binary (LoLBin) not associated with its normal function.",
            "data_sources": [
              "Windows Security Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Process creation logs from all Windows workstations and servers, particularly critical application servers and domain controllers.",
            "action": [
              "Symbolic: Create a high-severity rule to monitor process creation events (Windows Event ID 4688) where the Parent Process Name is a known service executable (e.g., spoolsv.exe, svchost.exe with specific service parameters) and the New Process Name is on a watchlist of LoLBins (e.g., certutil.exe, msbuild.exe, cmstp.exe). This parent-child relationship should be treated as highly suspicious.",
              "Statistical: For every parent process on the system, build a baseline of its child processes over a 30-day period, creating a parent-child process frequency map. Any process creation event that represents a statistically rare relationship (e.g., a parent-child pair never seen before or seen in <0.01% of instances for that parent) should be flagged for investigation.",
              "Machine Learning: Train an autoencoder neural network on legitimate process creation event data (Windows Event ID 4688), using one-hot encoded features for parent and child process names. When a hijacked service spawns an anomalous child process, the model will fail to reconstruct the event with low error, resulting in a high reconstruction error score that flags the event as a likely threat."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]