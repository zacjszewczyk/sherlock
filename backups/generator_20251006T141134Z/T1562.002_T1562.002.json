[
  {
    "information_requirement": "Has the adversary attempted to evade defenses by disabling or manipulating Windows Event Logging?",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1562.002",
        "name": "Disable Windows Event Logging",
        "evidence": [
          {
            "description": "Execution of a process where the process name, file hash, or command-line arguments match known indicators for log-tampering tools such as Mimikatz, Invoke-Phant0m, or other offensive security frameworks.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, with a priority on Domain Controllers, critical application servers, and administrator workstations.",
            "action": [
              "Create a detection rule that continuously monitors process creation events. Match the 'ProcessName' or file hash against a threat intelligence feed of known log-tampering tools. Use regular expressions on the command-line field to detect specific malware modules or tool arguments associated with log clearing. Generate a high-severity alert on any match.",
              "Implement a prevalence analysis script that calculates the rarity of each process name and command-line argument set across the enterprise over a rolling 30-day baseline. Assign a risk score based on inverse frequency. Flag any process for review if its prevalence is below a threshold (e.g., <0.1% of hosts) and its parent process is a common scripting engine or remote administration tool (e.g., powershell.exe, wmic.exe).",
              "Train and deploy a supervised classification model (e.g., Random Forest, Gradient Boosting) on labeled process execution data. Use features such as process name entropy, command-line length and entropy, parent process name, user context, and argument structure. The model will score new process events in real-time and alert on those classified as 'log-tampering' with high confidence."
            ]
          },
          {
            "description": "Execution of native Windows utilities (e.g., auditpol.exe, sc.exe, wevtutil.exe) with specific parameters to clear logs, stop the 'EventLog' service, or modify audit policies. This also includes direct modification of registry keys controlling the EventLog service or specific log providers.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 4657",
              "Windows Event ID 12 (Sysmon)",
              "Windows Event ID 13 (Sysmon)",
              "Windows Event ID 4719",
              "Windows Event ID 1102",
              "Windows Event ID 104",
              "Windows Event ID 7035"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, particularly Domain Controllers which manage enterprise-wide audit policies and member servers hosting critical services.",
            "action": [
              "Create high-fidelity correlation rules to detect specific, high-risk command-line invocations in process creation events (Event ID 4688/Sysmon ID 1), such as 'wevtutil.exe cl', 'auditpol.exe /clear', 'auditpol.exe /set /category:* /success:disable', 'sc.exe config eventlog start= disabled', or 'sc.exe stop eventlog'. Correlate these with discrete events like Security Log cleared (Event ID 1102), System Log cleared (Event ID 104), Audit Policy changed (Event ID 4719), or EventLog service entering a stopped state (Event ID 7035).",
              "For each user and host, establish a baseline of execution frequency for 'auditpol.exe', 'wevtutil.exe', and 'sc.exe'. Calculate the 99th percentile for execution frequency in a 24-hour window. Alert when the execution count for any of these utilities by a non-administrative user or on a server outside of a documented maintenance window exceeds this threshold. Additionally, calculate the Shannon entropy of the command-line arguments for these processes and alert on a deviation > 3 standard deviations from the user's or host's baseline entropy.",
              "Develop a sequence analysis model (e.g., a Hidden Markov Model or Recurrent Neural Network) to identify suspicious chains of activity. Train the model to recognize a common attack pattern: [1] Remote login (Event ID 4624 Type 3 or 10), followed by [2] reconnaissance command (e.g., 'whoami.exe', 'net user'), followed by [3] execution of 'auditpol.exe /clear' or 'wevtutil.exe cl', all from the same Logon ID within a 5-minute window. The model would flag this sequence as a high-probability defense evasion attempt."
            ]
          },
          {
            "description": "A sustained and anomalous cessation or statistically significant reduction in the volume of event logs received from a specific host by a central log aggregator, which is not correlated with a scheduled maintenance window or a graceful system shutdown event.",
            "data_sources": [
              "SIEM ingestion health logs",
              "Windows Event Forwarding operational logs",
              "Windows Event ID 1074"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Central log aggregation infrastructure (SIEM, data lake) and Windows Event Forwarding (WEF) collection servers.",
            "action": [
              "Configure a 'heartbeat' rule in the SIEM that triggers an alert if no logs of any type are received from a critical asset for a period exceeding a defined threshold (e.g., 20 minutes). This rule should automatically suppress alerts for hosts that have a corresponding graceful shutdown event (Event ID 1074) or are listed in a maintenance calendar.",
              "For each log-forwarding endpoint, model the log volume (events per minute) as a time series. Calculate a 1-hour moving average and standard deviation. Generate an alert when the current log volume drops more than 3 standard deviations below the moving average for a sustained period (e.g., >10 minutes) and is not preceded by a graceful shutdown event.",
              "Implement a time series forecasting model (e.g., Prophet or LSTM) for each host's log volume, accounting for daily and weekly seasonality. The model will predict the expected number of logs for the next 5-minute interval. If the actual received log count falls outside the model's 99% prediction interval (i.e., below the lower bound), generate an anomaly alert for investigation."
            ]
          },
          {
            "description": "A suspicious temporal sequence of events on a single host, such as an unsigned process execution followed by a log clearing event and then an outbound network connection to a non-standard port or low-reputation IP address.",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 1 (Sysmon)",
              "Windows Event ID 1102",
              "Windows Event ID 7035",
              "Windows Event ID 4719",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "All Windows endpoints and servers, and network egress points (e.g., firewalls, proxies) for correlating command-and-control traffic.",
            "action": [
              "Define a stateful correlation rule that triggers when the following events occur on the same host within a 10-minute window: [1] Process execution (Event ID 4688) from a world-writable directory (e.g., C:\\Users\\Public\\) OR an unsigned binary, followed by [2] a log tampering event (Event ID 1102, 7035, or `wevtutil cl` command), followed by [3] an external network connection (Zeek conn.log) to a known malicious IP or an IP with no DNS history.",
              "Implement a risk scoring model where individual events are assigned points (e.g., running 'wevtutil cl' = 50 points, process from C:\\Temp = 10 points, connection to rare IP = 20 points). Apply a time decay function to the scores. If the cumulative score for a single host's event stream exceeds a dynamic threshold calculated from the 99th percentile of all host scores within a 1-hour sliding window, flag the host for investigation.",
              "Construct host activity graphs where nodes are entities (processes, files, IPs) and edges represent interactions (e.g., 'executed', 'connected to'). Use a graph neural network (GNN) or other graph-based anomaly detection method to identify rare and malicious subgraphs indicative of log tampering followed by C2 activity. This pattern (e.g., `powershell.exe` -> `sc.exe stop eventlog` -> `1.2.3.4:4444`) would be flagged as anomalous compared to learned baseline graphs of normal administrative activity."
            ]
          },
          {
            "description": "A gap in the sequential 'EventRecordID' field within a specific event log stream (e.g., Security, System) from a single host that is not preceded by a system startup event.",
            "data_sources": [
              "Raw Windows Security Event Log (evtx)",
              "Raw Windows System Event Log (evtx)",
              "Windows Event ID 6005"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Central log parsing and storage platform, or endpoint agents with direct access to raw log files.",
            "action": [
              "Write a query to run every 15 minutes that parses events by host and log type, sorting by 'EventRecordID'. Detect if `RecordNumber(n) - RecordNumber(n-1)` exceeds a threshold (e.g., 100 records). Before alerting, verify that a system startup event (e.g., Event ID 6005 in the System log) did not occur on that host between the timestamps of the two gapped records.",
              "For each host, create a statistical profile of normal 'EventRecordID' gap sizes that occur during a legitimate reboot cycle. For any newly detected gap that is not associated with a reboot, calculate its Z-score relative to the host's typical event generation rate. A high Z-score (e.g., > 3) indicates an anomalously large gap that signifies probable log deletion.",
              "Use a linear regression model to predict the next expected 'EventRecordID' based on the previous 100 records and their timestamps, learning the normal rate of event generation for each host and log type. If the actual 'EventRecordID' of the next received event is significantly greater than the predicted number plus a 99% confidence interval, flag it as a potential log tampering event, indicating that a chunk of logs was likely deleted."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]