[
  {
    "information_requirement": "Has the adversary attempted to evade defenses by weakening encryption on network devices? (PIR)",
    "tactic_id": "TA0005",
    "tactic_name": "Defense Evasion",
    "indicators": [
      {
        "technique_id": "T1600.001",
        "name": "Reduce Key Space",
        "evidence": [
          {
            "description": "A file transfer logged in Zeek files.log shows a destination IP address matching a managed network device asset, and the file's MD5, SHA1, or SHA256 hash matches an entry in a threat intelligence feed of known malicious firmware.",
            "data_sources": [
              "Zeek files.log",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network management VLANs, administrative jump boxes, core routers and switches, VPN concentrators, and network taps monitoring traffic to/from management subnets.",
            "action": [
              "Create a rule to alert when an event in Zeek files.log has a `id.resp_h` (destination IP) that is present in the network device asset inventory, and the `md5` or `sha1` hash field matches a known malicious hash from an integrated threat intelligence feed.",
              "For all file transfers to network devices, establish a 30-day rolling baseline of file sizes and MIME types (`mime_type` in files.log). Generate an alert if a new file transfer's size exceeds the 95th percentile, or if the `mime_type` is seen for the first time in 30 days. Correlate alerts with authorized change management tickets.",
              "Train a supervised classification model (e.g., Random Forest) on labeled historical file transfer data (from Zeek files.log and conn.log) to network devices. Use features such as source IP, destination IP, protocol, file `size`, `mime_type`, `is_orig`, time of day, and day of week. The model will classify each new transfer as 'benign' or 'suspicious', alerting on the latter."
            ]
          },
          {
            "description": "A Windows Event ID 4688 is generated on a designated administrative host, where the `NewProcessName` corresponds to a network CLI utility (e.g., plink.exe, scp.exe, tftp.exe) and the `CommandLine` contains both an IP address of a managed network device and keywords indicative of a firmware update (e.g., 'copy', 'tftp', 'firmware', '.bin', '.img').",
            "data_sources": [
              "Windows Event ID 4688"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Designated network administration workstations, jump servers, and configuration management servers.",
            "action": [
              "Create a detection rule that triggers on Windows Event ID 4688 where `NewProcessName` is in a watchlist of network management tools (plink.exe, scp.exe, etc.) AND the `CommandLine` field contains an IP from the network device asset list AND the `CommandLine` contains keywords from a watchlist ('copy', 'upgrade', '.bin', '.pkg', 'firmware').",
              "For each administrative user (`SubjectUserName`), baseline the command lines (`CommandLine`) used with network management tools. Calculate the Shannon entropy for each new command line. Alert if the entropy is a high-side outlier (e.g., > 99th percentile) for that user, or if the command line is a 'first seen' for that user-tool combination.",
              "Develop a sequence-to-sequence autoencoder (e.g., LSTM-based) trained on sequences of `CommandLine` executions per user session on administrative hosts. The model learns normal administrative workflows. Flag any session where the reconstruction error of the command sequence exceeds a dynamically learned threshold, indicating a deviation from established patterns."
            ]
          },
          {
            "description": "Analysis of Zeek ssl.log and ssh.log shows a statistically significant increase in connections to or from a managed network device that use deprecated protocols (`version` field), weak ciphers (`cipher` field), or weak SSH key exchange/MAC algorithms (`kex_alg`, `mac_alg` fields).",
            "data_sources": [
              "Zeek ssl.log",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network traffic inspection points monitoring connections to/from critical infrastructure like VPN gateways, external-facing firewalls, and core switches. Network taps providing traffic to Zeek sensors, specifically at network chokepoints and in management VLANs.",
            "action": [
              "Create a rule that generates a high-severity alert when a Zeek ssl.log or ssh.log entry involves a managed network device IP and the `version`, `cipher`, `kex_alg`, or `mac_alg` field contains a value from a predefined list of weak/deprecated cryptographic parameters (e.g., 'SSLv3', 'RC4', 'md5').",
              "For each network device, create a 30-day rolling time series of the counts for each `cipher` and `version` seen in Zeek ssl.log. Alert if the count of a weak cipher/version in a 1-hour window exceeds the 99th percentile of its historical distribution for that device. Use a Chi-squared test to detect significant shifts in the overall distribution of ciphers compared to the previous day's baseline.",
              "For each network device and each weak cipher/protocol, train a time series forecasting model (e.g., Prophet or ARIMA) on its historical usage volume from Zeek ssl.log. The model should predict the expected volume for the next hour. Generate an alert if the observed volume of a weak cipher/protocol exceeds the upper bound of the model's prediction interval."
            ]
          },
          {
            "description": "A correlated sequence of events is observed: 1) A large file transfer (e.g., >10MB) to a network device is logged in Zeek files.log. 2) This is followed by a period of device unreachability, identified by a lack of expected heartbeat traffic (e.g., SNMP, syslog). 3) Upon re-establishing connectivity, the device's traffic profile in Zeek conn.log shows new communication patterns (e.g., new external peers, new protocols).",
            "data_sources": [
              "Zeek conn.log",
              "Zeek files.log",
              "SNMP/Syslog server logs"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Core network taps, network device management subnets, perimeter monitoring points, and centralized logging platforms collecting SNMP and Syslog data from network infrastructure.",
            "action": [
              "Define a stateful detection rule that triggers on the following sequence: (1) Zeek files.log shows a transfer to a network device IP. (2) Within 15 minutes, syslog/SNMP logs for that IP cease for at least 60 seconds. (3) Within 1 hour after logs resume, Zeek conn.log shows a connection from that device to an external IP not seen communicating with that device in the last 30 days.",
              "Upon detecting a file transfer to a network device exceeding the 98th percentile in size, collect the set of unique `(id.resp_h, id.resp_p, proto)` tuples from Zeek conn.log for the 1 hour before the transfer (Set A) and the 1 hour after connectivity is restored (Set B). Calculate the Jaccard similarity between Set A and Set B. Alert if the similarity is below 0.5.",
              "Construct a multi-stage detection pipeline: Stage 1 flags suspicious file transfers. Stage 2 uses a time series anomaly detection model on SNMP/syslog volume to detect a device reboot. Stage 3, upon detecting a reboot post-transfer, extracts features from the device's post-reboot traffic and uses an unsupervised clustering algorithm (e.g., DBSCAN) to determine if this new traffic profile is an outlier compared to its historical clusters."
            ]
          },
          {
            "description": "A network device, identified by its IP address in Zeek conn.log or dns.log, initiates or receives a connection with a peer IP or uses a protocol/port that violates its defined communication baseline. For example, a core switch (`id.orig_h`) making a DNS query (`proto`='udp', `id.resp_p`=53) to an external resolver.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress/ingress traffic points, DNS server logs, intra-VLAN traffic monitoring points, and Zeek sensors monitoring north-south and east-west traffic segments.",
            "action": [
              "For each network device role (e.g., 'core-switch', 'vpn-concentrator'), create an explicit allow-list of authorized protocols, destination ports, and peer subnets. Create a rule to alert on any connection in Zeek conn.log involving a network device that violates this allow-list.",
              "For each network device, maintain a 30-day baseline of all remote peers (`id.resp_h` or `id.orig_h`) and the frequency of communication. Alert when a device communicates with a remote peer not seen in the last 30 days ('first seen'). Prioritize alerts where the destination port is also statistically rare for that device (e.g., below the 10th percentile of port usage frequency).",
              "Model network communication patterns from Zeek conn.log as a graph, where nodes are IPs and edges represent connections. Train a graph neural network (GNN) autoencoder on historical data to learn normal network topology. At inference time, score each new connection based on its reconstruction error. Alert on connections with a high reconstruction error, as they represent topologically anomalous communications."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]