[
  {
    "information_requirement": "Is the adversary using protocol tunneling for command and control communications? (PIR)",
    "tactic_id": "TA0011",
    "tactic_name": "Command and Control",
    "indicators": [
      {
        "technique_id": "T1572",
        "name": "Protocol Tunneling",
        "evidence": [
          {
            "description": "Evidence of a network connection from an internal host to an external IP address or domain that matches an entry on a threat intelligence feed of known C2 servers utilizing protocol tunneling.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Egress firewalls and proxies, Recursive DNS servers, Network sensor grid",
            "action": [
              "Symbolic Logic: Continuously join the destination IP ('id.resp_h') from Zeek conn.log and the queried domain ('query') from Zeek dns.log against a high-confidence threat intelligence feed of known protocol tunneling C2 indicators. Generate a high-severity alert for any match.",
              "Statistical Analysis: For each source host, calculate the hourly rate of connections to new, never-before-seen destination domains. Establish a baseline for this rate across all hosts. Flag any source host whose rate of new domain connections exceeds the 95th percentile of the baseline, indicating a potential spray of connections to dynamically generated C2 infrastructure.",
              "Machine Learning: Train a supervised classification model (e.g., Random Forest) using labeled data of known benign and C2 connections. Extract features from Zeek conn.log and ssl.log such as connection duration, orig_bytes, resp_bytes, service, JA3/JA3S hashes, and certificate issuer/subject. Use the trained model to classify new, unknown connections and flag those with a high probability score of being malicious."
            ]
          },
          {
            "description": "Evidence of a process creation event (Windows Event ID 4688) for a known tunneling tool (e.g., plink.exe, chisel.exe) or a legitimate utility (e.g., ssh.exe) with command-line arguments indicative of tunneling (e.g., -L, -R, -D).",
            "data_sources": [
              "Windows Event ID 4688",
              "Zeek conn.log",
              "Zeek ssh.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "User workstations, Application servers, Domain Controllers, Developer endpoints",
            "action": [
              "Symbolic Logic: Monitor Windows Event ID 4688 process creation events. Alert immediately if the 'NewProcessName' matches a watchlist of known tunneling tools (e.g., 'plink.exe', 'chisel.exe', 'iodine.exe') or if the 'CommandLine' for legitimate tools (e.g., 'ssh.exe', 'powershell.exe') contains known tunneling flags like '-L', '-R', '-D', or '-EncodedCommand'.",
              "Statistical Analysis: For legitimate processes like 'ssh.exe', establish a baseline of common command-line argument patterns over a 30-day period. Calculate the character entropy and length of all command-line arguments for each execution. Flag any execution where the argument entropy or length exceeds 3 standard deviations from the established norm for that specific process, indicating potentially obfuscated or unusually complex parameters.",
              "Machine Learning: Use an unsupervised clustering algorithm (e.g., DBSCAN) on command-line arguments from Windows Event ID 4688, after tokenizing them by splitting on spaces and special characters. Identify large clusters representing normal activity for common processes. Flag any process execution that is classified as noise (not belonging to any cluster) or falls into a very small, anomalous cluster, as these may represent unique, malicious command invocations."
            ]
          },
          {
            "description": "Evidence of DNS queries with characteristics indicative of tunneling, such as subdomain label length exceeding the 99th percentile for the environment, a query rate from a single client to a single domain exceeding 3 standard deviations above its baseline, or a ratio of TXT/NULL queries to A/AAAA queries for a given domain that is anomalously high.",
            "data_sources": [
              "Zeek dns.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Internal DNS resolvers, Egress network gateways",
            "action": [
              "Symbolic Logic: Apply a ruleset to Zeek dns.log data that matches DNS queries against regular expressions and domains known to be associated with DNS tunneling tools (e.g., Iodine, dnscat2). For example, search for domains matching patterns like '*.t.domain.com' or queries containing hex-encoded strings.",
              "Statistical Analysis: From Zeek dns.log, calculate the character entropy and length of the queried subdomain for every DNS request. Establish a 30-day baseline mean and standard deviation for these metrics. Flag any query where the subdomain entropy or length is greater than 3 standard deviations above the mean. Additionally, track the ratio of TXT/CNAME/NULL queries to A/AAAA queries per source IP and second-level domain; flag ratios that exceed the 99th percentile of the historic baseline.",
              "Machine Learning: Apply a time-series forecasting model (e.g., ARIMA or Prophet) to model the expected volume of DNS queries per hour for each host in the network. Generate an alert when a host's actual query volume significantly exceeds the forecasted volume, especially if combined with other statistical flags (high entropy, unusual query types), which strongly indicates active DNS tunneling C2.",
              "Symbolic Logic: Continuously join the destination IP ('id.resp_h') from Zeek conn.log and the queried domain ('query') from Zeek dns.log against a high-confidence threat intelligence feed of known protocol tunneling C2 indicators. Generate a high-severity alert for any match."
            ]
          },
          {
            "description": "Evidence of a network connection exhibiting an outbound-to-inbound data ratio that is a statistical outlier for its protocol (e.g., >99th percentile for DNS), or shows small, regularly timed data transfers (low jitter) indicative of C2 heartbeats over a long-lived connection.",
            "data_sources": [
              "Zeek conn.log",
              "Zeek ssl.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Network core switches, Egress points, Servers hosting common services (e.g., HTTP, DNS)",
            "action": [
              "Symbolic Logic: For unencrypted protocols, scan payload data for known headers or handshake artifacts associated with tunneling tools like Chisel or Iodine. For SSH, inspect Zeek ssh.log for entries where 'client_channels' or 'server_channels' is greater than 0 on connections to non-standard or untrusted destinations, indicating active port forwarding.",
              "Statistical Analysis: For each connection in Zeek conn.log, calculate the ratio of outbound bytes ('orig_bytes') to inbound bytes ('resp_bytes'). Establish a per-protocol baseline (e.g., for 'dns', 'http', 'ssl'). Flag connections where the ratio is a statistical outlier (e.g., >99th percentile), such as large uploads over DNS. Separately, calculate the standard deviation of packet inter-arrival times for sessions longer than 10 minutes; a very low standard deviation suggests periodic, automated C2 heartbeating.",
              "Machine Learning: Train a Random Forest or Gradient Boosting classifier on labeled Zeek conn.log data. Use features such as protocol, duration, orig_bytes, resp_bytes, service, connection state, and features derived from the source/destination IP (e.g., is internal, is public). The model will learn to distinguish benign traffic from various forms of tunneled C2 traffic. Apply the model to live traffic to identify and score suspicious connections in real-time."
            ]
          },
          {
            "description": "Evidence of a process initiating an outbound network connection (Windows Event ID 5156) where the process itself is not expected to generate network traffic (e.g., notepad.exe), or is a legitimate process running from an unusual path or context (e.g., svchost.exe from a user's home directory).",
            "data_sources": [
              "Windows Event ID 4688",
              "Windows Event ID 5156",
              "Zeek conn.log"
            ],
            "data_platforms": [
              "TBD"
            ],
            "nai": "Critical infrastructure (e.g., Domain Controllers, database servers), User endpoint devices, Application servers",
            "action": [
              "Symbolic Logic: Create and maintain a strict watchlist of parent-child process relationships (e.g., 'winlogon.exe' -> 'lsass.exe') and processes that should never make network connections (e.g., 'calc.exe', 'notepad.exe'). Use Windows Event IDs 4688 (Process Creation) and 5156 (Network Connection) to alert on any deviation, such as 'notepad.exe' initiating an outbound connection.",
              "Statistical Analysis: For each process name (e.g., 'svchost.exe', 'powershell.exe'), create a statistical baseline of normal network behavior over a 30-day period, including common destination ports, data volume, and connection frequency. Use Windows Event ID 5156 to flag any connection from these processes to a destination port that falls outside the top 95% of historically seen ports for that process, or a connection frequency that is more than 3 standard deviations above the process's established average.",
              "Machine Learning: Train an autoencoder neural network on tuples of (process name, parent process name, command line hash, destination IP, destination port) from a known-good baseline of endpoint activity (Windows Event IDs 4688 & 5156). Feed live event data into the trained model. Events that the model cannot reconstruct with low error (high reconstruction error) are flagged as anomalous. This technique is effective at detecting a legitimate process like 'svchost.exe' making a novel or unexpected network connection, which can be indicative of process injection followed by tunneling."
            ]
          }
        ]
      }
    ],
    "last_updated": "2025-09-30",
    "version": "2.3",
    "date_created": "2025-05-04",
    "contributors": [
      "Zachary Szewczyk",
      "Ask Sage"
    ]
  }
]